{"sha": "6acfe908e3d037bc48d46e72aa02f2949011caee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjZmU5MDhlM2QwMzdiYzQ4ZDQ2ZTcyYWEwMmYyOTQ5MDExY2FlZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-09-02T23:40:51Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-09-02T23:40:51Z"}, "message": "(min_precision): Move from c-decl.c\n\nFrom-SVN: r8020", "tree": {"sha": "51a80e6d7f5d01930d2f10061a4ec67d58d424e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a80e6d7f5d01930d2f10061a4ec67d58d424e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6acfe908e3d037bc48d46e72aa02f2949011caee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acfe908e3d037bc48d46e72aa02f2949011caee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acfe908e3d037bc48d46e72aa02f2949011caee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acfe908e3d037bc48d46e72aa02f2949011caee/comments", "author": null, "committer": null, "parents": [{"sha": "8294accf6dc5c51c9112478f5025faa2b8b5931a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8294accf6dc5c51c9112478f5025faa2b8b5931a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8294accf6dc5c51c9112478f5025faa2b8b5931a"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "a0b7fd36facf6e3c65e4498d9acffaa18c2d5d41", "filename": "gcc/c-common.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acfe908e3d037bc48d46e72aa02f2949011caee/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acfe908e3d037bc48d46e72aa02f2949011caee/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6acfe908e3d037bc48d46e72aa02f2949011caee", "patch": "@@ -1346,6 +1346,37 @@ type_for_mode (mode, unsignedp)\n   return 0;\n }\n \f\n+/* Return the minimum number of bits needed to represent VALUE in a\n+   signed or unsigned type, UNSIGNEDP says which.  */\n+\n+int\n+min_precision (value, unsignedp)\n+     tree value;\n+     int unsignedp;\n+{\n+  int log;\n+\n+  /* If the value is negative, compute its negative minus 1.  The latter\n+     adjustment is because the absolute value of the largest negative value\n+     is one larger than the largest positive value.  This is equivalent to\n+     a bit-wise negation, so use that operation instead.  */\n+\n+  if (tree_int_cst_sgn (value) < 0)\n+    value = fold (build1 (BIT_NOT_EXPR, TREE_TYPE (value), value));\n+\n+  /* Return the number of bits needed, taking into account the fact\n+     that we need one more bit for a signed than unsigned type.  */\n+\n+  if (integer_zerop (value))\n+    log = 0;\n+  else if (TREE_INT_CST_HIGH (value) != 0)\n+    log = HOST_BITS_PER_WIDE_INT + floor_log2 (TREE_INT_CST_HIGH (value));\n+  else\n+    log = floor_log2 (TREE_INT_CST_LOW (value));\n+\n+  return log + 1 + ! unsignedp;\n+}\n+\f\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n "}]}