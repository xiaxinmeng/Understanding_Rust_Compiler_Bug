{"sha": "6eacd27c13582f51cc42088ffd1734953b2ce8ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhY2QyN2MxMzU4MmY1MWNjNDIwODhmZmQxNzM0OTUzYjJjZThlZg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-25T08:21:17Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-25T08:21:17Z"}, "message": "AVX-512. Add mov[dlh]dup insns support.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_insn \"avx_movshdup256<mask_name>\"): Add masking.\n\t(define_insn \"sse3_movshdup<mask_name>\"): Ditto.\n\t(define_insn \"avx_movsldup256<mask_name>\"): Ditto.\n\t(define_insn \"sse3_movsldup<mask_name>\"): Ditto.\n\t(define_insn \"vec_dupv2df<mask_name>\"): Ditto.\n\t(define_insn \"*vec_concatv2df\"): Add EVEX version.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215589", "tree": {"sha": "54b5f3452e6524c59d5cbb96e3efb106a851bccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b5f3452e6524c59d5cbb96e3efb106a851bccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eacd27c13582f51cc42088ffd1734953b2ce8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eacd27c13582f51cc42088ffd1734953b2ce8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eacd27c13582f51cc42088ffd1734953b2ce8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eacd27c13582f51cc42088ffd1734953b2ce8ef/comments", "author": null, "committer": null, "parents": [{"sha": "deb90bb564d2b34ce670ade76990ebe5f20abd86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb90bb564d2b34ce670ade76990ebe5f20abd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb90bb564d2b34ce670ade76990ebe5f20abd86"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "8e357ac07338265018d467eb89ab7cc4aea5eaf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eacd27c13582f51cc42088ffd1734953b2ce8ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eacd27c13582f51cc42088ffd1734953b2ce8ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6eacd27c13582f51cc42088ffd1734953b2ce8ef", "patch": "@@ -1,3 +1,20 @@\n+2014-09-25  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_insn \"avx_movshdup256<mask_name>\"): Add masking.\n+\t(define_insn \"sse3_movshdup<mask_name>\"): Ditto.\n+\t(define_insn \"avx_movsldup256<mask_name>\"): Ditto.\n+\t(define_insn \"sse3_movsldup<mask_name>\"): Ditto.\n+\t(define_insn \"vec_dupv2df<mask_name>\"): Ditto.\n+\t(define_insn \"*vec_concatv2df\"): Add EVEX version.\n+\n 2014-09-25  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "0ed93335871f4d4bca9b6c588de8ad0d6cb1fd83", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eacd27c13582f51cc42088ffd1734953b2ce8ef/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eacd27c13582f51cc42088ffd1734953b2ce8ef/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6eacd27c13582f51cc42088ffd1734953b2ce8ef", "patch": "@@ -5735,34 +5735,34 @@\n \n ;; These are modeled with the same vec_concat as the others so that we\n ;; capture users of shufps that can use the new instructions\n-(define_insn \"avx_movshdup256\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+(define_insn \"avx_movshdup256<mask_name>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SF\n \t  (vec_concat:V16SF\n-\t    (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")\n+\t    (match_operand:V8SF 1 \"nonimmediate_operand\" \"vm\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 1) (const_int 1)\n \t\t     (const_int 3) (const_int 3)\n \t\t     (const_int 5) (const_int 5)\n \t\t     (const_int 7) (const_int 7)])))]\n-  \"TARGET_AVX\"\n-  \"vmovshdup\\t{%1, %0|%0, %1}\"\n+  \"TARGET_AVX && <mask_avx512vl_condition>\"\n+  \"vmovshdup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"sse3_movshdup\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+(define_insn \"sse3_movshdup<mask_name>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 1)\n \t\t     (const_int 1)\n \t\t     (const_int 7)\n \t\t     (const_int 7)])))]\n-  \"TARGET_SSE3\"\n-  \"%vmovshdup\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE3 && <mask_avx512vl_condition>\"\n+  \"%vmovshdup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -5788,34 +5788,34 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])\n \n-(define_insn \"avx_movsldup256\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+(define_insn \"avx_movsldup256<mask_name>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SF\n \t  (vec_concat:V16SF\n-\t    (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")\n+\t    (match_operand:V8SF 1 \"nonimmediate_operand\" \"vm\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 0) (const_int 0)\n \t\t     (const_int 2) (const_int 2)\n \t\t     (const_int 4) (const_int 4)\n \t\t     (const_int 6) (const_int 6)])))]\n-  \"TARGET_AVX\"\n-  \"vmovsldup\\t{%1, %0|%0, %1}\"\n+  \"TARGET_AVX && <mask_avx512vl_condition>\"\n+  \"vmovsldup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"sse3_movsldup\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+(define_insn \"sse3_movsldup<mask_name>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 0)\n \t\t     (const_int 6)\n \t\t     (const_int 6)])))]\n-  \"TARGET_SSE3\"\n-  \"%vmovsldup\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE3 && <mask_avx512vl_condition>\"\n+  \"%vmovsldup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -8301,24 +8301,24 @@\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex,orig,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"DF,DF,V1DF,V1DF,V1DF,V2DF,V1DF,V1DF,V1DF\")])\n \n-(define_insn \"vec_dupv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x\")\n+(define_insn \"vec_dupv2df<mask_name>\"\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,v\")\n \t(vec_duplicate:V2DF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,xm\")))]\n-  \"TARGET_SSE2\"\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,vm\")))]\n+  \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"@\n    unpcklpd\\t%0, %0\n-   %vmovddup\\t{%1, %0|%0, %1}\"\n+   %vmovddup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,sse3\")\n    (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"V2DF,DF\")])\n \n (define_insn \"*vec_concatv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,x,x,x,x,x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,v,v,x,x,v,x,x\")\n \t(vec_concat:V2DF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,x,m,0,x,m,0,0\")\n-\t  (match_operand:DF 2 \"vector_move_operand\"  \" x,x,1,m,m,C,x,m\")))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,v,m,0,x,m,0,0\")\n+\t  (match_operand:DF 2 \"vector_move_operand\"  \" x,v,1,m,m,C,x,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}"}]}