{"sha": "9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExNzlkMDE5ZjY3ZTVmZDAwNTNjMGJiNzRhZDhhMTM3NjdjYmE5Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-03T23:52:18Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-03T23:52:18Z"}, "message": "In gcc/c-family/: 2010-11-03 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/c-family/:\n2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* c.opt (Wproperty-assign-default): New option.\n\nIn gcc/objc/:\n2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (objc_add_dynamic_declaration): Allow @dynamic in a\n\tcategory.\n\t(objc_type_valid_for_messaging): Added 'accept_classes' argument;\n\tif set to 'true', return 'true' for Class objects.  Do not remove\n\tmore than on pointer indirection.\n\t(objc_add_property_declaration): Only warn about 'assign'\n\tsemantics for Objective-C objects if warn_property_assign_default;\n\tand do not warn if the property is readonly or if the type is a Class.\n\t(objc_finish_foreach_loop): Updated calls to\n\tobjc_type_valid_for_messaging.\n\t\nIn gcc/testsuite/:\n2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/property/dynamic-2.m: Updated for the fact that @dynamic\n\tis now allowed in categories.\n\t* obj-c++.dg/property/dynamic-2.mm: Same change.\n\t* objc.dg/property/dynamic-3.m: New.\n\t* obj-c++.dg/property/dynamic-3.mm: New.\n\t* objc.dg/property/at-property-14.m: New.\n\t* objc.dg/property/at-property-15.m: New.\n\t* obj-c++.dg/property/at-property-14.mm: New.\n\t* obj-c++.dg/property/at-property-15.mm: New.\t\n\n\t* objc.dg/foreach-6.m: Added a few more tests for valid and\n\tinvalid iterating variables and collections.\n\nFrom-SVN: r166287", "tree": {"sha": "8b870d1d67aef3b800e92af6356bff7e92eb975b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b870d1d67aef3b800e92af6356bff7e92eb975b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37da368856ad8e3f76f50f429211d6cd0748a5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37da368856ad8e3f76f50f429211d6cd0748a5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37da368856ad8e3f76f50f429211d6cd0748a5f5"}], "stats": {"total": 336, "additions": 294, "deletions": 42}, "files": [{"sha": "fc3a89564042c64441d32f0351a89ea2477c4645", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -1,3 +1,7 @@\n+2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c.opt (Wproperty-assign-default): New option.\n+\n 2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tImplemented -fobjc-std=objc1 flag."}, {"sha": "01ce661aa72fe1692e991ea94d88360175537f33", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -557,6 +557,10 @@ Wpragmas\n C ObjC C++ ObjC++ Var(warn_pragmas) Init(1) Warning\n Warn about misuses of pragmas\n \n+Wproperty-assign-default\n+ObjC ObjC++ Var(warn_property_assign_default) Init(1) Warning\n+Warn if a property for an Objective-C object has no assign semantics specified\n+\n Wprotocol\n ObjC ObjC++ Var(warn_protocol) Init(1) Warning\n Warn if inherited methods are unimplemented"}, {"sha": "bc9aebc85634234f7e0e686c683f6ba0ada6a1c1", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -1,3 +1,16 @@\n+2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_add_dynamic_declaration): Allow @dynamic in a\n+\tcategory.\n+\t(objc_type_valid_for_messaging): Added 'accept_classes' argument;\n+\tif set to 'true', return 'true' for Class objects.  Do not remove\n+\tmore than on pointer indirection.\n+\t(objc_add_property_declaration): Only warn about 'assign'\n+\tsemantics for Objective-C objects if warn_property_assign_default;\n+\tand do not warn if the property is readonly or if the type is a Class.\n+\t(objc_finish_foreach_loop): Updated calls to\n+\tobjc_type_valid_for_messaging.\n+\t\n 2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tImplemented -fobjc-std=objc1 flag."}, {"sha": "40ecc4cb580bbfeeed1e031afe143abb20667b2f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 60, "deletions": 39, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -278,7 +278,7 @@ static void generate_struct_by_value_array (void)\n      ATTRIBUTE_NORETURN;\n static void mark_referenced_methods (void);\n static void generate_objc_image_info (void);\n-static bool objc_type_valid_for_messaging (tree typ);\n+static bool objc_type_valid_for_messaging (tree type, bool allow_classes);\n \n /*** Private Interface (data) ***/\n \n@@ -937,40 +937,44 @@ objc_add_property_declaration (location_t location, tree decl,\n \n   /* TODO: Check that the property type is an Objective-C object or a \"POD\".  */\n \n-  if (property_assign_semantics == OBJC_PROPERTY_ASSIGN)\n-    {\n+  /* Implement -Wproperty-assign-default (which is enabled by default).  */\n+  if (warn_property_assign_default\n       /* If garbage collection is not being used, then 'assign' is\n \t valid for objects (and typically used for delegates) but it\n \t is wrong in most cases (since most objects need to be\n \t retained or copied in setters).  Warn users when 'assign' is\n \t used implicitly.  */\n+      && property_assign_semantics == OBJC_PROPERTY_ASSIGN\n+      /* Read-only properties are never assigned, so the assignment\n+\t semantics do not matter in that case.  */\n+      && !property_readonly\n+      && !flag_objc_gc)\n+    {\n       /* Please note that it would make sense to default to 'assign'\n \t for non-{Objective-C objects}, and to 'retain' for\n \t Objective-C objects.  But that would break compatibility with\n \t other compilers.  */\n-      if (!flag_objc_gc)\n+      if (!parsed_property_assign && !parsed_property_retain && !parsed_property_copy)\n \t{\n-\t  if (!parsed_property_assign && !parsed_property_retain && !parsed_property_copy)\n+\t  /* Use 'false' so we do not warn for Class objects.  */\n+\t  if (objc_type_valid_for_messaging (TREE_TYPE (decl), false))\n \t    {\n-\t      if (objc_type_valid_for_messaging (TREE_TYPE (decl)))\n-\t\t{\n-\t\t  warning_at (location, \n-\t\t\t      0,\n-\t\t\t      \"object property %qD has no %<assign%>, %<retain%> or %<copy%> attribute; assuming %<assign%>\", \n-\t\t\t      decl);\n-\t\t  inform (location, \n-\t\t\t  \"%<assign%> can be unsafe for Objective-C objects; please state explicitly if you need it\");\n-\t\t}\n+\t      warning_at (location, \n+\t\t\t  0,\n+\t\t\t  \"object property %qD has no %<assign%>, %<retain%> or %<copy%> attribute; assuming %<assign%>\", \n+\t\t\t  decl);\n+\t      inform (location, \n+\t\t      \"%<assign%> can be unsafe for Objective-C objects; please state explicitly if you need it\");\n \t    }\n \t}\n     }\n   \n   if (property_assign_semantics == OBJC_PROPERTY_RETAIN\n-      && !objc_type_valid_for_messaging (TREE_TYPE (decl)))\n+      && !objc_type_valid_for_messaging (TREE_TYPE (decl), true))\n     error_at (location, \"%<retain%> attribute is only valid for Objective-C objects\");\n   \n   if (property_assign_semantics == OBJC_PROPERTY_COPY\n-      && !objc_type_valid_for_messaging (TREE_TYPE (decl)))\n+      && !objc_type_valid_for_messaging (TREE_TYPE (decl), true))\n     error_at (location, \"%<copy%> attribute is only valid for Objective-C objects\");\n \n   /* Check for duplicate property declarations.  We first check the\n@@ -9394,7 +9398,6 @@ objc_add_synthesize_declaration (location_t location, tree property_and_ivar_lis\n \n   if (TREE_CODE (objc_implementation_context) == CATEGORY_IMPLEMENTATION_TYPE)\n     {\n-      /* TODO: Maybe we should allow @synthesize in categories ?  */\n       error_at (location, \"%<@synthesize%> can not be used in categories\");\n       return;\n     }\n@@ -9445,9 +9448,8 @@ objc_add_dynamic_declaration_for_property (location_t location, tree interface,\n \treturn;\n       }\n \n-  /* Check that the property is declared in the interface.  */\n-  /* TODO: This only check the immediate class; we need to check the\n-     superclass (and categories ?) as well.  */\n+  /* Check that the property is declared in the corresponding\n+     interface.  */\n   for (property = CLASS_PROPERTY_DECL (interface); property; property = TREE_CHAIN (property))\n     if (PROPERTY_NAME (property) == property_name)\n       break;\n@@ -9515,18 +9517,24 @@ objc_add_dynamic_declaration (location_t location, tree property_list)\n       return;\n     }\n \n-  if (TREE_CODE (objc_implementation_context) == CATEGORY_IMPLEMENTATION_TYPE)\n+  /* @dynamic is allowed in categories.  */\n+  switch (TREE_CODE (objc_implementation_context))\n     {\n-      /* TODO: Maybe we should allow @dynamic in categories ?  */\n-      error_at (location, \"%<@dynamic%> can not be used in categories\");\n-      return;\n+    case CLASS_IMPLEMENTATION_TYPE:\n+      interface = lookup_interface (CLASS_NAME (objc_implementation_context));\n+      break;\n+    case CATEGORY_IMPLEMENTATION_TYPE:\n+      interface = lookup_category (implementation_template, \n+\t\t\t\t   CLASS_SUPER_NAME (objc_implementation_context));\n+      break;\n+    default:\n+      gcc_unreachable ();\n     }\n-  \n-  interface = lookup_interface (CLASS_NAME (objc_implementation_context));\n+\n   if (!interface)\n     {\n       /* I can't see how this could happen, but it is good as a safety check.  */\n-      error_at (location, \n+      error_at (location,\n \t\t\"%<@dynamic%> requires the @interface of the class to be available\");\n       return;\n     }\n@@ -12030,24 +12038,37 @@ objc_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n #endif\n }\n \n-/* This routine returns true if TYP is a valid objc object type, \n-   suitable for messaging; false otherwise.\n-*/\n+/* This routine returns true if TYPE is a valid objc object type,\n+   suitable for messaging; false otherwise.  If 'accept_class' is\n+   'true', then a Class object is considered valid for messaging and\n+   'true' is returned if 'type' refers to a Class.  If 'accept_class'\n+   is 'false', then a Class object is not considered valid for\n+   messaging and 'false' is returned in that case.  */\n \n static bool\n-objc_type_valid_for_messaging (tree typ)\n+objc_type_valid_for_messaging (tree type, bool accept_classes)\n {\n-  if (!POINTER_TYPE_P (typ))\n+  if (!POINTER_TYPE_P (type))\n     return false;\n \n-  do\n-    typ = TREE_TYPE (typ);  /* Remove indirections.  */\n-  while (POINTER_TYPE_P (typ));\n+  /* Remove the pointer indirection; don't remove more than one\n+     otherwise we'd consider \"NSObject **\" a valid type for messaging,\n+     which it isn't.  */\n+  type = TREE_TYPE (type);\n \n-  if (TREE_CODE (typ) != RECORD_TYPE)\n+  if (TREE_CODE (type) != RECORD_TYPE)\n     return false;\n \n-  return objc_is_object_id (typ) || TYPE_HAS_OBJC_INFO (typ);\n+  if (objc_is_object_id (type))\n+    return true;\n+\n+  if (accept_classes && objc_is_class_id (type))\n+    return true;\n+\n+  if (TYPE_HAS_OBJC_INFO (type))\n+    return true;\n+\n+  return false;\n }\n \n /* Begin code generation for fast enumeration (foreach) ... */\n@@ -12215,13 +12236,13 @@ objc_finish_foreach_loop (location_t location, tree object_expression, tree coll\n   if (collection_expression == error_mark_node)\n     return;\n \n-  if (!objc_type_valid_for_messaging (TREE_TYPE (object_expression)))\n+  if (!objc_type_valid_for_messaging (TREE_TYPE (object_expression), true))\n     {\n       error (\"iterating variable in fast enumeration is not an object\");\n       return;\n     }\n \n-  if (!objc_type_valid_for_messaging (TREE_TYPE (collection_expression)))\n+  if (!objc_type_valid_for_messaging (TREE_TYPE (collection_expression), true))\n     {\n       error (\"collection in fast enumeration is not an object\");\n       return;"}, {"sha": "f607bebd83d04eadc8fc0465e8d2c97a58da000e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -1,3 +1,18 @@\n+2010-11-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/property/dynamic-2.m: Updated for the fact that @dynamic\n+\tis now allowed in categories.\n+\t* obj-c++.dg/property/dynamic-2.mm: Same change.\n+\t* objc.dg/property/dynamic-3.m: New.\n+\t* obj-c++.dg/property/dynamic-3.mm: New.\n+\t* objc.dg/property/at-property-14.m: New.\n+\t* objc.dg/property/at-property-15.m: New.\n+\t* obj-c++.dg/property/at-property-14.mm: New.\n+\t* obj-c++.dg/property/at-property-15.mm: New.\t\n+\n+\t* objc.dg/foreach-6.m: Added a few more tests for valid and\n+\tinvalid iterating variables and collections.\n+\t\n 2010-11-03  Xinliang David Li  <davidxl@google.com>\n \n        PR target/46200"}, {"sha": "af427387349c73cff624343eafc46f3da0e3e416", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-14.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -0,0 +1,24 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+\n+/* Test the warnings on 'assign'.  */\n+/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n+   generates the messages, but the testsuite still complains.  */\n+/*@property id property_a; */     /*  dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\"  */\n+\t\t\t      /*  dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 12  */\n+\n+@property (readonly) id property_b; /* No 'assign' warning (assign semantics do not matter if the property is readonly).  */\n+@property id *property_c;           /* No 'assign' warning (the type is not an Objective-C object).  */\n+@property Class property_d;         /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them).  */\n+/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n+   generates the messages, but the testsuite still complains.  */\n+/*@property MyRootClass *property_e;*/  /*  dg-warning \"object property .property.e. has no .assign., .retain. or .copy. attribute\"  */\n+\t\t\t            /*  dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 18  */\n+@end"}, {"sha": "ef53442460f2ad26954c67c829cc43b2d3929f94", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-15.mm", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-15.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-15.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-15.mm?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -0,0 +1,20 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-property-assign-default\" } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that -Wno-property-assign-default turns off all \"object\n+   property xxx has no assign, return or copy attribute\" warnings.  */\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+\n+@property id property_a;            /* Would normally generate a warning.  */\n+@property (readonly) id property_b;\n+@property id *property_c;          \n+@property Class property_d;        \n+@property MyRootClass *property_e; /* Would normally generate a warning.  */\n+@end"}, {"sha": "631eeeecc50a1ef742ac611d0c0545a8e044065e", "filename": "gcc/testsuite/obj-c++.dg/property/dynamic-2.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -24,9 +24,10 @@ @implementation Test\n \n \n @interface Test (Category)\n+@property int v1;\n @end\n @implementation Test (Category)\n-@dynamic v1;  /* { dg-error \".@dynamic. can not be used in categories\" } */\n+@dynamic v1;\n @end\n \n "}, {"sha": "e8a6693b04e8f7999c4b437f7adb74fea088dca9", "filename": "gcc/testsuite/obj-c++.dg/property/dynamic-3.mm", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-3.mm?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -0,0 +1,49 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyRootClass\n+@end\n+\n+/* Test @property/@dynamic in a category.  First, a case where\n+   @dynamic should turn off all warnings.  */\n+\n+@interface MyRootClass (Category)\n+@property int a;\n+- (int) test;\n+@end\n+@implementation MyRootClass (Category)\n+@dynamic a;\n+- (int) test\n+{\n+  return self.a; /* This should compile into [self a] with no warnings.  */\n+}\n+@end\n+\n+\n+\n+/* Test @property/@dynamic in a category.  Second, a case with a\n+   missing setter and no @dynamic.  A warning should be generated.  */\n+\n+@interface MyRootClass (Category2)\n+@property int b;\n+- (int) test;\n+@end\n+@implementation MyRootClass (Category2)\n+- (int) b\n+{\n+  return 0;\n+}\n+- (int) test\n+{\n+  return self.b;\n+}\n+@end /* { dg-warning \"incomplete implementation\" } */\n+/* { dg-warning \"method definition for .-setB:. not found\" \"\" { target *-*-* } 48 } */"}, {"sha": "3578b77aa62af90fbe9208e89eea5042e41aae15", "filename": "gcc/testsuite/objc.dg/foreach-6.m", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-6.m?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -18,12 +18,14 @@ - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState\n                                      objects:(id *)stackbuf \n                                        count:(unsigned int)len;\n - (id) enumerator;\n+- (Class) classEnumerator;\n @end\n \n int main (void)\n {\n   id array = nil;\n   id object = nil;\n+  id *invalid = 0;\n \n   for (object in array) /* Ok */\n     ;\n@@ -40,11 +42,20 @@ int main (void)\n   for (object in [object enumerator]) /* Ok */\n     ;\n \n+  for (object in [object classEnumerator]) /* Ok */\n+    ;\n+\n   for (12 in array) /* { dg-error \"invalid iterating variable in fast enumeration\" } */\n     ; /* { dg-error \"iterating variable in fast enumeration is not an object\" } */\n \n   for (object in 12)\n     ; /* { dg-error \"collection in fast enumeration is not an object\" } */\n \n+  for (object in invalid)\n+    ; /* { dg-error \"collection in fast enumeration is not an object\" } */\n+\n+  for (invalid in [object enumerator])\n+    ; /* { dg-error \"iterating variable in fast enumeration is not an object\" } */\n+\n   return 0;\n }"}, {"sha": "ccf842b7fdf8e67f7298c691a6f856990fbaa270", "filename": "gcc/testsuite/objc.dg/property/at-property-14.m", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-14.m?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -0,0 +1,20 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+\n+/* Test the warnings on 'assign'.  */\n+@property id property_a;      /* { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t      /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 12 } */\n+\n+@property (readonly) id property_b; /* No 'assign' warning (assign semantics do not matter if the property is readonly).  */\n+@property id *property_c;           /* No 'assign' warning (the type is not an Objective-C object).  */\n+@property Class property_d;         /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them).  */\n+@property MyRootClass *property_e;  /* { dg-warning \"object property .property.e. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t            /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 18 } */\n+@end"}, {"sha": "ef53442460f2ad26954c67c829cc43b2d3929f94", "filename": "gcc/testsuite/objc.dg/property/at-property-15.m", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-15.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-15.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-15.m?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -0,0 +1,20 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-property-assign-default\" } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that -Wno-property-assign-default turns off all \"object\n+   property xxx has no assign, return or copy attribute\" warnings.  */\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+\n+@property id property_a;            /* Would normally generate a warning.  */\n+@property (readonly) id property_b;\n+@property id *property_c;          \n+@property Class property_d;        \n+@property MyRootClass *property_e; /* Would normally generate a warning.  */\n+@end"}, {"sha": "203ba34a1f3171406668226ddc1626ea85572622", "filename": "gcc/testsuite/objc.dg/property/dynamic-2.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-2.m?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -24,9 +24,10 @@ @implementation Test\n \n \n @interface Test (Category)\n+@property int v1;\n @end\n @implementation Test (Category)\n-@dynamic v1;  /* { dg-error \".@dynamic. can not be used in categories\" } */\n+@dynamic v1;\n @end\n \n \n@@ -39,6 +40,6 @@ @interface AnotherTest : MyRootClass\n @implementation AnotherTest\n @dynamic one;\n @dynamic one; /* { dg-error \"property .one. already specified in .@dynamic.\" } */\n-              /* { dg-message \"originally specified here\" \"\" { target *-*-* } 40 } */\n+              /* { dg-message \"originally specified here\" \"\" { target *-*-* } 41 } */\n @dynamic three; /* { dg-error \"no declaration of property .three. found in the interface\" } */\n @end"}, {"sha": "e8a6693b04e8f7999c4b437f7adb74fea088dca9", "filename": "gcc/testsuite/objc.dg/property/dynamic-3.m", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a179d019f67e5fd0053c0bb74ad8a13767cba9f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-3.m?ref=9a179d019f67e5fd0053c0bb74ad8a13767cba9f", "patch": "@@ -0,0 +1,49 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyRootClass\n+@end\n+\n+/* Test @property/@dynamic in a category.  First, a case where\n+   @dynamic should turn off all warnings.  */\n+\n+@interface MyRootClass (Category)\n+@property int a;\n+- (int) test;\n+@end\n+@implementation MyRootClass (Category)\n+@dynamic a;\n+- (int) test\n+{\n+  return self.a; /* This should compile into [self a] with no warnings.  */\n+}\n+@end\n+\n+\n+\n+/* Test @property/@dynamic in a category.  Second, a case with a\n+   missing setter and no @dynamic.  A warning should be generated.  */\n+\n+@interface MyRootClass (Category2)\n+@property int b;\n+- (int) test;\n+@end\n+@implementation MyRootClass (Category2)\n+- (int) b\n+{\n+  return 0;\n+}\n+- (int) test\n+{\n+  return self.b;\n+}\n+@end /* { dg-warning \"incomplete implementation\" } */\n+/* { dg-warning \"method definition for .-setB:. not found\" \"\" { target *-*-* } 48 } */"}]}