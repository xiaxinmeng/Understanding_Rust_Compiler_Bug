{"sha": "372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "node_id": "C_kwDOANBUbNoAKDM3MjA0NGE2N2VjODM0NmY0ZjMwOGM1ZmU3OWQ5ZTFjYjZlN2U2YzY", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-02-03T15:57:32Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-10-02T09:13:14Z"}, "message": "Prevent secondary warning from diagnostic tweak in gthr-vxworks.h\n\nWithin gthr-vxworks.h, we prevent C++ errors from missing\ndeclarations in some system headers by prepending their inclusion\nwith a\n\n    #pragma GCC diagnostic ignored \"-Wstrict-prototypes\"\n\nBut Wstrict-prototypes is internally registered as valid for\nC/ObjC only, not C++, and this trick in turn triggers a Wpragma\nwarning with -Wsystem-headers.\n\nThis change just arranges to ignore the secondary warning locally.\n\n2021-02-03  Olivier Hainque  <hainque@adacore.com>\n\n\t* config/gthr-vxworks.h: Prevent Wpragma warning for the\n\tpragma diagnostics on Wstrict-prototypes.", "tree": {"sha": "5fa26cf78af7ce38c3e05c67d9df80e3da0a6a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fa26cf78af7ce38c3e05c67d9df80e3da0a6a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "31c4b9f2557fbe94fe2c68f0d353f6e424c742db", "filename": "libgcc/config/gthr-vxworks.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6/libgcc%2Fconfig%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6/libgcc%2Fconfig%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-vxworks.h?ref=372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "patch": "@@ -38,8 +38,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <_vxworks-versions.h>\n \n /* Some VxWorks headers profusely use typedefs of a pointer to a function with\n-   undefined number of arguments.  */\n+   undefined number of arguments.  Arrange to ignore declaration errors in C++,\n+   which is achievable by ignoring Wstrict-prototypes diagnostics even when the\n+   option is registered as only valid for c/objc.  */\n #pragma GCC diagnostic push\n+  #pragma GCC diagnostic ignored \"-Wpragmas\"\n   #pragma GCC diagnostic ignored \"-Wstrict-prototypes\"\n   #include <semLib.h>\n #pragma GCC diagnostic pop"}]}