{"sha": "e081a9c4c7807286757f2e8054f79cedcb67d5b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4MWE5YzRjNzgwNzI4Njc1N2YyZTgwNTRmNzljZWRjYjY3ZDViMg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2004-01-16T17:11:08Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-01-16T17:11:08Z"}, "message": "re PR java/13273 (gcj generates call to abstract method)\n\n2004-01-16  Andrew Haley  <aph@redhat.com>\n\n\tPR java/13273:\n\t* typeck.c (shallow_find_method): New.\n\t(find_method_in_superclasses): New.\n\t(find_method_in_interfaces): New.\n\t(lookup_do): Rewrite.\n\t* java-tree.h (SEARCH_ONLY_INTERFACE): Delete.\n\n\t* jcf-parse.c (read_class): Save and restore output_class.\n\t* decl.c (java_expand_body): Set output_class from fndecl.\n\nFrom-SVN: r75980", "tree": {"sha": "8ba436e6c9894a273df64bd748665bd74dfab8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba436e6c9894a273df64bd748665bd74dfab8b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e081a9c4c7807286757f2e8054f79cedcb67d5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e081a9c4c7807286757f2e8054f79cedcb67d5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e081a9c4c7807286757f2e8054f79cedcb67d5b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e081a9c4c7807286757f2e8054f79cedcb67d5b2/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab8ffc795c01db35bc620c7f22a2c5236ba958c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab8ffc795c01db35bc620c7f22a2c5236ba958c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab8ffc795c01db35bc620c7f22a2c5236ba958c2"}], "stats": {"total": 199, "additions": 128, "deletions": 71}, "files": [{"sha": "8cb93760ea5263a7eb9bfa0f3dc91450bdaa07da", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e081a9c4c7807286757f2e8054f79cedcb67d5b2", "patch": "@@ -1,3 +1,15 @@\n+2004-01-16  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/13273:\n+\t* typeck.c (shallow_find_method): New.\n+\t(find_method_in_superclasses): New.\n+\t(find_method_in_interfaces): New.\n+\t(lookup_do): Rewrite.\n+\t* java-tree.h (SEARCH_ONLY_INTERFACE): Delete.\n+\n+\t* jcf-parse.c (read_class): Save and restore output_class.\n+\t* decl.c (java_expand_body): Set output_class from fndecl.\n+\n 2004-01-15  Michael Chastain  <mec.gnu@mindspring.com>\n \n \t* class.c (gen_indirect_dispatch_tables): Fix string length"}, {"sha": "ab8c2ae7ab444ac47029f5a33be2783cf0233e91", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=e081a9c4c7807286757f2e8054f79cedcb67d5b2", "patch": "@@ -1820,8 +1820,7 @@ java_expand_body (tree fndecl)\n \n   current_function_decl = fndecl;\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n-  output_class = DECL_CONTEXT (current_function_decl);\n-  current_class = DECL_CONTEXT (fndecl);\n+  output_class = current_class = DECL_CONTEXT (fndecl);\n \n   timevar_push (TV_EXPAND);\n "}, {"sha": "22f41bd75233343627c8660df9a83f23fed3a8e7", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=e081a9c4c7807286757f2e8054f79cedcb67d5b2", "patch": "@@ -1117,8 +1117,7 @@ struct lang_type GTY(())\n /* Possible values to pass to lookup_argument_method_generic.  */\n #define SEARCH_INTERFACE      1\n #define SEARCH_SUPER          2\n-#define SEARCH_ONLY_INTERFACE 4\n-#define SEARCH_VISIBLE        8\n+#define SEARCH_VISIBLE        4\n \n extern void java_parse_file (int);\n extern bool java_mark_addressable (tree);"}, {"sha": "309c28da15343162e09509e2eff12d927b9254a5", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=e081a9c4c7807286757f2e8054f79cedcb67d5b2", "patch": "@@ -468,6 +468,7 @@ read_class (tree name)\n   JCF this_jcf, *jcf;\n   tree icv, class = NULL_TREE;\n   tree save_current_class = current_class;\n+  tree save_output_class = output_class;\n   location_t save_location = input_location;\n   JCF *save_current_jcf = current_jcf;\n \n@@ -545,7 +546,8 @@ read_class (tree name)\n       load_inner_classes (class);\n     }\n \n-  output_class = current_class = save_current_class;\n+  output_class = save_output_class;\n+  current_class = save_current_class;\n   input_location = save_location;\n   current_jcf = save_current_jcf;\n   return 1;"}, {"sha": "dc8a8c5625594e2793e16960064d6e7c3a54573f", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 111, "deletions": 66, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e081a9c4c7807286757f2e8054f79cedcb67d5b2/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=e081a9c4c7807286757f2e8054f79cedcb67d5b2", "patch": "@@ -735,6 +735,92 @@ has_method (tree class, tree method_name)\n \t\t    build_null_signature) != NULL_TREE;\n }\n \n+/* Search in class SEARCHED_CLASS, but not its superclasses, for a\n+   method matching METHOD_NAME and signature SIGNATURE.  A private\n+   helper for lookup_do.  */\n+static tree\n+shallow_find_method (tree searched_class, int flags, tree method_name, \n+\t     tree signature, tree (*signature_builder) (tree))\n+{\n+  tree method;\n+  for (method = TYPE_METHODS (searched_class);\n+       method != NULL_TREE;  method = TREE_CHAIN (method))\n+    {\n+      tree method_sig = (*signature_builder) (TREE_TYPE (method));\n+      if (DECL_NAME (method) == method_name && method_sig == signature)\n+\t{\n+\t  /* If the caller requires a visible method, then we\n+\t     skip invisible methods here.  */\n+\t  if (! (flags & SEARCH_VISIBLE)\n+\t      || ! METHOD_INVISIBLE (method))\n+\t    return method;\n+\t}\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Search in the superclasses of SEARCHED_CLASS for a method matching\n+   METHOD_NAME and signature SIGNATURE.  A private helper for\n+   lookup_do.  */\n+static tree\n+find_method_in_superclasses (tree searched_class, int flags, \n+\t\t\t     tree method_name, \n+\t     tree signature, tree (*signature_builder) (tree))\n+{\n+  tree klass;\n+  for (klass = CLASSTYPE_SUPER (searched_class); klass != NULL_TREE;\n+       klass = CLASSTYPE_SUPER (klass))\n+    {\n+      tree method;\n+      method = shallow_find_method (klass, flags, method_name, \n+\t\t\t\t    signature, signature_builder);\n+      if (method != NULL_TREE)\n+\treturn method;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Search in the interfaces of SEARCHED_CLASS and its superinterfaces\n+   for a method matching METHOD_NAME and signature SIGNATURE.  A\n+   private helper for lookup_do.  */\n+static tree\n+find_method_in_interfaces (tree searched_class, int flags, tree method_name, \n+\t     tree signature, tree (*signature_builder) (tree))\n+{\n+  int i;\n+  int interface_len = \n+    TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (searched_class)) - 1;\n+\n+  for (i = interface_len; i > 0; i--)\n+    {\n+      tree child = \n+\tTREE_VEC_ELT (TYPE_BINFO_BASETYPES (searched_class), i);\n+      tree iclass = BINFO_TYPE (child);\n+\t  \n+      /* If the superinterface hasn't been loaded yet, do so now.  */\n+      if (CLASS_FROM_SOURCE_P (iclass))\n+\tsafe_layout_class (iclass);\n+      else if (!CLASS_LOADED_P (iclass))\n+\tload_class (iclass, 1);\n+\t  \n+      /* First, we look in ICLASS.  If that doesn't work we'll\n+\t recursively look through all its superinterfaces.  */\n+      tree method = shallow_find_method (iclass, flags, method_name, \n+\t\t\t\t\t signature, signature_builder);      \n+      if (method != NULL_TREE)\n+\treturn method;\n+  \n+      method = find_method_in_interfaces \n+\t(iclass, flags, method_name, signature, signature_builder);\n+      if (method != NULL_TREE)\n+\treturn method;\n+    }\n+  \n+  return NULL_TREE;\n+}\n+\n+\n /* Search in class SEARCHED_CLASS (and its superclasses) for a method\n    matching METHOD_NAME and signature SIGNATURE.  FLAGS control some\n    parameters of the search.\n@@ -745,9 +831,6 @@ has_method (tree class, tree method_name)\n    SEARCH_SUPER means skip SEARCHED_CLASS and start with its\n    superclass.\n    \n-   SEARCH_ONLY_INTERFACE means don't search ordinary classes, but\n-   instead only search interfaces and superinterfaces.\n-\n    SEARCH_VISIBLE means skip methods for which METHOD_INVISIBLE is\n    set.\n \n@@ -759,74 +842,36 @@ lookup_do (tree searched_class, int flags, tree method_name,\n \t   tree signature, tree (*signature_builder) (tree))\n {\n   tree method;\n-  int first_time = 1;\n-\n-  /* If the incoming class is an interface, then we will only return\n-     a method declared in an interface context.  */\n-  if (searched_class != NULL_TREE\n-      && CLASS_INTERFACE (TYPE_NAME (searched_class)))\n-    flags |= SEARCH_ONLY_INTERFACE;\n+    \n+  if (searched_class == NULL_TREE)\n+    return NULL_TREE;\n \n-  while (searched_class != NULL_TREE)\n+  if (flags & SEARCH_SUPER)\n     {\n-      /* First search this class.  If we're only searching the\n- \t superclass, skip this.  */\n-      if (! ((flags & SEARCH_SUPER) && first_time))\n- \t{\n- \t  for (method = TYPE_METHODS (searched_class);\n- \t       method != NULL_TREE;  method = TREE_CHAIN (method))\n- \t    {\n- \t      tree method_sig = (*signature_builder) (TREE_TYPE (method));\n- \t      if (DECL_NAME (method) == method_name && method_sig == signature)\n-\t\t{\n-\t\t  /* If the caller requires a visible method, then we\n-\t\t     skip invisible methods here.  */\n-\t\t  if (! (flags & SEARCH_VISIBLE)\n-\t\t      || ! METHOD_INVISIBLE (method))\n-\t\t    return method;\n-\t\t}\n- \t    }\n- \t}\n-      first_time = 0;\n-\n-      /* Search interfaces, if required.  */\n-      if ((flags & SEARCH_INTERFACE))\n- \t{\n- \t  int i;\n- \t  int interface_len = \n- \t    TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (searched_class)) - 1;\n-\n- \t  for (i = interface_len; i > 0; i--)\n- \t    {\n- \t      tree child = \n- \t\tTREE_VEC_ELT (TYPE_BINFO_BASETYPES (searched_class), i);\n- \t      tree iclass = BINFO_TYPE (child);\n-\n- \t      /* If the superinterface hasn't been loaded yet, do so now.  */\n- \t      if (CLASS_FROM_SOURCE_P (iclass))\n- \t\tsafe_layout_class (iclass);\n- \t      else if (!CLASS_LOADED_P (iclass))\n- \t\tload_class (iclass, 1);\n-\n-\t      /* Note that we don't care about SEARCH_VISIBLE here,\n-\t\t since an interface can never have an invisible\n-\t\t method.  */\n- \t      method = lookup_do (iclass, SEARCH_INTERFACE,\n-\t\t\t\t  method_name, signature, signature_builder);\n- \t      if (method != NULL_TREE) \n- \t\treturn method;\n- \t    }\n- \t}\n-\n-      /* If we're only searching for interface methods, then we've\n-\t already searched all the superinterfaces.  Our superclass is\n-\t Object, but we don't want to search that.  */\n-      if ((flags & SEARCH_ONLY_INTERFACE))\n-\tbreak;\n       searched_class = CLASSTYPE_SUPER (searched_class);\n+      if (searched_class == NULL_TREE)\n+\treturn NULL_TREE;\n     }\n \n-  return NULL_TREE;\n+  /* First look in our own methods.  */\n+  method = shallow_find_method (searched_class, flags, method_name,\n+\t\t\t\tsignature, signature_builder);  \n+  if (method)\n+    return method;\n+\n+  /* Then look in our superclasses.  */\n+  if (! CLASS_INTERFACE (TYPE_NAME (searched_class)))\n+    method = find_method_in_superclasses (searched_class, flags, method_name,\n+\t\t\t\t\t  signature, signature_builder);  \n+  if (method)\n+    return method;\n+  \n+  /* If that doesn't work, look in our interfaces.  */\n+  if (flags & SEARCH_INTERFACE)\n+    method = find_method_in_interfaces (searched_class, flags, method_name, \n+\t\t\t\t\tsignature, signature_builder);\n+  \n+  return method;\n }\n \n /* Search in class CLAS for a constructor matching METHOD_SIGNATURE."}]}