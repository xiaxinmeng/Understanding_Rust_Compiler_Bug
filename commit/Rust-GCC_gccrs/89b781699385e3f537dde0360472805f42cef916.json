{"sha": "89b781699385e3f537dde0360472805f42cef916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliNzgxNjk5Mzg1ZTNmNTM3ZGRlMDM2MDQ3MjgwNWY0MmNlZjkxNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-10-31T14:40:27Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-10-31T14:40:27Z"}, "message": "std_cwctype.h: #undef possible function-like macro definitions of iswxxx functions...\n\n\t* include/c/bits/std_cwctype.h: #undef possible function-like\n\tmacro definitions of iswxxx functions, which might be brought in\n\tby <wctype.h>.  Those macro definitions prevent build on some\n\tlinux-based systems.\n\n\t* include/bits/std_complex.h (complex<>): Comment out friend\n\tdeclarations of abs<> specializations.\n\t(abs): Define primary template.\n\n\t* src/complex.cc (abs): Comment out specialization definition.\n\nFrom-SVN: r37157", "tree": {"sha": "0c23fd146887f91e46bfeab8a5bb5976aaa0f51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c23fd146887f91e46bfeab8a5bb5976aaa0f51c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89b781699385e3f537dde0360472805f42cef916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b781699385e3f537dde0360472805f42cef916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b781699385e3f537dde0360472805f42cef916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b781699385e3f537dde0360472805f42cef916/comments", "author": null, "committer": null, "parents": [{"sha": "8bb1662097a899b0df91250e78091ce74d5d27e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb1662097a899b0df91250e78091ce74d5d27e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb1662097a899b0df91250e78091ce74d5d27e0"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "416204166e09f7f0598d67d7d66e8413c7844c1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=89b781699385e3f537dde0360472805f42cef916", "patch": "@@ -1,3 +1,16 @@\n+2000-10-31  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* include/c/bits/std_cwctype.h: #undef possible function-like\n+\tmacro definitions of iswxxx functions, which might be brought in\n+\tby <wctype.h>.  Those macro definitions prevent build on some\n+\tlinux-based systems.\n+\t\n+\t* include/bits/std_complex.h (complex<>): Comment out friend\n+\tdeclarations of abs<> specializations.\n+\t(abs): Define primary template.\n+\n+\t* src/complex.cc (abs): Comment out specialization definition.\n+\n 2000-10-30  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_DEBUG):  Raise debugging level from"}, {"sha": "056b12076f4c25c0a91ee235c71410ee7be51bf8", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=89b781699385e3f537dde0360472805f42cef916", "patch": "@@ -176,7 +176,7 @@ namespace std\n     friend class complex<double>;\n     friend class complex<long double>;\n \n-    friend float abs<>(const complex<float>&);\n+    // friend float abs<>(const complex<float>&);\n     friend float arg<>(const complex<float>&);\n \n     friend complex<float> conj<>(const complex<float>&);\n@@ -253,7 +253,7 @@ namespace std\n     friend class complex<float>;\n     friend class complex<long double>;\n \n-    friend double abs<>(const complex<double>&);\n+    // friend double abs<>(const complex<double>&);\n     friend double arg<>(const complex<double>&);\n \n     friend complex<double> conj<>(const complex<double>&);\n@@ -330,7 +330,7 @@ namespace std\n     friend class complex<float>;\n     friend class complex<double>;\n \n-    friend long double abs<>(const complex<long double>&);\n+    // friend long double abs<>(const complex<long double>&);\n     friend long double arg<>(const complex<long double>&);\n \n     friend complex<long double> conj<>(const complex<long double>&);\n@@ -927,6 +927,19 @@ namespace std\n     inline _Tp\n     imag(const complex<_Tp>& __z)\n     { return __z.imag(); }\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    abs(const complex<_Tp>& __z)\n+    {\n+      _Tp __x = __z.real();\n+      _Tp __y = __z.imag();\n+      _Tp __s = abs(__x) + abs(__y);\n+      if (__s == _Tp())  // well ...\n+        return __s;\n+      __x /= __s; __y /= __s;\n+      return __s * sqrt(__x * __x + __y * __y);\n+    }\n     \n \n   // We use here a few more specializations.\n@@ -955,7 +968,3 @@ namespace std\n } // namespace std\n \n #endif\t/* _CPP_COMPLEX */\n-\n-\n-\n-"}, {"sha": "9a6a8914e70f6744414541cf5255f1062600c1eb", "filename": "libstdc++-v3/include/c/bits/std_cwctype.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h?ref=89b781699385e3f537dde0360472805f42cef916", "patch": "@@ -44,6 +44,22 @@ namespace std\n   using ::wctype_t;\n   using ::wctrans_t;\n \n+  // Get rid of those macros defined in <wctype.h> in lieu of real functions.\n+#undef iswalnum\n+#undef iswalpha\n+#undef iswblank\n+#undef iswcntrl\n+#undef iswdigit\n+#undef iswgraph\n+#undef iswlower\n+#undef iswprint\n+#undef iswprint\n+#undef iswpunct\n+#undef iswspace\n+#undef iswupper\n+#undef iswxdigit\n+#undef iswctype  \n+\n   extern \"C\" int iswalnum(wint_t); \n   extern \"C\" int iswalpha(wint_t); \n   extern \"C\" int iswblank(wint_t); "}, {"sha": "2f7cfc48a60b514ce9cf92f3337204c0c4ce08a1", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b781699385e3f537dde0360472805f42cef916/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=89b781699385e3f537dde0360472805f42cef916", "patch": "@@ -45,14 +45,14 @@\n \n namespace std\n {\n-  template<>\n-  FLT\n-  abs(const complex<FLT>& __x)\n-  { \n-    // We don't use cabs here because some systems (IRIX 6.5, for\n-    // example) define their own incompatible version.\n-    return hypot (__real__ __x._M_value, __imag__ __x._M_value); \n-  }\n+//    template<>\n+//    FLT\n+//    abs(const complex<FLT>& __x)\n+//    { \n+//      // We don't use cabs here because some systems (IRIX 6.5, for\n+//      // example) define their own incompatible version.\n+//      return hypot (__real__ __x._M_value, __imag__ __x._M_value); \n+//    }\n \n   template<>\n   FLT"}]}