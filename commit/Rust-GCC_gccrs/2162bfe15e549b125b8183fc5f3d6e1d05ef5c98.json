{"sha": "2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2MmJmZTE1ZTU0OWIxMjViODE4M2ZjNWYzZDZlMWQwNWVmNWM5OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-16T12:40:14Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-16T12:40:14Z"}, "message": "Remove first_pass_instance from pass_reassoc\n\n2015-11-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* passes.def: Add arg to pass_reassoc pass instantiation.\n\t* tree-ssa-reassoc.c (reassoc_insert_powi_p): New static variable.\n\t(acceptable_pow_call, reassociate_bb): Use reassoc_insert_powi_p instead\n\tof first_pass_instance.\n\t(execute_reassoc): Add and handle insert_powi_p parameter.\n\t(pass_reassoc::insert_powi_p): New private member.\n\t(pass_reassoc::pass_reassoc): Initialize insert_powi_p.\n\t(pass_reassoc::set_pass_param): New member function.  Set insert_powi_p.\n\t(pass_reassoc::execute): Call execute_reassoc with extra arg.\n\nFrom-SVN: r230416", "tree": {"sha": "4bcf201bb0f232952e99fcfeec2d3501d35a5fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bcf201bb0f232952e99fcfeec2d3501d35a5fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/comments", "author": null, "committer": null, "parents": [{"sha": "b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "91bfc8c9a9509e06ead616918f396765713f18c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "patch": "@@ -1,3 +1,15 @@\n+2015-11-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* passes.def: Add arg to pass_reassoc pass instantiation.\n+\t* tree-ssa-reassoc.c (reassoc_insert_powi_p): New static variable.\n+\t(acceptable_pow_call, reassociate_bb): Use reassoc_insert_powi_p instead\n+\tof first_pass_instance.\n+\t(execute_reassoc): Add and handle insert_powi_p parameter.\n+\t(pass_reassoc::insert_powi_p): New private member.\n+\t(pass_reassoc::pass_reassoc): Initialize insert_powi_p.\n+\t(pass_reassoc::set_pass_param): New member function.  Set insert_powi_p.\n+\t(pass_reassoc::execute): Call execute_reassoc with extra arg.\n+\n 2015-11-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* gdbhooks.py (class PassNames): Handle extra arg NEXT_PASS argument."}, {"sha": "78fdf0ffc5dd6263e0a6ed9cfc7ffc57cb518283", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "patch": "@@ -205,7 +205,7 @@ along with GCC; see the file COPYING3.  If not see\n \t opportunities.  */\n       NEXT_PASS (pass_phi_only_cprop);\n       NEXT_PASS (pass_dse);\n-      NEXT_PASS (pass_reassoc);\n+      NEXT_PASS (pass_reassoc, true /* insert_powi_p */);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt);\n@@ -276,7 +276,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_lower_vector_ssa);\n       NEXT_PASS (pass_split_paths);\n       NEXT_PASS (pass_cse_reciprocals);\n-      NEXT_PASS (pass_reassoc);\n+      NEXT_PASS (pass_reassoc, false /* insert_powi_p */);\n       NEXT_PASS (pass_strength_reduction);\n       NEXT_PASS (pass_tracer);\n       NEXT_PASS (pass_dominator);"}, {"sha": "6b08a598710ae36ba91a137fb50c7ad0a4abab9d", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "patch": "@@ -172,6 +172,9 @@ along with GCC; see the file COPYING3.  If not see\n     destructive update for the associating op, and keep the destructive\n     update together for vector sum reduction recognition.  */\n \n+/* Enable insertion of __builtin_powi calls during execute_reassoc.  See\n+   point 3a in the pass header comment.  */\n+static bool reassoc_insert_powi_p;\n \n /* Statistics */\n static struct\n@@ -3940,7 +3943,7 @@ acceptable_pow_call (gimple *stmt, tree *base, HOST_WIDE_INT *exponent)\n   tree fndecl, arg1;\n   REAL_VALUE_TYPE c, cint;\n \n-  if (!first_pass_instance\n+  if (!reassoc_insert_powi_p\n       || !flag_unsafe_math_optimizations\n       || !is_gimple_call (stmt)\n       || !has_single_use (gimple_call_lhs (stmt)))\n@@ -4856,7 +4859,7 @@ reassociate_bb (basic_block bb)\n \t      if (rhs_code == MULT_EXPR)\n \t\tattempt_builtin_copysign (&ops);\n \n-\t      if (first_pass_instance\n+\t      if (reassoc_insert_powi_p\n \t\t  && rhs_code == MULT_EXPR\n \t\t  && flag_unsafe_math_optimizations)\n \t\tpowi_result = attempt_builtin_powi (stmt, &ops);\n@@ -5111,11 +5114,14 @@ fini_reassoc (void)\n   loop_optimizer_finalize ();\n }\n \n-/* Gate and execute functions for Reassociation.  */\n+/* Gate and execute functions for Reassociation.  If INSERT_POWI_P, enable\n+   insertion of __builtin_powi calls.  */\n \n static unsigned int\n-execute_reassoc (void)\n+execute_reassoc (bool insert_powi_p)\n {\n+  reassoc_insert_powi_p = insert_powi_p;\n+\n   init_reassoc ();\n \n   do_reassoc ();\n@@ -5145,14 +5151,24 @@ class pass_reassoc : public gimple_opt_pass\n {\n public:\n   pass_reassoc (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_reassoc, ctxt)\n+    : gimple_opt_pass (pass_data_reassoc, ctxt), insert_powi_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_reassoc (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      insert_powi_p = param;\n+    }\n   virtual bool gate (function *) { return flag_tree_reassoc != 0; }\n-  virtual unsigned int execute (function *) { return execute_reassoc (); }\n+  virtual unsigned int execute (function *)\n+    { return execute_reassoc (insert_powi_p); }\n \n+ private:\n+  /* Enable insertion of __builtin_powi calls during execute_reassoc.  See\n+     point 3a in the pass header comment.  */\n+  bool insert_powi_p;\n }; // class pass_reassoc\n \n } // anon namespace"}]}