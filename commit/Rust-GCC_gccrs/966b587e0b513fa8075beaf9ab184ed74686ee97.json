{"sha": "966b587e0b513fa8075beaf9ab184ed74686ee97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2YjU4N2UwYjUxM2ZhODA3NWJlYWY5YWIxODRlZDc0Njg2ZWU5Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-04-11T16:15:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-04-11T16:15:25Z"}, "message": "stor-layout.c (skip_simple_constant_arithmetic): Move to...\n\n\t* stor-layout.c (skip_simple_constant_arithmetic): Move to...\n\t* tree.c (skip_simple_constant_arithmetic): ...here and make public.\n\t(skip_simple_arithmetic): Tidy up.\n\t* tree.h (skip_simple_constant_arithmetic): Declare.\nada/\n\t* gcc-interface/decl.c (elaborate_expression_1): Skip only constant\n\tarithmetics when looking for a read-only variable in the expression.\n\nFrom-SVN: r197815", "tree": {"sha": "50ecfdf73e14a55579b5dfadb4bcc575c87bafec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50ecfdf73e14a55579b5dfadb4bcc575c87bafec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966b587e0b513fa8075beaf9ab184ed74686ee97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966b587e0b513fa8075beaf9ab184ed74686ee97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966b587e0b513fa8075beaf9ab184ed74686ee97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966b587e0b513fa8075beaf9ab184ed74686ee97/comments", "author": null, "committer": null, "parents": [{"sha": "76545796c5181baef9511af159178aef8d93de7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76545796c5181baef9511af159178aef8d93de7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76545796c5181baef9511af159178aef8d93de7c"}], "stats": {"total": 153, "additions": 107, "deletions": 46}, "files": [{"sha": "26f88ba5a6a108e421540ef3067875dc9736782f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -1,3 +1,10 @@\n+2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* stor-layout.c (skip_simple_constant_arithmetic): Move to...\n+\t* tree.c (skip_simple_constant_arithmetic): ...here and make public.\n+\t(skip_simple_arithmetic): Tidy up.\n+\t* tree.h (skip_simple_constant_arithmetic): Declare.\n+\n 2013-04-11   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.h (REVERSIBLE_CC_MODE): Define."}, {"sha": "49f89b65a864d416cf4370592732e5d83192381d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -1,3 +1,8 @@\n+2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+        * gcc-interface/decl.c (elaborate_expression_1): Skip only constant\n+        arithmetics when looking for a read-only variable in the expression.\n+\n 2013-04-11  Javier Miranda  <miranda@adacore.com>\n \n \t* check.ads, exp_ch6.adb (Install_Null_Excluding_Check): No check in"}, {"sha": "e65701b9a0575d884237e7a293a9c50c3077db14", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -6186,12 +6186,13 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n     expr_variable_p = false;\n   else\n     {\n-      /* Skip any conversions and simple arithmetics to see if the expression\n-\t is based on a read-only variable.\n+      /* Skip any conversions and simple constant arithmetics to see if the\n+\t expression is based on a read-only variable.\n \t ??? This really should remain read-only, but we have to think about\n \t the typing of the tree here.  */\n-      tree inner\n-\t= skip_simple_arithmetic (remove_conversions (gnu_expr, true));\n+      tree inner = remove_conversions (gnu_expr, true);\n+\n+      inner = skip_simple_constant_arithmetic (inner);\n \n       if (handled_component_p (inner))\n \t{"}, {"sha": "67dd9587b9954a53cdbe0c68ae6716d97699db6e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -98,32 +98,6 @@ variable_size (tree size)\n /* An array of functions used for self-referential size computation.  */\n static GTY(()) vec<tree, va_gc> *size_functions;\n \n-/* Look inside EXPR into simple arithmetic operations involving constants.\n-   Return the outermost non-arithmetic or non-constant node.  */\n-\n-static tree\n-skip_simple_constant_arithmetic (tree expr)\n-{\n-  while (true)\n-    {\n-      if (UNARY_CLASS_P (expr))\n-\texpr = TREE_OPERAND (expr, 0);\n-      else if (BINARY_CLASS_P (expr))\n-\t{\n-\t  if (TREE_CONSTANT (TREE_OPERAND (expr, 1)))\n-\t    expr = TREE_OPERAND (expr, 0);\n-\t  else if (TREE_CONSTANT (TREE_OPERAND (expr, 0)))\n-\t    expr = TREE_OPERAND (expr, 1);\n-\t  else\n-\t    break;\n-\t}\n-      else\n-\tbreak;\n-    }\n-\n-  return expr;\n-}\n-\n /* Similar to copy_tree_r but do not copy component references involving\n    PLACEHOLDER_EXPRs.  These nodes are spotted in find_placeholder_in_expr\n    and substituted in substitute_in_expr.  */"}, {"sha": "21b44e70b7354714fc4a0e5315196f56cc23d463", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -1,3 +1,8 @@\n+2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array23.adb: New test.\n+\t* gnat.dg/array23_pkg[123].ads: New helpers.\n+\n 2013-04-11  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/56900"}, {"sha": "2196ce5964fd8c494ffb4cf8ea80ea7646f15907", "filename": "gcc/testsuite/gnat.dg/array23.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray23.adb?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do link }\n+\n+with Array23_Pkg1;\n+with Array23_Pkg2;\n+\n+procedure Array23 is\n+  A : Array23_Pkg1.Arr;\n+begin\n+  A(Array23_Pkg2.One)(1) := 0;\n+end;"}, {"sha": "d0bc136f96d4fb9791f47d179d69f046ffc06e3e", "filename": "gcc/testsuite/gnat.dg/array23_pkg1.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg1.ads?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -0,0 +1,13 @@\n+with Array23_Pkg2;\r\n+\r\n+package Array23_Pkg1 is\r\n+\r\n+   C2 : Natural := Array23_Pkg2.C1;\r\n+\r\n+   subtype Index is Natural range 0 .. C2;\r\n+\r\n+   type Inner is array (Index) of Natural;\r\n+\r\n+   type Arr is array (Array23_Pkg2.Index) of Inner;\r\n+\r\n+end Array23_Pkg1;\r"}, {"sha": "8993ffa1e5d85095cbbd228131ab4fc1544069b1", "filename": "gcc/testsuite/gnat.dg/array23_pkg2.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg2.ads?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -0,0 +1,11 @@\n+with Array23_Pkg3;\r\n+\r\n+package Array23_Pkg2 is\r\n+\r\n+   C1 : Natural := Array23_Pkg3.C0;\r\n+\r\n+   type Enum is (Zero, One, Two);\r\n+\r\n+   subtype Index is Enum range One .. Enum'val(C1);\r\n+\r\n+end Array23_Pkg2;\r"}, {"sha": "1a6afa86f3c795167250793b7204bc6d2351c232", "filename": "gcc/testsuite/gnat.dg/array23_pkg3.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray23_pkg3.ads?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -0,0 +1,5 @@\n+package Array23_Pkg3 is\n+\n+  C0 : Natural := 2;\n+\n+end Array23_Pkg3;"}, {"sha": "d8f2424a1ef0fb47cc27e81313937443fcd9f0de", "filename": "gcc/tree.c", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -2830,14 +2830,12 @@ save_expr (tree expr)\n   return t;\n }\n \n-/* Look inside EXPR and into any simple arithmetic operations.  Return\n-   the innermost non-arithmetic node.  */\n+/* Look inside EXPR into any simple arithmetic operations.  Return the\n+   outermost non-arithmetic or non-invariant node.  */\n \n tree\n skip_simple_arithmetic (tree expr)\n {\n-  tree inner;\n-\n   /* We don't care about whether this can be used as an lvalue in this\n      context.  */\n   while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n@@ -2847,27 +2845,54 @@ skip_simple_arithmetic (tree expr)\n      a constant, it will be more efficient to not make another SAVE_EXPR since\n      it will allow better simplification and GCSE will be able to merge the\n      computations if they actually occur.  */\n-  inner = expr;\n-  while (1)\n+  while (true)\n     {\n-      if (UNARY_CLASS_P (inner))\n-\tinner = TREE_OPERAND (inner, 0);\n-      else if (BINARY_CLASS_P (inner))\n+      if (UNARY_CLASS_P (expr))\n+\texpr = TREE_OPERAND (expr, 0);\n+      else if (BINARY_CLASS_P (expr))\n \t{\n-\t  if (tree_invariant_p (TREE_OPERAND (inner, 1)))\n-\t    inner = TREE_OPERAND (inner, 0);\n-\t  else if (tree_invariant_p (TREE_OPERAND (inner, 0)))\n-\t    inner = TREE_OPERAND (inner, 1);\n+\t  if (tree_invariant_p (TREE_OPERAND (expr, 1)))\n+\t    expr = TREE_OPERAND (expr, 0);\n+\t  else if (tree_invariant_p (TREE_OPERAND (expr, 0)))\n+\t    expr = TREE_OPERAND (expr, 1);\n \t  else\n \t    break;\n \t}\n       else\n \tbreak;\n     }\n \n-  return inner;\n+  return expr;\n }\n \n+/* Look inside EXPR into simple arithmetic operations involving constants.\n+   Return the outermost non-arithmetic or non-constant node.  */\n+\n+tree\n+skip_simple_constant_arithmetic (tree expr)\n+{\n+  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n+    expr = TREE_OPERAND (expr, 0);\n+\n+  while (true)\n+    {\n+      if (UNARY_CLASS_P (expr))\n+\texpr = TREE_OPERAND (expr, 0);\n+      else if (BINARY_CLASS_P (expr))\n+\t{\n+\t  if (TREE_CONSTANT (TREE_OPERAND (expr, 1)))\n+\t    expr = TREE_OPERAND (expr, 0);\n+\t  else if (TREE_CONSTANT (TREE_OPERAND (expr, 0)))\n+\t    expr = TREE_OPERAND (expr, 1);\n+\t  else\n+\t    break;\n+\t}\n+      else\n+\tbreak;\n+    }\n+\n+  return expr;\n+}\n \n /* Return which tree structure is used by T.  */\n "}, {"sha": "be43440783d35f2fa2dc4a6b9f81a3dee44dfb4d", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b587e0b513fa8075beaf9ab184ed74686ee97/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=966b587e0b513fa8075beaf9ab184ed74686ee97", "patch": "@@ -5339,11 +5339,16 @@ extern tree staticp (tree);\n \n extern tree save_expr (tree);\n \n-/* Look inside EXPR and into any simple arithmetic operations.  Return\n-   the innermost non-arithmetic node.  */\n+/* Look inside EXPR into any simple arithmetic operations.  Return the\n+   outermost non-arithmetic or non-invariant node.  */\n \n extern tree skip_simple_arithmetic (tree);\n \n+/* Look inside EXPR into simple arithmetic operations involving constants.\n+   Return the outermost non-arithmetic or non-constant node.  */\n+\n+extern tree skip_simple_constant_arithmetic (tree);\n+\n /* Return which tree structure is used by T.  */\n \n enum tree_node_structure_enum tree_node_structure (const_tree);"}]}