{"sha": "ab9e20840f3ae9c5fe731851c6a384cd4f01f844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5ZTIwODQwZjNhZTljNWZlNzMxODUxYzZhMzg0Y2Q0ZjAxZjg0NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-10-10T15:24:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-10-10T15:24:26Z"}, "message": "[Ada] Get rid of spurious error for _Tag on extension with reverse bit order\n\n2019-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Do not use\n\tthe Esize of the component to compute its layout, but only the\n\tComponent_Clause.  Do not issue a warning for the _Tag\n\tcomponent.  Also set the Esize of the component at the end of\n\tthe layout.\n\t(Analyze_Record_Representation_Clause): Remove Hbit local\n\tvariable.  Lay out the Original_Record_Component only if it's\n\tdistinct from the component.\n\t(Check_Record_Representation_Clause): Fix off-by-one bug for the\n\tLast_Bit of the artificial clause built for the _Tag component.\n\nFrom-SVN: r276827", "tree": {"sha": "deab342a16b3d412c370689a5e166d3c2597e503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deab342a16b3d412c370689a5e166d3c2597e503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab9e20840f3ae9c5fe731851c6a384cd4f01f844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9e20840f3ae9c5fe731851c6a384cd4f01f844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9e20840f3ae9c5fe731851c6a384cd4f01f844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9e20840f3ae9c5fe731851c6a384cd4f01f844/comments", "author": null, "committer": null, "parents": [{"sha": "a871b0aa6234573b8e7ec3d876c31f60e45e700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a871b0aa6234573b8e7ec3d876c31f60e45e700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a871b0aa6234573b8e7ec3d876c31f60e45e700f"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "3d58a8d2ae60e1fe874a407b71582ef388a5905b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9e20840f3ae9c5fe731851c6a384cd4f01f844/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9e20840f3ae9c5fe731851c6a384cd4f01f844/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ab9e20840f3ae9c5fe731851c6a384cd4f01f844", "patch": "@@ -1,3 +1,12 @@\n-2019-10-10  Bob Duff  <duff@adacore.com>\n+2019-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n-\t* treepr.ads, treepr.adb (ppar): New procedure.\n\\ No newline at end of file\n+\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Do not use\n+\tthe Esize of the component to compute its layout, but only the\n+\tComponent_Clause.  Do not issue a warning for the _Tag\n+\tcomponent.  Also set the Esize of the component at the end of\n+\tthe layout.\n+\t(Analyze_Record_Representation_Clause): Remove Hbit local\n+\tvariable.  Lay out the Original_Record_Component only if it's\n+\tdistinct from the component.\n+\t(Check_Record_Representation_Clause): Fix off-by-one bug for the\n+\tLast_Bit of the artificial clause built for the _Tag component.\n\\ No newline at end of file"}, {"sha": "67ec0df6c7a18dbd846378f8397d636473c3b8e3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9e20840f3ae9c5fe731851c6a384cd4f01f844/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9e20840f3ae9c5fe731851c6a384cd4f01f844/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ab9e20840f3ae9c5fe731851c6a384cd4f01f844", "patch": "@@ -360,11 +360,11 @@ package body Sem_Ch13 is\n       Num_CC : Natural;\n \n    begin\n-      --  Processing here used to depend on Ada version: the behavior was\n-      --  changed by AI95-0133. However this AI is a Binding interpretation,\n-      --  so we now implement it even in Ada 95 mode. The original behavior\n-      --  from unamended Ada 95 is still available for compatibility under\n-      --  debugging switch -gnatd.\n+      --  The processing done here used to depend on the Ada version, but the\n+      --  behavior has been changed by AI95-0133. However this AI is a Binding\n+      --  Interpretation, so we now implement it even in Ada 95 mode. But the\n+      --  original behavior from unamended Ada 95 is available for the sake of\n+      --  compatibility under the debugging switch -gnatd.p in Ada 95 mode.\n \n       if Ada_Version < Ada_2005 and then Debug_Flag_Dot_P then\n          Adjust_Record_For_Reverse_Bit_Order_Ada_95 (R);\n@@ -376,6 +376,11 @@ package body Sem_Ch13 is\n       --  same byte offset and processing them together. Same approach is still\n       --  valid in later versions including Ada 2012.\n \n+      --  Note that component clauses found on record types may be inherited,\n+      --  in which case the layout of the component with such a clause still\n+      --  has to be done at this point. Therefore, the processing done here\n+      --  must exclusively rely on the Component_Clause of the component.\n+\n       --  This first loop through components does two things. First it deals\n       --  with the case of components with component clauses whose length is\n       --  greater than the maximum machine scalar size (either accepting them\n@@ -616,13 +621,19 @@ package body Sem_Ch13 is\n                   Comp : constant Entity_Id := Comps (C);\n                   CC   : constant Node_Id   := Component_Clause (Comp);\n \n+                  FB   : constant Uint := Static_Integer (First_Bit (CC));\n                   LB   : constant Uint := Static_Integer (Last_Bit (CC));\n-                  NFB  : constant Uint := MSS - Uint_1 - LB;\n-                  NLB  : constant Uint := NFB + Esize (Comp) - 1;\n+                  NFB  : constant Uint := MSS - 1 - LB;\n+                  NLB  : constant Uint := NFB + LB - FB;\n                   Pos  : constant Uint := Static_Integer (Position (CC));\n \n                begin\n-                  if Warn_On_Reverse_Bit_Order then\n+                  --  Do not warn for the artificial clause built for the tag\n+                  --  in Check_Record_Representation_Clause if it is inherited.\n+\n+                  if Warn_On_Reverse_Bit_Order\n+                    and then Chars (Comp) /= Name_uTag\n+                  then\n                      Error_Msg_Uint_1 := MSS;\n                      Error_Msg_N\n                        (\"info: reverse bit order in machine scalar of \"\n@@ -642,8 +653,9 @@ package body Sem_Ch13 is\n                   end if;\n \n                   Set_Component_Bit_Offset (Comp, Pos * SSU + NFB);\n-                  Set_Normalized_Position  (Comp, Pos + NFB / SSU);\n+                  Set_Esize                (Comp, 1 + (NLB - NFB));\n                   Set_Normalized_First_Bit (Comp, NFB mod SSU);\n+                  Set_Normalized_Position  (Comp, Pos + NFB / SSU);\n                end;\n             end loop;\n          end loop;\n@@ -6937,7 +6949,6 @@ package body Sem_Ch13 is\n       CC      : Node_Id;\n       Comp    : Entity_Id;\n       Fbit    : Uint;\n-      Hbit    : Uint := Uint_0;\n       Lbit    : Uint;\n       Ocomp   : Entity_Id;\n       Posit   : Uint;\n@@ -7263,6 +7274,9 @@ package body Sem_Ch13 is\n                         Set_Normalized_First_Bit (Comp, Fbit mod SSU);\n                         Set_Normalized_Position  (Comp, Fbit / SSU);\n \n+                        Set_Normalized_Position_Max\n+                          (Comp, Normalized_Position (Comp));\n+\n                         if Warn_On_Overridden_Size\n                           and then Has_Size_Clause (Etype (Comp))\n                           and then RM_Size (Etype (Comp)) /= Esize (Comp)\n@@ -7272,16 +7286,6 @@ package body Sem_Ch13 is\n                               Component_Name (CC), Etype (Comp));\n                         end if;\n \n-                        --  This information is also set in the corresponding\n-                        --  component of the base type, found by accessing the\n-                        --  Original_Record_Component link if it is present.\n-\n-                        Ocomp := Original_Record_Component (Comp);\n-\n-                        if Hbit < Lbit then\n-                           Hbit := Lbit;\n-                        end if;\n-\n                         Check_Size\n                           (Component_Name (CC),\n                            Etype (Comp),\n@@ -7291,12 +7295,18 @@ package body Sem_Ch13 is\n                         Set_Biased\n                           (Comp, First_Node (CC), \"component clause\", Biased);\n \n-                        if Present (Ocomp) then\n+                        --  This information is also set in the corresponding\n+                        --  component of the base type, found by accessing the\n+                        --  Original_Record_Component link if it is present.\n+\n+                        Ocomp := Original_Record_Component (Comp);\n+\n+                        if Present (Ocomp) and then Ocomp /= Comp then\n                            Set_Component_Clause     (Ocomp, CC);\n                            Set_Component_Bit_Offset (Ocomp, Fbit);\n+                           Set_Esize                (Ocomp, 1 + (Lbit - Fbit));\n                            Set_Normalized_First_Bit (Ocomp, Fbit mod SSU);\n                            Set_Normalized_Position  (Ocomp, Fbit / SSU);\n-                           Set_Esize                (Ocomp, 1 + (Lbit - Fbit));\n \n                            Set_Normalized_Position_Max\n                              (Ocomp, Normalized_Position (Ocomp));\n@@ -10616,7 +10626,7 @@ package body Sem_Ch13 is\n              First_Bit => Make_Integer_Literal (Loc, Uint_0),\n              Last_Bit  =>\n                Make_Integer_Literal (Loc,\n-                 UI_From_Int (System_Address_Size))));\n+                 UI_From_Int (System_Address_Size - 1))));\n \n          Ccount := Ccount + 1;\n       end if;"}]}