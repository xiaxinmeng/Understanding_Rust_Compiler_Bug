{"sha": "3c0351f287e1fdf9a085c499f4657a6501c6cf29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwMzUxZjI4N2UxZmRmOWEwODVjNDk5ZjQ2NTdhNjUwMWM2Y2YyOQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-03-18T14:02:53Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-03-23T15:11:45Z"}, "message": "testsuite/arm: Add arm_v8_2a_fp16_neon and arm_v8_2a_bf16_neon options\n\nA few tests lack the dg-add-options directives associated with the\ndg-require-effective-target they are using. Adding them enables to\npass the right float-abi option, and thus make the tests pass instead\nof emit an error.\n\nFor instance, we now pass -mfloat-abi=softfp on arm-linux-gnueabi\ntargets and the tests pass.\n\n2021-03-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/bfloat16_scalar_typecheck.c: Add\n\tarm_v8_2a_fp16_neon and arm_v8_2a_bf16_neon.\n\t* gcc.target/arm/bfloat16_vector_typecheck_1.c: Likewise.\n\t* gcc.target/arm/bfloat16_vector_typecheck_2.c: Likewise.", "tree": {"sha": "0b21e92e29e464a3303616a422ca660fc1296c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b21e92e29e464a3303616a422ca660fc1296c47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c0351f287e1fdf9a085c499f4657a6501c6cf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0351f287e1fdf9a085c499f4657a6501c6cf29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0351f287e1fdf9a085c499f4657a6501c6cf29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0351f287e1fdf9a085c499f4657a6501c6cf29/comments", "author": null, "committer": null, "parents": [{"sha": "baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baef0cffb58be7f5d9aeac6313ea9d8becc017b1"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8c80c55bc9f4c369bc05323b05722d5dffe1fc78", "filename": "gcc/testsuite/gcc.target/arm/bfloat16_scalar_typecheck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c0351f287e1fdf9a085c499f4657a6501c6cf29/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_scalar_typecheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c0351f287e1fdf9a085c499f4657a6501c6cf29/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_scalar_typecheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_scalar_typecheck.c?ref=3c0351f287e1fdf9a085c499f4657a6501c6cf29", "patch": "@@ -2,6 +2,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n /* { dg-require-effective-target arm_v8_2a_fp16_neon_ok } */\n /* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n /* { dg-additional-options \"-march=armv8.6-a+bf16+fp16 -Wno-pedantic -O3 --save-temps\" }  */\n \n #include <arm_neon.h>"}, {"sha": "f3c350b4cfc7edb80d239c05ada7255b92a8ba11", "filename": "gcc/testsuite/gcc.target/arm/bfloat16_vector_typecheck_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c0351f287e1fdf9a085c499f4657a6501c6cf29/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_vector_typecheck_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c0351f287e1fdf9a085c499f4657a6501c6cf29/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_vector_typecheck_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_vector_typecheck_1.c?ref=3c0351f287e1fdf9a085c499f4657a6501c6cf29", "patch": "@@ -2,6 +2,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n /* { dg-require-effective-target arm_v8_2a_fp16_neon_ok } */\n /* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n /* { dg-additional-options \"-march=armv8.6-a+bf16+fp16 -Wno-pedantic -O3 --save-temps\" }  */\n \n #include <arm_neon.h>"}, {"sha": "de0ade52c102482d368cdb06cc471f6a94462267", "filename": "gcc/testsuite/gcc.target/arm/bfloat16_vector_typecheck_2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c0351f287e1fdf9a085c499f4657a6501c6cf29/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_vector_typecheck_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c0351f287e1fdf9a085c499f4657a6501c6cf29/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_vector_typecheck_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbfloat16_vector_typecheck_2.c?ref=3c0351f287e1fdf9a085c499f4657a6501c6cf29", "patch": "@@ -2,6 +2,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n /* { dg-require-effective-target arm_v8_2a_fp16_neon_ok } */\n /* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n /* { dg-additional-options \"-march=armv8.6-a+bf16+fp16 -Wno-pedantic -O3 --save-temps\" }  */\n \n #include <arm_neon.h>\n@@ -25,8 +27,8 @@ float is_a_float16;\n double is_a_double;\n \n bfloat16x8_t foo3 (void) { return (bfloat16x8_t) 0x12345678123456781234567812345678; }\n- /* { dg-error {integer constant is too large for its type} \"\" {target *-*-*} 27 } */\n- /* { dg-error {cannot convert a value of type 'long long int' to vector type '__simd128_bfloat16_t' which has different size} \"\" {target *-*-*} 27 } */\n+ /* { dg-error {integer constant is too large for its type} \"\" {target *-*-*} .-1 } */\n+ /* { dg-error {cannot convert a value of type 'long long int' to vector type '__simd128_bfloat16_t' which has different size} \"\" {target *-*-*} .-2 } */\n \n bfloat16x8_t footest (bfloat16x8_t vector0)\n {"}]}