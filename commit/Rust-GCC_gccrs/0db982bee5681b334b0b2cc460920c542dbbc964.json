{"sha": "0db982bee5681b334b0b2cc460920c542dbbc964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiOTgyYmVlNTY4MWIzMzRiMGIyY2M0NjA5MjBjNTQyZGJiYzk2NA==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1999-03-13T01:16:36Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-03-13T01:16:36Z"}, "message": "semantics.c (finish_switch_cond): Handle error cases gracefully.\n\n        * semantics.c (finish_switch_cond): Handle error cases gracefully.\n        Detected by g++.law/enum5.C\n        * typeck.c (build_modify_expr): Check for errors after resolving\n        offsets. Detected by g++.brendan/static1.C\n        * decl.c (complete_array_type): Ignore initial_value if it is an\n        error. Detected by g++.benjamin/17930.C\n        * typeck2.c (process_init_constructor): Return error if one argument\n        is in error. Detected by g++.benjamin/13478.C\n\nFrom-SVN: r25740", "tree": {"sha": "045622ec131250d2de223434afc679ea17570fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/045622ec131250d2de223434afc679ea17570fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0db982bee5681b334b0b2cc460920c542dbbc964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db982bee5681b334b0b2cc460920c542dbbc964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db982bee5681b334b0b2cc460920c542dbbc964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db982bee5681b334b0b2cc460920c542dbbc964/comments", "author": null, "committer": null, "parents": [{"sha": "db7695ef3e803f8a4404e8404ae5bb9710f7e876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7695ef3e803f8a4404e8404ae5bb9710f7e876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7695ef3e803f8a4404e8404ae5bb9710f7e876"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "0f5a3bd5ce94ab5cbc0d2bfe1423778a29093204", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0db982bee5681b334b0b2cc460920c542dbbc964", "patch": "@@ -1,3 +1,17 @@\n+1999-03-13  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* semantics.c (finish_switch_cond): Handle error cases gracefully.\n+\tDetected by g++.law/enum5.C\n+\n+\t* typeck.c (build_modify_expr): Check for errors after resolving\n+\toffsets. Detected by g++.brendan/static1.C\n+\n+\t* decl.c (complete_array_type): Ignore initial_value if it is an\n+\terror. Detected by g++.benjamin/17930.C\t\n+\n+\t* typeck2.c (process_init_constructor): Return error if one argument\n+\tis in error. Detected by g++.benjamin/13478.C\n+\n 1999-03-12  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* decl.c (select_decl): Allow class templates when we need types."}, {"sha": "1de303d3c0e7df853fb653f448513ffea5b5bb4c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0db982bee5681b334b0b2cc460920c542dbbc964", "patch": "@@ -8259,6 +8259,8 @@ complete_array_type (type, initial_value, do_default)\n \t  /* Make an error message unless that happened already.  */\n \t  if (initial_value != error_mark_node)\n \t    value = 1;\n+\t  else\n+\t    initial_value = NULL_TREE;\n \n \t  /* Prevent further error messages.  */\n \t  maxindex = build_int_2 (0, 0);"}, {"sha": "0e028d2bdb7662828ec53459c27db5fa9d20c462", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0db982bee5681b334b0b2cc460920c542dbbc964", "patch": "@@ -490,12 +490,20 @@ finish_switch_cond (cond)\n       r = build_min_nt (SWITCH_STMT, cond, NULL_TREE);\n       add_tree (r);\n     }\n-  else\n+  else if (cond != error_mark_node)\n     {\n       emit_line_note (input_filename, lineno);\n       c_expand_start_case (cond);\n       r = NULL_TREE;\n     }\n+  else\n+    {\n+      /* The code is in error, but we don't want expand_end_case to\n+         crash. */\n+      c_expand_start_case (boolean_false_node);\n+      r = NULL_TREE;\n+    }\n+\n   push_switch ();\n \n   /* Don't let the tree nodes for COND be discarded by"}, {"sha": "0732bc800fe1e06f5faa9b7033e1eed89a6595d9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0db982bee5681b334b0b2cc460920c542dbbc964", "patch": "@@ -5920,6 +5920,9 @@ build_modify_expr (lhs, modifycode, rhs)\n       olhstype = lhstype = TREE_TYPE (lhs);\n     }\n \n+  if (lhs == error_mark_node)\n+    return lhs;\n+\n   if (TREE_CODE (lhstype) == REFERENCE_TYPE\n       && modifycode != INIT_EXPR)\n     {"}, {"sha": "8051723da7c295dd5e4989cc76a73a429846d5a2", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db982bee5681b334b0b2cc460920c542dbbc964/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=0db982bee5681b334b0b2cc460920c542dbbc964", "patch": "@@ -932,6 +932,8 @@ process_init_constructor (type, init, elts)\n \t\t  tree tail1 = tail;\n \t\t  next1 = digest_init (TREE_TYPE (type),\n \t\t\t\t       TREE_VALUE (tail), &tail1);\n+\t\t  if (next1 == error_mark_node)\n+\t\t    return next1;\n \t\t  my_friendly_assert\n \t\t    (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)),\n \t\t\t\t  TYPE_MAIN_VARIANT (TREE_TYPE (next1))),"}]}