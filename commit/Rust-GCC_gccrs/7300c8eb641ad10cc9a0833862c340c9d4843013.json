{"sha": "7300c8eb641ad10cc9a0833862c340c9d4843013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwMGM4ZWI2NDFhZDEwY2M5YTA4MzM4NjJjMzQwYzlkNDg0MzAxMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-15T18:08:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-15T18:08:04Z"}, "message": "c90-array-lval-2.c, [...]: New tests.\n\n\t* gcc.dg/c90-array-lval-2.c, gcc.dg/c90-const-expr-2.c,\n\tgcc.dg/c99-array-lval-2.c, gcc.dg/c99-const-expr-2.c,\n\tgcc.dg/c99-func-3.c, gcc.dg/c99-func-4.c: New tests.\n\nFrom-SVN: r35728", "tree": {"sha": "b9b1e29df44d6b796427579573476a26f94ff045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9b1e29df44d6b796427579573476a26f94ff045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7300c8eb641ad10cc9a0833862c340c9d4843013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7300c8eb641ad10cc9a0833862c340c9d4843013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7300c8eb641ad10cc9a0833862c340c9d4843013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7300c8eb641ad10cc9a0833862c340c9d4843013/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7791b7f9085333387ff2d9eaa90f79995c511cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7791b7f9085333387ff2d9eaa90f79995c511cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7791b7f9085333387ff2d9eaa90f79995c511cb6"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "1c8be14f47f72d98a6b3ba78f25da7ba498941b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -1,3 +1,9 @@\n+2000-08-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-array-lval-2.c, gcc.dg/c90-const-expr-2.c,\n+\tgcc.dg/c99-array-lval-2.c, gcc.dg/c99-const-expr-2.c,\n+\tgcc.dg/c99-func-3.c, gcc.dg/c99-func-4.c: New tests.\n+\n 2000-08-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/refinit2.C: New test."}, {"sha": "b5461e8c78549c1abb069f122d1daf0ae6ce275e", "filename": "gcc/testsuite/gcc.dg/c90-array-lval-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-2.c?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -0,0 +1,20 @@\n+/* Test for non-lvalue arrays decaying to pointers: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+struct s { char c[17]; };\n+\n+struct s x;\n+\n+extern struct s foo (void);\n+\n+#define ASSERT(v, a)\tchar v[((a) ? 1 : -1)]\n+\n+ASSERT (p, sizeof (x.c) == 17);\n+ASSERT (q, sizeof (0, x.c) == sizeof (char *));\n+ASSERT (r, sizeof ((foo ()).c) == 17);\n+/* The non-lvalue array does not decay to a pointer, so the comma expression\n+   has (non-lvalue) array type.\n+*/\n+ASSERT (s, sizeof (0, (foo ()).c) == 17); /* { dg-bogus \"array\" \"bad non-lvalue array handling\" { xfail *-*-* } } */"}, {"sha": "940a718979559af9a891d0cfa32de9524385d2a8", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-2.c?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -0,0 +1,36 @@\n+/* Test for constant expressions: details of what is a null pointer\n+   constant.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990\" } */\n+/* Note: not using -pedantic since the -std option alone should be enough\n+   to give the correct behavior to conforming programs.  If -pedantic is\n+   needed to make (say) (0, 0) not be a constant expression, this is a\n+   bug.\n+*/\n+\n+int *a;\n+int b;\n+long *c;\n+\n+/* Assertion that n is a null pointer constant: so the conditional expression\n+   has type 'int *' instead of 'void *'.\n+*/\n+#define ASSERT_NPC(n)\t(b = *(1 ? a : (n)))\n+/* Assertion that n is not a null pointer constant: so the conditional\n+   expresions has type 'void *' instead of 'int *'.\n+*/\n+#define ASSERT_NOT_NPC(n)\t(c = (1 ? a : (n)))\n+\n+void\n+foo (void)\n+{\n+  ASSERT_NPC (0);\n+  ASSERT_NPC ((void *)0);\n+  ASSERT_NOT_NPC ((void *)(void *)0); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NOT_NPC ((void *)(char *)0); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NOT_NPC ((void *)(0, 0)); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  /* This last one is a null pointer constant in C99 only.  */\n+  ASSERT_NOT_NPC ((void *)(1 ? 0 : (0, 0))); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+}"}, {"sha": "68d8599ee394d040d25de9fcc024c4c07a83452f", "filename": "gcc/testsuite/gcc.dg/c99-array-lval-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-2.c?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -0,0 +1,18 @@\n+/* Test for non-lvalue arrays decaying to pointers: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+struct s { char c[17]; };\n+\n+struct s x;\n+\n+extern struct s foo (void);\n+\n+#define ASSERT(v, a)\tchar v[((a) ? 1 : -1)]\n+\n+ASSERT (p, sizeof (x.c) == 17);\n+ASSERT (q, sizeof (0, x.c) == sizeof (char *));\n+ASSERT (r, sizeof ((foo ()).c) == 17);\n+/* The non-lvalue array decays to a pointer in C99.  */\n+ASSERT (s, sizeof (0, (foo ()).c) == sizeof (char *)); /* { dg-bogus \"array\" \"bad non-lvalue array handling\" { xfail *-*-* } } */"}, {"sha": "03422b615229faed7629d5dafd6cceb2d88bb25b", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-2.c?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -0,0 +1,36 @@\n+/* Test for constant expressions: details of what is a null pointer\n+   constant.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999\" } */\n+/* Note: not using -pedantic since the -std option alone should be enough\n+   to give the correct behavior to conforming programs.  If -pedantic is\n+   needed to make (say) (0, 0) not be a constant expression, this is a\n+   bug.\n+*/\n+\n+int *a;\n+int b;\n+long *c;\n+\n+/* Assertion that n is a null pointer constant: so the conditional expression\n+   has type 'int *' instead of 'void *'.\n+*/\n+#define ASSERT_NPC(n)\t(b = *(1 ? a : (n)))\n+/* Assertion that n is not a null pointer constant: so the conditional\n+   expresions has type 'void *' instead of 'int *'.\n+*/\n+#define ASSERT_NOT_NPC(n)\t(c = (1 ? a : (n)))\n+\n+void\n+foo (void)\n+{\n+  ASSERT_NPC (0);\n+  ASSERT_NPC ((void *)0);\n+  ASSERT_NOT_NPC ((void *)(void *)0); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NOT_NPC ((void *)(char *)0); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NOT_NPC ((void *)(0, 0)); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  /* This last one is a null pointer constant in C99 only.  */\n+  ASSERT_NPC ((void *)(1 ? 0 : (0, 0)));\n+}"}, {"sha": "5fa920a9f654f42e5c5ec55f1c34d0818a292936", "filename": "gcc/testsuite/gcc.dg/c99-func-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-3.c?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -0,0 +1,16 @@\n+/* Test for C99 __func__: not merging with string literals.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run { xfail *-*-* } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  if (\"main\" == __func__)\n+    abort ();\n+  else\n+    exit (0);\n+}"}, {"sha": "d1388033dabf0797af4a64a8911d714b127cf88e", "filename": "gcc/testsuite/gcc.dg/c99-func-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7300c8eb641ad10cc9a0833862c340c9d4843013/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-4.c?ref=7300c8eb641ad10cc9a0833862c340c9d4843013", "patch": "@@ -0,0 +1,10 @@\n+/* Test for C99 __func__: of type const char [].  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  char *p = __func__; /* { dg-error \"discards\" \"__func__ pointer to const\" { xfail *-*-* } } */\n+}"}]}