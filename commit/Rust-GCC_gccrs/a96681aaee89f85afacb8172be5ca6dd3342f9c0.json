{"sha": "a96681aaee89f85afacb8172be5ca6dd3342f9c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk2NjgxYWFlZTg5Zjg1YWZhY2I4MTcyYmU1Y2E2ZGQzMzQyZjljMA==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-10-30T05:25:10Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-10-30T05:25:10Z"}, "message": "re PR target/32893 (zlib segfault in inflate_table() compiled w/ -O -msse2 ftree-vectorize)\n\n        PR tree-optimization/32893\n        * tree-vectorize.c (vect_can_force_dr_alignment_p): Check\n        STACK_BOUNDARY instead of PREFERRED_STACK_BOUNDARY.\n\nFrom-SVN: r129764", "tree": {"sha": "98666a1ffa4711b44b4da76ac33052abebba122d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98666a1ffa4711b44b4da76ac33052abebba122d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a96681aaee89f85afacb8172be5ca6dd3342f9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96681aaee89f85afacb8172be5ca6dd3342f9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96681aaee89f85afacb8172be5ca6dd3342f9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96681aaee89f85afacb8172be5ca6dd3342f9c0/comments", "author": null, "committer": null, "parents": [{"sha": "43970902e486504b4968a78f5ed6ed1d591f639c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43970902e486504b4968a78f5ed6ed1d591f639c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43970902e486504b4968a78f5ed6ed1d591f639c"}], "stats": {"total": 1100, "additions": 991, "deletions": 109}, "files": [{"sha": "9e7199f0bb3a5b2a7b2b00eb9639e4737e8c7f1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -1,3 +1,9 @@\n+2007-10-29  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/32893\n+\t* tree-vectorize.c (vect_can_force_dr_alignment_p): Check\n+\tSTACK_BOUNDARY instead of PREFERRED_STACK_BOUNDARY.\n+\n 2007-10-29  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \t* longlong.h (add_ssaaaa): Support Intel asm syntax in i386 and"}, {"sha": "5befb1c01dc11575fede982639d7e76ec4be29c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -1,3 +1,63 @@\n+2007-10-29  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/32893\n+\t* testsuite/lib/target-supports.exp\n+\t(check_effective_target_unaligned_stack): new keyword.\n+\t* testsuite/gcc.dg/vect/vect-2.c: Globalize arrays to make the test\n+\tnot sensitive to unaligned_stack.\n+\t* testsuite/gcc.dg/vect/vect-3.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-4.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-5.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-6.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-7.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-13.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-17.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-18.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-19.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-20.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-21.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-22.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-27.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-29.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-64.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-65.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-66.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-72.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-73.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-86.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-all.c: Likewise.\n+\t* testsuite/gcc.dg/vect/slp-25.c: Likewise.\n+\t* testsuite/gcc.dg/vect/wrapv-vect-7.c: Likewise.\n+\t* testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n+\t* testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n+\n+\t* testsuite/gcc.dg/vect/vect-31.c: Removed alignment checks.        \n+\t* testsuite/gcc.dg/vect/vect-34.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-36.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-64.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-65.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-66.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-68.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-76.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-77.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-78.c: Likewise.\n+\n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-31.c: New test, Like the\n+\toriginal testcase (without no-section-anchors prefix) but with global arrays.       \n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-34.c: Likewise.\n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-36.c: Likewsie.\n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-64.c: Likewise.\n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-65.c: Likewise.\n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-66.c: Likewise.\n+\t* testsuite/gcc.dg/vect/no-section-anchors-vect-68.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-77-global.c: Likewise.\n+\t* testsuite/gcc.dg/vect/vect-78-global.c: Likewise.\n+\n+\t* testsuite/gcc.dg/vect/vect-77-alignchecks.c: New test. Like the\n+\toriginal testcase (without no-section-anchors prefix) but fix alignment checks \n+\tto also consider unaligned_stack targets.\n+\t* testsuite/gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n+\n 2007-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/33723"}, {"sha": "c61517aab42884329c26c9abf0242779b6bbb004", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-31.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -18,10 +18,11 @@ struct s{\n   struct t e;   /* unaligned (offset 2N+4N+4 B) */\n };\n  \n+struct s tmp;\n+\n int main1 ()\n {  \n   int i;\n-  struct s tmp;\n \n   /* unaligned */\n   for (i = 0; i < N/2; i++)"}, {"sha": "c61517aab42884329c26c9abf0242779b6bbb004", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -18,10 +18,11 @@ struct s{\n   struct t e;   /* unaligned (offset 2N+4N+4 B) */\n };\n  \n+struct s tmp;\n+\n int main1 ()\n {  \n   int i;\n-  struct s tmp;\n \n   /* unaligned */\n   for (i = 0; i < N/2; i++)"}, {"sha": "a87367b3b08690a59ff6d1116339d7fad27a1aa6", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-6-global.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6-global.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 40\n+\n+int a[N];\n+\n+__attribute__ ((noinline)) int\n+foo (int * __restrict__ b, int k){\n+  int i,j;\n+  int sum,x;\n+\n+  for (i = 0; i < N; i++) {\n+    sum = b[i];\n+    for (j = 0; j < N; j++) {\n+      sum += j;\n+    }\n+    a[i] = sum;\n+  }\n+  \n+  return a[k];\n+}\n+\n+int main (void)\n+{\n+  int i,j;\n+  int sum;\n+  int b[N];\n+  int a[N];\n+\n+  check_vect ();\n+\n+  for (i=0; i<N; i++)\n+    b[i] = i + 2;\n+\n+  for (i=0; i<N; i++)\n+    a[i] = foo (b,i);\n+\n+    /* check results:  */\n+  for (i=0; i<N; i++)\n+    {\n+      sum = b[i];\n+      for (j = 0; j < N; j++){\n+        sum += j;\n+      }\n+      if (a[i] != sum)\n+        abort();\n+    }\n+\n+  return 0;\n+}\n+\n+/* \"Too many BBs in loop\"  */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "70cf520d950062aff454bfda2fbb68ba0faa47f0", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -51,6 +51,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { unaligned_stack || vect_no_align } } } } */\n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "21b87a396771248d7f99691d7ca5f95b846a46bf", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-31.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+struct t{\n+  int k[N];\n+  int l; \n+};\n+  \n+struct s{\n+  char a;\t/* aligned */\n+  char b[N-1];  /* unaligned (offset 1B) */\n+  char c[N];    /* aligned (offset NB) */\n+  struct t d;   /* aligned (offset 2NB) */\n+  struct t e;   /* unaligned (offset 2N+4N+4 B) */\n+};\n+ \n+struct s tmp;\n+__attribute__ ((noinline))\n+int main1 ()\n+{  \n+  int i;\n+\n+  /* unaligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.b[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.b[i] != 5)\n+        abort ();\n+    }\n+\n+  /* aligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.c[i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.c[i] != 6)\n+        abort ();\n+    }\n+\n+  /* aligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.d.k[i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.d.k[i] != 7)\n+        abort ();\n+    }\n+\n+  /* unaligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.e.k[i] = 8;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.e.k[i] != 8)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2eac33e414b6b35a7b615363d4f8ac2312e0dbfb", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-34.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-34.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+struct {\n+  char ca[N];\n+} s;\n+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "351463bb152cbd2280158af5258fddb0428d7e10", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-36.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+struct {\n+  char ca[N];\n+  char cb[N];\n+} s;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.cb[i] = 3*i;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = s.cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != s.cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1ce3fa7f23b22de59cd041b9f6350bdc0b930a79", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-64.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ia[N][4][N+1];\n+int ic[N][N][3][13];\n+int id[N][N][N];\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i, j;\n+\n+  /* Multidimensional array. Not aligned: vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][j] = ib[i];\n+        }\n+    }\n+\n+  /* Multidimensional array. Aligned: vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ic[i][1][1][j] = ib[i];\n+        }\n+    }\n+\n+  /* Multidimensional array. Not aligned: vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           id[i][1][j+1] = ib[i];\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][j] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ic[i][1][1][j] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (id[i][1][j+1] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b1e74a9f1deedc05ab2d00c3f106539c44197c5e", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-65.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-65.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+#define M 4\n+\n+int ib[M][M][N] = {{{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}},\n+                   {{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}},\n+                   {{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}},\n+                   {{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                    {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}}};\n+int ia[M][M][N];\n+int ic[N];\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i, j;\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Load and store. */\n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][j] = ib[2][i][j];\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][j] != ib[2][i][j])\n+              abort();\n+        }\n+    }\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Load. */\n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ic[j] = ib[2][i][j];\n+        }\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ic[j] != ib[2][i][j])\n+              abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2be14ea33b6efb87a4887ffec5d74bd2709acdf1", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-66.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int ib[6] = {0,3,6,9,12,15};\n+int ia[8][5][6];\n+int ic[16][16][5][6];\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i, j;\n+\n+  /* Multidimensional array. Aligned. */\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           ia[2][6][j] = 5;\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           if (ia[2][6][j] != 5)\n+                abort();\n+        }\n+    }\n+  /* Multidimensional array. Aligned. */\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+           ia[3][6][j+2] = 5;\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 2; j < 6; j++)\n+        {\n+           if (ia[3][6][j] != 5)\n+                abort();\n+        }\n+    }\n+\n+  /* Multidimensional array. Not aligned. */\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           ic[2][1][6][j+1] = 5;\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           if (ic[2][1][6][j+1] != 5)\n+                abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "de036e88ebf04f394d26092b18a7fe93fde3b27d", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-68.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-68.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+struct s{\n+  int m;\n+  int n[N][N][N];\n+};\n+\n+struct test1{\n+  struct s a; /* array a.n is unaligned */\n+  int b;\n+  int c;\n+  struct s e; /* array e.n is aligned */\n+};\n+\n+struct test1 tmp1;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{  \n+  int i,j;\n+\n+  /* 1. unaligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      tmp1.a.n[1][2][i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (tmp1.a.n[1][2][i] != 5)\n+        abort ();\n+    }\n+\n+  /* 2. aligned */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      tmp1.a.n[1][2][i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      if (tmp1.a.n[1][2][i] != 6)\n+        abort ();\n+    }\n+\n+  /* 3. aligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      tmp1.e.n[1][2][i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (tmp1.e.n[1][2][i] != 7)\n+        abort ();\n+    }\n+\n+  /* 4. unaligned */\n+  for (i = 3; i < N-3; i++)\n+    {\n+      tmp1.e.n[1][2][i] = 8;\n+    }\n+ \n+  /* check results:  */\n+  for (i = 3; i <N-3; i++)\n+    {\n+      if (tmp1.e.n[1][2][i] != 8)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0b62a29bf68f8a3cc5186d1978b0474e140245a1", "filename": "gcc/testsuite/gcc.dg/vect/slp-25.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -7,11 +7,12 @@\n \n /* Unaligned stores.  */\n \n+int ia[N+1];\n+short sa[N+1];\n+\n int main1 (int n)\n {\n   int i;\n-  int ia[N+1];\n-  short sa[N+1];\n \n   for (i = 1; i <= N/2; i++)\n     {"}, {"sha": "ba8665bdc07b7861547c64092d2c624febe5f380", "filename": "gcc/testsuite/gcc.dg/vect/vect-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -7,12 +7,12 @@\n \n int a[N];\n int results[N] = {0,1,2,3,0,0,0,0,0,0,0,0,12,13,14,15};\n+int b[N] = {0,1,2,3,-4,-5,-6,-7,-8,-9,-10,-11,12,13,14,15};\n \n __attribute__ ((noinline))\n int main1()\n {\n   int i;\n-  int b[N] = {0,1,2,3,-4,-5,-6,-7,-8,-9,-10,-11,12,13,14,15};\n \n   /* Max pattern.  */\n   for (i = 0; i < N; i++)"}, {"sha": "f1bef7f49f2625e49f9756b89494512c9820ceb7", "filename": "gcc/testsuite/gcc.dg/vect/vect-17.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,10 +5,6 @@\n \n #define N 64\n \n-__attribute__ ((noinline)) int\n-main1 ()\n-{\n-  int i;\n   int ia[N];\n   int ib[N]= \n     {1,1,0,0,1,0,1,0,\n@@ -72,6 +68,10 @@ main1 ()\n      1,1,0,0,1,0,1,0,\n      1,1,0,0,1,0,1,0};\n \n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n   /* Check ints.  */\n \n   for (i = 0; i < N; i++)"}, {"sha": "8a2baab3a8ef8d477623324e95e92b7b96844478", "filename": "gcc/testsuite/gcc.dg/vect/vect-18.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,10 +5,6 @@\n \n #define N 64\n \n-__attribute__ ((noinline)) int\n-main1 ()\n-{\n-  int i;\n   int ia[N];\n   int ib[N]= \n     {1,1,0,0,1,0,1,0,\n@@ -71,6 +67,10 @@ main1 ()\n      1,1,0,0,1,0,1,0,\n      1,1,0,0,1,0,1,0};\n \n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n   /* Check ints.  */\n \n   for (i = 0; i < N; i++)"}, {"sha": "022ba1f756546d13692d7111fe0660918cb15bb8", "filename": "gcc/testsuite/gcc.dg/vect/vect-19.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,10 +5,6 @@\n \n #define N 64\n \n-__attribute__ ((noinline)) int\n-main1 ()\n-{\n-  int i;\n   int ia[N];\n   int ib[N]= \n     {1,1,0,0,1,0,1,0,\n@@ -71,6 +67,10 @@ main1 ()\n      1,1,0,0,1,0,1,0,\n      1,1,0,0,1,0,1,0};\n \n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n   /* Check ints.  */\n \n   for (i = 0; i < N; i++)"}, {"sha": "5d4fc914a970dd6ee73d1581dd30153a5aac8b3d", "filename": "gcc/testsuite/gcc.dg/vect/vect-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,11 +5,12 @@\n \n #define N 16\n \n+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+char ca[N];\n+\n __attribute__ ((noinline)) \n int main1 ()\n {  \n-  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  char ca[N];\n   int i;\n \n   for (i = 0; i < N; i++)"}, {"sha": "deed2da44721b14b5c4d955ed5476d212587afd2", "filename": "gcc/testsuite/gcc.dg/vect/vect-20.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,10 +5,6 @@\n \n #define N 64\n \n-__attribute__ ((noinline)) int\n-main1 ()\n-{\n-  int i;\n   int ia[N];\n   int ib[N]= \n     {1,1,0,0,1,0,1,0,\n@@ -42,6 +38,10 @@ main1 ()\n      1,1,0,0,1,0,1,0,\n      1,1,0,0,1,0,1,0};\n \n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n \n   /* Check ints.  */\n "}, {"sha": "7a57506a208738e2beef6835618839cb80fd46b1", "filename": "gcc/testsuite/gcc.dg/vect/vect-21.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-21.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,10 +5,6 @@\n \n #define N 64\n \n-__attribute__ ((noinline)) int\n-main1 ()\n-{\n-  int i;\n   int ia[N];\n   int ib[N]= \n     {1,1,0,0,1,0,1,0,\n@@ -71,6 +67,10 @@ main1 ()\n      1,1,0,0,1,0,1,0,\n      1,1,0,0,1,0,1,0};\n \n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n   /* Check ints.  */\n \n   for (i = 0; i < N; i++)"}, {"sha": "369fab112e5a5f902eddc828be8a656e5952672a", "filename": "gcc/testsuite/gcc.dg/vect/vect-22.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-22.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -6,10 +6,6 @@\n \n #define N 64\n \n-__attribute__ ((noinline)) int\n-main1 ()\n-{\n-  int i;\n   int ia[N];\n   int ib[N]= \n     {1,1,0,0,1,0,1,0,\n@@ -54,6 +50,10 @@ main1 ()\n      1,1,0,0,1,0,1,0,\n      1,1,0,0,1,0,1,0};\n \n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n   /* Check ints.  */\n \n   for (i = 0; i < N; i++)"}, {"sha": "4a2da227e3c5804f2273a2680fe733c3753cfaca", "filename": "gcc/testsuite/gcc.dg/vect/vect-27.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -7,12 +7,13 @@\n \n /* unaligned load.  */\n \n+int ia[N];\n+int ib[N+1];\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n-  int ia[N];\n-  int ib[N+1];\n \n   for (i=0; i <= N; i++)\n     {"}, {"sha": "0ad28488056a65827b6b19ab7127404b8ecec0b5", "filename": "gcc/testsuite/gcc.dg/vect/vect-29.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -8,12 +8,13 @@\n \n /* unaligned load.  */\n \n+int ia[N];\n+int ib[N+OFF];\n+\n __attribute__ ((noinline))\n int main1 (int off)\n {\n   int i;\n-  int ia[N];\n-  int ib[N+OFF];\n \n   for (i = 0; i < N+OFF; i++)\n     {"}, {"sha": "d494deb8507011dbf632e9d58aa97d24c78baaec", "filename": "gcc/testsuite/gcc.dg/vect/vect-3.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-3.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -6,18 +6,19 @@\n \n #define N 20\n \n+float a[N];\n+float e[N];\n+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ia[N];\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n-  float a[N];\n-  float e[N];\n-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n-  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int ia[N];\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "8719fc9d27ef9cae46d0ee70c64ef8ac40566b54", "filename": "gcc/testsuite/gcc.dg/vect/vect-31.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -87,6 +87,4 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4e80bd4cbf20778378d8a66a1f27fdb489cc1128", "filename": "gcc/testsuite/gcc.dg/vect/vect-34.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -8,11 +8,11 @@\n __attribute__ ((noinline))\n int main1 ()\n {  \n+  int i;\n   struct {\n     char ca[N];\n   } s;\n   char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int i;\n \n   for (i = 0; i < N; i++)\n     {\n@@ -37,5 +37,4 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "bc6232dd111133396a8cf3989f9f7af462ff8817", "filename": "gcc/testsuite/gcc.dg/vect/vect-36.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -8,11 +8,12 @@\n __attribute__ ((noinline))\n int main1 ()\n {  \n+  int i;\n   struct {\n     char ca[N];\n     char cb[N];\n   } s;\n-  int i;\n+\n \n   for (i = 0; i < N; i++)\n     {\n@@ -42,6 +43,4 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d86fea11e7967b2c2e0ed08f599d6b1e0e7b9f0f", "filename": "gcc/testsuite/gcc.dg/vect/vect-4.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-4.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,13 +5,14 @@\n \n #define N 20\n \n+float a[N];\n+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n-  float a[N];\n-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "b5938ceae8dac2145d87cd594191aa5ac4c09157", "filename": "gcc/testsuite/gcc.dg/vect/vect-5.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-5.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,13 +5,14 @@\n \n #define N 16\n \n+float a[N];\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i, j;\n-  float a[N];\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n \n   i = 0;\n   j = 0;"}, {"sha": "5f2e0ea59364cabb817d01dec61f1eacc5f3027b", "filename": "gcc/testsuite/gcc.dg/vect/vect-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -7,15 +7,15 @@\n \n float results1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,0.00};\n float results2[N] = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n+float a[N] = {0};\n+float e[N] = {0};\n+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n-  float a[N] = {0};\n-  float e[N] = {0};\n-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n   for (i = 0; i < N/2; i++)\n     { "}, {"sha": "4f9d97bbb2ba8796da1e730122d642fe849d6aed", "filename": "gcc/testsuite/gcc.dg/vect/vect-64.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-64.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,11 +5,12 @@\n \n #define N 16\n \n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i, j;\n-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n   int ia[N][4][N+1];\n   int ic[N][N][3][13];\n   int id[N][N][N];\n@@ -82,6 +83,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ba3ab3a9b15750ec53129e130fe3eb0872286ce1", "filename": "gcc/testsuite/gcc.dg/vect/vect-65.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-65.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -80,5 +80,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4f93bc05d675348ed00c8f90316602f2ff77f7ac", "filename": "gcc/testsuite/gcc.dg/vect/vect-66.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -78,6 +78,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c4f8857ba8adbc6325ac525fb24b8e3a08a4b3e1", "filename": "gcc/testsuite/gcc.dg/vect/vect-68.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-68.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -86,6 +86,4 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "35dc08bbd2cb7ecbde0fa32ee82905f8488649fb", "filename": "gcc/testsuite/gcc.dg/vect/vect-7.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,12 +5,13 @@\n \n #define N 128\n \n+short sa[N];\n+short sb[N];\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n-  short sa[N];\n-  short sb[N];\n   \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "95bc7caede07b5b32fe537828c46a11545e38c96", "filename": "gcc/testsuite/gcc.dg/vect/vect-72.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -7,12 +7,13 @@\n \n /* unaligned load.  */\n \n+char ia[N];\n+char ib[N+1];\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n-  char ia[N];\n-  char ib[N+1];\n \n   for (i=0; i < N+1; i++)\n     {"}, {"sha": "ee3c6e60e15be974b387d8c101f7ad19a38b209a", "filename": "gcc/testsuite/gcc.dg/vect/vect-73.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -6,14 +6,14 @@\n #define N 16\n \n int ic[N*2];\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n \n #define ia (ic+N)\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i, j;\n-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "908ccd249c3f2dec53e3cb38687f4cd297151fb9", "filename": "gcc/testsuite/gcc.dg/vect/vect-76.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -71,5 +71,4 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a3d1b4cd6e993b85a86828b2711839e612081f03", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-alignchecks.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+#define OFF 8\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n+\n+__attribute__ ((noinline))\n+int main1 (int *ib, int off)\n+{\n+  int i;\n+  int ia[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i+off];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+     if (ia[i] != ib[i+off])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (ib, 8);\n+  return 0;\n+}\n+\n+/* For targets that don't support misaligned loads we version for the load.\n+   The store is aligned if alignment can be forced on the stack. Otherwise, we need to\n+   peel the loop in order to align the store. For targets that can't align variables\n+   using peeling (don't guarantee natural alignment) versioning the loop is required\n+   both for the load and the store.  */\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && vect_no_align } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align} } } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "38f1443bb39dcebe7457329c296fc7b6a0fd195d", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-global.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+#define OFF 8\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n+int ia[N];\n+\n+__attribute__ ((noinline))\n+int main1 (int *ib, int off)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i+off];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+     if (ia[i] != ib[i+off])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (ib, 8);\n+  return 0;\n+}\n+\n+/* For targets that don't support misaligned loads we version for the load.\n+   (The store is aligned).  */\n+/* Requires versioning for aliasing.  */\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a6eb2ad8f23b9f0e6d993b150ff9d757b0872582", "filename": "gcc/testsuite/gcc.dg/vect/vect-77.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -42,11 +42,5 @@ int main (void)\n   return 0;\n }\n \n-/* For targets that don't support misaligned loads we version for the load.\n-   (The store is aligned).  */\n-\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5c97b410962c07dca526d53fd178deb67da3b0e5", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-alignchecks.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+#define OFF 8\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n+int off = 8;\n+\n+__attribute__ ((noinline))\n+int main1 (int *ib)\n+{\n+  int i;\n+  int ia[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i+off];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+     if (ia[i] != ib[i+off])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (ib);\n+  return 0;\n+}\n+\n+/* For targets that don't support misaligned loads we version for the load.\n+   The store is aligned if alignment can be forced on the stack. Otherwise, we need to \n+   peel the loop in order to align the store. For targets that can't align variables\n+   using peeling (don't guarantee natural alignment) versioning the loop is required\n+   both for the load and the store.  */\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */ \n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && vect_no_align } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align} } } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "dccc83903daac4820b42018a95ff2ae90dd506ae", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-global.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 8\n+#define OFF 8\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+int ia[N];\n+int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n+int off = 8;\n+\n+__attribute__ ((noinline))\n+int main1 (int *ib)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i+off];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+     if (ia[i] != ib[i+off])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (ib);\n+  return 0;\n+}\n+\n+/* For targets that don't support misaligned loads we version for the load.\n+   (The store is aligned).  */\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "67ce20fda1bcaf50ec88328b80dd941e6d03d27c", "filename": "gcc/testsuite/gcc.dg/vect/vect-78.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -24,7 +24,6 @@ int main1 (int *ib)\n       ia[i] = ib[i+off];\n     }\n \n-\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     {\n@@ -43,11 +42,5 @@ int main (void)\n   return 0;\n }\n \n-/* For targets that don't support misaligned loads we version for the load.\n-   (The store is aligned).  */\n-\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "334e54ee46ddf88fa4d78e9f79ceb1a6daf5d061", "filename": "gcc/testsuite/gcc.dg/vect/vect-86.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-86.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-86.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-86.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,11 +5,13 @@\n \n #define N 16\n \n+int a[N];\n+\n __attribute__ ((noinline))\n int main1 (int n)\n {\n   int i, j, k;\n-  int a[N], b[N];\n+  int b[N];\n \n   for (i = 0; i < n; i++)\n     {"}, {"sha": "6adb7bf88bd09ea50cc6141259502e89f55975f5", "filename": "gcc/testsuite/gcc.dg/vect/vect-all.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -65,24 +65,24 @@ fbar2 (float *a)\n   fcheck_results (a, fresults2);\n } \n \n+float a[N];\n+float e[N];\n+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ia[N];\n+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+char ca[N];\n+short sa[N];\n \n /* All of the loops below are currently vectorizable.  */\n \n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i,j;\n-  float a[N];\n-  float e[N];\n-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n-  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int ia[N];\n-  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  char ca[N];\n-  short sa[N];\n \n   /* Test 1: copy chars.  */\n   for (i = 0; i < N; i++)"}, {"sha": "ad7683381fc027d42c87cd92823babea041f8c9f", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -109,7 +109,7 @@ lappend DEFAULT_VECTCFLAGS \"-O2\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/nodump-*.\\[cS\\]]]  \\\n \t\"\" $DEFAULT_VECTCFLAGS\n \n-lappend DEFAULT_VECTCFLAGS \"-fdump-tree-vect-details\"\n+lappend DEFAULT_VECTCFLAGS \"-fdump-tree-vect-details\" \n \n # Main loop.\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.\\[cS\\]]]  \\"}, {"sha": "5d495440f364c853eeea308293ace82b3c306768", "filename": "gcc/testsuite/gcc.dg/vect/wrapv-vect-7.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-7.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -5,11 +5,12 @@\n \n #define N 128\n \n+short sa[N];\n+short sb[N];\n+\n int main1 ()\n {\n   int i;\n-  short sa[N];\n-  short sb[N];\n   \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "5fe2059dc1e9c184e7e608b127b6145902888530", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -2109,6 +2109,27 @@ proc check_effective_target_vect_unpack { } {\n     return $et_vect_unpack_saved\n }\n \n+# Return 1 if the target plus current options does not guarantee\n+# that its STACK_BOUNDARY is >= the reguired vector alignment.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_unaligned_stack { } {\n+    global et_unaligned_stack_saved\n+\n+    if [info exists et_unaligned_stack_saved] {\n+        verbose \"check_effective_target_unaligned_stack: using cached result\" 2\n+    } else {\n+        set et_unaligned_stack_saved 0\n+        if { ( [istarget i?86-*-*] || [istarget x86_64-*-*] )\n+          && (! [istarget *-*-darwin*] ) } {\n+            set et_unaligned_stack_saved 1\n+        }\n+    }\n+    verbose \"check_effective_target_unaligned_stack: returning $et_unaligned_stack_saved\" 2\n+    return $et_unaligned_stack_saved\n+}\n+\n # Return 1 if the target plus current options does not support a vector\n # alignment mechanism, 0 otherwise.\n #"}, {"sha": "43b51a7da195f63de10a24fbb60b28bd9145e7e6", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96681aaee89f85afacb8172be5ca6dd3342f9c0/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=a96681aaee89f85afacb8172be5ca6dd3342f9c0", "patch": "@@ -1606,12 +1606,9 @@ vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n   if (TREE_STATIC (decl))\n     return (alignment <= MAX_OFILE_ALIGNMENT);\n   else\n-    /* This is not 100% correct.  The absolute correct stack alignment\n-       is STACK_BOUNDARY.  We're supposed to hope, but not assume, that\n-       PREFERRED_STACK_BOUNDARY is honored by all translation units.\n-       However, until someone implements forced stack alignment, SSE\n-       isn't really usable without this.  */  \n-    return (alignment <= PREFERRED_STACK_BOUNDARY); \n+    /* This used to be PREFERRED_STACK_BOUNDARY, however, that is not 100%\n+       correct until someone implements forced stack alignment.  */\n+    return (alignment <= STACK_BOUNDARY); \n }\n \n "}]}