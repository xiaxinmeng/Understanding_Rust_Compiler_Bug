{"sha": "b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2ZjE1NTAwOTcwZmQ5YjAwYWU0YzY5NzlmYmUxYjRhYjdlZDEyNg==", "commit": {"author": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-05-12T18:34:44Z"}, "committer": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-05-12T18:34:44Z"}, "message": "config.gcc (powerpc*-*-*): Add bmi2intrin.h, bmiintrin.h, and x86intrin.h\n\n\n[gcc]\n\n2017-05-12  Steven Munroe  <munroesj@gcc.gnu.org>\n\n\t* config.gcc (powerpc*-*-*): Add bmi2intrin.h, bmiintrin.h,\n\tand x86intrin.h\n\t* config/rs6000/bmiintrin.h: New file.\n\t* config/rs6000/bmi2intrin.h: New file.\n\t* config/rs6000/x86intrin.h: New file.\n\n\n\n[gcc/testsuite]\n\n2017-05-12  Steven Munroe  <munroesj@gcc.gnu.org>\n\n\t* gcc.target/powerpc/bmi-andn-1.c: New file\n\t* gcc.target/powerpc/bmi-andn-2.c: New file.\n\t* gcc.target/powerpc/bmi-bextr-1.c: New file.\n\t* gcc.target/powerpc/bmi-bextr-2.c: New file.\n\t* gcc.target/powerpc/bmi-bextr-4.c: New file.\n\t* gcc.target/powerpc/bmi-bextr-5.c: New file.\n\t* gcc.target/powerpc/bmi-blsi-1.c: New file.\n\t* gcc.target/powerpc/bmi-blsi-2.c: New file.\n\t* gcc.target/powerpc/bmi-blsmsk-1.c: new file.\n\t* gcc.target/powerpc/bmi-blsmsk-2.c: New file.\n\t* gcc.target/powerpc/bmi-blsr-1.c: New file.\n\t* gcc.target/powerpc/bmi-blsr-2.c: New File.\n\t* gcc.target/powerpc/bmi-check.h: New File.\n\t* gcc.target/powerpc/bmi-tzcnt-1.c: new file.\n\t* gcc.target/powerpc/bmi-tzcnt-2.c: New file.\n\t* gcc.target/powerpc/bmi2-bzhi32-1.c: New file.\n\t* gcc.target/powerpc/bmi2-bzhi64-1.c: New file.\n\t* gcc.target/powerpc/bmi2-bzhi64-1a.c: New file.\n\t* gcc.target/powerpc/bmi2-check.h: New file.\n\t* gcc.target/powerpc/bmi2-mulx32-1.c: New file.\n\t* gcc.target/powerpc/bmi2-mulx32-2.c: New file.\n\t* gcc.target/powerpc/bmi2-mulx64-1.c: New file.\n\t* gcc.target/powerpc/bmi2-mulx64-2.c: New file.\n\t* gcc.target/powerpc/bmi2-pdep32-1.c: New file.\n\t* gcc.target/powerpc/bmi2-pdep64-1.c: New file.\n\t* gcc.target/powerpc/bmi2-pext32-1.c: New File.\n\t* gcc.target/powerpc/bmi2-pext64-1.c: New file.\n\t* gcc.target/powerpc/bmi2-pext64-1a.c: New File.\n\nFrom-SVN: r247988", "tree": {"sha": "a1b61fb8d8159e84865f0ec3c9036d0dd3de5a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b61fb8d8159e84865f0ec3c9036d0dd3de5a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/comments", "author": null, "committer": null, "parents": [{"sha": "2a3fa75aac85ff2583799db0204c20e2b8ca8ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3fa75aac85ff2583799db0204c20e2b8ca8ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3fa75aac85ff2583799db0204c20e2b8ca8ba8"}], "stats": {"total": 1517, "additions": 1516, "deletions": 1}, "files": [{"sha": "99f1648f914370c505122e5bb845666cd0620994", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -1,3 +1,11 @@\n+2017-05-12  Steven Munroe  <munroesj@gcc.gnu.org>\n+\n+\t* config.gcc (powerpc*-*-*): Add bmi2intrin.h, bmiintrin.h,\n+\tand x86intrin.h\n+\t* config/rs6000/bmiintrin.h: New file.\n+\t* config/rs6000/bmi2intrin.h: New file.\n+\t* config/rs6000/x86intrin.h: New file.\n+\n 2017-05-12  Jeff Law  <law@redhat.com>\n \n \t* tree-vrp.c (vrp_dom_walker::before_dom_childern): Push unwinding"}, {"sha": "8ce94d01ee06dc0cceeeb314a06993c3e57d8dcb", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -444,7 +444,10 @@ nvptx-*-*)\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n-\textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h spu2vmx.h vec_types.h si2vmx.h htmintrin.h htmxlintrin.h\"\n+\textra_headers=\"ppc-asm.h altivec.h htmintrin.h htmxlintrin.h\"\n+\textra_headers=\"${extra_headers} bmi2intrin.h bmiintrin.h x86intrin.h\"\n+\textra_headers=\"${extra_headers} ppu_intrinsics.h spu2vmx.h vec_types.h si2vmx.h\"\n+\textra_headers=\"${extra_headers} spe.h paired.h\"\n \tcase x$with_cpu in\n \t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456789]|xpower6x|xrs64a|xcell|xa2|xe500mc64|xe5500|xe6500)\n \t\tcpu_is_64bit=yes"}, {"sha": "fc634c1ed607f7f267304c88d79f3744ad3b5b91", "filename": "gcc/config/rs6000/bmi2intrin.h", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig%2Frs6000%2Fbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig%2Frs6000%2Fbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbmi2intrin.h?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,169 @@\n+/* Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <bmi2intrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _BMI2INTRIN_H_INCLUDED\n+#define _BMI2INTRIN_H_INCLUDED\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bzhi_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return ((__X << (32 - __Y)) >> (32 - __Y));\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mulx_u32 (unsigned int __X, unsigned int __Y, unsigned int *__P)\n+{\n+  unsigned long long __res = (unsigned long long) __X * __Y;\n+  *__P = (unsigned int) (__res >> 32);\n+  return (unsigned int) __res;\n+}\n+\n+#ifdef  __PPC64__\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bzhi_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return ((__X << (64 - __Y)) >> (64 - __Y));\n+}\n+\n+/* __int128 requires base 64-bit.  */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mulx_u64 (unsigned long long __X, unsigned long long __Y,\n+\t   unsigned long long *__P)\n+{\n+  unsigned __int128 __res = (unsigned __int128) __X * __Y;\n+  *__P = (unsigned long long) (__res >> 64);\n+  return (unsigned long long) __res;\n+}\n+\n+#ifdef  _ARCH_PWR7\n+/* popcount and bpermd require power7 minimum.  */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pdep_u64 (unsigned long long __X, unsigned long long __M)\n+{\n+  unsigned long result = 0x0UL;\n+  const unsigned long mask = 0x8000000000000000UL;\n+  unsigned long m = __M;\n+  unsigned long c, t;\n+  unsigned long p;\n+\n+  /* The pop-count of the mask gives the number of the bits from\n+   source to process.  This is also needed to shift bits from the\n+   source into the correct position for the result.  */\n+  p = 64 - __builtin_popcountl (__M);\n+\n+  /* The loop is for the number of '1' bits in the mask and clearing\n+   each mask bit as it is processed.  */\n+  while (m != 0)\n+    {\n+      c = __builtin_clzl (m);\n+      t = __X << (p - c);\n+      m ^= (mask >> c);\n+      result |= (t & (mask >> c));\n+      p++;\n+    }\n+  return (result);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pext_u64 (unsigned long long __X, unsigned long long __M)\n+{\n+  unsigned long p = 0x4040404040404040UL; // initial bit permute control\n+  const unsigned long mask = 0x8000000000000000UL;\n+  unsigned long m = __M;\n+  unsigned long c;\n+  unsigned long result;\n+\n+  /* if the mask is constant and selects 8 bits or less we can use\n+   the Power8 Bit permute instruction.  */\n+  if (__builtin_constant_p (__M) && (__builtin_popcountl (__M) <= 8))\n+    {\n+      /* Also if the pext mask is constant, then the popcount is\n+       constant, we can evaluate the following loop at compile\n+       time and use a constant bit permute vector.  */\n+      for (long i = 0; i < __builtin_popcountl (__M); i++)\n+\t{\n+\t  c = __builtin_clzl (m);\n+\t  p = (p << 8) | c;\n+\t  m ^= (mask >> c);\n+\t}\n+      result = __builtin_bpermd (p, __X);\n+    }\n+  else\n+    {\n+      p = 64 - __builtin_popcountl (__M);\n+      result = 0;\n+      /* We could a use a for loop here, but that combined with\n+       -funroll-loops can expand to a lot of code.  The while\n+       loop avoids unrolling and the compiler commons the xor\n+       from clearing the mask bit with the (m != 0) test.  The\n+       result is a more compact loop setup and body.  */\n+      while (m != 0)\n+\t{\n+\t  unsigned long t;\n+\t  c = __builtin_clzl (m);\n+\t  t = (__X & (mask >> c)) >> (p - c);\n+\t  m ^= (mask >> c);\n+\t  result |= (t);\n+\t  p++;\n+\t}\n+    }\n+  return (result);\n+}\n+\n+/* these 32-bit implementations depend on 64-bit pdep/pext\n+   which depend on _ARCH_PWR7.  */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pdep_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return _pdep_u64 (__X, __Y);\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pext_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return _pext_u64 (__X, __Y);\n+}\n+#endif /* _ARCH_PWR7  */\n+#endif /* __PPC64__  */\n+\n+#endif /* _BMI2INTRIN_H_INCLUDED */"}, {"sha": "28671ca0d3275ddeef8502a88b3250ffdb95fa22", "filename": "gcc/config/rs6000/bmiintrin.h", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig%2Frs6000%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig%2Frs6000%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbmiintrin.h?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,187 @@\n+/* Copyright (C) 2010-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <bmiintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _BMIINTRIN_H_INCLUDED\n+#define _BMIINTRIN_H_INCLUDED\n+\n+extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u16 (unsigned short __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__andn_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return (~__X & __Y);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bextr_u32 (unsigned int __X, unsigned int __P, unsigned int __L)\n+{\n+  return ((__X << (32 - (__L + __P))) >> (32 - __L));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextr_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  unsigned int __P, __L;\n+  __P = __Y & 0xFF;\n+  __L = (__Y >> 8) & 0xFF;\n+  return (_bextr_u32 (__X, __P, __L));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsi_u32 (unsigned int __X)\n+{\n+  return (__X & -__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsi_u32 (unsigned int __X)\n+{\n+  return __blsi_u32 (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsmsk_u32 (unsigned int __X)\n+{\n+  return (__X ^ (__X - 1));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsmsk_u32 (unsigned int __X)\n+{\n+  return __blsmsk_u32 (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsr_u32 (unsigned int __X)\n+{\n+  return (__X & (__X - 1));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsr_u32 (unsigned int __X)\n+{\n+  return __blsr_u32 (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+/* use the 64-bit shift, rotate, and count leading zeros instructions\n+   for long long.  */\n+#ifdef  __PPC64__\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__andn_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return (~__X & __Y);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bextr_u64 (unsigned long long __X, unsigned int __P, unsigned int __L)\n+{\n+  return ((__X << (64 - (__L + __P))) >> (64 - __L));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextr_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  unsigned int __P, __L;\n+  __P = __Y & 0xFF;\n+  __L = (__Y & 0xFF00) >> 8;\n+  return (_bextr_u64 (__X, __P, __L));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsi_u64 (unsigned long long __X)\n+{\n+  return __X & -__X;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsi_u64 (unsigned long long __X)\n+{\n+  return __blsi_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsmsk_u64 (unsigned long long __X)\n+{\n+  return (__X ^ (__X - 1));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsmsk_u64 (unsigned long long __X)\n+{\n+  return __blsmsk_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsr_u64 (unsigned long long __X)\n+{\n+  return (__X & (__X - 1));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsr_u64 (unsigned long long __X)\n+{\n+  return __blsr_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ctzll (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ctzll (__X);\n+}\n+#endif /* __PPC64__  */\n+\n+#endif /* _BMIINTRIN_H_INCLUDED */"}, {"sha": "4aa33fdbbf5979b29db461ecbe76b991c31c292e", "filename": "gcc/config/rs6000/x86intrin.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig%2Frs6000%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Fconfig%2Frs6000%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx86intrin.h?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,43 @@\n+/* Copyright (C) 2008-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef NO_WARN_X86_INTRINSICS\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+#warning \"Please read comment above.  Use -DNO_WARN_X86_INTRINSICS to disable this warning.\"\n+#endif\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+#define _X86INTRIN_H_INCLUDED\n+\n+#include <bmiintrin.h>\n+\n+#include <bmi2intrin.h>\n+\n+\n+#endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "3b56e73f69771b7d7a2e5b84eedaededd1a6162e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -1,3 +1,34 @@\n+2017-05-12  Steven Munroe  <munroesj@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/bmi-andn-1.c: New file\n+\t* gcc.target/powerpc/bmi-andn-2.c: New file.\n+\t* gcc.target/powerpc/bmi-bextr-1.c: New file.\n+\t* gcc.target/powerpc/bmi-bextr-2.c: New file.\n+\t* gcc.target/powerpc/bmi-bextr-4.c: New file.\n+\t* gcc.target/powerpc/bmi-bextr-5.c: New file.\n+\t* gcc.target/powerpc/bmi-blsi-1.c: New file.\n+\t* gcc.target/powerpc/bmi-blsi-2.c: New file.\n+\t* gcc.target/powerpc/bmi-blsmsk-1.c: new file.\n+\t* gcc.target/powerpc/bmi-blsmsk-2.c: New file.\n+\t* gcc.target/powerpc/bmi-blsr-1.c: New file.\n+\t* gcc.target/powerpc/bmi-blsr-2.c: New File.\n+\t* gcc.target/powerpc/bmi-check.h: New File.\n+\t* gcc.target/powerpc/bmi-tzcnt-1.c: new file.\n+\t* gcc.target/powerpc/bmi-tzcnt-2.c: New file.\n+\t* gcc.target/powerpc/bmi2-bzhi32-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-bzhi64-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-bzhi64-1a.c: New file.\n+\t* gcc.target/powerpc/bmi2-check.h: New file.\n+\t* gcc.target/powerpc/bmi2-mulx32-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-mulx32-2.c: New file.\n+\t* gcc.target/powerpc/bmi2-mulx64-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-mulx64-2.c: New file.\n+\t* gcc.target/powerpc/bmi2-pdep32-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-pdep64-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-pext32-1.c: New File.\n+\t* gcc.target/powerpc/bmi2-pext64-1.c: New file.\n+\t* gcc.target/powerpc/bmi2-pext64-1a.c: New File.\n+\n 2017-05-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60430"}, {"sha": "6be887ad9ed735fee3b2ba65dbd5c1ddeccc34ab", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-andn-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-andn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-andn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-andn-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+long long calc_andn_u64 (long long src1,\n+\t\t\t long long src2,\n+\t\t\t long long dummy)\n+{\n+  return (~src1 + dummy) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_andn_u64 (src, src+i, 0);\n+    res = __andn_u64 (src, src+i);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "c36a5204ea1ba61d6580b4f767786bf009e2fc6e", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-andn-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-andn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-andn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-andn-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+long long calc_andn_u32 (int src1, int src2, int dummy)\n+{\n+  return (~src1+dummy) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_andn_u32 (src, src+i, 0);\n+    res = __andn_u32 (src, src+i);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "9e593ebdc9734847de091d44ef132419f24313fc", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-bextr-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+long long calc_bextr_u64 (unsigned long long src1,\n+\t\t\t  unsigned long long src2)\n+{\n+  long long res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 64) {\n+    unsigned i;\n+    unsigned last = (start+len) < 64 ? start+len : 64;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned long long src1 = 0xfacec0ffeefacec0;\n+  unsigned long long res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = (i * 1983) % 64;\n+    len = (i + (i * 1983)) % 64;\n+\n+    src1 = src1 * 3;\n+    src2 = start | (((unsigned long long)len) << 8);\n+\n+    res_ref = calc_bextr_u64 (src1, src2);\n+    res = __bextr_u64 (src1, src2);\n+\n+    if (res != res_ref)\n+      abort ();\n+  }\n+}"}, {"sha": "7afe41ed561a2eb9d130bf762d99c40a6cd23954", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-bextr-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+unsigned calc_bextr_u32 (unsigned src1, unsigned src2)\n+{\n+  unsigned res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 32) {\n+    unsigned i;\n+    unsigned last = (start+len) < 32 ? start+len : 32;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned src1 = 0xfacec0ff;\n+  unsigned res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = (i * 1983) % 32;\n+    len = (i + (i * 1983)) % 32;\n+\n+    src1 = src1 * 3;\n+    src2 = start | (((unsigned)len) << 8);\n+\n+    res_ref = calc_bextr_u32 (src1, src2);\n+    res = __bextr_u32 (src1, src2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "23b9abfa9f554cb1607f4685f22bc40e2ae251ef", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-bextr-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-4.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+unsigned calc_bextr_u32 (unsigned src1, unsigned src2)\n+{\n+  unsigned res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 32) {\n+    unsigned i;\n+    unsigned last = (start+len) < 32 ? start+len : 32;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned src1 = 0xfacec0ff;\n+  unsigned res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = i * 4;\n+    len = i * 4;\n+\n+    src1 = src1 * 3;\n+    src2 = (start & 0xff) | ((len & 0xff) << 8);\n+\n+    res_ref = calc_bextr_u32 (src1, src2);\n+    res = _bextr_u32 (src1, start, len);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "96101d1e506d5685374e9a3d3d5878695e735f5c", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-bextr-5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-bextr-5.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+long long calc_bextr_u64 (unsigned long long src1,\n+\t\t\t  unsigned long long src2)\n+{\n+  long long res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 64) {\n+    unsigned i;\n+    unsigned last = (start+len) < 64 ? start+len : 64;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned long long src1 = 0xfacec0ffeefacec0;\n+  unsigned long long res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = i * 4;\n+    len = i * 3;\n+    src1 = src1 * 3;\n+    src2 = (start & 0xff) | ((len & 0xff) << 8);\n+\n+    res_ref = calc_bextr_u64 (src1, src2);\n+    res = _bextr_u64 (src1, start, len);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "4d42ca6b7bd71e99f0dab5ef199dd17d2fea1c9d", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-blsi-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsi-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+/* To fool the compiler, so it does not generate blsi here. */\n+long long calc_blsi_u64 (long long src1, long long src2)\n+{\n+  return (-src1) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_blsi_u64 (src, src);\n+    res = __blsi_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "6e3cceff0202166b90c02c36d4b539732e23ea04", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-blsi-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsi-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+/* To fool the compiler, so it does not generate blsi here. */\n+int calc_blsi_u32 (int src1, int src2)\n+{\n+  return (-src1) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_blsi_u32 (src, src);\n+    res = __blsi_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "a1b86eec0bf9ca792237b7a61a5da061f5f5c606", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-blsmsk-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsmsk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsmsk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsmsk-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+/*  Trick compiler in order not to generate target insn here. */\n+long long calc_blsmsk_u64 (long long src1, long long src2)\n+{\n+  return (src1-1) ^ (src2);\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_blsmsk_u64 (src, src);\n+    res = __blsmsk_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "5c4a359fc21da37d03e12517c0037db0a315c010", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-blsmsk-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsmsk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsmsk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsmsk-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+/*  Trick compiler in order not to generate target insn here. */\n+int calc_blsmsk_u32 (int src1, int src2)\n+{\n+  return (src1-1) ^ (src2);\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_blsmsk_u32 (src, src);\n+    res = __blsmsk_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "d59d41b33dfdbed4579f4c14b3cc8a6affe1cc11", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-blsr-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsr-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+long long calc_blsr_u64 (long long src1, long long src2)\n+{\n+  return (src1-1) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_blsr_u64 (src, src);\n+    res = __blsr_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "bc80e427b5514c80fe4981489742e714b6804af1", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-blsr-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-blsr-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+int calc_blsr_u32 (int src1, int src2)\n+{\n+  return (src1-1) & (src2);\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_blsr_u32 (src, src);\n+    res = __blsr_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "35a2ac29bc384a2278913cdf4f355945c296add3", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-check.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-check.h?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,30 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+static void bmi_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  bmi_test ();\n+}\n+\n+int\n+main ()\n+{\n+  /* Need 64-bit for 64-bit longs as single instruction.  */\n+  if ( __builtin_cpu_supports (\"ppc64\") )\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "572fa0c4c0c865775641290245f12cbfaaea48fa", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-tzcnt-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-tzcnt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-tzcnt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-tzcnt-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+long long calc_tzcnt_u64 (long long src)\n+{\n+  int i;\n+  int res = 0;\n+\n+  while ( (res<64) && ((src&1) == 0)) {\n+    ++res;\n+    src >>= 1;\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = (i + src) << i;\n+\n+    res_ref = calc_tzcnt_u64 (src);\n+    res = __tzcnt_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "37401b009ab9f781f0aee0c6fd5f4fee2bad4a6f", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-tzcnt-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-tzcnt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-tzcnt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-tzcnt-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -m64 -fno-inline\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi-check.h\"\n+\n+int calc_tzcnt_u32 (int src)\n+{\n+  int i;\n+  int res = 0;\n+\n+  while ( (res<32) && ((src&1) == 0)) {\n+    ++res;\n+    src >>= 1;\n+  }\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + (src << i);\n+\n+    res_ref = calc_tzcnt_u32 (src);\n+    res = __tzcnt_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "51a0e896e53cddc83e9a405a1e37f2142eef37be", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-bzhi32-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi32-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_bzhi_u32 (unsigned a, int l)\n+{\n+  unsigned res = a;\n+  int i;\n+  for (i = 0; i < 32 - l; ++i)\n+    res &= ~(1 << (31 - i));\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7ace0f;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_bzhi_u32 (src, i * 2);\n+    res = _bzhi_u32 (src, i * 2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "49804d94bb7736a3694c7a6d4faab6b67ebf2401", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-bzhi64-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi64-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_bzhi_u64 (unsigned long long a, int l)\n+{\n+  unsigned long long res = a;\n+  int i;\n+  for (i = 0; i < 64 - l; ++i)\n+    res &= ~(1LL << (63 - i));\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long src = 0xce7ace0ce7ace0ff;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_bzhi_u64 (src, i * 2);\n+    res = _bzhi_u64 (src, i * 2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "3118198f382fff38e3e3bd180a4cb92412c7247a", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-bzhi64-1a.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-bzhi64-1a.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+\n+unsigned long long\n+test__bzhi_u64_group (unsigned long long a)\n+{\n+  /* bzhi is implemented in source as shift left then shift right\n+   to clear the high order bits.\n+   For the case where the starting index is const, the compiler\n+   should reduces this to a single Rotate Left Doubleword\n+   Immediate then Clear Left (rldicl) instruction.  */\n+  unsigned long long res;\n+  res = _bzhi_u64 (a, 8);\n+  res += _bzhi_u64 (a, 16);\n+  res += _bzhi_u64 (a, 24);\n+  res += _bzhi_u64 (a, 32);\n+  res += _bzhi_u64 (a, 40);\n+  res += _bzhi_u64 (a, 48);\n+  return (res);\n+}\n+/* the resulting assembler should have 6 X rldicl and no sld or\n+   srd instructions.  */\n+\n+/* { dg-final { scan-assembler-times \"rldicl\" 6 } } */\n+/* { dg-final { scan-assembler-not \"sld\" } } */\n+/* { dg-final { scan-assembler-not \"srd\" } } */"}, {"sha": "fa7d4c02a4529d1490fed03b57234ecb953422e5", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-check.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-check.h?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,33 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+static void bmi2_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  bmi2_test ();\n+}\n+\n+int\n+main ()\n+{\n+  /* The BMI2 test for pext test requires the Bit Permute doubleword\n+     (bpermd) instruction added in PowerISA 2.06 along with the VSX\n+     facility.  So we can test for arch_2_06.  */\n+  if ( __builtin_cpu_supports (\"arch_2_06\") )\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}\n+"}, {"sha": "5b465775370d1b6abb5c9f1bdd9808b1f5e487c2", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-mulx32-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx32-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_mul_u32 (unsigned volatile a, unsigned b)\n+{\n+  unsigned long long res = 0;\n+  int i;\n+  for (i = 0; i < b; ++i)\n+    res += a;\n+\n+  return res;\n+}\n+\n+__attribute__((noinline))\n+unsigned long long\n+gen_mulx (unsigned a, unsigned b)\n+{\n+  unsigned long long res;\n+\n+  res = (unsigned long long)a * b;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned a = 0xce7ace0;\n+  unsigned b = 0xfacefff;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    a = a * (i + 1);\n+    b = b / (i + 1);\n+\n+    res_ref = calc_mul_u32 (a, b);\n+    res = gen_mulx (a, b);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "6001d8ed1536ce42acdfeecc7d94e783f1b09abe", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-mulx32-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx32-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_mul_u32 (unsigned volatile a, unsigned b)\n+{\n+  unsigned long long res = 0;\n+  int i;\n+  for (i = 0; i < b; ++i)\n+    res += a;\n+\n+  return res;\n+}\n+\n+__attribute__((noinline))\n+unsigned calc_mulx_u32 (unsigned x, unsigned y, unsigned *res_h)\n+{\n+  return (unsigned) _mulx_u32 (x, y, res_h);\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned a = 0xce7ace0;\n+  unsigned b = 0xfacefff;\n+  unsigned res_l, res_h;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    a = a * (i + 1);\n+    b = b / (i + 1);\n+\n+    res_ref = calc_mul_u32 (a, b);\n+    res_l = calc_mulx_u32 (a, b, &res_h);\n+\n+    res = ((unsigned long long) res_h << 32) | res_l;\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "2e449c23a8dfa11b6566ff00f199c81dd2412b07", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-mulx64-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx64-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned __int128\n+calc_mul_u64 (unsigned long long volatile a, unsigned long long b)\n+{\n+  unsigned __int128 res = 0;\n+  int i;\n+  for (i = 0; i < b; ++i)\n+    res += (unsigned __int128) a;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long a = 0xce7ace0ce7ace0;\n+  unsigned long long b = 0xface;\n+  unsigned __int128 res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    a = a * (i + 1);\n+    b = b / (i + 1);\n+\n+    res_ref = calc_mul_u64 (a, b);\n+    res = (unsigned __int128) a * b;\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "5aa3f806da21e68ae9edbb34ed4245fd8d3a69b7", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-mulx64-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-mulx64-2.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned __int128\n+calc_mul_u64 (unsigned long long volatile a, unsigned long long b)\n+{\n+  unsigned __int128 res = 0;\n+  int i;\n+  for (i = 0; i < b; ++i)\n+    res += (unsigned __int128) a;\n+\n+  return res;\n+}\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_mulx_u64 (unsigned long long x,\n+\t       unsigned long long y,\n+\t       unsigned long long *res_h)\n+{\n+  return _mulx_u64 (x, y, res_h);\n+}\n+\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long a = 0xce7ace0ce7ace0;\n+  unsigned long long b = 0xface;\n+  unsigned long long res_l, res_h;\n+  unsigned __int128 res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    a = a * (i + 1);\n+    b = b / (i + 1);\n+\n+    res_ref = calc_mul_u64 (a, b);\n+\n+    res_l = calc_mulx_u64 (a, b, &res_h);\n+\n+    res = ((unsigned __int128) res_h << 64) | res_l;\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "b5fb3275e24eedd74332c3e01cbd417dae03e604", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-pdep32-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pdep32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pdep32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pdep32-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_pdep_u32 (unsigned a, int mask)\n+{\n+  unsigned res = 0;\n+  int i, k = 0;\n+\n+  for (i = 0; i < 32; ++i)\n+    if (mask & (1 << i)) {\n+      res |= ((a & (1 << k)) >> k) << i;\n+      ++k;\n+    }\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7acc;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pdep_u32 (src, i * 3);\n+    res = _pdep_u32 (src, i * 3);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "6dddb64ef033cf32bc52d8e7f0b081b9485a8d59", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-pdep64-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pdep64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pdep64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pdep64-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_pdep_u64 (unsigned long long a, unsigned long long mask)\n+{\n+  unsigned long long res = 0;\n+  unsigned long long i, k = 0;\n+\n+  for (i = 0; i < 64; ++i)\n+    if (mask & (1LL << i)) {\n+      res |= ((a & (1LL << k)) >> k) << i;\n+      ++k;\n+    }\n+  return res;\n+}\n+\n+static\n+void\n+bmi2_test ()\n+{\n+  unsigned long long i;\n+  unsigned long long src = 0xce7acce7acce7ac;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pdep_u64 (src, ~(i * 3));\n+    res = _pdep_u64 (src, ~(i * 3));\n+\n+    if (res != res_ref)\n+      abort ();\n+  }\n+}"}, {"sha": "9e10c730c931ea68cc7383e0e97b9451ef81fdf6", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-pext32-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext32-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_pext_u32 (unsigned a, unsigned mask)\n+{\n+  unsigned res = 0;\n+  int i, k = 0;\n+\n+  for (i = 0; i < 32; ++i)\n+    if (mask & (1 << i)) {\n+      res |= ((a & (1 << i)) >> i) << k;\n+      ++k;\n+    }\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7acc;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pext_u32 (src, ~(i * 3));\n+    res = _pext_u32 (src, ~(i * 3));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "76fc9ab00b5037a00da22ee14125cd56739e55e5", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-pext64-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext64-1.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_pext_u64 (unsigned long long a, unsigned long long mask)\n+{\n+  unsigned long long res = 0;\n+  int i, k = 0;\n+\n+  for (i = 0; i < 64; ++i)\n+    if (mask & (1LL << i)) {\n+      res |= ((a & (1LL << i)) >> i) << k;\n+      ++k;\n+    }\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned long long i;\n+  unsigned long long src = 0xce7acce7acce7ac;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pext_u64 (src, ~(i * 3));\n+    res = _pext_u64 (src, ~(i * 3));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "a958d104ad30d4ef9aca3fc2f2f5689a18427d54", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-pext64-1a.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-pext64-1a.c?ref=b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -m64 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <x86intrin.h>\n+\n+unsigned long long\n+test__pexp_cmask_u64 (unsigned long long a[4])\n+{\n+  /* The _pext implmentation is nominally a popcount of the mask,\n+     followed by a loop using count leading zeros to find the\n+     next bit to process.\n+     If the mask is a const, the popcount should be folded and\n+     the constant propagation should eliminate the mask\n+     generation loop and produce a single constant bpermd permute\n+     control word.\n+     This test verifies that the compiler is replacing the mask\n+     popcount and loop with a const bperm control and generating\n+     the bpermd for this case.  */\n+  const unsigned long mask = 0x00000000100000a4UL;\n+  unsigned long res;\n+  res = _pext_u64 (a[0], mask);\n+  res = (res << 8) | _pext_u64 (a[1], mask);\n+  res = (res << 8) | _pext_u64 (a[2], mask);\n+  res = (res << 8) | _pext_u64 (a[3], mask);\n+  return (res);\n+}\n+/* the resulting assembler should have 4 X bpermd and no popcntd or\n+   cntlzd instructions.  */\n+\n+/* { dg-final { scan-assembler-times \"bpermd\" 4 } } */\n+/* { dg-final { scan-assembler-not \"popcntd\" } } */\n+/* { dg-final { scan-assembler-not \"cntlzd\" } } */"}]}