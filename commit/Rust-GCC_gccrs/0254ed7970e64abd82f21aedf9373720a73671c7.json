{"sha": "0254ed7970e64abd82f21aedf9373720a73671c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1NGVkNzk3MGU2NGFiZDgyZjIxYWVkZjkzNzM3MjBhNzM2NzFjNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:21:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:21:01Z"}, "message": "[AArch64] Commonise some SVE FP patterns\n\nThis patch uses a single expander for generic FP binary optabs\nthat map to predicated SVE instructions.  This makes them consistent\nwith the associated conditional optabs, which already work this way.\n\nThe patch also generalises the division handling to be one example\nof a register-only predicated FP operation.  The ACLE patches will\nadd FMULX to the same category.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_COND_FP_BINARY_REG): New int\n\titerator.\n\t(sve_pred_fp_rhs1_operand, sve_pred_fp_rhs1_operand): New int\n\tattributes.\n\t* config/aarch64/aarch64-sve.md (add<SVE_F:mode>3, sub<SVE_F:mode>3)\n\t(mul<SVE_F:mode>3, div<SVE_F:mode>3)\n\t(<SVE_COND_FP_MAXMIN_PUBLIC:optab><SVE_F:mode>3): Merge into...\n\t(<SVE_COND_FP_BINARY:optab><SVE_F:mode>3): ...this new expander.\n\t(*div<SVE_F:mode>3): Generalize to...\n\t(*<SVE_COND_FP_BINARY:optab><SVE_F:mode>3): ...this.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274419", "tree": {"sha": "a3529fccc8a270d3ff73af00f8e95b967f7858f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3529fccc8a270d3ff73af00f8e95b967f7858f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0254ed7970e64abd82f21aedf9373720a73671c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0254ed7970e64abd82f21aedf9373720a73671c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0254ed7970e64abd82f21aedf9373720a73671c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0254ed7970e64abd82f21aedf9373720a73671c7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9c5a8090c58b84c1eb45e39e77eee223f992009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c5a8090c58b84c1eb45e39e77eee223f992009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c5a8090c58b84c1eb45e39e77eee223f992009"}], "stats": {"total": 175, "additions": 70, "deletions": 105}, "files": [{"sha": "03577f147c2cc0eedd067f5ab1874c61489c3c4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0254ed7970e64abd82f21aedf9373720a73671c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0254ed7970e64abd82f21aedf9373720a73671c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0254ed7970e64abd82f21aedf9373720a73671c7", "patch": "@@ -1,3 +1,17 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/iterators.md (SVE_COND_FP_BINARY_REG): New int\n+\titerator.\n+\t(sve_pred_fp_rhs1_operand, sve_pred_fp_rhs1_operand): New int\n+\tattributes.\n+\t* config/aarch64/aarch64-sve.md (add<SVE_F:mode>3, sub<SVE_F:mode>3)\n+\t(mul<SVE_F:mode>3, div<SVE_F:mode>3)\n+\t(<SVE_COND_FP_MAXMIN_PUBLIC:optab><SVE_F:mode>3): Merge into...\n+\t(<SVE_COND_FP_BINARY:optab><SVE_F:mode>3): ...this new expander.\n+\t(*div<SVE_F:mode>3): Generalize to...\n+\t(*<SVE_COND_FP_BINARY:optab><SVE_F:mode>3): ...this.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "b6466473dfa0ec433f3b3b85e9d220fb0e4e5ee9", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 34, "deletions": 105, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0254ed7970e64abd82f21aedf9373720a73671c7/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0254ed7970e64abd82f21aedf9373720a73671c7/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=0254ed7970e64abd82f21aedf9373720a73671c7", "patch": "@@ -73,7 +73,6 @@\n ;; ---- [FP] Subtraction\n ;; ---- [FP] Absolute difference\n ;; ---- [FP] Multiplication\n-;; ---- [FP] Division\n ;; ---- [FP] Binary logical operations\n ;; ---- [FP] Sign copying\n ;; ---- [FP] Maximum and minimum\n@@ -2037,6 +2036,38 @@\n ;; - FSUBR\n ;; -------------------------------------------------------------------------\n \n+;; Unpredicated floating-point binary operations.\n+(define_expand \"<optab><mode>3\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\")\n+\t(unspec:SVE_F\n+\t  [(match_dup 3)\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:SVE_F 1 \"<sve_pred_fp_rhs1_operand>\")\n+\t   (match_operand:SVE_F 2 \"<sve_pred_fp_rhs2_operand>\")]\n+\t  SVE_COND_FP_BINARY))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n+;; Predicated floating-point binary operations that have no immediate forms.\n+(define_insn \"*<optab><mode>3\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"0, w, w\")\n+\t   (match_operand:SVE_F 3 \"register_operand\" \"w, 0, w\")]\n+\t  SVE_COND_FP_BINARY_REG))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   <sve_fp_op_rev>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,*,yes\")]\n+)\n+\n ;; Predicated floating-point operations with merging.\n (define_expand \"cond_<optab><mode>\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n@@ -2150,21 +2181,6 @@\n ;; - FSUB\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated floating-point addition.\n-(define_expand \"add<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 3)\n-\t   (const_int SVE_RELAXED_GP)\n-\t   (match_operand:SVE_F 1 \"register_operand\")\n-\t   (match_operand:SVE_F 2 \"aarch64_sve_float_arith_with_sub_operand\")]\n-\t  UNSPEC_COND_FADD))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n ;; Predicated floating-point addition.\n (define_insn_and_split \"*add<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w\")\n@@ -2197,21 +2213,6 @@\n ;; - FSUBR\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated floating-point subtraction.\n-(define_expand \"sub<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 3)\n-\t   (const_int SVE_RELAXED_GP)\n-\t   (match_operand:SVE_F 1 \"aarch64_sve_float_arith_operand\")\n-\t   (match_operand:SVE_F 2 \"register_operand\")]\n-\t  UNSPEC_COND_FSUB))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n ;; Predicated floating-point subtraction.\n (define_insn_and_split \"*sub<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w, w\")\n@@ -2274,21 +2275,6 @@\n ;; - FMUL\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated floating-point multiplication.\n-(define_expand \"mul<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 3)\n-\t   (const_int SVE_RELAXED_GP)\n-\t   (match_operand:SVE_F 1 \"register_operand\")\n-\t   (match_operand:SVE_F 2 \"aarch64_sve_float_mul_operand\")]\n-\t  UNSPEC_COND_FMUL))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n ;; Predicated floating-point multiplication.\n (define_insn_and_split \"*mul<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w\")\n@@ -2311,48 +2297,6 @@\n \n ;; Merging forms are handled through SVE_COND_FP_BINARY.\n \n-;; -------------------------------------------------------------------------\n-;; ---- [FP] Division\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - FDIV\n-;; - FDIVR\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated floating-point division.\n-(define_expand \"div<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 3)\n-\t   (const_int SVE_RELAXED_GP)\n-\t   (match_operand:SVE_F 1 \"register_operand\")\n-\t   (match_operand:SVE_F 2 \"register_operand\")]\n-\t  UNSPEC_COND_FDIV))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; Predicated floating-point division.\n-(define_insn \"*div<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:SVE_F 2 \"register_operand\" \"0, w, w\")\n-\t   (match_operand:SVE_F 3 \"register_operand\" \"w, 0, w\")]\n-\t  UNSPEC_COND_FDIV))]\n-  \"TARGET_SVE\"\n-  \"@\n-   fdiv\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n-   fdivr\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n-   movprfx\\t%0, %2\\;fdiv\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n-)\n-\n-;; Merging forms are handled through SVE_COND_FP_BINARY.\n-\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Binary logical operations\n ;; -------------------------------------------------------------------------\n@@ -2442,23 +2386,8 @@\n ;; - FMINNM\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated floating-point MAX/MIN (the rtx codes).  These are more\n-;; relaxed than fmax/fmin, but we implement them in the same way.\n-(define_expand \"<optab><mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 3)\n-\t   (const_int SVE_RELAXED_GP)\n-\t   (match_operand:SVE_F 1 \"register_operand\")\n-\t   (match_operand:SVE_F 2 \"register_operand\")]\n-\t  SVE_COND_FP_MAXMIN_PUBLIC))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; Unpredicated fmax/fmin (the libm functions).\n+;; Unpredicated fmax/fmin (the libm functions).  The optabs for the\n+;; smin/smax rtx codes are handled in the generic section above.\n (define_expand \"<maxmin_uns><mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F"}, {"sha": "077c3f373d5323466d41e942b170dc9185be4837", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0254ed7970e64abd82f21aedf9373720a73671c7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0254ed7970e64abd82f21aedf9373720a73671c7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0254ed7970e64abd82f21aedf9373720a73671c7", "patch": "@@ -1646,6 +1646,8 @@\n \t\t\t\t\t UNSPEC_COND_FMUL\n \t\t\t\t\t UNSPEC_COND_FSUB])\n \n+(define_int_iterator SVE_COND_FP_BINARY_REG [UNSPEC_COND_FDIV])\n+\n ;; Floating-point max/min operations that correspond to optabs,\n ;; as opposed to those that are internal to the port.\n (define_int_iterator SVE_COND_FP_MAXMIN_PUBLIC [UNSPEC_COND_FMAXNM\n@@ -2003,3 +2005,23 @@\n \t\t\t      (UNSPEC_COND_FMLS \"fmsb\")\n \t\t\t      (UNSPEC_COND_FNMLA \"fnmad\")\n \t\t\t      (UNSPEC_COND_FNMLS \"fnmsb\")])\n+\n+;; The predicate to use for the first input operand in a floating-point\n+;; <optab><mode>3 pattern.\n+(define_int_attr sve_pred_fp_rhs1_operand\n+  [(UNSPEC_COND_FADD \"register_operand\")\n+   (UNSPEC_COND_FDIV \"register_operand\")\n+   (UNSPEC_COND_FMAXNM \"register_operand\")\n+   (UNSPEC_COND_FMINNM \"register_operand\")\n+   (UNSPEC_COND_FMUL \"register_operand\")\n+   (UNSPEC_COND_FSUB \"aarch64_sve_float_arith_operand\")])\n+\n+;; The predicate to use for the second input operand in a floating-point\n+;; <optab><mode>3 pattern.\n+(define_int_attr sve_pred_fp_rhs2_operand\n+  [(UNSPEC_COND_FADD \"aarch64_sve_float_arith_with_sub_operand\")\n+   (UNSPEC_COND_FDIV \"register_operand\")\n+   (UNSPEC_COND_FMAXNM \"register_operand\")\n+   (UNSPEC_COND_FMINNM \"register_operand\")\n+   (UNSPEC_COND_FMUL \"aarch64_sve_float_mul_operand\")\n+   (UNSPEC_COND_FSUB \"register_operand\")])"}]}