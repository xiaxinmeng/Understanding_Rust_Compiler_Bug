{"sha": "fe27aa8bc46f9ce5324d19e1102901639274c578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyN2FhOGJjNDZmOWNlNTMyNGQxOWUxMTAyOTAxNjM5Mjc0YzU3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-16T12:26:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-16T12:26:24Z"}, "message": "stl_construct.h (_Construct): Change to variadic in C++0x mode, consistently with allocator::construct.\n\n2010-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_construct.h (_Construct): Change to variadic in\n\tC++0x mode, consistently with allocator::construct.\n\t* include/bits/stl_uninitialized.h (__uninitialized_copy_n): Use\n\t_Construct.\n\t(__uninitialized_construct_range): Move to...\n\t* include/bits/stl_tempbuf.h (__uninitialized_construct_buf): ... here.\n\nFrom-SVN: r160833", "tree": {"sha": "fe6ecbd3acd9d7b7a44174b9e76aba9e9e35e2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe6ecbd3acd9d7b7a44174b9e76aba9e9e35e2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe27aa8bc46f9ce5324d19e1102901639274c578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe27aa8bc46f9ce5324d19e1102901639274c578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe27aa8bc46f9ce5324d19e1102901639274c578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe27aa8bc46f9ce5324d19e1102901639274c578/comments", "author": null, "committer": null, "parents": [{"sha": "29be38356740af75026c65c627f78d46fee2554d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29be38356740af75026c65c627f78d46fee2554d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29be38356740af75026c65c627f78d46fee2554d"}], "stats": {"total": 186, "additions": 102, "deletions": 84}, "files": [{"sha": "1a79c2939500a93c6a8f02a278760d01532d2f91", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe27aa8bc46f9ce5324d19e1102901639274c578", "patch": "@@ -1,3 +1,12 @@\n+2010-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_construct.h (_Construct): Change to variadic in\n+\tC++0x mode, consistently with allocator::construct.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_copy_n): Use\n+\t_Construct.\n+\t(__uninitialized_construct_range): Move to...\n+\t* include/bits/stl_tempbuf.h (__uninitialized_construct_buf): ... here.\n+\n 2010-06-16  Matthias Klose  <doko@ubuntu.com>\n \n \t* src/compatibility.cc: Export long double versions of \"C\" math\n@@ -11,41 +20,50 @@\n \t* testsuite/lib/prune.exp (dg-prune-output): New.\n \t(libstdc++-dg-prune): Rename from prune_g++_output.\n \tAdd a bunch of prunes from gcc's prune.exp.\n-\t* testsuite/18_support/headers/cstdbool/std_c++0x_neg.cc: Remove dg-excess-errors.\n+\t* testsuite/18_support/headers/cstdbool/std_c++0x_neg.cc:\n+\tRemove dg-excess-errors.\n \t* testsuite/18_support/headers/cstdint/std_c++0x_neg.cc: Likewise.\n \t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Likewise.\n-\t* testsuite/19_diagnostics/headers/system_error/std_c++0x_neg.cc: Likewise.\n+\t* testsuite/19_diagnostics/headers/system_error/std_c++0x_neg.cc:\n+\tLikewise.\n \t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n \t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n \t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n \t* testsuite/20_util/headers/type_traits/std_c++0x_neg.cc: Likewise.\n \t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Likewise.\n-\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n \t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n \t* testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc: Likewise.\n \t* testsuite/20_util/shared_ptr/cons/43820.cc: Likewise.\n \t* testsuite/23_containers/headers/array/std_c++0x_neg.cc: Likewise.\n \t* testsuite/23_containers/headers/tuple/std_c++0x_neg.cc: Likewise.\n-\t* testsuite/23_containers/headers/unordered_map/std_c++0x_neg.cc: Likewise.\n-\t* testsuite/23_containers/headers/unordered_set/std_c++0x_neg.cc: Likewise.\n+\t* testsuite/23_containers/headers/unordered_map/std_c++0x_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/headers/unordered_set/std_c++0x_neg.cc:\n+\tLikewise.\n \t* testsuite/26_numerics/headers/ccomplex/std_c++0x_neg.cc: Likewise.\n \t* testsuite/26_numerics/headers/cfenv/std_c++0x_neg.cc: Likewise.\n \t* testsuite/26_numerics/headers/ctgmath/std_c++0x_neg.cc: Likewise.\n \t* testsuite/26_numerics/headers/random/std_c++0x_neg.cc: Likewise.\n \t* testsuite/27_io/headers/cinttypes/std_c++0x_neg.cc: Likewise.\n \t* testsuite/28_regex/headers/regex/std_c++0x_neg.cc: Likewise.\n \t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n-\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc: Likewise.\n-\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc: Likewise.\n-\t* testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc:\n+\tLikewise.\n \t* testsuite/30_threads/headers/future/std_c++0x_neg.cc: Likewise.\n \t* testsuite/30_threads/headers/mutex/std_c++0x_neg.cc: Likewise.\n \t* testsuite/30_threads/headers/thread/std_c++0x_neg.cc: Likewise.\n \t* testsuite/ext/pb_ds/example/hash_resize_neg.cc: Likewise.\n \t* testsuite/ext/profile/mutex_extensions.cc: Likewise.\n \t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: Likewise.\n \t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Likewise.\n-\t* testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr_neg.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/assign/\n+\tshared_ptr_neg.cc: Likewise.\n \t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820.cc: Likewise.\n \n 2010-06-13  Paolo Carlini <paolo.carlini@oracle.com>"}, {"sha": "d84b8f164fdf1eab9b0a229b68f6dd7513a2db97", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=fe27aa8bc46f9ce5324d19e1102901639274c578", "patch": "@@ -67,19 +67,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    * Constructs an object in existing memory by invoking an allocated\n    * object's constructor with an initializer.\n    */\n-  template<typename _T1, typename _T2>\n-    inline void\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    // Allow perfect forwarding\n-    _Construct(_T1* __p, _T2&& __value)\n+  template<typename _T1, typename... _Args>\n+    inline void\n+    _Construct(_T1* __p, _Args&&... __args)\n+    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }\n #else\n+  template<typename _T1, typename _T2>\n+    inline void\n     _Construct(_T1* __p, const _T2& __value)\n-#endif\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_]allocator::construct\n-      ::new(static_cast<void*>(__p)) _T1(_GLIBCXX_FORWARD(_T2, __value));\n+      ::new(static_cast<void*>(__p)) _T1(__value);\n     }\n+#endif\n \n   /**\n    * Destroy the object pointed to by a pointer type."}, {"sha": "47571179c878a5587be9d4c544e85f70bea73dfb", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 66, "deletions": 3, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=fe27aa8bc46f9ce5324d19e1102901639274c578", "patch": "@@ -59,7 +59,6 @@\n \n #include <bits/stl_algobase.h>\n #include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -176,6 +175,70 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator=(const _Temporary_buffer&);\n     };\n \n+\n+  template<bool>\n+    struct __uninitialized_construct_buf_dispatch\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        __ucr(_ForwardIterator __first, _ForwardIterator __last,\n+\t      _Tp& __value)\n+        {\n+\t  if(__first == __last)\n+\t    return;\n+\n+\t  _ForwardIterator __cur = __first;\n+\t  __try\n+\t    {\n+\t      std::_Construct(std::__addressof(*__first),\n+\t\t\t      _GLIBCXX_MOVE(__value));\n+\t      _ForwardIterator __prev = __cur;\n+\t      ++__cur;\n+\t      for(; __cur != __last; ++__cur, ++__prev)\n+\t\tstd::_Construct(std::__addressof(*__cur),\n+\t\t\t\t_GLIBCXX_MOVE(*__prev));\n+\t      __value = _GLIBCXX_MOVE(*__prev);\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    };\n+\n+  template<>\n+    struct __uninitialized_construct_buf_dispatch<true>\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }\n+    };\n+\n+  // Constructs objects in the range [first, last).\n+  // Note that while these new objects will take valid values,\n+  // their exact value is not defined. In particular they may\n+  // be 'moved from'.\n+  //\n+  // While __value may altered during this algorithm, it will have\n+  // the same value when the algorithm finishes, unless one of the\n+  // constructions throws.\n+  //\n+  // Requirements: _ForwardIterator::value_type(_Tp&&) is valid.\n+  template<typename _ForwardIterator, typename _Tp>\n+    inline void\n+    __uninitialized_construct_buf(_ForwardIterator __first,\n+\t\t\t\t  _ForwardIterator __last,\n+\t\t\t\t  _Tp& __value)\n+    {\n+      typedef typename std::iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n+      std::__uninitialized_construct_buf_dispatch<\n+        __has_trivial_constructor(_ValueType)>::\n+\t  __ucr(__first, __last, __value);\n+    }\n+\n   template<typename _ForwardIterator, typename _Tp>\n     _Temporary_buffer<_ForwardIterator, _Tp>::\n     _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)\n@@ -189,8 +252,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_buffer = __p.first;\n \t  _M_len = __p.second;\n \t  if(_M_buffer)\n-\t    std::__uninitialized_construct_range(_M_buffer, _M_buffer + _M_len,\n-\t\t\t\t\t\t *__first);\n+\t    std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,\n+\t\t\t\t\t       *__first);\n \t}\n       __catch(...)\n \t{"}, {"sha": "7d072d7344d371cbd778ffa405b1b4e2ccaf3dae", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe27aa8bc46f9ce5324d19e1102901639274c578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=fe27aa8bc46f9ce5324d19e1102901639274c578", "patch": "@@ -172,70 +172,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n \n-  template<bool>\n-    struct __uninitialized_construct_range_dispatch\n-    {\n-      template<typename _ForwardIterator, typename _Tp>\n-        static void\n-        __ucr(_ForwardIterator __first, _ForwardIterator __last,\n-\t      _Tp& __value)\n-        {\n-\t  if(__first == __last)\n-\t    return;\n-\n-\t  _ForwardIterator __cur = __first;\n-\t  __try\n-\t    {\n-\t      std::_Construct(std::__addressof(*__first),\n-\t\t\t      _GLIBCXX_MOVE(__value));\n-\t      _ForwardIterator __prev = __cur;\n-\t      ++__cur;\n-\t      for(; __cur != __last; ++__cur, ++__prev)\n-\t\tstd::_Construct(std::__addressof(*__cur),\n-\t\t\t\t_GLIBCXX_MOVE(*__prev));\n-\t      __value = _GLIBCXX_MOVE(*__prev);\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      std::_Destroy(__first, __cur);\n-\t      __throw_exception_again;\n-\t    }\n-\t}\n-    };\n-\n-  template<>\n-    struct __uninitialized_construct_range_dispatch<true>\n-    {\n-      template<typename _ForwardIterator, typename _Tp>\n-        static void\n-        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }\n-    };\n-\n-  // Constructs objects in the range [first, last).\n-  // Note that while these new objects will take valid values,\n-  // their exact value is not defined. In particular they may\n-  // be 'moved from'.\n-  //\n-  // While __value may altered during this algorithm, it will have\n-  // the same value when the algorithm finishes, unless one of the\n-  // constructions throws.\n-  //\n-  // Requirements: _ForwardIterator::value_type(_Tp&&) is valid.\n-  template<typename _ForwardIterator, typename _Tp>\n-    inline void\n-    __uninitialized_construct_range(_ForwardIterator __first,\n-\t\t\t\t    _ForwardIterator __last,\n-\t\t\t\t    _Tp& __value)\n-    {\n-      typedef typename std::iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-\n-      std::__uninitialized_construct_range_dispatch<\n-        __has_trivial_constructor(_ValueType)>::\n-\t  __ucr(__first, __last, __value);\n-    }\n-\n-\n   template<bool>\n     struct __uninitialized_fill_n\n     {\n@@ -501,8 +437,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __try\n \t{\n \t  for (; __n > 0; --__n, ++__first, ++__cur)\n-\t    ::new(static_cast<void*>(std::__addressof(*__cur))) typename\n-\t\titerator_traits<_ForwardIterator>::value_type(*__first);\n+\t    std::_Construct(std::__addressof(*__cur), *__first);\n \t  return __cur;\n \t}\n       __catch(...)"}]}