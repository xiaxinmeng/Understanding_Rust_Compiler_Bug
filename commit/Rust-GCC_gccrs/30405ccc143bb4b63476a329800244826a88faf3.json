{"sha": "30405ccc143bb4b63476a329800244826a88faf3", "node_id": "C_kwDOANBUbNoAKDMwNDA1Y2NjMTQzYmI0YjYzNDc2YTMyOTgwMDI0NDgyNmE4OGZhZjM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-18T15:13:17Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-18T15:18:22Z"}, "message": "Avoid andn and generate shorter not;and with -Oz on x86.\n\nThe x86 instruction encoding for SImode andn is longer than the\nequivalent notl/andl sequence when the source for the not operand\nis the same register as the destination.  This patch adds post_reload\nsplitters to i386.md to avoid \"-mbmi\" (which enables andn) increasing\ncode size with \"-Oz\".\n\nOne minor subtlety with this patch is that the splitter for\n*andn_si_ccno swaps the order of operands (match_dup 2 and match_dup 3)\nas memory operands need to appear first in *test<mode>_1 patterns.\n\n2022-05-18  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (define_split):  Split *andsi_1\n\tand *andn_si_ccno after reload with -Oz.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/bmi-andn-3.c: New test case.", "tree": {"sha": "6638507ed0d6c55379c90160bf00736a44f686ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6638507ed0d6c55379c90160bf00736a44f686ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30405ccc143bb4b63476a329800244826a88faf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30405ccc143bb4b63476a329800244826a88faf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30405ccc143bb4b63476a329800244826a88faf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30405ccc143bb4b63476a329800244826a88faf3/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fdce11dc9e5ddf671b07a3fc6ed70476860b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fdce11dc9e5ddf671b07a3fc6ed70476860b22"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "792bae15f582e80899161c6e32c79c7c5d677811", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30405ccc143bb4b63476a329800244826a88faf3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30405ccc143bb4b63476a329800244826a88faf3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=30405ccc143bb4b63476a329800244826a88faf3", "patch": "@@ -10417,6 +10417,40 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"btver2_decode\" \"direct, double\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Split *andnsi_1 after reload with -Oz when not;and is shorter.\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\"))\n+\t\t(match_operand:SI 2 \"nonimmediate_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\n+   && optimize_insn_for_size_p () && optimize_size > 1\n+   && REGNO (operands[0]) == REGNO (operands[1])\n+   && LEGACY_INT_REG_P (operands[0])\n+   && !REX_INT_REG_P (operands[2])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\"\n+  [(set (match_dup 0) (not:SI (match_dup 1)))\n+   (parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+;; Split *andn_si_ccno with -Oz when not;test is shorter.\n+(define_split\n+  [(set (match_operand 0 \"flags_reg_operand\")\n+\t(match_operator 1 \"compare_operator\"\n+\t  [(and:SI (not:SI (match_operand:SI 2 \"general_reg_operand\"))\n+\t\t   (match_operand:SI 3 \"nonimmediate_operand\"))\n+\t   (const_int 0)]))\n+   (clobber (match_dup 2))]\n+  \"reload_completed\n+   && optimize_insn_for_size_p () && optimize_size > 1\n+   && LEGACY_INT_REG_P (operands[2])\n+   && !REX_INT_REG_P (operands[3])\n+   && !reg_overlap_mentioned_p (operands[2], operands[3])\"\n+  [(set (match_dup 2) (not:SI (match_dup 2)))\n+   (set (match_dup 0) (match_op_dup 1\n+                        [(and:SI (match_dup 3) (match_dup 2))\n+\t\t\t (const_int 0)]))])\n \f\n ;; Logical inclusive and exclusive OR instructions\n "}, {"sha": "16993a3037ad0b595064edf33a8d8ee4c75a00cd", "filename": "gcc/testsuite/gcc.target/i386/bmi-andn-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30405ccc143bb4b63476a329800244826a88faf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30405ccc143bb4b63476a329800244826a88faf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-3.c?ref=30405ccc143bb4b63476a329800244826a88faf3", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Oz -mbmi\" } */\n+int m;\n+\n+int foo(int x, int y)\n+{\n+  return (x & ~y) != 0;\n+}\n+\n+int bar(int x)\n+{\n+  return (~x & m) != 0;\n+}\n+/* { dg-final { scan-assembler-not \"andn\\[ \\\\t\\]+\" } } */\n+"}]}