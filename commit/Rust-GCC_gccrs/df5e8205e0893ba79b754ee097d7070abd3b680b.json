{"sha": "df5e8205e0893ba79b754ee097d7070abd3b680b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY1ZTgyMDVlMDg5M2JhNzliNzU0ZWUwOTdkNzA3MGFiZDNiNjgwYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-12-07T13:05:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-12-07T13:05:43Z"}, "message": "re PR rtl-optimization/12965 (SEGV+ICE in cc1plus on alpha-linux with -O2)\n\n\tPR optimization/12965\n\t* caller-save.c (save_call_clobbered_regs): Do not save/restore\n\tregisters around no-return calls.\n\nFrom-SVN: r74389", "tree": {"sha": "4fc0eacaf5bee70d8056e103f0008fb589332fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc0eacaf5bee70d8056e103f0008fb589332fab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df5e8205e0893ba79b754ee097d7070abd3b680b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5e8205e0893ba79b754ee097d7070abd3b680b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5e8205e0893ba79b754ee097d7070abd3b680b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5e8205e0893ba79b754ee097d7070abd3b680b/comments", "author": null, "committer": null, "parents": [{"sha": "6e3f3080d50a4ca61aac350dd3ecdfc464fd2f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3f3080d50a4ca61aac350dd3ecdfc464fd2f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3f3080d50a4ca61aac350dd3ecdfc464fd2f2d"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "d95d6285edc89e4bdb6258829d3fee1670520860", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df5e8205e0893ba79b754ee097d7070abd3b680b", "patch": "@@ -1,3 +1,9 @@\n+2003-12-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/12965\n+\t* caller-save.c (save_call_clobbered_regs): Do not save/restore\n+\tregisters around no-return calls.\n+\n 2003-12-07  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.in: Make minimum necessary changes for autoconf 2.5x."}, {"sha": "7467385a31e8ca01a3507d307c8e48ff676442c6", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=df5e8205e0893ba79b754ee097d7070abd3b680b", "patch": "@@ -408,7 +408,7 @@ save_call_clobbered_regs (void)\n \t\t  regno += insert_restore (chain, 1, regno, MOVE_MAX_WORDS, save_mode);\n \t    }\n \n-\t  if (code == CALL_INSN)\n+\t  if (code == CALL_INSN && ! find_reg_note (insn, REG_NORETURN, NULL))\n \t    {\n \t      int regno;\n \t      HARD_REG_SET hard_regs_to_save;"}, {"sha": "558f7a441ad9f4a6792a73d761b658e350d3a510", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df5e8205e0893ba79b754ee097d7070abd3b680b", "patch": "@@ -1,3 +1,7 @@\n+2003-12-07  Falk Hueffner  <falk@debian.org>\n+\n+\t* g++.dg/opt/noreturn-1.C: New test.\n+\n 2003-12-07  Wolfgang Bangerth  <bangerth@dealii.org>\n \n \t* gcc.dg/overflow-1.c: New test."}, {"sha": "9b2fc0cf16a8f3fd7025eaf413952b29d80d6c63", "filename": "gcc/testsuite/g++.dg/opt/noreturn-1.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnoreturn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5e8205e0893ba79b754ee097d7070abd3b680b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnoreturn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnoreturn-1.C?ref=df5e8205e0893ba79b754ee097d7070abd3b680b", "patch": "@@ -0,0 +1,87 @@\n+// PR optimization/12965\n+// Origin: <qboosh@pld-linux.org>\n+// Reduced testcase: Falk Hueffner <falk@debian.org>\n+\n+// This ICEd on Alpha because the reload pass emitted save/restore\n+// insns around a no-return call.\n+\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+template <typename _Alloc> class allocator;\n+template <class _CharT> struct char_traits;\n+template <typename _CharT,\n+\t  typename _Traits = char_traits<_CharT>,\n+\t  typename _Alloc = allocator<_CharT> >\n+class basic_string;\n+typedef basic_string<char> string;\n+\n+static inline int __exchange_and_add(volatile int * __mem, int __val) {\n+    int __result;\n+    asm(\"\" : \"=&r\"(__result));\n+    return __result;\n+}\n+\n+template<typename _Tp> struct allocator {\n+    allocator() throw() { }\n+    allocator(const allocator &) throw() {}\n+};\n+\n+template<typename _CharT, typename _Traits, typename _Alloc>\n+struct basic_string {\n+    typedef _Alloc allocator_type;\n+    struct _Rep {\n+\tint _M_references;\n+\tvoid _M_dispose(const _Alloc & __a) {\n+\t    if (__exchange_and_add(&_M_references, -1) <= 0)\n+\t\t_M_destroy(__a);\n+\t} void _M_destroy(const _Alloc &) throw();\n+    };\n+    struct _Alloc_hider : _Alloc {\n+\t_CharT *_M_p;\n+    };\n+    mutable _Alloc_hider _M_dataplus;\n+    _CharT *_M_data() const { return _M_dataplus._M_p; }\n+    _Rep *_M_rep() const {\n+\treturn &((reinterpret_cast<_Rep *>(_M_data()))[-1]);\n+    }\n+    basic_string();\n+    basic_string(const _CharT * __s, const _Alloc & __a = _Alloc());\n+    ~basic_string() {\n+\t_M_rep()->_M_dispose(this->get_allocator());\n+    }\n+    allocator_type get_allocator() const { return _M_dataplus; }\n+};\n+\n+struct Egeneric {\n+    void stack(const string & passage, const string & message = \"\") { }\n+};\n+\n+struct infinint {\n+    void detruit() throw(Egeneric);\n+    template<class T> void infinint_from(T a) throw(Egeneric);\n+    infinint(long a = 0) throw(Egeneric) {\n+\ttry {\n+\t    infinint_from(a);\n+\t} catch(Egeneric& e) {\n+\t    e.stack(\"infinint::infinint\", \"long\");\n+\t}\n+    }\n+    ~infinint() throw(Egeneric) {\n+\ttry {\n+\t    detruit();\n+\t} catch(Egeneric& e) { }\n+    }\n+};\n+\n+struct inode {\n+    string x;\n+    infinint a, c;\n+    infinint ea_offset;\n+    inode();\n+};\n+\n+inode::inode()\n+{\n+    ea_offset = 0;\n+}"}]}