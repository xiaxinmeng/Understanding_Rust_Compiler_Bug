{"sha": "6a7a7f92bdae0e62170d4a556c2b007655960bf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3YTdmOTJiZGFlMGU2MjE3MGQ0YTU1NmMyYjAwNzY1NTk2MGJmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-28T08:15:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-28T08:15:03Z"}, "message": "re PR target/83158 (gcc.target/i386/pr78057.c fail)\n\n2017-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83158\n\t* tree-vrp.c (intersect_ranges): Prefer ~[0, 0] in a few more\n\tcases.\n\nFrom-SVN: r255190", "tree": {"sha": "f12aef74ee4ee5d51cbbcba3784a2c521fbc3da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f12aef74ee4ee5d51cbbcba3784a2c521fbc3da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a7a7f92bdae0e62170d4a556c2b007655960bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7a7f92bdae0e62170d4a556c2b007655960bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7a7f92bdae0e62170d4a556c2b007655960bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7a7f92bdae0e62170d4a556c2b007655960bf3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2eaaa891005cdaf891d6576e351ba846d1f0346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2eaaa891005cdaf891d6576e351ba846d1f0346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2eaaa891005cdaf891d6576e351ba846d1f0346"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "7f5e6cb4573516d47dc828a923c84aea8b44a1cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7a7f92bdae0e62170d4a556c2b007655960bf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7a7f92bdae0e62170d4a556c2b007655960bf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a7a7f92bdae0e62170d4a556c2b007655960bf3", "patch": "@@ -1,3 +1,9 @@\n+2017-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83158\n+\t* tree-vrp.c (intersect_ranges): Prefer ~[0, 0] in a few more\n+\tcases.\n+\n 2017-11-28  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR 81288/target"}, {"sha": "1217f8259b70d04d83a1823f61c1394d20044982", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7a7f92bdae0e62170d4a556c2b007655960bf3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7a7f92bdae0e62170d4a556c2b007655960bf3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6a7a7f92bdae0e62170d4a556c2b007655960bf3", "patch": "@@ -6021,11 +6021,14 @@ intersect_ranges (enum value_range_type *vr0type,\n \t\t   && vrp_val_is_max (vr1max))\n \t    ;\n \t  /* Choose the anti-range if it is ~[0,0], that range is special\n-\t     enough to special case when vr1's range is relatively wide.  */\n+\t     enough to special case when vr1's range is relatively wide.\n+\t     At least for types bigger than int - this covers pointers\n+\t     and arguments to functions like ctz.  */\n \t  else if (*vr0min == *vr0max\n \t\t   && integer_zerop (*vr0min)\n-\t\t   && (TYPE_PRECISION (TREE_TYPE (*vr0min))\n-\t\t       == TYPE_PRECISION (ptr_type_node))\n+\t\t   && ((TYPE_PRECISION (TREE_TYPE (*vr0min))\n+\t\t\t>= TYPE_PRECISION (integer_type_node))\n+\t\t       || POINTER_TYPE_P (TREE_TYPE (*vr0min)))\n \t\t   && TREE_CODE (vr1max) == INTEGER_CST\n \t\t   && TREE_CODE (vr1min) == INTEGER_CST\n \t\t   && (wi::clz (wi::to_wide (vr1max) - wi::to_wide (vr1min))"}]}