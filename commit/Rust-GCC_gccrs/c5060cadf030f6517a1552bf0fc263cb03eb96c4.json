{"sha": "c5060cadf030f6517a1552bf0fc263cb03eb96c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwNjBjYWRmMDMwZjY1MTdhMTU1MmJmMGZjMjYzY2IwM2ViOTZjNA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2017-12-12T11:27:54Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-12-12T11:27:54Z"}, "message": "[Patch combine] Don't create vector mode ZERO_EXTEND from subregs\n\nThe code in simplify set to handle transforming the paradoxical subreg\nexpression:\n\n  (set FOO (subreg:M (mem:N BAR) 0))\n\nin to:\n\n  (set FOO (zero_extend:M (mem:N BAR)))\n\nDoes not consider the case where M is a vector mode, allowing it to\nconstruct (for example):\n\n  (zero_extend:V4SI (mem:SI))\n\nFor one, this has the wrong semantics - but fortunately we fail long\nbefore then in expand_compound_operation.\n\nWe need to explicitly reject vector modes from this transformation.\n\ngcc/\n\n\t* combine.c (simplify_set): Do not transform subregs to zero_extends\n\tif the destination mode is a vector mode.\n\nFrom-SVN: r255578", "tree": {"sha": "1ef03d795f5e00306bb2200aa40cf082fc59bb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ef03d795f5e00306bb2200aa40cf082fc59bb06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5060cadf030f6517a1552bf0fc263cb03eb96c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5060cadf030f6517a1552bf0fc263cb03eb96c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5060cadf030f6517a1552bf0fc263cb03eb96c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5060cadf030f6517a1552bf0fc263cb03eb96c4/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49e6a6c023d1b91c90d3fbdf16adf20dff246156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e6a6c023d1b91c90d3fbdf16adf20dff246156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e6a6c023d1b91c90d3fbdf16adf20dff246156"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "ae7adbcf08afcb775ce28fdf106d034f80a3a7da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5060cadf030f6517a1552bf0fc263cb03eb96c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5060cadf030f6517a1552bf0fc263cb03eb96c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5060cadf030f6517a1552bf0fc263cb03eb96c4", "patch": "@@ -1,3 +1,8 @@\n+2017-12-12  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* combine.c (simplify_set): Do not transform subregs to zero_extends\n+\tif the destination mode is a vector mode.\n+\n 2017-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83359"}, {"sha": "b6410c3afb0b96105fce90f15bd95ae69eb09853", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5060cadf030f6517a1552bf0fc263cb03eb96c4/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5060cadf030f6517a1552bf0fc263cb03eb96c4/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c5060cadf030f6517a1552bf0fc263cb03eb96c4", "patch": "@@ -6962,11 +6962,13 @@ simplify_set (rtx x)\n \n   /* If we have (set FOO (subreg:M (mem:N BAR) 0)) with M wider than N, this\n      would require a paradoxical subreg.  Replace the subreg with a\n-     zero_extend to avoid the reload that would otherwise be required.  */\n+     zero_extend to avoid the reload that would otherwise be required.\n+     Don't do this for vector modes, as the transformation is incorrect.  */\n \n   enum rtx_code extend_op;\n   if (paradoxical_subreg_p (src)\n       && MEM_P (SUBREG_REG (src))\n+      && !VECTOR_MODE_P (GET_MODE (src))\n       && (extend_op = load_extend_op (GET_MODE (SUBREG_REG (src)))) != UNKNOWN)\n     {\n       SUBST (SET_SRC (x),"}]}