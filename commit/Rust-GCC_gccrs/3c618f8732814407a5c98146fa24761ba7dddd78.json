{"sha": "3c618f8732814407a5c98146fa24761ba7dddd78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2MThmODczMjgxNDQwN2E1Yzk4MTQ2ZmEyNDc2MWJhN2RkZGQ3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-19T16:03:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-19T16:03:07Z"}, "message": "random (xor_combine<>::operator<<): Fix typo.\n\n2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (xor_combine<>::operator<<): Fix typo.\n\t\n\t* include/tr1/random (bernoulli_distribution::min(),\n\tbernoulli_distribution::max(), geometric_distribution<>::min(),\n\tgeometric_distribution<>::max()): Remove.\n\n\t* include/tr1/random (geometric_distribution<>::operator()):\n\tSimplify formula.\n\n\t* include/tr1/random: Minor cosmetic changes.\n\n\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n\toperators/equal.cc: New.\n\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n\toperators/not_equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n\toperators/equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n\toperators/not_equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n\toperators/serialize.cc: Likewise.\n\nFrom-SVN: r114777", "tree": {"sha": "dfa086017c9dd38936ecf97ec423c0df48ff3287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa086017c9dd38936ecf97ec423c0df48ff3287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c618f8732814407a5c98146fa24761ba7dddd78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c618f8732814407a5c98146fa24761ba7dddd78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c618f8732814407a5c98146fa24761ba7dddd78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c618f8732814407a5c98146fa24761ba7dddd78/comments", "author": null, "committer": null, "parents": [{"sha": "7ed9c0015f129b4abf51c241f6dec346120088e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed9c0015f129b4abf51c241f6dec346120088e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed9c0015f129b4abf51c241f6dec346120088e1"}], "stats": {"total": 394, "additions": 357, "deletions": 37}, "files": [{"sha": "d01182b7f9f11929a37922507d2ce636f257f386", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -1,3 +1,29 @@\n+2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (xor_combine<>::operator<<): Fix typo.\n+\t\n+\t* include/tr1/random (bernoulli_distribution::min(),\n+\tbernoulli_distribution::max(), geometric_distribution<>::min(),\n+\tgeometric_distribution<>::max()): Remove.\n+\n+\t* include/tr1/random (geometric_distribution<>::operator()):\n+\tSimplify formula.\n+\n+\t* include/tr1/random: Minor cosmetic changes.\n+\n+\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n+\toperators/equal.cc: New.\n+\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n+\toperators/not_equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n+\toperators/equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n+\toperators/not_equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n+\toperators/serialize.cc: Likewise.\n+\n 2006-06-17  Ami Tavory  <atavory@gmail.com>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "69bda57b663e8799d600f170d838fb0c0da50393", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -840,7 +840,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       /**\n        * Constructs a default %discard_block engine.\n        *\n-       * The underlying engine is default constrcuted as well.\n+       * The underlying engine is default constructed as well.\n        */\n       discard_block()\n       : _M_n(0) { }\n@@ -851,16 +851,18 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * Copies an existing base class random number geenerator.\n        * @param rng An existing (base class) engine object.\n        */\n-      explicit discard_block(const base_type& __rng)\n-      : _M_b(__rng) , _M_n(0) { }\n+      explicit\n+      discard_block(const base_type& __rng)\n+      : _M_b(__rng), _M_n(0) { }\n \n       /**\n        * Seed constructs a %discard_block engine.\n        *\n        * Constructs the underlying generator engine seeded with @p __s.\n        * @param __s A seed value for the base class engine.\n        */\n-      explicit discard_block(unsigned long __s)\n+      explicit\n+      discard_block(unsigned long __s)\n       : _M_b(__s), _M_n(0) { }\n \n       /**\n@@ -1135,7 +1137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t\t   const xor_combine& __x)\n-        { return __os << __x.base1() << \" \" << __x.base1(); }\n+        { return __os << __x.base1() << \" \" << __x.base2(); }\n \n       /**\n        * Extracts the current state of a %xor_combine random number\n@@ -1344,7 +1346,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t\t   const uniform_int& __x)\n-        { return __os << __x._M_min << \" \" << __x._M_max; }\n+        { return __os << __x.min() << \" \" << __x.max(); }\n \n       /**\n        * Extracts a %unform_int random number distribution\n@@ -1399,20 +1401,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     p() const\n     { return _M_p; }\n \n-    /**\n-     * Gets the inclusive lower bound of the distribution range.\n-     */\n-    result_type\n-    min() const\n-    { return false; }\n-\n-    /**\n-     * Gets the inclusive upper bound of the distribution range.\n-     */\n-    result_type\n-    max() const\n-    { return true; }\n-\n     /**\n      * Resets the distribution state.\n      *\n@@ -1500,28 +1488,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       p() const\n       { return _M_p; }\n \n-      /**\n-       * Gets the inclusive lower bound of the distribution range.\n-       */\n-      result_type\n-      min() const;\n-\n-      /**\n-       * Gets the inclusive upper bound of the distribution range.\n-       */\n-      result_type\n-      max() const;\n-\n       void\n       reset() { }\n \n       template<class _UniformRandomNumberGenerator>\n         result_type\n         operator()(_UniformRandomNumberGenerator& __urng)\n-        {\n-\t  return result_type(std::floor(std::log(_RealType(1.0) - __urng())\n-\t\t\t\t\t/ _M_log_p)) + result_type(1);\n-\t}\n+        { return result_type(std::ceil(std::log(__urng()) / _M_log_p)); }\n \n       /**\n        * Inserts a %geometric_distribution random number distribution\n@@ -1631,7 +1604,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t\t   const uniform_real& __x)\n-        { return __os << __x._M_min << \" \" << __x._M_max; }\n+        { return __os << __x.min() << \" \" << __x.max(); }\n \n       /**\n        * Extracts a %unform_real random number distribution"}, {"sha": "55c02da21b0c70f4bdcab6e6151ef8e9a1c42926", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/operators/equal.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fequal.cc?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -0,0 +1,53 @@\n+// 2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.5 class template discard_block [tr.rand.eng.disc]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  discard_block\n+    <\n+    subtract_with_carry<long, (1 << 24), 10, 24>,\n+    389, 24\n+    > u, v;\n+\n+  VERIFY( u == v );\n+  \n+  for (int i = 0; i < 100; ++i)\n+    {\n+      u();\n+      v();\n+    }\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0b52507de10dc767d8fd051705031d9569508ca4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/operators/not_equal.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fnot_equal.cc?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -0,0 +1,52 @@\n+// 2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.5 class template discard_block [tr.rand.eng.disc]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  discard_block\n+    <\n+    subtract_with_carry<long, (1 << 24), 10, 24>,\n+    389, 24\n+    > u(1);\n+\n+  discard_block\n+    <\n+    subtract_with_carry<long, (1 << 24), 10, 24>,\n+    389, 24\n+    > v(2);\n+\n+  VERIFY( u != v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8127daa630c920a332c05f85a1a13f09f520f222", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/operators/serialize.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fserialize.cc?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -0,0 +1,55 @@\n+// 2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.5 class template discard_block [tr.rand.eng.disc]\n+// 5.1.1 Table 16\n+\n+#include <sstream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::discard_block;\n+  using std::tr1::subtract_with_carry;\n+\n+  std::stringstream str;\n+  discard_block\n+    <\n+    subtract_with_carry<long, (1 << 24), 10, 24>,\n+    389, 24\n+    > u, v;\n+  \n+  u(); // advance\n+  str << u;\n+  \n+  VERIFY( u != v );\n+  \n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8de84222c90505f164bfec5c023c2d4fb1f5a924", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/operators/equal.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fequal.cc?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -0,0 +1,53 @@\n+// 2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.6 class template xor_combine [tr.rand.eng.xor]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  xor_combine\n+    <\n+    minstd_rand, 1,\n+    mt19937, 2\n+    > u, v;\n+\n+  VERIFY( u == v );\n+  \n+  for (int i = 0; i < 100; ++i)\n+    {\n+      u();\n+      v();\n+    }\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "994f4d358a438f00dddea7d52b61fc52d3a832df", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/operators/not_equal.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fnot_equal.cc?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -0,0 +1,52 @@\n+// 2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.6 class template discard_block [tr.rand.eng.xor]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  xor_combine\n+    <\n+    minstd_rand, 1,\n+    mt19937, 2\n+    > u(1);\n+\n+  xor_combine\n+    <\n+    minstd_rand, 1,\n+    mt19937, 2\n+    > v(2);\n+\n+  VERIFY( u != v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dd92089514994dbb7a3ea818b5a223eadc75ac60", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/operators/serialize.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c618f8732814407a5c98146fa24761ba7dddd78/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fserialize.cc?ref=3c618f8732814407a5c98146fa24761ba7dddd78", "patch": "@@ -0,0 +1,56 @@\n+// 2006-06-19  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.6 class template xor_combine [tr.rand.eng.xor]\n+// 5.1.1 Table 16\n+\n+#include <sstream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::xor_combine;\n+  using std::tr1::minstd_rand;\n+  using std::tr1::mt19937;\n+\n+  std::stringstream str;\n+  xor_combine\n+    <\n+    minstd_rand, 1,\n+    mt19937, 2\n+    > u, v;\n+ \n+  u(); // advance\n+  str << u;\n+  \n+  VERIFY( u != v );\n+  \n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}