{"sha": "bc17882341b506a7e1052fa5be7ddbb3220cb2b1", "node_id": "C_kwDOANBUbNoAKGJjMTc4ODIzNDFiNTA2YTdlMTA1MmZhNWJlN2RkYmIzMjIwY2IyYjE", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-03-16T20:50:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:40Z"}, "message": "[Ada] Enable current value propagation within pragma expressions\n\nThis patch fixes an odd incomplete optimization within pragma\nexpressions. For example, in this code:\n\n   X := True;\n   pragma Assert (X = True);\n   pragma Assert (X);\n\nthe first assertion was eliminated by the frontend (regardless of the\noptimization switches), while the second assertion was only eliminated\nby the backend and only with switch -O1 or similar.\n\nThe problem was that the current value propagation was disabled for\nreferences immediately within pragma argument associations. This was\nmeant to avoid a crash when such a reference appears in pragma\nInspection_Point, but this wasn't a proper fix. The proper solution is\nrather to not expand references in pragma Inspection_Point at all.\n\nActually, this expansion was enabled to avoid a yet another crash, when\nthe parameter of pragma Inspection_Point is a prival (i.e. a renaming of\nprivate protected component). It turns out that none of these suspicious\nproblematic fixes is no longer necessary.\n\nCleanup related to fixes of current value propagation in expansion of\nattribute Loop_Entry.\n\ngcc/ada/\n\n\t* exp_ch2.adb (Expand_Current_Value): Remove special case for\n\treferences immediately within pragma argument associations.\n\t* exp_prag.adb (Expand_Pragma_Inspection_Point): Remove special\n\tcase for privals.", "tree": {"sha": "8569c4769e1a1c24bce85ede1b45d1d05f0a3b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8569c4769e1a1c24bce85ede1b45d1d05f0a3b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc17882341b506a7e1052fa5be7ddbb3220cb2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc17882341b506a7e1052fa5be7ddbb3220cb2b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc17882341b506a7e1052fa5be7ddbb3220cb2b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc17882341b506a7e1052fa5be7ddbb3220cb2b1/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9aa450eb47e440a4b909a10a271fe074e896eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9aa450eb47e440a4b909a10a271fe074e896eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9aa450eb47e440a4b909a10a271fe074e896eb"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "8f97b4382030df2e150e3e7860b4123e13ba6db6", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc17882341b506a7e1052fa5be7ddbb3220cb2b1/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc17882341b506a7e1052fa5be7ddbb3220cb2b1/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=bc17882341b506a7e1052fa5be7ddbb3220cb2b1", "patch": "@@ -150,13 +150,6 @@ package body Exp_Ch2 is\n \n          and then OK_To_Do_Constant_Replacement (E)\n \n-         --  Do not replace occurrences in pragmas (where names typically\n-         --  appear not as values, but as simply names. If there are cases\n-         --  where values are required, it is only a very minor efficiency\n-         --  issue that they do not get replaced when they could be).\n-\n-         and then Nkind (Parent (N)) /= N_Pragma_Argument_Association\n-\n          --  Do not replace the prefixes of attribute references, since this\n          --  causes trouble with cases like 4'Size. Also for Name_Asm_Input and\n          --  Name_Asm_Output, don't do replacement anywhere, since we can have"}, {"sha": "86a3929466a4ebc8c327fe7fdf49ccf22935f3be", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc17882341b506a7e1052fa5be7ddbb3220cb2b1/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc17882341b506a7e1052fa5be7ddbb3220cb2b1/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=bc17882341b506a7e1052fa5be7ddbb3220cb2b1", "patch": "@@ -34,7 +34,6 @@ with Elists;         use Elists;\n with Errout;         use Errout;\n with Exp_Ch11;       use Exp_Ch11;\n with Exp_Util;       use Exp_Util;\n-with Expander;       use Expander;\n with Inline;         use Inline;\n with Lib;            use Lib;\n with Namet;          use Namet;\n@@ -2390,10 +2389,7 @@ package body Exp_Prag is\n          Set_Pragma_Argument_Associations (N, A);\n       end if;\n \n-      --  Process the arguments of the pragma and expand them. Expanding an\n-      --  entity reference is a noop, except in a protected operation, where\n-      --  a reference may have to be transformed into a reference to the\n-      --  corresponding prival. Are there other pragmas that require this ???\n+      --  Process the arguments of the pragma\n \n       Rip := False;\n       Assoc := First (Pragma_Argument_Associations (N));\n@@ -2402,8 +2398,6 @@ package body Exp_Prag is\n \n          Set_Address_Taken (Entity (Expression (Assoc)));\n \n-         Expand (Expression (Assoc));\n-\n          --  If any of the objects have a freeze node, it must appear before\n          --  pragma Inspection_Point, otherwise the entity won't be elaborated\n          --  when Gigi processes the pragma."}]}