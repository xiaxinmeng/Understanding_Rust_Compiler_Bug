{"sha": "ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2ZWM2NjY3YzhhZTY0ZTViZWYxOThlYjZlMGUzNWYxOTFmNGVkMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-02T12:35:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-02T12:35:38Z"}, "message": "re PR tree-optimization/34093 (ICE in ssa_operand_alloc, at tree-ssa-operands.c:484)\n\n2008-01-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34093\n\tPR middle-end/31976\n\t* tree-ssa-operands.c (ssa_operand_alloc): Also allocate a buffer\n\tfor very large number of operands instead of ICEing.\n\n\t* gcc.c-torture/compile/pr34093.c: New testcase.\n\nFrom-SVN: r131257", "tree": {"sha": "229fd5eb9a30eb3318898dfa3eb311a1d050bbe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229fd5eb9a30eb3318898dfa3eb311a1d050bbe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6893e828e53be18698ad20b10afa00f822dc244b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6893e828e53be18698ad20b10afa00f822dc244b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6893e828e53be18698ad20b10afa00f822dc244b"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "490dc74140c11fa049cb57678166b9e1e5b4ec61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "patch": "@@ -1,3 +1,10 @@\n+2008-01-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34093\n+\tPR middle-end/31976\n+\t* tree-ssa-operands.c (ssa_operand_alloc): Also allocate a buffer\n+\tfor very large number of operands instead of ICEing.\n+\n 2008-01-02  Arthur Norman <acn1@cam.ac.uk>\n \n \tPR 34013"}, {"sha": "b16a2b169401c1b21c37a414f2991393d6aa7a8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "patch": "@@ -1,3 +1,9 @@\n+2008-01-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34093\n+\tPR middle-end/31976\n+\t* gcc.c-torture/compile/pr34093.c: New testcase.\n+\n 2008-01-01  Douglas Gregor  <doug.gregor@gmail.com>\n \n        * g++.dg/cpp0x/long_long.C: New."}, {"sha": "4f6934380d92ea2c04e5b6c25fb262d1b24c16dd", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34093.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34093.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34093.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34093.c?ref=ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "patch": "@@ -0,0 +1,39 @@\n+struct X { int i; int j; };\n+#define FOO struct X\n+#define FOO10(x) FOO x ## 0; FOO x ## 1; FOO x ## 2; FOO x ## 3; FOO x ## 4; FOO x ## 5; FOO x ## 6; FOO x ## 7; FOO x ## 8; FOO x ## 9;\n+#define FOO100(x) FOO10(x ## 0) FOO10(x ## 1) FOO10(x ## 2) FOO10(x ## 3) FOO10(x ## 4) FOO10(x ## 5) FOO10(x ## 6) FOO10(x ## 7) FOO10(x ## 8) FOO10(x ## 9)\n+  FOO100(x0)\n+  FOO100(x1)\n+  FOO100(x2)\n+  FOO100(x3)\n+  FOO100(x4)\n+  FOO100(x5)\n+  FOO100(x6)\n+  FOO100(x7)\n+  FOO100(x8)\n+  FOO100(x9)\n+\n+#define COO(n,f) case n: p = &f; break;\n+#define COO10(n,f) COO(n ## 0, f ## 0) COO(n ## 1, f ## 1) COO(n ## 2, f ## 2) COO(n ## 3, f ## 3) COO(n ## 4, f ## 4) COO(n ## 5, f ## 5) COO(n ## 6, f ## 6) COO(n ## 7, f ## 7) COO(n ## 8, f ## 8) COO(n ## 9, f ## 9)\n+#define COO100(n,f) COO10(n ## 0, f ## 0) COO10(n ## 1, f ## 1) COO10(n ## 2, f ## 2) COO10(n ## 3, f ## 3) COO10(n ## 4, f ## 4) COO10(n ## 5, f ## 5) COO10(n ## 6, f ## 6) COO10(n ## 7, f ## 7) COO10(n ## 8, f ## 8) COO10(n ## 9, f ## 9)\n+\n+int foo(int i)\n+{\n+  struct X *p = 0;\n+  x000.i = 0;\n+  x599.j = 0;\n+  switch (i)\n+    {\n+  COO100(1, x0)\n+  COO100(2, x1)\n+  COO100(3, x2)\n+  COO100(4, x3)\n+  COO100(5, x4)\n+  COO100(6, x5)\n+  COO100(7, x6)\n+  COO100(8, x7)\n+  COO100(9, x8)\n+  COO100(10, x9)\n+    }\n+  return p->j;\n+}"}, {"sha": "116877d77bbf4df05df6a7160fe7de431f2e5510", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ee6ec6667c8ae64e5bef198eb6e0e35f191f4ed2", "patch": "@@ -477,11 +477,10 @@ ssa_operand_alloc (unsigned size)\n         gimple_ssa_operands (cfun)->ssa_operand_mem_size\n \t  = OP_SIZE_3 * sizeof (struct voptype_d);\n \n-      /* Fail if there is not enough space.  If there are this many operands\n-\t required, first make sure there isn't a different problem causing this\n-\t many operands.  If the decision is that this is OK, then we can \n-\t specially allocate a buffer just for this request.  */\n-      gcc_assert (size <= gimple_ssa_operands (cfun)->ssa_operand_mem_size);\n+      /* We can reliably trigger the case that we need arbitrary many\n+\t operands (see PR34093), so allocate a buffer just for this request.  */\n+      if (size > gimple_ssa_operands (cfun)->ssa_operand_mem_size)\n+\tgimple_ssa_operands (cfun)->ssa_operand_mem_size = size;\n \n       ptr = (struct ssa_operand_memory_d *) \n \t      ggc_alloc (sizeof (struct ssa_operand_memory_d) "}]}