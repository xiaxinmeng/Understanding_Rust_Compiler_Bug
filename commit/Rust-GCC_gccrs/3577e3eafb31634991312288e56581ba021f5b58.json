{"sha": "3577e3eafb31634991312288e56581ba021f5b58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3N2UzZWFmYjMxNjM0OTkxMzEyMjg4ZTU2NTgxYmEwMjFmNWI1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-03-07T16:53:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-03-07T16:53:44Z"}, "message": "cmath: Add C99 overloads.\n\n2006-03-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cmath: Add C99 overloads.\n\t* include/tr1/common.h (struct __promote_3): Add.\n\t* testsuite/tr1/8_c_compatibility/cmath/overloads.cc: New.\n\n\t* testsuite/tr1/8_c_compatibility/cmath/functions.cc: Tweak.\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_float.cc: Likewise.\n\nFrom-SVN: r111813", "tree": {"sha": "7166513c8e65083ff3a5bc54253d973a2f71aaac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7166513c8e65083ff3a5bc54253d973a2f71aaac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3577e3eafb31634991312288e56581ba021f5b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3577e3eafb31634991312288e56581ba021f5b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3577e3eafb31634991312288e56581ba021f5b58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3577e3eafb31634991312288e56581ba021f5b58/comments", "author": null, "committer": null, "parents": [{"sha": "43e12534bf91e2b275481c7e8a9d7261931f1c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e12534bf91e2b275481c7e8a9d7261931f1c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e12534bf91e2b275481c7e8a9d7261931f1c96"}], "stats": {"total": 833, "additions": 821, "deletions": 12}, "files": [{"sha": "e6a19380c0413f115a91f25196c4c16fd311811a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3577e3eafb31634991312288e56581ba021f5b58", "patch": "@@ -1,3 +1,12 @@\n+2006-03-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cmath: Add C99 overloads.\n+\t* include/tr1/common.h (struct __promote_3): Add.\n+\t* testsuite/tr1/8_c_compatibility/cmath/overloads.cc: New.\n+\n+\t* testsuite/tr1/8_c_compatibility/cmath/functions.cc: Tweak.\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_float.cc: Likewise.\n+\n 2006-03-06  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR target/26532"}, {"sha": "0bde0570175e529b21ae70eba2b5ffd5297c8adc", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 551, "deletions": 0, "changes": 551, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=3577e3eafb31634991312288e56581ba021f5b58", "patch": "@@ -36,6 +36,7 @@\n \n #include <bits/c++config.h>\n #include <cmath>\n+#include <tr1/common.h>\n \n #if _GLIBCXX_USE_C99_MATH_TR1\n \n@@ -320,6 +321,556 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n #endif\n #endif\n \n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+  /// @brief Additional overloads [8.16.4].\n+  //\n+  inline float\n+  acosh(float __x)\n+  { return __builtin_acoshf(__x); }\n+\n+  inline long double\n+  acosh(long double __x)\n+  { return __builtin_acoshl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    acosh(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return acosh(__type(__x));\n+    }\n+\n+  inline float\n+  asinh(float __x)\n+  { return __builtin_asinhf(__x); }\n+\n+  inline long double\n+  asinh(long double __x)\n+  { return __builtin_asinhl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    asinh(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return asinh(__type(__x));\n+    }\n+\n+  inline float\n+  atanh(float __x)\n+  { return __builtin_atanhf(__x); }\n+\n+  inline long double\n+  atanh(long double __x)\n+  { return __builtin_atanhl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    atanh(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return atanh(__type(__x));\n+    }\n+\n+  inline float\n+  cbrt(float __x)\n+  { return __builtin_cbrtf(__x); }\n+\n+  inline long double\n+  cbrt(long double __x)\n+  { return __builtin_cbrtl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    cbrt(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return cbrt(__type(__x));\n+    }\n+\n+  inline float\n+  copysign(float __x, float __y)\n+  { return __builtin_copysignf(__x, __y); }\n+\n+  inline long double\n+  copysign(long double __x, long double __y)\n+  { return __builtin_copysignl(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    copysign(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return copysign(__type(__x), __type(__y));\n+    }\n+\n+  inline float\n+  erf(float __x)\n+  { return __builtin_erff(__x); }\n+\n+  inline long double\n+  erf(long double __x)\n+  { return __builtin_erfl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    erf(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return erf(__type(__x));\n+    }\n+\n+  inline float\n+  erfc(float __x)\n+  { return __builtin_erfcf(__x); }\n+\n+  inline long double\n+  erfc(long double __x)\n+  { return __builtin_erfcl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    erfc(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return erfc(__type(__x));\n+    }\n+\n+  inline float\n+  exp2(float __x)\n+  { return __builtin_exp2f(__x); }\n+\n+  inline long double\n+  exp2(long double __x)\n+  { return __builtin_exp2l(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    exp2(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return exp2(__type(__x));\n+    }\n+\n+  inline float\n+  expm1(float __x)\n+  { return __builtin_expm1f(__x); }\n+\n+  inline long double\n+  expm1(long double __x)\n+  { return __builtin_expm1l(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    expm1(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return expm1(__type(__x));\n+    }\n+\n+  inline float\n+  fdim(float __x, float __y)\n+  { return __builtin_fdimf(__x, __y); }\n+\n+  inline long double\n+  fdim(long double __x, long double __y)\n+  { return __builtin_fdiml(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    fdim(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return fdim(__type(__x), __type(__y));\n+    }\n+\n+  inline float\n+  fma(float __x, float __y, float __z)\n+  { return __builtin_fmaf(__x, __y, __z); }\n+\n+  inline long double\n+  fma(long double __x, long double __y, long double __z)\n+  { return __builtin_fmal(__x, __y, __z); }\n+\n+  template<typename _Tp, typename _Up, typename _Vp>\n+    inline typename __promote_3<_Tp, _Up, _Vp>::__type\n+    fma(_Tp __x, _Up __y, _Vp __z)\n+    {\n+      typedef typename __promote_3<_Tp, _Up, _Vp>::__type __type;\n+      return fma(__type(__x), __type(__y), __type(__z));\n+    }\n+\n+  inline float\n+  fmax(float __x, float __y)\n+  { return __builtin_fmaxf(__x, __y); }\n+\n+  inline long double\n+  fmax(long double __x, long double __y)\n+  { return __builtin_fmaxl(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    fmax(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return fmax(__type(__x), __type(__y));\n+    }\n+\n+  inline float\n+  fmin(float __x, float __y)\n+  { return __builtin_fminf(__x, __y); }\n+\n+  inline long double\n+  fmin(long double __x, long double __y)\n+  { return __builtin_fminl(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    fmin(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return fmin(__type(__x), __type(__y));\n+    }\n+\n+  inline float\n+  hypot(float __x, float __y)\n+  { return __builtin_hypotf(__x, __y); }\n+\n+  inline long double\n+  hypot(long double __x, long double __y)\n+  { return __builtin_hypotl(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    hypot(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return hypot(__type(__x), __type(__y));\n+    }\n+\n+  inline int\n+  ilogb(float __x)\n+  { return __builtin_ilogbf(__x); }\n+\n+  inline int\n+  ilogb(long double __x)\n+  { return __builtin_ilogbl(__x); }\n+\n+  template<typename _Tp>\n+    inline int\n+    ilogb(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return ilogb(__type(__x));\n+    }\n+\n+  inline float\n+  lgamma(float __x)\n+  { return __builtin_lgammaf(__x); }\n+\n+  inline long double\n+  lgamma(long double __x)\n+  { return __builtin_lgammal(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    lgamma(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return lgamma(__type(__x));\n+    }\n+\n+  inline long long\n+  llrint(float __x)\n+  { return __builtin_llrintf(__x); }\n+\n+  inline long long\n+  llrint(long double __x)\n+  { return __builtin_llrintl(__x); }\n+\n+  template<typename _Tp>\n+    inline long long\n+    llrint(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return llrint(__type(__x));\n+    }\n+\n+  inline long long\n+  llround(float __x)\n+  { return __builtin_llroundf(__x); }\n+\n+  inline long long\n+  llround(long double __x)\n+  { return __builtin_llroundl(__x); }\n+\n+  template<typename _Tp>\n+    inline long long\n+    llround(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return llround(__type(__x));\n+    }\n+\n+  inline float\n+  log1p(float __x)\n+  { return __builtin_log1pf(__x); }\n+\n+  inline long double\n+  log1p(long double __x)\n+  { return __builtin_log1pl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    log1p(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return log1p(__type(__x));\n+    }\n+\n+  inline float\n+  log2(float __x)\n+  { return __builtin_log2f(__x); }\n+\n+  inline long double\n+  log2(long double __x)\n+  { return __builtin_log2l(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    log2(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return log2(__type(__x));\n+    }\n+\n+  inline float\n+  logb(float __x)\n+  { return __builtin_logbf(__x); }\n+\n+  inline long double\n+  logb(long double __x)\n+  { return __builtin_logbl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    logb(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return logb(__type(__x));\n+    }\n+\n+  inline long\n+  lrint(float __x)\n+  { return __builtin_lrintf(__x); }\n+\n+  inline long\n+  lrint(long double __x)\n+  { return __builtin_lrintl(__x); }\n+\n+  template<typename _Tp>\n+    inline long\n+    lrint(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return lrint(__type(__x));\n+    }\n+\n+  inline long\n+  lround(float __x)\n+  { return __builtin_lroundf(__x); }\n+\n+  inline long\n+  lround(long double __x)\n+  { return __builtin_lroundl(__x); }\n+\n+  template<typename _Tp>\n+    inline long\n+    lround(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return lround(__type(__x));\n+    }\n+\n+  inline float\n+  nearbyint(float __x)\n+  { return __builtin_nearbyintf(__x); }\n+\n+  inline long double\n+  nearbyint(long double __x)\n+  { return __builtin_nearbyintl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    nearbyint(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return nearbyint(__type(__x));\n+    }\n+\n+  inline float\n+  nextafter(float __x, float __y)\n+  { return __builtin_nextafterf(__x, __y); }\n+\n+  inline long double\n+  nextafter(long double __x, long double __y)\n+  { return __builtin_nextafterl(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    nextafter(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return nextafter(__type(__x), __type(__y));\n+    }\n+\n+  inline float\n+  nexttoward(float __x, long double __y)\n+  { return __builtin_nexttowardf(__x, __y); }\n+\n+  inline long double\n+  nexttoward(long double __x, long double __y)\n+  { return __builtin_nexttowardl(__x, __y); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    nexttoward(_Tp __x, long double __y)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return nexttoward(__type(__x), __y);\n+    }\n+\n+  inline float\n+  remainder(float __x, float __y)\n+  { return __builtin_remainderf(__x, __y); }\n+\n+  inline long double\n+  remainder(long double __x, long double __y)\n+  { return __builtin_remainderl(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    remainder(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return remainder(__type(__x), __type(__y));\n+    }\n+\n+  inline float\n+  remquo(float __x, float __y, int* __pquo)\n+  { return __builtin_remquof(__x, __y, __pquo); }\n+\n+  inline long double\n+  remquo(long double __x, long double __y, int* __pquo)\n+  { return __builtin_remquol(__x, __y, __pquo); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    remquo(_Tp __x, _Up __y, int* __pquo)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return remquo(__type(__x), __type(__y), __pquo);\n+    }\n+\n+  inline float\n+  rint(float __x)\n+  { return __builtin_rintf(__x); }\n+\n+  inline long double\n+  rint(long double __x)\n+  { return __builtin_rintl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    rint(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return rint(__type(__x));\n+    }\n+\n+  inline float\n+  round(float __x)\n+  { return __builtin_roundf(__x); }\n+\n+  inline long double\n+  round(long double __x)\n+  { return __builtin_roundl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    round(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return round(__type(__x));\n+    }\n+\n+  inline float\n+  scalbln(float __x, long __ex)\n+  { return __builtin_scalblnf(__x, __ex); }\n+\n+  inline long double\n+  scalbln(long double __x, long __ex)\n+  { return __builtin_scalblnl(__x, __ex); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    scalbln(_Tp __x, long __ex)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return scalbln(__type(__x), __ex);\n+    }\n+ \n+  inline float\n+  scalbn(float __x, int __ex)\n+  { return __builtin_scalbnf(__x, __ex); }\n+\n+  inline long double\n+  scalbn(long double __x, int __ex)\n+  { return __builtin_scalbnl(__x, __ex); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    scalbn(_Tp __x, int __ex)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return scalbn(__type(__x), __ex);\n+    }\n+\n+  inline float\n+  tgamma(float __x)\n+  { return __builtin_tgammaf(__x); }\n+\n+  inline long double\n+  tgamma(long double __x)\n+  { return __builtin_tgammal(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    tgamma(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return tgamma(__type(__x));\n+    }\n+ \n+  inline float\n+  trunc(float __x)\n+  { return __builtin_truncf(__x); }\n+\n+  inline long double\n+  trunc(long double __x)\n+  { return __builtin_truncl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type \n+    trunc(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return trunc(__type(__x));\n+    }\n+\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n }\n "}, {"sha": "1548af02efc5de1de0db1b7bbfda5ea895df3dd1", "filename": "libstdc++-v3/include/tr1/common.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h?ref=3577e3eafb31634991312288e56581ba021f5b58", "patch": "@@ -49,15 +49,27 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     struct __promote<_Tp, false>\n     { typedef _Tp __type; };\n \n-  template<typename _Tp, typename _Up> \n+  template<typename _Tp, typename _Up>\n     struct __promote_2\n     {\n     private:\n       typedef typename __promote<_Tp>::__type __type1;\n-      typedef typename __promote<_Up>::__type __type2;    \n-      \n+      typedef typename __promote<_Up>::__type __type2;\n+\n+    public:\n+      typedef __typeof__(__type1() + __type2()) __type;\n+    };\n+\n+  template<typename _Tp, typename _Up, typename _Vp>\n+    struct __promote_3\n+    {\n+    private:\n+      typedef typename __promote<_Tp>::__type __type1;\n+      typedef typename __promote<_Up>::__type __type2;\n+      typedef typename __promote<_Vp>::__type __type3;\n+\n     public:\n-      typedef __typeof__(__type1() + __type2()) __type; \n+      typedef __typeof__(__type1() + __type2() + __type3()) __type;\n     };\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "a0949fad088c4a8dd8c7ebaf7f633f14821bc0cc", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/functions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc?ref=3577e3eafb31634991312288e56581ba021f5b58", "patch": "@@ -147,8 +147,8 @@ void test01()\n   fret = nextafterf(f0, f0);\n   ldret = nextafterl(ld0, ld0);\n \n-  ret = nexttoward(d0, d0);\n-  fret = nexttowardf(f0, f0);\n+  ret = nexttoward(d0, ld0);\n+  fret = nexttowardf(f0, ld0);\n   ldret = nexttowardl(ld0, ld0);\n \n   ret = remainder(d0, d0);"}, {"sha": "e54a8e322de2727c6845036ca160e16128f12deb", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/overloads.cc", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc?ref=3577e3eafb31634991312288e56581ba021f5b58", "patch": "@@ -0,0 +1,241 @@\n+// { dg-do compile }\n+\n+// 2006-03-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.16.4 Additional overloads\n+\n+#include <tr1/cmath>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+  using namespace std::tr1;\n+  using namespace __gnu_test;\n+\n+  double d0 = 0.0;\n+  float f0 = 0.0f;\n+  long double ld0 = 0.0l;\n+  int i0 = 0;  \n+  int* pquo = 0;\n+  long lex = 0l;\n+  int ex = 0;\n+\n+  check_ret_type<double>(acosh(d0));\n+  check_ret_type<float>(acosh(f0));\n+  check_ret_type<long double>(acosh(ld0));\n+  check_ret_type<double>(acosh(i0));\n+\n+  check_ret_type<double>(asinh(d0));\n+  check_ret_type<float>(asinh(f0));\n+  check_ret_type<long double>(asinh(ld0));\n+  check_ret_type<double>(asinh(i0));\n+\n+  check_ret_type<double>(atanh(d0));\n+  check_ret_type<float>(atanh(f0));\n+  check_ret_type<long double>(atanh(ld0));\n+  check_ret_type<double>(atanh(i0));\n+\n+  check_ret_type<double>(cbrt(d0));\n+  check_ret_type<float>(cbrt(f0));\n+  check_ret_type<long double>(cbrt(ld0));\n+  check_ret_type<double>(cbrt(i0));\n+\n+  check_ret_type<double>(copysign(d0, d0));\n+  check_ret_type<double>(copysign(d0, f0));\n+  check_ret_type<float>(copysign(f0, f0));\n+  check_ret_type<long double>(copysign(ld0, ld0));\n+  check_ret_type<long double>(copysign(ld0, d0));\n+  check_ret_type<double>(copysign(i0, i0));  \n+  check_ret_type<double>(copysign(d0, i0));\n+\n+  check_ret_type<double>(erf(d0));\n+  check_ret_type<float>(erf(f0));\n+  check_ret_type<long double>(erf(ld0));\n+  check_ret_type<double>(erf(i0));\n+\n+  check_ret_type<double>(erfc(d0));\n+  check_ret_type<float>(erfc(f0));\n+  check_ret_type<long double>(erfc(ld0));\n+  check_ret_type<double>(erfc(i0));\n+\n+  check_ret_type<double>(exp2(d0));\n+  check_ret_type<float>(exp2(f0));\n+  check_ret_type<long double>(exp2(ld0));\n+  check_ret_type<double>(exp2(i0));\n+\n+  check_ret_type<double>(expm1(d0));\n+  check_ret_type<float>(expm1(f0));\n+  check_ret_type<long double>(expm1(ld0));\n+  check_ret_type<double>(expm1(i0));\n+\n+  check_ret_type<double>(fdim(d0, d0));\n+  check_ret_type<double>(fdim(d0, f0));\n+  check_ret_type<float>(fdim(f0, f0));\n+  check_ret_type<long double>(fdim(ld0, ld0));\n+  check_ret_type<long double>(fdim(ld0, d0));\n+  check_ret_type<double>(fdim(i0, i0));\n+  check_ret_type<double>(fdim(d0, i0));\n+\n+  check_ret_type<double>(fma(d0, d0, d0));\n+  check_ret_type<double>(fma(d0, f0, d0));\n+  check_ret_type<float>(fma(f0, f0, f0));\n+  check_ret_type<long double>(fma(ld0, ld0, ld0));\n+  check_ret_type<long double>(fma(ld0, d0, f0));\n+  check_ret_type<double>(fma(i0, i0, i0));\n+  check_ret_type<double>(fma(d0, i0, f0));\n+\n+  check_ret_type<double>(fmax(d0, d0));\n+  check_ret_type<double>(fmax(d0, f0));\n+  check_ret_type<float>(fmax(f0, f0));\n+  check_ret_type<long double>(fmax(ld0, ld0));\n+  check_ret_type<long double>(fmax(ld0, d0));\n+  check_ret_type<double>(fmax(i0, i0));\n+  check_ret_type<double>(fmax(d0, i0));\n+\n+  check_ret_type<double>(fmin(d0, d0));\n+  check_ret_type<double>(fmin(d0, f0));\n+  check_ret_type<float>(fmin(f0, f0));\n+  check_ret_type<long double>(fmin(ld0, ld0));\n+  check_ret_type<long double>(fmin(ld0, d0));\n+  check_ret_type<double>(fmin(i0, i0));\n+  check_ret_type<double>(fmin(d0, i0));\n+\n+  check_ret_type<double>(hypot(d0, d0));\n+  check_ret_type<double>(hypot(d0, f0));\n+  check_ret_type<float>(hypot(f0, f0));\n+  check_ret_type<long double>(hypot(ld0, ld0));\n+  check_ret_type<long double>(hypot(ld0, d0));\n+  check_ret_type<double>(hypot(i0, i0));\n+  check_ret_type<double>(hypot(d0, i0));\n+\n+  check_ret_type<int>(ilogb(d0));\n+  check_ret_type<int>(ilogb(f0));\n+  check_ret_type<int>(ilogb(ld0));\n+  check_ret_type<int>(ilogb(i0));\n+\n+  check_ret_type<double>(lgamma(d0));\n+  check_ret_type<float>(lgamma(f0));\n+  check_ret_type<long double>(lgamma(ld0));\n+  check_ret_type<double>(lgamma(i0));\n+\n+  check_ret_type<long long>(llrint(d0));\n+  check_ret_type<long long>(llrint(f0));\n+  check_ret_type<long long>(llrint(ld0));\n+  check_ret_type<long long>(llrint(i0));\n+\n+  check_ret_type<long long>(llround(d0));\n+  check_ret_type<long long>(llround(f0));\n+  check_ret_type<long long>(llround(ld0));\n+  check_ret_type<long long>(llround(i0));\n+\n+  check_ret_type<double>(log1p(d0));\n+  check_ret_type<float>(log1p(f0));\n+  check_ret_type<long double>(log1p(ld0));\n+  check_ret_type<double>(log1p(i0));\n+\n+  check_ret_type<double>(log2(d0));\n+  check_ret_type<float>(log2(f0));\n+  check_ret_type<long double>(log2(ld0));\n+  check_ret_type<double>(log2(i0));\n+\n+  check_ret_type<double>(logb(d0));\n+  check_ret_type<float>(logb(f0));\n+  check_ret_type<long double>(logb(ld0));\n+  check_ret_type<double>(logb(i0));\n+\n+  check_ret_type<long>(lrint(d0));\n+  check_ret_type<long>(lrint(f0));\n+  check_ret_type<long>(lrint(ld0));\n+  check_ret_type<long>(lrint(i0));\n+\n+  check_ret_type<long>(lround(d0));\n+  check_ret_type<long>(lround(f0));\n+  check_ret_type<long>(lround(ld0));\n+  check_ret_type<long>(lround(i0));\n+\n+  check_ret_type<double>(nearbyint(d0));\n+  check_ret_type<float>(nearbyint(f0));\n+  check_ret_type<long double>(nearbyint(ld0));\n+  check_ret_type<double>(nearbyint(i0));\n+\n+  check_ret_type<double>(nextafter(d0, d0));\n+  check_ret_type<double>(nextafter(d0, f0));\n+  check_ret_type<float>(nextafter(f0, f0));\n+  check_ret_type<long double>(nextafter(ld0, ld0));\n+  check_ret_type<long double>(nextafter(ld0, d0));\n+  check_ret_type<double>(nextafter(i0, i0));\n+  check_ret_type<double>(nextafter(d0, i0));\n+\n+  check_ret_type<double>(nexttoward(d0, ld0));\n+  check_ret_type<float>(nexttoward(f0, ld0));\n+  check_ret_type<long double>(nexttoward(ld0, ld0));\n+  check_ret_type<double>(nexttoward(i0, ld0));\n+\n+  check_ret_type<double>(remainder(d0, d0));\n+  check_ret_type<double>(remainder(d0, f0));\n+  check_ret_type<float>(remainder(f0, f0));\n+  check_ret_type<long double>(remainder(ld0, ld0));\n+  check_ret_type<long double>(remainder(ld0, d0));\n+  check_ret_type<double>(remainder(i0, i0));\n+  check_ret_type<double>(remainder(d0, i0));\n+\n+  check_ret_type<double>(remquo(d0, d0, pquo));\n+  check_ret_type<double>(remquo(d0, f0, pquo));\n+  check_ret_type<float>(remquo(f0, f0, pquo));\n+  check_ret_type<long double>(remquo(ld0, ld0, pquo));\n+  check_ret_type<long double>(remquo(ld0, d0, pquo));\n+  check_ret_type<double>(remquo(i0, i0, pquo));\n+  check_ret_type<double>(remquo(d0, i0, pquo));\n+\n+  check_ret_type<double>(rint(d0));\n+  check_ret_type<float>(rint(f0));\n+  check_ret_type<long double>(rint(ld0));\n+  check_ret_type<double>(rint(i0));\n+\n+  check_ret_type<double>(round(d0));\n+  check_ret_type<float>(round(f0));\n+  check_ret_type<long double>(round(ld0));\n+  check_ret_type<double>(round(i0));\n+\n+  check_ret_type<double>(scalbln(d0, lex));\n+  check_ret_type<float>(scalbln(f0, lex));\n+  check_ret_type<long double>(scalbln(ld0, lex));\n+  check_ret_type<double>(scalbln(i0, lex));\n+\n+  check_ret_type<double>(scalbn(d0, ex));\n+  check_ret_type<float>(scalbn(f0, ex));\n+  check_ret_type<long double>(scalbn(ld0, ex));\n+  check_ret_type<double>(scalbn(i0, ex));\n+\n+  check_ret_type<double>(tgamma(d0));\n+  check_ret_type<float>(tgamma(f0));\n+  check_ret_type<long double>(tgamma(ld0));\n+  check_ret_type<double>(tgamma(i0));\n+\n+  check_ret_type<double>(trunc(d0));\n+  check_ret_type<float>(trunc(f0));\n+  check_ret_type<long double>(trunc(ld0));\n+  check_ret_type<double>(trunc(i0));\n+  \n+#endif\n+}"}, {"sha": "21f2d759b9905dbccfd068e7b2f3dfccd0e90dd6", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_float.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3577e3eafb31634991312288e56581ba021f5b58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc?ref=3577e3eafb31634991312288e56581ba021f5b58", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do compile }\n+\n // 2006-01-12  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2006 Free Software Foundation, Inc.\n@@ -101,9 +103,3 @@ void test01()\n   check_ret_type<double>(real(d1));\n   check_ret_type<long double>(real(ld1));\n }\n-    \n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}]}