{"sha": "3dc4195c6a0777d896bdd5c11691d80c54064bbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjNDE5NWM2YTA3NzdkODk2YmRkNWMxMTY5MWQ4MGM1NDA2NGJiZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-31T12:15:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-31T12:15:14Z"}, "message": "(convert_move): Put FROM into a register if it is a SUBREG.\n\nFrom-SVN: r1732", "tree": {"sha": "f3192c80d8abf6d2f979e17e5e1113374912dcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3192c80d8abf6d2f979e17e5e1113374912dcd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dc4195c6a0777d896bdd5c11691d80c54064bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc4195c6a0777d896bdd5c11691d80c54064bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dc4195c6a0777d896bdd5c11691d80c54064bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc4195c6a0777d896bdd5c11691d80c54064bbe/comments", "author": null, "committer": null, "parents": [{"sha": "58c8c59349b32c5f8ced092c74d2918580c218f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c8c59349b32c5f8ced092c74d2918580c218f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c8c59349b32c5f8ced092c74d2918580c218f0"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "8bb7e41d7404cc85544fbd0d97fd116512ea4f79", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dc4195c6a0777d896bdd5c11691d80c54064bbe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dc4195c6a0777d896bdd5c11691d80c54064bbe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3dc4195c6a0777d896bdd5c11691d80c54064bbe", "patch": "@@ -705,6 +705,12 @@ convert_move (to, from, unsignedp)\n       if ((code = can_extend_p (to_mode, from_mode, unsignedp))\n \t  != CODE_FOR_nothing)\n \t{\n+\t  /* If FROM is a SUBREG, put it into a register.  Do this\n+\t     so that we always generate the same set of insns for\n+\t     better cse'ing; if an intermediate assignment occurred,\n+\t     we won't be doing the operation directly on the SUBREG.  */\n+\t  if (optimize > 0 && GET_CODE (from) == SUBREG)\n+\t    from = force_reg (from_mode, from);\n \t  emit_unop_insn (code, to, from, equiv_code);\n \t  return;\n \t}"}]}