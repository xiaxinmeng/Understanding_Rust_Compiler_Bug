{"sha": "f356a436f04c20db31d307e2e31e4dab21d0543b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1NmE0MzZmMDRjMjBkYjMxZDMwN2UyZTMxZTRkYWIyMWQwNTQzYg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-10-28T02:15:12Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-10-28T02:15:12Z"}, "message": "java-stack.h (ncodeMap): Declare.\n\n        * include/java-stack.h (ncodeMap): Declare.\n        (_Jv_StackTrace): Make _Jv_GetMethodDeclaringClass friend.\n        * java/lang/Class.h (_Jv_GetMethodDeclaringClass): Declare.\n        * java/lang/natClass.cc (_Jv_GetMethodDeclaringClass): New\n        function.\n        * stacktrace.cc (ncodeMap): Redefine from file global to global\n        for class _Jv_StackTrace.\n        (_Jv_StackTrace::UpdateNCodeMap): Add interpreted classes, too,\n        so that _Jv_GetMethodDeclaringClass can find them all.\n        (_Jv_StackTrace::ClassForFrame): Exclude interpreted classes.\n        * jvmti.cc (_Jv_JVMTI_GetMethodDeclaringClass): New function.\n        (_Jv_JVMTI_Interface): Define GetMethodDeclaringClass function.\n\nFrom-SVN: r118100", "tree": {"sha": "f282f5ddea71f48497a4039392fed5ec28964f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f282f5ddea71f48497a4039392fed5ec28964f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f356a436f04c20db31d307e2e31e4dab21d0543b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f356a436f04c20db31d307e2e31e4dab21d0543b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f356a436f04c20db31d307e2e31e4dab21d0543b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f356a436f04c20db31d307e2e31e4dab21d0543b/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62baeb4f013e6f0a682f043dbd8720a558dec462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62baeb4f013e6f0a682f043dbd8720a558dec462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62baeb4f013e6f0a682f043dbd8720a558dec462"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "34c044bdfcb62ce1e12b64058e150edd360f12c9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f356a436f04c20db31d307e2e31e4dab21d0543b", "patch": "@@ -1,3 +1,18 @@\n+2006-10-27  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-stack.h (ncodeMap): Declare.\n+\t(_Jv_StackTrace): Make _Jv_GetMethodDeclaringClass friend.\n+\t* java/lang/Class.h (_Jv_GetMethodDeclaringClass): Declare.\n+\t* java/lang/natClass.cc (_Jv_GetMethodDeclaringClass): New\n+\tfunction.\n+\t* stacktrace.cc (ncodeMap): Redefine from file global to global\n+\tfor class _Jv_StackTrace.\n+\t(_Jv_StackTrace::UpdateNCodeMap): Add interpreted classes, too,\n+\tso that _Jv_GetMethodDeclaringClass can find them all.\n+\t(_Jv_StackTrace::ClassForFrame): Exclude interpreted classes.\n+\t* jvmti.cc (_Jv_JVMTI_GetMethodDeclaringClass): New function.\n+\t(_Jv_JVMTI_Interface): Define GetMethodDeclaringClass function.\n+\n 2006-10-25  Andreas Tobler  <a.tobler@schweiz.org>\n \n \t* testsuite/libjava.jvmti/natevents.cc (do_callback_arg_tests): Replace"}, {"sha": "b9cf09a551ce7de3eed1ec11deb7a4474f20d0d9", "filename": "libjava/include/java-stack.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Finclude%2Fjava-stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Finclude%2Fjava-stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-stack.h?ref=f356a436f04c20db31d307e2e31e4dab21d0543b", "patch": "@@ -23,6 +23,7 @@ details.  */\n #include <java/lang/StackTraceElement.h>\n #include <java/lang/Throwable.h>\n #include <java/lang/Thread.h>\n+#include <java/util/IdentityHashMap.h>\n \n #include <gnu/gcj/runtime/NameFinder.h>\n \n@@ -102,6 +103,7 @@ class _Jv_StackTrace\n   int length;\n   _Jv_StackFrame frames[];\n \n+  static java::util::IdentityHashMap *ncodeMap;\n   static void UpdateNCodeMap ();\n   static jclass ClassForFrame (_Jv_StackFrame *frame);\n   static void FillInFrameInfo (_Jv_StackFrame *frame);\n@@ -126,7 +128,8 @@ class _Jv_StackTrace\n   static JArray<jclass> *GetClassContext (jclass checkClass);\n   static ClassLoader *GetFirstNonSystemClassLoader (void);\n   static jobjectArray GetAccessControlStack ();\n-  \n+\n+  friend jclass _Jv_GetMethodDeclaringClass (jmethodID);\n };\n \n // Information about a given address."}, {"sha": "82a66fb814b3b3687d8c71998966a6ce0def9937", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=f356a436f04c20db31d307e2e31e4dab21d0543b", "patch": "@@ -290,6 +290,10 @@ class java::io::VMObjectStreamClass;\n \n void _Jv_sharedlib_register_hook (jclass klass);\n \n+/* Find the class that defines the given method. Returns NULL\n+   if it cannot be found. Searches both interpreted and native\n+   classes. */\n+jclass _Jv_GetMethodDeclaringClass (jmethodID method);\n \n class java::lang::Class : public java::lang::Object\n {"}, {"sha": "491faa7989a937f2a38f5301934d88314fe7f11e", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=f356a436f04c20db31d307e2e31e4dab21d0543b", "patch": "@@ -1267,3 +1267,12 @@ _Jv_GetClassNameUtf8 (jclass klass)\n {\n   return klass->name;\n }\n+\n+jclass\n+_Jv_GetMethodDeclaringClass (jmethodID method)\n+{\n+  _Jv_StackTrace::UpdateNCodeMap ();\n+  jobject obj = reinterpret_cast<jobject> (method->ncode);\n+  return reinterpret_cast<jclass> (_Jv_StackTrace::ncodeMap->get (obj));\n+}\n+"}, {"sha": "c1bdc7884117ccfda797ef58ad322d07a38b7274", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=f356a436f04c20db31d307e2e31e4dab21d0543b", "patch": "@@ -465,6 +465,24 @@ _Jv_JVMTI_IsMethodSynthetic (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n   return JVMTI_ERROR_NONE;\n }\n \n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetMethodDeclaringClass (MAYBE_UNUSED jvmtiEnv *env,\n+\t\t\t\t   jmethodID method,\n+\t\t\t\t   jclass *declaring_class_ptr)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n+  NULL_CHECK (declaring_class_ptr);\n+\n+  jclass klass = _Jv_GetMethodDeclaringClass (method);\n+  if (klass != NULL)\n+    {\n+      *declaring_class_ptr = klass;\n+      return JVMTI_ERROR_NONE;\n+    }\n+\n+  return JVMTI_ERROR_INVALID_METHODID;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_GetClassLoaderClasses (MAYBE_UNUSED jvmtiEnv *env,\n \t\t\t\t jobject init_loader,\n@@ -1287,7 +1305,7 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   _Jv_JVMTI_GetFieldModifiers,\t// GetFieldModifiers\n   _Jv_JVMTI_IsFieldSynthetic,\t// IsFieldSynthetic\n   UNIMPLEMENTED,\t\t// GetMethodName\n-  UNIMPLEMENTED,\t\t// GetMethodDeclaringClass\n+  _Jv_JVMTI_GetMethodDeclaringClass,  // GetMethodDeclaringClass\n   _Jv_JVMTI_GetMethodModifiers,\t// GetMethodModifers\n   RESERVED,\t\t\t// reserved67\n   UNIMPLEMENTED,\t\t// GetMaxLocals"}, {"sha": "77a2864464139b018199190e84294fc3e927b111", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f356a436f04c20db31d307e2e31e4dab21d0543b/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=f356a436f04c20db31d307e2e31e4dab21d0543b", "patch": "@@ -23,7 +23,6 @@ details.  */\n #include <java/lang/Long.h>\n #include <java/security/AccessController.h>\n #include <java/util/ArrayList.h>\n-#include <java/util/IdentityHashMap.h>\n #include <gnu/classpath/jdwp/Jdwp.h>\n #include <gnu/java/lang/MainThread.h>\n #include <gnu/gcj/runtime/NameFinder.h>\n@@ -41,7 +40,7 @@ using namespace gnu::gcj::runtime;\n // NOTE: Currently this Map contradicts class GC for native classes. This map\n // (and the \"new class stack\") will need to use WeakReferences in order to \n // enable native class GC.\n-static java::util::IdentityHashMap *ncodeMap;\n+java::util::IdentityHashMap *_Jv_StackTrace::ncodeMap;\n \n // Check the \"class stack\" for any classes initialized since we were last \n // called, and add them to ncodeMap.\n@@ -56,21 +55,20 @@ _Jv_StackTrace::UpdateNCodeMap ()\n   \n   jclass klass;\n   while ((klass = _Jv_PopClass ()))\n-    if (!_Jv_IsInterpretedClass (klass))\n-      {\n-\t//printf (\"got %s\\n\", klass->name->data);\n-\tfor (int i = 0; i < klass->method_count; i++)\n-\t  {\n-\t    _Jv_Method *method = &klass->methods[i];\n-\t    void *ncode = method->ncode;\n-\t    // Add non-abstract methods to ncodeMap.\n-\t    if (ncode)\n-\t      {\n-\t\tncode = UNWRAP_FUNCTION_DESCRIPTOR (ncode);\n-\t\tncodeMap->put ((java::lang::Object *) ncode, klass);\n-\t      }\n-\t  }\n-      }\n+    {\n+      //printf (\"got %s\\n\", klass->name->data);\n+      for (int i = 0; i < klass->method_count; i++)\n+\t{\n+\t  _Jv_Method *method = &klass->methods[i];\n+\t  void *ncode = method->ncode;\n+\t  // Add non-abstract methods to ncodeMap.\n+\t  if (ncode)\n+\t    {\n+\t      ncode = UNWRAP_FUNCTION_DESCRIPTOR (ncode);\n+\t      ncodeMap->put ((java::lang::Object *) ncode, klass);\n+\t    }\n+\t}\n+    }\n }\n \n // Given a native frame, return the class which this code belongs \n@@ -85,7 +83,13 @@ _Jv_StackTrace::ClassForFrame (_Jv_StackFrame *frame)\n \n   // look it up in ncodeMap\n   if (frame->start_ip)\n-    klass = (jclass) ncodeMap->get ((jobject) frame->start_ip);\n+    {\n+      klass = (jclass) ncodeMap->get ((jobject) frame->start_ip);\n+\n+      // Exclude interpreted classes\n+      if (klass != NULL && _Jv_IsInterpretedClass (klass))\n+\tklass = NULL;\n+    }\n \n   return klass;\n }"}]}