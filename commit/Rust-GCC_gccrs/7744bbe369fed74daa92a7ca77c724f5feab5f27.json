{"sha": "7744bbe369fed74daa92a7ca77c724f5feab5f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0NGJiZTM2OWZlZDc0ZGFhOTJhN2NhNzdjNzI0ZjVmZWFiNWYyNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-01-27T22:17:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-01-27T22:17:46Z"}, "message": "emmintrin.h (_mm_cvtsd_f64): Add missing Intel intrinsic.\n\n2006-01-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/emmintrin.h (_mm_cvtsd_f64): Add missing Intel\n\tintrinsic.\n\t(_mm_cvtsi128_si64): Likewise.\n\t(_mm_cvtsd_si64): Likewise.\n\t(_mm_cvttsd_si64): Likewise.\n\t(_mm_cvtsi64_sd): Likewise.\n\t(_mm_cvtsi64_si128): Likewise.\n\t* config/i386/mmintrin.h (_m_from_int64): Likewise.\n\t(_mm_cvtsi64_m64): Likewise.\n\t(_m_to_int64): Likewise.\n\t(_mm_cvtm64_si64): Likewise.\n\t* config/i386/xmmintrin.h (_mm_cvtss_si64): Likewise.\n\t(_mm_cvttss_si64): Likewise.\n\t(_mm_cvtsi64_ss): Likewise.\n\t(_mm_cvtss_f32): Likewise.\n\nFrom-SVN: r110311", "tree": {"sha": "c47bd1b23510cab974a66885848cf9abc957bb46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47bd1b23510cab974a66885848cf9abc957bb46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7744bbe369fed74daa92a7ca77c724f5feab5f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7744bbe369fed74daa92a7ca77c724f5feab5f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7744bbe369fed74daa92a7ca77c724f5feab5f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7744bbe369fed74daa92a7ca77c724f5feab5f27/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1b67b824cec68399b48041a4f08bb2d59226ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b67b824cec68399b48041a4f08bb2d59226ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b67b824cec68399b48041a4f08bb2d59226ed7"}], "stats": {"total": 148, "additions": 138, "deletions": 10}, "files": [{"sha": "7990d2fb0beae31fdb0991fa016d6d0ebc1d9c5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7744bbe369fed74daa92a7ca77c724f5feab5f27", "patch": "@@ -1,3 +1,21 @@\n+2006-01-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/emmintrin.h (_mm_cvtsd_f64): Add missing Intel\n+\tintrinsic.\n+\t(_mm_cvtsi128_si64): Likewise.\n+\t(_mm_cvtsd_si64): Likewise.\n+\t(_mm_cvttsd_si64): Likewise.\n+\t(_mm_cvtsi64_sd): Likewise.\n+\t(_mm_cvtsi64_si128): Likewise.\n+\t* config/i386/mmintrin.h (_m_from_int64): Likewise.\n+\t(_mm_cvtsi64_m64): Likewise.\n+\t(_m_to_int64): Likewise.\n+\t(_mm_cvtm64_si64): Likewise.\n+\t* config/i386/xmmintrin.h (_mm_cvtss_si64): Likewise.\n+\t(_mm_cvttss_si64): Likewise.\n+\t(_mm_cvtsi64_ss): Likewise.\n+\t(_mm_cvtss_f32): Likewise.\n+\n 2006-01-27  Carlos O'Donell  <carlos@codesourcery.com>\n \n \t* c-pragma.c (init_pragma) : Call c_register_pragma_with_expansion"}, {"sha": "f867e530a0b5e98f53f899ecf2aff34d5d55dc32", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=7744bbe369fed74daa92a7ca77c724f5feab5f27", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -25,7 +25,7 @@\n    Public License.  */\n \n /* Implemented from the specification included in the Intel C++ Compiler\n-   User Guide and Reference, version 8.0.  */\n+   User Guide and Reference, version 9.0.  */\n \n #ifndef _EMMINTRIN_H_INCLUDED\n #define _EMMINTRIN_H_INCLUDED\n@@ -158,6 +158,12 @@ _mm_store_sd (double *__P, __m128d __A)\n   *__P = __builtin_ia32_vec_ext_v2df (__A, 0);\n }\n \n+static __inline double __attribute__((__always_inline__))\n+_mm_cvtsd_f64 (__m128d __A)\n+{\n+  return __builtin_ia32_vec_ext_v2df (__A, 0);\n+}\n+\n static __inline void __attribute__((__always_inline__))\n _mm_storel_pd (double *__P, __m128d __A)\n {\n@@ -199,6 +205,14 @@ _mm_cvtsi128_si32 (__m128i __A)\n }\n \n #ifdef __x86_64__\n+/* Intel intrinsic.  */\n+static __inline long long __attribute__((__always_inline__))\n+_mm_cvtsi128_si64 (__m128i __A)\n+{\n+  return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline long long __attribute__((__always_inline__))\n _mm_cvtsi128_si64x (__m128i __A)\n {\n@@ -789,6 +803,14 @@ _mm_cvtsd_si32 (__m128d __A)\n }\n \n #ifdef __x86_64__\n+/* Intel intrinsic.  */\n+static __inline long long __attribute__((__always_inline__))\n+_mm_cvtsd_si64 (__m128d __A)\n+{\n+  return __builtin_ia32_cvtsd2si64 ((__v2df) __A);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline long long __attribute__((__always_inline__))\n _mm_cvtsd_si64x (__m128d __A)\n {\n@@ -803,6 +825,14 @@ _mm_cvttsd_si32 (__m128d __A)\n }\n \n #ifdef __x86_64__\n+/* Intel intrinsic.  */\n+static __inline long long __attribute__((__always_inline__))\n+_mm_cvttsd_si64 (__m128d __A)\n+{\n+  return __builtin_ia32_cvttsd2si64 ((__v2df) __A);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline long long __attribute__((__always_inline__))\n _mm_cvttsd_si64x (__m128d __A)\n {\n@@ -823,6 +853,14 @@ _mm_cvtsi32_sd (__m128d __A, int __B)\n }\n \n #ifdef __x86_64__\n+/* Intel intrinsic.  */\n+static __inline __m128d __attribute__((__always_inline__))\n+_mm_cvtsi64_sd (__m128d __A, long long __B)\n+{\n+  return (__m128d)__builtin_ia32_cvtsi642sd ((__v2df) __A, __B);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline __m128d __attribute__((__always_inline__))\n _mm_cvtsi64x_sd (__m128d __A, long long __B)\n {\n@@ -1379,6 +1417,14 @@ _mm_cvtsi32_si128 (int __A)\n }\n \n #ifdef __x86_64__\n+/* Intel intrinsic.  */\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_cvtsi64_si128 (long long __A)\n+{\n+  return _mm_set_epi64x (0, __A);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline __m128i __attribute__((__always_inline__))\n _mm_cvtsi64x_si128 (long long __A)\n {"}, {"sha": "1a74271f64831067ee3920f9326d2acc341d69d3", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=7744bbe369fed74daa92a7ca77c724f5feab5f27", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -25,7 +26,7 @@\n    Public License.  */\n \n /* Implemented from the specification included in the Intel C++ Compiler\n-   User Guide and Reference, version 8.0.  */\n+   User Guide and Reference, version 9.0.  */\n \n #ifndef _MMINTRIN_H_INCLUDED\n #define _MMINTRIN_H_INCLUDED\n@@ -69,13 +70,27 @@ _m_from_int (int __i)\n \n #ifdef __x86_64__\n /* Convert I to a __m64 object.  */\n+\n+/* Intel intrinsic.  */\n+static __inline __m64  __attribute__((__always_inline__))\n+_m_from_int64 (long long __i)\n+{\n+  return (__m64) __i;\n+}\n+\n+static __inline __m64  __attribute__((__always_inline__))\n+_mm_cvtsi64_m64 (long long __i)\n+{\n+  return (__m64) __i;\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline __m64  __attribute__((__always_inline__))\n _mm_cvtsi64x_si64 (long long __i)\n {\n   return (__m64) __i;\n }\n \n-/* Convert I to a __m64 object.  */\n static __inline __m64  __attribute__((__always_inline__))\n _mm_set_pi64x (long long __i)\n {\n@@ -97,7 +112,22 @@ _m_to_int (__m64 __i)\n }\n \n #ifdef __x86_64__\n-/* Convert the lower 32 bits of the __m64 object into an integer.  */\n+/* Convert the __m64 object to a 64bit integer.  */\n+\n+/* Intel intrinsic.  */\n+static __inline long long __attribute__((__always_inline__))\n+_m_to_int64 (__m64 __i)\n+{\n+  return (long long)__i;\n+}\n+\n+static __inline long long __attribute__((__always_inline__))\n+_mm_cvtm64_si64 (__m64 __i)\n+{\n+  return (long long)__i;\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline long long __attribute__((__always_inline__))\n _mm_cvtsi64_si64x (__m64 __i)\n {"}, {"sha": "73645ca97f413ce8a97393cace7b19059fd7f202", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7744bbe369fed74daa92a7ca77c724f5feab5f27/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=7744bbe369fed74daa92a7ca77c724f5feab5f27", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -25,7 +26,7 @@\n    Public License.  */\n \n /* Implemented from the specification included in the Intel C++ Compiler\n-   User Guide and Reference, version 8.0.  */\n+   User Guide and Reference, version 9.0.  */\n \n #ifndef _XMMINTRIN_H_INCLUDED\n #define _XMMINTRIN_H_INCLUDED\n@@ -491,8 +492,17 @@ _mm_cvt_ss2si (__m128 __A)\n }\n \n #ifdef __x86_64__\n-/* Convert the lower SPFP value to a 32-bit integer according to the current\n-   rounding mode.  */\n+/* Convert the lower SPFP value to a 32-bit integer according to the\n+   current rounding mode.  */\n+\n+/* Intel intrinsic.  */\n+static __inline long long __attribute__((__always_inline__))\n+_mm_cvtss_si64 (__m128 __A)\n+{\n+  return __builtin_ia32_cvtss2si64 ((__v4sf) __A);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline long long __attribute__((__always_inline__))\n _mm_cvtss_si64x (__m128 __A)\n {\n@@ -529,6 +539,15 @@ _mm_cvtt_ss2si (__m128 __A)\n \n #ifdef __x86_64__\n /* Truncate the lower SPFP value to a 32-bit integer.  */\n+\n+/* Intel intrinsic.  */\n+static __inline long long __attribute__((__always_inline__))\n+_mm_cvttss_si64 (__m128 __A)\n+{\n+  return __builtin_ia32_cvttss2si64 ((__v4sf) __A);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline long long __attribute__((__always_inline__))\n _mm_cvttss_si64x (__m128 __A)\n {\n@@ -565,6 +584,15 @@ _mm_cvt_si2ss (__m128 __A, int __B)\n \n #ifdef __x86_64__\n /* Convert B to a SPFP value and insert it as element zero in A.  */\n+\n+/* Intel intrinsic.  */\n+static __inline __m128 __attribute__((__always_inline__))\n+_mm_cvtsi64_ss (__m128 __A, long long __B)\n+{\n+  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);\n+}\n+\n+/* Microsoft intrinsic.  */\n static __inline __m128 __attribute__((__always_inline__))\n _mm_cvtsi64x_ss (__m128 __A, long long __B)\n {\n@@ -911,6 +939,12 @@ _mm_store_ss (float *__P, __m128 __A)\n   *__P = __builtin_ia32_vec_ext_v4sf ((__v4sf)__A, 0);\n }\n \n+static __inline float __attribute__((__always_inline__))\n+_mm_cvtss_f32 (__m128 __A)\n+{\n+  return __builtin_ia32_vec_ext_v4sf ((__v4sf)__A, 0);\n+}\n+\n /* Store four SPFP values.  The address must be 16-byte aligned.  */\n static __inline void __attribute__((__always_inline__))\n _mm_store_ps (float *__P, __m128 __A)"}]}