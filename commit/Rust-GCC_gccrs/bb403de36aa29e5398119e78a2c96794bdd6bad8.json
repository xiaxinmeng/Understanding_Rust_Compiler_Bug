{"sha": "bb403de36aa29e5398119e78a2c96794bdd6bad8", "node_id": "C_kwDOANBUbNoAKGJiNDAzZGUzNmFhMjllNTM5ODExOWU3OGEyYzk2Nzk0YmRkNmJhZDg", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-06-24T00:11:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-06-24T18:24:57Z"}, "message": "compiler: use bool for comma-ok if not already boolean\n\nIf a comma-ok variable already has a type, and that type is not a\nboolean type, then set the type of the temporary variable to bool.\nOtherwise we may try to convert an unnamed bool type to an interface\ntype, which will fail. But we don't want to always use bool, because\nthe type of the comma-ok variable may be a named bool type, in\nwhich case the assignment would fail (or need an explicit conversion).\n\nThe test case is https://go.dev/cl/404496.\n\nFixes golang/go#52535\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/413894", "tree": {"sha": "3c1d19ed12841958ec7a834e3e2ff5a51c096843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c1d19ed12841958ec7a834e3e2ff5a51c096843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb403de36aa29e5398119e78a2c96794bdd6bad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb403de36aa29e5398119e78a2c96794bdd6bad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb403de36aa29e5398119e78a2c96794bdd6bad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb403de36aa29e5398119e78a2c96794bdd6bad8/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8e93eb1acae30a5fbe7e13149493ce4ccd301a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8e93eb1acae30a5fbe7e13149493ce4ccd301a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb8e93eb1acae30a5fbe7e13149493ce4ccd301a"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "e20212e990aa9a254579c98d460e7da4650642cb", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb403de36aa29e5398119e78a2c96794bdd6bad8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb403de36aa29e5398119e78a2c96794bdd6bad8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=bb403de36aa29e5398119e78a2c96794bdd6bad8", "patch": "@@ -1,4 +1,4 @@\n-6b314f7947b4b31a86c09d166fe6664cd9968824\n+6a7ba754e5d98efe0875f1f41f40098e976e7958\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b442830b0b7109368691bb50a9a1c96af0c71e15", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb403de36aa29e5398119e78a2c96794bdd6bad8/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb403de36aa29e5398119e78a2c96794bdd6bad8/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=bb403de36aa29e5398119e78a2c96794bdd6bad8", "patch": "@@ -1594,9 +1594,9 @@ Tuple_map_assignment_statement::do_lower(Gogo* gogo, Named_object*,\n \n   // var present_temp bool\n   Temporary_statement* present_temp =\n-    Statement::make_temporary((this->present_->type()->is_sink_type())\n-\t\t\t      ? Type::make_boolean_type()\n-\t\t\t      : this->present_->type(),\n+    Statement::make_temporary((this->present_->type()->is_boolean_type()\n+\t\t\t       ? this->present_->type()\n+\t\t\t       : Type::lookup_bool_type()),\n \t\t\t      NULL, loc);\n   b->add_statement(present_temp);\n \n@@ -1789,9 +1789,9 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Named_object*,\n \n   // var closed_temp bool\n   Temporary_statement* closed_temp =\n-    Statement::make_temporary((this->closed_->type()->is_sink_type())\n-\t\t\t      ? Type::make_boolean_type()\n-\t\t\t      : this->closed_->type(),\n+    Statement::make_temporary((this->closed_->type()->is_boolean_type()\n+\t\t\t       ? this->closed_->type()\n+\t\t\t       : Type::lookup_bool_type()),\n \t\t\t      NULL, loc);\n   b->add_statement(closed_temp);\n \n@@ -1965,6 +1965,8 @@ Tuple_type_guard_assignment_statement::do_lower(Gogo*, Named_object*,\n       b->add_statement(s);\n \n       res = Expression::make_call_result(call, 1);\n+      if (!this->ok_->type()->is_boolean_type())\n+\tres = Expression::make_cast(Type::lookup_bool_type(), res, loc);\n       s = Statement::make_assignment(this->ok_, res, loc);\n       b->add_statement(s);\n     }\n@@ -2001,7 +2003,9 @@ Tuple_type_guard_assignment_statement::lower_to_object_type(\n   Temporary_statement* ok_temp = NULL;\n   if (!this->ok_->is_sink_expression())\n     {\n-      ok_temp = Statement::make_temporary(this->ok_->type(),\n+      ok_temp = Statement::make_temporary((this->ok_->type()->is_boolean_type()\n+\t\t\t\t\t   ? this->ok_->type()\n+\t\t\t\t\t   : Type::lookup_bool_type()),\n \t\t\t\t\t  NULL, loc);\n       b->add_statement(ok_temp);\n     }"}]}