{"sha": "e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5YmUxM2JkZjk4Y2ZmMWNiYmRkOTQ5MGU0YjRkNWUyMGU2OGJhZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-19T09:27:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-19T09:27:23Z"}, "message": "re PR c/17297 (ICE with FP vector constructor containing qnan calculation)\n\n\tPR c/17297\n\t* c-typeck.c (digest_init): Only call build_vector if all constructor\n\telements are *_CST nodes.\n\t* gimplify.c (gimplify_init_constructor): Likewise.\n\n\t* gcc.c-torture/compile/20050113-1.c: New testcase.\n\n\tPR middle-end/19164\n\t* c-typeck.c (digest_init): Only call build_vector if inside_init\n\tis a CONSTRUCTOR.\n\n\t* gcc.dg/20050113-1.c: New testcase.\n\nFrom-SVN: r93891", "tree": {"sha": "93fe2be4ef05d41704144972051044adb8dcf737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93fe2be4ef05d41704144972051044adb8dcf737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0b9dcb843ab406ba561468ce898c39df826d10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b9dcb843ab406ba561468ce898c39df826d10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b9dcb843ab406ba561468ce898c39df826d10b"}], "stats": {"total": 112, "additions": 90, "deletions": 22}, "files": [{"sha": "ccb0faa7529069ce9c086d0ca6f05db6066e6fe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "patch": "@@ -1,3 +1,14 @@\n+2005-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/17297\n+\t* c-typeck.c (digest_init): Only call build_vector if all constructor\n+\telements are *_CST nodes.\n+\t* gimplify.c (gimplify_init_constructor): Likewise.\n+\n+\tPR middle-end/19164\n+\t* c-typeck.c (digest_init): Only call build_vector if inside_init\n+\tis a CONSTRUCTOR.\n+\n 2005-01-18  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* toplev.c (init_asm_output): Remove dead #ifdef."}, {"sha": "186cb62bd2a01c841c88be71e845ec1f2026fda7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "patch": "@@ -4143,18 +4143,32 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n   /* Build a VECTOR_CST from a *constant* vector constructor.  If the\n      vector constructor is not constant (e.g. {1,2,3,foo()}) then punt\n      below and handle as a constructor.  */\n-    if (code == VECTOR_TYPE\n-\t&& TREE_CODE (TREE_TYPE (inside_init)) == VECTOR_TYPE\n-        && vector_types_convertible_p (TREE_TYPE (inside_init), type)\n-        && TREE_CONSTANT (inside_init))\n-      {\n-\tif (TREE_CODE (inside_init) == VECTOR_CST\n-            && comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (inside_init)),\n-\t\t\t  TYPE_MAIN_VARIANT (type)))\n-\t  return inside_init;\n-\telse\n-\t  return build_vector (type, CONSTRUCTOR_ELTS (inside_init));\n-      }\n+  if (code == VECTOR_TYPE\n+      && TREE_CODE (TREE_TYPE (inside_init)) == VECTOR_TYPE\n+      && vector_types_convertible_p (TREE_TYPE (inside_init), type)\n+      && TREE_CONSTANT (inside_init))\n+    {\n+      if (TREE_CODE (inside_init) == VECTOR_CST\n+\t  && comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (inside_init)),\n+\t\t\tTYPE_MAIN_VARIANT (type)))\n+\treturn inside_init;\n+\n+      if (TREE_CODE (inside_init) == CONSTRUCTOR)\n+\t{\n+\t  tree link;\n+\n+\t  /* Iterate through elements and check if all constructor\n+\t     elements are *_CSTs.  */\n+\t  for (link = CONSTRUCTOR_ELTS (inside_init);\n+\t       link;\n+\t       link = TREE_CHAIN (link))\n+\t    if (! CONSTANT_CLASS_P (TREE_VALUE (link)))\n+\t      break;\n+\n+\t  if (link == NULL)\n+\t    return build_vector (type, CONSTRUCTOR_ELTS (inside_init));\n+\t}\n+    }\n \n   /* Any type can be initialized\n      from an expression of the same type, optionally with braces.  */"}, {"sha": "12822c4705565772aa4dcffdb2cdc7ebf75989b4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "patch": "@@ -2761,20 +2761,33 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n     case VECTOR_TYPE:\n       /* Go ahead and simplify constant constructors to VECTOR_CST.  */\n       if (TREE_CONSTANT (ctor))\n-\tTREE_OPERAND (*expr_p, 1) = build_vector (type, elt_list);\n-      else\n \t{\n-\t  /* Vector types use CONSTRUCTOR all the way through gimple\n-\t     compilation as a general initializer.  */\n-\t  for (; elt_list; elt_list = TREE_CHAIN (elt_list))\n+\t  tree tem;\n+\n+\t  /* Even when ctor is constant, it might contain non-*_CST\n+\t     elements (e.g. { 1.0/0.0 - 1.0/0.0, 0.0 }) and those don't\n+\t     belong into VECTOR_CST nodes.  */\n+\t  for (tem = elt_list; tem; tem = TREE_CHAIN (tem))\n+\t    if (! CONSTANT_CLASS_P (TREE_VALUE (tem)))\n+\t      break;\n+\n+\t  if (! tem)\n \t    {\n-\t      enum gimplify_status tret;\n-\t      tret = gimplify_expr (&TREE_VALUE (elt_list), pre_p, post_p,\n-\t\t\t\t    is_gimple_val, fb_rvalue);\n-\t      if (tret == GS_ERROR)\n-\t\tret = GS_ERROR;\n+\t      TREE_OPERAND (*expr_p, 1) = build_vector (type, elt_list);\n+\t      break;\n \t    }\n \t}\n+\n+      /* Vector types use CONSTRUCTOR all the way through gimple\n+\t compilation as a general initializer.  */\n+      for (; elt_list; elt_list = TREE_CHAIN (elt_list))\n+\t{\n+\t  enum gimplify_status tret;\n+\t  tret = gimplify_expr (&TREE_VALUE (elt_list), pre_p, post_p,\n+\t\t\t\tis_gimple_val, fb_rvalue);\n+\t  if (tret == GS_ERROR)\n+\t    ret = GS_ERROR;\n+\t}\n       break;\n \n     default:"}, {"sha": "922b4287d9004e355d9310fbeee40d7a30a6ed47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "patch": "@@ -1,3 +1,11 @@\n+2005-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/17297\n+\t* gcc.c-torture/compile/20050113-1.c: New testcase.\n+\n+\tPR middle-end/19164\n+\t* gcc.dg/20050113-1.c: New testcase.\n+\n 2005-01-19  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/vect-85.c: Add comment."}, {"sha": "6e36ed6fd7c34074bad81128cc4a6480fcac7dc1", "filename": "gcc/testsuite/gcc.c-torture/compile/20050113-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050113-1.c?ref=e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/17297 */\n+\n+typedef float V2SF __attribute__ ((vector_size (8)));\n+\n+int test0 (V2SF, V2SF);\n+\n+int\n+main (void)\n+{\n+  V2SF a = (V2SF) {1.0f/0.0f - 1.0f/0.0f, 1.0f/0.0f - 1.0f/0.0f};\n+  V2SF b = (V2SF) {567.345, 1984.0};\n+  int i;\n+\n+  i = test0 (a, b);\n+  return i;\n+}"}, {"sha": "e7f69e3664113aa67d2317e944d0a59bbf897354", "filename": "gcc/testsuite/gcc.dg/20050113-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Ftestsuite%2Fgcc.dg%2F20050113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf/gcc%2Ftestsuite%2Fgcc.dg%2F20050113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050113-1.c?ref=e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "patch": "@@ -0,0 +1,6 @@\n+/* PR middle-end/19164 */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mmmx\" } */\n+\n+typedef short int V __attribute__ ((vector_size (8)));\n+static V v = (V) 0x00FF00FF00FF00FFLL; /* { dg-error \"is not constant\" } */"}]}