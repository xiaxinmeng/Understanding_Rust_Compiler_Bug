{"sha": "1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2ZWFhMTkwNzdlZWJlYmY2NjFmZTFkNjMzZDAzZWNkYzAzY2JiMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-25T15:54:00Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:35:07Z"}, "message": "Add some more error handling to generics\n\nCheck for wrong number of arguments and fix crash with invalid Type\nspecified as generic argument.", "tree": {"sha": "1acfdde90c7c361b0df785bde6fa189a88530de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1acfdde90c7c361b0df785bde6fa189a88530de4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec9ead44a40ee68de7fc39e32a47662c44281deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9ead44a40ee68de7fc39e32a47662c44281deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9ead44a40ee68de7fc39e32a47662c44281deb"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "9267e3bebc089ae61c17f0bd4f1721691d8a7e94", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -112,9 +112,13 @@ class ResolveType : public ResolverBase\n   {\n     resolved_node = ResolveTypePath::go (path, parent);\n     ok = resolved_node != UNKNOWN_NODEID;\n-    resolver->insert_resolved_type (path.get_node_id (), resolved_node);\n-    resolver->insert_new_definition (path.get_node_id (),\n-\t\t\t\t     Definition{path.get_node_id (), parent});\n+    if (ok)\n+      {\n+\tresolver->insert_resolved_type (path.get_node_id (), resolved_node);\n+\tresolver->insert_new_definition (path.get_node_id (),\n+\t\t\t\t\t Definition{path.get_node_id (),\n+\t\t\t\t\t\t    parent});\n+      }\n   }\n \n   void visit (AST::ArrayType &type)"}, {"sha": "04fdad7e5f69235a24a2f8880842be7a0a0ae554", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -462,7 +462,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n   else\n     {\n       rust_error_at (expr->get_locus (), \"unknown path %s\",\n-\t\t     expr->as_string ().c_str (), path_buf.c_str ());\n+\t\t     expr->as_string ().c_str ());\n     }\n }\n "}, {"sha": "491d8aad9c36b15785542e0c79adc7f9085a6142", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -168,6 +168,15 @@ class TypeCheckExpr : public TypeCheckBase\n     if (function_tyty == nullptr)\n       return;\n \n+    bool valid_tyty = function_tyty->get_kind () == TyTy::TypeKind::ADT\n+\t\t      || function_tyty->get_kind () == TyTy::TypeKind::FNDEF;\n+    if (!valid_tyty)\n+      {\n+\trust_error_at (expr.get_locus (),\n+\t\t       \"Failed to resolve expression of function call\");\n+\treturn;\n+      }\n+\n     infered = TyTy::TypeCheckCallExpr::go (function_tyty, expr, context);\n     if (infered == nullptr)\n       {\n@@ -778,8 +787,6 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t    ? adt->handle_substitions (seg.get_generic_args ())\n \t\t    : adt->infer_substitions ();\n       }\n-\n-    context->insert_type (expr.get_mappings (), infered->clone ());\n   }\n \n   void visit (HIR::LoopExpr &expr)"}, {"sha": "1dbcd376cd0d08239c586fc429bf93e09c5c3ef2", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -232,7 +232,7 @@ class TypeCheckType : public TypeCheckBase\n \t  }\n       }\n \n-    rust_error_at (path.get_locus (), \"failed to resolve TypePath: %s\",\n+    rust_error_at (path.get_locus (), \"failed to type-resolve TypePath: %s\",\n \t\t   path.as_string ().c_str ());\n   }\n "}, {"sha": "71ff7d65d74ade0c33d22f8eed291cacc3722c0e", "filename": "gcc/testsuite/rust.test/fail_compilation/generics1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics1.rs?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -0,0 +1,9 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2: GenericStruct<i8>;\n+    a2 = GenericStruct::<_>(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "7fe09e77cbf0eafec06d0da1edbf4d641db82900", "filename": "gcc/testsuite/rust.test/fail_compilation/generics2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics2.rs?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -0,0 +1,9 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2: GenericStruct<i8>;\n+    a2 = GenericStruct(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "80ccdec45fc96424a3722b796efa4939dceec499", "filename": "gcc/testsuite/rust.test/fail_compilation/generics3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics3.rs?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -0,0 +1,9 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2;\n+    a2 = GenericStruct::<i8>(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "2052ce6c0c615da90d80019cd2bb8028f00788c7", "filename": "gcc/testsuite/rust.test/fail_compilation/generics4.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics4.rs?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -0,0 +1,9 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2;\n+    a2 = GenericStruct::<i8, i32>(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "ef8250b1de1e3e4b7f2f07b7aab6d3d51e37a4b9", "filename": "gcc/testsuite/rust.test/fail_compilation/generics5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6eaa19077eebebf661fe1d633d03ecdc03cbb2/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fgenerics5.rs?ref=1c6eaa19077eebebf661fe1d633d03ecdc03cbb2", "patch": "@@ -0,0 +1,9 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2;\n+    a2 = GenericStruct::<i8, T>(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}]}