{"sha": "acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmZDNmZmZlZTgwMjYyYzc0ZGUwZTQ0ODBiOTgzZDdiZjdmYmQ4ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-02-27T08:13:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-02-27T08:13:16Z"}, "message": "re PR c++/47897 ([C++0x] static const member variable is not constant expression)\n\n\tPR c++/47897\n\t* semantics.c (non_const_var_error): Split out from...\n\t(cxx_eval_constant_expression): ...here.\n\t(potential_constant_expression_1) [VAR_DECL]: Use it.\n\tAllow dependent variables.\n\nFrom-SVN: r170532", "tree": {"sha": "a340fb7ef2eb7e37ddb07f9b7a12717239727292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a340fb7ef2eb7e37ddb07f9b7a12717239727292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe8e67ef97640f9f65c05dbf96401d2bcb3d75d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8e67ef97640f9f65c05dbf96401d2bcb3d75d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8e67ef97640f9f65c05dbf96401d2bcb3d75d7"}], "stats": {"total": 127, "additions": 82, "deletions": 45}, "files": [{"sha": "828336212b3d266c7128e2aee4661e7e5f55ee46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -1,3 +1,11 @@\n+2011-02-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/47897\n+\t* semantics.c (non_const_var_error): Split out from...\n+\t(cxx_eval_constant_expression): ...here.\n+\t(potential_constant_expression_1) [VAR_DECL]: Use it.\n+\tAllow dependent variables.\n+\n 2011-02-24  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_constant_expression): Set"}, {"sha": "a33a7edd314f7d30d325aa889b1588149bb809d7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -6704,6 +6704,46 @@ cxx_eval_indirect_ref (const constexpr_call *call, tree t,\n   return r;\n }\n \n+/* Complain about R, a VAR_DECL, not being usable in a constant expression.\n+   Shared between potential_constant_expression and\n+   cxx_eval_constant_expression.  */\n+\n+static void\n+non_const_var_error (tree r)\n+{\n+  tree type = TREE_TYPE (r);\n+  error (\"the value of %qD is not usable in a constant \"\n+\t \"expression\", r);\n+  if (DECL_DECLARED_CONSTEXPR_P (r))\n+    inform (DECL_SOURCE_LOCATION (r),\n+\t    \"%qD used in its own initializer\", r);\n+  else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+    {\n+      if (!CP_TYPE_CONST_P (type))\n+\tinform (DECL_SOURCE_LOCATION (r),\n+\t\t\"%q#D is not const\", r);\n+      else if (CP_TYPE_VOLATILE_P (type))\n+\tinform (DECL_SOURCE_LOCATION (r),\n+\t\t\"%q#D is volatile\", r);\n+      else if (!DECL_INITIAL (r))\n+\tinform (DECL_SOURCE_LOCATION (r),\n+\t\t\"%qD was not initialized with a constant \"\n+\t\t\"expression\", r);\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else\n+    {\n+      if (cxx_dialect >= cxx0x && !DECL_DECLARED_CONSTEXPR_P (r))\n+\tinform (DECL_SOURCE_LOCATION (r),\n+\t\t\"%qD was not declared %<constexpr%>\", r);\n+      else\n+\tinform (DECL_SOURCE_LOCATION (r),\n+\t\t\"%qD does not have integral or enumeration type\",\n+\t\tr);\n+    }\n+}\n+\n /* Attempt to reduce the expression T to a constant value.\n    On failure, issue diagnostic and return error_mark_node.  */\n /* FIXME unify with c_fully_fold */\n@@ -6744,39 +6784,7 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n       if (DECL_P (r))\n \t{\n \t  if (!allow_non_constant)\n-\t    {\n-\t      tree type = TREE_TYPE (r);\n-\t      error (\"the value of %qD is not usable in a constant \"\n-\t\t     \"expression\", r);\n-\t      if (DECL_DECLARED_CONSTEXPR_P (r))\n-\t\tinform (DECL_SOURCE_LOCATION (r),\n-\t\t\t\"%qD used in its own initializer\", r);\n-\t      else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n-\t\t{\n-\t\t  if (!CP_TYPE_CONST_P (type))\n-\t\t    inform (DECL_SOURCE_LOCATION (r),\n-\t\t\t    \"%q#D is not const\", r);\n-\t\t  else if (CP_TYPE_VOLATILE_P (type))\n-\t\t    inform (DECL_SOURCE_LOCATION (r),\n-\t\t\t    \"%q#D is volatile\", r);\n-\t\t  else if (!DECL_INITIAL (r))\n-\t\t    inform (DECL_SOURCE_LOCATION (r),\n-\t\t\t    \"%qD was not initialized with a constant \"\n-\t\t\t    \"expression\", r);\n-\t\t  else\n-\t\t    gcc_unreachable ();\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (cxx_dialect >= cxx0x && !DECL_DECLARED_CONSTEXPR_P (r))\n-\t\t    inform (DECL_SOURCE_LOCATION (r),\n-\t\t\t    \"%qD was not declared %<constexpr%>\", r);\n-\t\t  else\n-\t\t    inform (DECL_SOURCE_LOCATION (r),\n-\t\t\t    \"%qD does not have integral or enumeration type\",\n-\t\t\t    r);\n-\t\t}\n-\t    }\n+\t    non_const_var_error (r);\n \t  *non_constant_p = true;\n \t}\n       break;\n@@ -7371,10 +7379,11 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       return potential_constant_expression_1 (TREE_OPERAND (t, 0), rval, flags);\n \n     case VAR_DECL:\n-      if (want_rval && !decl_constant_var_p (t))\n+      if (want_rval && !decl_constant_var_p (t)\n+\t  && !dependent_type_p (TREE_TYPE (t)))\n         {\n           if (flags & tf_error)\n-            error (\"variable %qD is not declared constexpr\", t);\n+            non_const_var_error (t);\n           return false;\n         }\n       return true;"}, {"sha": "b23419a322c02cbafcb1c903b3ba2a62d49a02ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -1,3 +1,11 @@\n+2011-02-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/regress/template-const1.C: New.\n+\t* g++.dg/cpp0x/regress/template-function1.C: Adjust.\n+\t* g++.dg/template/function1.C: Adjust.\n+\t* g++.dg/cpp0x/regress/debug-debug7.C: Adjust.\n+\t* g++.dg/debug/debug7.C: Adjust.\n+\n 2011-02-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47886"}, {"sha": "ea8f1eb2e6c119b5f972307d3914985b2673ff46", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/debug-debug7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fdebug-debug7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fdebug-debug7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fdebug-debug7.C?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -7,8 +7,8 @@ int\n main() {\n \n   int a = 4;\n-  int b = 5;\n-  int (*x)[b] = new int[a][b]; // { dg-error \"\" }\n+  int b = 5;\t\t\t// { dg-message \"not const\" }\n+  int (*x)[b] = new int[a][b];\t// { dg-error \"not usable\" }\n \n   x[2][1] = 7;\n "}, {"sha": "32db1f831b4bdb1871d3b81f7a162c5b1d111186", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/template-const1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-const1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-const1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-const1.C?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/47897\n+// { dg-options -std=c++0x }\n+\n+template < typename T, T N >\n+struct S\n+{\n+    static const T value = N;\n+    typedef S< T, value + 1 > next;\n+};"}, {"sha": "66cbd4ba124efe8ae15cf7673b5393a5001ceda7", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/template-function1.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-function1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-function1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-function1.C?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -1,28 +1,29 @@\n // PR c++/38647\n // { dg-do compile }\n // { dg-options \"-std=c++0x\" }\n+// { dg-prune-output \"note\" }\n \n template<const char *, int> struct A {};\n const char func[] = \"abc\";\n-template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|not declared constexpr\" }\n+template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|constant expression\" }\n \n char a1[1];\n A<a1, 0> a;\n \n template<const char *, int> struct B {};\n-template<int N> struct B<__FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|not declared constexpr\" }\n+template<int N> struct B<__FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|constant expression\" }\n \n char b1[1];\n B<b1, 0> b;\n \n template<const char *, int> struct C {};\n-template<int N> struct C<__PRETTY_FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|not declared constexpr\" }\n+template<int N> struct C<__PRETTY_FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|constant expression\" }\n \n char c1[1];\n C<c1, 0> c;\n \n template<const char *, int> struct D {};\n-template<int N> struct D<__func__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|function scope|not declared constexpr\" }\n+template<int N> struct D<__func__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|function scope|constant expression\" }\n \n char d1[1];\n D<d1, 0> d;"}, {"sha": "8731cf81da7b1661676d11238813512be5c14a5c", "filename": "gcc/testsuite/g++.dg/debug/debug7.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug7.C?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-prune-output \"note\" }\n \n void f (int);\n "}, {"sha": "bceed9d68f92fa4a17e99b095aff7f9def110ef8", "filename": "gcc/testsuite/g++.dg/template/function1.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfd3fffee80262c74de0e4480b983d7bf7fbd8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C?ref=acfd3fffee80262c74de0e4480b983d7bf7fbd8e", "patch": "@@ -1,27 +1,28 @@\n // PR c++/38647\n // { dg-do compile }\n+// { dg-prune-output \"note\" }\n \n template<const char *, int> struct A {};\n const char func[] = \"abc\";\n-template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|not declared constexpr\" }\n+template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|constant expression\" }\n \n char a1[1];\n A<a1, 0> a;\n \n template<const char *, int> struct B {};\n-template<int N> struct B<__FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|not declared constexpr\" }\n+template<int N> struct B<__FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|constant expression\" }\n \n char b1[1];\n B<b1, 0> b;\n \n template<const char *, int> struct C {};\n-template<int N> struct C<__PRETTY_FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|not declared constexpr\" }\n+template<int N> struct C<__PRETTY_FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|constant expression\" }\n \n char c1[1];\n C<c1, 0> c;\n \n template<const char *, int> struct D {};\n-template<int N> struct D<__func__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|function scope|not declared constexpr\" }\n+template<int N> struct D<__func__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|function scope|constant expression\" }\n \n char d1[1];\n D<d1, 0> d;"}]}