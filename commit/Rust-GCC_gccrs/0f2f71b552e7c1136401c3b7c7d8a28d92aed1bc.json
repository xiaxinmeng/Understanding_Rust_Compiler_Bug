{"sha": "0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyZjcxYjU1MmU3YzExMzY0MDFjM2I3YzdkOGEyOGQ5MmFlZDFiYw==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-03T05:55:02Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-03T05:55:02Z"}, "message": "simplify-rtx.c (simplify_unary_operation): When simplifying (neg (lt X 0)) into (ashiftrt X C) or (lshiftrt X C)...\n\n\n\t* simplify-rtx.c (simplify_unary_operation): When simplifying\n\t(neg (lt X 0)) into (ashiftrt X C) or (lshiftrt X C), make sure\n\tthat we perform the right shift in the appropriate mode, and\n\tthen extend or truncate the result to requested mode.\n\nFrom-SVN: r111671", "tree": {"sha": "141afc731966bde556ecd0d21f0b4225099403fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/141afc731966bde556ecd0d21f0b4225099403fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc/comments", "author": null, "committer": null, "parents": [{"sha": "e20f951129228f1decc51b4dfe5609cb55806b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20f951129228f1decc51b4dfe5609cb55806b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20f951129228f1decc51b4dfe5609cb55806b2a"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "7b330e58e41593127a42b27fdefe99b07036ef04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc", "patch": "@@ -1,3 +1,10 @@\n+2006-03-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_unary_operation): When simplifying\n+\t(neg (lt X 0)) into (ashiftrt X C) or (lshiftrt X C), make sure\n+\tthat we perform the right shift in the appropriate mode, and\n+\tthen extend or truncate the result to requested mode.\n+\n 2006-03-03  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* gengtype.c (main): Handle double_int type.\n@@ -16,7 +23,8 @@\n \n 2006-03-02  Zdenek Dvorak <dvorakz@suse.cz>\n \n-\t* tree-vrp.c (remove_range_assertions): Do not update statements unnecessarily.\n+\t* tree-vrp.c (remove_range_assertions): Do not update statements\n+\tunnecessarily.\n \n 2006-03-02  Zdenek Dvorak <dvorakz@suse.cz>\n "}, {"sha": "754464d06f12c9bd3b7b0073596428bdcdcb8f77", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=0f2f71b552e7c1136401c3b7c7d8a28d92aed1bc", "patch": "@@ -590,12 +590,28 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n       if (GET_CODE (op) == LT\n \t  && XEXP (op, 1) == const0_rtx)\n \t{\n+\t  enum machine_mode inner = GET_MODE (XEXP (op, 0));\n+\t  int isize = GET_MODE_BITSIZE (inner);\n \t  if (STORE_FLAG_VALUE == 1)\n-\t    return simplify_gen_binary (ASHIFTRT, mode, XEXP (op, 0),\n-\t\t\t\t\tGEN_INT (GET_MODE_BITSIZE (mode) - 1));\n+\t    {\n+\t      temp = simplify_gen_binary (ASHIFTRT, inner, XEXP (op, 0),\n+\t\t\t\t\t  GEN_INT (isize - 1));\n+\t      if (mode == inner)\n+\t\treturn temp;\n+\t      if (GET_MODE_BITSIZE (mode) > isize)\n+\t\treturn simplify_gen_unary (SIGN_EXTEND, mode, temp, inner);\n+\t      return simplify_gen_unary (TRUNCATE, mode, temp, inner);\n+\t    }\n \t  else if (STORE_FLAG_VALUE == -1)\n-\t    return simplify_gen_binary (LSHIFTRT, mode, XEXP (op, 0),\n-\t\t\t\t\tGEN_INT (GET_MODE_BITSIZE (mode) - 1));\n+\t    {\n+\t      temp = simplify_gen_binary (LSHIFTRT, inner, XEXP (op, 0),\n+\t\t\t\t\t  GEN_INT (isize - 1));\n+\t      if (mode == inner)\n+\t\treturn temp;\n+\t      if (GET_MODE_BITSIZE (mode) > isize)\n+\t\treturn simplify_gen_unary (ZERO_EXTEND, mode, temp, inner);\n+\t      return simplify_gen_unary (TRUNCATE, mode, temp, inner);\n+\t    }\n \t}\n       break;\n "}]}