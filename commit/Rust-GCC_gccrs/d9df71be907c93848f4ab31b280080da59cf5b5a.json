{"sha": "d9df71be907c93848f4ab31b280080da59cf5b5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkZjcxYmU5MDdjOTM4NDhmNGFiMzFiMjgwMDgwZGE1OWNmNWI1YQ==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.vnet.ibm.com", "date": "2016-11-17T18:58:16Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2016-11-17T18:58:16Z"}, "message": "i386.md (cmpstrnsi): New test to bail out if neither string input is a string constant.\n\n2016-11-17  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n\n\t* config/i386/i386.md (cmpstrnsi): New test to bail out if neither\n\tstring input is a string constant.\n\t* builtins.c (expand_builtin_strncmp): Attempt expansion of strncmp\n\tvia cmpstrnsi even if neither string is constant.\n\nFrom-SVN: r242556", "tree": {"sha": "f1456edc800a3f936cd48b99f52fdb8776d79572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1456edc800a3f936cd48b99f52fdb8776d79572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9df71be907c93848f4ab31b280080da59cf5b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9df71be907c93848f4ab31b280080da59cf5b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9df71be907c93848f4ab31b280080da59cf5b5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9df71be907c93848f4ab31b280080da59cf5b5a/comments", "author": null, "committer": null, "parents": [{"sha": "5fe353c893256a75c057a49af66fc4838fe82d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe353c893256a75c057a49af66fc4838fe82d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe353c893256a75c057a49af66fc4838fe82d7d"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "86c664bf7a99931a741de4373511c459a4534c01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9df71be907c93848f4ab31b280080da59cf5b5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9df71be907c93848f4ab31b280080da59cf5b5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9df71be907c93848f4ab31b280080da59cf5b5a", "patch": "@@ -1,3 +1,10 @@\n+2016-11-17  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+\t* config/i386/i386.md (cmpstrnsi): New test to bail out if neither\n+\tstring input is a string constant.\n+\t* builtins.c (expand_builtin_strncmp): Attempt expansion of strncmp\n+\tvia cmpstrnsi even if neither string is constant.\n+\n 2016-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/78201"}, {"sha": "1316c27e9a6c6eead2768275bae77fb7018de56a", "filename": "gcc/builtins.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9df71be907c93848f4ab31b280080da59cf5b5a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9df71be907c93848f4ab31b280080da59cf5b5a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d9df71be907c93848f4ab31b280080da59cf5b5a", "patch": "@@ -3918,7 +3918,7 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n   insn_code cmpstrn_icode = direct_optab_handler (cmpstrn_optab, SImode);\n   if (cmpstrn_icode != CODE_FOR_nothing)\n   {\n-    tree len, len1, len2;\n+    tree len, len1, len2, len3;\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result;\n     tree fndecl, fn;\n@@ -3937,14 +3937,19 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     if (len2)\n       len2 = size_binop_loc (loc, PLUS_EXPR, ssize_int (1), len2);\n \n+    len3 = fold_convert_loc (loc, sizetype, arg3);\n+\n     /* If we don't have a constant length for the first, use the length\n-       of the second, if we know it.  We don't require a constant for\n+       of the second, if we know it.  If neither string is constant length,\n+       use the given length argument.  We don't require a constant for\n        this case; some cost analysis could be done if both are available\n        but neither is constant.  For now, assume they're equally cheap,\n        unless one has side effects.  If both strings have constant lengths,\n        use the smaller.  */\n \n-    if (!len1)\n+    if (!len1 && !len2)\n+      len = len3;\n+    else if (!len1)\n       len = len2;\n     else if (!len2)\n       len = len1;\n@@ -3961,23 +3966,10 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     else\n       len = len2;\n \n-    /* If both arguments have side effects, we cannot optimize.  */\n-    if (!len || TREE_SIDE_EFFECTS (len))\n-      return NULL_RTX;\n-\n-    /* The actual new length parameter is MIN(len,arg3).  */\n-    len = fold_build2_loc (loc, MIN_EXPR, TREE_TYPE (len), len,\n-\t\t       fold_convert_loc (loc, TREE_TYPE (len), arg3));\n-\n-    /* If we don't have POINTER_TYPE, call the function.  */\n-    if (arg1_align == 0 || arg2_align == 0)\n-      return NULL_RTX;\n-\n-    /* Stabilize the arguments in case gen_cmpstrnsi fails.  */\n-    arg1 = builtin_save_expr (arg1);\n-    arg2 = builtin_save_expr (arg2);\n-    len = builtin_save_expr (len);\n-\n+    /* If we are not using the given length, we must incorporate it here.\n+       The actual new length parameter will be MIN(len,arg3) in this case.  */\n+    if (len != len3)\n+      len = fold_build2_loc (loc, MIN_EXPR, TREE_TYPE (len), len, len3);\n     arg1_rtx = get_memory_rtx (arg1, len);\n     arg2_rtx = get_memory_rtx (arg2, len);\n     arg3_rtx = expand_normal (len);"}, {"sha": "0645805770b04dcf706356ef23ab6e43d1633f9e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9df71be907c93848f4ab31b280080da59cf5b5a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9df71be907c93848f4ab31b280080da59cf5b5a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d9df71be907c93848f4ab31b280080da59cf5b5a", "patch": "@@ -16911,6 +16911,21 @@\n   if (fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\n     FAIL;\n \n+  /* One of the strings must be a constant.  If so, expand_builtin_strncmp()\n+     will have rewritten the length arg to be the minimum of the const string\n+     length and the actual length arg.  If both strings are the same and\n+     shorter than the length arg, repz cmpsb will not stop at the 0 byte and\n+     will incorrectly base the results on chars past the 0 byte.  */\n+  tree t1 = MEM_EXPR (operands[1]);\n+  tree t2 = MEM_EXPR (operands[2]);\n+  if (!((t1 && TREE_CODE (t1) == MEM_REF\n+         && TREE_CODE (TREE_OPERAND (t1, 0)) == ADDR_EXPR\n+         && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t1, 0), 0)) == STRING_CST)\n+      || (t2 && TREE_CODE (t2) == MEM_REF\n+          && TREE_CODE (TREE_OPERAND (t2, 0)) == ADDR_EXPR\n+          && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t2, 0), 0)) == STRING_CST)))\n+    FAIL;\n+\n   out = operands[0];\n   if (!REG_P (out))\n     out = gen_reg_rtx (SImode);"}]}