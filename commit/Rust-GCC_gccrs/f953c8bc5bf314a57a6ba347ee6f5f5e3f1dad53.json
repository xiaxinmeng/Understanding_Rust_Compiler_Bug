{"sha": "f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53", "node_id": "C_kwDOANBUbNoAKGY5NTNjOGJjNWJmMzE0YTU3YTZiYTM0N2VlNmY1ZjVlM2YxZGFkNTM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-21T09:19:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-21T11:18:59Z"}, "message": "tree-optimization/104156 - fix unswitching compare-debug issue\n\nWhen hoisting guards the unswitching pass does not properly ignore\ndebug stmts when looking for uses outside of the loop of defs\nproduced in the skipped region.  The following rectifies this\nby instead collecting them and resetting them after the transform.\n\n2022-01-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104156\n\t* tree-ssa-loop-unswitch.cc (tree_unswitch_outer_loop):\n\tCollect and reset debug stmts with out-of-loop uses when\n\thoisting guards.\n\t(find_loop_guard): Adjust.\n\t(empty_bb_without_guard_p): Likewise.  Ignore debug stmts.\n\t(used_outside_loop_p): Push debug uses to a vector of\n\tdebug stmts to reset.\n\t(hoist_guard): Adjust -fopt-info category.\n\n\t* gcc.dg/loop-unswitch-6.c: New testcase.", "tree": {"sha": "1cc019018d877b61e224cf210476570fc58de252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cc019018d877b61e224cf210476570fc58de252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad72811242eb84dde1bb2e97d0804d6eabeac8a"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "f70b629e0542278b1a4b026b5d7d4211582c4769", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-6.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-6.c?ref=f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funswitch-loops -g -fcompare-debug -fdump-tree-unswitch-details\" } */\n+\n+short a, d;\n+int b, c;\n+static int e() {\n+  int f = -2L, g = 9, h = 0;\n+  for (; h < 2; h++)\n+    if (a <= 5) {\n+      g = 0;\n+      if (c && a)\n+        break;\n+      if (c - 1)\n+        goto i;\n+    }\n+  if (b) {\n+    int *j[] = {&f};\n+    if (d)\n+      for (; f < 9; f++)\n+        if (g)\n+          for (; f; f++)\n+            ;\n+  i:\n+    while (f) {\n+      a--;\n+      break;\n+    }\n+  }\n+}\n+int main() { e(); }\n+\n+/* { dg-final { scan-tree-dump-times \"Guard hoisted\" 1 \"unswitch\" } } */"}, {"sha": "2927f308234fde734de61f03adc583bdcb8e075c", "filename": "gcc/tree-ssa-loop-unswitch.cc", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53/gcc%2Ftree-ssa-loop-unswitch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53/gcc%2Ftree-ssa-loop-unswitch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.cc?ref=f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53", "patch": "@@ -79,9 +79,10 @@ static class loop *tree_unswitch_loop (class loop *, basic_block, tree);\n static bool tree_unswitch_single_loop (class loop *, int);\n static tree tree_may_unswitch_on (basic_block, class loop *);\n static bool tree_unswitch_outer_loop (class loop *);\n-static edge find_loop_guard (class loop *);\n-static bool empty_bb_without_guard_p (class loop *, basic_block);\n-static bool used_outside_loop_p (class loop *, tree);\n+static edge find_loop_guard (class loop *, vec<gimple *>&);\n+static bool empty_bb_without_guard_p (class loop *, basic_block,\n+\t\t\t\t      vec<gimple *>&);\n+static bool used_outside_loop_p (class loop *, tree, vec<gimple *>&);\n static void hoist_guard (class loop *, edge);\n static bool check_exit_phi (class loop *);\n static tree get_vop_from_header (class loop *);\n@@ -536,11 +537,18 @@ tree_unswitch_outer_loop (class loop *loop)\n     }\n \n   bool changed = false;\n-  while ((guard = find_loop_guard (loop)))\n+  auto_vec<gimple *> dbg_to_reset;\n+  while ((guard = find_loop_guard (loop, dbg_to_reset)))\n     {\n       if (! changed)\n \trewrite_virtuals_into_loop_closed_ssa (loop);\n       hoist_guard (loop, guard);\n+      for (gimple *debug_stmt : dbg_to_reset)\n+\t{\n+\t  gimple_debug_bind_reset_value (debug_stmt);\n+\t  update_stmt (debug_stmt);\n+\t}\n+      dbg_to_reset.truncate (0);\n       changed = true;\n     }\n   return changed;\n@@ -551,7 +559,7 @@ tree_unswitch_outer_loop (class loop *loop)\n    otherwise returns NULL.  */\n \n static edge\n-find_loop_guard (class loop *loop)\n+find_loop_guard (class loop *loop, vec<gimple *> &dbg_to_reset)\n {\n   basic_block header = loop->header;\n   edge guard_edge, te, fe;\n@@ -688,7 +696,7 @@ find_loop_guard (class loop *loop)\n \t  guard_edge = NULL;\n \t  goto end;\n \t}\n-      if (!empty_bb_without_guard_p (loop, bb))\n+      if (!empty_bb_without_guard_p (loop, bb, dbg_to_reset))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n@@ -699,7 +707,7 @@ find_loop_guard (class loop *loop)\n     }\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+    dump_printf_loc (MSG_NOTE, loc,\n \t\t     \"suitable to hoist\\n\");\n end:\n   if (body)\n@@ -713,10 +721,12 @@ find_loop_guard (class loop *loop)\n       are noy used outside of the loop.\n    KNOWN_INVARIANTS is a set of ssa names we know to be invariant, and\n    PROCESSED is a set of ssa names for that we already tested whether they\n-   are invariant or not.  */\n+   are invariant or not.  Uses in debug stmts outside of the loop are\n+   pushed to DBG_TO_RESET.  */\n \n static bool\n-empty_bb_without_guard_p (class loop *loop, basic_block bb)\n+empty_bb_without_guard_p (class loop *loop, basic_block bb,\n+\t\t\t  vec<gimple *> &dbg_to_reset)\n {\n   basic_block exit_bb = single_exit (loop)->src;\n   bool may_be_used_outside = (bb == exit_bb\n@@ -736,7 +746,7 @@ empty_bb_without_guard_p (class loop *loop, basic_block bb)\n \t  if (virtual_operand_p (name))\n \t    continue;\n \n-\t  if (used_outside_loop_p (loop, name))\n+\t  if (used_outside_loop_p (loop, name, dbg_to_reset))\n \t    return false;\n \t}\n     }\n@@ -745,6 +755,9 @@ empty_bb_without_guard_p (class loop *loop, basic_block bb)\n        !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple *stmt = gsi_stmt (gsi);\n+      if (is_gimple_debug (stmt))\n+\tcontinue;\n+\n       if (gimple_has_side_effects (stmt))\n \treturn false;\n \n@@ -754,17 +767,18 @@ empty_bb_without_guard_p (class loop *loop, basic_block bb)\n       FOR_EACH_SSA_TREE_OPERAND (name, stmt, op_iter, SSA_OP_DEF)\n \t{\n \t  if (may_be_used_outside\n-\t      && used_outside_loop_p (loop, name))\n+\t      && used_outside_loop_p (loop, name, dbg_to_reset))\n \t    return false;\n \t}\n     }\n   return true;\n }\n \n-/* Return true if NAME is used outside of LOOP.  */\n+/* Return true if NAME is used outside of LOOP.  Pushes debug stmts that\n+   have such uses to DBG_TO_RESET but do not consider such uses.  */\n \n static bool\n-used_outside_loop_p (class loop *loop, tree name)\n+used_outside_loop_p (class loop *loop, tree name, vec<gimple *> &dbg_to_reset)\n {\n   imm_use_iterator it;\n   use_operand_p use;\n@@ -773,7 +787,11 @@ used_outside_loop_p (class loop *loop, tree name)\n     {\n       gimple *stmt = USE_STMT (use);\n       if (!flow_bb_inside_loop_p (loop, gimple_bb (stmt)))\n-\treturn true;\n+\t{\n+\t  if (!is_gimple_debug (stmt))\n+\t    return true;\n+\t  dbg_to_reset.safe_push (stmt);\n+\t}\n     }\n \n   return false;\n@@ -847,7 +865,7 @@ hoist_guard (class loop *loop, edge guard)\n       char buffer[64];\n       guard->probability.dump (buffer);\n \n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+      dump_printf_loc (MSG_NOTE, loc,\n \t\t       \"Moving guard %i->%i (prob %s) to bb %i, \"\n \t\t       \"new preheader is %i\\n\",\n \t\t       guard->src->index, guard->dest->index,\n@@ -949,7 +967,7 @@ hoist_guard (class loop *loop, edge guard)\n     }\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n \t\t     \"Guard hoisted\\n\");\n \n   free (body);"}]}