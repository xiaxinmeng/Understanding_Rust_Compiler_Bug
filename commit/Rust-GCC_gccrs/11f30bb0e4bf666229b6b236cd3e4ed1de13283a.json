{"sha": "11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmMzBiYjBlNGJmNjY2MjI5YjZiMjM2Y2QzZTRlZDFkZTEzMjgzYQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-01-08T14:13:49Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-01-08T14:13:49Z"}, "message": "libitm: Optimize undo log.\n\n\tlibitm/\n\t* local.cc (GTM_LB): Use GTM::gtm_undolog.\n\t(GTM::gtm_thread::drop_references_undolog): Remove.\n\t(GTM::gtm_thread::commit_undolog,\n\tGTM::gtm_thread::rollback_undolog): Move to ...\n\t* libitm_i.h (GTM::gtm_undolog): ...here. New.\n\t(GTM::gtm_undolog_entry): Remove.\n\t(GTM::gtm_thread): Adapt.\n\t* beginend.cc (GTM::gtm_thread::rollback): Adapt.\n\t(GTM::gtm_thread::trycommit): Adapt.\n\t* method-serial.cc (serial_dispatch::log): Adapt.\n\t* method-gl.cc (gl_wt_dispatch::pre_write): Adapt.\n\t(gl_wt_dispatch::store): Fix likely/unlikely.\n\t* containers.h (GTM::vector::resize): Add additional_capacity\n\tparameter and handle it.\n\t(GTM::vector::resize_noinline): New/adapt.\n\t(GTM::vector::push): New.\n\nFrom-SVN: r182992", "tree": {"sha": "e99be86994cc6e298f8d9dc2f3c832fa4d95755b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e99be86994cc6e298f8d9dc2f3c832fa4d95755b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e478624f6c8d5ff2d43e5159d4435cbd75e4d5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e478624f6c8d5ff2d43e5159d4435cbd75e4d5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e478624f6c8d5ff2d43e5159d4435cbd75e4d5a7"}], "stats": {"total": 171, "additions": 83, "deletions": 88}, "files": [{"sha": "0931fcda5c8d50e643f35a467d6af64b368e603f", "filename": "libitm/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,3 +1,22 @@\n+2012-01-08  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* local.cc (GTM_LB): Use GTM::gtm_undolog.\n+\t(GTM::gtm_thread::drop_references_undolog): Remove.\n+\t(GTM::gtm_thread::commit_undolog,\n+\tGTM::gtm_thread::rollback_undolog): Move to ...\n+\t* libitm_i.h (GTM::gtm_undolog): ...here. New.\n+\t(GTM::gtm_undolog_entry): Remove.\n+\t(GTM::gtm_thread): Adapt.\n+\t* beginend.cc (GTM::gtm_thread::rollback): Adapt.\n+\t(GTM::gtm_thread::trycommit): Adapt.\n+\t* method-serial.cc (serial_dispatch::log): Adapt.\n+\t* method-gl.cc (gl_wt_dispatch::pre_write): Adapt.\n+\t(gl_wt_dispatch::store): Fix likely/unlikely.\n+\t* containers.h (GTM::vector::resize): Add additional_capacity\n+\tparameter and handle it.\n+\t(GTM::vector::resize_noinline): New/adapt.\n+\t(GTM::vector::push): New.\n+\n 2012-01-06  Richard Henderson  <rth@redhat.com>\n \n \t* configure.tgt: Support powerpc-linux and powerpc-darwin."}, {"sha": "fe14f32d110c6c91e59341a7ca05a3e33cfeedc6", "filename": "libitm/beginend.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fbeginend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fbeginend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fbeginend.cc?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -327,7 +327,7 @@ GTM::gtm_thread::rollback (gtm_transaction_cp *cp, bool aborting)\n   // data. Because of the latter, we have to roll it back before any\n   // dispatch-specific rollback (which handles synchronization with other\n   // transactions).\n-  rollback_undolog (cp ? cp->undolog_size : 0);\n+  undolog.rollback (cp ? cp->undolog_size : 0);\n \n   // Perform dispatch-specific rollback.\n   abi_disp()->rollback (cp);\n@@ -470,7 +470,7 @@ GTM::gtm_thread::trycommit ()\n       // We can commit the undo log after dispatch-specific commit and after\n       // making the transaction inactive because we only have to reset\n       // gtm_thread state.\n-      commit_undolog ();\n+      undolog.commit ();\n       // Reset further transaction state.\n       cxa_catch_count = 0;\n       cxa_unthrown = NULL;"}, {"sha": "394b6f2508ecb6b100dc50a7b487b6cbbb66a71f", "filename": "libitm/containers.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fcontainers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fcontainers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fcontainers.h?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Torvald Riegel <triegel@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -70,17 +70,24 @@ class vector\n   }\n   ~vector<T, alloc_separate_cl>() { if (m_capacity) free(entries); }\n \n-  void resize()\n+  void resize(size_t additional_capacity)\n   {\n-    if (m_capacity >= default_resize_max)\n-      m_capacity = m_capacity + default_resize_max;\n+    size_t target = m_capacity + additional_capacity;\n+    if (target > default_resize_max)\n+      m_capacity = ((target - 1 + default_resize_max) / default_resize_max)\n+        * default_resize_max;\n     else\n-      m_capacity = m_capacity * 2;\n+      while (m_capacity < target)\n+        m_capacity = m_capacity * 2;\n     if (m_capacity < default_resize_min)\n       m_capacity = default_resize_min;\n     entries = (T*) xrealloc(entries, sizeof(T) * m_capacity, alloc_separate_cl);\n   }\n-  void resize_noinline() __attribute__((noinline)) { resize(); }\n+  void resize_noinline() __attribute__((noinline)) { resize(1); }\n+  void resize_noinline(size_t elements) __attribute__((noinline))\n+  {\n+    resize(elements);\n+  }\n \n   size_t size() const { return m_size; }\n   size_t capacity() const { return this->capacity; }\n@@ -93,6 +100,15 @@ class vector\n     return &entries[m_size++];\n   }\n \n+  iterator push(size_t elements)\n+  {\n+    // We don't want inlining here since push() is often on the fast path.\n+    if (unlikely(m_size + elements > m_capacity)) resize_noinline(elements);\n+    iterator it = &entries[m_size];\n+    m_size += elements;\n+    return it;\n+  }\n+\n   iterator pop() {\n     if (likely(m_size > 0))\n       {"}, {"sha": "f922d22d89f1993f8441c9f36d61276c49805e09", "filename": "libitm/libitm_i.h", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Flibitm_i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Flibitm_i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm_i.h?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -93,9 +93,6 @@ struct gtm_alloc_action\n   bool allocated;\n };\n \n-// This type is private to local.c.\n-struct gtm_undolog_entry;\n-\n struct gtm_thread;\n \n // A transaction checkpoint: data that has to saved and restored when doing\n@@ -121,6 +118,29 @@ struct gtm_transaction_cp\n   void commit(gtm_thread* tx);\n };\n \n+// An undo log for writes.\n+struct gtm_undolog\n+{\n+  vector<gtm_word> undolog;\n+\n+  // Log the previous value at a certain address.\n+  // The easiest way to inline this is to just define this here.\n+  void log(const void *ptr, size_t len)\n+  {\n+    size_t words = (len + sizeof(gtm_word) - 1) / sizeof(gtm_word);\n+    gtm_word *undo = undolog.push(words + 2);\n+    memcpy(undo, ptr, len);\n+    undo[words] = len;\n+    undo[words + 1] = (gtm_word) ptr;\n+  }\n+\n+  void commit () { undolog.clear(); }\n+  size_t size() const { return undolog.size(); }\n+\n+  // In local.cc\n+  void rollback (size_t until_size = 0);\n+};\n+\n // Contains all thread-specific data required by the entire library.\n // This includes all data relevant to a single transaction. Because most\n // thread-specific data is about the current transaction, we also refer to\n@@ -148,7 +168,7 @@ struct gtm_thread\n   gtm_jmpbuf jb;\n \n   // Data used by local.c for the undo log for both local and shared memory.\n-  vector<gtm_undolog_entry*> undolog;\n+  gtm_undolog undolog;\n \n   // Data used by alloc.c for the malloc/free undo log.\n   aa_tree<uintptr_t, gtm_alloc_action> alloc_actions;\n@@ -254,11 +274,6 @@ struct gtm_thread\n   // In eh_cpp.cc\n   void revert_cpp_exceptions (gtm_transaction_cp *cp = 0);\n \n-  // In local.cc\n-  void commit_undolog (void);\n-  void rollback_undolog (size_t until_size = 0);\n-  void drop_references_undolog (const void *, size_t);\n-\n   // In retry.cc\n   // Must be called outside of transactions (i.e., after rollback).\n   void decide_retry_strategy (gtm_restart_reason);"}, {"sha": "39b6da3a5d20ae506dc9c49d95e7a9e8e98e7d78", "filename": "libitm/local.cc", "status": "modified", "additions": 8, "deletions": 62, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Flocal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Flocal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flocal.cc?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -26,66 +26,21 @@\n \n namespace GTM HIDDEN {\n \n-struct gtm_undolog_entry\n-{\n-  void *addr;\n-  size_t len;\n-  char saved[];\n-};\n-\n \n void\n-gtm_thread::commit_undolog ()\n-{\n-  size_t i, n = undolog.size();\n-\n-  if (n > 0)\n-    {\n-      for (i = 0; i < n; ++i)\n-\tfree (undolog[i]);\n-      this->undolog.clear();\n-    }\n-}\n-\n-void\n-gtm_thread::rollback_undolog (size_t until_size)\n+gtm_undolog::rollback (size_t until_size)\n {\n   size_t i, n = undolog.size();\n \n   if (n > 0)\n     {\n       for (i = n; i-- > until_size; )\n \t{\n-\t  gtm_undolog_entry *u = *undolog.pop();\n-\t  if (u)\n-\t    {\n-\t      memcpy (u->addr, u->saved, u->len);\n-\t      free (u);\n-\t    }\n-\t}\n-    }\n-}\n-\n-/* Forget any references to PTR in the local log.  */\n-\n-void\n-gtm_thread::drop_references_undolog (const void *ptr, size_t len)\n-{\n-  size_t i, n = undolog.size();\n-\n-  if (n > 0)\n-    {\n-      for (i = n; i > 0; i--)\n-\t{\n-\t  gtm_undolog_entry *u = undolog[i];\n-\t  /* ?? Do we need such granularity, or can we get away with\n-\t     just comparing PTR and LEN. ??  */\n-\t  if ((const char *)u->addr >= (const char *)ptr\n-\t      && ((const char *)u->addr + u->len <= (const char *)ptr + len))\n-\t    {\n-\t      free (u);\n-\t      undolog[i] = NULL;\n-\t    }\n+          void *ptr = (void *) undolog[i--];\n+          size_t len = undolog[i];\n+          size_t words = (len + sizeof(gtm_word) - 1) / sizeof(gtm_word);\n+          i -= words;\n+          __builtin_memcpy (ptr, &undolog[i], len);\n \t}\n     }\n }\n@@ -94,16 +49,7 @@ void ITM_REGPARM\n GTM_LB (const void *ptr, size_t len)\n {\n   gtm_thread *tx = gtm_thr();\n-  gtm_undolog_entry *undo;\n-\n-  undo = (gtm_undolog_entry *)\n-      xmalloc (sizeof (struct gtm_undolog_entry) + len);\n-  undo->addr = (void *) ptr;\n-  undo->len = len;\n-\n-  tx->undolog.push()[0] = undo;\n-\n-  memcpy (undo->saved, ptr, len);\n+  tx->undolog.log(ptr, len);\n }\n \n } // namespace GTM"}, {"sha": "d6d050de3a8b92cd6bc7636357000911ee710058", "filename": "libitm/method-gl.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fmethod-gl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fmethod-gl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-gl.cc?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Torvald Riegel <triegel@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -120,8 +120,7 @@ class gl_wt_dispatch : public abi_dispatch\n \ttx->shared_state.store(gl_mg::set_locked(now), memory_order_release);\n       }\n \n-    // TODO Ensure that this gets inlined: Use internal log interface and LTO.\n-    GTM_LB(addr, len);\n+    tx->undolog.log(addr, len);\n   }\n \n   static void validate()\n@@ -181,7 +180,7 @@ class gl_wt_dispatch : public abi_dispatch\n   template <typename V> static void store(V* addr, const V value,\n       ls_modifier mod)\n   {\n-    if (unlikely(mod != WaW))\n+    if (likely(mod != WaW))\n       pre_write(addr, sizeof(V));\n     // FIXME We would need an atomic store here but we can't just forge an\n     // atomic load for nonatomic data because this might not work on all"}, {"sha": "bdecd7b87b32d839527df2181851eb93bfce51b1", "filename": "libitm/method-serial.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fmethod-serial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f30bb0e4bf666229b6b236cd3e4ed1de13283a/libitm%2Fmethod-serial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-serial.cc?ref=11f30bb0e4bf666229b6b236cd3e4ed1de13283a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -107,8 +107,8 @@ class serial_dispatch : public abi_dispatch\n protected:\n   static void log(const void *addr, size_t len)\n   {\n-    // TODO Ensure that this gets inlined: Use internal log interface and LTO.\n-    GTM_LB(addr, len);\n+    gtm_thread *tx = gtm_thr();\n+    tx->undolog.log(addr, len);\n   }\n \n   template <typename V> static V load(const V* addr, ls_modifier mod)"}]}