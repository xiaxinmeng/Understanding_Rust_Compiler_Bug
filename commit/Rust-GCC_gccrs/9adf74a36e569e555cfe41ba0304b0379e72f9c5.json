{"sha": "9adf74a36e569e555cfe41ba0304b0379e72f9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkZjc0YTM2ZTU2OWU1NTVjZmU0MWJhMDMwNGIwMzc5ZTcyZjljNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-02-22T06:47:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-02-22T06:47:37Z"}, "message": "PR c++/87685 - generic lambda 'this' capture error.\n\nThe standard says that in a generic lambda we should speculatively capture\n'this' if we see a call to an overload set that contains a non-static member\nfunction, but it seems wrong to reject the program if we can't capture,\nsince it might not actually be needed.\n\n\t* lambda.c (lambda_expr_this_capture): Change add_capture_p to int.\n\t(maybe_generic_this_capture): Pass -1.\n\nFrom-SVN: r269095", "tree": {"sha": "1f4db50e7e402dae2891a15270c126465e2414d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f4db50e7e402dae2891a15270c126465e2414d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adf74a36e569e555cfe41ba0304b0379e72f9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adf74a36e569e555cfe41ba0304b0379e72f9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adf74a36e569e555cfe41ba0304b0379e72f9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adf74a36e569e555cfe41ba0304b0379e72f9c5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d36b4bf75260d7228025af59fd811e3fd48993c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36b4bf75260d7228025af59fd811e3fd48993c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36b4bf75260d7228025af59fd811e3fd48993c6"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "e7780e7eb12a36811236a1136079543c0d395417", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9adf74a36e569e555cfe41ba0304b0379e72f9c5", "patch": "@@ -1,5 +1,9 @@\n 2019-02-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/87685 - generic lambda 'this' capture error.\n+\t* lambda.c (lambda_expr_this_capture): Change add_capture_p to int.\n+\t(maybe_generic_this_capture): Pass -1.\n+\n \tPR c++/88394 - ICE with VLA init-capture.\n \t* lambda.c (is_normal_capture_proxy): Check DECL_CAPTURED_VARIABLE.\n "}, {"sha": "91bc82b85e58be5d3e6f46520aeb7e968a7a5970", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9adf74a36e569e555cfe41ba0304b0379e72f9c5", "patch": "@@ -7151,7 +7151,7 @@ extern bool is_capture_proxy\t\t\t(tree);\n extern bool is_normal_capture_proxy             (tree);\n extern bool is_constant_capture_proxy           (tree);\n extern void register_capture_members\t\t(tree);\n-extern tree lambda_expr_this_capture            (tree, bool);\n+extern tree lambda_expr_this_capture            (tree, int);\n extern void maybe_generic_this_capture\t\t(tree, tree);\n extern tree maybe_resolve_dummy\t\t\t(tree, bool);\n extern tree current_nonlambda_function\t\t(void);"}, {"sha": "d178f15a4da4acc288da73444338e46d2add3505", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=9adf74a36e569e555cfe41ba0304b0379e72f9c5", "patch": "@@ -730,10 +730,11 @@ add_default_capture (tree lambda_stack, tree id, tree initializer)\n \n /* Return the capture pertaining to a use of 'this' in LAMBDA, in the\n    form of an INDIRECT_REF, possibly adding it through default\n-   capturing, if ADD_CAPTURE_P is true.  */\n+   capturing, if ADD_CAPTURE_P is nonzero.  If ADD_CAPTURE_P is negative,\n+   try to capture but don't complain if we can't.  */\n \n tree\n-lambda_expr_this_capture (tree lambda, bool add_capture_p)\n+lambda_expr_this_capture (tree lambda, int add_capture_p)\n {\n   tree result;\n \n@@ -829,7 +830,7 @@ lambda_expr_this_capture (tree lambda, bool add_capture_p)\n     result = this_capture;\n   else if (!this_capture)\n     {\n-      if (add_capture_p)\n+      if (add_capture_p == 1)\n \t{\n \t  error (\"%<this%> was not captured for this lambda function\");\n \t  result = error_mark_node;\n@@ -934,7 +935,7 @@ maybe_generic_this_capture (tree object, tree fns)\n \t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (*iter))\n \t    {\n \t      /* Found a non-static member.  Capture this.  */\n-\t      lambda_expr_this_capture (lam, true);\n+\t      lambda_expr_this_capture (lam, /*maybe*/-1);\n \t      break;\n \t    }\n       }"}, {"sha": "2bd287cc368b804a5c734b4ea7d53f06e0670d58", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-this3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf74a36e569e555cfe41ba0304b0379e72f9c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this3.C?ref=9adf74a36e569e555cfe41ba0304b0379e72f9c5", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/87685\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  template <typename T> static void f(T) {}\n+  void f() {}\n+\n+  void foo()\n+  {\n+    [] (auto&& v) { A::f(v); }; // OK if parameter type is specified\n+  }\n+};"}]}