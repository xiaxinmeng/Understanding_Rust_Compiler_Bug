{"sha": "0354e5d8b61664785e30c27c44138f3d1cbe83a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1NGU1ZDhiNjE2NjQ3ODVlMzBjMjdjNDQxMzhmM2QxY2JlODNhMw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-05-05T05:09:12Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-05-05T05:09:12Z"}, "message": "rs6000.md (P): Use TARGET_*BIT rather than comparing Pmode.\n\n\t* config/rs6000/rs6000.md (P): Use TARGET_*BIT rather than\n\tcomparing Pmode.\n\t(SDI): New.\n\t(cmp): Delete.\n\t(wd): New.\n\t(add<mode>3, add<mode>3_internal1, add<mode>3_internal2,\n\tadd<mode>3_internal3, one_cmpl<mode>2, sub<mode>3, neg<mode>2,\n\tclz<mode>2, ctz<mode>2, ffs<mode>2): New.\n\t(addsi3, addsi3_internal1, addsi3_internal2, addsi3_internal3,\n\t(one_cmplsi2, subsi3, negsi2, clzsi2, ctzsi2, ffssi2): Remove.\n\t(adddi3, adddi3_internal1, adddi3_internal2, adddi3_internal3,\n\t(one_cmpldi2, subdi3, negdi2, clzdi2, ctzdi2, ffsdi2): Remove.\n\t(sync_compare_and_swap<mode>): Use <wd> rather than <cmp>.\n\nFrom-SVN: r99262", "tree": {"sha": "33869c10adee17e9989f041961b68e6da75c7aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33869c10adee17e9989f041961b68e6da75c7aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0354e5d8b61664785e30c27c44138f3d1cbe83a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0354e5d8b61664785e30c27c44138f3d1cbe83a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0354e5d8b61664785e30c27c44138f3d1cbe83a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0354e5d8b61664785e30c27c44138f3d1cbe83a3/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1df5d87d8cdd5df3e993b226d950f08c330cb908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5d87d8cdd5df3e993b226d950f08c330cb908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df5d87d8cdd5df3e993b226d950f08c330cb908"}], "stats": {"total": 717, "additions": 193, "deletions": 524}, "files": [{"sha": "ff87444cec36bb18e303f742b8830a61c4ee32fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0354e5d8b61664785e30c27c44138f3d1cbe83a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0354e5d8b61664785e30c27c44138f3d1cbe83a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0354e5d8b61664785e30c27c44138f3d1cbe83a3", "patch": "@@ -1,3 +1,19 @@\n+2005-05-04  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/rs6000.md (P): Use TARGET_*BIT rather than\n+\tcomparing Pmode.\n+\t(SDI): New.\n+\t(cmp): Delete.\n+\t(wd): New.\n+\t(add<mode>3, add<mode>3_internal1, add<mode>3_internal2,\n+\tadd<mode>3_internal3, one_cmpl<mode>2, sub<mode>3, neg<mode>2,\n+\tclz<mode>2, ctz<mode>2, ffs<mode>2): New.\n+\t(addsi3, addsi3_internal1, addsi3_internal2, addsi3_internal3,\n+\t(one_cmplsi2, subsi3, negsi2, clzsi2, ctzsi2, ffssi2): Remove.\n+\t(adddi3, adddi3_internal1, adddi3_internal2, adddi3_internal3,\n+\t(one_cmpldi2, subdi3, negdi2, clzdi2, ctzdi2, ffsdi2): Remove.\n+\t(sync_compare_and_swap<mode>): Use <wd> rather than <cmp>.\n+\n 2005-05-05  Paul Brook  <paul@codesourcery.com>\n \n \t* Makefile.in: Replace dependencies on basic-block.h, c-pragma.h,"}, {"sha": "41f5556a385599bb9fd10b39605eb966e46efcce", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 177, "deletions": 524, "changes": 701, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0354e5d8b61664785e30c27c44138f3d1cbe83a3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0354e5d8b61664785e30c27c44138f3d1cbe83a3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0354e5d8b61664785e30c27c44138f3d1cbe83a3", "patch": "@@ -119,20 +119,24 @@\n ; of whole values in GPRs.\n (define_mode_macro GPR [SI (DI \"TARGET_POWERPC64\")])\n \n-; Any supported integer mode\n+; Any supported integer mode.\n (define_mode_macro INT [QI HI SI DI TI])\n \n-; Any supported integer mode that fits in one register\n+; Any supported integer mode that fits in one register.\n (define_mode_macro INT1 [QI HI SI (DI \"TARGET_POWERPC64\")])\n \n-; This mode macro allows :P to be used for patterns that operate on\n-; pointer-sized quantities.  Exactly one of the two alternatives will match.\n-(define_mode_macro P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n+; SImode or DImode, even if DImode doesn't fit in GPRs.\n+(define_mode_macro SDI [SI DI])\n+\n+; The size of a pointer.  Also, the size of the value that a record-condition\n+; (one with a '.') will compare.\n+(define_mode_macro P [(SI \"TARGET_32BIT\") (DI \"TARGET_64BIT\")])\n \n ; Various instructions that come in SI and DI forms.\n (define_mode_attr larx [(SI \"lwarx\") (DI \"ldarx\")])\n (define_mode_attr stcx [(SI \"stwcx.\") (DI \"stdcx.\")])\n-(define_mode_attr cmp [(SI \"cmpw\") (DI \"cmpd\")])\n+; A generic w/d attribute, for things like cmpw/cmpd.\n+(define_mode_attr wd [(SI \"w\") (DI \"d\")])\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n@@ -1001,38 +1005,46 @@\n \n ;; Fixed-point arithmetic insns.\n \n-;; Discourage ai/addic because of carry but provide it in an alternative\n-;; allowing register zero as source.\n-(define_expand \"addsi3\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_arith_cint_operand\" \"\")))]\n+(define_expand \"add<mode>3\"\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n+\t(plus:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:SDI 2 \"reg_or_arith_cint_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT\n-\t\t&& ! add_operand (operands[2], SImode))\n+  if (<MODE>mode == DImode && ! TARGET_POWERPC64)\n+    {\n+      if (non_short_cint_operand (operands[2], DImode))\n+\tFAIL;\n+    }\n+  else if (GET_CODE (operands[2]) == CONST_INT\n+\t   && ! add_operand (operands[2], <MODE>mode))\n     {\n       rtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n-\t\t ? operands[0] : gen_reg_rtx (SImode));\n+\t\t ? operands[0] : gen_reg_rtx (<MODE>mode));\n \n       HOST_WIDE_INT val = INTVAL (operands[2]);\n       HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n-      HOST_WIDE_INT rest = trunc_int_for_mode (val - low, SImode);\n+      HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);\n+\n+      if (<MODE>mode == DImode && !CONST_OK_FOR_LETTER_P (rest, 'L'))\n+\tFAIL;\n \n       /* The ordering here is important for the prolog expander.\n \t When space is allocated from the stack, adding 'low' first may\n \t produce a temporary deallocation (which would be bad).  */\n-      emit_insn (gen_addsi3 (tmp, operands[1], GEN_INT (rest)));\n-      emit_insn (gen_addsi3 (operands[0], tmp, GEN_INT (low)));\n+      emit_insn (gen_add<mode>3 (tmp, operands[1], GEN_INT (rest)));\n+      emit_insn (gen_add<mode>3 (operands[0], tmp, GEN_INT (low)));\n       DONE;\n     }\n }\")\n \n-(define_insn \"*addsi3_internal1\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,?r,r\")\n-\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,b,r,b\")\n-\t\t (match_operand:SI 2 \"add_operand\" \"r,I,I,L\")))]\n+;; Discourage ai/addic because of carry but provide it in an alternative\n+;; allowing register zero as source.\n+(define_insn \"*add<mode>3_internal1\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r,?r,r\")\n+\t(plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,b,r,b\")\n+\t\t  (match_operand:GPR 2 \"add_operand\" \"r,I,I,L\")))]\n   \"\"\n   \"@\n    {cax|add} %0,%1,%2\n@@ -1049,13 +1061,13 @@\n   \"{cau|addis} %0,%1,ha16(%2)\"\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"*addsi3_internal2\"\n+(define_insn \"*add<mode>3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n+\t(compare:CC (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n+\t\t\t    (match_operand:P 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n-  \"TARGET_32BIT\"\n+   (clobber (match_scratch:P 3 \"=r,r,r,r\"))]\n+  \"\"\n   \"@\n    {cax.|add.} %3,%1,%2\n    {ai.|addic.} %3,%1,%2\n@@ -1066,28 +1078,28 @@\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n+\t(compare:CC (plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n+\t\t\t      (match_operand:GPR 2 \"reg_or_short_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (clobber (match_scratch:GPR 3 \"\"))]\n+  \"reload_completed\"\n   [(set (match_dup 3)\n-\t(plus:SI (match_dup 1)\n+\t(plus:GPR (match_dup 1)\n \t\t (match_dup 2)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 3)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"*addsi3_internal3\"\n+(define_insn \"*add<mode>3_internal3\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n+\t(compare:CC (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n+\t\t\t    (match_operand:P 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+\t(plus:P (match_dup 1)\n+\t\t(match_dup 2)))]\n+  \"\"\n   \"@\n    {cax.|add.} %0,%1,%2\n    {ai.|addic.} %0,%1,%2\n@@ -1098,15 +1110,15 @@\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n+\t(compare:CC (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t\t    (match_operand:P 2 \"reg_or_short_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 2)))\n+\t(plus:P (match_dup 1)\n+\t\t(match_dup 2)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n@@ -1117,34 +1129,44 @@\n ;; add should be last in case the result gets used in an address.\n \n (define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"non_add_cint_operand\" \"\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n+\t(plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:GPR 2 \"non_add_cint_operand\" \"\")))]\n   \"\"\n-  [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n+  [(set (match_dup 0) (plus:GPR (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (plus:GPR (match_dup 0) (match_dup 4)))]\n \"\n {\n   HOST_WIDE_INT val = INTVAL (operands[2]);\n   HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n-  HOST_WIDE_INT rest = trunc_int_for_mode (val - low, SImode);\n+  HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);\n \n-  operands[3] = GEN_INT (rest);\n   operands[4] = GEN_INT (low);\n+  if (<MODE>mode == SImode || CONST_OK_FOR_LETTER_P (rest, 'L'))\n+    operands[3] = GEN_INT (rest);\n+  else if (! no_new_pseudos)\n+    {\n+      operands[3] = gen_reg_rtx (DImode);\n+      emit_move_insn (operands[3], operands[2]);\n+      emit_insn (gen_adddi3 (operands[0], operands[1], operands[3]));\n+      DONE;\n+    }\n+  else\n+    FAIL;\n }\")\n \n-(define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n+(define_insn \"one_cmpl<mode>2\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n   \"nor %0,%1,%1\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (not:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=r,r\"))]\n-  \"TARGET_32BIT\"\n+   (clobber (match_scratch:P 2 \"=r,r\"))]\n+  \"\"\n   \"@\n    nor. %2,%1,%1\n    #\"\n@@ -1153,24 +1175,24 @@\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (not:P (match_operand:P 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"\"))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (clobber (match_scratch:P 2 \"\"))]\n+  \"reload_completed\"\n   [(set (match_dup 2)\n-\t(not:SI (match_dup 1)))\n+\t(not:P (match_dup 1)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 2)\n \t\t    (const_int 0)))]\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (not:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(not:SI (match_dup 1)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(not:P (match_dup 1)))]\n+  \"\"\n   \"@\n    nor. %0,%1,%1\n    #\"\n@@ -1179,13 +1201,13 @@\n \n (define_split\n   [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (not:P (match_operand:P 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(not:SI (match_dup 1)))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(not:P (match_dup 1)))]\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(not:SI (match_dup 1)))\n+\t(not:P (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n@@ -1199,9 +1221,9 @@\n   \"{sf%I1|subf%I1c} %0,%2,%1\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_short_operand\" \"r,I\")\n-\t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(minus:GPR (match_operand:GPR 1 \"reg_or_short_operand\" \"r,I\")\n+\t\t   (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")))]\n   \"TARGET_POWERPC\"\n   \"@\n    subf %0,%2,%1\n@@ -1222,11 +1244,11 @@\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC && TARGET_32BIT\"\n+   (clobber (match_scratch:P 3 \"=r,r\"))]\n+  \"TARGET_POWERPC\"\n   \"@\n    subf. %3,%2,%1\n    #\"\n@@ -1235,13 +1257,13 @@\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (minus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (clobber (match_scratch:P 3 \"\"))]\n+  \"reload_completed\"\n   [(set (match_dup 3)\n-\t(minus:SI (match_dup 1)\n+\t(minus:P (match_dup 1)\n \t\t  (match_dup 2)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 3)\n@@ -1264,13 +1286,13 @@\n \n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:SI (match_dup 1)\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(minus:P (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"TARGET_POWERPC && TARGET_32BIT\"\n+  \"TARGET_POWERPC\"\n   \"@\n    subf. %0,%2,%1\n    #\"\n@@ -1279,32 +1301,35 @@\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (minus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:SI (match_dup 1)\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(minus:P (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"TARGET_32BIT && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(minus:SI (match_dup 1)\n+\t(minus:P (match_dup 1)\n \t\t  (match_dup 2)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"subsi3\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_short_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"reg_or_arith_cint_operand\" \"\")))]\n+(define_mode_attr sub_op2 [(SI \"reg_or_arith_cint_operand\")\n+\t\t\t   (DI \"reg_or_sub_cint64_operand\")])\n+\n+(define_expand \"sub<mode>3\"\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n+\t(minus:SDI (match_operand:SDI 1 \"reg_or_short_operand\" \"\")\n+\t\t   (match_operand:SDI 2 \"<sub_op2>\" \"\")))]\n   \"\"\n   \"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      emit_insn (gen_addsi3 (operands[0], operands[1],\n-\t\t\t     negate_rtx (SImode, operands[2])));\n+      emit_insn (gen_add<mode>3 (operands[0], operands[1],\n+\t\t\t\t negate_rtx (<MODE>mode, operands[2])));\n       DONE;\n     }\n }\")\n@@ -1587,18 +1612,24 @@\n    (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 0)))]\n   \"\")\n \n-(define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n+\t(neg:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*neg<mode>2_internal\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n   \"neg %0,%1\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (neg:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=r,r\"))]\n-  \"TARGET_32BIT\"\n+   (clobber (match_scratch:P 2 \"=r,r\"))]\n+  \"\"\n   \"@\n    neg. %2,%1\n    #\"\n@@ -1607,24 +1638,24 @@\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (neg:P (match_operand:P 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"\"))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (clobber (match_scratch:P 2 \"\"))]\n+  \"reload_completed\"\n   [(set (match_dup 2)\n-\t(neg:SI (match_dup 1)))\n+\t(neg:P (match_dup 1)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 2)\n \t\t    (const_int 0)))]\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (neg:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(neg:SI (match_dup 1)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(neg:P (match_dup 1)))]\n+  \"\"\n   \"@\n    neg. %0,%1\n    #\"\n@@ -1633,54 +1664,56 @@\n \n (define_split\n   [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (neg:P (match_operand:P 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(neg:SI (match_dup 1)))]\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(neg:P (match_dup 1)))]\n   \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n-\t(neg:SI (match_dup 1)))\n+\t(neg:P (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"clzsi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(clz:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n+(define_insn \"clz<mode>2\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(clz:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n-  \"{cntlz|cntlzw} %0,%1\")\n+  \"{cntlz|cntlz<wd>} %0,%1\")\n \n-(define_expand \"ctzsi2\"\n+(define_expand \"ctz<mode>2\"\n   [(set (match_dup 2)\n-\t(neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-   (parallel [(set (match_dup 3) (and:SI (match_dup 1)\n-\t\t\t\t\t (match_dup 2)))\n+\t(neg:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n+   (parallel [(set (match_dup 3) (and:GPR (match_dup 1)\n+\t\t\t\t\t  (match_dup 2)))\n \t      (clobber (scratch:CC))])\n-   (set (match_dup 4) (clz:SI (match_dup 3)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(minus:SI (const_int 31) (match_dup 4)))]\n+   (set (match_dup 4) (clz:GPR (match_dup 3)))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(minus:GPR (match_dup 5) (match_dup 4)))]\n   \"\"\n   {\n-     operands[2] = gen_reg_rtx (SImode);\n-     operands[3] = gen_reg_rtx (SImode);\n-     operands[4] = gen_reg_rtx (SImode);\n+     operands[2] = gen_reg_rtx (<MODE>mode);\n+     operands[3] = gen_reg_rtx (<MODE>mode);\n+     operands[4] = gen_reg_rtx (<MODE>mode);\n+     operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1);\n   })\n \n-(define_expand \"ffssi2\"\n+(define_expand \"ffs<mode>2\"\n   [(set (match_dup 2)\n-\t(neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-   (parallel [(set (match_dup 3) (and:SI (match_dup 1)\n-\t\t\t\t\t (match_dup 2)))\n+\t(neg:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n+   (parallel [(set (match_dup 3) (and:GPR (match_dup 1)\n+\t\t\t\t\t  (match_dup 2)))\n \t      (clobber (scratch:CC))])\n-   (set (match_dup 4) (clz:SI (match_dup 3)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(minus:SI (const_int 32) (match_dup 4)))]\n+   (set (match_dup 4) (clz:GPR (match_dup 3)))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(minus:GPR (match_dup 5) (match_dup 4)))]\n   \"\"\n   {\n-     operands[2] = gen_reg_rtx (SImode);\n-     operands[3] = gen_reg_rtx (SImode);\n-     operands[4] = gen_reg_rtx (SImode);\n+     operands[2] = gen_reg_rtx (<MODE>mode);\n+     operands[3] = gen_reg_rtx (<MODE>mode);\n+     operands[4] = gen_reg_rtx (<MODE>mode);\n+     operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n   })\n \n (define_expand \"mulsi3\"\n@@ -5830,284 +5863,6 @@\n \f\n ;; PowerPC64 DImode operations.\n \n-(define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_add_cint64_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (! TARGET_POWERPC64)\n-    {\n-      if (non_short_cint_operand (operands[2], DImode))\n-\tFAIL;\n-    }\n-  else\n-    if (GET_CODE (operands[2]) == CONST_INT\n-\t&& ! add_operand (operands[2], DImode))\n-      {\n-\trtx tmp = ((no_new_pseudos || rtx_equal_p (operands[0], operands[1]))\n-\t\t   ? operands[0] : gen_reg_rtx (DImode));\n-\n-\tHOST_WIDE_INT val = INTVAL (operands[2]);\n-\tHOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n-\tHOST_WIDE_INT rest = trunc_int_for_mode (val - low, DImode);\n-\n-\tif (!CONST_OK_FOR_LETTER_P (rest, 'L'))\n-\t  FAIL;\n-\n-\t/* The ordering here is important for the prolog expander.\n-\t   When space is allocated from the stack, adding 'low' first may\n-\t   produce a temporary deallocation (which would be bad).  */\n-\temit_insn (gen_adddi3 (tmp, operands[1], GEN_INT (rest)));\n-\temit_insn (gen_adddi3 (operands[0], tmp, GEN_INT (low)));\n-\tDONE;\n-      }\n-}\")\n-\n-;; Discourage ai/addic because of carry but provide it in an alternative\n-;; allowing register zero as source.\n-\n-(define_insn \"*adddi3_internal1\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,?r,r\")\n-\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,b,r,b\")\n-\t\t (match_operand:DI 2 \"add_operand\" \"r,I,I,L\")))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   add %0,%1,%2\n-   addi %0,%1,%2\n-   addic %0,%1,%2\n-   addis %0,%1,%v2\")\n-\n-(define_insn \"*adddi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t\t     (match_operand:DI 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   add. %3,%1,%2\n-   addic. %3,%1,%2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"fast_compare,compare,compare,compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:DI 2 \"reg_or_short_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 3)\n-\t(plus:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*adddi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t\t     (match_operand:DI 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   add. %0,%1,%2\n-   addic. %0,%1,%2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"fast_compare,compare,compare,compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:DI 2 \"reg_or_short_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-;; Split an add that we can't do in one insn into two insns, each of which\n-;; does one 16-bit part.  This is used by combine.  Note that the low-order\n-;; add should be last in case the result gets used in an address.\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"non_add_cint_operand\" \"\")))]\n-  \"TARGET_POWERPC64\"\n-  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 3)))\n-   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 4)))]\n-\"\n-{\n-  HOST_WIDE_INT val = INTVAL (operands[2]);\n-  HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n-  HOST_WIDE_INT rest = trunc_int_for_mode (val - low, DImode);\n-\n-  operands[4] = GEN_INT (low);\n-  if (CONST_OK_FOR_LETTER_P (rest, 'L'))\n-    operands[3] = GEN_INT (rest);\n-  else if (! no_new_pseudos)\n-    {\n-      operands[3] = gen_reg_rtx (DImode);\n-      emit_move_insn (operands[3], operands[2]);\n-      emit_insn (gen_adddi3 (operands[0], operands[1], operands[3]));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\")\n-\n-(define_insn \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"nor %0,%1,%1\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   nor. %2,%1,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(not:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(not:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   nor. %0,%1,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(not:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(not:DI (match_dup 1)))\n-   (set (match_dup 2)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_short_operand\" \"r,I\")\n-\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   subf %0,%2,%1\n-   subfic %0,%2,%1\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   subf. %3,%2,%1\n-   #\"\n-  [(set_attr \"type\" \"fast_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (minus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 3)\n-\t(minus:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   subf. %0,%2,%1\n-   #\"\n-  [(set_attr \"type\" \"fast_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (minus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(minus:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_expand \"subdi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_short_operand\" \"\")\n-\t\t  (match_operand:DI 2 \"reg_or_sub_cint64_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      emit_insn (gen_adddi3 (operands[0], operands[1],\n-\t\t\t     negate_rtx (DImode, operands[2])));\n-      DONE;\n-    }\n-}\")\n-\n (define_insn_and_split \"absdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n         (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\")))\n@@ -6132,108 +5887,6 @@\n    (set (match_dup 0) (minus:DI (match_dup 2) (match_dup 0)))]\n   \"\")\n \n-(define_expand \"negdi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"neg %0,%1\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   neg. %2,%1\n-   #\"\n-  [(set_attr \"type\" \"fast_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(neg:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(neg:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   neg. %0,%1\n-   #\"\n-  [(set_attr \"type\" \"fast_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(neg:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(neg:DI (match_dup 1)))\n-   (set (match_dup 2)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"clzdi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(clz:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"cntlzd %0,%1\")\n-\n-(define_expand \"ctzdi2\"\n-  [(set (match_dup 2)\n-\t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))\n-   (parallel [(set (match_dup 3) (and:DI (match_dup 1)\n-\t\t\t\t\t (match_dup 2)))\n-\t      (clobber (scratch:CC))])\n-   (set (match_dup 4) (clz:DI (match_dup 3)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(minus:DI (const_int 63) (match_dup 4)))]\n-  \"TARGET_POWERPC64\"\n-  {\n-     operands[2] = gen_reg_rtx (DImode);\n-     operands[3] = gen_reg_rtx (DImode);\n-     operands[4] = gen_reg_rtx (DImode);\n-  })\n-\n-(define_expand \"ffsdi2\"\n-  [(set (match_dup 2)\n-\t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))\n-   (parallel [(set (match_dup 3) (and:DI (match_dup 1)\n-\t\t\t\t\t (match_dup 2)))\n-\t      (clobber (scratch:CC))])\n-   (set (match_dup 4) (clz:DI (match_dup 3)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(minus:DI (const_int 64) (match_dup 4)))]\n-  \"TARGET_POWERPC64\"\n-  {\n-     operands[2] = gen_reg_rtx (DImode);\n-     operands[3] = gen_reg_rtx (DImode);\n-     operands[4] = gen_reg_rtx (DImode);\n-  })\n-\n (define_insn \"muldi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(mult:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r\")\n@@ -14746,7 +14399,7 @@\n \t(unspec:BLK [(mem:BLK (match_scratch 6 \"X\"))] UNSPEC_SYNC))\n    (clobber (match_scratch:CC 4 \"=&x\"))]\n   \"TARGET_POWERPC\"\n-  \"sync\\n\\t<larx> %0,%y1\\n\\t<cmp>%I2 %0,%2\\n\\tbne- $+12\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n+  \"sync\\n\\t<larx> %0,%y1\\n\\tcmp<wd>%I2 %0,%2\\n\\tbne- $+12\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n   [(set_attr \"length\" \"28\")])\n \n (define_expand \"sync_add<mode>\""}]}