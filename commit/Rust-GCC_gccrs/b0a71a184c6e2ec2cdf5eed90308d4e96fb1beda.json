{"sha": "b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhNzFhMTg0YzZlMmVjMmNkZjVlZWQ5MDMwOGQ0ZTk2ZmIxYmVkYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-05T13:02:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-05T13:02:57Z"}, "message": "re PR tree-optimization/92818 (Typo in vec_perm -> bit_insert pattern)\n\n2019-12-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/92818\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Improve\n\theuristics on what don't care element to choose.\n\t* match.pd (VEC_PERM_EXPR -> BIT_INSERT_EXPR): Fix typo.\n\n\t* gcc.target/i386/pr92818.c: New testcase.\n\nFrom-SVN: r278998", "tree": {"sha": "017581cfcaebd81bd790d173af7224a41d44a392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017581cfcaebd81bd790d173af7224a41d44a392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1355c8ddab619f0e5fae40cbdca33d468780b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1355c8ddab619f0e5fae40cbdca33d468780b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1355c8ddab619f0e5fae40cbdca33d468780b58"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "4a894859761a7b58a8b146783bf21274dfd4aa49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "patch": "@@ -1,3 +1,10 @@\n+2019-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/92818\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Improve\n+\theuristics on what don't care element to choose.\n+\t* match.pd (VEC_PERM_EXPR -> BIT_INSERT_EXPR): Fix typo.\n+\n 2019-12-05  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/92817"}, {"sha": "68027f6757d8a4f71bd5e69a98fbb141ecc66a1b", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "patch": "@@ -6049,7 +6049,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t    break;\n \t\tif (at < encoded_nelts && sel.series_p (at + 1, 1, at + 1, 1))\n \t\t  {\n-\t\t    if (known_lt (at, nelts))\n+\t\t    if (known_lt (poly_uint64 (sel[at]), nelts))\n \t\t      ins = fold_read_from_vector (cop0, sel[at]);\n \t\t    else\n \t\t      ins = fold_read_from_vector (cop1, sel[at] - nelts);"}, {"sha": "900e3bece8c3015cb0bd7bfcc152ce2263248825", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "patch": "@@ -1,3 +1,8 @@\n+2019-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/92818\n+\t* gcc.target/i386/pr92818.c: New testcase.\n+\n 2019-12-05  Frederik Harwath  <frederik@codesourcery.com>\n \n \t* gcc.dg/asm-4.c: Skip on target amdgcn-*-*."}, {"sha": "c138e24b4f123b3af97166295af963e2e93d2307", "filename": "gcc/testsuite/gcc.target/i386/pr92818.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92818.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92818.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92818.c?ref=b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mavx2 -fdump-tree-forwprop1\" } */\n+\n+typedef double v4df __attribute__((vector_size (32)));\n+typedef double v2df __attribute__((vector_size (16)));\n+\n+v2df\n+bar (v4df x, double *p)\n+{\n+  return (v2df) { x[0], *p };\n+}\n+\n+/* { dg-final { scan-tree-dump \"BIT_INSERT_EXPR\" \"forwprop1\" } } */\n+/* { dg-final { scan-assembler \"movhpd\" } } */"}, {"sha": "2f9b08932210bf973ee858e1eed0159b2edbc15f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda", "patch": "@@ -2265,9 +2265,12 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \tsel.quick_push (elts[i].second + elts[i].first * refnelts);\n       /* And fill the tail with \"something\".  It's really don't care,\n          and ideally we'd allow VEC_PERM to have a smaller destination\n-\t vector.  */\n+\t vector.  As heuristic try to preserve a uniform orig[0] which\n+\t facilitates later pattern-matching VEC_PERM_EXPR to a\n+\t BIT_INSERT_EXPR.  */\n       for (; i < refnelts; ++i)\n-\tsel.quick_push (i - elts.length ());\n+\tsel.quick_push ((elts[0].second == 0 && elts[0].first == 0\n+\t\t\t ? 0 : refnelts) + i);\n       vec_perm_indices indices (sel, orig[1] ? 2 : 1, refnelts);\n       if (!can_vec_perm_const_p (TYPE_MODE (perm_type), indices))\n \treturn false;"}]}