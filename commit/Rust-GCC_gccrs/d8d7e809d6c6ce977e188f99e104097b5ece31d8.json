{"sha": "d8d7e809d6c6ce977e188f99e104097b5ece31d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkN2U4MDlkNmM2Y2U5NzdlMTg4Zjk5ZTEwNDA5N2I1ZWNlMzFkOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:24:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:24:21Z"}, "message": "[multiple changes]\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* debug.adb: Minor comment fix.\n\n2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-ciorma.adb: Minor update: move pragma Annotate up.\n\t* a-cfdlli.adb: Skip codepeer analysis on this body.\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n\tAllow use of this pragma with generic unit (package or subprogram).\n\t* gnat_rm.texi: Clarify that pragma No_Elaboration_Code_All can\n\tbe applied to generics.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Valid_Limited_Ancestor): Ancestor part of\n\textension aggregate can itself be an extension aggregate, as\n\twell as a call that is rewritten as a reference.\n\n2014-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Add_Inlined_Subprogram): Insert all programs\n\tgenerated as a body or whose declaration was provided along with\n\tthe body.\n\n2014-11-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem.adb (Semantics): Disable expansion if we are compiling a\n\tseparate unit under configurable runtime. By default separate\n\tunits are compiled with expansion disabled but under configurable\n\truntime we enable the expansion to get error messages about\n\tmissing entities.\n\nFrom-SVN: r217855", "tree": {"sha": "a5c49e3dca4040fbe6600f1168ef61593ec7cbe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5c49e3dca4040fbe6600f1168ef61593ec7cbe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d7e809d6c6ce977e188f99e104097b5ece31d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d7e809d6c6ce977e188f99e104097b5ece31d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d7e809d6c6ce977e188f99e104097b5ece31d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d7e809d6c6ce977e188f99e104097b5ece31d8/comments", "author": null, "committer": null, "parents": [{"sha": "f2d9ae209afbf4486850f531ebe091953f1f72f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9ae209afbf4486850f531ebe091953f1f72f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d9ae209afbf4486850f531ebe091953f1f72f9"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "4455049e43a6a5b34ec0214e14262a5c951c9d78", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -1,3 +1,39 @@\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb: Minor comment fix.\n+\n+2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-ciorma.adb: Minor update: move pragma Annotate up.\n+\t* a-cfdlli.adb: Skip codepeer analysis on this body.\n+\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n+\tAllow use of this pragma with generic unit (package or subprogram).\n+\t* gnat_rm.texi: Clarify that pragma No_Elaboration_Code_All can\n+\tbe applied to generics.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Valid_Limited_Ancestor): Ancestor part of\n+\textension aggregate can itself be an extension aggregate, as\n+\twell as a call that is rewritten as a reference.\n+\n+2014-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Add_Inlined_Subprogram): Insert all programs\n+\tgenerated as a body or whose declaration was provided along with\n+\tthe body.\n+\n+2014-11-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem.adb (Semantics): Disable expansion if we are compiling a\n+\tseparate unit under configurable runtime. By default separate\n+\tunits are compiled with expansion disabled but under configurable\n+\truntime we enable the expansion to get error messages about\n+\tmissing entities.\n+\n 2014-11-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb: Minor reformatting."}, {"sha": "2e8676b44957d3e2ecccfb39481a20e310149fc1", "filename": "gcc/ada/a-cfdlli.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fa-cfdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fa-cfdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -30,6 +30,7 @@ with System;  use type System.Address;\n package body Ada.Containers.Formal_Doubly_Linked_Lists with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "d06d8fedc1d7d47a3d97d7f3959b7dfc4a12e5fe", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -38,9 +38,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n with System; use type System.Address;\n \n package body Ada.Containers.Indefinite_Ordered_Maps is\n-   pragma Suppress (All_Checks);\n-\n    pragma Annotate (CodePeer, Skip_Analysis);\n+   pragma Suppress (All_Checks);\n \n    -----------------------------\n    -- Node Access Subprograms --"}, {"sha": "31c3972f7c246255964282e4a658eade8c01ffa5", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -249,7 +249,7 @@ package body Debug is\n    --       output (dt) or recreated source output (dg,do,ds) includes only\n    --       the main unit. If df is set, then the output in either case\n    --       includes all compiled units (see also dg,do,ds,dt). Note that to\n-   --       be effective, this swich must be used in combination with one or\n+   --       be effective, this switch must be used in combination with one or\n    --       more of dt, dg, do or ds.\n \n    --  dg   Print the source recreated from the generated tree. In the case"}, {"sha": "923957edf4e295eabae379385d128bd2f2b5494e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -4701,6 +4701,7 @@ the current unit and any extended main source units (body and subunits.\n It also has has the effect of enforcing a transitive application of this\n aspect, so that if any unit is implicitly or explicitly WITH'ed by the\n current unit, it must also have the No_Elaboration_Code_All aspect set.\n+It may be applied to package or subprogram specs or their generic versions.\n \n @node Pragma No_Inline\n @unnumberedsec Pragma No_Inline"}, {"sha": "ca84a1f226801341a2bf802d5dfb5a5269594c49", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -454,6 +454,7 @@ package body Inline is\n \n    procedure Add_Inlined_Subprogram (Index : Subp_Index) is\n       E    : constant Entity_Id := Inlined.Table (Index).Name;\n+      Decl : constant Node_Id   := Parent (Declaration_Node (E));\n       Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n \n       procedure Register_Backend_Inlined_Subprogram (Subp : Entity_Id);\n@@ -486,14 +487,17 @@ package body Inline is\n    begin\n       --  If the subprogram is to be inlined, and if its unit is known to be\n       --  inlined or is an instance whose body will be analyzed anyway or the\n-      --  subprogram has been generated by the compiler, and if it is declared\n+      --  subprogram was generated as a body by the compiler (for example an\n+      --  initialization procedure) or its declaration was provided along with\n+      --  the body (for example an expression function), and if it is declared\n       --  at the library level not in the main unit, and if it can be inlined\n       --  by the back-end, then insert it in the list of inlined subprograms.\n \n       if Is_Inlined (E)\n         and then (Is_Inlined (Pack)\n                    or else Is_Generic_Instance (Pack)\n-                   or else Is_Internal (E))\n+                   or else Nkind (Decl) = N_Subprogram_Body\n+                   or else Present (Corresponding_Body (Decl)))\n         and then not In_Main_Unit_Or_Subunit (E)\n         and then not Is_Nested (E)\n         and then not Has_Initialized_Type (E)"}, {"sha": "442e89737edaa593c90713bc51ff91f296dc5b93", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -1433,11 +1433,13 @@ package body Sem is\n              --  error messages about missing entities in the run-time even\n              --  if we are compiling in -gnatc (no code generation) mode.\n              --  Similar processing applies to No_Run_Time_Mode. However,\n-             --  don't do this if debug flag -gnatd.Z is set (this is to handle\n-             --  a situation where this new processing causes trouble).\n+             --  don't do this if debug flag -gnatd.Z is set or when we are\n+             --  compiling a separate unit (this is to handle a situation\n+             --  where this new processing causes trouble).\n \n              or else ((Configurable_Run_Time_Mode or No_Run_Time_Mode)\n-                       and not Debug_Flag_Dot_ZZ));\n+                       and not Debug_Flag_Dot_ZZ\n+                       and Nkind (Unit (Cunit (Main_Unit))) /= N_Subunit));\n       end if;\n \n       Full_Analysis      := True;"}, {"sha": "82d6ce09430fd8909950da2e2830a8f526b55529", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -2663,12 +2663,19 @@ package body Sem_Aggr is\n \n       function Valid_Limited_Ancestor (Anc : Node_Id) return Boolean is\n       begin\n-         if Is_Entity_Name (Anc)\n-           and then Is_Type (Entity (Anc))\n+         if Is_Entity_Name (Anc) and then Is_Type (Entity (Anc)) then\n+            return True;\n+\n+         --  The ancestor must be a call or an aggregate, but a call may\n+         --  have been expanded into a temporary, so check original node.\n+\n+         elsif Nkind_In (Anc, N_Aggregate,\n+                              N_Extension_Aggregate,\n+                              N_Function_Call)\n          then\n             return True;\n \n-         elsif Nkind_In (Anc, N_Aggregate, N_Function_Call) then\n+         elsif Nkind (Original_Node (Anc)) = N_Function_Call then\n             return True;\n \n          elsif Nkind (Anc) = N_Attribute_Reference"}, {"sha": "d155b06bc594763bbbc923bdb8817324e80c4741", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d7e809d6c6ce977e188f99e104097b5ece31d8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d8d7e809d6c6ce977e188f99e104097b5ece31d8", "patch": "@@ -16729,9 +16729,11 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            --  Must appear for a spec\n+            --  Must appear for a spec or generic spec\n \n             if not Nkind_In (Unit (Cunit (Current_Sem_Unit)),\n+                             N_Generic_Package_Declaration,\n+                             N_Generic_Subprogram_Declaration,\n                              N_Package_Declaration,\n                              N_Subprogram_Declaration)\n             then"}]}