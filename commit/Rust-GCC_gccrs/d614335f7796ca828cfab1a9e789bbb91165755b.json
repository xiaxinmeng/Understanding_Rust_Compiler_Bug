{"sha": "d614335f7796ca828cfab1a9e789bbb91165755b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYxNDMzNWY3Nzk2Y2E4MjhjZmFiMWE5ZTc4OWJiYjkxMTY1NzU1Yg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2015-10-30T20:56:32Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2015-10-30T20:56:32Z"}, "message": "Add contains_symbol_ref_p\n\nFrom-SVN: r229607", "tree": {"sha": "2e6dad106e2c0be6d7bcd62276c61e90c5b1dc22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6dad106e2c0be6d7bcd62276c61e90c5b1dc22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d614335f7796ca828cfab1a9e789bbb91165755b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d614335f7796ca828cfab1a9e789bbb91165755b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d614335f7796ca828cfab1a9e789bbb91165755b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d614335f7796ca828cfab1a9e789bbb91165755b/comments", "author": null, "committer": null, "parents": [{"sha": "a6906c809772feaead79e533e79535bd03a49aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6906c809772feaead79e533e79535bd03a49aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6906c809772feaead79e533e79535bd03a49aa6"}], "stats": {"total": 95, "additions": 28, "deletions": 67}, "files": [{"sha": "1b4725ee701313998eb0d9f5972e6673fdc165d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d614335f7796ca828cfab1a9e789bbb91165755b", "patch": "@@ -1,3 +1,13 @@\n+2015-10-30  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* rtl.h (contains_symbol_ref_p): Declare.\n+\t(SYMBOL_REF_P): Define.\n+\t* rtlanal.c (contains_symbol_ref_p: New function.\n+\t* lra-constraints.c (contains_symbol_ref_p): Remove.\n+\t* var-tracking.c (contains_symbol_ref): Remove.\n+\t(track_expr_p): Use contains_symbol_ref_p instead of\n+\tcontains_symbol_ref.\n+\n 2015-10-30  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gimple-fold.c (fold_array_ctor_reference): Move searching code to:"}, {"sha": "4670e811b3a9bb0288bf40f91157e3152dbaa9d0", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=d614335f7796ca828cfab1a9e789bbb91165755b", "patch": "@@ -4001,35 +4001,6 @@ contains_reg_p (rtx x, bool hard_reg_p, bool spilled_p)\n   return false;\n }\n \n-/* Return true if X contains a symbol reg.  */\n-static bool\n-contains_symbol_ref_p (rtx x)\n-{\n-  int i, j;\n-  const char *fmt;\n-  enum rtx_code code;\n-\n-  code = GET_CODE (x);\n-  if (code == SYMBOL_REF)\n-    return true;\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\t{\n-\t  if (contains_symbol_ref_p (XEXP (x, i)))\n-\t    return true;\n-\t}\n-      else if (fmt[i] == 'E')\n-\t{\n-\t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t    if (contains_symbol_ref_p (XVECEXP (x, i, j)))\n-\t      return true;\n-\t}\n-    }\n-  return false;\n-}\n-\n /* Process all regs in location *LOC and change them on equivalent\n    substitution.  Return true if any change was done.  */\n static bool"}, {"sha": "fe081ed308538957fdfbb5739eef01e1578630c3", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d614335f7796ca828cfab1a9e789bbb91165755b", "patch": "@@ -829,6 +829,9 @@ struct GTY(()) rtvec_def {\n /* Predicate yielding nonzero iff RTX is a subreg.  */\n #define SUBREG_P(RTX) (GET_CODE (RTX) == SUBREG)\n \n+/* Predicate yielding true iff RTX is a symbol ref.  */\n+#define SYMBOL_REF_P(RTX) (GET_CODE (RTX) == SYMBOL_REF)\n+\n template <>\n template <>\n inline bool\n@@ -2926,6 +2929,7 @@ extern void set_insn_deleted (rtx);\n /* Functions in rtlanal.c */\n \n extern rtx single_set_2 (const rtx_insn *, const_rtx);\n+extern bool contains_symbol_ref_p (const_rtx);\n \n /* Handle the cheap and common cases inline for performance.  */\n "}, {"sha": "67098e52ab7fbe9578af8a0a0432a8ec279b21c5", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d614335f7796ca828cfab1a9e789bbb91165755b", "patch": "@@ -6230,6 +6230,19 @@ get_index_code (const struct address_info *info)\n   return SCRATCH;\n }\n \n+/* Return true if RTL X contains a SYMBOL_REF.  */\n+\n+bool\n+contains_symbol_ref_p (const_rtx x)\n+{\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, ALL)\n+    if (SYMBOL_REF_P (*iter))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Return true if X contains a thread-local symbol.  */\n \n bool"}, {"sha": "72f2e81f05934101672a730ab568812cdbbc9c45", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d614335f7796ca828cfab1a9e789bbb91165755b/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=d614335f7796ca828cfab1a9e789bbb91165755b", "patch": "@@ -664,7 +664,6 @@ static bool variable_different_p (variable *, variable *);\n static bool dataflow_set_different (dataflow_set *, dataflow_set *);\n static void dataflow_set_destroy (dataflow_set *);\n \n-static bool contains_symbol_ref (rtx);\n static bool track_expr_p (tree, bool);\n static bool same_variable_part_p (rtx, tree, HOST_WIDE_INT);\n static void add_uses_1 (rtx *, void *);\n@@ -5021,42 +5020,6 @@ dataflow_set_destroy (dataflow_set *set)\n   set->vars = NULL;\n }\n \n-/* Return true if RTL X contains a SYMBOL_REF.  */\n-\n-static bool\n-contains_symbol_ref (rtx x)\n-{\n-  const char *fmt;\n-  RTX_CODE code;\n-  int i;\n-\n-  if (!x)\n-    return false;\n-\n-  code = GET_CODE (x);\n-  if (code == SYMBOL_REF)\n-    return true;\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\t{\n-\t  if (contains_symbol_ref (XEXP (x, i)))\n-\t    return true;\n-\t}\n-      else if (fmt[i] == 'E')\n-\t{\n-\t  int j;\n-\t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    if (contains_symbol_ref (XVECEXP (x, i, j)))\n-\t      return true;\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n /* Shall EXPR be tracked?  */\n \n static bool\n@@ -5137,7 +5100,7 @@ track_expr_p (tree expr, bool need_rtl)\n      char **_dl_argv;\n   */\n   if (decl_rtl && MEM_P (decl_rtl)\n-      && contains_symbol_ref (XEXP (decl_rtl, 0)))\n+      && contains_symbol_ref_p (XEXP (decl_rtl, 0)))\n     return 0;\n \n   /* If RTX is a memory it should not be very large (because it would be"}]}