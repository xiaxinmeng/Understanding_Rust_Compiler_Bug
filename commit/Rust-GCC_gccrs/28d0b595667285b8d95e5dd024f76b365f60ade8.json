{"sha": "28d0b595667285b8d95e5dd024f76b365f60ade8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMGI1OTU2NjcyODViOGQ5NWU1ZGQwMjRmNzZiMzY1ZjYwYWRlOA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-10-09T15:36:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-10-09T15:36:18Z"}, "message": "Make-lang.in (F95_PARSER_OBJS, [...]): Add dependency on iso-c-binding.def and iso-fortran-env.def.\n\n2011-10-09  Tobias Burnus  <burnus@net-b.de>\n\n        * Make-lang.in (F95_PARSER_OBJS, GFORTRAN_TRANS_DEPS): Add\n        dependency on iso-c-binding.def and iso-fortran-env.def.\n        * module.c (import_iso_c_binding_module): Add error when\n        explicitly importing a nonstandard symbol; extend standard-\n        depending loading.\n        * iso-c-binding.def: Add c_float128 and c_float128_complex\n        integer parameters (for -std=gnu).\n        * intrinsic.texi (ISO_C_Binding): Document them.\n        * symbol.c (generate_isocbinding_symbol): Change macros\n        to ignore GFC_STD_* data.\n        * trans-types.c (gfc_init_c_interop_kinds): Ditto; make\n        nonstatic and renamed from \"init_c_interop_kinds\".\n        (gfc_init_kinds): Don't call it\n        * trans-types.h (gfc_init_c_interop_kinds): Add prototype.\n        * f95-lang.c (gfc_init_decl_processing): Call it.\n\n2011-10-09  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/iso_c_binding_param_1.f90: New.\n        * gfortran.dg/iso_c_binding_param_2.f90: New.\n        * gfortran.dg/c_sizeof_2.f90: Update dg-error.\n\nFrom-SVN: r179725", "tree": {"sha": "02963e6f8d6c620cb110c18215cafdb4c88e2374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02963e6f8d6c620cb110c18215cafdb4c88e2374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d0b595667285b8d95e5dd024f76b365f60ade8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d0b595667285b8d95e5dd024f76b365f60ade8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d0b595667285b8d95e5dd024f76b365f60ade8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d0b595667285b8d95e5dd024f76b365f60ade8/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a0a3578217e5b5d36589d7f6a68bc68bbcc53de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0a3578217e5b5d36589d7f6a68bc68bbcc53de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0a3578217e5b5d36589d7f6a68bc68bbcc53de"}], "stats": {"total": 221, "additions": 186, "deletions": 35}, "files": [{"sha": "d717831086723382c1fc2a90ae394abe7e261afa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -1,3 +1,21 @@\n+2011-10-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* Make-lang.in (F95_PARSER_OBJS, GFORTRAN_TRANS_DEPS): Add\n+\tdependency on iso-c-binding.def and iso-fortran-env.def.\n+\t* module.c (import_iso_c_binding_module): Add error when\n+\texplicitly importing a nonstandard symbol; extend standard-\n+\tdepending loading.\n+\t* iso-c-binding.def: Add c_float128 and c_float128_complex\n+\tinteger parameters (for -std=gnu).\n+\t* intrinsic.texi (ISO_C_Binding): Document them.\n+\t* symbol.c (generate_isocbinding_symbol): Change macros\n+\tto ignore GFC_STD_* data.\n+\t* trans-types.c (gfc_init_c_interop_kinds): Ditto; make\n+\tnonstatic and renamed from \"init_c_interop_kinds\".\n+\t(gfc_init_kinds): Don't call it\n+\t* trans-types.h (gfc_init_c_interop_kinds): Add prototype.\n+\t* f95-lang.c (gfc_init_decl_processing): Call it.\n+\n 2011-10-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50659"}, {"sha": "b766da651a2d4b2f0a31bd2298b2315a93cd4696", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -329,14 +329,16 @@ $(F95_PARSER_OBJS): fortran/gfortran.h fortran/libgfortran.h \\\n \t\tfortran/parse.h fortran/arith.h fortran/target-memory.h \\\n \t\t$(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TM_P_H) coretypes.h \\\n \t\t$(RTL_H) $(TREE_H) $(TREE_DUMP_H) $(GGC_H) $(EXPR_H) \\\n-\t\t$(FLAGS_H) output.h $(DIAGNOSTIC_H) errors.h $(FUNCTION_H) \n+\t\t$(FLAGS_H) output.h $(DIAGNOSTIC_H) errors.h $(FUNCTION_H) \\\n+\t\tfortran/iso-c-binding.def fortran/iso-fortran-env.def\n fortran/openmp.o: pointer-set.h $(TARGET_H) toplev.h\n \n GFORTRAN_TRANS_DEPS = fortran/gfortran.h fortran/libgfortran.h \\\n     fortran/intrinsic.h fortran/trans-array.h \\\n     fortran/trans-const.h fortran/trans-const.h fortran/trans.h \\\n     fortran/trans-stmt.h fortran/trans-types.h \\\n-    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_H) coretypes.h $(GGC_H)\n+    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_H) coretypes.h $(GGC_H) \\\n+    fortran/iso-c-binding.def fortran/iso-fortran-env.def\n \n fortran/f95-lang.o: $(GFORTRAN_TRANS_DEPS) fortran/mathbuiltins.def \\\n   gt-fortran-f95-lang.h gtype-fortran.h $(CGRAPH_H) $(TARGET_H) fortran/cpp.h \\"}, {"sha": "8f8dd7d4c358b2bc953813555f9cb3f5c5ffdcdc", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -595,6 +595,7 @@ gfc_init_decl_processing (void)\n   /* Set up F95 type nodes.  */\n   gfc_init_kinds ();\n   gfc_init_types ();\n+  gfc_init_c_interop_kinds ();\n }\n \n "}, {"sha": "1bd5ec36edd8832eaf38c7d035a7b950374c3d8c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -610,8 +610,8 @@ iso_fortran_env_symbol;\n #undef NAMED_DERIVED_TYPE\n \n #define NAMED_INTCST(a,b,c,d) a,\n-#define NAMED_REALCST(a,b,c) a,\n-#define NAMED_CMPXCST(a,b,c) a,\n+#define NAMED_REALCST(a,b,c,d) a,\n+#define NAMED_CMPXCST(a,b,c,d) a,\n #define NAMED_LOGCST(a,b,c) a,\n #define NAMED_CHARKNDCST(a,b,c) a,\n #define NAMED_CHARCST(a,b,c) a,"}, {"sha": "a093bec8c7c6fc1d86eedc18322b5b6e8a1b5472", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -13006,7 +13006,9 @@ type default integer, which can be used as KIND type parameters.\n In addition to the integer named constants required by the Fortran 2003 \n standard, GNU Fortran provides as an extension named constants for the \n 128-bit integer types supported by the C compiler: @code{C_INT128_T, \n-C_INT_LEAST128_T, C_INT_FAST128_T}.\n+C_INT_LEAST128_T, C_INT_FAST128_T}. Furthermore, if @code{__float} is\n+supported in C, the named constants @code{C_FLOAT128, C_FLOAT128_COMPLEX}\n+are defined.\n \n @multitable @columnfractions .15 .35 .35 .35\n @item Fortran Type  @tab Named constant         @tab C type                                @tab Extension\n@@ -13036,9 +13038,11 @@ C_INT_LEAST128_T, C_INT_FAST128_T}.\n @item @code{REAL}   @tab @code{C_FLOAT}         @tab @code{float}\n @item @code{REAL}   @tab @code{C_DOUBLE}        @tab @code{double}\n @item @code{REAL}   @tab @code{C_LONG_DOUBLE}   @tab @code{long double}\n+@item @code{REAL}   @tab @code{C_FLOAT128}      @tab @code{__float128}                    @tab Ext.\n @item @code{COMPLEX}@tab @code{C_FLOAT_COMPLEX} @tab @code{float _Complex}\n @item @code{COMPLEX}@tab @code{C_DOUBLE_COMPLEX}@tab @code{double _Complex}\n @item @code{COMPLEX}@tab @code{C_LONG_DOUBLE_COMPLEX}@tab @code{long double _Complex}\n+@item @code{REAL}   @tab @code{C_FLOAT128_COMPLEX}   @tab @code{__float128 _Complex}      @tab Ext.\n @item @code{LOGICAL}@tab @code{C_BOOL}          @tab @code{_Bool}\n @item @code{CHARACTER}@tab @code{C_CHAR}        @tab @code{char}\n @end multitable"}, {"sha": "f8673b963c89cdf1ecc5a131777081662c6f336a", "filename": "gcc/fortran/iso-c-binding.def", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fiso-c-binding.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fiso-c-binding.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-c-binding.def?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -24,11 +24,11 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #ifndef NAMED_REALCST\n-# define NAMED_REALCST(a,b,c) \n+# define NAMED_REALCST(a,b,c,d) \n #endif\n \n #ifndef NAMED_CMPXCST\n-# define NAMED_CMPXCST(a,b,c) \n+# define NAMED_CMPXCST(a,b,c,d) \n #endif\n \n #ifndef NAMED_LOGCST\n@@ -103,17 +103,25 @@ NAMED_INTCST (ISOCBINDING_INT_FAST128_T, \"c_int_fast128_t\",\n \t      get_int_kind_from_width (128), GFC_STD_GNU)\n \n NAMED_REALCST (ISOCBINDING_FLOAT, \"c_float\", \\\n-               get_real_kind_from_node (float_type_node))\n+               get_real_kind_from_node (float_type_node), GFC_STD_F2003)\n NAMED_REALCST (ISOCBINDING_DOUBLE, \"c_double\", \\\n-               get_real_kind_from_node (double_type_node))\n+               get_real_kind_from_node (double_type_node), GFC_STD_F2003)\n NAMED_REALCST (ISOCBINDING_LONG_DOUBLE, \"c_long_double\", \\\n-               get_real_kind_from_node (long_double_type_node))\n+               get_real_kind_from_node (long_double_type_node), GFC_STD_F2003)\n+NAMED_REALCST (ISOCBINDING_FLOAT128, \"c_float128\", \\\n+\t       float128_type_node == NULL_TREE \\\n+\t\t  ? -4 : get_real_kind_from_node (float128_type_node), \\\n+\t       GFC_STD_GNU)\n NAMED_CMPXCST (ISOCBINDING_FLOAT_COMPLEX, \"c_float_complex\", \\\n-               get_real_kind_from_node (float_type_node))\n+               get_real_kind_from_node (float_type_node), GFC_STD_F2003)\n NAMED_CMPXCST (ISOCBINDING_DOUBLE_COMPLEX, \"c_double_complex\", \\\n-               get_real_kind_from_node (double_type_node))\n+               get_real_kind_from_node (double_type_node), GFC_STD_F2003)\n NAMED_CMPXCST (ISOCBINDING_LONG_DOUBLE_COMPLEX, \"c_long_double_complex\", \\\n-               get_real_kind_from_node (long_double_type_node))\n+               get_real_kind_from_node (long_double_type_node), GFC_STD_F2003)\n+NAMED_CMPXCST (ISOCBINDING_FLOAT128_COMPLEX, \"c_float128_complex\", \\\n+\t       float128_type_node == NULL_TREE \\\n+\t\t  ? -4 : get_real_kind_from_node (float128_type_node), \\\n+\t       GFC_STD_GNU)\n \n NAMED_LOGCST (ISOCBINDING_BOOL, \"c_bool\", \\\n               get_int_kind_from_width (BOOL_TYPE_SIZE))"}, {"sha": "62f759876d3a8bea1134e05b9118a50abce8750a", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 93, "deletions": 12, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -5350,8 +5350,53 @@ import_iso_c_binding_module (void)\n       for (u = gfc_rename_list; u; u = u->next)\n \tif (strcmp (c_interop_kinds_table[i].name, u->use_name) == 0)\n \t  {\n+\t    bool not_in_std;\n+\t    const char *name;\n \t    u->found = 1;\n \t    found = true;\n+\n+\t    switch (i)\n+\t      {\n+#define NAMED_FUNCTION(a,b,c,d) \\\n+\t        case a: \\\n+\t\t  not_in_std = (gfc_option.allow_std & d) == 0; \\\n+\t\t  name = b; \\\n+\t\t  break;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_FUNCTION\n+#define NAMED_INTCST(a,b,c,d) \\\n+\t        case a: \\\n+\t\t  not_in_std = (gfc_option.allow_std & d) == 0; \\\n+\t\t  name = b; \\\n+\t\t  break;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_INTCST\n+#define NAMED_REALCST(a,b,c,d) \\\n+\t        case a: \\\n+\t\t  not_in_std = (gfc_option.allow_std & d) == 0; \\\n+\t\t  name = b; \\\n+\t\t  break;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_REALCST\n+#define NAMED_CMPXCST(a,b,c,d) \\\n+\t        case a: \\\n+\t\t  not_in_std = (gfc_option.allow_std & d) == 0; \\\n+\t\t  name = b; \\\n+\t\t  break;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_CMPXCST\n+\t\tdefault:\n+\t\t  not_in_std = false;\n+\t\t  name = \"\";\n+\t      }\n+\n+\t    if (not_in_std)\n+\t      {\n+\t\tgfc_error (\"The symbol '%s', referenced at %C, is not \"\n+\t\t\t   \"in the selected standard\", name);\n+\t\tcontinue;\n+\t      }\n+\n \t    switch (i)\n \t      {\n #define NAMED_FUNCTION(a,b,c,d) \\\n@@ -5374,23 +5419,59 @@ import_iso_c_binding_module (void)\n \t  }\n \n       if (!found && !only_flag)\n-\tswitch (i)\n-\t  {\n+\t{\n+\t  /* Skip, if the symbol is not in the enabled standard.  */\n+\t  switch (i)\n+\t    {\n+#define NAMED_FUNCTION(a,b,c,d) \\\n+\t      case a: \\\n+\t\tif ((gfc_option.allow_std & d) == 0) \\\n+\t\t  continue; \\\n+\t\tbreak;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_FUNCTION\n+\n+#define NAMED_INTCST(a,b,c,d) \\\n+\t      case a: \\\n+\t\tif ((gfc_option.allow_std & d) == 0) \\\n+\t\t  continue; \\\n+\t\tbreak;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_INTCST\n+#define NAMED_REALCST(a,b,c,d) \\\n+\t      case a: \\\n+\t\tif ((gfc_option.allow_std & d) == 0) \\\n+\t\t  continue; \\\n+\t\tbreak;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_REALCST\n+#define NAMED_CMPXCST(a,b,c,d) \\\n+\t      case a: \\\n+\t\tif ((gfc_option.allow_std & d) == 0) \\\n+\t\t  continue; \\\n+\t\tbreak;\n+#include \"iso-c-binding.def\"\n+#undef NAMED_CMPXCST\n+\t      default:\n+\t\t; /* Not GFC_STD_* versioned. */\n+\t    }\n+\n+\t  switch (i)\n+\t    {\n #define NAMED_FUNCTION(a,b,c,d) \\\n-\t    case a: \\\n-\t      if ((gfc_option.allow_std & d) == 0) \\\n-\t\tcontinue; \\\n-\t      create_intrinsic_function (b, (gfc_isym_id) c, \\\n-\t\t\t\t\t iso_c_module_name, \\\n-\t\t\t\t\t INTMOD_ISO_C_BINDING); \\\n+\t      case a: \\\n+\t\tcreate_intrinsic_function (b, (gfc_isym_id) c, \\\n+\t\t\t\t\t   iso_c_module_name, \\\n+\t\t\t\t\t   INTMOD_ISO_C_BINDING); \\\n \t\t  break;\n #include \"iso-c-binding.def\"\n #undef NAMED_FUNCTION\n \n-\t    default:\n-\t      generate_isocbinding_symbol (iso_c_module_name,\n-\t\t\t\t\t   (iso_c_binding_symbol) i, NULL);\n-\t  }\n+\t      default:\n+\t\tgenerate_isocbinding_symbol (iso_c_module_name,\n+\t\t\t\t\t     (iso_c_binding_symbol) i, NULL);\n+\t    }\n+\t}\n    }\n \n    for (u = gfc_rename_list; u; u = u->next)"}, {"sha": "4b506fe83e80695866ac5369f7e6effb3273cc2c", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -4336,8 +4336,8 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n     {\n \n #define NAMED_INTCST(a,b,c,d) case a : \n-#define NAMED_REALCST(a,b,c) case a :\n-#define NAMED_CMPXCST(a,b,c) case a :\n+#define NAMED_REALCST(a,b,c,d) case a :\n+#define NAMED_CMPXCST(a,b,c,d) case a :\n #define NAMED_LOGCST(a,b,c) case a :\n #define NAMED_CHARKNDCST(a,b,c) case a :\n #include \"iso-c-binding.def\""}, {"sha": "4c5990e7ae162de65a9d20c80b1e1e673248b384", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -298,8 +298,8 @@ get_int_kind_from_minimal_width (int size)\n /* Generate the CInteropKind_t objects for the C interoperable\n    kinds.  */\n \n-static\n-void init_c_interop_kinds (void)\n+void\n+gfc_init_c_interop_kinds (void)\n {\n   int i;\n \n@@ -316,11 +316,11 @@ void init_c_interop_kinds (void)\n   strncpy (c_interop_kinds_table[a].name, b, strlen(b) + 1); \\\n   c_interop_kinds_table[a].f90_type = BT_INTEGER; \\\n   c_interop_kinds_table[a].value = c;\n-#define NAMED_REALCST(a,b,c) \\\n+#define NAMED_REALCST(a,b,c,d) \\\n   strncpy (c_interop_kinds_table[a].name, b, strlen(b) + 1); \\\n   c_interop_kinds_table[a].f90_type = BT_REAL; \\\n   c_interop_kinds_table[a].value = c;\n-#define NAMED_CMPXCST(a,b,c) \\\n+#define NAMED_CMPXCST(a,b,c,d) \\\n   strncpy (c_interop_kinds_table[a].name, b, strlen(b) + 1); \\\n   c_interop_kinds_table[a].f90_type = BT_COMPLEX; \\\n   c_interop_kinds_table[a].value = c;\n@@ -584,11 +584,9 @@ gfc_init_kinds (void)\n   /* Choose atomic kinds to match C's int.  */\n   gfc_atomic_int_kind = gfc_c_int_kind;\n   gfc_atomic_logical_kind = gfc_c_int_kind;\n-\n-  /* initialize the C interoperable kinds  */\n-  init_c_interop_kinds();\n }\n \n+\n /* Make sure that a valid kind is present.  Returns an index into the\n    associated kinds array, -1 if the kind is not present.  */\n "}, {"sha": "2ab94b3f1848a6c4ad98a7139451f663e26b2b8c", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -58,6 +58,7 @@ void gfc_convert_function_code (gfc_namespace *);\n /* trans-types.c */\n void gfc_init_kinds (void);\n void gfc_init_types (void);\n+void gfc_init_c_interop_kinds (void);\n \n tree gfc_get_int_type (int);\n tree gfc_get_real_type (int);"}, {"sha": "c5717feed4c31047d5042d37f6e52b49204cb1fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -1,3 +1,9 @@\n+2011-10-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/iso_c_binding_param_1.f90: New.\n+\t* gfortran.dg/iso_c_binding_param_2.f90: New.\n+\t* gfortran.dg/c_sizeof_2.f90: Update dg-error.\n+\n 2011-10-09  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/50635"}, {"sha": "e3911facf6a158df78e4072787215829ff78b991", "filename": "gcc/testsuite/gfortran.dg/c_sizeof_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -2,7 +2,7 @@\n ! { dg-options \"-std=f2003 -Wall -Wno-conversion\" }\n ! Support F2008's c_sizeof()\n !\n-USE ISO_C_BINDING, only: C_SIZE_T, c_sizeof ! { dg-error \"new in Fortran 2008\" }\n+USE ISO_C_BINDING, only: C_SIZE_T, c_sizeof ! { dg-error \"is not in the selected standard\" }\n integer(C_SIZE_T) :: i\n i = c_sizeof(i)           \n end"}, {"sha": "dae9cc3703f9f820a146ade74c9af1681d4ccc8f", "filename": "gcc/testsuite/gfortran.dg/iso_c_binding_param_1.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_param_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_param_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_param_1.f90?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! Check that the GNU additions to ISO_C_Binding are properly diagnosed\n+!\n+use, intrinsic :: iso_c_binding, only: c_int128_t ! { dg-error \"is not in the selected standard\" }\n+use, intrinsic :: iso_c_binding, only: c_int_least128_t ! { dg-error \"is not in the selected standard\" }\n+use, intrinsic :: iso_c_binding, only: c_int_fast128_t ! { dg-error \"is not in the selected standard\" }\n+use, intrinsic :: iso_c_binding, only: c_float128 ! { dg-error \"is not in the selected standard\" }\n+use, intrinsic :: iso_c_binding, only: c_float128_complex ! { dg-error \"is not in the selected standard\" }\n+implicit none\n+end"}, {"sha": "7b78743452a0e9e72cc1eb14ba732106f7735c0b", "filename": "gcc/testsuite/gfortran.dg/iso_c_binding_param_2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_param_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0b595667285b8d95e5dd024f76b365f60ade8/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_param_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_param_2.f90?ref=28d0b595667285b8d95e5dd024f76b365f60ade8", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fdump-tree-optimized\" }\n+!\n+! Check that the GNU additions to ISO_C_Binding are accepted\n+!\n+use, intrinsic :: iso_c_binding, only: c_int128_t\n+use, intrinsic :: iso_c_binding, only: c_int_least128_t\n+use, intrinsic :: iso_c_binding, only: c_int_fast128_t\n+use, intrinsic :: iso_c_binding, only: c_float128\n+use, intrinsic :: iso_c_binding, only: c_float128_complex\n+implicit none\n+if (c_int128_t         >= 0 .and. c_int128_t         /= 16) call unreachable()\n+if (c_int_least128_t   >= 0 .and. c_int_least128_t   <  16) call unreachable()\n+if (c_int_fast128_t    >= 0 .and. c_int_fast128_t    <  16) call unreachable()\n+if (c_float128         >= 0 .and. c_float128         /= 16) call unreachable()\n+if (c_float128_complex >= 0 .and. c_float128_complex /= 16) call unreachable()\n+end\n+\n+! { dg-final { scan-tree-dump-times \"unreachable\" 0 \"optimized\" } }\n+! { dg-final { cleanup-tree-dump \"optimized\" } }"}]}