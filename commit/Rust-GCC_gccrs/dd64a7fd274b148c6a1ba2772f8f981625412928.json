{"sha": "dd64a7fd274b148c6a1ba2772f8f981625412928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2NGE3ZmQyNzRiMTQ4YzZhMWJhMjc3MmY4Zjk4MTYyNTQxMjkyOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2020-07-20T01:17:04Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2020-07-20T01:17:04Z"}, "message": "mmix: When debug-dump, revert to \"standard\" pseudos for emitting integers\n\nThe sole purpose of not providing pseudos and forcing use of\nTARGET_ASM_INTEGER is to arrange for assembly output that people can,\ninstead of using gas, usefullt feed to mmixal (Knuth's assembler).  It\nuses pseudos with slightly different semantics (BYTE, WYDE, TETRA,\nOCTA).  Nice when it works, but that only happens for limited\nuse-cases and debug-information is excluded.\n\nThe dwarf2out.c shortcuts, looking up the pseudo-strings and doing the\noutput on its own, has the result that in absence of such\ninteger-emitting pseudos, the target TARGET_ASM_INTEGER hook is\ncalled, which by definition outputs a newline, and then the\ndwarf2out.c code redundantly adds another.  That uglifies output and\nbreaks the expectations of the dwarf2 parts of the test-suite.\n\nThe wart by which an extra newline is emitted is ripe for a cleanup,\nand I started out thinking I'd add a default argument for emitting a\nnewline to the assemble_integer family of functions, but then\nreconsidered.  I also can't bring myself to use different pseudos\nwith/without -g so instead I check for options for the more detailed\ndumps, as used by the test-suite to get those DW_* strings in detailed\nassembly output.\n\nThis eliminates all FAILs in the dwarf2-specific parts of the gcc\ntest-suite for mmix-knuth-mmixware, with no regressions.  Committed.\n\ngcc:\n\t* config/mmix/mmix.c (mmix_option_override): Reinstate default\n\tinteger-emitting targetm.asm_out pseudos when dumping detailed\n\tassembly-code.\n\t(mmix_assemble_integer): Update comment.", "tree": {"sha": "68a5491bd4feb5795d120ff1ab119985b68371a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a5491bd4feb5795d120ff1ab119985b68371a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd64a7fd274b148c6a1ba2772f8f981625412928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd64a7fd274b148c6a1ba2772f8f981625412928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd64a7fd274b148c6a1ba2772f8f981625412928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd64a7fd274b148c6a1ba2772f8f981625412928/comments", "author": null, "committer": null, "parents": [{"sha": "5154dab3da6401c6d7a875fd0a4a6ba9d25835d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5154dab3da6401c6d7a875fd0a4a6ba9d25835d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5154dab3da6401c6d7a875fd0a4a6ba9d25835d5"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "66e3d585a0a20c7684907452e2f357c99b66445e", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd64a7fd274b148c6a1ba2772f8f981625412928/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd64a7fd274b148c6a1ba2772f8f981625412928/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=dd64a7fd274b148c6a1ba2772f8f981625412928", "patch": "@@ -318,6 +318,32 @@ mmix_option_override (void)\n \t       (flag_pic > 1) ? \"PIC\" : \"pic\");\n       flag_pic = 0;\n     }\n+\n+  /* Don't bother with mmixal-compatible syntax if it's likely that a\n+     certain format of the assembly is expected, like no new-line\n+     after the .byte (or BYTE) parameter, when scanning debug-info\n+     output, as happens in many places in the gcc testsuite.  The\n+     dwarf2 output code (maybe others) takes a shortcut based on the\n+     presence of certain assembler directives, instead of calling\n+     assemble_integer.  Not worthwhile editing the test-cases:\n+     mixed-syntax assembly output already looks too ugly for the\n+     intent of being readable, and the resulting mix certainly fails\n+     the intent of being compatible with mmixal.  See\n+     varasm.c:default_file_start for this triple.  See also\n+     mmix_assemble_integer.  */\n+  if (flag_verbose_asm || flag_debug_asm || flag_dump_rtl_in_asm)\n+    {\n+      /* \"Reinstate\" the defaults from target-def.h that we\n+\t overrode.  */\n+      targetm.asm_out.byte_op = \"\\t.byte\\t\";\n+      targetm.asm_out.aligned_op.hi = \"\\t.short\\t\";\n+      targetm.asm_out.aligned_op.si = \"\\t.long\\t\";\n+\n+      /* Note that TARGET_ASM_ALIGNED_DI_OP is default NULL, so\n+\t there's nothing to \"reinstate\".  Still, we add the universal\n+\t default (with \"recent\" gas) for an address.  */\n+      targetm.asm_out.aligned_op.di = \"\\t.dc.a\\t\";\n+    }\n }\n \n /* INIT_EXPANDERS.  */\n@@ -1379,10 +1405,11 @@ mmix_assemble_integer (rtx x, unsigned int size, int aligned_p)\n \t   that's ok, because we can punt to generic functions.  We then\n \t   pretend that aligned data isn't needed, so the usual .<pseudo>\n \t   syntax is used (which works for aligned data too).  We actually\n-\t   *must* do that, since we say we don't have simple aligned\n-\t   pseudos, causing this function to be called.  We just try and\n-\t   keep as much compatibility as possible with mmixal syntax for\n-\t   normal cases (i.e. without GNU extensions and C only).  */\n+\t   *must* do that, since we (usually) say we don't have simple aligned\n+\t   pseudos, causing this function to be called.  See\n+\t   mmix_option_override for an exception.  We just try and keep as\n+\t   much compatibility as possible with mmixal syntax for normal\n+\t   cases (i.e. without GNU extensions and C only).  */\n       case 1:\n \tif (GET_CODE (x) != CONST_INT)\n \t  {"}]}