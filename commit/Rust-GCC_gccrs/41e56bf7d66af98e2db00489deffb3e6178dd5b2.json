{"sha": "41e56bf7d66af98e2db00489deffb3e6178dd5b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlNTZiZjdkNjZhZjk4ZTJkYjAwNDg5ZGVmZmIzZTYxNzhkZDViMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-02-20T21:22:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-02-20T21:22:35Z"}, "message": "PR libstdc++/28080 (partial)\n\n2007-02-20  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28080 (partial)\n\t* include/tr1/functional: Split out hash bits to...\n\t* include/tr1/functional_hash.h: ...here.\n\t* include/Makefile.am: Add.\n\t* include/tr1/unordered_set: Include the latter instead.\n\t* include/tr1/unordered_map: Likewise.\n\t* include/tr1/random: Do not include the whole <algorithm>,\n\tstl_algobase.h is enough.\n\t* include/tr1/memory: Likewise.\n\t* include/Makefile.in: Regenerate.\n\n\t* include/tr1/utility (get(std::pair<>&), get(const std::pair<>&)):\n\tMark inline.\n\nFrom-SVN: r122175", "tree": {"sha": "8fcda809ebe9bfdcbac27d41929abfed4fe56d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fcda809ebe9bfdcbac27d41929abfed4fe56d3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e56bf7d66af98e2db00489deffb3e6178dd5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e56bf7d66af98e2db00489deffb3e6178dd5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e56bf7d66af98e2db00489deffb3e6178dd5b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e56bf7d66af98e2db00489deffb3e6178dd5b2/comments", "author": null, "committer": null, "parents": [{"sha": "f05e2819afcf3435618010ee2a79576fd77d00d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05e2819afcf3435618010ee2a79576fd77d00d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05e2819afcf3435618010ee2a79576fd77d00d7"}], "stats": {"total": 491, "additions": 274, "deletions": 217}, "files": [{"sha": "ba0a40b31f1e92df784ba1c5ebfd625d595233cb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,3 +1,19 @@\n+2007-02-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28080 (partial)\n+\t* include/tr1/functional: Split out hash bits to...\n+\t* include/tr1/functional_hash.h: ...here.\n+\t* include/Makefile.am: Add.\n+\t* include/tr1/unordered_set: Include the latter instead.\n+\t* include/tr1/unordered_map: Likewise.\n+\t* include/tr1/random: Do not include the whole <algorithm>,\n+\tstl_algobase.h is enough.\n+\t* include/tr1/memory: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* include/tr1/utility (get(std::pair<>&), get(const std::pair<>&)):\n+\tMark inline.\n+\n 2007-02-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tDirectory layout flattening."}, {"sha": "43c9f8ca3f86505086c84be41bc7b3aa086ed7f1", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the include subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+## Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n@@ -549,6 +549,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/fenv.h \\\n \t${tr1_srcdir}/float.h \\\n \t${tr1_srcdir}/functional \\\n+\t${tr1_srcdir}/functional_hash.h \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/hashtable \\\n \t${tr1_srcdir}/hashtable_policy.h \\"}, {"sha": "17e949b9166f7118593a60d63e1235167f6e4b83", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -774,6 +774,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/fenv.h \\\n \t${tr1_srcdir}/float.h \\\n \t${tr1_srcdir}/functional \\\n+\t${tr1_srcdir}/functional_hash.h \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/hashtable \\\n \t${tr1_srcdir}/hashtable_policy.h \\"}, {"sha": "f3cc78de75167a450c9e118414a01f1e7b531fe0", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 3, "deletions": 196, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n // TR1 functional header -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,9 +40,7 @@\n #include <typeinfo>\n #include <tr1/type_traits>\n #include <ext/type_traits.h>\n-#include <string>               // for std::tr1::hash\n-#include <cstdlib>              // for std::abort\n-#include <cmath>                // for std::frexp\n+#include <cstdlib>  // for std::abort\n #include <tr1/tuple>\n \n namespace std\n@@ -1093,7 +1091,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n _GLIBCXX_END_NAMESPACE\n }\n \n-\n #define _GLIBCXX_JOIN(X,Y) _GLIBCXX_JOIN2( X , Y )\n #define _GLIBCXX_JOIN2(X,Y) _GLIBCXX_JOIN3(X,Y)\n #define _GLIBCXX_JOIN3(X,Y) X##Y\n@@ -1104,196 +1101,6 @@ _GLIBCXX_END_NAMESPACE\n #undef _GLIBCXX_JOIN2\n #undef _GLIBCXX_JOIN\n \n-\n-namespace std\n-{\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n-\n-  // Definition of default hash function std::tr1::hash<>.  The types for\n-  // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.\n-  template<typename T>\n-    struct hash;\n-\n-#define _TR1_hashtable_define_trivial_hash(_Tp)         \\\n-  template<>                                            \\\n-    struct hash<_Tp>                                    \\\n-    : public std::unary_function<_Tp, std::size_t>      \\\n-    {                                                   \\\n-      std::size_t                                       \\\n-      operator()(_Tp __val) const                       \\\n-      { return static_cast<std::size_t>(__val); }       \\\n-    }                                                     \n-\n-  _TR1_hashtable_define_trivial_hash(bool);\n-  _TR1_hashtable_define_trivial_hash(char);\n-  _TR1_hashtable_define_trivial_hash(signed char);\n-  _TR1_hashtable_define_trivial_hash(unsigned char);\n-  _TR1_hashtable_define_trivial_hash(wchar_t);\n-  _TR1_hashtable_define_trivial_hash(short);\n-  _TR1_hashtable_define_trivial_hash(int);\n-  _TR1_hashtable_define_trivial_hash(long);\n-  _TR1_hashtable_define_trivial_hash(long long);\n-  _TR1_hashtable_define_trivial_hash(unsigned short);\n-  _TR1_hashtable_define_trivial_hash(unsigned int);\n-  _TR1_hashtable_define_trivial_hash(unsigned long);\n-  _TR1_hashtable_define_trivial_hash(unsigned long long);\n-\n-#undef _TR1_hashtable_define_trivial_hash\n-\n-  template<typename _Tp>\n-    struct hash<_Tp*>\n-    : public std::unary_function<_Tp*, std::size_t>\n-    {\n-      std::size_t\n-      operator()(_Tp* __p) const\n-      { return reinterpret_cast<std::size_t>(__p); }\n-    };\n-\n-  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n-  // (used by the next specializations of std::tr1::hash<>)\n-\n-  // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n-  template<std::size_t = sizeof(std::size_t)>\n-    struct _Fnv_hash\n-    {\n-      static std::size_t\n-      hash(const char* __first, std::size_t __length)\n-      {\n-\tstd::size_t __result = 0;\n-\tfor (; __length > 0; --__length)\n-\t  __result = (__result * 131) + *__first++;\n-\treturn __result;\n-      }\n-    };\n-\n-  template<>\n-    struct _Fnv_hash<4>\n-    {\n-      static std::size_t\n-      hash(const char* __first, std::size_t __length)\n-      {\n-\tstd::size_t __result = static_cast<std::size_t>(2166136261UL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= (std::size_t)*__first++;\n-\t    __result *= 16777619UL;\n-\t  }\n-\treturn __result;\n-      }\n-    };\n-  \n-  template<>\n-    struct _Fnv_hash<8>\n-    {\n-      static std::size_t\n-      hash(const char* __first, std::size_t __length)\n-      {\n-\tstd::size_t __result =\n-\t  static_cast<std::size_t>(14695981039346656037ULL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= (std::size_t)*__first++;\n-\t    __result *= 1099511628211ULL;\n-\t  }\n-\treturn __result;\n-      }\n-    };\n-\n-  // XXX String and floating point hashes probably shouldn't be inline\n-  // member functions, since are nontrivial.  Once we have the framework\n-  // for TR1 .cc files, these should go in one.\n-  template<>\n-    struct hash<std::string>\n-    : public std::unary_function<std::string, std::size_t>\n-    {      \n-      std::size_t\n-      operator()(const std::string& __s) const\n-      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n-    };\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    struct hash<std::wstring>\n-    : public std::unary_function<std::wstring, std::size_t>\n-    {\n-      std::size_t\n-      operator()(const std::wstring& __s) const\n-      {\n-\treturn _Fnv_hash<>::hash(reinterpret_cast<const char*>(__s.data()),\n-\t\t\t\t __s.length() * sizeof(wchar_t));\n-      }\n-    };\n-#endif\n-\n-  template<>\n-    struct hash<float>\n-    : public std::unary_function<float, std::size_t>\n-    {\n-      std::size_t\n-      operator()(float __fval) const\n-      {\n-\tstd::size_t __result = 0;\n-\n-\t// 0 and -0 both hash to zero.\n-\tif (__fval != 0.0f)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__fval),\n-\t\t\t\t       sizeof(__fval));\n-\treturn __result;\n-      }\n-    };\n-\n-  template<>\n-    struct hash<double>\n-    : public std::unary_function<double, std::size_t>\n-    {\n-      std::size_t\n-      operator()(double __dval) const\n-      {\n-\tstd::size_t __result = 0;\n-\n-\t// 0 and -0 both hash to zero.\n-\tif (__dval != 0.0)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__dval),\n-\t\t\t\t       sizeof(__dval));\n-\treturn __result;\n-      }\n-    };\n-\n-  // For long double, careful with random padding bits (e.g., on x86,\n-  // 10 bytes -> 12 bytes) and resort to frexp.\n-  template<>\n-    struct hash<long double>\n-    : public std::unary_function<long double, std::size_t>\n-    {\n-      std::size_t\n-      operator()(long double __ldval) const\n-      {\n-\tstd::size_t __result = 0;\n-\n-\tint __exponent;\n-\t__ldval = std::frexp(__ldval, &__exponent);\n-\t__ldval = __ldval < 0.0l ? -(__ldval + 0.5l) : __ldval;\n-\n-\tconst long double __mult =\n-\t  std::numeric_limits<std::size_t>::max() + 1.0l;\n-\t__ldval *= __mult;\n-\n-\t// Try to use all the bits of the mantissa (really necessary only\n-\t// on 32-bit targets, at least for 80-bit floating point formats).\n-\tconst std::size_t __hibits = (std::size_t)__ldval;\n-\t__ldval = (__ldval - (long double)__hibits) * __mult;\n-\n-\tconst std::size_t __coeff =\n-\t  (std::numeric_limits<std::size_t>::max()\n-\t   / std::numeric_limits<long double>::max_exponent);\n-\n-\t__result = __hibits + (std::size_t)__ldval + __coeff * __exponent;\n-\n-\treturn __result;\n-      }\n-    };\n-\n-_GLIBCXX_END_NAMESPACE\n-}\n+#include <tr1/functional_hash.h>\n \n #endif"}, {"sha": "3e592b45ab7bad99b26807cfea9a3af07624fcf3", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -0,0 +1,232 @@\n+// TR1 functional -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file tr1/functional_hash.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _TR1_FUNCTIONAL_HASH_H\n+#define _TR1_FUNCTIONAL_HASH_H 1\n+\n+#include <string>\n+#include <cmath>  // for std::frexp\n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  // Definition of default hash function std::tr1::hash<>.  The types for\n+  // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.\n+  template<typename T>\n+    struct hash;\n+\n+#define _TR1_hashtable_define_trivial_hash(_Tp)         \\\n+  template<>                                            \\\n+    struct hash<_Tp>                                    \\\n+    : public std::unary_function<_Tp, std::size_t>      \\\n+    {                                                   \\\n+      std::size_t                                       \\\n+      operator()(_Tp __val) const                       \\\n+      { return static_cast<std::size_t>(__val); }       \\\n+    }                                                     \n+\n+  _TR1_hashtable_define_trivial_hash(bool);\n+  _TR1_hashtable_define_trivial_hash(char);\n+  _TR1_hashtable_define_trivial_hash(signed char);\n+  _TR1_hashtable_define_trivial_hash(unsigned char);\n+  _TR1_hashtable_define_trivial_hash(wchar_t);\n+  _TR1_hashtable_define_trivial_hash(short);\n+  _TR1_hashtable_define_trivial_hash(int);\n+  _TR1_hashtable_define_trivial_hash(long);\n+  _TR1_hashtable_define_trivial_hash(long long);\n+  _TR1_hashtable_define_trivial_hash(unsigned short);\n+  _TR1_hashtable_define_trivial_hash(unsigned int);\n+  _TR1_hashtable_define_trivial_hash(unsigned long);\n+  _TR1_hashtable_define_trivial_hash(unsigned long long);\n+\n+#undef _TR1_hashtable_define_trivial_hash\n+\n+  template<typename _Tp>\n+    struct hash<_Tp*>\n+    : public std::unary_function<_Tp*, std::size_t>\n+    {\n+      std::size_t\n+      operator()(_Tp* __p) const\n+      { return reinterpret_cast<std::size_t>(__p); }\n+    };\n+\n+  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n+  // (used by the next specializations of std::tr1::hash<>)\n+\n+  // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n+  template<std::size_t = sizeof(std::size_t)>\n+    struct _Fnv_hash\n+    {\n+      static std::size_t\n+      hash(const char* __first, std::size_t __length)\n+      {\n+\tstd::size_t __result = 0;\n+\tfor (; __length > 0; --__length)\n+\t  __result = (__result * 131) + *__first++;\n+\treturn __result;\n+      }\n+    };\n+\n+  template<>\n+    struct _Fnv_hash<4>\n+    {\n+      static std::size_t\n+      hash(const char* __first, std::size_t __length)\n+      {\n+\tstd::size_t __result = static_cast<std::size_t>(2166136261UL);\n+\tfor (; __length > 0; --__length)\n+\t  {\n+\t    __result ^= static_cast<std::size_t>(*__first++);\n+\t    __result *= static_cast<std::size_t>(16777619UL);\n+\t  }\n+\treturn __result;\n+      }\n+    };\n+  \n+  template<>\n+    struct _Fnv_hash<8>\n+    {\n+      static std::size_t\n+      hash(const char* __first, std::size_t __length)\n+      {\n+\tstd::size_t __result =\n+\t  static_cast<std::size_t>(14695981039346656037ULL);\n+\tfor (; __length > 0; --__length)\n+\t  {\n+\t    __result ^= static_cast<std::size_t>(*__first++);\n+\t    __result *= static_cast<std::size_t>(1099511628211ULL);\n+\t  }\n+\treturn __result;\n+      }\n+    };\n+\n+  // XXX String and floating point hashes probably shouldn't be inline\n+  // member functions, since are nontrivial.  Once we have the framework\n+  // for TR1 .cc files, these should go in one.\n+  template<>\n+    struct hash<std::string>\n+    : public std::unary_function<std::string, std::size_t>\n+    {      \n+      std::size_t\n+      operator()(const std::string& __s) const\n+      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+    };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct hash<std::wstring>\n+    : public std::unary_function<std::wstring, std::size_t>\n+    {\n+      std::size_t\n+      operator()(const std::wstring& __s) const\n+      {\n+\treturn _Fnv_hash<>::hash(reinterpret_cast<const char*>(__s.data()),\n+\t\t\t\t __s.length() * sizeof(wchar_t));\n+      }\n+    };\n+#endif\n+\n+  template<>\n+    struct hash<float>\n+    : public std::unary_function<float, std::size_t>\n+    {\n+      std::size_t\n+      operator()(float __fval) const\n+      {\n+\tstd::size_t __result = 0;\n+\n+\t// 0 and -0 both hash to zero.\n+\tif (__fval != 0.0f)\n+\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__fval),\n+\t\t\t\t       sizeof(__fval));\n+\treturn __result;\n+      }\n+    };\n+\n+  template<>\n+    struct hash<double>\n+    : public std::unary_function<double, std::size_t>\n+    {\n+      std::size_t\n+      operator()(double __dval) const\n+      {\n+\tstd::size_t __result = 0;\n+\n+\t// 0 and -0 both hash to zero.\n+\tif (__dval != 0.0)\n+\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__dval),\n+\t\t\t\t       sizeof(__dval));\n+\treturn __result;\n+      }\n+    };\n+\n+  // For long double, careful with random padding bits (e.g., on x86,\n+  // 10 bytes -> 12 bytes) and resort to frexp.\n+  template<>\n+    struct hash<long double>\n+    : public std::unary_function<long double, std::size_t>\n+    {\n+      std::size_t\n+      operator()(long double __ldval) const\n+      {\n+\tstd::size_t __result = 0;\n+\n+\tint __exponent;\n+\t__ldval = std::frexp(__ldval, &__exponent);\n+\t__ldval = __ldval < 0.0l ? -(__ldval + 0.5l) : __ldval;\n+\n+\tconst long double __mult =\n+\t  std::numeric_limits<std::size_t>::max() + 1.0l;\n+\t__ldval *= __mult;\n+\n+\t// Try to use all the bits of the mantissa (really necessary only\n+\t// on 32-bit targets, at least for 80-bit floating point formats).\n+\tconst std::size_t __hibits = (std::size_t)__ldval;\n+\t__ldval = (__ldval - (long double)__hibits) * __mult;\n+\n+\tconst std::size_t __coeff =\n+\t  (std::numeric_limits<std::size_t>::max()\n+\t   / std::numeric_limits<long double>::max_exponent);\n+\n+\t__result = __hibits + (std::size_t)__ldval + __coeff * __exponent;\n+\n+\treturn __result;\n+      }\n+    };\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif"}, {"sha": "0df7b9d7370b092e8df0d56899c807afa2fd4840", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n // <tr1/memory> -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,14 +36,14 @@\n #define _TR1_MEMORY 1\n \n #include \"../memory\"\n-#include <functional>       // std::less\n-#include <exception>        // std::exception\n-#include <new>              // std::bad_alloc\n-#include <typeinfo>         // std::type_info in get_deleter\n-#include <cstddef>          // std::size_t\n-#include <algorithm>        // std::swap\n-#include <iosfwd>           // std::basic_ostream\n-#include <cstdlib>          // std::abort\n+#include <functional>           // std::less\n+#include <exception>            // std::exception\n+#include <new>                  // std::bad_alloc\n+#include <typeinfo>             // std::type_info in get_deleter\n+#include <cstddef>              // std::size_t\n+#include <bits/stl_algobase.h>  // std::swap\n+#include <iosfwd>               // std::basic_ostream\n+#include <cstdlib>              // std::abort\n \n #include <ext/atomicity.h>\n #include <ext/concurrence.h>"}, {"sha": "02a7ae7bc858b9bf48534ac33e1229ad73e4b2e1", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,7 @@\n #ifndef _TR1_RANDOM\n #define _TR1_RANDOM 1\n \n-#include <algorithm>\n+#include <bits/stl_algobase.h>\n #include <bits/concept_check.h>\n #include <cmath>\n #include <debug/debug.h>"}, {"sha": "d613d156ef1efad2f3cafa4342f2dfc26db7a51d", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n // TR1 unordered_map -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,7 @@\n #define _TR1_UNORDERED_MAP 1\n \n #include <tr1/hashtable>\n-#include <tr1/functional>\n+#include <tr1/functional_hash.h>\n \n namespace std\n {"}, {"sha": "a01b89b3af8fa5b5d5f16f949181d39a1c328c68", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n // TR1 unordered_set -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,7 @@\n #define _TR1_UNORDERED_SET 1\n \n #include <tr1/hashtable>\n-#include <tr1/functional>\n+#include <tr1/functional_hash.h>\n \n namespace std\n { "}, {"sha": "93e00eb3c945f6f1f876e02882faebd7be6d6454", "filename": "libstdc++-v3/include/tr1/utility", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e56bf7d66af98e2db00489deffb3e6178dd5b2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility?ref=41e56bf7d66af98e2db00489deffb3e6178dd5b2", "patch": "@@ -1,6 +1,6 @@\n // TR1 utility -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -87,13 +87,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     };\n \n    template<int _Int, class _Tp1, class _Tp2>\n-     typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n-     get(pair<_Tp1, _Tp2>& __in)\n+     inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n+     get(std::pair<_Tp1, _Tp2>& __in)\n      { return __pair_get<_Int>::__get(__in); }\n  \n    template<int _Int, class _Tp1, class _Tp2>\n-     const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n-     get(const pair<_Tp1, _Tp2>& __in)\n+     inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n+     get(const std::pair<_Tp1, _Tp2>& __in)\n      { return __pair_get<_Int>::__const_get(__in); }\n \n _GLIBCXX_END_NAMESPACE"}]}