{"sha": "4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwMmIzOGY2YWIxN2E0OWQ5ZjZhNjgxYjFmZWZiODljMTIzMDRkOQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-16T16:44:47Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-16T16:44:47Z"}, "message": "Allow bool and char to be cast as any integer type\n\nbools and chars can be cast to any integer type, but not to floats or\neach other. Adjust the BoolCastRule and CharCastRule to allow these\ncasts. Add a postive test \"as_bool_char.rs\" and negative test\n\"bad_as_bool_char.rs\" to check the correct casts are accepted and the\nillegal casts produce errors.\n\nResolves: https://github.com/Rust-GCC/gccrs/issues/629", "tree": {"sha": "8457babd13a32a3be52c049149978034e4892345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8457babd13a32a3be52c049149978034e4892345"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/comments", "author": null, "committer": null, "parents": [{"sha": "52c1cdc9c63baeb090680daf6762c02362f2c6cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1cdc9c63baeb090680daf6762c02362f2c6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c1cdc9c63baeb090680daf6762c02362f2c6cd"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "c457931b17f12b23c0123e71247cd140059b5627", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "patch": "@@ -779,6 +779,12 @@ class BoolCastRules : public BaseCastRules\n       }\n   }\n \n+  /* bools can be cast to any integer type (but not floats or chars).  */\n+  void visit (IntType &type) override { resolved = type.clone (); }\n+  void visit (UintType &type) override { resolved = type.clone (); }\n+  void visit (USizeType &type) override { resolved = type.clone (); }\n+  void visit (ISizeType &type) override { resolved = type.clone (); }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1078,6 +1084,12 @@ class CharCastRules : public BaseCastRules\n \n   void visit (CharType &type) override { resolved = type.clone (); }\n \n+  /* chars can be cast to any integer type (but not floats or bools).  */\n+  void visit (IntType &type) override { resolved = type.clone (); }\n+  void visit (UintType &type) override { resolved = type.clone (); }\n+  void visit (USizeType &type) override { resolved = type.clone (); }\n+  void visit (ISizeType &type) override { resolved = type.clone (); }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}, {"sha": "91a28eebe008286538062996559bb54875e74b77", "filename": "gcc/testsuite/rust/compile/bad_as_bool_char.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs?ref=4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "patch": "@@ -0,0 +1,18 @@\n+pub fn main ()\n+{\n+  let t = true;\n+  let f = false;\n+  let fone = t as f32;   // { dg-error \"invalid cast\" }\n+  let fzero = f as f64;  // { dg-error \"invalid cast\" }\n+\n+  let nb = 0u8 as bool;  // { dg-error \"invalid cast\" }\n+  let nc = true as char; // { dg-error \"invalid cast\" }\n+\n+  let a = 'a';\n+  let b = 'b';\n+  let fa = a as f32;     // { dg-error \"invalid cast\" }\n+  let bb = b as bool;    // { dg-error \"invalid cast\" }\n+\n+  let t32: u32 = 33;\n+  let ab = t32 as char;  // { dg-error \"invalid cast\" }\n+}"}, {"sha": "d687499384a4658db3c77a33ee303b3b62cd7748", "filename": "gcc/testsuite/rust/compile/torture/as_bool_char.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs?ref=4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "patch": "@@ -0,0 +1,36 @@\n+extern \"C\" { fn abort (); }\n+\n+pub fn main ()\n+{\n+  let t = true;\n+  let f = false;\n+  let one = t as u8;\n+  let zero = f as u8;\n+\n+  if one != 1 || zero != 0 { unsafe { abort (); } }\n+\n+  let isizeone = true as isize;\n+  let usizezero = false as usize;\n+\n+  if isizeone != 1 || usizezero != 0 { unsafe { abort (); } }\n+\n+  let i32zero = f as i32;\n+  let u128one = t as u128;\n+\n+  if u128one != 1 || i32zero != 0 { unsafe { abort (); } }\n+\n+  let a = 'a';\n+  let b = 'b';\n+  let ua = a as u8;\n+  let ib = b as i32;\n+\n+  if (ua + 1) as i32 != ib { unsafe { abort (); } }\n+\n+  let tt = ua;\n+  let aa = tt as char;\n+\n+  let ttt = tt + 1;\n+  let ab = ttt as char;\n+\n+  if aa != 'a' || ab != 'b' { unsafe { abort (); } }\n+}"}]}