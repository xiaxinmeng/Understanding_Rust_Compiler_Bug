{"sha": "23644e8ccb2805095f85da6c198d809341f730b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2NDRlOGNjYjI4MDUwOTVmODVkYTZjMTk4ZDgwOTM0MWY3MzBiNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-12-05T09:51:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-12-05T09:51:11Z"}, "message": "decl.c (duplicate_decls): Replace pairs of errors and permerrors with error + inform (permerror + inform...\n\n/cp\n2013-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (duplicate_decls): Replace pairs of errors and permerrors\n\twith error + inform (permerror + inform, respectively).\n\n/testsuite\n2013-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/constexpr-46336.C: Adjust expected messages.\n\t* g++.dg/cpp0x/defaulted2.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn8.C: Likewise.\n\t* g++.dg/gomp/udr-3.C: Likewise.\n\t* g++.dg/lookup/extern-c-redecl5.C: Likewise.\n\t* g++.dg/lookup/linkage1.C: Likewise.\n\t* g++.dg/overload/new1.C: Likewise.\n\t* g++.dg/parse/friend5.C: Likewise.\n\t* g++.dg/parse/namespace-alias-1.C: Likewise.\n\t* g++.dg/parse/namespace10.C: Likewise.\n\t* g++.dg/parse/redef2.C: Likewise.\n\t* g++.dg/template/friend44.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash42.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash52.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash55.C: Likewise.\n\t* g++.old-deja/g++.jason/overload21.C: Likewise.\n\t* g++.old-deja/g++.jason/overload5.C: Likewise.\n\t* g++.old-deja/g++.jason/redecl1.C: Likewise.\n\t* g++.old-deja/g++.law/arm8.C: Likewise.\n\t* g++.old-deja/g++.other/main1.C: Likewise.\n\nFrom-SVN: r205697", "tree": {"sha": "7c7d1d4feeb566fbce7696663f4f2da9cf9439da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7d1d4feeb566fbce7696663f4f2da9cf9439da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23644e8ccb2805095f85da6c198d809341f730b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23644e8ccb2805095f85da6c198d809341f730b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23644e8ccb2805095f85da6c198d809341f730b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23644e8ccb2805095f85da6c198d809341f730b7/comments", "author": null, "committer": null, "parents": [{"sha": "fd9cf409e318d02502a84f87d142a01d964d0d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9cf409e318d02502a84f87d142a01d964d0d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9cf409e318d02502a84f87d142a01d964d0d39"}], "stats": {"total": 189, "additions": 112, "deletions": 77}, "files": [{"sha": "2d5617a35cc30887c30e07df0c4a4c162e9b088e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,3 +1,8 @@\n+2013-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (duplicate_decls): Replace pairs of errors and permerrors\n+\twith error + inform (permerror + inform, respectively).\n+\n 2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/52023"}, {"sha": "a6744c77cbafde0ee4836a69fc253bacfdfb3db8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 52, "deletions": 45, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1299,16 +1299,18 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  if (warning (OPT_Wattributes, \"function %q+D redeclared as inline\",\n \t\t       newdecl))\n-\t    inform (input_location, \"previous declaration of %q+D \"\n-\t\t    \"with attribute noinline\", olddecl);\n+\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t    \"previous declaration of %qD with attribute noinline\",\n+\t\t    olddecl);\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && DECL_UNINLINABLE (newdecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n \t  if (warning (OPT_Wattributes, \"function %q+D redeclared with \"\n \t\t       \"attribute noinline\", newdecl))\n-\t    inform (input_location, \"previous declaration of %q+D was inline\",\n+\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t    \"previous declaration of %qD was inline\",\n \t\t    olddecl);\n \t}\n     }\n@@ -1343,20 +1345,17 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    warning (0, \"library function %q#D redeclared as non-function %q#D\",\n \t\t     olddecl, newdecl);\n \t  else\n-\t    {\n-\t      error (\"declaration of %q#D\", newdecl);\n-\t      error (\"conflicts with built-in declaration %q#D\",\n-\t\t     olddecl);\n-\t    }\n+\t    error (\"declaration of %q#D conflicts with built-in \"\n+\t\t   \"declaration %q#D\", newdecl, olddecl);\n \t  return NULL_TREE;\n \t}\n       else if (DECL_OMP_DECLARE_REDUCTION_P (olddecl))\n \t{\n \t  gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (newdecl));\n \t  error_at (DECL_SOURCE_LOCATION (newdecl),\n \t\t    \"redeclaration of %<pragma omp declare reduction%>\");\n-\t  error_at (DECL_SOURCE_LOCATION (olddecl),\n-\t\t    \"previous %<pragma omp declare reduction%> declaration\");\n+\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t  \"previous %<pragma omp declare reduction%> declaration\");\n \t  return error_mark_node;\n \t}\n       else if (!types_match)\n@@ -1407,11 +1406,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      /* A near match; override the builtin.  */\n \n \t      if (TREE_PUBLIC (newdecl))\n-\t\t{\n-\t\t  warning (0, \"new declaration %q#D\", newdecl);\n-\t\t  warning (0, \"ambiguates built-in declaration %q#D\",\n-\t\t\t   olddecl);\n-\t\t}\n+\t\twarning (0, \"new declaration %q#D ambiguates built-in \"\n+\t\t\t \"declaration %q#D\", newdecl, olddecl);\n \t      else\n \t\twarning (OPT_Wshadow, \n                          DECL_BUILT_IN (olddecl)\n@@ -1504,7 +1500,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       error (\"%q#D redeclared as different kind of symbol\", newdecl);\n       if (TREE_CODE (olddecl) == TREE_LIST)\n \tolddecl = TREE_VALUE (olddecl);\n-      inform (input_location, \"previous declaration of %q+#D\", olddecl);\n+      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      \"previous declaration %q#D\", olddecl);\n \n       return error_mark_node;\n     }\n@@ -1523,8 +1520,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  if (TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == TYPE_DECL\n \t      || TREE_CODE (DECL_TEMPLATE_RESULT (newdecl)) == TYPE_DECL)\n \t    {\n-\t      error (\"declaration of template %q#D\", newdecl);\n-\t      error (\"conflicts with previous declaration %q+#D\", olddecl);\n+\t      error (\"conflicting declaration of template %q#D\", newdecl);\n+\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t      \"previous declaration %q#D\", olddecl);\n \t      return error_mark_node;\n \t    }\n \t  else if (TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == FUNCTION_DECL\n@@ -1538,18 +1536,20 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t   && same_type_p (TREE_TYPE (TREE_TYPE (newdecl)),\n \t\t\t\t   TREE_TYPE (TREE_TYPE (olddecl))))\n \t    {\n-\t      error (\"new declaration %q#D\", newdecl);\n-\t      error (\"ambiguates old declaration %q+#D\", olddecl);\n+\t      error (\"ambiguating new declaration %q#D\", newdecl);\n+\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t      \"old declaration %q#D\", olddecl);\n \t    }\n \t  return NULL_TREE;\n \t}\n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{\n \t  if (DECL_EXTERN_C_P (newdecl) && DECL_EXTERN_C_P (olddecl))\n \t    {\n-\t      error (\"declaration of C function %q#D conflicts with\",\n+\t      error (\"conflicting declaration of C function %q#D\",\n \t\t     newdecl);\n-\t      error (\"previous declaration %q+#D here\", olddecl);\n+\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t      \"previous declaration %q#D\", olddecl);\n \t      return NULL_TREE;\n \t    }\n \t  /* For function versions, params and types match, but they\n@@ -1559,8 +1559,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t   && compparms (TYPE_ARG_TYPES (TREE_TYPE (newdecl)),\n \t\t\t      TYPE_ARG_TYPES (TREE_TYPE (olddecl))))\n \t    {\n-\t      error (\"new declaration %q#D\", newdecl);\n-\t      error (\"ambiguates old declaration %q+#D\", olddecl);\n+\t      error (\"ambiguating new declaration of %q#D\", newdecl);\n+\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t      \"old declaration %q#D\", olddecl);\n               return error_mark_node;\n \t    }\n \t  else\n@@ -1569,8 +1570,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       else\n \t{\n \t  error (\"conflicting declaration %q#D\", newdecl);\n-\t  inform (input_location,\n-\t\t  \"%q+D has a previous declaration as %q#D\", olddecl, olddecl);\n+\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t  \"previous declaration as %q#D\", olddecl);\n \t  return error_mark_node;\n \t}\n     }\n@@ -1622,8 +1623,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t A namespace-name defined at global scope shall not be\n \t declared as the name of any other entity in any global scope\n \t of the program.  */\n-      error (\"declaration of namespace %qD conflicts with\", newdecl);\n-      error (\"previous declaration of namespace %q+D here\", olddecl);\n+      error (\"conflicting declaration of namespace %qD\", newdecl);\n+      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      \"previous declaration of namespace %qD here\", olddecl);\n       return error_mark_node;\n     }\n   else\n@@ -1645,9 +1647,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t       && prototype_p (TREE_TYPE (newdecl)))\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n-\t  warning_at (input_location, 0, \"prototype for %q+#D\", newdecl);\n-\t  warning_at (DECL_SOURCE_LOCATION (olddecl), 0,\n-\t\t      \"follows non-prototype definition here\");\n+\t  warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t\t      \"prototype specified for %q#D\", newdecl);\n+\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t  \"previous non-prototype definition here\");\n \t}\n       else if (VAR_OR_FUNCTION_DECL_P (olddecl)\n \t       && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl))\n@@ -1686,10 +1689,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    }\n \t  else\n \t    {\n-\t      error (\"previous declaration of %q+#D with %qL linkage\",\n-\t\t     olddecl, DECL_LANGUAGE (olddecl));\n-\t      error (\"conflicts with new declaration with %qL linkage\",\n-\t\t     DECL_LANGUAGE (newdecl));\n+\t      error (\"conflicting declaration of %q#D with %qL linkage\",\n+\t\t     newdecl, DECL_LANGUAGE (newdecl));\n+\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t      \"previous declaration with %qL linkage\",\n+\t\t      DECL_LANGUAGE (olddecl));\n \t    }\n \t}\n \n@@ -1729,19 +1733,20 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t    if (1 == simple_cst_equal (TREE_PURPOSE (t1),\n \t\t\t\t\t       TREE_PURPOSE (t2)))\n \t\t      {\n-\t\t\tpermerror (input_location,\n-\t\t\t\t   \"default argument given for parameter %d \"\n-\t\t\t\t   \"of %q#D\", i, newdecl);\n-\t\t\tpermerror (input_location,\n-\t\t\t\t   \"after previous specification in %q+#D\",\n-\t\t\t\t   olddecl);\n+\t\t\tif (permerror (input_location,\n+\t\t\t\t       \"default argument given for parameter \"\n+\t\t\t\t       \"%d of %q#D\", i, newdecl))\n+\t\t\t  permerror (DECL_SOURCE_LOCATION (olddecl),\n+\t\t\t\t     \"previous specification in %q#D here\",\n+\t\t\t\t     olddecl);\n \t\t      }\n \t\t    else\n \t\t      {\n \t\t\terror (\"default argument given for parameter %d \"\n \t\t\t       \"of %q#D\", i, newdecl);\n-\t\t\terror (\"after previous specification in %q+#D\",\n-\t\t\t       olddecl);\n+\t\t\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t\t\t\"previous specification in %q#D here\",\n+\t\t\t\tolddecl);\n \t\t      }\n \t\t  }\n \t    }\n@@ -1805,7 +1810,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  if (warning (OPT_Wredundant_decls,\n \t\t       \"redundant redeclaration of %qD in same scope\",\n \t\t       newdecl))\n-\t    inform (input_location, \"previous declaration of %q+D\", olddecl);\n+\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t    \"previous declaration of %qD\", olddecl);\n \t}\n \n       if (!(DECL_TEMPLATE_INSTANTIATION (olddecl)\n@@ -1814,7 +1820,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  if (DECL_DELETED_FN (newdecl))\n \t    {\n \t      error (\"deleted definition of %qD\", newdecl);\n-\t      error (\"after previous declaration %q+D\", olddecl);\n+\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t      \"previous declaration of %qD\", olddecl);\n \t    }\n \t  DECL_DELETED_FN (newdecl) |= DECL_DELETED_FN (olddecl);\n \t}"}, {"sha": "fa75f4f85f2097ce39c7fd61c03e68f87106a0b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,3 +1,26 @@\n+2013-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/constexpr-46336.C: Adjust expected messages.\n+\t* g++.dg/cpp0x/defaulted2.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn8.C: Likewise.\n+\t* g++.dg/gomp/udr-3.C: Likewise.\n+\t* g++.dg/lookup/extern-c-redecl5.C: Likewise.\n+\t* g++.dg/lookup/linkage1.C: Likewise.\n+\t* g++.dg/overload/new1.C: Likewise.\n+\t* g++.dg/parse/friend5.C: Likewise.\n+\t* g++.dg/parse/namespace-alias-1.C: Likewise.\n+\t* g++.dg/parse/namespace10.C: Likewise.\n+\t* g++.dg/parse/redef2.C: Likewise.\n+\t* g++.dg/template/friend44.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash42.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash52.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash55.C: Likewise.\n+\t* g++.old-deja/g++.jason/overload21.C: Likewise.\n+\t* g++.old-deja/g++.jason/overload5.C: Likewise.\n+\t* g++.old-deja/g++.jason/redecl1.C: Likewise.\n+\t* g++.old-deja/g++.law/arm8.C: Likewise.\n+\t* g++.old-deja/g++.other/main1.C: Likewise.\n+\n 2013-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56787"}, {"sha": "c021e9803523fb17ee3c8960a9b2d8b8a451e2f0", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-46336.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-46336.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-46336.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-46336.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -4,7 +4,7 @@\n extern \"C\" {\n   enum A { };\n   inline constexpr A\n-  f(A a, A b)\t\t\t// { dg-error \"previous declaration\" }\n+  f(A a, A b)\t\t\t// { dg-message \"previous declaration\" }\n   { return A(static_cast<int>(a) & static_cast<int>(b)); }\n   enum B { };\n   inline constexpr B"}, {"sha": "5f05424dc340a7631706286134431e629839e945", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,7 +1,7 @@\n // Negative test for defaulted/deleted fns.\n // { dg-options \"-std=c++11\" }\n \n-void f();\t\t\t// { dg-error \"previous\" }\n+void f();\t\t\t// { dg-message \"previous\" }\n void f() = delete;\t\t// { dg-error \"deleted\" }\n \n struct A"}, {"sha": "15ccfc566cc020728b2e03479b06cc175337b4a2", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=c++1y -pedantic-errors\" }\n \n-auto f() { return 42; }\t\t// { dg-error \"old declaration .auto\" }\n+auto f() { return 42; }\t\t// { dg-message \"old declaration .auto\" }\n auto f();\t\t\t// OK\n int f();\t\t\t// { dg-error \"new declaration\" }\n "}, {"sha": "9fc6f40820adf68d4a7f5333b918b6bc1a1479b7", "filename": "gcc/testsuite/g++.dg/gomp/udr-3.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-3.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -63,12 +63,12 @@ int y = f4 <S> ();\n \n namespace N1\n {\n-  #pragma omp declare reduction (+: ::S: omp_out.s *= omp_in.s)\t\t// { dg-error \"previous\" }\n+  #pragma omp declare reduction (+: ::S: omp_out.s *= omp_in.s)\t\t// { dg-message \"previous\" }\n   #pragma omp declare reduction (+: S: omp_out.s += omp_in.s)\t\t// { dg-error \"redeclaration of\" }\n   void\n   f5 ()\n   {\n-    #pragma omp declare reduction (f5: S: omp_out.s *= omp_in.s)\t// { dg-error \"previous\" }\n+    #pragma omp declare reduction (f5: S: omp_out.s *= omp_in.s)\t// { dg-message \"previous\" }\n     #pragma omp declare reduction (f5: ::S: omp_out.s += omp_in.s)\t// { dg-error \"redeclaration of\" }\n   }\n }\n@@ -84,20 +84,20 @@ namespace N2\n \n namespace N3\n {\n-  #pragma omp declare reduction (+: ::S: omp_out.s *= omp_in.s)\t\t// { dg-error \"previous\" }\n+  #pragma omp declare reduction (+: ::S: omp_out.s *= omp_in.s)\t\t// { dg-message \"previous\" }\n   #pragma omp declare reduction (+: T: omp_out.t += omp_in.t)\n   #pragma omp declare reduction (+: S: omp_out.s += omp_in.s)\t\t// { dg-error \"redeclaration of\" }\n-  #pragma omp declare reduction (n3: long: omp_out += omp_in)\t\t// { dg-error \"previous\" }\n+  #pragma omp declare reduction (n3: long: omp_out += omp_in)\t\t// { dg-message \"previous\" }\n   #pragma omp declare reduction (n3: long int: omp_out += omp_in)\t// { dg-error \"redeclaration of\" }\n   #pragma omp declare reduction (n3: short unsigned: omp_out += omp_in)\n   #pragma omp declare reduction (n3: short int: omp_out += omp_in)\n   void\n   f6 ()\n   {\n     #pragma omp declare reduction (f6: T: omp_out.t += omp_in.t)\n-    #pragma omp declare reduction (f6: S: omp_out.s *= omp_in.s)\t// { dg-error \"previous\" }\n+    #pragma omp declare reduction (f6: S: omp_out.s *= omp_in.s)\t// { dg-message \"previous\" }\n     #pragma omp declare reduction (f6: ::S: omp_out.s += omp_in.s)\t// { dg-error \"redeclaration of\" }\n-    #pragma omp declare reduction (f6: long: omp_out += omp_in)\t\t// { dg-error \"previous\" }\n+    #pragma omp declare reduction (f6: long: omp_out += omp_in)\t\t// { dg-message \"previous\" }\n     #pragma omp declare reduction (f6: long int: omp_out += omp_in)\t// { dg-error \"redeclaration of\" }\n     #pragma omp declare reduction (f6: short unsigned: omp_out += omp_in)\n     #pragma omp declare reduction (f6: short int: omp_out += omp_in)\n@@ -124,7 +124,7 @@ namespace N5\n   int\n   f7 ()\n   {\n-    #pragma omp declare reduction (f7: T: omp_out.s *= omp_in.s)\t// { dg-error \"previous\" }\n+    #pragma omp declare reduction (f7: T: omp_out.s *= omp_in.s)\t// { dg-message \"previous\" }\n     #pragma omp declare reduction (f7: T: omp_out.s += omp_in.s)\t// { dg-error \"redeclaration of\" }\n     return 0;\n   }\n@@ -145,9 +145,9 @@ namespace N6\n   f8 ()\n   {\n     #pragma omp declare reduction (f8: T: omp_out.t += omp_in.t)\n-    #pragma omp declare reduction (f8: U: omp_out.s *= omp_in.s)\t// { dg-error \"previous\" }\n+    #pragma omp declare reduction (f8: U: omp_out.s *= omp_in.s)\t// { dg-message \"previous\" }\n     #pragma omp declare reduction (f8: ::S: omp_out.s += omp_in.s)\t// { dg-error \"redeclaration of\" }\n-    #pragma omp declare reduction (f8: long: omp_out += omp_in)\t\t// { dg-error \"previous\" }\n+    #pragma omp declare reduction (f8: long: omp_out += omp_in)\t\t// { dg-message \"previous\" }\n     #pragma omp declare reduction (f8: long int: omp_out += omp_in)\t// { dg-error \"redeclaration of\" }\n     #pragma omp declare reduction (f8: short unsigned: omp_out += omp_in)\n     #pragma omp declare reduction (f8: short int: omp_out += omp_in)"}, {"sha": "4d934c1045cf0a9a030acfdcf5b45aa6f7b1e2d2", "filename": "gcc/testsuite/g++.dg/lookup/extern-c-redecl5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl5.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -6,11 +6,11 @@\n class frok\n {\n   int this_errno;\n-  friend int fork (void); // { dg-error \"previous declaration .*?C\\\\+\\\\+. linkage\" }\n+  friend int fork (void); // { dg-message \"previous declaration .*?C\\\\+\\\\+. linkage\" }\n };\n \n extern \"C\" int\n-fork (void) // { dg-error \"conflicts with new declaration .*?C. linkage\" }}\n+fork (void) // { dg-error \"conflicting declaration .*?C. linkage\" }}\n {\n   frok grouped;\n   return grouped.this_errno;"}, {"sha": "aa6983c54c8a446de0b170669473bc75260d2998", "filename": "gcc/testsuite/g++.dg/lookup/linkage1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage1.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,4 +1,4 @@\n // DR 563\n \n-extern int i; // { dg-error \"linkage\" }\n+extern int i; // { dg-message \"linkage\" }\n extern \"C\" int i; // { dg-error \"linkage\" }"}, {"sha": "bf2190b8e0548aa94040825c3ae9f51fac9a986e", "filename": "gcc/testsuite/g++.dg/overload/new1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fnew1.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -7,7 +7,7 @@ struct X{\n };\n \n \n-void f(X *x = new X);          // { dg-error \"\" } \n+void f(X *x = new X);          // { dg-message \"\" } \n \n void f(X *x = new X(4));       // { dg-error \"\" } \n "}, {"sha": "43f06129b2057301776de2200b78de64110739d4", "filename": "gcc/testsuite/g++.dg/parse/friend5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend5.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -2,6 +2,6 @@\n  \n extern \"C\" struct A\n {\n-  friend void foo(int) {} // { dg-error \"declaration\" }\n+  friend void foo(int) {} // { dg-message \"declaration\" }\n   friend void foo() {} // { dg-error \"foo\" \"err\" }\n };"}, {"sha": "4b443359a61e553ab74faacb7adc41b5ca8b3a25", "filename": "gcc/testsuite/g++.dg/parse/namespace-alias-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace-alias-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace-alias-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace-alias-1.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -2,6 +2,6 @@\n \n namespace N\n {\n-  namespace M = N;  // { dg-error \"previous declaration\" }\n+  namespace M = N;  // { dg-message \"previous declaration\" }\n   namespace M {}    // { dg-error \"declaration of namespace\" }\n }"}, {"sha": "5e9541adb1dc141515e645a3ef509257de6b3753", "filename": "gcc/testsuite/g++.dg/parse/namespace10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace10.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,6 +1,6 @@\n // PR c++/16529\n \n-namespace m {} // { dg-error \"\" }\n+namespace m {} // { dg-message \"\" }\n \n namespace n {\n   namespace m {}"}, {"sha": "85c50644557156e90f19e9de8cdea2ce83c2d136", "filename": "gcc/testsuite/g++.dg/parse/redef2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fredef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fredef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fredef2.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-char * d [10];  // { dg-message \"8: 'd' has a previous declaration as\" }\n+char * d [10];  // { dg-message \"8: previous declaration as\" }\n char e [15][10];\n int (*f)();\n "}, {"sha": "6ff4db3a3b6939e3636507e225f959375912f52a", "filename": "gcc/testsuite/g++.dg/template/friend44.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend44.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -3,7 +3,7 @@\n \n template<int> struct A\n {\n-  friend int foo(); // { dg-error \"14:new declaration\" }\n+  friend int foo(); // { dg-error \"14:ambiguating new declaration\" }\n };\n \n-void foo() { A<0> a; } // { dg-error \"6:ambiguates old declaration\" } \n+void foo() { A<0> a; } // { dg-message \"6:old declaration\" } "}, {"sha": "4b34a520f6676faf8724989b098337eac845ac8b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash42.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,6 +1,6 @@\n // { dg-do assemble  }\n // GROUPS passed old-abort\n-int fn();// { dg-error \"\" }  ambiguates.*\n+int fn();// { dg-message \"\" }  ambiguates.*\n int x;\n int& fn() {// { dg-error \"\" }  new decl.*\n return x;}"}, {"sha": "1318ea6e9fef73e59ffd7ca8a725c321427a1274", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash52.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -5,9 +5,9 @@\n \n class A {\n public:\n-  friend A f(A &a);// { dg-error \"ambiguates\" }\n+  friend A f(A &a);// { dg-message \"old declaration\" }\n };\n \n-A &f(A &a) {// { dg-error \"new decl\" }\n+A &f(A &a) {// { dg-error \"new declaration\" }\n   std::cout << \"Blah\\n\";\n } // { dg-warning \"no return statement\" }"}, {"sha": "3faa538253b29e6d938906c1bf7e21fd29edc06d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // GROUPS passed old-abort\n-      extern int f(int); // { dg-error \"ambiguates\" }\n+      extern int f(int); // { dg-message \"old declaration\" }\n \n       int& f(int x)  // { dg-error \"new declaration\" }\n       {"}, {"sha": "72397930367e341598325ed621364e7d042f9228", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload21.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n struct X {\n   void f (int = 4, char = 'r');\t// { dg-error \"previous specification\" } \n-  void g (int = 4, char = 'r');\t// { dg-error \"previous specification\" } \n+  void g (int = 4, char = 'r');\t// { dg-message \"previous specification\" } \n };\n \n void"}, {"sha": "c1d53f3cee0a8779efbd25a84376975b6c66108f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload5.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n // Testcase for simple overloading resolution.\n \n-int foo ();\t\t\t// { dg-error \"\" } \n+int foo ();\t\t\t// { dg-message \"\" } \n void foo ();\t\t\t// { dg-error \"\" } disallowed overload"}, {"sha": "172a441049057c6901513e656efe068195799488", "filename": "gcc/testsuite/g++.old-deja/g++.jason/redecl1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fredecl1.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -3,7 +3,7 @@ class A\n {\n public:\n     A (const A& ccref);\n-    friend A const re (const A& v1); // { dg-error \"ambiguates\" } \n+    friend A const re (const A& v1); // { dg-message \"old declaration\" } \n };\n \n A // const"}, {"sha": "dfc3b30d3ac2472522ad23faf325bea2d3605f88", "filename": "gcc/testsuite/g++.old-deja/g++.law/arm8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm8.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -7,7 +7,7 @@\n // Date: Tue, 16 Mar 93 12:05:24 +0100\n \n struct K {\n-      void f( int *p  = 0); // { dg-error \"\" } previous specification\n+      void f( int *p  = 0); // { dg-message \"\" } previous specification\n };\n \n extern int * q;"}, {"sha": "de689f60fc1f14bc4d1b957c0edd756dbf45cc85", "filename": "gcc/testsuite/g++.old-deja/g++.other/main1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmain1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23644e8ccb2805095f85da6c198d809341f730b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmain1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmain1.C?ref=23644e8ccb2805095f85da6c198d809341f730b7", "patch": "@@ -1,12 +1,12 @@\n // { dg-do compile }\n \n-int main()  // { dg-error \"previous declaration\" }\n+int main()  // { dg-message \"previous declaration\" }\n {\n   return 0;\n }\n \n \n-int main(int, const char**) // { dg-error \"conflicts\" }\n+int main(int, const char**) // { dg-error \"conflicting\" }\n {\n   return 0;\n }"}]}