{"sha": "aedc2c2ba7c059470ad6b054614b58f81dab51b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkYzJjMmJhN2MwNTk0NzBhZDZiMDU0NjE0YjU4ZjgxZGFiNTFiNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:36:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:36:36Z"}, "message": "Resync.\n\nFrom-SVN: r108309", "tree": {"sha": "df4e40a06945dc3e821117a0df13851c64cea041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df4e40a06945dc3e821117a0df13851c64cea041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aedc2c2ba7c059470ad6b054614b58f81dab51b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedc2c2ba7c059470ad6b054614b58f81dab51b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedc2c2ba7c059470ad6b054614b58f81dab51b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedc2c2ba7c059470ad6b054614b58f81dab51b5/comments", "author": null, "committer": null, "parents": [{"sha": "d26dc4b5a15cc68153cb4214b91f3bf402f76d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26dc4b5a15cc68153cb4214b91f3bf402f76d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26dc4b5a15cc68153cb4214b91f3bf402f76d1d"}], "stats": {"total": 714, "additions": 714, "deletions": 0}, "files": [{"sha": "16d99aeb813f90de7d784964e0c49b932a638aff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 714, "deletions": 0, "changes": 714, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedc2c2ba7c059470ad6b054614b58f81dab51b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedc2c2ba7c059470ad6b054614b58f81dab51b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aedc2c2ba7c059470ad6b054614b58f81dab51b5", "patch": "@@ -1,3 +1,717 @@\n+2005-12-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatvsn.ads (Library_Version): Bump to version 4.2\n+\t(ASIS_Version_Number): Bumped.\n+\n+2005-12-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* mlib-tgt-vms-ia64.adb, mlib-tgt-vms-alpha.adb (Is_Interface): Change\n+\tAda bind file prefix on VMS from b$ to b__.\n+\t(Build_Dynamic_Library): Change Init file suffix on VMS from $init to\n+\t__init.\n+\n+\t* prj-nmsc.adb: Change some Hostparm.OpenVMS checks to\n+\tTargparm.OpenVMS_On_Target.\n+\t(Object_Suffix): Initialize with target object suffix.\n+\t(Get_Unit): Change Ada bind file prefix on VMS from b$ to b__.\n+\n+\t* butil.adb: Change some Hostparm.OpenVMS checks to\n+\tTargparm.OpenVMS_On_Target.\n+\n+\t* clean.adb: Change some Hostparm.OpenVMS checks to\n+\tTargparm.OpenVMS_On_Target.\n+\t(Object_Suffix): Initialize with call to Get_Target_Object_Suffix.\n+\t({declaraction},Delete_Binder_Generated_Files,{initialization}): Change\n+\tAda bind file prefix on VMS from b$ to b__.\n+\n+\t* gnatlink.adb (Process_Args): Call Add_Src_Search_Dir for -I in\n+\t--GCC so that Get_Target_Parameters can find system.ads.\n+\t(Gnatlink): Call Get_Target_Parameters in mainline.\n+\tInitialize standard packages for Targparm.\n+\tChange some Hostparm.OpenVMS checks to Targparm.OpenVMS_On_Target.\n+\t(Process_Args): Also Check for object files with target object\n+\textension.\n+\t(Make_Binder_File_Names): Create with target object extension.\n+\t(Make_Binder_File_Names): Change Ada bind file prefix on VMS from b$\n+\tto b__.\n+\n+\t* mlib-prj.adb: Change some Hostparm.OpenVMS checks to\n+\tTargparm.OpenVMS_On_Target.\n+\t({declaration},Build_Library,Check_Library): Change Ada bind file\n+\tprefix on VMS from b$ to b__.\n+\n+\t* osint-b.adb: Change some Hostparm.OpenVMS checks to\n+\tTargparm.OpenVMS_On_Target.\n+\t(Create_Binder_Output): Change Ada bind file prefix on VMS from b$ to\n+\tb__.\n+\n+\t* targext.c: New file.\n+\n+\t* Makefile.in: add support for vxworks653 builds\n+\t(../../vxaddr2line): gnatlink with targext.o.\n+\t(TOOLS_LIBS): Move targext.o to precede libgnat.\n+\t(init.o, initialize.o): Minor clean up in dependencies.\n+\t(GNATLINK_OBJS): Add targparm.o, snames.o\n+\tAdd rules fo building targext.o and linking it explicitly with all\n+\ttools.\n+\tAlso add targext.o to gnatlib.\n+\n+\t* Make-lang.in: Add rules for building targext.o and linking it in\n+\twith gnat1 and gnatbind.\n+\tAdd entry for exp_sel.o.\n+\n+\t* osint.adb Change some Hostparm.OpenVMS checks to\n+\tTargparm.OpenVMS_On_Target.\n+\t(Object_File_Name): Use target object suffix.\n+\n+\t* osint.ads (Object_Suffix): Remove, no longer used.\n+\t(Target_Object_Suffix): Initialize with target object suffix.\n+\n+\t* rident.ads: Add special exception to license.\n+\n+\t* targparm.adb (Get_Target_Parameters): Set the value of\n+\tMulti_Unit_Index_Character after OpenVMS_On_Target gets its definitive\n+\tvalue.\n+\t(Get_Target_Parameters): Set OpenVMS_On_Target if openvms.\n+\t\n+\t* targparm.ads: Add special exception to license.\n+\n+\t* g-os_lib.ads, g-os_lib.adb (Get_Target_Debuggable_Suffix): New\n+\tfunction.\n+\t(Copy_File): Make sure from file is closed if error on to file\n+\t(Get_Target_Executable_Suffix, Get_Target_Object_Suffix): New functions.\n+\n+\t* make.adb (Object_Suffix): Intialize with Get_Target_Object_Suffix.\n+\t(Executable_Suffix): Intialize with Get_Target_Executable_Suffix.\n+\n+\t* osint-c.adb (Set_Output_Object_File_Name): Initialize extension with\n+\ttarget object suffix.\n+\n+2005-12-09  Jose Ruiz  <ruiz@adacore.com>\n+\t    Quentin Ochem  <ochem@adacore.com>\n+\t    Florian Villoing  <villoing@adacore.com>\n+\n+        * a-taster.ads, a-taster.adb: New files.\n+\n+\t* a-elchha.adb (Last_Chance_Handler): Change the task termination soft\n+\tlink to the version that does nothing. This way the task termination\n+\troutine is not executed twice for the environment task when finishing\n+\tbecause of an unhandled exception.\n+\n+\t* a-exextr.adb (Notify_Unhandled_Exception): Call the task termination\n+\thandler because of an unhandled exception.\n+\n+\t* a-taside.adb (Abort_Tasks): Call the Abort_Tasks procedure from\n+\tSystem.Tasking.Utilities instead of that in System.Tasking.Stages.\n+\n+\t* s-finimp.adb (initialization code): Modify the soft link for the\n+\tfinalization of the global list instead of Adafinal.\n+\n+\t* s-soflin.ads, s-soflin.adb (Task_Termination_NT): Add this\n+\tnon-tasking version of the soft link for task termination. We do\n+\tnothing since if we are using the non-tasking version it\n+\tmeans that the task termination functionality is not used.\n+\t(Null_Finalize_Global_List): Add this null version for the procedure\n+\tin charge of finalizing the global list for controlled objects.\n+\t(Null_Adafinal): Remove this procedure. Adafinal_NT has been created\n+\tinstead for handling run-time termination in a more flexible way.\n+\t(Adafinal_NT): This new procedure will take care of finalizing the\n+\tglobal list for controlled objects if needed, but no tasking\n+\tfinalization.\n+\n+\t* s-tarest.adb (Task_Lock): Do not try to lock again the\n+\tGlobal_Task_Lock if we already own it. Otherwise, we get blocked in\n+\tsome run-time operations.\n+\t(Task_Unlock): Do not try to actually unlock the Global_Task_Lock\n+\tuntil all nested locks have been released.\n+\t(Task_Wrapper): Call the fall-back task termination handler. It\n+\tapplies to all tasks but the environment task.\n+\t(Finalize_Global_Tasks): Add the call for the task termination\n+\tprocedure for the environment task.\n+\t(Task_Wrapper): suppress warnings around declaration of\n+\tSecondary_Stack_Address.\n+\n+\t* s-tasini.adb (Final_Task_Unlock): Global_Task_Lock_Nesting has been\n+\tmoved to the Common_ATCB record.\n+\t(Task_Lock): Global_Task_Lock_Nesting has been moved to the\n+\tCommon_ATCB record.\n+\t(Task_Unlock): Global_Task_Lock_Nesting has been moved to the\n+\tCommon_ATCB record.\n+\n+\t* s-taskin.adb (Initialize_ATCB): Initialize Global_Task_Lock_Nesting,\n+\tFall_Back_Handler, and Specific_Handler.\n+\n+\t* s-taskin.ads (Cause_Of_Termination): Redefine this type here, already\n+\tdefined in Ada.Task_Termination, to avoid circular dependencies.\n+\t(Termination_Handler): Redefine this type here, alredy defined in\n+\tAda.Task_Termination, for avoiding circular dependencies.\n+\t(Common_ATCB): Add the Fall_Back_Handler and Specific_Handler required\n+\tfor storing task termination handlers. In addition,\n+\tGlobal_Task_Lock_Nesting has been moved from Ada_Task_Control_Block to\n+\tCommon_ATCB because it is used by both the regular and the restricted\n+\trun times.\n+\t(Ada_Task_Control_Block): Move Global_Task_Lock_Nesting from here to\n+\tCommon_ATCB because it is used by both the regular and the restricted\n+\trun times.\n+\t(Common_ATCB): Added a dynamic task analyzer field.\n+\n+\t* s-tassta.adb (Abort_Tasks): Move the code in charge of checking\n+\tpotentially blocking operations to System.Tasking.Utilities.Abort_Tasks.\n+\t(Task_Wrapper): Call the task termination handler. It applies to all\n+\ttasks but the environment task.\n+\t(Finalize_Global_Tasks): Call the task termination procedure for the\n+\tenvironment task. The call to Finalize_Global_List is now performed\n+\tusing the soft links mechanism.\n+\t(Task_Wrapper): added dynamic stack analysis.\n+\n+\t* s-tasuti.adb (Abort_Tasks): The code in charge of checking\n+\tpotentially blocking operations has been moved from\n+\tSystem.Tasking.Stages.Abort_Tasks to this procedure. There can be\n+\tdirect calls to System.Tasking.Utilities.Abort_Tasks that do not pass\n+\tthrough System.Tasking.Stages.Abort_Tasks, and we do not want to miss\n+\tthis run-time check.\n+\n+\t* s-solita.adb (Task_Termination_Handler_T): Add this task-safe version\n+\tof task termination procedure.\n+\t(Init_Tasking_Soft_Links): Install the task-safe version of the soft\n+\tlink for the task termination procedure.\n+\n+\t* bindusg.adb: (Bindusg): Added documentation for -u option.\n+\n+\t* bindgen.adb (Get_Main_Ada) Added handling of dynamic stack analysis.\n+\t(Get_Main_C): Add handling of dynamic stack analysis.\n+\t(Gen_Output_File_C): Add external functions for dynamic stack analysis.\n+\n+\t* Makefile.rtl: Add entry for a-taster (Ada.Task_Termination).\n+\t(GNATRTL_NONTASKING_OBJS) Added entries for dynamic stack analysis\n+\t(GNATRTL_NONTASKING_OBJS): Add AltiVec files.\n+\n+\t* opt.ads: Added flags used by dynamic stack measurement.\n+\t(Max_Line_Length): Remove (not used anymore)\n+\n+\t* s-io.ads, s-io.adb (Standard_Error): new subprogram\n+\t(Standart_Output): new subprogram\n+\t(Set_Output): new subprogram\n+\t(Put): now uses the value of Current_Out to know if the output has to be\n+\tsend to stderr or stdout.\n+\t\n+\t* s-stausa.ads: Complete implementation.\n+\n+\t* switch-b.adb: Added handling of -u switch for dynamic stack analysis.\n+\t\n+\t* impunit.adb (Non_Imp_File_Names_05): Add Ada.Task_Termination to the\n+\tlist of Ada 05 files.\n+\t(GNAT Library Units): Add AltiVec files.\n+\n+\t* g-allein.ads, g-alleve.adb, g-alleve.ads, g-altcon.adb,\n+\tg-altcon.ads, g-altive.ads, g-alveop.adb, g-alveop.ads\n+\tg-alvety.ads, g-alvevi.ads: New files providing altivec API.\n+\n+2005-12-09  Nicolas Setton  <setton@adacore.com>\n+\n+\t* adaint.c (__gnat_locate_regular_file): Return immediately if\n+\tfile_name is empty.\n+\n+2005-12-09  Javier Miranda  <miranda@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-tags.ads, a-tags.adb (Offset_To_Top): Moved from the package body\n+\tto the specification because the frontend generates code that uses this\n+\tsubprogram.\n+\t(Set_Interface_Table): Add missing assertion.\n+\tUpdate documentation describing the run-time structure.\n+\t(Displace): New subprogram that displaces the pointer to the object\n+\tto reference one of its secondary dispatch tables.\n+\t(IW_Membership): Modified to use the new table of interfaces.\n+\t(Inherit_TSD): Modified to use the new table of interfaces.\n+\t(Register_Interface_Tag): Use the additional formal to fill the\n+\tcontents of the new table of interfaces.\n+\t(Set_Interface_Table): New subprogram that stores in the TSD the\n+\tpointer to the table of interfaces.\n+\t(Set_Offset_To_Top): Use the additional formal to save copy of\n+\tthe offset value in the table of interfaces.\n+\tUpdate structure of GNAT Primary and Secondary dispatch table diagram.\n+\tAdd comment section on GNAT dispatch table prologue.\n+\t(Offset_To_Signature): Update the constant value of the Signature field.\n+\t(Dispatch_Table): Update comment on hidden fields in the prologue.\n+\t(Get_Entry_Index, Get_Prim_Op_Kind, Get_Offset_Index, OSD,\n+\tSet_Entry_Index, Set_Offset_Index, Set_Prim_Op_Kind, SSD, TSD): Change\n+\tthe type of formal parameter T to Tag, introduce additional assertions.\n+\t(Get_Num_Prim_Ops, Set_Num_Prim_Ops): Remove an unnecessary type\n+\tconversion.\n+\t(Get_Tagged_Kind, Set_Tagged_Kind): New bodies.\n+\n+\t* exp_ch6.adb (Register_Interface_DT_Entry): Remove the Thunk_Id actual\n+\tin all the calls to Expand_Interface_Thunk. Instead of referencing the\n+\trecord component containing the tag of the secondary dispatch table we\n+\thave to use the Offset_To_Top run-time function to get this information;\n+\totherwise if the pointer to the base of the object has been displace\n+\twe get a wrong value if we use the 'position attribute.\n+\n+\t* exp_disp.adb (Expand_Interface_Thunk): Remove the Thunk_Id actual in\n+\tall the calls to Expand_Interface_Thunk.\n+\t(Make_Secondary_DT): Secondary dispatch tables do not have a table of\n+\tinterfaces; hence the call to Set_Interface_Table was clearly wrong.\n+\t(Collect_All_Interfaces): Modify the internal subprogram Collect to\n+\tensure that the interfaces implemented by the ancestors are placed\n+\tat the header of the generated list.\n+\t(Expand_Interface_Conversion): Handle the case in which the displacement\n+\tassociated with the interface conversion is not statically known. In\n+\tthis case we generate a call to the new run-time subprogram Displace.\n+\t(Make_DT): Generate and fill the new table of interfaces.\n+\t(Ada_Actions, Action_Is_Proc, Action_Nb_Arg): Add entries for\n+\tGet_Tagged_Kind and Set_Tagged_Kind.\n+\t(Tagged_Kind): New function that determines the tagged kind of a type\n+\twith respect to limitedness and concurrency and returns a reference to\n+\tRE_Tagged_Kind.\n+\t(Make_Disp_Asynchronous_Select_Body, Make_Disp_Conditional_Select_Body,\n+\tMake_Disp_Timed_Select_Body): Correctly retrieve the pointer to the\n+\tprimary dispatch table for a type.\n+\t(Make_DT, Make_Secondary_DT): Set the tagged kind in the primary and\n+\tsecondary dispatch table respectively of a tagged type.\n+\n+\t* exp_disp.ads (Expand_Interface_Thunk): Remove Thunk_Id formal.\n+\t(Expand_Interface_Conversion): New subprogram to indicate if the\n+\tdisplacement of the type conversion is statically known.\n+\t(DT_Access_Action): Add values Get_Tagged_Kind and Set_Tagged_Kind.\n+\n+\t* rtsfind.ads (RE_Offset_To_Top): New entity\n+\t(RTU_Id): Add Ada_Task_Termination to the list so that it is made\n+\taccessible to users.\n+\t(Re_Displace): New entity\n+\t(RE_Interface_Data): New entity\n+\t(RE_Set_Interface_Data): New_Entity\n+\t(RE_Id, RE_Unit_Table): Add entry for RE_Get_Tagged_Kind,\n+\tSet_Tagged_Kind, RE_Tagged_Kind, RE_TK_Abstract_Limited_Tagged,\n+\tRE_TK_Abstract_Tagged, RE_TK_Limited_Tagged, RE_TK_Protected,\n+\tRE_TK_Tagged, RE_TK_Task.\n+\n+\t* exp_ch3.adb (Init_Secondary_Tags): Modify the subprogram\n+\tInit_Secondary_Tags_Internal to allow its use with interface types and\n+\talso to generate the code for the new additional actual required\n+\tby Set_Offset_To_Top.\n+\t(Build_Init_Statements): In case of components associated with abstract\n+\tinterface types there is no need to generate a call to its IP.\n+\t(Freeze_Record_Type): Generate Select Specific Data tables only for\n+\tconcurrent types.\n+\t(Make_Predefined_Primitive_Specs, Predefined_Primitive_Bodies): Generate\n+\tthe bodies and specifications of the predefined primitive operations\n+\tdealing with dispatching selects and abort, 'Callable, 'Terminated only\n+\tfor concurrent types.\n+\n+        * exp_sel.ads, exp_sel.adb: New files.\n+\n+\t* exp_ch9.adb (Build_Protected_Entry, Expand_N_Protected_Body,\n+\tExpand_N_Protected_Type_Declaration, Make_Initialize_Protection): Handle\n+\tproperly protected objects and attach handler in the case of the\n+\trestricted profile.\n+\tMove embeded package Select_Expansion_Utilities into a separate external\n+\tpackage.\n+\t(Expand_N_Asynchronous_Select, Expand_N_Conditional_Select,\n+\tExpand_N_Timed_Entry_Call): Correct calls external package Exp_Sel.\n+\t(Build_K, Build_S_Assignment): New subprograms, part of the select\n+\texpansion utilities.\n+\t(Expand_N_Asynchronous_Select, Expand_N_Conditional_Entry_Call,\n+\tExpand_N_Timed_Entry_Call): Optimize expansion of select statements\n+\twhere the trigger is a dispatching procedure of a limited tagged type.\n+\n+2005-12-09  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity, renaming object case): Don't early expand\n+\tpointer initialization values. Make a SAVE_EXPR instead. Add comments\n+\tabout the use and expansion of SAVE_EXPRs in the various possible\n+\trenaming handling cases.\n+\t(components_to_record, compare_field_bitpos): Sort by DECL_UID, not by\n+\tabusing DECL_FCONTEXT.\n+\n+2005-12-09  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-convec.adb (Merge): Added assertions to check whether vector params\n+\tare sorted.\n+\n+\t* a-coinve.adb (Merge): Added assertions to check whether vector params\n+\tare sorted.\n+\n+\t* a-cohama.ads (Cursor'Write): raises Program_Error per latest AI-302\n+\tdraft.\n+\t(Cursor'Read): raises PE\n+\n+\t* a-cohama.adb (Insert.New_Node): Uses box-style syntax to init elem\n+\tto its default value.\n+\n+\t* a-cihama.adb: Manually check whether cursor's key and elem are\n+\tnon-null\n+\n+\t* a-cidlli.ads, a-cidlli.adb (Splice): Changed param name and param mode\n+\t(Merge): Assert that target and source lists are in order\n+\t(Swap): Declare non-const temporaries, to pass to Splice\n+\n+\t* a-cdlili.ads: (Splice): Changed param name and param mode\n+\n+\t* a-cdlili.adb: (Splice): Changed param name and param mode\n+\t(Merge): Assert that target and source lists are in order\n+\t(Swap): Declare non-const temporaries, to pass to Splice\n+\n+\t* a-ciorma.ads, a-coorma.ads: (Read): declare Stream param as not null\n+\t(Write): declare Stream param as not null\n+\n+\t* a-ciorma.adb, a-coorma.adb: All explicit raise statements now include\n+\tan exception message.\n+\n+2005-12-09  Thomas Quinot  <quinot@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* hostparm.ads (Max_Line_Length): Set to Types.Column_Number'Last - 1,\n+\twhich is the absolute maximum length we can support.\n+\n+\t* frontend.adb: For the processing of configuration pragma files,\n+\tremove references to Opt.Max_Line_Length, which is not checked anymore.\n+\n+\t* namet.ads (Name_Buffer): Adjust size to reflect increase on max line\n+\tlength.\n+\n+\t* scn.adb, scng.adb: \n+\tAlways check line length against the absolute supported maximum,\n+\tHostparm.Max_Line_Length.\n+\n+\t* stylesw.adb (Set_Style_Check_Options, case M): The maximum supported\n+\tvalue for the maximum line length is Max_Line_Length (not\n+\tColumn_Number'Last).\n+\tMinor error msg update\n+\t(Set_Style_Check_Options): New interface returning error msg\n+\tMinor code reorganization (processing for 'M' was out of alpha order)\n+\n+\t* switch-c.adb: New interface for Set_Style_Check_Options\n+\n+\t* stylesw.ads (Set_Style_Check_Options): New interface returning error\n+\tmsg.\n+\n+2005-12-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): Default-initialialized records\n+\twith IP subprogram were only supported if there were limited types.\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Default-initialialized\n+\trecords with IP subprogram were only supported if there were limited\n+\ttypes.\n+\n+2005-12-09  Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans.c (tree_transform, emit_check): Adjust calls to\n+\tbuild_call_raise, passing the now expected GNAT_NODE argument.\n+\n+\t* gigi.h (build_call_raise): Add a GNAT_NODE argument to convey better\n+\tsource line information than what the current global locus indicates\n+\twhen appropriate.\n+\n+\t* utils2.c (build_simple_component_ref): Return 0 if the offset of the\n+\tfield has overflowed.\n+\t(build_call_raise): Add a GNAT_NODE argument to convey better source\n+\tline information than what the current global locus indicates when\n+\tappropriate.\n+\t(build_component_ref): Adjust call to build_call_raise.\n+\n+2005-12-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-diopit.adb (Find): Fix test to exit the iterator and make sure that\n+\tthe iterator is quitting iteration on parent directory.\n+\n+2005-12-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): In case of tagged types\n+\tand the assignment to a class-wide object, before the assignment we\n+\tgenerate a run-time check to ensure that the tag of the Target is\n+\tcovered by the tag of the source.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Generate extra boolean\n+\tparameter in call to Image_Wide_Character.\n+\n+\t* s-imgwch.ads, s-imgwch.adb (Image_Wide_Character): Add boolean\n+\tparameter Ada_2005 to deal with annoying FFFE/FFFF inconsistency.\n+\t(Image_Wide_Character): Add boolean parameter Ada_2005 to deal with\n+\tannoying FFFE/FFFF inconsistency.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Is_Ref_To_Bit_Packed_Slice): Handle case\n+\tof type conversion.\n+\t(Find_Interface): New subprogram that given a tagged type and one of its\n+\tcomponent associated with the secondary table of an abstract interface\n+\ttype, return the entity associated with such abstract interface type.\n+\t(Make_Subtype_From_Expr): If type has unknown discriminants, always use\n+\tbase type to create anonymous subtype, because entity may be a locally\n+\tdeclared subtype or generic actual.\n+\t(Find_Interface): New subprogram that given a tagged type and one of its\n+\tcomponent associated with the secondary table of an abstract interface\n+\ttype, return the entity associated with such abstract interface type.\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): Handle the case in which the\n+\tconversion cannot be handled at compile time. In this case we pass this\n+\tinformation to the expander to generate the appropriate code.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Itype_Printed): New flag\n+\t(Is_Limited_Type): Derived types do not inherit limitedness from\n+\tinterface progenitors.\n+\t(Is_Return_By_Reference_Type): Predicate does not apply to limited\n+\tinterfaces.\n+\n+\t* einfo.ads (Itype_Printed): New flag\n+\tMove Is_Wrapper_Package to proper section\n+\tAdd missing Inline for Is_Volatile\n+\n+\t* output.ads, output.adb (Write_Erase_Char): New procedure\n+\t(Save/Restore_Output_Buffer): New procedures\n+\t(Save/Restore_Output_Buffer): New procedures\n+\n+\t* sprint.ads, sprint.adb (Write_Itype): Handle case of record itypes\n+\tAdd missing support for anonymous access type\n+\t(Write_Id): Insert calls to Write_Itype\n+\t(Write_Itype): New procedure to output itypes\n+\n+\t* par-ch12.adb (P_Formal_Derived_Type_Definition): In Ada 2005, handle\n+\tuse of \"limited\" in declaration.\n+\n+\t* sinfo.ads, sinfo.adb: \n+\tFormal derived types can carry an explicit \"limited\" indication.\n+\n+\t* sem_ch3.adb: Add with and use of Targparm.\n+\t(Create_Component): If Frontend_Layout_On_Target is True and the\n+\tcopied component does not have a known static Esize, then reset\n+\tthe size and positional fields of the new component.\n+\t(Analyze_Component_Declaration): A limited component is\n+\tlegal within a protected type that implements an interface.\n+\t(Collect_Interfaces): Do not add to the list the interfaces that\n+\tare implemented by the ancestors.\n+\t(Derived_Type_Declaration): If the parent of the full-view is an\n+\tinterface perform a transformation of the tree to ensure that it has\n+\tthe same parent than the partial-view. This simplifies the job of the\n+\texpander in order to generate the correct object layout, and it is\n+\tneeded because the list of interfaces of the full-view can be given in\n+\tany order.\n+\t(Process_Full_View): The parent of the full-view does not need to be\n+\ta descendant of the parent of the partial view if both parents are\n+\tinterfaces.\n+\t(Analyze_Private_Extension_Declaration): If declaration has an explicit\n+\t\"limited\" the parent must be a limited type.\n+\t(Build_Derived_Record_Type): A derived type that is explicitly limited\n+\tmust have limited ancestor and progenitors.\n+\t(Build_Derived_Type): Ditto.\n+\t(Process_Full_View): Verify that explicit uses of \"limited\" in partial\n+\tand full declarations are consistent.\n+\t(Find_Ancestor_Interface): Remove function.\n+\t(Collect_Implemented_Interfaces): New procedure used to gather all\n+\timplemented interfaces by a type.\n+\t(Contain_Interface): New function used to check whether an interface is\n+\tpresent in a list.\n+\t(Find_Hidden_Interface): New function used to determine whether two\n+\tlists of interfaces constitute a set equality. If not, the first\n+\tdiffering interface is returned.\n+\t(Process_Full_View): Improve the check for the \"no hidden interface\"\n+\trule as defined by AI-396.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Only test for useless pack on record\n+\ttypes, not on record subtypes.\n+\t(Freeze_Entity): Code cleanup. Add barrier to the loop\n+\tthat generates the references for primitive operations. This allows to\n+\tremove an unnecessary exception handler.\n+\tCode reformatting and comment clean ups.\n+\n+2005-12-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (GNATCmd): GNAT CHECK accepts switch -U\n+\tIf GNAT CHECK is called with a project file, but with no\n+\tsource on the command line, call gnatcheck with all the compilable\n+\tsources of the project.\n+\tTake into account the new command Check, for gnatcheck. Treat as for\n+\tother ASIS tools: take into account project, specific package Check and\n+\tCompiler switches.\n+\tFor ASIS tools, add the switches in package Compiler for\n+\tthe invocation of the compiler.\n+\n+\t* prj-attr.adb: Add package Check and its attributes\n+\n+\t* vms_conv.ads (Command_Type): New command Check, for gnatcheck\n+\n+\t* vms_conv.adb (Initialize): Change Params of command Check to\n+\tunlimited files.\n+\tChange some Hostparm.OpenVMS checks to Targparm.OpenVMS_On_Target.\n+\tAdd data for new command Check\n+\n+\t* vms_data.ads: Add project related qualifiers for GNAT CHECK and GNAT\n+\tELIM.\n+\tAdd qualifiers for Check command options\n+\t(Command_Type): New command Check\n+\n+2005-12-09  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* mlib-utl.adb (Ar): Use Output.Buffer_Max to determine whether a\n+\tcommand line switch overruns the output buffer.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb: Processing for new pragma Complete_Representation\n+\t(Analyze_Pragma, case Debug): Implement two argument form.\n+\n+\t* par-prag.adb: Entry for new pragma Complete_Representation\n+\t(Prag, case Debug): Recognize two argument form of pragma Debug\n+\tNew interface for Set_Style_Check_Options.\n+\n+\t* sem_ch13.adb: Implement new pragma Complete_Representation.\n+\n+\t* snames.adb, snames.ads, snames.h: Entry for new pragma\n+\tComplete_Representation.\n+\n+2005-12-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_cat.adb (Validate_RCI_Subprogram_Declaration): Revise test for\n+\tavailable user-specified stream attributes on limited parameters to\n+\talso test the type directly rather than only its underlying type (for\n+\tAda 95) and, in the case of Ada 2005, to check that the user-specified\n+\tattributes are visible at the point of the subprogram declaration.\n+\tFor Ada 2005, the error message is modified to indicate that the\n+\ttype's stream attributes must be visible (again, only for -gnat05).\n+\n+2005-12-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Subtypes_Match): Handle properly Ada05 arrays of\n+\tanonymous access types.\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): Implement new rules for\n+\tmatching of anonymous access types and anonymous access to subprogram\n+\ttypes. 'R'M 4.9.1 (2/2).\n+\n+2005-12-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Remove_Abstract_Operations): Do not apply preference\n+\trule prematurely when operands are universal, remaining ambiguities\n+\twill be removed during resolution.\n+\tCode cleanup.\n+\n+\t* sem_type.adb (Disambiguate): In Ada95 mode, discard interpretations\n+\tthat are Ada 2005 functions.\n+\t(Has_Abstract_Interpretation): Subsidiary to\n+\tRemove_Conversions, to remove ambiguities caused by abstract operations\n+\ton numeric types when operands are universal.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body): Properly check categorization\n+\tfor case where spec is categorized.\n+\n+2005-12-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Type): In case of tagged types that are concurrent\n+\ttypes use the corresponding record type. This was not needed before\n+\tthe implementation of Ada 2005 synchronized types because\n+\tconcurrent types were never tagged types in Ada 95.\n+\n+2005-12-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Delay_Alternative, Analyze_Delay_Until): Use the\n+\tfirst subtype of the type of the expression to verify that it is a\n+\tlegal Time type.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Full_Qualified_Name): Now provides\n+\tdecoded names.\n+\n+2005-12-09  Quentin Ochem  <ochem@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Ed Falis  <falis@adacore.com>\n+\t    Florian Villoing  <villoing@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Created section \"Stack Related Tools\"\n+\tMoved \"Stack Overflow Checking\" subsection from \"Switches for gcc\" to\n+\t\"Stack Related Tools\"\n+\tAdded subsection \"Static Stack Usage Analysis\"\n+\tAdded subsection \"Dynamic Stack Usage Analysis\"\n+\tInclude documentation of itypes in sprint listing (-gnatG)\n+\tDocumented gnatbind -D switch (default sec stack size for fixed sec\n+\tstacks).\n+\tAdded Interrupt_State and Persistent_BSS to list of configuration\n+\tpragmas.\n+\tAdd missing doc for maximum value of nnn in -gnatyMnnn\n+\n+\t* gnat_rm.texi: Document the AltiVec binding.\n+\tAdd documentation for pragma Complete_Representation\n+\tShortened an overly long line (> 79 chars)\n+\tClarify documentation of unchecked conversion in implementation\n+\tdefined cases.\n+\tDocument two argument form of pragma Debug\n+\n+\t* types.ads (Column_Number): Update documentation.\n+\n+\t* exp_ch7.ads (Make_Adjust_Call): Document the special processing for\n+\tlibrary level Finalize_Storage_Only objects (these are not attached to\n+\tany finalization list).\n+\n+\t* system-mingw.ads: (Underlying_Priorities): Update comment.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* i-c.adb, i-cexten.ads, i-cobol.adb, i-cobol.ads, i-cpoint.ads,\n+        i-cpp.adb, i-cpp.ads, i-cstrea.ads, i-cstrin.adb, i-cstrin.ads,\n+\tinline.adb, interfac.ads, i-os2err.ads, i-os2lib.ads, i-os2syn.ads,\n+\ti-os2thr.ads, itypes.adb, itypes.adb, itypes.ads, krunch.ads,\n+\tkrunch.adb, lib.adb, lib.ads, lib-list.adb, lib-load.adb,\n+\tlib-load.ads, lib-sort.adb, live.adb, make.ads, i-cstrea-vms.adb,\n+\tinterfac-vms.ads, makegpr.adb, indepsw-gnu.adb, indepsw.ads,\n+\ts-wchcon.ads, sdefault.ads, sem_ch10.adb, sem_eval.ads: Minor\n+\treformatting.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-vaflop-vms-alpha.adb: (Ne_F): New function\n+\t(Ne_G): New function\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Factor duplicated code\n+\tfor tag assignment.\n+\t(Rewrite_Comparison): Handle case where operation is not a comparison\n+\tand ignore, and also handle type conversion case.\n+\n+2005-12-09  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_aggr.ads: Fix typo in comment.\n+\t???-mark Convert_Aggr_In_Assignment as needing documentation.\n+\n+2005-12-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb: Replace various uses of byte by storage unit throughout.\n+\t(Get_Max_SU_Size): Name changed from Get_Max_Size. In the case of a\n+\tstatic size, convert to storage units before returning, to conform to\n+\tspec.\n+\n+2005-12-09  Matthew Gingell  <gingell@adacore.com>\n+\n+\t* g-exctra.ads: Fix typo in comment.\n+\n+2005-12-09  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* utils.c: Minor reformatting.\n+\n+2005-12-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-soccon.ads: \n+\tFurther comment fixes to make the status of the default file clear\n+\n+\t* s-bitops.adb: Clarify comment for Bits_Array\n+\n 2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in (ada.install-normal): Remove."}]}