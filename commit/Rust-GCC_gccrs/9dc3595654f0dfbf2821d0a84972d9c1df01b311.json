{"sha": "9dc3595654f0dfbf2821d0a84972d9c1df01b311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjMzU5NTY1NGYwZGZiZjI4MjFkMGE4NDk3MmQ5YzFkZjAxYjMxMQ==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-09-11T15:53:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-09-11T15:53:22Z"}, "message": "re PR fortran/33040 ([ISO_C_BINDING] ICE in gfc_trans_structure_assign)\n\n2007-09-11  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33040\n\t* trans-expr.c (gfc_trans_structure_assign): Convert component\n\tC_NULL_PTR and C_NULL_FUNPTR component initializers to (void *).\n\t* trans-types.c (gfc_get_derived_type): Create a backend_decl for\n\tthe c_address field of C_PTR and C_FUNPTR and ensure initializer\n\tis of proper type/kind for (void *).\n\n2007-09-11  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33040\n\t* gfortran.dg/c_ptr_tests_11.f03: New test case.\n\nFrom-SVN: r128385", "tree": {"sha": "bcba799a5c8ebe83506fbae2c310b1dbef1ed363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcba799a5c8ebe83506fbae2c310b1dbef1ed363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dc3595654f0dfbf2821d0a84972d9c1df01b311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc3595654f0dfbf2821d0a84972d9c1df01b311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc3595654f0dfbf2821d0a84972d9c1df01b311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc3595654f0dfbf2821d0a84972d9c1df01b311/comments", "author": null, "committer": null, "parents": [{"sha": "fa6763a6fcd6757688a5ee739d4808bb09b1c5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa6763a6fcd6757688a5ee739d4808bb09b1c5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa6763a6fcd6757688a5ee739d4808bb09b1c5d4"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "99c13c6a16280e55bfce1e7b1009ddaffa65906a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9dc3595654f0dfbf2821d0a84972d9c1df01b311", "patch": "@@ -1,3 +1,12 @@\n+2007-09-11  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33040\n+\t* trans-expr.c (gfc_trans_structure_assign): Convert component\n+\tC_NULL_PTR and C_NULL_FUNPTR component initializers to (void *).\n+\t* trans-types.c (gfc_get_derived_type): Create a backend_decl for\n+\tthe c_address field of C_PTR and C_FUNPTR and ensure initializer\n+\tis of proper type/kind for (void *).\n+\n 2007-09-11  Jan Hubicka <jh@suse.cz>\n \n \t* f95-lang.c (gfc_expand_function): Kill."}, {"sha": "1a4f42443dff1a35add52c5b772ff056c6cf2dcc", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=9dc3595654f0dfbf2821d0a84972d9c1df01b311", "patch": "@@ -3155,6 +3155,19 @@ gfc_trans_structure_assign (tree dest, gfc_expr * expr)\n       if (!c->expr)\n         continue;\n \n+      /* Update the type/kind of the expression if it represents either\n+\t C_NULL_PTR or C_NULL_FUNPTR.  This is done here because this may\n+\t be the first place reached for initializing output variables that\n+\t have components of type C_PTR/C_FUNPTR that are initialized.  */\n+      if (c->expr->ts.type == BT_DERIVED && c->expr->ts.derived\n+\t  && c->expr->ts.derived->attr.is_iso_c)\n+        {\n+\t  c->expr->expr_type = EXPR_NULL;\n+\t  c->expr->ts.type = c->expr->ts.derived->ts.type;\n+\t  c->expr->ts.f90_type = c->expr->ts.derived->ts.f90_type;\n+\t  c->expr->ts.kind = c->expr->ts.derived->ts.kind;\n+\t}\n+      \n       field = cm->backend_decl;\n       tmp = build3 (COMPONENT_REF, TREE_TYPE (field), dest, field, NULL_TREE);\n       tmp = gfc_trans_subcomponent_assign (tmp, cm, c->expr);"}, {"sha": "ba72466372c0b790f3636bde3cb3b3d68719ab8e", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=9dc3595654f0dfbf2821d0a84972d9c1df01b311", "patch": "@@ -1688,16 +1688,29 @@ gfc_get_derived_type (gfc_symbol * derived)\n   /* See if it's one of the iso_c_binding derived types.  */\n   if (derived->attr.is_iso_c == 1)\n     {\n+      if (derived->backend_decl)\n+\treturn derived->backend_decl;\n+\n       if (derived->intmod_sym_id == ISOCBINDING_PTR)\n \tderived->backend_decl = ptr_type_node;\n       else\n \tderived->backend_decl = pfunc_type_node;\n+\n+      /* Create a backend_decl for the __c_ptr_c_address field.  */\n+      derived->components->backend_decl =\n+\tgfc_add_field_to_struct (&(derived->backend_decl->type.values),\n+\t\t\t\t derived->backend_decl,\n+\t\t\t\t get_identifier (derived->components->name),\n+\t\t\t\t gfc_typenode_for_spec (\n+\t\t\t\t   &(derived->components->ts)));\n+\n       derived->ts.kind = gfc_index_integer_kind;\n       derived->ts.type = BT_INTEGER;\n       /* Set the f90_type to BT_VOID as a way to recognize something of type\n          BT_INTEGER that needs to fit a void * for the purpose of the\n          iso_c_binding derived types.  */\n       derived->ts.f90_type = BT_VOID;\n+      \n       return derived->backend_decl;\n     }\n   \n@@ -1742,6 +1755,13 @@ gfc_get_derived_type (gfc_symbol * derived)\n           c->ts.type = c->ts.derived->ts.type;\n           c->ts.kind = c->ts.derived->ts.kind;\n           c->ts.f90_type = c->ts.derived->ts.f90_type;\n+\t  if (c->initializer)\n+\t    {\n+\t      c->initializer->ts.type = c->ts.type;\n+\t      c->initializer->ts.kind = c->ts.kind;\n+\t      c->initializer->ts.f90_type = c->ts.f90_type;\n+\t      c->initializer->expr_type = EXPR_NULL;\n+\t    }\n         }\n     }\n "}, {"sha": "c1d37557e452aa27dbb2ddecbbd1a91c4441a9e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dc3595654f0dfbf2821d0a84972d9c1df01b311", "patch": "@@ -1,3 +1,8 @@\n+2007-09-11  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33040\n+\t* gfortran.dg/c_ptr_tests_11.f03: New test case. \n+\n 2007-09-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/va-arg-pack-len-1.c: New test.\n@@ -25,15 +30,15 @@\n \n 2007-09-10  Harsha Jagasia <harsha.jagasia@amd.com>\n \n-        * gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: \n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: \n \tChange dg-final to expect 1 non-profitable loop and\n \t3 profitable loops.\n-        * gcc.dg/vect/costmodel/x86-64/costmodel-vect-31.c:\n+\t* gcc.dg/vect/costmodel/x86-64/costmodel-vect-31.c:\n \tChange dg-final to expect 1 non-profitable loop and\n \t3 profitable loops.\n-        * gcc.dg/vect/costmodel/x86-64/costmodel-fast-math-vect-pr29925.c:\n+\t* gcc.dg/vect/costmodel/x86-64/costmodel-fast-math-vect-pr29925.c:\n \tChange dg-final to expect 1 profitable loop.\n-        * gcc.dg/vect/costmodel/i386/costmodel-fast-math-vect-pr29925.c:\n+\t* gcc.dg/vect/costmodel/i386/costmodel-fast-math-vect-pr29925.c:\n \tChange dg-final to expect 1 profitable loop.\t\n \t\n 2007-09-10  Richard Sandiford  <richard@codesourcery.com>\n@@ -345,7 +350,7 @@\n \n 2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n \t    David Ung  <davidu@mips.com>\n-            Nigel Stephens <nigel@mips.com>\n+\t    Nigel Stephens <nigel@mips.com>\n \n \t* gcc.c-torture/compile/mipscop-1.c: Add nomips16 attributes.\n \t* gcc.c-torture/compile/mipscop-2.c: Likewise.\n@@ -378,7 +383,7 @@\n \n 2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n \t    David Ung  <davidu@mips.com>\n-            Nigel Stephens <nigel@mips.com>\n+\t    Nigel Stephens <nigel@mips.com>\n \n \t* gcc.target/mips/mips16-attributes.c: New.\n "}, {"sha": "9448f82ba8293ef27f129a303a60c155cc8eac48", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_11.f03", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc3595654f0dfbf2821d0a84972d9c1df01b311/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_11.f03?ref=9dc3595654f0dfbf2821d0a84972d9c1df01b311", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do compile }\n+! Verify that initialization of c_ptr components works.\n+module fgsl\n+  use, intrinsic :: iso_c_binding\n+  implicit none\n+  type, public :: fgsl_matrix\n+     private\n+     type(c_ptr) :: gsl_matrix = c_null_ptr\n+  end type fgsl_matrix\n+  type, public :: fgsl_multifit_fdfsolver\n+     private\n+     type(c_ptr) :: gsl_multifit_fdfsolver = c_null_ptr\n+  end type fgsl_multifit_fdfsolver\n+interface\n+  function gsl_multifit_fdfsolver_jac(s) bind(c)\n+    import :: c_ptr\n+    type(c_ptr), value :: s\n+    type(c_ptr) :: gsl_multifit_fdfsolver_jac\n+  end function gsl_multifit_fdfsolver_jac\n+end interface\n+contains\n+  function fgsl_multifit_fdfsolver_jac(s)\n+    type(fgsl_multifit_fdfsolver), intent(in) :: s\n+    type(fgsl_matrix) :: fgsl_multifit_fdfsolver_jac\n+    fgsl_multifit_fdfsolver_jac%gsl_matrix = &\n+         gsl_multifit_fdfsolver_jac(s%gsl_multifit_fdfsolver)\n+  end function fgsl_multifit_fdfsolver_jac\n+end module fgsl\n+\n+module m\n+  use, intrinsic :: iso_c_binding, only: c_ptr, c_null_ptr\n+  implicit none\n+  type t\n+    type(c_ptr) :: matrix  = c_null_ptr\n+  end type t\n+contains\n+  subroutine func(a)\n+    type(t), intent(out) :: a\n+  end subroutine func\n+end module m\n+! { dg-final { cleanup-modules \"fgsl m\" } } \n+"}]}