{"sha": "58f7c7e098b79c96403c8341823ec3ba1e8b3945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmN2M3ZTA5OGI3OWM5NjQwM2M4MzQxODIzZWMzYmExZThiMzk0NQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-05-17T08:11:52Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-05-17T18:20:57Z"}, "message": "[nvptx] Handle memmodel for atomic ops\n\nThe atomic ops in nvptx.md have memmodel arguments, which are currently\nignored.\n\nHandle these, fixing test-case fails libgomp.c-c++-common/reduction-{5,6}.c\non volta.\n\nTested libgomp on x86_64-linux with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2021-05-17  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/100497\n\t* config/nvptx/nvptx-protos.h (nvptx_output_atomic_insn): Declare\n\t* config/nvptx/nvptx.c (nvptx_output_barrier)\n\t(nvptx_output_atomic_insn): New function.\n\t(nvptx_print_operand): Add support for 'B'.\n\t* config/nvptx/nvptx.md: Use nvptx_output_atomic_insn for atomic\n\tinsns.", "tree": {"sha": "3a95b6457066badeac27a8dd7dcaf203681a1059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a95b6457066badeac27a8dd7dcaf203681a1059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f7c7e098b79c96403c8341823ec3ba1e8b3945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f7c7e098b79c96403c8341823ec3ba1e8b3945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f7c7e098b79c96403c8341823ec3ba1e8b3945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f7c7e098b79c96403c8341823ec3ba1e8b3945/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45aa7a447652e8541cc381d7ab128544f81ed857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45aa7a447652e8541cc381d7ab128544f81ed857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45aa7a447652e8541cc381d7ab128544f81ed857"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "b7e6ae2652296293fb43aaf74db5083abfc60c62", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f7c7e098b79c96403c8341823ec3ba1e8b3945/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f7c7e098b79c96403c8341823ec3ba1e8b3945/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=58f7c7e098b79c96403c8341823ec3ba1e8b3945", "patch": "@@ -57,5 +57,6 @@ extern const char *nvptx_output_set_softstack (unsigned);\n extern const char *nvptx_output_simt_enter (rtx, rtx, rtx);\n extern const char *nvptx_output_simt_exit (rtx);\n extern const char *nvptx_output_red_partition (rtx, rtx);\n+extern const char *nvptx_output_atomic_insn (const char *, rtx *, int, int);\n #endif\n #endif"}, {"sha": "722b0faa330cc97afda2052411bcc57a3b08277d", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f7c7e098b79c96403c8341823ec3ba1e8b3945/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f7c7e098b79c96403c8341823ec3ba1e8b3945/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=58f7c7e098b79c96403c8341823ec3ba1e8b3945", "patch": "@@ -2444,6 +2444,53 @@ nvptx_output_mov_insn (rtx dst, rtx src)\n   return \"%.\\tcvt%t0%t1\\t%0, %1;\";\n }\n \n+/* Output a pre/post barrier for MEM_OPERAND according to MEMMODEL.  */\n+\n+static void\n+nvptx_output_barrier (rtx *mem_operand, int memmodel, bool pre_p)\n+{\n+  bool post_p = !pre_p;\n+\n+  switch (memmodel)\n+    {\n+    case MEMMODEL_RELAXED:\n+      return;\n+    case MEMMODEL_CONSUME:\n+    case MEMMODEL_ACQUIRE:\n+    case MEMMODEL_SYNC_ACQUIRE:\n+      if (post_p)\n+\tbreak;\n+      return;\n+    case MEMMODEL_RELEASE:\n+    case MEMMODEL_SYNC_RELEASE:\n+      if (pre_p)\n+\tbreak;\n+      return;\n+    case MEMMODEL_ACQ_REL:\n+    case MEMMODEL_SEQ_CST:\n+    case MEMMODEL_SYNC_SEQ_CST:\n+      if (pre_p || post_p)\n+\tbreak;\n+      return;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  output_asm_insn (\"%.\\tmembar%B0;\", mem_operand);\n+}\n+\n+const char *\n+nvptx_output_atomic_insn (const char *asm_template, rtx *operands, int mem_pos,\n+\t\t\t  int memmodel_pos)\n+{\n+  nvptx_output_barrier (&operands[mem_pos], INTVAL (operands[memmodel_pos]),\n+\t\t\ttrue);\n+  output_asm_insn (asm_template, operands);\n+  nvptx_output_barrier (&operands[mem_pos], INTVAL (operands[memmodel_pos]),\n+\t\t\tfalse);\n+  return \"\";\n+}\n+\n static void nvptx_print_operand (FILE *, rtx, int);\n \n /* Output INSN, which is a call to CALLEE with result RESULT.  For ptx, this\n@@ -2660,6 +2707,36 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n \n   switch (code)\n     {\n+    case 'B':\n+      if (SYMBOL_REF_P (XEXP (x, 0)))\n+\tswitch (SYMBOL_DATA_AREA (XEXP (x, 0)))\n+\t  {\n+\t  case DATA_AREA_GENERIC:\n+\t    /* Assume worst-case: global.  */\n+\t    gcc_fallthrough (); /* FALLTHROUGH.  */\n+\t  case DATA_AREA_GLOBAL:\n+\t    break;\n+\t  case DATA_AREA_SHARED:\n+\t    fputs (\".cta\", file);\n+\t    return;\n+\t  case DATA_AREA_LOCAL:\n+\t  case DATA_AREA_CONST:\n+\t  case DATA_AREA_PARAM:\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n+\n+      /* There are 2 cases where membar.sys differs from membar.gl:\n+\t - host accesses global memory (f.i. systemwide atomics)\n+\t - 2 or more devices are setup in peer-to-peer mode, and one\n+\t   peer can access global memory of other peer.\n+\t Neither are currently supported by openMP/OpenACC on nvptx, but\n+\t that could change, so we default to membar.sys.  We could support\n+\t this more optimally by adding DATA_AREA_SYS and then emitting\n+\t .gl for DATA_AREA_GLOBAL and .sys for DATA_AREA_SYS.  */\n+      fputs (\".sys\", file);\n+      return;\n+\n     case 'A':\n       x = XEXP (x, 0);\n       gcc_fallthrough (); /* FALLTHROUGH. */"}, {"sha": "108de1c0c59c7a67005e11feeca87f30387f1292", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f7c7e098b79c96403c8341823ec3ba1e8b3945/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f7c7e098b79c96403c8341823ec3ba1e8b3945/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=58f7c7e098b79c96403c8341823ec3ba1e8b3945", "patch": "@@ -1642,7 +1642,11 @@\n    (set (match_dup 1)\n \t(unspec_volatile:SDIM [(const_int 0)] UNSPECV_CAS))]\n   \"\"\n-  \"%.\\\\tatom%A1.cas.b%T0\\\\t%0, %1, %2, %3;\"\n+  {\n+    const char *t\n+      = \"%.\\\\tatom%A1.cas.b%T0\\\\t%0, %1, %2, %3;\";\n+    return nvptx_output_atomic_insn (t, operands, 1, 4);\n+  }\n   [(set_attr \"atomic\" \"true\")])\n \n (define_insn \"atomic_exchange<mode>\"\n@@ -1654,7 +1658,11 @@\n    (set (match_dup 1)\n \t(match_operand:SDIM 2 \"nvptx_nonmemory_operand\" \"Ri\"))]\t;; input\n   \"\"\n-  \"%.\\\\tatom%A1.exch.b%T0\\\\t%0, %1, %2;\"\n+  {\n+    const char *t\n+      = \"%.\\tatom%A1.exch.b%T0\\t%0, %1, %2;\";\n+    return nvptx_output_atomic_insn (t, operands, 1, 3);\n+  }\n   [(set_attr \"atomic\" \"true\")])\n \n (define_insn \"atomic_fetch_add<mode>\"\n@@ -1667,7 +1675,11 @@\n    (set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(match_dup 1))]\n   \"\"\n-  \"%.\\\\tatom%A1.add%t0\\\\t%0, %1, %2;\"\n+  {\n+    const char *t\n+      = \"%.\\\\tatom%A1.add%t0\\\\t%0, %1, %2;\";\n+    return nvptx_output_atomic_insn (t, operands, 1, 3);\n+  }\n   [(set_attr \"atomic\" \"true\")])\n \n (define_insn \"atomic_fetch_addsf\"\n@@ -1680,7 +1692,11 @@\n    (set (match_operand:SF 0 \"nvptx_register_operand\" \"=R\")\n \t(match_dup 1))]\n   \"\"\n-  \"%.\\\\tatom%A1.add%t0\\\\t%0, %1, %2;\"\n+  {\n+    const char *t\n+      = \"%.\\\\tatom%A1.add%t0\\\\t%0, %1, %2;\";\n+    return nvptx_output_atomic_insn (t, operands, 1, 3);\n+  }\n   [(set_attr \"atomic\" \"true\")])\n \n (define_code_iterator any_logic [and ior xor])\n@@ -1696,7 +1712,12 @@\n    (set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(match_dup 1))]\n   \"<MODE>mode == SImode || TARGET_SM35\"\n-  \"%.\\\\tatom%A1.b%T0.<logic>\\\\t%0, %1, %2;\"\n+  {\n+    const char *t\n+      = \"%.\\\\tatom%A1.b%T0.<logic>\\\\t%0, %1, %2;\";\n+    return nvptx_output_atomic_insn (t, operands, 1, 3);\n+  }\n+\n   [(set_attr \"atomic\" \"true\")])\n \n (define_expand \"atomic_test_and_set\""}]}