{"sha": "f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmNGQ4ZDQwNzczM2M4ZjI3NGI0Y2I1YTk5OGNmMWE5NTQ4ZDNiZg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2013-04-11T13:01:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:01:09Z"}, "message": "exp_ch11.adb (Expand_N_Handled_Sequence_Of_Statements): Do not add cleanup actions in thunks associated with interface types.\n\n2013-04-11  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch11.adb (Expand_N_Handled_Sequence_Of_Statements): Do\n\tnot add cleanup actions in thunks associated with interface types.\n\t* exp_ch3.ad[sb] (Is_Variable_Size_Record): Move declaration to\n\tthe package spec.\n\t* exp_ch4.adb (Tagged_Conversion): Update call to\n\tExpand_Interface_Conversion since the parameter Is_Static is no\n\tlonger needed.\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Adding\n\tassertion to ensure that interface thunks are never handled by\n\tthis routine.\n\t(Expand_N_Simple_Function_Return): Do not rewrite this statement\n\tas an extended return statement in interface thunks, and do not\n\tperform copy in the secondary stack if the return statement is\n\tlocated in a thunk.\n\t* exp_disp.adb (Expand_Dispatching_Call): No longer displace\n\tthe pointer to the returned object in functions returning interface\n\ttypes.\n\t(Expand_Interface_Thunk): For functions returning interface types\n\tdisplace the pointer to the returned object.\n\t(Expand_Interface_Conversion): Remove formal\n\tIs_Static since this subprogram can now evaluate it locally.\n\t* sem_ch3.adb (Add_Internal_Interface_Entities): For functions\n\tpropagate the type returned by the covered interface primitive to\n\tthe internal interface entity. Needed by the thunk to generate\n\tthe code which displaces \"this\" to reference the corresponding\n\tsecondary dispatch table.\n\t* sem_disp.adb (Propagate_Tag): Update call to\n\tExpand_Interface_Conversion since the parameter Is_Static is no\n\tlonger needed.\n\t* sem_res.adb (Resolve_Type_Conversion): Update calls to\n\tExpand_Interface_Conversion since the parameter Is_Static is no\n\tlonger needed plus code cleanup.\n\nFrom-SVN: r197786", "tree": {"sha": "fa2d9ffd11568e840f3d65a5a1be065762b60a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa2d9ffd11568e840f3d65a5a1be065762b60a33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03eb6036fc6eb40d6e114121920e3093e49dfc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03eb6036fc6eb40d6e114121920e3093e49dfc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03eb6036fc6eb40d6e114121920e3093e49dfc18"}], "stats": {"total": 357, "additions": 235, "deletions": 122}, "files": [{"sha": "be71cdf9529c83f0414e6fc243fe4b7ae9b24b7d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -1,3 +1,38 @@\n+2013-04-11  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_N_Handled_Sequence_Of_Statements): Do\n+\tnot add cleanup actions in thunks associated with interface types.\n+\t* exp_ch3.ad[sb] (Is_Variable_Size_Record): Move declaration to\n+\tthe package spec.\n+\t* exp_ch4.adb (Tagged_Conversion): Update call to\n+\tExpand_Interface_Conversion since the parameter Is_Static is no\n+\tlonger needed.\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Adding\n+\tassertion to ensure that interface thunks are never handled by\n+\tthis routine.\n+\t(Expand_N_Simple_Function_Return): Do not rewrite this statement\n+\tas an extended return statement in interface thunks, and do not\n+\tperform copy in the secondary stack if the return statement is\n+\tlocated in a thunk.\n+\t* exp_disp.adb (Expand_Dispatching_Call): No longer displace\n+\tthe pointer to the returned object in functions returning interface\n+\ttypes.\n+\t(Expand_Interface_Thunk): For functions returning interface types\n+\tdisplace the pointer to the returned object.\n+\t(Expand_Interface_Conversion): Remove formal\n+\tIs_Static since this subprogram can now evaluate it locally.\n+\t* sem_ch3.adb (Add_Internal_Interface_Entities): For functions\n+\tpropagate the type returned by the covered interface primitive to\n+\tthe internal interface entity. Needed by the thunk to generate\n+\tthe code which displaces \"this\" to reference the corresponding\n+\tsecondary dispatch table.\n+\t* sem_disp.adb (Propagate_Tag): Update call to\n+\tExpand_Interface_Conversion since the parameter Is_Static is no\n+\tlonger needed.\n+\t* sem_res.adb (Resolve_Type_Conversion): Update calls to\n+\tExpand_Interface_Conversion since the parameter Is_Static is no\n+\tlonger needed plus code cleanup.\n+\n 2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* init.c (RETURN_ADDR_OFFSET): Delete as unused."}, {"sha": "7378885c7c2e057583772f3c7b4df657d9249846", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -1402,10 +1402,16 @@ package body Exp_Ch11 is\n \n       --  Add clean up actions if required\n \n-      if Nkind (Parent (N)) /= N_Package_Body\n-        and then Nkind (Parent (N)) /= N_Accept_Statement\n-        and then Nkind (Parent (N)) /= N_Extended_Return_Statement\n+      if not Nkind_In (Parent (N), N_Package_Body,\n+                                   N_Accept_Statement,\n+                                   N_Extended_Return_Statement)\n         and then not Delay_Cleanups (Current_Scope)\n+\n+        --  No cleanup action needed in thunks associated with interfaces\n+        --  because they only displace the pointer to the object.\n+\n+        and then not (Is_Subprogram (Current_Scope)\n+                       and then Is_Thunk (Current_Scope))\n       then\n          Expand_Cleanup_Actions (Parent (N));\n       else"}, {"sha": "6369d44e4df4c0950bc5bb866512833d4323efe4", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -232,9 +232,6 @@ package body Exp_Ch3 is\n    function Is_Variable_Size_Array (E : Entity_Id) return Boolean;\n    --  Returns true if E has variable size components\n \n-   function Is_Variable_Size_Record (E : Entity_Id) return Boolean;\n-   --  Returns true if E has variable size components\n-\n    function Make_Eq_Body\n      (Typ     : Entity_Id;\n       Eq_Name : Name_Id) return Node_Id;"}, {"sha": "6ad53ad60ca050e835d6cf362c493ce2fc03b6f9", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -104,6 +104,9 @@ package Exp_Ch3 is\n    --  then tags components located at variable positions of Target are\n    --  initialized.\n \n+   function Is_Variable_Size_Record (E : Entity_Id) return Boolean;\n+   --  Returns true if E has variable size components (move to sem_util???)\n+\n    function Needs_Simple_Initialization\n      (T           : Entity_Id;\n       Consider_IS : Boolean := True) return Boolean;"}, {"sha": "ee8ce836803be921aed33781e343075fb1c82e73", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -10376,7 +10376,7 @@ package body Exp_Ch4 is\n             --  Ada 2005 (AI-251): Handle interface type conversion\n \n             if Is_Interface (Actual_Op_Typ) then\n-               Expand_Interface_Conversion (N, Is_Static => False);\n+               Expand_Interface_Conversion (N);\n                goto Done;\n             end if;\n "}, {"sha": "931782a57e59f98892975de026ed7ea8c9f21fef", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -5489,6 +5489,13 @@ package body Exp_Ch6 is\n    --  Start of processing for Expand_N_Extended_Return_Statement\n \n    begin\n+      --  Given that functionality of interface thunks is simple (just displace\n+      --  the pointer to the object) they are always handled by means of\n+      --  simple return statements.\n+\n+      pragma Assert (not Is_Subprogram (Current_Scope)\n+                      or else not Is_Thunk (Current_Scope));\n+\n       if Nkind (Ret_Obj_Decl) = N_Object_Declaration then\n          Exp := Expression (Ret_Obj_Decl);\n       else\n@@ -7132,18 +7139,27 @@ package body Exp_Ch6 is\n         and then Is_Immutably_Limited_Type (Etype (Expression (N)))\n         and then Ada_Version >= Ada_2005\n         and then not Debug_Flag_Dot_L\n+\n+         --  The functionality of interface thunks is simple and it is always\n+         --  handled by means of simple return statements. This leaves their\n+         --  expansion simple and clean.\n+\n+        and then not (Is_Subprogram (Current_Scope)\n+                       and then Is_Thunk (Current_Scope))\n       then\n          declare\n             Return_Object_Entity : constant Entity_Id :=\n                                      Make_Temporary (Loc, 'R', Exp);\n+\n             Obj_Decl : constant Node_Id :=\n                          Make_Object_Declaration (Loc,\n                            Defining_Identifier => Return_Object_Entity,\n                            Object_Definition   => Subtype_Ind,\n                            Expression          => Exp);\n \n-            Ext : constant Node_Id := Make_Extended_Return_Statement (Loc,\n-                    Return_Object_Declarations => New_List (Obj_Decl));\n+            Ext : constant Node_Id :=\n+                    Make_Extended_Return_Statement (Loc,\n+                      Return_Object_Declarations => New_List (Obj_Decl));\n             --  Do not perform this high-level optimization if the result type\n             --  is an interface because the \"this\" pointer must be displaced.\n \n@@ -7205,6 +7221,16 @@ package body Exp_Ch6 is\n       then\n          null;\n \n+      --  No copy needed for thunks returning interface type objects since\n+      --  the object is returned by reference and the maximum functionality\n+      --  required is just to displace the pointer.\n+\n+      elsif Is_Subprogram (Current_Scope)\n+        and then Is_Thunk (Current_Scope)\n+        and then Is_Interface (Exptyp)\n+      then\n+         null;\n+\n       elsif not Requires_Transient_Scope (R_Type) then\n \n          --  Mutable records with no variable length components are not"}, {"sha": "2df3a94b4e4e89e9594b9e325e61c4f757dc2ef5", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 131, "deletions": 81, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -30,6 +30,7 @@ with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Atag; use Exp_Atag;\n+with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_CG;   use Exp_CG;\n with Exp_Dbug; use Exp_Dbug;\n@@ -1072,89 +1073,93 @@ package body Exp_Disp is\n       --  to avoid the generation of spurious warnings under ZFP run-time.\n \n       Analyze_And_Resolve (Call_Node, Call_Typ, Suppress => All_Checks);\n-\n-      --  For functions returning interface types add implicit conversion to\n-      --  force the displacement of the pointer to the object to reference\n-      --  the corresponding secondary dispatch table. This is needed to\n-      --  handle well nested calls through secondary dispatch tables\n-      --  (for example Obj.Prim1.Prim2).\n-\n-      if Is_Interface (Res_Typ) then\n-         Rewrite (Call_Node,\n-           Make_Type_Conversion (Loc,\n-             Subtype_Mark => New_Occurrence_Of (Res_Typ, Loc),\n-             Expression => Relocate_Node (Call_Node)));\n-         Set_Etype (Call_Node, Res_Typ);\n-         Expand_Interface_Conversion (Call_Node, Is_Static => False);\n-         Force_Evaluation (Call_Node);\n-\n-         pragma Assert (Nkind (Call_Node) = N_Explicit_Dereference\n-           and then Nkind (Prefix (Call_Node)) = N_Identifier\n-           and then Nkind (Parent (Entity (Prefix (Call_Node))))\n-                             = N_Object_Declaration);\n-         Set_Assignment_OK (Parent (Entity (Prefix (Call_Node))));\n-\n-         if Nkind (Parent (Call_Node)) = N_Object_Declaration then\n-            Set_Assignment_OK (Parent (Call_Node));\n-         end if;\n-      end if;\n    end Expand_Dispatching_Call;\n \n    ---------------------------------\n    -- Expand_Interface_Conversion --\n    ---------------------------------\n \n-   procedure Expand_Interface_Conversion\n-     (N         : Node_Id;\n-      Is_Static : Boolean := True)\n-   is\n-      Loc         : constant Source_Ptr := Sloc (N);\n-      Etyp        : constant Entity_Id  := Etype (N);\n-      Operand     : constant Node_Id    := Expression (N);\n-      Operand_Typ : Entity_Id           := Etype (Operand);\n-      Func        : Node_Id;\n-      Iface_Typ   : Entity_Id           := Etype (N);\n-      Iface_Tag   : Entity_Id;\n+   procedure Expand_Interface_Conversion (N : Node_Id) is\n+      function Underlying_Record_Type (Typ : Entity_Id) return Entity_Id;\n+      --  Return the underlying record type of Typ.\n \n-   begin\n-      --  Ada 2005 (AI-345): Handle synchronized interface type derivations\n+      ----------------------------\n+      -- Underlying_Record_Type --\n+      ----------------------------\n \n-      if Is_Concurrent_Type (Operand_Typ) then\n-         Operand_Typ := Base_Type (Corresponding_Record_Type (Operand_Typ));\n-      end if;\n+      function Underlying_Record_Type (Typ : Entity_Id) return Entity_Id is\n+         E : Entity_Id := Typ;\n \n-      --  Handle access to class-wide interface types\n+      begin\n+         --  Handle access to class-wide interface types\n \n-      if Is_Access_Type (Iface_Typ) then\n-         Iface_Typ := Etype (Directly_Designated_Type (Iface_Typ));\n-      end if;\n+         if Is_Access_Type (E) then\n+            E := Etype (Directly_Designated_Type (E));\n+         end if;\n \n-      --  Handle class-wide interface types. This conversion can appear\n-      --  explicitly in the source code. Example: I'Class (Obj)\n+         --  Handle class-wide types. This conversion can appear explicitly in\n+         --  the source code. Example: I'Class (Obj)\n \n-      if Is_Class_Wide_Type (Iface_Typ) then\n-         Iface_Typ := Root_Type (Iface_Typ);\n-      end if;\n+         if Is_Class_Wide_Type (E) then\n+            E := Root_Type (E);\n+         end if;\n \n-      --  If the target type is a tagged synchronized type, the dispatch table\n-      --  info is in the corresponding record type.\n+         --  If the target type is a tagged synchronized type, the dispatch\n+         --  table info is in the corresponding record type.\n \n-      if Is_Concurrent_Type (Iface_Typ) then\n-         Iface_Typ := Corresponding_Record_Type (Iface_Typ);\n-      end if;\n+         if Is_Concurrent_Type (E) then\n+            E := Corresponding_Record_Type (E);\n+         end if;\n \n-      --  Handle private types\n+         --  Handle private types\n+\n+         E := Underlying_Type (E);\n+\n+         --  Handle subtypes\n \n-      Iface_Typ := Underlying_Type (Iface_Typ);\n+         return Base_Type (E);\n+      end Underlying_Record_Type;\n \n+      --  Local variables\n+\n+      Loc         : constant Source_Ptr := Sloc (N);\n+      Etyp        : constant Entity_Id  := Etype (N);\n+      Operand     : constant Node_Id    := Expression (N);\n+      Operand_Typ : Entity_Id           := Etype (Operand);\n+      Func        : Node_Id;\n+      Iface_Typ   : constant Entity_Id  := Underlying_Record_Type (Etype (N));\n+      Iface_Tag   : Entity_Id;\n+      Is_Static   : Boolean;\n+\n+   --  Start of processing for Expand_Interface_Conversion\n+\n+   begin\n       --  Freeze the entity associated with the target interface to have\n       --  available the attribute Access_Disp_Table.\n \n       Freeze_Before (N, Iface_Typ);\n \n-      pragma Assert (not Is_Static\n-        or else (not Is_Class_Wide_Type (Iface_Typ)\n-                  and then Is_Interface (Iface_Typ)));\n+      --  Ada 2005 (AI-345): Handle synchronized interface type derivations\n+\n+      if Is_Concurrent_Type (Operand_Typ) then\n+         Operand_Typ := Base_Type (Corresponding_Record_Type (Operand_Typ));\n+      end if;\n+\n+      --  Evaluate if we can statically displace the pointer to the object\n+\n+      declare\n+         Opnd_Typ : constant Node_Id := Underlying_Record_Type (Operand_Typ);\n+\n+      begin\n+         Is_Static :=\n+            not Is_Interface (Opnd_Typ)\n+              and then Interface_Present_In_Ancestor\n+                         (Typ   => Opnd_Typ,\n+                          Iface => Iface_Typ)\n+              and then (Etype (Opnd_Typ) = Opnd_Typ\n+                         or else not\n+                           Is_Variable_Size_Record (Etype (Opnd_Typ)));\n+      end;\n \n       if not Tagged_Type_Expansion then\n          if VM_Target /= No_VM then\n@@ -1166,16 +1171,14 @@ package body Exp_Disp is\n                Operand_Typ := Root_Type (Operand_Typ);\n             end if;\n \n-            if not Is_Static\n-              and then Operand_Typ /= Iface_Typ\n-            then\n+            if not Is_Static and then Operand_Typ /= Iface_Typ then\n                Insert_Action (N,\n                  Make_Procedure_Call_Statement (Loc,\n                    Name => New_Occurrence_Of\n                             (RTE (RE_Check_Interface_Conversion), Loc),\n                    Parameter_Associations => New_List (\n                      Make_Attribute_Reference (Loc,\n-                       Prefix => Duplicate_Subexpr (Expression (N)),\n+                       Prefix         => Duplicate_Subexpr (Expression (N)),\n                        Attribute_Name => Name_Tag),\n                      Make_Attribute_Reference (Loc,\n                        Prefix         => New_Reference_To (Iface_Typ, Loc),\n@@ -1904,22 +1907,69 @@ package body Exp_Disp is\n       --  Function case\n \n       else pragma Assert (Ekind (Target) = E_Function);\n-         Thunk_Code :=\n-           Make_Subprogram_Body (Loc,\n-              Specification =>\n-                Make_Function_Specification (Loc,\n-                  Defining_Unit_Name       => Thunk_Id,\n-                  Parameter_Specifications => Formals,\n-                  Result_Definition =>\n-                    New_Copy (Result_Definition (Parent (Target)))),\n-              Declarations => Decl,\n-              Handled_Statement_Sequence =>\n-                Make_Handled_Sequence_Of_Statements (Loc,\n-                  Statements => New_List (\n-                    Make_Simple_Return_Statement (Loc,\n-                      Make_Function_Call (Loc,\n-                        Name => New_Occurrence_Of (Target, Loc),\n-                        Parameter_Associations => Actuals)))));\n+         declare\n+            Result_Def : Node_Id;\n+            Call_Node  : Node_Id;\n+\n+         begin\n+            Call_Node :=\n+              Make_Function_Call (Loc,\n+                Name                   => New_Occurrence_Of (Target, Loc),\n+                Parameter_Associations => Actuals);\n+\n+            if not Is_Interface (Etype (Prim)) then\n+               Result_Def := New_Copy (Result_Definition (Parent (Target)));\n+\n+            --  Thunk of function returning a class-wide interface object. No\n+            --  extra displacement needed since the displacement is generated\n+            --  in the return statement of Prim. Example:\n+\n+            --    type Iface is interface ...\n+            --    function F (O : Iface) return Iface'Class;\n+\n+            --    type T is new ... and Iface with ...\n+            --    function F (O : T) return Iface'Class;\n+\n+            elsif Is_Class_Wide_Type (Etype (Prim)) then\n+               Result_Def := New_Occurrence_Of (Etype (Prim), Loc);\n+\n+            --  Thunk of function returning an interface object. Displacement\n+            --  needed. Example:\n+\n+            --    type Iface is interface ...\n+            --    function F (O : Iface) return Iface;\n+\n+            --    type T is new ... and Iface with ...\n+            --    function F (O : T) return T;\n+\n+            else\n+               Result_Def :=\n+                 New_Occurrence_Of (Class_Wide_Type (Etype (Prim)), Loc);\n+\n+               --  Adding implicit conversion to force the displacement of\n+               --  the pointer to the object to reference the corresponding\n+               --  secondary dispatch table.\n+\n+               Call_Node :=\n+                 Make_Type_Conversion (Loc,\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (Class_Wide_Type (Etype (Prim)), Loc),\n+                   Expression   => Relocate_Node (Call_Node));\n+            end if;\n+\n+            Thunk_Code :=\n+              Make_Subprogram_Body (Loc,\n+                Specification =>\n+                  Make_Function_Specification (Loc,\n+                    Defining_Unit_Name       => Thunk_Id,\n+                    Parameter_Specifications => Formals,\n+                    Result_Definition        => Result_Def),\n+                Declarations => Decl,\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => New_List (\n+                      Make_Simple_Return_Statement (Loc, Call_Node))));\n+         end;\n       end if;\n    end Expand_Interface_Thunk;\n "}, {"sha": "67b8be0d4b5a8b1dc8b4e446193f208ba1502b06", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -222,12 +222,10 @@ package Exp_Disp is\n    --  Ada 2005 (AI-251): Displace all the actuals corresponding to class-wide\n    --  interfaces to reference the interface tag of the actual object\n \n-   procedure Expand_Interface_Conversion\n-     (N         : Node_Id;\n-      Is_Static : Boolean := True);\n-   --  Ada 2005 (AI-251): N is a type-conversion node. Reference the base of\n-   --  the object to give access to the interface tag associated with the\n-   --  secondary dispatch table.\n+   procedure Expand_Interface_Conversion (N : Node_Id);\n+   --  Ada 2005 (AI-251): N is a type-conversion node. Displace the pointer\n+   --  to the object to give access to the interface tag associated with the\n+   --  dispatch table of the target type.\n \n    procedure Expand_Interface_Thunk\n      (Prim       : Node_Id;"}, {"sha": "2e0cdf7643be2bde365a0a7920f2631337d65bc8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -1661,6 +1661,15 @@ package body Sem_Ch3 is\n                  (New_Subp, Is_Abstract_Subprogram (Prim));\n                Set_Interface_Alias (New_Subp, Iface_Prim);\n \n+               --  If the returned type is an interface then propagate it to\n+               --  the returned type. Needed by the thunk to generate the code\n+               --  which displaces \"this\" to reference the corresponding\n+               --  secondary dispatch table in the returned object.\n+\n+               if Is_Interface (Etype (Iface_Prim)) then\n+                  Set_Etype (New_Subp, Etype (Iface_Prim));\n+               end if;\n+\n                --  Internal entities associated with interface types are\n                --  only registered in the list of primitives of the tagged\n                --  type. They are only used to fill the contents of the"}, {"sha": "d7d73b438c17e7088050056b702302f68001f323", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2445,7 +2445,7 @@ package body Sem_Disp is\n                Set_Etype (Call_Node, Etype (Control));\n                Set_Analyzed (Call_Node);\n \n-               Expand_Interface_Conversion (Call_Node, Is_Static => False);\n+               Expand_Interface_Conversion (Call_Node);\n             end if;\n          end;\n "}, {"sha": "764ff18ab7a901c2440fb97ea2b13ac1855562f5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f6f4d8d407733c8f274b4cb5a998cf1a9548d3bf", "patch": "@@ -9757,7 +9757,7 @@ package body Sem_Res is\n                      N);\n \n                else\n-                  Expand_Interface_Conversion (N, Is_Static => False);\n+                  Expand_Interface_Conversion (N);\n                end if;\n \n             --  Conversion to interface type\n@@ -9770,29 +9770,18 @@ package body Sem_Res is\n                   Opnd := Etype (Opnd);\n                end if;\n \n-               if not Interface_Present_In_Ancestor\n-                        (Typ   => Opnd,\n-                         Iface => Target)\n+               if Is_Class_Wide_Type (Opnd)\n+                 or else Interface_Present_In_Ancestor\n+                           (Typ   => Opnd,\n+                            Iface => Target)\n                then\n-                  if Is_Class_Wide_Type (Opnd) then\n-\n-                     --  The static analysis is not enough to know if the\n-                     --  interface is implemented or not. Hence we must pass\n-                     --  the work to the expander to generate code to evaluate\n-                     --  the conversion at run time.\n-\n-                     Expand_Interface_Conversion (N, Is_Static => False);\n-\n-                  else\n-                     Error_Msg_Name_1 := Chars (Etype (Target));\n-                     Error_Msg_Name_2 := Chars (Opnd);\n-                     Error_Msg_N\n-                       (\"wrong interface conversion (% is not a progenitor \"\n-                        & \"of %)\", N);\n-                  end if;\n-\n-               else\n                   Expand_Interface_Conversion (N);\n+               else\n+                  Error_Msg_Name_1 := Chars (Etype (Target));\n+                  Error_Msg_Name_2 := Chars (Opnd);\n+                  Error_Msg_N\n+                    (\"wrong interface conversion (% is not a progenitor \"\n+                     & \"of %)\", N);\n                end if;\n             end if;\n          end;"}]}