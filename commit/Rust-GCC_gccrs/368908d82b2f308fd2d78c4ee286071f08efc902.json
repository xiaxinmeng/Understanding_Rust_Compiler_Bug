{"sha": "368908d82b2f308fd2d78c4ee286071f08efc902", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4OTA4ZDgyYjJmMzA4ZmQyZDc4YzRlZTI4NjA3MWYwOGVmYzkwMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2009-09-24T19:32:32Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2009-09-24T19:32:32Z"}, "message": "Remove VSX load/store with update instructions\n\nFrom-SVN: r152141", "tree": {"sha": "a71514214b59bf3776b84e4f145bf7a4a75392d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a71514214b59bf3776b84e4f145bf7a4a75392d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/368908d82b2f308fd2d78c4ee286071f08efc902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368908d82b2f308fd2d78c4ee286071f08efc902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368908d82b2f308fd2d78c4ee286071f08efc902", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368908d82b2f308fd2d78c4ee286071f08efc902/comments", "author": null, "committer": null, "parents": [{"sha": "0a38153f2e702889083b55a8325aeffb92fdaebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a38153f2e702889083b55a8325aeffb92fdaebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a38153f2e702889083b55a8325aeffb92fdaebf"}], "stats": {"total": 123, "additions": 39, "deletions": 84}, "files": [{"sha": "9fbcb517e324cff262d435ea39adbf4e3a38c8c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=368908d82b2f308fd2d78c4ee286071f08efc902", "patch": "@@ -1,3 +1,20 @@\n+2009-09-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/predicates.md (indexed_or_indirect_operand):\n+\tDelete VSX load/store with update support.\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_address_p): Ditto.\n+\t* config/rs6000/vsx.md (vsx_mov<mode>): Ditto.\n+\t(vsx_movti): Ditto.\n+\t(VSX_U): Delete.\n+\t(VSbit): Ditto.\n+\t(VStype_load_update): Ditto.\n+\t(VStype_store_update): Ditto.\n+\t(vsx_load<VSX_U:mode>_update_<P:mptrsize>): Ditto.\n+\t(vsx_store<VSX_U:mode>_update_<P:mptrsize>): Ditto.\n+\n+\t* config/rs6000/rs6000.h (enum rs6000_builtins): Delete VSX\n+\tload/store with update builtins.\n+\n 2009-09-24  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* libgcc2.c (L_trampoline): Prototype for getpagesize"}, {"sha": "d03cce6f8a2d4aca6d18f1dfd40654e2abc06ad3", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=368908d82b2f308fd2d78c4ee286071f08efc902", "patch": "@@ -448,10 +448,6 @@\n       && INTVAL (XEXP (op, 1)) == -16)\n     op = XEXP (op, 0);\n \n-  else if (VECTOR_MEM_VSX_P (mode)\n-\t   && GET_CODE (op) == PRE_MODIFY)\n-    op = XEXP (op, 1);\n-\n   return indexed_or_indirect_address (op, mode);\n })\n "}, {"sha": "2de4ffad04661635a0654a2865c4a117f841e887", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=368908d82b2f308fd2d78c4ee286071f08efc902", "patch": "@@ -5701,12 +5701,6 @@ rs6000_legitimate_address_p (enum machine_mode mode, rtx x, bool reg_ok_strict)\n       && !avoiding_indexed_address_p (mode)\n       && legitimate_indexed_address_p (x, reg_ok_strict))\n     return 1;\n-  if (GET_CODE (x) == PRE_MODIFY\n-      && VECTOR_MEM_VSX_P (mode)\n-      && TARGET_UPDATE\n-      && legitimate_indexed_address_p (XEXP (x, 1), reg_ok_strict)\n-      && rtx_equal_p (XEXP (XEXP (x, 1), 0), XEXP (x, 0)))\n-    return 1;\n   if (GET_CODE (x) == PRE_MODIFY\n       && mode != TImode\n       && mode != TFmode\n@@ -5715,7 +5709,7 @@ rs6000_legitimate_address_p (enum machine_mode mode, rtx x, bool reg_ok_strict)\n \t  || TARGET_POWERPC64\n \t  || ((mode != DFmode && mode != DDmode) || TARGET_E500_DOUBLE))\n       && (TARGET_POWERPC64 || mode != DImode)\n-      && !VECTOR_MEM_ALTIVEC_P (mode)\n+      && !VECTOR_MEM_ALTIVEC_OR_VSX_P (mode)\n       && !SPE_VECTOR_MODE (mode)\n       /* Restrict addressing for DI because of our SUBREG hackery.  */\n       && !(TARGET_E500_DOUBLE\n@@ -10912,7 +10906,7 @@ static void\n rs6000_init_builtins (void)\n {\n   tree tdecl;\n-  \n+\n   V2SI_type_node = build_vector_type (intSI_type_node, 2);\n   V2SF_type_node = build_vector_type (float_type_node, 2);\n   V2DI_type_node = build_vector_type (intDI_type_node, 2);"}, {"sha": "52d9a594be2275899db4ad8a8614b52364789600", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=368908d82b2f308fd2d78c4ee286071f08efc902", "patch": "@@ -3159,18 +3159,12 @@ enum rs6000_builtins\n   RS6000_BUILTIN_BSWAP_HI,\n \n   /* VSX builtins.  */\n-  VSX_BUILTIN_LXSDUX,\n   VSX_BUILTIN_LXSDX,\n-  VSX_BUILTIN_LXVD2UX,\n   VSX_BUILTIN_LXVD2X,\n   VSX_BUILTIN_LXVDSX,\n-  VSX_BUILTIN_LXVW4UX,\n   VSX_BUILTIN_LXVW4X,\n-  VSX_BUILTIN_STXSDUX,\n   VSX_BUILTIN_STXSDX,\n-  VSX_BUILTIN_STXVD2UX,\n   VSX_BUILTIN_STXVD2X,\n-  VSX_BUILTIN_STXVW4UX,\n   VSX_BUILTIN_STXVW4X,\n   VSX_BUILTIN_XSABSDP,\n   VSX_BUILTIN_XSADDDP,"}, {"sha": "7d572a48412b7ee0db2c17a791bced6d27020da9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 20, "deletions": 66, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368908d82b2f308fd2d78c4ee286071f08efc902/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=368908d82b2f308fd2d78c4ee286071f08efc902", "patch": "@@ -38,9 +38,6 @@\n ;; it to use gprs as well as vsx registers.\n (define_mode_iterator VSX_M [V16QI V8HI V4SI V2DI V4SF V2DF])\n \n-;; Iterator for types for load/store with update\n-(define_mode_iterator VSX_U [V16QI V8HI V4SI V2DI V4SF V2DF TI DF])\n-\n ;; Map into the appropriate load/store name based on the type\n (define_mode_attr VSm  [(V16QI \"vw4\")\n \t\t\t(V8HI  \"vw4\")\n@@ -108,10 +105,6 @@\n \t\t       (V2DF \"d\")\n \t\t       (DF   \"d\")])\n \n-;; Bitsize for DF load with update\n-(define_mode_attr VSbit [(SI \"32\")\n-\t\t\t (DI \"64\")])\n-\n ;; Map into either s or v, depending on whether this is a scalar or vector\n ;; operation\n (define_mode_attr VSv\t[(V16QI \"v\")\n@@ -186,26 +179,6 @@\n \t\t\t     (V8HI\t\"HI\")\n \t\t\t     (V16QI\t\"QI\")])\n \t\t\t     \n-;; Appropriate type for load + update\n-(define_mode_attr VStype_load_update [(V16QI \"vecload\")\n-\t\t\t\t      (V8HI  \"vecload\")\n-\t\t\t\t      (V4SI  \"vecload\")\n-\t\t\t\t      (V4SF  \"vecload\")\n-\t\t\t\t      (V2DI  \"vecload\")\n-\t\t\t\t      (V2DF  \"vecload\")\n-\t\t\t\t      (TI    \"vecload\")\n-\t\t\t\t      (DF    \"fpload\")])\n-\n-;; Appropriate type for store + update\n-(define_mode_attr VStype_store_update [(V16QI \"vecstore\")\n-\t\t\t\t       (V8HI  \"vecstore\")\n-\t\t\t\t       (V4SI  \"vecstore\")\n-\t\t\t\t       (V4SF  \"vecstore\")\n-\t\t\t\t       (V2DI  \"vecstore\")\n-\t\t\t\t       (V2DF  \"vecstore\")\n-\t\t\t\t       (TI    \"vecstore\")\n-\t\t\t\t       (DF    \"fpstore\")])\n-\n ;; Constants for creating unspecs\n (define_constants\n   [(UNSPEC_VSX_CONCAT\t\t500)\n@@ -243,11 +216,19 @@\n     {\n     case 0:\n     case 3:\n-      return \"stx<VSm>%U0x %x1,%y0\";\n+      gcc_assert (MEM_P (operands[0])\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_INC\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_DEC\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_MODIFY);\n+      return \"stx<VSm>x %x1,%y0\";\n \n     case 1:\n     case 4:\n-      return \"lx<VSm>%U0x %x0,%y1\";\n+      gcc_assert (MEM_P (operands[1])\n+\t\t  && GET_CODE (XEXP (operands[1], 0)) != PRE_INC\n+\t\t  && GET_CODE (XEXP (operands[1], 0)) != PRE_DEC\n+\t\t  && GET_CODE (XEXP (operands[1], 0)) != PRE_MODIFY);\n+      return \"lx<VSm>x %x0,%y1\";\n \n     case 2:\n     case 5:\n@@ -266,9 +247,17 @@\n       return output_vec_const_move (operands);\n \n     case 12:\n+      gcc_assert (MEM_P (operands[0])\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_INC\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_DEC\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_MODIFY);\n       return \"stvx %1,%y0\";\n \n     case 13:\n+      gcc_assert (MEM_P (operands[0])\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_INC\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_DEC\n+\t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_MODIFY);\n       return \"lvx %0,%y1\";\n \n     default:\n@@ -289,10 +278,10 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"stxvd2%U0x %x1,%y0\";\n+      return \"stxvd2x %x1,%y0\";\n \n     case 1:\n-      return \"lxvd2%U0x %x0,%y1\";\n+      return \"lxvd2x %x0,%y1\";\n \n     case 2:\n       return \"xxlor %x0,%x1,%x1\";\n@@ -320,41 +309,6 @@\n }\n   [(set_attr \"type\" \"vecstore,vecload,vecsimple,*,*,*,vecsimple,*,vecstore,vecload\")])\n \n-;; Load/store with update\n-;; Define insns that do load or store with update.  Because VSX only has\n-;; reg+reg addressing, pre-decrement or pre-increment is unlikely to be\n-;; generated.\n-;;\n-;; In all these cases, we use operands 0 and 1 for the register being\n-;; incremented because those are the operands that local-alloc will\n-;; tie and these are the pair most likely to be tieable (and the ones\n-;; that will benefit the most).\n-\n-(define_insn \"*vsx_load<VSX_U:mode>_update_<P:mptrsize>\"\n-  [(set (match_operand:VSX_U 3 \"vsx_register_operand\" \"=<VSr>,?wa\")\n-\t(mem:VSX_U (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t   (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:P (match_dup 1)\n-\t\t(match_dup 2)))]\n-  \"<P:tptrsize> && TARGET_UPDATE && VECTOR_MEM_VSX_P (<MODE>mode)\"\n-  \"lx<VSm>ux %x3,%0,%2\"\n-  [(set_attr \"type\" \"<VSX_U:VStype_load_update>\")])\n-\n-(define_insn \"*vsx_store<mode>_update_<P:mptrsize>\"\n-  [(set (mem:VSX_U (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t   (match_operand:P 2 \"gpc_reg_operand\" \"r,r\")))\n-\t(match_operand:VSX_U 3 \"gpc_reg_operand\" \"<VSr>,?wa\"))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:P (match_dup 1)\n-\t\t(match_dup 2)))]\n-  \"<P:tptrsize> && TARGET_UPDATE && VECTOR_MEM_VSX_P (<MODE>mode)\"\n-  \"stx<VSm>ux %x3,%0,%2\"\n-  [(set_attr \"type\" \"<VSX_U:VStype_store_update>\")])\n-\n-;; We may need to have a varient on the pattern for use in the prologue\n-;; that doesn't depend on TARGET_UPDATE.\n-\n \f\n ;; VSX scalar and vector floating point arithmetic instructions\n (define_insn \"*vsx_add<mode>3\""}]}