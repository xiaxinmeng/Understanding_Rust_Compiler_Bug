{"sha": "51fabca55a83f4e2efad3cdccd6d312b06540c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFmYWJjYTU1YTgzZjRlMmVmYWQzY2RjY2Q2ZDMxMmIwNjU0MGM3Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-10-17T20:39:13Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-10-17T20:39:13Z"}, "message": "config.gcc: Update c4x and i370 for C front end-specific dependencies.\n\n\t* config.gcc: Update c4x and i370 for C front end-specific\n\tdependencies.\n\t* config/c4x/c4x-c.c: New.\n\t* config/c4x/c4x-protos.h (c4x_handle_pragma): Remove.\n\t(code_tree, data_tree, pure_tree, noreturn_tree, interrupt_tree):\n\tNew declarations.\n\t* config/c4x/c4x.c: Don't include c-lex.h or c-pragma.h.\n\t(code_tree, data_tree, pure_tree, noreturn_tree, interrupt_tree):\n\tMake extern.\n\t(c4x_init_pragma): Remove.\n\t(c4x_parse_pragma, c4x_pr_CODE_SECTION, c4x_pr_DATA_SECTION,\n\tc4x_pr_FUNC_IS_PURE, c4x_pr_FUNC_NEVER_RETURNS, c4x_pr_INTERRUPT,\n\tc4x_pr_ignored): Move to c4x-c.c.\n\t* config/c4x/c4x.h (REGISTER_TARGET_PRAGMAS): Update.\n\t* config/c4x/t-c4x: Update.\n\t* config/i370/i370-c.c: New.\n\t* config/i370/i370.c: Don't include c-lex.h or c-pragma.h.\n\t(i370_pr_map): Move to i370-c.c.\n\t* config/i370/t-i370: New.\n\n\t* doc/tm.texi: Update.\n\nFrom-SVN: r46322", "tree": {"sha": "2dae3af9c755abce804222d661e45bf3de77c4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dae3af9c755abce804222d661e45bf3de77c4e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51fabca55a83f4e2efad3cdccd6d312b06540c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fabca55a83f4e2efad3cdccd6d312b06540c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fabca55a83f4e2efad3cdccd6d312b06540c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fabca55a83f4e2efad3cdccd6d312b06540c76/comments", "author": null, "committer": null, "parents": [{"sha": "aa2a8516ce528253bf241f1730876c904823e469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2a8516ce528253bf241f1730876c904823e469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2a8516ce528253bf241f1730876c904823e469"}], "stats": {"total": 455, "additions": 274, "deletions": 181}, "files": [{"sha": "75937f9695904daf8cca2e96f9c4005b8fbc05ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -1,3 +1,27 @@\n+2001-10-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* config.gcc: Update c4x and i370 for C front end-specific\n+\tdependencies.\n+\t* config/c4x/c4x-c.c: New.\n+\t* config/c4x/c4x-protos.h (c4x_handle_pragma): Remove.\n+\t(code_tree, data_tree, pure_tree, noreturn_tree, interrupt_tree):\n+\tNew declarations.\n+\t* config/c4x/c4x.c: Don't include c-lex.h or c-pragma.h.\n+\t(code_tree, data_tree, pure_tree, noreturn_tree, interrupt_tree):\n+\tMake extern.\n+\t(c4x_init_pragma): Remove.\n+\t(c4x_parse_pragma, c4x_pr_CODE_SECTION, c4x_pr_DATA_SECTION,\n+\tc4x_pr_FUNC_IS_PURE, c4x_pr_FUNC_NEVER_RETURNS, c4x_pr_INTERRUPT,\n+\tc4x_pr_ignored): Move to c4x-c.c.\n+\t* config/c4x/c4x.h (REGISTER_TARGET_PRAGMAS): Update.\n+\t* config/c4x/t-c4x: Update.\n+\t* config/i370/i370-c.c: New.\n+\t* config/i370/i370.c: Don't include c-lex.h or c-pragma.h.\n+\t(i370_pr_map): Move to i370-c.c.\n+\t* config/i370/t-i370: New.\t\n+\n+\t* doc/tm.texi: Update.\n+\n 2001-10-17  Stan Shebs  <shebs@apple.com>\n \n \t* config/rs6000/rs6000.c: Make assorted mechanical formatting and"}, {"sha": "b1bd55d24a42603ea6ca8da6255910d9cd96711e", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -644,11 +644,15 @@ c4x-*-rtems*)\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n+\tc_target_objs=\"c4x-c.o\"\n+\tcxx_target_objs=\"c4x-c.o\"\n \t;;\n c4x-*)\n \tcpu_type=c4x\n \tfloat_format=c4x\n \ttmake_file=c4x/t-c4x\n+\tc_target_objs=\"c4x-c.o\"\n+\tcxx_target_objs=\"c4x-c.o\"\n \t;;\n clipper-intergraph-clix*)\n \ttm_file=\"${tm_file} svr3.h clipper/clix.h\"\n@@ -941,11 +945,17 @@ hppa*-*-mpeix*)\n i370-*-opened*)\t\t\t # IBM 360/370/390 Architecture\n \txm_defines='POSIX FATAL_EXIT_CODE=12'\n \ttm_file=i370/oe.h\n+\ttmake_file=\"i370/t-i370\"\n \txmake_file=i370/x-oe\n+\tc_target_objs=\"i370-c.o\"\n+\tcxx_target_objs=\"i370-c.o\"\n \t;;\n i370-*-mvs*)\n \txm_defines='POSIX FATAL_EXIT_CODE=12'\n \ttm_file=i370/mvs.h\n+\ttmake_file=\"i370/t-i370\"\n+\tc_target_objs=\"i370-c.o\"\n+\tcxx_target_objs=\"i370-c.o\"\n \t;;\n i370-*-linux*)\n \txmake_file=x-linux"}, {"sha": "3bbf184e174b982d9c96e2b5d362a09166e1bbf0", "filename": "gcc/config/c4x/c4x-c.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -0,0 +1,159 @@\n+/* Subroutines for the C front end on the TMS320C[34]x\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n+\n+   Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n+              and Herman Ten Brugge (Haj.Ten.Brugge@net.HCC.nl).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"toplev.h\"\n+#include \"cpplib.h\"\n+#include \"c-pragma.h\"\n+#include \"c-lex.h\"\n+#include \"c4x-protos.h\"\n+\n+static int c4x_parse_pragma PARAMS ((const char *, tree *, tree *));\n+\n+/* Handle machine specific pragmas for compatibility with existing\n+   compilers for the C3x/C4x.\n+\n+   pragma\t\t\t\t   attribute\n+   ----------------------------------------------------------\n+   CODE_SECTION(symbol,\"section\")          section(\"section\")\n+   DATA_SECTION(symbol,\"section\")          section(\"section\")\n+   FUNC_CANNOT_INLINE(function)            \n+   FUNC_EXT_CALLED(function)               \n+   FUNC_IS_PURE(function)                  const\n+   FUNC_IS_SYSTEM(function)                \n+   FUNC_NEVER_RETURNS(function)            noreturn\n+   FUNC_NO_GLOBAL_ASG(function)            \n+   FUNC_NO_IND_ASG(function)               \n+   INTERRUPT(function)                     interrupt\n+\n+   */\n+\n+/* Parse a C4x pragma, of the form ( function [, \"section\"] ) \\n.\n+   FUNC is loaded with the IDENTIFIER_NODE of the function, SECT with\n+   the STRING_CST node of the string.  If SECT is null, then this\n+   pragma doesn't take a section string.  Returns 0 for a good pragma,\n+   -1 for a malformed pragma.  */\n+#define BAD(msgid, arg) do { warning (msgid, arg); return -1; } while (0)\n+\n+static int\n+c4x_parse_pragma (name, func, sect)\n+     const char *name;\n+     tree *func;\n+     tree *sect;\n+{\n+  tree f, s, x;\n+\n+  if (c_lex (&x) != CPP_OPEN_PAREN)\n+    BAD (\"missing '(' after '#pragma %s' - ignored\", name);\n+\n+  if (c_lex (&f) != CPP_NAME)\n+    BAD (\"missing function name in '#pragma %s' - ignored\", name);\n+\n+  if (sect)\n+    {\n+      if (c_lex (&x) != CPP_COMMA)\n+\tBAD (\"malformed '#pragma %s' - ignored\", name);\n+      if (c_lex (&s) != CPP_STRING)\n+\tBAD (\"missing section name in '#pragma %s' - ignored\", name);\n+      *sect = s;\n+    }\n+\n+  if (c_lex (&x) != CPP_CLOSE_PAREN)\n+    BAD (\"missing ')' for '#pragma %s' - ignored\", name);\n+\n+  if (c_lex (&x) != CPP_EOF)\n+    warning (\"junk at end of '#pragma %s'\", name);\n+\n+  *func = f;\n+  return 0;\n+}\n+\n+void\n+c4x_pr_CODE_SECTION (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree func, sect;\n+\n+  if (c4x_parse_pragma (\"CODE_SECTION\", &func, &sect))\n+    return;\n+  code_tree = chainon (code_tree,\n+\t\t       build_tree_list (func,\n+\t\t\t\t\tbuild_tree_list (NULL_TREE, sect)));\n+}\n+\n+void\n+c4x_pr_DATA_SECTION (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree func, sect;\n+\n+  if (c4x_parse_pragma (\"DATA_SECTION\", &func, &sect))\n+    return;\n+  data_tree = chainon (data_tree,\n+\t\t       build_tree_list (func,\n+\t\t\t\t\tbuild_tree_list (NULL_TREE, sect)));\n+}\n+\n+void\n+c4x_pr_FUNC_IS_PURE (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree func;\n+\n+  if (c4x_parse_pragma (\"FUNC_IS_PURE\", &func, 0))\n+    return;\n+  pure_tree = chainon (pure_tree, build_tree_list (func, NULL_TREE));\n+}\n+\n+void\n+c4x_pr_FUNC_NEVER_RETURNS (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree func;\n+\n+  if (c4x_parse_pragma (\"FUNC_NEVER_RETURNS\", &func, 0))\n+    return;\n+  noreturn_tree = chainon (noreturn_tree, build_tree_list (func, NULL_TREE));\n+}\n+\n+void\n+c4x_pr_INTERRUPT (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree func;\n+\n+  if (c4x_parse_pragma (\"INTERRUPT\", &func, 0))\n+    return;\n+  interrupt_tree = chainon (interrupt_tree, build_tree_list (func, NULL_TREE));\n+}\n+\n+/* Used for FUNC_CANNOT_INLINE, FUNC_EXT_CALLED, FUNC_IS_SYSTEM,\n+   FUNC_NO_GLOBAL_ASG, and FUNC_NO_IND_ASG.  */\n+void\n+c4x_pr_ignored (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "be39ca2aadedf8c2ee980478e3e1716b53313525", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -39,10 +39,6 @@ extern void c4x_expand_epilogue PARAMS ((void));\n \n extern int c4x_null_epilogue_p PARAMS ((void));\n \n-extern int c4x_handle_pragma PARAMS ((int (* p_getc) (void),\n-\t\t\t\t      void (* p_ungetc) (int),\n-\t\t\t\t      char *));\n-\n extern void c4x_global_label (const char *);\n \n extern void c4x_external_ref (const char *);\n@@ -305,6 +301,7 @@ extern void c4x_pr_FUNC_NEVER_RETURNS\tPARAMS ((cpp_reader *));\n extern void c4x_pr_INTERRUPT\t\tPARAMS ((cpp_reader *));\n extern void c4x_pr_ignored\t\tPARAMS ((cpp_reader *));\n extern void c4x_init_pragma\t\tPARAMS ((int (*) (tree *)));\n+extern tree code_tree, data_tree, pure_tree, noreturn_tree, interrupt_tree;\n #endif\n \n #endif /* ! GCC_C4X_PROTOS_H */"}, {"sha": "3c9d1400f7e2824909e04d523cebd9de5acf79f8", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 5, "deletions": 143, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -45,8 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"ggc.h\"\n #include \"cpplib.h\"\n-#include \"c-lex.h\"\n-#include \"c-pragma.h\"\n #include \"toplev.h\"\n #include \"c4x-protos.h\"\n #include \"target.h\"\n@@ -160,11 +158,11 @@ int c4x_cpu_version = 40;\t/* CPU version C30/31/32/33/40/44.  */\n \n /* Pragma definitions.  */\n \n-static tree code_tree = NULL_TREE;\n-static tree data_tree = NULL_TREE;\n-static tree pure_tree = NULL_TREE;\n-static tree noreturn_tree = NULL_TREE;\n-static tree interrupt_tree = NULL_TREE;\n+tree code_tree = NULL_TREE;\n+tree data_tree = NULL_TREE;\n+tree pure_tree = NULL_TREE;\n+tree noreturn_tree = NULL_TREE;\n+tree interrupt_tree = NULL_TREE;\n \n /* Forward declarations */\n static void c4x_add_gc_roots PARAMS ((void));\n@@ -187,7 +185,6 @@ static int c4x_valid_operands PARAMS ((enum rtx_code, rtx *,\n static int c4x_arn_reg_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n static int c4x_arn_mem_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n static void c4x_check_attribute PARAMS ((const char *, tree, tree, tree *));\n-static int c4x_parse_pragma PARAMS ((const char *, tree *, tree *));\n static int c4x_r11_set_p PARAMS ((rtx));\n static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n static int c4x_label_ref_used_p PARAMS ((rtx, rtx));\n@@ -4487,141 +4484,6 @@ c4x_operand_subword (op, i, validate_address, mode)\n   return operand_subword (op, i, validate_address, mode);\n }\n \n-/* Handle machine specific pragmas for compatibility with existing\n-   compilers for the C3x/C4x.\n-\n-   pragma\t\t\t\t   attribute\n-   ----------------------------------------------------------\n-   CODE_SECTION(symbol,\"section\")          section(\"section\")\n-   DATA_SECTION(symbol,\"section\")          section(\"section\")\n-   FUNC_CANNOT_INLINE(function)            \n-   FUNC_EXT_CALLED(function)               \n-   FUNC_IS_PURE(function)                  const\n-   FUNC_IS_SYSTEM(function)                \n-   FUNC_NEVER_RETURNS(function)            noreturn\n-   FUNC_NO_GLOBAL_ASG(function)            \n-   FUNC_NO_IND_ASG(function)               \n-   INTERRUPT(function)                     interrupt\n-\n-   */\n-\n-/* Parse a C4x pragma, of the form ( function [, \"section\"] ) \\n.\n-   FUNC is loaded with the IDENTIFIER_NODE of the function, SECT with\n-   the STRING_CST node of the string.  If SECT is null, then this\n-   pragma doesn't take a section string.  Returns 0 for a good pragma,\n-   -1 for a malformed pragma.  */\n-#define BAD(msgid, arg) do { warning (msgid, arg); return -1; } while (0)\n-\n-static int (*c_lex_func) (tree *);\n-\n-void\n-c4x_init_pragma (get_token)\n-  int (*get_token) PARAMS ((tree *));\n-{\n-  c_lex_func = get_token;\n-}\n-\n-\n-static int\n-c4x_parse_pragma (name, func, sect)\n-     const char *name;\n-     tree *func;\n-     tree *sect;\n-{\n-  tree f, s, x;\n-\n-  if (c_lex_func (&x) != CPP_OPEN_PAREN)\n-    BAD (\"missing '(' after '#pragma %s' - ignored\", name);\n-\n-  if (c_lex_func (&f) != CPP_NAME)\n-    BAD (\"missing function name in '#pragma %s' - ignored\", name);\n-\n-  if (sect)\n-    {\n-      if (c_lex_func (&x) != CPP_COMMA)\n-\tBAD (\"malformed '#pragma %s' - ignored\", name);\n-      if (c_lex_func (&s) != CPP_STRING)\n-\tBAD (\"missing section name in '#pragma %s' - ignored\", name);\n-      *sect = s;\n-    }\n-\n-  if (c_lex_func (&x) != CPP_CLOSE_PAREN)\n-    BAD (\"missing ')' for '#pragma %s' - ignored\", name);\n-\n-  if (c_lex_func (&x) != CPP_EOF)\n-    warning (\"junk at end of '#pragma %s'\", name);\n-\n-  *func = f;\n-  return 0;\n-}\n-\n-void\n-c4x_pr_CODE_SECTION (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree func, sect;\n-\n-  if (c4x_parse_pragma (\"CODE_SECTION\", &func, &sect))\n-    return;\n-  code_tree = chainon (code_tree,\n-\t\t       build_tree_list (func,\n-\t\t\t\t\tbuild_tree_list (NULL_TREE, sect)));\n-}\n-\n-void\n-c4x_pr_DATA_SECTION (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree func, sect;\n-\n-  if (c4x_parse_pragma (\"DATA_SECTION\", &func, &sect))\n-    return;\n-  data_tree = chainon (data_tree,\n-\t\t       build_tree_list (func,\n-\t\t\t\t\tbuild_tree_list (NULL_TREE, sect)));\n-}\n-\n-void\n-c4x_pr_FUNC_IS_PURE (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree func;\n-\n-  if (c4x_parse_pragma (\"FUNC_IS_PURE\", &func, 0))\n-    return;\n-  pure_tree = chainon (pure_tree, build_tree_list (func, NULL_TREE));\n-}\n-\n-void\n-c4x_pr_FUNC_NEVER_RETURNS (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree func;\n-\n-  if (c4x_parse_pragma (\"FUNC_NEVER_RETURNS\", &func, 0))\n-    return;\n-  noreturn_tree = chainon (noreturn_tree, build_tree_list (func, NULL_TREE));\n-}\n-\n-void\n-c4x_pr_INTERRUPT (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree func;\n-\n-  if (c4x_parse_pragma (\"INTERRUPT\", &func, 0))\n-    return;\n-  interrupt_tree = chainon (interrupt_tree, build_tree_list (func, NULL_TREE));\n-}\n-\n-/* Used for FUNC_CANNOT_INLINE, FUNC_EXT_CALLED, FUNC_IS_SYSTEM,\n-   FUNC_NO_GLOBAL_ASG, and FUNC_NO_IND_ASG.  */\n-void\n-c4x_pr_ignored (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-}\n-\n struct name_list\n {\n   struct name_list *next;"}, {"sha": "202b4c065c704bfc1d58b5e355ee9c4785374d07", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -2348,7 +2348,6 @@ do {\t\t\t\t\t\t\\\n   cpp_register_pragma (PFILE, 0, \"FUNC_NO_GLOBAL_ASG\", c4x_pr_ignored);\t\\\n   cpp_register_pragma (PFILE, 0, \"FUNC_NO_IND_ASG\", c4x_pr_ignored);\t\\\n   cpp_register_pragma (PFILE, 0, \"INTERRUPT\", c4x_pr_INTERRUPT);\t\\\n-  c4x_init_pragma (&c_lex);\t\t\t\t\t\t\\\n } while (0)\n \n /* Assembler Commands for Alignment.  */"}, {"sha": "394b4c957385dbe8c6260f0e0d3b4288da85d4c8", "filename": "gcc/config/c4x/t-c4x", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Ft-c4x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fc4x%2Ft-c4x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Ft-c4x?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -7,6 +7,10 @@ LIB1ASMFUNCS = _divsf3 _divsi3 _udivsi3 _umodsi3 _modsi3 _mulsi3 \\\n \n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit\n \n+c4x-c.o: $(srcdir)/config/c4x/c4x-c.c $(srcdir)/config/c4x/c4x-protos.h \\\n+    $(CONFIG_H) $(SYSTEM_H) cpplib.h $(TREE_H) c-pragma.h c-lex.h toplev.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n MULTILIB_OPTIONS = m30 msmall mmemparm\n MULTILIB_DIRNAMES = c3x small mem\n MULTILIB_MATCHES = m30=mcpu?30 m30=mcpu?31 m30=mcpu?32 m30=m31 m30=m32"}, {"sha": "d1eddb6a971510971eb67d857713b6530714b9ad", "filename": "gcc/config/i370/i370-c.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fi370%2Fi370-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fi370%2Fi370-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370-c.c?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -0,0 +1,63 @@\n+/* Subroutines for the C front end for System/370.\n+   Copyright (C) 1989, 1993, 1995, 1997, 1998, 1999, 2000\n+   Free Software Foundation, Inc.\n+   Contributed by Jan Stein (jan@cd.chalmers.se).\n+   Modified for OS/390 LanguageEnvironment C by Dave Pitts (dpitts@cozx.com)\n+   Hacked for Linux-ELF/390 by Linas Vepstas (linas@linas.org) \n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"toplev.h\"\n+#include \"cpplib.h\"\n+#include \"c-pragma.h\"\n+#include \"c-lex.h\"\n+#include \"i370-protos.h\"\n+\n+#ifdef TARGET_HLASM\n+\n+/* #pragma map (name, alias) -\n+   In this implementation both name and alias are required to be\n+   identifiers.  The older code seemed to be more permissive.  Can\n+   anyone clarify?  */\n+\n+void\n+i370_pr_map (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree name, alias, x;\n+\n+  if (c_lex (&x)        == CPP_OPEN_PAREN\n+      && c_lex (&name)  == CPP_NAME\n+      && c_lex (&x)     == CPP_COMMA\n+      && c_lex (&alias) == CPP_NAME\n+      && c_lex (&x)     == CPP_CLOSE_PAREN)\n+    {\n+      if (c_lex (&x) != CPP_EOF)\n+\twarning (\"junk at end of #pragma map\");\n+\n+      mvs_add_alias (IDENTIFIER_POINTER (name), IDENTIFIER_POINTER (alias), 1);\n+      return;\n+    }\n+\n+  warning (\"malformed #pragma map, ignored\");\n+}\n+\n+#endif"}, {"sha": "1547da2eacb35b3628b40a375257d6235c8b8485", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -39,8 +39,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"toplev.h\"\n #include \"cpplib.h\"\n-#include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -1031,33 +1029,6 @@ mvs_check_alias (realname, aliasname)\n   return 0;\n }\n \n-/* #pragma map (name, alias) -\n-   In this implementation both name and alias are required to be\n-   identifiers.  The older code seemed to be more permissive.  Can\n-   anyone clarify?  */\n-\n-void\n-i370_pr_map (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  tree name, alias, x;\n-\n-  if (c_lex (&x)        == CPP_OPEN_PAREN\n-      && c_lex (&name)  == CPP_NAME\n-      && c_lex (&x)     == CPP_COMMA\n-      && c_lex (&alias) == CPP_NAME\n-      && c_lex (&x)     == CPP_CLOSE_PAREN)\n-    {\n-      if (c_lex (&x) != CPP_EOF)\n-\twarning (\"junk at end of #pragma map\");\n-\n-      mvs_add_alias (IDENTIFIER_POINTER (name), IDENTIFIER_POINTER (alias), 1);\n-      return;\n-    }\n-\n-  warning (\"malformed #pragma map, ignored\");\n-}\n-\n /* defines and functions specific to the HLASM assembler */\n #endif /* TARGET_HLASM */\n /* ===================================================== */"}, {"sha": "c92ebed33f1da78c6dac8619ef977067e0716296", "filename": "gcc/config/i370/t-i370", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fi370%2Ft-i370", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fconfig%2Fi370%2Ft-i370", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-i370?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -0,0 +1,3 @@\n+i370-c.o: $(srcdir)/config/i370/i370-c.c $(srcdir)/config/i370/i370-protos.h \\\n+    $(CONFIG_H) $(SYSTEM_H) cpplib.h $(TREE_H) c-pragma.h c-lex.h toplev.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "227636f47a0eb92726b59e30ff9c4d2a302277e7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fabca55a83f4e2efad3cdccd6d312b06540c76/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=51fabca55a83f4e2efad3cdccd6d312b06540c76", "patch": "@@ -8514,12 +8514,13 @@ pragma of the form\n @var{space} is the case-sensitive namespace of the pragma, or\n @code{NULL} to put the pragma in the global namespace.  The callback\n routine receives @var{pfile} as its first argument, which can be passed\n-on to cpplib's functions if necessary.  It may read any text after the\n-@var{name} by making calls to @code{c_lex}.  Text which is not read by\n-the callback will be silently ignored.\n+on to cpplib's functions if necessary.  You can lex tokens after the\n+@var{name} by calling @code{c_lex}.  Tokens that are not read by the\n+callback will be silently ignored.  The end of the line is indicated by\n+a token of type @code{CPP_EOF}.\n \n For an example use of this routine, see @file{c4x.h} and the callback\n-routines defined in @file{c4x.c}.\n+routines defined in @file{c4x-c.c}.\n \n Note that the use of @code{c_lex} is specific to the C and C++\n compilers.  It will not work in the Java or Fortran compilers, or any"}]}