{"sha": "243a980437b5e7fca56587bf86667005bdf343a7", "node_id": "C_kwDOANBUbNoAKDI0M2E5ODA0MzdiNWU3ZmNhNTY1ODdiZjg2NjY3MDA1YmRmMzQzYTc", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-09T19:49:28Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-09T19:51:40Z"}, "message": "Extend the offset and size of merged object references [PR103215].\n\nResolves:\nPR tree-optimization/103215 - bogus -Warray-bounds with two pointers with different offsets each\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103215\n\t* pointer-query.cc (access_ref::merge_ref): Extend the offset and\n\tsize of the merged object instead of using the larger.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103215\n\t* gcc.dg/Wstringop-overflow-58.c: Adjust and xfail expected warnings.\n\t* gcc.dg/Wstringop-overflow-59.c: Same.\n\t* gcc.dg/warn-strnlen-no-nul.c: Same.\n\t* gcc.dg/Warray-bounds-91.c: New test.\n\t* gcc.dg/Warray-bounds-92.c: New test.\n\t* gcc.dg/Wstringop-overflow-85.c: New test.\n\t* gcc.dg/Wstringop-overflow-87.c: New test.", "tree": {"sha": "721ae4d4178055764fda459c742108017ed49371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/721ae4d4178055764fda459c742108017ed49371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/243a980437b5e7fca56587bf86667005bdf343a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243a980437b5e7fca56587bf86667005bdf343a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243a980437b5e7fca56587bf86667005bdf343a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243a980437b5e7fca56587bf86667005bdf343a7/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eeca99ccce4b56765920bd3c839abb77bbd4280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eeca99ccce4b56765920bd3c839abb77bbd4280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eeca99ccce4b56765920bd3c839abb77bbd4280"}], "stats": {"total": 710, "additions": 664, "deletions": 46}, "files": [{"sha": "4bedf7fca47bf4698e56407f1ccd7e2496cf0df3", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -688,27 +688,32 @@ access_ref::merge_ref (vec<access_ref> *all_refs, tree arg, gimple *stmt,\n   if (known_size && aref.sizrng[0] < minsize)\n     minsize = aref.sizrng[0];\n \n-  /* Determine the amount of remaining space in the argument.  */\n-  offset_int argrem[2];\n-  argrem[1] = aref.size_remaining (argrem);\n+  /* Extend the size and offset of *THIS to account for AREF.  The result\n+     can be cached but results in false negatives.  */\n \n-  /* Determine the amount of remaining space computed so far and\n-     if the remaining space in the argument is more use it instead.  */\n-  offset_int merged_rem[2];\n-  merged_rem[1] = size_remaining (merged_rem);\n+  offset_int orng[2];\n+  if (sizrng[1] < aref.sizrng[1])\n+    {\n+      orng[0] = offrng[0];\n+      orng[1] = offrng[1];\n+      *this = aref;\n+    }\n+  else\n+    {\n+      orng[0] = aref.offrng[0];\n+      orng[1] = aref.offrng[1];\n+    }\n+\n+  if (orng[0] < offrng[0])\n+    offrng[0] = orng[0];\n+  if (offrng[1] < orng[1])\n+    offrng[1] = orng[1];\n \n   /* Reset the PHI's BASE0 flag if any of the nonnull arguments\n      refers to an object at an unknown offset.  */\n   if (!aref.base0)\n     base0 = false;\n \n-  if (merged_rem[1] < argrem[1]\n-      || (merged_rem[1] == argrem[1]\n-\t  && sizrng[1] < aref.sizrng[1]))\n-    /* Use the argument with the most space remaining as the result,\n-       or the larger one if the space is equal.  */\n-    *this = aref;\n-\n   sizrng[0] = minsize;\n   parmarray = merged_parmarray;\n "}, {"sha": "1c81091b2a60befa697278005276ac642c352b08", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-91.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-91.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -0,0 +1,145 @@\n+/* PR middle-end/103215 - bogus -Warray-bounds with two pointers with\n+   different offsets each\n+   Test for accesses into the same array through pointers with different\n+   offsets each.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+#define A(p, off) ((p)[off] = __COUNTER__)\n+\n+extern int a4[4];\n+\n+\n+NOIPA void p0_p1 (int i)\n+{\n+  int *p0 = a4 + 0;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p0 : p1;\n+  A (q, -2);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -1); A (q, 0); A (q, 1); A (q, 2);\n+  /* Since q points to a4 and -1 is a valid subscript, +3 must be invalid.\n+     But the warning for each subscript is independent of prior subscripts\n+     into the same object.  That should be improved.  */\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+NOIPA void p1_p0 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p0 = a4 + 0;\n+  int *q = i ? p0 : p1;\n+  A (q, -2);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -1); A (q, 0); A (q, 1); A (q, 2);\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void p1_p2 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p2 = a4 + 2;\n+  int *q = i ? p1 : p2;\n+  A (q, -3);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -2); A (q, -1); A (q, 0); A (q, 1);\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+NOIPA void p2_p1 (int i)\n+{\n+  int *p2 = a4 + 2;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p1 : p2;\n+  A (q, -3);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -2); A (q, -1); A (q, 0); A (q, 1);\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void p1_p3 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p3 = a4 + 3;\n+  int *q = i ? p1 : p3;\n+  A (q, -4);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -3); A (q, -2); A (q, -1); A (q, 0);\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+NOIPA void p3_p1 (int i)\n+{\n+  int *p3 = a4 + 3;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p1 : p3;\n+  A (q, -4);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -3); A (q, -2); A (q, -1); A (q, 0);\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void p1_p4 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p4 = a4 + 4;\n+  int *q = i ? p1 : p4;\n+  A (q, -5);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+  A (q, 0);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+NOIPA void p4_p1 (int i)\n+{\n+  int *p4 = a4 + 4;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p1 : p4;\n+  A (q, -5);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+  A (q, 0);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void p0_p1_p2 (int i)\n+{\n+  int *p0 = a4 + 0;\n+  int *p1 = a4 + 1;\n+  int *p2 = a4 + 2;\n+  int *q = i < 0 ? p1 : 0 < i ? p2 : p0;\n+  A (q, -3);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -2); A (q, -1); A (q, 0); A (q, 1);\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void p0_p1_p2_p3_p4 (int i)\n+{\n+  int *p0 = a4 + 0;\n+  int *p1 = a4 + 1;\n+  int *p2 = a4 + 2;\n+  int *p3 = a4 + 3;\n+  int *p4 = a4 + 4;\n+  int *q = i < -1 ? p1 : i < 0 ? p2 : 1 < i ? p4 : 0 < i ? p3 : p0;\n+  A (q, -5);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+  A (q, 0);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Warray-bounds\" }\n+}"}, {"sha": "8c8f5f7f4590cfd486f1aa4505766fffcca75827", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-92.c", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-92.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -0,0 +1,149 @@\n+/* PR middle-end/103215 - bogus -Warray-bounds with two pointers with\n+   different offsets each\n+   Test for accesses into distinct arrays through pointers with different\n+   offsets each.\n+\n+   If/when -Warray-bounds is enhanced to issue \"maybe\" kinds of warnings\n+   some of the accesses here will trigger those and will need updating.\n+\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+#define A(p, off) ((p)[off] = __COUNTER__)\n+\n+extern int a4[4], a8[8];\n+\n+\n+NOIPA void a4_p1_a8_p3 (int i)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p3 = a8 + 3;\n+  int *q = i ? a4_p1 : a8_p3;\n+  A (q, -4);      // { dg-warning \"-Warray-bounds\" }\n+  /* Because -3 is a valid offset into a8 but not a4, q must point\n+     to the former and so subscripts between -3 and +4 refer to its\n+     elements.  */\n+  A (q, -3); A (q, -2); A (q, -1); A (q, 0);\n+  A (q,  1); A (q,  2); A (q,  3); A (q, 4);\n+  A (q, 5);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  /* Both of the following are definitely out of bounds but the first isn't\n+     diagnosed because the code conservatively merges the offsets into A4\n+     and A8.  */\n+  A (q, 7);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void a4_p1_a8_p5 (int i)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p5 = a8 + 5;\n+  int *q = i ? a4_p1 : a8_p5;\n+  A (q, -6);     // { dg-warning \"-Warray-bounds\" }\n+  /* Similarly to the above, because -5 is a valid offset into a8 but\n+     not a4, q must point to the former and so subscripts between -5\n+     and +2 refer to its elements.  */\n+  A (q, -5); A (q, -4); A (q, -3); A (q, -2);\n+  A (q, -1); A (q,  0); A (q,  1); A (q,  2);\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 7);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void a4_p1_a8_p7 (int i)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p7 = a8 + 7;\n+  int *q = i ? a4_p1 : a8_p7;\n+  A (q, -8);     // { dg-warning \"-Warray-bounds\" }\n+  A (q, -7); A (q, -6); A (q, -5); A (q, -4);\n+  A (q, -3); A (q, -2); A (q, -1); A (q,  0);\n+  /* Since -7 is valid, q must point to a8 and the last valid subscript\n+     must be 0.  */\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 7);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void mp_1_a4_p1_a8_p7 (int i, int j)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p7 = a8 + 7;\n+  int *p = i ? a4_p1 : a8_p7;\n+  int *q = j ? p + 1 : p - 1;\n+\n+  A (q, -9);      // { dg-warning \"-Warray-bounds\" }\n+\n+  /* q points either to a8 + [6, 8] or a4 + [0, 2].  */\n+  A (q, -8); A (q, -7); A (q, -6); A (q, -5);\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+\n+  /* Since all the above are valid, q must point to a8 + 8. But as\n+     mentioned above, the warning for each subscript is independent\n+     of prior subscripts into the same object so the access below\n+     aren't diagnosed.  */\n+  A (q, 0);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 8);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void mp1_a4_p1_a8_p5 (int i, int j)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p5 = a8 + 5;\n+  int *p = i ? a4_p1 : a8_p5;\n+\n+  int *q = j ? p + 1 : p - 1;\n+\n+  // q is assumed to point to a8 + 6\n+  A (q, -7);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -6); A (q, -5); A (q, -4); A (q, -3);\n+  A (q, -2); A (q, -1); A (q,  0); A (q,  1);\n+  /* Even though the above accesses rule it out, q is now assumed\n+     to point to either a4 + [0, 2] or a8 + [4, 5].  */\n+  A (q, 2);\n+  /* q is now assumed to point tp a4.  Given that, only the first store\n+     is valid.  */\n+  A (q, 3);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 5);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 6);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 7);       // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 8);       // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+NOIPA void mp1_a4_p1_a8_p4 (int i, int j)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p4 = a8 + 4;\n+  int *p = i ? a4_p1 : a8_p4;\n+\n+  int *q = j ? p + 1 : p - 1;\n+\n+  // q is assumed to point to a8 + 5\n+  A (q, -6);      // { dg-warning \"-Warray-bounds\" }\n+  A (q, -5);\n+  A (q, -4);\n+  A (q, -3);\n+  A (q, -2);\n+  A (q, -1);\n+  A (q,  0);\n+  A (q,  1);\n+  A (q,  2);\n+  /* Even though the above accesses rule it out, q is now assumed\n+     to point tp a4.  Given that, only the first store is valid.  */\n+  A (q,  3);      // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  4);      // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  5);      // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  6);      // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  7);      // { dg-warning \"-Warray-bounds\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  8);      // { dg-warning \"-Warray-bounds\" }\n+}"}, {"sha": "e0a40788f0d1378b337c85e033c20a9d749dd465", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-58.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-58.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -182,8 +182,8 @@ void memset_decl_2_off (void)\n   int i2 = SR (2, INT_MAX);\n \n   {\n-    char a5[5];               // { dg-warning \"at offset [1, 5] into destination object 'a5'\n-    char a7[7];               // { dg-warning \"at offset [2, 7] into destination object 'a7'\n+    char a5[5];               // { dg-message \"at offset \\\\\\[1, 5] into destination object 'a5'\" \"note\" }\n+    char a7[7];               // { dg-message \"at offset \\\\\\[2, 7] into destination object 'a7'\" \"note\" }\n     char *p5_p1 = a5 + i1;\n     char *p7_p2 = a7 + i2;\n     char *p5_7 = cond1 ? p5_p1 : p7_p2;\n@@ -193,7 +193,11 @@ void memset_decl_2_off (void)\n     memset (p5_7, 0, 3);\n     memset (p5_7, 0, 4);\n     memset (p5_7, 0, 5);\n-    memset (p5_7, 0, 6);      // { dg-warning \"memset' writing 6 bytes into a region of size 5 \" }\n+    /* The warning code conservatively \"merges\" both the sizes and the offsets\n+       into A5 and A7 and so only the second store below is diagnosed but not\n+       the first.  See PR 103215.  The logic needs to be tightened up.  */\n+    memset (p5_7, 0, 6);      // { dg-warning \"memset' writing 6 bytes into a region of size 5 \" \"pr??????\" { xfail *-*-* } }\n+    memset (p5_7, 0, 7);      // { dg-warning \"memset' writing 7 bytes into a region of size 6 \" }\n   }\n \n   int i3 = SR (3, INT_MAX);\n@@ -208,7 +212,8 @@ void memset_decl_2_off (void)\n     // { dg-message \"at offset \\\\\\[4, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-1 }\n     // { dg-message \"at offset \\\\\\[3, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-2 }\n     // { dg-message \"at offset \\\\\\[2, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-3 }\n-    // { dg-message \": destination object 'a9'\" \"note\" { target *-*-* } .-4 }\n+    // { dg-message \"at offset \\\\\\[1, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-4 }\n+    // { dg-message \": destination object 'a9'\" \"pr??????\" { xfail *-*-* } .-5 }\n     char *p5_p2 = a5 + i2;    // 3 bytes left\n     char *p9_p3 = a9 + i3;    // 6 bytes left\n     char *p =\n@@ -220,7 +225,8 @@ void memset_decl_2_off (void)\n     memset (q, 0, 3);\n     memset (q, 0, 4);\n     memset (q, 0, 5);\n-    memset (q, 0, 6);         // { dg-warning \"memset' writing 6 bytes into a region of size 5\" }\n+    memset (q, 0, 6);         // { dg-warning \"memset' writing 6 bytes into a region of size 5\" \"pr??????\" { xfail *-*-* } }\n+    memset (q, 0, 7);         // { dg-warning \"memset' writing 7 bytes into a region of size 6\" }\n \n     --q;                      // [3 - 6] bytes left\n     memset (q, 0, 1);\n@@ -229,7 +235,8 @@ void memset_decl_2_off (void)\n     memset (q, 0, 4);\n     memset (q, 0, 5);\n     memset (q, 0, 6);\n-    memset (q, 0, 7);         // { dg-warning \"memset' writing 7 bytes into a region of size 6\" }\n+    memset (q, 0, 7);         // { dg-warning \"memset' writing 7 bytes into a region of size 6\" \"pr??????\" { xfail *-*-* } }\n+    memset (q, 0, 8);         // { dg-warning \"memset' writing 8 bytes into a region of size 7\" }\n \n     --q;                      // [4 - 7] bytes left\n     memset (q, 0, 1);\n@@ -239,7 +246,8 @@ void memset_decl_2_off (void)\n     memset (q, 0, 5);\n     memset (q, 0, 6);\n     memset (q, 0, 7);\n-    memset (q, 0, 8);         // { dg-warning \"memset' writing 8 bytes into a region of size 7\" }\n+    memset (q, 0, 8);         // { dg-warning \"memset' writing 8 bytes into a region of size 7\" \"pr??????\" { xfail *-*-* } }\n+    memset (q, 0, 9);         // { dg-warning \"memset' writing 9 bytes into a region of size 8\" }\n \n     int m1_x = SR (-1, INT_MAX);\n     int m2_x = SR (-2, INT_MAX);"}, {"sha": "b6265e37c8657dfc20906e51edb6bc143c17fd7d", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-59.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-59.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -200,7 +200,11 @@ void memset_malloc_2_off (void)\n     memset (p5_7, 0, 3);\n     memset (p5_7, 0, 4);\n     memset (p5_7, 0, 5);\n-    memset (p5_7, 0, 6);      // { dg-warning \"memset' writing 6 bytes into a region of size 5 \" }\n+    /* The warning code conservatively \"merges\" both the sizes and the offsets\n+       into A5 and A7 and so only the second store below is diagnosed but not\n+       the first.  See PR 103215.  The logic needs to be tightened up.  */\n+    memset (p5_7, 0, 6);      // { dg-warning \"memset' writing 6 bytes into a region of size 5 \" \"pr??????\" { xfail *-*-* } }\n+    memset (p5_7, 0, 7);      // { dg-warning \"memset' writing 7 bytes into a region of size 6 \" }\n   }\n \n   int i3 = SR (3, INT_MAX);\n@@ -215,7 +219,8 @@ void memset_malloc_2_off (void)\n     // { dg-message \"at offset \\\\\\[4, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-1 }\n     // { dg-message \"at offset \\\\\\[3, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-2 }\n     // { dg-message \"at offset \\\\\\[2, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-3 }\n-    // { dg-message \": destination object 'a9'\" \"note\" { target *-*-* } .-4 }\n+    // { dg-message \"at offset \\\\\\[1, 9] into destination object 'a9'\" \"note\" { target *-*-* } .-4 }\n+    // { dg-message \": destination object 'a9'\" \"pr??????\" { xfail *-*-* } .-5 }\n     char *p5_p2 = a5 + i2;    // 3 bytes left\n     char *p9_p3 = a9 + i3;    // 6 bytes left\n     char *p =\n@@ -227,7 +232,8 @@ void memset_malloc_2_off (void)\n     memset (q, 0, 3);\n     memset (q, 0, 4);\n     memset (q, 0, 5);\n-    memset (q, 0, 6);         // { dg-warning \"memset' writing 6 bytes into a region of size 5\" }\n+    memset (q, 0, 6);         // { dg-warning \"memset' writing 6 bytes into a region of size 5\" \"pr??????\" { xfail *-*-* } }\n+    memset (q, 0, 7);         // { dg-warning \"memset' writing 7 bytes into a region of size 6\" }\n \n     --q;                      // [3 - 6] bytes left\n     memset (q, 0, 1);\n@@ -236,7 +242,8 @@ void memset_malloc_2_off (void)\n     memset (q, 0, 4);\n     memset (q, 0, 5);\n     memset (q, 0, 6);\n-    memset (q, 0, 7);         // { dg-warning \"memset' writing 7 bytes into a region of size 6\" }\n+    memset (q, 0, 7);         // { dg-warning \"memset' writing 7 bytes into a region of size 6\" \"pr??????\" { xfail *-*-* } }\n+    memset (q, 0, 8);         // { dg-warning \"memset' writing 8 bytes into a region of size 7\" }\n \n     --q;                      // [4 - 7] bytes left\n     memset (q, 0, 1);\n@@ -246,7 +253,8 @@ void memset_malloc_2_off (void)\n     memset (q, 0, 5);\n     memset (q, 0, 6);\n     memset (q, 0, 7);\n-    memset (q, 0, 8);         // { dg-warning \"memset' writing 8 bytes into a region of size 7\" }\n+    memset (q, 0, 8);         // { dg-warning \"memset' writing 8 bytes into a region of size 7\" \"pr??????\" { xfail *-*-* } }\n+    memset (q, 0, 9);         // { dg-warning \"memset' writing 9 bytes into a region of size 8\" }\n \n     int m1_x = SR (-1, INT_MAX);\n     int m2_x = SR (-2, INT_MAX);"}, {"sha": "ac61e0a0a648b8f89339de82d6d8f1d992dc7c06", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-85.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-85.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -0,0 +1,153 @@\n+/* PR middle-end/103215 - bogus -Wstringop-overflow with two pointers with\n+   different offsets each\n+   Test for accesses into distinct arrays through pointers with different\n+   offsets each.\n+\n+   If/when -Wstringop-overflow is enhanced to issue \"maybe\" kinds of\n+   warnings some of the accesses here will trigger those and will need\n+   updating.\n+\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+void sink (int[1]);\n+#define A(p, off) sink (p + off)\n+\n+extern int a4[4], a8[8];\n+\n+\n+\n+\n+NOIPA void a4_p1_a8_p3 (int i)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p3 = a8 + 3;\n+  int *q = i ? a4_p1 : a8_p3;\n+  A (q, -4);      // { dg-warning \"-Wstringop-overflow\" }\n+  /* Because -3 is a valid offset into a8 but not a4, q must point\n+     to the former and so subscripts between -3 and +4 refer to its\n+     elements.  */\n+  A (q, -3); A (q, -2); A (q, -1); A (q, 0);\n+  A (q,  1); A (q,  2); A (q,  3); A (q, 4);\n+  A (q, 5);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  /* Both of the following are definitely out of bounds but the first isn't\n+     diagnosed because the code conservatively merges the offsets into A4\n+     and A8.  */\n+  A (q, 7);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void a4_p1_a8_p5 (int i)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p5 = a8 + 5;\n+  int *q = i ? a4_p1 : a8_p5;\n+  A (q, -6);     // { dg-warning \"-Wstringop-overflow\" }\n+  /* Similarly to the above, because -5 is a valid offset into a8 but\n+     not a4, q must point to the former and so subscripts between -5\n+     and +2 refer to its elements.  */\n+  A (q, -5); A (q, -4); A (q, -3); A (q, -2);\n+  A (q, -1); A (q,  0); A (q,  1); A (q,  2);\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 7);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void a4_p1_a8_p7 (int i)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p7 = a8 + 7;\n+  int *q = i ? a4_p1 : a8_p7;\n+  A (q, -8);     // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -7); A (q, -6); A (q, -5); A (q, -4);\n+  A (q, -3); A (q, -2); A (q, -1); A (q,  0);\n+  /* Since -7 is valid, q must point to a8 and the last valid subscript\n+     must be 0.  */\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 7);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void mp_1_a4_p1_a8_p7 (int i, int j)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p7 = a8 + 7;\n+  int *p = i ? a4_p1 : a8_p7;\n+  int *q = j ? p + 1 : p - 1;\n+\n+  A (q, -9);      // { dg-warning \"-Wstringop-overflow\" }\n+\n+  /* q points either to a8 + [6, 8] or a4 + [0, 2].  */\n+  A (q, -8); A (q, -7); A (q, -6); A (q, -5);\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+\n+  /* Since all the above are valid, q must point to a8 + 8. But as\n+     mentioned above, the warning for each subscript is independent\n+     of prior subscripts into the same object so the access below\n+     aren't diagnosed.  */\n+  A (q, 0);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 8);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void mp1_a4_p1_a8_p5 (int i, int j)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p5 = a8 + 5;\n+  int *p = i ? a4_p1 : a8_p5;\n+\n+  int *q = j ? p + 1 : p - 1;\n+\n+  // q is assumed to point to a8 + 6\n+  A (q, -7);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -6); A (q, -5); A (q, -4); A (q, -3);\n+  A (q, -2); A (q, -1); A (q,  0); A (q,  1);\n+  /* Even though the above accesses rule it out, q is now assumed\n+     to point to either a4 + [0, 2] or a8 + [4, 5].  */\n+  A (q, 2);\n+  /* q is now assumed to point tp a4.  Given that, only the first store\n+     is valid.  */\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 5);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 6);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 7);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 8);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void mp1_a4_p1_a8_p4 (int i, int j)\n+{\n+  int *a4_p1 = a4 + 1;\n+  int *a8_p4 = a8 + 4;\n+  int *p = i ? a4_p1 : a8_p4;\n+\n+  int *q = j ? p + 1 : p - 1;\n+\n+  // q is assumed to point to a8 + 5\n+  A (q, -6);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -5);\n+  A (q, -4);\n+  A (q, -3);\n+  A (q, -2);\n+  A (q, -1);\n+  A (q,  0);\n+  A (q,  1);\n+  A (q,  2);\n+  /* Even though the above accesses rule it out, q is now assumed\n+     to point tp a4.  Given that, only the first store is valid.  */\n+  A (q,  3);      // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  4);      // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  5);      // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  6);      // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  7);      // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q,  8);      // { dg-warning \"-Wstringop-overflow\" }\n+}"}, {"sha": "bc121928f1b6815f1d38207e2c01931b2b7d116e", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-87.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-87.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -0,0 +1,147 @@\n+/* PR middle-end/103215 - bogus -Warray-bounds with two pointers with\n+   different offsets each\n+   Test for accesses by a user-defined function into the same array\n+   through pointers with different offsets each.  See Warray-bounds-91.c\n+   for the corresponding test exercising -Warray-bounds for direct accesses.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+void sink (int[1]);\n+#define A(p, off) sink (p + off)\n+\n+extern int a4[4];\n+\n+\n+NOIPA void p0_p1 (int i)\n+{\n+  int *p0 = a4 + 0;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p0 : p1;\n+  A (q, -2);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -1); A (q, 0); A (q, 1); A (q, 2);\n+  /* Since q points to a4 and -1 is a valid subscript, +3 must be invalid.\n+     But the warning for each subscript is independent of prior subscripts\n+     into the same object.  That should be improved.  */\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+NOIPA void p1_p0 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p0 = a4 + 0;\n+  int *q = i ? p0 : p1;\n+  A (q, -2);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -1); A (q, 0); A (q, 1); A (q, 2);\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void p1_p2 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p2 = a4 + 2;\n+  int *q = i ? p1 : p2;\n+  A (q, -3);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -2); A (q, -1); A (q, 0); A (q, 1);\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+NOIPA void p2_p1 (int i)\n+{\n+  int *p2 = a4 + 2;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p1 : p2;\n+  A (q, -3);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -2); A (q, -1); A (q, 0); A (q, 1);\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void p1_p3 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p3 = a4 + 3;\n+  int *q = i ? p1 : p3;\n+  A (q, -4);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -3); A (q, -2); A (q, -1); A (q, 0);\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+NOIPA void p3_p1 (int i)\n+{\n+  int *p3 = a4 + 3;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p1 : p3;\n+  A (q, -4);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -3); A (q, -2); A (q, -1); A (q, 0);\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void p1_p4 (int i)\n+{\n+  int *p1 = a4 + 1;\n+  int *p4 = a4 + 4;\n+  int *q = i ? p1 : p4;\n+  A (q, -5);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+  A (q, 0);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+NOIPA void p4_p1 (int i)\n+{\n+  int *p4 = a4 + 4;\n+  int *p1 = a4 + 1;\n+  int *q = i ? p1 : p4;\n+  A (q, -5);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+  A (q, 0);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void p0_p1_p2 (int i)\n+{\n+  int *p0 = a4 + 0;\n+  int *p1 = a4 + 1;\n+  int *p2 = a4 + 2;\n+  int *q = i < 0 ? p1 : 0 < i ? p2 : p0;\n+  A (q, -3);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -2); A (q, -1); A (q, 0); A (q, 1);\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void p0_p1_p2_p3_p4 (int i)\n+{\n+  int *p0 = a4 + 0;\n+  int *p1 = a4 + 1;\n+  int *p2 = a4 + 2;\n+  int *p3 = a4 + 3;\n+  int *p4 = a4 + 4;\n+  int *q = i < -1 ? p1 : i < 0 ? p2 : 1 < i ? p4 : 0 < i ? p3 : p0;\n+  A (q, -5);      // { dg-warning \"-Wstringop-overflow\" }\n+  A (q, -4); A (q, -3); A (q, -2); A (q, -1);\n+  A (q, 0);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 1);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 2);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 3);       // { dg-warning \"-Wstringop-overflow\" \"pr??????\" { xfail *-*-* } }\n+  A (q, 4);       // { dg-warning \"-Wstringop-overflow\" }\n+}"}, {"sha": "70f6a432b978be8c62ad6b17a1594e0f182b91e4", "filename": "gcc/testsuite/gcc.dg/warn-strnlen-no-nul.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a980437b5e7fca56587bf86667005bdf343a7/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul.c?ref=243a980437b5e7fca56587bf86667005bdf343a7", "patch": "@@ -143,17 +143,18 @@ T (v0 ? b[1] : \"\", bsz);\n T (v0 ? b[2] : \"\", bsz);\n T (v0 ? b[3] : \"\", bsz);\n \n-/* The warnings below are strictly correct but the strnlen calls are safe\n-   because the reads are bounded by the length of the constant arguments.\n-   It might make sense to relax the warning to avoid triggering for them.  */\n+/* Warning for the calls below would be strictly correct even though\n+   the strnlen calls are safe because the reads are bounded by\n+   the length of the constant arguments.  Most of the calls are\n+   not diagnosed anymore as a result of the fix for PR 103215.  */\n T (v0 ? \"\" : b[0], bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? \"\" : b[1], bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? \"\" : b[2], bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? \"\" : b[3], bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n+T (v0 ? \"\" : b[1], bsz + 1);\n+T (v0 ? \"\" : b[2], bsz + 1);\n+T (v0 ? \"\" : b[3], bsz + 1);\n T (v0 ? b[0] : \"\", bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[1] : \"\", bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[2] : \"\", bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[3] : \"\", bsz + 1);      /* { dg-warning \"bound 6 exceeds source size 5\" } */\n+T (v0 ? b[1] : \"\", bsz + 1);\n+T (v0 ? b[2] : \"\", bsz + 1);\n+T (v0 ? b[3] : \"\", bsz + 1);\n \n T (v0 ? \"\" : b[i0], bsz);\n T (v0 ? \"\" : b[i1], bsz);\n@@ -167,11 +168,11 @@ T (v0 ? b[i3] : \"\", bsz);\n T (v0 ? \"\" : b[i0], bsz + 1);\n T (v0 ? \"\" : b[i1], bsz + 1);\n T (v0 ? \"\" : b[i2], bsz + 1);\n-T (v0 ? \"\" : b[i3], bsz + 1);     /* { dg-warning \"bound 6 exceeds source size 5\" \"pr86937\" } */\n+T (v0 ? \"\" : b[i3], bsz + 1);\n T (v0 ? b[i0] : \"\", bsz + 1);\n T (v0 ? b[i1] : \"\", bsz + 1);\n T (v0 ? b[i2] : \"\", bsz + 1);\n-T (v0 ? b[i3] : \"\", bsz + 1);     /* { dg-warning \"bound 6 exceeds source size 5\" \"pr86937\" } */\n+T (v0 ? b[i3] : \"\", bsz + 1);\n \n T (v0 ? \"1234\" : b[3], bsz);\n T (v0 ? \"1234\" : b[i3], bsz);\n@@ -183,15 +184,17 @@ T (v0 ? b[0] : b[2], bsz);\n T (v0 ? b[2] : b[3], bsz);\n T (v0 ? b[3] : b[2], bsz);\n \n-T (v0 ? \"1234\" : b[3], bsz + 1);  /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? \"1234\" : b[i3], bsz + 1); /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[3] : \"1234\", bsz + 1);  /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[i3] : \"1234\", bsz + 1); /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-\n-T (v0 ? a : b[3], bsz + 1);       /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[0] : b[2], bsz + 1);    /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[2] : b[3], bsz + 1);    /* { dg-warning \"bound 6 exceeds source size 5\" } */\n-T (v0 ? b[3] : b[2], bsz + 1);    /* { dg-warning \"bound 6 exceeds source size 5\" } */\n+T (v0 ? \"1234\" : b[3], bsz + 1);\n+T (v0 ? \"1234\" : b[i3], bsz + 1);\n+T (v0 ? b[3] : \"1234\", bsz + 1);\n+T (v0 ? b[i3] : \"1234\", bsz + 1);\n+\n+/* That the following are not diagnosed is a bug/limitation resulting from\n+   the fix for PR 103215.  */\n+T (v0 ? a : b[3], bsz + 1);       /* { dg-warning \"bound 6 exceeds source size 5\" \"pr103215\" { xfail *-*-* } } */\n+T (v0 ? b[0] : b[2], bsz + 1);    /* { dg-warning \"bound 6 exceeds source size 5\" \"pr103215\" { xfail *-*-* } } */\n+T (v0 ? b[2] : b[3], bsz + 1);    /* { dg-warning \"bound 6 exceeds source size 5\" \"pr103215\" { xfail *-*-* } } */\n+T (v0 ? b[3] : b[2], bsz + 1);    /* { dg-warning \"bound 6 exceeds source size 5\" \"pr103215\" { xfail *-*-* } } */\n \n struct A { char a[5], b[5]; };\n "}]}