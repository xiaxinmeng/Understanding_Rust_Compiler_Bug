{"sha": "a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "node_id": "C_kwDOANBUbNoAKGE2NDY5N2Q3YTNlMGJmOWU1YjBkNzllMjUzZjJiN2RjM2ViMmZiMDA", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-03T08:53:00Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-27T14:58:37Z"}, "message": "flag_complex_method: support optimize attribute\n\ngcc/c-family/ChangeLog:\n\n\t* c-opts.c (c_common_init_options_struct): Set also\n\t  x_flag_default_complex_method.\n\ngcc/ChangeLog:\n\n\t* common.opt: Add new variable flag_default_complex_method.\n\t* opts.c (finish_options): Handle flags related to\n\t  x_flag_complex_method.\n\t* toplev.c (process_options): Remove option handling related\n\tto flag_complex_method.\n\ngcc/go/ChangeLog:\n\n\t* go-lang.c (go_langhook_init_options_struct): Set also\n\t  x_flag_default_complex_method.\n\ngcc/lto/ChangeLog:\n\n\t* lto-lang.c (lto_init_options_struct): Set also\n\t  x_flag_default_complex_method.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/compile/attr-complex-method-2.c: New test.\n\t* gcc.c-torture/compile/attr-complex-method.c: New test.", "tree": {"sha": "93af7a8ed8a199673d1b446e7d23cba2623d270e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93af7a8ed8a199673d1b446e7d23cba2623d270e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6a511b94fd653d8d03491eae20307bd27b8f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6a511b94fd653d8d03491eae20307bd27b8f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6a511b94fd653d8d03491eae20307bd27b8f8e"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "3eaab5e15308f4602ff7b8cf16edf5a74c3f5f4f", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -222,6 +222,7 @@ c_common_init_options_struct (struct gcc_options *opts)\n \n   /* By default, C99-like requirements for complex multiply and divide.  */\n   opts->x_flag_complex_method = 2;\n+  opts->x_flag_default_complex_method = opts->x_flag_complex_method;\n }\n \n /* Common initialization before calling option handlers.  */"}, {"sha": "a9644cae4f09ff84ec1f9ffd6b7073dbd0a73498", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -59,6 +59,9 @@ enum incremental_link flag_incremental_link = INCREMENTAL_LINK_NONE\n Variable\n int flag_complex_method = 1\n \n+Variable\n+int flag_default_complex_method = 1\n+\n ; Language specific warning pass for unused results.\n Variable\n bool flag_warn_unused_result = false"}, {"sha": "c3ae6f012bb04d16d338d85009fd47d98d91ff72", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -174,6 +174,7 @@ go_langhook_init_options_struct (struct gcc_options *opts)\n   /* Default to avoiding range issues for complex multiply and\n      divide.  */\n   opts->x_flag_complex_method = 2;\n+  opts->x_flag_default_complex_method = opts->x_flag_complex_method;\n \n   /* The builtin math functions should not set errno.  */\n   opts->x_flag_errno_math = 0;"}, {"sha": "a014e5884e04b89792f2ac0a60bcdb7375dd777b", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -813,6 +813,7 @@ lto_init_options_struct (struct gcc_options *opts)\n      safe choice.  This will pessimize Fortran code with LTO unless\n      people specify a complex method manually or use -ffast-math.  */\n   opts->x_flag_complex_method = 2;\n+  opts->x_flag_default_complex_method = opts->x_flag_complex_method;\n }\n \n /* Handle command-line option SCODE.  If the option takes an argument, it is"}, {"sha": "38b42db2a4f530d4f1515f41a2e3a7a80c634988", "filename": "gcc/opts.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -1331,6 +1331,18 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n       = (opts->x_flag_unroll_loops\n          || opts->x_flag_peel_loops\n          || opts->x_optimize >= 3);\n+\n+  /* With -fcx-limited-range, we do cheap and quick complex arithmetic.  */\n+  if (opts->x_flag_cx_limited_range)\n+    opts->x_flag_complex_method = 0;\n+  else if (opts_set->x_flag_cx_limited_range)\n+    opts->x_flag_complex_method = opts->x_flag_default_complex_method;\n+\n+  /* With -fcx-fortran-rules, we do something in-between cheap and C99.  */\n+  if (opts->x_flag_cx_fortran_rules)\n+    opts->x_flag_complex_method = 1;\n+  else if (opts_set->x_flag_cx_fortran_rules)\n+    opts->x_flag_complex_method = opts->x_flag_default_complex_method;\n }\n \n #define LEFT_COLUMN\t27"}, {"sha": "a3dc9c1ba919e0a2ca5852fd0370b95918495e5b", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-complex-method-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-complex-method-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-complex-method-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-complex-method-2.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-additional-options \"-fcx-limited-range -fdump-tree-optimized\" } */\n+\n+#pragma GCC optimize \"-fno-cx-limited-range\"\n+\n+void do_div (_Complex double *a, _Complex double *b)\n+{\n+  *a = *b / (4.0 - 5.0fi);\n+}\n+\n+/* { dg-final { scan-tree-dump \"__divdc3\" \"optimized\" } } */"}, {"sha": "f08b72e273fc2e11d9c5ed94c507d3b8e1934c61", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-complex-method.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-complex-method.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-complex-method.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-complex-method.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#pragma GCC optimize \"-fcx-limited-range\"\n+\n+void do_div (_Complex double *a, _Complex double *b)\n+{\n+  *a = *b / (4.0 - 5.0fi);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__divdc3\" \"optimized\" } } */"}, {"sha": "e1688aae724aba284b3eaf908685e2ed8971665b", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "patch": "@@ -1695,14 +1695,6 @@ process_options (void)\n       flag_stack_check = NO_STACK_CHECK;\n     }\n \n-  /* With -fcx-limited-range, we do cheap and quick complex arithmetic.  */\n-  if (flag_cx_limited_range)\n-    flag_complex_method = 0;\n-\n-  /* With -fcx-fortran-rules, we do something in-between cheap and C99.  */\n-  if (flag_cx_fortran_rules)\n-    flag_complex_method = 1;\n-\n   /* Targets must be able to place spill slots at lower addresses.  If the\n      target already uses a soft frame pointer, the transition is trivial.  */\n   if (!FRAME_GROWS_DOWNWARD && flag_stack_protect)"}]}