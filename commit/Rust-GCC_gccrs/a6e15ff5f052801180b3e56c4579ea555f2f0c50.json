{"sha": "a6e15ff5f052801180b3e56c4579ea555f2f0c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlMTVmZjVmMDUyODAxMTgwYjNlNTZjNDU3OWVhNTU1ZjJmMGM1MA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T16:51:23Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T16:51:23Z"}, "message": "Add method resolution to Dynamic objects\n\nSupport method resolution via probe of the type bound on the dynamic objects. This acts the same way as when we probe for methods like this:\n\n```rust\ntrait Foo {\n  fn bar(&self);\n}\n\nfn test<T: Foo>(a:T) {\n  a.bar();\n}\n```\n\nAddresses: #197", "tree": {"sha": "4d4b57f71b4af940056a979b213f44167a820ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4b57f71b4af940056a979b213f44167a820ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e15ff5f052801180b3e56c4579ea555f2f0c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e15ff5f052801180b3e56c4579ea555f2f0c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e15ff5f052801180b3e56c4579ea555f2f0c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e15ff5f052801180b3e56c4579ea555f2f0c50/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c674e168ebc29c061a8a936e064c2e3d556ab326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c674e168ebc29c061a8a936e064c2e3d556ab326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c674e168ebc29c061a8a936e064c2e3d556ab326"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "fe8973a4d819b267d1ac0564aeed072fea9b7db7", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e15ff5f052801180b3e56c4579ea555f2f0c50/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e15ff5f052801180b3e56c4579ea555f2f0c50/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=a6e15ff5f052801180b3e56c4579ea555f2f0c50", "patch": "@@ -227,10 +227,13 @@ class TypeCheckExpr : public TypeCheckBase\n     // which is simple. There will need to be adjustments to ensure we can turn\n     // the receiver into borrowed references etc\n \n-    bool reciever_is_generic = root->get_kind () == TyTy::TypeKind::PARAM;\n+    bool receiver_is_type_param = root->get_kind () == TyTy::TypeKind::PARAM;\n+    bool receiver_is_dyn = root->get_kind () == TyTy::TypeKind::DYNAMIC;\n+\n+    bool receiver_is_generic = receiver_is_type_param || receiver_is_dyn;\n     bool probe_bounds = true;\n-    bool probe_impls = !reciever_is_generic;\n-    bool ignore_mandatory_trait_items = !reciever_is_generic;\n+    bool probe_impls = !receiver_is_generic;\n+    bool ignore_mandatory_trait_items = !receiver_is_generic;\n \n     auto candidates\n       = PathProbeType::Probe (root, expr.get_method_name ().get_segment (),\n@@ -345,7 +348,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t  }\n       }\n \n-    if (!reciever_is_generic)\n+    if (!receiver_is_type_param)\n       {\n \t// apply any remaining generic arguments\n \tif (expr.get_method_name ().has_generic_args ())"}]}