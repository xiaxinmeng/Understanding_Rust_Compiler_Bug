{"sha": "7dc8b126ce1892db6c4380dff070c664ed3e225f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjOGIxMjZjZTE4OTJkYjZjNDM4MGRmZjA3MGM2NjRlZDNlMjI1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-06-06T17:03:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-06-06T17:03:32Z"}, "message": "stmt.c (resolve_asm_operand_names): Rename from resolve_operand_names.\n\n        * stmt.c (resolve_asm_operand_names): Rename from\n        resolve_operand_names.  No longer static.  Avoid needless copying.\n        Don't build array of constraints.\n        (expand_asm_operands): Build it here.\n        * tree.h: Declare resolve_asm_operand_names.\n\n        * stmt.c (expand_decl): Put artificial vars into registers even\n        when not optimizing, and don't mark the regs as user vars.\n\nFrom-SVN: r67556", "tree": {"sha": "1ec6a65408106679d68f1260d2fa1c891e41ca34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ec6a65408106679d68f1260d2fa1c891e41ca34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc8b126ce1892db6c4380dff070c664ed3e225f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc8b126ce1892db6c4380dff070c664ed3e225f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc8b126ce1892db6c4380dff070c664ed3e225f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc8b126ce1892db6c4380dff070c664ed3e225f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c20913c70afe04721e10fbfebc1965659a704f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c20913c70afe04721e10fbfebc1965659a704f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c20913c70afe04721e10fbfebc1965659a704f1"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "f6747880cf17e38f8c4949956f1911cb622e7983", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc8b126ce1892db6c4380dff070c664ed3e225f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc8b126ce1892db6c4380dff070c664ed3e225f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dc8b126ce1892db6c4380dff070c664ed3e225f", "patch": "@@ -1,3 +1,14 @@\n+2003-06-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* stmt.c (resolve_asm_operand_names): Rename from\n+\tresolve_operand_names.  No longer static.  Avoid needless copying.\n+\tDon't build array of constraints.\n+\t(expand_asm_operands): Build it here.\n+\t* tree.h: Declare resolve_asm_operand_names.\n+\n+\t* stmt.c (expand_decl): Put artificial vars into registers even\n+\twhen not optimizing, and don't mark the regs as user vars.\n+\n 2003-06-06  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.h (FUNCTION_ARG_1): Consistently use NEW_MODE for the mode"}, {"sha": "f8942adea8a886c04663244f80f6571e3c44a462", "filename": "gcc/stmt.c", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc8b126ce1892db6c4380dff070c664ed3e225f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc8b126ce1892db6c4380dff070c664ed3e225f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7dc8b126ce1892db6c4380dff070c664ed3e225f", "patch": "@@ -404,8 +404,6 @@ static void fixup_gotos\t\t\tPARAMS ((struct nesting *, rtx, tree,\n \t\t\t\t\t       rtx, int));\n static bool check_operand_nalternatives\tPARAMS ((tree, tree));\n static bool check_unique_operand_names\tPARAMS ((tree, tree));\n-static tree resolve_operand_names\tPARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t const char **));\n static char *resolve_operand_name_1\tPARAMS ((char *, tree, tree));\n static void expand_null_return_1\tPARAMS ((rtx));\n static enum br_predictor return_prediction PARAMS ((rtx));\n@@ -1517,6 +1515,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   HARD_REG_SET clobbered_regs;\n   int clobber_conflict_found = 0;\n   tree tail;\n+  tree t;\n   int i;\n   /* Vector of RTX's of evaluated output operands.  */\n   rtx *output_rtx = (rtx *) alloca (noutputs * sizeof (rtx));\n@@ -1538,7 +1537,14 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   if (! check_unique_operand_names (outputs, inputs))\n     return;\n \n-  string = resolve_operand_names (string, outputs, inputs, constraints);\n+  string = resolve_asm_operand_names (string, outputs, inputs);\n+\n+  /* Collect constraints.  */\n+  i = 0;\n+  for (t = outputs; t ; t = TREE_CHAIN (t), i++)\n+    constraints[i] = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n+  for (t = inputs; t ; t = TREE_CHAIN (t), i++)\n+    constraints[i] = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n \n #ifdef MD_ASM_CLOBBERS\n   /* Sometimes we wish to automatically clobber registers across an asm.\n@@ -2032,21 +2038,37 @@ check_unique_operand_names (outputs, inputs)\n    in *POUTPUTS and *PINPUTS to numbers, and replace the name expansions in\n    STRING and in the constraints to those numbers.  */\n \n-static tree\n-resolve_operand_names (string, outputs, inputs, pconstraints)\n-     tree string;\n-     tree outputs, inputs;\n-     const char **pconstraints;\n+tree\n+resolve_asm_operand_names (tree string, tree outputs, tree inputs)\n {\n-  char *buffer = xstrdup (TREE_STRING_POINTER (string));\n+  char *buffer;\n   char *p;\n   tree t;\n \n+  /* Substitute [<name>] in input constraint strings.  There should be no\n+     named operands in output constraints.  */\n+  for (t = inputs; t ; t = TREE_CHAIN (t))\n+    {\n+      const char *c = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n+      if (strchr (c, '[') != NULL)\n+\t{\n+\t  p = buffer = xstrdup (c);\n+\t  while ((p = strchr (p, '[')) != NULL)\n+\t    p = resolve_operand_name_1 (p, outputs, inputs);\n+\t  TREE_VALUE (TREE_PURPOSE (t))\n+\t    = build_string (strlen (buffer), buffer);\n+\t  free (buffer);\n+\t}\n+    }\n+\n+  if (strchr (TREE_STRING_POINTER (string), '[') == NULL)\n+    return string;\n+\n   /* Assume that we will not need extra space to perform the substitution.\n      This because we get to remove '[' and ']', which means we cannot have\n      a problem until we have more than 999 operands.  */\n \n-  p = buffer;\n+  p = buffer = xstrdup (TREE_STRING_POINTER (string));\n   while ((p = strchr (p, '%')) != NULL)\n     {\n       if (p[1] == '[')\n@@ -2065,29 +2087,6 @@ resolve_operand_names (string, outputs, inputs, pconstraints)\n   string = build_string (strlen (buffer), buffer);\n   free (buffer);\n \n-  /* Collect output constraints here because it's convenient.\n-     There should be no named operands here; this is verified\n-     in expand_asm_operand.  */\n-  for (t = outputs; t ; t = TREE_CHAIN (t), pconstraints++)\n-    *pconstraints = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n-\n-  /* Substitute [<name>] in input constraint strings.  */\n-  for (t = inputs; t ; t = TREE_CHAIN (t), pconstraints++)\n-    {\n-      const char *c = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n-      if (strchr (c, '[') == NULL)\n-\t*pconstraints = c;\n-      else\n-\t{\n-\t  p = buffer = xstrdup (c);\n-\t  while ((p = strchr (p, '[')) != NULL)\n-\t    p = resolve_operand_name_1 (p, outputs, inputs);\n-\n-\t  *pconstraints = ggc_alloc_string (buffer, -1);\n-\t  free (buffer);\n-\t}\n-    }\n-\n   return string;\n }\n \n@@ -3940,7 +3939,7 @@ expand_decl (decl)\n \t\t&& TREE_CODE (type) == REAL_TYPE)\n \t   && ! TREE_THIS_VOLATILE (decl)\n \t   && ! DECL_NONLOCAL (decl)\n-\t   && (DECL_REGISTER (decl) || optimize))\n+\t   && (DECL_REGISTER (decl) || DECL_ARTIFICIAL (decl) || optimize))\n     {\n       /* Automatic variable that can go in a register.  */\n       int unsignedp = TREE_UNSIGNED (type);\n@@ -3949,7 +3948,8 @@ expand_decl (decl)\n \n       SET_DECL_RTL (decl, gen_reg_rtx (reg_mode));\n \n-      mark_user_reg (DECL_RTL (decl));\n+      if (!DECL_ARTIFICIAL (decl))\n+\tmark_user_reg (DECL_RTL (decl));\n \n       if (POINTER_TYPE_P (type))\n \tmark_reg_pointer (DECL_RTL (decl),"}, {"sha": "f40ddbe9be07275f8e330559658949075c8d5ac6", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc8b126ce1892db6c4380dff070c664ed3e225f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc8b126ce1892db6c4380dff070c664ed3e225f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7dc8b126ce1892db6c4380dff070c664ed3e225f", "patch": "@@ -2920,6 +2920,7 @@ extern bool parse_output_constraint     PARAMS ((const char **,\n \t\t\t\t\t\t bool *, bool *, bool *));\n extern void expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int,\n \t\t\t\t\t\t const char *, int));\n+extern tree resolve_asm_operand_names (tree, tree, tree);\n extern int any_pending_cleanups\t\tPARAMS ((int));\n extern void init_stmt_for_function\tPARAMS ((void));\n extern void expand_start_target_temps\tPARAMS ((void));"}]}