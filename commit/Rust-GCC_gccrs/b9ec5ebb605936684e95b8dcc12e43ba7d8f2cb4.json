{"sha": "b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllYzVlYmI2MDU5MzY2ODRlOTViOGRjYzEyZTQzYmE3ZDhmMmNiNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-11T11:36:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-11T11:43:18Z"}, "message": "tree-optimization/101028 - fix endless SLP reassoc discovery\n\nThis fixes a missing clearing of mismatched lanes from the\nfatal fail path in SLP reassoc discovery in the most conservative\nway.\n\n2021-06-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101028\n\t* tree-vect-slp.c (vect_build_slp_tree_2): When SLP\n\treassoc discovery fails fatally, mark appropriate lanes\n\tin matches[] so.\n\n\t* gcc.dg/pr101028.c: New testcase.", "tree": {"sha": "e1655b2fdbb6376d3b8103cdb9d2211b9a0b77de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1655b2fdbb6376d3b8103cdb9d2211b9a0b77de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbd8a8041292f2ec2c22be43c8d3e74b37b2bc88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd8a8041292f2ec2c22be43c8d3e74b37b2bc88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd8a8041292f2ec2c22be43c8d3e74b37b2bc88"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "501e6af37cf08a19197126f521164b89e9ddbb4d", "filename": "gcc/testsuite/gcc.dg/pr101028.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101028.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101028.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101028.c?ref=b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast\" } */\n+\n+typedef struct {\n+  double x, y;\n+} PointInfo;\n+\n+typedef struct {\n+  PointInfo point;\n+} PrimitiveInfo;\n+\n+int TraceBezier_alpha, TraceBezier_i;\n+double TraceBezier_weight;\n+PointInfo *TraceBezier_points;\n+PrimitiveInfo *TraceBezier_primitive_info;\n+\n+void TracePath() {\n+  double *coefficients;\n+  PointInfo point;\n+  long j;\n+  for (; TraceBezier_i; TraceBezier_i++) {\n+    point.x = point.y = TraceBezier_alpha = 1.0;\n+    j = 0;\n+    for (; j < 4; j++) {\n+      point.x += TraceBezier_alpha * coefficients[j] *\n+                 TraceBezier_primitive_info->point.x;\n+      point.y += TraceBezier_alpha * TraceBezier_primitive_info->point.y;\n+      TraceBezier_alpha *= TraceBezier_weight;\n+      TraceBezier_primitive_info++;\n+    }\n+    TraceBezier_points[TraceBezier_i] = point;\n+    TraceBezier_weight += 1.0;\n+  }\n+}"}, {"sha": "9ded58592c849c5bf2bf9f1c1dec258fc2695e54", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "patch": "@@ -1849,14 +1849,28 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \t\t mismatch still hard-FAIL.  */\n \t      if (chain_len == 0)\n \t\thard_fail = false;\n+\t      else\n+\t\t{\n+\t\t  matches[lane] = false;\n+\t\t  /* ???  We might want to process the other lanes, but\n+\t\t     make sure to not give false matching hints to the\n+\t\t     caller for lanes we did not process.  */\n+\t\t  if (lane != group_size - 1)\n+\t\t    matches[0] = false;\n+\t\t}\n \t      break;\n \t    }\n \t  else if (chain_len == 0)\n \t    chain_len = chain.length ();\n \t  else if (chain.length () != chain_len)\n-\t    /* ???  Here we could slip in magic to compensate with\n-\t       neutral operands.  */\n-\t    break;\n+\t    {\n+\t      /* ???  Here we could slip in magic to compensate with\n+\t\t neutral operands.  */\n+\t      matches[lane] = false;\n+\t      if (lane != group_size - 1)\n+\t\tmatches[0] = false;\n+\t      break;\n+\t    }\n \t  chains.quick_push (chain.copy ());\n \t  chain.truncate (0);\n \t}\n@@ -1905,6 +1919,9 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \t\t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t     \"giving up on chain due to mismatched \"\n \t\t\t\t     \"def types\\n\");\n+\t\t  matches[lane] = false;\n+\t\t  if (lane != group_size - 1)\n+\t\t    matches[0] = false;\n \t\t  goto out;\n \t\t}\n \t      if (dt == vect_constant_def\n@@ -1983,6 +2000,9 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \t\t\tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t\t \"failed to match up op %d\\n\", n);\n \t\t      op_stmts.release ();\n+\t\t      matches[lane] = false;\n+\t\t      if (lane != group_size - 1)\n+\t\t\tmatches[0] = false;\n \t\t      goto out;\n \t\t    }\n \t\t  if (dump_enabled_p ())"}]}