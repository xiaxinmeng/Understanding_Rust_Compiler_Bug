{"sha": "252b88f78c6dd7615992ef7e89be748251b7257d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyYjg4Zjc4YzZkZDc2MTU5OTJlZjdlODliZTc0ODI1MWI3MjU3ZA==", "commit": {"author": {"name": "Tom Rix", "email": "trix@redhat.com", "date": "2002-01-02T03:48:53Z"}, "committer": {"name": "Tom Rix", "email": "trix@gcc.gnu.org", "date": "2002-01-02T03:48:53Z"}, "message": "Fix for rs6000_emit_allocate_stack's use of rs6000_emit_set_long_const for ppc64.\n\nFrom-SVN: r48458", "tree": {"sha": "20a15e63d1644beb9bbddbd4e0a7125db9510a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a15e63d1644beb9bbddbd4e0a7125db9510a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/252b88f78c6dd7615992ef7e89be748251b7257d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252b88f78c6dd7615992ef7e89be748251b7257d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252b88f78c6dd7615992ef7e89be748251b7257d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252b88f78c6dd7615992ef7e89be748251b7257d/comments", "author": {"login": "trixirt", "id": 7824193, "node_id": "MDQ6VXNlcjc4MjQxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7824193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trixirt", "html_url": "https://github.com/trixirt", "followers_url": "https://api.github.com/users/trixirt/followers", "following_url": "https://api.github.com/users/trixirt/following{/other_user}", "gists_url": "https://api.github.com/users/trixirt/gists{/gist_id}", "starred_url": "https://api.github.com/users/trixirt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trixirt/subscriptions", "organizations_url": "https://api.github.com/users/trixirt/orgs", "repos_url": "https://api.github.com/users/trixirt/repos", "events_url": "https://api.github.com/users/trixirt/events{/privacy}", "received_events_url": "https://api.github.com/users/trixirt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99e9e773cba195bd70a4c757d46afe9b55f6c399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e9e773cba195bd70a4c757d46afe9b55f6c399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e9e773cba195bd70a4c757d46afe9b55f6c399"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "c4f7c950878655af05bae0e634706faa84c07577", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252b88f78c6dd7615992ef7e89be748251b7257d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252b88f78c6dd7615992ef7e89be748251b7257d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=252b88f78c6dd7615992ef7e89be748251b7257d", "patch": "@@ -19,6 +19,11 @@\n \t* tree.h: Document new use of TREE_ADDRESSABLE.\n \t(expand_expr_stmt_value): Declare.\n \n+2002-01-01  Tom Rix  <trix@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_set_long_const): Fix for use by\n+\trs6000_emit_allocate_stack.\n+\n 2002-01-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* configure.in: Prepend ${srcdir}/config/${cpu_type}/ instead of"}, {"sha": "c2445522fbb2154bbe12075d98d85c2ca68f5417", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252b88f78c6dd7615992ef7e89be748251b7257d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252b88f78c6dd7615992ef7e89be748251b7257d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=252b88f78c6dd7615992ef7e89be748251b7257d", "patch": "@@ -2002,7 +2002,12 @@ rs6000_emit_set_long_const (dest, c1, c2)\n     }\n   else\n     {\n-      HOST_WIDE_INT d1, d2, d3, d4;\n+      HOST_WIDE_INT d1, d2, d2_s, d3, d4;\n+\n+      /* This function is called by rs6000_emit_allocate_stack after reload \n+\t with a dest of r0.  r0 is an invalid register for addsi.  Use an addi \n+\t and a shift instead.  */\n+      int regnum = REGNO (dest);\n \n   /* Decompose the entire word */\n #if HOST_BITS_PER_WIDE_INT >= 64\n@@ -2011,6 +2016,7 @@ rs6000_emit_set_long_const (dest, c1, c2)\n       d1 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n       c1 -= d1;\n       d2 = ((c1 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+      d2_s = d2 >> 16;\n       c1 = (c1 - d2) >> 32;\n       d3 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n       c1 -= d3;\n@@ -2021,6 +2027,7 @@ rs6000_emit_set_long_const (dest, c1, c2)\n       d1 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n       c1 -= d1;\n       d2 = ((c1 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+      d2_s = d2 >> 16;\n       if (c1 != d2)\n \tabort ();\n       c2 += (d2 < 0);\n@@ -2039,18 +2046,40 @@ rs6000_emit_set_long_const (dest, c1, c2)\n \t    emit_move_insn (dest,\n \t\t\t    gen_rtx_PLUS (DImode, dest, GEN_INT (d3)));\n \t}\n-      else\n+      else if (d3 != 0)\n \temit_move_insn (dest, GEN_INT (d3));\n \n       /* Shift it into place */\n       if (d3 != 0 || d4 != 0)\n-\temit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (32)));\n+ \tif (regnum == 0 && d2 != 0) \n+ \t  emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (16)));\n+ \telse \n+\t  emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (32)));\n \n       /* Add in the low bits.  */\n       if (d2 != 0)\n-\temit_move_insn (dest, gen_rtx_PLUS (DImode, dest, GEN_INT (d2)));\n+\t{\n+\t  if (d3 != 0 || d4 != 0)\n+\t    {\n+\t      if (regnum == 0)\n+\t\t{\n+\t\t  emit_move_insn (dest, gen_rtx_PLUS (DImode, dest, \n+\t\t\t\t\t\t      GEN_INT (d2_s)));\n+\t\t  emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest,  \n+\t\t\t\t\t\t\tGEN_INT (16)));\n+\t\t}\n+\t      else\n+\t\temit_move_insn (dest, gen_rtx_PLUS (DImode, dest, \n+\t\t\t\t\t\t    GEN_INT (d2)));\n+\t    }\n+\t  else\n+\t    emit_move_insn (dest, GEN_INT (d2));\n+\t}\n       if (d1 != 0)\n-\temit_move_insn (dest, gen_rtx_PLUS (DImode, dest, GEN_INT (d1)));\n+\tif (d2 != 0 || d3 != 0 || d4 != 0)\n+\t  emit_move_insn (dest, gen_rtx_PLUS (DImode, dest, GEN_INT (d1)));\n+\telse\n+\t  emit_move_insn (dest, GEN_INT (d1));\n     }\n \n   return dest;"}]}