{"sha": "0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0NDdhNmUzM2RiNDY2Y2I4YjA0ZmMzNTgzZWQ3NjYyNmNhOGYzYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-12-06T16:33:11Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-12-06T16:33:11Z"}, "message": "error.c (gfc_buffer_error, [...]): Use bool not\n\n2014-12-06  Tobias Burnus  <burnus@net-b.de>\n            Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n        * error.c (gfc_buffer_error, gfc_error_flag_test): Use bool not\n        * int.\n        (buffer_flag): Remove static variable.\n        (buffered_p): Add static variable.\n        (gfc_error_init_1): Call gfc_buffer_error.\n        (gfc_warning_1, gfc_warning, gfc_warning_now_1, gfc_error,\n        gfc_error_now_1): Update for static variable change.\n        * gfortran.h (gfc_buffer_error, gfc_error_flag_test): Update\n        prototype.\n        * parse.c (use_modules, decode_specification_statement,\n        next_fixed, next_statement, match_deferred_characteristics):\n        Update calls.\n        * decl.c (gfc_match_data_decl): Ditto.\n        * match.c (gfc_match_name): Ditto.\n\n\nCo-Authored-By: Manuel L\u00f3pez-Ib\u00e1\u00f1ez <manu@gcc.gnu.org>\n\nFrom-SVN: r218449", "tree": {"sha": "636127fb29b38398c755e5e967a9d89e19339271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/636127fb29b38398c755e5e967a9d89e19339271"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8a82c9dc6a72e9a98f1df09f4cba9de379236ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a82c9dc6a72e9a98f1df09f4cba9de379236ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a82c9dc6a72e9a98f1df09f4cba9de379236ae"}], "stats": {"total": 89, "additions": 55, "deletions": 34}, "files": [{"sha": "137303cfc0d18ee24b35bf453d88678034ec154b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "patch": "@@ -1,3 +1,20 @@\n+2014-12-06  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* error.c (gfc_buffer_error, gfc_error_flag_test): Use bool not int.\n+\t(buffer_flag): Remove static variable.\n+\t(buffered_p): Add static variable.\n+\t(gfc_error_init_1): Call gfc_buffer_error.\n+\t(gfc_warning_1, gfc_warning, gfc_warning_now_1, gfc_error,\n+\tgfc_error_now_1): Update for static variable change.\n+\t* gfortran.h (gfc_buffer_error, gfc_error_flag_test): Update\n+\tprototype.\n+\t* parse.c (use_modules, decode_specification_statement,\n+\tnext_fixed, next_statement, match_deferred_characteristics):\n+\tUpdate calls.\n+\t* decl.c (gfc_match_data_decl): Ditto.\n+\t* match.c (gfc_match_name): Ditto.\n+\n 2014-12-05  Andre Vehreschild  <vehre@gmx.de>\n \n \tPR fortran/60414"}, {"sha": "6e55bbf0a938e0825ce8594c4b4cfa6c368b9c6b", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "patch": "@@ -4397,7 +4397,7 @@ gfc_match_data_decl (void)\n \tbreak;\n     }\n \n-  if (gfc_error_flag_test () == 0)\n+  if (!gfc_error_flag_test ())\n     gfc_error (\"Syntax error in data declaration at %C\");\n   m = MATCH_ERROR;\n "}, {"sha": "db4bcf387295fe3d66893c9ee7a140e324550fda", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "patch": "@@ -46,10 +46,15 @@ static int suppress_errors = 0;\n \n static bool warnings_not_errors = false;\n \n-static int terminal_width, buffer_flag, errors, warnings;\n+static int terminal_width, errors, warnings;\n \n static gfc_error_buf error_buffer, warning_buffer, *cur_error_buffer;\n \n+/* True if the error/warnings should be buffered.  */\n+static bool buffered_p;\n+\n+/* These are always buffered buffers (.flush_p == false) to be used by\n+   the pretty-printer.  */\n static output_buffer pp_warning_buffer;\n static int warningcount_buffered, werrorcount_buffered;\n \n@@ -116,27 +121,27 @@ gfc_error_init_1 (void)\n   terminal_width = get_terminal_width ();\n   errors = 0;\n   warnings = 0;\n-  buffer_flag = 0;\n+  gfc_buffer_error (false);\n }\n \n \n /* Set the flag for buffering errors or not.  */\n \n void\n-gfc_buffer_error (int flag)\n+gfc_buffer_error (bool flag)\n {\n-  buffer_flag = flag;\n+  buffered_p = flag;\n   pp_warning_buffer.flush_p = !flag;\n }\n \n \n /* Add a single character to the error buffer or output depending on\n-   buffer_flag.  */\n+   buffered_p.  */\n \n static void\n error_char (char c)\n {\n-  if (buffer_flag)\n+  if (buffered_p)\n     {\n       if (cur_error_buffer->index >= cur_error_buffer->allocated)\n \t{\n@@ -844,7 +849,7 @@ gfc_warning_1 (const char *gmsgid, ...)\n \n   error_char ('\\0');\n \n-  if (buffer_flag == 0)\n+  if (!buffered_p)\n   {\n     warnings++;\n     if (warnings_are_errors)\n@@ -869,7 +874,6 @@ gfc_warning (int opt, const char *gmsgid, va_list ap)\n   bool fatal_errors = global_dc->fatal_errors;\n   pretty_printer *pp = global_dc->printer;\n   output_buffer *tmp_buffer = pp->buffer;\n-  bool buffered_p = !pp_warning_buffer.flush_p;\n \n   gfc_clear_pp_buffer (&pp_warning_buffer);\n \n@@ -1021,7 +1025,7 @@ gfc_notify_std (int std, const char *gmsgid, ...)\n \n   error_char ('\\0');\n \n-  if (buffer_flag == 0)\n+  if (!buffered_p)\n     {\n       if (warning && !warnings_are_errors)\n \twarnings++;\n@@ -1042,13 +1046,13 @@ void\n gfc_warning_now_1 (const char *gmsgid, ...)\n {\n   va_list argp;\n-  int i;\n+  bool buffered_p_saved;\n \n   if (inhibit_warnings)\n     return;\n \n-  i = buffer_flag;\n-  buffer_flag = 0;\n+  buffered_p_saved = buffered_p;\n+  buffered_p = false;\n   warnings++;\n \n   va_start (argp, gmsgid);\n@@ -1060,7 +1064,7 @@ gfc_warning_now_1 (const char *gmsgid, ...)\n   if (warnings_are_errors)\n     gfc_increment_error_count();\n \n-  buffer_flag = i;\n+  buffered_p = buffered_p_saved;\n }\n \n /* Called from output_format -- during diagnostic message processing\n@@ -1336,7 +1340,7 @@ gfc_error (const char *gmsgid, ...)\n \n   error_char ('\\0');\n \n-  if (buffer_flag == 0)\n+  if (!buffered_p)\n     gfc_increment_error_count();\n \n   return;\n@@ -1356,7 +1360,7 @@ gfc_error (const char *gmsgid, ...)\n \n   error_char ('\\0');\n \n-  if (buffer_flag == 0)\n+  if (!buffered_p)\n   {\n     warnings++;\n     if (warnings_are_errors)\n@@ -1373,14 +1377,14 @@ void\n gfc_error_now_1 (const char *gmsgid, ...)\n {\n   va_list argp;\n-  int i;\n+  bool buffered_p_saved;\n \n   error_buffer.flag = 1;\n   error_buffer.index = 0;\n   cur_error_buffer = &error_buffer;\n \n-  i = buffer_flag;\n-  buffer_flag = 0;\n+  buffered_p_saved = buffered_p;\n+  buffered_p = false;\n \n   va_start (argp, gmsgid);\n   error_print (_(\"Error:\"), _(gmsgid), argp);\n@@ -1390,7 +1394,7 @@ gfc_error_now_1 (const char *gmsgid, ...)\n \n   gfc_increment_error_count();\n \n-  buffer_flag = i;\n+  buffered_p = buffered_p_saved;\n \n   if (flag_fatal_errors)\n     exit (FATAL_EXIT_CODE);\n@@ -1426,7 +1430,7 @@ gfc_clear_error (void)\n \n /* Tests the state of error_flag.  */\n \n-int\n+bool\n gfc_error_flag_test (void)\n {\n   return error_buffer.flag;"}, {"sha": "02e78f79e8327cd7809c20eb730bbc3ca6fed81e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "patch": "@@ -2668,7 +2668,7 @@ typedef struct gfc_error_buf\n void gfc_error_init_1 (void);\n void gfc_diagnostics_init (void);\n void gfc_diagnostics_finish (void);\n-void gfc_buffer_error (int);\n+void gfc_buffer_error (bool);\n \n const char *gfc_print_wide_char (gfc_char_t);\n \n@@ -2689,7 +2689,7 @@ void gfc_fatal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,\n void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_clear_error (void);\n int gfc_error_check (void);\n-int gfc_error_flag_test (void);\n+bool gfc_error_flag_test (void);\n \n notification gfc_notification_std (int);\n bool gfc_notify_std (int, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);"}, {"sha": "06f1e94dfee0c68e252e34ca0ff33a5271e5f4a7", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "patch": "@@ -532,7 +532,7 @@ gfc_match_name (char *buffer)\n   c = gfc_next_ascii_char ();\n   if (!(ISALPHA (c) || (c == '_' && gfc_option.flag_allow_leading_underscore)))\n     {\n-      if (gfc_error_flag_test () == 0 && c != '(')\n+      if (!gfc_error_flag_test () && c != '(')\n \tgfc_error (\"Invalid character in name at %C\");\n       gfc_current_locus = old_loc;\n       return MATCH_NO;"}, {"sha": "1023037dfe11f0b6edc362aa7b30c5f173a1908e", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f447a6e33db466cb8b04fc3583ed76626ca8f3b/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=0f447a6e33db466cb8b04fc3583ed76626ca8f3b", "patch": "@@ -110,9 +110,9 @@ use_modules (void)\n   gfc_error_buf old_error;\n \n   gfc_push_error (&old_error);\n-  gfc_buffer_error (0);\n+  gfc_buffer_error (false);\n   gfc_use_modules ();\n-  gfc_buffer_error (1);\n+  gfc_buffer_error (true);\n   gfc_pop_error (&old_error);\n   gfc_commit_symbols ();\n   gfc_warning_check ();\n@@ -279,7 +279,7 @@ decode_specification_statement (void)\n \n end_of_block:\n   gfc_clear_error ();\n-  gfc_buffer_error (0);\n+  gfc_buffer_error (false);\n   gfc_current_locus = old_locus;\n \n   return ST_GET_FCN_CHARACTERISTICS;\n@@ -994,7 +994,7 @@ next_fixed (void)\n \n \t      if (c != ' ' && c != '0')\n \t\t{\n-\t\t  gfc_buffer_error (0);\n+\t\t  gfc_buffer_error (false);\n \t\t  gfc_error (\"Bad continuation line at %C\");\n \t\t  return ST_NONE;\n \t\t}\n@@ -1008,7 +1008,7 @@ next_fixed (void)\n \t     here so don't bother checking for them.  */\n \n \tdefault:\n-\t  gfc_buffer_error (0);\n+\t  gfc_buffer_error (false);\n \t  gfc_error (\"Non-numeric character in statement label at %C\");\n \t  return ST_NONE;\n \t}\n@@ -1035,7 +1035,7 @@ next_fixed (void)\n \n   if (c != ' ' && c != '0')\n     {\n-      gfc_buffer_error (0);\n+      gfc_buffer_error (false);\n       gfc_error (\"Bad continuation line at %C\");\n       return ST_NONE;\n     }\n@@ -1100,7 +1100,7 @@ next_statement (void)\n   for (;;)\n     {\n       gfc_statement_label = NULL;\n-      gfc_buffer_error (1);\n+      gfc_buffer_error (true);\n \n       if (gfc_at_eol ())\n \tgfc_advance_line ();\n@@ -1124,7 +1124,7 @@ next_statement (void)\n \tbreak;\n     }\n \n-  gfc_buffer_error (0);\n+  gfc_buffer_error (false);\n \n   if (st == ST_GET_FCN_CHARACTERISTICS && gfc_statement_label != NULL)\n     {\n@@ -2815,9 +2815,9 @@ match_deferred_characteristics (gfc_typespec * ts)\n   gfc_current_locus = gfc_current_block ()->declared_at;\n \n   gfc_clear_error ();\n-  gfc_buffer_error (1);\n+  gfc_buffer_error (true);\n   m = gfc_match_prefix (ts);\n-  gfc_buffer_error (0);\n+  gfc_buffer_error (false);\n \n   if (ts->type == BT_DERIVED)\n     {"}]}