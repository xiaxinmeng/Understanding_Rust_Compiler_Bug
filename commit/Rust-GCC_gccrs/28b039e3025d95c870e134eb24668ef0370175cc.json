{"sha": "28b039e3025d95c870e134eb24668ef0370175cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiMDM5ZTMwMjVkOTVjODcwZTEzNGViMjQ2NjhlZjAzNzAxNzVjYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-26T20:40:25Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-26T20:40:25Z"}, "message": "(location_attribute): If DECL_RTL looks like (MEM pseudo),\n\ntreat that variable as optimized away.\n\nFrom-SVN: r2253", "tree": {"sha": "35322dfb8cd3892293de24166ab81c05d4174de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35322dfb8cd3892293de24166ab81c05d4174de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28b039e3025d95c870e134eb24668ef0370175cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b039e3025d95c870e134eb24668ef0370175cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b039e3025d95c870e134eb24668ef0370175cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b039e3025d95c870e134eb24668ef0370175cc/comments", "author": null, "committer": null, "parents": [{"sha": "68703794d6004427054a7562926ab7271978a59d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68703794d6004427054a7562926ab7271978a59d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68703794d6004427054a7562926ab7271978a59d"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "d2823296bfed2e1d659bb0ba6046efada446f34b", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b039e3025d95c870e134eb24668ef0370175cc/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b039e3025d95c870e134eb24668ef0370175cc/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=28b039e3025d95c870e134eb24668ef0370175cc", "patch": "@@ -1478,7 +1478,19 @@ output_mem_loc_descriptor (rtl)\n \t   be referred to as a \"base register\".  This distinction is not\n \t   based in any way upon what category of register the hardware\n \t   believes the given register belongs to.  This is strictly\n-\t   Dwarf terminology we're dealing with here.  */\n+\t   Dwarf terminology we're dealing with here.\n+\n+\t   Note that in cases where the location of a memory-resident data\n+\t   object could be expressed as:\n+\n+\t\t    OP_ADD (OP_BASEREG (basereg), OP_CONST (0))\n+\n+\t   the actual DWARF location descriptor that we generate may just\n+\t   be OP_BASEREG (basereg).  This may look deceptively like the\n+\t   object in question was allocated to a register (rather than\n+\t   in memory) so DWARF consumers need to be aware of the subtle\n+\t   distinction between OP_REG and OP_BASEREG.\n+\t*/\n \n \tASM_OUTPUT_DWARF_STACK_OP (asm_out_file, OP_BASEREG);\n         ASM_OUTPUT_DWARF_DATA4 (asm_out_file,\n@@ -1877,13 +1889,27 @@ location_attribute (rtl)\n   /* Handle a special case.  If we are about to output a location descriptor\n      for a variable or parameter which has been optimized out of existence,\n      don't do that.  Instead we output a zero-length location descriptor\n-     value as part of the location attribute.  Note that we cannot simply\n-     suppress the entire location attribute, because the absence of a\n-     location attribute in certain kinds of DIEs is used to indicate some-\n-     thing entirely different... i.e. that the DIE represents an object\n-     declaration, but not a definition.  So sayeth the PLSIG.  */\n+     value as part of the location attribute.\n+\n+     A variable which has been optimized out of existance will have a\n+     DECL_RTL value which denotes a pseudo-reg.\n+\n+     Currently, in some rare cases, variables can have DECL_RTL values\n+     which look like (MEM (REG pseudo-reg#)).  These cases are due to\n+     bugs elsewhere in the compiler.  We treat such cases\n+     as if the variable(s) in question had been optimized out of existance.\n+\n+     Note that in all cases where we wish to express the fact that a\n+     variable has been optimized out of existance, we do not simply\n+     suppress the generation of the entire location attribute because\n+     the absence of a location attribute in certain kinds of DIEs is\n+     used to indicate something else entirely... i.e. that the DIE\n+     represents an object declaration, but not a definition.  So sayeth\n+     the PLSIG.\n+  */\n \n-  if (! is_pseudo_reg (rtl))\n+  if (! is_pseudo_reg (rtl)\n+      && (GET_CODE (rtl) != MEM || ! is_pseudo_reg (XEXP (rtl, 0))))\n     output_loc_descriptor (eliminate_regs (rtl, 0, NULL_RTX));\n \n   ASM_OUTPUT_LABEL (asm_out_file, end_label);"}]}