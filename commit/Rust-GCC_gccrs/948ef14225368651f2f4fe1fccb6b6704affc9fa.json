{"sha": "948ef14225368651f2f4fe1fccb6b6704affc9fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4ZWYxNDIyNTM2ODY1MWYyZjRmZTFmY2NiNmI2NzA0YWZmYzlmYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-11-10T11:15:58Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-11-17T00:09:01Z"}, "message": "[RS6000] Use LIB2_SIDITI_CONV_FUNCS in place of ppc64-fp.c\n\nThis patch retires ppc64-fp.c in favour of using\n\"LIB2_SIDITI_CONV_FUNCS = yes\", which is a lot better solution than\nhaving a copy of selected libgcc2.c functions.\n\n\t* config/rs6000/t-ppc64-fp (LIB2ADD): Delete.\n\t(LIB2_SIDITI_CONV_FUNCS): Define.\n\t* config/rs6000/ppc64-fp.c: Delete file.", "tree": {"sha": "28e8a58221ecbceccadc12140dea810a98cded84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28e8a58221ecbceccadc12140dea810a98cded84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/948ef14225368651f2f4fe1fccb6b6704affc9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948ef14225368651f2f4fe1fccb6b6704affc9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948ef14225368651f2f4fe1fccb6b6704affc9fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948ef14225368651f2f4fe1fccb6b6704affc9fa/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be39636d9f68c437c8a2c2e7a225c4aed4663e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be39636d9f68c437c8a2c2e7a225c4aed4663e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be39636d9f68c437c8a2c2e7a225c4aed4663e78"}], "stats": {"total": 240, "additions": 1, "deletions": 239}, "files": [{"sha": "9ca3c7105094bc1cdfb566e70807b03f35cd80cb", "filename": "libgcc/config/rs6000/ppc64-fp.c", "status": "removed", "additions": 0, "deletions": 237, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be39636d9f68c437c8a2c2e7a225c4aed4663e78/libgcc%2Fconfig%2Frs6000%2Fppc64-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be39636d9f68c437c8a2c2e7a225c4aed4663e78/libgcc%2Fconfig%2Frs6000%2Fppc64-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fppc64-fp.c?ref=be39636d9f68c437c8a2c2e7a225c4aed4663e78", "patch": "@@ -1,237 +0,0 @@\n-/* Functions needed for soft-float on powerpc64-linux, copied from\n-   libgcc2.c with macros expanded to force the use of specific types.\n- \n-   Copyright (C) 1989-2020 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#if defined(__powerpc64__) || defined (__64BIT__) || defined(__ppc64__)\n-#define TMODES\n-#include \"fp-bit.h\"\n-\n-extern DItype __fixtfdi (TFtype);\n-extern DItype __fixdfdi (DFtype);\n-extern DItype __fixsfdi (SFtype);\n-extern USItype __fixunsdfsi (DFtype);\n-extern USItype __fixunssfsi (SFtype);\n-extern TFtype __floatditf (DItype);\n-extern TFtype __floatunditf (UDItype);\n-extern DFtype __floatdidf (DItype);\n-extern DFtype __floatundidf (UDItype);\n-extern SFtype __floatdisf (DItype);\n-extern SFtype __floatundisf (UDItype);\n-extern DItype __fixunstfdi (TFtype);\n-\n-static DItype local_fixunssfdi (SFtype);\n-static DItype local_fixunsdfdi (DFtype);\n-\n-DItype\n-__fixtfdi (TFtype a)\n-{\n-  if (a < 0)\n-    return - __fixunstfdi (-a);\n-  return __fixunstfdi (a);\n-}\n-\n-DItype\n-__fixdfdi (DFtype a)\n-{\n-  if (a < 0)\n-    return - local_fixunsdfdi (-a);\n-  return local_fixunsdfdi (a);\n-}\n-\n-DItype\n-__fixsfdi (SFtype a)\n-{\n-  if (a < 0)\n-    return - local_fixunssfdi (-a);\n-  return local_fixunssfdi (a);\n-}\n-\n-USItype\n-__fixunsdfsi (DFtype a)\n-{\n-  if (a >= - (DFtype) (- ((SItype)(((USItype)1 << ((4 * 8) - 1)) - 1)) - 1))\n-    return (SItype) (a + (- ((SItype)(((USItype)1 << ((4 * 8) - 1)) - 1)) - 1))\n-                       - (- ((SItype)(((USItype)1 << ((4 * 8) - 1)) - 1)) - 1);\n-  return (SItype) a;\n-}\n-\n-USItype\n-__fixunssfsi (SFtype a)\n-{\n-  if (a >= - (SFtype) (- ((SItype)(((USItype)1 << ((4 * 8) - 1)) - 1)) - 1))\n-    return (SItype) (a + (- ((SItype)(((USItype)1 << ((4 * 8) - 1)) - 1)) - 1))\n-                       - (- ((SItype)(((USItype)1 << ((4 * 8) - 1)) - 1)) - 1);\n-  return (SItype) a;\n-}\n-\n-TFtype\n-__floatditf (DItype u)\n-{\n-  DFtype dh, dl;\n-\n-  dh = (SItype) (u >> (sizeof (SItype) * 8));\n-  dh *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n-  dl = (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n-\n-  return (TFtype) dh + (TFtype) dl;\n-}\n-\n-TFtype\n-__floatunditf (UDItype u)\n-{\n-  DFtype dh, dl;\n-\n-  dh = (USItype) (u >> (sizeof (SItype) * 8));\n-  dh *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n-  dl = (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n-\n-  return (TFtype) dh + (TFtype) dl;\n-}\n-\n-DFtype\n-__floatdidf (DItype u)\n-{\n-  DFtype d;\n-\n-  d = (SItype) (u >> (sizeof (SItype) * 8));\n-  d *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n-  d += (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n-\n-  return d;\n-}\n-\n-DFtype\n-__floatundidf (UDItype u)\n-{\n-  DFtype d;\n-\n-  d = (USItype) (u >> (sizeof (SItype) * 8));\n-  d *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n-  d += (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n-\n-  return d;\n-}\n-\n-SFtype\n-__floatdisf (DItype u)\n-{\n-  DFtype f;\n-\n-  if (53 < (sizeof (DItype) * 8)\n-      && 53 > ((sizeof (DItype) * 8) - 53 + 24))\n-    {\n-      if (! (- ((DItype) 1 << 53) < u\n-             && u < ((DItype) 1 << 53)))\n-        {\n-          if ((UDItype) u & (((UDItype) 1 << ((sizeof (DItype) * 8) - 53)) - 1))\n-            {\n-              u &= ~ (((UDItype) 1 << ((sizeof (DItype) * 8) - 53)) - 1);\n-              u |= ((UDItype) 1 << ((sizeof (DItype) * 8) - 53));\n-            }\n-        }\n-    }\n-  f = (SItype) (u >> (sizeof (SItype) * 8));\n-  f *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n-  f += (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n-\n-  return (SFtype) f;\n-}\n-\n-SFtype\n-__floatundisf (UDItype u)\n-{\n-  DFtype f;\n-\n-  if (53 < (sizeof (DItype) * 8)\n-      && 53 > ((sizeof (DItype) * 8) - 53 + 24))\n-    {\n-      if (u >= ((UDItype) 1 << 53))\n-        {\n-          if ((UDItype) u & (((UDItype) 1 << ((sizeof (DItype) * 8) - 53)) - 1))\n-            {\n-              u &= ~ (((UDItype) 1 << ((sizeof (DItype) * 8) - 53)) - 1);\n-              u |= ((UDItype) 1 << ((sizeof (DItype) * 8) - 53));\n-            }\n-        }\n-    }\n-  f = (USItype) (u >> (sizeof (SItype) * 8));\n-  f *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n-  f += (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n-\n-  return (SFtype) f;\n-}\n-\n-DItype\n-__fixunstfdi (TFtype a)\n-{\n-  if (a < 0)\n-    return 0;\n-\n-  /* Compute high word of result, as a flonum.  */\n-  const TFtype b = (a / (((UDItype) 1) << (sizeof (SItype) * 8)));\n-  /* Convert that to fixed (but not to DItype!),\n-     and shift it into the high word.  */\n-  UDItype v = (USItype) b;\n-  v <<= (sizeof (SItype) * 8);\n-  /* Remove high part from the TFtype, leaving the low part as flonum.  */\n-  a -= (TFtype) v;\n-  /* Convert that to fixed (but not to DItype!) and add it in.\n-     Sometimes A comes out negative.  This is significant, since\n-     A has more bits than a long int does.  */\n-  if (a < 0)\n-    v -= (USItype) (-a);\n-  else\n-    v += (USItype) a;\n-  return v;\n-}\n-\n-/* This version is needed to prevent recursion; fixunsdfdi in libgcc\n-   calls fixdfdi, which in turn calls calls fixunsdfdi.  */\n-\n-static DItype\n-local_fixunsdfdi (DFtype a)\n-{\n-  USItype hi, lo;\n-\n-  hi = a / (((UDItype) 1) << (sizeof (SItype) * 8));\n-  lo = (a - ((DFtype) hi) * (((UDItype) 1) << (sizeof (SItype) * 8)));\n-  return ((UDItype) hi << (sizeof (SItype) * 8)) | lo;\n-}\n-\n-/* This version is needed to prevent recursion; fixunssfdi in libgcc\n-   calls fixsfdi, which in turn calls calls fixunssfdi.  */\n-\n-static DItype\n-local_fixunssfdi (SFtype original_a)\n-{\n-  DFtype a = original_a;\n-  USItype hi, lo;\n-\n-  hi = a / (((UDItype) 1) << (sizeof (SItype) * 8));\n-  lo = (a - ((DFtype) hi) * (((UDItype) 1) << (sizeof (SItype) * 8)));\n-  return ((UDItype) hi << (sizeof (SItype) * 8)) | lo;\n-}\n-\n-#endif /* __powerpc64__ */"}, {"sha": "999679fc3cbf9d1fcb62bbb8205b27749b0eac69", "filename": "libgcc/config/rs6000/t-ppc64-fp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948ef14225368651f2f4fe1fccb6b6704affc9fa/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948ef14225368651f2f4fe1fccb6b6704affc9fa/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp?ref=948ef14225368651f2f4fe1fccb6b6704affc9fa", "patch": "@@ -1,2 +1 @@\n-# Can be used unconditionally, wrapped in __powerpc64__ || __64BIT__ __ppc64__.\n-LIB2ADD += $(srcdir)/config/rs6000/ppc64-fp.c\n+LIB2_SIDITI_CONV_FUNCS = yes"}]}