{"sha": "26d2818bb73a09622f87df53d6280d18b229bcbc", "node_id": "C_kwDOANBUbNoAKDI2ZDI4MThiYjczYTA5NjIyZjg3ZGY1M2Q2MjgwZDE4YjIyOWJjYmM", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2020-10-31T18:41:19Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-25T09:06:46Z"}, "message": "RISC-V: Use li and rori to load constants.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.c (riscv_build_integer_1): Build integer\n\twith rotate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbb-li-rotr.c: New.", "tree": {"sha": "814a9c8399213bfe6c8375243704d320b621967d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814a9c8399213bfe6c8375243704d320b621967d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d2818bb73a09622f87df53d6280d18b229bcbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d2818bb73a09622f87df53d6280d18b229bcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d2818bb73a09622f87df53d6280d18b229bcbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d2818bb73a09622f87df53d6280d18b229bcbc/comments", "author": null, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3329d892eb603fbe4e7c393f19d35739fe400a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3329d892eb603fbe4e7c393f19d35739fe400a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3329d892eb603fbe4e7c393f19d35739fe400a22"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "3ed34f234e555f4f9bba8dfcf8e6b8f6f53558bf", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d2818bb73a09622f87df53d6280d18b229bcbc/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d2818bb73a09622f87df53d6280d18b229bcbc/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=26d2818bb73a09622f87df53d6280d18b229bcbc", "patch": "@@ -462,6 +462,47 @@ riscv_build_integer_1 (struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS],\n \t}\n     }\n \n+  if (cost > 2 && TARGET_64BIT && TARGET_ZBB)\n+    {\n+      int leading_ones = clz_hwi (~value);\n+      int trailing_ones = ctz_hwi (~value);\n+\n+      /* If all bits are one except a few that are zero, and the zero bits\n+\t are within a range of 11 bits, and at least one of the upper 32-bits\n+\t is a zero, then we can generate a constant by loading a small\n+\t negative constant and rotating.  */\n+      if (leading_ones < 32\n+\t  && ((64 - leading_ones - trailing_ones) < 12))\n+\t{\n+\t  codes[0].code = UNKNOWN;\n+\t  /* The sign-bit might be zero, so just rotate to be safe.  */\n+\t  codes[0].value = (((unsigned HOST_WIDE_INT) value >> trailing_ones)\n+\t\t\t    | (value << (64 - trailing_ones)));\n+\t  codes[1].code = ROTATERT;\n+\t  codes[1].value = 64 - trailing_ones;\n+\t  cost = 2;\n+\t}\n+      /* Handle the case where the 11 bit range of zero bits wraps around.  */\n+      else\n+\t{\n+\t  int upper_trailing_ones = ctz_hwi (~value >> 32);\n+\t  int lower_leading_ones = clz_hwi (~value << 32);\n+\n+\t  if (upper_trailing_ones < 32 && lower_leading_ones < 32\n+\t      && ((64 - upper_trailing_ones - lower_leading_ones) < 12))\n+\t    {\n+\t      codes[0].code = UNKNOWN;\n+\t      /* The sign-bit might be zero, so just rotate to be safe.  */\n+\t      codes[0].value = ((value << (32 - upper_trailing_ones))\n+\t\t\t\t| ((unsigned HOST_WIDE_INT) value\n+\t\t\t\t   >> (32 + upper_trailing_ones)));\n+\t      codes[1].code = ROTATERT;\n+\t      codes[1].value = 32 - upper_trailing_ones;\n+\t      cost = 2;\n+\t    }\n+\t}\n+    }\n+\n   gcc_assert (cost <= RISCV_MAX_INTEGER_OPS);\n   return cost;\n }"}, {"sha": "03254ed915014cc1e3cb06c5df4b5799c0d0af6f", "filename": "gcc/testsuite/gcc.target/riscv/zbb-li-rotr.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d2818bb73a09622f87df53d6280d18b229bcbc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-li-rotr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d2818bb73a09622f87df53d6280d18b229bcbc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-li-rotr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-li-rotr.c?ref=26d2818bb73a09622f87df53d6280d18b229bcbc", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64 -O2\" } */\n+\n+long\n+li_rori (void)\n+{\n+  return 0xffff77ffffffffffL;\n+}\n+\n+long\n+li_rori_2 (void)\n+{\n+  return 0x77ffffffffffffffL;\n+}\n+\n+long\n+li_rori_3 (void)\n+{\n+  return 0xfffffffeefffffffL;\n+}\n+\n+long\n+li_rori_4 (void)\n+{\n+  return 0x5ffffffffffffff5L;\n+}\n+\n+long\n+li_rori_5 (void)\n+{\n+  return 0xaffffffffffffffaL;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"rori\\t\" 5 } } */"}]}