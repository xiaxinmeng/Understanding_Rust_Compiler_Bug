{"sha": "55429190dd99a471a22b88a9576920b6cf17d803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0MjkxOTBkZDk5YTQ3MWEyMmI4OGE5NTc2OTIwYjZjZjE3ZDgwMw==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-06-18T10:18:48Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-06-18T10:18:48Z"}, "message": "re PR target/66569 ([CHKP] internal compiler error: in assign_by_spills)\n\ngcc/\n\n\tPR target/66569\n\t* function.c (assign_bounds): Add arguments assign_regs,\n\tassign_special, assign_bt.\n\t(assign_parms): For vararg functions handle bounds in BT\n\tand special slots after incoming vararg bounds.\n\ngcc/testsuite/\n\n\tPR target/66569\n\t* gcc.target/i386/mpx/chkp-vararg.c: New test.\n\nFrom-SVN: r224602", "tree": {"sha": "14a8b94e9c742f74901f64a3b969172d115077c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14a8b94e9c742f74901f64a3b969172d115077c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55429190dd99a471a22b88a9576920b6cf17d803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55429190dd99a471a22b88a9576920b6cf17d803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55429190dd99a471a22b88a9576920b6cf17d803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55429190dd99a471a22b88a9576920b6cf17d803/comments", "author": null, "committer": null, "parents": [{"sha": "855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "fae12ccdd1a59e4732d17b844dcaf6548ae979ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55429190dd99a471a22b88a9576920b6cf17d803", "patch": "@@ -1,3 +1,11 @@\n+2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR target/66569\n+\t* function.c (assign_bounds): Add arguments assign_regs,\n+\tassign_special, assign_bt.\n+\t(assign_parms): For vararg functions handle bounds in BT\n+\tand special slots after incoming vararg bounds.\n+\n 2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR middle-end/66568"}, {"sha": "ea0eba8fe857ff3ff6aff564ba9e309ea10f5573", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=55429190dd99a471a22b88a9576920b6cf17d803", "patch": "@@ -3489,9 +3489,11 @@ assign_parm_load_bounds (struct assign_parm_data_one *data,\n \n static void\n assign_bounds (vec<bounds_parm_data> &bndargs,\n-\t       struct assign_parm_data_all &all)\n+\t       struct assign_parm_data_all &all,\n+\t       bool assign_regs, bool assign_special,\n+\t       bool assign_bt)\n {\n-  unsigned i, pass, handled = 0;\n+  unsigned i, pass;\n   bounds_parm_data *pbdata;\n \n   if (!bndargs.exists ())\n@@ -3505,17 +3507,20 @@ assign_bounds (vec<bounds_parm_data> &bndargs,\n       {\n \t/* Pass 0 => regs only.  */\n \tif (pass == 0\n-\t    && (!pbdata->parm_data.entry_parm\n-\t\t|| GET_CODE (pbdata->parm_data.entry_parm) != REG))\n+\t    && (!assign_regs\n+\t\t||(!pbdata->parm_data.entry_parm\n+\t\t   || GET_CODE (pbdata->parm_data.entry_parm) != REG)))\n \t  continue;\n \t/* Pass 1 => slots only.  */\n \telse if (pass == 1\n-\t\t && (!pbdata->parm_data.entry_parm\n-\t\t     || GET_CODE (pbdata->parm_data.entry_parm) == REG))\n+\t\t && (!assign_special\n+\t\t     || (!pbdata->parm_data.entry_parm\n+\t\t\t || GET_CODE (pbdata->parm_data.entry_parm) == REG)))\n \t  continue;\n \t/* Pass 2 => BT only.  */\n \telse if (pass == 2\n-\t\t && pbdata->parm_data.entry_parm)\n+\t\t && (!assign_bt\n+\t\t     || pbdata->parm_data.entry_parm))\n \t  continue;\n \n \tif (!pbdata->parm_data.entry_parm\n@@ -3536,14 +3541,7 @@ assign_bounds (vec<bounds_parm_data> &bndargs,\n \telse\n \t  assign_parm_setup_stack (&all, pbdata->bounds_parm,\n \t\t\t\t   &pbdata->parm_data);\n-\n-\t/* Count handled bounds to make sure we miss nothing.  */\n-\thandled++;\n       }\n-\n-  gcc_assert (handled == bndargs.length ());\n-\n-  bndargs.release ();\n }\n \n /* Assign RTL expressions to the function's parameters.  This may involve\n@@ -3668,12 +3666,14 @@ assign_parms (tree fndecl)\n \t      /* We expect this is the last parm.  Otherwise it is wrong\n \t\t to assign bounds right now.  */\n \t      gcc_assert (i == (fnargs.length () - 1));\n-\t      assign_bounds (bndargs, all);\n+\t      assign_bounds (bndargs, all, true, false, false);\n \t      targetm.calls.setup_incoming_vararg_bounds (all.args_so_far,\n \t\t\t\t\t\t\t  data.promoted_mode,\n \t\t\t\t\t\t\t  data.passed_type,\n \t\t\t\t\t\t\t  &pretend_bytes,\n \t\t\t\t\t\t\t  false);\n+\t      assign_bounds (bndargs, all, false, true, true);\n+\t      bndargs.release ();\n \t    }\n \t}\n \n@@ -3685,7 +3685,8 @@ assign_parms (tree fndecl)\n \tbound_no++;\n     }\n \n-  assign_bounds (bndargs, all);\n+  assign_bounds (bndargs, all, true, true, true);\n+  bndargs.release ();\n \n   if (targetm.calls.split_complex_arg)\n     assign_parms_unsplit_complex (&all, fnargs);"}, {"sha": "7692ae53382daee2491df73c85c6401c74000f3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55429190dd99a471a22b88a9576920b6cf17d803", "patch": "@@ -1,3 +1,8 @@\n+2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR target/66569\n+\t* gcc.target/i386/mpx/chkp-vararg.c: New test.\n+\n 2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR middle-end/66568"}, {"sha": "ba2023c68462d3bcae27eebfb471ac518d976cdc", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66569.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66569.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55429190dd99a471a22b88a9576920b6cf17d803/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66569.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66569.c?ref=55429190dd99a471a22b88a9576920b6cf17d803", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+struct s1 {\n+  int *p;\n+  int i;\n+};\n+\n+struct s2 {\n+  struct s1 s;\n+  int i;\n+};\n+\n+int test (struct s2 s, ...) { }"}]}