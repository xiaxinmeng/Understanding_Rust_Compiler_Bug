{"sha": "412cd71971d07bde9c9f51cf4eba32a7f0df1175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyY2Q3MTk3MWQwN2JkZTljOWY1MWNmNGViYTMyYTdmMGRmMTE3NQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-09T11:49:50Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-09T11:49:50Z"}, "message": "c-tree.h (c_default_pointer_mode): New variable.\n\n2012-03-09  Tristan Gingold  <gingold@adacore.com>\n\n        * c-tree.h (c_default_pointer_mode): New variable.\n        * c-decl.c (c_default_pointer_mode): New variable.\n        (c_build_pointer_type): New function.\n        (grokdeclarator): Call c_build_pointer_type instead\n        of build_pointer_type.\n\n        * config/vms/vms-c.c: Include c-tree.h\n        (saved_pointer_mode): New variable.\n        (handle_pragma_pointer_size): New function.\n        (vms_pragma_pointer_size, vms_pragma_required_pointer_size): Likewise.\n        (vms_c_register_pragma): Register __pointer_size and\n        __required_pointer_size pragmas.\n\nFrom-SVN: r185136", "tree": {"sha": "c2157f63030eac9c3e9f2a1b5c943b69133f0c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2157f63030eac9c3e9f2a1b5c943b69133f0c01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/412cd71971d07bde9c9f51cf4eba32a7f0df1175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412cd71971d07bde9c9f51cf4eba32a7f0df1175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412cd71971d07bde9c9f51cf4eba32a7f0df1175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412cd71971d07bde9c9f51cf4eba32a7f0df1175/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "739fd6a6b37a914454431a7ab1f0a8f4e022b64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739fd6a6b37a914454431a7ab1f0a8f4e022b64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739fd6a6b37a914454431a7ab1f0a8f4e022b64c"}], "stats": {"total": 115, "additions": 112, "deletions": 3}, "files": [{"sha": "523132778048c7af95c0a33832d0b53272b53a3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=412cd71971d07bde9c9f51cf4eba32a7f0df1175", "patch": "@@ -1,3 +1,18 @@\n+2012-03-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* c-tree.h (c_default_pointer_mode): New variable.\n+\t* c-decl.c (c_default_pointer_mode): New variable.\n+\t(c_build_pointer_type): New function.\n+\t(grokdeclarator): Call c_build_pointer_type instead\n+\tof build_pointer_type.\n+\n+\t* config/vms/vms-c.c: Include c-tree.h\n+\t(saved_pointer_mode): New variable.\n+\t(handle_pragma_pointer_size): New function.\n+\t(vms_pragma_pointer_size, vms_pragma_required_pointer_size): Likewise.\n+\t(vms_c_register_pragma): Register __pointer_size and\n+\t__required_pointer_size pragmas.\n+\n 2012-03-09  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/vms-c.c (vms_construct_include_filename): New function."}, {"sha": "160d393e7badf8783e2fd1b2b62926155da971b0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=412cd71971d07bde9c9f51cf4eba32a7f0df1175", "patch": "@@ -146,6 +146,10 @@ static int warn_about_return_type;\n \n static bool undef_nested_function;\n \n+/* Mode used to build pointers (VOIDmode means ptr_mode).  */\n+\n+enum machine_mode c_default_pointer_mode = VOIDmode;\n+\n \f\n /* Each c_binding structure describes one binding of an identifier to\n    a decl.  All the decls in a scope - irrespective of namespace - are\n@@ -557,6 +561,23 @@ add_stmt (tree t)\n \n   return t;\n }\n+\f\n+/* Build a pointer type using the default pointer mode.  */\n+\n+static tree\n+c_build_pointer_type (tree to_type)\n+{\n+  addr_space_t as = to_type == error_mark_node? ADDR_SPACE_GENERIC\n+\t\t\t\t\t      : TYPE_ADDR_SPACE (to_type);\n+  enum machine_mode pointer_mode;\n+\n+  if (as != ADDR_SPACE_GENERIC || c_default_pointer_mode == VOIDmode)\n+    pointer_mode = targetm.addr_space.pointer_mode (as);\n+  else\n+    pointer_mode = c_default_pointer_mode;\n+  return build_pointer_type_for_mode (to_type, pointer_mode, false);\n+}\n+\n \f\n /* Return true if we will want to say something if a goto statement\n    crosses DECL.  */\n@@ -5683,7 +5704,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tTYPE_NAME (type) = decl;\n \t      }\n \n-\t    type = build_pointer_type (type);\n+\t    type = c_build_pointer_type (type);\n \n \t    /* Process type qualifiers (such as const or volatile)\n \t       that were given inside the `*'.  */\n@@ -5918,7 +5939,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    type = TREE_TYPE (type);\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n-\t    type = build_pointer_type (type);\n+\t    type = c_build_pointer_type (type);\n \t    type_quals = array_ptr_quals;\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n@@ -5937,7 +5958,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       \"ISO C forbids qualified function types\");\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n-\t    type = build_pointer_type (type);\n+\t    type = c_build_pointer_type (type);\n \t    type_quals = TYPE_UNQUALIFIED;\n \t  }\n \telse if (type_quals)"}, {"sha": "db60935d7de462f95d5ba60fcbb03d29c433ec03", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=412cd71971d07bde9c9f51cf4eba32a7f0df1175", "patch": "@@ -625,6 +625,10 @@ extern int current_function_returns_abnormally;\n \n extern int system_header_p;\n \n+/* Mode used to build pointers (VOIDmode means ptr_mode).  */\n+\n+extern enum machine_mode c_default_pointer_mode;\n+\n /* In c-decl.c */\n extern void c_finish_incomplete_decl (tree);\n extern void c_write_global_declarations (void);"}, {"sha": "4377eac04ad10bfbb0f222e29f5ed26dd5b35606", "filename": "gcc/config/vms/vms-c.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2Fconfig%2Fvms%2Fvms-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412cd71971d07bde9c9f51cf4eba32a7f0df1175/gcc%2Fconfig%2Fvms%2Fvms-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.c?ref=412cd71971d07bde9c9f51cf4eba32a7f0df1175", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"c-family/c-pragma.h\"\n #include \"c-family/c-common.h\"\n+#include \"c-tree.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n@@ -283,6 +284,70 @@ vms_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n     }\n }\n \n+/* #pragma __pointer_size  */\n+\n+static enum machine_mode saved_pointer_mode;\n+\n+static void\n+handle_pragma_pointer_size (const char *pragma_name)\n+{\n+  enum cpp_ttype tok;\n+  tree x;\n+\n+  tok = pragma_lex (&x);\n+  if (tok == CPP_NAME)\n+    {\n+      const char *op = IDENTIFIER_POINTER (x);\n+\n+      if (!strcmp (op, \"__save\"))\n+        saved_pointer_mode = c_default_pointer_mode;\n+      else if (!strcmp (op, \"__restore\"))\n+        c_default_pointer_mode = saved_pointer_mode;\n+      else if (!strcmp (op, \"__short\"))\n+        c_default_pointer_mode = SImode;\n+      else if (!strcmp (op, \"__long\"))\n+        c_default_pointer_mode = DImode;\n+      else\n+        error (\"malformed %<#pragma %s%>, ignoring\", pragma_name);\n+    }\n+  else if (tok == CPP_NUMBER)\n+    {\n+      int val;\n+\n+      if (TREE_CODE (x) == INTEGER_CST)\n+        val = TREE_INT_CST_LOW (x);\n+      else\n+        val = -1;\n+\n+      if (val == 32)\n+        c_default_pointer_mode = SImode;\n+      else if (val == 64)\n+        c_default_pointer_mode = DImode;\n+      else\n+        error (\"invalid constant in %<#pragma %s%>\", pragma_name);\n+    }\n+  else\n+    {\n+      error (\"malformed %<#pragma %s%>, ignoring\", pragma_name);\n+    }\n+}\n+\n+static void\n+vms_pragma_pointer_size (cpp_reader * ARG_UNUSED (dummy))\n+{\n+  /* Ignore if 32 bit only.  */\n+  if (POINTER_SIZE != 64)\n+    return;\n+\n+  handle_pragma_pointer_size (\"pointer_size\");\n+}\n+\n+static void\n+vms_pragma_required_pointer_size (cpp_reader * ARG_UNUSED (dummy))\n+{\n+  handle_pragma_pointer_size (\"required_pointer_size\");\n+}\n+\n /* Add vms-specific pragma.  */\n \n void\n@@ -298,6 +363,10 @@ vms_c_register_pragma (void)\n                                     vms_pragma_nomember_alignment);\n   c_register_pragma_with_expansion (NULL, \"nomember_alignment\",\n                                     vms_pragma_nomember_alignment);\n+  c_register_pragma (NULL, \"__pointer_size\",\n+                     vms_pragma_pointer_size);\n+  c_register_pragma (NULL, \"__required_pointer_size\",\n+                     vms_pragma_required_pointer_size);\n   c_register_pragma (NULL, \"__extern_model\", vms_pragma_extern_model);\n   c_register_pragma (NULL, \"extern_model\", vms_pragma_extern_model);\n   c_register_pragma (NULL, \"__message\", vms_pragma_message);"}]}