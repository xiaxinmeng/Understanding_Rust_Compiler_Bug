{"sha": "6027ad8b260a9d274fb366a3fa45dcad67241f59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyN2FkOGIyNjBhOWQyNzRmYjM2NmEzZmE0NWRjYWQ2NzI0MWY1OQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2007-08-14T08:50:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:50:18Z"}, "message": "s-veboop.adb (SU): New named number initialized to System.Storage_Unit.\n\n2007-08-14  Gary Dismukes  <dismukes@adacore.com>\n\n\t* s-veboop.adb (SU): New named number initialized to\n\tSystem.Storage_Unit.\n\t(True_Val): The initialization expression is revised to use SU (=\n\tStorage_Unit) rather than assuming 8 for the component size of an\n\tunpacked Boolean array.\n\nFrom-SVN: r127465", "tree": {"sha": "eda8d606169fdc4bcc633e594aeab1852c61f241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eda8d606169fdc4bcc633e594aeab1852c61f241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6027ad8b260a9d274fb366a3fa45dcad67241f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6027ad8b260a9d274fb366a3fa45dcad67241f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6027ad8b260a9d274fb366a3fa45dcad67241f59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6027ad8b260a9d274fb366a3fa45dcad67241f59/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20dedfc175c0b382713e74e5f349e5aacd131f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dedfc175c0b382713e74e5f349e5aacd131f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20dedfc175c0b382713e74e5f349e5aacd131f9b"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "27f68a22736b2c4ae1e18ac7d93f54fbfc2a5805", "filename": "gcc/ada/s-veboop.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6027ad8b260a9d274fb366a3fa45dcad67241f59/gcc%2Fada%2Fs-veboop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6027ad8b260a9d274fb366a3fa45dcad67241f59/gcc%2Fada%2Fs-veboop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-veboop.adb?ref=6027ad8b260a9d274fb366a3fa45dcad67241f59", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,24 +33,30 @@\n \n package body System.Vectors.Boolean_Operations is\n \n+   SU : constant := Storage_Unit;\n+   --  Convenient short hand, used throughout\n+\n+   --  The coding of this unit depends on the fact that the Component_Size\n+   --  of a normally declared array of Boolean is equal to Storage_Unit. We\n+   --  can't use the Component_Size directly since it is non-static. The\n+   --  following declaration checks that this declaration is correct\n+\n    type Boolean_Array is array (Integer range <>) of Boolean;\n-   pragma Assert (Boolean_Array'Component_Size = 8);\n-   --  Unfortunately Boolean_Array'Component_Size is not a compile-time-known\n-   --  value, so assume it is 8 in order to be able to determine True_Val at\n-   --  compile time.\n+   pragma Compile_Time_Error\n+     (Boolean_Array'Component_Size /= SU, \"run time compile failure\");\n \n    --  NOTE: The boolean literals must be qualified here to avoid visibility\n    --  anomalies when this package is compiled through Rtsfind, in a context\n    --  that includes a user-defined type derived from boolean.\n \n    True_Val : constant Vector := Standard.True'Enum_Rep\n-                                   + Standard.True'Enum_Rep * 2**8\n-                                   + Standard.True'Enum_Rep * 2**(8 * 2)\n-                                   + Standard.True'Enum_Rep * 2**(8 * 3)\n-                                   + Standard.True'Enum_Rep * 2**(8 * 4)\n-                                   + Standard.True'Enum_Rep * 2**(8 * 5)\n-                                   + Standard.True'Enum_Rep * 2**(8 * 6)\n-                                   + Standard.True'Enum_Rep * 2**(8 * 7);\n+                                   + Standard.True'Enum_Rep * 2**SU\n+                                   + Standard.True'Enum_Rep * 2**(SU * 2)\n+                                   + Standard.True'Enum_Rep * 2**(SU * 3)\n+                                   + Standard.True'Enum_Rep * 2**(SU * 4)\n+                                   + Standard.True'Enum_Rep * 2**(SU * 5)\n+                                   + Standard.True'Enum_Rep * 2**(SU * 6)\n+                                   + Standard.True'Enum_Rep * 2**(SU * 7);\n    --  This constant represents the bits to be flipped to perform a logical\n    --  \"not\" on a vector of booleans, independent of the actual\n    --  representation of True."}]}