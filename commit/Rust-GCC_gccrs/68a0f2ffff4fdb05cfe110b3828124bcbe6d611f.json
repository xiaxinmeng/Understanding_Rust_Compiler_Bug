{"sha": "68a0f2ffff4fdb05cfe110b3828124bcbe6d611f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhMGYyZmZmZjRmZGIwNWNmZTExMGIzODI4MTI0YmNiZTZkNjExZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-18T15:03:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-18T15:03:29Z"}, "message": "Invoke vectorizable_live_operation in a consistent way\n\nvect_transform_stmt calls vectorizable_live_operation for\neach live statement in an SLP node, but vect_analyze_stmt\nonly called it the once.  This patch makes vect_analyze_stmt\nconsistent with vect_transform_stmt, which should be a bit\nmore robust, and also means that a later patch can use\nslp_index when deciding validity.\n\n2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (can_vectorize_live_stmts): New function,\n\tsplit out from...\n\t(vect_transform_stmt): ...here.\n\t(vect_analyze_stmt): Use it instead of calling\n\tvectorizable_live_operation directly.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252929", "tree": {"sha": "dc340ca7b00feb67a6b05f07d6c960fb3af00019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc340ca7b00feb67a6b05f07d6c960fb3af00019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f/comments", "author": null, "committer": null, "parents": [{"sha": "f64b12bd152735aacb948424766b33303bbeb5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64b12bd152735aacb948424766b33303bbeb5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64b12bd152735aacb948424766b33303bbeb5f8"}], "stats": {"total": 70, "additions": 44, "deletions": 26}, "files": [{"sha": "9292748cb1ac0d7669b313e30746377858611630", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68a0f2ffff4fdb05cfe110b3828124bcbe6d611f", "patch": "@@ -1,3 +1,13 @@\n+2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-stmts.c (can_vectorize_live_stmts): New function,\n+\tsplit out from...\n+\t(vect_transform_stmt): ...here.\n+\t(vect_analyze_stmt): Use it instead of calling\n+\tvectorizable_live_operation directly.\n+\n 2017-09-18  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* omp-offload.c (oacc_xform_loop): Enable SIMD vectorization on"}, {"sha": "852e5cdf183a34e122e5f3d6d41bcbec4a4dc062", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a0f2ffff4fdb05cfe110b3828124bcbe6d611f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=68a0f2ffff4fdb05cfe110b3828124bcbe6d611f", "patch": "@@ -8479,6 +8479,35 @@ vectorizable_comparison (gimple *stmt, gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* If SLP_NODE is nonnull, return true if vectorizable_live_operation\n+   can handle all live statements in the node.  Otherwise return true\n+   if STMT is not live or if vectorizable_live_operation can handle it.\n+   GSI and VEC_STMT are as for vectorizable_live_operation.  */\n+\n+static bool\n+can_vectorize_live_stmts (gimple *stmt, gimple_stmt_iterator *gsi,\n+\t\t\t  slp_tree slp_node, gimple **vec_stmt)\n+{\n+  if (slp_node)\n+    {\n+      gimple *slp_stmt;\n+      unsigned int i;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (slp_node), i, slp_stmt)\n+\t{\n+\t  stmt_vec_info slp_stmt_info = vinfo_for_stmt (slp_stmt);\n+\t  if (STMT_VINFO_LIVE_P (slp_stmt_info)\n+\t      && !vectorizable_live_operation (slp_stmt, gsi, slp_node, i,\n+\t\t\t\t\t       vec_stmt))\n+\t    return false;\n+\t}\n+    }\n+  else if (STMT_VINFO_LIVE_P (vinfo_for_stmt (stmt))\n+\t   && !vectorizable_live_operation (stmt, gsi, slp_node, -1, vec_stmt))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Make sure the statement is vectorizable.  */\n \n bool\n@@ -8685,17 +8714,13 @@ vect_analyze_stmt (gimple *stmt, bool *need_to_vectorize, slp_tree node,\n \n   /* Stmts that are (also) \"live\" (i.e. - that are used out of the loop)\n       need extra handling, except for vectorizable reductions.  */\n-  if (STMT_VINFO_LIVE_P (stmt_info)\n-      && STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n-    ok = vectorizable_live_operation (stmt, NULL, node, -1, NULL);\n-\n-  if (!ok)\n+  if (STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type\n+      && !can_vectorize_live_stmts (stmt, NULL, node, NULL))\n     {\n       if (dump_enabled_p ())\n         {\n           dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                           \"not vectorized: live stmt not \");\n-          dump_printf (MSG_MISSED_OPTIMIZATION,  \"supported: \");\n+                           \"not vectorized: live stmt not supported: \");\n           dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n         }\n \n@@ -8861,26 +8886,9 @@ vect_transform_stmt (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   /* Handle stmts whose DEF is used outside the loop-nest that is\n      being vectorized.  */\n-  if (slp_node)\n-    {\n-      gimple *slp_stmt;\n-      int i;\n-      if (STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n-\tFOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (slp_node), i, slp_stmt)\n-\t  {\n-\t    stmt_vec_info slp_stmt_info = vinfo_for_stmt (slp_stmt);\n-\t    if (STMT_VINFO_LIVE_P (slp_stmt_info))\n-\t      {\n-\t\tdone = vectorizable_live_operation (slp_stmt, gsi, slp_node, i,\n-\t\t\t\t\t\t    &vec_stmt);\n-\t\tgcc_assert (done);\n-\t      }\n-\t  }\n-    }\n-  else if (STMT_VINFO_LIVE_P (stmt_info)\n-\t   && STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n+  if (STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n     {\n-      done = vectorizable_live_operation (stmt, gsi, slp_node, -1, &vec_stmt);\n+      done = can_vectorize_live_stmts (stmt, gsi, slp_node, &vec_stmt);\n       gcc_assert (done);\n     }\n "}]}