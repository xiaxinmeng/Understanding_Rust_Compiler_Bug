{"sha": "20db0e3c83848146de105a34a5fc35f7383731b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkYjBlM2M4Mzg0ODE0NmRlMTA1YTM0YTVmYzM1ZjczODM3MzFiNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-06-09T06:55:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-06-09T06:55:15Z"}, "message": "re PR target/10913 (mips-elf ICE in text_section at varasm.c: 241)\n\n\tPR target/10913\n\t* config/mips/mips.h (TARGET_FILE_SWITCHING, NO_DBX_FUNCTION_END,\n\tPUT_SDB_SCL, PUT_SDB_INT_VAL, PUT_SDB_VAL, PUT_SDB_ENDEF,\n\tPUT_SDB_TYPE, PUT_SDB_SIZE, PUT_SDB_DIM, PUT_SDB_START_DIM,\n\tPUT_SDB_NEXT_DIM, PUT_SDB_LAST_DIM, PUT_SDB_TAG, PUT_SDB_SRC_FILE,\n\tSDB_GENERATE_FAKE, TEXT_SECTION): Delete.\n\t(PUT_SDB_DEF, PUT_SDB_PLAIN_DEF, PUT_SDB_BLOCK_START,\n\tPUT_SDB_BLOCK_END, PUT_SDB_FUNCTION_END): Replace use of\n\tasm_out_text_file with asm_out_file.\n\t* config/mips/iris5gas.h (PUT_SDB_SIZE, PUT_SDB_TYPE): Likewise.\n\t* config/mips/elf.h (TEXT_SECTION): Undefine.\n\t* config/mips/elf64.h (TEXT_SECION): Undefine.\n\t* config/mips/openbsd.h (TEXT_SECION): Undefine.\n\t* config/mips/mips.c (asm_out_text_file, asm_out_data_file): Delete.\n\t(override_options): Disable small-data optimizations unless using\n\tgas or explicit relocations.\n\t(mips_asm_file_start, mips_asm_file_end, mips_output_function_epilogue,\n\tiris6_asm_named_section, iris6_asm_file_start): Remove code for\n\thandling TARGET_FILE_SWITCHING.\n\t(copy_file_data): Move into TARGET_IRIX6 block.\n\nFrom-SVN: r67653", "tree": {"sha": "5b78c9b75f15af63343c14de43c1814712f0ee79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b78c9b75f15af63343c14de43c1814712f0ee79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20db0e3c83848146de105a34a5fc35f7383731b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20db0e3c83848146de105a34a5fc35f7383731b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20db0e3c83848146de105a34a5fc35f7383731b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20db0e3c83848146de105a34a5fc35f7383731b5/comments", "author": null, "committer": null, "parents": [{"sha": "aa9dc53d0d9d80cd6c77f2db7cb23bfebf3e9c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9dc53d0d9d80cd6c77f2db7cb23bfebf3e9c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9dc53d0d9d80cd6c77f2db7cb23bfebf3e9c34"}], "stats": {"total": 304, "additions": 71, "deletions": 233}, "files": [{"sha": "da62392af1c0ac4bd450016c41df257922adf65c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -1,3 +1,26 @@\n+2003-06-09  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR target/10913\n+\t* config/mips/mips.h (TARGET_FILE_SWITCHING, NO_DBX_FUNCTION_END,\n+\tPUT_SDB_SCL, PUT_SDB_INT_VAL, PUT_SDB_VAL, PUT_SDB_ENDEF,\n+\tPUT_SDB_TYPE, PUT_SDB_SIZE, PUT_SDB_DIM, PUT_SDB_START_DIM,\n+\tPUT_SDB_NEXT_DIM, PUT_SDB_LAST_DIM, PUT_SDB_TAG, PUT_SDB_SRC_FILE,\n+\tSDB_GENERATE_FAKE, TEXT_SECTION): Delete.\n+\t(PUT_SDB_DEF, PUT_SDB_PLAIN_DEF, PUT_SDB_BLOCK_START,\n+\tPUT_SDB_BLOCK_END, PUT_SDB_FUNCTION_END): Replace use of\n+\tasm_out_text_file with asm_out_file.\n+\t* config/mips/iris5gas.h (PUT_SDB_SIZE, PUT_SDB_TYPE): Likewise.\n+\t* config/mips/elf.h (TEXT_SECTION): Undefine.\n+\t* config/mips/elf64.h (TEXT_SECION): Undefine.\n+\t* config/mips/openbsd.h (TEXT_SECION): Undefine.\n+\t* config/mips/mips.c (asm_out_text_file, asm_out_data_file): Delete.\n+\t(override_options): Disable small-data optimizations unless using\n+\tgas or explicit relocations.\n+\t(mips_asm_file_start, mips_asm_file_end, mips_output_function_epilogue,\n+\tiris6_asm_named_section, iris6_asm_file_start): Remove code for\n+\thandling TARGET_FILE_SWITCHING.\n+\t(copy_file_data): Move into TARGET_IRIX6 block.\n+\n 2003-06-08  Richard Henderson  <rth@redhat.com>\n \n \t* expr.h (EXPAND_MEMORY): New."}, {"sha": "4c3b9cfe14421007daa5664cb385f12d6fd82bd6", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -48,19 +48,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* Given that Irix has it's own headers, not having TARGET_GAS here\n-   seems a mistake.  If we actually need to be prepared for file\n-   switching, then we need a custom TARGET_ASM_NAMED_SECTION too.  */\n-\n-#undef  TEXT_SECTION\n-#define TEXT_SECTION()\t\t\t\t\\\n-do {\t\t\t\t\t\t\\\n-  if (TARGET_FILE_SWITCHING)\t\t\t\\\n-    abort ();\t\t\t\t\t\\\n-  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\t\\\n-  fputc ('\\n', asm_out_file);\t\t\t\\\n-} while (0)\n-\n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n    expect various different forms for this operand.  The one given here"}, {"sha": "9328d4797617de72b25e52daf9438eab8660f0de", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -45,19 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* Given that Irix has it's own headers, not having TARGET_GAS here\n-   seems a mistake.  If we actually need to be prepared for file\n-   switching, then we need a custom TARGET_ASM_NAMED_SECTION too.  */\n-\n-#undef TEXT_SECTION\n-#define TEXT_SECTION()\t\t\t\t\\\n-do {\t\t\t\t\t\t\\\n-  if (TARGET_FILE_SWITCHING)\t\t\t\\\n-    abort ();\t\t\t\t\t\\\n-  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\t\\\n-  fputc ('\\n', asm_out_file);\t\t\t\\\n-} while (0)\n-\n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n    expect various different forms for this operand.  The one given here"}, {"sha": "c1ec6eb68188a5b2882932fcd45a559839c7eb45", "filename": "gcc/config/mips/iris5gas.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Firis5gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Firis5gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5gas.h?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -50,18 +50,16 @@ crtbegin.o%s\"\n    avoid conflicting with ELF directives.  These are only recognized\n    by gas, anyhow, not the native assembler.  */\n #undef PUT_SDB_SIZE\n-#define PUT_SDB_SIZE(a)                                       \\\n-do {                                                  \\\n-  extern FILE *asm_out_text_file;                     \\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t\" HOST_WIDE_INT_PRINT_DEC \";\", \\\n- \t   (HOST_WIDE_INT) (a));\t\t      \\\n+#define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file, \"\\t.esize\\t\" HOST_WIDE_INT_PRINT_DEC \";\", \\\n+ \t   (HOST_WIDE_INT) (a));\t\t\t\\\n } while (0)\n \n #undef PUT_SDB_TYPE\n-#define PUT_SDB_TYPE(a)                                       \\\n-do {                                                  \\\n-  extern FILE *asm_out_text_file;                     \\\n-  fprintf (asm_out_text_file, \"\\t.etype\\t0x%x;\", (a));        \\\n+#define PUT_SDB_TYPE(a)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file, \"\\t.etype\\t0x%x;\", (a));\t\\\n } while (0)\n \n /* Switch into a generic section.  */"}, {"sha": "17bfd2b165156980b3c70c3cfa52aec8a3a5de22", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 34, "deletions": 61, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -262,8 +262,8 @@ static bool mips_matching_cpu_name_p\t\tPARAMS ((const char *,\n static const struct mips_cpu_info *mips_parse_cpu   PARAMS ((const char *,\n \t\t\t\t\t\t\t      const char *));\n static const struct mips_cpu_info *mips_cpu_info_from_isa PARAMS ((int));\n-static void copy_file_data\t\t\tPARAMS ((FILE *, FILE *));\n #ifdef TARGET_IRIX6\n+static void copy_file_data\t\t\tPARAMS ((FILE *, FILE *));\n static void iris6_asm_named_section_1\t\tPARAMS ((const char *,\n \t\t\t\t\t\t\t unsigned int,\n \t\t\t\t\t\t\t unsigned int));\n@@ -448,12 +448,6 @@ int sym_lineno = 0;\n    handle .files inside of functions.  */\n int inside_function = 0;\n \n-/* Files to separate the text and the data output, so that all of the data\n-   can be emitted before the text, which will mean that the assembler will\n-   generate smaller code, based on the global pointer.  */\n-FILE *asm_out_data_file;\n-FILE *asm_out_text_file;\n-\n /* Linked list of all externals that are to be emitted when optimizing\n    for the global pointer if they haven't been declared by the end of\n    the program with an appropriate .comm or initialization.  */\n@@ -5411,6 +5405,16 @@ override_options ()\n   else\n     mips_abicalls = MIPS_ABICALLS_NO;\n \n+  /* The MIPS and SGI o32 assemblers expect small-data variables to\n+     be declared before they are used.  Although we once had code to\n+     do this, it was very invasive and fragile.  It no longer seems\n+     worth the effort.  */\n+  if (!TARGET_EXPLICIT_RELOCS && !TARGET_GAS)\n+    {\n+      mips_section_threshold = 0;\n+      target_flags &= ~MASK_GPOPT;\n+    }\n+\n   /* -membedded-pic is a form of PIC code suitable for embedded\n      systems.  All calls are made using PC relative addressing, and\n      all data is addressed using the $gp register.  This requires gas,\n@@ -6536,17 +6540,6 @@ mips_asm_file_start (stream)\n   if (TARGET_MIPS16)\n     fprintf (stream, \"\\t.set\\tmips16\\n\");\n \n-  /* This code exists so that we can put all externs before all symbol\n-     references.  This is necessary for the MIPS assembler's global pointer\n-     optimizations to work.  */\n-  if (TARGET_FILE_SWITCHING)\n-    {\n-      asm_out_data_file = stream;\n-      asm_out_text_file = tmpfile ();\n-    }\n-  else\n-    asm_out_data_file = asm_out_text_file = stream;\n-\n   if (flag_verbose_asm)\n     fprintf (stream, \"\\n%s -G value = %d, Arch = %s, ISA = %d\\n\",\n \t     ASM_COMMENT_START,\n@@ -6589,33 +6582,6 @@ mips_file_end ()\n \t    }\n \t}\n     }\n-\n-  if (TARGET_FILE_SWITCHING)\n-    {\n-      fputs (\"\\n\\t.text\\n\", asm_out_file);\n-      copy_file_data (asm_out_file, asm_out_text_file);\n-    }\n-}\n-\n-static void\n-copy_file_data (to, from)\n-     FILE *to, *from;\n-{\n-  char buffer[8192];\n-  size_t len;\n-  rewind (from);\n-  if (ferror (from))\n-    fatal_error (\"can't rewind temp file: %m\");\n-\n-  while ((len = fread (buffer, 1, sizeof (buffer), from)) > 0)\n-    if (fwrite (buffer, 1, len, to) != len)\n-      fatal_error (\"can't write to output file: %m\");\n-\n-  if (ferror (from))\n-    fatal_error (\"can't read from temp file: %m\");\n-\n-  if (fclose (from))\n-    fatal_error (\"can't close temp file: %m\");\n }\n \n /* Emit either a label, .comm, or .lcomm directive, and mark that the symbol\n@@ -7849,15 +7815,6 @@ mips_output_function_epilogue (file, size)\n   for (string = mips16_strings; string != 0; string = XEXP (string, 1))\n     SYMBOL_REF_FLAG (XEXP (string, 0)) = 0;\n   free_EXPR_LIST_list (&mips16_strings);\n-\n-  /* Restore the output file if optimizing the GP (optimizing the GP causes\n-     the text to be diverted to a tempfile, so that data decls come before\n-     references to the data).  */\n-  if (TARGET_FILE_SWITCHING)\n-    {\n-      asm_out_file = asm_out_data_file;\n-      data_section ();\n-    }\n }\n \f\n /* Expand the epilogue into a bunch of separate insns.  SIBCALL_P is true\n@@ -10623,8 +10580,6 @@ iris6_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n {\n-  if (TARGET_FILE_SWITCHING && (flags & SECTION_CODE))\n-    asm_out_file = asm_out_text_file;\n   iris6_asm_named_section_1 (name, flags, 0);\n }\n \n@@ -10691,8 +10646,8 @@ iris6_asm_output_align (file, log)\n }\n \n /* The Iris assembler does not record alignment from .align directives,\n-   but takes it from the first .section directive seen.  Play yet more\n-   file switching games so that we can emit a .section directive at the\n+   but takes it from the first .section directive seen.  Play file\n+   switching games so that we can emit a .section directive at the\n    beginning of the file with the proper alignment attached.  */\n \n void\n@@ -10704,9 +10659,6 @@ iris6_asm_file_start (stream)\n   iris_orig_asm_out_file = asm_out_file;\n   stream = tmpfile ();\n   asm_out_file = stream;\n-  asm_out_data_file = stream;\n-  if (! TARGET_FILE_SWITCHING)\n-    asm_out_text_file = stream;\n \n   iris_section_align_htab = htab_create (31, iris_section_align_entry_hash,\n \t\t\t\t\t iris_section_align_entry_eq, NULL);\n@@ -10724,6 +10676,27 @@ iris6_section_align_1 (slot, data)\n   return 1;\n }\n \n+static void\n+copy_file_data (to, from)\n+     FILE *to, *from;\n+{\n+  char buffer[8192];\n+  size_t len;\n+  rewind (from);\n+  if (ferror (from))\n+    fatal_error (\"can't rewind temp file: %m\");\n+\n+  while ((len = fread (buffer, 1, sizeof (buffer), from)) > 0)\n+    if (fwrite (buffer, 1, len, to) != len)\n+      fatal_error (\"can't write to output file: %m\");\n+\n+  if (ferror (from))\n+    fatal_error (\"can't read from temp file: %m\");\n+\n+  if (fclose (from))\n+    fatal_error (\"can't close temp file: %m\");\n+}\n+\n static void\n iris6_file_end ()\n {"}, {"sha": "fc4177a34a0d92b1b71dc17b5120105a7e6416a1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 124, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -307,12 +307,6 @@ extern void\t\tsbss_section PARAMS ((void));\n #define TARGET_EXPLICIT_RELOCS\t(target_flags & MASK_EXPLICIT_RELOCS)\n \n \n-/* This is true if we must enable the assembly language file switching\n-   code.  */\n-\n-#define TARGET_FILE_SWITCHING \\\n-  (TARGET_GP_OPT && ! TARGET_GAS && ! TARGET_MIPS16)\n-\n /* True if the call patterns should be split into a jalr followed by\n    an instruction to restore $gp.  This is only ever true for SVR4 PIC,\n    in which $gp is call-clobbered.  It is only safe to split the load\n@@ -342,12 +336,6 @@ extern void\t\tsbss_section PARAMS ((void));\n \n #define TARGET_GPWORD (TARGET_ABICALLS && (!TARGET_NEWABI || TARGET_GAS))\n \n-\n-/* We must disable the function end stabs when doing the file switching trick,\n-   because the Lscope stabs end up in the wrong place, making it impossible\n-   to debug the resulting code.  */\n-#define NO_DBX_FUNCTION_END TARGET_FILE_SWITCHING\n-\n \t\t\t\t\t/* Generate mips16 code */\n #define TARGET_MIPS16\t\t(target_flags & MASK_MIPS16)\n \n@@ -1370,110 +1358,28 @@ extern int mips_abi;\n \n #define FIND_BASE_TERM(X) mips_delegitimize_address (X)\n \n-/* Overrides for the COFF debug format.  */\n-#define PUT_SDB_SCL(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.scl\\t%d;\", (a));\t\\\n-} while (0)\n-\n-#define PUT_SDB_INT_VAL(a)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.val\\t\" HOST_WIDE_INT_PRINT_DEC \";\", \\\n-\t   (HOST_WIDE_INT)(a));\t\t\t        \\\n-} while (0)\n-\n-#define PUT_SDB_VAL(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fputs (\"\\t.val\\t\", asm_out_text_file);\t\t\\\n-  output_addr_const (asm_out_text_file, (a));\t\t\\\n-  fputc (';', asm_out_text_file);\t\t\t\\\n-} while (0)\n-\n #define PUT_SDB_DEF(a)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t%s.def\\t\",\t\t\\\n+  fprintf (asm_out_file, \"\\t%s.def\\t\",\t\t\t\\\n \t   (TARGET_GAS) ? \"\" : \"#\");\t\t\t\\\n-  ASM_OUTPUT_LABELREF (asm_out_text_file, a); \t\t\\\n-  fputc (';', asm_out_text_file);\t\t\t\\\n+  ASM_OUTPUT_LABELREF (asm_out_file, a); \t\t\\\n+  fputc (';', asm_out_file);\t\t\t\t\\\n } while (0)\n \n #define PUT_SDB_PLAIN_DEF(a)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t%s.def\\t.%s;\",\t\t\\\n+  fprintf (asm_out_file, \"\\t%s.def\\t.%s;\",\t\t\\\n \t   (TARGET_GAS) ? \"\" : \"#\", (a));\t\t\\\n } while (0)\n \n-#define PUT_SDB_ENDEF\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.endef\\n\");\t\t\\\n-} while (0)\n-\n-#define PUT_SDB_TYPE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.type\\t0x%x;\", (a));\t\\\n-} while (0)\n-\n-#define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.size\\t\" HOST_WIDE_INT_PRINT_DEC \";\", \\\n-\t   (HOST_WIDE_INT)(a));\t\t\t        \\\n-} while (0)\n-\n-#define PUT_SDB_DIM(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.dim\\t%d;\", (a));\t\\\n-} while (0)\n-\n-#ifndef PUT_SDB_START_DIM\n-#define PUT_SDB_START_DIM\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.dim\\t\");\t\t\\\n-} while (0)\n-#endif\n-\n-#ifndef PUT_SDB_NEXT_DIM\n-#define PUT_SDB_NEXT_DIM(a)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"%d,\", a);\t\t\\\n-} while (0)\n-#endif\n-\n-#ifndef PUT_SDB_LAST_DIM\n-#define PUT_SDB_LAST_DIM(a)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"%d;\", a);\t\t\\\n-} while (0)\n-#endif\n-\n-#define PUT_SDB_TAG(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.tag\\t\");\t\t\\\n-  ASM_OUTPUT_LABELREF (asm_out_text_file, a); \t\t\\\n-  fputc (';', asm_out_text_file);\t\t\t\\\n-} while (0)\n-\n /* For block start and end, we create labels, so that\n    later we can figure out where the correct offset is.\n    The normal .ent/.end serve well enough for functions,\n    so those are just commented out.  */\n \n #define PUT_SDB_BLOCK_START(LINE)\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file,\t\t\t\t\\\n+  fprintf (asm_out_file,\t\t\t\t\\\n \t   \"%sLb%d:\\n\\t%s.begin\\t%sLb%d\\t%d\\n\",\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\\\n \t   sdb_label_count,\t\t\t\t\\\n@@ -1486,8 +1392,7 @@ do {\t\t\t\t\t\t\t\\\n \n #define PUT_SDB_BLOCK_END(LINE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file,\t\t\t\t\\\n+  fprintf (asm_out_file,\t\t\t\t\\\n \t   \"%sLe%d:\\n\\t%s.bend\\t%sLe%d\\t%d\\n\",\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\\\n \t   sdb_label_count,\t\t\t\t\\\n@@ -1502,21 +1407,11 @@ do {\t\t\t\t\t\t\t\\\n \n #define PUT_SDB_FUNCTION_END(LINE)\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  ASM_OUTPUT_SOURCE_LINE (asm_out_text_file, LINE + sdb_begin_function_line); \\\n+  ASM_OUTPUT_SOURCE_LINE (asm_out_file, LINE + sdb_begin_function_line); \\\n } while (0)\n \n #define PUT_SDB_EPILOGUE_END(NAME)\n \n-#define PUT_SDB_SRC_FILE(FILENAME)\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  output_file_directive (asm_out_text_file, (FILENAME));\\\n-} while (0)\n-\n-#define SDB_GENERATE_FAKE(BUFFER, NUMBER)\t\t\\\n-  sprintf ((BUFFER), \".%dfake\", (NUMBER));\n-\n /* Correct the offset of automatic variables and arguments.  Note that\n    the MIPS debug format wants all automatic variables and arguments\n    to be in terms of the virtual frame pointer (stack pointer before\n@@ -3930,18 +3825,6 @@ while (0)\n #define ASM_OUTPUT_EXTERNAL(STREAM,DECL,NAME) \\\n   mips_output_external(STREAM,DECL,NAME)\n \n-/* Play switch file games if we're optimizing the global pointer.  */\n-\n-#undef TEXT_SECTION\n-#define TEXT_SECTION()\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  if (TARGET_FILE_SWITCHING)\t\t\t\t\\\n-    asm_out_file = asm_out_text_file;\t\t\t\\\n-  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\t\t\\\n-  fputc ('\\n', asm_out_file);            \t\t\\\n-} while (0)\n-\n \n /* This is how to declare a function name.  The actual work of\n    emitting the label is moved to function_prologue, so that we can"}, {"sha": "a61aac0d43829c14b75516cb5ba6b61bf93a0cf9", "filename": "gcc/config/mips/openbsd.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20db0e3c83848146de105a34a5fc35f7383731b5/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fopenbsd.h?ref=20db0e3c83848146de105a34a5fc35f7383731b5", "patch": "@@ -110,19 +110,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* Not having TARGET_GAS here seems a mistake.  If we actually need to\n-   be prepared for file switching, then we need a custom\n-   TARGET_ASM_NAMED_SECTION too.  */\n-\n-#undef TEXT_SECTION\n-#define TEXT_SECTION()\t\t\t\t\\\n-do {\t\t\t\t\t\t\\\n-  if (TARGET_FILE_SWITCHING)\t\t\t\\\n-    abort ();\t\t\t\t\t\\\n-  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\t\\\n-  fputc ('\\n', asm_out_file);\t\t\t\\\n-} while (0)\n-\n /* collect2 support (Macros for initialization).  */\n \n /* Mips default configuration is COFF-only, and confuses collect2.  */"}]}