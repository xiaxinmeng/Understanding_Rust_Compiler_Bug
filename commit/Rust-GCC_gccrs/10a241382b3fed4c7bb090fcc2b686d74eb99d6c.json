{"sha": "10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMjQxMzgyYjNmZWQ0YzdiYjA5MGZjYzJiNjg2ZDc0ZWI5OWQ2Yw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-05T22:17:22Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-05T22:17:22Z"}, "message": "Revert revision 217149 because it breaks Ada:\n\ngcc/testsuite/ChangeLog:\n\n2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n\n        PR driver/36312\n        * gcc.misc-tests/output.exp: New test case for identical input and\n        output files.\n\ninclude/ChangeLog:\n\n2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n\n        PR driver/36312\n        * filenames.h: Add prototype for canonical_filename_eq.\n\ngcc/ChangeLog:\n\n2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n\n        PR driver/36312\n        * diagnostic-core.h: Add prototype for fatal_error.\n        * diagnostic.c (fatal_error): New function fatal_error.\n        * gcc.c (store_arg): Remove have_o_argbuf_index.\n        (process_command): Check if input and output files are the same.\n        * toplev.c (init_asm_output): Check if input and output files are\n        the same.\n\nlibiberty/ChangeLog:\n\n2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n\n        PR driver/36312\n        * filename_cmp.c (canonical_filename_eq): New function to check if\n        file names are the same.\n        * functions.texi: Updated with documentation for new function.\n\nFrom-SVN: r217159", "tree": {"sha": "8249e806b1ac70a853b9112a20e3ef9a27d08c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8249e806b1ac70a853b9112a20e3ef9a27d08c1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/comments", "author": null, "committer": null, "parents": [{"sha": "14abf8cae10a18fc348df4e1ae93c6afc097d2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14abf8cae10a18fc348df4e1ae93c6afc097d2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14abf8cae10a18fc348df4e1ae93c6afc097d2cb"}], "stats": {"total": 192, "additions": 13, "deletions": 179}, "files": [{"sha": "e254dc2723d6c19cd70525978c404d1eb4ade671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -8,16 +8,6 @@\n \t(x86_64_elf_unique_section): Ditto.\n \t(x86_elf_aligned_common): Emit tab before .largecomm.\n \n-2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n-\n-\tPR driver/36312\n-\t* diagnostic-core.h: Add prototype for fatal_error.\n-\t* diagnostic.c (fatal_error): New function fatal_error.\n-\t* gcc.c (store_arg): Remove have_o_argbuf_index.\n-\t(process_command): Check if input and output files are the same.\n-\t* toplev.c (init_asm_output): Check if input and output files are\n-\tthe same.\n-\n 2014-11-05  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/9449"}, {"sha": "a8245de8985c08391fedb9f52878c4cb63c806e9", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -68,8 +68,6 @@ extern void error_n (location_t, int, const char *, const char *, ...)\n extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void fatal_error (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3)\n-     ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the second parameter.  */\n extern bool pedwarn (location_t, int, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(3,4);"}, {"sha": "642cbe38b9af67752cb1509b359d0cba2e835481", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -1163,23 +1163,6 @@ fatal_error (const char *gmsgid, ...)\n   gcc_unreachable ();\n }\n \n-/* An error which is severe enough that we make no attempt to\n-   continue.  Do not use this for internal consistency checks; that's\n-   internal_error.  Use of this function should be rare.  */\n-void\n-fatal_error (location_t loc, const char *gmsgid, ...)\n-{\n-  diagnostic_info diagnostic;\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, loc, DK_FATAL);\n-  report_diagnostic (&diagnostic);\n-  va_end (ap);\n-\n-  gcc_unreachable ();\n-}\n-\n /* An internal consistency check has failed.  We make no attempt to\n    continue.  Note that unless there is debugging value to be had from\n    a more specific message, or some other good reason, you should use"}, {"sha": "e013d5216f5d13cb0017055f1c5f63c4efe6b40b", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -1702,15 +1702,17 @@ typedef const char *const_char_p; /* For DEF_VEC_P.  */\n \n static vec<const_char_p> argbuf;\n \n+/* Position in the argbuf vector containing the name of the output file\n+   (the value associated with the \"-o\" flag).  */\n+\n+static int have_o_argbuf_index = 0;\n+\n /* Were the options -c, -S or -E passed.  */\n static int have_c = 0;\n \n /* Was the option -o passed.  */\n static int have_o = 0;\n \n-/* Pointer to output file name passed in with -o. */\n-static const char *output_file = 0;\n-\n /* This is the list of suffixes and codes (%g/%u/%U/%j) and the associated\n    temp file.  If the HOST_BIT_BUCKET is used for %j, no entry is made for\n    it here.  */\n@@ -1760,6 +1762,8 @@ store_arg (const char *arg, int delete_always, int delete_failure)\n {\n   argbuf.safe_push (arg);\n \n+  if (strcmp (arg, \"-o\") == 0)\n+    have_o_argbuf_index = argbuf.length ();\n   if (delete_always || delete_failure)\n     {\n       const char *p;\n@@ -3709,7 +3713,6 @@ driver_handle_option (struct gcc_options *opts,\n #if defined(HAVE_TARGET_EXECUTABLE_SUFFIX) || defined(HAVE_TARGET_OBJECT_SUFFIX)\n       arg = convert_filename (arg, ! have_c, 0);\n #endif\n-      output_file = arg;\n       /* Save the output name in case -save-temps=obj was used.  */\n       save_temps_prefix = xstrdup (arg);\n       /* On some systems, ld cannot handle \"-o\" without a space.  So\n@@ -4049,14 +4052,6 @@ process_command (unsigned int decoded_options_count,\n \t\t\t   CL_DRIVER, &handlers, global_dc);\n     }\n \n-  if (output_file && strcmp (output_file, \"-\"))\n-    {\n-      int i;\n-      for (i = 0; i < n_infiles; i++)\n-\tif (canonical_filename_eq (infiles[i].name, output_file))\n-\t  fatal_error (\"output file %s is the same as input file\", output_file);\n-    }\n-\n   /* If -save-temps=obj and -o name, create the prefix to use for %b.\n      Otherwise just make -save-temps=obj the same as -save-temps=cwd.  */\n   if (save_temps_flag == SAVE_TEMPS_OBJ && save_temps_prefix != NULL)"}, {"sha": "a409380fcbd0015d4d17c0b6e005eb9567a772af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -40,12 +40,6 @@\n \t* gnat.dg/inline11.adb: New test.\n \t* gnat.dg/inline11_pkg.ad[sb]: New helper.\n \n-2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n-\n-\tPR driver/36312\n-\t* gcc.misc-tests/output.exp: New test case for identical input and\n-\toutput files.\n-\n 2014-11-05  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/9449"}, {"sha": "aac76073ab763714bbb65f0f87b3564efe2032e5", "filename": "gcc/testsuite/gcc.misc-tests/output.exp", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14abf8cae10a18fc348df4e1ae93c6afc097d2cb/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutput.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14abf8cae10a18fc348df4e1ae93c6afc097d2cb/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutput.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutput.exp?ref=14abf8cae10a18fc348df4e1ae93c6afc097d2cb", "patch": "@@ -1,66 +0,0 @@\n-# Copyright (C) 2005-2014 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# Run GCC with the input file also specified as output file. Check that the\n-# compiler prints an error message and does not overwrite the input file.\n-\n-load_lib gcc-defs.exp\n-load_lib target-supports.exp\n-\n-# These tests don't run runtest_file_p consistently if it\n-# doesn't return the same values, so disable parallelization\n-# of this *.exp file.  The first parallel runtest to reach\n-# this will run all the tests serially.\n-if ![gcc_parallel_test_run_p output] {\n-    return\n-}\n-\n-# I'm not sure if this is needed here. It was in options.exp.\n-gcc_parallel_test_enable 0\n-\n-proc check_gcc_overwrite_input {} {\n-    set filename test-[pid]\n-    set fd [open $filename.c w]\n-    puts $fd \"int main (void) \\{ return 0; \\}\"\n-    close $fd\n-    remote_download host $filename.c\n-    set test \"input overwrite test\"\n-    set compiler cc1\n-    set gcc_output [gcc_target_compile $filename.c $filename.c executable \"\"]\n-    \n-    # Is this right, or do I need to use something like remote_upload?\n-    set fd [open $filename.c r]\n-    set file_data [read $fd]\n-    close $fd\n-    remote_file build delete $filename.c\n-\n-    # check if the contents of the input file has changed\n-    if {!($file_data eq \"int main (void) \\{ return 0; \\}\\n\")} {\n-\tfail \"$test (input overwritten)\"\n-\treturn\n-    }\n-    \n-    # check if the error message was printed\n-    if {![regexp -- \"same as input\" $gcc_output]} {\n-\tfail \"$test (no error printed)\"\n-\treturn\n-    }\n-    pass $test\n-}\n-\n-check_gcc_overwrite_input\n-\n-gcc_parallel_test_enable 1"}, {"sha": "9c75dd8e39ed98b91f8ddd74757bc21ab7bb7880", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -942,17 +942,10 @@ init_asm_output (const char *name)\n \t}\n       if (!strcmp (asm_file_name, \"-\"))\n \tasm_out_file = stdout;\n-      else if (!canonical_filename_eq (asm_file_name, name))\n-\tasm_out_file = fopen (asm_file_name, \"w\");\n       else\n-\t/* Use fatal_error (UNKOWN_LOCATION) instead of just fatal_error to\n-\t   prevent gcc from printing the first line in the current file. */\n-\tfatal_error (UNKNOWN_LOCATION,\n-\t\t     \"output file %s is the same as input file\",\n-\t\t     asm_file_name);\n+\tasm_out_file = fopen (asm_file_name, \"w\");\n       if (asm_out_file == 0)\n-\tfatal_error (UNKNOWN_LOCATION,\n-\t\t     \"can%'t open %s for writing: %m\", asm_file_name);\n+\tfatal_error (\"can%'t open %s for writing: %m\", asm_file_name);\n     }\n \n   if (!flag_syntax_only)"}, {"sha": "e48268296bfab1c177acdb177247741753305f4e", "filename": "include/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -1,8 +1,3 @@\n-2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n-\n-\tPR driver/36312\n-\t* filenames.h: Add prototype for canonical_filename_eq.\n-\n 2014-10-28  Richard Henderson  <rth@redhat.com>\n \n \t* longlong.h [__alpha] (umul_ppmm): Disable for c++."}, {"sha": "e799a51b6ad014d74581da6d92ce337be896c86a", "filename": "include/filenames.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/include%2Ffilenames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/include%2Ffilenames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffilenames.h?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -90,8 +90,6 @@ extern hashval_t filename_hash (const void *s);\n \n extern int filename_eq (const void *s1, const void *s2);\n \n-extern int canonical_filename_eq (const char *a, const char *b);\n-\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "ff06b184aaa6e77150519fe3ab808cc4c334b22f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -1,10 +1,3 @@\n-2014-11-05  Anthony Brandon  <anthony.brandon@gmail.com>\n-\n-\tPR driver/36312\n-\t* filename_cmp.c (canonical_filename_eq): New function to check if\n-\tfile names are the same.\n-\t* functions.texi: Updated with documentation for new function.\n-\n 2014-11-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* sigsetmask.c (_POSIX_SOURCE): Remove."}, {"sha": "9e16d242086d499a795f1d8f954fc4964c391b8e", "filename": "libiberty/filename_cmp.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/libiberty%2Ffilename_cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/libiberty%2Ffilename_cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffilename_cmp.c?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -24,13 +24,8 @@\n #include <string.h>\n #endif\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n #include \"filenames.h\"\n #include \"safe-ctype.h\"\n-#include \"libiberty.h\"\n \n /*\n \n@@ -195,27 +190,3 @@ filename_eq (const void *s1, const void *s2)\n   /* The casts are for -Wc++-compat.  */\n   return filename_cmp ((const char *) s1, (const char *) s2) == 0;\n }\n-\n-/*\n-\n-@deftypefn Extension int canonical_filename_eq (const char *@var{a}, const char *@var{b})\n-\n-Return non-zero if file names @var{a} and @var{b} are equivalent.\n-This function compares the canonical versions of the filenames as returned by\n-@code{lrealpath()}, so that so that different file names pointing to the same\n-underlying file are treated as being identical.\n-\n-@end deftypefn\n-\n-*/\n-\n-int\n-canonical_filename_eq (const char * a, const char * b)\n-{\n-  char * ca = lrealpath(a);\n-  char * cb = lrealpath(b);\n-  int res = filename_eq (ca, cb);\n-  free (ca);\n-  free (cb);\n-  return res;\n-}"}, {"sha": "3627285f9059c9cf552f0a247e221079208176a5", "filename": "libiberty/functions.texi", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a241382b3fed4c7bb090fcc2b686d74eb99d6c/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=10a241382b3fed4c7bb090fcc2b686d74eb99d6c", "patch": "@@ -125,16 +125,6 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n \n @end deftypefn\n \n-@c filename_cmp.c:201\n-@deftypefn Extension int canonical_filename_eq (const char *@var{a}, const char *@var{b})\n-\n-Return non-zero if file names @var{a} and @var{b} are equivalent.\n-This function compares the canonical versions of the filenames as returned by\n-@code{lrealpath()}, so that so that different file names pointing to the same\n-underlying file are treated as being identical.\n-\n-@end deftypefn\n-\n @c choose-temp.c:45\n @deftypefn Extension char* choose_temp_base (void)\n \n@@ -296,7 +286,7 @@ value 1).  If @var{valu} is zero, zero is returned.\n \n @end deftypefn\n \n-@c filename_cmp.c:37\n+@c filename_cmp.c:32\n @deftypefn Extension int filename_cmp (const char *@var{s1}, const char *@var{s2})\n \n Return zero if the two file names @var{s1} and @var{s2} are equivalent.\n@@ -313,15 +303,15 @@ and backward slashes are equal.\n \n @end deftypefn\n \n-@c filename_cmp.c:183\n+@c filename_cmp.c:178\n @deftypefn Extension int filename_eq (const void *@var{s1}, const void *@var{s2})\n \n Return non-zero if file names @var{s1} and @var{s2} are equivalent.\n This function is for use with hashtab.c hash tables.\n \n @end deftypefn\n \n-@c filename_cmp.c:152\n+@c filename_cmp.c:147\n @deftypefn Extension hashval_t filename_hash (const void *@var{s})\n \n Return the hash value for file name @var{s} that will be compared\n@@ -330,7 +320,7 @@ This function is for use with hashtab.c hash tables.\n \n @end deftypefn\n \n-@c filename_cmp.c:94\n+@c filename_cmp.c:89\n @deftypefn Extension int filename_ncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n \n Return zero if the two file names @var{s1} and @var{s2} are equivalent"}]}