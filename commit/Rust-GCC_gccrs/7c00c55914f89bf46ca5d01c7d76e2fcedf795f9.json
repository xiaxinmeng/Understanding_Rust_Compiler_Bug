{"sha": "7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MwMGM1NTkxNGY4OWJmNDZjYTVkMDFjN2Q3NmUyZmNlZGY3OTVmOQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T15:13:14Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T15:13:14Z"}, "message": "rs6000: Add vgnb\n\nAdd support for the vgnb instruction, which gathers every Nth bit\nper vector element.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_gnb): New #define.\n\t* config/rs6000/altivec.md (UNSPEC_VGNB): New constant.\n\t(vgnb): New insn.\n\t* config/rs6000/rs6000-builtin.def (BU_FUTURE_OVERLOAD_1): New\n\t#define.\n\t(BU_FUTURE_OVERLOAD_2): Likewise.\n\t(BU_FUTURE_OVERLOAD_3): Likewise.\n\t(__builtin_altivec_gnb): New built-in function.\n\t(__buiiltin_vec_gnb): New overloaded built-in function.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n\tDefine overloaded forms of __builtin_vec_gnb.\n\t(rs6000_expand_binop_builtin): Add error checking for 2nd argument\n\tof __builtin_vec_gnb.\n\t(builtin_function_type): Mark return value and arguments unsigned\n\tfor FUTURE_BUILTIN_VGNB.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n\tfor a Future Architecture): Add description of vec_gnb built-in\n\tfunction.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* gcc.target/powerpc/vec-gnb-0.c: New test.\n\t* gcc.target/powerpc/vec-gnb-1.c: New test.\n\t* gcc.target/powerpc/vec-gnb-10.c: New test.\n\t* gcc.target/powerpc/vec-gnb-2.c: New test.\n\t* gcc.target/powerpc/vec-gnb-3.c: New test.\n\t* gcc.target/powerpc/vec-gnb-4.c: New test.\n\t* gcc.target/powerpc/vec-gnb-5.c: New test.\n\t* gcc.target/powerpc/vec-gnb-6.c: New test.\n\t* gcc.target/powerpc/vec-gnb-7.c: New test.\n\t* gcc.target/powerpc/vec-gnb-8.c: New test.\n\t* gcc.target/powerpc/vec-gnb-9.c: New test.", "tree": {"sha": "e4a8d38848522133e27ca8cc30df265c04285bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a8d38848522133e27ca8cc30df265c04285bb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/comments", "author": null, "committer": null, "parents": [{"sha": "894ac7bce590dc5036c7f1477b881dc767ce2e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894ac7bce590dc5036c7f1477b881dc767ce2e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894ac7bce590dc5036c7f1477b881dc767ce2e5a"}], "stats": {"total": 922, "additions": 921, "deletions": 1}, "files": [{"sha": "62dc1066ab4e97c8d7ba1f741acde1c80d5e0474", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -1,3 +1,25 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_gnb): New #define.\n+\t* config/rs6000/altivec.md (UNSPEC_VGNB): New constant.\n+\t(vgnb): New insn.\n+\t* config/rs6000/rs6000-builtin.def (BU_FUTURE_OVERLOAD_1): New\n+\t#define.\n+\t(BU_FUTURE_OVERLOAD_2): Likewise.\n+\t(BU_FUTURE_OVERLOAD_3): Likewise.\n+\t(__builtin_altivec_gnb): New built-in function.\n+\t(__buiiltin_vec_gnb): New overloaded built-in function.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n+\tDefine overloaded forms of __builtin_vec_gnb.\n+\t(rs6000_expand_binop_builtin): Add error checking for 2nd argument\n+\tof __builtin_vec_gnb.\n+\t(builtin_function_type): Mark return value and arguments unsigned\n+\tfor FUTURE_BUILTIN_VGNB.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n+\tfor a Future Architecture): Add description of vec_gnb built-in\n+\tfunction.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \t    Bill Schmidt  <wschmidt@linux.ibm.com>\n "}, {"sha": "b6ecad6911d885b46d5ad40e2a3af6ef3c7f7ae5", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -694,6 +694,8 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_pdep(a, b)\t__builtin_altivec_vpdepd (a, b)\n #define vec_pext(a, b)\t__builtin_altivec_vpextd (a, b)\n \n+/* Overloaded built-in functions for future architecture.  */\n+#define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #endif\n \n #endif /* _ALTIVEC_H */"}, {"sha": "7cebb58331e306e037ce0772e9fdbf795fb5fdb9", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -162,6 +162,7 @@\n    UNSPEC_VRLNM\n    UNSPEC_VCLZDM\n    UNSPEC_VCTZDM\n+   UNSPEC_VGNB\n    UNSPEC_VPDEPD\n    UNSPEC_VPEXTD\n ])\n@@ -4136,6 +4137,15 @@\n    \"vpextd %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"vgnb\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n+\t            (match_operand:QI 2 \"u3bit_cint_operand\" \"n\")]\n+         UNSPEC_VGNB))]\n+   \"TARGET_FUTURE\"\n+   \"vgnb %0,%1,%2\"\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n \n (define_expand \"bcd<bcd_add_sub>_<code>\"\n   [(parallel [(set (reg:CCFP CR6_REGNO)"}, {"sha": "e25249b5418cd2f66983d68a0319c9c0e30bf915", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -969,6 +969,30 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_FUTURE_OVERLOAD_1(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_OVERLOAD_2(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_OVERLOAD_3(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_3 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n #endif\n \n \f\n@@ -2520,6 +2544,11 @@ BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n BU_FUTURE_V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)\n BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n+BU_FUTURE_V_2 (VGNB, \"vgnb\", CONST, vgnb)\n+\n+/* Future architecture overloaded vector built-ins.  */\n+BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n+\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)"}, {"sha": "952f17c6854bacf515aece9b6214bd4028a7a3e9", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -5505,6 +5505,17 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI },\n \n+  /* FUTURE overloaded builtin functions, */\n+  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI, 0 },\n+  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI, 0 },\n+  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI, 0 },\n+  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI, 0 },\n+  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_UINTQI, 0 },\n   { RS6000_BUILTIN_NONE, RS6000_BUILTIN_NONE, 0, 0, 0, 0 }\n };\n \f\n@@ -8829,6 +8840,20 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  return CONST0_RTX (tmode);\n \t}\n     }\n+  else if (icode == CODE_FOR_vgnb)\n+    {\n+      /* Only allow unsigned literals in range 2..7.  */\n+      /* Note that arg1 is second operand.  */\n+      STRIP_NOPS (arg1);\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || (TREE_INT_CST_LOW (arg1) & ~7)\n+\t  || !IN_RANGE (TREE_INT_CST_LOW (arg1), 2, 7))\n+\t{\n+\t  error (\"argument 2 must be unsigned literal between \"\n+\t\t \"2 and 7 inclusive\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n   else if (icode == CODE_FOR_altivec_vsplth)\n     {\n       /* Only allow 3-bit unsigned literals.  */\n@@ -12928,6 +12953,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P8V_BUILTIN_ORC_V1TI_UNS:\n     case FUTURE_BUILTIN_VCLZDM:\n     case FUTURE_BUILTIN_VCTZDM:\n+    case FUTURE_BUILTIN_VGNB:\n     case FUTURE_BUILTIN_VPDEPD:\n     case FUTURE_BUILTIN_VPEXTD:\n       h.uns_p[0] = 1;"}, {"sha": "4a4d3bd0918f460d086efd4ceeccbb24c3c73c0b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -20713,6 +20713,23 @@ Perform a vector count trailing zeros under bit mask operation, as if\n implemented by the Future @code{vctzdm} instruction.\n @findex vec_ctzm\n \n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_gnb (vector unsigned char, const unsigned char)\n+@exdent vector unsigned long long int\n+@exdent vec_gnb (vector unsigned short, const unsigned char)\n+@exdent vector unsigned long long int\n+@exdent vec_gnb (vector unsigned int, const unsigned char)\n+@exdent vector unsigned long long int\n+@exdent vec_gnb (vector unsigned long long int, const unsigned char)\n+@exdent vector unsigned long long int\n+@exdent vec_gnb (vector unsigned __int128, const unsigned char)\n+@end smallexample\n+Perform a 128-bit vector gather  operation, as if implemented by the Future\n+@code{vgnb} instruction.  The second argument must be a literal\n+integer value between 2 and 7 inclusive.\n+@findex vec_gnb\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pdep (vector unsigned long long int, vector unsigned long long int)\n@@ -21452,7 +21469,6 @@ v8qi __builtin_vis_fpmaxu8 (v8qi, v8qi);\n v4hi __builtin_vis_fpmaxu16 (v4hi, v4hi);\n v2si __builtin_vis_fpmaxu32 (v2si, v2si);\n \n-\n v8qi __builtin_vis_fpmin8 (v8qi, v8qi);\n v4hi __builtin_vis_fpmin16 (v4hi, v4hi);\n v2si __builtin_vis_fpmin32 (v2si, v2si);"}, {"sha": "65feee50c8b0873ebfc71b43932046c8388a0707", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -1,3 +1,18 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-gnb-0.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-1.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-10.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-2.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-3.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-4.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-5.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-6.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-7.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-8.c: New test.\n+\t* gcc.target/powerpc/vec-gnb-9.c: New test.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-pdep-0.c: New."}, {"sha": "a95c29cf31d7b59585144063993a3dcec756399f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-0.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-0.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned char source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned char source_a = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88 };\n+  vector unsigned char source_b = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+  vector unsigned char source_c = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88 };\n+  vector unsigned char source_d = {\n+    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n+    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "e8ceed559945e17fd69d58ea357f9b01b9e4e3f9", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-1.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned char source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned char source_a = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88 };\n+  vector unsigned char source_b = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+  vector unsigned char source_c = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88 };\n+  vector unsigned char source_d = {\n+    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n+    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "73ff0d9fea7bfc92b557a01879cf4b1abf315ad6", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-10.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-10.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_vec_gnb (vector unsigned char source, unsigned char stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 0);\t/* { dg-error \"between 2 and 7\" } */\n+    case 3:\n+      return vec_gnb (source, -1);\t/* { dg-error \"between 2 and 7\" } */\n+    case 4:\n+      return vec_gnb (source, 8);\t/* { dg-error \"between 2 and 7\" } */\n+    case 5:\n+      return vec_gnb (source, 1);\t/* { dg-error \"between 2 and 7\" } */\n+    case 6:\n+      return vec_gnb (source, stride);\t/* { dg-error \"unsigned literal\" } */\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned char source_a = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88 };\n+  vector unsigned char source_b = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+  vector unsigned char source_c = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88 };\n+  vector unsigned char source_d = {\n+    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n+    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "eb51a8db2196f0488700847d85aa0f29fe112549", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-2.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned short int source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned short int source_a = { 0, 0, 0, 0, 0, 0, 0x8888, 0x8888 };\n+  vector unsigned short int source_b = {\n+    0, 0, 0, 0, 0x8080, 0x8080, 0x8080, 0x8080 };\n+  vector unsigned short int source_c = {\n+    0, 0, 0, 0, 0x8888, 0x8888, 0x8888, 0x8888 };\n+  vector unsigned short int source_d = {\n+    0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "f36b91a83e5a66e49668705e7021a6facb534660", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-3.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-3.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned short int source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned short int source_a = { 0, 0, 0, 0, 0, 0, 0x8888, 0x8888 };\n+  vector unsigned short int source_b = {\n+    0, 0, 0, 0, 0x8080, 0x8080, 0x8080, 0x8080 };\n+  vector unsigned short int source_c = {\n+    0, 0, 0, 0, 0x8888, 0x8888, 0x8888, 0x8888 };\n+  vector unsigned short int source_d = {\n+    0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "df312ae1b285b3422e649fbecc4533058a1bb07d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-4.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-4.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned int source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned int source_a = { 0, 0, 0, 0x88888888 };\n+  vector unsigned int source_b = { 0, 0, 0x80808080, 0x80808080 };\n+  vector unsigned int source_c = { 0, 0, 0x88888888, 0x88888888 };\n+  vector unsigned int source_d =\n+    { 0x80808080, 0x80808080, 0x80808080, 0x80808080 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "1c3c3fa72c0fee889d00b90d06c155135f395cf2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-5.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-5.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned int source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned int source_a = { 0, 0, 0, 0x88888888 };\n+  vector unsigned int source_b = { 0, 0, 0x80808080, 0x80808080 };\n+  vector unsigned int source_c = { 0, 0, 0x88888888, 0x88888888 };\n+  vector unsigned int source_d =\n+    { 0x80808080, 0x80808080, 0x80808080, 0x80808080 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "a6dc78a3e98fe45d52ad0ab66509df6d2074c65c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-6.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-6.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned long long int source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned long long int source_a = { 0, 0x8888888800000000ull };\n+  vector unsigned long long int source_b = { 0, 0x8080808080808080ull };\n+  vector unsigned long long int source_c = { 0, 0x8888888888888888ull };\n+  vector unsigned long long int source_d = { 0x8080808080808080ull,\n+\t\t\t\t\t     0x8080808080808080ull };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "bbacff986a081961226e852d51f1ade80132ddd4", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-7.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-7.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned long long int source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned long long int source_a = { 0, 0x8888888800000000ull };\n+  vector unsigned long long int source_b = { 0, 0x8080808080808080ull };\n+  vector unsigned long long int source_c = { 0, 0x8888888888888888ull };\n+  vector unsigned long long int source_d = { 0x8080808080808080ull,\n+\t\t\t\t\t     0x8080808080808080ull };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "23c16e51d48d55551765f40f91d351a3c9f89329", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-8.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-8.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned __int128 source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned __int128 source_a =\n+    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n+  vector unsigned __int128 source_b =\n+    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+  vector unsigned __int128 source_c =\n+    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n+  vector unsigned __int128 source_d =\n+    { 0x8080808080808080ull |\n+      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "659e802d819f6bf6747d6f86aecebabe4e77daa1", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-9.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c00c55914f89bf46ca5d01c7d76e2fcedf795f9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-9.c?ref=7c00c55914f89bf46ca5d01c7d76e2fcedf795f9", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* This test is replicated for every different vector type since\n+   vec_gnb is polymorphic.  */\n+unsigned long long int\n+do_vec_gnb (vector unsigned __int128 source, int stride)\n+{\n+  switch (stride)\n+    {\n+    case 2:\n+      return vec_gnb (source, 2);\n+    case 3:\n+      return vec_gnb (source, 3);\n+    case 4:\n+      return vec_gnb (source, 4);\n+    case 5:\n+      return vec_gnb (source, 5);\n+    case 6:\n+      return vec_gnb (source, 6);\n+    case 7:\n+      return vec_gnb (source, 7);\n+\n+    default:\n+      /* Illegal value of stride */\n+      abort ();\n+      return 0;\n+    }\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  /* For result = 0xaaaa_0000_0000_0000, use:\n+      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n+      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n+\n+     For result = 0xaaaa_aaaa_0000_0000, use:\n+      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n+      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n+  */\n+\n+  /* The last array element appears in the left-most (first) bit\n+     positions of the vector register.  */\n+  vector unsigned __int128 source_a =\n+    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n+  vector unsigned __int128 source_b =\n+    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+  vector unsigned __int128 source_c =\n+    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n+  vector unsigned __int128 source_d =\n+    { 0x8080808080808080ull |\n+      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+\n+  unsigned long long int results [] =\n+    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n+      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n+\n+  if (do_vec_gnb (source_a, 2) != results [0])\n+    abort ();\n+  if (do_vec_gnb (source_b, 4) != results [1])\n+    abort ();\n+  if (do_vec_gnb (source_c, 2) != results [2])\n+    abort ();\n+  if (do_vec_gnb (source_d, 4) != results [3])\n+    abort ();\n+\n+  return 0;\n+}"}]}