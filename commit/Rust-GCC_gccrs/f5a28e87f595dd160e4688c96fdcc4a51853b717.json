{"sha": "f5a28e87f595dd160e4688c96fdcc4a51853b717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhMjhlODdmNTk1ZGQxNjBlNDY4OGM5NmZkY2M0YTUxODUzYjcxNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-08T06:08:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-08T06:08:31Z"}, "message": "re PR c++/48500 (Regression: Failing to convert template argument to concrete type, in C++0x mode.)\n\n\tPR c++/48500\n\t* semantics.c (potential_constant_expression_1) [CALL_EXPR]: Check\n\targuments even if we don't know the function.\n\nFrom-SVN: r172165", "tree": {"sha": "7ff083c1ec4c4937f54de48afe8e87ac01f5bca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ff083c1ec4c4937f54de48afe8e87ac01f5bca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a28e87f595dd160e4688c96fdcc4a51853b717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a28e87f595dd160e4688c96fdcc4a51853b717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a28e87f595dd160e4688c96fdcc4a51853b717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a28e87f595dd160e4688c96fdcc4a51853b717/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b06a1f50c5030b27e307c86ab49eb16a6b32fc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06a1f50c5030b27e307c86ab49eb16a6b32fc56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06a1f50c5030b27e307c86ab49eb16a6b32fc56"}], "stats": {"total": 111, "additions": 72, "deletions": 39}, "files": [{"sha": "1b8f87363af82d8634686a648e1242a7703582aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5a28e87f595dd160e4688c96fdcc4a51853b717", "patch": "@@ -1,5 +1,9 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48500\n+\t* semantics.c (potential_constant_expression_1) [CALL_EXPR]: Check\n+\targuments even if we don't know the function.\n+\n \tPR c++/48481\n \t* tree.c (build_overload): Allow an unwrapped FUNCTION_DECL\n \tat the end of the chain."}, {"sha": "0b4d1ec497a8da7b90b5fd45744510dfe50713e6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 53, "deletions": 39, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f5a28e87f595dd160e4688c96fdcc4a51853b717", "patch": "@@ -7358,6 +7358,8 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n             class member access expression, including the result of the\n             implicit transformation in the body of the non-static\n             member function (9.3.1);  */\n+      /* FIXME this restriction seems pointless since the standard dropped\n+\t \"potential constant expression\".  */\n       if (is_this_parameter (t))\n         {\n           if (flags & tf_error)\n@@ -7373,51 +7375,63 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       {\n         tree fun = get_function_named_in_call (t);\n         const int nargs = call_expr_nargs (t);\n-        if (TREE_CODE (fun) != FUNCTION_DECL)\n-          {\n-\t    if (potential_constant_expression_1 (fun, rval, flags))\n-\t      /* Might end up being a constant function pointer.  */\n-\t      return true;\n-            if (flags & tf_error)\n-              error (\"%qE is not a function name\", fun);\n-            return false;\n-          }\n-\t/* Skip initial arguments to base constructors.  */\n-\tif (DECL_BASE_CONSTRUCTOR_P (fun))\n-\t  i = num_artificial_parms_for (fun);\n+\ti = 0;\n+\n+\tif (is_overloaded_fn (fun))\n+\t  {\n+\t    if (TREE_CODE (fun) == FUNCTION_DECL)\n+\t      {\n+\t\tif (builtin_valid_in_constant_expr_p (fun))\n+\t\t  return true;\n+\t\tif (!DECL_DECLARED_CONSTEXPR_P (fun)\n+\t\t    && !morally_constexpr_builtin_function_p (fun))\n+\t\t  {\n+\t\t    if (flags & tf_error)\n+\t\t      error (\"%qD is not %<constexpr%>\", fun);\n+\t\t    return false;\n+\t\t  }\n+\t\t/* A call to a non-static member function takes the address\n+\t\t   of the object as the first argument.  But in a constant\n+\t\t   expression the address will be folded away, so look\n+\t\t   through it now.  */\n+\t\tif (DECL_NONSTATIC_MEMBER_FUNCTION_P (fun)\n+\t\t    && !DECL_CONSTRUCTOR_P (fun))\n+\t\t  {\n+\t\t    tree x = get_nth_callarg (t, 0);\n+\t\t    if (is_this_parameter (x))\n+\t\t      /* OK.  */;\n+\t\t    else if (!potential_constant_expression_1 (x, rval, flags))\n+\t\t      {\n+\t\t\tif (flags & tf_error)\n+\t\t\t  error (\"object argument is not a potential \"\n+\t\t\t\t \"constant expression\");\n+\t\t\treturn false;\n+\t\t      }\n+\t\t    i = 1;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      fun = get_first_fn (fun);\n+\t    /* Skip initial arguments to base constructors.  */\n+\t    if (DECL_BASE_CONSTRUCTOR_P (fun))\n+\t      i = num_artificial_parms_for (fun);\n+\t    fun = DECL_ORIGIN (fun);\n+\t  }\n \telse\n-\t  i = 0;\n-\tfun = DECL_ORIGIN (fun);\n-        if (builtin_valid_in_constant_expr_p (fun))\n-          return true;\n-        if (!DECL_DECLARED_CONSTEXPR_P (fun)\n-            && !morally_constexpr_builtin_function_p (fun))\n           {\n-            if (flags & tf_error)\n-              error (\"%qD is not %<constexpr%>\", fun);\n-            return false;\n+\t    if (potential_constant_expression_1 (fun, rval, flags))\n+\t      /* Might end up being a constant function pointer.  */;\n+\t    else\n+\t      {\n+\t\tif (flags & tf_error)\n+\t\t  error (\"%qE is not a function name\", fun);\n+\t\treturn false;\n+\t      }\n           }\n         for (; i < nargs; ++i)\n           {\n             tree x = get_nth_callarg (t, i);\n-            /* A call to a non-static member function takes the\n-               address of the object as the first argument.\n-               But in a constant expression the address will be folded\n-\t       away, so look through it now.  */\n-            if (i == 0 && DECL_NONSTATIC_MEMBER_P (fun)\n-                && !DECL_CONSTRUCTOR_P (fun))\n-\t      {\n-\t\tif (is_this_parameter (x))\n-\t\t  /* OK.  */;\n-                else if (!potential_constant_expression_1 (x, rval, flags))\n-\t\t  {\n-\t\t    if (flags & tf_error)\n-\t\t      error (\"object argument is not a potential constant \"\n-\t\t\t     \"expression\");\n-\t\t    return false;\n-\t\t  }\n-              }\n-\t    else if (!potential_constant_expression_1 (x, rval, flags))\n+\t    if (!potential_constant_expression_1 (x, rval, flags))\n \t      {\n \t\tif (flags & tf_error)\n \t\t  error (\"argument in position %qP is not a \""}, {"sha": "436404b013631a09f692241439d5403c65566b8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5a28e87f595dd160e4688c96fdcc4a51853b717", "patch": "@@ -1,5 +1,7 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/regress/call1.C: New.\n+\n \t* g++.dg/cpp0x/variadic107.C: New.\n \n \t* g++.dg/cpp0x/sfinae11.C: New."}, {"sha": "833318b0560fcbefdddb9cda8a54d9b59b273d0f", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/call1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fcall1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a28e87f595dd160e4688c96fdcc4a51853b717/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fcall1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fcall1.C?ref=f5a28e87f595dd160e4688c96fdcc4a51853b717", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/48500\n+// { dg-options -std=c++0x }\n+\n+struct linked_ptr {\n+};\n+template <typename T> linked_ptr make_linked_ptr(T* ptr);\n+struct Concrete;\n+struct NewedClass {\n+  NewedClass(const Concrete& req){}\n+};\n+template<typename ArgT> void AddObjToChange(const ArgT& req) {\n+  linked_ptr p = make_linked_ptr(new NewedClass(req));\n+}"}]}