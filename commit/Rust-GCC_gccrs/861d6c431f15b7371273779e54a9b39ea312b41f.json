{"sha": "861d6c431f15b7371273779e54a9b39ea312b41f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxZDZjNDMxZjE1YjczNzEyNzM3NzllNTRhOWIzOWVhMzEyYjQxZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-12-24T14:32:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-24T14:32:21Z"}, "message": "hashtable_policy.h (_Prime_rehash_policy:: _M_next_bkt, [...]): Use __builtin_ceil.\n\n2007-12-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1_impl/hashtable_policy.h (_Prime_rehash_policy::\n\t_M_next_bkt, _M_bkt_for_elements, _M_need_rehash): Use __builtin_ceil.\n\t* include/std/unordered_map: Do not include <cmath>; prefer\n\t<bits/stringfwd.h> to <string>.\n\t* include/std/unordered_set: Likewise.\n\t* include/tr1/unordered_map: Likewise.\n\t* include/tr1/unordered_set: Likewise.\n\nFrom-SVN: r131157", "tree": {"sha": "c5ede4b98170a2831fb15e797760ac3107d73366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ede4b98170a2831fb15e797760ac3107d73366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861d6c431f15b7371273779e54a9b39ea312b41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d6c431f15b7371273779e54a9b39ea312b41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861d6c431f15b7371273779e54a9b39ea312b41f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d6c431f15b7371273779e54a9b39ea312b41f/comments", "author": null, "committer": null, "parents": [{"sha": "d0cbf089dbdc6daefd3fe05347e6e6092e9abdd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cbf089dbdc6daefd3fe05347e6e6092e9abdd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0cbf089dbdc6daefd3fe05347e6e6092e9abdd9"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "99da8b588154d012daa61710870765e1e798213f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=861d6c431f15b7371273779e54a9b39ea312b41f", "patch": "@@ -1,3 +1,13 @@\n+2007-12-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/hashtable_policy.h (_Prime_rehash_policy::\n+\t_M_next_bkt, _M_bkt_for_elements, _M_need_rehash): Use __builtin_ceil.\n+\t* include/std/unordered_map: Do not include <cmath>; prefer\n+\t<bits/stringfwd.h> to <string>.\n+\t* include/std/unordered_set: Likewise.\n+\t* include/tr1/unordered_map: Likewise.\n+\t* include/tr1/unordered_set: Likewise.\n+\n 2007-12-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/std/complex (complex<float>::complex(float, float)):"}, {"sha": "4ce80514d686a2ce793577c3d31b700c2b8beea2", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=861d6c431f15b7371273779e54a9b39ea312b41f", "patch": "@@ -44,13 +44,12 @@\n #  error C++0x header cannot be included from TR1 header\n #endif\n \n-#include <cmath>\n-#include <string>\n #include <utility>\n #include <algorithm> // lower_bound\n+#include <type_traits>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n-#include <type_traits>\n+#include <bits/stringfwd.h>\n #include <bits/functional_hash.h>\n #include <bits/hashtable.h>\n "}, {"sha": "3cc69372b6f74550cd1556e674d51f48ecb34814", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=861d6c431f15b7371273779e54a9b39ea312b41f", "patch": "@@ -44,13 +44,12 @@\n #  error C++0x header cannot be included from TR1 header\n #endif\n \n-#include <cmath>\n-#include <string>\n #include <utility>\n #include <algorithm> // lower_bound\n+#include <type_traits>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n-#include <type_traits>\n+#include <bits/stringfwd.h>\n #include <bits/functional_hash.h>\n #include <bits/hashtable.h>\n "}, {"sha": "041eb9443cf8b4802cde2ae85127896604453811", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=861d6c431f15b7371273779e54a9b39ea312b41f", "patch": "@@ -40,12 +40,11 @@\n #  error TR1 header cannot be included from C++0x header\n #endif\n \n-#include <cmath>\n-#include <string>\n #include <utility>\n #include <algorithm> // lower_bound\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n+#include <bits/stringfwd.h>\n #include <tr1/type_traits>\n #include <tr1/functional_hash.h>\n #include <tr1/hashtable.h>"}, {"sha": "16181681f557f5d602b293c255365057542523db", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=861d6c431f15b7371273779e54a9b39ea312b41f", "patch": "@@ -40,12 +40,11 @@\n #  error TR1 header cannot be included from C++0x header\n #endif\n \n-#include <cmath>\n-#include <string>\n #include <utility>\n #include <algorithm> // lower_bound\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n+#include <bits/stringfwd.h>\n #include <tr1/type_traits>\n #include <tr1/functional_hash.h>\n #include <tr1/hashtable.h>"}, {"sha": "b74531c2ddf8e2179a069cca50f8521d5ea43a2a", "filename": "libstdc++-v3/include/tr1_impl/hashtable_policy.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d6c431f15b7371273779e54a9b39ea312b41f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h?ref=861d6c431f15b7371273779e54a9b39ea312b41f", "patch": "@@ -425,8 +425,8 @@ namespace __detail\n   {\n     const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n \t\t\t\t\t\t+ _S_n_primes, __n);\n-    _M_next_resize = static_cast<std::size_t>(std::ceil(*__p\n-\t\t\t\t\t\t\t* _M_max_load_factor));\n+    _M_next_resize = \n+      static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n   }\n \n@@ -439,8 +439,8 @@ namespace __detail\n     const float __min_bkts = __n / _M_max_load_factor;\n     const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n \t\t\t\t\t\t+ _S_n_primes, __min_bkts);\n-    _M_next_resize = static_cast<std::size_t>(std::ceil(*__p\n-\t\t\t\t\t\t\t* _M_max_load_factor));\n+    _M_next_resize =\n+      static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n   }\n \n@@ -468,15 +468,14 @@ namespace __detail\n \t    const unsigned long* __p =\n \t      std::lower_bound(__prime_list, __prime_list + _S_n_primes,\n \t\t\t       __min_bkts);\n-\t    _M_next_resize =\n-\t      static_cast<std::size_t>(std::ceil(*__p * _M_max_load_factor));\n+\t    _M_next_resize = static_cast<std::size_t>\n+\t      (__builtin_ceil(*__p * _M_max_load_factor));\n \t    return std::make_pair(true, *__p);\n \t  }\n \telse \n \t  {\n-\t    _M_next_resize =\n-\t      static_cast<std::size_t>(std::ceil(__n_bkt\n-\t\t\t\t\t\t * _M_max_load_factor));\n+\t    _M_next_resize = static_cast<std::size_t>\n+\t      (__builtin_ceil(__n_bkt * _M_max_load_factor));\n \t    return std::make_pair(false, 0);\n \t  }\n       }"}]}