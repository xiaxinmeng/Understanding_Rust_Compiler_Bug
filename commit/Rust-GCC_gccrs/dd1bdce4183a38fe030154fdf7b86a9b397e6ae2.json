{"sha": "dd1bdce4183a38fe030154fdf7b86a9b397e6ae2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQxYmRjZTQxODNhMzhmZTAzMDE1NGZkZjdiODZhOWIzOTdlNmFlMg==", "commit": {"author": {"name": "Venkataramanan Kumar", "email": "venkataramanan.kumar@amd.com", "date": "2015-05-26T15:32:02Z"}, "committer": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2015-05-26T15:32:02Z"}, "message": "re PR target/66049 (Few AArch64 extend and add with shift tests generates sub optimal code with trunk gcc 6.0.)\n\n2015-05-26  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n\n        PR target/66049\n        * config/aarch64/aarch64.md\n        (*adds_shift_imm_<mode>):  New pattern.\n        (*subs_shift_imm_<mode>):  Likewise.\n        (*adds_<optab><ALLX:mode>_shift_<GPI:mode>):  Likewise.\n        (*subs_<optab><ALLX:mode>_shift_<GPI:mode>): Likewise.\n        (*add_uxt<mode>_shift2): Likewise.\n        (*add_uxtsi_shift2_uxtw): Likewise.\n        (*sub_uxt<mode>_shift2): Likewise.\n        (*sub_uxtsi_shift2_uxtw): Likewise.\n\nFrom-SVN: r223703", "tree": {"sha": "408a3a72454683b3387e6cc70606f8c829138848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408a3a72454683b3387e6cc70606f8c829138848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2/comments", "author": null, "committer": null, "parents": [{"sha": "efac9d455f2c142a4e43c7ebc13d50f4a5ebe890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efac9d455f2c142a4e43c7ebc13d50f4a5ebe890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efac9d455f2c142a4e43c7ebc13d50f4a5ebe890"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "cc7c30a88975149ade128354f91a588e836bb0a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd1bdce4183a38fe030154fdf7b86a9b397e6ae2", "patch": "@@ -1,3 +1,16 @@\n+2015-05-26  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n+\n+\tPR target/66049\n+\t* config/aarch64/aarch64.md\n+\t(*adds_shift_imm_<mode>):  New pattern.\n+\t(*subs_shift_imm_<mode>):  Likewise.\n+\t(*adds_<optab><ALLX:mode>_shift_<GPI:mode>):  Likewise.\n+\t(*subs_<optab><ALLX:mode>_shift_<GPI:mode>): Likewise.\n+\t(*add_uxt<mode>_shift2): Likewise.\n+\t(*add_uxtsi_shift2_uxtw): Likewise.\n+\t(*sub_uxt<mode>_shift2): Likewise.\n+\t(*sub_uxtsi_shift2_uxtw): Likewise.\n+\n 2015-05-26  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/constraints.md (Y, U): Use match_test."}, {"sha": "258443d6fd352ef91301f6e6018beeb405104386", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bdce4183a38fe030154fdf7b86a9b397e6ae2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=dd1bdce4183a38fe030154fdf7b86a9b397e6ae2", "patch": "@@ -1539,6 +1539,38 @@\n   [(set_attr \"type\" \"alus_sreg,alus_imm,alus_imm\")]\n )\n \n+(define_insn \"*adds_shift_imm_<mode>\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (plus:GPI (ASHIFT:GPI \n+\t\t    (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n+\t\t   (match_operand:GPI 3 \"register_operand\" \"r\"))\n+\t (const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI (ASHIFT:GPI (match_dup 1) (match_dup 2))\n+\t\t  (match_dup 3)))]\n+  \"\"\n+  \"adds\\\\t%<w>0, %<w>3, %<w>1, <shift> %2\"\n+  [(set_attr \"type\" \"alus_shift_imm\")]\n+)\n+\n+(define_insn \"*subs_shift_imm_<mode>\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t    (ASHIFT:GPI\n+\t\t     (match_operand:GPI 2 \"register_operand\" \"r\")\n+\t\t     (match_operand:QI 3 \"aarch64_shift_imm_<mode>\" \"n\")))\n+\t (const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI (match_dup 1)\n+\t\t   (ASHIFT:GPI (match_dup 2) (match_dup 3))))]\n+  \"\"\n+  \"subs\\\\t%<w>0, %<w>1, %<w>2, <shift> %3\"\n+  [(set_attr \"type\" \"alus_shift_imm\")]\n+)\n+\n (define_insn \"*adds_mul_imm_<mode>\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -1599,6 +1631,42 @@\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n+(define_insn \"*adds_<optab><ALLX:mode>_shift_<GPI:mode>\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (plus:GPI (ashift:GPI \n+\t\t    (ANY_EXTEND:GPI \n+\t\t     (match_operand:ALLX 1 \"register_operand\" \"r\"))\n+\t\t    (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n+\t\t   (match_operand:GPI 3 \"register_operand\" \"r\"))\n+\t (const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n+\t(plus:GPI (ashift:GPI (ANY_EXTEND:GPI (match_dup 1))\n+\t\t\t      (match_dup 2))\n+\t\t  (match_dup 3)))]\n+  \"\"\n+  \"adds\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %2\"\n+  [(set_attr \"type\" \"alus_ext\")]\n+)\n+\n+(define_insn \"*subs_<optab><ALLX:mode>_shift_<GPI:mode>\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t    (ashift:GPI \n+\t\t     (ANY_EXTEND:GPI\n+\t\t      (match_operand:ALLX 2 \"register_operand\" \"r\"))\n+\t\t     (match_operand 3 \"aarch64_imm3\" \"Ui3\")))\n+\t (const_int 0)))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n+\t(minus:GPI (match_dup 1)\n+\t\t   (ashift:GPI (ANY_EXTEND:GPI (match_dup 2))\n+\t\t\t       (match_dup 3))))]\n+  \"\"\n+  \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size> %3\"\n+  [(set_attr \"type\" \"alus_ext\")]\n+)\n+\n (define_insn \"*adds_<optab><mode>_multp2\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -1894,6 +1962,38 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n+(define_insn \"*add_uxt<mode>_shift2\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n+\t(plus:GPI (and:GPI\n+\t\t   (ashift:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t\t       (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n+\t\t   (match_operand 3 \"const_int_operand\" \"n\"))\n+\t\t  (match_operand:GPI 4 \"register_operand\" \"r\")))]\n+  \"aarch64_uxt_size (INTVAL (operands[2]), INTVAL (operands[3])) != 0\"\n+  \"*\n+  operands[3] = GEN_INT (aarch64_uxt_size (INTVAL(operands[2]),\n+\t\t\t\t\t   INTVAL (operands[3])));\n+  return \\\"add\\t%<w>0, %<w>4, %<w>1, uxt%e3 %2\\\";\"\n+  [(set_attr \"type\" \"alu_ext\")]\n+)\n+\n+;; zero_extend version of above\n+(define_insn \"*add_uxtsi_shift2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+\t (plus:SI (and:SI\n+\t\t   (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n+\t\t   (match_operand 3 \"const_int_operand\" \"n\"))\n+\t\t  (match_operand:SI 4 \"register_operand\" \"r\"))))]\n+  \"aarch64_uxt_size (INTVAL (operands[2]), INTVAL (operands[3])) != 0\"\n+  \"*\n+  operands[3] = GEN_INT (aarch64_uxt_size (INTVAL (operands[2]),\n+\t\t\t\t\t   INTVAL (operands[3])));\n+  return \\\"add\\t%w0, %w4, %w1, uxt%e3 %2\\\";\"\n+  [(set_attr \"type\" \"alu_ext\")]\n+)\n+\n (define_insn \"*add_uxt<mode>_multp2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (and:GPI\n@@ -2150,6 +2250,38 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n+(define_insn \"*sub_uxt<mode>_shift2\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n+\t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")\n+\t\t   (and:GPI\n+\t\t    (ashift:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t\t\t(match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n+\t\t    (match_operand 3 \"const_int_operand\" \"n\"))))]\n+  \"aarch64_uxt_size (INTVAL (operands[2]),INTVAL (operands[3])) != 0\"\n+  \"*\n+  operands[3] = GEN_INT (aarch64_uxt_size (INTVAL (operands[2]),\n+\t\t\t\t\t   INTVAL (operands[3])));\n+  return \\\"sub\\t%<w>0, %<w>4, %<w>1, uxt%e3 %2\\\";\"\n+  [(set_attr \"type\" \"alu_ext\")]\n+)\n+\n+;; zero_extend version of above\n+(define_insn \"*sub_uxtsi_shift2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+\t (minus:SI (match_operand:SI 4 \"register_operand\" \"rk\")\n+\t\t   (and:SI\n+\t\t    (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t       (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n+\t\t    (match_operand 3 \"const_int_operand\" \"n\")))))]\n+  \"aarch64_uxt_size (INTVAL (operands[2]),INTVAL (operands[3])) != 0\"\n+  \"*\n+  operands[3] = GEN_INT (aarch64_uxt_size (INTVAL (operands[2]),\n+\t\t\t\t\t   INTVAL (operands[3])));\n+  return \\\"sub\\t%w0, %w4, %w1, uxt%e3 %2\\\";\"\n+  [(set_attr \"type\" \"alu_ext\")]\n+)\n+\n (define_insn \"*sub_uxt<mode>_multp2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")"}]}