{"sha": "dcb3680413ddbac725846769b127acad221c4588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiMzY4MDQxM2RkYmFjNzI1ODQ2NzY5YjEyN2FjYWQyMjFjNDU4OA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2002-02-22T23:59:39Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2002-02-22T23:59:39Z"}, "message": "class.c: Change vtable to be more compatible with g++ v3 abi.\n\n\n\t*  class.c:  Change vtable to be more compatible with g++ v3 abi.\n\t(get_dispatch_table):  Prepend offset-to-top (always 0) and\n\ttype_info pointer (currently unimplemented hence NULL) to vtable.\n\tSpecifically, prepend offset-to-top and typeinfo ptr (currently null).\n\t(make_class_data):  Variable dtable_start_offset is sizeof 2 pointers.\n\tAdjust vtable pointers by dtable_start_offse - i.e. skip new words.\n\t(build_dtable_decl):  Add declarations for new fields.\n\nFrom-SVN: r49978", "tree": {"sha": "8719ccea70279b765b97e8d1c61e868da1f47d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8719ccea70279b765b97e8d1c61e868da1f47d74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcb3680413ddbac725846769b127acad221c4588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb3680413ddbac725846769b127acad221c4588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb3680413ddbac725846769b127acad221c4588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb3680413ddbac725846769b127acad221c4588/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aa436984176fc93f5b441f3f667c168ab87a186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa436984176fc93f5b441f3f667c168ab87a186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa436984176fc93f5b441f3f667c168ab87a186"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "0bed76d4956a772b0f5d74cc64b07dd87476106a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb3680413ddbac725846769b127acad221c4588/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb3680413ddbac725846769b127acad221c4588/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=dcb3680413ddbac725846769b127acad221c4588", "patch": "@@ -1,3 +1,13 @@\n+2002-02-22  Per Bothner  <per@bothner.com>\n+\n+\t*  class.c:  Change vtable to be more compatible with g++ v3 abi.\n+\t(get_dispatch_table):  Prepend offset-to-top (always 0) and\n+\ttype_info pointer (currently unimplemented hence NULL) to vtable.\n+\tSpecifically, prepend offset-to-top and typeinfo ptr (currently null).\n+\t(make_class_data):  Variable dtable_start_offset is sizeof 2 pointers.\n+\tAdjust vtable pointers by dtable_start_offse - i.e. skip new words.\n+\t(build_dtable_decl):  Add declarations for new fields.\n+\n 2002-02-20  Per Bothner  <per@bothner.com>\n \n \t* parse.y (patch_method_invocation): Set CAN_COMPLETE_NORMALLY on call"}, {"sha": "ac97994d8c263da5f848315e8644215ff9b2d0f4", "filename": "gcc/java/class.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb3680413ddbac725846769b127acad221c4588/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb3680413ddbac725846769b127acad221c4588/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=dcb3680413ddbac725846769b127acad221c4588", "patch": "@@ -1470,11 +1470,17 @@ get_dispatch_table (type, this_class_addr)\n   list = tree_cons (NULL_TREE, gc_descr, list);\n   for (j = 1; j < TARGET_VTABLE_USES_DESCRIPTORS-1; ++j)\n     list = tree_cons (NULL_TREE, gc_descr, list);\n-  list = tree_cons (integer_zero_node, this_class_addr, list);\n+  list = tree_cons (NULL_TREE, this_class_addr, list);\n+\n+  /** Pointer to type_info object (to be implemented), according to g++ ABI. */\n+  list = tree_cons (NULL_TREE, null_pointer_node, list);\n+  /** Offset to start of whole object.  Always (ptrdiff_t)0 for Java. */\n+  list = tree_cons (integer_zero_node, null_pointer_node, list);\n \n   arraysize = (TARGET_VTABLE_USES_DESCRIPTORS? nvirtuals + 1 : nvirtuals + 2);\n   if (TARGET_VTABLE_USES_DESCRIPTORS)\n     arraysize *= TARGET_VTABLE_USES_DESCRIPTORS;\n+  arraysize += 2;\n   return build (CONSTRUCTOR,\n \t\tbuild_prim_array_type (nativecode_ptr_type_node, arraysize),\n \t\tNULL_TREE, list);\n@@ -1504,6 +1510,9 @@ make_class_data (type)\n   tree interfaces = null_pointer_node;\n   int interface_len = 0;\n   tree type_decl = TYPE_NAME (type);\n+  /** Offset from start of virtual function table declaration\n+      to where objects actually point at, following new g++ ABI. */\n+  tree dtable_start_offset = build_int_2 (2 * POINTER_SIZE / BITS_PER_UNIT, 0);\n \n   this_class_addr = build_class_ref (type);\n   decl = TREE_OPERAND (this_class_addr, 0);\n@@ -1657,7 +1666,9 @@ make_class_data (type)\n \n   START_RECORD_CONSTRUCTOR (temp, object_type_node);\n   PUSH_FIELD_VALUE (temp, \"vtable\",\n-\t\t    build1 (ADDR_EXPR, dtable_ptr_type, class_dtable_decl));\n+\t\t    build (PLUS_EXPR, dtable_ptr_type,\n+\t\t\t   build1 (ADDR_EXPR, dtable_ptr_type, class_dtable_decl),\n+\t\t\t   dtable_start_offset));\n   if (! flag_hash_synchronization)\n     PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (temp);\n@@ -1693,7 +1704,9 @@ make_class_data (type)\n   else\n     PUSH_FIELD_VALUE (cons, \"vtable\",\n \t\t      dtable_decl == NULL_TREE ? null_pointer_node\n-\t\t      : build1 (ADDR_EXPR, dtable_ptr_type, dtable_decl));\n+\t\t      : build (PLUS_EXPR, dtable_ptr_type,\n+\t\t\t       build1 (ADDR_EXPR, dtable_ptr_type, dtable_decl),\n+\t\t\t       dtable_start_offset));\n   \n   if (otable_methods == NULL_TREE)\n     {\n@@ -1826,7 +1839,7 @@ build_dtable_decl (type)\n   /* We need to build a new dtable type so that its size is uniquely\n      computed when we're dealing with the class for real and not just\n      faking it (like java.lang.Class during the initialization of the\n-     compiler.) We now we're not faking a class when CURRENT_CLASS is\n+     compiler.) We know we're not faking a class when CURRENT_CLASS is\n      TYPE. */\n   if (current_class == type)\n     {\n@@ -1835,6 +1848,9 @@ build_dtable_decl (type)\n \n       dtype = make_node (RECORD_TYPE);\n \n+      PUSH_FIELD (dtype, dummy, \"top_offset\", ptr_type_node);\n+      PUSH_FIELD (dtype, dummy, \"type_info\", ptr_type_node);\n+\n       PUSH_FIELD (dtype, dummy, \"class\", class_ptr_type);\n       for (n = 1; n < TARGET_VTABLE_USES_DESCRIPTORS; ++n)\n \t{"}]}