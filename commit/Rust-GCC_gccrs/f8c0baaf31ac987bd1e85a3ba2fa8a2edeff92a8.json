{"sha": "f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjMGJhYWYzMWFjOTg3YmQxZTg1YTNiYTJmYThhMmVkZWZmOTJhOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-29T11:49:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-29T11:49:44Z"}, "message": "tree-vectorizer.h (struct vec_info): Add stmt_vec_infos member.\n\n2018-05-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (struct vec_info): Add stmt_vec_infos\n\tmember.\n\t(stmt_vec_info_vec): Make pointer.\n\t(init_stmt_vec_info_vec): Remove.\n\t(free_stmt_vec_info_vec): Likewise.\n\t(set_stmt_vec_info_vec): New function.\n\t(free_stmt_vec_infos): Likewise.\n\t(vinfo_for_stmt): Adjust for stmt_vec_info_vec indirection.\n\t(set_vinfo_for_stmt): Likewise.\n\t(get_earlier_stmt): Likewise.\n\t(get_later_stmt): Likewise.\n\t* tree-vectorizer.c (stmt_vec_info_vec): Make pointer.\n\t(vec_info::vec_info): Allocate stmt_vec_infos and set the global.\n\t(vec_info::~vec_info): Free stmt_vec_infos.\n\t(vectorize_loops): Set the global stmt_vec_info_vec to NULL.\n\tRemove old init_stmt_vec_info_vec/free_stmt_vec_info_vec calls.\n\t(pass_slp_vectorize::execute): Likewise.\n\t* tree-vect-stmts.c (init_stmt_vec_info_vec): Remove.\n\t(free_stmt_vec_info_vec): Likewise.\n\t(set_stmt_vec_info_vec): New function.\n\t(free_stmt_vec_infos): Likewise.\n\t* tree-vect-loop.c (_loop_vec_info::~_loop_vec_info): Set\n\tthe global stmt_vec_info_vec.\n\t* tree-parloops.c (gather_scalar_reductions): Use\n\tset_stmt_vec_info_vec/free_stmt_vec_infos and maintain a local\n\tvector.\n\nFrom-SVN: r260892", "tree": {"sha": "fd063fc6faee62c11cf26bbb7454f96ed1214453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd063fc6faee62c11cf26bbb7454f96ed1214453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "092cb01cbf25e1c19d0b86bfac6dc4404c14a7dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092cb01cbf25e1c19d0b86bfac6dc4404c14a7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092cb01cbf25e1c19d0b86bfac6dc4404c14a7dd"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "d2d02b2e0d1a5ba7d09ac5b7701d76ddb6913d72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "patch": "@@ -1,3 +1,32 @@\n+2018-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (struct vec_info): Add stmt_vec_infos\n+\tmember.\n+\t(stmt_vec_info_vec): Make pointer.\n+\t(init_stmt_vec_info_vec): Remove.\n+\t(free_stmt_vec_info_vec): Likewise.\n+\t(set_stmt_vec_info_vec): New function.\n+\t(free_stmt_vec_infos): Likewise.\n+\t(vinfo_for_stmt): Adjust for stmt_vec_info_vec indirection.\n+\t(set_vinfo_for_stmt): Likewise.\n+\t(get_earlier_stmt): Likewise.\n+\t(get_later_stmt): Likewise.\n+\t* tree-vectorizer.c (stmt_vec_info_vec): Make pointer.\n+\t(vec_info::vec_info): Allocate stmt_vec_infos and set the global.\n+\t(vec_info::~vec_info): Free stmt_vec_infos.\n+\t(vectorize_loops): Set the global stmt_vec_info_vec to NULL.\n+\tRemove old init_stmt_vec_info_vec/free_stmt_vec_info_vec calls.\n+\t(pass_slp_vectorize::execute): Likewise.\n+\t* tree-vect-stmts.c (init_stmt_vec_info_vec): Remove.\n+\t(free_stmt_vec_info_vec): Likewise.\n+\t(set_stmt_vec_info_vec): New function.\n+\t(free_stmt_vec_infos): Likewise.\n+\t* tree-vect-loop.c (_loop_vec_info::~_loop_vec_info): Set\n+\tthe global stmt_vec_info_vec.\n+\t* tree-parloops.c (gather_scalar_reductions): Use\n+\tset_stmt_vec_info_vec/free_stmt_vec_infos and maintain a local\n+\tvector.\n+\n 2018-05-29  Richard Biener  <rguenther@suse.de>\n \n \t* dominance.c (iterate_fix_dominators): Push/pop TV_DOMINANCE."}, {"sha": "aa74427296ed295465a951a2be14c863388787bb", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "patch": "@@ -2593,8 +2593,9 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n   auto_vec<gphi *, 4> double_reduc_phis;\n   auto_vec<gimple *, 4> double_reduc_stmts;\n \n-  if (!stmt_vec_info_vec.exists ())\n-    init_stmt_vec_info_vec ();\n+  vec<stmt_vec_info> stmt_vec_infos;\n+  stmt_vec_infos.create (50);\n+  set_stmt_vec_info_vec (&stmt_vec_infos);\n \n   simple_loop_info = vect_analyze_loop_form (loop);\n   if (simple_loop_info == NULL)\n@@ -2674,7 +2675,7 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n \n  gather_done:\n   /* Release the claim on gimple_uid.  */\n-  free_stmt_vec_info_vec ();\n+  free_stmt_vec_infos (&stmt_vec_infos);\n \n   if (reduction_list->elements () == 0)\n     return;"}, {"sha": "9424b52a99bd5007b3fe6f1bc6c9d9d2e56ea4b5", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "patch": "@@ -894,6 +894,8 @@ _loop_vec_info::~_loop_vec_info ()\n   gimple_stmt_iterator si;\n   int j;\n \n+  /* ???  We're releasing loop_vinfos en-block.  */\n+  set_stmt_vec_info_vec (&stmt_vec_infos);\n   nbbs = loop->num_nodes;\n   for (j = 0; j < nbbs; j++)\n     {"}, {"sha": "759ea23b6f2121f7f52fd76652a5f740feaee97d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "patch": "@@ -9862,28 +9862,27 @@ new_stmt_vec_info (gimple *stmt, vec_info *vinfo)\n }\n \n \n-/* Create a hash table for stmt_vec_info. */\n+/* Set the current stmt_vec_info vector to V.  */\n \n void\n-init_stmt_vec_info_vec (void)\n+set_stmt_vec_info_vec (vec<stmt_vec_info> *v)\n {\n-  gcc_assert (!stmt_vec_info_vec.exists ());\n-  stmt_vec_info_vec.create (50);\n+  stmt_vec_info_vec = v;\n }\n \n-\n-/* Free hash table for stmt_vec_info. */\n+/* Free the stmt_vec_info entries in V and release V.  */\n \n void\n-free_stmt_vec_info_vec (void)\n+free_stmt_vec_infos (vec<stmt_vec_info> *v)\n {\n   unsigned int i;\n   stmt_vec_info info;\n-  FOR_EACH_VEC_ELT (stmt_vec_info_vec, i, info)\n+  FOR_EACH_VEC_ELT (*v, i, info)\n     if (info != NULL)\n       free_stmt_vec_info (STMT_VINFO_STMT (info));\n-  gcc_assert (stmt_vec_info_vec.exists ());\n-  stmt_vec_info_vec.release ();\n+  if (v == stmt_vec_info_vec)\n+    stmt_vec_info_vec = NULL;\n+  v->release ();\n }\n \n "}, {"sha": "8ff90b37ee65f452294431ae4ccc10e742f04916", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "patch": "@@ -85,7 +85,7 @@ along with GCC; see the file COPYING3.  If not see\n source_location vect_location;\n \n /* Vector mapping GIMPLE stmt to stmt_vec_info. */\n-vec<stmt_vec_info> stmt_vec_info_vec;\n+vec<stmt_vec_info> *stmt_vec_info_vec;\n \n /* Dump a cost entry according to args to F.  */\n \n@@ -456,6 +456,8 @@ vec_info::vec_info (vec_info::vec_kind kind_in, void *target_cost_data_in)\n     ddrs (vNULL),\n     target_cost_data (target_cost_data_in)\n {\n+  stmt_vec_infos.create (50);\n+  set_stmt_vec_info_vec (&stmt_vec_infos);\n }\n \n vec_info::~vec_info ()\n@@ -477,6 +479,7 @@ vec_info::~vec_info ()\n   free_data_refs (datarefs);\n   free_dependence_relations (ddrs);\n   destroy_cost_data (target_cost_data);\n+  free_stmt_vec_infos (&stmt_vec_infos);\n }\n \n /* A helper function to free scev and LOOP niter information, as well as\n@@ -682,7 +685,7 @@ vectorize_loops (void)\n   if (cfun->has_simduid_loops)\n     note_simd_array_uses (&simd_array_to_simduid_htab);\n \n-  init_stmt_vec_info_vec ();\n+  set_stmt_vec_info_vec (NULL);\n \n   /*  ----------- Analyze loops. -----------  */\n \n@@ -923,8 +926,6 @@ vectorize_loops (void)\n       loop->aux = NULL;\n     }\n \n-  free_stmt_vec_info_vec ();\n-\n   /* Fold IFN_GOMP_SIMD_{VF,LANE,LAST_LANE,ORDERED_{START,END}} builtins.  */\n   if (cfun->has_simduid_loops)\n     adjust_simduid_builtins (simduid_to_vf_htab);\n@@ -1062,17 +1063,13 @@ pass_slp_vectorize::execute (function *fun)\n \t}\n     }\n \n-  init_stmt_vec_info_vec ();\n-\n   FOR_EACH_BB_FN (bb, fun)\n     {\n       if (vect_slp_bb (bb))\n \tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n \t\t\t \"basic block vectorized\\n\");\n     }\n \n-  free_stmt_vec_info_vec ();\n-\n   if (!in_loop_pipeline)\n     {\n       scev_finalize ();"}, {"sha": "f7646349b65b6590f459d8ed02e3bcddffbb2ac6", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8", "patch": "@@ -197,6 +197,9 @@ struct vec_info {\n   /* The type of vectorization.  */\n   vec_kind kind;\n \n+  /* The mapping of GIMPLE UID to stmt_vec_info.  */\n+  vec<struct _stmt_vec_info *> stmt_vec_infos;\n+\n   /* All SLP instances.  */\n   auto_vec<slp_instance> slp_instances;\n \n@@ -1009,10 +1012,10 @@ struct dataref_aux {\n        && TYPE_PRECISION (TYPE) == 1\t\t\\\n        && TYPE_UNSIGNED (TYPE)))\n \n-extern vec<stmt_vec_info> stmt_vec_info_vec;\n+extern vec<stmt_vec_info> *stmt_vec_info_vec;\n \n-void init_stmt_vec_info_vec (void);\n-void free_stmt_vec_info_vec (void);\n+void set_stmt_vec_info_vec (vec<stmt_vec_info> *);\n+void free_stmt_vec_infos (vec<stmt_vec_info> *);\n \n /* Return a stmt_vec_info corresponding to STMT.  */\n \n@@ -1023,7 +1026,7 @@ vinfo_for_stmt (gimple *stmt)\n   if (uid <= 0)\n     return NULL;\n \n-  return stmt_vec_info_vec[uid - 1];\n+  return (*stmt_vec_info_vec)[uid - 1];\n }\n \n /* Set vectorizer information INFO for STMT.  */\n@@ -1035,14 +1038,14 @@ set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info)\n   if (uid == 0)\n     {\n       gcc_checking_assert (info);\n-      uid = stmt_vec_info_vec.length () + 1;\n+      uid = stmt_vec_info_vec->length () + 1;\n       gimple_set_uid (stmt, uid);\n-      stmt_vec_info_vec.safe_push (info);\n+      stmt_vec_info_vec->safe_push (info);\n     }\n   else\n     {\n       gcc_checking_assert (info == NULL);\n-      stmt_vec_info_vec[uid - 1] = info;\n+      (*stmt_vec_info_vec)[uid - 1] = info;\n     }\n }\n \n@@ -1065,8 +1068,8 @@ get_earlier_stmt (gimple *stmt1, gimple *stmt2)\n   if (uid1 == 0 || uid2 == 0)\n     return NULL;\n \n-  gcc_checking_assert (uid1 <= stmt_vec_info_vec.length ()\n-\t\t       && uid2 <= stmt_vec_info_vec.length ());\n+  gcc_checking_assert (uid1 <= stmt_vec_info_vec->length ()\n+\t\t       && uid2 <= stmt_vec_info_vec->length ());\n \n   if (uid1 < uid2)\n     return stmt1;\n@@ -1093,8 +1096,8 @@ get_later_stmt (gimple *stmt1, gimple *stmt2)\n   if (uid1 == 0 || uid2 == 0)\n     return NULL;\n \n-  gcc_assert (uid1 <= stmt_vec_info_vec.length ());\n-  gcc_assert (uid2 <= stmt_vec_info_vec.length ());\n+  gcc_assert (uid1 <= stmt_vec_info_vec->length ());\n+  gcc_assert (uid2 <= stmt_vec_info_vec->length ());\n \n   if (uid1 > uid2)\n     return stmt1;"}]}