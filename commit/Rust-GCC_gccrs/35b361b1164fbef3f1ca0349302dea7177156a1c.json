{"sha": "35b361b1164fbef3f1ca0349302dea7177156a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViMzYxYjExNjRmYmVmM2YxY2EwMzQ5MzAyZGVhNzE3NzE1NmExYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2018-05-15T08:37:46Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2018-05-15T08:37:46Z"}, "message": "DWARF: Use DW_OP_addrx and DW_OP_constx for DWARF5.\n\nFor older DWARF and -gsplit-dwarf we want to emit DW_OP_GNU_addr_index\nand DW_OP_GNU_const_index, but for DWARF5 we should use DW_OP_addrx\nand DW_OP_constx.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (dwarf_OP): Handle DW_OP_addrx and DW_OP_constx.\n\t(size_of_loc_descr): Likewise.\n\t(output_loc_operands): Likewise.\n\t(output_loc_operands_raw): Likewise.\n\t(dw_addr_op): Use dwarf_OP () for DW_OP_constx and DW_OP_addrx.\n\t(resolve_addr_in_expr): Handle DW_OP_addrx and DW_OP_constx.\n\t(hash_loc_operands): Likewise.\n\t(compare_loc_operands): Likewise.\n\nFrom-SVN: r260252", "tree": {"sha": "a042991105fc2fbd204a7b85e9f0bbfd082e0e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a042991105fc2fbd204a7b85e9f0bbfd082e0e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b361b1164fbef3f1ca0349302dea7177156a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b361b1164fbef3f1ca0349302dea7177156a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b361b1164fbef3f1ca0349302dea7177156a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b361b1164fbef3f1ca0349302dea7177156a1c/comments", "author": null, "committer": null, "parents": [{"sha": "01ec978cec1f5c790a4881acef1dfc824ab67f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ec978cec1f5c790a4881acef1dfc824ab67f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ec978cec1f5c790a4881acef1dfc824ab67f26"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "f5da0ebc740fbf4906e4a0c8f467de45899c50cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b361b1164fbef3f1ca0349302dea7177156a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b361b1164fbef3f1ca0349302dea7177156a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35b361b1164fbef3f1ca0349302dea7177156a1c", "patch": "@@ -1,3 +1,14 @@\n+2018-05-13  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2out.c (dwarf_OP): Handle DW_OP_addrx and DW_OP_constx.\n+\t(size_of_loc_descr): Likewise.\n+\t(output_loc_operands): Likewise.\n+\t(output_loc_operands_raw): Likewise.\n+\t(dw_addr_op): Use dwarf_OP () for DW_OP_constx and DW_OP_addrx.\n+\t(resolve_addr_in_expr): Handle DW_OP_addrx and DW_OP_constx.\n+\t(hash_loc_operands): Likewise.\n+\t(compare_loc_operands): Likewise.\n+\n 2018-05-14  Mark Wielaard  <mark@klomp.org>\n \n \t* dwarf2out.c (count_index_addrs): New function."}, {"sha": "97e8ed97966a7c5a98bc022fb032c3d404d4c85d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b361b1164fbef3f1ca0349302dea7177156a1c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b361b1164fbef3f1ca0349302dea7177156a1c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=35b361b1164fbef3f1ca0349302dea7177156a1c", "patch": "@@ -1657,6 +1657,16 @@ dwarf_OP (enum dwarf_location_atom op)\n \treturn DW_OP_GNU_reinterpret;\n       break;\n \n+    case DW_OP_addrx:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_addr_index;\n+      break;\n+\n+    case DW_OP_constx:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_const_index;\n+      break;\n+\n     default:\n       break;\n     }\n@@ -1772,7 +1782,9 @@ size_of_loc_descr (dw_loc_descr_ref loc)\n       size += DWARF2_ADDR_SIZE;\n       break;\n     case DW_OP_GNU_addr_index:\n+    case DW_OP_addrx:\n     case DW_OP_GNU_const_index:\n+    case DW_OP_constx:\n       gcc_assert (loc->dw_loc_oprnd1.val_entry->index != NO_INDEX_ASSIGNED);\n       size += size_of_uleb128 (loc->dw_loc_oprnd1.val_entry->index);\n       break;\n@@ -2272,7 +2284,9 @@ output_loc_operands (dw_loc_descr_ref loc, int for_eh_or_skip)\n       break;\n \n     case DW_OP_GNU_addr_index:\n+    case DW_OP_addrx:\n     case DW_OP_GNU_const_index:\n+    case DW_OP_constx:\n       gcc_assert (loc->dw_loc_oprnd1.val_entry->index != NO_INDEX_ASSIGNED);\n       dw2_asm_output_data_uleb128 (loc->dw_loc_oprnd1.val_entry->index,\n                                    \"(index into .debug_addr)\");\n@@ -2503,7 +2517,9 @@ output_loc_operands_raw (dw_loc_descr_ref loc)\n     {\n     case DW_OP_addr:\n     case DW_OP_GNU_addr_index:\n+    case DW_OP_addrx:\n     case DW_OP_GNU_const_index:\n+    case DW_OP_constx:\n     case DW_OP_implicit_value:\n       /* We cannot output addresses in .cfi_escape, only bytes.  */\n       gcc_unreachable ();\n@@ -3903,10 +3919,10 @@ static inline enum dwarf_location_atom\n dw_addr_op (enum dtprel_bool dtprel)\n {\n   if (dtprel == dtprel_true)\n-    return (dwarf_split_debug_info ? DW_OP_GNU_const_index\n+    return (dwarf_split_debug_info ? dwarf_OP (DW_OP_constx)\n             : (DWARF2_ADDR_SIZE == 4 ? DW_OP_const4u : DW_OP_const8u));\n   else\n-    return dwarf_split_debug_info ? DW_OP_GNU_addr_index : DW_OP_addr;\n+    return dwarf_split_debug_info ? dwarf_OP (DW_OP_addrx) : DW_OP_addr;\n }\n \n /* Return a pointer to a newly allocated address location description.  If\n@@ -29697,9 +29713,14 @@ resolve_addr_in_expr (dw_attr_node *a, dw_loc_descr_ref loc)\n \t  }\n \tbreak;\n       case DW_OP_GNU_addr_index:\n+      case DW_OP_addrx:\n       case DW_OP_GNU_const_index:\n-\tif (loc->dw_loc_opc == DW_OP_GNU_addr_index\n-            || (loc->dw_loc_opc == DW_OP_GNU_const_index && loc->dtprel))\n+      case DW_OP_constx:\n+\tif ((loc->dw_loc_opc == DW_OP_GNU_addr_index\n+\t     || loc->dw_loc_opc == DW_OP_addrx)\n+\t    || ((loc->dw_loc_opc == DW_OP_GNU_const_index\n+\t\t || loc->dw_loc_opc == DW_OP_constx)\n+\t\t&& loc->dtprel))\n           {\n             rtx rtl = loc->dw_loc_oprnd1.val_entry->addr.rtl;\n             if (!resolve_one_addr (&rtl))\n@@ -30485,7 +30506,9 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n       inchash::add_rtx (val1->v.val_addr, hstate);\n       break;\n     case DW_OP_GNU_addr_index:\n+    case DW_OP_addrx:\n     case DW_OP_GNU_const_index:\n+    case DW_OP_constx:\n       {\n         if (loc->dtprel)\n           {\n@@ -30726,7 +30749,9 @@ compare_loc_operands (dw_loc_descr_ref x, dw_loc_descr_ref y)\n     hash_addr:\n       return rtx_equal_p (valx1->v.val_addr, valy1->v.val_addr);\n     case DW_OP_GNU_addr_index:\n+    case DW_OP_addrx:\n     case DW_OP_GNU_const_index:\n+    case DW_OP_constx:\n       {\n         rtx ax1 = valx1->val_entry->addr.rtl;\n         rtx ay1 = valy1->val_entry->addr.rtl;"}]}