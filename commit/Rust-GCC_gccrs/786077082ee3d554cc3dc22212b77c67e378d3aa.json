{"sha": "786077082ee3d554cc3dc22212b77c67e378d3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2MDc3MDgyZWUzZDU1NGNjM2RjMjIyMTJiNzdjNjdlMzc4ZDNhYQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2014-06-18T16:09:01Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-06-18T16:09:01Z"}, "message": "-fuse-caller-save - Enable for AArch64\n\n2014-05-30  Tom de Vries  <tom@codesourcery.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_emit_call_insn): Declare.\n\t* config/aarch64/aarch64.c\n\t(TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): Redefine as true.\n\t(aarch64_emit_call_insn): New function.\n\t(aarch64_load_symref_appropriately): Use aarch64_emit_call_insn instead\n\tof emit_call_insn.\n\t* config/aarch64/aarch64.md (define_expand \"call_internal\")\n\t(define_expand \"call_value_internal\", define_expand \"sibcall_internal\")\n\t(define_expand \"sibcall_value_internal\"): New.\n\t(define_expand \"call\", define_expand \"call_value\")\n\t(define_expand \"sibcall\", define_expand \"sibcall_value\"): Use internal\n\texpand variant and aarch64_emit_call_insn.\n\n\t* gcc.target/aarch64/fuse-caller-save.c: New test.\n\nFrom-SVN: r211799", "tree": {"sha": "3dcf0e21a4221c98aaae9f13c2ce0d22715cc5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dcf0e21a4221c98aaae9f13c2ce0d22715cc5dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786077082ee3d554cc3dc22212b77c67e378d3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786077082ee3d554cc3dc22212b77c67e378d3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786077082ee3d554cc3dc22212b77c67e378d3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786077082ee3d554cc3dc22212b77c67e378d3aa/comments", "author": null, "committer": null, "parents": [{"sha": "7a32d6c491b450dfe86263ef28a9947cd57d09b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a32d6c491b450dfe86263ef28a9947cd57d09b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a32d6c491b450dfe86263ef28a9947cd57d09b6"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "564c503e3dd8daf67ba4521eabfd2df3f33ec8a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=786077082ee3d554cc3dc22212b77c67e378d3aa", "patch": "@@ -1,3 +1,18 @@\n+2014-06-18  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_emit_call_insn): Declare.\n+\t* config/aarch64/aarch64.c\n+\t(TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): Redefine as true.\n+\t(aarch64_emit_call_insn): New function.\n+\t(aarch64_load_symref_appropriately): Use aarch64_emit_call_insn instead\n+\tof emit_call_insn.\n+\t* config/aarch64/aarch64.md (define_expand \"call_internal\")\n+\t(define_expand \"call_value_internal\", define_expand \"sibcall_internal\")\n+\t(define_expand \"sibcall_value_internal\"): New.\n+\t(define_expand \"call\", define_expand \"call_value\")\n+\t(define_expand \"sibcall\", define_expand \"sibcall_value\"): Use internal\n+\texpand variant and aarch64_emit_call_insn.\n+\n 2014-06-18  Radovan Obradovic  <robradovic@mips.com>\n             Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "213c8dce12660c3347105a2cea62ea1fcde2efdf", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=786077082ee3d554cc3dc22212b77c67e378d3aa", "patch": "@@ -245,6 +245,7 @@ void aarch64_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx,\n void aarch64_init_expanders (void);\n void aarch64_print_operand (FILE *, rtx, char);\n void aarch64_print_operand_address (FILE *, rtx);\n+bool aarch64_emit_call_insn (rtx);\n \n /* Initialize builtins for SIMD intrinsics.  */\n void init_aarch64_simd_builtins (void);"}, {"sha": "b2d005b98b0085ad6e48eba8beed596ea72a3921", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=786077082ee3d554cc3dc22212b77c67e378d3aa", "patch": "@@ -696,7 +696,7 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \trtx result = gen_rtx_REG (Pmode, R0_REGNUM);\n \n \tstart_sequence ();\n-\temit_call_insn (gen_tlsgd_small (result, imm));\n+\taarch64_emit_call_insn (gen_tlsgd_small (result, imm));\n \tinsns = get_insns ();\n \tend_sequence ();\n \n@@ -3393,6 +3393,18 @@ aarch64_fixed_condition_code_regs (unsigned int *p1, unsigned int *p2)\n   return true;\n }\n \n+/* Emit call insn with PAT and do aarch64-specific handling.  */\n+\n+bool\n+aarch64_emit_call_insn (rtx pat)\n+{\n+  rtx insn = emit_call_insn (pat);\n+\n+  rtx *fusage = &CALL_INSN_FUNCTION_USAGE (insn);\n+  clobber_reg (fusage, gen_rtx_REG (word_mode, IP0_REGNUM));\n+  clobber_reg (fusage, gen_rtx_REG (word_mode, IP1_REGNUM));\n+}\n+\n enum machine_mode\n aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n {\n@@ -9813,6 +9825,9 @@ aarch64_expand_movmem (rtx *operands)\n #undef TARGET_FLAGS_REGNUM\n #define TARGET_FLAGS_REGNUM CC_REGNUM\n \n+#undef TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n+#define TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "7f8bb82867da942b30e0e0e9fb57350a69b98dec", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=786077082ee3d554cc3dc22212b77c67e378d3aa", "patch": "@@ -428,6 +428,12 @@\n ;; Subroutine calls and sibcalls\n ;; -------------------------------------------------------------------\n \n+(define_expand \"call_internal\"\n+  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n+\t\t    (match_operand 1 \"general_operand\" \"\"))\n+\t      (use (match_operand 2 \"\" \"\"))\n+\t      (clobber (reg:DI LR_REGNUM))])])\n+\n (define_expand \"call\"\n   [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n \t\t    (match_operand 1 \"general_operand\" \"\"))\n@@ -436,7 +442,7 @@\n   \"\"\n   \"\n   {\n-    rtx callee;\n+    rtx callee, pat;\n \n     /* In an untyped call, we can get NULL for operand 2.  */\n     if (operands[2] == NULL)\n@@ -450,6 +456,10 @@\n \t? aarch64_is_long_call_p (callee)\n \t: !REG_P (callee))\n       XEXP (operands[0], 0) = force_reg (Pmode, callee);\n+\n+    pat = gen_call_internal (operands[0], operands[1], operands[2]);\n+    aarch64_emit_call_insn (pat);\n+    DONE;\n   }\"\n )\n \n@@ -474,6 +484,13 @@\n   [(set_attr \"type\" \"call\")]\n )\n \n+(define_expand \"call_value_internal\"\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n+\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n+\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t      (use (match_operand 3 \"\" \"\"))\n+\t      (clobber (reg:DI LR_REGNUM))])])\n+\n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (match_operand 1 \"memory_operand\" \"\")\n@@ -483,7 +500,7 @@\n   \"\"\n   \"\n   {\n-    rtx callee;\n+    rtx callee, pat;\n \n     /* In an untyped call, we can get NULL for operand 3.  */\n     if (operands[3] == NULL)\n@@ -497,6 +514,11 @@\n \t? aarch64_is_long_call_p (callee)\n \t: !REG_P (callee))\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n+\n+    pat = gen_call_value_internal (operands[0], operands[1], operands[2],\n+                                   operands[3]);\n+    aarch64_emit_call_insn (pat);\n+    DONE;\n   }\"\n )\n \n@@ -524,22 +546,41 @@\n   [(set_attr \"type\" \"call\")]\n )\n \n+(define_expand \"sibcall_internal\"\n+  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n+\t\t    (match_operand 1 \"general_operand\" \"\"))\n+\t      (return)\n+\t      (use (match_operand 2 \"\" \"\"))])])\n+\n (define_expand \"sibcall\"\n   [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n \t\t    (match_operand 1 \"general_operand\" \"\"))\n \t      (return)\n \t      (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n   {\n+    rtx pat;\n+\n     if (!REG_P (XEXP (operands[0], 0))\n        && (GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF))\n      XEXP (operands[0], 0) = force_reg (Pmode, XEXP (operands[0], 0));\n \n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n+\n+    pat = gen_sibcall_internal (operands[0], operands[1], operands[2]);\n+    aarch64_emit_call_insn (pat);\n+    DONE;\n   }\n )\n \n+(define_expand \"sibcall_value_internal\"\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n+\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n+\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t      (return)\n+\t      (use (match_operand 3 \"\" \"\"))])])\n+\n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (match_operand 1 \"memory_operand\" \"\")\n@@ -548,12 +589,19 @@\n \t      (use (match_operand 3 \"\" \"\"))])]\n   \"\"\n   {\n+    rtx pat;\n+\n     if (!REG_P (XEXP (operands[1], 0))\n        && (GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF))\n      XEXP (operands[1], 0) = force_reg (Pmode, XEXP (operands[1], 0));\n \n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;\n+\n+    pat = gen_sibcall_value_internal (operands[0], operands[1], operands[2],\n+                                      operands[3]);\n+    aarch64_emit_call_insn (pat);\n+    DONE;\n   }\n )\n "}, {"sha": "6f77a38e23f6ba5d59e36e70a24df9c39b8bff98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=786077082ee3d554cc3dc22212b77c67e378d3aa", "patch": "@@ -1,3 +1,7 @@\n+2014-06-18  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.target/aarch64/fuse-caller-save.c: New test.\n+\n 2014-06-18  Radovan Obradovic  <robradovic@mips.com>\n             Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "45e535c9285f7c323cba2021e12528f4a0e4862a", "filename": "gcc/testsuite/gcc.target/aarch64/fuse-caller-save.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786077082ee3d554cc3dc22212b77c67e378d3aa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse-caller-save.c?ref=786077082ee3d554cc3dc22212b77c67e378d3aa", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fuse-caller-save\" } */\n+/* Testing -fuse-caller-save optimization option.  */\n+\n+static int __attribute__((noinline))\n+bar (int x)\n+{\n+  return x + 3;\n+}\n+\n+int __attribute__((noinline))\n+foo (int y)\n+{\n+  return y + bar (y);\n+}\n+\n+int\n+main (void)\n+{\n+  return !(foo (5) == 13);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\\\[sp, -16\\\\\\]!\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\[sp, -32\\\\\\]!\" } } */"}]}