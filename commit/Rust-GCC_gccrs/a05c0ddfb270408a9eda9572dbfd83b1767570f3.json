{"sha": "a05c0ddfb270408a9eda9572dbfd83b1767570f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1YzBkZGZiMjcwNDA4YTllZGE5NTcyZGJmZDgzYjE3Njc1NzBmMw==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-03-22T12:07:20Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-03-22T12:07:20Z"}, "message": "AArch64 MOVK fix to operand 2\n\nFrom-SVN: r196958", "tree": {"sha": "8f5e620fe8f9dc91f07c9283c3afd8f158bff63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f5e620fe8f9dc91f07c9283c3afd8f158bff63c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a05c0ddfb270408a9eda9572dbfd83b1767570f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05c0ddfb270408a9eda9572dbfd83b1767570f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05c0ddfb270408a9eda9572dbfd83b1767570f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05c0ddfb270408a9eda9572dbfd83b1767570f3/comments", "author": null, "committer": null, "parents": [{"sha": "b315f09425c40dd3d94a2f2b611ab4d3cc480ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b315f09425c40dd3d94a2f2b611ab4d3cc480ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b315f09425c40dd3d94a2f2b611ab4d3cc480ef1"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "448db4f374a2178aeb0af104be17b450e6683b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a05c0ddfb270408a9eda9572dbfd83b1767570f3", "patch": "@@ -1,3 +1,10 @@\n+2013-03-22  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_operand): New\n+\tformat specifier for printing a constant in hex.\n+\t* config/aarch64/aarch64.md (insv_imm<mode>): Use the X\n+\tformat specifier for printing second operand.\n+\n 2013-03-22  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (memory_references): Add refs_stored_in_loop"}, {"sha": "343586e28c8ed246793bf089047fc03dd0277cf0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a05c0ddfb270408a9eda9572dbfd83b1767570f3", "patch": "@@ -3364,6 +3364,16 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       asm_fprintf (f, \"v%d\", REGNO (x) - V0_REGNUM + (code - 'S'));\n       break;\n \n+    case 'X':\n+      /* Print integer constant in hex.  */\n+      if (GET_CODE (x) != CONST_INT)\n+\t{\n+\t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+\t  return;\n+\t}\n+      asm_fprintf (f, \"0x%x\", UINTVAL (x));\n+      break;\n+\n     case 'w':\n     case 'x':\n       /* Print a general register name or the zero register (32-bit or"}, {"sha": "c28f4a013dcfd4c0b50c20b5571607a0d1aec0c5", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a05c0ddfb270408a9eda9572dbfd83b1767570f3", "patch": "@@ -844,8 +844,8 @@\n \t(match_operand:GPI 2 \"const_int_operand\" \"n\"))]\n   \"INTVAL (operands[1]) < GET_MODE_BITSIZE (<MODE>mode)\n    && INTVAL (operands[1]) % 16 == 0\n-   && INTVAL (operands[2]) <= 0xffff\"\n-  \"movk\\\\t%<w>0, %2, lsl %1\"\n+   && UINTVAL (operands[2]) <= 0xffff\"\n+  \"movk\\\\t%<w>0, %X2, lsl %1\"\n   [(set_attr \"v8type\" \"movk\")\n    (set_attr \"mode\" \"<MODE>\")]\n )"}, {"sha": "5c07546bd5588a00b64a8914d822e62c227b23f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a05c0ddfb270408a9eda9572dbfd83b1767570f3", "patch": "@@ -1,3 +1,7 @@\n+2013-03-22  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/movk.c: New test.\n+\n 2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* g++.dg/ext/vector21.C: New testcase."}, {"sha": "e4b22098c44513d12b0bd259a277516644d2bece", "filename": "gcc/testsuite/gcc.target/aarch64/movk.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05c0ddfb270408a9eda9572dbfd83b1767570f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk.c?ref=a05c0ddfb270408a9eda9572dbfd83b1767570f3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+long long int\n+dummy_number_generator ()\n+{\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0xefff, lsl 16\" } } */\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0xc4cc, lsl 32\" } } */\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0xfffe, lsl 48\" } } */\n+  return -346565474575675;\n+}\n+\n+int\n+main (void)\n+{\n+\n+  long long int num = dummy_number_generator ();\n+  if (num > 0)\n+    abort ();\n+\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0x4667, lsl 16\" } } */\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0x7a3d, lsl 32\" } } */\n+  if (num / 69313094915135 != -5)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}