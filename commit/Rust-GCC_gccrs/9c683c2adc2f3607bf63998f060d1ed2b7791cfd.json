{"sha": "9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2ODNjMmFkYzJmMzYwN2JmNjM5OThmMDYwZDFlZDJiNzc5MWNmZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-08-11T07:32:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-11T07:32:37Z"}, "message": "locale_facets.tcc: Formatting tweaks.\n\n\n2000-08-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n        * bits/locale_facets.tcc: Formatting tweaks.\n        * bits/locale_facets.h (__enc_traits): Start integrating this\n        into codecvt, ctype. Formatting tweaks.\n\nFrom-SVN: r35621", "tree": {"sha": "cb3f693d17076a20c4ec688a63bc832e901da3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb3f693d17076a20c4ec688a63bc832e901da3a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/comments", "author": null, "committer": null, "parents": [{"sha": "4b48731a0df492d05be093582edacc6e6ab05f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b48731a0df492d05be093582edacc6e6ab05f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b48731a0df492d05be093582edacc6e6ab05f1b"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "620a3c59b8913df7be7b1621b79584c47bb791f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "patch": "@@ -1,3 +1,9 @@\n+2000-08-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* bits/locale_facets.tcc: Formatting tweaks.\n+\t* bits/locale_facets.h (__enc_traits): Start integrating this\n+\tinto codecvt, ctype. Formatting tweaks.\n+\n 2000-08-09  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \tPreliminary wchar_t implementation, with trivial encodings."}, {"sha": "2bec59509bd011827597ab83398cd4f08d4c903b", "filename": "libstdc++-v3/bits/locale_facets.h", "status": "modified", "additions": 60, "deletions": 22, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h?ref=9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "patch": "@@ -84,24 +84,67 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   // Extensions to use icov for dealing with character encodings,\n   // including conversions and comparisons between various character\n-  // sets.  This object encapsulates data that codecvt and possibly\n-  // ctype will use.\n+  // sets.  This object encapsulates data that may need to be shared between\n+  // char_traits, codecvt and ctype.\n   template<typename _IntT, typename _ExtT>\n   class __enc_traits\n   {\n   public:\n     // Types:\n-    typedef iconv_t\t__conv_type;\n     typedef _IntT\t__intc_type;\n     typedef _ExtT\t__extc_type;\n-\n-    // max size of charset encoding name\n+    typedef iconv_t\t__conv_type;\n+    typedef mbstate_t\t__state_type;\n+    \n+    // Data Members:\n+    // Max size of charset encoding name\n     static const int \t__max_size = 32;\n-    // name of internal character set encoding.\n+    // Name of internal character set encoding.\n     char\t       \t__intc_enc[__max_size];\n-    // name of external character set encoding.\n+    // Name of external character set encoding.\n     char  \t       \t__extc_enc[__max_size];\n \n+    // Conversion descriptor between external encoding to internal encoding.\n+    __conv_type\t\t__in_conv;\n+    // Conversion descriptor between internal encoding to external encoding.\n+    __conv_type\t\t__out_conv;\n+\n+    __enc_traits()\n+    {\n+      // __intc_end = whatever we are using internally, which is\n+      // UCS4 (linux) \n+      // UCS2 (microsoft, java, aix, whatever...)\n+      // XXX Currently don't know how to get this data from target system...\n+      strcpy(__intc_enc, \"UCS4\");\n+\n+      // __extc_end = external codeset in current locale\n+      strcpy(__extc_enc, nl_langinfo(CODESET));\n+      __in_conv = iconv_open(__intc_enc, __extc_enc);\n+      __out_conv = iconv_open(__extc_enc, __intc_enc);\n+      if (__out_conv == (iconv_t) -1 || __in_conv == (iconv_t) -1)\n+\t{\n+\t  // XXX Extended error checking.\n+\t}\n+    }\n+\n+    __enc_traits(const char* __int, const char* __ext)\n+    {\n+      strcpy(__intc_enc, __int);\n+      strcpy(__extc_enc, __ext);\n+      __in_conv = iconv_open(__intc_enc, __extc_enc);\n+      __out_conv = iconv_open(__extc_enc, __intc_enc);\n+      if (__out_conv == (iconv_t) -1 || __in_conv == (iconv_t) -1)\n+\t{\n+\t  // XXX Extended error checking.\n+\t}\n+    }\n+\n+    ~__enc_traits()\n+    {\n+      iconv_close(__in_conv);\n+      iconv_close(__out_conv);\n+    } \n+\n     const char* \n     _M_get_intc_enc(void)\n     { return __intc_enc; }\n@@ -117,19 +160,14 @@ namespace std\n     void\n     _M_set_extc_enc(const char* __c)\n     { strcpy(__extc_enc, __c); }\n-\n-    __enc_traits(const char* __int, const char* __ext)\n-    {\n-      // __intc_end = whatever we are using internally, which is\n-      // almost alwyas UCS4 (linux) or UCS2 (microsoft, aix,\n-      // whatever...)\n-      // __extc_end = nl_langinfo(CODESET)\n-      strcpy(__intc_enc, __int);\n-      strcpy(__extc_enc, __ext);\n-    }\n-\n+   \n   protected:\n-    __enc_traits();\n+    // 21.1.2 traits typedefs\n+    // p4\n+    // typedef STATE_T state_type\n+    // requires: state_type shall meet the requirements of\n+    // CopyConstructible types (20.1.3)\n+    // XXX because of this, these might actually need to be filled out.\n     __enc_traits(const __enc_traits&);\n   };\n #endif //_GLIBCPP_USE_WCHAR_T\n@@ -652,7 +690,7 @@ namespace std\n   \n \n   template<typename _InternT, typename _ExternT, typename _StateT>\n-    class codecvt : public _Codecvt<_InternT,_ExternT,_StateT>\n+    class codecvt : public _Codecvt<_InternT, _ExternT, _StateT>\n     {\n     public:      \n       // Types:\n@@ -665,14 +703,14 @@ namespace std\n \n       explicit \n       codecvt(size_t __refs = 0) \n-      : _Codecvt<_InternT,_ExternT,_StateT> (__refs) { }\n+      : _Codecvt<_InternT, _ExternT, _StateT> (__refs) { }\n \n     protected:\n       virtual \n       ~codecvt() { }\n     };\n \n-  // codecvt<char,char,mbstate_t> specialization\n+  // codecvt<char, char, mbstate_t> specialization\n   template<>\n     class codecvt<char, char, mbstate_t> \n     : public _Codecvt<char, char, mbstate_t>"}, {"sha": "ce6bb887d7e5bfade1ac46e4e199f1d6bad6301b", "filename": "libstdc++-v3/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c683c2adc2f3607bf63998f060d1ed2b7791cfd/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc?ref=9c683c2adc2f3607bf63998f060d1ed2b7791cfd", "patch": "@@ -161,7 +161,7 @@ namespace std\n     locale::id ctype<_CharT>::id;\n \n   template<typename _InternT, typename _ExternT, typename _StateT>\n-    locale::id codecvt<_InternT,_ExternT,_StateT>::id;\n+    locale::id codecvt<_InternT, _ExternT, _StateT>::id;\n \n   template<typename _CharT>\n     int _Format_cache<_CharT>::_S_pword_ix;"}]}