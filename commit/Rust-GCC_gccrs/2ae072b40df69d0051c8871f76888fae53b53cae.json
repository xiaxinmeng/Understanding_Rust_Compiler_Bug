{"sha": "2ae072b40df69d0051c8871f76888fae53b53cae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlMDcyYjQwZGY2OWQwMDUxYzg4NzFmNzY4ODhmYWU1M2I1M2NhZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-11T04:58:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-11T04:58:08Z"}, "message": "Initial revision\n\nFrom-SVN: r114", "tree": {"sha": "4e3575b24d20f14dc06c1973a0bae1e558a1992a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e3575b24d20f14dc06c1973a0bae1e558a1992a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae072b40df69d0051c8871f76888fae53b53cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae072b40df69d0051c8871f76888fae53b53cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae072b40df69d0051c8871f76888fae53b53cae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae072b40df69d0051c8871f76888fae53b53cae/comments", "author": null, "committer": null, "parents": [{"sha": "0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2768fc81bafc1c2d2e303109ab90aa718dd72b"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "8d67b98804006b341634f132b13476836f35d5a4", "filename": "gcc/config/i386/sequent.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae072b40df69d0051c8871f76888fae53b53cae/gcc%2Fconfig%2Fi386%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae072b40df69d0051c8871f76888fae53b53cae/gcc%2Fconfig%2Fi386%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsequent.h?ref=2ae072b40df69d0051c8871f76888fae53b53cae", "patch": "@@ -0,0 +1,92 @@\n+/* Definitions for Sequent Intel 386.\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"i386.h\"\n+\n+/* Use the BSD assembler syntax.  */\n+\n+#include \"bsd386.h\"\n+\n+/* By default, target has a 80387.  */\n+\n+#define TARGET_DEFAULT 1\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#define CPP_PREDEFINES \"-Dunix -Di386 -Dsequent\"\n+\n+/* Pass -Z and -ZO options to the linker.  */\n+\n+#define LINK_SPEC \"%{Z*}\"\n+\n+/* Link with libg.a when debugging, for dbx's sake.  */\n+\n+#define LIB_SPEC \"%{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} \"\n+\n+/* We don't want to output SDB debugging information.  */\n+\n+#undef SDB_DEBUGGING_INFO\n+\n+/* We want to output DBX debugging information.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* gcc order is ax, dx, cx, bx, si, di, bp, sp, st, st.\n+ * dbx order is ax, dx, cx, st(0), st(1), bx, si, di, st(2), st(3),\n+ * \t\tst(4), st(5), st(6), st(7), sp, bp  */\n+\n+/* ??? The right thing would be to change the ordering of the\n+   registers to correspond to the conventions of this system,\n+   and get rid of DBX_REGISTER_NUMBER.  */\n+\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n)\t\t\\\n+((n) < 3 ? (n) : (n) < 6 ? (n) + 2\t\\\n+ : (n) == 6 ? 15 : (n) == 7 ? 14 : 3)\n+\n+/* Prevent anything from being allocated in the register pair cx/bx,\n+   since that would confuse GDB.  */\n+\n+#undef HARD_REGNO_MODE_OK\n+#define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n+  (((REGNO) < 2 ? 1\t\t\t\t\t\t\t\\\n+    : (REGNO) < 4 ? 1\t\t\t\t\t\t\t\\\n+    : (REGNO) >= 8 ? (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n+\t\t    || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\t\\\n+    : (MODE) != QImode)\t\t\t\t\t\t\t\\\n+   && ! (REGNO == 2 && GET_MODE_UNIT_SIZE (MODE) > 4))\n+\n+/* Floating-point return values come in the FP register.  */\n+\n+#define VALUE_REGNO(MODE) \\\n+  (((MODE)==SFmode || (MODE)==DFmode) ? FIRST_FLOAT_REG : 0)\n+\n+/* 1 if N is a possible register number for a function value. */\n+\n+#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (N)== FIRST_FLOAT_REG)\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry. */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+   fprintf (FILE, \"\\tmovl $LP%d,%%eax\\n\\tcall mcount\\n\", (LABELNO));\n+\n+/* Assember pseudo-op for shared data segment. */\n+#define SHARED_SECTION_ASM_OP \".shdata\""}]}