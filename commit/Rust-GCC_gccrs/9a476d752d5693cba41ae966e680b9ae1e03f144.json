{"sha": "9a476d752d5693cba41ae966e680b9ae1e03f144", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0NzZkNzUyZDU2OTNjYmE0MWFlOTY2ZTY4MGI5YWUxZTAzZjE0NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T09:21:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T09:21:59Z"}, "message": "[multiple changes]\n\n2016-04-20  Yannick Moy  <moy@adacore.com>\n\n\t* osint.adb (Relocate_Path): Fix test when Path is shorter than Prefix.\n\t* einfo.adb (Set_Overridden_Operation): Add assertion.\n\t* sem_util.adb (Unique_Entity): for renaming-as-body return the spec\n\tentity.\n\n2016-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_unst.adb (Append_Unique_Call): New subprogram.\n\t(Unnest_Subprogram): Replace the unique occurrence\n\tof Call.Append() by Append_Unique_Call() which protects us from\n\tadding to the Calls table duplicated entries.\n\n2016-04-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_attr.adb (Is_GCC_Target): Fix for C backend.\n\t* xref_lib.ads (Dependencies_Tables): instantiate\n\tTable package with types that guarantee its safe use.\n\t* s-imgllu.adb, s-imgint.adb, s-imguns.adb, s-imglli.adb: Avoid nested\n\tprocedures.\n\nFrom-SVN: r235248", "tree": {"sha": "64a85a5e06c6212ca24ee4d1b7a1edb191546fad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a85a5e06c6212ca24ee4d1b7a1edb191546fad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a476d752d5693cba41ae966e680b9ae1e03f144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a476d752d5693cba41ae966e680b9ae1e03f144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a476d752d5693cba41ae966e680b9ae1e03f144", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a476d752d5693cba41ae966e680b9ae1e03f144/comments", "author": null, "committer": null, "parents": [{"sha": "88438c0e875c0bd43b55c793811a017416447145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88438c0e875c0bd43b55c793811a017416447145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88438c0e875c0bd43b55c793811a017416447145"}], "stats": {"total": 245, "additions": 130, "deletions": 115}, "files": [{"sha": "bb7253679417738eef3b340d7c22ddd19f930b90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -1,3 +1,25 @@\n+2016-04-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* osint.adb (Relocate_Path): Fix test when Path is shorter than Prefix.\n+\t* einfo.adb (Set_Overridden_Operation): Add assertion.\n+\t* sem_util.adb (Unique_Entity): for renaming-as-body return the spec\n+\tentity.\n+\n+2016-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_unst.adb (Append_Unique_Call): New subprogram.\n+\t(Unnest_Subprogram): Replace the unique occurrence\n+\tof Call.Append() by Append_Unique_Call() which protects us from\n+\tadding to the Calls table duplicated entries.\n+\n+2016-04-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_attr.adb (Is_GCC_Target): Fix for C backend.\n+\t* xref_lib.ads (Dependencies_Tables): instantiate\n+\tTable package with types that guarantee its safe use.\n+\t* s-imgllu.adb, s-imgint.adb, s-imguns.adb, s-imglli.adb: Avoid nested\n+\tprocedures.\n+\n 2016-04-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Valid]):"}, {"sha": "99e52d3b2b80e2d1b26d16e80dc62bf71ec3d9ba", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -5878,6 +5878,7 @@ package body Einfo is\n \n    procedure Set_Overridden_Operation (Id : E; V : E) is\n    begin\n+      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n       Set_Node26 (Id, V);\n    end Set_Overridden_Operation;\n "}, {"sha": "cfbba77558066baf817df5e7b9db051ff80446ea", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -7988,7 +7988,9 @@ package body Exp_Attr is\n \n       function Is_GCC_Target return Boolean is\n       begin\n-         return not CodePeer_Mode and then not AAMP_On_Target;\n+         return not CodePeer_Mode\n+           and then not AAMP_On_Target\n+           and then not Generate_C_Code;\n       end Is_GCC_Target;\n \n    --  Start of processing for Exp_Attr"}, {"sha": "c0a34054eedccd9dc4680f607f3228d2ee741ab9", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -80,6 +80,10 @@ package body Exp_Unst is\n    --  that are to other subprograms nested within the outer subprogram. These\n    --  are the calls that may need an additional parameter.\n \n+   procedure Append_Unique_Call (Call : Call_Entry);\n+   --  Append a call entry to the Calls table. A check is made to see if the\n+   --  table already contains this entry and if so it has no effect.\n+\n    -----------\n    -- Urefs --\n    -----------\n@@ -119,6 +123,21 @@ package body Exp_Unst is\n      Table_Increment      => 200,\n      Table_Name           => \"Unnest_Urefs\");\n \n+   ------------------------\n+   -- Append_Unique_Call --\n+   ------------------------\n+\n+   procedure Append_Unique_Call (Call : Call_Entry) is\n+   begin\n+      for J in Calls.First .. Calls.Last loop\n+         if Calls.Table (J) = Call then\n+            return;\n+         end if;\n+      end loop;\n+\n+      Calls.Append (Call);\n+   end Append_Unique_Call;\n+\n    -----------------------\n    -- Unnest_Subprogram --\n    -----------------------\n@@ -520,7 +539,7 @@ package body Exp_Unst is\n                      --  Both caller and callee must be subprograms\n \n                      if Is_Subprogram (Ent) then\n-                        Calls.Append ((N, Current_Subprogram, Ent));\n+                        Append_Unique_Call ((N, Current_Subprogram, Ent));\n                      end if;\n                   end if;\n                end if;"}, {"sha": "22327a0707cff51b236895f85bc0f4864668e459", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -2752,7 +2752,7 @@ package body Osint is\n          end if;\n       end if;\n \n-      if Path (Prefix'Range) = Prefix then\n+      if Path'Last >= Prefix'Last and then Path (Prefix'Range) = Prefix then\n          if Std_Prefix.all /= \"\" then\n             S := new String\n               (1 .. Std_Prefix'Length + Path'Last - Prefix'Last);"}, {"sha": "4fad4e66e75db4f962d554d7dd678a57e48fbc96", "filename": "gcc/ada/s-imgint.adb", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imgint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imgint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgint.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,12 @@\n \n package body System.Img_Int is\n \n+   procedure Set_Digits\n+     (T : Integer; S : in out String; P : in out Natural);\n+   --  Set digits of absolute value of T, which is zero or negative. We work\n+   --  with the negative of the value so that the largest negative number is\n+   --  not a special case.\n+\n    -------------------\n    -- Image_Integer --\n    -------------------\n@@ -53,45 +59,38 @@ package body System.Img_Int is\n       Set_Image_Integer (V, S, P);\n    end Image_Integer;\n \n+   ----------------\n+   -- Set_Digits --\n+   ----------------\n+\n+   procedure Set_Digits\n+     (T : Integer; S : in out String; P : in out Natural) is\n+   begin\n+      if T <= -10 then\n+         Set_Digits (T / 10, S, P);\n+         P := P + 1;\n+         S (P) := Character'Val (48 - (T rem 10));\n+      else\n+         P := P + 1;\n+         S (P) := Character'Val (48 - T);\n+      end if;\n+   end Set_Digits;\n+\n    -----------------------\n    -- Set_Image_Integer --\n    -----------------------\n \n    procedure Set_Image_Integer\n      (V : Integer;\n       S : in out String;\n-      P : in out Natural)\n-   is\n-      procedure Set_Digits (T : Integer);\n-      --  Set digits of absolute value of T, which is zero or negative. We work\n-      --  with the negative of the value so that the largest negative number is\n-      --  not a special case.\n-\n-      ----------------\n-      -- Set_Digits --\n-      ----------------\n-\n-      procedure Set_Digits (T : Integer) is\n-      begin\n-         if T <= -10 then\n-            Set_Digits (T / 10);\n-            P := P + 1;\n-            S (P) := Character'Val (48 - (T rem 10));\n-         else\n-            P := P + 1;\n-            S (P) := Character'Val (48 - T);\n-         end if;\n-      end Set_Digits;\n-\n-   --  Start of processing for Set_Image_Integer\n-\n+      P : in out Natural) is\n    begin\n       if V >= 0 then\n-         Set_Digits (-V);\n+         Set_Digits (-V, S, P);\n       else\n          P := P + 1;\n          S (P) := '-';\n-         Set_Digits (V);\n+         Set_Digits (V, S, P);\n       end if;\n    end Set_Image_Integer;\n "}, {"sha": "9e7199bf528a6e7aa1206d4843b854a89fb620b9", "filename": "gcc/ada/s-imglli.adb", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imglli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imglli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglli.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,12 @@\n \n package body System.Img_LLI is\n \n+   procedure Set_Digits\n+     (T : Long_Long_Integer; S : in out String; P : in out Natural);\n+   --  Set digits of absolute value of T, which is zero or negative. We work\n+   --  with the negative of the value so that the largest negative number is\n+   --  not a special case.\n+\n    -----------------------------\n    -- Image_Long_Long_Integer --\n    -----------------------------\n@@ -53,45 +59,38 @@ package body System.Img_LLI is\n       Set_Image_Long_Long_Integer (V, S, P);\n    end Image_Long_Long_Integer;\n \n-   ------------------------------\n+   ----------------\n+   -- Set_Digits --\n+   ----------------\n+\n+   procedure Set_Digits\n+     (T : Long_Long_Integer; S : in out String; P : in out Natural) is\n+   begin\n+      if T <= -10 then\n+         Set_Digits (T / 10, S, P);\n+         P := P + 1;\n+         S (P) := Character'Val (48 - (T rem 10));\n+      else\n+         P := P + 1;\n+         S (P) := Character'Val (48 - T);\n+      end if;\n+   end Set_Digits;\n+\n+   ---------------------------------\n    -- Set_Image_Long_Long_Integer --\n-   -----------------------------\n+   --------------------------------\n \n    procedure Set_Image_Long_Long_Integer\n      (V : Long_Long_Integer;\n       S : in out String;\n-      P : in out Natural)\n-   is\n-      procedure Set_Digits (T : Long_Long_Integer);\n-      --  Set digits of absolute value of T, which is zero or negative. We work\n-      --  with the negative of the value so that the largest negative number is\n-      --  not a special case.\n-\n-      ----------------\n-      -- Set_Digits --\n-      ----------------\n-\n-      procedure Set_Digits (T : Long_Long_Integer) is\n-      begin\n-         if T <= -10 then\n-            Set_Digits (T / 10);\n-            P := P + 1;\n-            S (P) := Character'Val (48 - (T rem 10));\n-         else\n-            P := P + 1;\n-            S (P) := Character'Val (48 - T);\n-         end if;\n-      end Set_Digits;\n-\n-   --  Start of processing for Set_Image_Long_Long_Integer\n-\n+      P : in out Natural) is\n    begin\n       if V >= 0 then\n-         Set_Digits (-V);\n+         Set_Digits (-V, S, P);\n       else\n          P := P + 1;\n          S (P) := '-';\n-         Set_Digits (V);\n+         Set_Digits (V, S, P);\n       end if;\n    end Set_Image_Long_Long_Integer;\n "}, {"sha": "95ff789d96e3b4557e75ff39d014a6fb1630a9c0", "filename": "gcc/ada/s-imgllu.adb", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imgllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imgllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllu.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,32 +56,17 @@ package body System.Img_LLU is\n    procedure Set_Image_Long_Long_Unsigned\n      (V : Long_Long_Unsigned;\n       S : in out String;\n-      P : in out Natural)\n-   is\n-      procedure Set_Digits (T : Long_Long_Unsigned);\n-      --  Set digits of absolute value of T\n-\n-      ----------------\n-      -- Set_Digits --\n-      ----------------\n-\n-      procedure Set_Digits (T : Long_Long_Unsigned) is\n-      begin\n-         if T >= 10 then\n-            Set_Digits (T / 10);\n-            P := P + 1;\n-            S (P) := Character'Val (48 + (T rem 10));\n-\n-         else\n-            P := P + 1;\n-            S (P) := Character'Val (48 + T);\n-         end if;\n-      end Set_Digits;\n-\n-   --  Start of processing for Set_Image_Long_Long_Unsigned\n-\n+      P : in out Natural) is\n    begin\n-      Set_Digits (V);\n+      if V >= 10 then\n+         Set_Image_Long_Long_Unsigned (V / 10, S, P);\n+         P := P + 1;\n+         S (P) := Character'Val (48 + (V rem 10));\n+\n+      else\n+         P := P + 1;\n+         S (P) := Character'Val (48 + V);\n+      end if;\n    end Set_Image_Long_Long_Unsigned;\n \n end System.Img_LLU;"}, {"sha": "c6df94c936ac46ba7640fcb1b2d30a9d041f3425", "filename": "gcc/ada/s-imguns.adb", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imguns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fs-imguns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imguns.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,32 +56,17 @@ package body System.Img_Uns is\n    procedure Set_Image_Unsigned\n      (V : Unsigned;\n       S : in out String;\n-      P : in out Natural)\n-   is\n-      procedure Set_Digits (T : Unsigned);\n-      --  Set decimal digits of value of T\n-\n-      ----------------\n-      -- Set_Digits --\n-      ----------------\n-\n-      procedure Set_Digits (T : Unsigned) is\n-      begin\n-         if T >= 10 then\n-            Set_Digits (T / 10);\n-            P := P + 1;\n-            S (P) := Character'Val (48 + (T rem 10));\n-\n-         else\n-            P := P + 1;\n-            S (P) := Character'Val (48 + T);\n-         end if;\n-      end Set_Digits;\n-\n-   --  Start of processing for Set_Image_Unsigned\n-\n+      P : in out Natural) is\n    begin\n-      Set_Digits (V);\n+      if V >= 10 then\n+         Set_Image_Unsigned (V / 10, S, P);\n+         P := P + 1;\n+         S (P) := Character'Val (48 + (V rem 10));\n+\n+      else\n+         P := P + 1;\n+         S (P) := Character'Val (48 + V);\n+      end if;\n    end Set_Image_Unsigned;\n \n end System.Img_Uns;"}, {"sha": "d0479cf318842cb0d96318e665d178c1873ef7d7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -20138,6 +20138,9 @@ package body Sem_Util is\n               and then Present (Corresponding_Spec_Of_Stub (P))\n             then\n                U := Corresponding_Spec_Of_Stub (P);\n+            elsif Nkind (P) = N_Subprogram_Renaming_Declaration\n+            then\n+               U := Corresponding_Spec (P);\n             end if;\n \n          when E_Task_Body =>"}, {"sha": "8d8a4ed282bce7ef07f2e1718edebe6e348a6c35", "filename": "gcc/ada/xref_lib.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fxref_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a476d752d5693cba41ae966e680b9ae1e03f144/gcc%2Fada%2Fxref_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.ads?ref=9a476d752d5693cba41ae966e680b9ae1e03f144", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -134,7 +134,7 @@ private\n \n    package Dependencies_Tables is new GNAT.Dynamic_Tables\n      (Table_Component_Type => Xr_Tabls.File_Reference,\n-      Table_Index_Type     => Positive,\n+      Table_Index_Type     => Natural,\n       Table_Low_Bound      => 1,\n       Table_Initial        => 400,\n       Table_Increment      => 100);"}]}