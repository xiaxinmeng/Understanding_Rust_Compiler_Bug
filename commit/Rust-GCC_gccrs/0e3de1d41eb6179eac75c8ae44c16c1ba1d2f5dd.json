{"sha": "0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzZGUxZDQxZWI2MTc5ZWFjNzVjOGFlNDRjMTZjMWJhMWQyZjVkZA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2017-05-14T00:38:48Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2017-05-14T00:38:48Z"}, "message": "use auto_bitmap more\n\ngcc/ChangeLog:\n\n2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* bt-load.c (combine_btr_defs): Use auto_bitmap to manage bitmap\n\tlifetime.\n\t(migrate_btr_def): Likewise.\n\t* cfgloop.c (get_loop_body_in_bfs_order): Likewise.\n\t* df-core.c (loop_post_order_compute): Likewise.\n\t(loop_inverted_post_order_compute): Likewise.\n\t* hsa-common.h: Likewise.\n\t* hsa-gen.c (hsa_bb::~hsa_bb): Likewise.\n\t* init-regs.c (initialize_uninitialized_regs): Likewise.\n\t* ipa-inline.c (resolve_noninline_speculation): Likewise.\n\t(inline_small_functions): Likewise.\n\t* ipa-reference.c (ipa_reference_write_optimization_summary): Likewise.\n\t* ira.c (combine_and_move_insns): Likewise.\n\t(build_insn_chain): Likewise.\n\t* loop-invariant.c (find_invariants): Likewise.\n\t* lower-subreg.c (propagate_pseudo_copies): Likewise.\n\t* predict.c (tree_predict_by_opcode): Likewise.\n\t(predict_paths_leading_to): Likewise.\n\t(predict_paths_leading_to_edge): Likewise.\n\t(estimate_loops_at_level): Likewise.\n\t(estimate_loops): Likewise.\n\t* shrink-wrap.c (try_shrink_wrapping): Likewise.\n\t(spread_components): Likewise.\n\t* tree-cfg.c (remove_edge_and_dominated_blocks): Likewise.\n\t* tree-loop-distribution.c (rdg_build_partitions): Likewise.\n\t* tree-predcom.c (tree_predictive_commoning_loop): Likewise.\n\t* tree-ssa-coalesce.c (coalesce_ssa_name): Likewise.\n\t* tree-ssa-phionlycprop.c (pass_phi_only_cprop::execute): Likewise.\n\t* tree-ssa-pre.c (remove_dead_inserted_code): Likewise.\n\t* tree-ssa-sink.c (nearest_common_dominator_of_uses): Likewise.\n\t* tree-ssa-threadupdate.c (compute_path_counts): Likewise.\n\t(mark_threaded_blocks): Likewise.\n\t(thread_through_all_blocks): Likewise.\n\t* tree-ssa.c (verify_ssa): Likewise.\n\t(execute_update_addresses_taken): Likewise.\n\t* tree-ssanames.c (verify_ssaname_freelists): Likewise.\n\nFrom-SVN: r248021", "tree": {"sha": "6de1ecd2f719b8ec208ed45a232c64387837fa79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de1ecd2f719b8ec208ed45a232c64387837fa79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/comments", "author": null, "committer": null, "parents": [{"sha": "792bb49bb0732500fe4e87fbeae4aee3cb187112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/792bb49bb0732500fe4e87fbeae4aee3cb187112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/792bb49bb0732500fe4e87fbeae4aee3cb187112"}], "stats": {"total": 234, "additions": 92, "deletions": 142}, "files": [{"sha": "170e0b34996d1dda2e532f52375ba05b3c268b07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1,3 +1,42 @@\n+2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* bt-load.c (combine_btr_defs): Use auto_bitmap to manage bitmap\n+\tlifetime.\n+\t(migrate_btr_def): Likewise.\n+\t* cfgloop.c (get_loop_body_in_bfs_order): Likewise.\n+\t* df-core.c (loop_post_order_compute): Likewise.\n+\t(loop_inverted_post_order_compute): Likewise.\n+\t* hsa-common.h: Likewise.\n+\t* hsa-gen.c (hsa_bb::~hsa_bb): Likewise.\n+\t* init-regs.c (initialize_uninitialized_regs): Likewise.\n+\t* ipa-inline.c (resolve_noninline_speculation): Likewise.\n+\t(inline_small_functions): Likewise.\n+\t* ipa-reference.c (ipa_reference_write_optimization_summary): Likewise.\n+\t* ira.c (combine_and_move_insns): Likewise.\n+\t(build_insn_chain): Likewise.\n+\t* loop-invariant.c (find_invariants): Likewise.\n+\t* lower-subreg.c (propagate_pseudo_copies): Likewise.\n+\t* predict.c (tree_predict_by_opcode): Likewise.\n+\t(predict_paths_leading_to): Likewise.\n+\t(predict_paths_leading_to_edge): Likewise.\n+\t(estimate_loops_at_level): Likewise.\n+\t(estimate_loops): Likewise.\n+\t* shrink-wrap.c (try_shrink_wrapping): Likewise.\n+\t(spread_components): Likewise.\n+\t* tree-cfg.c (remove_edge_and_dominated_blocks): Likewise.\n+\t* tree-loop-distribution.c (rdg_build_partitions): Likewise.\n+\t* tree-predcom.c (tree_predictive_commoning_loop): Likewise.\n+\t* tree-ssa-coalesce.c (coalesce_ssa_name): Likewise.\n+\t* tree-ssa-phionlycprop.c (pass_phi_only_cprop::execute): Likewise.\n+\t* tree-ssa-pre.c (remove_dead_inserted_code): Likewise.\n+\t* tree-ssa-sink.c (nearest_common_dominator_of_uses): Likewise.\n+\t* tree-ssa-threadupdate.c (compute_path_counts): Likewise.\n+\t(mark_threaded_blocks): Likewise.\n+\t(thread_through_all_blocks): Likewise.\n+\t* tree-ssa.c (verify_ssa): Likewise.\n+\t(execute_update_addresses_taken): Likewise.\n+\t* tree-ssanames.c (verify_ssaname_freelists): Likewise.\n+\n 2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* cfganal.c (mark_dfs_back_edges): Replace manual stack with"}, {"sha": "32924e2ecc5d5fc3008ffeeabbc85d9512e6505e", "filename": "gcc/bt-load.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1058,7 +1058,7 @@ combine_btr_defs (btr_def *def, HARD_REG_SET *btrs_live_in_range)\n \t     target registers live over the merged range.  */\n \t  int btr;\n \t  HARD_REG_SET combined_btrs_live;\n-\t  bitmap combined_live_range = BITMAP_ALLOC (NULL);\n+\t  auto_bitmap combined_live_range;\n \t  btr_user *user;\n \n \t  if (other_def->live_range == NULL)\n@@ -1116,7 +1116,6 @@ combine_btr_defs (btr_def *def, HARD_REG_SET *btrs_live_in_range)\n \t      delete_insn (other_def->insn);\n \n \t    }\n-\t  BITMAP_FREE (combined_live_range);\n \t}\n     }\n }\n@@ -1255,7 +1254,6 @@ can_move_up (const_basic_block bb, const rtx_insn *insn, int n_insns)\n static int\n migrate_btr_def (btr_def *def, int min_cost)\n {\n-  bitmap live_range;\n   HARD_REG_SET btrs_live_in_range;\n   int btr_used_near_def = 0;\n   int def_basic_block_freq;\n@@ -1289,7 +1287,7 @@ migrate_btr_def (btr_def *def, int min_cost)\n     }\n \n   btr_def_live_range (def, &btrs_live_in_range);\n-  live_range = BITMAP_ALLOC (NULL);\n+  auto_bitmap live_range;\n   bitmap_copy (live_range, def->live_range);\n \n #ifdef INSN_SCHEDULING\n@@ -1373,7 +1371,7 @@ migrate_btr_def (btr_def *def, int min_cost)\n       if (dump_file)\n \tfprintf (dump_file, \"failed to move\\n\");\n     }\n-  BITMAP_FREE (live_range);\n+\n   return !give_up;\n }\n "}, {"sha": "654d188e8b5328af22da3f2337151430765643c2", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -923,15 +923,14 @@ get_loop_body_in_bfs_order (const struct loop *loop)\n {\n   basic_block *blocks;\n   basic_block bb;\n-  bitmap visited;\n   unsigned int i = 1;\n   unsigned int vc = 0;\n \n   gcc_assert (loop->num_nodes);\n   gcc_assert (loop->latch != EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n   blocks = XNEWVEC (basic_block, loop->num_nodes);\n-  visited = BITMAP_ALLOC (NULL);\n+  auto_bitmap visited;\n   blocks[0] = loop->header;\n   bitmap_set_bit (visited, loop->header->index);\n   while (i < loop->num_nodes)\n@@ -952,7 +951,6 @@ get_loop_body_in_bfs_order (const struct loop *loop)\n \t}\n     }\n \n-  BITMAP_FREE (visited);\n   return blocks;\n }\n "}, {"sha": "98787a768c6699202c5fe4d19c5a0a89bb5f8a8a", "filename": "gcc/df-core.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1303,14 +1303,13 @@ loop_post_order_compute (int *post_order, struct loop *loop)\n   edge_iterator *stack;\n   int sp;\n   int post_order_num = 0;\n-  bitmap visited;\n \n   /* Allocate stack for back-tracking up CFG.  */\n   stack = XNEWVEC (edge_iterator, loop->num_nodes + 1);\n   sp = 0;\n \n   /* Allocate bitmap to track nodes that have been visited.  */\n-  visited = BITMAP_ALLOC (NULL);\n+  auto_bitmap visited;\n \n   /* Push the first edge on to the stack.  */\n   stack[sp++] = ei_start (loop_preheader_edge (loop)->src->succs);\n@@ -1352,7 +1351,6 @@ loop_post_order_compute (int *post_order, struct loop *loop)\n     }\n \n   free (stack);\n-  BITMAP_FREE (visited);\n \n   return post_order_num;\n }\n@@ -1367,14 +1365,13 @@ loop_inverted_post_order_compute (int *post_order, struct loop *loop)\n   edge_iterator *stack;\n   int sp;\n   int post_order_num = 0;\n-  bitmap visited;\n \n   /* Allocate stack for back-tracking up CFG.  */\n   stack = XNEWVEC (edge_iterator, loop->num_nodes + 1);\n   sp = 0;\n \n   /* Allocate bitmap to track nodes that have been visited.  */\n-  visited = BITMAP_ALLOC (NULL);\n+  auto_bitmap visited;\n \n   /* Put all latches into the initial work list.  In theory we'd want\n      to start from loop exits but then we'd have the special case of\n@@ -1420,7 +1417,6 @@ loop_inverted_post_order_compute (int *post_order, struct loop *loop)\n     }\n \n   free (stack);\n-  BITMAP_FREE (visited);\n   return post_order_num;\n }\n "}, {"sha": "810624e4e1c9b0fa521eb03c1dd0176f6f08b839", "filename": "gcc/hsa-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fhsa-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fhsa-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-common.h?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"hash-table.h\"\n #include \"basic-block.h\"\n+#include \"bitmap.h\"\n \n \n /* Return true if the compiler should produce HSAIL.  */\n@@ -1027,7 +1028,6 @@ class hsa_bb\n public:\n   hsa_bb (basic_block cfg_bb);\n   hsa_bb (basic_block cfg_bb, int idx);\n-  ~hsa_bb ();\n \n   /* Append an instruction INSN into the basic block.  */\n   void append_insn (hsa_insn_basic *insn);\n@@ -1049,7 +1049,7 @@ class hsa_bb\n   /* Just a number to construct names from.  */\n   int m_index;\n \n-  bitmap m_liveout, m_livein;\n+  auto_bitmap m_liveout, m_livein;\n private:\n   /* Make the default constructor inaccessible.  */\n   hsa_bb ();"}, {"sha": "c5d8a6e1f445773b9f892da8cbc47e5450baf8c1", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -5716,8 +5716,7 @@ gen_hsa_phi_from_gimple_phi (gimple *phi_stmt, hsa_bb *hbb)\n \n hsa_bb::hsa_bb (basic_block cfg_bb, int idx)\n   : m_bb (cfg_bb), m_first_insn (NULL), m_last_insn (NULL), m_first_phi (NULL),\n-    m_last_phi (NULL), m_index (idx), m_liveout (BITMAP_ALLOC (NULL)),\n-    m_livein (BITMAP_ALLOC (NULL))\n+    m_last_phi (NULL), m_index (idx)\n {\n   gcc_assert (!cfg_bb->aux);\n   cfg_bb->aux = this;\n@@ -5728,21 +5727,12 @@ hsa_bb::hsa_bb (basic_block cfg_bb, int idx)\n \n hsa_bb::hsa_bb (basic_block cfg_bb)\n   : m_bb (cfg_bb), m_first_insn (NULL), m_last_insn (NULL), m_first_phi (NULL),\n-    m_last_phi (NULL), m_index (hsa_cfun->m_hbb_count++),\n-    m_liveout (BITMAP_ALLOC (NULL)), m_livein (BITMAP_ALLOC (NULL))\n+    m_last_phi (NULL), m_index (hsa_cfun->m_hbb_count++)\n {\n   gcc_assert (!cfg_bb->aux);\n   cfg_bb->aux = this;\n }\n \n-/* Destructor of class representing HSA BB.  */\n-\n-hsa_bb::~hsa_bb ()\n-{\n-  BITMAP_FREE (m_livein);\n-  BITMAP_FREE (m_liveout);\n-}\n-\n /* Create and initialize and return a new hsa_bb structure for a given CFG\n    basic block BB.  */\n "}, {"sha": "15d774671497985cdb1a6e7d78ec1d6ca717df9b", "filename": "gcc/init-regs.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Finit-regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Finit-regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finit-regs.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -48,7 +48,7 @@ static void\n initialize_uninitialized_regs (void)\n {\n   basic_block bb;\n-  bitmap already_genned = BITMAP_ALLOC (NULL);\n+  auto_bitmap already_genned;\n \n   if (optimize == 1)\n     {\n@@ -125,8 +125,6 @@ initialize_uninitialized_regs (void)\n \tdf_dump (dump_file);\n       df_remove_problem (df_live);\n     }\n-\n-  BITMAP_FREE (already_genned);\n }\n \n namespace {"}, {"sha": "7337e0a2fe59fde70a75e055bfbc001e71a2dcfc", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1674,7 +1674,7 @@ resolve_noninline_speculation (edge_heap_t *edge_heap, struct cgraph_edge *edge)\n       struct cgraph_node *node = edge->caller;\n       struct cgraph_node *where = node->global.inlined_to\n \t\t\t\t  ? node->global.inlined_to : node;\n-      bitmap updated_nodes = BITMAP_ALLOC (NULL);\n+      auto_bitmap updated_nodes;\n \n       spec_rem += edge->count;\n       edge->resolve_speculation ();\n@@ -1684,7 +1684,6 @@ resolve_noninline_speculation (edge_heap_t *edge_heap, struct cgraph_edge *edge)\n \t\t\t  updated_nodes, NULL);\n       update_callee_keys (edge_heap, where,\n \t\t\t  updated_nodes);\n-      BITMAP_FREE (updated_nodes);\n     }\n }\n \n@@ -1726,7 +1725,7 @@ inline_small_functions (void)\n   struct cgraph_node *node;\n   struct cgraph_edge *edge;\n   edge_heap_t edge_heap (sreal::min ());\n-  bitmap updated_nodes = BITMAP_ALLOC (NULL);\n+  auto_bitmap updated_nodes;\n   int min_size, max_size;\n   auto_vec<cgraph_edge *> new_indirect_edges;\n   int initial_size = 0;\n@@ -2072,7 +2071,6 @@ inline_small_functions (void)\n \t     \"Unit growth for small function inlining: %i->%i (%i%%)\\n\",\n \t     initial_size, overall_size,\n \t     initial_size ? overall_size * 100 / (initial_size) - 100: 0);\n-  BITMAP_FREE (updated_nodes);\n   symtab->remove_edge_removal_hook (edge_removal_hook_holder);\n }\n "}, {"sha": "222253920fd5361e546e73eacc1d96dfbd2e33e0", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -992,7 +992,7 @@ ipa_reference_write_optimization_summary (void)\n   unsigned int count = 0;\n   int ltrans_statics_bitcount = 0;\n   lto_symtab_encoder_t encoder = ob->decl_state->symtab_node_encoder;\n-  bitmap ltrans_statics = BITMAP_ALLOC (NULL);\n+  auto_bitmap ltrans_statics;\n   int i;\n \n   reference_vars_to_consider = splay_tree_new (splay_tree_compare_ints, 0, 0);\n@@ -1052,7 +1052,6 @@ ipa_reference_write_optimization_summary (void)\n \t\t\t       ltrans_statics_bitcount);\n \t  }\n       }\n-  BITMAP_FREE (ltrans_statics);\n   lto_destroy_simple_output_block (ob);\n   splay_tree_delete (reference_vars_to_consider);\n }"}, {"sha": "c9751ce81baedaf5ec671e5aa993a7d7995c68cc", "filename": "gcc/ira.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -3698,7 +3698,7 @@ add_store_equivs (void)\n static void\n combine_and_move_insns (void)\n {\n-  bitmap cleared_regs = BITMAP_ALLOC (NULL);\n+  auto_bitmap cleared_regs;\n   int max = max_reg_num ();\n \n   for (int regno = FIRST_PSEUDO_REGISTER; regno < max; regno++)\n@@ -3856,8 +3856,6 @@ combine_and_move_insns (void)\n \t\tdf_insn_rescan (insn);\n \t    }\n     }\n-\n-  BITMAP_FREE (cleared_regs);\n }\n \n /* A pass over indirect jumps, converting simple cases to direct jumps.\n@@ -4083,8 +4081,8 @@ build_insn_chain (void)\n   basic_block bb;\n   struct insn_chain *c = NULL;\n   struct insn_chain *next = NULL;\n-  bitmap live_relevant_regs = BITMAP_ALLOC (NULL);\n-  bitmap elim_regset = BITMAP_ALLOC (NULL);\n+  auto_bitmap live_relevant_regs;\n+  auto_bitmap elim_regset;\n   /* live_subregs is a vector used to keep accurate information about\n      which hardregs are live in multiword pseudos.  live_subregs and\n      live_subregs_used are indexed by pseudo number.  The live_subreg\n@@ -4093,7 +4091,7 @@ build_insn_chain (void)\n      live_subreg[allocno] is number of bytes that the pseudo can\n      occupy.  */\n   sbitmap *live_subregs = XCNEWVEC (sbitmap, max_regno);\n-  bitmap live_subregs_used = BITMAP_ALLOC (NULL);\n+  auto_bitmap live_subregs_used;\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     if (TEST_HARD_REG_BIT (eliminable_regset, i))\n@@ -4336,9 +4334,6 @@ build_insn_chain (void)\n     if (live_subregs[i] != NULL)\n       sbitmap_free (live_subregs[i]);\n   free (live_subregs);\n-  BITMAP_FREE (live_subregs_used);\n-  BITMAP_FREE (live_relevant_regs);\n-  BITMAP_FREE (elim_regset);\n \n   if (dump_file)\n     print_insn_chains (dump_file);"}, {"sha": "cda42efd13ebfdc4141513d14337931c3f70218d", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1219,10 +1219,10 @@ find_invariants_body (struct loop *loop, basic_block *body,\n static void\n find_invariants (struct loop *loop)\n {\n-  bitmap may_exit = BITMAP_ALLOC (NULL);\n-  bitmap always_reached = BITMAP_ALLOC (NULL);\n-  bitmap has_exit = BITMAP_ALLOC (NULL);\n-  bitmap always_executed = BITMAP_ALLOC (NULL);\n+  auto_bitmap may_exit;\n+  auto_bitmap always_reached;\n+  auto_bitmap has_exit;\n+  auto_bitmap always_executed;\n   basic_block *body = get_loop_body_in_dom_order (loop);\n \n   find_exits (loop, body, may_exit, has_exit);\n@@ -1233,10 +1233,6 @@ find_invariants (struct loop *loop)\n   find_invariants_body (loop, body, always_reached, always_executed);\n   merge_identical_invariants ();\n \n-  BITMAP_FREE (always_reached);\n-  BITMAP_FREE (always_executed);\n-  BITMAP_FREE (may_exit);\n-  BITMAP_FREE (has_exit);\n   free (body);\n }\n "}, {"sha": "1ab1c71211f5bcea98c6718a8532e7f73a078adf", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -405,10 +405,7 @@ find_pseudo_copy (rtx set)\n static void\n propagate_pseudo_copies (void)\n {\n-  bitmap queue, propagate;\n-\n-  queue = BITMAP_ALLOC (NULL);\n-  propagate = BITMAP_ALLOC (NULL);\n+  auto_bitmap queue, propagate;\n \n   bitmap_copy (queue, decomposable_context);\n   do\n@@ -429,9 +426,6 @@ propagate_pseudo_copies (void)\n       bitmap_ior_into (decomposable_context, propagate);\n     }\n   while (!bitmap_empty_p (queue));\n-\n-  BITMAP_FREE (queue);\n-  BITMAP_FREE (propagate);\n }\n \n /* A pointer to one of these values is passed to"}, {"sha": "0fc9fc5c4667770bb2b8ade0d87e9ef74c71e2e4", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -2396,7 +2396,6 @@ tree_predict_by_opcode (basic_block bb)\n   tree type;\n   tree val;\n   enum tree_code cmp;\n-  bitmap visited;\n   edge_iterator ei;\n   enum br_predictor predictor;\n \n@@ -2409,10 +2408,8 @@ tree_predict_by_opcode (basic_block bb)\n   op1 = gimple_cond_rhs (stmt);\n   cmp = gimple_cond_code (stmt);\n   type = TREE_TYPE (op0);\n-  visited = BITMAP_ALLOC (NULL);\n-  val = expr_expected_value_1 (boolean_type_node, op0, cmp, op1, visited,\n+  val = expr_expected_value_1 (boolean_type_node, op0, cmp, op1, auto_bitmap (),\n \t\t\t       &predictor);\n-  BITMAP_FREE (visited);\n   if (val && TREE_CODE (val) == INTEGER_CST)\n     {\n       if (predictor == PRED_BUILTIN_EXPECT)\n@@ -2917,9 +2914,7 @@ static void\n predict_paths_leading_to (basic_block bb, enum br_predictor pred,\n \t\t\t  enum prediction taken, struct loop *in_loop)\n {\n-  bitmap visited = BITMAP_ALLOC (NULL);\n-  predict_paths_for_bb (bb, bb, pred, taken, visited, in_loop);\n-  BITMAP_FREE (visited);\n+  predict_paths_for_bb (bb, bb, pred, taken, auto_bitmap (), in_loop);\n }\n \n /* Like predict_paths_leading_to but take edge instead of basic block.  */\n@@ -2943,9 +2938,7 @@ predict_paths_leading_to_edge (edge e, enum br_predictor pred,\n       }\n   if (!has_nonloop_edge)\n     {\n-      bitmap visited = BITMAP_ALLOC (NULL);\n-      predict_paths_for_bb (bb, bb, pred, taken, visited, in_loop);\n-      BITMAP_FREE (visited);\n+      predict_paths_for_bb (bb, bb, pred, taken, auto_bitmap (), in_loop);\n     }\n   else\n     predict_edge_def (e, pred, taken);\n@@ -3119,7 +3112,7 @@ estimate_loops_at_level (struct loop *first_loop)\n       edge e;\n       basic_block *bbs;\n       unsigned i;\n-      bitmap tovisit = BITMAP_ALLOC (NULL);\n+      auto_bitmap tovisit;\n \n       estimate_loops_at_level (loop->inner);\n \n@@ -3132,7 +3125,6 @@ estimate_loops_at_level (struct loop *first_loop)\n \tbitmap_set_bit (tovisit, bbs[i]->index);\n       free (bbs);\n       propagate_freq (loop->header, tovisit);\n-      BITMAP_FREE (tovisit);\n     }\n }\n \n@@ -3141,7 +3133,7 @@ estimate_loops_at_level (struct loop *first_loop)\n static void\n estimate_loops (void)\n {\n-  bitmap tovisit = BITMAP_ALLOC (NULL);\n+  auto_bitmap tovisit;\n   basic_block bb;\n \n   /* Start by estimating the frequencies in the loops.  */\n@@ -3154,7 +3146,6 @@ estimate_loops (void)\n       bitmap_set_bit (tovisit, bb->index);\n     }\n   propagate_freq (ENTRY_BLOCK_PTR_FOR_FN (cfun), tovisit);\n-  BITMAP_FREE (tovisit);\n }\n \n /* Drop the profile for NODE to guessed, and update its frequency based on"}, {"sha": "492376d949b11b6ad6a5f0ec7e77eb420e436bc2", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -758,7 +758,7 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n      reachable from PRO that we already found, and in VEC a stack of\n      those we still need to consider (to find successors).  */\n \n-  bitmap bb_with = BITMAP_ALLOC (NULL);\n+  auto_bitmap bb_with;\n   bitmap_set_bit (bb_with, pro->index);\n \n   vec<basic_block> vec;\n@@ -822,7 +822,7 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n     {\n       calculate_dominance_info (CDI_POST_DOMINATORS);\n \n-      bitmap bb_tmp = BITMAP_ALLOC (NULL);\n+      auto_bitmap bb_tmp;\n       bitmap_copy (bb_tmp, bb_with);\n       basic_block last_ok = pro;\n       vec.truncate (0);\n@@ -859,7 +859,6 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n \n       pro = last_ok;\n \n-      BITMAP_FREE (bb_tmp);\n       free_dominance_info (CDI_POST_DOMINATORS);\n     }\n \n@@ -871,7 +870,6 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n \n   if (pro == entry)\n     {\n-      BITMAP_FREE (bb_with);\n       free_dominance_info (CDI_DOMINATORS);\n       return;\n     }\n@@ -1006,7 +1004,6 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n   *entry_edge = make_single_succ_edge (new_bb, pro, EDGE_FALLTHRU);\n   force_nonfallthru (*entry_edge);\n \n-  BITMAP_FREE (bb_with);\n   free_dominance_info (CDI_DOMINATORS);\n }\n \f\n@@ -1265,7 +1262,7 @@ spread_components (sbitmap components)\n      on that stack.  */\n   vec<basic_block> todo;\n   todo.create (n_basic_blocks_for_fn (cfun));\n-  bitmap seen = BITMAP_ALLOC (NULL);\n+  auto_bitmap seen;\n \n   sbitmap old = sbitmap_alloc (SBITMAP_SIZE (components));\n \n@@ -1395,7 +1392,6 @@ spread_components (sbitmap components)\n     }\n \n   sbitmap_free (old);\n-  BITMAP_FREE (seen);\n }\n \n /* If we cannot handle placing some component's prologues or epilogues where"}, {"sha": "69f6e5ddeeec36afa389754deba5290171fc5111", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -8194,7 +8194,6 @@ remove_edge_and_dominated_blocks (edge e)\n {\n   vec<basic_block> bbs_to_remove = vNULL;\n   vec<basic_block> bbs_to_fix_dom = vNULL;\n-  bitmap df, df_idom;\n   edge f;\n   edge_iterator ei;\n   bool none_removed = false;\n@@ -8243,9 +8242,7 @@ remove_edge_and_dominated_blocks (edge e)\n \t}\n     }\n \n-  df = BITMAP_ALLOC (NULL);\n-  df_idom = BITMAP_ALLOC (NULL);\n-\n+  auto_bitmap df, df_idom;\n   if (none_removed)\n     bitmap_set_bit (df_idom,\n \t\t    get_immediate_dominator (CDI_DOMINATORS, e->dest)->index);\n@@ -8312,8 +8309,6 @@ remove_edge_and_dominated_blocks (edge e)\n \n   iterate_fix_dominators (CDI_DOMINATORS, bbs_to_fix_dom, true);\n \n-  BITMAP_FREE (df);\n-  BITMAP_FREE (df_idom);\n   bbs_to_remove.release ();\n   bbs_to_fix_dom.release ();\n }"}, {"sha": "a60454b521861da3b503b5a004379aa0e112bef4", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1251,7 +1251,7 @@ rdg_build_partitions (struct graph *rdg,\n \t\t      vec<gimple *> starting_stmts,\n \t\t      vec<partition *> *partitions)\n {\n-  bitmap processed = BITMAP_ALLOC (NULL);\n+  auto_bitmap processed;\n   int i;\n   gimple *stmt;\n \n@@ -1282,8 +1282,6 @@ rdg_build_partitions (struct graph *rdg,\n \n   /* All vertices should have been assigned to at least one partition now,\n      other than vertices belonging to dead code.  */\n-\n-  BITMAP_FREE (processed);\n }\n \n /* Dump to FILE the PARTITIONS.  */"}, {"sha": "23e7870dd2d5a746799606486c1fb810e44104f9", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -2498,7 +2498,6 @@ tree_predictive_commoning_loop (struct loop *loop)\n   struct tree_niter_desc desc;\n   bool unroll = false;\n   edge exit;\n-  bitmap tmp_vars;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Processing loop %d\\n\",  loop->num);\n@@ -2549,7 +2548,7 @@ tree_predictive_commoning_loop (struct loop *loop)\n   /* Find the suitable components and split them into chains.  */\n   components = filter_suitable_components (loop, components);\n \n-  tmp_vars = BITMAP_ALLOC (NULL);\n+  auto_bitmap tmp_vars;\n   looparound_phis = BITMAP_ALLOC (NULL);\n   determine_roots (loop, components, &chains);\n   release_components (components);\n@@ -2617,7 +2616,6 @@ tree_predictive_commoning_loop (struct loop *loop)\n end: ;\n   release_chains (chains);\n   free_data_refs (datarefs);\n-  BITMAP_FREE (tmp_vars);\n   BITMAP_FREE (looparound_phis);\n \n   free_affine_expand_cache (&name_expansions);"}, {"sha": "e166314ed4d3d0b9a90e279c0a21a8c22b75a5a4", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1791,7 +1791,7 @@ coalesce_ssa_name (void)\n   tree_live_info_p liveinfo;\n   ssa_conflicts *graph;\n   coalesce_list *cl;\n-  bitmap used_in_copies = BITMAP_ALLOC (NULL);\n+  auto_bitmap used_in_copies;\n   var_map map;\n   unsigned int i;\n   tree a;\n@@ -1848,8 +1848,6 @@ coalesce_ssa_name (void)\n   else\n     compute_samebase_partition_bases (map);\n \n-  BITMAP_FREE (used_in_copies);\n-\n   if (num_var_partitions (map) < 1)\n     {\n       delete_coalesce_list (cl);"}, {"sha": "aa0f50256cd78002c20b33a683cad10c65621da9", "filename": "gcc/tree-ssa-phionlycprop.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-phionlycprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-phionlycprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phionlycprop.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -497,13 +497,11 @@ class pass_phi_only_cprop : public gimple_opt_pass\n unsigned int\n pass_phi_only_cprop::execute (function *fun)\n {\n-  bitmap interesting_names;\n-  bitmap interesting_names1;\n   bool cfg_altered = false;\n \n   /* Bitmap of blocks which need EH information updated.  We can not\n      update it on-the-fly as doing so invalidates the dominator tree.  */\n-  bitmap need_eh_cleanup = BITMAP_ALLOC (NULL);\n+  auto_bitmap need_eh_cleanup;\n \n   /* INTERESTING_NAMES is effectively our worklist, indexed by\n      SSA_NAME_VERSION.\n@@ -515,8 +513,8 @@ pass_phi_only_cprop::execute (function *fun)\n \n      Experiments have show we generally get better compilation\n      time behavior with bitmaps rather than sbitmaps.  */\n-  interesting_names = BITMAP_ALLOC (NULL);\n-  interesting_names1 = BITMAP_ALLOC (NULL);\n+  auto_bitmap interesting_names;\n+  auto_bitmap interesting_names1;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n   cfg_altered = false;\n@@ -570,13 +568,8 @@ pass_phi_only_cprop::execute (function *fun)\n   /* Propagation of const and copies may make some EH edges dead.  Purge\n      such edges from the CFG as needed.  */\n   if (!bitmap_empty_p (need_eh_cleanup))\n-    {\n-      gimple_purge_all_dead_eh_edges (need_eh_cleanup);\n-      BITMAP_FREE (need_eh_cleanup);\n-    }\n+    gimple_purge_all_dead_eh_edges (need_eh_cleanup);\n \n-  BITMAP_FREE (interesting_names);\n-  BITMAP_FREE (interesting_names1);\n   return 0;\n }\n "}, {"sha": "0d9295c2d117b4eb33beb22a57d259048f239034", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -4910,12 +4910,11 @@ mark_operand_necessary (tree op)\n static void\n remove_dead_inserted_code (void)\n {\n-  bitmap worklist;\n   unsigned i;\n   bitmap_iterator bi;\n   gimple *t;\n \n-  worklist = BITMAP_ALLOC (NULL);\n+  auto_bitmap worklist;\n   EXECUTE_IF_SET_IN_BITMAP (inserted_exprs, 0, i, bi)\n     {\n       t = SSA_NAME_DEF_STMT (ssa_name (i));\n@@ -5004,7 +5003,6 @@ remove_dead_inserted_code (void)\n     }\n   if (to_clear != -1U)\n     bitmap_clear_bit (inserted_exprs, to_clear);\n-  BITMAP_FREE (worklist);\n }\n \n "}, {"sha": "acf832d66f6ffc8200c15ab2de3240d996c8e0a6", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -128,7 +128,7 @@ static basic_block\n nearest_common_dominator_of_uses (def_operand_p def_p, bool *debug_stmts)\n {\n   tree var = DEF_FROM_PTR (def_p);\n-  bitmap blocks = BITMAP_ALLOC (NULL);\n+  auto_bitmap blocks;\n   basic_block commondom;\n   unsigned int j;\n   bitmap_iterator bi;\n@@ -158,17 +158,14 @@ nearest_common_dominator_of_uses (def_operand_p def_p, bool *debug_stmts)\n \n       /* Short circuit. Nothing dominates the entry block.  */\n       if (useblock == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n-\t{\n-\t  BITMAP_FREE (blocks);\n-\t  return NULL;\n-\t}\n+\treturn NULL;\n+\n       bitmap_set_bit (blocks, useblock->index);\n     }\n   commondom = BASIC_BLOCK_FOR_FN (cfun, bitmap_first_set_bit (blocks));\n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, j, bi)\n     commondom = nearest_common_dominator (CDI_DOMINATORS, commondom,\n \t\t\t\t\t  BASIC_BLOCK_FOR_FN (cfun, j));\n-  BITMAP_FREE (blocks);\n   return commondom;\n }\n "}, {"sha": "319826861dcdfdf6cbe157161d4883ccf64e3cc6", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -723,7 +723,7 @@ compute_path_counts (struct redirection_data *rd,\n      below to add up the counts of the other edges not included in this jump\n      threading path.  */\n   struct el *next, *el;\n-  bitmap in_edge_srcs = BITMAP_ALLOC (NULL);\n+  auto_bitmap in_edge_srcs;\n   for (el = rd->incoming_edges; el; el = next)\n     {\n       next = el->next;\n@@ -759,8 +759,6 @@ compute_path_counts (struct redirection_data *rd,\n   if (path_in_freq > BB_FREQ_MAX)\n     path_in_freq = BB_FREQ_MAX;\n \n-  BITMAP_FREE (in_edge_srcs);\n-\n   /* Now compute the fraction of the total count coming into the first\n      path bb that is from the current threading path.  */\n   gcov_type total_count = e->dest->count;\n@@ -1958,7 +1956,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n {\n   unsigned int i;\n   bitmap_iterator bi;\n-  bitmap tmp = BITMAP_ALLOC (NULL);\n+  auto_bitmap tmp;\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n@@ -2169,8 +2167,6 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t    }\n \t}\n     }\n-\n-  BITMAP_FREE (tmp);\n }\n \n \n@@ -2436,16 +2432,15 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   bool retval = false;\n   unsigned int i;\n   bitmap_iterator bi;\n-  bitmap threaded_blocks;\n   struct loop *loop;\n+  auto_bitmap threaded_blocks;\n \n   if (!paths.exists ())\n     {\n       retval = false;\n       goto out;\n     }\n \n-  threaded_blocks = BITMAP_ALLOC (NULL);\n   memset (&thread_stats, 0, sizeof (thread_stats));\n \n   /* Remove any paths that referenced removed edges.  */\n@@ -2578,8 +2573,6 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \n   free_original_copy_tables ();\n \n-  BITMAP_FREE (threaded_blocks);\n-  threaded_blocks = NULL;\n   paths.release ();\n \n   if (retval)"}, {"sha": "11f5a2bac9258144cb9704acbbbb4c5d639abae8", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -1022,7 +1022,7 @@ verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n   ssa_op_iter iter;\n   tree op;\n   enum dom_state orig_dom_state = dom_info_state (CDI_DOMINATORS);\n-  bitmap names_defined_in_bb = BITMAP_ALLOC (NULL);\n+  auto_bitmap names_defined_in_bb;\n \n   gcc_assert (!need_ssa_update_p (cfun));\n \n@@ -1176,7 +1176,6 @@ verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n   else\n     set_dom_info_availability (CDI_DOMINATORS, orig_dom_state);\n \n-  BITMAP_FREE (names_defined_in_bb);\n   timevar_pop (TV_TREE_SSA_VERIFY);\n   return;\n \n@@ -1622,9 +1621,9 @@ void\n execute_update_addresses_taken (void)\n {\n   basic_block bb;\n-  bitmap addresses_taken = BITMAP_ALLOC (NULL);\n-  bitmap not_reg_needs = BITMAP_ALLOC (NULL);\n-  bitmap suitable_for_renaming = BITMAP_ALLOC (NULL);\n+  auto_bitmap addresses_taken;\n+  auto_bitmap not_reg_needs;\n+  auto_bitmap suitable_for_renaming;\n   tree var;\n   unsigned i;\n \n@@ -2005,9 +2004,6 @@ execute_update_addresses_taken (void)\n \tupdate_ssa (TODO_update_ssa);\n     }\n \n-  BITMAP_FREE (not_reg_needs);\n-  BITMAP_FREE (addresses_taken);\n-  BITMAP_FREE (suitable_for_renaming);\n   timevar_pop (TV_ADDRESS_TAKEN);\n }\n "}, {"sha": "353c7b1906a88ffa7f9d2a368e48209c22bb5c7c", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=0e3de1d41eb6179eac75c8ae44c16c1ba1d2f5dd", "patch": "@@ -127,7 +127,7 @@ verify_ssaname_freelists (struct function *fun)\n   if (!gimple_in_ssa_p (fun))\n     return;\n \n-  bitmap names_in_il = BITMAP_ALLOC (NULL);\n+  auto_bitmap names_in_il;\n \n   /* Walk the entire IL noting every SSA_NAME we see.  */\n   basic_block bb;\n@@ -165,7 +165,7 @@ verify_ssaname_freelists (struct function *fun)\n \n   /* Now walk the free list noting what we find there and verifying\n      there are no duplicates.  */\n-  bitmap names_in_freelists = BITMAP_ALLOC (NULL);\n+  auto_bitmap names_in_freelists;\n   if (FREE_SSANAMES (fun))\n     {\n       for (unsigned int i = 0; i < FREE_SSANAMES (fun)->length (); i++)\n@@ -221,7 +221,7 @@ verify_ssaname_freelists (struct function *fun)\n \n   unsigned int i;\n   bitmap_iterator bi;\n-  bitmap all_names = BITMAP_ALLOC (NULL);\n+  auto_bitmap all_names;\n   bitmap_set_range (all_names, UNUSED_NAME_VERSION + 1, num_ssa_names - 1);\n   bitmap_ior_into (names_in_il, names_in_freelists);\n \n@@ -230,10 +230,6 @@ verify_ssaname_freelists (struct function *fun)\n   EXECUTE_IF_AND_COMPL_IN_BITMAP(all_names, names_in_il,\n \t\t\t\t UNUSED_NAME_VERSION + 1, i, bi)\n     gcc_assert (!ssa_name (i));\n-\n-  BITMAP_FREE (all_names);\n-  BITMAP_FREE (names_in_freelists);\n-  BITMAP_FREE (names_in_il);\n }\n \n /* Move all SSA_NAMEs from FREE_SSA_NAMES_QUEUE to FREE_SSA_NAMES."}]}