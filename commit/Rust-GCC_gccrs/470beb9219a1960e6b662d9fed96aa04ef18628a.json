{"sha": "470beb9219a1960e6b662d9fed96aa04ef18628a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwYmViOTIxOWExOTYwZTZiNjYyZDlmZWQ5NmFhMDRlZjE4NjI4YQ==", "commit": {"author": {"name": "Mike Frysinger", "email": "vapier@gentoo.org", "date": "2021-02-14T02:25:28Z"}, "committer": {"name": "Mike Frysinger", "email": "vapier@gentoo.org", "date": "2021-02-20T08:33:32Z"}, "message": "libiberty: autogenerate aclocal.m4\n\nMove custom macros to acinclude.m4 so we can autogenerate aclocal.m4\nwith aclocal.  This matches every other project in the tree.\n\nlibiberty/ChangeLog:\n\n\t* Makefile.in (ACLOCAL, ACLOCAL_AMFLAGS, $(srcdir)/aclocal.m4): Define.\n\t(configure_deps): Rename to ...\n\t(aclocal_deps): ... this.  Replace aclocal.m4 with acinclude.m4.\n\t($(srcdir)/configure): Replace $(configure_deps) with\n\t$(srcdir)/aclocal.m4.\n\t* aclocal.m4: Move libiberty macros to acinclude.m4, then regenerate.\n\t* acinclude.m4: New file.\n\t* configure: Regenerate.", "tree": {"sha": "2eb1a645d3b7453d7a5a6e1e4f58b5672e26fcba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eb1a645d3b7453d7a5a6e1e4f58b5672e26fcba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/470beb9219a1960e6b662d9fed96aa04ef18628a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470beb9219a1960e6b662d9fed96aa04ef18628a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470beb9219a1960e6b662d9fed96aa04ef18628a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470beb9219a1960e6b662d9fed96aa04ef18628a/comments", "author": {"login": "vapier", "id": 176950, "node_id": "MDQ6VXNlcjE3Njk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vapier", "html_url": "https://github.com/vapier", "followers_url": "https://api.github.com/users/vapier/followers", "following_url": "https://api.github.com/users/vapier/following{/other_user}", "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vapier/subscriptions", "organizations_url": "https://api.github.com/users/vapier/orgs", "repos_url": "https://api.github.com/users/vapier/repos", "events_url": "https://api.github.com/users/vapier/events{/privacy}", "received_events_url": "https://api.github.com/users/vapier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vapier", "id": 176950, "node_id": "MDQ6VXNlcjE3Njk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vapier", "html_url": "https://github.com/vapier", "followers_url": "https://api.github.com/users/vapier/followers", "following_url": "https://api.github.com/users/vapier/following{/other_user}", "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vapier/subscriptions", "organizations_url": "https://api.github.com/users/vapier/orgs", "repos_url": "https://api.github.com/users/vapier/repos", "events_url": "https://api.github.com/users/vapier/events{/privacy}", "received_events_url": "https://api.github.com/users/vapier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93e8054406e803202b0e97ec3917820dcd824761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e8054406e803202b0e97ec3917820dcd824761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e8054406e803202b0e97ec3917820dcd824761"}], "stats": {"total": 398, "additions": 215, "deletions": 183}, "files": [{"sha": "4f1213b983b6cc6ce868cc712b36724e8bcba998", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=470beb9219a1960e6b662d9fed96aa04ef18628a", "patch": "@@ -481,18 +481,24 @@ config.status: $(srcdir)/configure\n \t$(SHELL) ./config.status --recheck\n \n AUTOCONF = autoconf\n-configure_deps = $(srcdir)/aclocal.m4 \\\n+ACLOCAL = aclocal\n+ACLOCAL_AMFLAGS = -I ../config -I ..\n+aclocal_deps = \\\n \t$(srcdir)/../config/acx.m4 \\\n \t$(srcdir)/../config/cet.m4 \\\n \t$(srcdir)/../config/enable.m4 \\\n \t$(srcdir)/../config/no-executables.m4 \\\n \t$(srcdir)/../config/override.m4 \\\n \t$(srcdir)/../config/picflag.m4 \\\n-\t$(srcdir)/../config/warnings.m4\n+\t$(srcdir)/../config/warnings.m4 \\\n+\t$(srcdir)/acinclude.m4\n \n-$(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(configure_deps)\n+$(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(srcdir)/aclocal.m4\n \tcd $(srcdir) && $(AUTOCONF)\n \n+$(srcdir)/aclocal.m4: @MAINT@ $(aclocal_deps)\n+\tcd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\n+\n # Depending on config.h makes sure that config.status has been re-run\n # if needed.  This prevents problems with parallel builds, in case\n # subdirectories need to run config.status also."}, {"sha": "6db0e50851712eaad6c64f3874d1bd9cf7c84e56", "filename": "libiberty/acinclude.m4", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Facinclude.m4?ref=470beb9219a1960e6b662d9fed96aa04ef18628a", "patch": "@@ -0,0 +1,185 @@\n+dnl Copyright (C) 2000-2021 Free Software Foundation, Inc.\n+dnl\n+dnl GCC is free software; you can redistribute it and/or modify\n+dnl it under the terms of the GNU General Public License as published by\n+dnl the Free Software Foundation; either version 3, or (at your option)\n+dnl any later version.\n+dnl\n+dnl GCC is distributed in the hope that it will be useful,\n+dnl but WITHOUT ANY WARRANTY; without even the implied warranty of\n+dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+dnl GNU General Public License for more details.\n+dnl\n+dnl You should have received a copy of the GNU General Public License\n+dnl along with GCC; see the file COPYING3.  If not see\n+dnl <http://www.gnu.org/licenses/>.\n+\n+dnl See whether strncmp reads past the end of its string parameters.\n+dnl On some versions of SunOS4 at least, strncmp reads a word at a time\n+dnl but erroneously reads past the end of strings.  This can cause\n+dnl a SEGV in some cases.\n+AC_DEFUN([libiberty_AC_FUNC_STRNCMP],\n+[AC_REQUIRE([AC_FUNC_MMAP])\n+AC_CACHE_CHECK([for working strncmp], ac_cv_func_strncmp_works,\n+[AC_TRY_RUN([\n+/* Test by Jim Wilson and Kaveh Ghazi.\n+   Check whether strncmp reads past the end of its string parameters. */\n+#include <sys/types.h>\n+\n+#ifdef HAVE_FCNTL_H\n+#include <fcntl.h>\n+#endif\n+\n+#ifdef HAVE_SYS_MMAN_H\n+#include <sys/mman.h>\n+#endif\n+\n+#ifndef MAP_ANON\n+#ifdef MAP_ANONYMOUS\n+#define MAP_ANON MAP_ANONYMOUS\n+#else\n+#define MAP_ANON MAP_FILE\n+#endif\n+#endif\n+\n+#ifndef MAP_FILE\n+#define MAP_FILE 0\n+#endif\n+#ifndef O_RDONLY\n+#define O_RDONLY 0\n+#endif\n+\n+#define MAP_LEN 0x10000\n+\n+main ()\n+{\n+#if defined(HAVE_MMAP) || defined(HAVE_MMAP_ANYWHERE)\n+  char *p;\n+  int dev_zero;\n+\n+  dev_zero = open (\"/dev/zero\", O_RDONLY);\n+  if (dev_zero < 0)\n+    exit (1);\n+\n+  p = (char *) mmap (0, MAP_LEN, PROT_READ|PROT_WRITE,\n+\t\t     MAP_ANON|MAP_PRIVATE, dev_zero, 0);\n+  if (p == (char *)-1)\n+    p = (char *) mmap (0, MAP_LEN, PROT_READ|PROT_WRITE,\n+\t\t       MAP_ANON|MAP_PRIVATE, -1, 0);\n+  if (p == (char *)-1)\n+    exit (2);\n+  else\n+    {\n+      char *string = \"__si_type_info\";\n+      char *q = (char *) p + MAP_LEN - strlen (string) - 2;\n+      char *r = (char *) p + 0xe;\n+\n+      strcpy (q, string);\n+      strcpy (r, string);\n+      strncmp (r, q, 14);\n+    }\n+#endif /* HAVE_MMAP || HAVE_MMAP_ANYWHERE */\n+  exit (0);\n+}\n+], ac_cv_func_strncmp_works=yes, ac_cv_func_strncmp_works=no,\n+  ac_cv_func_strncmp_works=yes)\n+rm -f core core.* *.core])\n+if test $ac_cv_func_strncmp_works = no ; then\n+  AC_LIBOBJ([strncmp])\n+fi\n+])\n+\n+dnl See if errno must be declared even when <errno.h> is included.\n+AC_DEFUN([libiberty_AC_DECLARE_ERRNO],\n+[AC_CACHE_CHECK(whether errno must be declared, libiberty_cv_declare_errno,\n+[AC_TRY_COMPILE(\n+[#include <errno.h>],\n+[int x = errno;],\n+libiberty_cv_declare_errno=no,\n+libiberty_cv_declare_errno=yes)])\n+if test $libiberty_cv_declare_errno = yes\n+then AC_DEFINE(NEED_DECLARATION_ERRNO, 1,\n+  [Define if errno must be declared even when <errno.h> is included.])\n+fi\n+])\n+\n+dnl See whether we need a declaration for a function.\n+AC_DEFUN([libiberty_NEED_DECLARATION],\n+[AC_MSG_CHECKING([whether $1 must be declared])\n+AC_CACHE_VAL(libiberty_cv_decl_needed_$1,\n+[AC_TRY_COMPILE([\n+#include \"confdefs.h\"\n+#include <stdio.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif],\n+[char *(*pfn) = (char *(*)) $1],\n+libiberty_cv_decl_needed_$1=no, libiberty_cv_decl_needed_$1=yes)])\n+AC_MSG_RESULT($libiberty_cv_decl_needed_$1)\n+if test $libiberty_cv_decl_needed_$1 = yes; then\n+  AC_DEFINE([NEED_DECLARATION_]translit($1, [a-z], [A-Z]), 1,\n+            [Define if $1 is not declared in system header files.])\n+fi\n+])dnl\n+\n+# We always want a C version of alloca() compiled into libiberty,\n+# because native-compiler support for the real alloca is so !@#$%\n+# unreliable that GCC has decided to use it only when being compiled\n+# by GCC.  This is the part of AC_FUNC_ALLOCA that calculates the\n+# information alloca.c needs.\n+AC_DEFUN([libiberty_AC_FUNC_C_ALLOCA],\n+[AC_CACHE_CHECK(whether alloca needs Cray hooks, ac_cv_os_cray,\n+[AC_EGREP_CPP(webecray,\n+[#if defined(CRAY) && ! defined(CRAY2)\n+webecray\n+#else\n+wenotbecray\n+#endif\n+], ac_cv_os_cray=yes, ac_cv_os_cray=no)])\n+if test $ac_cv_os_cray = yes; then\n+  for ac_func in _getb67 GETB67 getb67; do\n+    AC_CHECK_FUNC($ac_func,\n+      [AC_DEFINE_UNQUOTED(CRAY_STACKSEG_END, $ac_func,\n+  [Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP\n+   systems. This function is required for alloca.c support on those\n+   systems.])  break])\n+  done\n+fi\n+\n+AC_CACHE_CHECK(stack direction for C alloca, ac_cv_c_stack_direction,\n+[AC_TRY_RUN([find_stack_direction ()\n+{\n+  static char *addr = 0;\n+  auto char dummy;\n+  if (addr == 0)\n+    {\n+      addr = &dummy;\n+      return find_stack_direction ();\n+    }\n+  else\n+    return (&dummy > addr) ? 1 : -1;\n+}\n+main ()\n+{\n+  exit (find_stack_direction() < 0);\n+}],\n+  ac_cv_c_stack_direction=1,\n+  ac_cv_c_stack_direction=-1,\n+  ac_cv_c_stack_direction=0)])\n+AC_DEFINE_UNQUOTED(STACK_DIRECTION, $ac_cv_c_stack_direction,\n+  [Define if you know the direction of stack growth for your system;\n+   otherwise it will be automatically deduced at run-time.\n+        STACK_DIRECTION > 0 => grows toward higher addresses\n+        STACK_DIRECTION < 0 => grows toward lower addresses\n+        STACK_DIRECTION = 0 => direction of growth unknown])\n+])"}, {"sha": "3378316dced982635e91397312018e5ea1f5f6e4", "filename": "libiberty/aclocal.m4", "status": "modified", "additions": 21, "deletions": 177, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Faclocal.m4?ref=470beb9219a1960e6b662d9fed96aa04ef18628a", "patch": "@@ -1,177 +1,21 @@\n-sinclude(../config/acx.m4)\n-sinclude(../config/cet.m4)\n-sinclude(../config/enable.m4)\n-sinclude(../config/no-executables.m4)\n-sinclude(../config/override.m4)\n-sinclude(../config/picflag.m4)\n-sinclude(../config/warnings.m4)\n-\n-dnl See whether strncmp reads past the end of its string parameters.\n-dnl On some versions of SunOS4 at least, strncmp reads a word at a time\n-dnl but erroneously reads past the end of strings.  This can cause\n-dnl a SEGV in some cases.\n-AC_DEFUN(libiberty_AC_FUNC_STRNCMP,\n-[AC_REQUIRE([AC_FUNC_MMAP])\n-AC_CACHE_CHECK([for working strncmp], ac_cv_func_strncmp_works,\n-[AC_TRY_RUN([\n-/* Test by Jim Wilson and Kaveh Ghazi.\n-   Check whether strncmp reads past the end of its string parameters. */\n-#include <sys/types.h>\n-\n-#ifdef HAVE_FCNTL_H\n-#include <fcntl.h>\n-#endif\n-\n-#ifdef HAVE_SYS_MMAN_H\n-#include <sys/mman.h>\n-#endif\n-\n-#ifndef MAP_ANON\n-#ifdef MAP_ANONYMOUS\n-#define MAP_ANON MAP_ANONYMOUS\n-#else\n-#define MAP_ANON MAP_FILE\n-#endif\n-#endif\n-\n-#ifndef MAP_FILE\n-#define MAP_FILE 0\n-#endif\n-#ifndef O_RDONLY\n-#define O_RDONLY 0\n-#endif\n-\n-#define MAP_LEN 0x10000\n-\n-main ()\n-{\n-#if defined(HAVE_MMAP) || defined(HAVE_MMAP_ANYWHERE)\n-  char *p;\n-  int dev_zero;\n-\n-  dev_zero = open (\"/dev/zero\", O_RDONLY);\n-  if (dev_zero < 0)\n-    exit (1);\n-  \n-  p = (char *) mmap (0, MAP_LEN, PROT_READ|PROT_WRITE,\n-\t\t     MAP_ANON|MAP_PRIVATE, dev_zero, 0);\n-  if (p == (char *)-1)\n-    p = (char *) mmap (0, MAP_LEN, PROT_READ|PROT_WRITE,\n-\t\t       MAP_ANON|MAP_PRIVATE, -1, 0);\n-  if (p == (char *)-1)\n-    exit (2);\n-  else\n-    {\n-      char *string = \"__si_type_info\";\n-      char *q = (char *) p + MAP_LEN - strlen (string) - 2;\n-      char *r = (char *) p + 0xe;\n-\n-      strcpy (q, string);\n-      strcpy (r, string);\n-      strncmp (r, q, 14);\n-    }\n-#endif /* HAVE_MMAP || HAVE_MMAP_ANYWHERE */\n-  exit (0);\n-}\n-], ac_cv_func_strncmp_works=yes, ac_cv_func_strncmp_works=no,\n-  ac_cv_func_strncmp_works=yes)\n-rm -f core core.* *.core])\n-if test $ac_cv_func_strncmp_works = no ; then\n-  AC_LIBOBJ([strncmp])\n-fi\n-])\n-\n-dnl See if errno must be declared even when <errno.h> is included.\n-AC_DEFUN(libiberty_AC_DECLARE_ERRNO,\n-[AC_CACHE_CHECK(whether errno must be declared, libiberty_cv_declare_errno,\n-[AC_TRY_COMPILE(\n-[#include <errno.h>],\n-[int x = errno;],\n-libiberty_cv_declare_errno=no,\n-libiberty_cv_declare_errno=yes)])\n-if test $libiberty_cv_declare_errno = yes\n-then AC_DEFINE(NEED_DECLARATION_ERRNO, 1,\n-  [Define if errno must be declared even when <errno.h> is included.])\n-fi\n-])\n-\n-dnl See whether we need a declaration for a function.\n-AC_DEFUN(libiberty_NEED_DECLARATION,\n-[AC_MSG_CHECKING([whether $1 must be declared])\n-AC_CACHE_VAL(libiberty_cv_decl_needed_$1,\n-[AC_TRY_COMPILE([\n-#include \"confdefs.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif],\n-[char *(*pfn) = (char *(*)) $1],\n-libiberty_cv_decl_needed_$1=no, libiberty_cv_decl_needed_$1=yes)])\n-AC_MSG_RESULT($libiberty_cv_decl_needed_$1)\n-if test $libiberty_cv_decl_needed_$1 = yes; then\n-  AC_DEFINE([NEED_DECLARATION_]translit($1, [a-z], [A-Z]), 1,\n-            [Define if $1 is not declared in system header files.])\n-fi\n-])dnl\n-\n-# We always want a C version of alloca() compiled into libiberty,\n-# because native-compiler support for the real alloca is so !@#$%\n-# unreliable that GCC has decided to use it only when being compiled\n-# by GCC.  This is the part of AC_FUNC_ALLOCA that calculates the\n-# information alloca.c needs.\n-AC_DEFUN(libiberty_AC_FUNC_C_ALLOCA,\n-[AC_CACHE_CHECK(whether alloca needs Cray hooks, ac_cv_os_cray,\n-[AC_EGREP_CPP(webecray,\n-[#if defined(CRAY) && ! defined(CRAY2)\n-webecray\n-#else\n-wenotbecray\n-#endif\n-], ac_cv_os_cray=yes, ac_cv_os_cray=no)])\n-if test $ac_cv_os_cray = yes; then\n-  for ac_func in _getb67 GETB67 getb67; do\n-    AC_CHECK_FUNC($ac_func, \n-      [AC_DEFINE_UNQUOTED(CRAY_STACKSEG_END, $ac_func, \n-  [Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP\n-   systems. This function is required for alloca.c support on those\n-   systems.])  break])\n-  done\n-fi\n-\n-AC_CACHE_CHECK(stack direction for C alloca, ac_cv_c_stack_direction,\n-[AC_TRY_RUN([find_stack_direction ()\n-{\n-  static char *addr = 0;\n-  auto char dummy;\n-  if (addr == 0)\n-    {\n-      addr = &dummy;\n-      return find_stack_direction ();\n-    }\n-  else\n-    return (&dummy > addr) ? 1 : -1;\n-}\n-main ()\n-{\n-  exit (find_stack_direction() < 0);\n-}], \n-  ac_cv_c_stack_direction=1,\n-  ac_cv_c_stack_direction=-1,\n-  ac_cv_c_stack_direction=0)])\n-AC_DEFINE_UNQUOTED(STACK_DIRECTION, $ac_cv_c_stack_direction,\n-  [Define if you know the direction of stack growth for your system;\n-   otherwise it will be automatically deduced at run-time.\n-        STACK_DIRECTION > 0 => grows toward higher addresses\n-        STACK_DIRECTION < 0 => grows toward lower addresses\n-        STACK_DIRECTION = 0 => direction of growth unknown])\n-])\n+# generated automatically by aclocal 1.15.1 -*- Autoconf -*-\n+\n+# Copyright (C) 1996-2017 Free Software Foundation, Inc.\n+\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+m4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\n+m4_include([../config/acx.m4])\n+m4_include([../config/cet.m4])\n+m4_include([../config/enable.m4])\n+m4_include([../config/no-executables.m4])\n+m4_include([../config/picflag.m4])\n+m4_include([../config/warnings.m4])\n+m4_include([acinclude.m4])"}, {"sha": "2ea7c119809845230f41741bbd6af5e46c5d1a42", "filename": "libiberty/configure", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470beb9219a1960e6b662d9fed96aa04ef18628a/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=470beb9219a1960e6b662d9fed96aa04ef18628a", "patch": "@@ -2458,9 +2458,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-\n-\n-\n # This works around the fact that libtool configuration may change LD\n # for this particular configuration, but some shells, instead of\n # keeping the changes in LD private, export them just because LD is"}]}