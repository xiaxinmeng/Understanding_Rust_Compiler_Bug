{"sha": "c199723d7ed0032db095abc75b82a9710eaa5e56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5OTcyM2Q3ZWQwMDMyZGIwOTVhYmM3NWI4MmE5NzEwZWFhNWU1Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-21T22:55:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-22T15:05:02Z"}, "message": "analyzer: simplify store::eval_alias\n\nI have followup patches that add new conditions to store::eval_alias.\nRather than duplicate all conditions for symmetry, split it up and\ncall it on both (A, B) and (B, A).\n\ngcc/analyzer/ChangeLog:\n\t* store.cc (store::eval_alias): Make const.  Split out 2nd half\n\tinto store::eval_alias_1 and call it twice for symmetry, avoiding\n\ttest duplication.\n\t(store::eval_alias_1): New function, split out from the above.\n\t* store.h (store::eval_alias): Make const.\n\t(store::eval_alias_1): New decl.", "tree": {"sha": "7585151b0b18e450f2797adb7e124d6709f64a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7585151b0b18e450f2797adb7e124d6709f64a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c199723d7ed0032db095abc75b82a9710eaa5e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199723d7ed0032db095abc75b82a9710eaa5e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c199723d7ed0032db095abc75b82a9710eaa5e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199723d7ed0032db095abc75b82a9710eaa5e56/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294b6da21bbd8297fe6aee497ac6c8e561637e70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294b6da21bbd8297fe6aee497ac6c8e561637e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294b6da21bbd8297fe6aee497ac6c8e561637e70"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "298088f6ef9a8ea0c285bbb883189144bd00f575", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199723d7ed0032db095abc75b82a9710eaa5e56/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199723d7ed0032db095abc75b82a9710eaa5e56/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=c199723d7ed0032db095abc75b82a9710eaa5e56", "patch": "@@ -1544,7 +1544,7 @@ store::set_value (store_manager *mgr, const region *lhs_reg,\n \n tristate\n store::eval_alias (const region *base_reg_a,\n-\t\t   const region *base_reg_b)\n+\t\t   const region *base_reg_b) const\n {\n   /* SSA names can't alias.  */\n   tree decl_a = base_reg_a->maybe_get_decl ();\n@@ -1554,31 +1554,34 @@ store::eval_alias (const region *base_reg_a,\n   if (decl_b && TREE_CODE (decl_b) == SSA_NAME)\n     return tristate::TS_FALSE;\n \n+  /* Try both ways, for symmetry.  */\n+  tristate ts_ab = eval_alias_1 (base_reg_a, base_reg_b);\n+  if (ts_ab.is_false ())\n+    return tristate::TS_FALSE;\n+  tristate ts_ba = eval_alias_1 (base_reg_b, base_reg_a);\n+  if (ts_ba.is_false ())\n+    return tristate::TS_FALSE;\n+  return tristate::TS_UNKNOWN;\n+}\n+\n+/* Half of store::eval_alias; called twice for symmetry.  */\n+\n+tristate\n+store::eval_alias_1 (const region *base_reg_a,\n+\t\t     const region *base_reg_b) const\n+{\n   if (const symbolic_region *sym_reg_a\n       = base_reg_a->dyn_cast_symbolic_region ())\n     {\n       const svalue *sval_a = sym_reg_a->get_pointer ();\n-      if (sval_a->get_kind () == SK_INITIAL\n-\t  && decl_b\n-\t  && !is_global_var (decl_b))\n-\t{\n-\t  /* The initial value of a pointer can't point to a local.  */\n-\t  return tristate::TS_FALSE;\n-\t}\n-    }\n-  if (const symbolic_region *sym_reg_b\n-      = base_reg_b->dyn_cast_symbolic_region ())\n-    {\n-      const svalue *sval_b = sym_reg_b->get_pointer ();\n-      if (sval_b->get_kind () == SK_INITIAL\n-\t  && decl_a\n-\t  && !is_global_var (decl_a))\n-\t{\n-\t  /* The initial value of a pointer can't point to a local.  */\n-\t  return tristate::TS_FALSE;\n-\t}\n+      if (sval_a->get_kind () == SK_INITIAL)\n+\tif (tree decl_b = base_reg_b->maybe_get_decl ())\n+\t  if (!is_global_var (decl_b))\n+\t    {\n+\t      /* The initial value of a pointer can't point to a local.  */\n+\t      return tristate::TS_FALSE;\n+\t    }\n     }\n-\n   return tristate::TS_UNKNOWN;\n }\n "}, {"sha": "636a9547f2c0277e58ee3f3e72551223b28d5372", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199723d7ed0032db095abc75b82a9710eaa5e56/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199723d7ed0032db095abc75b82a9710eaa5e56/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=c199723d7ed0032db095abc75b82a9710eaa5e56", "patch": "@@ -553,7 +553,7 @@ class store\n   cluster_map_t::iterator end () const { return m_cluster_map.end (); }\n \n   tristate eval_alias (const region *base_reg_a,\n-\t\t       const region *base_reg_b);\n+\t\t       const region *base_reg_b) const;\n \n   template <typename BindingVisitor>\n   void for_each_binding (BindingVisitor &v)\n@@ -569,6 +569,8 @@ class store\n \n private:\n   void remove_overlapping_bindings (store_manager *mgr, const region *reg);\n+  tristate eval_alias_1 (const region *base_reg_a,\n+\t\t\t const region *base_reg_b) const;\n \n   cluster_map_t m_cluster_map;\n "}]}