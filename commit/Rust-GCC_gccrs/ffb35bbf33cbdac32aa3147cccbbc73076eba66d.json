{"sha": "ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiMzViYmYzM2NiZGFjMzJhYTMxNDdjY2NiYmM3MzA3NmViYTY2ZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-09-27T10:11:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T10:11:01Z"}, "message": "a-cbhase.adb, [...]: Add iterator machinery to bounded sets and indefinite sets.\n\n2011-09-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cbhase.adb, a-cbhase.ads, a-cborse.adb, a-cborse.ads,\n\ta-cihase.adb, a-cihase.ads, a-ciorse.adb, a-ciorse.ads,\n\ta-coorse.adb, a-coorse.ads: Add iterator machinery to bounded sets and\n\tindefinite sets.\n\t* a-coorma.ads: Minor reformmating.\n\t* einfo.ads: Improve the comment describing the\n\tDirectly_Designated_Type function.\n\t* a-ciorma.adb, a-ciorma.ads: Add iterator machinery to indefinite\n\tordered maps.\n\t* gcc-interface/Makefile.in, gcc-interface/Make-lang.in: Update\n\tdependencies.\n\nFrom-SVN: r179260", "tree": {"sha": "c7ec0579749b721790ac4965474b2502ccf80d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ec0579749b721790ac4965474b2502ccf80d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "862a84f5cfb3dfda8a55ad84a44f710a6f0e205e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862a84f5cfb3dfda8a55ad84a44f710a6f0e205e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862a84f5cfb3dfda8a55ad84a44f710a6f0e205e"}], "stats": {"total": 1228, "additions": 989, "deletions": 239}, "files": [{"sha": "cab378da07f896fdd4f3fc7a24ea455dbbbbafa5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -1,3 +1,17 @@\n+2011-09-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cbhase.adb, a-cbhase.ads, a-cborse.adb, a-cborse.ads,\n+\ta-cihase.adb, a-cihase.ads, a-ciorse.adb, a-ciorse.ads,\n+\ta-coorse.adb, a-coorse.ads: Add iterator machinery to bounded sets and\n+\tindefinite sets.\n+\t* a-coorma.ads: Minor reformmating.\n+\t* einfo.ads: Improve the comment describing the\n+\tDirectly_Designated_Type function.\n+\t* a-ciorma.adb, a-ciorma.ads: Add iterator machinery to indefinite\n+\tordered maps.\n+\t* gcc-interface/Makefile.in, gcc-interface/Make-lang.in: Update\n+\tdependencies.\n+\n 2011-09-27  Robert Dewar  <dewar@adacore.com>\n \n \t* a-comutr.ads: Minor reformatting."}, {"sha": "7dcd074995d50d2edfd34c3154fda780e0e53bfa", "filename": "gcc/ada/a-cbhase.adb", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.adb?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -39,6 +39,17 @@ with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Hashed_Sets is\n \n+   type Iterator is new Set_Iterator_Interfaces.Forward_Iterator with record\n+      Container : Set_Access;\n+      Position  : Cursor;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -593,6 +604,16 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       return Cursor'(Container'Unrestricted_Access, Node);\n    end First;\n \n+   overriding function First (Object : Iterator) return Cursor is\n+      Node : constant Count_Type := HT_Ops.First (Object.Container.all);\n+   begin\n+      if Node = 0 then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container, Node);\n+   end First;\n+\n    -----------------\n    -- Has_Element --\n    -----------------\n@@ -899,6 +920,12 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Set)\n+     return Set_Iterator_Interfaces.Forward_Iterator'Class is\n+   begin\n+      return Iterator'(Container'Unrestricted_Access, First (Container));\n+   end Iterate;\n+\n    ------------\n    -- Length --\n    ------------\n@@ -962,6 +989,23 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       Position := Next (Position);\n    end Next;\n \n+   function Next\n+     (Object : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor designates wrong set\";\n+      end if;\n+\n+      if Position.Node = 0 then\n+         return No_Element;\n+      end if;\n+\n+      return Next (Position);\n+   end Next;\n+\n    -------------\n    -- Overlap --\n    -------------\n@@ -1083,6 +1127,31 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference\n+     (Container : aliased Set;\n+      Position  : Cursor) return Constant_Reference_Type\n+   is\n+      S : Set renames Position.Container.all;\n+      N : Node_Type renames S.Nodes (Position.Node);\n+\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      return (Element => N.Element'Unrestricted_Access);\n+   end Constant_Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1476,6 +1545,14 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n    package body Generic_Keys is\n \n       -----------------------\n@@ -1731,6 +1808,29 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n          raise Program_Error with \"key was modified\";\n       end Update_Element_Preserving_Key;\n \n+      ------------------------------\n+      -- Reference_Preserving_Key --\n+      ------------------------------\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Position  : Cursor) return Reference_Type\n+      is\n+         N : Node_Type renames Container.Nodes (Position.Node);\n+      begin\n+         return (Element => N.Element'Unrestricted_Access);\n+      end Reference_Preserving_Key;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key  : Key_Type) return Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+         N : Node_Type renames Container.Nodes (Position.Node);\n+      begin\n+         return (Element => N.Element'Unrestricted_Access);\n+      end Reference_Preserving_Key;\n+\n    end Generic_Keys;\n \n end Ada.Containers.Bounded_Hashed_Sets;"}, {"sha": "c72b8ab8597280bad20a0f54a119c47c931155d4", "filename": "gcc/ada/a-cbhase.ads", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -31,6 +31,7 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n \n@@ -48,7 +49,11 @@ package Ada.Containers.Bounded_Hashed_Sets is\n    pragma Pure;\n    pragma Remote_Types;\n \n-   type Set (Capacity : Count_Type; Modulus : Hash_Type) is tagged private;\n+   type Set (Capacity : Count_Type; Modulus : Hash_Type) is tagged private\n+     with Constant_Indexing => Constant_Reference,\n+          Default_Iterator  => Iterate,\n+          Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Set);\n \n    type Cursor is private;\n@@ -62,6 +67,12 @@ package Ada.Containers.Bounded_Hashed_Sets is\n    --  Cursor objects declared without an initialization expression are\n    --  initialized to the value No_Element.\n \n+   function Has_Element (Position : Cursor) return Boolean;\n+   --  Equivalent to Position /= No_Element\n+\n+   package Set_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n    function \"=\" (Left, Right : Set) return Boolean;\n    --  For each element in Left, set equality attempts to find the equal\n    --  element in Right; if a search fails, then set equality immediately\n@@ -129,7 +140,16 @@ package Ada.Containers.Bounded_Hashed_Sets is\n      (Position : Cursor;\n       Process  : not null access procedure (Element : Element_Type));\n    --  Calls Process with the element (having only a constant view) of the node\n-   --  designed by the cursor.\n+   --  designated by the cursor.\n+\n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is private\n+        with Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : aliased Set;\n+      Position  : Cursor)\n+   return Constant_Reference_Type;\n \n    procedure Assign (Target : in out Set; Source : Set);\n    --  If Target denotes the same object as Source, then the operation has no\n@@ -314,9 +334,6 @@ package Ada.Containers.Bounded_Hashed_Sets is\n    function Contains (Container : Set; Item : Element_Type) return Boolean;\n    --  Equivalent to Find (Container, Item) /= No_Element\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-   --  Equivalent to Position /= No_Element\n-\n    function Equivalent_Elements (Left, Right : Cursor) return Boolean;\n    --  Returns the result of calling Equivalent_Elements with the elements of\n    --  the nodes designated by cursors Left and Right.\n@@ -338,6 +355,9 @@ package Ada.Containers.Bounded_Hashed_Sets is\n       Process   : not null access procedure (Position : Cursor));\n    --  Calls Process for each node in the set\n \n+   function Iterate (Container : Set)\n+     return Set_Iterator_Interfaces.Forward_Iterator'Class;\n+\n    generic\n       type Key_Type (<>) is private;\n \n@@ -406,6 +426,23 @@ package Ada.Containers.Bounded_Hashed_Sets is\n       --  completes. Otherwise, the node is removed from the map and\n       --  Program_Error is raised.\n \n+      type Reference_Type (Element : not null access Element_Type) is private\n+        with Implicit_Dereference => Element;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Position  : Cursor)\n+      return Reference_Type;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key  : Key_Type)\n+      return Reference_Type;\n+\n+   private\n+      type Reference_Type (Element : not null access Element_Type)\n+         is null record;\n+\n    end Generic_Keys;\n \n private\n@@ -466,6 +503,21 @@ private\n \n    for Set'Read use Read;\n \n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n    Empty_Set : constant Set :=\n      (Hash_Table_Type with Capacity => 0, Modulus => 0);\n "}, {"sha": "1974c6cccef0515f08d3cb309462428edc388a70", "filename": "gcc/ada/a-cborse.adb", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.adb?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -42,6 +42,24 @@ with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Ordered_Sets is\n \n+   type Iterator is new\n+     Ordered_Set_Iterator_Interfaces.Reversible_Iterator with record\n+        Container : access constant Set;\n+        Node      : Count_Type;\n+     end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+\n+   overriding function Last (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n+   overriding function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    ------------------------------\n    -- Access to Fields of Node --\n    ------------------------------\n@@ -598,6 +616,18 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       return Cursor'(Container'Unrestricted_Access, Container.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+   begin\n+      if Object.Container.First = 0 then\n+         return No_Element;\n+      else\n+         return\n+           Cursor'(\n+             Object.Container.all'Unrestricted_Access,\n+             Object.Container.First);\n+      end if;\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -891,6 +921,53 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n          raise Program_Error with \"key was modified\";\n       end Update_Element_Preserving_Key;\n \n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Constant_Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+\n+      begin\n+         if Position.Node = 0 then\n+            raise Constraint_Error with \"Position cursor has no element\";\n+         end if;\n+\n+         return\n+           (Element =>\n+              Container.Nodes (Position.Node).Element'Unrestricted_Access);\n+      end Reference_Preserving_Key;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+\n+      begin\n+         if Position.Node = 0 then\n+            raise Constraint_Error with \"Position cursor has no element\";\n+         end if;\n+\n+         return\n+           (Element =>\n+              Container.Nodes (Position.Node).Element'Unrestricted_Access);\n+      end Reference_Preserving_Key;\n+\n+      procedure  Read\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : out Reference_Type)\n+      is\n+      begin\n+         raise Program_Error with \"attempt to stream reference\";\n+      end Read;\n+\n+      procedure Write\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : Reference_Type)\n+      is\n+      begin\n+         raise Program_Error with \"attempt to stream reference\";\n+      end Write;\n    end Generic_Keys;\n \n    -----------------\n@@ -1185,6 +1262,25 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Set)\n+     return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+   begin\n+      if Container.Length = 0 then\n+         return Iterator'(null, 0);\n+      else\n+         return Iterator'(Container'Unchecked_Access, Container.First);\n+      end if;\n+   end Iterate;\n+\n+   function Iterate (Container : Set; Start : Cursor)\n+     return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unchecked_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -1198,6 +1294,17 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       return Cursor'(Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+   begin\n+      if Object.Container.Last = 0 then\n+         return No_Element;\n+      else\n+         return Cursor'(\n+           Object.Container.all'Unrestricted_Access,\n+                        Object.Container.Last);\n+      end if;\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -1279,6 +1386,13 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       Position := Next (Position);\n    end Next;\n \n+   function Next (Object : Iterator; Position : Cursor) return Cursor is\n+      pragma Unreferenced (Object);\n+\n+   begin\n+      return Next (Position);\n+   end Next;\n+\n    -------------\n    -- Overlap --\n    -------------\n@@ -1328,6 +1442,12 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       Position := Previous (Position);\n    end Previous;\n \n+   function Previous (Object : Iterator; Position : Cursor) return Cursor is\n+      pragma Unreferenced (Object);\n+   begin\n+      return Previous (Position);\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1408,6 +1528,30 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : Set; Position : Cursor)\n+   return Constant_Reference_Type\n+   is\n+   begin\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element =>\n+        Container.Nodes (Position.Node).Element'Unrestricted_Access);\n+   end Constant_Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1716,4 +1860,12 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Bounded_Ordered_Sets;"}, {"sha": "0c8ae6b17038aada6e11d9bbdea811bc66c35689", "filename": "gcc/ada/a-cborse.ads", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -31,8 +31,9 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n \n generic\n    type Element_Type is private;\n@@ -46,7 +47,11 @@ package Ada.Containers.Bounded_Ordered_Sets is\n \n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean;\n \n-   type Set (Capacity : Count_Type) is tagged private;\n+   type Set (Capacity : Count_Type) is tagged private\n+   with Constant_Indexing => Constant_Reference,\n+        Default_Iterator  => Iterate,\n+        Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Set);\n \n    type Cursor is private;\n@@ -55,6 +60,20 @@ package Ada.Containers.Bounded_Ordered_Sets is\n    Empty_Set : constant Set;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package Ordered_Set_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : Set; Position : Cursor)\n+   return Constant_Reference_Type;\n \n    function \"=\" (Left, Right : Set) return Boolean;\n \n@@ -171,8 +190,6 @@ package Ada.Containers.Bounded_Ordered_Sets is\n \n    function Contains (Container : Set; Item : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    function \"<\" (Left, Right : Cursor) return Boolean;\n \n    function \">\" (Left, Right : Cursor) return Boolean;\n@@ -193,6 +210,15 @@ package Ada.Containers.Bounded_Ordered_Sets is\n      (Container : Set;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate\n+     (Container : Set)\n+      return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   function Iterate\n+     (Container : Set;\n+      Start     : Cursor)\n+      return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    generic\n       type Key_Type (<>) is private;\n \n@@ -231,6 +257,34 @@ package Ada.Containers.Bounded_Ordered_Sets is\n          Process   : not null access\n                        procedure (Element : in out Element_Type));\n \n+      type Reference_Type (Element : not null access Element_Type) is private\n+      with\n+         Implicit_Dereference => Element;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Constant_Reference_Type;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type;\n+\n+   private\n+      type Reference_Type\n+         (Element : not null access Element_Type) is null record;\n+\n+      procedure Read\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : out Reference_Type);\n+\n+      for Reference_Type'Read use Read;\n+\n+      procedure Write\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : Reference_Type);\n+\n+      for Reference_Type'Write use Write;\n+\n    end Generic_Keys;\n \n private\n@@ -267,7 +321,6 @@ private\n    end record;\n \n    use Tree_Types;\n-   use Ada.Streams;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -295,6 +348,21 @@ private\n \n    for Set'Read use Read;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n    Empty_Set : constant Set := Set'(Tree_Type with Capacity => 0);\n \n end Ada.Containers.Bounded_Ordered_Sets;"}, {"sha": "dd43229b5e21a87dbbc80528da9f85d8f8fc00c6", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,6 +41,17 @@ with System;  use type System.Address;\n \n package body Ada.Containers.Indefinite_Hashed_Sets is\n \n+   type Iterator is new Set_Iterator_Interfaces.Forward_Iterator with record\n+      Container : Set_Access;\n+      Position  : Cursor;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -602,6 +613,16 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       return Cursor'(Container'Unrestricted_Access, Node);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      Node : constant Node_Access := HT_Ops.First (Object.Container.HT);\n+   begin\n+      if Node = null then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container, Node);\n+   end First;\n+\n    ----------\n    -- Free --\n    ----------\n@@ -956,6 +977,12 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Set)\n+     return Set_Iterator_Interfaces.Forward_Iterator'Class is\n+   begin\n+      return Iterator'(Container'Unrestricted_Access, First (Container));\n+   end Iterate;\n+\n    ------------\n    -- Length --\n    ------------\n@@ -1013,6 +1040,23 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       Position := Next (Position);\n    end Next;\n \n+   function Next\n+     (Object : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor designates wrong set\";\n+      end if;\n+\n+      if Position.Node = null then\n+         return No_Element;\n+      end if;\n+\n+      return Next (Position);\n+   end Next;\n+\n    -------------\n    -- Overlap --\n    -------------\n@@ -1106,6 +1150,14 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n    ---------------\n    -- Read_Node --\n    ---------------\n@@ -1123,6 +1175,20 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          raise;\n    end Read_Node;\n \n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference\n+     (Container : aliased Set;\n+      Position  : Cursor) return Constant_Reference_Type\n+   is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      return (Element => Position.Node.Element);\n+   end Constant_Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1746,6 +1812,14 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n    ----------------\n    -- Write_Node --\n    ----------------\n@@ -2017,6 +2091,28 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          raise Program_Error with \"key was modified\";\n       end Update_Element_Preserving_Key;\n \n+      ------------------------------\n+      -- Reference_Preserving_Key --\n+      ------------------------------\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Position  : Cursor) return Reference_Type\n+      is\n+         pragma Unreferenced (Container);\n+      begin\n+         return (Element => Position.Node.Element);\n+      end Reference_Preserving_Key;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key  : Key_Type) return Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+      begin\n+         return (Element => Position.Node.Element);\n+      end Reference_Preserving_Key;\n+\n    end Generic_Keys;\n \n end Ada.Containers.Indefinite_Hashed_Sets;"}, {"sha": "b055c1be1534b9d6bbb3257666257885bc9035cf", "filename": "gcc/ada/a-cihase.ads", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,6 +31,7 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n private with Ada.Finalization;\n@@ -49,7 +50,11 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n    pragma Preelaborate;\n    pragma Remote_Types;\n \n-   type Set is tagged private;\n+   type Set is tagged private\n+     with Constant_Indexing => Constant_Reference,\n+          Default_Iterator  => Iterate,\n+          Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Set);\n \n    type Cursor is private;\n@@ -63,6 +68,12 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n    --  Cursor objects declared without an initialization expression are\n    --  initialized to the value No_Element.\n \n+   function Has_Element (Position : Cursor) return Boolean;\n+   --  Equivalent to Position /= No_Element\n+\n+   package Set_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n    function \"=\" (Left, Right : Set) return Boolean;\n    --  For each element in Left, set equality attempts to find the equal\n    --  element in Right; if a search fails, then set equality immediately\n@@ -131,7 +142,16 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n      (Position : Cursor;\n       Process  : not null access procedure (Element : Element_Type));\n    --  Calls Process with the element (having only a constant view) of the node\n-   --  designed by the cursor.\n+   --  designated by the cursor.\n+\n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is private\n+        with Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : aliased Set;\n+      Position  : Cursor)\n+   return Constant_Reference_Type;\n \n    procedure Move (Target : in out Set; Source : in out Set);\n    --  Clears Target (if it's not empty), and then moves (not copies) the\n@@ -297,9 +317,6 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n    function Contains (Container : Set; Item : Element_Type) return Boolean;\n    --  Equivalent to Find (Container, Item) /= No_Element\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-   --  Equivalent to Position /= No_Element\n-\n    function Equivalent_Elements (Left, Right : Cursor) return Boolean;\n    --  Returns the result of calling Equivalent_Elements with the elements of\n    --  the nodes designated by cursors Left and Right.\n@@ -321,6 +338,9 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n       Process   : not null access procedure (Position : Cursor));\n    --  Calls Process for each node in the set\n \n+   function Iterate (Container : Set)\n+     return Set_Iterator_Interfaces.Forward_Iterator'Class;\n+\n    generic\n       type Key_Type (<>) is private;\n \n@@ -389,6 +409,22 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n       --  completes. Otherwise, the node is removed from the map and\n       --  Program_Error is raised.\n \n+      type Reference_Type (Element : not null access Element_Type) is private\n+        with Implicit_Dereference => Element;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Position  : Cursor)\n+      return Reference_Type;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key  : Key_Type)\n+      return Reference_Type;\n+\n+   private\n+      type Reference_Type (Element : not null access Element_Type)\n+         is null record;\n    end Generic_Keys;\n \n private\n@@ -454,6 +490,21 @@ private\n \n    for Set'Read use Read;\n \n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n    Empty_Set : constant Set := (Controlled with HT => (null, 0, 0, 0));\n \n end Ada.Containers.Indefinite_Hashed_Sets;"}, {"sha": "c30abd08046f078a81f696866c3873c62ad8eacb", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 139, "deletions": 1, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,24 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n package body Ada.Containers.Indefinite_Ordered_Maps is\n \n+   type Iterator is new\n+     Map_Iterator_Interfaces.Reversible_Iterator with record\n+        Container : Map_Access;\n+        Node      : Node_Access;\n+     end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+\n+   overriding function Last (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n+   overriding function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------------\n    -- Node Access Subprograms --\n    -----------------------------\n@@ -305,6 +323,17 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       return Node.Color;\n    end Color;\n \n+   ------------------------\n+   -- Constant_Reference --\n+   ------------------------\n+\n+   function Constant_Reference\n+     (Container : Map;\n+      Key       : Key_Type) return Constant_Reference_Type\n+   is\n+   begin return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n    --------------\n    -- Contains --\n    --------------\n@@ -503,6 +532,18 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       return Cursor'(Container'Unrestricted_Access, T.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      M : constant Map_Access  := Object.Container;\n+      N : constant Node_Access := M.Tree.First;\n+\n+   begin\n+      if N = null then\n+         return No_Element;\n+      else\n+         return Cursor'(Object.Container.all'Unchecked_Access, N);\n+      end if;\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -810,6 +851,24 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n+   is\n+      Node : constant Node_Access := Container.Tree.First;\n+      It   : constant Iterator := (Container'Unrestricted_Access, Node);\n+\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : Map; Start : Cursor)\n+      return Map_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unrestricted_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ---------\n    -- Key --\n    ---------\n@@ -847,6 +906,17 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       return Cursor'(Container'Unrestricted_Access, T.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+      M : constant Map_Access  := Object.Container;\n+      N : constant Node_Access := M.Tree.Last;\n+   begin\n+      if N = null then\n+         return No_Element;\n+      else\n+         return Cursor'(Object.Container.all'Unchecked_Access, N);\n+      end if;\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -941,6 +1011,18 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       Position := Next (Position);\n    end Next;\n \n+   function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Node = null then\n+         return No_Element;\n+      else\n+         return (Object.Container, Tree_Operations.Next (Position.Node));\n+      end if;\n+   end Next;\n+\n    ------------\n    -- Parent --\n    ------------\n@@ -984,6 +1066,18 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       Position := Previous (Position);\n    end Previous;\n \n+   function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Node = null then\n+         return No_Element;\n+      else\n+         return (Object.Container, Tree_Operations.Previous (Position.Node));\n+      end if;\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1084,6 +1178,35 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Reference\n+     (Container : Map;\n+      Key       : Key_Type)\n+      return Reference_Type\n+   is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1359,4 +1482,19 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n end Ada.Containers.Indefinite_Ordered_Maps;"}, {"sha": "b31dc0d2e256ae7d659f52cf43b3c37cdcc8122b", "filename": "gcc/ada/a-ciorma.ads", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,6 +31,7 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n@@ -48,7 +49,12 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n \n-   type Map is tagged private;\n+   type Map is tagged private\n+   with constant_Indexing => Constant_Reference,\n+        Variable_Indexing => Reference,\n+        Default_Iterator  => Iterate,\n+        Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Map);\n \n    type Cursor is private;\n@@ -57,6 +63,10 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n    Empty_Map : constant Map;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package Map_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    function \"=\" (Left, Right : Map) return Boolean;\n \n@@ -150,8 +160,6 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n \n    function Contains (Container : Map; Key : Key_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    function \"<\" (Left, Right : Cursor) return Boolean;\n \n    function \">\" (Left, Right : Cursor) return Boolean;\n@@ -164,6 +172,23 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n \n    function \">\" (Left : Key_Type; Right : Cursor) return Boolean;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : Map;\n+      Key       : Key_Type) return Constant_Reference_Type;\n+\n+   function Reference\n+     (Container : Map;\n+       Key      : Key_Type) return Reference_Type;\n+\n    procedure Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n@@ -172,6 +197,15 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate\n+     (Container : Map)\n+      return Map_Iterator_Interfaces.Forward_Iterator'class;\n+\n+   function Iterate\n+     (Container : Map;\n+      Start     : Cursor)\n+      return Map_Iterator_Interfaces.Reversible_Iterator'class;\n+\n private\n \n    pragma Inline (Next);\n@@ -243,6 +277,36 @@ private\n \n    for Map'Read use Read;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n    Empty_Map : constant Map :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,"}, {"sha": "a330ed8b6c5f082acb980b029421dad92f308d8f", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -926,6 +926,50 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n          raise Program_Error with \"key was modified\";\n       end Update_Element_Preserving_Key;\n \n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Constant_Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+\n+      begin\n+         if Position.Container = null then\n+            raise Constraint_Error with \"Position cursor has no element\";\n+         end if;\n+\n+         return (Element => Position.Node.Element);\n+      end Reference_Preserving_Key;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+\n+      begin\n+         if Position.Container = null then\n+            raise Constraint_Error with \"Position cursor has no element\";\n+         end if;\n+\n+         return (Element => Position.Node.Element);\n+      end Reference_Preserving_Key;\n+\n+      procedure Read\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : out Reference_Type)\n+      is\n+      begin\n+         raise Program_Error with \"attempt to stream reference\";\n+      end Read;\n+\n+      procedure Write\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : Reference_Type)\n+      is\n+      begin\n+         raise Program_Error with \"attempt to stream reference\";\n+      end Write;\n+\n    end Generic_Keys;\n \n    -----------------\n@@ -1498,14 +1542,6 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type)\n-   is\n-   begin\n-      raise Program_Error with \"attempt to stream reference\";\n-   end Read;\n-\n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : out Constant_Reference_Type)\n@@ -1530,18 +1566,6 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       return (Element => Position.Node.Element.all'Access);\n    end Constant_Reference;\n \n-   function Reference (Container : Set; Position : Cursor)\n-   return Reference_Type\n-   is\n-      pragma Unreferenced (Container);\n-   begin\n-      if Position.Container = null then\n-         raise Constraint_Error with \"Position cursor has no element\";\n-      end if;\n-\n-      return (Element => Position.Node.Element.all'Access);\n-   end Reference;\n-\n    -------------\n    -- Replace --\n    -------------\n@@ -1874,14 +1898,6 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type)\n-   is\n-   begin\n-      raise Program_Error with \"attempt to stream reference\";\n-   end Write;\n-\n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : Constant_Reference_Type)"}, {"sha": "f397f1d464e6f371ed1b176aee1e552472cb8ac3", "filename": "gcc/ada/a-ciorse.ads", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -50,7 +50,6 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n \n    type Set is tagged private with\n       Constant_Indexing => Constant_Reference,\n-      Variable_Indexing => Reference,\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type;\n \n@@ -73,6 +72,10 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n    private with\n       Implicit_Dereference => Element;\n \n+   function Constant_Reference\n+     (Container : Set;\n+      Position  : Cursor) return Constant_Reference_Type;\n+\n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : out Constant_Reference_Type);\n@@ -85,30 +88,6 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n \n    for Constant_Reference_Type'Write use Write;\n \n-   function Constant_Reference\n-     (Container : Set;\n-      Position  : Cursor) return Constant_Reference_Type;\n-\n-   type Reference_Type (Element : not null access Element_Type) is private\n-   with\n-      Implicit_Dereference => Element;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n-   function Reference\n-     (Container : Set; Position : Cursor)\n-   return Reference_Type;\n-\n    function \"=\" (Left, Right : Set) return Boolean;\n \n    function Equivalent_Sets (Left, Right : Set) return Boolean;\n@@ -212,13 +191,21 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n \n    procedure Previous (Position : in out Cursor);\n \n-   function Find (Container : Set; Item : Element_Type) return Cursor;\n+   function Find\n+     (Container : Set;\n+      Item      : Element_Type) return Cursor;\n \n-   function Floor (Container : Set; Item : Element_Type) return Cursor;\n+   function Floor\n+     (Container : Set;\n+      Item      : Element_Type) return Cursor;\n \n-   function Ceiling (Container : Set; Item : Element_Type) return Cursor;\n+   function Ceiling\n+     (Container : Set;\n+      Item      : Element_Type) return Cursor;\n \n-   function Contains (Container : Set; Item : Element_Type) return Boolean;\n+   function Contains\n+     (Container : Set;\n+      Item      : Element_Type) return Boolean;\n \n    function \"<\" (Left, Right : Cursor) return Boolean;\n \n@@ -295,10 +282,36 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n          Process   : not null access\n                        procedure (Element : in out Element_Type));\n \n+      type Reference_Type (Element : not null access Element_Type) is private\n+      with\n+         Implicit_Dereference => Element;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Constant_Reference_Type;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type;\n+\n+   private\n+      type Reference_Type\n+         (Element : not null access Element_Type) is null record;\n+\n+      procedure Write\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : Reference_Type);\n+\n+      for Reference_Type'Write use Write;\n+\n+      procedure Read\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : out Reference_Type);\n+\n+      for Reference_Type'Read use Read;\n    end Generic_Keys;\n \n private\n-\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n@@ -368,9 +381,6 @@ private\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n-\n    Empty_Set : constant Set :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,"}, {"sha": "6fd45b78253d14654d477225bf4011090f58b9cb", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -183,34 +183,10 @@ package Ada.Containers.Ordered_Maps is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n    function Constant_Reference\n      (Container : Map;\n       Key       : Key_Type)    --  SHOULD BE ALIASED???\n@@ -308,6 +284,30 @@ private\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n    Empty_Map : constant Map :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,"}, {"sha": "d52ed67c9a0f5d633236f17f9c2efba1e73e03a7", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -860,6 +860,50 @@ package body Ada.Containers.Ordered_Sets is\n          raise Program_Error with \"key was modified\";\n       end Update_Element_Preserving_Key;\n \n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Constant_Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+\n+      begin\n+         if Position.Container = null then\n+            raise Constraint_Error with \"Position cursor has no element\";\n+         end if;\n+\n+         return (Element => Position.Node.Element'Access);\n+      end Reference_Preserving_Key;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+\n+      begin\n+         if Position.Container = null then\n+            raise Constraint_Error with \"Position cursor has no element\";\n+         end if;\n+\n+         return (Element => Position.Node.Element'Access);\n+      end Reference_Preserving_Key;\n+\n+      procedure Read\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : out Reference_Type)\n+      is\n+      begin\n+         raise Program_Error with \"attempt to stream reference\";\n+      end Read;\n+\n+      procedure Write\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : Reference_Type)\n+      is\n+      begin\n+         raise Program_Error with \"attempt to stream reference\";\n+      end Write;\n+\n    end Generic_Keys;\n \n    -----------------\n@@ -1410,14 +1454,6 @@ package body Ada.Containers.Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type)\n-   is\n-   begin\n-      raise Program_Error with \"attempt to stream reference\";\n-   end Read;\n-\n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : out Constant_Reference_Type)\n@@ -1442,18 +1478,6 @@ package body Ada.Containers.Ordered_Sets is\n       return (Element => Position.Node.Element'Access);\n    end Constant_Reference;\n \n-   function Reference (Container : Set; Position : Cursor)\n-   return Reference_Type\n-   is\n-      pragma Unreferenced (Container);\n-   begin\n-      if Position.Container = null then\n-         raise Constraint_Error with \"Position cursor has no element\";\n-      end if;\n-\n-      return (Element => Position.Node.Element'Access);\n-   end Reference;\n-\n    -------------\n    -- Replace --\n    -------------\n@@ -1769,14 +1793,6 @@ package body Ada.Containers.Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type)\n-   is\n-   begin\n-      raise Program_Error with \"attempt to stream reference\";\n-   end Write;\n-\n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : Constant_Reference_Type)"}, {"sha": "8349ef85fb4b87b0383986552f0246f9ec57b62f", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -50,11 +50,9 @@ package Ada.Containers.Ordered_Sets is\n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean;\n \n    type Set is tagged private\n-   with\n-     Constant_Indexing => Constant_Reference,\n-     Variable_Indexing => Reference,\n-     Default_Iterator  => Iterate,\n-     Iterator_Element  => Element_Type;\n+   with Constant_Indexing => Constant_Reference,\n+        Default_Iterator  => Iterate,\n+        Iterator_Element  => Element_Type;\n \n    pragma Preelaborable_Initialization (Set);\n \n@@ -67,18 +65,6 @@ package Ada.Containers.Ordered_Sets is\n \n    No_Element : constant Cursor;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Cursor);\n-\n-   for Cursor'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Cursor);\n-\n-   for Cursor'Read use Read;\n-\n    package Ordered_Set_Iterator_Interfaces is new\n      Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n@@ -104,26 +90,6 @@ package Ada.Containers.Ordered_Sets is\n \n    for Constant_Reference_Type'Read use Read;\n \n-   type Reference_Type (Element : not null access Element_Type) is private\n-   with\n-      Implicit_Dereference => Element;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n-   function Reference\n-     (Container : Set; Position : Cursor)\n-   return Reference_Type;\n-\n    function \"=\" (Left, Right : Set) return Boolean;\n \n    function Equivalent_Sets (Left, Right : Set) return Boolean;\n@@ -302,6 +268,33 @@ package Ada.Containers.Ordered_Sets is\n          Process   : not null access\n                        procedure (Element : in out Element_Type));\n \n+      type Reference_Type (Element : not null access Element_Type) is private\n+      with\n+         Implicit_Dereference => Element;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Constant_Reference_Type;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type;\n+\n+   private\n+      type Reference_Type\n+         (Element : not null access Element_Type) is null record;\n+\n+      procedure Write\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : Reference_Type);\n+\n+      for Reference_Type'Write use Write;\n+\n+      procedure Read\n+        (Stream : not null access Root_Stream_Type'Class;\n+         Item   : out Reference_Type);\n+\n+      for Reference_Type'Read use Read;\n    end Generic_Keys;\n \n private\n@@ -343,6 +336,18 @@ private\n       Node      : Node_Access;\n    end record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n    No_Element : constant Cursor := Cursor'(null, null);\n \n    procedure Write\n@@ -360,9 +365,6 @@ private\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n-\n    Empty_Set : constant Set :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,"}, {"sha": "93d914fd855e8a832c174906bf962d405da244c5", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -817,10 +817,11 @@ package Einfo is\n --       Present in access types. This field points to the type that is\n --       directly designated by the access type. In the case of an access\n --       type to an incomplete type, this field references the incomplete\n---       type. Note that in the semantic processing, what is useful in\n---       nearly all cases is the full type designated by the access type.\n---       The function Designated_Type obtains this full type in the case of\n---       access to an incomplete type.\n+--       type. Directly_Designated_Type is typically used in implementing the\n+--       static semantics of the language; in implementing dynamic semantics,\n+--       we typically want the full view of the designated type. The function\n+--       Designated_Type obtains this full type in the case of access to an\n+--       incomplete type.\n \n --    Discard_Names (Flag88)\n --       Present in types and exception entities. Set if pragma Discard_Names"}, {"sha": "9f25fc26d92b8d04f82a3234e569a1eaef6005b8", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -1811,20 +1811,19 @@ ada/exp_aggr.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n ada/exp_alfa.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n    ada/atree.adb ada/casing.ads ada/debug.ads ada/einfo.ads ada/einfo.adb \\\n-   ada/exp_alfa.ads ada/exp_alfa.adb ada/exp_attr.ads ada/exp_ch6.ads \\\n-   ada/exp_dbug.ads ada/gnat.ads ada/g-htable.ads ada/hostparm.ads \\\n-   ada/interfac.ads ada/namet.ads ada/namet.adb ada/nlists.ads \\\n-   ada/nlists.adb ada/opt.ads ada/output.ads ada/rtsfind.ads \\\n-   ada/sem_aux.ads ada/sem_aux.adb ada/sem_res.ads ada/sinfo.ads \\\n-   ada/sinfo.adb ada/sinput.ads ada/snames.ads ada/stand.ads \\\n+   ada/exp_alfa.ads ada/exp_alfa.adb ada/exp_attr.ads ada/exp_ch4.ads \\\n+   ada/exp_ch6.ads ada/exp_dbug.ads ada/gnat.ads ada/g-htable.ads \\\n+   ada/hostparm.ads ada/interfac.ads ada/namet.ads ada/namet.adb \\\n+   ada/nlists.ads ada/nlists.adb ada/opt.ads ada/output.ads \\\n+   ada/rtsfind.ads ada/sem_aux.ads ada/sem_aux.adb ada/sem_res.ads \\\n+   ada/sinfo.ads ada/sinfo.adb ada/sinput.ads ada/snames.ads ada/stand.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-secsta.ads \\\n    ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n    ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n    ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tbuild.ads \\\n    ada/tree_io.ads ada/types.ads ada/uintp.ads ada/uintp.adb \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \\\n-   ada/exp_ch4.ads\n+   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/exp_atag.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\"}, {"sha": "c463cd6743626cc5a5577d9e3d7be2cd971c3d56", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 23, "deletions": 52, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb35bbf33cbdac32aa3147cccbbc73076eba66d/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=ffb35bbf33cbdac32aa3147cccbbc73076eba66d", "patch": "@@ -597,7 +597,6 @@ ifeq ($(strip $(filter-out powerpc% e500v2 wrs vxworksae,$(targ))),)\n   a-intnam.ads<a-intnam-vxworks.ads \\\n   a-numaux.ads<a-numaux-vxworks.ads \\\n   g-io.adb<g-io-vxworks-ppc-cert.adb \\\n-  g-io.ads<g-io-vxworks-ppc-cert.ads \\\n   s-inmaop.adb<s-inmaop-vxworks.adb \\\n   s-interr.adb<s-interr-hwint.adb \\\n   s-intman.ads<s-intman-vxworks.ads \\\n@@ -660,7 +659,6 @@ ifeq ($(strip $(filter-out e500% powerpc% wrs vxworksmils,$(targ))),)\n   a-intnam.ads<a-intnam-vxworks.ads \\\n   a-numaux.ads<a-numaux-vxworks.ads \\\n   g-io.adb<g-io-vxworks-ppc-cert.adb \\\n-  g-io.ads<g-io-vxworks-ppc-cert.ads \\\n   s-inmaop.adb<s-inmaop-vxworks.adb \\\n   s-interr.adb<s-interr-hwint.adb \\\n   s-intman.ads<s-intman-vxworks.ads \\\n@@ -715,7 +713,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae vxworksmils,$(targ))),)\n   a-sytaco.ads<1asytaco.ads \\\n   a-sytaco.adb<1asytaco.adb \\\n   g-io.adb<g-io-vxworks-ppc-cert.adb \\\n-  g-io.ads<g-io-vxworks-ppc-cert.ads \\\n   s-inmaop.adb<s-inmaop-vxworks.adb \\\n   s-interr.adb<s-interr-hwint.adb \\\n   s-intman.ads<s-intman-vxworks.ads \\\n@@ -1115,62 +1112,36 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n   s-intman.adb<s-intman-posix.adb \\\n   s-tpopsp.adb<s-tpopsp-tls.adb \\\n   g-sercom.adb<g-sercom-linux.adb \\\n+  a-exetim.adb<a-exetim-posix.adb \\\n+  a-exetim.ads<a-exetim-default.ads \\\n+  s-linux.ads<s-linux.ads \\\n+  s-osinte.adb<s-osinte-posix.adb \\\n+  system.ads<system-linux-x86.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(X86_TARGET_PAIRS)\n \n-  ifeq ($(strip $(filter-out marte,$(THREAD_KIND))),)\n+  ifeq ($(strip $(filter-out xenomai,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n-    a-exetim.adb<a-exetim-linux-marte.adb \\\n-    a-exetim.ads<a-exetim-linux-marte.ads \\\n-    a-extiti.adb<a-extiti-linux-marte.adb \\\n-    a-extiti.ads<a-extiti-linux-marte.ads \\\n-    a-rttiev.adb<a-rttiev-linux-marte.adb \\\n-    a-rttiev.ads<a-rttiev-linux-marte.ads \\\n-    s-osinte.adb<s-osinte-linux-marte.adb \\\n-    s-osinte.ads<s-osinte-linux-marte.ads \\\n-    s-osprim.adb<s-osprim-posix.adb \\\n-    s-taprop.adb<s-taprop-linux-marte.adb \\\n-    s-taspri.ads<s-taspri-posix.ads \\\n-    system.ads<system-linux-x86.ads\n-\n-    EXTRA_GNATRTL_TASKING_OBJS=a-exetim.o a-extiti.o\n-\n-    EH_MECHANISM=\n-    THREADSLIB = -lmarte\n+    s-osinte.ads<s-osinte-linux-xenomai.ads \\\n+    s-osprim.adb<s-osprim-linux-xenomai.adb \\\n+    s-taprop.adb<s-taprop-linux-xenomai.adb \\\n+    s-taspri.ads<s-taspri-linux-xenomai.ads\n   else\n     LIBGNAT_TARGET_PAIRS += \\\n-    a-exetim.adb<a-exetim-posix.adb \\\n-    a-exetim.ads<a-exetim-default.ads \\\n-    s-linux.ads<s-linux.ads \\\n-    s-osinte.adb<s-osinte-posix.adb \\\n-    system.ads<system-linux-x86.ads\n-\n-    ifeq ($(strip $(filter-out xenomai,$(THREAD_KIND))),)\n-      LIBGNAT_TARGET_PAIRS += \\\n-      s-osinte.ads<s-osinte-linux-xenomai.ads \\\n-      s-osprim.adb<s-osprim-linux-xenomai.adb \\\n-      s-taprop.adb<s-taprop-linux-xenomai.adb \\\n-      s-taspri.ads<s-taspri-linux-xenomai.ads\n-\n-      EH_MECHANISM=-gcc\n-    else\n-      LIBGNAT_TARGET_PAIRS += \\\n-      s-mudido.adb<s-mudido-affinity.adb \\\n-      s-osinte.ads<s-osinte-linux.ads \\\n-      s-osprim.adb<s-osprim-posix.adb \\\n-      s-taprop.adb<s-taprop-linux.adb \\\n-      s-tasinf.ads<s-tasinf-linux.ads \\\n-      s-tasinf.adb<s-tasinf-linux.adb \\\n-      s-taspri.ads<s-taspri-posix.ads\n-\n-      EH_MECHANISM=-gcc\n-    endif\n-\n-    THREADSLIB = -lpthread -lrt\n-    EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n-    EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n+    s-mudido.adb<s-mudido-affinity.adb \\\n+    s-osinte.ads<s-osinte-linux.ads \\\n+    s-osprim.adb<s-osprim-posix.adb \\\n+    s-taprop.adb<s-taprop-linux.adb \\\n+    s-tasinf.ads<s-tasinf-linux.ads \\\n+    s-tasinf.adb<s-tasinf-linux.adb \\\n+    s-taspri.ads<s-taspri-posix.ads\n   endif\n \n+  EH_MECHANISM=-gcc\n+  THREADSLIB = -lpthread -lrt\n+  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n+  EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n+\n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-gnu.adb\n@@ -2019,7 +1990,7 @@ ifeq ($(strip $(filter-out sh4% linux%,$(arch) $(osys))),)\n   TOOLS_TARGET_PAIRS =  \\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-linux.adb\n- \n+\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n   MISCLIB="}]}