{"sha": "bb5b1f5e7379c42894fb935ec746ca67caf8521d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1YjFmNWU3Mzc5YzQyODk0ZmI5MzVlYzc0NmNhNjdjYWY4NTIxZA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-06-07T19:13:09Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-06-07T19:13:09Z"}, "message": "Handle assembler name in -fdisable/enable options\n\nFrom-SVN: r174762", "tree": {"sha": "0fa4c4cb7061c4b26e6128889af84800322a3785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fa4c4cb7061c4b26e6128889af84800322a3785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb5b1f5e7379c42894fb935ec746ca67caf8521d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5b1f5e7379c42894fb935ec746ca67caf8521d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5b1f5e7379c42894fb935ec746ca67caf8521d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5b1f5e7379c42894fb935ec746ca67caf8521d/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91ffe356293c90378b8deb7e82262ade077f29dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ffe356293c90378b8deb7e82262ade077f29dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ffe356293c90378b8deb7e82262ade077f29dc"}], "stats": {"total": 317, "additions": 297, "deletions": 20}, "files": [{"sha": "98bda5ce8730b58912c64a0b87dd621bbae96991", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,3 +1,7 @@\n+2011-06-07  Xinliang David Li  <davidxl@google.com>\n+\t* passes.c (enable_disable_pass): Handle assembler name.\n+\t(is_pass_explicitly_enabled_or_disabled): Ditto.\n+\n 2011-06-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR tree-optimization/48497"}, {"sha": "5f4c66a1dc161ce7c59327de466fa0542a082c04", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -5065,11 +5065,12 @@ appended with a sequential number starting from 1.\n Disable rtl pass @var{pass}.  @var{pass} is the pass name.  If the same pass is\n statically invoked in the compiler multiple times, the pass name should be\n appended with a sequential number starting from 1.  @var{range-list} is a comma\n-seperated list of function ranges.  Each range is a number pair seperated by a colon.\n-The range is inclusive in both ends.  If the range is trivial, the number pair can be\n-simplified a a single number.  If the function's cgraph node's @var{uid} is falling\n-within one of the specified ranges, the @var{pass} is disabled for that function.\n-The @var{uid} is shown in the function header of a dump file.\n+seperated list of function ranges or assembler names.  Each range is a number\n+pair seperated by a colon.  The range is inclusive in both ends.  If the range\n+is trivial, the number pair can be simplified as a single number.  If the\n+function's cgraph node's @var{uid} is falling within one of the specified ranges,\n+the @var{pass} is disabled for that function.  The @var{uid} is shown in the\n+function header of a dump file.\n \n @item -fdisable-tree-@var{pass}\n @item -fdisable-tree-@var{pass}=@var{range-list}\n@@ -5099,7 +5100,8 @@ of option arguments.\n    -fenable-tree-cunroll=1\n # disable gcse2 for functions at the following ranges [1,1],\n # [300,400], and [400,1000]\n-   -fdisable-rtl-gcse2=1:100,300,400:1000\n+# disable gcse2 for functions foo and foo2\n+   -fdisable-rtl-gcse2=foo,foo2\n # disable early inlining\n    -fdisable-tree-einline\n # disable ipa inlining"}, {"sha": "f06a67c4d90d6a6f0cc60279e37e13c2ae30a40d", "filename": "gcc/passes.c", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -531,6 +531,7 @@ struct uid_range\n {\n   unsigned int start;\n   unsigned int last;\n+  const char *assem_name;\n   struct uid_range *next;\n };\n \n@@ -542,6 +543,7 @@ DEF_VEC_ALLOC_P(uid_range_p, heap);\n static VEC(uid_range_p, heap) *enabled_pass_uid_range_tab = NULL;\n static VEC(uid_range_p, heap) *disabled_pass_uid_range_tab = NULL;\n \n+\n /* Parse option string for -fdisable- and -fenable-\n    The syntax of the options:\n \n@@ -628,6 +630,7 @@ enable_disable_pass (const char *arg, bool is_enable)\n \t  uid_range_p new_range;\n \t  char *invalid = NULL;\n \t  long start;\n+\t  char *func_name = NULL;\n \n \t  next_range = strchr (one_range, ',');\n \t  if (next_range)\n@@ -645,17 +648,31 @@ enable_disable_pass (const char *arg, bool is_enable)\n \t  start = strtol (one_range, &invalid, 10);\n \t  if (*invalid || start < 0)\n \t    {\n-\t      error (\"Invalid range %s in option %s\",\n-\t\t     one_range,\n-\t\t     is_enable ? \"-fenable\" : \"-fdisable\");\n-\t      free (argstr);\n-\t      return;\n+              if (end_val || (one_range[0] >= '0'\n+\t\t\t      && one_range[0] <= '9'))\n+                {\n+                  error (\"Invalid range %s in option %s\",\n+                         one_range,\n+                         is_enable ? \"-fenable\" : \"-fdisable\");\n+                  free (argstr);\n+                  return;\n+                }\n+\t      func_name = one_range;\n \t    }\n \t  if (!end_val)\n \t    {\n \t      new_range = XCNEW (struct uid_range);\n-\t      new_range->start = (unsigned) start;\n-\t      new_range->last = (unsigned) start;\n+              if (!func_name)\n+                {\n+                  new_range->start = (unsigned) start;\n+                  new_range->last = (unsigned) start;\n+                }\n+              else\n+                {\n+                  new_range->start = (unsigned) -1;\n+                  new_range->last = (unsigned) -1;\n+                  new_range->assem_name = xstrdup (func_name);\n+                }\n \t    }\n \t  else\n \t    {\n@@ -677,15 +694,28 @@ enable_disable_pass (const char *arg, bool is_enable)\n           new_range->next = slot;\n           VEC_replace (uid_range_p, *tab, pass->static_pass_number,\n                        new_range);\n-\n           if (is_enable)\n-            inform (UNKNOWN_LOCATION,\n-                    \"enable pass %s for functions in the range of [%u, %u]\",\n-                    phase_name, new_range->start, new_range->last);\n+            {\n+              if (new_range->assem_name)\n+                inform (UNKNOWN_LOCATION,\n+                        \"enable pass %s for function %s\",\n+                        phase_name, new_range->assem_name);\n+              else\n+                inform (UNKNOWN_LOCATION,\n+                        \"enable pass %s for functions in the range of [%u, %u]\",\n+                        phase_name, new_range->start, new_range->last);\n+            }\n           else\n-            inform (UNKNOWN_LOCATION,\n-                    \"disable pass %s for functions in the range of [%u, %u]\",\n-                    phase_name, new_range->start, new_range->last);\n+            {\n+              if (new_range->assem_name)\n+                inform (UNKNOWN_LOCATION,\n+                        \"disable pass %s for function %s\",\n+                        phase_name, new_range->assem_name);\n+              else\n+                inform (UNKNOWN_LOCATION,\n+                        \"disable pass %s for functions in the range of [%u, %u]\",\n+                        phase_name, new_range->start, new_range->last);\n+            }\n \n \t  one_range = next_range;\n \t} while (next_range);\n@@ -719,6 +749,7 @@ is_pass_explicitly_enabled_or_disabled (struct opt_pass *pass,\n {\n   uid_range_p slot, range;\n   int cgraph_uid;\n+  const char *aname = NULL;\n \n   if (!tab\n       || (unsigned) pass->static_pass_number >= VEC_length (uid_range_p, tab)\n@@ -730,13 +761,18 @@ is_pass_explicitly_enabled_or_disabled (struct opt_pass *pass,\n     return false;\n \n   cgraph_uid = func ? cgraph_get_node (func)->uid : 0;\n+  if (func && DECL_ASSEMBLER_NAME_SET_P (func))\n+    aname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (func));\n \n   range = slot;\n   while (range)\n     {\n       if ((unsigned) cgraph_uid >= range->start\n \t  && (unsigned) cgraph_uid <= range->last)\n \treturn true;\n+      if (range->assem_name && aname\n+          && !strcmp (range->assem_name, aname))\n+        return true;\n       range = range->next;\n     }\n "}, {"sha": "ba89a31f9a8aa620942613fcf20fd3454c52ebec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,3 +1,14 @@\n+2011-06-07  Xinliang David Li  <davidxl@google.com>\n+\n+\t* testsuite/gcc.dg/inline_2.c: New test.\n+\t* testsuite/gcc.dg/unroll_2.c: New test.\n+\t* testsuite/gcc.dg/inline_3.c: New test.\n+\t* testsuite/gcc.dg/unroll_3.c: New test.\n+\t* testsuite/gcc.dg/inline_4.c: New test.\n+\t* testsuite/gcc.dg/unroll_4.c: New test.\n+\t* testsuite/gcc.dg/inline_1.c: New test.\n+\t* testsuite/gcc.dg/unroll_1.c: New test.\n+\n 2011-06-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tgcc/testsuite:"}, {"sha": "08ccb86f612a19f3ae10c33d2a0fdd1f5e0d3893", "filename": "gcc/testsuite/gcc.dg/inline_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline_1.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdisable-tree-einline -fdisable-ipa-inline\" } */\n+int g;\n+__attribute__((always_inline)) void bar (void)\n+{\n+  g++;\n+}\n+\n+int foo (void)\n+{\n+  bar ();\n+  return g;\n+}\n+\n+int foo2 (void)\n+{\n+  bar();\n+  return g + 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"bar\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "efdc76a988dc2dd5376b44b9771b6e625c9d10b1", "filename": "gcc/testsuite/gcc.dg/inline_2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline_2.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdisable-tree-einline=0:100 -fdisable-ipa-inline\" } */\n+int g;\n+__attribute__((always_inline)) void bar (void)\n+{\n+  g++;\n+}\n+\n+int foo (void)\n+{\n+  bar ();\n+  return g;\n+}\n+\n+int foo2 (void)\n+{\n+  bar();\n+  return g + 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"bar\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "70a23665de2923e6af0007ae72739bf3cfa3b083", "filename": "gcc/testsuite/gcc.dg/inline_3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline_3.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile   { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdisable-tree-einline=foo,foo2 -fdisable-ipa-inline\" } */\n+int g;\n+__attribute__((always_inline)) void bar (void)\n+{\n+  g++;\n+}\n+\n+int foo (void)\n+{\n+  bar ();\n+  return g;\n+}\n+\n+int foo2 (void)\n+{\n+  bar();\n+  return g + 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"bar\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "9a85242a4b19e99055253721e853337da2323f84", "filename": "gcc/testsuite/gcc.dg/inline_4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Finline_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline_4.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdisable-tree-einline=foo2 -fdisable-ipa-inline\" } */\n+int g;\n+__attribute__((always_inline)) void bar (void)\n+{\n+  g++;\n+}\n+\n+int foo (void)\n+{\n+  bar ();\n+  return g;\n+}\n+\n+int foo2 (void)\n+{\n+  bar();\n+  return g + 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"bar\" 4 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "3e8e7a55fdb8c4720743c9e6b4b16b761156ef95", "filename": "gcc/testsuite/gcc.dg/unroll_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_1.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll\" } */\n+\n+unsigned a[100], b[100];\n+inline void bar()\n+{\n+ a[10] = b[10];\n+}\n+\n+int foo(void)\n+{\n+  int i;\n+  bar();\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+int foo2(void)\n+{\n+  int i;\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Decided to peel loop completely\" 2 \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop2_unroll\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "12912cf77db48c49667e04f81206dd0ccbaea78a", "filename": "gcc/testsuite/gcc.dg/unroll_2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_2.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile  { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll=foo -fdisable-tree-cunrolli=foo -fenable-rtl-loop2_unroll\" } */\n+\n+unsigned a[100], b[100];\n+inline void bar()\n+{\n+ a[10] = b[10];\n+}\n+\n+int foo(void)\n+{\n+  int i;\n+  bar();\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+int foo2(void)\n+{\n+  int i;\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Decided to peel loop completely\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop2_unroll\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "d86ed552aecf4cbe9533cf2ebab6ea0592a8d172", "filename": "gcc/testsuite/gcc.dg/unroll_3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_3.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile  { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll=foo\" } */\n+\n+unsigned a[100], b[100];\n+inline void bar()\n+{\n+ a[10] = b[10];\n+}\n+\n+int foo(void)\n+{\n+  int i;\n+  bar();\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+int foo2(void)\n+{\n+  int i;\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Decided to peel loop completely\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop2_unroll\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}, {"sha": "7c70157f583d2e25831ac20c8558031123667a5c", "filename": "gcc/testsuite/gcc.dg/unroll_4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_4.c?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile  { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll=foo2\" } */\n+\n+unsigned a[100], b[100];\n+inline void bar()\n+{\n+ a[10] = b[10];\n+}\n+\n+int foo(void)\n+{\n+  int i;\n+  bar();\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+int foo2(void)\n+{\n+  int i;\n+  for (i = 0; i < 2; i++)\n+  {\n+     a[i]= b[i] + 1;\n+  }\n+  return 1;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Decided to peel loop completely\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop2_unroll\" } } */\n+/* { dg-excess-errors \"extra notes\" } */"}]}