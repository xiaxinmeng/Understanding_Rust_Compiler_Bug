{"sha": "1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "node_id": "C_kwDOANBUbNoAKDFlZWYyMWNjZmE1OTg4YTIzYTNiNzFhOTk2MTNmMjdlYTZhMjZkYTY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-28T15:09:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-30T13:16:27Z"}, "message": "libstdc++: Improve exceptions thrown from fs::temp_directory_path\n\nCurrently the throwing overload of fs::temp_directory_path() will\ndiscard the path that was obtained from the environment. When it fails\nbecause the path doesn't resolve to a directory you get an unhelpful\nerror like:\n\n  filesystem error: temp_directory_path: Not a directory\n\nIt would be better to also print the path in that case, e.g.\n\n  filesystem error: temp_directory_path: Not a directory [/home/bob/tmp]\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/fs_ops.cc (fs::temp_directory_path()): Include path\n\tin exception.\n\t(fs::temp_directory_path(error_code&)): Rearrange to more\n\tclosely match the structure of the first overload.\n\t* src/filesystem/ops.cc (fs::temp_directory_path): Likewise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n\tCheck that exception contains the path.\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tLikewise.", "tree": {"sha": "144bbcd52978c765c87546bcfbe758a8253c5271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/144bbcd52978c765c87546bcfbe758a8253c5271"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c96b14a19a9e6c365eacc59868a866b99f9786d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c96b14a19a9e6c365eacc59868a866b99f9786d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c96b14a19a9e6c365eacc59868a866b99f9786d"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "ed5e9f7d5cf5606a2d017cf83d2355dc14e6a949", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "patch": "@@ -1571,25 +1571,37 @@ fs::path\n fs::temp_directory_path()\n {\n   error_code ec;\n-  path tmp = temp_directory_path(ec);\n+  path p = fs::get_temp_directory_from_env(ec);\n+  if (!ec)\n+    {\n+      auto st = status(p, ec);\n+      if (!ec && !is_directory(st))\n+\tec = std::make_error_code(std::errc::not_a_directory);\n+    }\n   if (ec)\n-    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"temp_directory_path\", ec));\n-  return tmp;\n+    {\n+      if (p.empty())\n+\t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\"temp_directory_path\", ec));\n+      else\n+\t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\"temp_directory_path\", p, ec));\n+    }\n+  return p;\n }\n \n fs::path\n fs::temp_directory_path(error_code& ec)\n {\n   path p = fs::get_temp_directory_from_env(ec);\n-  if (ec)\n-    return p;\n-  auto st = status(p, ec);\n-  if (ec)\n-    p.clear();\n-  else if (!is_directory(st))\n+  if (!ec)\n     {\n-      p.clear();\n-      ec = std::make_error_code(std::errc::not_a_directory);\n+      auto st = status(p, ec);\n+      if (ec)\n+\tp.clear();\n+      else if (!is_directory(st))\n+\t{\n+\t  p.clear();\n+\t  ec = std::make_error_code(std::errc::not_a_directory);\n+\t}\n     }\n   return p;\n }"}, {"sha": "ab84eb845946a8749177956839978177ddc1d38b", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "patch": "@@ -1326,25 +1326,32 @@ fs::path\n fs::temp_directory_path()\n {\n   error_code ec;\n-  path tmp = temp_directory_path(ec);\n-  if (ec.value())\n-    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"temp_directory_path\", ec));\n-  return tmp;\n+  path p = fs::get_temp_directory_from_env(ec);\n+  if (!ec)\n+    {\n+      auto st = status(p, ec);\n+      if (!ec && !is_directory(st))\n+\tec = std::make_error_code(std::errc::not_a_directory);\n+    }\n+  if (ec)\n+    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"temp_directory_path\", p, ec));\n+  return p;\n }\n \n fs::path\n fs::temp_directory_path(error_code& ec)\n {\n   path p = fs::get_temp_directory_from_env(ec);\n-  if (ec)\n-    return p;\n-  auto st = status(p, ec);\n-  if (ec)\n-    p.clear();\n-  else if (!is_directory(st))\n+  if (!ec)\n     {\n-      p.clear();\n-      ec = std::make_error_code(std::errc::not_a_directory);\n+      auto st = status(p, ec);\n+      if (ec)\n+\tp.clear();\n+      else if (!is_directory(st))\n+\t{\n+\t  p.clear();\n+\t  ec = std::make_error_code(std::errc::not_a_directory);\n+\t}\n     }\n   return p;\n }"}, {"sha": "56bd7408c2d9506403114f5f8d87b09036595353", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "patch": "@@ -140,12 +140,17 @@ test04()\n   VERIFY( r == fs::path() );\n \n   std::error_code ec2;\n+  std::string failed_path;\n   try {\n     fs::temp_directory_path();\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n+    // On Windows the returned path will be in preferred form, i.e. using L'\\\\'\n+    // and will have a trailing slash, so compare generic forms.\n+    failed_path = e.path1().generic_string();\n   }\n   VERIFY( ec2 == ec );\n+  VERIFY( failed_path.find(f.path.generic_string()) != std::string::npos );\n }\n \n int"}, {"sha": "1772f9737c15f542e14d46da7c7ef2938579c061", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eef21ccfa5988a23a3b71a99613f27ea6a26da6/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=1eef21ccfa5988a23a3b71a99613f27ea6a26da6", "patch": "@@ -141,12 +141,17 @@ test04()\n   VERIFY( r == fs::path() );\n \n   std::error_code ec2;\n+  std::string failed_path;\n   try {\n     fs::temp_directory_path();\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n+    // On Windows the returned path will be in preferred form, i.e. using L'\\\\'\n+    // and will have a trailing slash, so compare generic forms.\n+    failed_path = e.path1().generic_string();\n   }\n   VERIFY( ec2 == ec );\n+  VERIFY( failed_path.find(f.path.generic_string()) != std::string::npos );\n }\n \n int"}]}