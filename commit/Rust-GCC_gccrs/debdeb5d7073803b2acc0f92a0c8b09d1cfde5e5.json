{"sha": "debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGViZGViNWQ3MDczODAzYjJhY2MwZjkyYTBjOGIwOWQxY2ZkZTVlNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-28T15:16:10Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-28T15:16:10Z"}, "message": "cpptrad.c (skip_macro_block_comment): New.\n\n\t* cpptrad.c (skip_macro_block_comment): New.\n\t(copy_comment): Use it if appropriate.\n\nFrom-SVN: r68641", "tree": {"sha": "865b5c96c7a5b72938a905333dc8662dc0b7937e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/865b5c96c7a5b72938a905333dc8662dc0b7937e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "735e8085f774cbd2f596077d08c08c3b24148098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735e8085f774cbd2f596077d08c08c3b24148098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735e8085f774cbd2f596077d08c08c3b24148098"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "d2c9163617a942e9aed4529af4ac2fa687234b88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5", "patch": "@@ -1,3 +1,8 @@\n+2003-06-28  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpptrad.c (skip_macro_block_comment): New.\n+\t(copy_comment): Use it if appropriate.\n+\n 2003-06-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gcse.c (compute_ld_motion_mems): Use INSN_P instead of its"}, {"sha": "9b08e31138fff1488a951556853b6ae0b684d0a2", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=debdeb5d7073803b2acc0f92a0c8b09d1cfde5e5", "patch": "@@ -116,6 +116,25 @@ check_output_buffer (cpp_reader *pfile, size_t n)\n     }\n }\n \n+/* Skip a C-style block comment in a macro as a result of -CC.\n+   Buffer->cur points to the initial asterisk of the comment.  */\n+static void\n+skip_macro_block_comment (cpp_reader *pfile)\n+{\n+  const uchar *cur = pfile->buffer->cur;\n+\n+  cur++;\n+  if (*cur == '/')\n+    cur++;\n+\n+  /* People like decorating comments with '*', so check for '/'\n+     instead for efficiency.  */\n+  while(! (*cur++ == '/' && cur[-2] == '*') )\n+    ;\n+\n+  pfile->buffer->cur = cur;\n+}\n+\n /* CUR points to the asterisk introducing a comment in the current\n    context.  IN_DEFINE is true if we are in the replacement text of a\n    macro.\n@@ -136,7 +155,11 @@ copy_comment (cpp_reader *pfile, const uchar *cur, int in_define)\n   cpp_buffer *buffer = pfile->buffer;\n \n   buffer->cur = cur;\n-  unterminated = _cpp_skip_block_comment (pfile);\n+  if (pfile->context->prev)\n+    unterminated = false, skip_macro_block_comment (pfile);\n+  else\n+    unterminated = _cpp_skip_block_comment (pfile);\n+    \n   if (unterminated)\n     cpp_error_with_line (pfile, DL_ERROR, from_line, 0,\n \t\t\t \"unterminated comment\");"}]}