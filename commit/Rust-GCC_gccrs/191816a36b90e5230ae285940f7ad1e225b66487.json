{"sha": "191816a36b90e5230ae285940f7ad1e225b66487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxODE2YTM2YjkwZTUyMzBhZTI4NTk0MGY3YWQxZTIyNWI2NjQ4Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-08-12T10:30:47Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-08-12T10:30:47Z"}, "message": "re PR c/7652 (-Wswitch-break : Warn if a switch case falls through)\n\n\tPR c/7652\ngcc/\n\t* alias.c (find_base_value): Adjust fall through comment.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* combine.c (find_split_point): Likewise.\n\t(expand_compound_operation): Likewise.  Add FALLTHRU.\n\t(make_compound_operation): Adjust fall through comment.\n\t(canon_reg_for_combine): Add FALLTHRU.\n\t(force_to_mode): Adjust fall through comment.\n\t(simplify_shift_const_1): Likewise.\n\t(simplify_comparison): Likewise.\n\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Add\n\tFALLTHRU.\n\t* config/aarch64/predicates.md: Likewise.\n\t* config/i386/i386.c (function_arg_advance_32): Likewise.\n\t(ix86_gimplify_va_arg): Likewise.\n\t(print_reg): Likewise.\n\t(ix86_print_operand): Likewise.\n\t(ix86_build_const_vector): Likewise.\n\t(ix86_expand_branch): Likewise.\n\t(ix86_sched_init_global): Adjust fall through comment.\n\t(ix86_expand_args_builtin): Add FALLTHRU.\n\t(ix86_expand_builtin): Likewise.\n\t(ix86_expand_vector_init_one_var): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_emit_vector_compare_inner): Likewise.\n\t(rs6000_adjust_cost): Likewise.\n\t(insn_must_be_first_in_group): Likewise.\n\t* config/rs6000/rs6000.md: Likewise.  Adjust fall through comment.\n\t* dbxout.c (dbxout_symbol): Adjust fall through comment.\n\t* df-scan.c (df_uses_record): Likewise.\n\t* dojump.c (do_jump): Add FALLTHRU.\n\t* dwarf2out.c (mem_loc_descriptor): Likewise.  Adjust fall through\n\tcomment.\n\t(resolve_args_picking_1): Adjust fall through comment.\n\t(loc_list_from_tree_1): Likewise.\n\t* expmed.c (make_tree): Likewise.\n\t* expr.c (expand_expr_real_2): Add FALLTHRU.\n\t(expand_expr_real_1): Likewise.  Adjust fall through comment.\n\t* fold-const.c (const_binop): Adjust fall through comment.\n\t(fold_truth_not_expr): Likewise.\n\t(fold_cond_expr_with_comparison): Add FALLTHRU.\n\t(fold_binary_loc): Likewise.\n\t(contains_label_1): Adjust fall through comment.\n\t(multiple_of_p): Likewise.\n\t* gcov-tool.c (process_args): Add FALLTHRU.\n\t* genattrtab.c (check_attr_test): Likewise.\n\t(write_test_expr): Likewise.\n\t* genconfig.c (walk_insn_part): Likewise.\n\t* genpreds.c (validate_exp): Adjust fall through comment.\n\t(needs_variable): Likewise.\n\t* gensupport.c (get_alternatives_number): Add FALLTHRU.\n\t(subst_dup): Likewise.\n\t* gimple-pretty-print.c (dump_gimple_assign): Likewise.\n\t* gimplify.c (gimplify_addr_expr): Adjust fall through comment.\n\t(gimplify_scan_omp_clauses): Add FALLTHRU.\n\t(goa_stabilize_expr): Likewise.\n\t* graphite-isl-ast-to-gimple.c (substitute_ssa_name): Adjust fall\n\tthrough comment.\n\t* hsa-gen.c (get_address_from_value): Likewise.\n\t* ipa-icf.c (sem_function::hash_stmt): Likewise.\n\t* ira.c (ira_setup_alts): Add FALLTHRU.\n\t* lra-eliminations.c (lra_eliminate_regs_1): Adjust fall through\n\tcomment.\n\t* lto-streamer-out.c (lto_output_tree_ref): Add FALLTHRU.\n\t* opts.c (common_handle_option): Likewise.\n\t* read-rtl.c (read_rtx_code): Likewise.\n\t* real.c (round_for_format): Likewise.\n\t* recog.c (asm_operand_ok): Likewise.\n\t* reginfo.c (reg_scan_mark_refs): Adjust fall through comment.\n\t* reload1.c (set_label_offsets): Likewise.\n\t(eliminate_regs_1): Likewise.\n\t(reload_reg_reaches_end_p): Likewise.\n\t* rtlanal.c (commutative_operand_precedence): Add FALLTHRU.\n\t(rtx_cost): Likewise.\n\t* sched-rgn.c (is_exception_free): Likewise.\n\t* simplify-rtx.c (simplify_rtx): Adjust fall through comment.\n\t* stor-layout.c (int_mode_for_mode): Likewise.\n\t* toplev.c (print_to_asm_out_file): Likewise.\n\t(print_to_stderr): Likewise.\n\t* tree-cfg.c (gimple_verify_flow_info): Likewise.\n\t* tree-chrec.c (chrec_fold_plus_1): Add FALLTHRU.\n\t(chrec_fold_multiply): Likewise.\n\t(evolution_function_is_invariant_rec_p): Likewise.\n\t(for_each_scev_op): Likewise.\n\t* tree-data-ref.c (siv_subscript_p): Likewise.\n\t(get_references_in_stmt): Likewise.\n\t* tree.c (find_placeholder_in_expr): Adjust fall through comment.\n\t(substitute_in_expr): Likewise.\n\t(type_cache_hasher::equal): Likewise.\n\t(walk_type_fields): Likewise.\n\t* var-tracking.c (adjust_mems): Add FALLTHRU.\n\t(set_dv_changed): Adjust fall through comment.\n\t* varasm.c (default_function_section): Add FALLTHRU.\ngcc/c-family/\n\t* c-common.c (scalar_to_vector): Adjust fall through comment.\n\t* c-opts.c (c_common_handle_option): Likewise.\n\t* c-pragma.c (handle_pragma_pack): Add FALLTHRU.\n\t* c-pretty-print.c (c_pretty_printer::postfix_expression): Adjust\n\tfall through comment.\n\t* cilk.c (extract_free_variables): Add FALLTHRU.\ngcc/c/\n\t* c-parser.c (c_parser_external_declaration): Add FALLTHRU.\n\t(c_parser_postfix_expression): Likewise.\n\t* c-typeck.c (build_unary_op): Adjust fall through comment.\n\t(c_mark_addressable): Likewise.\ngcc/cp/\n\t* call.c (add_builtin_candidate): Add FALLTHRU.\n\t(build_integral_nontype_arg_conv): Adjust fall through comment.\n\t(build_new_op_1): Add FALLTHRU.\n\t(convert_like_real): Adjust fall through comment.\n\t* class.c (fixed_type_or_null): Likewise.\n\t* constexpr.c (cxx_eval_constant_expression): Likewise.\n\t(potential_constant_expression_1): Likewise.  Add FALLTHRU.\n\t* cp-gimplify.c (cp_gimplify_expr): Adjust fall through comment.\n\t(cp_fold): Add FALLTHRU.\n\t* cvt.c (build_expr_type_conversion): Adjust fall through comment.\n\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Add FALLTHRU.\n\t(pp_cxx_qualified_id): Likewise.\n\t(cxx_pretty_printer::constant): Adjust fall through comment.\n\t(cxx_pretty_printer::primary_expression): Add FALLTHRU.\n\t(pp_cxx_pm_expression): Adjust fall through comment.\n\t(cxx_pretty_printer::expression): Add FALLTHRU.\n\t(cxx_pretty_printer::declaration_specifiers): Reformat code.\n\t(pp_cxx_type_specifier_seq): Adjust fall through comment.\n\t(pp_cxx_ptr_operator): Likewise.  Add FALLTHRU.\n\t* error.c (dump_type): Adjust fall through comment.\n\t(dump_decl): Likewise.\n\t* mangle.c (write_type): Likewise.\n\t* method.c (synthesized_method_walk): Add FALLTHRU.\n\t* name-lookup.c (arg_assoc_type): Likewise.\n\t* parser.c (cp_lexer_print_token): Adjust fall through comment.\n\t(cp_parser_primary_expression): Add FALLTHRU.\n\t(cp_parser_operator): Likewise.\n\t* pt.c (find_parameter_packs_r): Likewise.\n\t(tsubst_aggr_type): Adjust fall through comment.\n\t* semantics.c (finish_omp_clauses): Add FALLTHRU.\n\t* tree.c (lvalue_kind): Likewise.\ngcc/fortran/\n\t* decl.c (match_attr_spec): Add FALLTHRU.\n\t* primary.c (match_arg_list_function): Likewise.\n\t* resolve.c (resolve_operator): Adjust fall through comment.\n\t(fixup_charlen): Add FALLTHRU.\n\t(resolve_allocate_expr): Adjust fall through comment.\n\t* trans-array.c (gfc_conv_ss_startstride): Add FALLTHRU.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_len): Adjust fall through\n\tcomment.\ngcc/java/\n\t* expr.c (java_truthvalue_conversion): Adjust fall through comment.\n\t* jcf-io.c (verify_constant_pool): Likewise.\n\t* typeck.c (promote_type): Likewise.\ngcc/objc/\n\t* objc-encoding.c (encode_type): Add FALLTHRU.\nlibcpp/\n\t* lex.c (search_line_fast): Add FALLTHRU.\n\t(_cpp_lex_direct): Likewise.\n\t(cpp_token_val_index): Adjust fall through comment.\n\t* macro.c (parse_params): Add FALLTHRU.\n\t* pch.c (count_defs): Adjust fall through comment.\n\t(write_defs): Likewise.\nlibiberty/\n\t* cp-demangle.c (d_print_mod): Add FALLTHRU.\n\nFrom-SVN: r239410", "tree": {"sha": "9e07add4f559a5724126b339e6def3c8d3a7ae1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e07add4f559a5724126b339e6def3c8d3a7ae1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191816a36b90e5230ae285940f7ad1e225b66487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191816a36b90e5230ae285940f7ad1e225b66487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191816a36b90e5230ae285940f7ad1e225b66487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191816a36b90e5230ae285940f7ad1e225b66487/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c44e080f57a7c9d334005c2ceac08139d1d276b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c44e080f57a7c9d334005c2ceac08139d1d276b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c44e080f57a7c9d334005c2ceac08139d1d276b"}], "stats": {"total": 475, "additions": 387, "deletions": 88}, "files": [{"sha": "165e183b68c29d302b729529d4fe356eef88bcf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,98 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* alias.c (find_base_value): Adjust fall through comment.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* combine.c (find_split_point): Likewise.\n+\t(expand_compound_operation): Likewise.  Add FALLTHRU.\n+\t(make_compound_operation): Adjust fall through comment.\n+\t(canon_reg_for_combine): Add FALLTHRU.\n+\t(force_to_mode): Adjust fall through comment.\n+\t(simplify_shift_const_1): Likewise.\n+\t(simplify_comparison): Likewise.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Add\n+\tFALLTHRU.\n+\t* config/aarch64/predicates.md: Likewise.\n+\t* config/i386/i386.c (function_arg_advance_32): Likewise.\n+\t(ix86_gimplify_va_arg): Likewise.\n+\t(print_reg): Likewise.\n+\t(ix86_print_operand): Likewise.\n+\t(ix86_build_const_vector): Likewise.\n+\t(ix86_expand_branch): Likewise.\n+\t(ix86_sched_init_global): Adjust fall through comment.\n+\t(ix86_expand_args_builtin): Add FALLTHRU.\n+\t(ix86_expand_builtin): Likewise.\n+\t(ix86_expand_vector_init_one_var): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_emit_vector_compare_inner): Likewise.\n+\t(rs6000_adjust_cost): Likewise.\n+\t(insn_must_be_first_in_group): Likewise.\n+\t* config/rs6000/rs6000.md: Likewise.  Adjust fall through comment.\n+\t* dbxout.c (dbxout_symbol): Adjust fall through comment.\n+\t* df-scan.c (df_uses_record): Likewise.\n+\t* dojump.c (do_jump): Add FALLTHRU.\n+\t* dwarf2out.c (mem_loc_descriptor): Likewise.  Adjust fall through\n+\tcomment.\n+\t(resolve_args_picking_1): Adjust fall through comment.\n+\t(loc_list_from_tree_1): Likewise.\n+\t* expmed.c (make_tree): Likewise.\n+\t* expr.c (expand_expr_real_2): Add FALLTHRU.\n+\t(expand_expr_real_1): Likewise.  Adjust fall through comment.\n+\t* fold-const.c (const_binop): Adjust fall through comment.\n+\t(fold_truth_not_expr): Likewise.\n+\t(fold_cond_expr_with_comparison): Add FALLTHRU.\n+\t(fold_binary_loc): Likewise.\n+\t(contains_label_1): Adjust fall through comment.\n+\t(multiple_of_p): Likewise.\n+\t* gcov-tool.c (process_args): Add FALLTHRU.\n+\t* genattrtab.c (check_attr_test): Likewise.\n+\t(write_test_expr): Likewise.\n+\t* genconfig.c (walk_insn_part): Likewise.\n+\t* genpreds.c (validate_exp): Adjust fall through comment.\n+\t(needs_variable): Likewise.\n+\t* gensupport.c (get_alternatives_number): Add FALLTHRU.\n+\t(subst_dup): Likewise.\n+\t* gimple-pretty-print.c (dump_gimple_assign): Likewise.\n+\t* gimplify.c (gimplify_addr_expr): Adjust fall through comment.\n+\t(gimplify_scan_omp_clauses): Add FALLTHRU.\n+\t(goa_stabilize_expr): Likewise.\n+\t* graphite-isl-ast-to-gimple.c (substitute_ssa_name): Adjust fall\n+\tthrough comment.\n+\t* hsa-gen.c (get_address_from_value): Likewise.\n+\t* ipa-icf.c (sem_function::hash_stmt): Likewise.\n+\t* ira.c (ira_setup_alts): Add FALLTHRU.\n+\t* lra-eliminations.c (lra_eliminate_regs_1): Adjust fall through\n+\tcomment.\n+\t* lto-streamer-out.c (lto_output_tree_ref): Add FALLTHRU.\n+\t* opts.c (common_handle_option): Likewise.\n+\t* read-rtl.c (read_rtx_code): Likewise.\n+\t* real.c (round_for_format): Likewise.\n+\t* recog.c (asm_operand_ok): Likewise.\n+\t* reginfo.c (reg_scan_mark_refs): Adjust fall through comment.\n+\t* reload1.c (set_label_offsets): Likewise.\n+\t(eliminate_regs_1): Likewise.\n+\t(reload_reg_reaches_end_p): Likewise.\n+\t* rtlanal.c (commutative_operand_precedence): Add FALLTHRU.\n+\t(rtx_cost): Likewise.\n+\t* sched-rgn.c (is_exception_free): Likewise.\n+\t* simplify-rtx.c (simplify_rtx): Adjust fall through comment.\n+\t* stor-layout.c (int_mode_for_mode): Likewise.\n+\t* toplev.c (print_to_asm_out_file): Likewise.\n+\t(print_to_stderr): Likewise.\n+\t* tree-cfg.c (gimple_verify_flow_info): Likewise.\n+\t* tree-chrec.c (chrec_fold_plus_1): Add FALLTHRU.\n+\t(chrec_fold_multiply): Likewise.\n+\t(evolution_function_is_invariant_rec_p): Likewise.\n+\t(for_each_scev_op): Likewise.\n+\t* tree-data-ref.c (siv_subscript_p): Likewise.\n+\t(get_references_in_stmt): Likewise.\n+\t* tree.c (find_placeholder_in_expr): Adjust fall through comment.\n+\t(substitute_in_expr): Likewise.\n+\t(type_cache_hasher::equal): Likewise.\n+\t(walk_type_fields): Likewise.\n+\t* var-tracking.c (adjust_mems): Add FALLTHRU.\n+\t(set_dv_changed): Adjust fall through comment.\n+\t* varasm.c (default_function_section): Add FALLTHRU.\n+\n 2016-08-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "f4b5a924b333b53f10b9077a786608b4493f5dde", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1398,7 +1398,7 @@ find_base_value (rtx src)\n       if (GET_CODE (src) != PLUS && GET_CODE (src) != MINUS)\n \tbreak;\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case PLUS:\n     case MINUS:"}, {"sha": "14db7087321a140dc06c688ff39009558c8f6f4e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,13 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* c-common.c (scalar_to_vector): Adjust fall through comment.\n+\t* c-opts.c (c_common_handle_option): Likewise.\n+\t* c-pragma.c (handle_pragma_pack): Add FALLTHRU.\n+\t* c-pretty-print.c (c_pretty_printer::postfix_expression): Adjust\n+\tfall through comment.\n+\t* cilk.c (extract_free_variables): Add FALLTHRU.\n+\n 2016-08-10  Jason Merrill  <jason@redhat.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_if_constexpr."}, {"sha": "51b6ca95f912259636419322e88b4f76f26b3b84", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -12709,7 +12709,7 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n       case BIT_XOR_EXPR:\n       case BIT_AND_EXPR:\n \tinteger_only_op = true;\n-\t/* ... fall through ...  */\n+\t/* fall through */\n \n       case VEC_COND_EXPR:\n "}, {"sha": "574718a9a9821a9b513ec9f07a31851b9c3f66f4", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -439,7 +439,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_ffreestanding:\n       value = !value;\n-      /* Fall through....  */\n+      /* Fall through.  */\n     case OPT_fhosted:\n       flag_hosted = value;\n       flag_no_builtin = !value;"}, {"sha": "1a9a9f3f3eb91c05528d49cff392a0b857467ea7", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -214,6 +214,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n \t    align = maximum_field_alignment;\n \t    break;\n \t  }\n+\t/* FALLTHRU */\n       default:\n \tGCC_BAD2 (\"alignment must be a small power of two, not %d\", align);\n       }"}, {"sha": "374bd1a3484021a5f06100a6e146f93c045f6ed6", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1662,7 +1662,7 @@ c_pretty_printer::postfix_expression (tree e)\n           id_expression (TREE_OPERAND (e, 0));\n \t  break;\n \t}\n-      /* else fall through.  */\n+      /* fall through.  */\n \n     default:\n       primary_expression (e);"}, {"sha": "8042f216e0abd93ab399c00ce84c661913cc5e2c", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1097,6 +1097,7 @@ extract_free_variables (tree t, struct wrapper_data *wd,\n     case RESULT_DECL:\n       if (wd->type != CILK_BLOCK_SPAWN)\n \tTREE_ADDRESSABLE (t) = 1;\n+      /* FALLTHRU */\n     case VAR_DECL:\n     case PARM_DECL:\n       if (!is_global_var (t))"}, {"sha": "62701f0e493c52020fdaa7c30b7e810fb8af66c9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,11 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* c-parser.c (c_parser_external_declaration): Add FALLTHRU.\n+\t(c_parser_postfix_expression): Likewise.\n+\t* c-typeck.c (build_unary_op): Adjust fall through comment.\n+\t(c_mark_addressable): Likewise.\n+\n 2016-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/72816"}, {"sha": "c050f644566f32f8f121c0f1b9020f458e6b291c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1557,6 +1557,7 @@ c_parser_external_declaration (c_parser *parser)\n \t}\n       /* Else fall through, and yield a syntax error trying to parse\n \t as a declaration or function definition.  */\n+      /* FALLTHRU */\n     default:\n     decl_or_fndef:\n       /* A declaration or a function definition (or, in Objective-C,\n@@ -8174,6 +8175,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  break;\n \t}\n       /* Else fall through to report error.  */\n+      /* FALLTHRU */\n     default:\n       c_parser_error (parser, \"expected expression\");\n       expr.set_error ();"}, {"sha": "8456a0c0b1e816003605815b308295857e7842fc", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -4493,7 +4493,7 @@ build_unary_op (location_t location,\n \t      return error_mark_node;\n \t    }\n \n-\t  /* ... fall through ...  */\n+\t  /* fall through */\n \n \tcase ARRAY_REF:\n \t  if (TYPE_REVERSE_STORAGE_ORDER (TREE_TYPE (TREE_OPERAND (arg, 0))))\n@@ -4695,10 +4695,10 @@ c_mark_addressable (tree exp)\n \t    return false;\n \t  }\n \n-\t/* drops in */\n+\t/* FALLTHRU */\n       case FUNCTION_DECL:\n \tTREE_ADDRESSABLE (x) = 1;\n-\t/* drops out */\n+\t/* FALLTHRU */\n       default:\n \treturn true;\n     }"}, {"sha": "130a16b1d7d06c4ec9e31439037ffcbcbd0e085f", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -4239,7 +4239,7 @@ expand_debug_expr (tree exp)\n \t  set_mem_attributes (op0, exp, 0);\n \t  return op0;\n \t}\n-      /* Fall through...  */\n+      /* Fall through.  */\n \n     case INTEGER_CST:\n     case REAL_CST:"}, {"sha": "1b262f94fed1645910de65900f035df154f91401", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5135,15 +5135,15 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n       split = find_split_point (&XEXP (x, 2), insn, false);\n       if (split)\n \treturn split;\n-      /* ... fall through ...  */\n+      /* fall through */\n     case RTX_BIN_ARITH:\n     case RTX_COMM_ARITH:\n     case RTX_COMPARE:\n     case RTX_COMM_COMPARE:\n       split = find_split_point (&XEXP (x, 1), insn, false);\n       if (split)\n \treturn split;\n-      /* ... fall through ...  */\n+      /* fall through */\n     case RTX_UNARY:\n       /* Some machines have (and (shift ...) ...) insns.  If X is not\n \t an AND, but XEXP (X, 0) is, use it as our split point.  */\n@@ -6955,6 +6955,7 @@ expand_compound_operation (rtx x)\n     {\n     case ZERO_EXTEND:\n       unsignedp = 1;\n+      /* FALLTHRU */\n     case SIGN_EXTEND:\n       /* We can't necessarily use a const_int for a multiword mode;\n \t it depends on implicitly extending the value.\n@@ -6997,7 +6998,7 @@ expand_compound_operation (rtx x)\n     case ZERO_EXTRACT:\n       unsignedp = 1;\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case SIGN_EXTRACT:\n       /* If the operand is a CLOBBER, just return it.  */\n@@ -8037,7 +8038,7 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t  break;\n \t}\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case ASHIFTRT:\n       lhs = XEXP (x, 0);\n@@ -8265,6 +8266,7 @@ canon_reg_for_combine (rtx x, rtx reg)\n       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1) || op2 != XEXP (x, 2))\n \treturn simplify_gen_ternary (GET_CODE (x), GET_MODE (x),\n \t\t\t\t     GET_MODE (op0), op0, op1, op2);\n+      /* FALLTHRU */\n \n     case RTX_OBJ:\n       if (REG_P (x))\n@@ -8531,7 +8533,7 @@ force_to_mode (rtx x, machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t\t\t\tmode, smask, next_select);\n       }\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case MULT:\n       /* Substituting into the operands of a widening MULT is not likely to\n@@ -10404,7 +10406,7 @@ simplify_shift_const_1 (enum rtx_code code, machine_mode result_mode,\n \t      continue;\n \t    }\n \n-\t  /* ... fall through ...  */\n+\t  /* fall through */\n \n \tcase LSHIFTRT:\n \tcase ASHIFT:\n@@ -11730,7 +11732,7 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t      continue;\n \t    }\n \n-\t  /* ... fall through ...  */\n+\t  /* fall through */\n \n \tcase SIGN_EXTRACT:\n \t  tem = expand_compound_operation (op0);"}, {"sha": "9136910cd324a391de929ea9d1a13419dbcfb8bc", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1017,6 +1017,7 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\t}\n \t      /* Fall through - if the lane index isn't a constant then\n \t\t the next case will error.  */\n+\t      /* FALLTHRU */\n \t    case SIMD_ARG_CONSTANT:\n constant_arg:\n \t      if (!(*insn_data[icode].operand[opc].predicate)"}, {"sha": "ebda6d812e7261d8d8c6e300e9db5f4a8884bfed", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -180,6 +180,7 @@\n \t  || GET_CODE (XEXP (op, 1)) != CONST_INT)\n \treturn false;\n       op = XEXP (op, 0);\n+      /* FALLTHRU */\n \n     case SYMBOL_REF:\n       return SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_INITIAL_EXEC;\n@@ -201,6 +202,7 @@\n \t  || GET_CODE (XEXP (op, 1)) != CONST_INT)\n \treturn false;\n       op = XEXP (op, 0);\n+      /* FALLTHRU */\n \n     case SYMBOL_REF:\n       return SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_EXEC;"}, {"sha": "62896bfbb1e08625ad23f4564314b6eeac9a42d1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -9338,6 +9338,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \terror_p = 1;\n       if (cum->float_in_sse < 2)\n \tbreak;\n+      /* FALLTHRU */\n     case SFmode:\n       if (cum->float_in_sse == -1)\n \terror_p = 1;\n@@ -9605,6 +9606,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \terror_p = 1;\n       if (cum->float_in_sse < 2)\n \tbreak;\n+      /* FALLTHRU */\n     case SFmode:\n       if (cum->float_in_sse == -1)\n \terror_p = 1;\n@@ -11010,6 +11012,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t  container = NULL;\n \t  break;\n \t}\n+      /* FALLTHRU */\n \n     default:\n       container = construct_container (nat_mode, TYPE_MODE (type),\n@@ -17318,6 +17321,7 @@ print_reg (rtx x, int code, FILE *file)\n     case 4:\n       if (LEGACY_INT_REGNO_P (regno))\n \tputc (msize == 8 && TARGET_64BIT ? 'r' : 'e', file);\n+      /* FALLTHRU */\n     case 16:\n     case 12:\n     case 2:\n@@ -17727,6 +17731,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"eq_us\", file);\n \t\t  break;\n \t\t}\n+\t     /* FALLTHRU */\n \t    case EQ:\n \t      fputs (\"eq\", file);\n \t      break;\n@@ -17736,6 +17741,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"nge\", file);\n \t\t  break;\n \t\t}\n+\t     /* FALLTHRU */\n \t    case LT:\n \t      fputs (\"lt\", file);\n \t      break;\n@@ -17745,6 +17751,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"ngt\", file);\n \t\t  break;\n \t\t}\n+\t     /* FALLTHRU */\n \t    case LE:\n \t      fputs (\"le\", file);\n \t      break;\n@@ -17757,6 +17764,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"neq_oq\", file);\n \t\t  break;\n \t\t}\n+\t     /* FALLTHRU */\n \t    case NE:\n \t      fputs (\"neq\", file);\n \t      break;\n@@ -17766,6 +17774,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"ge\", file);\n \t\t  break;\n \t\t}\n+\t     /* FALLTHRU */\n \t    case UNGE:\n \t      fputs (\"nlt\", file);\n \t      break;\n@@ -17775,6 +17784,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"gt\", file);\n \t\t  break;\n \t\t}\n+\t     /* FALLTHRU */\n \t    case UNGT:\n \t      fputs (\"nle\", file);\n \t      break;\n@@ -21522,6 +21532,7 @@ ix86_build_const_vector (machine_mode mode, bool vect, rtx value)\n     case V4DImode:\n     case V2DImode:\n       gcc_assert (vect);\n+      /* FALLTHRU */\n     case V16SFmode:\n     case V8SFmode:\n     case V4SFmode:\n@@ -22507,6 +22518,7 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \t  op0 = force_reg (mode, gen_rtx_XOR (mode, op0, op1));\n \t  op1 = const0_rtx;\n \t}\n+      /* FALLTHRU */\n     case TImode:\n       /* Expand DImode branch into multiple compare+branch.  */\n       {\n@@ -29868,7 +29880,7 @@ ix86_sched_init_global (FILE *, int, int)\n \t  core2i7_ifetch_block_max_insns = 6;\n \t  break;\n \t}\n-      /* ... Fall through ...  */\n+      /* Fall through.  */\n     default:\n       targetm.sched.dfa_post_advance_cycle = NULL;\n       targetm.sched.first_cycle_multipass_init = NULL;\n@@ -40139,6 +40151,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t\t\terror (\"the next to last argument must be an 8-bit immediate\");\n \t\t\tbreak;\n \t\t      }\n+\t\t    /* FALLTHRU */\n \t\t  case 1:\n \t\t    error (\"the last argument must be an 8-bit immediate\");\n \t\t    break;\n@@ -42870,6 +42883,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  if (!TARGET_SSE)\n \t    /* Emit a normal call if SSE isn't available.  */\n \t    return expand_call (exp, target, ignore);\n+\t  /* FALLTHRU */\n \tdefault:\n \t  return ix86_expand_args_builtin (d, exp, target);\n \t}\n@@ -47023,6 +47037,7 @@ ix86_expand_vector_init_one_var (bool mmx_ok, machine_mode mode,\n       /* Use ix86_expand_vector_set in 64bit mode only.  */\n       if (!TARGET_64BIT)\n \treturn false;\n+      /* FALLTHRU */\n     case V4DFmode:\n     case V8SFmode:\n     case V8SImode:"}, {"sha": "756e69df3c599620e56aa8edfc653126bc857a23", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -22949,6 +22949,7 @@ rs6000_emit_vector_compare_inner (enum rtx_code code, rtx op0, rtx op1)\n     case GE:\n       if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n \treturn NULL_RTX;\n+      /* FALLTHRU */\n \n     case EQ:\n     case GT:\n@@ -30687,6 +30688,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n             }\n         }\n       /* Fall through, no cost for output dependency.  */\n+      /* FALLTHRU */\n \n     case REG_DEP_ANTI:\n       /* Anti dependency; DEP_INSN reads a register that INSN writes some\n@@ -31833,6 +31835,7 @@ insn_must_be_first_in_group (rtx_insn *insn)\n     case PROCESSOR_POWER5:\n       if (is_cracked_insn (insn))\n         return true;\n+      /* FALLTHRU */\n     case PROCESSOR_POWER4:\n       if (is_microcoded_insn (insn))\n         return true;"}, {"sha": "df75dc26807939331b126ffaf07ce7a70e055e54", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -8153,6 +8153,7 @@\n     case 0:\n       if (TARGET_STRING)\n         return \\\"stswi %1,%P0,16\\\";\n+      /* FALLTHRU */\n     case 1:\n       return \\\"#\\\";\n     case 2:\n@@ -8161,7 +8162,7 @@\n       if (TARGET_STRING\n           && ! reg_overlap_mentioned_p (operands[0], operands[1]))\n \treturn \\\"lswi %0,%P1,16\\\";\n-      /* ... fall through ...  */\n+      /* fall through */\n     case 3:\n     case 4:\n     case 5:"}, {"sha": "52965b8cfe081d02c7b34753d9dfe3f1404cf2ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,38 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* call.c (add_builtin_candidate): Add FALLTHRU.\n+\t(build_integral_nontype_arg_conv): Adjust fall through comment.\n+\t(build_new_op_1): Add FALLTHRU.\n+\t(convert_like_real): Adjust fall through comment.\n+\t* class.c (fixed_type_or_null): Likewise.\n+\t* constexpr.c (cxx_eval_constant_expression): Likewise.\n+\t(potential_constant_expression_1): Likewise.  Add FALLTHRU.\n+\t* cp-gimplify.c (cp_gimplify_expr): Adjust fall through comment.\n+\t(cp_fold): Add FALLTHRU.\n+\t* cvt.c (build_expr_type_conversion): Adjust fall through comment.\n+\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Add FALLTHRU.\n+\t(pp_cxx_qualified_id): Likewise.\n+\t(cxx_pretty_printer::constant): Adjust fall through comment.\n+\t(cxx_pretty_printer::primary_expression): Add FALLTHRU.\n+\t(pp_cxx_pm_expression): Adjust fall through comment.\n+\t(cxx_pretty_printer::expression): Add FALLTHRU.\n+\t(cxx_pretty_printer::declaration_specifiers): Reformat code.\n+\t(pp_cxx_type_specifier_seq): Adjust fall through comment.\n+\t(pp_cxx_ptr_operator): Likewise.  Add FALLTHRU.\n+\t* error.c (dump_type): Adjust fall through comment.\n+\t(dump_decl): Likewise.\n+\t* mangle.c (write_type): Likewise.\n+\t* method.c (synthesized_method_walk): Add FALLTHRU.\n+\t* name-lookup.c (arg_assoc_type): Likewise.\n+\t* parser.c (cp_lexer_print_token): Adjust fall through comment.\n+\t(cp_parser_primary_expression): Add FALLTHRU.\n+\t(cp_parser_operator): Likewise.\n+\t* pt.c (find_parameter_packs_r): Likewise.\n+\t(tsubst_aggr_type): Adjust fall through comment.\n+\t* semantics.c (finish_omp_clauses): Add FALLTHRU.\n+\t* tree.c (lvalue_kind): Likewise.\n+\n 2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/63240"}, {"sha": "0203cd1c7b2673659a9c4d1b484c40f25d6c4928", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2421,6 +2421,7 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n     case PREDECREMENT_EXPR:\n       if (TREE_CODE (type1) == BOOLEAN_TYPE)\n \treturn;\n+      /* FALLTHRU */\n     case POSTINCREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n       if (ARITHMETIC_TYPE_P (type1) || TYPE_PTROB_P (type1))\n@@ -2457,6 +2458,7 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n     case UNARY_PLUS_EXPR: /* unary + */\n       if (TYPE_PTR_P (type1))\n \tbreak;\n+      /* FALLTHRU */\n     case NEGATE_EXPR:\n       if (ARITHMETIC_TYPE_P (type1))\n \tbreak;\n@@ -2594,6 +2596,7 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n     case PLUS_EXPR:\n       if (ARITHMETIC_TYPE_P (type1) && ARITHMETIC_TYPE_P (type2))\n \tbreak;\n+      /* FALLTHRU */\n     case ARRAY_REF:\n       if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type1) && TYPE_PTROB_P (type2))\n \t{\n@@ -2674,6 +2677,7 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n \t      type2 = ptrdiff_type_node;\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n \tcase MULT_EXPR:\n \tcase TRUNC_DIV_EXPR:\n \t  if (ARITHMETIC_TYPE_P (type1) && ARITHMETIC_TYPE_P (type2))\n@@ -3966,7 +3970,7 @@ build_integral_nontype_arg_conv (tree type, tree expr, tsubst_flags_t complain)\n \tif (complain & tf_error)\n \t  error_at (loc, \"conversion from %qT to %qT not considered for \"\n \t\t    \"non-type template argument\", t, type);\n-\t/* and fall through.  */\n+\t/* fall through.  */\n \n       default:\n \tconv = NULL;\n@@ -5493,6 +5497,7 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n     case MODIFY_EXPR:\n       if (code2 != NOP_EXPR)\n \tbreak;\n+      /* FALLTHRU */\n     case COMPONENT_REF:\n     case ARRAY_REF:\n       memonly = true;\n@@ -6661,7 +6666,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n       if (! MAYBE_CLASS_TYPE_P (totype))\n \treturn expr;\n-      /* Else fall through.  */\n+      /* Fall through.  */\n     case ck_base:\n       if (convs->kind == ck_base && !convs->need_temporary_p)\n \t{"}, {"sha": "3ad1b8910fcc67c7defa77549ba7db11f97c4c2e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -7413,7 +7413,7 @@ fixed_type_or_null (tree instance, int *nonnull, int *cdtorp)\n \t    *nonnull = 1;\n \t  return TREE_TYPE (TREE_TYPE (instance));\n \t}\n-      /* fall through...  */\n+      /* fall through.  */\n     case TARGET_EXPR:\n     case PARM_DECL:\n     case RESULT_DECL:"}, {"sha": "5d97a4be4f1abedc076dc29e3b9de1bde3e5b1c2", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -3699,7 +3699,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (is_capture_proxy (t))\n \treturn cxx_eval_constant_expression (ctx, DECL_VALUE_EXPR (t),\n \t\t\t\t\t     lval, non_constant_p, overflow_p);\n-      /* else fall through.  */\n+      /* fall through */\n     case CONST_DECL:\n       /* We used to not check lval for CONST_DECL, but darwin.c uses\n \t CONST_DECL for aggregate constants.  */\n@@ -3988,7 +3988,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t    overflow_p);\n       if (r)\n \tbreak;\n-      /* else fall through */\n+      /* fall through */\n \n     case PLUS_EXPR:\n     case MINUS_EXPR:\n@@ -5167,7 +5167,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n       /* A destructor.  */\n       if (TYPE_P (TREE_OPERAND (t, 0)))\n \treturn true;\n-      /* else fall through.  */\n+      /* fall through.  */\n \n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n@@ -5269,6 +5269,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t    }\n \t  return false;\n \t}\n+      /* FALLTHRU */\n     case INIT_EXPR:\n       return RECUR (TREE_OPERAND (t, 1), rval);\n "}, {"sha": "6d514d0e99e2564ad1cc43f24e8ef06df811823d", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -659,7 +659,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       cp_gimplify_init_expr (expr_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n-      /* Otherwise fall through.  */\n+      /* Fall through.  */\n     case MODIFY_EXPR:\n     modify_expr_case:\n       {\n@@ -2068,6 +2068,7 @@ cp_fold (tree x)\n \n     case VIEW_CONVERT_EXPR:\n       rval_ops = false;\n+      /* FALLTHRU */\n     case CONVERT_EXPR:\n     case NOP_EXPR:\n     case NON_LVALUE_EXPR:\n@@ -2116,6 +2117,7 @@ cp_fold (tree x)\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       rval_ops = false;\n+      /* FALLTHRU */\n     case CONJ_EXPR:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n@@ -2168,6 +2170,7 @@ cp_fold (tree x)\n     case COMPOUND_EXPR:\n     case MODIFY_EXPR:\n       rval_ops = false;\n+      /* FALLTHRU */\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:"}, {"sha": "977c6652211ecddd24d550c43b4e4bb0d03f23ca", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1663,7 +1663,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n       case INTEGER_TYPE:\n \tif ((desires & WANT_NULL) && null_ptr_cst_p (expr))\n \t  return expr;\n-\t/* else fall through...  */\n+\t/* fall through.  */\n \n       case BOOLEAN_TYPE:\n \treturn (desires & WANT_INT) ? expr : NULL_TREE;"}, {"sha": "370476c1916e158a09005e5c2ff31ad474465597", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -153,6 +153,7 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n     case USING_DECL:\n     case TEMPLATE_DECL:\n       t = DECL_NAME (t);\n+      /* FALLTHRU */\n \n     case IDENTIFIER_NODE:\n       if (t == NULL)\n@@ -280,6 +281,7 @@ pp_cxx_qualified_id (cxx_pretty_printer *pp, tree t)\n \t functions and some function templates.  */\n     case OVERLOAD:\n       t = OVL_CURRENT (t);\n+      /* FALLTHRU */\n     case FUNCTION_DECL:\n       if (DECL_FUNCTION_MEMBER_P (t))\n \tpp_cxx_nested_name_specifier (pp, DECL_CONTEXT (t));\n@@ -331,7 +333,7 @@ cxx_pretty_printer::constant (tree t)\n \t  pp_string (this, \"nullptr\");\n \t  break;\n \t}\n-      /* else fall through.  */\n+      /* fall through.  */\n \n     default:\n       c_pretty_printer::constant (t);\n@@ -417,6 +419,7 @@ cxx_pretty_printer::primary_expression (tree t)\n \n     case BASELINK:\n       t = BASELINK_FUNCTIONS (t);\n+      /* FALLTHRU */\n     case VAR_DECL:\n     case PARM_DECL:\n     case FIELD_DECL:\n@@ -872,7 +875,7 @@ pp_cxx_pm_expression (cxx_pretty_printer *pp, tree t)\n \t  pp_cxx_qualified_id (pp, t);\n \t  break;\n \t}\n-      /* Else fall through.  */\n+      /* Fall through.  */\n     case MEMBER_REF:\n     case DOTSTAR_EXPR:\n       pp_cxx_pm_expression (pp, TREE_OPERAND (t, 0));\n@@ -1057,6 +1060,7 @@ cxx_pretty_printer::expression (tree t)\n \n     case OVERLOAD:\n       t = OVL_CURRENT (t);\n+      /* FALLTHRU */\n     case VAR_DECL:\n     case PARM_DECL:\n     case FIELD_DECL:\n@@ -1267,7 +1271,9 @@ cxx_pretty_printer::declaration_specifiers (tree t)\n       else if (DECL_NONSTATIC_MEMBER_FUNCTION_P (t))\n \tdeclaration_specifiers (TREE_TYPE (TREE_TYPE (t)));\n       else\n-\tdefault:\n+        c_pretty_printer::declaration_specifiers (t);\n+      break;\n+    default:\n         c_pretty_printer::declaration_specifiers (t);\n       break;\n     }\n@@ -1364,7 +1370,7 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n \t  pp_cxx_ptr_operator (pp, t);\n \t  break;\n \t}\n-      /* else fall through */\n+      /* fall through */\n \n     default:\n       if (!(TREE_CODE (t) == FUNCTION_DECL && DECL_CONSTRUCTOR_P (t)))\n@@ -1406,6 +1412,7 @@ pp_cxx_ptr_operator (cxx_pretty_printer *pp, tree t)\n \t  pp_star (pp);\n \t  break;\n \t}\n+      /* FALLTHRU */\n     case OFFSET_TYPE:\n       if (TYPE_PTRMEM_P (t))\n \t{\n@@ -1416,7 +1423,7 @@ pp_cxx_ptr_operator (cxx_pretty_printer *pp, tree t)\n \t  pp_cxx_cv_qualifier_seq (pp, t);\n \t  break;\n \t}\n-      /* else fall through.  */\n+      /* fall through.  */\n \n     default:\n       pp_unsupported_tree (pp, t);"}, {"sha": "58cd48c0a1406048f8a02e39ba78372ca09095ef", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -450,7 +450,7 @@ dump_type (cxx_pretty_printer *pp, tree t, int flags)\n \t\t     ? DECL_ORIGINAL_TYPE (t) : TREE_TYPE (t), flags);\n \t  break;\n \t}\n-      /* Else fall through.  */\n+      /* Fall through.  */\n \n     case TEMPLATE_DECL:\n     case NAMESPACE_DECL:\n@@ -1065,7 +1065,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \t  dump_type (pp, DECL_CONTEXT (t), flags);\n \t  break;\n \t}\n-      /* Else fall through.  */\n+      /* Fall through.  */\n     case FIELD_DECL:\n     case PARM_DECL:\n       dump_simple_decl (pp, t, TREE_TYPE (t), flags);"}, {"sha": "d8b5c45577f3ee126ba785bd7e77e5c4e0f6e0ef", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2169,7 +2169,7 @@ write_type (tree type)\n \t\t  ++is_builtin_type;\n \t\t  break;\n \t\t}\n-\t      /* else fall through.  */\n+\t      /* fall through.  */\n \t    case TEMPLATE_PARM_INDEX:\n \t      write_template_param (type);\n \t      break;"}, {"sha": "75342ae5d28f2ea3158227f85724e2a5898dad18", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1420,6 +1420,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n     case sfk_move_constructor:\n     case sfk_move_assignment:\n       move_p = true;\n+      /* FALLTHRU */\n     case sfk_copy_constructor:\n     case sfk_copy_assignment:\n       copy_arg_p = true;"}, {"sha": "f6ba4d277650106d4e5d1068927167f63622eba3", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5659,6 +5659,7 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (type))\n \treturn arg_assoc_type (k, TYPE_PTRMEMFUNC_FN_TYPE (type));\n+      /* FALLTHRU */\n     case UNION_TYPE:\n       return arg_assoc_class (k, type);\n     case POINTER_TYPE:"}, {"sha": "48510d0927fd00e58c3baa80dc2c7c5fc14d53af", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1268,7 +1268,7 @@ cp_lexer_print_token (FILE * stream, cp_token *token)\n \t For example, `struct' is mapped to an INTEGER_CST.  */\n       if (!identifier_p (token->u.value))\n \tbreak;\n-      /* else fall through */\n+      /* fall through */\n     case CPP_NAME:\n       fputs (IDENTIFIER_POINTER (token->u.value), stream);\n       break;\n@@ -5143,6 +5143,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t      cp_parser_skip_to_end_of_block_or_statement (parser);\n \t      return error_mark_node;\n \t    }\n+\t  /* FALLTHRU */\n \tdefault:\n \t  cp_parser_error (parser, \"expected primary-expression\");\n \t  return error_mark_node;\n@@ -14096,6 +14097,7 @@ cp_parser_operator (cp_parser* parser)\n     case CPP_UTF8STRING:\n     case CPP_UTF8STRING_USERDEF:\n       utf8 = true;\n+      /* FALLTHRU */\n     case CPP_STRING:\n     case CPP_WSTRING:\n     case CPP_STRING16:"}, {"sha": "5d4f5efc79d5af272722d0376cbec1da5a484b84", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -3450,6 +3450,7 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \n     case TEMPLATE_TYPE_PARM:\n       t = TYPE_MAIN_VARIANT (t);\n+      /* FALLTHRU */\n     case TEMPLATE_TEMPLATE_PARM:\n       /* If the placeholder appears in the decl-specifier-seq of a function\n \t parameter pack (14.6.3), or the type-specifier-seq of a type-id that\n@@ -11466,7 +11467,7 @@ tsubst_aggr_type (tree t,\n       if (TYPE_PTRMEMFUNC_P (t))\n \treturn tsubst (TYPE_PTRMEMFUNC_FN_TYPE (t), args, complain, in_decl);\n \n-      /* Else fall through.  */\n+      /* Fall through.  */\n     case ENUMERAL_TYPE:\n     case UNION_TYPE:\n       if (TYPE_TEMPLATE_INFO (t) && uses_template_parms (t))"}, {"sha": "9ab8439077a3e6c2093c88d8b66f4e15bf62b35a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -6225,11 +6225,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      OMP_CLAUSE_OPERAND (c, 1) = t;\n \t    }\n \t  /* Check operand 0, the num argument.  */\n+\t  /* FALLTHRU */\n \n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n \t  if (OMP_CLAUSE_OPERAND (c, 0) == NULL_TREE)\n \t    break;\n+\t  /* FALLTHRU */\n \n \tcase OMP_CLAUSE_NUM_TASKS:\n \tcase OMP_CLAUSE_NUM_TEAMS:"}, {"sha": "6d254ddbf14600b6c94310f5a4a03d17b3a71712", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -141,11 +141,13 @@ lvalue_kind (const_tree ref)\n \t lvalues.  */\n       if (! TREE_STATIC (ref))\n \treturn clk_none;\n+      /* FALLTHRU */\n     case VAR_DECL:\n       if (TREE_READONLY (ref) && ! TREE_STATIC (ref)\n \t  && DECL_LANG_SPECIFIC (ref)\n \t  && DECL_IN_AGGR_P (ref))\n \treturn clk_none;\n+      /* FALLTHRU */\n     case INDIRECT_REF:\n     case ARROW_EXPR:\n     case ARRAY_REF:"}, {"sha": "ad256c706a0a6c5cb1f1c0932b42efc4b5d08f53", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2867,7 +2867,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t disguised VAR_DECLs like Out parameters in Ada.  */\n       gcc_assert (TREE_CODE (decl) == VAR_DECL);\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case RESULT_DECL:\n     case VAR_DECL:"}, {"sha": "9cd647a32135a8a9e1883e69d41a7fe5ed257f7c", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2875,7 +2875,7 @@ df_uses_record (struct df_collection_rec *collection_rec,\n \t  df_uses_record (collection_rec, loc, ref_type, bb, insn_info, flags);\n \t  return;\n \t}\n-      /* ... Fall through ...  */\n+      /* Fall through */\n \n     case REG:\n       df_ref_record (DF_REF_REGULAR, collection_rec,"}, {"sha": "d437b974526509b1a18aa239d93ba98cdef38a7b", "filename": "gcc/dojump.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -461,12 +461,14 @@ do_jump (tree exp, rtx_code_label *if_false_label,\n           || TREE_CODE (TREE_OPERAND (exp, 0)) == ARRAY_REF\n           || TREE_CODE (TREE_OPERAND (exp, 0)) == ARRAY_RANGE_REF)\n         goto normal;\n+      /* FALLTHRU */\n     case CONVERT_EXPR:\n       /* If we are narrowing the operand, we have to do the compare in the\n          narrower mode.  */\n       if ((TYPE_PRECISION (TREE_TYPE (exp))\n            < TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n         goto normal;\n+      /* FALLTHRU */\n     case NON_LVALUE_EXPR:\n     case ABS_EXPR:\n     case NEGATE_EXPR:\n@@ -610,6 +612,7 @@ do_jump (tree exp, rtx_code_label *if_false_label,\n \tgoto normal;\n \n       /* Boolean comparisons can be compiled as TRUTH_AND_EXPR.  */\n+      /* FALLTHRU */\n \n     case TRUTH_AND_EXPR:\n       /* High branch cost, expand as the bitwise AND of the conditions."}, {"sha": "1290b96931257885b6b81ecf50789cdcd3adbf31", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -13338,6 +13338,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       if (!subreg_lowpart_p (rtl))\n \tbreak;\n       inner = SUBREG_REG (rtl);\n+      /* FALLTHRU */\n     case TRUNCATE:\n       if (inner == NULL_RTX)\n         inner = XEXP (rtl, 0);\n@@ -13675,7 +13676,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t\t: -GET_MODE_UNIT_SIZE (mem_mode),\n \t\t\t\t\tmode));\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case PLUS:\n     plus:\n@@ -15601,7 +15602,7 @@ resolve_args_picking_1 (dw_loc_descr_ref loc, unsigned initial_frame_offset,\n \t  if (!resolve_args_picking_1 (l->dw_loc_next, frame_offset_, dpi,\n \t\t\t\t       frame_offsets))\n \t    return false;\n-\t  /* Fall through... */\n+\t  /* Fall through. */\n \n \tcase DW_OP_skip:\n \t  l = l->dw_loc_oprnd1.v.val_loc;\n@@ -16437,7 +16438,7 @@ loc_list_from_tree_1 (tree loc, int want_address,\n \t\t      TREE_OPERAND (loc, 1), TREE_OPERAND (loc, 0));\n       }\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case COND_EXPR:\n       {"}, {"sha": "674c8f08928b99fc0abf087b5ec1f7c9b08f0fe7", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5173,7 +5173,7 @@ make_tree (tree type, rtx x)\n       t = SYMBOL_REF_DECL (x);\n       if (t)\n \treturn fold_convert (type, build_fold_addr_expr (t));\n-      /* else fall through.  */\n+      /* fall through.  */\n \n     default:\n       t = build_decl (RTL_LOCATION (x), VAR_DECL, NULL_TREE, type);"}, {"sha": "391a8058654bd8a40818e5184d70fa7c5fb868fb", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -8406,6 +8406,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t offset to have matching modes.  */\n       else if (TYPE_PRECISION (sizetype) > TYPE_PRECISION (type))\n \ttreeop1 = fold_convert_loc (loc, type, treeop1);\n+      /* FALLTHRU */\n \n     case PLUS_EXPR:\n       /* If we are adding a constant, a VAR_DECL that is sp, fp, or ap, and\n@@ -9574,9 +9575,9 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n     switch (TREE_CODE_LENGTH (code))\n       {\n \tdefault:\n-\tcase 3: treeop2 = TREE_OPERAND (exp, 2);\n-\tcase 2: treeop1 = TREE_OPERAND (exp, 1);\n-\tcase 1: treeop0 = TREE_OPERAND (exp, 0);\n+\tcase 3: treeop2 = TREE_OPERAND (exp, 2); /* FALLTHRU */\n+\tcase 2: treeop1 = TREE_OPERAND (exp, 1); /* FALLTHRU */\n+\tcase 1: treeop0 = TREE_OPERAND (exp, 0); /* FALLTHRU */\n \tcase 0: break;\n       }\n   ops.code = code;\n@@ -9748,7 +9749,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  && (TREE_STATIC (exp) || DECL_EXTERNAL (exp)))\n \tlayout_decl (exp, 0);\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case FUNCTION_DECL:\n     case RESULT_DECL:\n@@ -9956,7 +9957,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  return original_target;\n \t}\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case STRING_CST:\n       temp = expand_expr_constant (exp, 1, modifier);"}, {"sha": "30c1e0d440a6b6cce82a80a827d486b88c5ac1c2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1300,7 +1300,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n \t    return do_mpc_arg2 (arg1, arg2, type,\n                                 /* do_nonfinite= */ folding_initializer,\n \t\t\t\tmpc_div);\n-\t  /* Fallthru ... */\n+\t  /* Fallthru. */\n \tcase TRUNC_DIV_EXPR:\n \tcase CEIL_DIV_EXPR:\n \tcase FLOOR_DIV_EXPR:\n@@ -3696,7 +3696,7 @@ fold_truth_not_expr (location_t loc, tree arg)\n       if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE)\n \treturn build1_loc (loc, TRUTH_NOT_EXPR, type, arg);\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case FLOAT_EXPR:\n       loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n@@ -5101,6 +5101,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       case UNLT_EXPR:\n \tif (flag_trapping_math)\n \t  break;\n+\t/* FALLTHRU */\n       case LE_EXPR:\n       case LT_EXPR:\n \tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n@@ -10323,6 +10324,7 @@ fold_binary_loc (location_t loc,\n       /* If first arg is constant zero, return it.  */\n       if (integer_zerop (arg0))\n \treturn fold_convert_loc (loc, type, arg0);\n+      /* FALLTHRU */\n     case TRUTH_AND_EXPR:\n       /* If either arg is constant true, drop it.  */\n       if (TREE_CODE (arg0) == INTEGER_CST && ! integer_zerop (arg0))\n@@ -10378,6 +10380,7 @@ fold_binary_loc (location_t loc,\n       /* If first arg is constant true, return it.  */\n       if (TREE_CODE (arg0) == INTEGER_CST && ! integer_zerop (arg0))\n \treturn fold_convert_loc (loc, type, arg0);\n+      /* FALLTHRU */\n     case TRUTH_OR_EXPR:\n       /* If either arg is constant zero, drop it.  */\n       if (TREE_CODE (arg0) == INTEGER_CST && integer_zerop (arg0))\n@@ -11222,7 +11225,7 @@ contains_label_1 (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case GOTO_EXPR:\n       *walk_subtrees = 0;\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     default:\n       return NULL_TREE;\n@@ -12602,7 +12605,7 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n \t      < TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (top, 0)))))\n \treturn 0;\n \n-      /* .. fall through ...  */\n+      /* fall through */\n \n     case SAVE_EXPR:\n       return multiple_of_p (type, TREE_OPERAND (top, 0), bottom);\n@@ -12657,7 +12660,7 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n \t    return 1;\n \t}\n \n-      /* .. fall through ...  */\n+      /* fall through */\n \n     default:\n       return 0;"}, {"sha": "95cd07539254881b2f1e970d906c7169a3e69ee4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,15 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* decl.c (match_attr_spec): Add FALLTHRU.\n+\t* primary.c (match_arg_list_function): Likewise.\n+\t* resolve.c (resolve_operator): Adjust fall through comment.\n+\t(fixup_charlen): Add FALLTHRU.\n+\t(resolve_allocate_expr): Adjust fall through comment.\n+\t* trans-array.c (gfc_conv_ss_startstride): Add FALLTHRU.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_len): Adjust fall through\n+\tcomment.\n+\n 2016-08-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* check.c (gfc_check_random_seed): Use new seed size in check."}, {"sha": "25b0df7130f876a65c22d085a51d2aeb90d9f76b", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -3927,6 +3927,7 @@ match_attr_spec (void)\n \t\t      d = DECL_CODIMENSION;\n \t\t      break;\n \t\t    }\n+\t\t  /* FALLTHRU */\n \t\tcase 'n':\n \t\t  if (match_string_p (\"tiguous\"))\n \t\t    {"}, {"sha": "396edf2b5815506cada8517b853c0e9f200260a4", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1686,18 +1686,21 @@ match_arg_list_function (gfc_actual_arglist *result)\n \t      result->name = \"%LOC\";\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n \tcase 'r':\n \t  if (strncmp (name, \"ref\", 3) == 0)\n \t    {\n \t      result->name = \"%REF\";\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n \tcase 'v':\n \t  if (strncmp (name, \"val\", 3) == 0)\n \t    {\n \t      result->name = \"%VAL\";\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n \tdefault:\n \t  m = MATCH_ERROR;\n \t  goto cleanup;"}, {"sha": "d8cfdd275b6874a0a20d2a798202151066786a50", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -3542,7 +3542,7 @@ resolve_operator (gfc_expr *e)\n       if (!gfc_resolve_expr (e->value.op.op2))\n \treturn false;\n \n-    /* Fall through...  */\n+    /* Fall through.  */\n \n     case INTRINSIC_NOT:\n     case INTRINSIC_UPLUS:\n@@ -3660,7 +3660,7 @@ resolve_operator (gfc_expr *e)\n \t  goto bad_op;\n \t}\n \n-      /* Fall through...  */\n+      /* Fall through.  */\n \n     case INTRINSIC_EQ:\n     case INTRINSIC_EQ_OS:\n@@ -5419,14 +5419,17 @@ fixup_charlen (gfc_expr *e)\n     {\n     case EXPR_OP:\n       gfc_resolve_character_operator (e);\n+      /* FALLTHRU */\n \n     case EXPR_ARRAY:\n       if (e->expr_type == EXPR_ARRAY)\n \tgfc_resolve_character_array_constructor (e);\n+      /* FALLTHRU */\n \n     case EXPR_SUBSTRING:\n       if (!e->ts.u.cl && e->ref)\n \tgfc_resolve_substring_charlen (e);\n+      /* FALLTHRU */\n \n     default:\n       if (!e->ts.u.cl)\n@@ -7301,7 +7304,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n \t      && ar->stride[i] == NULL)\n \t    break;\n \n-\t  /* Fall Through...  */\n+\t  /* Fall through.  */\n \n \tcase DIMEN_UNKNOWN:\n \tcase DIMEN_VECTOR:"}, {"sha": "bd232c28cc330ce14e71645aa1805489c015a54a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -4041,6 +4041,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t      continue;\n \t    }\n \n+\t  /* FALLTHRU */\n \tcase GFC_SS_CONSTRUCTOR:\n \tcase GFC_SS_FUNCTION:\n \t  for (n = 0; n < ss->dimen; n++)"}, {"sha": "17dd8c266a2279ca0a6a79078d572fa59cf493ee", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5329,7 +5329,7 @@ gfc_conv_intrinsic_len (gfc_se * se, gfc_expr * expr)\n \t  break;\n \t}\n \n-      /* Otherwise fall through.  */\n+      /* Fall through.  */\n \n     default:\n       /* Anybody stupid enough to do this deserves inefficient code.  */"}, {"sha": "d5dbf2719c1b5cb42ee007f6fea98168f6dd1ac1", "filename": "gcc/gcov-tool.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgcov-tool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgcov-tool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -547,9 +547,11 @@ process_args (int argc, char **argv)\n         case 'h':\n           print_usage (false);\n           /* Print_usage will exit.  */\n+\t  /* FALLTHRU */\n         case 'v':\n           print_version ();\n           /* Print_version will exit.  */\n+\t  /* FALLTHRU */\n         default:\n           print_usage (true);\n           /* Print_usage will exit.  */"}, {"sha": "1668e71c5eec57cebfd37ef1fee92a00601988e8", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -888,6 +888,7 @@ check_attr_test (file_location loc, rtx exp, attr_desc *attr)\n \t  ATTR_IND_SIMPLIFIED_P (exp) = 1;\n \t  break;\n \t}\n+      /* FALLTHRU */\n     default:\n       fatal_at (loc, \"invalid operator `%s' in definition of attribute\"\n \t\t\" `%s'\", GET_RTX_NAME (GET_CODE (exp)), attr->name);\n@@ -3458,6 +3459,7 @@ write_test_expr (FILE *outf, rtx exp, unsigned int attrs_cached, int flags,\n     case GE: case GT:\n     case LE: case LT:\n       comparison_operator = FLG_BITWISE;\n+      /* FALLTHRU */\n \n     case PLUS:   case MINUS:  case MULT:     case DIV:      case MOD:\n     case AND:    case IOR:    case XOR:"}, {"sha": "fec80fd00b6a9766f0866b3dd9ac9298f3710019", "filename": "gcc/genconfig.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -83,6 +83,7 @@ walk_insn_part (rtx part, int recog_p, int non_pc_set_src)\n     case MATCH_OP_DUP:\n     case MATCH_PAR_DUP:\n       ++dup_operands_seen_this_insn;\n+      /* FALLTHRU */\n     case MATCH_SCRATCH:\n     case MATCH_PARALLEL:\n     case MATCH_OPERATOR:"}, {"sha": "4c9dfc65664a5a15c1bff80d59ae675498769f55", "filename": "gcc/genpreds.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -51,12 +51,12 @@ validate_exp (rtx exp, const char *name, file_location loc)\n     case IF_THEN_ELSE:\n       if (validate_exp (XEXP (exp, 2), name, loc))\n \treturn true;\n-      /* else fall through */\n+      /* fall through */\n     case AND:\n     case IOR:\n       if (validate_exp (XEXP (exp, 1), name, loc))\n \treturn true;\n-      /* else fall through */\n+      /* fall through */\n     case NOT:\n       return validate_exp (XEXP (exp, 0), name, loc);\n \n@@ -174,12 +174,12 @@ needs_variable (rtx exp, const char *var)\n     case IF_THEN_ELSE:\n       if (needs_variable (XEXP (exp, 2), var))\n \treturn true;\n-      /* else fall through */\n+      /* fall through */\n     case AND:\n     case IOR:\n       if (needs_variable (XEXP (exp, 1), var))\n \treturn true;\n-      /* else fall through */\n+      /* fall through */\n     case NOT:\n       return needs_variable (XEXP (exp, 0), var);\n "}, {"sha": "7e3aad33000a7a990d11b11aa5c6ac7470f64afa", "filename": "gcc/gensupport.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1038,6 +1038,7 @@ get_alternatives_number (rtx pattern, int *n_alt, file_location loc)\n \tcase 'V':\n \t  if (XVEC (pattern, i) == NULL)\n \t    break;\n+\t  /* FALLTHRU */\n \n \tcase 'E':\n \t  for (j = XVECLEN (pattern, i) - 1; j >= 0; --j)\n@@ -2156,6 +2157,7 @@ subst_dup (rtx pattern, int n_alt, int n_subst_alt)\n \tcase 'V':\n \t  if (XVEC (pattern, i) == NULL)\n \t    break;\n+\t  /* FALLTHRU */\n \tcase 'E':\n \t  if (code != MATCH_DUP && code != MATCH_OP_DUP)\n \t    for (j = XVECLEN (pattern, i) - 1; j >= 0; --j)"}, {"sha": "12d9a9c577bec60a3a461c45c1257ec71c6e1326", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -517,8 +517,10 @@ dump_gimple_assign (pretty_printer *buffer, gassign *gs, int spc, int flags)\n \t{\n \tcase 4:\n \t  arg3 = gimple_assign_rhs3 (gs);\n+\t  /* FALLTHRU */\n \tcase 3:\n \t  arg2 = gimple_assign_rhs2 (gs);\n+\t  /* FALLTHRU */\n \tcase 2:\n \t  arg1 = gimple_assign_rhs1 (gs);\n \t  break;"}, {"sha": "1e43dbb51cd8cc94763ede6cdc91660a5170bb95", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5190,7 +5190,7 @@ gimplify_addr_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (integer_zerop (TREE_OPERAND (op0, 1)))\n \tgoto do_indirect_ref;\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n       /* If we see a call to a declared builtin or see its address\n@@ -6941,6 +6941,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    case OACC_DATA:\n \t      if (TREE_CODE (TREE_TYPE (decl)) != ARRAY_TYPE)\n \t\tbreak;\n+\t      /* FALLTHRU */\n \t    case OMP_TARGET_DATA:\n \t    case OMP_TARGET_ENTER_DATA:\n \t    case OMP_TARGET_EXIT_DATA:\n@@ -9964,6 +9965,7 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n     case tcc_comparison:\n       saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p, lhs_addr,\n \t\t\t\t     lhs_var);\n+      /* FALLTHRU */\n     case tcc_unary:\n       saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p, lhs_addr,\n \t\t\t\t     lhs_var);\n@@ -9978,6 +9980,7 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n \tcase TRUTH_XOR_EXPR:\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p,\n \t\t\t\t\t lhs_addr, lhs_var);\n+\t  /* FALLTHRU */\n \tcase TRUTH_NOT_EXPR:\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n \t\t\t\t\t lhs_addr, lhs_var);"}, {"sha": "0eb564ad2a25893f5751a0caeb72af78af1d6595", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1496,7 +1496,7 @@ substitute_ssa_name (tree exp, tree f, tree r)\n \tif (exp == f)\n \t  return r;\n \n-\t/* Fall through...  */\n+\t/* Fall through.  */\n \n       case tcc_exceptional:\n       case tcc_unary:"}, {"sha": "fb6d8a2dd8d5d8fa802a8c63501ba363bf349895", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -4519,7 +4519,7 @@ get_address_from_value (tree val, hsa_bb *hbb)\n     case INTEGER_CST:\n       if (tree_fits_shwi_p (val))\n \treturn new hsa_op_address (NULL, NULL, tree_to_shwi (val));\n-      /* Otherwise fall-through */\n+      /* fall-through */\n \n     default:\n       HSA_SORRY_ATV (EXPR_LOCATION (val),"}, {"sha": "f29d929cf674ecc409e2e765c94779a98b5bcec1", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1643,7 +1643,7 @@ sem_function::hash_stmt (gimple *stmt, inchash::hash &hstate)\n \t  add_type (TREE_TYPE (gimple_assign_lhs (stmt)), two);\n \t  break;\n \t}\n-      /* ... fall through ... */\n+      /* fall through */\n     case GIMPLE_CALL:\n     case GIMPLE_ASM:\n     case GIMPLE_COND:"}, {"sha": "f8a59e3cd6475acdfc07e43834c474ff8b4bef86", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1832,6 +1832,7 @@ ira_setup_alts (rtx_insn *insn, HARD_REG_SET &alts)\n \t\t  case '#':\n \t\t  case ',':\n \t\t    c = '\\0';\n+\t\t    /* FALLTHRU */\n \t\t  case '\\0':\n \t\t    len = 0;\n \t\t    break;"}, {"sha": "ba2ab906312d96884d2be017a59b911e5ae6a74e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,10 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* expr.c (java_truthvalue_conversion): Adjust fall through comment.\n+\t* jcf-io.c (verify_constant_pool): Likewise.\n+\t* typeck.c (promote_type): Likewise.\n+\n 2016-08-02  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* expr.c (push_value): Only call flush_quick_stack for non-constant"}, {"sha": "ba798ca3165087d7318ad9029d3ff54691b7432b", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -192,7 +192,7 @@ java_truthvalue_conversion (tree expr)\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n           >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n         return java_truthvalue_conversion (TREE_OPERAND (expr, 0));\n-      /* fall through to default */\n+      /* fall through */\n \n     default:\n       return fold_build2 (NE_EXPR, boolean_type_node,"}, {"sha": "cc8616b86381f9bc6ef15dc1bdd5b358700de29e", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -471,7 +471,7 @@ verify_constant_pool (JCF *jcf)\n \t  if (n <= 0 || n >= JPOOL_SIZE(jcf)\n \t      || JPOOL_TAG (jcf, n) != CONSTANT_Utf8)\n \t    return i;\n-\t  /* ... fall through ... */\n+\t  /* fall through */\n \tcase CONSTANT_Class:\n \tcase CONSTANT_String:\n \t  n = JPOOL_USHORT1 (jcf, i);"}, {"sha": "61394a982da5c18e61efa68e952ac2114ce1dae0", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -341,7 +341,7 @@ promote_type (tree type)\n \t    return promoted_byte_type_node;\n \t  return int_type_node;\n \t}\n-      /* ... else fall through ... */\n+      /* fall through */\n     default:\n       return type;\n     }"}, {"sha": "08cc39011d1f589fd6a713f7975509145e86b47d", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -484,7 +484,7 @@ lra_eliminate_regs_1 (rtx_insn *insn, rtx x, machine_mode mem_mode,\n \t    return gen_rtx_MULT (Pmode, to, XEXP (x, 1));\n \t}\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case CALL:\n     case COMPARE:\n@@ -536,7 +536,7 @@ lra_eliminate_regs_1 (rtx_insn *insn, rtx x, machine_mode mem_mode,\n \t    }\n \t}\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case INSN_LIST:\n     case INT_LIST:"}, {"sha": "986b159502388a1b5dcb740c3c418d04802ddef1", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -231,6 +231,7 @@ lto_output_tree_ref (struct output_block *ob, tree expr)\n     case VAR_DECL:\n     case DEBUG_EXPR_DECL:\n       gcc_assert (decl_function_context (expr) == NULL || TREE_STATIC (expr));\n+      /* FALLTHRU */\n     case PARM_DECL:\n       streamer_write_record_start (ob, LTO_global_decl_ref);\n       lto_output_var_decl_index (ob->decl_state, ob->main_stream, expr);"}, {"sha": "cf735d125e13f1b327f35794ab1e39ffd2671d8d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,8 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* objc-encoding.c (encode_type): Add FALLTHRU.\n+\n 2016-06-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* objc-act.c (objc_build_component_ref): Update call"}, {"sha": "8fc2e5d74ed06bbddc1f0a6a55a4ef7d95665cdb", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -622,6 +622,7 @@ encode_type (tree type, int curtype, int format)\n \t}\n       /* Else, they are encoded exactly like the integer type that is\n \t used by the compiler to store them.  */\n+      /* FALLTHRU */\n     case INTEGER_TYPE:\n       {\n \tchar c;"}, {"sha": "b927640c1f79db9f9818d83ec8917c764af6798e", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1980,6 +1980,7 @@ common_handle_option (struct gcc_options *opts,\n       opts->x_flag_profile_use = true;\n       value = true;\n       /* No break here - do -fprofile-use processing. */\n+      /* FALLTHRU */\n     case OPT_fprofile_use:\n       enable_fdo_optimizations (opts, opts_set, value);\n       if (!opts_set->x_flag_profile_reorder_functions)\n@@ -1996,6 +1997,7 @@ common_handle_option (struct gcc_options *opts,\n       opts->x_flag_auto_profile = true;\n       value = true;\n       /* No break here - do -fauto-profile processing. */\n+      /* FALLTHRU */\n     case OPT_fauto_profile:\n       enable_fdo_optimizations (opts, opts_set, value);\n       if (!opts_set->x_flag_profile_correction)\n@@ -2009,6 +2011,7 @@ common_handle_option (struct gcc_options *opts,\n       opts->x_profile_data_prefix = xstrdup (arg);\n       value = true;\n       /* No break here - do -fprofile-generate processing. */\n+      /* FALLTHRU */\n     case OPT_fprofile_generate:\n       if (!opts_set->x_profile_arc_flag)\n \topts->x_profile_arc_flag = value;"}, {"sha": "4614e356f7aa8b1263f9a85a866f3638a8292d86", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1163,6 +1163,7 @@ read_rtx_code (const char *code_name)\n \t    break;\n \t  }\n \t/* Now process the vector.  */\n+\t/* FALLTHRU */\n \n       case 'E':\n \t{"}, {"sha": "25f0a5b1466300cc966f0ca8b03736934987de98", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2667,6 +2667,7 @@ round_for_format (const struct real_format *fmt, REAL_VALUE_TYPE *r)\n     {\n     underflow:\n       get_zero (r, r->sign);\n+      /* FALLTHRU */\n     case rvc_zero:\n       if (!fmt->has_signed_zero)\n \tr->sign = 0;"}, {"sha": "19ab5744dd05de8f1df09178a2e6176ec9a955f9", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1792,6 +1792,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \n \t     Match any memory and hope things are resolved after reload.  */\n \t  incdec_ok = true;\n+\t  /* FALLTHRU */\n \tdefault:\n \t  cn = lookup_constraint (constraint);\n \t  switch (get_constraint_type (cn))"}, {"sha": "0cda6aa620098c752522add589b42631b382d9fc", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1149,7 +1149,7 @@ reg_scan_mark_refs (rtx x, rtx_insn *insn)\n       if (REG_P (dest) && !REG_ATTRS (dest))\n \tset_reg_attrs_from_value (dest, SET_SRC (x));\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     default:\n       {"}, {"sha": "04cf2125c5b43d7345c4ea503fa381efbdb1521f", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2328,7 +2328,7 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n \n       x = LABEL_REF_LABEL (x);\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case CODE_LABEL:\n       /* If we know nothing about this label, set the desired offsets.  Note\n@@ -2375,7 +2375,7 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n     case JUMP_INSN:\n       set_label_offsets (PATTERN (insn), insn, initial_p);\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case INSN:\n     case CALL_INSN:\n@@ -2690,7 +2690,7 @@ eliminate_regs_1 (rtx x, machine_mode mem_mode, rtx insn,\n \t\t\t       ep->previous_offset * INTVAL (XEXP (x, 1)));\n \t    }\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case CALL:\n     case COMPARE:\n@@ -2737,7 +2737,7 @@ eliminate_regs_1 (rtx x, machine_mode mem_mode, rtx insn,\n \t    }\n \t}\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case INSN_LIST:\n     case INT_LIST:\n@@ -5499,7 +5499,7 @@ reload_reg_reaches_end_p (unsigned int regno, int reloadnum)\n \n       opnum = reload_n_operands;\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case RELOAD_FOR_OUTPUT:\n     case RELOAD_FOR_OUTPUT_ADDRESS:"}, {"sha": "6470c4377ea50150a384e3563e3543aa2d8a2a3a", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -3421,6 +3421,7 @@ commutative_operand_precedence (rtx op)\n       /* Then prefer NEG and NOT.  */\n       if (code == NEG || code == NOT)\n         return 1;\n+      /* FALLTHRU */\n \n     default:\n       return 0;\n@@ -4095,7 +4096,7 @@ rtx_cost (rtx x, machine_mode mode, enum rtx_code outer_code,\n       factor = GET_MODE_SIZE (mode) / UNITS_PER_WORD;\n       if (factor == 0)\n \tfactor = 1;\n-      /* Pass through.  */\n+      /* FALLTHRU */\n     default:\n       total = factor * COSTS_N_INSNS (1);\n     }"}, {"sha": "f6d1c91f7683bbe69c463dbaaa88a336604bbe08", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2036,6 +2036,7 @@ is_exception_free (rtx_insn *insn, int bb_src, int bb_trg)\n       if (is_pfree (insn, bb_src, bb_trg))\n \treturn 1;\n       /* Don't 'break' here: PFREE-candidate is also PRISKY-candidate.  */\n+      /* FALLTHRU */\n     case PRISKY_CANDIDATE:\n       if (!flag_schedule_speculative_load_dangerous\n \t  || is_prisky (insn, bb_src, bb_trg))"}, {"sha": "2085b997416d0275633541eea8e4e90154c88f9b", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -6256,7 +6256,7 @@ simplify_rtx (const_rtx x)\n       if (swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))\n \treturn simplify_gen_binary (code, mode, XEXP (x, 1), XEXP (x, 0));\n \n-      /* Fall through....  */\n+      /* Fall through.  */\n \n     case RTX_BIN_ARITH:\n       return simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));"}, {"sha": "cf7171430f9a35594e72c4512fe00ecd915928c2", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -398,7 +398,7 @@ int_mode_for_mode (machine_mode mode)\n       if (mode == BLKmode)\n \tbreak;\n \n-      /* ... fall through ...  */\n+      /* fall through */\n \n     case MODE_CC:\n     default:"}, {"sha": "26079047219c0f49cc214b5fcdc9e95c8a81508f", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -731,7 +731,7 @@ print_to_asm_out_file (print_switch_type type, const char * text)\n     case SWITCH_TYPE_DESCRIPTIVE:\n       if (ASM_COMMENT_START[0] == 0)\n \tprepend_sep = false;\n-      /* Drop through.  */\n+      /* FALLTHRU */\n     case SWITCH_TYPE_PASSED:\n     case SWITCH_TYPE_ENABLED:\n       if (prepend_sep)\n@@ -761,7 +761,7 @@ print_to_stderr (print_switch_type type, const char * text)\n     case SWITCH_TYPE_PASSED:\n     case SWITCH_TYPE_ENABLED:\n       fputc (' ', stderr);\n-      /* Drop through.  */\n+      /* FALLTHRU */\n \n     case SWITCH_TYPE_DESCRIPTIVE:\n       fputs (text, stderr);"}, {"sha": "4036223e7e609ba2cb056e692ea36b0b590680ce", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5412,7 +5412,7 @@ gimple_verify_flow_info (void)\n \tcase GIMPLE_CALL:\n \t  if (!gimple_call_builtin_p (stmt, BUILT_IN_RETURN))\n \t    break;\n-\t  /* ... fallthru ... */\n+\t  /* fallthru */\n \tcase GIMPLE_RETURN:\n \t  if (!single_succ_p (bb)\n \t      || (single_succ_edge (bb)->flags"}, {"sha": "79f07b029d1d791668ba755e5a555d02b42d7f2d", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -287,6 +287,7 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n \tCASE_CONVERT:\n \t  if (tree_contains_chrecs (op1, NULL))\n \t    return chrec_dont_know;\n+\t  /* FALLTHRU */\n \n \tdefault:\n \t  if (code == PLUS_EXPR || code == POINTER_PLUS_EXPR)\n@@ -304,6 +305,7 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n     CASE_CONVERT:\n       if (tree_contains_chrecs (op0, NULL))\n \treturn chrec_dont_know;\n+      /* FALLTHRU */\n \n     default:\n       switch (TREE_CODE (op1))\n@@ -329,6 +331,7 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n \tCASE_CONVERT:\n \t  if (tree_contains_chrecs (op1, NULL))\n \t    return chrec_dont_know;\n+\t  /* FALLTHRU */\n \n \tdefault:\n \t  {\n@@ -423,6 +426,7 @@ chrec_fold_multiply (tree type,\n \tCASE_CONVERT:\n \t  if (tree_contains_chrecs (op1, NULL))\n \t    return chrec_dont_know;\n+\t  /* FALLTHRU */\n \n \tdefault:\n \t  if (integer_onep (op1))\n@@ -439,6 +443,7 @@ chrec_fold_multiply (tree type,\n     CASE_CONVERT:\n       if (tree_contains_chrecs (op0, NULL))\n \treturn chrec_dont_know;\n+      /* FALLTHRU */\n \n     default:\n       if (integer_onep (op0))\n@@ -461,6 +466,7 @@ chrec_fold_multiply (tree type,\n \tCASE_CONVERT:\n \t  if (tree_contains_chrecs (op1, NULL))\n \t    return chrec_dont_know;\n+\t  /* FALLTHRU */\n \n \tdefault:\n \t  if (integer_onep (op1))\n@@ -1026,6 +1032,7 @@ evolution_function_is_invariant_rec_p (tree chrec, int loopnum)\n       if (!evolution_function_is_invariant_rec_p (TREE_OPERAND (chrec, 1),\n \t\t\t\t\t\t  loopnum))\n \treturn false;\n+      /* FALLTHRU */\n \n     case 1:\n       if (!evolution_function_is_invariant_rec_p (TREE_OPERAND (chrec, 0),\n@@ -1533,12 +1540,15 @@ for_each_scev_op (tree *scev, bool (*cbck) (tree *, void *), void *data)\n     {\n     case 3:\n       for_each_scev_op (&TREE_OPERAND (*scev, 2), cbck, data);\n+      /* FALLTHRU */\n \n     case 2:\n       for_each_scev_op (&TREE_OPERAND (*scev, 1), cbck, data);\n+      /* FALLTHRU */\n \n     case 1:\n       for_each_scev_op (&TREE_OPERAND (*scev, 0), cbck, data);\n+      /* FALLTHRU */\n \n     default:\n       cbck (scev, data);"}, {"sha": "58da248040f2df46bd80b38089bb8b76de28e385", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1685,6 +1685,7 @@ siv_subscript_p (const_tree chrec_a, const_tree chrec_b)\n \t    case POLYNOMIAL_CHREC:\n \t      if (CHREC_VARIABLE (chrec_a) != CHREC_VARIABLE (chrec_b))\n \t\treturn false;\n+\t      /* FALLTHRU */\n \n \t    default:\n \t      return true;\n@@ -3890,6 +3891,7 @@ get_references_in_stmt (gimple *stmt, vec<data_ref_loc, va_heap> *references)\n \t    if (gimple_call_lhs (stmt) == NULL_TREE)\n \t      break;\n \t    ref.is_read = true;\n+\t    /* FALLTHRU */\n \t  case IFN_MASK_STORE:\n \t    ptr = build_int_cst (TREE_TYPE (gimple_call_arg (stmt, 1)), 0);\n \t    align = tree_to_shwi (gimple_call_arg (stmt, 1));"}, {"sha": "6efc30ce5c8201a2c7a96aace306967a5377d3d1", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -3727,7 +3727,7 @@ find_placeholder_in_expr (tree exp, vec<tree> *refs)\n \t    break;\n \t  }\n \n-        /* Fall through...  */\n+        /* Fall through.  */\n \n       case tcc_exceptional:\n       case tcc_unary:\n@@ -3816,7 +3816,7 @@ substitute_in_expr (tree exp, tree f, tree r)\n \tif (exp == f)\n \t  return r;\n \n-        /* Fall through...  */\n+        /* Fall through.  */\n \n       case tcc_exceptional:\n       case tcc_unary:\n@@ -7027,7 +7027,7 @@ type_cache_hasher::equal (type_hash *a, type_hash *b)\n \t\t\t\t   TYPE_VALUES (b->type))))\n \treturn 0;\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case INTEGER_TYPE:\n     case REAL_TYPE:\n@@ -11564,7 +11564,7 @@ walk_type_fields (tree type, walk_tree_fn func, void *data,\n \t  break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case COMPLEX_TYPE:\n       WALK_SUBTREE (TREE_TYPE (type));"}, {"sha": "fdad87459fb7e4fbe7a16ef8a8049a2cb3339f4b", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1056,6 +1056,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n \t\t\t\t\t ? GET_MODE_SIZE (amd->mem_mode)\n \t\t\t\t\t : -GET_MODE_SIZE (amd->mem_mode),\n \t\t\t\t\t GET_MODE (loc)));\n+      /* FALLTHRU */\n     case POST_INC:\n     case POST_DEC:\n       if (addr == loc)\n@@ -1076,6 +1077,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       return addr;\n     case PRE_MODIFY:\n       addr = XEXP (loc, 1);\n+      /* FALLTHRU */\n     case POST_MODIFY:\n       if (addr == loc)\n \taddr = XEXP (loc, 0);\n@@ -3148,7 +3150,7 @@ set_dv_changed (decl_or_value dv, bool newv)\n     case ONEPART_DEXPR:\n       if (newv)\n \tNO_LOC_P (DECL_RTL_KNOWN_SET (dv_as_decl (dv))) = false;\n-      /* Fall through...  */\n+      /* Fall through.  */\n \n     default:\n       DECL_CHANGED (dv_as_decl (dv)) = newv;"}, {"sha": "e747d2c4721cee34d05e21e9c7eaee9906da7f71", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -589,6 +589,7 @@ default_function_section (tree decl, enum node_frequency freq,\n            these ELF section.  */\n         if (!in_lto_p || !flag_profile_values)\n           return get_named_text_section (decl, \".text.hot\", NULL);\n+\t/* FALLTHRU */\n       default:\n \treturn NULL;\n     }"}, {"sha": "c049599784b0d9e46ad80ada16d0889b3a0f9580", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,13 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* lex.c (search_line_fast): Add FALLTHRU.\n+\t(_cpp_lex_direct): Likewise.\n+\t(cpp_token_val_index): Adjust fall through comment.\n+\t* macro.c (parse_params): Add FALLTHRU.\n+\t* pch.c (count_defs): Adjust fall through comment.\n+\t(write_defs): Likewise.\n+\n 2016-08-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR bootstrap/72823"}, {"sha": "6254ed69ca20fbbc9d2f717ef2941b87f871e629", "filename": "libcpp/lex.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -610,6 +610,7 @@ search_line_fast (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n \tif (l != 0)\n \t  break;\n \ts += sizeof(unsigned long);\n+\t/* FALLTHRU */\n       case 2:\n \tl = u.l[i++];\n \tif (l != 0)\n@@ -2717,6 +2718,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  }\n \tbuffer->cur++;\n       }\n+      /* FALLTHRU */\n \n     default:\n       create_literal (pfile, result, buffer->cur - 1, 1, CPP_OTHER);\n@@ -3322,7 +3324,7 @@ cpp_token_val_index (const cpp_token *tok)\n \treturn CPP_TOKEN_FLD_SOURCE;\n       else if (tok->type == CPP_PRAGMA)\n \treturn CPP_TOKEN_FLD_PRAGMA;\n-      /* else fall through */\n+      /* fall through */\n     default:\n       return CPP_TOKEN_FLD_NONE;\n     }"}, {"sha": "147fcf53a88fbe2b667c45c04fa64bbf5f8a73d8", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -2886,6 +2886,7 @@ parse_params (cpp_reader *pfile, cpp_macro *macro)\n \t    return true;\n \n \t  /* Fall through to pick up the error.  */\n+\t  /* FALLTHRU */\n \tcase CPP_COMMA:\n \t  if (!prev_ident)\n \t    {"}, {"sha": "fb9696d5769435169ea1526553a32a161e06a41f", "filename": "libcpp/pch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -230,7 +230,7 @@ count_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n       if (hn->flags & NODE_BUILTIN)\n \treturn 1;\n \n-      /* else fall through.  */\n+      /* fall through.  */\n \n     case NT_VOID:\n       {\n@@ -269,7 +269,7 @@ write_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n       if (hn->flags & NODE_BUILTIN)\n \treturn 1;\n \n-      /* else fall through.  */\n+      /* fall through.  */\n \n     case NT_VOID:\n       {"}, {"sha": "0b97a904c6fe60ae1326fbfbb1d970f38d527e69", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -1,3 +1,8 @@\n+2016-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/7652\n+\t* cp-demangle.c (d_print_mod): Add FALLTHRU.\n+\n 2016-08-04  Marcel B\u00f6hme  <boehme.marcel@gmail.com>\n \n \tPR c++/71696"}, {"sha": "1c2bce291797824c071abeeb5252d2d5df3855ad", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191816a36b90e5230ae285940f7ad1e225b66487/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191816a36b90e5230ae285940f7ad1e225b66487/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=191816a36b90e5230ae285940f7ad1e225b66487", "patch": "@@ -5777,11 +5777,13 @@ d_print_mod (struct d_print_info *dpi, int options,\n     case DEMANGLE_COMPONENT_REFERENCE_THIS:\n       /* For the ref-qualifier, put a space before the &.  */\n       d_append_char (dpi, ' ');\n+      /* FALLTHRU */\n     case DEMANGLE_COMPONENT_REFERENCE:\n       d_append_char (dpi, '&');\n       return;\n     case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n       d_append_char (dpi, ' ');\n+      /* FALLTHRU */\n     case DEMANGLE_COMPONENT_RVALUE_REFERENCE:\n       d_append_string (dpi, \"&&\");\n       return;"}]}