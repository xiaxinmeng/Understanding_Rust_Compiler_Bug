{"sha": "e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlYTcxZWFhMDQ1NTk2ZWU2YWVhOGFhZDk4MDVlYjkyYjJjYWZkYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-24T22:57:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-24T22:57:08Z"}, "message": "alpha.h (UNITS_PER_SIMD_WORD): New.\n\n        * config/alpha/alpha.h (UNITS_PER_SIMD_WORD): New.\n        * config/alpha/alpha.c (alpha_vector_mode_supported_p): Don't depend\n        on TARGET_MAX.\n        (alpha_expand_mov): Allow unaligned vectors.\n        (alpha_expand_unaligned_store): Use CONST0_RTX.\n        (TARGET_VECTORIZE_MISALIGNED_MEM_OK): New.\n\nFrom-SVN: r88078", "tree": {"sha": "70ca701abed5d8120f328b5c45187957755934ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ca701abed5d8120f328b5c45187957755934ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/comments", "author": null, "committer": null, "parents": [{"sha": "b8545fbfe5d64073614eb66c7e1c1cae74e7c082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8545fbfe5d64073614eb66c7e1c1cae74e7c082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8545fbfe5d64073614eb66c7e1c1cae74e7c082"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "3f7a56b47deb81630b2bd914074da36719a1f580", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "patch": "@@ -1,3 +1,12 @@\n+2004-09-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.h (UNITS_PER_SIMD_WORD): New.\n+\t* config/alpha/alpha.c (alpha_vector_mode_supported_p): Don't depend\n+\ton TARGET_MAX.\n+\t(alpha_expand_mov): Allow unaligned vectors.\n+\t(alpha_expand_unaligned_store): Use CONST0_RTX.\n+\t(TARGET_VECTORIZE_MISALIGNED_MEM_OK): New.\n+\n 2004-09-24 Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (dom_opt_finalize_block): Fix violation of strict"}, {"sha": "114170b8b474793d41950694e080eb1551cf282f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "patch": "@@ -700,18 +700,14 @@ alpha_scalar_mode_supported_p (enum machine_mode mode)\n }\n \n /* Alpha implements a couple of integer vector mode operations when\n-   TARGET_MAX is enabled.  */\n+   TARGET_MAX is enabled.  We do not check TARGET_MAX here, however,\n+   which allows the vectorizer to operate on e.g. move instructions,\n+   or when expand_vector_operations can do something useful.  */\n \n static bool\n alpha_vector_mode_supported_p (enum machine_mode mode)\n {\n-  if (TARGET_MAX\n-      && (mode == V8QImode\n-\t  || mode == V4HImode\n-\t  || mode == V2SImode))\n-    return true;\n-\n-  return false;\n+  return mode == V8QImode || mode == V4HImode || mode == V2SImode;\n }\n \n /* Return 1 if this function can directly return via $26.  */\n@@ -1986,11 +1982,36 @@ alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n bool\n alpha_expand_mov (enum machine_mode mode, rtx *operands)\n {\n+  /* Honor misaligned loads, for those we promised to do so.  */\n+  if (GET_CODE (operands[1]) == MEM\n+      && alpha_vector_mode_supported_p (mode)\n+      && MEM_ALIGN (operands[1]) < GET_MODE_ALIGNMENT (mode))\n+    {\n+      rtx tmp;\n+      if (register_operand (operands[0], mode))\n+\ttmp = operands[0];\n+      else\n+\ttmp = gen_reg_rtx (mode);\n+      alpha_expand_unaligned_load (tmp, operands[1], 8, 0, 0);\n+      if (tmp == operands[0])\n+\treturn true;\n+      operands[1] = tmp;\n+    }\n+\n   /* If the output is not a register, the input must be.  */\n   if (GET_CODE (operands[0]) == MEM\n       && ! reg_or_0_operand (operands[1], mode))\n     operands[1] = force_reg (mode, operands[1]);\n \n+  /* Honor misaligned stores, for those we promised to do so.  */\n+  if (GET_CODE (operands[0]) == MEM\n+      && alpha_vector_mode_supported_p (mode)\n+      && MEM_ALIGN (operands[0]) < GET_MODE_ALIGNMENT (mode))\n+    {\n+      alpha_expand_unaligned_store (operands[0], operands[1], 8, 0);\n+      return true;\n+    }\n+\n   /* Allow legitimize_address to perform some simplifications.  */\n   if (mode == Pmode && symbolic_operand (operands[1], mode))\n     {\n@@ -3337,7 +3358,7 @@ alpha_expand_unaligned_store (rtx dst, rtx src,\n     {\n       addr = copy_addr_to_reg (plus_constant (dsta, ofs));\n \n-      if (src != const0_rtx)\n+      if (src != CONST0_RTX (GET_MODE (src)))\n \t{\n \t  emit_insn (gen_insxh (insh, gen_lowpart (DImode, src),\n \t\t\t\tGEN_INT (size*8), addr));\n@@ -3375,7 +3396,7 @@ alpha_expand_unaligned_store (rtx dst, rtx src,\n \t}\n     }\n \n-  if (src != const0_rtx)\n+  if (src != CONST0_RTX (GET_MODE (src)))\n     {\n       dsth = expand_binop (DImode, ior_optab, insh, dsth, dsth, 0, OPTAB_WIDEN);\n       dstl = expand_binop (DImode, ior_optab, insl, dstl, dstl, 0, OPTAB_WIDEN);\n@@ -9427,6 +9448,9 @@ alpha_init_libfuncs (void)\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST alpha_build_builtin_va_list\n \n+#undef TARGET_VECTORIZE_MISALIGNED_MEM_OK\n+#define TARGET_VECTORIZE_MISALIGNED_MEM_OK alpha_vector_mode_supported_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "35d6f4ac3a1a66e4b8b8ebce2f2b9ef7bcde39be", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ea71eaa045596ee6aea8aad9805eb92b2cafda/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e2ea71eaa045596ee6aea8aad9805eb92b2cafda", "patch": "@@ -560,6 +560,9 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n    On the Alpha, they trap.  */\n \n #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) 1\n+\n+/* Our SIMD is all done on single integer registers.  */\n+#define UNITS_PER_SIMD_WORD UNITS_PER_WORD\n \f\n /* Standard register usage.  */\n "}]}