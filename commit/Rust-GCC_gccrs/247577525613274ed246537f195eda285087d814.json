{"sha": "247577525613274ed246537f195eda285087d814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ3NTc3NTI1NjEzMjc0ZWQyNDY1MzdmMTk1ZWRhMjg1MDg3ZDgxNA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-07-17T16:34:21Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-07-17T16:34:21Z"}, "message": "[graphite] fix pr61929\n\nThis fixes bootstrap of GCC with BOOT_CFLAGS=\"-g -O2 -fgraphite-identity\n-floop-nest-optimize -floop-block -floop-interchange -floop-strip-mine\".  It\npasses regstrap on amd64-linux.  A previous change\n(https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=213816), replaced\nisl_int with isl_val because isl_int would be deprecated. Since isl_val has\nstricter checks, it exposed the bug.  In the test case (isl_set_max_val) would\nreturn infinity which would remain unchecked.  We now check if the value\nreturned is an integer or not, and bail out if it isn't.  The other problem was\nthat we were allowing all kinds of data-refs in a scop.  Now we discard a scop\nif it has any date-ref other than (ARRAY_REF, MEM_REF, COMPONENT_REF).\n\n\tPR middle-end/61929\n\t* graphite-dependences.c (add_pdr_constraints): Renamed\n\tpdr->extent to pdr->subscript_sizes.\n\t* graphite-interchange.c (build_linearized_memory_access): Add\n\tback all gcc_assert's that the \"isl_int to isl_val conversion\"\n\tpatch has removed.  Refactored.\n\t(pdr_stride_in_loop): Renamed pdr->extent to pdr->subscript_sizes.\n\t* graphite-poly.c (new_poly_dr): Same.\n\t(free_poly_dr): Same.\n\t* graphite-poly.h (struct poly_dr): Same.\n\t* graphite-scop-detection.c (stmt_has_simple_data_refs_p): Ignore\n\tall data references other than ARRAY_REF, MEM_REF, and COMPONENT_REF.\n\t* graphite-scop-detection.h: Fix space.\n\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Add\n\tback all gcc_assert's removed by a previous patch.\n\t(wrap): Remove the_isl_ctx global variable that the same patch has\n\tadded.\n\t(build_loop_iteration_domains): Same.\n\t(add_param_constraints): Same.\n\t(pdr_add_data_dimensions): Same.  Refactored.\n\t(build_poly_dr): Renamed extent to subscript_sizes.\n\ntestsuite/\n\tPR middle-end/61929\n\t* gcc.dg/graphite/pr61929.c: New.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r225942", "tree": {"sha": "f5c008a61cb11b8aae86f54269a208938816706b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5c008a61cb11b8aae86f54269a208938816706b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/247577525613274ed246537f195eda285087d814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247577525613274ed246537f195eda285087d814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247577525613274ed246537f195eda285087d814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247577525613274ed246537f195eda285087d814/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9298e25f6c5d5606fa140aa6a192b72f201daa56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9298e25f6c5d5606fa140aa6a192b72f201daa56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9298e25f6c5d5606fa140aa6a192b72f201daa56"}], "stats": {"total": 195, "additions": 128, "deletions": 67}, "files": [{"sha": "ca10a807c3428616223cbafa326ad690222ff607", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -1,3 +1,28 @@\n+2015-07-17  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR middle-end/61929\n+\t* graphite-dependences.c (add_pdr_constraints): Renamed\n+\tpdr->extent to pdr->subscript_sizes.\n+\t* graphite-interchange.c (build_linearized_memory_access): Add\n+\tback all gcc_assert's that the \"isl_int to isl_val conversion\"\n+\tpatch has removed.  Refactored.\n+\t(pdr_stride_in_loop): Renamed pdr->extent to pdr->subscript_sizes.\n+\t* graphite-poly.c (new_poly_dr): Same.\n+\t(free_poly_dr): Same.\n+\t* graphite-poly.h (struct poly_dr): Same.\n+\t* graphite-scop-detection.c (stmt_has_simple_data_refs_p): Ignore\n+\tall data references other than ARRAY_REF, MEM_REF, and COMPONENT_REF.\n+\t* graphite-scop-detection.h: Fix space.\n+\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Add\n+\tback all gcc_assert's removed by a previous patch.\n+\t(wrap): Remove the_isl_ctx global variable that the same patch has\n+\tadded.\n+\t(build_loop_iteration_domains): Same.\n+\t(add_param_constraints): Same.\n+\t(pdr_add_data_dimensions): Same.  Refactored.\n+\t(build_poly_dr): Renamed extent to subscript_sizes.\n+\n 2015-07-17  Marek Polacek  <polacek@redhat.com>\n \n \t* fold-const.c (fold_binary_loc): Move A - (A & B) into ~B & A ..."}, {"sha": "af18ecb333f1546f3ea3941f7e4bb040205eb4f8", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -88,13 +88,13 @@ constrain_domain (isl_map *map, isl_set *s)\n   return isl_map_intersect_domain (map, s);\n }\n \n-/* Constrain pdr->accesses with pdr->extent and pbb->domain.  */\n+/* Constrain pdr->accesses with pdr->subscript_sizes and pbb->domain.  */\n \n static isl_map *\n add_pdr_constraints (poly_dr_p pdr, poly_bb_p pbb)\n {\n   isl_map *x = isl_map_intersect_range (isl_map_copy (pdr->accesses),\n-\t\t\t\t\tisl_set_copy (pdr->extent));\n+\t\t\t\t\tisl_set_copy (pdr->subscript_sizes));\n   x = constrain_domain (x, isl_set_copy (pbb->domain));\n   return x;\n }"}, {"sha": "03c2c6372bf76f4f73d601c97533f5f855d29458", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -79,37 +79,40 @@ extern \"C\" {\n static isl_constraint *\n build_linearized_memory_access (isl_map *map, poly_dr_p pdr)\n {\n-  isl_constraint *res;\n   isl_local_space *ls = isl_local_space_from_space (isl_map_get_space (map));\n-  unsigned offset, nsubs;\n-  int i;\n-  isl_ctx *ctx;\n+  isl_constraint *res = isl_equality_alloc (ls);\n+  isl_val *size = isl_val_int_from_ui (isl_map_get_ctx (map), 1);\n \n-  isl_val *size, *subsize, *size1;\n-\n-  res = isl_equality_alloc (ls);\n-  ctx = isl_local_space_get_ctx (ls);\n-  size = isl_val_int_from_ui (ctx, 1);\n-\n-  nsubs = isl_set_dim (pdr->extent, isl_dim_set);\n+  unsigned nsubs = isl_set_dim (pdr->subscript_sizes, isl_dim_set);\n   /* -1 for the already included L dimension.  */\n-  offset = isl_map_dim (map, isl_dim_out) - 1 - nsubs;\n+  unsigned offset = isl_map_dim (map, isl_dim_out) - 1 - nsubs;\n   res = isl_constraint_set_coefficient_si (res, isl_dim_out, offset + nsubs, -1);\n-  /* Go through all subscripts from last to first.  First dimension\n+  /* Go through all subscripts from last to first.  The dimension \"i=0\"\n      is the alias set, ignore it.  */\n-  for (i = nsubs - 1; i >= 1; i--)\n+  for (int i = nsubs - 1; i >= 1; i--)\n     {\n-      isl_space *dc;\n-      isl_aff *aff;\n-\n-      size1 = isl_val_copy (size);\n-      res = isl_constraint_set_coefficient_val (res, isl_dim_out, offset + i, size);\n-      dc = isl_set_get_space (pdr->extent);\n-      aff = isl_aff_zero_on_domain (isl_local_space_from_space (dc));\n-      aff = isl_aff_set_coefficient_si (aff, isl_dim_in, i, 1);\n-      subsize = isl_set_max_val (pdr->extent, aff);\n-      isl_aff_free (aff);\n-      size = isl_val_mul (size1, subsize);\n+      isl_aff *extract_dim;\n+      res = isl_constraint_set_coefficient_val (res, isl_dim_out, offset + i,\n+\t\t\t\t\t\tisl_val_copy (size));\n+      isl_space *dc = isl_set_get_space (pdr->subscript_sizes);\n+      extract_dim = isl_aff_zero_on_domain (isl_local_space_from_space (dc));\n+      extract_dim = isl_aff_set_coefficient_si (extract_dim, isl_dim_in, i, 1);\n+      isl_val *max = isl_set_max_val (pdr->subscript_sizes, extract_dim);\n+      isl_aff_free (extract_dim);\n+\n+      /* The result is NULL in case of an error, the optimal value in case there\n+\t is one, negative infinity or infinity if the problem is unbounded and\n+\t NaN if the problem is empty.  */\n+      gcc_assert (max);\n+\n+      /* When one of the dimensions cannot be computed, we cannot build the size\n+\t of the array for any outer dimensions.  */\n+      if (!isl_val_is_int (max))\n+\t{\n+\t  isl_val_free (max);\n+\t  break;\n+\t}\n+      size = isl_val_mul (size, max);\n     }\n \n   isl_val_free (size);\n@@ -176,7 +179,7 @@ pdr_stride_in_loop (mpz_t stride, graphite_dim_t depth, poly_dr_p pdr)\n \n   /* pdr->accesses:    [P1..nb_param,I1..nb_domain]->[a,S1..nb_subscript]\n           ??? [P] not used for PDRs?\n-     pdr->extent:      [a,S1..nb_subscript]\n+     pdr->subscript_sizes:      [a,S1..nb_subscript]\n      pbb->domain:      [P1..nb_param,I1..nb_domain]\n      pbb->transformed: [P1..nb_param,I1..nb_domain]->[T1..Tnb_sctr]\n           [T] includes local vars (currently unused)"}, {"sha": "2eff5a5a33c013b3ca2e88a1d7fff1519031df98", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -270,7 +270,7 @@ apply_poly_transforms (scop_p scop)\n void\n new_poly_dr (poly_bb_p pbb, int dr_base_object_set,\n \t     enum poly_dr_type type, void *cdr, graphite_dim_t nb_subscripts,\n-\t     isl_map *acc, isl_set *extent)\n+\t     isl_map *acc, isl_set *subscript_sizes)\n {\n   static int id = 0;\n   poly_dr_p pdr = XNEW (struct poly_dr);\n@@ -280,7 +280,7 @@ new_poly_dr (poly_bb_p pbb, int dr_base_object_set,\n   PDR_NB_REFS (pdr) = 1;\n   PDR_PBB (pdr) = pbb;\n   pdr->accesses = acc;\n-  pdr->extent = extent;\n+  pdr->subscript_sizes = subscript_sizes;\n   PDR_TYPE (pdr) = type;\n   PDR_CDR (pdr) = cdr;\n   PDR_NB_SUBSCRIPTS (pdr) = nb_subscripts;\n@@ -293,7 +293,7 @@ void\n free_poly_dr (poly_dr_p pdr)\n {\n   isl_map_free (pdr->accesses);\n-  isl_set_free (pdr->extent);\n+  isl_set_free (pdr->subscript_sizes);\n   XDELETE (pdr);\n }\n "}, {"sha": "82e12171499efedcb648ab4c48b022a23e39b1d7", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -177,7 +177,7 @@ struct poly_dr\n \n      In the example, the vector \"R C O I L P\" is \"7 7 3 2 0 1\".  */\n   isl_map *accesses;\n-  isl_set *extent;\n+  isl_set *subscript_sizes;\n \n   /* Data reference's base object set number, we must assure 2 pdrs are in the\n      same base object set before dependency checking.  */"}, {"sha": "28de4ab3a5b3bffedc5bda291c5d79270a1f3131", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -289,7 +289,6 @@ stmt_has_simple_data_refs_p (loop_p outermost_loop ATTRIBUTE_UNUSED,\n \t\t\t     gimple stmt)\n {\n   data_reference_p dr;\n-  unsigned i;\n   int j;\n   bool res = true;\n   vec<data_reference_p> drs = vNULL;\n@@ -302,18 +301,29 @@ stmt_has_simple_data_refs_p (loop_p outermost_loop ATTRIBUTE_UNUSED,\n \t\t\t\t\t     stmt, &drs);\n \n       FOR_EACH_VEC_ELT (drs, j, dr)\n-\tfor (i = 0; i < DR_NUM_DIMENSIONS (dr); i++)\n-\t  if (!graphite_can_represent_scev (DR_ACCESS_FN (dr, i)))\n+\t{\n+\t  int nb_subscripts = DR_NUM_DIMENSIONS (dr);\n+\t  tree ref = DR_REF (dr);\n+\n+\t  for (int i = nb_subscripts - 1; i >= 0; i--)\n \t    {\n-\t      res = false;\n-\t      goto done;\n+\t      if (!graphite_can_represent_scev (DR_ACCESS_FN (dr, i))\n+\t\t  || (TREE_CODE (ref) != ARRAY_REF\n+\t\t      && TREE_CODE (ref) != MEM_REF\n+\t\t      && TREE_CODE (ref) != COMPONENT_REF))\n+\t\t{\n+\t\t  free_data_refs (drs);\n+\t\t  return false;\n+\t\t}\n+\n+\t      ref = TREE_OPERAND (ref, 0);\n \t    }\n+\t}\n \n       free_data_refs (drs);\n       drs.create (0);\n     }\n \n- done:\n   free_data_refs (drs);\n   return res;\n }"}, {"sha": "45117963e1103dda2dd6e59f3349e56703117d59", "filename": "gcc/graphite-scop-detection.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-scop-detection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-scop-detection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.h?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_GRAPHITE_SCOP_DETECTION_H\n \n extern void build_scops (vec<scop_p> *);\n-extern void dot_all_scops (vec<scop_p> );\n+extern void dot_all_scops (vec<scop_p>);\n extern void dot_scop (scop_p);\n \n #endif /* GCC_GRAPHITE_SCOP_DETECTION_H */"}, {"sha": "1e234fe232dd8983d2542d6c97f7901ae6d2acd5", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -497,6 +497,7 @@ build_pbb_scattering_polyhedrons (isl_aff *static_sched,\n \t      (isl_local_space_from_space (isl_map_get_space (pbb->schedule)));\n \n \t  val = isl_aff_get_coefficient_val (static_sched, isl_dim_in, i / 2);\n+\t  gcc_assert (val && isl_val_is_int (val));\n \n \t  val = isl_val_neg (val);\n \t  c = isl_constraint_set_constant_val (c, val);\n@@ -719,14 +720,12 @@ extract_affine_int (tree e, __isl_take isl_space *space)\n \n /* Compute pwaff mod 2^width.  */\n \n-extern isl_ctx *the_isl_ctx;\n-\n static isl_pw_aff *\n wrap (isl_pw_aff *pwaff, unsigned width)\n {\n   isl_val *mod;\n \n-  mod = isl_val_int_from_ui(the_isl_ctx, width);\n+  mod = isl_val_int_from_ui (isl_pw_aff_get_ctx (pwaff), width);\n   mod = isl_val_2exp (mod);\n   pwaff = isl_pw_aff_mod_val (pwaff, mod);\n \n@@ -1012,7 +1011,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n \t  (isl_local_space_from_space (isl_space_copy (space)));\n       c = isl_constraint_set_coefficient_si (c, isl_dim_set, pos, -1);\n       tree_int_to_gmp (nb_iters, g);\n-      v = isl_val_int_from_gmp (the_isl_ctx, g);\n+      v = isl_val_int_from_gmp (scop->ctx, g);\n       c = isl_constraint_set_constant_val (c, v);\n       inner = isl_set_add_constraint (inner, c);\n     }\n@@ -1067,7 +1066,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n \t  c = isl_inequality_alloc\n \t      (isl_local_space_from_space (isl_space_copy (space)));\n \t  c = isl_constraint_set_coefficient_si (c, isl_dim_set, pos, -1);\n-\t  v = isl_val_int_from_gmp (the_isl_ctx, g);\n+\t  v = isl_val_int_from_gmp (scop->ctx, g);\n \t  mpz_clear (g);\n \t  c = isl_constraint_set_constant_val (c, v);\n \t  inner = isl_set_add_constraint (inner, c);\n@@ -1335,7 +1334,7 @@ add_param_constraints (scop_p scop, graphite_dim_t p)\n       c = isl_inequality_alloc (isl_local_space_from_space (space));\n       mpz_init (g);\n       tree_int_to_gmp (lb, g);\n-      v = isl_val_int_from_gmp (the_isl_ctx, g);\n+      v = isl_val_int_from_gmp (scop->ctx, g);\n       v = isl_val_neg (v);\n       mpz_clear (g);\n       c = isl_constraint_set_constant_val (c, v);\n@@ -1355,7 +1354,7 @@ add_param_constraints (scop_p scop, graphite_dim_t p)\n \n       mpz_init (g);\n       tree_int_to_gmp (ub, g);\n-      v = isl_val_int_from_gmp (the_isl_ctx, g);\n+      v = isl_val_int_from_gmp (scop->ctx, g);\n       mpz_clear (g);\n       c = isl_constraint_set_constant_val (c, v);\n       c = isl_constraint_set_coefficient_si (c, isl_dim_param, p, -1);\n@@ -1491,20 +1490,19 @@ pdr_add_memory_accesses (isl_map *acc, data_reference_p dr, poly_bb_p pbb)\n    domain.  */\n \n static isl_set *\n-pdr_add_data_dimensions (isl_set *extent, scop_p scop, data_reference_p dr)\n+pdr_add_data_dimensions (isl_set *subscript_sizes, scop_p scop,\n+\t\t\t data_reference_p dr)\n {\n   tree ref = DR_REF (dr);\n-  int i, nb_subscripts = DR_NUM_DIMENSIONS (dr);\n \n-  for (i = nb_subscripts - 1; i >= 0; i--, ref = TREE_OPERAND (ref, 0))\n+  int nb_subscripts = DR_NUM_DIMENSIONS (dr);\n+  for (int i = nb_subscripts - 1; i >= 0; i--, ref = TREE_OPERAND (ref, 0))\n     {\n-      tree low, high;\n-\n       if (TREE_CODE (ref) != ARRAY_REF)\n-\tbreak;\n+\treturn subscript_sizes;\n \n-      low = array_ref_low_bound (ref);\n-      high = array_ref_up_bound (ref);\n+      tree low = array_ref_low_bound (ref);\n+      tree high = array_ref_up_bound (ref);\n \n       /* XXX The PPL code dealt separately with\n          subscript - low >= 0 and high - subscript >= 0 in case one of\n@@ -1522,36 +1520,35 @@ pdr_add_data_dimensions (isl_set *extent, scop_p scop, data_reference_p dr)\n \t  isl_aff *aff;\n \t  isl_set *univ, *lbs, *ubs;\n \t  isl_pw_aff *index;\n-\t  isl_space *space;\n \t  isl_set *valid;\n-\t  isl_pw_aff *lb = extract_affine_int (low, isl_set_get_space (extent));\n-\t  isl_pw_aff *ub = extract_affine_int (high, isl_set_get_space (extent));\n+\t  isl_space *space = isl_set_get_space (subscript_sizes);\n+\t  isl_pw_aff *lb = extract_affine_int (low, isl_space_copy (space));\n+\t  isl_pw_aff *ub = extract_affine_int (high, isl_space_copy (space));\n \n \t  /* high >= 0 */\n \t  valid = isl_pw_aff_nonneg_set (isl_pw_aff_copy (ub));\n \t  valid = isl_set_project_out (valid, isl_dim_set, 0,\n \t\t\t\t       isl_set_dim (valid, isl_dim_set));\n \t  scop->context = isl_set_intersect (scop->context, valid);\n \n-\t  space = isl_set_get_space (extent);\n \t  aff = isl_aff_zero_on_domain (isl_local_space_from_space (space));\n \t  aff = isl_aff_add_coefficient_si (aff, isl_dim_in, i + 1, 1);\n \t  univ = isl_set_universe (isl_space_domain (isl_aff_get_space (aff)));\n \t  index = isl_pw_aff_alloc (univ, aff);\n \n-\t  id = isl_set_get_tuple_id (extent);\n+\t  id = isl_set_get_tuple_id (subscript_sizes);\n \t  lb = isl_pw_aff_set_tuple_id (lb, isl_dim_in, isl_id_copy (id));\n \t  ub = isl_pw_aff_set_tuple_id (ub, isl_dim_in, id);\n \n \t  /* low <= sub_i <= high */\n \t  lbs = isl_pw_aff_ge_set (isl_pw_aff_copy (index), lb);\n \t  ubs = isl_pw_aff_le_set (index, ub);\n-\t  extent = isl_set_intersect (extent, lbs);\n-\t  extent = isl_set_intersect (extent, ubs);\n+\t  subscript_sizes = isl_set_intersect (subscript_sizes, lbs);\n+\t  subscript_sizes = isl_set_intersect (subscript_sizes, ubs);\n \t}\n     }\n \n-  return extent;\n+  return subscript_sizes;\n }\n \n /* Build data accesses for DR in PBB.  */\n@@ -1561,7 +1558,7 @@ build_poly_dr (data_reference_p dr, poly_bb_p pbb)\n {\n   int dr_base_object_set;\n   isl_map *acc;\n-  isl_set *extent;\n+  isl_set *subscript_sizes;\n   scop_p scop = PBB_SCOP (pbb);\n \n   {\n@@ -1588,17 +1585,18 @@ build_poly_dr (data_reference_p dr, poly_bb_p pbb)\n       alias_set_num = *(bap->alias_set);\n \n     space = isl_space_set_tuple_id (space, isl_dim_set, id);\n-    extent = isl_set_nat_universe (space);\n-    extent = isl_set_fix_si (extent, isl_dim_set, 0, alias_set_num);\n-    extent = pdr_add_data_dimensions (extent, scop, dr);\n+    subscript_sizes = isl_set_nat_universe (space);\n+    subscript_sizes = isl_set_fix_si (subscript_sizes, isl_dim_set, 0,\n+\t\t\t\t      alias_set_num);\n+    subscript_sizes = pdr_add_data_dimensions (subscript_sizes, scop, dr);\n   }\n \n   gcc_assert (dr->aux);\n   dr_base_object_set = ((base_alias_pair *)(dr->aux))->base_obj_set;\n \n   new_poly_dr (pbb, dr_base_object_set,\n \t       DR_IS_READ (dr) ? PDR_READ : PDR_WRITE,\n-\t       dr, DR_NUM_DIMENSIONS (dr), acc, extent);\n+\t       dr, DR_NUM_DIMENSIONS (dr), acc, subscript_sizes);\n }\n \n /* Write to FILE the alias graph of data references in DIMACS format.  */"}, {"sha": "29d3a1284ef0ec0ccddeedc61c84159e77bb9192", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -1,3 +1,9 @@\n+2015-07-17  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR middle-end/61929\n+\t* gcc.dg/graphite/pr61929.c: New.\n+\n 2015-07-17  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/fold-minus-7.c: New test."}, {"sha": "9999ebf75b33361664a80d8b10afaae757088459", "filename": "gcc/testsuite/gcc.dg/graphite/pr61929.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247577525613274ed246537f195eda285087d814/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr61929.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247577525613274ed246537f195eda285087d814/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr61929.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr61929.c?ref=247577525613274ed246537f195eda285087d814", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-linear -floop-strip-mine\" } */\n+\n+typedef struct m {\n+  char *A;\n+  char *B;\n+} mystruct;\n+mystruct arr[52];\n+\n+void main () {}\n+void generateICE (void)\n+{\n+  int i;\n+  for (i=0; i<52; i++)\n+    {\n+      arr[i].A = \"\";\n+      arr[i].B = 0;\n+    }\n+}"}]}