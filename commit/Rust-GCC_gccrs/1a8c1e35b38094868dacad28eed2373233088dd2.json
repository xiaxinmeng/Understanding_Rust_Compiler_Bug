{"sha": "1a8c1e35b38094868dacad28eed2373233088dd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4YzFlMzViMzgwOTQ4NjhkYWNhZDI4ZWVkMjM3MzIzMzA4OGRkMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-27T10:45:58Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-27T10:45:58Z"}, "message": "re PR fortran/56650 (Odd error messages with C_SIZEOF for valid code)\n\n2013-03-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/56650\n        PR fortran/36437\n        * check.c (gfc_check_sizeof, gfc_check_c_sizeof,\n        gfc_check_storage_size): Update checks.\n        * intrinsic.texi (SIZEOF): Correct class.\n        * intrinsic.h (gfc_simplify_sizeof,\n        gfc_simplify_storage_size): New prototypes.\n        * intrinsic.c (add_functions): Use them.\n        * simplify.c (gfc_simplify_sizeof,\n        gfc_simplify_storage_size): New functions.\n\n2013-03-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/56650\n        PR fortran/36437\n        * gfortran.dg/sizeof_2.f90: New.\n        * gfortran.dg/sizeof_3.f90: New.\n        * gfortran.dg/sizeof_proc.f90: Update dg-error.\n\nFrom-SVN: r197159", "tree": {"sha": "250e755fad9572f8dcf4d3ab8eb89f9394a11c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250e755fad9572f8dcf4d3ab8eb89f9394a11c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a8c1e35b38094868dacad28eed2373233088dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c1e35b38094868dacad28eed2373233088dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8c1e35b38094868dacad28eed2373233088dd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c1e35b38094868dacad28eed2373233088dd2/comments", "author": null, "committer": null, "parents": [{"sha": "7d24f650fa1886c29e2431c969e5b7e6f8a50836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d24f650fa1886c29e2431c969e5b7e6f8a50836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d24f650fa1886c29e2431c969e5b7e6f8a50836"}], "stats": {"total": 259, "additions": 237, "deletions": 22}, "files": [{"sha": "a32aedb360831e9e522210556b7c6dccd19cf05c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -1,17 +1,30 @@\n+2013-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56650\n+\tPR fortran/36437\n+\t* check.c (gfc_check_sizeof, gfc_check_c_sizeof,\n+\tgfc_check_storage_size): Update checks.\n+\t* intrinsic.texi (SIZEOF): Correct class.\n+\t* intrinsic.h (gfc_simplify_sizeof,\n+\tgfc_simplify_storage_size): New prototypes.\n+\t* intrinsic.c (add_functions): Use them.\n+\t* simplify.c (gfc_simplify_sizeof,\n+\tgfc_simplify_storage_size): New functions.\n+\n 2013-03-27  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/25708\n-        * module.c (module_locus): Use long for position.\n-        (module_content): New variable.\n-        (module_pos): Likewise.\n-        (prev_character): Remove.\n-        (bad_module): Free data instead of closing mod file.\n-        (set_module_locus): Use module_pos.\n-        (get_module_locus): Likewise.\n-        (module_char): use buffer rather than stdio file.\n-        (module_unget_char): Likewise.\n-        (read_module_to_tmpbuf): New function.\n-        (gfc_use_module): Call read_module_to_tmpbuf.\n+\t* module.c (module_locus): Use long for position.\n+\t(module_content): New variable.\n+\t(module_pos): Likewise.\n+\t(prev_character): Remove.\n+\t(bad_module): Free data instead of closing mod file.\n+\t(set_module_locus): Use module_pos.\n+\t(get_module_locus): Likewise.\n+\t(module_char): use buffer rather than stdio file.\n+\t(module_unget_char): Likewise.\n+\t(read_module_to_tmpbuf): New function.\n+\t(gfc_use_module): Call read_module_to_tmpbuf.\n \n 2013-03-26  Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "99174bcc75b59feb45653a83b5967ecb06c64447", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -3617,11 +3617,31 @@ gfc_check_sizeof (gfc_expr *arg)\n {\n   if (arg->ts.type == BT_PROCEDURE)\n     {\n-      gfc_error (\"'%s' argument of '%s' intrinsic at %L may not be a procedure\",\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be a procedure\",\n \t\t gfc_current_intrinsic_arg[0]->name, gfc_current_intrinsic,\n \t\t &arg->where);\n       return FAILURE;\n     }\n+\n+  if (arg->ts.type == BT_ASSUMED)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be TYPE(*)\",\n+\t\t gfc_current_intrinsic_arg[0]->name, gfc_current_intrinsic,\n+\t\t &arg->where);\n+      return FAILURE;\n+    }\n+\n+  if (arg->rank && arg->expr_type == EXPR_VARIABLE\n+      && arg->symtree->n.sym->as != NULL\n+      && arg->symtree->n.sym->as->type == AS_ASSUMED_SIZE && arg->ref\n+      && arg->ref->type == REF_ARRAY && arg->ref->u.ar.type == AR_FULL)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be an \"\n+\t\t \"assumed-size array\", gfc_current_intrinsic_arg[0]->name,\n+\t\t gfc_current_intrinsic, &arg->where);\n+      return FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n \n@@ -3739,6 +3759,15 @@ gfc_check_c_sizeof (gfc_expr *arg)\n       return FAILURE;\n     }\n \n+  if (arg->ts.type == BT_ASSUMED)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n+\t\t \"TYPE(*)\",\n+\t\t gfc_current_intrinsic_arg[0]->name, gfc_current_intrinsic,\n+\t\t &arg->where);\n+      return FAILURE;\n+    }\n+\n   if (arg->rank && arg->expr_type == EXPR_VARIABLE\n       && arg->symtree->n.sym->as != NULL\n       && arg->symtree->n.sym->as->type == AS_ASSUMED_SIZE && arg->ref\n@@ -5593,8 +5622,24 @@ gfc_check_and (gfc_expr *i, gfc_expr *j)\n \n \n gfc_try\n-gfc_check_storage_size (gfc_expr *a ATTRIBUTE_UNUSED, gfc_expr *kind)\n+gfc_check_storage_size (gfc_expr *a, gfc_expr *kind)\n {\n+  if (a->ts.type == BT_ASSUMED)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be TYPE(*)\",\n+\t\t gfc_current_intrinsic_arg[0]->name, gfc_current_intrinsic,\n+\t\t &a->where);\n+      return FAILURE;\n+    }\n+\n+  if (a->ts.type == BT_PROCEDURE)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be a \"\n+\t\t \"procedure\", gfc_current_intrinsic_arg[0]->name,\n+\t\t gfc_current_intrinsic, &a->where);\n+      return FAILURE;\n+    }\n+\n   if (kind == NULL)\n     return SUCCESS;\n "}, {"sha": "2a51d10ffb654c0f618a1a46a3bd2d69b37b8a84", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -2698,7 +2698,7 @@ add_functions (void)\n   make_from_module();\n \n   add_sym_1 (\"sizeof\", GFC_ISYM_SIZEOF, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, ii,\n-\t     GFC_STD_GNU, gfc_check_sizeof, NULL, NULL,\n+\t     GFC_STD_GNU, gfc_check_sizeof, gfc_simplify_sizeof, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"sizeof\", GFC_ISYM_SIZEOF, GFC_STD_GNU);\n@@ -2724,7 +2724,7 @@ add_functions (void)\n \n   add_sym_1 (\"c_sizeof\", GFC_ISYM_C_SIZEOF, CLASS_INQUIRY, ACTUAL_NO,\n \t     BT_INTEGER, gfc_index_integer_kind, GFC_STD_F2008,\n-\t     gfc_check_c_sizeof, NULL, NULL,\n+\t     gfc_check_c_sizeof, gfc_simplify_sizeof, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n   make_from_module();\n \n@@ -2782,7 +2782,8 @@ add_functions (void)\n \n   add_sym_2 (\"storage_size\", GFC_ISYM_STORAGE_SIZE, CLASS_INQUIRY, ACTUAL_NO,\n \t     BT_INTEGER, di, GFC_STD_F2008,\n-\t     gfc_check_storage_size, NULL, gfc_resolve_storage_size,\n+\t     gfc_check_storage_size, gfc_simplify_storage_size,\n+\t     gfc_resolve_storage_size,\n \t     a, BT_UNKNOWN, 0, REQUIRED,\n \t     kind, BT_INTEGER, di, OPTIONAL);\n   "}, {"sha": "347d71df8f2e305953b967a7248d9a687741dd47", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -376,6 +376,8 @@ gfc_expr *gfc_simplify_shiftr (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_sin (gfc_expr *);\n gfc_expr *gfc_simplify_sinh (gfc_expr *);\n gfc_expr *gfc_simplify_size (gfc_expr *, gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_sizeof (gfc_expr *);\n+gfc_expr *gfc_simplify_storage_size (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_sngl (gfc_expr *);\n gfc_expr *gfc_simplify_spacing (gfc_expr *);\n gfc_expr *gfc_simplify_spread (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "8c0edc712a0c62e1d362ebad9e810c996828b2f4", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -11492,7 +11492,7 @@ expression @code{X} occupies.\n GNU extension\n \n @item @emph{Class}:\n-Intrinsic function\n+Inquiry function\n \n @item @emph{Syntax}:\n @code{N = SIZEOF(X)}"}, {"sha": "e24cfcf3399734cfe42e39d59f4228b754516983", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -27,7 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intrinsic.h\"\n #include \"target-memory.h\"\n #include \"constructor.h\"\n-#include \"version.h\"  /* For version_string.  */\n+#include \"tm.h\"\t\t/* For BITS_PER_UNIT.  */\n+#include \"version.h\"\t/* For version_string.  */\n \n \n gfc_expr gfc_bad_expr;\n@@ -5649,6 +5650,82 @@ gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n }\n \n \n+/* SIZEOF and C_SIZEOF return the size in bytes of an array element\n+   multiplied by the array size.  */\n+\n+gfc_expr *\n+gfc_simplify_sizeof (gfc_expr *x)\n+{\n+  gfc_expr *result = NULL;\n+  mpz_t array_size;\n+\n+  if (x->ts.type == BT_CLASS || x->ts.deferred)\n+    return NULL;\n+\n+  if (x->ts.type == BT_CHARACTER\n+      && (!x->ts.u.cl || !x->ts.u.cl->length\n+\t  || x->ts.u.cl->length->expr_type != EXPR_CONSTANT))\n+    return NULL;\n+\n+  if (x->rank && x->expr_type != EXPR_ARRAY\n+      && gfc_array_size (x, &array_size) == FAILURE)\n+    return NULL;\n+\n+  result = gfc_get_constant_expr (BT_INTEGER, gfc_index_integer_kind,\n+\t\t\t\t  &x->where);\n+  mpz_set_si (result->value.integer, gfc_target_expr_size (x));\n+\n+  /* gfc_target_expr_size already takes the array size for array constructors\n+     into account.  */\n+  if (x->rank && x->expr_type != EXPR_ARRAY)\n+    {\n+      mpz_mul (result->value.integer, result->value.integer, array_size);\n+      mpz_clear (array_size);\n+    }\n+\n+  return result;\n+}\n+\n+\n+/* STORAGE_SIZE returns the size in bits of a single array element.  */\n+\n+gfc_expr *\n+gfc_simplify_storage_size (gfc_expr *x,\n+\t\t\t   gfc_expr *kind)\n+{\n+  gfc_expr *result = NULL;\n+  int k;\n+  size_t elt_size;\n+\n+  if (x->ts.type == BT_CLASS || x->ts.deferred)\n+    return NULL;\n+\n+  if (x->ts.type == BT_CHARACTER\n+      && (!x->ts.u.cl || !x->ts.u.cl->length\n+\t  || x->ts.u.cl->length->expr_type != EXPR_CONSTANT))\n+    return NULL;\n+\n+  k = get_kind (BT_INTEGER, kind, \"STORAGE_SIZE\", gfc_default_integer_kind);\n+  if (k == -1)\n+    return &gfc_bad_expr;\n+\n+  if (x->expr_type == EXPR_ARRAY)\n+    {\n+      gfc_constructor *c = gfc_constructor_first (x->value.constructor);\n+      elt_size = gfc_target_expr_size (c->expr);\n+    }\n+  else\n+    elt_size = gfc_target_expr_size (x);\n+\n+  result = gfc_get_constant_expr (BT_INTEGER, gfc_index_integer_kind,\n+\t\t\t\t  &x->where);\n+  mpz_set_si (result->value.integer, elt_size);\n+\n+  mpz_mul_ui (result->value.integer, result->value.integer, BITS_PER_UNIT);\n+  return result;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_sign (gfc_expr *x, gfc_expr *y)\n {"}, {"sha": "386779695d2a5c1df36bfddc8aeb7ce3729dd820", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -1,3 +1,11 @@\n+2013-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56650\n+\tPR fortran/36437\n+\t* gfortran.dg/sizeof_2.f90: New.\n+\t* gfortran.dg/sizeof_3.f90: New.\n+\t* gfortran.dg/sizeof_proc.f90: Update dg-error.\n+\n 2013-03-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/37021"}, {"sha": "5f2169bbde3edb118f10e1eb9854efa5961496f5", "filename": "gcc/testsuite/gfortran.dg/sizeof_2.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_2.f90?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+!\n+! PR fortran/56650\n+! PR fortran/36437\n+!\n+subroutine foo(x, y)\n+  use iso_c_binding\n+  type(*) :: x\n+  integer :: y(*)\n+  integer(8) :: ii\n+  procedure() :: proc\n+\n+  ii = sizeof (x) ! { dg-error \"shall not be TYPE\\(.\\)\" }\n+  ii = c_sizeof (x) ! { dg-error \"shall not be TYPE\\(.\\)\" }\n+  ii = storage_size (x) ! { dg-error \"shall not be TYPE\\(.\\)\" }\n+\n+  ii = sizeof (y) ! { dg-error \"shall not be an assumed-size array\" }\n+  ii = c_sizeof (y) ! { dg-error \"shall not be an assumed-size array\" }\n+  ii = storage_size (y) ! okay, element-size is known\n+\n+  ii = sizeof (proc) ! { dg-error \"shall not be a procedure\" }\n+  ii = c_sizeof (proc) ! { dg-error \"Procedure unexpected as argument\" }\n+  ii = storage_size (proc) ! { dg-error \"shall not be a procedure\" }\n+end"}, {"sha": "d6d1fc409541bb9a844e1dfeb9b707506311453b", "filename": "gcc/testsuite/gfortran.dg/sizeof_3.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_3.f90?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/56650\n+! PR fortran/36437\n+!\n+module m\n+  use iso_c_binding, only: c_sizeof, c_int\n+  implicit none\n+\n+  integer(c_int), bind(C) :: MPI_Status_C_obj\n+  integer,parameter :: MPI_STATUS_SIZE = c_sizeof(MPI_Status_C_obj)\n+end module m\n+\n+module m2\n+  use iso_c_binding, only: c_sizeof, c_int\n+  implicit none\n+\n+  integer(c_int), bind(C) :: MPI_Status_C_obj2\n+  integer,parameter :: MPI_STATUS_SIZE2 &\n+                    = c_sizeof(MPI_Status_C_obj2)*8/bit_size(0)\n+end module m2\n+\n+subroutine test()\n+  use m\n+  use m2\n+  integer :: m1test, m2test\n+  m1test = MPI_STATUS_SIZE\n+  m2test = MPI_STATUS_SIZE2\n+end subroutine test\n+\n+type t\n+  character(len=20) :: str\n+end type t\n+type(t):: x(5)\n+integer :: iii, jjj\n+iii = sizeof (x)       ! 5*20 (whole size in bytes)\n+jjj = storage_size (x) ! 8*20 (element size in bits)\n+end\n+\n+! { dg-final { scan-tree-dump-times \"m1test = 4;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"m2test = 1;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"iii = 100;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"jjj = 160;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "0a63537888df8181e45b5bc6806e6788ab11d4e3", "filename": "gcc/testsuite/gfortran.dg/sizeof_proc.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_proc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c1e35b38094868dacad28eed2373233088dd2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_proc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_proc.f90?ref=1a8c1e35b38094868dacad28eed2373233088dd2", "patch": "@@ -9,11 +9,11 @@\n procedure(real), pointer :: pp\n pp => sin\n \n-print *,sizeof(proc)    ! { dg-error \"may not be a procedure\" }\n-print *,sizeof(pp)      ! { dg-error \"may not be a procedure\" }\n+print *,sizeof(proc)    ! { dg-error \"shall not be a procedure\" }\n+print *,sizeof(pp)      ! { dg-error \"shall not be a procedure\" }\n print *,sizeof(pp(0.))\n-print *,sizeof(sub)     ! { dg-error \"may not be a procedure\" }\n-print *,sizeof(func)    ! { dg-error \"may not be a procedure\" }\n+print *,sizeof(sub)     ! { dg-error \"shall not be a procedure\" }\n+print *,sizeof(func)    ! { dg-error \"shall not be a procedure\" }\n print *,sizeof(func())\n \n contains"}]}