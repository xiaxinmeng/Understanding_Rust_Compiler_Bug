{"sha": "9ae601015839cc1835b55134bc9899c475ef77c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlNjAxMDE1ODM5Y2MxODM1YjU1MTM0YmM5ODk5YzQ3NWVmNzdjMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-08T16:08:13Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-08T16:08:13Z"}, "message": "genattrtab.c (evaluate_eq_attr): Allow an attribute to be defined in terms of another.\n\n\t* genattrtab.c (evaluate_eq_attr): Allow an attribute to be defined\n\tin terms of another.\n\t(write_attr_value): Write a cast if necessary.\n\nFrom-SVN: r176047", "tree": {"sha": "064ce26acb0905a2d9ba418ca486888868179baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/064ce26acb0905a2d9ba418ca486888868179baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ae601015839cc1835b55134bc9899c475ef77c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae601015839cc1835b55134bc9899c475ef77c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae601015839cc1835b55134bc9899c475ef77c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae601015839cc1835b55134bc9899c475ef77c2/comments", "author": null, "committer": null, "parents": [{"sha": "329af3c7e9317952d68d3522e9e3aa6ac188332a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329af3c7e9317952d68d3522e9e3aa6ac188332a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329af3c7e9317952d68d3522e9e3aa6ac188332a"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "0fc7dfd0ef9fb082210aff7db12ae8de8ef2490c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae601015839cc1835b55134bc9899c475ef77c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae601015839cc1835b55134bc9899c475ef77c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ae601015839cc1835b55134bc9899c475ef77c2", "patch": "@@ -1,3 +1,9 @@\n+2011-07-08  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* genattrtab.c (evaluate_eq_attr): Allow an attribute to be defined\n+\tin terms of another.\n+\t(write_attr_value): Write a cast if necessary.\n+\n 2011-07-08  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary_loc): Remove index +p PTR -> PTR +p index\n@@ -19,7 +25,7 @@\n \toverlapping when it is call to address.\n \n 2011-07-08  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/avr.c (output_reload_insisf): Use 'REG_Z+1' instead\n \tof magic '31'.\n "}, {"sha": "e927ca2492c58c5b7e9a1c77ffa10cfd3714bbec", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae601015839cc1835b55134bc9899c475ef77c2/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae601015839cc1835b55134bc9899c475ef77c2/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=9ae601015839cc1835b55134bc9899c475ef77c2", "patch": "@@ -1916,6 +1916,37 @@ evaluate_eq_attr (rtx exp, struct attr_desc *attr, rtx value,\n   rtx newexp;\n   int i;\n \n+  while (GET_CODE (value) == ATTR)\n+    {\n+      struct attr_value *av = NULL;\n+\n+      attr = find_attr (&XSTR (value, 0), 0);\n+\n+      if (insn_code_values)\n+        {\n+          struct attr_value_list *iv;\n+          for (iv = insn_code_values[insn_code]; iv; iv = iv->next)\n+            if (iv->attr == attr)\n+              {\n+                av = iv->av;\n+                break;\n+              }\n+        }\n+      else\n+        {\n+          struct insn_ent *ie;\n+          for (av = attr->first_value; av; av = av->next)\n+            for (ie = av->first_insn; ie; ie = ie->next)\n+              if (ie->def->insn_code == insn_code)\n+                goto got_av;\n+        }\n+      if (av)\n+        {\n+        got_av:\n+          value = av->value;\n+        }\n+    }\n+\n   switch (GET_CODE (value))\n     {\n     case CONST_STRING:\n@@ -4119,6 +4150,13 @@ write_attr_value (struct attr_desc *attr, rtx value)\n     case ATTR:\n       {\n \tstruct attr_desc *attr2 = find_attr (&XSTR (value, 0), 0);\n+\tif (attr->enum_name)\n+\t  printf (\"(enum %s)\", attr->enum_name);\n+\telse if (!attr->is_numeric)\n+\t  printf (\"(enum attr_%s)\", attr->name);\n+\telse if (!attr2->is_numeric)\n+\t  printf (\"(int)\");\n+\n \tprintf (\"get_attr_%s (%s)\", attr2->name,\n \t\t(attr2->is_const ? \"\" : \"insn\"));\n       }"}]}