{"sha": "d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "node_id": "C_kwDOANBUbNoAKGQyMzgxNDZlNDFlZjk4NmNkNTNlYTJjOWJmN2FkODVjNGI4MWU2OTA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-30T00:16:20Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-30T00:16:20Z"}, "message": "Daily bump.", "tree": {"sha": "6442db9f7b477780207aceb74d7ac18b9f4fa97f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6442db9f7b477780207aceb74d7ac18b9f4fa97f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/comments", "author": null, "committer": null, "parents": [{"sha": "d6a87d96d7473cbd2404d5dcc7eef36a7f53b2b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a87d96d7473cbd2404d5dcc7eef36a7f53b2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a87d96d7473cbd2404d5dcc7eef36a7f53b2b2"}], "stats": {"total": 197, "additions": 196, "deletions": 1}, "files": [{"sha": "913f9a68cb97194b9bf6feea8945f9209f16c601", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "patch": "@@ -1,3 +1,7 @@\n+2021-09-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* MAINTAINERS: Add myself to DCO section.\n+\n 2021-09-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* configure: Regenerate."}, {"sha": "5fcfd86ebbc717c163ab47cafffdbb9d4c3fed11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "patch": "@@ -1,3 +1,71 @@\n+2021-09-29  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR debug/102507\n+\t* btfout.c (GTY): Add GTY (()) albeit for cosmetic only purpose.\n+\t(btf_finalize): Empty the hash_map btf_var_ids.\n+\n+2021-09-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (thread_through_all_blocks): Return bool.\n+\t(execute_vrp_threader): Return TODO_* flags.\n+\t(pass_data_vrp_threader): Set todo_flags_finish to 0.\n+\n+2021-09-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* timevar.def (TV_TREE_VRP_THREADER): New.\n+\t* tree-vrp.c: Use TV_TREE_VRP_THREADER for VRP threader pass.\n+\n+2021-09-29  David Faust  <david.faust@oracle.com>\n+\n+\t* config.gcc (bpf-*-*): Do not overwrite extra_headers.\n+\n+2021-09-29  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_BINOP_PPU): Define\n+\tnew type qualifier enum.\n+\t(TYPES_TERNOP_SSSU): Likewise.\n+\t(TYPES_TERNOP_PPPU): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def: Define PPU, SSU,\n+\tPPPU and SSSU builtin generator macros for qtbl1 and qtbx1\n+\tNeon builtins.\n+\t* config/aarch64/arm_neon.h (vqtbl1_p8): Use type-qualified\n+\tbuiltin and remove casts.\n+\t(vqtbl1_s8): Likewise.\n+\t(vqtbl1q_p8): Likewise.\n+\t(vqtbl1q_s8): Likewise.\n+\t(vqtbx1_s8): Likewise.\n+\t(vqtbx1_p8): Likewise.\n+\t(vqtbx1q_s8): Likewise.\n+\t(vqtbx1q_p8): Likewise.\n+\t(vtbl1_p8): Likewise.\n+\t(vtbl2_p8): Likewise.\n+\t(vtbx2_p8): Likewise.\n+\n+2021-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_dr_misalign_for_aligned_access):\n+\tNew helper.\n+\t(vect_update_misalignment_for_peel): Use it to update\n+\tmisaligned to the value necessary for an aligned access.\n+\t(vect_get_peeling_costs_all_drs): Likewise.\n+\t(vect_enhance_data_refs_alignment): Likewise.\n+\n+2021-09-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_cpymem): Count number of\n+\temitted operations and adjust heuristic for code size.\n+\n+2021-09-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_setmem): Count number of\n+\temitted operations and adjust heuristic for code size.\n+\n+2021-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102504\n+\t* gimplify.c (gimplify_scan_omp_clauses): Use omp_check_private even\n+\tin OMP_SCOPE clauses, not just on worksharing construct clauses.\n+\n 2021-09-28  Geng Qi  <gengqi@linux.alibaba.com>\n \n \t* config/riscv/riscv.md\t(mulv<mode>4): Call gen_smul<mode>3_highpart."}, {"sha": "93df3df620269a27711c47c7b3494be6af983ce6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "patch": "@@ -1 +1 @@\n-20210929\n+20210930"}, {"sha": "123096d1aa7952cfa63b8df718ab97200e6319ba", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "patch": "@@ -1,3 +1,8 @@\n+2021-09-29  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102520\n+\t* array.c (expand_constructor): Do not dereference NULL pointer.\n+\n 2021-09-27  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/94070"}, {"sha": "f5a240753bacadec9df4522388629e2d7106a934", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "patch": "@@ -1,3 +1,58 @@\n+2021-09-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR testsuite/102501\n+\t* gcc.dg/tree-ssa/pr66752-3.c: Adjust.\n+\t* gcc.dg/tree-ssa/pr77445-2.c: Adjust.\n+\n+2021-09-29  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102520\n+\t* gfortran.dg/pr102520.f90: New test.\n+\n+2021-09-29  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.c-torture/compile/920831-1.c: Fix computed goto types.\n+\t* gcc.c-torture/compile/pr27863.c: Likewise.\n+\n+2021-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/102517\n+\t* gcc.dg/pr78408-1.c: Make S not power-of-two size.\n+\n+2021-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vect-alignment-peeling-1.c: New testcase.\n+\t* gcc.target/i386/vect-alignment-peeling-2.c: Likewise.\n+\n+2021-09-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/cpymem-size.c: New test.\n+\n+2021-09-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/memset-corner-cases-2.c: New test.\n+\t* gcc.target/aarch64/memset-strict-align-1.c: Adjust.\n+\n+2021-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102504\n+\t* c-c++-common/gomp/scope-4.c: New test.\n+\n+2021-09-29  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.c-torture/compile/920826-1.c: Fix computed goto.\n+\t* gcc.c-torture/compile/pr27863.c: Likewise.\n+\t* gcc.c-torture/compile/pr70190.c: Likewise.\n+\t* gcc.dg/torture/pr89135.c: Likewise.\n+\t* gcc.dg/torture/pr90071.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-pr97709.c: Likewise.\n+\n+2021-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/out-of-bounds-1.c: Make memcpied size not power-of-two.\n+\n 2021-09-28  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/99909"}, {"sha": "8b2bf671a4cacde2fc09f8e473cca36fbefe2c18", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d238146e41ef986cd53ea2c9bf7ad85c4b81e690/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d238146e41ef986cd53ea2c9bf7ad85c4b81e690", "patch": "@@ -1,3 +1,66 @@\n+2021-09-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (basic_regex::multiline): Define constant\n+\tfor C++17.\n+\t* include/bits/regex_constants.h (regex_constants::multiline):\n+\tDefine constant for C++17.\n+\t(regex_constants::__multiline): Define duplicate constant for\n+\tinternal use in C++11 and C++14.\n+\t* include/bits/regex_executor.h (_Executor::_M_match_multiline()):\n+\tNew member function.\n+\t(_Executor::_M_is_line_terminator(_CharT)): New member function.\n+\t(_Executor::_M_at_begin(), _Executor::_M_at_end()): Use new\n+\tmember functions to support multiline matches.\n+\t* testsuite/28_regex/algorithms/regex_match/multiline.cc: New test.\n+\n+2021-09-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_compiler.h (_Compiler::_S_validate): New\n+\tfunction.\n+\t* include/bits/regex_compiler.tcc (_Compiler::_Compiler): Use\n+\t_S_validate to check flags.\n+\t* include/bits/regex_error.h (_S_grammar): New error code for\n+\tinternal use.\n+\t* testsuite/28_regex/basic_regex/ctors/grammar.cc: New test.\n+\n+2021-09-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/84110\n+\t* include/bits/regex_error.h (regex_constants::_S_null): New\n+\terror code for internal use.\n+\t* include/bits/regex_scanner.tcc (_Scanner::_M_scan_normal()):\n+\tCheck for null character.\n+\t* testsuite/28_regex/basic_regex/84110.cc: New test.\n+\n+2021-09-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (__detail::__is_contiguous_iter): Move\n+\there from <bits/regex_compiler.h>.\n+\t(basic_regex::_M_compile): New function to compile an NFA from\n+\ta regular expression string.\n+\t(basic_regex::basic_regex): Use _M_compile instead of delegating\n+\tto other constructors.\n+\t(basic_regex::operator=(const basic_regex&)): Define as\n+\tdefaulted.\n+\t(basic_regex::operator=(initializer_list<C>)): Use _M_compile.\n+\t(basic_regex::assign(const basic_regex&)): Use copy assignment.\n+\t(basic_regex::assign(basic_regex&&)): Use move assignment.\n+\t(basic_regex::assign(const C*, flag_type)): Use _M_compile\n+\tinstead of constructing a temporary string.\n+\t(basic_regex::assign(const C*, size_t, flag_type)): Likewise.\n+\t(basic_regex::assign(const basic_string<C,T,A>&, flag_type)):\n+\tUse _M_compile instead of constructing a temporary basic_regex.\n+\t(basic_regex::assign(InputIter, InputIter, flag_type)): Avoid\n+\tconstructing a temporary string for contiguous iterators of the\n+\tright value type.\n+\t* include/bits/regex_compiler.h (__is_contiguous_iter): Move to\n+\t<bits/regex.h>.\n+\t(__enable_if_contiguous_iter, __disable_if_contiguous_iter)\n+\t(__compile_nfa): Remove.\n+\t* testsuite/28_regex/basic_regex/assign/exception_safety.cc: New\n+\ttest.\n+\t* testsuite/28_regex/basic_regex/ctors/char/other.cc: New test.\n+\n 2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_timed_wait.h (__platform_wait_until_impl):"}]}