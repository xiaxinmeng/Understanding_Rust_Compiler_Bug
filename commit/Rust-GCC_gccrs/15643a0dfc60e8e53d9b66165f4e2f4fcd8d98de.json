{"sha": "15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU2NDNhMGRmYzYwZThlNTNkOWI2NjE2NWY0ZTJmNGZjZDhkOThkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-19T12:46:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-19T12:46:57Z"}, "message": "re PR target/92140 (clang vs gcc optimizing with adc/sbb)\n\n\tPR target/92140\n\t* config/i386/predicates.md (int_nonimmediate_operand): New special\n\tpredicate.\n\t* config/i386/i386.md (*add<mode>3_eq, *add<mode>3_ne,\n\t*add<mode>3_eq_0, *add<mode>3_ne_0, *sub<mode>3_eq, *sub<mode>3_ne,\n\t*sub<mode>3_eq_1, *sub<mode>3_eq_0, *sub<mode>3_ne_0): New\n\tdefine_insn_and_split patterns.\n\n\t* gcc.target/i386/pr92140.c: New test.\n\t* gcc.c-torture/execute/pr92140.c: New test.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r277203", "tree": {"sha": "3f46d62c0e0d813672986e1e5292eaaeb307b3d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f46d62c0e0d813672986e1e5292eaaeb307b3d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2366bf60c667d968c88e7bcec2eb9e2b84d0172d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2366bf60c667d968c88e7bcec2eb9e2b84d0172d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2366bf60c667d968c88e7bcec2eb9e2b84d0172d"}], "stats": {"total": 369, "additions": 369, "deletions": 0}, "files": [{"sha": "49195396b0d2bebb54413a9777c5e059a9c2efb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "patch": "@@ -1,3 +1,14 @@\n+2019-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/92140\n+\t* config/i386/predicates.md (int_nonimmediate_operand): New special\n+\tpredicate.\n+\t* config/i386/i386.md (*add<mode>3_eq, *add<mode>3_ne,\n+\t*add<mode>3_eq_0, *add<mode>3_ne_0, *sub<mode>3_eq, *sub<mode>3_ne,\n+\t*sub<mode>3_eq_1, *sub<mode>3_eq_0, *sub<mode>3_ne_0): New\n+\tdefine_insn_and_split patterns.\n+\n 2019-10-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/rs6000.md: Delete out--of-date comment about"}, {"sha": "a1b849eaa9e45549de154763159ac9bfa8fdd3cc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "patch": "@@ -6843,6 +6843,228 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; x == 0 with zero flag test can be done also as x < 1U with carry flag\n+;; test, where the latter is preferrable if we have some carry consuming\n+;; instruction.\n+;; For x != 0, we need to use x < 1U with negation of carry, i.e.\n+;; + (1 - CF).\n+(define_insn_and_split \"*add<mode>3_eq\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(plus:SWI\n+\t  (plus:SWI\n+\t    (eq:SWI (match_operand 3 \"int_nonimmediate_operand\") (const_int 0))\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\"))\n+\t  (match_operand:SWI 2 \"<general_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 3) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (plus:SWI\n+\t\t     (plus:SWI (ltu:SWI (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t       (match_dup 1))\n+\t\t     (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_insn_and_split \"*add<mode>3_ne\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(plus:SWI\n+\t  (plus:SWI\n+\t    (ne:SWI (match_operand 3 \"int_nonimmediate_operand\") (const_int 0))\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\"))\n+\t  (match_operand:SWI 2 \"<immediate_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"CONST_INT_P (operands[2])\n+   && (<MODE>mode != DImode\n+       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n+   && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 3) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (minus:SWI\n+\t\t     (minus:SWI (match_dup 1)\n+\t\t\t\t(ltu:SWI (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_int_mode (~INTVAL (operands[2]),\n+\t\t\t      <MODE>mode == DImode ? SImode : <MODE>mode);\n+})\n+\n+(define_insn_and_split \"*add<mode>3_eq_0\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(plus:SWI\n+\t  (eq:SWI (match_operand 2 \"int_nonimmediate_operand\") (const_int 0))\n+\t  (match_operand:SWI 1 \"<general_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_unary_operator_ok (PLUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 2) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (plus:SWI (ltu:SWI (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t     (match_dup 1)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  if (!nonimmediate_operand (operands[1], <MODE>mode))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+})\n+\n+(define_insn_and_split \"*add<mode>3_ne_0\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(plus:SWI\n+\t  (ne:SWI (match_operand 2 \"int_nonimmediate_operand\") (const_int 0))\n+\t  (match_operand:SWI 1 \"<general_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_unary_operator_ok (PLUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 2) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (minus:SWI (minus:SWI\n+\t\t\t\t(match_dup 1)\n+\t\t\t\t(ltu:SWI (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t\t      (const_int -1)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  if (!nonimmediate_operand (operands[1], <MODE>mode))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+})\n+\n+(define_insn_and_split \"*sub<mode>3_eq\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(minus:SWI\n+\t  (minus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\")\n+\t    (eq:SWI (match_operand 3 \"int_nonimmediate_operand\")\n+\t\t    (const_int 0)))\n+\t  (match_operand:SWI 2 \"<general_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 3) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (minus:SWI\n+\t\t     (minus:SWI (match_dup 1)\n+\t\t\t\t(ltu:SWI (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_insn_and_split \"*sub<mode>3_ne\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(plus:SWI\n+\t  (minus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\")\n+\t    (ne:SWI (match_operand 3 \"int_nonimmediate_operand\")\n+\t\t    (const_int 0)))\n+\t  (match_operand:SWI 2 \"<immediate_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"CONST_INT_P (operands[2])\n+   && (<MODE>mode != DImode\n+       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n+   && ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 3) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (plus:SWI\n+\t\t     (plus:SWI (ltu:SWI (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t       (match_dup 1))\n+\t\t     (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_int_mode (INTVAL (operands[2]) - 1,\n+\t\t\t      <MODE>mode == DImode ? SImode : <MODE>mode);\n+})\n+\n+(define_insn_and_split \"*sub<mode>3_eq_1\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(plus:SWI\n+\t  (minus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\")\n+\t    (eq:SWI (match_operand 3 \"int_nonimmediate_operand\")\n+\t\t    (const_int 0)))\n+\t  (match_operand:SWI 2 \"<immediate_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"CONST_INT_P (operands[2])\n+   && (<MODE>mode != DImode\n+       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n+   && ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 3) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (minus:SWI\n+\t\t     (minus:SWI (match_dup 1)\n+\t\t\t\t(ltu:SWI (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_int_mode (-INTVAL (operands[2]),\n+\t\t\t      <MODE>mode == DImode ? SImode : <MODE>mode);\n+})\n+\n+(define_insn_and_split \"*sub<mode>3_eq_0\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(minus:SWI\n+\t  (match_operand:SWI 1 \"<general_operand>\")\n+\t  (eq:SWI (match_operand 2 \"int_nonimmediate_operand\") (const_int 0))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_unary_operator_ok (MINUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 2) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (minus:SWI (match_dup 1)\n+\t\t\t      (ltu:SWI (reg:CC FLAGS_REG) (const_int 0))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  if (!nonimmediate_operand (operands[1], <MODE>mode))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+})\n+\n+(define_insn_and_split \"*sub<mode>3_ne_0\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(minus:SWI\n+\t  (match_operand:SWI 1 \"<general_operand>\")\n+\t  (ne:SWI (match_operand 2 \"int_nonimmediate_operand\") (const_int 0))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_unary_operator_ok (MINUS, <MODE>mode, operands)\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_dup 2) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (plus:SWI (plus:SWI\n+\t\t\t       (ltu:SWI (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t       (match_dup 1))\n+\t\t\t     (const_int -1)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  if (!nonimmediate_operand (operands[1], <MODE>mode))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+})\n+\n ;; The patterns that match these are at the end of this file.\n \n (define_expand \"<plusminus_insn>xf3\""}, {"sha": "279827f3ecd82b99dbcbe77c7d0b23a99550703b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "patch": "@@ -100,6 +100,15 @@\n \t    (match_test \"GET_MODE (op) == SImode\")\n \t    (match_test \"GET_MODE (op) == HImode\"))))\n \n+;; Match a DI, SI, HI or QImode nonimmediate_operand.\n+(define_special_predicate \"int_nonimmediate_operand\"\n+  (and (match_operand 0 \"nonimmediate_operand\")\n+       (ior (and (match_test \"TARGET_64BIT\")\n+\t\t (match_test \"GET_MODE (op) == DImode\"))\n+\t    (match_test \"GET_MODE (op) == SImode\")\n+\t    (match_test \"GET_MODE (op) == HImode\")\n+\t    (match_test \"GET_MODE (op) == QImode\"))))\n+\n ;; Match register operands, but include memory operands for TARGET_SSE_MATH.\n (define_predicate \"register_ssemem_operand\"\n   (if_then_else"}, {"sha": "c22b137f90af3b5776c39f2363b62ccd4d15ea36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "patch": "@@ -1,3 +1,9 @@\n+2019-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92140\n+\t* gcc.target/i386/pr92140.c: New test.\n+\t* gcc.c-torture/execute/pr92140.c: New test.\n+\n 2019-10-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.dg/Wnonnull.c: Add attributed function declarations for"}, {"sha": "1036fd88db3a3d5e0b747335ad4372488a7f2c23", "filename": "gcc/testsuite/gcc.c-torture/execute/pr92140.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr92140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr92140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr92140.c?ref=15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "patch": "@@ -0,0 +1,83 @@\n+/* PR target/92140 */\n+\n+char c;\n+int v;\n+\n+__attribute__((noipa)) void f1 (void) { v += c != 0; }\n+__attribute__((noipa)) void f2 (void) { v -= c != 0; }\n+__attribute__((noipa)) void f3 (void) { v += c == 0; }\n+__attribute__((noipa)) void f4 (void) { v -= c == 0; }\n+__attribute__((noipa)) void f5 (void) { v += (c != 0) - 26; }\n+__attribute__((noipa)) void f6 (void) { v -= (c != 0) - 26; }\n+__attribute__((noipa)) void f7 (void) { v += (c == 0) - 26; }\n+__attribute__((noipa)) void f8 (void) { v -= (c == 0) - 26; }\n+__attribute__((noipa)) void f9 (void) { v += (c != 0) + 42; }\n+__attribute__((noipa)) void f10 (void) { v -= (c != 0) + 42; }\n+__attribute__((noipa)) void f11 (void) { v += (c == 0) + 42; }\n+__attribute__((noipa)) void f12 (void) { v -= (c == 0) + 42; }\n+__attribute__((noipa)) void f13 (int z) { v += (c == 0) + z; }\n+__attribute__((noipa)) void f14 (int z) { v -= (c == 0) + z; }\n+__attribute__((noipa)) unsigned int f15 (unsigned int n) { return n ? 2 : 1; }\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    {\n+      v = 15;\n+      if (i == 1)\n+\tc = 37;\n+      f1 ();\n+      if (v != 15 + i)\n+\t__builtin_abort ();\n+      f2 ();\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f3 ();\n+      if (v != 16 - i)\n+\t__builtin_abort ();\n+      f4 ();\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f5 ();\n+      if (v != 15 + i - 26)\n+\t__builtin_abort ();\n+      f6 ();\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f7 ();\n+      if (v != 16 - i - 26)\n+\t__builtin_abort ();\n+      f8 ();\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f9 ();\n+      if (v != 15 + i + 42)\n+\t__builtin_abort ();\n+      f10 ();\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f11 ();\n+      if (v != 16 - i + 42)\n+\t__builtin_abort ();\n+      f12 ();\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f13 (173);\n+      if (v != 16 - i + 173)\n+\t__builtin_abort ();\n+      f14 (173);\n+      if (v != 15)\n+\t__builtin_abort ();\n+      f13 (-35);\n+      if (v != 16 - i - 35)\n+\t__builtin_abort ();\n+      f14 (-35);\n+      if (v != 15)\n+\t__builtin_abort ();\n+    }\n+  if (f15 (0) != 1 || f15 (1) != 2 || f15 (371) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "f21544e21fcfd23499410889de44a9548d2cb0a1", "filename": "gcc/testsuite/gcc.target/i386/pr92140.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92140.c?ref=15643a0dfc60e8e53d9b66165f4e2f4fcd8d98de", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/92140 */\n+/* { dg-do compile { target nonpic } } */\n+/* { dg-options \"-O2 -mtune=generic -masm=att\" } */\n+/* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$-1, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t\\\\\\$-1, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t\\\\\\$0, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$0, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$25, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t\\\\\\$25, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t\\\\\\$-26, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$-26, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$-43, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t\\\\\\$-43, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t\\\\\\$42, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$42, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tadcl\\t%\\[a-z0-9]*, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t%\\[a-z0-9]*, v\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsbbl\\t\\\\\\$-1, %\" 1 } } */\n+\n+char c;\n+int v;\n+\n+__attribute__((noipa)) void f1 (void) { v += c != 0; }\n+__attribute__((noipa)) void f2 (void) { v -= c != 0; }\n+__attribute__((noipa)) void f3 (void) { v += c == 0; }\n+__attribute__((noipa)) void f4 (void) { v -= c == 0; }\n+__attribute__((noipa)) void f5 (void) { v += (c != 0) - 26; }\n+__attribute__((noipa)) void f6 (void) { v -= (c != 0) - 26; }\n+__attribute__((noipa)) void f7 (void) { v += (c == 0) - 26; }\n+__attribute__((noipa)) void f8 (void) { v -= (c == 0) - 26; }\n+__attribute__((noipa)) void f9 (void) { v += (c != 0) + 42; }\n+__attribute__((noipa)) void f10 (void) { v -= (c != 0) + 42; }\n+__attribute__((noipa)) void f11 (void) { v += (c == 0) + 42; }\n+__attribute__((noipa)) void f12 (void) { v -= (c == 0) + 42; }\n+__attribute__((noipa)) void f13 (int z) { v += (c == 0) + z; }\n+__attribute__((noipa)) void f14 (int z) { v -= (c == 0) + z; }\n+__attribute__((noipa)) unsigned int f15 (unsigned int n) { return n ? 2 : 1; }"}]}