{"sha": "aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "node_id": "C_kwDOANBUbNoAKGFlZTQzZDI2ZThmOWJiNmU0ZDE4YTQwNzVjYmVjOWY2ZTUxNzFkZmY", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-03-03T18:59:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-03-03T18:59:27Z"}, "message": "[arm] adjust tests for quotes around +cdecp<N>\n\nBack when quotes were added around \"+cdecp<N>\" in the \"coproc must be\na constant immediate\" error in arm-builtins.cc, tests for that message\nlagged behind.  Fixed thusly.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/arm/acle/cde-errors.c: Adjust messages for quote\n\taround +cdecp<N>.\n\t* gcc.target/arm/acle/cde-mve-error-2.c: Likewise.", "tree": {"sha": "5bb65bd68241ef245ee997eeaff7528af2fd87f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb65bd68241ef245ee997eeaff7528af2fd87f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff/comments", "author": null, "committer": null, "parents": [{"sha": "a36ae454c45325fa01763d5fee27db37e4ecd59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36ae454c45325fa01763d5fee27db37e4ecd59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36ae454c45325fa01763d5fee27db37e4ecd59e"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "f38514848677e3bf5118bd615526d9a950a41e5b", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-errors.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c?ref=aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "patch": "@@ -47,19 +47,19 @@ uint64_t test_cde (uint32_t n, uint32_t m)\n   accum += __arm_cx3da (7, accum, n, m,           0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n \n   /* `coproc` out of range.  */\n-  accum += __arm_cx1   (8,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx1a  (8, (uint32_t)accum,       0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2   (8, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2a  (8, (uint32_t)accum, n,    0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3   (8, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3a  (8, (uint32_t)accum, n, m, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-\n-  accum += __arm_cx1d  (8,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx1da (8, accum,                 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2d  (8, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2da (8, accum, n,              0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3d  (8, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3da (8, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx1   (8,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx1a  (8, (uint32_t)accum,       0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2   (8, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2a  (8, (uint32_t)accum, n,    0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3   (8, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3a  (8, (uint32_t)accum, n, m, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+\n+  accum += __arm_cx1d  (8,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx1da (8, accum,                 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2d  (8, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2da (8, accum, n,              0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3d  (8, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3da (8, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n \n   /* `imm` out of range.  */\n   accum += __arm_cx1   (0,                        8192); /* { dg-error {argument 2 to '__builtin_arm_cx1si' must be a constant immediate in range \\[0-8191\\]} } */\n@@ -92,19 +92,19 @@ uint64_t test_cde (uint32_t n, uint32_t m)\n   accum += __arm_cx3da (0, accum, n, m,           n);    /* { dg-error {argument 5 to '__builtin_arm_cx3adi' must be a constant immediate in range \\[0-63\\]} } */\n \n   /* `coproc` is not an immediate.  */\n-  accum += __arm_cx1   ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx1a  ((int)m, (uint32_t)accum,       0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2   ((int)m, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2a  ((int)m, (uint32_t)accum, n,    0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3   ((int)m, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3a  ((int)m, (uint32_t)accum, n, m, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-\n-  accum += __arm_cx1d  ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx1da ((int)m, accum,                 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2d  ((int)m, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx2da ((int)m, accum, n,              0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3d  ((int)m, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_cx3da ((int)m, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx1   ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx1a  ((int)m, (uint32_t)accum,       0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2   ((int)m, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2a  ((int)m, (uint32_t)accum, n,    0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3   ((int)m, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3a  ((int)m, (uint32_t)accum, n, m, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+\n+  accum += __arm_cx1d  ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx1da ((int)m, accum,                 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2d  ((int)m, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx2da ((int)m, accum, n,              0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3d  ((int)m, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_cx3da ((int)m, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n \n   return accum;\n }"}, {"sha": "5b7774825442b6446a7ce4aa470248276816ece4", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-2.c", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c?ref=aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "patch": "@@ -46,21 +46,21 @@ uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval,\n   accum += __arm_vcx3qa_m (1, accum, n, m, 15, pred);  /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n \n   /* `coproc' out of range.  */\n-  accum += __arm_vcx1q_u8 (8, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx1qa (8, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q (8, n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q_u8 (8, n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2qa (8, accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q_u8 (8, n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q (8, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3qa (8, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-\n-  accum += __arm_vcx1q_m (8, accum, 4094, pred);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx1qa_m (8, accum, 4095, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q_m (8, accum, n, 126, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2qa_m (8, accum, n, 127, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q_m (8, accum, n, m, 15, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3qa_m (8, accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1q_u8 (8, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx1qa (8, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2q (8, n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2q_u8 (8, n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2qa (8, accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3q_u8 (8, n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3q (8, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3qa (8, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+\n+  accum += __arm_vcx1q_m (8, accum, 4094, pred);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx1qa_m (8, accum, 4095, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2q_m (8, accum, n, 126, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2qa_m (8, accum, n, 127, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3q_m (8, accum, n, m, 15, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3qa_m (8, accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n \n   /* `imm' out of range.  */\n   accum += __arm_vcx1q_u8 (0, 4096);           /* { dg-error {argument 2 to '__builtin_arm_vcx1qv16qi' must be a constant immediate in range \\[0-4095\\]} } */\n@@ -97,21 +97,21 @@ uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval,\n   accum += __arm_vcx3qa_m (0, accum, n, m, someval, pred); /* { dg-error {argument 5 to '__builtin_arm_vcx3qa_p_v16qi' must be a constant immediate in range \\[0-15\\]} } */\n \n   /* `coproc' is not an immediate.  */\n-  accum += __arm_vcx1q_u8 (someval, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx1qa (someval, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q (someval, n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q_u8 (someval, n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2qa (someval, accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q_u8 (someval, n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q (someval, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3qa (someval, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-\n-  accum += __arm_vcx1q_m (someval, accum, 4096, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx1qa_m (someval, accum, 4095, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2q_m (someval, accum, n, 126, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx2qa_m (someval, accum, n, 127, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3q_m (someval, accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n-  accum += __arm_vcx3qa_m (someval, accum, n, m, 15, pred); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1q_u8 (someval, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx1qa (someval, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2q (someval, n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2q_u8 (someval, n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2qa (someval, accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3q_u8 (someval, n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3q (someval, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3qa (someval, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+\n+  accum += __arm_vcx1q_m (someval, accum, 4096, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx1qa_m (someval, accum, 4095, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2q_m (someval, accum, n, 126, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx2qa_m (someval, accum, n, 127, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3q_m (someval, accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n+  accum += __arm_vcx3qa_m (someval, accum, n, m, 15, pred); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n \n   /* `imm' is of wrong type.  */\n   accum += __arm_vcx1q_u8 (0, \"\");                    /* { dg-error {argument 2 to '__builtin_arm_vcx1qv16qi' must be a constant immediate in range \\[0-4095\\]} } */\n@@ -145,28 +145,28 @@ uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval,\n   /* { dg-warning {passing argument 5 of '__builtin_arm_vcx3qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 144 } */\n \n   /* `coproc' is of wrong type.  */\n-  accum += __arm_vcx1qa (\"\", accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa (\"\", accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 148 } */\n-  accum += __arm_vcx2q (\"\", n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q (\"\", n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 150 } */\n-  accum += __arm_vcx2qa (\"\", accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa (\"\", accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 152 } */\n-  accum += __arm_vcx3q (\"\", n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q (\"\", n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 154 } */\n-  accum += __arm_vcx3qa (\"\", accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa (\"\", accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3qav16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 156 } */\n \n-  accum += __arm_vcx1q_m (\"\", accum, 4094, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1q_m (\"\", accum, 4094, pred);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 159 } */\n-  accum += __arm_vcx1qa_m (\"\", accum, 4095, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa_m (\"\", accum, 4095, pred);     /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 161 } */\n-  accum += __arm_vcx2q_m (\"\", accum, n, 126, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q_m (\"\", accum, n, 126, pred);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 163 } */\n-  accum += __arm_vcx2qa_m (\"\", accum, n, 127, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa_m (\"\", accum, n, 127, pred);   /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx2qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 165 } */\n-  accum += __arm_vcx3q_m (\"\", accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q_m (\"\", accum, n, m, 15, pred);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3q_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 167 } */\n-  accum += __arm_vcx3qa_m (\"\", accum, n, m, 15, pred); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa_m (\"\", accum, n, m, 15, pred); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with .\\+cdecp<N>.} } */\n   /* { dg-warning {passing argument 1 of '__builtin_arm_vcx3qa_p_v16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 169 } */\n \n   /* `pred\" is of wrong type.  */"}]}