{"sha": "02851c8c7f8b04a4a726e3162177a5ea4d19ca36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI4NTFjOGM3ZjhiMDRhNGE3MjZlMzE2MjE3N2E1ZWE0ZDE5Y2EzNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-01-23T11:05:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-01-23T11:05:21Z"}, "message": "Add more test coverage to selftest::test_location_wrappers\n\ngcc/ChangeLog:\n\t* tree.c (selftest::test_location_wrappers): Add more test\n\tcoverage.\n\nFrom-SVN: r256979", "tree": {"sha": "132369de3a4bbb66e43b8eb0bbc7b7cfcc7d8d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132369de3a4bbb66e43b8eb0bbc7b7cfcc7d8d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02851c8c7f8b04a4a726e3162177a5ea4d19ca36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02851c8c7f8b04a4a726e3162177a5ea4d19ca36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02851c8c7f8b04a4a726e3162177a5ea4d19ca36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02851c8c7f8b04a4a726e3162177a5ea4d19ca36/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "485cf85403386fa44d9746c7f4f449e03760eb01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485cf85403386fa44d9746c7f4f449e03760eb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485cf85403386fa44d9746c7f4f449e03760eb01"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "a845feff6aa918627ae3bd9404198923efb22717", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02851c8c7f8b04a4a726e3162177a5ea4d19ca36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02851c8c7f8b04a4a726e3162177a5ea4d19ca36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02851c8c7f8b04a4a726e3162177a5ea4d19ca36", "patch": "@@ -1,3 +1,8 @@\n+2018-01-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree.c (selftest::test_location_wrappers): Add more test\n+\tcoverage.\n+\n 2018-01-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sbitmap.c (selftest::test_set_range): Fix memory leaks."}, {"sha": "63a29f4868c4c3f051af9d2ea3bf37e21158873f", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02851c8c7f8b04a4a726e3162177a5ea4d19ca36/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02851c8c7f8b04a4a726e3162177a5ea4d19ca36/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=02851c8c7f8b04a4a726e3162177a5ea4d19ca36", "patch": "@@ -14492,6 +14492,8 @@ test_location_wrappers ()\n {\n   location_t loc = BUILTINS_LOCATION;\n \n+  ASSERT_EQ (NULL_TREE, maybe_wrap_with_location (NULL_TREE, loc));\n+\n   /* Wrapping a constant.  */\n   tree int_cst = build_int_cst (integer_type_node, 42);\n   ASSERT_FALSE (CAN_HAVE_LOCATION_P (int_cst));\n@@ -14502,6 +14504,14 @@ test_location_wrappers ()\n   ASSERT_EQ (loc, EXPR_LOCATION (wrapped_int_cst));\n   ASSERT_EQ (int_cst, tree_strip_any_location_wrapper (wrapped_int_cst));\n \n+  /* We shouldn't add wrapper nodes for UNKNOWN_LOCATION.  */\n+  ASSERT_EQ (int_cst, maybe_wrap_with_location (int_cst, UNKNOWN_LOCATION));\n+\n+  /* We shouldn't add wrapper nodes for nodes that CAN_HAVE_LOCATION_P.  */\n+  tree cast = build1 (NOP_EXPR, char_type_node, int_cst);\n+  ASSERT_TRUE (CAN_HAVE_LOCATION_P (cast));\n+  ASSERT_EQ (cast, maybe_wrap_with_location (cast, loc));\n+\n   /* Wrapping a STRING_CST.  */\n   tree string_cst = build_string (4, \"foo\");\n   ASSERT_FALSE (CAN_HAVE_LOCATION_P (string_cst));"}]}