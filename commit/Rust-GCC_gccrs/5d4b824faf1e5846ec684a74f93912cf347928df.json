{"sha": "5d4b824faf1e5846ec684a74f93912cf347928df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0YjgyNGZhZjFlNTg0NmVjNjg0YTc0ZjkzOTEyY2YzNDc5MjhkZg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-12T14:37:46Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-13T13:58:58Z"}, "message": "d: Fix ICE in finish_thunk (PR97644)\n\nBecause this what the upstream reference compiler did, thunks for the D\nfront-end were associated with the class definition, so were forced\ncode-gen even if the target function was extern.  This has now been\nchanged so there are now only generated if there is a function\ndefinition, fixing the ICE that occurred in PR 97644, which was caused\nby calling expand_thunk() early.\n\ngcc/d/ChangeLog:\n\n\tPR d/97644\n\t* dmd/MERGE: Merge upstream dmd 95044d8e4.\n\t* d-target.cc (TargetCPP::thunkMangle): New function.\n\t* decl.cc (finish_thunk): Don't force expand thunks for external\n\tfunctions.\n\t(make_thunk): Emit thunks only if the function has a definition.\n\tGenerate correct mangling for thunks to C++ classes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr92216.d: Update scan-assember.", "tree": {"sha": "3f315f89a5c9204937e5425580254ac995400584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f315f89a5c9204937e5425580254ac995400584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d4b824faf1e5846ec684a74f93912cf347928df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4b824faf1e5846ec684a74f93912cf347928df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4b824faf1e5846ec684a74f93912cf347928df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4b824faf1e5846ec684a74f93912cf347928df/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa821bba737cf3e74801c5fe4d3e87a62aa79bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa821bba737cf3e74801c5fe4d3e87a62aa79bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa821bba737cf3e74801c5fe4d3e87a62aa79bf"}], "stats": {"total": 94, "additions": 58, "deletions": 36}, "files": [{"sha": "cd136524eb9ad6f8857549ce1757e120fe2c7428", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -329,6 +329,15 @@ TargetCPP::typeInfoMangle (ClassDeclaration *cd)\n   return cppTypeInfoMangleItanium (cd);\n }\n \n+/* Get mangle name of a this-adjusting thunk to the function declaration FD\n+   at call offset OFFSET for C++ linkage.  */\n+\n+const char *\n+TargetCPP::thunkMangle (FuncDeclaration *fd, int offset)\n+{\n+  return cppThunkMangleItanium (fd, offset);\n+}\n+\n /* For a vendor-specific type, return a string containing the C++ mangling.\n    In all other cases, return NULL.  */\n "}, {"sha": "218f35838fdd3c4bb30efceecfb4f5dfe0c48c2a", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -1693,26 +1693,6 @@ finish_thunk (tree thunk, tree function)\n \n   if (DECL_ONE_ONLY (function))\n     thunk_node->add_to_same_comdat_group (funcn);\n-\n-  /* Target assemble_mi_thunk doesn't work across section boundaries\n-     on many targets, instead force thunk to be expanded in gimple.  */\n-  if (DECL_EXTERNAL (function))\n-    {\n-      /* cgraph::expand_thunk writes over current_function_decl, so if this\n-\t could ever be in use by the codegen pass, we want to know about it.  */\n-      gcc_assert (current_function_decl == NULL_TREE);\n-\n-      if (!stdarg_p (TREE_TYPE (thunk)))\n-\t{\n-\t  thunk_node->create_edge (funcn, NULL, thunk_node->count);\n-\t  expand_thunk (thunk_node, false, true);\n-\t}\n-\n-      /* Tell the back-end to not bother inlining the function, this is\n-\t assumed not to work as it could be referencing symbols outside\n-\t of the current compilation unit.  */\n-      DECL_UNINLINABLE (function) = 1;\n-    }\n }\n \n /* Return a thunk to DECL.  Thunks adjust the incoming `this' pointer by OFFSET.\n@@ -1789,12 +1769,11 @@ make_thunk (FuncDeclaration *decl, int offset)\n \n   DECL_CONTEXT (thunk) = d_decl_context (decl);\n \n-  /* Thunks inherit the public access of the function they are targetting.\n-     When the function is outside the current compilation unit however, then the\n-     thunk must be kept private to not conflict.  */\n-  TREE_PUBLIC (thunk) = TREE_PUBLIC (function) && !DECL_EXTERNAL (function);\n-\n-  DECL_EXTERNAL (thunk) = 0;\n+  /* Thunks inherit the public access of the function they are targeting.\n+     Thunks are connected to the definitions of the functions, so thunks are\n+     not produced for external functions.  */\n+  TREE_PUBLIC (thunk) = TREE_PUBLIC (function);\n+  DECL_EXTERNAL (thunk) = DECL_EXTERNAL (function);\n \n   /* Thunks are always addressable.  */\n   TREE_ADDRESSABLE (thunk) = 1;\n@@ -1806,18 +1785,31 @@ make_thunk (FuncDeclaration *decl, int offset)\n   DECL_COMDAT (thunk) = DECL_COMDAT (function);\n   DECL_WEAK (thunk) = DECL_WEAK (function);\n \n-  tree target_name = DECL_ASSEMBLER_NAME (function);\n-  unsigned identlen = IDENTIFIER_LENGTH (target_name) + 14;\n-  const char *ident = XNEWVEC (const char, identlen);\n-  snprintf (CONST_CAST (char *, ident), identlen,\n-\t    \"_DT%u%s\", offset, IDENTIFIER_POINTER (target_name));\n+  /* When the thunk is for an extern C++ function, let C++ do the thunk\n+     generation and just reference the symbol as extern, instead of\n+     forcing a D local thunk to be emitted.  */\n+  const char *ident;\n+\n+  if (decl->linkage == LINKcpp)\n+    ident = target.cpp.thunkMangle (decl, offset);\n+  else\n+    {\n+      tree target_name = DECL_ASSEMBLER_NAME (function);\n+      unsigned identlen = IDENTIFIER_LENGTH (target_name) + 14;\n+      ident = XNEWVEC (const char, identlen);\n+\n+      snprintf (CONST_CAST (char *, ident), identlen,\n+\t\t\"_DTi%u%s\", offset, IDENTIFIER_POINTER (target_name));\n+    }\n \n   DECL_NAME (thunk) = get_identifier (ident);\n   SET_DECL_ASSEMBLER_NAME (thunk, DECL_NAME (thunk));\n \n   d_keep (thunk);\n+  free (CONST_CAST (char *, ident));\n \n-  finish_thunk (thunk, function);\n+  if (!DECL_EXTERNAL (function))\n+    finish_thunk (thunk, function);\n \n   /* Add it to the list of thunks associated with the function.  */\n   DECL_LANG_THUNKS (thunk) = NULL_TREE;"}, {"sha": "e2a0bab2e4a28acba270fb11c06d1cc46806c039", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -1,4 +1,4 @@\n-bec5973b0203c95adbda2a049ccdf3cd3a4378f6\n+95044d8e45a4320f07d9c75b4eb30e55688a8195\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "3f571fcb14b7d915aa4e6c12de7ed78be89abb9b", "filename": "gcc/d/dmd/cppmangle.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2Fcppmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2Fcppmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.c?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -582,13 +582,21 @@ class CppMangleVisitor : public Visitor\n         //printf(\"mangle_function(%s)\\n\", d->toChars());\n         /*\n          * <mangled-name> ::= _Z <encoding>\n+         */\n+        buf->writestring(\"_Z\");\n+        this->mangle_function_encoding(d);\n+    }\n+\n+    void mangle_function_encoding(FuncDeclaration *d)\n+    {\n+        //printf(\"mangle_function_encoding(%s)\\n\", d->toChars());\n+        /*\n          * <encoding> ::= <function name> <bare-function-type>\n          *            ::= <data name>\n          *            ::= <special-name>\n          */\n         TypeFunction *tf = (TypeFunction *)d->type;\n \n-        buf->writestring(\"_Z\");\n         if (getFuncTemplateDecl(d))\n         {\n             /* It's an instance of a function template\n@@ -1132,3 +1140,13 @@ const char *cppTypeInfoMangleItanium(Dsymbol *s)\n     v.cpp_mangle_name(s, false);\n     return buf.extractChars();\n }\n+\n+const char *cppThunkMangleItanium(FuncDeclaration *fd, int offset)\n+{\n+    //printf(\"cppThunkMangleItanium(%s)\\n\", fd.toChars());\n+    OutBuffer buf;\n+    buf.printf(\"_ZThn%u_\", offset);  // \"Th\" means thunk, \"n%u\" is the call offset\n+    CppMangleVisitor v(&buf, fd->loc);\n+    v.mangle_function_encoding(fd);\n+    return buf.extractChars();\n+}"}, {"sha": "c60f4a73440466341ef1b5b3838a6d1ee624919c", "filename": "gcc/d/dmd/mangle.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2Fmangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2Fmangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmangle.h?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -20,6 +20,7 @@ struct OutBuffer;\n // In cppmangle.c\n const char *toCppMangleItanium(Dsymbol *s);\n const char *cppTypeInfoMangleItanium(Dsymbol *s);\n+const char *cppThunkMangleItanium(FuncDeclaration *fd, int offset);\n \n // In cppmanglewin.c\n const char *toCppMangleMSVC(Dsymbol *s);"}, {"sha": "f2a55d6a134c05d30dc1b6c6490f8ef69abc366f", "filename": "gcc/d/dmd/target.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Fd%2Fdmd%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftarget.h?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -19,6 +19,7 @@\n class ClassDeclaration;\n class Dsymbol;\n class Expression;\n+class FuncDeclaration;\n class Parameter;\n class Type;\n class TypeTuple;\n@@ -38,6 +39,7 @@ struct TargetCPP\n \n     const char *toMangle(Dsymbol *s);\n     const char *typeInfoMangle(ClassDeclaration *cd);\n+    const char *thunkMangle(FuncDeclaration *fd, int offset);\n     const char *typeMangle(Type *t);\n     Type *parameterType(Parameter *p);\n     bool fundamentalType(const Type *t, bool& isFundamental);"}, {"sha": "3aff160f7992e33e847ba576de2a7ac5c6a5a0f2", "filename": "gcc/testsuite/gdc.dg/pr92216.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Ftestsuite%2Fgdc.dg%2Fpr92216.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b824faf1e5846ec684a74f93912cf347928df/gcc%2Ftestsuite%2Fgdc.dg%2Fpr92216.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr92216.d?ref=5d4b824faf1e5846ec684a74f93912cf347928df", "patch": "@@ -1,8 +1,8 @@\n // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92216\n // { dg-options \"-I $srcdir/gdc.dg\" }\n // { dg-do compile }\n-// { dg-final { scan-assembler \"_DT(4|8|16)_D7imports7pr922161B8__mixin24getSMFZPv\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler-not \"(.globl|.global)\\[ \t\\]+_DT(4|8|16)_D7imports7pr922161B8__mixin24getSMFZPv\" } }\n+// { dg-final { scan-assembler \"_DTi(4|8|16)_D7imports7pr922161B8__mixin24getSMFZPv\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler-not \"(.globl|.global)\\[ \t\\]+_DTi(4|8|16)_D7imports7pr922161B8__mixin24getSMFZPv\" } }\n module pr92216;\n \n private import imports.pr92216;"}]}