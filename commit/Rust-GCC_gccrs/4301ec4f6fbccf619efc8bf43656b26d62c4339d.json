{"sha": "4301ec4f6fbccf619efc8bf43656b26d62c4339d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwMWVjNGY2ZmJjY2Y2MTllZmM4YmY0MzY1NmIyNmQ2MmM0MzM5ZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2006-06-18T18:14:06Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2006-06-18T18:14:06Z"}, "message": "avr.h (avr_have_movw_lpmx_p): Declare.\n\n\t* config/avr/avr.h (avr_have_movw_lpmx_p): Declare.\n\t(TARGET_CPU_CPP_BUILTINS): Add __AVR_HAVE_MOVW__ and \n\t__AVR_HAVE_LPMX__.\n\t(AVR_HAVE_MOVW) Define.\n\t(ASSEMBLER_DIALECT): Use AVR_HAVE_MOVW.\n\t(ASM_SPEC): Add avr25.\n\t(LINK_SPEC): Add avr25.\n\t* config/avr/avr.c (avr_have_movw_lpmx_p): Add.\n\t(base_arch_s): Add new member 'have_movw_lpmx'.\n\t(avr_arch_types): Init 'have_movw_lpmx'.\n\t(avr_mcu_types): Add 'avr25'. Move attiny13, attiny2313, attiny24,\n\tattiny44, attiny84, attiny25, attiny45, attiny85, attiny261,\n\tattiny461, attiny861 and at86rf401 in 'avr25' arhitecture.\n\t(avr_override_options): Init 'avr_have_movw_lpmx_p'.\n\t(output_movhi, output_movsisf, ashlsi3_out, avr_rtx_costs): Use \n\tAVR_HAVE_MOVW.\n\t(avr_file_start): Do not output '.arh' derective.\n\t* config/avr/libgcc.S (mov_l): Use __AVR_HAVE_MOVW__.\n\t(__do_copy_data): Use __AVR_HAVE_LPMX__.\n\t* config/avr/avr.md (mcu_enhanced): Delete.\n\t(mcu_have_movw): Define.\n\t(negsi2, extendhisi2, zero_extendhisi2): Use 'mcu_have_movw'.\n\t(call_insn, call_value_insn): Use 'call_insn' and __AVR_HAVE_MOVW__.\n\t* config/avr/t-avr(MULTILIB_OPTIONS, MULTILIB_DIRNAMES): Add avr25.\n\t(MULTILIB_MATCHES): Add attiny13, attiny2313, attiny24, attiny44,\n\tattiny84, attiny25, attiny45, attiny85, attiny261, attiny461, \n\tattiny861 and at86rf401 devices.\n\nFrom-SVN: r114758", "tree": {"sha": "2b05d8367382dc31146b4d5d39a0a4e06357c077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b05d8367382dc31146b4d5d39a0a4e06357c077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4301ec4f6fbccf619efc8bf43656b26d62c4339d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4301ec4f6fbccf619efc8bf43656b26d62c4339d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4301ec4f6fbccf619efc8bf43656b26d62c4339d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4301ec4f6fbccf619efc8bf43656b26d62c4339d/comments", "author": null, "committer": null, "parents": [{"sha": "98efaf34b2eb96a00b58966b32a7b3081150f1c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98efaf34b2eb96a00b58966b32a7b3081150f1c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98efaf34b2eb96a00b58966b32a7b3081150f1c5"}], "stats": {"total": 152, "additions": 104, "deletions": 48}, "files": [{"sha": "505b26ecd5b1a8dfe0c7edcf393cc91fce72471e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4301ec4f6fbccf619efc8bf43656b26d62c4339d", "patch": "@@ -1,3 +1,33 @@\n+2006-06-08  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.h (avr_have_movw_lpmx_p): Declare.\n+\t(TARGET_CPU_CPP_BUILTINS): Add __AVR_HAVE_MOVW__ and \n+\t__AVR_HAVE_LPMX__.\n+\t(AVR_HAVE_MOVW) Define.\n+\t(ASSEMBLER_DIALECT): Use AVR_HAVE_MOVW.\n+\t(ASM_SPEC): Add avr25.\n+\t(LINK_SPEC): Add avr25.\n+\t* config/avr/avr.c (avr_have_movw_lpmx_p): Add.\n+\t(base_arch_s): Add new member 'have_movw_lpmx'.\n+\t(avr_arch_types): Init 'have_movw_lpmx'.\n+\t(avr_mcu_types): Add 'avr25'. Move attiny13, attiny2313, attiny24,\n+\tattiny44, attiny84, attiny25, attiny45, attiny85, attiny261,\n+\tattiny461, attiny861 and at86rf401 in 'avr25' arhitecture.\n+\t(avr_override_options): Init 'avr_have_movw_lpmx_p'.\n+\t(output_movhi, output_movsisf, ashlsi3_out, avr_rtx_costs): Use \n+\tAVR_HAVE_MOVW.\n+\t(avr_file_start): Do not output '.arh' derective.\n+\t* config/avr/libgcc.S (mov_l): Use __AVR_HAVE_MOVW__.\n+\t(__do_copy_data): Use __AVR_HAVE_LPMX__.\n+\t* config/avr/avr.md (mcu_enhanced): Delete.\n+\t(mcu_have_movw): Define.\n+\t(negsi2, extendhisi2, zero_extendhisi2): Use 'mcu_have_movw'.\n+\t(call_insn, call_value_insn): Use 'call_insn' and __AVR_HAVE_MOVW__.\n+\t* config/avr/t-avr(MULTILIB_OPTIONS, MULTILIB_DIRNAMES): Add avr25.\n+\t(MULTILIB_MATCHES): Add attiny13, attiny2313, attiny24, attiny44,\n+\tattiny84, attiny25, attiny45, attiny85, attiny261, attiny461, \n+\tattiny861 and at86rf401 devices.\n+\n 2006-06-18  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config/bfin/bfin.c (MAX_LOOP_LENGTH): Define to be 2042 instead"}, {"sha": "66ec146a36e5b3a3262cf3a9344d6b519a02c463", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=4301ec4f6fbccf619efc8bf43656b26d62c4339d", "patch": "@@ -126,20 +126,25 @@ int avr_enhanced_p = 0;\n /* Assembler only.  */\n int avr_asm_only_p = 0;\n \n+/* Core have 'MOVW' and 'LPM Rx,Z' instructions.  */\n+int avr_have_movw_lpmx_p = 0;\n+\n struct base_arch_s {\n   int asm_only;\n   int enhanced;\n   int mega;\n+  int have_movw_lpmx;\n   const char *const macro;\n };\n \n static const struct base_arch_s avr_arch_types[] = {\n-  { 1, 0, 0, NULL },  /* unknown device specified */\n-  { 1, 0, 0, \"__AVR_ARCH__=1\" },\n-  { 0, 0, 0, \"__AVR_ARCH__=2\" },\n-  { 0, 0, 1, \"__AVR_ARCH__=3\" },\n-  { 0, 1, 0, \"__AVR_ARCH__=4\" },\n-  { 0, 1, 1, \"__AVR_ARCH__=5\" }\n+  { 1, 0, 0, 0,  NULL },  /* unknown device specified */\n+  { 1, 0, 0, 0, \"__AVR_ARCH__=1\" },\n+  { 0, 0, 0, 0, \"__AVR_ARCH__=2\" },\n+  { 0, 0, 1, 0, \"__AVR_ARCH__=3\" },\n+  { 0, 1, 0, 1, \"__AVR_ARCH__=4\" },\n+  { 0, 1, 1, 1, \"__AVR_ARCH__=5\" },\n+  { 0, 0, 0, 1, \"__AVR_ARCH__=25\"}\n };\n \n struct mcu_type_s {\n@@ -173,18 +178,19 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"at90c8534\", 2, \"__AVR_AT90C8534__\" },\n   { \"at90s8535\", 2, \"__AVR_AT90S8535__\" },\n     /* Classic + MOVW, <= 8K.  */\n-  { \"attiny13\",   2, \"__AVR_ATtiny13__\" },\n-  { \"attiny2313\", 2, \"__AVR_ATtiny2313__\" },\n-  { \"attiny24\", 2, \"__AVR_ATtiny24__\" },\n-  { \"attiny44\", 2, \"__AVR_ATtiny44__\" },\n-  { \"attiny84\", 2, \"__AVR_ATtiny84__\" },\n-  { \"attiny25\", 2, \"__AVR_ATtiny25__\" },\n-  { \"attiny45\", 2, \"__AVR_ATtiny45__\" },\n-  { \"attiny85\", 2, \"__AVR_ATtiny85__\" },\n-  { \"attiny261\", 2, \"__AVR_ATtiny261__\" },\n-  { \"attiny461\", 2, \"__AVR_ATtiny461__\" },\n-  { \"attiny861\", 2, \"__AVR_ATtiny861__\" },\n-  { \"at86rf401\", 2, \"__AVR_AT86RF401__\" },\n+  { \"avr25\",      6, NULL },\n+  { \"attiny13\",   6, \"__AVR_ATtiny13__\" },\n+  { \"attiny2313\", 6, \"__AVR_ATtiny2313__\" },\n+  { \"attiny24\",   6, \"__AVR_ATtiny24__\" },\n+  { \"attiny44\",   6, \"__AVR_ATtiny44__\" },\n+  { \"attiny84\",   6, \"__AVR_ATtiny84__\" },\n+  { \"attiny25\",   6, \"__AVR_ATtiny25__\" },\n+  { \"attiny45\",   6, \"__AVR_ATtiny45__\" },\n+  { \"attiny85\",   6, \"__AVR_ATtiny85__\" },\n+  { \"attiny261\",  6, \"__AVR_ATtiny261__\" },\n+  { \"attiny461\",  6, \"__AVR_ATtiny461__\" },\n+  { \"attiny861\",  6, \"__AVR_ATtiny861__\" },\n+  { \"at86rf401\",  6, \"__AVR_AT86RF401__\" },\n     /* Classic, > 8K.  */\n   { \"avr3\",      3, NULL },\n   { \"atmega103\", 3, \"__AVR_ATmega103__\" },\n@@ -319,6 +325,7 @@ avr_override_options (void)\n   avr_asm_only_p = base->asm_only;\n   avr_enhanced_p = base->enhanced;\n   avr_mega_p = base->mega;\n+  avr_have_movw_lpmx_p = base->have_movw_lpmx;\n   avr_base_arch_macro = base->macro;\n   avr_extra_arch_macro = t->macro;\n \n@@ -1656,7 +1663,7 @@ output_movhi (rtx insn, rtx operands[], int *l)\n \t\t      AS2 (in,%B0,__SP_H__));\n \t    }\n \n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MOVW)\n \t    {\n \t      *l = 1;\n \t      return (AS2 (movw,%0,%1));\n@@ -2325,7 +2332,7 @@ output_movsisf(rtx insn, rtx operands[], int *l)\n \t{\n \t  if (true_regnum (dest) > true_regnum (src))\n \t    {\n-\t      if (AVR_ENHANCED)\n+\t      if (AVR_HAVE_MOVW)\n \t\t{\n \t\t  *l = 2;\n \t\t  return (AS2 (movw,%C0,%C1) CR_TAB\n@@ -2339,7 +2346,7 @@ output_movsisf(rtx insn, rtx operands[], int *l)\n \t    }\n \t  else\n \t    {\n-\t      if (AVR_ENHANCED)\n+\t      if (AVR_HAVE_MOVW)\n \t\t{\n \t\t  *l = 2;\n \t\t  return (AS2 (movw,%A0,%A1) CR_TAB\n@@ -2366,7 +2373,7 @@ output_movsisf(rtx insn, rtx operands[], int *l)\n \t  if (GET_CODE (src) == CONST_INT)\n \t    {\n \t      const char *const clr_op0 =\n-\t\tAVR_ENHANCED ? (AS1 (clr,%A0) CR_TAB\n+\t\tAVR_HAVE_MOVW ? (AS1 (clr,%A0) CR_TAB\n \t\t\t\tAS1 (clr,%B0) CR_TAB\n \t\t\t\tAS2 (movw,%C0,%A0))\n \t\t\t     : (AS1 (clr,%A0) CR_TAB\n@@ -2376,20 +2383,20 @@ output_movsisf(rtx insn, rtx operands[], int *l)\n \n \t      if (src == const0_rtx) /* mov r,L */\n \t\t{\n-\t\t  *l = AVR_ENHANCED ? 3 : 4;\n+\t\t  *l = AVR_HAVE_MOVW ? 3 : 4;\n \t\t  return clr_op0;\n \t\t}\n \t      else if (src == const1_rtx)\n \t\t{\n \t\t  if (!real_l)\n \t\t    output_asm_insn (clr_op0, operands);\n-\t\t  *l = AVR_ENHANCED ? 4 : 5;\n+\t\t  *l = AVR_HAVE_MOVW ? 4 : 5;\n \t\t  return AS1 (inc,%A0);\n \t\t}\n \t      else if (src == constm1_rtx)\n \t\t{\n \t\t  /* Immediate constants -1 to any register */\n-\t\t  if (AVR_ENHANCED)\n+\t\t  if (AVR_HAVE_MOVW)\n \t\t    {\n \t\t      *l = 4;\n \t\t      return (AS1 (clr,%A0)     CR_TAB\n@@ -2410,7 +2417,7 @@ output_movsisf(rtx insn, rtx operands[], int *l)\n \n \t\t  if (bit_nr >= 0)\n \t\t    {\n-\t\t      *l = AVR_ENHANCED ? 5 : 6;\n+\t\t      *l = AVR_HAVE_MOVW ? 5 : 6;\n \t\t      if (!real_l)\n \t\t\t{\n \t\t\t  output_asm_insn (clr_op0, operands);\n@@ -3301,7 +3308,7 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n \t  if (INTVAL (operands[2]) < 32)\n \t    break;\n \n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MOVW)\n \t    return *len = 3, (AS1 (clr,%D0) CR_TAB\n \t\t\t      AS1 (clr,%C0) CR_TAB\n \t\t\t      AS2 (movw,%A0,%C0));\n@@ -3338,7 +3345,7 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \t    *len = 4;\n-\t    if (AVR_ENHANCED && (reg0 + 2 != reg1))\n+\t    if (AVR_HAVE_MOVW && (reg0 + 2 != reg1))\n \t      {\n \t\t*len = 3;\n \t\treturn (AS2 (movw,%C0,%A1) CR_TAB\n@@ -3685,7 +3692,7 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \t    *len=6;\n-\t    if (AVR_ENHANCED && (reg0 != reg1 + 2))\n+\t    if (AVR_HAVE_MOVW && (reg0 != reg1 + 2))\n \t      {\n \t\t*len = 5;\n \t\treturn (AS2 (movw,%A0,%C1) CR_TAB\n@@ -3737,7 +3744,7 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t  /* fall through */\n \n \tcase 31:\n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MOVW)\n \t    return *len = 4, (AS1 (lsl,%D0)     CR_TAB\n \t\t\t      AS2 (sbc,%A0,%A0) CR_TAB\n \t\t\t      AS2 (mov,%B0,%A0) CR_TAB\n@@ -4133,7 +4140,7 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n \t  if (INTVAL (operands[2]) < 32)\n \t    break;\n \n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MOVW)\n \t    return *len = 3, (AS1 (clr,%D0) CR_TAB\n \t\t\t      AS1 (clr,%C0) CR_TAB\n \t\t\t      AS2 (movw,%A0,%C0));\n@@ -4167,7 +4174,7 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \t    *len = 4;\n-\t    if (AVR_ENHANCED && (reg0 != reg1 + 2))\n+\t    if (AVR_HAVE_MOVW && (reg0 != reg1 + 2))\n \t      {\n \t\t*len = 3;\n \t\treturn (AS2 (movw,%A0,%C1) CR_TAB\n@@ -4813,7 +4820,7 @@ avr_file_start (void)\n \n   default_file_start ();\n \n-  fprintf (asm_out_file, \"\\t.arch %s\\n\", avr_mcu_name);\n+/*  fprintf (asm_out_file, \"\\t.arch %s\\n\", avr_mcu_name);*/\n   fputs (\"__SREG__ = 0x3f\\n\"\n \t \"__SP_H__ = 0x3e\\n\"\n \t \"__SP_L__ = 0x3d\\n\", asm_out_file);\n@@ -5301,7 +5308,7 @@ avr_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 8);\n \t\tbreak;\n \t      case 31:\n-\t\t*total = COSTS_N_INSNS (AVR_ENHANCED ? 4 : 5);\n+\t\t*total = COSTS_N_INSNS (AVR_HAVE_MOVW ? 4 : 5);\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 113);"}, {"sha": "236dae79d6c3141c56e325fa86106dad281d82cd", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=4301ec4f6fbccf619efc8bf43656b26d62c4339d", "patch": "@@ -31,6 +31,10 @@ Boston, MA 02110-1301, USA.  */\n \tbuiltin_define (avr_base_arch_macro);\t\\\n       if (avr_extra_arch_macro)\t\t\t\\\n \tbuiltin_define (avr_extra_arch_macro);\t\\\n+      if (avr_have_movw_lpmx_p)\t\t\t\\\n+\tbuiltin_define (\"__AVR_HAVE_MOVW__\");\t\\\n+      if (avr_have_movw_lpmx_p)\t\t\t\\\n+\tbuiltin_define (\"__AVR_HAVE_LPMX__\");\t\\\n       if (avr_asm_only_p)\t\t\t\\\n \tbuiltin_define (\"__AVR_ASM_ONLY__\");\t\\\n       if (avr_enhanced_p)\t\t\t\\\n@@ -47,12 +51,14 @@ extern const char *avr_extra_arch_macro;\n extern int avr_mega_p;\n extern int avr_enhanced_p;\n extern int avr_asm_only_p;\n+extern int avr_have_movw_lpmx_p;\n #ifndef IN_LIBGCC2\n extern GTY(()) section *progmem_section;\n #endif\n \n #define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n #define AVR_ENHANCED (avr_enhanced_p)\n+#define AVR_HAVE_MOVW (avr_have_movw_lpmx_p)\n \n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n \n@@ -626,7 +632,7 @@ sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n \n #define USER_LABEL_PREFIX \"\"\n \n-#define ASSEMBLER_DIALECT AVR_ENHANCED\n+#define ASSEMBLER_DIALECT AVR_HAVE_MOVW\n \n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n@@ -718,7 +724,8 @@ extern int avr_case_values_threshold;\n /* A C string constant that tells the GCC drvier program options to\n    pass to `cc1plus'.  */\n \n-#define ASM_SPEC \"%{mmcu=*:-mmcu=%*}\"\n+#define ASM_SPEC \"%{mmcu=avr25:-mmcu=avr2;\\\n+mmcu=*:-mmcu=%*}\"\n \n #define LINK_SPEC \" %{!mmcu*:-m avr2}\\\n %{mmcu=at90s1200|\\\n@@ -816,7 +823,7 @@ extern int avr_case_values_threshold;\n %{mmcu=at90s8535:crts8535.o%s} \\\n %{mmcu=at86rf401:crt86401.o%s} \\\n %{mmcu=attiny13:crttn13.o%s} \\\n-%{mmcu=attiny2313:crttn2313.o%s} \\\n+%{mmcu=attiny2313|mmcu=avr25:crttn2313.o%s} \\\n %{mmcu=attiny24:crttn24.o%s} \\\n %{mmcu=attiny44:crttn44.o%s} \\\n %{mmcu=attiny84:crttn84.o%s} \\"}, {"sha": "35b86cc014d63b8ee6f0285f603400225573e89f", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=4301ec4f6fbccf619efc8bf43656b26d62c4339d", "patch": "@@ -57,8 +57,8 @@\n (define_attr \"type\" \"branch,branch1,arith,xcall\"\n   (const_string \"arith\"))\n \n-(define_attr \"mcu_enhanced\" \"yes,no\"\n-  (const (if_then_else (symbol_ref \"AVR_ENHANCED\")\n+(define_attr \"mcu_have_movw\" \"yes,no\"\n+  (const (if_then_else (symbol_ref \"AVR_HAVE_MOVW\")\n \t\t       (const_string \"yes\")\n \t\t       (const_string \"no\"))))\n \n@@ -1455,7 +1455,7 @@\n   [(set_attr_alternative \"length\"\n \t\t\t [(const_int 7)\n \t\t\t  (const_int 8)\n-\t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n+\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n \t\t\t\t\t(const_int 7)\n \t\t\t\t\t(const_int 8))])\n    (set_attr \"cc\" \"set_czn,set_n,set_czn\")])\n@@ -1533,7 +1533,7 @@\n \t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%A1}\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\"\n   [(set_attr_alternative \"length\"\n \t\t\t [(const_int 4)\n-\t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n+\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n \t\t\t\t\t(const_int 5)\n \t\t\t\t\t(const_int 6))])\n    (set_attr \"cc\" \"set_n,set_n\")])\n@@ -1570,7 +1570,7 @@\n \t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%A1}\\;clr %C0\\;clr %D0\"\n   [(set_attr_alternative \"length\"\n \t\t\t [(const_int 2)\n-\t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n+\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n \t\t\t\t\t(const_int 3)\n \t\t\t\t\t(const_int 4))])\n    (set_attr \"cc\" \"set_n,set_n\")])\n@@ -2104,7 +2104,7 @@\n      return \\\"icall\\\";\n   else if (which_alternative==1)\n     {\n-      if (AVR_ENHANCED)\n+      if (AVR_HAVE_MOVW)\n \treturn (AS2 (movw, r30, %0) CR_TAB\n \t\t\\\"icall\\\");\n       else\n@@ -2121,7 +2121,7 @@\n   [(set_attr \"cc\" \"clobber,clobber,clobber,clobber\")\n    (set_attr_alternative \"length\"\n \t\t\t [(const_int 1)\n-\t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n+\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n \t\t\t\t\t(const_int 2)\n \t\t\t\t\t(const_int 3))\n \t\t\t  (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n@@ -2141,7 +2141,7 @@\n      return \\\"icall\\\";\n   else if (which_alternative==1)\n     {\n-      if (AVR_ENHANCED)\n+      if (AVR_HAVE_MOVW)\n \treturn (AS2 (movw, r30, %1) CR_TAB\n \t\t\\\"icall\\\");\n       else\n@@ -2158,7 +2158,7 @@\n   [(set_attr \"cc\" \"clobber,clobber,clobber,clobber\")\n    (set_attr_alternative \"length\"\n \t\t\t [(const_int 1)\n-\t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n+\t\t\t  (if_then_else (eq_attr \"mcu_have_movw\" \"yes\")\n \t\t\t\t\t(const_int 2)\n \t\t\t\t\t(const_int 3))\n \t\t\t  (if_then_else (eq_attr \"mcu_mega\" \"yes\")"}, {"sha": "f600c0705462d56d8aa610f484767be93862a16e", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4301ec4f6fbccf619efc8bf43656b26d62c4339d/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=4301ec4f6fbccf619efc8bf43656b26d62c4339d", "patch": "@@ -37,11 +37,23 @@ fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/avr/t-avr\n \n FPBIT = fp-bit.c\n \n-MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr3/mmcu=avr4/mmcu=avr5\n-MULTILIB_DIRNAMES = avr2 avr3 avr4 avr5\n+MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr4/mmcu=avr5\n+MULTILIB_DIRNAMES = avr2 avr25 avr3 avr4 avr5\n \n # The many avr2 matches are not listed here - this is the default.\n MULTILIB_MATCHES = \\\n+\tmmcu?avr25=mmcu?attiny13 \\\n+\tmmcu?avr25=mmcu?attiny2313 \\\n+\tmmcu?avr25=mmcu?attiny24 \\\n+\tmmcu?avr25=mmcu?attiny44 \\\n+\tmmcu?avr25=mmcu?attiny84 \\\n+\tmmcu?avr25=mmcu?attiny25 \\\n+\tmmcu?avr25=mmcu?attiny45 \\\n+\tmmcu?avr25=mmcu?attiny85 \\\n+\tmmcu?avr25=mmcu?attiny261 \\\n+\tmmcu?avr25=mmcu?attiny461 \\\n+\tmmcu?avr25=mmcu?attiny861 \\\n+\tmmcu?avr25=mmcu?at86rf401 \\\n \tmmcu?avr3=mmcu?atmega103 \\\n \tmmcu?avr3=mmcu?atmega603 \\\n \tmmcu?avr3=mmcu?at43usb320 \\"}]}