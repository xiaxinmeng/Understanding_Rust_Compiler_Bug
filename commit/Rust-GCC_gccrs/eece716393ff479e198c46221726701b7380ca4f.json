{"sha": "eece716393ff479e198c46221726701b7380ca4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjZTcxNjM5M2ZmNDc5ZTE5OGM0NjIyMTcyNjcwMWI3MzgwY2E0Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-07-09T10:28:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-07-09T10:28:56Z"}, "message": "cast.h: Fix typo in include guard.\n\n2011-07-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/ext/cast.h: Fix typo in include guard.\n\t* include/ext/pointer.h (_Unqualified_type): Remove redundant\n\tpartial specializations for volatile types. Fix typos in comments.\n\t(pointer_traits<_Pointer_adaptor<Tp>>::pointer_to): Define.\n\nFrom-SVN: r176075", "tree": {"sha": "64f1a87a65f5830fb2b3435697e1e5615106f465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f1a87a65f5830fb2b3435697e1e5615106f465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eece716393ff479e198c46221726701b7380ca4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece716393ff479e198c46221726701b7380ca4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eece716393ff479e198c46221726701b7380ca4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece716393ff479e198c46221726701b7380ca4f/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a222ba757886807ca7a62858783c3eaa95f9356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a222ba757886807ca7a62858783c3eaa95f9356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a222ba757886807ca7a62858783c3eaa95f9356"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "9d8de56333864e6c87431a6edf44e4a07139d7b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece716393ff479e198c46221726701b7380ca4f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece716393ff479e198c46221726701b7380ca4f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eece716393ff479e198c46221726701b7380ca4f", "patch": "@@ -1,3 +1,10 @@\n+2011-07-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/ext/cast.h: Fix typo in include guard.\n+\t* include/ext/pointer.h (_Unqualified_type): Remove redundant\n+\tpartial specializations for volatile types. Fix typos in comments.\n+\t(pointer_traits<_Pointer_adaptor<Tp>>::pointer_to): Define.\n+\n 2011-07-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/49668"}, {"sha": "de6faab39c1773c4ab63620ca73e117d6d0a2e0c", "filename": "libstdc++-v3/include/ext/cast.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece716393ff479e198c46221726701b7380ca4f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece716393ff479e198c46221726701b7380ca4f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h?ref=eece716393ff479e198c46221726701b7380ca4f", "patch": "@@ -118,4 +118,4 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // __GLIBCXX_CAST_H\n+#endif // _GLIBCXX_CAST_H"}, {"sha": "9877e14d3c46f352ad170c80b1cc049ec9dd453f", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece716393ff479e198c46221726701b7380ca4f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece716393ff479e198c46221726701b7380ca4f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=eece716393ff479e198c46221726701b7380ca4f", "patch": "@@ -232,7 +232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef const volatile _Invalid_type&  reference; };\n \n   /**\n-   * This structure accomodates the way in which\n+   * This structure accommodates the way in which\n    * std::iterator_traits<> is normally specialized for const T*, so\n    * that value_type is still T.\n    */\n@@ -244,14 +244,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Unqualified_type<const _Tp> \n     { typedef _Tp type; };\n     \n-  template<typename _Tp> \n-    struct _Unqualified_type<volatile _Tp> \n-    { typedef volatile _Tp type; };\n-    \n-  template<typename _Tp> \n-    struct _Unqualified_type<volatile const _Tp> \n-    { typedef volatile _Tp type; };\n-  \n   /**\n    * The following provides an 'alternative pointer' that works with\n    * the containers when specified as the pointer typedef of the\n@@ -266,15 +258,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * so that it becomes reusable for creating other pointer types.\n    *\n    * A key point of this class is also that it allows container\n-   * writers to 'assume' Alocator::pointer is a typedef for a normal\n+   * writers to 'assume' Allocator::pointer is a typedef for a normal\n    * pointer.  This class supports most of the conventions of a true\n    * pointer, and can, for instance handle implicit conversion to\n    * const and base class pointer types.  The only impositions on\n    * container writers to support extended pointers are: 1) use the\n    * Allocator::pointer typedef appropriately for pointer types.  2)\n    * if you need pointer casting, use the __pointer_cast<> functions\n    * from ext/cast.h.  This allows pointer cast operations to be\n-   * overloaded is necessary by custom pointers.\n+   * overloaded as necessary by custom pointers.\n    *\n    * Note: The const qualifier works with this pointer adapter as\n    * follows:\n@@ -437,7 +429,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       } \\\n // END of _CXX_POINTER_ARITH_OPERATOR_SET macro\n   \n-      // Expand into the various pointer arithmatic operators needed.\n+      // Expand into the various pointer arithmetic operators needed.\n       _CXX_POINTER_ARITH_OPERATOR_SET(short);\n       _CXX_POINTER_ARITH_OPERATOR_SET(unsigned short);\n       _CXX_POINTER_ARITH_OPERATOR_SET(int);\n@@ -528,7 +520,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __rhs.get() != reinterpret_cast<void*>(__lhs); } \n \n   /**\n-   * Comparison operators for _Pointer_adapter defer to the base class'es\n+   * Comparison operators for _Pointer_adapter defer to the base class'\n    * comparison operators, when possible.\n    */\n   template<typename _Tp>\n@@ -600,6 +592,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         public:\n           typedef typename __gnu_cxx::_Pointer_adapter<_Rebound_policy> __type;\n         };\n+\n+      static pointer pointer_to(typename pointer::reference __r) noexcept\n+      { return pointer(std::addressof(__r)); }\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}]}