{"sha": "5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmMDIxMmYzNmE3ZDZjYjZkNjJiZDk5YWI1M2NhNjRjYzdkNzVjZg==", "commit": {"author": {"name": "Wolfgang Bangerth", "email": "bangerth@dealii.org", "date": "2003-07-22T17:50:13Z"}, "committer": {"name": "Wolfgang Bangerth", "email": "bangerth@gcc.gnu.org", "date": "2003-07-22T17:50:13Z"}, "message": "trouble.texi: Better document two-stage name lookup.\n\n 2003-07-22  Wolfgang Bangerth  <bangerth@dealii.org>\n* doc/trouble.texi: Better document two-stage name lookup.\n\nFrom-SVN: r69675", "tree": {"sha": "c7ea4402efc943444902d26533e62106012c8211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ea4402efc943444902d26533e62106012c8211"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf/comments", "author": null, "committer": null, "parents": [{"sha": "c745338420c2c26df126dc69c27f6c506ecb8bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c745338420c2c26df126dc69c27f6c506ecb8bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c745338420c2c26df126dc69c27f6c506ecb8bf7"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "444b55fe87c7c4053bbb0453f2e0ee1849e3175e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf", "patch": "@@ -1,3 +1,7 @@\n+2003-07-22  Wolfgang Bangerth  <bangerth@dealii.org>\n+\n+\t* doc/trouble.texi: Better document two-stage name lookup.\n+\n 2003-07-22  Eric Christopher <echristo@redhat.com>\n \n \t* config/s390.c (s390_valid_pointer_mode): New."}, {"sha": "02fe03b96f51fa715acd235255cf825246f81426", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=5cf0212f36a7d6cb6d62bd99ab53ca64cc7d75cf", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -941,9 +941,8 @@ the last line will call an overloaded @code{::foo(int)} if one was\n provided, even if after the declaration of @code{struct A}.\n \n This distinction between lookup of dependent and non-dependent names is\n-called two-stage (or dependent) name lookup. G++ implements some\n-features of it since version 3.4 and is moving towards full compliance\n-with the standard.\n+called two-stage (or dependent) name lookup.  G++ implements it\n+since version 3.4.\n \n Two-stage name lookup sometimes leads to situations with behavior\n different from non-template codes. The most common is probably this:\n@@ -974,10 +973,47 @@ type @code{Derived<T>*}, so is obviously dependent), or using\n @code{Base<T>::i}. Alternatively, @code{Base<T>::i} might be brought\n into scope by a @code{using}-declaration.\n \n-Note that some compilers get this wrong and accept above code without an\n-error.  However, this is spurious, since they just don't implement\n-two-stage name lookup correctly.  This includes G++ versions prior to\n-3.4.\n+Another, similar example involves calling member functions of a base\n+class: \n+\n+@example\n+  template <typename T> struct Base @{\n+      int f();\n+  @};\n+\n+  template <typename T> struct Derived : Base<T> @{\n+      int g() @{ return f(); @};\n+  @};\n+@end example\n+\n+Again, the call to @code{f()} is not dependent on template arguments\n+(there are no arguments that depend on the type @code{T}, and it is also\n+not otherwise specified that the call should be in a dependent context).\n+Thus a global declaration of such a function must be available, since\n+the one in the base class is not visible until instantiation time.  The\n+compiler will consequently produce the following error message:\n+\n+@example\n+  x.cc: In member function `int Derived<T>::g()':\n+  x.cc:6: error: there are no arguments to `f' that depend on a template\n+     parameter, so a declaration of `f' must be available\n+  x.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but\n+     allowing the use of an undeclared name is deprecated)\n+@end example\n+\n+To make the code valid either use @code{this->f()}, or\n+@code{Base<T>::f()}.  Using the @code{-fpermissive} flag will also let\n+the compiler accept the code, by marking all function calls for which no\n+declaration is visible at the time of definition of the template for\n+later lookup at instantiation time, as if it were a dependent call.\n+We do not recommend using @code{-fpermissive} to work around invalid\n+code, and it will also only catch cases where functions in base classes\n+are called, not where variables in base classes are used (as in the\n+example above).\n+\n+Note that some compilers (including G++ versions prior to 3.4) get these\n+examples wrong and accept above code without an error.  Those compilers\n+do not implement two-stage name lookup correctly.\n \n \n @node Temporaries"}]}