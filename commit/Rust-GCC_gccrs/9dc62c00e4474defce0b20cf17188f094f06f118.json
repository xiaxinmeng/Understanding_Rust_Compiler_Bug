{"sha": "9dc62c00e4474defce0b20cf17188f094f06f118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjNjJjMDBlNDQ3NGRlZmNlMGIyMGNmMTcxODhmMDk0ZjA2ZjExOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-11-01T18:50:20Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-01T18:50:20Z"}, "message": "s390.c (regclass_map): Put reg 33 (cc) to CC_REGS group.\n\n2004-11-01  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (regclass_map): Put reg 33 (cc) to CC_REGS group.\n\t(s390_secondary_input_reload_class)\n\t(s390_secondary_output_reload_class): Use GENERAL_REGS to reload a cc\n\tregister.\n\t(s390_expand_cmpmem): Enable cmpmem implementation.\n\t* config/s390/s390.h (reg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS):\n\tAdded three new classes: CC_REGS, ADDR_CC_REGS, GENERAL_CC_REGS.\n\t(REG_CLASS_FROM_LETTER): New constraint 'c' added.\n\t* config/s390/s390.md (\"movcc\"): New insn pattern.\n\t* doc/md.texi: Document 'c' constraint for s390.\n\nFrom-SVN: r89953", "tree": {"sha": "62607e79f884ed6b3cad61a7411853d3db1808c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62607e79f884ed6b3cad61a7411853d3db1808c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dc62c00e4474defce0b20cf17188f094f06f118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc62c00e4474defce0b20cf17188f094f06f118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc62c00e4474defce0b20cf17188f094f06f118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc62c00e4474defce0b20cf17188f094f06f118/comments", "author": null, "committer": null, "parents": [{"sha": "ae209f284cc478ff5839488722fd4f52a04c2eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae209f284cc478ff5839488722fd4f52a04c2eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae209f284cc478ff5839488722fd4f52a04c2eee"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "84ca2043451ef52b84fb1f5c3209bb2fc6e3587e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dc62c00e4474defce0b20cf17188f094f06f118", "patch": "@@ -1,3 +1,16 @@\n+2004-11-01  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (regclass_map): Put reg 33 (cc) to CC_REGS group.\n+\t(s390_secondary_input_reload_class)\n+\t(s390_secondary_output_reload_class): Use GENERAL_REGS to reload a cc\n+\tregister.\n+\t(s390_expand_cmpmem): Enable cmpmem implementation.\n+\t* config/s390/s390.h (reg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS):\n+\tAdded three new classes: CC_REGS, ADDR_CC_REGS, GENERAL_CC_REGS.\n+\t(REG_CLASS_FROM_LETTER): New constraint 'c' added.\n+\t* config/s390/s390.md (\"movcc\"): New insn pattern.\n+\t* doc/md.texi: Document 'c' constraint for s390.\n+\n 2004-11-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/18064"}, {"sha": "d56624c4625106805dce1fe5de803fc7e1316984", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9dc62c00e4474defce0b20cf17188f094f06f118", "patch": "@@ -1355,7 +1355,7 @@ const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n   FP_REGS,      FP_REGS,   FP_REGS,   FP_REGS,\n   FP_REGS,      FP_REGS,   FP_REGS,   FP_REGS,\n   FP_REGS,      FP_REGS,   FP_REGS,   FP_REGS,\n-  ADDR_REGS,    NO_REGS,   ADDR_REGS, ADDR_REGS\n+  ADDR_REGS,    CC_REGS,   ADDR_REGS, ADDR_REGS\n };\n \n /* Return attribute type of insn.  */\n@@ -2276,6 +2276,9 @@ s390_secondary_input_reload_class (enum reg_class class ATTRIBUTE_UNUSED,\n   if (s390_plus_operand (in, mode))\n     return ADDR_REGS;\n \n+  if (GET_MODE_CLASS (mode) == MODE_CC)\n+    return GENERAL_REGS;\n+\n   return NO_REGS;\n }\n \n@@ -2297,6 +2300,9 @@ s390_secondary_output_reload_class (enum reg_class class,\n       && !s_operand (out, VOIDmode))\n     return ADDR_REGS;\n \n+  if (GET_MODE_CLASS (mode) == MODE_CC)\n+    return GENERAL_REGS;\n+\n   return NO_REGS;\n }\n \n@@ -3579,16 +3585,11 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n       else\n         emit_move_insn (target, const0_rtx);\n     }\n-\n-  else /* if (TARGET_MVCLE) */\n+  else if (TARGET_MVCLE)\n     {\n       emit_insn (gen_cmpmem_long (op0, op1, convert_to_mode (Pmode, len, 1)));\n       emit_move_insn (target, result);\n     }\n-\n-#if 0\n-  /* Deactivate for now as profile code cannot cope with\n-     CC being live across basic block boundaries.  */\n   else\n     {\n       rtx addr0, addr1, count, blocks, temp;\n@@ -3656,7 +3657,6 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \n       emit_move_insn (target, result);\n     }\n-#endif\n }\n \n "}, {"sha": "013fd93ead71a4c6e0edd313355b962847d2af16", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=9dc62c00e4474defce0b20cf17188f094f06f118", "patch": "@@ -448,8 +448,11 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n \n /* We use the following register classes:\n    GENERAL_REGS     All general purpose registers\n+   CC_REGS          Contains only the condition code register\n    ADDR_REGS        All general purpose registers except %r0\n                     (These registers can be used in address generation)\n+   ADDR_CC_REGS     Union of ADDR_REGS and CC_REGS\n+   GENERAL_CC_REGS  Union of GENERAL_REGS and CC_REGS\n    FP_REGS          All floating point registers\n \n    GENERAL_FP_REGS  Union of GENERAL_REGS and FP_REGS\n@@ -464,22 +467,26 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n \n enum reg_class\n {\n-  NO_REGS, ADDR_REGS, GENERAL_REGS,\n+  NO_REGS, CC_REGS, ADDR_REGS, GENERAL_REGS, \n+  ADDR_CC_REGS, GENERAL_CC_REGS, \n   FP_REGS, ADDR_FP_REGS, GENERAL_FP_REGS,\n   ALL_REGS, LIM_REG_CLASSES\n };\n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-#define REG_CLASS_NAMES                                                 \\\n-{ \"NO_REGS\", \"ADDR_REGS\", \"GENERAL_REGS\", \t\t\t\t\\\n-  \"FP_REGS\", \"ADDR_FP_REGS\", \"GENERAL_FP_REGS\", \"ALL_REGS\" }\n+#define REG_CLASS_NAMES                                                        \\\n+{ \"NO_REGS\", \"CC_REGS\", \"ADDR_REGS\", \"GENERAL_REGS\", \"ADDR_CC_REGS\",           \\\n+  \"GENERAL_CC_REGS\", \"FP_REGS\", \"ADDR_FP_REGS\", \"GENERAL_FP_REGS\", \"ALL_REGS\" }\n \n /* Class -> register mapping.  */\n #define REG_CLASS_CONTENTS \\\n {\t\t\t\t       \t\t\t\\\n   { 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n+  { 0x00000000, 0x00000002 },\t/* CC_REGS */\t\t\\\n   { 0x0000fffe, 0x0000000d },\t/* ADDR_REGS */\t\t\\\n   { 0x0000ffff, 0x0000000d },\t/* GENERAL_REGS */\t\\\n+  { 0x0000fffe, 0x0000000f },\t/* ADDR_CC_REGS */\t\\\n+  { 0x0000ffff, 0x0000000f },\t/* GENERAL_CC_REGS */\t\\\n   { 0xffff0000, 0x00000000 },\t/* FP_REGS */\t\t\\\n   { 0xfffffffe, 0x0000000d },\t/* ADDR_FP_REGS */\t\\\n   { 0xffffffff, 0x0000000d },\t/* GENERAL_FP_REGS */\t\\\n@@ -535,7 +542,8 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n #define REG_CLASS_FROM_LETTER(C)                                        \\\n   ((C) == 'a' ? ADDR_REGS :                                             \\\n    (C) == 'd' ? GENERAL_REGS :                                          \\\n-   (C) == 'f' ? FP_REGS : NO_REGS)\n+   (C) == 'f' ? FP_REGS :                                               \\\n+   (C) == 'c' ? CC_REGS : NO_REGS)\n \n #define CONST_OK_FOR_CONSTRAINT_P(VALUE, C, STR)                          \\\n   s390_const_ok_for_constraint_p ((VALUE), (C), (STR))"}, {"sha": "0368466d002cc8cb6fabd74ed9508886b6cb8ef3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9dc62c00e4474defce0b20cf17188f094f06f118", "patch": "@@ -25,6 +25,7 @@\n ;; Special constraints for s/390 machine description:\n ;;\n ;;    a -- Any address register from 1 to 15.\n+;;    c -- Condition code register 33.\n ;;    d -- Any register from 0 to 15.\n ;;    I -- An 8-bit constant (0..255).\n ;;    J -- A 12-bit constant (0..4095).\n@@ -1451,6 +1452,24 @@\n   [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY,SS\")\n    (set_attr \"type\" \"floads,floads,floads,fstores,fstores,lr,load,load,store,store,cs\")])\n \n+;\n+; movcc instruction pattern\n+;\n+\n+(define_insn \"movcc\"\n+  [(set (match_operand:CC 0 \"nonimmediate_operand\" \"=d,c,d,d,d,R,T\")\n+\t(match_operand:CC 1 \"nonimmediate_operand\" \"d,d,c,R,T,d,d\"))]\n+  \"\"\n+  \"@\n+   lr\\t%0,%1\n+   tmh\\t%1,12288\n+   ipm\\t%0\n+   st\\t%0,%1\n+   sty\\t%0,%1\n+   l\\t%1,%0\n+   ly\\t%1,%0\"\n+  [(set_attr \"op_type\" \"RR,RI,RRE,RX,RXY,RX,RXY\")])\n+\n ;\n ; Block move (MVC) patterns.\n ;"}, {"sha": "5b5b03ecf01364c2594f834e7ba57fde3ae8dc7a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc62c00e4474defce0b20cf17188f094f06f118/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=9dc62c00e4474defce0b20cf17188f094f06f118", "patch": "@@ -2458,6 +2458,9 @@ Symbolic address\n @item a\n Address register (general purpose register except r0)\n \n+@item c\n+Condition code register\n+\n @item d\n Data register (arbitrary general purpose register)\n "}]}