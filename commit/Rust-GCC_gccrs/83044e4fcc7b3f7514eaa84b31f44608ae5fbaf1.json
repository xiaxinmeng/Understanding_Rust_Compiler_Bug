{"sha": "83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwNDRlNGZjYzdiM2Y3NTE0ZWFhODRiMzFmNDQ2MDhhZTVmYmFmMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-11-16T16:23:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-16T16:23:20Z"}, "message": "Remove ovl_used, it is no longer needed\n\n\tRemove ovl_used, it is no longer needed\n\t* cp-tree.h (OVL_USED_P): Delete.\n\t(lookup_keep): Delete.\n\t* friend.c (add_friend): Don't call it.\n\t* parser.c (lookup_literal_operator): Likewise.\n\t(cp_parser_primary_expression): Likewise.\n\t* semantics.c (perform_koenig_lookup): Likewise.\n\t* pt.c (tsubst_copy <OVERLOAD>): Don't assert OVL_USED_P.\n\t* tree.c (ovl_copy): Delete.\n\t(ovl_insert): Remove OVL_USED_P checks.\n\t(ovl_iterator::reveal_node): Likewise.\n\t(ovl_iterator::remove__node): Likewise.\n\t(ovl_used, lookup_keep): Delete.\n\nFrom-SVN: r266212", "tree": {"sha": "a3f07d670b734365e15f1a42517b81d98d964cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f07d670b734365e15f1a42517b81d98d964cd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81292845971e30311b241bf63462f9bf8bfb23ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81292845971e30311b241bf63462f9bf8bfb23ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81292845971e30311b241bf63462f9bf8bfb23ad"}], "stats": {"total": 117, "additions": 20, "deletions": 97}, "files": [{"sha": "b8a74376fb95bb9406f4bcf2b1e942d4501fabf1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -1,5 +1,19 @@\n 2018-11-16  Nathan Sidwell  <nathan@acm.org>\n \n+\tRemove ovl_used, it is no longer needed\n+\t* cp-tree.h (OVL_USED_P): Delete.\n+\t(lookup_keep): Delete.\n+\t* friend.c (add_friend): Don't call it.\n+\t* parser.c (lookup_literal_operator): Likewise.\n+\t(cp_parser_primary_expression): Likewise.\n+\t* semantics.c (perform_koenig_lookup): Likewise.\n+\t* pt.c (tsubst_copy <OVERLOAD>): Don't assert OVL_USED_P.\n+\t* tree.c (ovl_copy): Delete.\n+\t(ovl_insert): Remove OVL_USED_P checks.\n+\t(ovl_iterator::reveal_node): Likewise.\n+\t(ovl_iterator::remove__node): Likewise.\n+\t(ovl_used, lookup_keep): Delete.\n+\n \tPR c++/87269\n \t* parser.c (lookup_literal_operator): Mark overload for keeping\n \twhen inside template.  Refactor."}, {"sha": "a5c9e5b20806dd67f5b355fcf109cb89050c9101", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -706,8 +706,6 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define OVL_NESTED_P(NODE)\tTREE_LANG_FLAG_3 (OVERLOAD_CHECK (NODE))\n /* If set, this overload was constructed during lookup.  */\n #define OVL_LOOKUP_P(NODE)\tTREE_LANG_FLAG_4 (OVERLOAD_CHECK (NODE))\n-/* If set, this is a persistant lookup. */\n-#define OVL_USED_P(NODE)\tTREE_USED (OVERLOAD_CHECK (NODE))\n \n /* The first decl of an overload.  */\n #define OVL_FIRST(NODE)\tovl_first (NODE)\n@@ -7222,7 +7220,6 @@ extern void lookup_mark\t\t\t\t(tree lookup, bool val);\n extern tree lookup_add\t\t\t\t(tree fns, tree lookup);\n extern tree lookup_maybe_add\t\t\t(tree fns, tree lookup,\n \t\t\t\t\t\t bool deduping);\n-extern void lookup_keep\t\t\t\t(tree lookup);\n extern int is_overloaded_fn\t\t\t(tree) ATTRIBUTE_PURE;\n extern bool really_overloaded_fn\t\t(tree) ATTRIBUTE_PURE;\n extern tree dependent_name\t\t\t(tree);"}, {"sha": "8cb13880ba3a304374836fb7d9cab3c3c2b505ff", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -173,12 +173,6 @@ add_friend (tree type, tree decl, bool complain)\n   if (decl == error_mark_node)\n     return;\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      && DECL_TEMPLATE_INSTANTIATION (decl))\n-    /* We'll have parsed this as a declaration, and therefore not\n-       marked the lookup set for keeping.  Do that now.  */\n-    lookup_keep (DECL_TI_TEMPLATE (decl));\n-\n   typedecl = TYPE_MAIN_DECL (type);\n   list = DECL_FRIENDLIST (typedecl);\n   name = DECL_NAME (decl);"}, {"sha": "92a4f96c6b75d27b44e9fa3a6e2bbffda317e9cb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -4294,11 +4294,7 @@ lookup_literal_operator (tree name, vec<tree, va_gc> *args)\n \t\t work in presence of default arguments on the literal\n \t\t operator parameters.  */\n \t      && parmtypes == void_list_node)\n-\t    {\n-\t      if (processing_template_decl)\n-\t\tlookup_keep (decl);\n-\t      return decl;\n-\t    }\n+\t    return decl;\n \t}\n     }\n \n@@ -5684,14 +5680,6 @@ cp_parser_primary_expression (cp_parser *parser,\n \t      }\n \t  }\n \n-\tif (processing_template_decl)\n-\t  if (tree fns = maybe_get_fns (decl))\n-\t    /* It's too difficult to mark ths in all the places where\n-\t       we know for sure we need to keep the lookup, so do it\n-\t       now.  The cost is extra GC to recycle the lookups\n-\t       resolved at parse time.  */\n-\t    lookup_keep (fns);\n-\n \tdecl = (finish_id_expression\n \t\t(id_expression, decl, parser->scope,\n \t\t idk,"}, {"sha": "66e8f6fed1f46077906ad8a54cbbdf38c2f96f21", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -15541,8 +15541,6 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       return t;\n \n     case OVERLOAD:\n-      /* We must have marked any lookups as persistent.  */\n-      gcc_assert (!OVL_LOOKUP_P (t) || OVL_USED_P (t));\n       return t;\n \n     case BASELINK:"}, {"sha": "733c42f00368ef463eb468b3897942faa0fd7a19", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -2345,11 +2345,6 @@ perform_koenig_lookup (cp_expr fn, vec<tree, va_gc> *args,\n \t  else\n \t    fn = identifier;\n \t}\n-      else if (TREE_CODE (fn) == OVERLOAD && processing_template_decl)\n-\t/* FIXME: We shouldn't really need to mark the lookup here, as\n-\t   resolving the (non-dependent) call should save the single\n-\t   function we resolve to.  Related to PR c++/83529.  */\n-\tlookup_keep (fn);\n     }\n \n   if (fn && template_id && fn != error_mark_node)"}, {"sha": "10b2cfbdf029b521ea375d17e385fd5739b4981e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 68, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=83044e4fcc7b3f7514eaa84b31f44608ae5fbaf1", "patch": "@@ -2167,23 +2167,6 @@ ovl_make (tree fn, tree next)\n   return result;\n }\n \n-static tree\n-ovl_copy (tree ovl)\n-{\n-  tree result = make_node (OVERLOAD);\n-\n-  gcc_checking_assert (!OVL_NESTED_P (ovl) && OVL_USED_P (ovl));\n-  TREE_TYPE (result) = TREE_TYPE (ovl);\n-  OVL_FUNCTION (result) = OVL_FUNCTION (ovl);\n-  OVL_CHAIN (result) = OVL_CHAIN (ovl);\n-  OVL_DEDUP_P (result) = OVL_DEDUP_P (ovl);\n-  OVL_LOOKUP_P (result) = OVL_LOOKUP_P (ovl);\n-  OVL_HIDDEN_P (result) = OVL_HIDDEN_P (ovl);\n-  OVL_USING_P (result) = OVL_USING_P (ovl);\n-\n-  return result;\n-}\n-\n /* Add FN to the (potentially NULL) overload set OVL.  USING_P is\n    true, if FN is via a using declaration.  We also pay attention to\n    DECL_HIDDEN.  We keep the hidden decls first, but remaining ones\n@@ -2200,8 +2183,7 @@ ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n \t && OVL_HIDDEN_P (maybe_ovl);\n        maybe_ovl = OVL_CHAIN (maybe_ovl))\n     {\n-      gcc_checking_assert (!OVL_LOOKUP_P (maybe_ovl)\n-\t\t\t   && !OVL_USED_P (maybe_ovl));\n+      gcc_checking_assert (!OVL_LOOKUP_P (maybe_ovl));\n       insert_after = maybe_ovl;\n     }\n \n@@ -2254,9 +2236,8 @@ ovl_skip_hidden (tree ovl)\n tree\n ovl_iterator::reveal_node (tree overload, tree node)\n {\n-  /* We cannot have returned NODE as part of a lookup overload, so it\n-     cannot be USED.  */\n-  gcc_checking_assert (!OVL_USED_P (node));\n+  /* We cannot have returned NODE as part of a lookup overload, so we\n+     don't have to worry about preserving that.  */\n \n   OVL_HIDDEN_P (node) = false;\n   if (tree chain = OVL_CHAIN (node))\n@@ -2275,29 +2256,19 @@ ovl_iterator::reveal_node (tree overload, tree node)\n   return overload;\n }\n \n-/* NODE is on the overloads of OVL.  Remove it.  If a predecessor is\n-   OVL_USED_P we must copy OVL nodes, because those are immutable.\n+/* NODE is on the overloads of OVL.  Remove it.  \n    The removed node is unaltered and may continue to be iterated\n    from (i.e. it is safe to remove a node from an overload one is\n    currently iterating over).  */\n \n tree\n ovl_iterator::remove_node (tree overload, tree node)\n {\n-  bool copying = false; /* Checking use only.  */\n-\n   tree *slot = &overload;\n   while (*slot != node)\n     {\n       tree probe = *slot;\n-      gcc_checking_assert (!OVL_LOOKUP_P (probe)\n-\t\t\t   && (!copying || OVL_USED_P (probe)));\n-      if (OVL_USED_P (probe))\n-\t{\n-\t  copying = true;\n-\t  probe = ovl_copy (probe);\n-\t  *slot = probe;\n-\t}\n+      gcc_checking_assert (!OVL_LOOKUP_P (probe));\n \n       slot = &OVL_CHAIN (probe);\n     }\n@@ -2388,40 +2359,6 @@ lookup_maybe_add (tree fns, tree lookup, bool deduping)\n   return lookup;\n }\n \n-/* Regular overload OVL is part of a kept lookup.  Mark the nodes on\n-   it as immutable.  */\n-\n-static void\n-ovl_used (tree ovl)\n-{\n-  for (;\n-       ovl && TREE_CODE (ovl) == OVERLOAD\n-\t && !OVL_USED_P (ovl);\n-       ovl = OVL_CHAIN (ovl))\n-    {\n-      gcc_checking_assert (!OVL_LOOKUP_P (ovl));\n-      OVL_USED_P (ovl) = true;\n-    }\n-}\n-\n-/* Preserve the contents of a lookup so that it is available for a\n-   later instantiation.  */\n-\n-void\n-lookup_keep (tree lookup)\n-{\n-  for (;\n-       lookup && TREE_CODE (lookup) == OVERLOAD\n-\t && OVL_LOOKUP_P (lookup) && !OVL_USED_P (lookup);\n-       lookup = OVL_CHAIN (lookup))\n-    {\n-      OVL_USED_P (lookup) = true;\n-      ovl_used (OVL_FUNCTION (lookup));\n-    }\n-\n-  ovl_used (lookup);\n-}\n-\n /* Returns nonzero if X is an expression for a (possibly overloaded)\n    function.  If \"f\" is a function or function template, \"f\", \"c->f\",\n    \"c.f\", \"C::f\", and \"f<int>\" will all be considered possibly"}]}