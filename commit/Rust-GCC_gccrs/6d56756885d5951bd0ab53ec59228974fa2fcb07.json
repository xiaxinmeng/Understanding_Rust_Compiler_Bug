{"sha": "6d56756885d5951bd0ab53ec59228974fa2fcb07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1Njc1Njg4NWQ1OTUxYmQwYWI1M2VjNTkyMjg5NzRmYTJmY2IwNw==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@cygnus.com", "date": "1999-02-22T11:32:00Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-02-22T11:32:00Z"}, "message": "configure.in (i[34567]86-*-linux-gnu*, [...]): Use fixinc.x86-linux-gnu as fixincludes.\n\nMon Feb 22 14:13:23 1999  Vladimir N. Makarov  <vmakarov@cygnus.com>\n\t* configure.in (i[34567]86-*-linux-gnu*,\n\ti[34567]86-*-linux-gnulibc1, i[34567]86-*-linux-gnuaout*,\n\ti[34567]86-*-linux-gnuoldld*): Use fixinc.x86-linux-gnu as\n\tfixincludes.\n\t* configure: Rebuilt.\n\t* fixinc.x86-linux-gnu: New script for fixing asm-statements bug\n\ton x86 linux.\n\t* fixinc/fixinc.x86-linux-gnu: Copy of the previous one.\n\t* fixinc/mkfixinc.sh (i[34567]86-*-linux-gnu*,\n\ti[34567]86-*-linux-gnulibc1, i[34567]86-*-linux-gnuaout*,\n\ti[34567]86-*-linux-gnuoldld*): Use fixinc.x86-linux-gnu as\n\tfixincludes.\n\nFrom-SVN: r25370", "tree": {"sha": "51df2eedf8600e20a317e703179c58bbc2c9dd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51df2eedf8600e20a317e703179c58bbc2c9dd77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d56756885d5951bd0ab53ec59228974fa2fcb07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d56756885d5951bd0ab53ec59228974fa2fcb07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d56756885d5951bd0ab53ec59228974fa2fcb07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d56756885d5951bd0ab53ec59228974fa2fcb07/comments", "author": null, "committer": null, "parents": [{"sha": "a32999346f5fcfda44737f45e93e631d421c608e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32999346f5fcfda44737f45e93e631d421c608e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32999346f5fcfda44737f45e93e631d421c608e"}], "stats": {"total": 322, "additions": 314, "deletions": 8}, "files": [{"sha": "1a90b5bfc1ac917e0622471d71a205297cf242e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d56756885d5951bd0ab53ec59228974fa2fcb07", "patch": "@@ -1,3 +1,22 @@\n+Mon Feb 22 14:13:23 1999  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+\t* configure.in (i[34567]86-*-linux-gnu*,\n+\ti[34567]86-*-linux-gnulibc1, i[34567]86-*-linux-gnuaout*,\n+\ti[34567]86-*-linux-gnuoldld*): Use fixinc.x86-linux-gnu as\n+\tfixincludes.\n+\n+\t* configure: Rebuilt.\n+\n+\t* fixinc.x86-linux-gnu: New script for fixing asm-statements bug\n+\ton x86 linux.\n+\n+\t* fixinc/fixinc.x86-linux-gnu: Copy of the previous one.\n+\n+\t* fixinc/mkfixinc.sh (i[34567]86-*-linux-gnu*,\n+\ti[34567]86-*-linux-gnulibc1, i[34567]86-*-linux-gnuaout*,\n+\ti[34567]86-*-linux-gnuoldld*): Use fixinc.x86-linux-gnu as\n+\tfixincludes.\n+\n Mon Feb 22 08:55:05 1999  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* objc/objc-act.c (encode_type): Temporary revert to the old"}, {"sha": "50bfce163ef8d51f18fe40dbd16a8ea44a0e6b04", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6d56756885d5951bd0ab53ec59228974fa2fcb07", "patch": "@@ -3522,15 +3522,15 @@ for machine in $build $host $target; do\n \t\txmake_file=x-linux-aout\n \t\ttmake_file=\"t-linux-aout i386/t-crtstuff\"\n \t\ttm_file=i386/linux-oldld.h\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n \t\t;;\n \ti[34567]86-*-linux-gnuaout*)\t# Intel 80386's running GNU/Linux\n \t\txmake_file=x-linux-aout\n \t\ttmake_file=\"t-linux-aout i386/t-crtstuff\"\n \t\ttm_file=i386/linux-aout.h\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n \t\t;;\n@@ -3540,7 +3540,7 @@ for machine in $build $host $target; do\n \t\ttm_file=i386/linux.h\t\n \t\ttmake_file=\"t-linux t-linux-gnulibc1 i386/t-crtstuff\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n  \t\tif test x$enable_threads = xyes; then\n@@ -3553,7 +3553,7 @@ for machine in $build $host $target; do\n \t\ttm_file=i386/linux.h\n \t\ttmake_file=\"t-linux i386/t-crtstuff\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n  \t\tif test x$enable_threads = xyes; then"}, {"sha": "3b3c72f07042f474d8affcccd649747c6b3441b0", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=6d56756885d5951bd0ab53ec59228974fa2fcb07", "patch": "@@ -1185,7 +1185,7 @@ changequote([,])dnl\t\t\t# with a.out format using\n \t\txmake_file=x-linux-aout\n \t\ttmake_file=\"t-linux-aout i386/t-crtstuff\"\n \t\ttm_file=i386/linux-oldld.h\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n \t\t;;\n@@ -1195,7 +1195,7 @@ changequote([,])dnl\t\t\t# with a.out format\n \t\txmake_file=x-linux-aout\n \t\ttmake_file=\"t-linux-aout i386/t-crtstuff\"\n \t\ttm_file=i386/linux-aout.h\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n \t\t;;\n@@ -1207,7 +1207,7 @@ changequote([,])dnl\t\t\t# with ELF format using the\n \t\ttm_file=i386/linux.h\t\n \t\ttmake_file=\"t-linux t-linux-gnulibc1 i386/t-crtstuff\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n  \t\tif test x$enable_threads = xyes; then\n@@ -1222,7 +1222,7 @@ changequote([,])dnl\t\t\t# with ELF format using glibc 2\n \t\ttm_file=i386/linux.h\n \t\ttmake_file=\"t-linux i386/t-crtstuff\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n-\t\tfixincludes=Makefile.in #On Linux, the headers are ok already.\n+\t\tfixincludes=fixinc.x86-linux-gnu\n \t\tgnu_ld=yes\n \t\tfloat_format=i386\n  \t\tif test x$enable_threads = xyes; then"}, {"sha": "9e32586ef2ba9cb3f5c5009c9fbaeb21f5949c00", "filename": "gcc/fixinc.x86-linux-gnu", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Ffixinc.x86-linux-gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Ffixinc.x86-linux-gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc.x86-linux-gnu?ref=6d56756885d5951bd0ab53ec59228974fa2fcb07", "patch": "@@ -0,0 +1,140 @@\n+#! /bin/sh\n+#\n+# The script is created for Cygnus by vmakarov@cygnus.com and based on\n+# fixinc.wrap\n+#\n+# This script is designed for x86 with gnulibc of version 2.0 and less\n+# for solution of problems with invalid asm-statements by creating\n+# small wrappers around the include files containg the asm-statements.\n+#\n+# See README-fixinc for more information.\n+\n+\n+# Directory in which to store the results.\n+LIB=${1?\"fixincludes: output directory not specified\"}\n+\n+# Make sure it exists.\n+if [ ! -d $LIB ]; then\n+  mkdir $LIB || exit 1\n+fi\n+\n+# Make LIB absolute if it is relative.\n+# Don't do this if not necessary, since may screw up automounters.\n+case $LIB in\n+/*)\n+\t;;\n+*)\n+\tcd $LIB; LIB=`${PWDCMD-pwd}`\n+\t;;\n+esac\n+\n+echo Building fixed headers in ${LIB}\n+  \n+file=selectbits.h\n+echo Fixed $file for glibc-2.0.x\n+rm -f $LIB/$file\n+cat <<'__EOF__' >$LIB/$file\n+/* This file fixes __FD_ZERO bug for glibc-2.0.x. */\n+#ifndef _SELECTBITS_H_WRAPPER\n+#include <features.h>\n+#include_next <selectbits.h>\n+\n+#if defined(__FD_ZERO) && defined(__GLIBC__) && defined(__GLIBC_MINOR__) && __GLIBC__ == 2 && __GLIBC_MINOR__ == 0\n+#undef __FD_ZERO\n+#define __FD_ZERO(fdsetp) \\\n+  do { \\\n+    int __d0, __d1; \\\n+  __asm__ __volatile__ (\"cld; rep; stosl\" \\\n+                        : \"=m\" (((__fd_mask *) \\\n+                                 (fdsetp))[__FDELT (__FD_SETSIZE)]), \\\n+                          \"=&c\" (__d0), \"=&D\" (__d1) \\\n+                        : \"a\" (0), \"1\" (sizeof (__fd_set) \\\n+                                        / sizeof (__fd_mask)), \\\n+                          \"2\" ((__fd_mask *) (fdsetp)) \\\n+                        : \"memory\"); \\\n+  } while (0)\n+#endif\n+\n+#define _SELECTBITS_H_WRAPPER\n+#endif /* _SELECTBITS_H_WRAPPER */\n+__EOF__\n+# Define _SELECTBITS_H_WRAPPER at the end of the wrapper, not\n+# the start, so that if #include_next gets another instance of\n+# the wrapper, this will follow the #include_next chain until\n+# we arrive at the real <selectbits.h>.\n+chmod a+r $LIB/$file\n+\n+# asm/posix_types.h for libc version 1.x\n+file=asm/posix_types.h\n+echo Fixed $file for glibc-1.x\n+rm -f $LIB/$file\n+dir=`dirname $LIB/$file`\n+if [ ! -d $dir ]; then\n+  mkdir -p $dir || exit 1\n+fi\n+cat <<'__EOF__' >$LIB/$file\n+/* This file fixes __FD_ZERO bug for glibc-1.x. */\n+#ifndef _POSIX_TYPES_H_WRAPPER\n+#include <features.h>\n+#include_next <asm/posix_types.h>\n+\n+#if defined(__FD_ZERO) && !defined(__GLIBC__)\n+#undef __FD_ZERO\n+#define __FD_ZERO(fdsetp) \\\n+  do { \\\n+    int __d0, __d1; \\\n+\t\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n+\t\t\t: \"=m\" (*(__kernel_fd_set *) (fdsetp)), \\\n+                          \"=&c\" (__d0), \"=&D\" (__d1) \\\n+\t\t\t: \"a\" (0), \"1\" (__FDSET_LONGS), \\\n+\t\t\t  \"2\" ((__kernel_fd_set *) (fdsetp)) :\"memory\"); \\\n+  } while (0)\n+#endif\n+\n+#define _POSIX_TYPES_H_WRAPPER\n+#endif /* _POSIX_TYPES_H_WRAPPER */\n+__EOF__\n+# Define _POSIX_TYPES_H_WRAPPER at the end of the wrapper, not\n+# the start, so that if #include_next gets another instance of\n+# the wrapper, this will follow the #include_next chain until\n+# we arrive at the real <asm/posix_types.h>.\n+chmod a+r $LIB/$file\n+\n+# gnu/types.h for libc version 1.x\n+file=gnu/types.h\n+echo Fixed $file for glibc-1.x\n+rm -f $LIB/$file\n+dir=`dirname $LIB/$file`\n+if [ ! -d $dir ]; then\n+  mkdir -p $dir || exit 1\n+fi\n+cat <<'__EOF__' >$LIB/$file\n+/* This file fixes __FD_ZERO bug for glibc-1.x. */\n+#ifndef _TYPES_H_WRAPPER\n+#include <features.h>\n+#include_next <gnu/types.h>\n+\n+#if defined(__FD_ZERO) && !defined(__GLIBC__)\n+#undef __FD_ZERO\n+# define __FD_ZERO(fdsetp) \\\n+  do { \\\n+    int __d0, __d1; \\\n+\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n+        \t: \"=m\" (*(__fd_set *) (fdsetp)), \\\n+                  \"=&c\" (__d0), \"=&D\" (__d1) \\\n+        \t: \"a\" (0), \"1\" (__FDSET_LONGS), \\\n+\t\t  \"2\" ((__fd_set *) (fdsetp)) :\"memory\"); \\\n+  } while (0)\n+#endif\n+\n+#define _TYPES_H_WRAPPER\n+#endif /* _TYPES_H_WRAPPER */\n+__EOF__\n+# Define _TYPES_H_WRAPPER at the end of the wrapper, not the start,\n+# so that if #include_next gets another instance of the wrapper,\n+# this will follow the #include_next chain until we arrive at\n+# the real <gnu/types.h>.\n+chmod a+r $LIB/$file\n+\n+exit 0\n+"}, {"sha": "9e32586ef2ba9cb3f5c5009c9fbaeb21f5949c00", "filename": "gcc/fixinc/fixinc.x86-linux-gnu", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Ffixinc%2Ffixinc.x86-linux-gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Ffixinc%2Ffixinc.x86-linux-gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.x86-linux-gnu?ref=6d56756885d5951bd0ab53ec59228974fa2fcb07", "patch": "@@ -0,0 +1,140 @@\n+#! /bin/sh\n+#\n+# The script is created for Cygnus by vmakarov@cygnus.com and based on\n+# fixinc.wrap\n+#\n+# This script is designed for x86 with gnulibc of version 2.0 and less\n+# for solution of problems with invalid asm-statements by creating\n+# small wrappers around the include files containg the asm-statements.\n+#\n+# See README-fixinc for more information.\n+\n+\n+# Directory in which to store the results.\n+LIB=${1?\"fixincludes: output directory not specified\"}\n+\n+# Make sure it exists.\n+if [ ! -d $LIB ]; then\n+  mkdir $LIB || exit 1\n+fi\n+\n+# Make LIB absolute if it is relative.\n+# Don't do this if not necessary, since may screw up automounters.\n+case $LIB in\n+/*)\n+\t;;\n+*)\n+\tcd $LIB; LIB=`${PWDCMD-pwd}`\n+\t;;\n+esac\n+\n+echo Building fixed headers in ${LIB}\n+  \n+file=selectbits.h\n+echo Fixed $file for glibc-2.0.x\n+rm -f $LIB/$file\n+cat <<'__EOF__' >$LIB/$file\n+/* This file fixes __FD_ZERO bug for glibc-2.0.x. */\n+#ifndef _SELECTBITS_H_WRAPPER\n+#include <features.h>\n+#include_next <selectbits.h>\n+\n+#if defined(__FD_ZERO) && defined(__GLIBC__) && defined(__GLIBC_MINOR__) && __GLIBC__ == 2 && __GLIBC_MINOR__ == 0\n+#undef __FD_ZERO\n+#define __FD_ZERO(fdsetp) \\\n+  do { \\\n+    int __d0, __d1; \\\n+  __asm__ __volatile__ (\"cld; rep; stosl\" \\\n+                        : \"=m\" (((__fd_mask *) \\\n+                                 (fdsetp))[__FDELT (__FD_SETSIZE)]), \\\n+                          \"=&c\" (__d0), \"=&D\" (__d1) \\\n+                        : \"a\" (0), \"1\" (sizeof (__fd_set) \\\n+                                        / sizeof (__fd_mask)), \\\n+                          \"2\" ((__fd_mask *) (fdsetp)) \\\n+                        : \"memory\"); \\\n+  } while (0)\n+#endif\n+\n+#define _SELECTBITS_H_WRAPPER\n+#endif /* _SELECTBITS_H_WRAPPER */\n+__EOF__\n+# Define _SELECTBITS_H_WRAPPER at the end of the wrapper, not\n+# the start, so that if #include_next gets another instance of\n+# the wrapper, this will follow the #include_next chain until\n+# we arrive at the real <selectbits.h>.\n+chmod a+r $LIB/$file\n+\n+# asm/posix_types.h for libc version 1.x\n+file=asm/posix_types.h\n+echo Fixed $file for glibc-1.x\n+rm -f $LIB/$file\n+dir=`dirname $LIB/$file`\n+if [ ! -d $dir ]; then\n+  mkdir -p $dir || exit 1\n+fi\n+cat <<'__EOF__' >$LIB/$file\n+/* This file fixes __FD_ZERO bug for glibc-1.x. */\n+#ifndef _POSIX_TYPES_H_WRAPPER\n+#include <features.h>\n+#include_next <asm/posix_types.h>\n+\n+#if defined(__FD_ZERO) && !defined(__GLIBC__)\n+#undef __FD_ZERO\n+#define __FD_ZERO(fdsetp) \\\n+  do { \\\n+    int __d0, __d1; \\\n+\t\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n+\t\t\t: \"=m\" (*(__kernel_fd_set *) (fdsetp)), \\\n+                          \"=&c\" (__d0), \"=&D\" (__d1) \\\n+\t\t\t: \"a\" (0), \"1\" (__FDSET_LONGS), \\\n+\t\t\t  \"2\" ((__kernel_fd_set *) (fdsetp)) :\"memory\"); \\\n+  } while (0)\n+#endif\n+\n+#define _POSIX_TYPES_H_WRAPPER\n+#endif /* _POSIX_TYPES_H_WRAPPER */\n+__EOF__\n+# Define _POSIX_TYPES_H_WRAPPER at the end of the wrapper, not\n+# the start, so that if #include_next gets another instance of\n+# the wrapper, this will follow the #include_next chain until\n+# we arrive at the real <asm/posix_types.h>.\n+chmod a+r $LIB/$file\n+\n+# gnu/types.h for libc version 1.x\n+file=gnu/types.h\n+echo Fixed $file for glibc-1.x\n+rm -f $LIB/$file\n+dir=`dirname $LIB/$file`\n+if [ ! -d $dir ]; then\n+  mkdir -p $dir || exit 1\n+fi\n+cat <<'__EOF__' >$LIB/$file\n+/* This file fixes __FD_ZERO bug for glibc-1.x. */\n+#ifndef _TYPES_H_WRAPPER\n+#include <features.h>\n+#include_next <gnu/types.h>\n+\n+#if defined(__FD_ZERO) && !defined(__GLIBC__)\n+#undef __FD_ZERO\n+# define __FD_ZERO(fdsetp) \\\n+  do { \\\n+    int __d0, __d1; \\\n+\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n+        \t: \"=m\" (*(__fd_set *) (fdsetp)), \\\n+                  \"=&c\" (__d0), \"=&D\" (__d1) \\\n+        \t: \"a\" (0), \"1\" (__FDSET_LONGS), \\\n+\t\t  \"2\" ((__fd_set *) (fdsetp)) :\"memory\"); \\\n+  } while (0)\n+#endif\n+\n+#define _TYPES_H_WRAPPER\n+#endif /* _TYPES_H_WRAPPER */\n+__EOF__\n+# Define _TYPES_H_WRAPPER at the end of the wrapper, not the start,\n+# so that if #include_next gets another instance of the wrapper,\n+# this will follow the #include_next chain until we arrive at\n+# the real <gnu/types.h>.\n+chmod a+r $LIB/$file\n+\n+exit 0\n+"}, {"sha": "1f45ca5c5ade3cdf4caca9375f6fb4d63cbc1179", "filename": "gcc/fixinc/mkfixinc.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d56756885d5951bd0ab53ec59228974fa2fcb07/gcc%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fmkfixinc.sh?ref=6d56756885d5951bd0ab53ec59228974fa2fcb07", "patch": "@@ -91,6 +91,13 @@ case $machine in\n \t\tfixincludes=\n \t\t;;\n \n+\ti[34567]86-*-linux-gnu* | \\\n+\ti[34567]86-*-linux-gnulibc1 | \\\n+        i[34567]86-*-linux-gnuaout* | \\\n+\ti[34567]86-*-linux-gnuoldld*)\n+\t\tfixincludes=fixinc.x86-linux-gnu\n+\t\t;;\n+\n \t*-sgi-irix*)\n \t\tfixincludes=fixinc.irix\n \t\t;;"}]}