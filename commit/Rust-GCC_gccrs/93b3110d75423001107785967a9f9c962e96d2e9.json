{"sha": "93b3110d75423001107785967a9f9c962e96d2e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiMzExMGQ3NTQyMzAwMTEwNzc4NTk2N2E5ZjljOTYyZTk2ZDJlOQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-01-10T13:46:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:39Z"}, "message": "[Ada] Improve handling of SPARK_Mode in generic instances\n\n2020-06-03  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* rtsfind.adb (Load_RTU): Correctly set/reset global variable to\n\tignore SPARK_Mode in instances around loading.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Accept Off\n\twithout prior On.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Likewise.\n\t* sem_prag.adb (Analyze_Pragma): Always take into account\n\tSPARK_Mode Off.", "tree": {"sha": "c8294a0e8410e803d0f1c78eb1b9726393bc9894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8294a0e8410e803d0f1c78eb1b9726393bc9894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b3110d75423001107785967a9f9c962e96d2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b3110d75423001107785967a9f9c962e96d2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b3110d75423001107785967a9f9c962e96d2e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b3110d75423001107785967a9f9c962e96d2e9/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e60b6e23741c6d6059e6f765f18ce4c56366874b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60b6e23741c6d6059e6f765f18ce4c56366874b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60b6e23741c6d6059e6f765f18ce4c56366874b"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "14371b4bb895b8eb3f8b7cd922a60723ca8c356d", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=93b3110d75423001107785967a9f9c962e96d2e9", "patch": "@@ -931,6 +931,8 @@ package body Rtsfind is\n \n       Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n       Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      Saved_ISMP : constant Boolean        :=\n+                     Ignore_SPARK_Mode_Pragmas_In_Instance;\n       Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n       Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n       --  Save Ghost and SPARK mode-related data to restore on exit\n@@ -946,6 +948,7 @@ package body Rtsfind is\n \n       --  Provide a clean environment for the unit\n \n+      Ignore_SPARK_Mode_Pragmas_In_Instance := False;\n       Install_Ghost_Region (None, Empty);\n       Install_SPARK_Mode   (None, Empty);\n \n@@ -1044,6 +1047,7 @@ package body Rtsfind is\n          Set_Is_Potentially_Use_Visible (U.Entity, True);\n       end if;\n \n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n       Restore_Ghost_Region (Saved_GM, Saved_IGR);\n       Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n    end Load_RTU;"}, {"sha": "e723480517b4f3dfe3438a1f016410254f1e474c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=93b3110d75423001107785967a9f9c962e96d2e9", "patch": "@@ -4592,6 +4592,15 @@ package body Sem_Ch6 is\n          elsif Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Body_Stub then\n             null;\n \n+         --  SPARK_Mode Off could complete no SPARK_Mode in a generic, either\n+         --  as specified in source code, or because SPARK_Mode On is ignored\n+         --  in an instance where the context is SPARK_Mode Off/Auto.\n+\n+         elsif Get_SPARK_Mode_From_Annotation (SPARK_Pragma (Body_Id)) = Off\n+           and then (Is_Generic_Unit (Spec_Id) or else In_Instance)\n+         then\n+            null;\n+\n          else\n             Error_Msg_Sloc := Sloc (SPARK_Pragma (Body_Id));\n             Error_Msg_N (\"incorrect application of SPARK_Mode #\", N);"}, {"sha": "e5bb88808169586a213f21f7fae837c0b6c07386", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=93b3110d75423001107785967a9f9c962e96d2e9", "patch": "@@ -956,6 +956,15 @@ package body Sem_Ch7 is\n                  (\"\\value Off was set for SPARK_Mode on & #\", N, Spec_Id);\n             end if;\n \n+         --  SPARK_Mode Off could complete no SPARK_Mode in a generic, either\n+         --  as specified in source code, or because SPARK_Mode On is ignored\n+         --  in an instance where the context is SPARK_Mode Off/Auto.\n+\n+         elsif Get_SPARK_Mode_From_Annotation (SPARK_Pragma (Body_Id)) = Off\n+           and then (Is_Generic_Unit (Spec_Id) or else In_Instance)\n+         then\n+            null;\n+\n          else\n             Error_Msg_Sloc := Sloc (SPARK_Pragma (Body_Id));\n             Error_Msg_N (\"incorrect application of SPARK_Mode#\", N);"}, {"sha": "cbb012d1ed5130fdb28be1950fd9745c4cdf53f8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3110d75423001107785967a9f9c962e96d2e9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=93b3110d75423001107785967a9f9c962e96d2e9", "patch": "@@ -23448,6 +23448,11 @@ package body Sem_Prag is\n                   --  pragma in which case the current pragma is illegal as\n                   --  it cannot \"complete\".\n \n+                  elsif Get_SPARK_Mode_From_Annotation (N) = Off\n+                    and then (Is_Generic_Unit (Entity) or else In_Instance)\n+                  then\n+                     null;\n+\n                   else\n                      Error_Msg_N (\"incorrect use of SPARK_Mode\", Err_N);\n                      Error_Msg_Sloc := Sloc (Err_Id);\n@@ -23773,16 +23778,6 @@ package body Sem_Prag is\n          --  Start of processing for Do_SPARK_Mode\n \n          begin\n-            --  When a SPARK_Mode pragma appears inside an instantiation whose\n-            --  enclosing context has SPARK_Mode set to \"off\", the pragma has\n-            --  no semantic effect.\n-\n-            if Ignore_SPARK_Mode_Pragmas_In_Instance then\n-               Rewrite (N, Make_Null_Statement (Loc));\n-               Analyze (N);\n-               return;\n-            end if;\n-\n             GNAT_Pragma;\n             Check_No_Identifiers;\n             Check_At_Most_N_Arguments (1);\n@@ -23799,6 +23794,18 @@ package body Sem_Prag is\n             Mode_Id := Get_SPARK_Mode_Type (Mode);\n             Context := Parent (N);\n \n+            --  When a SPARK_Mode pragma appears inside an instantiation whose\n+            --  enclosing context has SPARK_Mode set to \"off\", the pragma has\n+            --  no semantic effect.\n+\n+            if Ignore_SPARK_Mode_Pragmas_In_Instance\n+              and then Mode_Id /= Off\n+            then\n+               Rewrite (N, Make_Null_Statement (Loc));\n+               Analyze (N);\n+               return;\n+            end if;\n+\n             --  The pragma appears in a configuration file\n \n             if No (Context) then"}]}