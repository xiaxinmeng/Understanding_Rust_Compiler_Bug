{"sha": "2e4e39f615dacf0dbc8b02db27b1046f849c731d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0ZTM5ZjYxNWRhY2YwZGJjOGIwMmRiMjdiMTA0NmY4NDljNzMxZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2008-02-25T15:07:17Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-02-25T15:07:17Z"}, "message": "re PR target/35258 (two memcpy calls merged incorrectly with -O1)\n\n2008-02-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR target/35258\n\t* cse.c (cse_insn): Avoid creation of overlapping MEMs.\n\t* alias.c (nonoverlapping_memrefs_p): Export for use in other modules.\n\t* alias.h (nonoverlapping_memrefs_p): Likewise.\n\n2008-02-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR target/35258\n\t* gcc.dg/pr35258.c: New testcase.\n\nFrom-SVN: r132628", "tree": {"sha": "fc21b35d3970def7cfb0d7c5ee657f66f97bd3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc21b35d3970def7cfb0d7c5ee657f66f97bd3bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e4e39f615dacf0dbc8b02db27b1046f849c731d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4e39f615dacf0dbc8b02db27b1046f849c731d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4e39f615dacf0dbc8b02db27b1046f849c731d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4e39f615dacf0dbc8b02db27b1046f849c731d/comments", "author": null, "committer": null, "parents": [{"sha": "891984af0ffaed847d07a43c5528e9bd217dc2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891984af0ffaed847d07a43c5528e9bd217dc2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891984af0ffaed847d07a43c5528e9bd217dc2b9"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "fa691e7766ad7486f58e02620ae2281324a5a1b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e4e39f615dacf0dbc8b02db27b1046f849c731d", "patch": "@@ -1,3 +1,10 @@\n+2008-02-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR target/35258\n+\t* cse.c (cse_insn): Avoid creation of overlapping MEMs.\n+\t* alias.c (nonoverlapping_memrefs_p): Export for use in other modules.\n+\t* alias.h (nonoverlapping_memrefs_p): Likewise.\n+\n 2008-02-25  Jan Beulich  <jbeulich@novell.com>\n \n \t* Makefile.in: Also prefix uses of crt0.o and mcrt0.o with"}, {"sha": "56afa86321ee94574b921739707b668ec4b17005", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=2e4e39f615dacf0dbc8b02db27b1046f849c731d", "patch": "@@ -164,7 +164,6 @@ static int aliases_everything_p (const_rtx);\n static bool nonoverlapping_component_refs_p (const_tree, const_tree);\n static tree decl_for_component_ref (tree);\n static rtx adjust_offset_for_component_ref (tree, rtx);\n-static int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n static int write_dependence_p (const_rtx, const_rtx, int);\n \n static void memory_modified_1 (rtx, const_rtx, void *);\n@@ -1976,7 +1975,7 @@ adjust_offset_for_component_ref (tree x, rtx offset)\n /* Return nonzero if we can determine the exprs corresponding to memrefs\n    X and Y and they do not overlap.  */\n \n-static int\n+int\n nonoverlapping_memrefs_p (const_rtx x, const_rtx y)\n {\n   tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);"}, {"sha": "772aea090108c55992339a3042dc3a59cf29ee37", "filename": "gcc/alias.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=2e4e39f615dacf0dbc8b02db27b1046f849c731d", "patch": "@@ -28,6 +28,7 @@ extern alias_set_type get_varargs_alias_set (void);\n extern alias_set_type get_frame_alias_set (void);\n extern bool component_uses_parent_alias_set (const_tree);\n extern bool alias_set_subset_of (alias_set_type, alias_set_type);\n+extern int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n \n /* This alias set can be used to force a memory to conflict with all\n    other memories, creating a barrier across which no memory reference"}, {"sha": "9f31e670966845091706898c8ff021962cd6bf85", "filename": "gcc/cse.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=2e4e39f615dacf0dbc8b02db27b1046f849c731d", "patch": "@@ -4753,6 +4753,23 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t      src_elt_cost = MAX_COST;\n \t    }\n \n+\t  /* Avoid creation of overlapping memory moves.  */\n+\t  if (MEM_P (trial) && MEM_P (SET_DEST (sets[i].rtl)))\n+\t    {\n+\t      rtx src, dest;\n+\n+\t      /* BLKmode moves are not handled by cse anyway.  */\n+\t      if (GET_MODE (trial) == BLKmode)\n+\t\tbreak;\n+\n+\t      src = canon_rtx (trial);\n+\t      dest = canon_rtx (SET_DEST (sets[i].rtl));\n+\n+\t      if (!MEM_P (src) || !MEM_P (dest)\n+\t\t  || !nonoverlapping_memrefs_p (src, dest))\n+\t\tbreak;\n+\t    }\n+\n \t  /* We don't normally have an insn matching (set (pc) (pc)), so\n \t     check for this separately here.  We will delete such an\n \t     insn below."}, {"sha": "0e3977d2820ebef871b987a153dac79fb525f07e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e4e39f615dacf0dbc8b02db27b1046f849c731d", "patch": "@@ -1,3 +1,8 @@\n+2008-02-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR target/35258\n+\t* gcc.dg/pr35258.c: New testcase.\n+\n 2008-02-25  Jan Beulich  <jbeulich@novell.com>\n \n \t* gcc.dg/20020426-2.c: Remove bogus workaround."}, {"sha": "d1c45a79dc7405488559fc15cb9394753ec70aba", "filename": "gcc/testsuite/gcc.dg/pr35258.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35258.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4e39f615dacf0dbc8b02db27b1046f849c731d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35258.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35258.c?ref=2e4e39f615dacf0dbc8b02db27b1046f849c731d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+extern void abort(void);\n+\n+char str[9] = \"1234\";\n+\n+void\n+bar (void)\n+{\n+  unsigned int temp;\n+  char *p = &str[2];\n+\n+  memcpy (&temp, &str[1], 4);\n+  memcpy (p, &temp, 4);\n+  str[1] = '.';\n+}\n+\n+int main()\n+{\n+  bar();\n+  if (memcmp (str, \"1.234\", 5) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}]}