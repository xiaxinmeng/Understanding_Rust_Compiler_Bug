{"sha": "e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0MzkyZjBhOGY3ZTYxNzE4MGY1YmMwMzRmZjRjMTJiNWZhODQwNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-09-18T14:35:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-09-18T14:35:42Z"}, "message": "re PR c++/33464 (Broken diagnostic: 'trait_expr' not supported by dump_expr)\n\n/cp\n2007-09-18  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/33464\n\t* cxx-pretty-print.c (pp_cxx_trait_expression): Add.\n\t(pp_cxx_primary_expression): Use it.\n\t* cxx-pretty-print.h (pp_cxx_trait_expression): Declare.\n\t* error.c (dump_expr): Use it.\n\n/testsuite\n2007-09-18  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/33464\n\t* g++.dg/ext/is_class_error.C: Rename to is_class_error1.C.\n\t* g++.dg/ext/is_class_error2.C: New.\n\nFrom-SVN: r128578", "tree": {"sha": "5be54ba711fa5c187ecc10d930f60b988e4e7f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be54ba711fa5c187ecc10d930f60b988e4e7f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/comments", "author": null, "committer": null, "parents": [{"sha": "e2972de5377c352200a84c0f3055b099631f3dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2972de5377c352200a84c0f3055b099631f3dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2972de5377c352200a84c0f3055b099631f3dbc"}], "stats": {"total": 141, "additions": 139, "deletions": 2}, "files": [{"sha": "c0610b0ffbfff6f59c94134f554e1b97ba3ea65a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "patch": "@@ -1,3 +1,11 @@\n+2007-09-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/33464\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Add.\n+\t(pp_cxx_primary_expression): Use it.\n+\t* cxx-pretty-print.h (pp_cxx_trait_expression): Declare.\n+\t* error.c (dump_expr): Use it.\n+\n 2007-09-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33124"}, {"sha": "156f579b6b51df7b01465bcffea4396b75b87e77", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "patch": "@@ -348,7 +348,26 @@ pp_cxx_id_expression (cxx_pretty_printer *pp, tree t)\n      :: operator-function-id\n      :: qualifier-id\n      ( expression )\n-     id-expression   */\n+     id-expression   \n+\n+   GNU Extensions:\n+     __has_nothrow_assign ( type-id )   \n+     __has_nothrow_constructor ( type-id )\n+     __has_nothrow_copy ( type-id )\n+     __has_trivial_assign ( type-id )   \n+     __has_trivial_constructor ( type-id )\n+     __has_trivial_copy ( type-id )\n+     __has_trivial_destructor ( type-id )\n+     __has_virtual_destructor ( type-id )     \n+     __is_abstract ( type-id )\n+     __is_base_of ( type-id , type-id )\n+     __is_class ( type-id )\n+     __is_convertible_to ( type-id , type-id )     \n+     __is_empty ( type-id )\n+     __is_enum ( type-id )\n+     __is_pod ( type-id )\n+     __is_polymorphic ( type-id )\n+     __is_union ( type-id )  */\n \n static void\n pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n@@ -387,6 +406,10 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n       pp_cxx_right_paren (pp);\n       break;\n \n+    case TRAIT_EXPR:\n+      pp_cxx_trait_expression (pp, t);\n+      break;\n+\n     default:\n       pp_c_primary_expression (pp_c_base (pp), t);\n       break;\n@@ -2123,6 +2146,80 @@ pp_cxx_declaration (cxx_pretty_printer *pp, tree t)\n     }\n }\n \n+void\n+pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  cp_trait_kind kind = TRAIT_EXPR_KIND (t);\n+\n+  switch (kind)\n+    {\n+    case CPTK_HAS_NOTHROW_ASSIGN:\n+      pp_cxx_identifier (pp, \"__has_nothrow_assign\");\n+      break;\n+    case CPTK_HAS_TRIVIAL_ASSIGN:\n+      pp_cxx_identifier (pp, \"__has_trivial_assign\");\n+      break;\n+    case CPTK_HAS_NOTHROW_CONSTRUCTOR:\n+      pp_cxx_identifier (pp, \"__has_nothrow_constructor\");\n+      break;\n+    case CPTK_HAS_TRIVIAL_CONSTRUCTOR:\n+      pp_cxx_identifier (pp, \"__has_trivial_constructor\");\n+      break;\n+    case CPTK_HAS_NOTHROW_COPY:\n+      pp_cxx_identifier (pp, \"__has_nothrow_copy\");\n+      break;\n+    case CPTK_HAS_TRIVIAL_COPY:\n+      pp_cxx_identifier (pp, \"__has_trivial_copy\");\n+      break;\n+    case CPTK_HAS_TRIVIAL_DESTRUCTOR:\n+      pp_cxx_identifier (pp, \"__has_trivial_destructor\");\n+      break;\n+    case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n+      pp_cxx_identifier (pp, \"__has_virtual_destructor\");\n+      break;\n+    case CPTK_IS_ABSTRACT:\n+      pp_cxx_identifier (pp, \"__is_abstract\");\n+      break;\n+    case CPTK_IS_BASE_OF:\n+      pp_cxx_identifier (pp, \"__is_base_of\");\n+      break;\n+    case CPTK_IS_CLASS:\n+      pp_cxx_identifier (pp, \"__is_class\");\n+      break;\n+    case CPTK_IS_CONVERTIBLE_TO:\n+      pp_cxx_identifier (pp, \"__is_convertible_to\");\n+      break;\n+    case CPTK_IS_EMPTY:\n+      pp_cxx_identifier (pp, \"__is_empty\");\n+      break;\n+    case CPTK_IS_ENUM:\n+      pp_cxx_identifier (pp, \"__is_enum\");\n+      break;\n+    case CPTK_IS_POD:\n+      pp_cxx_identifier (pp, \"__is_pod\");\n+      break;\n+    case CPTK_IS_POLYMORPHIC:\n+      pp_cxx_identifier (pp, \"__is_polymorphic\");\n+      break;\n+    case CPTK_IS_UNION:\n+      pp_cxx_identifier (pp, \"__is_union\");\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  pp_cxx_left_paren (pp);\n+  pp_cxx_type_id (pp, TRAIT_EXPR_TYPE1 (t));\n+\n+  if (kind == CPTK_IS_BASE_OF || kind == CPTK_IS_CONVERTIBLE_TO)\n+    {\n+      pp_cxx_separate_with (pp, ',');\n+      pp_cxx_type_id (pp, TRAIT_EXPR_TYPE2 (t));\n+    }\n+\n+  pp_cxx_right_paren (pp);\n+}\n \f\n typedef c_pretty_print_fn pp_fun;\n "}, {"sha": "2ae834f2be05047c26f02b2f7bb389e458ae0175", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "patch": "@@ -69,6 +69,6 @@ void pp_cxx_separate_with (cxx_pretty_printer *, int);\n \n void pp_cxx_declaration (cxx_pretty_printer *, tree);\n void pp_cxx_canonical_template_parameter (cxx_pretty_printer *, tree);\n-\n+void pp_cxx_trait_expression (cxx_pretty_printer *, tree);\n \n #endif /* GCC_CXX_PRETTY_PRINT_H */"}, {"sha": "b68df74f83e9bbef364b8d9637f2a049f428d1d0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "patch": "@@ -2054,6 +2054,10 @@ dump_expr (tree t, int flags)\n       dump_type (t, flags);\n       break;\n \n+    case TRAIT_EXPR:\n+      pp_cxx_trait_expression (cxx_pp, t);\n+      break;\n+\n       /*  This list is incomplete, but should suffice for now.\n \t  It is very important that `sorry' does not call\n \t  `report_error_function'.  That could cause an infinite loop.  */"}, {"sha": "882780f2e1edab734214e024b87e4b1faacbcee5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "patch": "@@ -1,3 +1,9 @@\n+2007-09-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/33464\n+\t* g++.dg/ext/is_class_error.C: Rename to is_class_error1.C.\n+\t* g++.dg/ext/is_class_error2.C: New.\n+\n 2007-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33340"}, {"sha": "d037ec72b7b8552bd4ba2a8d18ce2fd133c39b2b", "filename": "gcc/testsuite/g++.dg/ext/is_class_error1.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error1.C?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "previous_filename": "gcc/testsuite/g++.dg/ext/is_class_error.C"}, {"sha": "9f19d6245342a864b8cf815a087ed5c50e94365b", "filename": "gcc/testsuite/g++.dg/ext/is_class_error2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74392f0a8f7e617180f5bc034ff4c12b5fa8405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error2.C?ref=e74392f0a8f7e617180f5bc034ff4c12b5fa8405", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/33464\n+\n+template<int> void foo()\n+{\n+  __has_nothrow_assign(int)(); // { dg-error \"'__has_nothrow_assign\\\\(int\\\\)' cannot be used\" }\n+  __has_trivial_assign(int)(); // { dg-error \"'__has_trivial_assign\\\\(int\\\\)' cannot be used\" }\n+  __has_nothrow_constructor(int)(); // { dg-error \"'__has_nothrow_constructor\\\\(int\\\\)' cannot be used\" }\n+  __has_trivial_constructor(int)(); // { dg-error \"'__has_trivial_constructor\\\\(int\\\\)' cannot be used\" } \n+  __has_nothrow_copy(int)(); // { dg-error \"'__has_nothrow_copy\\\\(int\\\\)' cannot be used\" }\n+  __has_trivial_copy(int)(); // { dg-error \"'__has_trivial_copy\\\\(int\\\\)' cannot be used\" }\n+  __has_trivial_destructor(int)(); // { dg-error \"'__has_trivial_destructor\\\\(int\\\\)' cannot be used\" }\n+  __has_virtual_destructor(int)(); // { dg-error \"'__has_virtual_destructor\\\\(int\\\\)' cannot be used\" }\n+  __is_abstract(int)(); // { dg-error \"'__is_abstract\\\\(int\\\\)' cannot be used\" }\n+  __is_base_of(int, float)(); // { dg-error \"'__is_base_of\\\\(int, float\\\\)' cannot be used\" }\n+  __is_class(int)(); // { dg-error \"'__is_class\\\\(int\\\\)' cannot be used\" }\n+  __is_convertible_to(int, float)(); // { dg-error \"unimplemented\" }\n+  __is_empty(int)(); // { dg-error \"'__is_empty\\\\(int\\\\)' cannot be used\" }\n+  __is_enum(int)(); // { dg-error \"'__is_enum\\\\(int\\\\)' cannot be used\" }\n+  __is_pod(int)(); // { dg-error \"'__is_pod\\\\(int\\\\)' cannot be used\" }\n+  __is_polymorphic(int)(); // { dg-error \"'__is_polymorphic\\\\(int\\\\)' cannot be used\" }\n+  __is_union(int)(); // { dg-error \"'__is_union\\\\(int\\\\)' cannot be used\" }\n+}"}]}