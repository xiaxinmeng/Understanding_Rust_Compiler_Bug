{"sha": "7eaa7cdf7da806ba900237e34eb11fd580039da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhYTdjZGY3ZGE4MDZiYTkwMDIzN2UzNGViMTFmZDU4MDAzOWRhMw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-06-14T13:01:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T13:01:07Z"}, "message": "ali.adb (Scan_ALI): Implement reading and storing of N lines\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* ali.adb (Scan_ALI): Implement reading and storing of N lines\n\t(Known_ALI_Lines): Add entry for 'N' (notes)\n\t* ali.ads (Notes): New table to store Notes information\n\t* alloc.ads: Add entries for Notes table\n\t* lib-util.adb (Write_Info_Int): New procedure\n\t(Write_Info_Slit): New procedure\n\t(Write_Info_Uint): New procedure\n\t* lib-util.ads (Write_Info_Int): New procedure\n\t(Write_Info_Slit): New procedure\n\t(Write_Info_Uint): New procedure\n\t* lib-writ.adb (Write_Unit_Information): Output N (notes) lines\n\t* lib-writ.ads: Update documentation for N (Notes) lines\n\t* lib.adb (Store_Note): New procedure\n\t* lib.ads (Notes): New table\n\t(Store_Note): New procedure\n\t* sem_prag.adb: Call Store_Note for affected pragmas\n\nFrom-SVN: r160736", "tree": {"sha": "098473a5e47938dcfa8b53ff687d42c7e5548626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/098473a5e47938dcfa8b53ff687d42c7e5548626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eaa7cdf7da806ba900237e34eb11fd580039da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eaa7cdf7da806ba900237e34eb11fd580039da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eaa7cdf7da806ba900237e34eb11fd580039da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eaa7cdf7da806ba900237e34eb11fd580039da3/comments", "author": null, "committer": null, "parents": [{"sha": "3a13e78582d1be59cd9e5ecb24f8f1c355261648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a13e78582d1be59cd9e5ecb24f8f1c355261648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a13e78582d1be59cd9e5ecb24f8f1c355261648"}], "stats": {"total": 412, "additions": 327, "deletions": 85}, "files": [{"sha": "8869f22c60e90b251157d2a3c385aaecb46ac10a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -1,3 +1,22 @@\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali.adb (Scan_ALI): Implement reading and storing of N lines\n+\t(Known_ALI_Lines): Add entry for 'N' (notes)\n+\t* ali.ads (Notes): New table to store Notes information\n+\t* alloc.ads: Add entries for Notes table\n+\t* lib-util.adb (Write_Info_Int): New procedure\n+\t(Write_Info_Slit): New procedure\n+\t(Write_Info_Uint): New procedure\n+\t* lib-util.ads (Write_Info_Int): New procedure\n+\t(Write_Info_Slit): New procedure\n+\t(Write_Info_Uint): New procedure\n+\t* lib-writ.adb (Write_Unit_Information): Output N (notes) lines\n+\t* lib-writ.ads: Update documentation for N (Notes) lines\n+\t* lib.adb (Store_Note): New procedure\n+\t* lib.ads (Notes): New table\n+\t(Store_Note): New procedure\n+\t* sem_prag.adb: Call Store_Note for affected pragmas\n+\n 2010-06-14  Thomas Quinot  <quinot@adacore.com>\n \n \t* socket.c: Fix wrong condition in #ifdef"}, {"sha": "27144b9215f023468cbff07d7124c20ee4b22e9c", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -49,6 +49,7 @@ package body ALI is\n       'U'    => True,   -- unit\n       'W'    => True,   -- with\n       'L'    => True,   -- linker option\n+      'N'    => True,   -- notes\n       'E'    => True,   -- external\n       'D'    => True,   -- dependency\n       'X'    => True,   -- xref\n@@ -89,14 +90,16 @@ package body ALI is\n       Withs.Init;\n       Sdep.Init;\n       Linker_Options.Init;\n+      Notes.Init;\n       Xref_Section.Init;\n       Xref_Entity.Init;\n       Xref.Init;\n       Version_Ref.Reset;\n \n-      --  Add dummy zero'th item in Linker_Options for the sort function\n+      --  Add dummy zero'th item in Linker_Options and Notes for sort calls\n \n       Linker_Options.Increment_Last;\n+      Notes.Increment_Last;\n \n       --  Initialize global variables recording cumulative options in all\n       --  ALI files that are read for a given processing run in gnatbind.\n@@ -1862,6 +1865,45 @@ package body ALI is\n             Linker_Options.Table (Linker_Options.Last).Original_Pos :=\n               Linker_Options.Last;\n          end if;\n+\n+         --  If there are notes present, scan them\n+\n+         Notes_Loop : loop\n+            Check_Unknown_Line;\n+            exit Notes_Loop when C /= 'N';\n+\n+            if Ignore ('N') then\n+               Skip_Line;\n+\n+            else\n+               Checkc (' ');\n+\n+               Notes.Increment_Last;\n+               Notes.Table (Notes.Last).Pragma_Type := Getc;\n+               Notes.Table (Notes.Last).Pragma_Line := Get_Nat;\n+               Checkc (':');\n+               Notes.Table (Notes.Last).Pragma_Col  := Get_Nat;\n+               Notes.Table (Notes.Last).Unit        := Units.Last;\n+\n+               if At_Eol then\n+                  Notes.Table (Notes.Last).Pragma_Args := No_Name;\n+\n+               else\n+                  Checkc (' ');\n+\n+                  Name_Len := 0;\n+                  while not At_Eol loop\n+                     Add_Char_To_Name_Buffer (Getc);\n+                  end loop;\n+\n+                  Notes.Table (Notes.Last).Pragma_Args := Name_Enter;\n+               end if;\n+\n+               Skip_Eol;\n+            end if;\n+\n+            C := Getc;\n+         end loop Notes_Loop;\n       end loop U_Loop;\n \n       --  End loop through units for one ALI file"}, {"sha": "9056ce59cc6150fda4bfbdf89386cad4b13b51fb", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -605,8 +605,6 @@ package ALI is\n       --  table.\n    end record;\n \n-   --  Declare the Linker_Options Table\n-\n    --  The indexes of active entries in this table range from 1 to the\n    --  value of Linker_Options.Last. The zero'th element is for sort call.\n \n@@ -618,6 +616,44 @@ package ALI is\n      Table_Increment      => 400,\n      Table_Name           => \"Linker_Options\");\n \n+   -----------------\n+   -- Notes Table --\n+   -----------------\n+\n+   --  The notes table records entries from N lines\n+\n+   type Notes_Record is record\n+      Pragma_Type : Character;\n+      --  'A', 'C', 'I', 'S', 'T' for Annotate/Comment/Ident/Subtitle/Title\n+\n+      Pragma_Line : Nat;\n+      --  Line number of pragma\n+\n+      Pragma_Col : Nat;\n+      --  Column number of pragma\n+\n+      Unit : Unit_Id;\n+      --  Unit_Id for the entry\n+\n+      Pragma_Args : Name_Id;\n+      --  Pragma arguments. No_Name if no arguments, otherwise a single\n+      --  name table entry consisting of all the characters on the notes\n+      --  line from the first non-blank character following the source\n+      --  location to the last character on the line.\n+   end record;\n+\n+   --  The indexes of active entries in this table range from 1 to the\n+   --  value of Linker_Options.Last. The zero'th element is for convenience\n+   --  if the table needs to be sorted.\n+\n+   package Notes is new Table.Table (\n+     Table_Component_Type => Notes_Record,\n+     Table_Index_Type     => Integer,\n+     Table_Low_Bound      => 0,\n+     Table_Initial        => 200,\n+     Table_Increment      => 400,\n+     Table_Name           => \"Notes\");\n+\n    -------------------------------------------\n    -- External Version Reference Hash Table --\n    -------------------------------------------"}, {"sha": "c5cad72965297b745e68de30880cb4b61039c66b", "filename": "gcc/ada/alloc.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Falloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Falloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falloc.ads?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -100,6 +100,9 @@ package Alloc is\n    Nodes_Initial                    : constant := 50_000;  -- Atree\n    Nodes_Increment                  : constant := 100;\n \n+   Notes_Initial                    : constant := 100;     -- Lib\n+   Notes_Increment                  : constant := 200;\n+\n    Obsolescent_Warnings_Initial     : constant := 50;      -- Sem_Prag\n    Obsolescent_Warnings_Increment   : constant := 200;\n "}, {"sha": "e6af0237fc1b22f33faf8dbf56d2f9fc23f836c8", "filename": "gcc/ada/lib-util.adb", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-util.adb?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,6 +25,7 @@\n \n with Hostparm;\n with Osint.C;  use Osint.C;\n+with Stringt;  use Stringt;\n \n package body Lib.Util is\n \n@@ -39,7 +40,7 @@ package body Lib.Util is\n \n    Info_Buffer_Col : Natural := 1;\n    --  Column number of next character to be written.\n-   --  Can be different from Info_Buffer_Len + 1\n+   --  Can be different from Info_Buffer_Len + 1.\n    --  because of tab characters written by Write_Info_Tab.\n \n    ---------------------\n@@ -133,6 +134,23 @@ package body Lib.Util is\n \n    procedure Write_Info_Initiate (Key : Character) renames Write_Info_Char;\n \n+   --------------------\n+   -- Write_Info_Int --\n+   --------------------\n+\n+   procedure Write_Info_Int (N : Int) is\n+   begin\n+      if N >= 0 then\n+         Write_Info_Nat (N);\n+\n+      --  Negative numbers, use Write_Info_Uint to avoid problems with largest\n+      --  negative number.\n+\n+      else\n+         Write_Info_Uint (UI_From_Int (N));\n+      end if;\n+   end Write_Info_Int;\n+\n    ---------------------\n    -- Write_Info_Name --\n    ---------------------\n@@ -169,6 +187,45 @@ package body Lib.Util is\n       Write_Info_Char (Character'Val (N mod 10 + Character'Pos ('0')));\n    end Write_Info_Nat;\n \n+   ---------------------\n+   -- Write_Info_Slit --\n+   ---------------------\n+\n+   procedure Write_Info_Slit (S : String_Id) is\n+      C : Character;\n+\n+   begin\n+      Write_Info_Str (\"\"\"\");\n+\n+      for J in 1 .. String_Length (S) loop\n+         C := Get_Character (Get_String_Char (S, J));\n+\n+         if C in Character'Val (16#20#) .. Character'Val (16#7E#)\n+           and then C /= '{'\n+         then\n+            Write_Info_Char (C);\n+\n+            if C = '\"' then\n+               Write_Info_Char (C);\n+            end if;\n+\n+         else\n+            declare\n+               Hex : constant array (0 .. 15) of Character :=\n+                       \"0123456789ABCDEF\";\n+\n+            begin\n+               Write_Info_Char ('{');\n+               Write_Info_Char (Hex (Character'Pos (C) / 16));\n+               Write_Info_Char (Hex (Character'Pos (C) mod 16));\n+               Write_Info_Char ('}');\n+            end;\n+         end if;\n+      end loop;\n+\n+      Write_Info_Char ('\"');\n+   end Write_Info_Slit;\n+\n    --------------------\n    -- Write_Info_Str --\n    --------------------\n@@ -225,7 +282,16 @@ package body Lib.Util is\n \n       Info_Buffer_Len := 0;\n       Info_Buffer_Col := 1;\n-\n    end Write_Info_Terminate;\n \n+   ---------------------\n+   -- Write_Info_Uint --\n+   ---------------------\n+\n+   procedure Write_Info_Uint (N : Uint) is\n+   begin\n+      UI_Image (N, Decimal);\n+      Write_Info_Str (UI_Image_Buffer (1 .. UI_Image_Length));\n+   end Write_Info_Uint;\n+\n end Lib.Util;"}, {"sha": "b34bd277a0908e9eeeacdcf1e3c57b9fcfe189a0", "filename": "gcc/ada/lib-util.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-util.ads?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -23,6 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Uintp; use Uintp;\n+\n package Lib.Util is\n \n    --  This package implements a buffered write of library information\n@@ -52,13 +54,20 @@ package Lib.Util is\n    procedure Write_Info_Nat (N : Nat);\n    --  Adds image of N to Info_Buffer with no leading or trailing blanks\n \n+   procedure Write_Info_Int (N : Int);\n+   --  Adds image of N to Info_Buffer with no leading or trailing blanks. A\n+   --  minus sign is prepended for negative values.\n+\n    procedure Write_Info_Name (Name : Name_Id);\n    procedure Write_Info_Name (Name : File_Name_Type);\n    procedure Write_Info_Name (Name : Unit_Name_Type);\n    --  Adds characters of Name to Info_Buffer. Note that in all cases, the\n    --  name is written literally from the names table entry without modifying\n    --  the case, using simply Get_Name_String.\n \n+   procedure Write_Info_Slit (S : String_Id);\n+   --  Write string literal value in format required for L/N lines in ali file\n+\n    procedure Write_Info_Str (Val : String);\n    --  Adds characters of Val to Info_Buffer surrounded by quotes\n \n@@ -70,4 +79,8 @@ package Lib.Util is\n    procedure Write_Info_Terminate;\n    --  Terminate current info line and output lines built in Info_Buffer\n \n+   procedure Write_Info_Uint (N : Uint);\n+   --  Adds decimal image of N to Info_Buffer with no leading or trailing\n+   --  blanks. A minus sign is prepended for negative values.\n+\n end Lib.Util;"}, {"sha": "24cce9251a30aa0a7e07841c974b5ef839353599", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 71, "deletions": 23, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -592,42 +592,90 @@ package body Lib.Writ is\n \n          for J in 1 .. Linker_Option_Lines.Last loop\n             declare\n-               S : constant Linker_Option_Entry :=\n-                     Linker_Option_Lines.Table (J);\n-               C : Character;\n-\n+               S : Linker_Option_Entry renames Linker_Option_Lines.Table (J);\n             begin\n                if S.Unit = Unit_Num then\n                   Write_Info_Initiate ('L');\n-                  Write_Info_Str (\" \"\"\");\n+                  Write_Info_Char (' ');\n+                  Write_Info_Slit (S.Option);\n+                  Write_Info_EOL;\n+               end if;\n+            end;\n+         end loop;\n+\n+         --  Output notes\n+\n+         for J in 1 .. Notes.Last loop\n+            declare\n+               N : constant Node_Id          := Notes.Table (J).Pragma_Node;\n+               L : constant Source_Ptr       := Sloc (N);\n+               U : constant Unit_Number_Type := Notes.Table (J).Unit;\n+               C : Character;\n \n-                  for J in 1 .. String_Length (S.Option) loop\n-                     C := Get_Character (Get_String_Char (S.Option, J));\n+            begin\n+               if U = Unit_Num then\n+                  Write_Info_Initiate ('N');\n+                  Write_Info_Char (' ');\n+\n+                  case Chars (Pragma_Identifier (N)) is\n+                     when Name_Annotate =>\n+                        C := 'A';\n+                     when Name_Comment =>\n+                        C := 'C';\n+                     when Name_Ident =>\n+                        C := 'I';\n+                     when Name_Title =>\n+                        C := 'T';\n+                     when Name_Subtitle =>\n+                        C := 'S';\n+                     when others =>\n+                        raise Program_Error;\n+                  end case;\n+\n+                  Write_Info_Char (C);\n+                  Write_Info_Int (Int (Get_Logical_Line_Number (L)));\n+                  Write_Info_Char (':');\n+                  Write_Info_Int (Int (Get_Column_Number (L)));\n \n-                     if C in Character'Val (16#20#) .. Character'Val (16#7E#)\n-                       and then C /= '{'\n-                     then\n-                        Write_Info_Char (C);\n+                  declare\n+                     A : Node_Id;\n \n-                        if C = '\"' then\n-                           Write_Info_Char (C);\n+                  begin\n+                     A := First (Pragma_Argument_Associations (N));\n+                     while Present (A) loop\n+                        Write_Info_Char (' ');\n+\n+                        if Chars (A) /= No_Name then\n+                           Write_Info_Name (Chars (A));\n+                           Write_Info_Char (':');\n                         end if;\n \n-                     else\n                         declare\n-                           Hex : constant array (0 .. 15) of Character :=\n-                                   \"0123456789ABCDEF\";\n+                           Expr : constant Node_Id := Expression (A);\n \n                         begin\n-                           Write_Info_Char ('{');\n-                           Write_Info_Char (Hex (Character'Pos (C) / 16));\n-                           Write_Info_Char (Hex (Character'Pos (C) mod 16));\n-                           Write_Info_Char ('}');\n+                           if Nkind (Expr) = N_Identifier then\n+                              Write_Info_Name (Chars (Expr));\n+\n+                           elsif Nkind (Expr) = N_Integer_Literal\n+                             and then Is_Static_Expression (Expr)\n+                           then\n+                              Write_Info_Uint (Intval (Expr));\n+\n+                           elsif Nkind (Expr) = N_String_Literal\n+                             and then Is_Static_Expression (Expr)\n+                           then\n+                              Write_Info_Slit (Strval (Expr));\n+\n+                           else\n+                              Write_Info_Str (\"<expr>\");\n+                           end if;\n                         end;\n-                     end if;\n-                  end loop;\n \n-                  Write_Info_Char ('\"');\n+                        Next (A);\n+                     end loop;\n+                  end;\n+\n                   Write_Info_EOL;\n                end if;\n             end;"}, {"sha": "b3207c1b3986341fd0cd188eddec5664ac09b503", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -571,6 +571,40 @@ package Lib.Writ is\n    --      source file, so that this order is preserved by the binder in\n    --      constructing the set of linker arguments.\n \n+   --  --------------\n+   --  -- N  Notes --\n+   --  --------------\n+\n+   --  The final section of unit-specific lines contains notes which record\n+   --  annotations inserted in source code for processing by external tools\n+   --  using pragmas. For each occurrence of any of these pragmas, a line is\n+   --  generated with the following syntax:\n+\n+   --    N x<sloc> [<arg_id>:]<arg> ...\n+\n+   --      x is one of:\n+   --        A  pragma Annotate\n+   --        C  pragma Comment\n+   --        I  pragma Ident\n+   --        T  pragma Title\n+   --        S  pragma Subtitle\n+\n+   --      <sloc> is the source location of the pragma in line:col format\n+\n+   --      Successive entries record the pragma_argument_associations.\n+\n+   --        If a pragma argument identifier is present, the entry is prefixed\n+   --        with the pragma argument identifier <arg_id> followed by a colon.\n+\n+   --        <arg> represents the pragma argument, and has the following\n+   --        conventions:\n+\n+   --          - identifiers are output verbatim\n+   --          - static string expressions are output as literals encoded as\n+   --            for L lines\n+   --          - static integer expressions are output as decimal literals\n+   --          - any other expression is replaced by the placeholder \"<expr>\"\n+\n    ---------------------\n    -- Reference Lines --\n    ---------------------\n@@ -654,40 +688,6 @@ package Lib.Writ is\n    --  The cross-reference data follows the dependency lines. See the spec of\n    --  Lib.Xref for details on the format of this data.\n \n-   --  --------------\n-   --  -- N  Notes --\n-   --  --------------\n-\n-   --  The note lines record annotations inserted in source code for processing\n-   --  by external tools using pragmas. For each occurrence of any of these\n-   --  pragmas, a line is generated with the following syntax:\n-\n-   --    N <dep>x<sloc> [<arg_id>:]<arg> ...\n-\n-   --  x is one of:\n-   --    A  pragma Annotate\n-   --    C  pragma Comment\n-   --    I  pragma Ident\n-   --    T  pragma Title\n-   --    S  pragma Subtitle\n-\n-   --  <dep>  is the source file containing the pragma by its dependency index\n-   --         (first D line has index 1)\n-   --  <sloc> is the source location of the pragma\n-\n-   --  Successive entries record the pragma_argument_associations.\n-\n-   --  For a named association, the entry is prefixed with the pragma argument\n-   --  identifier <arg_id> followed by a colon.\n-\n-   --  <arg> represents the pragma argument, and has the following conventions:\n-\n-   --   - identifiers are output verbatim\n-   --   - static string expressions are output as literals encoded as for\n-   --       L lines\n-   --   - static integer expressions are output as decimal literals\n-   --   - any other expression is replaced by the placeholder \"<expr>\"\n-\n    ---------------------------------\n    -- Source Coverage Obligations --\n    ---------------------------------"}, {"sha": "940527fc64d21a9bca2a45cd69f6561ed61e91f4", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -858,6 +858,7 @@ package body Lib is\n    procedure Initialize is\n    begin\n       Linker_Option_Lines.Init;\n+      Notes.Init;\n       Load_Stack.Init;\n       Units.Init;\n       Compilation_Switches.Init;\n@@ -984,11 +985,18 @@ package body Lib is\n \n    procedure Store_Linker_Option_String (S : String_Id) is\n    begin\n-      Linker_Option_Lines.Increment_Last;\n-      Linker_Option_Lines.Table (Linker_Option_Lines.Last) :=\n-        (Option => S, Unit => Current_Sem_Unit);\n+      Linker_Option_Lines.Append ((Option => S, Unit => Current_Sem_Unit));\n    end Store_Linker_Option_String;\n \n+   ----------------\n+   -- Store_Note --\n+   ----------------\n+\n+   procedure Store_Note (N : Node_Id) is\n+   begin\n+      Notes.Append ((Pragma_Node => N, Unit => Current_Sem_Unit));\n+   end Store_Note;\n+\n    -------------------------------\n    -- Synchronize_Serial_Number --\n    -------------------------------"}, {"sha": "4a956b5118f8aa423d3766d3f3994f6b4c6d5e21", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -574,6 +574,10 @@ package Lib is\n    --  This procedure is called to register the string from a pragma\n    --  Linker_Option. The argument is the Id of the string to register.\n \n+   procedure Store_Note (N : Node_Id);\n+   --  This procedure is called to register a pragma N for which a notes\n+   --  entry is required.\n+\n    procedure Initialize;\n    --  Initialize internal tables\n \n@@ -733,6 +737,21 @@ private\n      Table_Increment      => Alloc.Linker_Option_Lines_Increment,\n      Table_Name           => \"Linker_Option_Lines\");\n \n+   --  The following table stores references to pragmas that generate Notes\n+\n+   type Notes_Entry is record\n+      Pragma_Node : Node_Id;\n+      Unit        : Unit_Number_Type;\n+   end record;\n+\n+   package Notes is new Table.Table (\n+     Table_Component_Type => Notes_Entry,\n+     Table_Index_Type     => Integer,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => Alloc.Notes_Initial,\n+     Table_Increment      => Alloc.Notes_Increment,\n+     Table_Name           => \"Notes\");\n+\n    --  The following table records the compilation switches used to compile\n    --  the main unit. The table includes only switches. It excludes -o\n    --  switches as well as artifacts of the gcc/gnat1 interface such as"}, {"sha": "065be11833a099dc7c30c1cb7d9421ea9426674b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eaa7cdf7da806ba900237e34eb11fd580039da3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7eaa7cdf7da806ba900237e34eb11fd580039da3", "patch": "@@ -376,10 +376,6 @@ package body Sem_Prag is\n       --  Any_Integer is OK). If not, given error and raise Pragma_Exit. If\n       --  Typ is left Empty, then any static expression is allowed.\n \n-      procedure Check_Arg_Is_String_Literal (Arg : Node_Id);\n-      --  Check the specified argument Arg to make sure that it is a string\n-      --  literal. If not give error and raise Pragma_Exit\n-\n       procedure Check_Arg_Is_Task_Dispatching_Policy (Arg : Node_Id);\n       --  Check the specified argument Arg to make sure that it is a valid task\n       --  dispatching policy name. If not give error and raise Pragma_Exit.\n@@ -1014,19 +1010,6 @@ package body Sem_Prag is\n          end if;\n       end Check_Arg_Is_Static_Expression;\n \n-      ---------------------------------\n-      -- Check_Arg_Is_String_Literal --\n-      ---------------------------------\n-\n-      procedure Check_Arg_Is_String_Literal (Arg : Node_Id) is\n-         Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n-      begin\n-         if Nkind (Argx) /= N_String_Literal then\n-            Error_Pragma_Arg\n-              (\"argument for pragma% must be string literal\", Argx);\n-         end if;\n-      end Check_Arg_Is_String_Literal;\n-\n       ------------------------------------------\n       -- Check_Arg_Is_Task_Dispatching_Policy --\n       ------------------------------------------\n@@ -5244,6 +5227,8 @@ package body Sem_Prag is\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n             Check_Arg_Is_Identifier (Arg1);\n+            Check_No_Identifiers;\n+            Store_Note (N);\n \n             declare\n                Arg : Node_Id;\n@@ -7573,6 +7558,7 @@ package body Sem_Prag is\n             Check_Arg_Count (1);\n             Check_No_Identifiers;\n             Check_Arg_Is_Static_Expression (Arg1, Standard_String);\n+            Store_Note (N);\n \n             --  For pragma Ident, preserve DEC compatibility by requiring the\n             --  pragma to appear in a declarative part or package spec.\n@@ -11184,7 +11170,8 @@ package body Sem_Prag is\n             GNAT_Pragma;\n             Check_Arg_Count (1);\n             Check_Optional_Identifier (Arg1, Name_Subtitle);\n-            Check_Arg_Is_String_Literal (Arg1);\n+            Check_Arg_Is_Static_Expression (Arg1, Standard_String);\n+            Store_Note (N);\n \n          --------------\n          -- Suppress --\n@@ -11562,10 +11549,11 @@ package body Sem_Prag is\n          begin\n             GNAT_Pragma;\n             Gather_Associations (Names, Args);\n+            Store_Note (N);\n \n             for J in 1 .. 2 loop\n                if Present (Args (J)) then\n-                  Check_Arg_Is_String_Literal (Args (J));\n+                  Check_Arg_Is_Static_Expression (Args (J), Standard_String);\n                end if;\n             end loop;\n          end Title;"}]}