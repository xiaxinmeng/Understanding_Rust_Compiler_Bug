{"sha": "fb08a53b2eb01cc06d66f479c865aca55c91fd26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwOGE1M2IyZWIwMWNjMDZkNjZmNDc5Yzg2NWFjYTU1YzkxZmQyNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-29T13:53:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-29T13:53:10Z"}, "message": "tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Bail out early for too large objects.\n\n2019-11-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Bail\n\tout early for too large objects.\n\nFrom-SVN: r278844", "tree": {"sha": "0a131efde1d587e4745b19ebaa460f8b646630aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a131efde1d587e4745b19ebaa460f8b646630aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb08a53b2eb01cc06d66f479c865aca55c91fd26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb08a53b2eb01cc06d66f479c865aca55c91fd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb08a53b2eb01cc06d66f479c865aca55c91fd26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb08a53b2eb01cc06d66f479c865aca55c91fd26/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af814dfa9b6e3e598bbcf2ee4615aae0e886fef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af814dfa9b6e3e598bbcf2ee4615aae0e886fef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af814dfa9b6e3e598bbcf2ee4615aae0e886fef4"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "76fafa832e78bf2dba98611a9ed34e8773e8b42f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb08a53b2eb01cc06d66f479c865aca55c91fd26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb08a53b2eb01cc06d66f479c865aca55c91fd26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb08a53b2eb01cc06d66f479c865aca55c91fd26", "patch": "@@ -1,3 +1,8 @@\n+2019-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Bail\n+\tout early for too large objects.\n+\n 2019-11-29  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/92476"}, {"sha": "8a7e0475ff8307430994d1ab452b5e008c706634", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb08a53b2eb01cc06d66f479c865aca55c91fd26/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb08a53b2eb01cc06d66f479c865aca55c91fd26/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=fb08a53b2eb01cc06d66f479c865aca55c91fd26", "patch": "@@ -1753,6 +1753,12 @@ void *\n vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n \t\t\t\t   HOST_WIDE_INT maxsizei)\n {\n+  const HOST_WIDE_INT bufsize = 64;\n+  /* We're using a fixed buffer for encoding so fail early if the object\n+     we want to interpret is bigger.  */\n+  if (maxsizei > bufsize * BITS_PER_UNIT)\n+    return (void *)-1;\n+\n   if (partial_defs.is_empty ())\n     {\n       partial_defs.safe_push (pd);\n@@ -1823,16 +1829,17 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n   /* Now simply native encode all partial defs in reverse order.  */\n   unsigned ndefs = partial_defs.length ();\n   /* We support up to 512-bit values (for V8DFmode).  */\n-  unsigned char buffer[64];\n+  unsigned char buffer[bufsize];\n   int len;\n \n   while (!partial_defs.is_empty ())\n     {\n       pd_data pd = partial_defs.pop ();\n+      gcc_checking_assert (pd.offset < bufsize);\n       if (TREE_CODE (pd.rhs) == CONSTRUCTOR)\n \t/* Empty CONSTRUCTOR.  */\n \tmemset (buffer + MAX (0, pd.offset),\n-\t\t0, MIN ((HOST_WIDE_INT)sizeof (buffer) - MAX (0, pd.offset),\n+\t\t0, MIN (bufsize - MAX (0, pd.offset),\n \t\t\tpd.size + MIN (0, pd.offset)));\n       else\n \t{\n@@ -1847,7 +1854,7 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n \t      pad = GET_MODE_SIZE (mode) - pd.size;\n \t    }\n \t  len = native_encode_expr (pd.rhs, buffer + MAX (0, pd.offset),\n-\t\t\t\t    sizeof (buffer) - MAX (0, pd.offset),\n+\t\t\t\t    bufsize - MAX (0, pd.offset),\n \t\t\t\t    MAX (0, -pd.offset) + pad);\n \t  if (len <= 0 || len < (pd.size - MAX (0, -pd.offset)))\n \t    {"}]}