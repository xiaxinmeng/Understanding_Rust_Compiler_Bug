{"sha": "c5395d88dfa2123ca5155008c8c8339ded98fd32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzOTVkODhkZmEyMTIzY2E1MTU1MDA4YzhjODMzOWRlZDk4ZmQzMg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2020-11-09T15:34:13Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2020-11-09T15:42:00Z"}, "message": "arc: Improve/add instruction patterns to better use MAC instructions.\n\nARC MYP7+ instructions adds MAC instructions for either vector and\nscalar data types. This patch adds a madd pattern for 16it datum using\nthe 32bit MAC instruction, and dot_prod patterns for v4hi vector\ntypes. The 64bit moves are also upgraded by using vadd2 instuction.\n\n2020-11-09  Claudiu Zissulescu  <claziss@synopsys.com>\n\ngcc/\n\n\t* config/arc/arc.c (arc_split_move): Recognize vadd2 instructions.\n\t* config/arc/arc.md (movdi_insn): Update pattern to use vadd2\n\tinstructions.\n\t(movdf_insn): Likewise.\n\t(maddhisi4): New pattern.\n\t(umaddhisi4): Likewise.\n\t* config/arc/simdext.md (mov<mode>_int): Update pattern to use\n\tvadd2.\n\t(sdot_prodv4hi): New pattern.\n\t(udot_prodv4hi): Likewise.\n\t(arc_vec_<V_US>mac_hi_v4hi): Update/renamed to\n\tarc_vec_<V_US>mac_v2hiv2si.\n\t(arc_vec_<V_US>mac_v2hiv2si_zero): New pattern.\n\t* config/arc/constraints.md (Ral): Accumulator register\n\tconstraint.\n\nSigned-off-by: Claudiu Zissulescu <claziss@synopsys.com>", "tree": {"sha": "83d0dedc2bf2507dbc130b008a6594fab0510128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d0dedc2bf2507dbc130b008a6594fab0510128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5395d88dfa2123ca5155008c8c8339ded98fd32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5395d88dfa2123ca5155008c8c8339ded98fd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5395d88dfa2123ca5155008c8c8339ded98fd32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5395d88dfa2123ca5155008c8c8339ded98fd32/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5cff0db6e3a733e470ffc36a3e14c55465bdca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cff0db6e3a733e470ffc36a3e14c55465bdca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cff0db6e3a733e470ffc36a3e14c55465bdca2"}], "stats": {"total": 174, "additions": 147, "deletions": 27}, "files": [{"sha": "2a7b1fb48bc4bd4b523215a7f19fedc2c0b3b186", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c5395d88dfa2123ca5155008c8c8339ded98fd32", "patch": "@@ -10154,6 +10154,14 @@ arc_split_move (rtx *operands)\n       return;\n     }\n \n+  if (TARGET_PLUS_QMACW\n+      && even_register_operand (operands[0], mode)\n+      && even_register_operand (operands[1], mode))\n+    {\n+      emit_move_insn (operands[0], operands[1]);\n+      return;\n+    }\n+\n   if (TARGET_PLUS_QMACW\n       && GET_CODE (operands[1]) == CONST_VECTOR)\n     {"}, {"sha": "266b7ce7666cf39b28e9aa9b27ee0c8ddeeac036", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c5395d88dfa2123ca5155008c8c8339ded98fd32", "patch": "@@ -1322,8 +1322,8 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   \")\n \n (define_insn_and_split \"*movdi_insn\"\n-  [(set (match_operand:DI 0 \"move_dest_operand\"      \"=w, w,r,   m\")\n-\t(match_operand:DI 1 \"move_double_src_operand\" \"c,Hi,m,cCm3\"))]\n+  [(set (match_operand:DI 0 \"move_dest_operand\"      \"=r, r,r,   m\")\n+\t(match_operand:DI 1 \"move_double_src_operand\" \"r,Hi,m,rCm3\"))]\n   \"register_operand (operands[0], DImode)\n    || register_operand (operands[1], DImode)\n    || (satisfies_constraint_Cm3 (operands[1])\n@@ -1335,6 +1335,13 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n     default:\n       return \\\"#\\\";\n \n+    case 0:\n+    if (TARGET_PLUS_QMACW\n+\t&& even_register_operand (operands[0], DImode)\n+\t&& even_register_operand (operands[1], DImode))\n+      return \\\"vadd2\\\\t%0,%1,0\\\";\n+    return \\\"#\\\";\n+\n     case 2:\n     if (TARGET_LL64\n         && memory_operand (operands[1], DImode)\n@@ -1351,7 +1358,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n     return \\\"#\\\";\n     }\n }\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(const_int 0)]\n   {\n    arc_split_move (operands);\n@@ -1397,15 +1404,24 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   \"if (prepare_move_operands (operands, DFmode)) DONE;\")\n \n (define_insn_and_split \"*movdf_insn\"\n-  [(set (match_operand:DF 0 \"move_dest_operand\"      \"=D,r,c,c,r,m\")\n-\t(match_operand:DF 1 \"move_double_src_operand\" \"r,D,c,E,m,c\"))]\n-  \"register_operand (operands[0], DFmode) || register_operand (operands[1], DFmode)\"\n+  [(set (match_operand:DF 0 \"move_dest_operand\"      \"=D,r,r,r,r,m\")\n+\t(match_operand:DF 1 \"move_double_src_operand\" \"r,D,r,E,m,r\"))]\n+  \"register_operand (operands[0], DFmode)\n+   || register_operand (operands[1], DFmode)\"\n   \"*\n {\n  switch (which_alternative)\n    {\n     default:\n       return \\\"#\\\";\n+\n+    case 2:\n+    if (TARGET_PLUS_QMACW\n+\t&& even_register_operand (operands[0], DFmode)\n+\t&& even_register_operand (operands[1], DFmode))\n+      return \\\"vadd2\\\\t%0,%1,0\\\";\n+    return \\\"#\\\";\n+\n     case 4:\n     if (TARGET_LL64\n \t&& ((even_register_operand (operands[0], DFmode)\n@@ -6126,6 +6142,49 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   [(set_attr \"length\" \"0\")])\n \n ;; MAC and DMPY instructions\n+\n+; Use MAC instruction to emulate 16bit mac.\n+(define_expand \"maddhisi4\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:HI 1 \"register_operand\" \"\")\n+   (match_operand:HI 2 \"extend_operand\"   \"\")\n+   (match_operand:SI 3 \"register_operand\" \"\")]\n+  \"TARGET_PLUS_DMPY\"\n+  \"{\n+   rtx acc_reg = gen_rtx_REG (DImode, ACC_REG_FIRST);\n+   rtx tmp1 = gen_reg_rtx (SImode);\n+   rtx tmp2 = gen_reg_rtx (SImode);\n+   rtx accl = gen_lowpart (SImode, acc_reg);\n+\n+   emit_move_insn (accl, operands[3]);\n+   emit_insn (gen_rtx_SET (tmp1, gen_rtx_SIGN_EXTEND (SImode, operands[1])));\n+   emit_insn (gen_rtx_SET (tmp2, gen_rtx_SIGN_EXTEND (SImode, operands[2])));\n+   emit_insn (gen_mac (tmp1, tmp2));\n+   emit_move_insn (operands[0], accl);\n+   DONE;\n+  }\")\n+\n+; The same for the unsigned variant, but using MACU instruction.\n+(define_expand \"umaddhisi4\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:HI 1 \"register_operand\" \"\")\n+   (match_operand:HI 2 \"extend_operand\"   \"\")\n+   (match_operand:SI 3 \"register_operand\" \"\")]\n+  \"TARGET_PLUS_DMPY\"\n+  \"{\n+   rtx acc_reg = gen_rtx_REG (DImode, ACC_REG_FIRST);\n+   rtx tmp1 = gen_reg_rtx (SImode);\n+   rtx tmp2 = gen_reg_rtx (SImode);\n+   rtx accl = gen_lowpart (SImode, acc_reg);\n+\n+   emit_move_insn (accl, operands[3]);\n+   emit_insn (gen_rtx_SET (tmp1, gen_rtx_ZERO_EXTEND (SImode, operands[1])));\n+   emit_insn (gen_rtx_SET (tmp2, gen_rtx_ZERO_EXTEND (SImode, operands[2])));\n+   emit_insn (gen_macu (tmp1, tmp2));\n+   emit_move_insn (operands[0], accl);\n+   DONE;\n+  }\")\n+\n (define_expand \"maddsidi4\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:SI 1 \"register_operand\" \"\")"}, {"sha": "a2a8e84ac45f567644df6e8e1caed0cbd764d1bc", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=c5395d88dfa2123ca5155008c8c8339ded98fd32", "patch": "@@ -493,6 +493,11 @@\n   Condition Codes\"\n   (and (match_code \"reg\") (match_test \"cc_register (op, VOIDmode)\")))\n \n+(define_constraint \"Ral\"\n+  \"@internal\n+   Accumulator register @code{ACCL} - do not reload into its class\"\n+  (and (match_code \"reg\")\n+       (match_test \"REGNO (op) == ACCL_REGNO\")))\n \n (define_constraint \"Q\"\n   \"@internal"}, {"sha": "d2fc309ea876f657f328a471df0c60680c224ebd", "filename": "gcc/config/arc/simdext.md", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Fsimdext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5395d88dfa2123ca5155008c8c8339ded98fd32/gcc%2Fconfig%2Farc%2Fsimdext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fsimdext.md?ref=c5395d88dfa2123ca5155008c8c8339ded98fd32", "patch": "@@ -1400,8 +1400,7 @@\n (define_insn_and_split \"*mov<mode>_insn\"\n   [(set (match_operand:VWH 0 \"move_dest_operand\" \"=r,r,r,m\")\n \t(match_operand:VWH 1 \"general_operand\"    \"i,r,m,r\"))]\n-  \"TARGET_PLUS_QMACW\n-   && (register_operand (operands[0], <MODE>mode)\n+  \"(register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n   \"*\n {\n@@ -1411,7 +1410,11 @@\n        return \\\"#\\\";\n \n      case 1:\n-       return \\\"vadd2 %0, %1, 0\\\";\n+       if (TARGET_PLUS_QMACW\n+           && even_register_operand (operands[0], <MODE>mode)\n+\t   && even_register_operand (operands[1], <MODE>mode))\n+         return \\\"vadd2\\\\t%0,%1,0\\\";\n+       return \\\"#\\\";\n \n      case 2:\n        if (TARGET_LL64)\n@@ -1430,7 +1433,7 @@\n    arc_split_move (operands);\n    DONE;\n   }\n-  [(set_attr \"type\" \"move,move,load,store\")\n+  [(set_attr \"type\" \"move,multi,load,store\")\n    (set_attr \"predicable\" \"yes,no,no,no\")\n    (set_attr \"iscompact\"  \"false,false,false,false\")\n    ])\n@@ -1612,6 +1615,44 @@\n  DONE;\n })\n \n+(define_expand \"sdot_prodv4hi\"\n+  [(match_operand:V2SI 0 \"register_operand\" \"\")\n+   (match_operand:V4HI 1 \"register_operand\" \"\")\n+   (match_operand:V4HI 2 \"register_operand\" \"\")\n+   (match_operand:V2SI 3 \"register_operand\" \"\")]\n+  \"TARGET_PLUS_MACD\"\n+{\n+ rtx acc_reg  = gen_rtx_REG  (V2SImode, ACC_REG_FIRST);\n+ rtx op1_low  = gen_lowpart  (V2HImode, operands[1]);\n+ rtx op1_high = gen_highpart (V2HImode, operands[1]);\n+ rtx op2_low  = gen_lowpart  (V2HImode, operands[2]);\n+ rtx op2_high = gen_highpart (V2HImode, operands[2]);\n+\n+ emit_move_insn (acc_reg, operands[3]);\n+ emit_insn (gen_arc_vec_smac_v2hiv2si_zero (op1_low, op2_low));\n+ emit_insn (gen_arc_vec_smac_v2hiv2si (operands[0], op1_high, op2_high));\n+ DONE;\n+})\n+\n+(define_expand \"udot_prodv4hi\"\n+  [(match_operand:V2SI 0 \"register_operand\" \"\")\n+   (match_operand:V4HI 1 \"register_operand\" \"\")\n+   (match_operand:V4HI 2 \"register_operand\" \"\")\n+   (match_operand:V2SI 3 \"register_operand\" \"\")]\n+  \"TARGET_PLUS_MACD\"\n+{\n+ rtx acc_reg  = gen_rtx_REG  (V2SImode, ACC_REG_FIRST);\n+ rtx op1_low  = gen_lowpart  (V2HImode, operands[1]);\n+ rtx op1_high = gen_highpart (V2HImode, operands[1]);\n+ rtx op2_low  = gen_lowpart  (V2HImode, operands[2]);\n+ rtx op2_high = gen_highpart (V2HImode, operands[2]);\n+\n+ emit_move_insn (acc_reg, operands[3]);\n+ emit_insn (gen_arc_vec_umac_v2hiv2si_zero (op1_low, op2_low));\n+ emit_insn (gen_arc_vec_umac_v2hiv2si (operands[0], op1_high, op2_high));\n+ DONE;\n+})\n+\n (define_insn \"arc_vec_<V_US>mult_lo_v4hi\"\n  [(set (match_operand:V2SI 0 \"even_register_operand\"                     \"=r,r\")\n        (mult:V2SI (SE:V2SI (vec_select:V2HI\n@@ -1704,30 +1745,37 @@\n   }\n )\n \n-(define_insn \"arc_vec_<V_US>mac_hi_v4hi\"\n- [(set (match_operand:V2SI 0 \"even_register_operand\"                     \"=r,r\")\n+(define_insn \"arc_vec_<V_US>mac_v2hiv2si\"\n+ [(set (match_operand:V2SI 0 \"even_register_operand\"                \"=r,Ral,r\")\n        (plus:V2SI\n-\t(reg:V2SI ARCV2_ACC)\n-\t(mult:V2SI (SE:V2SI (vec_select:V2HI\n-\t\t\t     (match_operand:V4HI 1 \"even_register_operand\" \"0,r\")\n-\t\t\t     (parallel [(const_int 2) (const_int 3)])))\n-\t\t   (SE:V2SI (vec_select:V2HI\n-\t\t\t     (match_operand:V4HI 2 \"even_register_operand\" \"r,r\")\n-\t\t\t     (parallel [(const_int 2) (const_int 3)]))))))\n+\t(mult:V2SI (SE:V2SI (match_operand:V2HI 1 \"register_operand\" \"0,  r,r\"))\n+\t\t   (SE:V2SI (match_operand:V2HI 2 \"register_operand\" \"r,  r,r\")))\n+\t(reg:V2SI ARCV2_ACC)))\n   (set (reg:V2SI ARCV2_ACC)\n        (plus:V2SI\n-\t(reg:V2SI ARCV2_ACC)\n-\t(mult:V2SI (SE:V2SI (vec_select:V2HI (match_dup 1)\n-\t\t\t\t\t     (parallel [(const_int 2) (const_int 3)])))\n-\t\t   (SE:V2SI (vec_select:V2HI (match_dup 2)\n-\t\t\t\t\t     (parallel [(const_int 2) (const_int 3)]))))))\n+\t(mult:V2SI (SE:V2SI (match_dup 1))\n+\t\t   (SE:V2SI (match_dup 2)))\n+\t(reg:V2SI ARCV2_ACC)))\n   ]\n   \"TARGET_PLUS_MACD\"\n-  \"vmac2h<V_US_suffix>%? %0, %R1, %R2\"\n+  \"@\n+   vmac2h<V_US_suffix>%?\\\\t%0,%1,%2\n+   vmac2h<V_US_suffix>%?\\\\t0,%1,%2\n+   vmac2h<V_US_suffix>%?\\\\t%0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multi\")\n-   (set_attr \"predicable\" \"yes,no\")\n-   (set_attr \"cond\" \"canuse,nocond\")])\n+   (set_attr \"predicable\" \"yes,no,no\")])\n+\n+(define_insn \"arc_vec_<V_US>mac_v2hiv2si_zero\"\n+ [(set (reg:V2SI ARCV2_ACC)\n+       (plus:V2SI\n+\t(mult:V2SI (SE:V2SI (match_operand:V2HI 0 \"register_operand\" \"r\"))\n+\t\t   (SE:V2SI (match_operand:V2HI 1 \"register_operand\" \"r\")))\n+\t(reg:V2SI ARCV2_ACC)))]\n+  \"TARGET_PLUS_MACD\"\n+  \"vmac2h<V_US_suffix>%?\\\\t0,%0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multi\")])\n \n ;; Builtins\n (define_insn \"dmach\""}]}