{"sha": "35a335a159216548fc77263ac5df71ff29d3f448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhMzM1YTE1OTIxNjU0OGZjNzcyNjNhYzVkZjcxZmYyOWQzZjQ0OA==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-06-25T18:32:13Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-06-25T18:32:13Z"}, "message": "PR fortran/95826 - Buffer overflows with PDTs and long symbols\n\nWith PDTs (parameterized derived types), name mangling results in variably\nlong internal symbols.  Use a dynamic buffer instead of a fixed-size one.\n\ngcc/fortran/\n\tPR fortran/95826\n\t* decl.c (gfc_match_decl_type_spec): Replace a fixed size\n\tbuffer by a pointer and reallocate if necessary.", "tree": {"sha": "70460bb97d27ffe4ab264f6024bb0e4ff402c6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70460bb97d27ffe4ab264f6024bb0e4ff402c6c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35a335a159216548fc77263ac5df71ff29d3f448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a335a159216548fc77263ac5df71ff29d3f448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a335a159216548fc77263ac5df71ff29d3f448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a335a159216548fc77263ac5df71ff29d3f448/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f466326ca08d7dac58eb34ffdd6bf80428c5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f466326ca08d7dac58eb34ffdd6bf80428c5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f466326ca08d7dac58eb34ffdd6bf80428c5ab"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "ac1f63f66e0e844d5341b094bcc5830d9cca1b6c", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a335a159216548fc77263ac5df71ff29d3f448/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a335a159216548fc77263ac5df71ff29d3f448/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=35a335a159216548fc77263ac5df71ff29d3f448", "patch": "@@ -4095,7 +4095,7 @@ match\n gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n {\n   /* Provide sufficient space to hold \"pdtsymbol\".  */\n-  char name[GFC_MAX_SYMBOL_LEN + 1 + 3];\n+  char *name = XALLOCAVEC (char, GFC_MAX_SYMBOL_LEN + 1);\n   gfc_symbol *sym, *dt_sym;\n   match m;\n   char c;\n@@ -4286,8 +4286,10 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n \t  gcc_assert (!sym->attr.pdt_template && sym->attr.pdt_type);\n \t  ts->u.derived = sym;\n \t  const char* lower = gfc_dt_lower_string (sym->name);\n-\t  size_t len = strnlen (lower, sizeof (name));\n-\t  gcc_assert (len < sizeof (name));\n+\t  size_t len = strlen (lower);\n+\t  /* Reallocate with sufficient size.  */\n+\t  if (len > GFC_MAX_SYMBOL_LEN)\n+\t    name = XALLOCAVEC (char, len + 1);\n \t  memcpy (name, lower, len);\n \t  name[len] = '\\0';\n \t}"}, {"sha": "8de04e65df0f00507f6fa05b46fb7693fb3a8be9", "filename": "gcc/testsuite/gfortran.dg/pr95826.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a335a159216548fc77263ac5df71ff29d3f448/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95826.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a335a159216548fc77263ac5df71ff29d3f448/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95826.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95826.f90?ref=35a335a159216548fc77263ac5df71ff29d3f448", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-fsecond-underscore\" }\n+! PR fortran/95826 - ICE in gfc_match_decl_type_spec, at fortran/decl.c:4290\n+\n+program p\n+  type t2345678901234567890123456789012345678901234567890123456789_123 &\n+      (a2345678901234567890123456789012345678901234567890123456789_123, &\n+       b2345678901234567890123456789012345678901234567890123456789_123)\n+     integer, kind :: &\n+       a2345678901234567890123456789012345678901234567890123456789_123\n+     integer, len :: &\n+       b2345678901234567890123456789012345678901234567890123456789_123\n+  end type\n+  integer, parameter :: &\n+       n2345678901234567890123456789012345678901234567890123456789_123 = 16\n+  type(t2345678901234567890123456789012345678901234567890123456789_123 &\n+      (n2345678901234567890123456789012345678901234567890123456789_123,:)), &\n+       allocatable :: &\n+       x2345678901234567890123456789012345678901234567890123456789_123\n+end"}]}