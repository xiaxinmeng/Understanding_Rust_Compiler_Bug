{"sha": "e941124721742b4972785960645a57178fabb71c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0MTEyNDcyMTc0MmI0OTcyNzg1OTYwNjQ1YTU3MTc4ZmFiYjcxYw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-11-03T17:17:07Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-11-03T17:17:07Z"}, "message": "re PR bootstrap/50857 (The compiler is built with exceptions and RTTI enabled)\n\nlibcpp/\n\tPR bootstrap/50857\n\t* configure.ac: Check for -fno-exceptions -fno-rtti.\n\t* configure: Regenerate.\n\t* Makefile.in (NOEXCEPTION_FLAGS): New flag.\n\t(ALL_CXXFLAGS): Use it.\n\ngcc/\n\tPR bootstrap/50857\n\t* configure.ac: Check for -fno-exceptions -fno-rtti.\n\t* configure: Regenerate.\n\t* Makefile.in (NOEXCEPTION_FLAGS): New flag.\n\t(ALL_CXXFLAGS): Use it.\n\nFrom-SVN: r180833", "tree": {"sha": "4343503ebcbfe34ff7e06478572708b57fff1bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4343503ebcbfe34ff7e06478572708b57fff1bf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e941124721742b4972785960645a57178fabb71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e941124721742b4972785960645a57178fabb71c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e941124721742b4972785960645a57178fabb71c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e941124721742b4972785960645a57178fabb71c/comments", "author": null, "committer": null, "parents": [{"sha": "af8d2409beff727cf7d29025c09abded080d4cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8d2409beff727cf7d29025c09abded080d4cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af8d2409beff727cf7d29025c09abded080d4cf7"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "086fcaa9a844866b5a3e2715ff27be1a3a791faf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -1,3 +1,11 @@\n+2011-11-03  Michael Matz  <matz@suse.de>\n+\n+\tPR bootstrap/50857\n+\t* configure.ac: Check for -fno-exceptions -fno-rtti.\n+\t* configure: Regenerate.\n+\t* Makefile.in (NOEXCEPTION_FLAGS): New flag.\n+\t(ALL_CXXFLAGS): Use it.\n+\n 2011-11-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md: Use {} for multi-line preparation statements.\n@@ -45,7 +53,7 @@\n \tknown_current_type and multiple_types_encountered.\n \t(extr_type_from_vtbl_ptr_store): New function.\n \t(check_stmt_for_type_change): Use it, set multiple_types_encountered if\n-        the result is different from the previous one.\n+\tthe result is different from the previous one.\n \t(detect_type_change): Renamed to detect_type_change_1. New parameter\n \tcomp_type.  Set up new fields in tci, build known type jump\n \tfunctions if the new type can be identified."}, {"sha": "0ca81ad3072fa20c1f7a15ababb6cbddf277bc56", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -164,6 +164,8 @@ C_STRICT_WARN = @c_strict_warn@\n # \"extern\" tags in header files.\n NOCOMMON_FLAG = @nocommon_flag@\n \n+NOEXCEPTION_FLAGS = @noexception_flags@\n+\n # This is set by --disable-maintainer-mode (default) to \"#\"\n # FIXME: 'MAINT' will always be set to an empty string, no matter if\n # --disable-maintainer-mode is used or not.  This is because the\n@@ -974,7 +976,7 @@ ALL_CFLAGS = $(T_CFLAGS) $(CFLAGS-$@) \\\n \n # The C++ version.\n ALL_CXXFLAGS = $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS) $(INTERNAL_CFLAGS) \\\n-  $(COVERAGE_FLAGS) $(WARN_CXXFLAGS) @DEFS@\n+  $(COVERAGE_FLAGS) $(NOEXCEPTION_FLAGS) $(WARN_CXXFLAGS) @DEFS@\n \n # Likewise.  Put INCLUDES at the beginning: this way, if some autoconf macro\n # puts -I options in CPPFLAGS, our include files in the srcdir will always"}, {"sha": "99334ce44fd1e45bae963ec47307e2b4a02d5a9a", "filename": "gcc/configure", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -771,6 +771,7 @@ valgrind_path_defines\n valgrind_path\n TREEBROWSER\n nocommon_flag\n+noexception_flags\n warn_cxxflags\n warn_cflags\n c_strict_warn\n@@ -6613,6 +6614,47 @@ fi\n \n \n \n+# Disable exceptions and RTTI if building with g++\n+noexception_flags=\n+save_CFLAGS=\"$CFLAGS\"\n+for option in -fno-exceptions -fno-rtti; do\n+  as_acx_Woption=`$as_echo \"acx_cv_prog_cc_warning_$option\" | $as_tr_sh`\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $CC supports $option\" >&5\n+$as_echo_n \"checking whether $CC supports $option... \" >&6; }\n+if { as_var=$as_acx_Woption; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  CFLAGS=\"$option\"\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$as_acx_Woption=yes\"\n+else\n+  eval \"$as_acx_Woption=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+eval ac_res=\\$$as_acx_Woption\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  if test `eval 'as_val=${'$as_acx_Woption'};$as_echo \"$as_val\"'` = yes; then :\n+  noexception_flags=\"$noexception_flags${noexception_flags:+ }$option\"\n+fi\n+  done\n+CFLAGS=\"$save_CFLAGS\"\n+\n+\n # Enable expensive internal checks\n is_release=\n if test x\"`cat $srcdir/DEV-PHASE`\" != xexperimental; then\n@@ -18045,7 +18087,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18047 \"configure\"\n+#line 18090 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18151,7 +18193,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18153 \"configure\"\n+#line 18196 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "c7654259c4ae6e1b7b0df445656eaa7c2fbcb4c3", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -358,6 +358,10 @@ fi\n AC_SUBST(warn_cflags)\n AC_SUBST(warn_cxxflags)\n \n+# Disable exceptions and RTTI if building with g++\n+ACX_PROG_CC_WARNING_OPTS(\n+\tm4_quote(m4_do([-fno-exceptions -fno-rtti])), [noexception_flags])\n+\t\n # Enable expensive internal checks\n is_release=\n if test x\"`cat $srcdir/DEV-PHASE`\" != xexperimental; then"}, {"sha": "8f7d494fc91e9e5de56eedf65ab577c0e6f0cd1f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -1,3 +1,11 @@\n+2011-11-03  Michael Matz  <matz@suse.de>\n+\n+\tPR bootstrap/50857\n+\t* configure.ac: Check for -fno-exceptions -fno-rtti.\n+\t* configure: Regenerate.\n+\t* Makefile.in (NOEXCEPTION_FLAGS): New flag.\n+\t(ALL_CXXFLAGS): Use it.\n+\n 2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* internal.h (uxstrdup, ustrchr): Return const unsigned char *."}, {"sha": "d6df46d62c9109a7058f4311f9af99252478c856", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -56,6 +56,7 @@ XGETTEXT = @XGETTEXT@\n CCDEPMODE = @CCDEPMODE@\n CXXDEPMODE = @CXXDEPMODE@\n DEPDIR = @DEPDIR@\n+NOEXCEPTION_FLAGS = @noexception_flags@\n \n datarootdir = @datarootdir@\n datadir = @datadir@\n@@ -72,7 +73,8 @@ INCLUDES = -I$(srcdir) -I. -I$(srcdir)/../include @INCINTL@ \\\n \t-I$(srcdir)/include\n \n ALL_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(INCLUDES) $(CPPFLAGS)\n-ALL_CXXFLAGS = $(CXXFLAGS) $(WARN_CXXFLAGS) $(INCLUDES) $(CPPFLAGS)\n+ALL_CXXFLAGS = $(CXXFLAGS) $(WARN_CXXFLAGS) $(NOEXCEPTION_FLAGS) $(INCLUDES) \\\n+\t$(CPPFLAGS)\n \n # The name of the compiler to use.\n ENABLE_BUILD_WITH_CXX = @ENABLE_BUILD_WITH_CXX@"}, {"sha": "803daae2b2e41f6860d9e3c8db6cd0945ef55c4e", "filename": "libcpp/configure", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -616,6 +616,7 @@ CCDEPMODE\n DEPDIR\n am__leading_dot\n WERROR\n+noexception_flags\n WARN_PEDANTIC\n c_warn\n warn\n@@ -4802,6 +4803,47 @@ fi\n fi\n \n \n+# Disable exceptions and RTTI if building with g++\n+noexception_flags=\n+save_CFLAGS=\"$CFLAGS\"\n+for option in -fno-exceptions -fno-rtti; do\n+  as_acx_Woption=`$as_echo \"acx_cv_prog_cc_warning_$option\" | $as_tr_sh`\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $CC supports $option\" >&5\n+$as_echo_n \"checking whether $CC supports $option... \" >&6; }\n+if { as_var=$as_acx_Woption; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  CFLAGS=\"$option\"\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$as_acx_Woption=yes\"\n+else\n+  eval \"$as_acx_Woption=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+eval ac_res=\\$$as_acx_Woption\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  if test `eval 'as_val=${'$as_acx_Woption'};$as_echo \"$as_val\"'` = yes; then :\n+  noexception_flags=\"$noexception_flags${noexception_flags:+ }$option\"\n+fi\n+  done\n+CFLAGS=\"$save_CFLAGS\"\n+\n+\n # Only enable with --enable-werror-always until existing warnings are\n # corrected.\n WERROR="}, {"sha": "83d5bb6e827bbd1ce99dff3a458e7d05bf634a27", "filename": "libcpp/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e941124721742b4972785960645a57178fabb71c/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e941124721742b4972785960645a57178fabb71c/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=e941124721742b4972785960645a57178fabb71c", "patch": "@@ -39,6 +39,10 @@ ACX_PROG_CC_WARNING_OPTS([-Wstrict-prototypes -Wmissing-prototypes \\\n \t\t\t  -Wold-style-definition -Wc++-compat], [c_warn])\n ACX_PROG_CC_WARNING_ALMOST_PEDANTIC([-Wno-long-long])\n \n+# Disable exceptions and RTTI if building with g++\n+ACX_PROG_CC_WARNING_OPTS(\n+       m4_quote(m4_do([-fno-exceptions -fno-rtti])), [noexception_flags])\n+\n # Only enable with --enable-werror-always until existing warnings are\n # corrected.\n ACX_PROG_CC_WARNINGS_ARE_ERRORS([manual])"}]}