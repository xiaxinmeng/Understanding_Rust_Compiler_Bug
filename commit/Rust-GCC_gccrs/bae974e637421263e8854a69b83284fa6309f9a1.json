{"sha": "bae974e637421263e8854a69b83284fa6309f9a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlOTc0ZTYzNzQyMTI2M2U4ODU0YTY5YjgzMjg0ZmE2MzA5ZjlhMQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-29T08:10:06Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-30T12:36:56Z"}, "message": "[nvptx] Add type arg to TARGET_LIBC_HAS_FUNCTION\n\nGCC has a target hook TARGET_LIBC_HAS_FUNCTION, which tells the compiler\nwhich functions it can expect to be present in libc.\n\nThe default target hook does not include the sincos functions.\n\nThe nvptx port of newlib does include sincos and sincosf, but not sincosl.\n\nThe target hook TARGET_LIBC_HAS_FUNCTION does not distinguish between sincos,\nsincosf and sincosl, so if we enable it for the sincos functions, then for\ntest.c:\n...\nlong double x, a, b;\nint main (void) {\n  x = 0.5;\n  a = sinl (x);\n  b = cosl (x);\n  printf (\"a: %f\\n\", (double)a);\n  printf (\"b: %f\\n\", (double)b);\n  return 0;\n}\n...\nwe introduce a regression:\n...\n$ gcc test.c -lm -O2\nunresolved symbol sincosl\ncollect2: error: ld returned 1 exit status\n...\n\nAdd a type argument to target hook TARGET_LIBC_HAS_FUNCTION_TYPE, and use it\nin nvptx_libc_has_function_type to enable sincos and sincosf, but not sincosl.\n\nBuild and reg-tested on x86_64-linux.\n\nBuild and tested on nvptx.\n\ngcc/ChangeLog:\n\n2020-09-28  Tobias Burnus  <tobias@codesourcery.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\n\t* builtins.c (expand_builtin_cexpi, fold_builtin_sincos): Update\n\ttargetm.libc_has_function call.\n\t* builtins.def (DEF_C94_BUILTIN, DEF_C99_BUILTIN, DEF_C11_BUILTIN):\n\t(DEF_C2X_BUILTIN, DEF_C99_COMPL_BUILTIN, DEF_C99_C90RES_BUILTIN):\n\tSame.\n\t* config/darwin-protos.h (darwin_libc_has_function): Update prototype.\n\t* config/darwin.c (darwin_libc_has_function): Add arg.\n\t* config/linux-protos.h (linux_libc_has_function): Update prototype.\n\t* config/linux.c (linux_libc_has_function): Add arg.\n\t* config/i386/i386.c (ix86_libc_has_function): Update\n\ttargetm.libc_has_function call.\n\t* config/nvptx/nvptx.c (nvptx_libc_has_function): New function.\n\t(TARGET_LIBC_HAS_FUNCTION): Redefine to nvptx_libc_has_function.\n\t* convert.c (convert_to_integer_1): Update targetm.libc_has_function\n\tcall.\n\t* match.pd: Same.\n\t* target.def (libc_has_function): Add arg.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.c (default_libc_has_function, gnu_libc_has_function)\n\t(no_c99_libc_has_function): Add arg.\n\t* targhooks.h (default_libc_has_function, no_c99_libc_has_function)\n\t(gnu_libc_has_function): Update prototype.\n\t* tree-ssa-math-opts.c (pass_cse_sincos::execute): Update\n\ttargetm.libc_has_function call.\n\ngcc/fortran/ChangeLog:\n\n2020-09-30  Tom de Vries  <tdevries@suse.de>\n\n\t* f95-lang.c (gfc_init_builtin_functions):  Update\n\ttargetm.libc_has_function call.", "tree": {"sha": "b25d0b206b5e27d31777f62f9f92c229065976ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b25d0b206b5e27d31777f62f9f92c229065976ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae974e637421263e8854a69b83284fa6309f9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae974e637421263e8854a69b83284fa6309f9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae974e637421263e8854a69b83284fa6309f9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae974e637421263e8854a69b83284fa6309f9a1/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46183c96d2aea8181efb6bc3cfdb221987fe002d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46183c96d2aea8181efb6bc3cfdb221987fe002d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46183c96d2aea8181efb6bc3cfdb221987fe002d"}], "stats": {"total": 111, "additions": 76, "deletions": 35}, "files": [{"sha": "8f2662bb7284775a1cb44f8ff15fe80a60df2e05", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -2733,7 +2733,7 @@ expand_builtin_cexpi (tree exp, rtx target)\n       /* Compute into op1 and op2.  */\n       expand_twoval_unop (sincos_optab, op0, op2, op1, 0);\n     }\n-  else if (targetm.libc_has_function (function_sincos))\n+  else if (targetm.libc_has_function (function_sincos, type))\n     {\n       tree call, fn = NULL_TREE;\n       tree top1, top2;\n@@ -9770,7 +9770,7 @@ fold_builtin_sincos (location_t loc,\n     }\n   if (!call)\n     {\n-      if (!targetm.libc_has_function (function_c99_math_complex)\n+      if (!targetm.libc_has_function (function_c99_math_complex, type)\n \t  || !builtin_decl_implicit_p (fn))\n \treturn NULL_TREE;\n       fndecl = builtin_decl_explicit (fn);"}, {"sha": "95428c010d94ebddc74771af9c92afb119dc49b8", "filename": "gcc/builtins.def", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -138,42 +138,50 @@ along with GCC; see the file COPYING3.  If not see\n #undef DEF_C94_BUILTIN\n #define DEF_C94_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc94, ATTRS, targetm.libc_has_function (function_c94), true)\n+\t       true, true, !flag_isoc94, ATTRS, \\\n+\t       targetm.libc_has_function (function_c94, NULL_TREE), true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C99 or above.  */\n #undef DEF_C99_BUILTIN\n #define DEF_C99_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_misc), true)\n+\t       true, true, !flag_isoc99, ATTRS, \\\n+\t       targetm.libc_has_function (function_c99_misc, NULL_TREE), true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C11 or above.  */\n #undef DEF_C11_BUILTIN\n #define DEF_C11_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc11, ATTRS, targetm.libc_has_function (function_c11_misc), true)\n+\t       true, true, !flag_isoc11, ATTRS, \\\n+\t       targetm.libc_has_function (function_c11_misc, NULL_TREE), true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C2x or above.  */\n #undef DEF_C2X_BUILTIN\n #define DEF_C2X_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc2x, ATTRS, targetm.libc_has_function (function_c2x_misc), true)\n+\t       true, true, !flag_isoc2x, ATTRS, \\\n+\t       targetm.libc_has_function (function_c2x_misc, NULL_TREE), true)\n \n /* Like DEF_C99_BUILTIN, but for complex math functions.  */\n #undef DEF_C99_COMPL_BUILTIN\n #define DEF_C99_COMPL_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_math_complex), true)\n+\t       true, true, !flag_isoc99, ATTRS, \\\n+\t       targetm.libc_has_function (function_c99_math_complex, \\\n+\t\t\t\t\t  NULL_TREE), \\\n+\t       true)\n \n /* Builtin that is specified by C99 and C90 reserve the name for future use.\n    We can still recognize the builtin in C90 mode but we can't produce it\n    implicitly.  */\n #undef DEF_C99_C90RES_BUILTIN\n #define DEF_C99_C90RES_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_misc), true)\n+\t       true, true, !flag_isoc99, ATTRS, \\\n+\t       targetm.libc_has_function (function_c99_misc, NULL_TREE), true)\n \n /* Builtin that C99 reserve the name for future use. We can still recognize\n    the builtin in C99 mode but we can't produce it implicitly.  */"}, {"sha": "49c540fe08e4a6e632349e547afafc847e386ea4", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -125,6 +125,6 @@ extern bool darwin_kextabi_p (void);\n extern void darwin_override_options (void);\n extern void darwin_patch_builtins (void);\n extern void darwin_rename_builtins (void);\n-extern bool darwin_libc_has_function (enum function_class fn_class);\n+extern bool darwin_libc_has_function (enum function_class fn_class, tree);\n \n #endif /* CONFIG_DARWIN_PROTOS_H */"}, {"sha": "b64aaa7b1a7b3caa61a9efcbff0e907170c3741a", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -3542,7 +3542,8 @@ darwin_rename_builtins (void)\n }\n \n bool\n-darwin_libc_has_function (enum function_class fn_class)\n+darwin_libc_has_function (enum function_class fn_class,\n+\t\t\t  tree type ATTRIBUTE_UNUSED)\n {\n   if (fn_class == function_sincos)\n     return (strverscmp (darwin_macosx_version_min, \"10.9\") >= 0);"}, {"sha": "f684954af8121a34703d4ce556b97d95428ac04d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -1484,7 +1484,7 @@ ix86_reg_parm_stack_space (const_tree fndecl)\n bool\n ix86_libc_has_function (enum function_class fn_class)\n {\n-  return targetm.libc_has_function (fn_class);\n+  return targetm.libc_has_function (fn_class, NULL_TREE);\n }\n \n /* Returns value SYSV_ABI, MS_ABI dependent on fntype,"}, {"sha": "c52778b4b35b2db5c5fe5631b19ed164fc4f1294", "filename": "gcc/config/linux-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Flinux-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Flinux-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-protos.h?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -19,4 +19,4 @@ along with GCC; see the file COPYING3.  If not see\n \n extern bool linux_has_ifunc_p (void);\n \n-extern bool linux_libc_has_function (enum function_class fn_class);\n+extern bool linux_libc_has_function (enum function_class fn_class, tree);"}, {"sha": "83ffff43f8b1bd34a1986a16e7ea3567e1ef1215", "filename": "gcc/config/linux.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Flinux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Flinux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -25,7 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"linux-protos.h\"\n \n bool\n-linux_libc_has_function (enum function_class fn_class)\n+linux_libc_has_function (enum function_class fn_class,\n+\t\t\t tree type ATTRIBUTE_UNUSED)\n {\n   if (OPTION_GLIBC || OPTION_MUSL)\n     return true;"}, {"sha": "afac1bda45d25db48e15368905d044e1fbc0f45a", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -6536,6 +6536,23 @@ nvptx_set_current_function (tree fndecl)\n   oacc_bcast_partition = 0;\n }\n \n+/* Implement TARGET_LIBC_HAS_FUNCTION.  */\n+\n+bool\n+nvptx_libc_has_function (enum function_class fn_class, tree type)\n+{\n+  if (fn_class == function_sincos)\n+    {\n+      if (type != NULL_TREE)\n+\t/* Currently, newlib does not support sincosl.  */\n+\treturn type == float_type_node || type == double_type_node;\n+      else\n+\treturn true;\n+    }\n+\n+  return default_libc_has_function (fn_class, type);\n+}\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE nvptx_option_override\n \n@@ -6681,6 +6698,9 @@ nvptx_set_current_function (tree fndecl)\n #undef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION nvptx_set_current_function\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION nvptx_libc_has_function\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-nvptx.h\""}, {"sha": "7b28332584c8dd215ae727d96e9c0ed6f3d7f7d3", "filename": "gcc/convert.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -501,7 +501,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \tCASE_FLT_FN (BUILT_IN_CEIL):\n \tCASE_FLT_FN_FLOATN_NX (BUILT_IN_CEIL):\n \t  /* Only convert in ISO C99 mode.  */\n-\t  if (!targetm.libc_has_function (function_c99_misc))\n+\t  if (!targetm.libc_has_function (function_c99_misc, intype))\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n \t      || (outprec == TYPE_PRECISION (integer_type_node)\n@@ -518,7 +518,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \tCASE_FLT_FN (BUILT_IN_FLOOR):\n \tCASE_FLT_FN_FLOATN_NX (BUILT_IN_FLOOR):\n \t  /* Only convert in ISO C99 mode.  */\n-\t  if (!targetm.libc_has_function (function_c99_misc))\n+\t  if (!targetm.libc_has_function (function_c99_misc, intype))\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n \t      || (outprec == TYPE_PRECISION (integer_type_node)\n@@ -535,7 +535,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \tCASE_FLT_FN (BUILT_IN_ROUND):\n \tCASE_FLT_FN_FLOATN_NX (BUILT_IN_ROUND):\n \t  /* Only convert in ISO C99 mode and with -fno-math-errno.  */\n-\t  if (!targetm.libc_has_function (function_c99_misc)\n+\t  if (!targetm.libc_has_function (function_c99_misc, intype)\n \t      || flag_errno_math)\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n@@ -559,7 +559,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \tCASE_FLT_FN (BUILT_IN_RINT):\n \tCASE_FLT_FN_FLOATN_NX (BUILT_IN_RINT):\n \t  /* Only convert in ISO C99 mode and with -fno-math-errno.  */\n-\t  if (!targetm.libc_has_function (function_c99_misc)\n+\t  if (!targetm.libc_has_function (function_c99_misc, intype)\n \t      || flag_errno_math)\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)"}, {"sha": "97437e8274fdf17b4e9c3b4b1d19fc6012fae704", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -5602,9 +5602,12 @@ refers to the global ``variable'' @code{errno}.  (On certain systems,\n macro, a reasonable default is used.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_LIBC_HAS_FUNCTION (enum function_class @var{fn_class})\n+@deftypefn {Target Hook} bool TARGET_LIBC_HAS_FUNCTION (enum function_class @var{fn_class}, tree @var{type})\n This hook determines whether a function from a class of functions\n-@var{fn_class} is present in the target C library.\n+@var{fn_class} is present in the target C library.  If @var{type} is NULL,\n+the caller asks for support for all standard (float, double, long double)\n+types.  If @var{type} is non-NULL, the caller asks for support for a\n+specific type.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_LIBC_HAS_FAST_FUNCTION (int @var{fcode})"}, {"sha": "526b7219e4bd835fcfa8de14d672e72f592ad5bb", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -881,7 +881,7 @@ gfc_init_builtin_functions (void)\n \t\t      BUILT_IN_POWIF, \"powif\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n \n-  if (targetm.libc_has_function (function_c99_math_complex))\n+  if (targetm.libc_has_function (function_c99_math_complex, NULL_TREE))\n     {\n       gfc_define_builtin (\"__builtin_cbrtl\", mfunc_longdouble[0],\n \t\t\t  BUILT_IN_CBRTL, \"cbrtl\",\n@@ -903,7 +903,7 @@ gfc_init_builtin_functions (void)\n \t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n     }\n \n-  if (targetm.libc_has_function (function_sincos))\n+  if (targetm.libc_has_function (function_sincos, NULL_TREE))\n     {\n       gfc_define_builtin (\"__builtin_sincosl\",\n \t\t\t  func_longdouble_longdoublep_longdoublep,"}, {"sha": "952643f3c6d7a33a4631819991c7651f511ac8d3", "filename": "gcc/match.pd", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -5185,7 +5185,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (with {\n        const REAL_VALUE_TYPE *const value = TREE_REAL_CST_PTR (@0);\n        bool use_exp2 = false;\n-       if (targetm.libc_has_function (function_c99_misc)\n+       if (targetm.libc_has_function (function_c99_misc, TREE_TYPE (@0))\n \t   && value->cl == rvc_normal)\n \t {\n \t   REAL_VALUE_TYPE frac_rvt = *value;\n@@ -5484,7 +5484,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       cexpis (CEXPI)\n   (simplify\n    (cexps compositional_complex@0)\n-   (if (targetm.libc_has_function (function_c99_math_complex))\n+   (if (targetm.libc_has_function (function_c99_math_complex, TREE_TYPE (@0)))\n     (complex\n      (mult (exps@1 (realpart @0)) (realpart (cexpis:type@2 (imagpart @0))))\n      (mult @1 (imagpart @2)))))))\n@@ -5536,7 +5536,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  /* truncl(extend(x)) and trunc(extend(x)) -> extend(truncf(x)), etc.,\n     if x is a float.  */\n  (if (optimize && canonicalize_math_p ()\n-      && targetm.libc_has_function (function_c99_misc))\n+      && targetm.libc_has_function (function_c99_misc, NULL_TREE))\n   (simplify\n    (froms (convert float_value_p@0))\n    (convert (tos @0)))))"}, {"sha": "ed2da154e30fd0b06dd01f33b3370daf9a909b80", "filename": "gcc/target.def", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -2618,8 +2618,11 @@ set via @code{__attribute__}.\",\n DEFHOOK\n (libc_has_function,\n  \"This hook determines whether a function from a class of functions\\n\\\n-@var{fn_class} is present in the target C library.\",\n- bool, (enum function_class fn_class),\n+@var{fn_class} is present in the target C library.  If @var{type} is NULL,\\n\\\n+the caller asks for support for all standard (float, double, long double)\\n\\\n+types.  If @var{type} is non-NULL, the caller asks for support for a\\n\\\n+specific type.\",\n+ bool, (enum function_class fn_class, tree type),\n  default_libc_has_function)\n \n DEFHOOK"}, {"sha": "5d94fce2282bbb2b2e0b36475f4ad073ad0f7c09", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -1641,7 +1641,8 @@ default_have_conditional_execution (void)\n /* By default we assume that c99 functions are present at the runtime,\n    but sincos is not.  */\n bool\n-default_libc_has_function (enum function_class fn_class)\n+default_libc_has_function (enum function_class fn_class,\n+\t\t\t   tree type ATTRIBUTE_UNUSED)\n {\n   if (fn_class == function_c94\n       || fn_class == function_c99_misc\n@@ -1660,13 +1661,15 @@ default_libc_has_fast_function (int fcode ATTRIBUTE_UNUSED)\n }\n \n bool\n-gnu_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n+gnu_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED,\n+\t\t       tree type ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n \n bool\n-no_c99_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n+no_c99_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED,\n+\t\t\t  tree type ATTRIBUTE_UNUSED)\n {\n   return false;\n }"}, {"sha": "44ab9262c2adeba9a57ee4bde027a8b79f0d7238", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -208,10 +208,10 @@ extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);\n \n-extern bool default_libc_has_function (enum function_class);\n+extern bool default_libc_has_function (enum function_class, tree);\n extern bool default_libc_has_fast_function (int fcode);\n-extern bool no_c99_libc_has_function (enum function_class);\n-extern bool gnu_libc_has_function (enum function_class);\n+extern bool no_c99_libc_has_function (enum function_class, tree);\n+extern bool gnu_libc_has_function (enum function_class, tree);\n \n extern tree default_builtin_tm_load_store (tree);\n "}, {"sha": "bdbb9d965f09ea60be04ae5d07589aba1bc59b93", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae974e637421263e8854a69b83284fa6309f9a1/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=bae974e637421263e8854a69b83284fa6309f9a1", "patch": "@@ -2176,12 +2176,14 @@ pass_cse_sincos::execute (function *fun)\n \t\tCASE_CFN_COS:\n \t\tCASE_CFN_SIN:\n \t\tCASE_CFN_CEXPI:\n+\t\t  arg = gimple_call_arg (stmt, 0);\n \t\t  /* Make sure we have either sincos or cexp.  */\n-\t\t  if (!targetm.libc_has_function (function_c99_math_complex)\n-\t\t      && !targetm.libc_has_function (function_sincos))\n+\t\t  if (!targetm.libc_has_function (function_c99_math_complex,\n+\t\t\t\t\t\t  TREE_TYPE (arg))\n+\t\t      && !targetm.libc_has_function (function_sincos,\n+\t\t\t\t\t\t     TREE_TYPE (arg)))\n \t\t    break;\n \n-\t\t  arg = gimple_call_arg (stmt, 0);\n \t\t  if (TREE_CODE (arg) == SSA_NAME)\n \t\t    cfg_changed |= execute_cse_sincos_1 (arg);\n \t\t  break;"}]}