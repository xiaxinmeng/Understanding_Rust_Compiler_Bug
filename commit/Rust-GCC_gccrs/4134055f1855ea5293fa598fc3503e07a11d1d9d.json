{"sha": "4134055f1855ea5293fa598fc3503e07a11d1d9d", "node_id": "C_kwDOANBUbNoAKDQxMzQwNTVmMTg1NWVhNTI5M2ZhNTk4ZmMzNTAzZTA3YTExZDFkOWQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-05T08:05:26Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-06T14:14:30Z"}, "message": "lang.opt: Remove overzealous warning initialisation\n\npipeline: Add default warning initialisation\n\nOption initialisations in lang.opt files are applied globally, so the\ntest suites of other frontend would fail when the rust language was\nenabled.\n\nThis should be reversed once @tschwinge `LangInit` option is merged", "tree": {"sha": "6f85eb051902a371a59cc00590a89af2f1594c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f85eb051902a371a59cc00590a89af2f1594c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4134055f1855ea5293fa598fc3503e07a11d1d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4134055f1855ea5293fa598fc3503e07a11d1d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4134055f1855ea5293fa598fc3503e07a11d1d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4134055f1855ea5293fa598fc3503e07a11d1d9d/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4096017e3b9ca499b56988b67e05667a02ca202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4096017e3b9ca499b56988b67e05667a02ca202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4096017e3b9ca499b56988b67e05667a02ca202"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "40297ad314d1498c3f8a21c3afd05ce721eeff93", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4134055f1855ea5293fa598fc3503e07a11d1d9d/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4134055f1855ea5293fa598fc3503e07a11d1d9d/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=4134055f1855ea5293fa598fc3503e07a11d1d9d", "patch": "@@ -39,19 +39,19 @@ Rust\n ; Documented in c.opt\n \n Wunused-variable\n-Rust Var(warn_unused_variable) Init(1) Warning\n+Rust Var(warn_unused_variable) Warning\n ; documented in common.opt\n \n Wunused-const-variable\n Rust Warning Alias(Wunused-const-variable=, 2, 0)\n Warn when a const variable is unused.\n \n Wunused-const-variable=\n-Rust Joined RejectNegative UInteger Var(warn_unused_const_variable) Init(1) Warning LangEnabledBy(Rust,Wunused-variable, 1, 0) IntegerRange(0, 2)\n+Rust Joined RejectNegative UInteger Var(warn_unused_const_variable) Warning LangEnabledBy(Rust,Wunused-variable, 1, 0) IntegerRange(0, 2)\n Warn when a const variable is unused.\n \n Wunused-result\n-Rust Var(warn_unused_result) Init(1) Warning\n+Rust Var(warn_unused_result) Warning\n Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.\n \n frust-crate="}, {"sha": "72f3dc09bab6226072b236c397bb969e614352f0", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4134055f1855ea5293fa598fc3503e07a11d1d9d/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4134055f1855ea5293fa598fc3503e07a11d1d9d/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=4134055f1855ea5293fa598fc3503e07a11d1d9d", "patch": "@@ -162,6 +162,13 @@ grs_langhook_init_options_struct (struct gcc_options *opts)\n    * builtins */\n   opts->x_flag_wrapv = 1;\n \n+  /* We need to warn on unused variables by default */\n+  opts->x_warn_unused_variable = 1;\n+  /* For const variables too */\n+  opts->x_warn_unused_const_variable = 1;\n+  /* And finally unused result for #[must_use] */\n+  opts->x_warn_unused_result = 1;\n+\n   // nothing yet - used by frontends to change specific options for the language\n   Rust::Session::get_instance ().init_options ();\n }"}]}