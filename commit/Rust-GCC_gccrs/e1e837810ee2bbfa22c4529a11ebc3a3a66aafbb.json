{"sha": "e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFlODM3ODEwZWUyYmJmYTIyYzQ1MjlhMTFlYmMzYTNhNjZhYWZiYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-09-09T21:31:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-09T21:31:17Z"}, "message": "pa.c (pa_reorg): New marking scheme for jumps inside switch tables.\n\n        * pa.c (pa_reorg): New marking scheme for jumps inside switch\n        tables.\n        (pa_adjust_insn_length): Update to work with new marking scheme\n        for jumps inside switch tables.\n        * pa.md (switch_jump): Remove pattern.\n        (jump): Handle jumps inside jump tables.\n\nFrom-SVN: r22368", "tree": {"sha": "bb47f155392ed7db586bbedd2ef18e309aee8abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb47f155392ed7db586bbedd2ef18e309aee8abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/comments", "author": null, "committer": null, "parents": [{"sha": "1e5bd8410b935246410e9b3c6d4428632afa05f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5bd8410b935246410e9b3c6d4428632afa05f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5bd8410b935246410e9b3c6d4428632afa05f9"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "af6291d84233bef29b4586c4810107dc4dd0093c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "patch": "@@ -34,6 +34,13 @@ Wed Sep  9 15:16:58 1998  Gavin Romig-Koch  <gavin@cygnus.com>\n \n Wed Sep  9 12:31:35 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.c (pa_reorg): New marking scheme for jumps inside switch\n+\ttables.\n+\t(pa_adjust_insn_length): Update to work with new marking scheme\n+\tfor jumps inside switch tables. \n+\t* pa.md (switch_jump): Remove pattern.\n+\t(jump): Handle jumps inside jump tables.\n+\n \t* Makefile.in (profile.o): Depend on insn-config.h\n \n Wed Sep  9 09:36:51 1998  Jim Wilson  <wilson@cygnus.com>"}, {"sha": "a3eab2aebf5e2dbcc56e86ec4004d2a88f48ebcc", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "patch": "@@ -3563,7 +3563,7 @@ pa_adjust_insn_length (insn, length)\n      also need adjustment.  */\n   else if (GET_CODE (insn) == JUMP_INSN\n \t   && simplejump_p (insn)\n-\t   && GET_MODE (PATTERN (insn)) == DImode)\n+\t   && GET_MODE (insn) == SImode)\n     return 4;\n   /* Millicode insn with an unfilled delay slot.  */\n   else if (GET_CODE (insn) == INSN\n@@ -6056,18 +6056,52 @@ pa_reorg (insns)\n \t      if (GET_CODE (pattern) == ADDR_VEC)\n \t\t{\n \t\t  /* Emit the jump itself.  */\n-\t\t  tmp = gen_switch_jump (XEXP (XVECEXP (pattern, 0, i), 0));\n+\t\t  tmp = gen_jump (XEXP (XVECEXP (pattern, 0, i), 0));\n \t\t  tmp = emit_jump_insn_after (tmp, location);\n \t\t  JUMP_LABEL (tmp) = XEXP (XVECEXP (pattern, 0, i), 0);\n+\t\t  /* It is easy to rely on the branch table markers\n+\t\t     during assembly output to trigger the correct code\n+\t\t     for a switch table jump with an unfilled delay slot,\n+\n+\t\t     However, that requires state and assumes that we look\n+\t\t     at insns in order.\n+\n+\t\t     We can't make such assumptions when computing the length\n+\t\t     of instructions.  Ugh.  We could walk the insn chain to\n+\t\t     determine if this instruction is in a branch table, but\n+\t\t     that can get rather expensive, particularly during the\n+\t\t     branch shortening phase of the compiler.\n+\n+\t\t     So instead we mark this jump as being special.  This is\n+\t\t     far from ideal and knows that no code after this will\n+\t\t     muck around with the mode of the JUMP_INSN itself.  */\n+\t\t  PUT_MODE (tmp, SImode);\n \t\t  LABEL_NUSES (JUMP_LABEL (tmp))++;\n \t\t  location = NEXT_INSN (location);\n \t\t}\n \t      else\n \t\t{\n \t\t  /* Emit the jump itself.  */\n-\t\t  tmp = gen_switch_jump (XEXP (XVECEXP (pattern, 1, i), 0));\n+\t\t  tmp = gen_jump (XEXP (XVECEXP (pattern, 1, i), 0));\n \t\t  tmp = emit_jump_insn_after (tmp, location);\n \t\t  JUMP_LABEL (tmp) = XEXP (XVECEXP (pattern, 1, i), 0);\n+\t\t  /* It is easy to rely on the branch table markers\n+\t\t     during assembly output to trigger the correct code\n+\t\t     for a switch table jump with an unfilled delay slot,\n+\n+\t\t     However, that requires state and assumes that we look\n+\t\t     at insns in order.\n+\n+\t\t     We can't make such assumptions when computing the length\n+\t\t     of instructions.  Ugh.  We could walk the insn chain to\n+\t\t     determine if this instruction is in a branch table, but\n+\t\t     that can get rather expensive, particularly during the\n+\t\t     branch shortening phase of the compiler.\n+\n+\t\t     So instead we mark this jump as being special.  This is\n+\t\t     far from ideal and knows that no code after this will\n+\t\t     muck around with the mode of the JUMP_INSN itself.  */\n+\t\t  PUT_MODE (tmp, SImode);\n \t\t  LABEL_NUSES (JUMP_LABEL (tmp))++;\n \t\t  location = NEXT_INSN (location);\n \t\t}"}, {"sha": "2f3848c28b356dc39d02ebba9a4185d72749a896", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "patch": "@@ -3910,19 +3910,16 @@\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n-(define_insn \"switch_jump\"\n-  [(set:DI (pc) (label_ref (match_operand 0 \"\" \"\")))]\n-  \"\"\n-  \"bl %l0,0%#\"\n-  [(set_attr \"type\" \"uncond_branch\")\n-   (set_attr \"length\" \"4\")])\n-\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"*\n {\n   extern int optimize;\n+\n+  if (GET_MODE (insn) == SImode)\n+    return \\\"bl %l0,0%#\\\";\n+\n   /* An unconditional branch which can reach its target.  */\n   if (get_attr_length (insn) != 24\n       && get_attr_length (insn) != 16)"}]}