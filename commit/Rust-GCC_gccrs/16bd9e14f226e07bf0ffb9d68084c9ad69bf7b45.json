{"sha": "16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "node_id": "C_kwDOANBUbNoAKDE2YmQ5ZTE0ZjIyNmUwN2JmMGZmYjlkNjgwODRjOWFkNjliZjdiNDU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-20T09:23:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-20T09:23:49Z"}, "message": "niter: Fix up unused var warning [PR108457]\n\ntree-ssa-loop-niter.cc (build_cltz_expr) gets unused variable mode\nwarning on some architectures where C[LT]Z_DEFINED_VALUE_AT_ZERO\nmacro(s) don't use the first argument (which includes the\ndefaults.h definitions of:\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0\nOther uses of this macro avoid this problem by avoiding temporaries\nwhich are only used as argument to those macros, the following patch\ndoes it the same way for consistency.  Plus some formatting fixes\nwhile at it.\n\n2023-01-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108457\n\t* tree-ssa-loop-niter.cc (build_cltz_expr): Use\n\tSCALAR_INT_TYPE_MODE (utype) directly as C[LT]Z_DEFINED_VALUE_AT_ZERO\n\targument instead of a temporary.  Formatting fixes.", "tree": {"sha": "320940c3bee352cd0fb9f56e5b7a8c8ee5ca7ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/320940c3bee352cd0fb9f56e5b7a8c8ee5ca7ef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0846336de56119777861e02bf68f92a6af466000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0846336de56119777861e02bf68f92a6af466000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0846336de56119777861e02bf68f92a6af466000"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "581bf5d067b58c3a41755bcf1c92c6cb105f853f", "filename": "gcc/tree-ssa-loop-niter.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45/gcc%2Ftree-ssa-loop-niter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45/gcc%2Ftree-ssa-loop-niter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.cc?ref=16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "patch": "@@ -2252,16 +2252,16 @@ build_cltz_expr (tree src, bool leading, bool define_at_zero)\n       call = build_call_expr_internal_loc (UNKNOWN_LOCATION, ifn,\n \t\t\t\t\t   integer_type_node, 1, src);\n       int val;\n-      scalar_int_mode mode = SCALAR_INT_TYPE_MODE (utype);\n       int optab_defined_at_zero\n-\t= leading ? CLZ_DEFINED_VALUE_AT_ZERO (mode, val)\n-\t\t  : CTZ_DEFINED_VALUE_AT_ZERO (mode, val);\n+\t= (leading\n+\t   ? CLZ_DEFINED_VALUE_AT_ZERO (SCALAR_INT_TYPE_MODE (utype), val)\n+\t   : CTZ_DEFINED_VALUE_AT_ZERO (SCALAR_INT_TYPE_MODE (utype), val));\n       if (define_at_zero && !(optab_defined_at_zero == 2 && val == prec))\n \t{\n \t  tree is_zero = fold_build2 (NE_EXPR, boolean_type_node, src,\n \t\t\t\t      build_zero_cst (TREE_TYPE (src)));\n-\t  call = fold_build3(COND_EXPR, integer_type_node, is_zero, call,\n-\t\t\t     build_int_cst (integer_type_node, prec));\n+\t  call = fold_build3 (COND_EXPR, integer_type_node, is_zero, call,\n+\t\t\t      build_int_cst (integer_type_node, prec));\n \t}\n     }\n   else if (prec == 2 * lli_prec)\n@@ -2275,22 +2275,22 @@ build_cltz_expr (tree src, bool leading, bool define_at_zero)\n       /* We count the zeroes in src1, and add the number in src2 when src1\n \t is 0.  */\n       if (!leading)\n-\tstd::swap(src1, src2);\n+\tstd::swap (src1, src2);\n       tree call1 = build_call_expr (fn, 1, src1);\n       tree call2 = build_call_expr (fn, 1, src2);\n       if (define_at_zero)\n \t{\n \t  tree is_zero2 = fold_build2 (NE_EXPR, boolean_type_node, src2,\n \t\t\t\t       build_zero_cst (TREE_TYPE (src2)));\n-\t  call2 = fold_build3(COND_EXPR, integer_type_node, is_zero2, call2,\n-\t\t\t      build_int_cst (integer_type_node, lli_prec));\n+\t  call2 = fold_build3 (COND_EXPR, integer_type_node, is_zero2, call2,\n+\t\t\t       build_int_cst (integer_type_node, lli_prec));\n \t}\n       tree is_zero1 = fold_build2 (NE_EXPR, boolean_type_node, src1,\n \t\t\t\t   build_zero_cst (TREE_TYPE (src1)));\n-      call = fold_build3(COND_EXPR, integer_type_node, is_zero1, call1,\n-\t\t\t fold_build2 (PLUS_EXPR, integer_type_node, call2,\n-\t\t\t\t      build_int_cst (integer_type_node,\n-\t\t\t\t\t\t     lli_prec)));\n+      call = fold_build3 (COND_EXPR, integer_type_node, is_zero1, call1,\n+\t\t\t  fold_build2 (PLUS_EXPR, integer_type_node, call2,\n+\t\t\t\t       build_int_cst (integer_type_node,\n+\t\t\t\t\t\t      lli_prec)));\n     }\n   else\n     {\n@@ -2302,14 +2302,13 @@ build_cltz_expr (tree src, bool leading, bool define_at_zero)\n \t{\n \t  tree is_zero = fold_build2 (NE_EXPR, boolean_type_node, src,\n \t\t\t\t      build_zero_cst (TREE_TYPE (src)));\n-\t  call = fold_build3(COND_EXPR, integer_type_node, is_zero, call,\n-\t\t\t     build_int_cst (integer_type_node, prec));\n+\t  call = fold_build3 (COND_EXPR, integer_type_node, is_zero, call,\n+\t\t\t      build_int_cst (integer_type_node, prec));\n \t}\n \n       if (leading && prec < i_prec)\n-\tcall = fold_build2(MINUS_EXPR, integer_type_node, call,\n-\t\t\t   build_int_cst (integer_type_node,\n-\t\t\t\t\t  i_prec - prec));\n+\tcall = fold_build2 (MINUS_EXPR, integer_type_node, call,\n+\t\t\t    build_int_cst (integer_type_node, i_prec - prec));\n     }\n \n   return call;"}]}