{"sha": "fd92bb80a81651c7eb2159da03b39ba098890bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5MmJiODBhODE2NTFjN2ViMjE1OWRhMDNiMzliYTA5ODg5MGJjMQ==", "commit": {"author": {"name": "Matthew Gretton-Dann", "email": "matthew.gretton-dann@arm.com", "date": "2012-02-28T16:13:52Z"}, "committer": {"name": "Matthew Gretton-Dann", "email": "mgretton@gcc.gnu.org", "date": "2012-02-28T16:13:52Z"}, "message": "re PR target/51534 (Bad code gen for vcgtq_u32 NEON intrinsic)\n\n\tPR target/51534\n\t* gcc/config/arm/arm.c (neon_builtin_data): Add entries for vcgeu\n\tand vcgtu.\n\t* gcc/config/arm/arm_neon.h: Regenerate.\n\t* gcc/config/arm/neon.md (unspec): Add UNSPEC_VCGEU, and UNSPEC_VCGTU.\n\t(neon_vcgeu): New insn.\n\t(neon_vcgtu): Likewise.\n\t* gcc/config/arm/neon.ml (s_8_32, u_8_32): New lists.\n\t(ops): Unsigned comparison intrinsics call a different\n\tbuiltin.\n\t* gcc/testsuite/gcc.target/arm/neon/pr51534.c: New testcase.\n\nFrom-SVN: r184629", "tree": {"sha": "07787092a84d40ad621a28faededfc880423c242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07787092a84d40ad621a28faededfc880423c242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd92bb80a81651c7eb2159da03b39ba098890bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd92bb80a81651c7eb2159da03b39ba098890bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd92bb80a81651c7eb2159da03b39ba098890bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd92bb80a81651c7eb2159da03b39ba098890bc1/comments", "author": {"login": "matt-gretton-dann", "id": 53790742, "node_id": "MDQ6VXNlcjUzNzkwNzQy", "avatar_url": "https://avatars.githubusercontent.com/u/53790742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-gretton-dann", "html_url": "https://github.com/matt-gretton-dann", "followers_url": "https://api.github.com/users/matt-gretton-dann/followers", "following_url": "https://api.github.com/users/matt-gretton-dann/following{/other_user}", "gists_url": "https://api.github.com/users/matt-gretton-dann/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-gretton-dann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-gretton-dann/subscriptions", "organizations_url": "https://api.github.com/users/matt-gretton-dann/orgs", "repos_url": "https://api.github.com/users/matt-gretton-dann/repos", "events_url": "https://api.github.com/users/matt-gretton-dann/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-gretton-dann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d548381aa6ea98a2e15bc1af0d1ad44f9c6adf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d548381aa6ea98a2e15bc1af0d1ad44f9c6adf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d548381aa6ea98a2e15bc1af0d1ad44f9c6adf0"}], "stats": {"total": 126, "additions": 94, "deletions": 32}, "files": [{"sha": "3e7ff590732e870aaa05b74357047dcff71bf29a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd92bb80a81651c7eb2159da03b39ba098890bc1", "patch": "@@ -1,3 +1,16 @@\n+2012-02-28  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+\tPR target/51534\n+\t* config/arm/arm.c (neon_builtin_data): Add entries for vcgeu\n+\tand vcgtu.\n+\t* config/arm/arm_neon.h: Regenerate.\n+\t* config/arm/neon.md (unspec): Add UNSPEC_VCGEU, and UNSPEC_VCGTU.\n+\t(neon_vcgeu): New insn.\n+\t(neon_vcgtu): Likewise.\n+\t* config/arm/neon.ml (s_8_32, u_8_32): New lists.\n+\t(ops): Unsigned comparison intrinsics call a different\n+\tbuiltin.\n+\n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/52407"}, {"sha": "21816d65dcba7341626712faf19019d436901043", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fd92bb80a81651c7eb2159da03b39ba098890bc1", "patch": "@@ -19104,7 +19104,9 @@ static neon_builtin_datum neon_builtin_data[] =\n   VAR3 (BINOP, vsubhn, v8hi, v4si, v2di),\n   VAR8 (BINOP, vceq, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n   VAR8 (BINOP, vcge, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR6 (BINOP, vcgeu, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n   VAR8 (BINOP, vcgt, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR6 (BINOP, vcgtu, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n   VAR2 (BINOP, vcage, v2sf, v4sf),\n   VAR2 (BINOP, vcagt, v2sf, v4sf),\n   VAR6 (BINOP, vtst, v8qi, v4hi, v2si, v16qi, v8hi, v4si),"}, {"sha": "0567895912b7715d0ca38f5e2422ea501914665c", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=fd92bb80a81651c7eb2159da03b39ba098890bc1", "patch": "@@ -1893,19 +1893,19 @@ vcge_f32 (float32x2_t __a, float32x2_t __b)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vcge_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t)__builtin_neon_vcgev8qi ((int8x8_t) __a, (int8x8_t) __b, 0);\n+  return (uint8x8_t)__builtin_neon_vcgeuv8qi ((int8x8_t) __a, (int8x8_t) __b, 0);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vcge_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t)__builtin_neon_vcgev4hi ((int16x4_t) __a, (int16x4_t) __b, 0);\n+  return (uint16x4_t)__builtin_neon_vcgeuv4hi ((int16x4_t) __a, (int16x4_t) __b, 0);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcge_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t)__builtin_neon_vcgev2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n+  return (uint32x2_t)__builtin_neon_vcgeuv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n@@ -1935,19 +1935,19 @@ vcgeq_f32 (float32x4_t __a, float32x4_t __b)\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vcgeq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t)__builtin_neon_vcgev16qi ((int8x16_t) __a, (int8x16_t) __b, 0);\n+  return (uint8x16_t)__builtin_neon_vcgeuv16qi ((int8x16_t) __a, (int8x16_t) __b, 0);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vcgeq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t)__builtin_neon_vcgev8hi ((int16x8_t) __a, (int16x8_t) __b, 0);\n+  return (uint16x8_t)__builtin_neon_vcgeuv8hi ((int16x8_t) __a, (int16x8_t) __b, 0);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcgeq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t)__builtin_neon_vcgev4si ((int32x4_t) __a, (int32x4_t) __b, 0);\n+  return (uint32x4_t)__builtin_neon_vcgeuv4si ((int32x4_t) __a, (int32x4_t) __b, 0);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -1977,19 +1977,19 @@ vcle_f32 (float32x2_t __a, float32x2_t __b)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vcle_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t)__builtin_neon_vcgev8qi ((int8x8_t) __b, (int8x8_t) __a, 0);\n+  return (uint8x8_t)__builtin_neon_vcgeuv8qi ((int8x8_t) __b, (int8x8_t) __a, 0);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vcle_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t)__builtin_neon_vcgev4hi ((int16x4_t) __b, (int16x4_t) __a, 0);\n+  return (uint16x4_t)__builtin_neon_vcgeuv4hi ((int16x4_t) __b, (int16x4_t) __a, 0);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcle_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t)__builtin_neon_vcgev2si ((int32x2_t) __b, (int32x2_t) __a, 0);\n+  return (uint32x2_t)__builtin_neon_vcgeuv2si ((int32x2_t) __b, (int32x2_t) __a, 0);\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n@@ -2019,19 +2019,19 @@ vcleq_f32 (float32x4_t __a, float32x4_t __b)\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vcleq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t)__builtin_neon_vcgev16qi ((int8x16_t) __b, (int8x16_t) __a, 0);\n+  return (uint8x16_t)__builtin_neon_vcgeuv16qi ((int8x16_t) __b, (int8x16_t) __a, 0);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vcleq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t)__builtin_neon_vcgev8hi ((int16x8_t) __b, (int16x8_t) __a, 0);\n+  return (uint16x8_t)__builtin_neon_vcgeuv8hi ((int16x8_t) __b, (int16x8_t) __a, 0);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcleq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t)__builtin_neon_vcgev4si ((int32x4_t) __b, (int32x4_t) __a, 0);\n+  return (uint32x4_t)__builtin_neon_vcgeuv4si ((int32x4_t) __b, (int32x4_t) __a, 0);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -2061,19 +2061,19 @@ vcgt_f32 (float32x2_t __a, float32x2_t __b)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vcgt_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t)__builtin_neon_vcgtv8qi ((int8x8_t) __a, (int8x8_t) __b, 0);\n+  return (uint8x8_t)__builtin_neon_vcgtuv8qi ((int8x8_t) __a, (int8x8_t) __b, 0);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vcgt_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t)__builtin_neon_vcgtv4hi ((int16x4_t) __a, (int16x4_t) __b, 0);\n+  return (uint16x4_t)__builtin_neon_vcgtuv4hi ((int16x4_t) __a, (int16x4_t) __b, 0);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcgt_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t)__builtin_neon_vcgtv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n+  return (uint32x2_t)__builtin_neon_vcgtuv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n@@ -2103,19 +2103,19 @@ vcgtq_f32 (float32x4_t __a, float32x4_t __b)\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vcgtq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t)__builtin_neon_vcgtv16qi ((int8x16_t) __a, (int8x16_t) __b, 0);\n+  return (uint8x16_t)__builtin_neon_vcgtuv16qi ((int8x16_t) __a, (int8x16_t) __b, 0);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vcgtq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t)__builtin_neon_vcgtv8hi ((int16x8_t) __a, (int16x8_t) __b, 0);\n+  return (uint16x8_t)__builtin_neon_vcgtuv8hi ((int16x8_t) __a, (int16x8_t) __b, 0);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcgtq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t)__builtin_neon_vcgtv4si ((int32x4_t) __a, (int32x4_t) __b, 0);\n+  return (uint32x4_t)__builtin_neon_vcgtuv4si ((int32x4_t) __a, (int32x4_t) __b, 0);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -2145,19 +2145,19 @@ vclt_f32 (float32x2_t __a, float32x2_t __b)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vclt_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t)__builtin_neon_vcgtv8qi ((int8x8_t) __b, (int8x8_t) __a, 0);\n+  return (uint8x8_t)__builtin_neon_vcgtuv8qi ((int8x8_t) __b, (int8x8_t) __a, 0);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vclt_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t)__builtin_neon_vcgtv4hi ((int16x4_t) __b, (int16x4_t) __a, 0);\n+  return (uint16x4_t)__builtin_neon_vcgtuv4hi ((int16x4_t) __b, (int16x4_t) __a, 0);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vclt_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t)__builtin_neon_vcgtv2si ((int32x2_t) __b, (int32x2_t) __a, 0);\n+  return (uint32x2_t)__builtin_neon_vcgtuv2si ((int32x2_t) __b, (int32x2_t) __a, 0);\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n@@ -2187,19 +2187,19 @@ vcltq_f32 (float32x4_t __a, float32x4_t __b)\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vcltq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t)__builtin_neon_vcgtv16qi ((int8x16_t) __b, (int8x16_t) __a, 0);\n+  return (uint8x16_t)__builtin_neon_vcgtuv16qi ((int8x16_t) __b, (int8x16_t) __a, 0);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vcltq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t)__builtin_neon_vcgtv8hi ((int16x8_t) __b, (int16x8_t) __a, 0);\n+  return (uint16x8_t)__builtin_neon_vcgtuv8hi ((int16x8_t) __b, (int16x8_t) __a, 0);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcltq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t)__builtin_neon_vcgtv4si ((int32x4_t) __b, (int32x4_t) __a, 0);\n+  return (uint32x4_t)__builtin_neon_vcgtuv4si ((int32x4_t) __b, (int32x4_t) __a, 0);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))"}, {"sha": "078a8fd47eead762ceee2ebd8ffc1c48ffe79749", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=fd92bb80a81651c7eb2159da03b39ba098890bc1", "patch": "@@ -34,7 +34,9 @@\n   UNSPEC_VCAGT\n   UNSPEC_VCEQ\n   UNSPEC_VCGE\n+  UNSPEC_VCGEU\n   UNSPEC_VCGT\n+  UNSPEC_VCGTU\n   UNSPEC_VCLS\n   UNSPEC_VCONCAT\n   UNSPEC_VCVT\n@@ -2146,6 +2148,18 @@\n                    (const_string \"neon_int_5\")))]\n )\n \n+(define_insn \"neon_vcgeu<mode>\"\n+  [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w\")\n+        (unspec:<V_cmp_result>\n+\t  [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n+\t   (match_operand:VDQIW 2 \"s_register_operand\" \"w\")\n+           (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+          UNSPEC_VCGEU))]\n+  \"TARGET_NEON\"\n+  \"vcge.%T3%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"neon_type\" \"neon_int_5\")]\n+)\n+\n (define_insn \"neon_vcgt<mode>\"\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w,w\")\n         (unspec:<V_cmp_result>\n@@ -2165,6 +2179,18 @@\n                    (const_string \"neon_int_5\")))]\n )\n \n+(define_insn \"neon_vcgtu<mode>\"\n+  [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w\")\n+        (unspec:<V_cmp_result>\n+\t  [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n+\t   (match_operand:VDQIW 2 \"s_register_operand\" \"w\")\n+           (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+          UNSPEC_VCGTU))]\n+  \"TARGET_NEON\"\n+  \"vcgt.%T3%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"neon_type\" \"neon_int_5\")]\n+)\n+\n ;; VCLE and VCLT only support comparisons with immediate zero (register\n ;; variants are VCGE and VCGT with operands reversed).\n "}, {"sha": "363e55c713c2ea629bc0f68f4b4c69788c993027", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=fd92bb80a81651c7eb2159da03b39ba098890bc1", "patch": "@@ -700,6 +700,8 @@ let bit_select shape elt =\n \n (* Common lists of supported element types.  *)\n \n+let s_8_32 = [S8; S16; S32]\n+let u_8_32 = [U8; U16; U32]\n let su_8_32 = [S8; S16; S32; U8; U16; U32]\n let su_8_64 = S64 :: U64 :: su_8_32\n let su_16_64 = [S16; S32; S64; U16; U32; U64]\n@@ -777,26 +779,40 @@ let ops =\n     Vceq, [], All (3, Qreg), \"vceqQ\", cmp_sign_invar, P8 :: F32 :: su_8_32;\n \n     (* Comparison, greater-than or equal.  *)\n-    Vcge, [], All (3, Dreg), \"vcge\", cmp_sign_matters, F32 :: su_8_32;\n-    Vcge, [], All (3, Qreg), \"vcgeQ\", cmp_sign_matters, F32 :: su_8_32;\n+    Vcge, [], All (3, Dreg), \"vcge\", cmp_sign_matters, F32 :: s_8_32;\n+    Vcge, [Builtin_name \"vcgeu\"], All (3, Dreg), \"vcge\", cmp_sign_matters, u_8_32;\n+    Vcge, [], All (3, Qreg), \"vcgeQ\", cmp_sign_matters, F32 :: s_8_32;\n+    Vcge, [Builtin_name \"vcgeu\"], All (3, Qreg), \"vcgeQ\", cmp_sign_matters, u_8_32;\n \n     (* Comparison, less-than or equal.  *)\n     Vcle, [Flipped \"vcge\"], All (3, Dreg), \"vcle\", cmp_sign_matters,\n-      F32 :: su_8_32;\n+      F32 :: s_8_32;\n+    Vcle, [Flipped \"vcgeu\"], All (3, Dreg), \"vcle\", cmp_sign_matters,\n+      u_8_32;\n     Vcle, [Instruction_name [\"vcge\"]; Flipped \"vcgeQ\"],\n       All (3, Qreg), \"vcleQ\", cmp_sign_matters,\n-      F32 :: su_8_32;\n+      F32 :: s_8_32;\n+    Vcle, [Instruction_name [\"vcge\"]; Flipped \"vcgeuQ\"],\n+      All (3, Qreg), \"vcleQ\", cmp_sign_matters,\n+      u_8_32;\n \n     (* Comparison, greater-than.  *)\n-    Vcgt, [], All (3, Dreg), \"vcgt\", cmp_sign_matters, F32 :: su_8_32;\n-    Vcgt, [], All (3, Qreg), \"vcgtQ\", cmp_sign_matters, F32 :: su_8_32;\n+    Vcgt, [], All (3, Dreg), \"vcgt\", cmp_sign_matters, F32 :: s_8_32;\n+    Vcgt, [Builtin_name \"vcgtu\"], All (3, Dreg), \"vcgt\", cmp_sign_matters, u_8_32;\n+    Vcgt, [], All (3, Qreg), \"vcgtQ\", cmp_sign_matters, F32 :: s_8_32;\n+    Vcgt, [Builtin_name \"vcgtu\"], All (3, Qreg), \"vcgtQ\", cmp_sign_matters, u_8_32;\n \n     (* Comparison, less-than.  *)\n     Vclt, [Flipped \"vcgt\"], All (3, Dreg), \"vclt\", cmp_sign_matters,\n-      F32 :: su_8_32;\n+      F32 :: s_8_32;\n+    Vclt, [Flipped \"vcgtu\"], All (3, Dreg), \"vclt\", cmp_sign_matters,\n+      u_8_32;\n     Vclt, [Instruction_name [\"vcgt\"]; Flipped \"vcgtQ\"],\n       All (3, Qreg), \"vcltQ\", cmp_sign_matters,\n-      F32 :: su_8_32;\n+      F32 :: s_8_32;\n+    Vclt, [Instruction_name [\"vcgt\"]; Flipped \"vcgtuQ\"],\n+      All (3, Qreg), \"vcltQ\", cmp_sign_matters,\n+      u_8_32;\n \n     (* Compare absolute greater-than or equal.  *)\n     Vcage, [Instruction_name [\"vacge\"]],"}, {"sha": "d835796bff0d13bab8a31e583e9fca644f59ef07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd92bb80a81651c7eb2159da03b39ba098890bc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd92bb80a81651c7eb2159da03b39ba098890bc1", "patch": "@@ -1,3 +1,8 @@\n+2012-02-28  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+\tPR target/51534\n+\t* gcc.target/arm/neon/pr51534.c: New testcase.\n+\n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/52407"}]}