{"sha": "13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlZTQwN2UwMmY5YmRkN2QxODIzMDFmOWNjZDFlOGEyMzZkZWMwZQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jquinn@nortelnetworks.com", "date": "1999-04-26T00:04:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-26T00:04:54Z"}, "message": "pa-hpux.h, [...]: Replace TARGET_SNAKE by TARGET_PA_11 and MASK_SNAKE by MASK_PA_11.\n\n        * pa/pa-hpux.h, pa/pa-hpux10.h, pa/pa-hpux9.h, pa/pa-osf.h, pa.h,\n        pa.c, pa.md, configure.in, configure: Replace TARGET_SNAKE by\n        TARGET_PA_11 and MASK_SNAKE by MASK_PA_11.\n\nFrom-SVN: r26630", "tree": {"sha": "0af4161ceb0c95b5311d99c7ff567aa135e1a043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af4161ceb0c95b5311d99c7ff567aa135e1a043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/comments", "author": null, "committer": null, "parents": [{"sha": "f9e814f10036123463e12b12065d9576f80f6e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e814f10036123463e12b12065d9576f80f6e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e814f10036123463e12b12065d9576f80f6e23"}], "stats": {"total": 102, "additions": 54, "deletions": 48}, "files": [{"sha": "75802c5cba8e7ceb3482362b11178a62ed448d5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -1,3 +1,9 @@\n+Mon Apr 26 00:58:54 1999  Jerry Quinn <jquinn@nortelnetworks.com>\n+\n+\t* pa/pa-hpux.h, pa/pa-hpux10.h, pa/pa-hpux9.h, pa/pa-osf.h, pa.h,\n+\tpa.c, pa.md, configure.in, configure: Replace TARGET_SNAKE by\n+\tTARGET_PA_11 and MASK_SNAKE by MASK_PA_11.\n+\n Mon Apr 26 00:28:25 1999  Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n  \t* flags.h (inline_max_insns): Declare."}, {"sha": "84016d25e63bdfe1af2f760464629e3767141405", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -Asystem(unix) -Asystem(hpux) -Acpu(hppa) -Amachine(hppa)\"\n \n #undef LINK_SPEC\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_SNAKE)\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11)\n #define LINK_SPEC \\\n   \"%{!mpa-risc-1-0:%{!shared:-L/lib/pa1.1 -L/usr/lib/pa1.1 }}%{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{g*:-a archive} %{shared:-b}\"\n #else"}, {"sha": "ec56cc675819f159cd8dd9dea23f9f6429fb8c87", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n /* We can debug dynamically linked executables on hpux9; we also want\n    dereferencing of a NULL pointer to cause a SEGV.  */\n #undef LINK_SPEC\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) &  MASK_SNAKE)\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) &  MASK_PA_11)\n #define LINK_SPEC \\\n   \"%{!mpa-risc-1-0:%{!shared:-L/lib/pa1.1 -L/usr/lib/pa1.1 }} -z %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:-b}\"\n #else\n@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE) \\\n do {  \\\n-     if (TARGET_SNAKE) \\\n+     if (TARGET_PA_11) \\\n        fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n      else \\\n        fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\"}, {"sha": "89dbbc9ef46896f802425b48abb52dff4eaff849", "filename": "gcc/config/pa/pa-hpux9.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-hpux9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-hpux9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux9.h?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n /* We can debug dynamically linked executables on hpux9; we also want\n    dereferencing of a NULL pointer to cause a SEGV.  */\n #undef LINK_SPEC\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_SNAKE)\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11)\n #define LINK_SPEC \\\n   \"%{!mpa-risc-1-0:%{!shared:-L/lib/pa1.1 -L/usr/lib/pa1.1 }} -z %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:-b}\"\n #else"}, {"sha": "40aa9f5c8dbd348bae0164fc499b31de628de2d9", "filename": "gcc/config/pa/pa-osf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-osf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa-osf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-osf.h?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef CPP_PREDEFINES\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_SNAKE)\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11)\n #define CPP_PREDEFINES \"-Dhppa -Dunix -Dhp9000 -Dspectrum -DREVARGV -Dhp700 -DHP700 -Dparisc -D__pa_risc -DPARISC -DBYTE_MSF -DBIT_MSF -Asystem(unix) -Asystem(mach) -Acpu(hppa) -Amachine(hppa)\"\n #else\n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Dparisc -D__pa_risc -DPARISC -DBYTE_MSF -DBIT_MSF -Asystem(unix) -Asystem(mach) -Acpu(hppa) -Amachine(hppa)\""}, {"sha": "26a520d336044d694b9276c490db1fa41e65787c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -70,8 +70,8 @@ extern int target_flags;\n \n /* compile code for HP-PA 1.1 (\"Snake\") */\n \n-#define MASK_SNAKE 1\n-#define TARGET_SNAKE (target_flags & MASK_SNAKE)\n+#define MASK_PA_11 1\n+#define TARGET_PA_11 (target_flags & MASK_PA_11)\n \n /* Disable all FP registers (they all become fixed).  This may be necessary\n    for compiling kernels which perform lazy context switching of FP regs.\n@@ -144,10 +144,10 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES \\\n-  {{\"snake\", MASK_SNAKE, \"Generate PA1.1 code\"},\t\t\t\\\n-   {\"nosnake\", -MASK_SNAKE, \"Do not generate PA1.1 code\"},\t\t\\\n-   {\"pa-risc-1-0\", -MASK_SNAKE, \"Do not generate PA1.1 code\"},\t\t\\\n-   {\"pa-risc-1-1\", MASK_SNAKE, \"Generate PA1.1 code\"},\t\t\t\\\n+  {{\"snake\", MASK_PA_11, \"Generate PA1.1 code\"},\t\t\t\\\n+   {\"nosnake\", -MASK_PA_11, \"Do not generate PA1.1 code\"},\t\t\\\n+   {\"pa-risc-1-0\", -MASK_PA_11, \"Do not generate PA1.1 code\"},\t\t\\\n+   {\"pa-risc-1-1\", MASK_PA_11, \"Generate PA1.1 code\"},\t\t\t\\\n    {\"disable-fpregs\", MASK_DISABLE_FPREGS, \"Disable FP regs\"},\t\t\\\n    {\"no-disable-fpregs\", -MASK_DISABLE_FPREGS, \"Do not disable FP regs\"},\\\n    {\"no-space-regs\", MASK_NO_SPACE_REGS, \"Disable space regs\"},\t\t\\\n@@ -254,7 +254,7 @@ extern int target_flags;\n   fprintf (FILE,\t\t\t\t\t\t\t\\\n \t   \"\\t.stabs \\\"\\\",%d,0,0,L$text_end0000\\nL$text_end0000:\\n\", N_SO)\n \n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_SNAKE) == 0\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11) == 0\n #define CPP_SPEC \"%{msnake:-D__hp9000s700 -D_PA_RISC1_1}\\\n  %{mpa-risc-1-1:-D__hp9000s700 -D_PA_RISC1_1}\\\n  %{!ansi: -D_HPUX_SOURCE -D_HIUX_SOURCE}\\\n@@ -547,7 +547,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define CONDITIONAL_REGISTER_USAGE \\\n {\t\t\t\t\t\t\\\n-  if (!TARGET_SNAKE)\t\t\t\t\\\n+  if (!TARGET_PA_11)\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       for (i = 56; i < 88; i++) \t\t\\\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n@@ -614,7 +614,7 @@ do {\t\t\t\t\t\t\t\t\\\n    The floating point registers are 64 bits wide. Snake fp regs are 32\n    bits wide */\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n-  (!TARGET_SNAKE && FP_REGNO_P (REGNO) ? 1\t\t\t\t\\\n+  (!TARGET_PA_11 && FP_REGNO_P (REGNO) ? 1\t\t\t\t\\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n@@ -623,7 +623,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n   ((REGNO) == 0 ? (MODE) == CCmode || (MODE) == CCFPmode\t\t\\\n    /* On 1.0 machines, don't allow wide non-fp modes in fp regs. */\t\\\n-   : !TARGET_SNAKE && FP_REGNO_P (REGNO)\t\t\t\t\\\n+   : !TARGET_PA_11 && FP_REGNO_P (REGNO)\t\t\t\t\\\n      ? GET_MODE_SIZE (MODE) <= 4 || GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n    /* Make wide modes be in aligned registers. */\t\t\t\\\n    : GET_MODE_SIZE (MODE) <= 4 || ((REGNO) & 1) == 0)\n@@ -834,7 +834,7 @@ int zdepi_cint_p ();\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n-  (!TARGET_SNAKE && ((CLASS) == FP_REGS || (CLASS) == FPUPPER_REGS) ? 1 :\t\t\t\t\\\n+  (!TARGET_PA_11 && ((CLASS) == FP_REGS || (CLASS) == FPUPPER_REGS) ? 1 :\t\t\t\t\\\n    ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \f\n /* Stack layout; function entry, exit and calling.  */\n@@ -1955,7 +1955,7 @@ while (0)\n   case MULT:\t\t\t\t\t\t\t\t\\\n     if (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\t\t\\\n       return COSTS_N_INSNS (3);\t\t\t\t\t\t\\\n-    return (TARGET_SNAKE && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT) \\\n+    return (TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT) \\\n \t    ? COSTS_N_INSNS (8) : COSTS_N_INSNS (20);\t\\\n   case DIV:\t\t\t\t\t\t\t\t\\\n     if (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\t\t\\"}, {"sha": "c4e065a390ef223b833dc3b9c2ca2732f9ad7e29", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -2834,7 +2834,7 @@\n \t(const_int 0))\n    (set (match_operand:SF 0 \"register_operand\" \"\")\n \t(float:SF (match_dup 2)))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n   \"operands[2] = gen_reg_rtx (DImode);\")\n \n (define_expand \"floatunssidf2\"\n@@ -2844,21 +2844,21 @@\n \t(const_int 0))\n    (set (match_operand:DF 0 \"register_operand\" \"\")\n \t(float:DF (match_dup 2)))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n   \"operands[2] = gen_reg_rtx (DImode);\")\n \n (define_insn \"floatdisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:DI 1 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n   \"fcnvxf,dbl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n   \"fcnvxf,dbl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n@@ -2885,15 +2885,15 @@\n (define_insn \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n   \"fcnvfxt,sgl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n   \"fcnvfxt,dbl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n@@ -3062,7 +3062,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_SNAKE && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT)\n+  if (TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT)\n     {\n       rtx scratch = gen_reg_rtx (DImode);\n       operands[1] = force_reg (SImode, operands[1]);\n@@ -3080,7 +3080,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=f\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"f\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"f\"))))]\n-  \"TARGET_SNAKE && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n   \"xmpyu %1,%2,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n@@ -3089,7 +3089,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=f\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"f\"))\n \t\t (match_operand:DI 2 \"uint32_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n   \"xmpyu %1,%R2,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n@@ -4864,7 +4864,7 @@\n    (set (match_operand 3 \"register_operand\" \"+f\")\n \t(plus (match_operand 4 \"register_operand\" \"f\")\n \t      (match_operand 5 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\n    && reload_completed && fmpyaddoperands (operands)\"\n   \"*\n {\n@@ -4893,7 +4893,7 @@\n    (set (match_operand 0 \"register_operand\" \"=f\")\n \t(mult (match_operand 1 \"register_operand\" \"f\")\n \t      (match_operand 2 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\n    && reload_completed && fmpyaddoperands (operands)\"\n   \"*\n {\n@@ -4922,7 +4922,7 @@\n    (set (match_operand 3 \"register_operand\" \"+f\")\n \t(minus (match_operand 4 \"register_operand\" \"f\")\n \t       (match_operand 5 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\n    && reload_completed && fmpysuboperands (operands)\"\n   \"*\n {\n@@ -4941,7 +4941,7 @@\n    (set (match_operand 0 \"register_operand\" \"=f\")\n \t(mult (match_operand 1 \"register_operand\" \"f\")\n \t      (match_operand 2 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && ! TARGET_SOFT_FLOAT\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\n    && reload_completed && fmpysuboperands (operands)\"\n   \"*\n {"}, {"sha": "769961b581401116002b9a7010939733f66a3e8e", "filename": "gcc/configure", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -3234,7 +3234,7 @@ for machine in $build $host $target; do\n \t\tfloat_format=i32\n \t\t;;\n \thppa*-*-openbsd*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttmake_file=pa/t-openbsd\n \t\t;;\n \thppa1.1-*-pro*)\n@@ -3243,7 +3243,7 @@ for machine in $build $host $target; do\n \t\ttmake_file=pa/t-pro\n \t\t;;\n \thppa1.1-*-osf*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-osf.h\"\n \t\tuse_collect2=yes\n \t\t;;\n@@ -3257,7 +3257,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-bsd*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.0-*-bsd*)\n@@ -3288,7 +3288,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux8.0[0-2]*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -3302,7 +3302,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux8*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -3325,7 +3325,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux10* | hppa2*-*-hpux10*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h pa/pa-hpux10.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -3364,7 +3364,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux* | hppa2*-*-hpux*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h pa/pa-hpux9.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -3387,7 +3387,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hiux* | hppa2*-*-hiux*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h pa/pa-hiux.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -3410,7 +3410,7 @@ for machine in $build $host $target; do\n \t\tuse_collect2=yes\n \t\t;;\n \thppa*-*-lites*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\tuse_collect2=yes\n \t\t;;\n \ti370-*-mvs*)"}, {"sha": "cfef1c64bdd8bd7dbe7c643b5bf89356284a0963", "filename": "gcc/configure.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ee407e02f9bdd7d182301f9ccd1e8a236dec0e/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=13ee407e02f9bdd7d182301f9ccd1e8a236dec0e", "patch": "@@ -819,7 +819,7 @@ changequote([,])dnl\n \t\tfloat_format=i32\n \t\t;;\n \thppa*-*-openbsd*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttmake_file=pa/t-openbsd\n \t\t;;\n \thppa1.1-*-pro*)\n@@ -828,7 +828,7 @@ changequote([,])dnl\n \t\ttmake_file=pa/t-pro\n \t\t;;\n \thppa1.1-*-osf*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-osf.h\"\n \t\tuse_collect2=yes\n \t\t;;\n@@ -842,7 +842,7 @@ changequote([,])dnl\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-bsd*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.0-*-bsd*)\n@@ -877,7 +877,7 @@ changequote([,])dnl\n changequote(,)dnl\n \thppa1.1-*-hpux8.0[0-2]*)\n changequote([,])dnl\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -891,7 +891,7 @@ changequote([,])dnl\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux8*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -914,7 +914,7 @@ changequote([,])dnl\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux10* | hppa2*-*-hpux10*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h pa/pa-hpux10.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -953,7 +953,7 @@ changequote([,])dnl\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hpux* | hppa2*-*-hpux*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h pa/pa-hpux9.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -976,7 +976,7 @@ changequote([,])dnl\n \t\tuse_collect2=yes\n \t\t;;\n \thppa1.1-*-hiux* | hppa2*-*-hiux*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\ttm_file=\"${tm_file} pa/pa-hpux.h pa/pa-hiux.h\"\n \t\txm_file=pa/xm-pahpux.h\n \t\txmake_file=pa/x-pa-hpux\n@@ -999,7 +999,7 @@ changequote([,])dnl\n \t\tuse_collect2=yes\n \t\t;;\n \thppa*-*-lites*)\n-\t\ttarget_cpu_default=\"MASK_SNAKE\"\n+\t\ttarget_cpu_default=\"MASK_PA_11\"\n \t\tuse_collect2=yes\n \t\t;;\n \ti370-*-mvs*)"}]}