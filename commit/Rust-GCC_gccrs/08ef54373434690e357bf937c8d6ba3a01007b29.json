{"sha": "08ef54373434690e357bf937c8d6ba3a01007b29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlZjU0MzczNDM0NjkwZTM1N2JmOTM3YzhkNmJhM2EwMTAwN2IyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-29T17:46:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-29T17:46:38Z"}, "message": "flow.c (print_rtl_and_abort): Remove.\n\n        * flow.c (print_rtl_and_abort): Remove.\n        (print_rtl_and_abort_fcn): Remove.\n        (verify_local_live_at_start): Use dump_bb instead.\n        (verify_wide_reg): Likewise. Take a basic_block, not rtl endpoints.\n        (verify_wide_reg_1): Return 2 on mode test failure.\n\nFrom-SVN: r49323", "tree": {"sha": "bf589a1793d629535615c1ec7babadc2c019b18f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf589a1793d629535615c1ec7babadc2c019b18f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08ef54373434690e357bf937c8d6ba3a01007b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ef54373434690e357bf937c8d6ba3a01007b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ef54373434690e357bf937c8d6ba3a01007b29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ef54373434690e357bf937c8d6ba3a01007b29/comments", "author": null, "committer": null, "parents": [{"sha": "d82b2ced453985013b8b5318df3528fe3f2926dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82b2ced453985013b8b5318df3528fe3f2926dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82b2ced453985013b8b5318df3528fe3f2926dc"}], "stats": {"total": 87, "additions": 41, "deletions": 46}, "files": [{"sha": "0fea8542e2a60d185708136c762e65445d006357", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ef54373434690e357bf937c8d6ba3a01007b29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ef54373434690e357bf937c8d6ba3a01007b29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08ef54373434690e357bf937c8d6ba3a01007b29", "patch": "@@ -1,3 +1,11 @@\n+2002-01-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* flow.c (print_rtl_and_abort): Remove.\n+\t(print_rtl_and_abort_fcn): Remove.\n+\t(verify_local_live_at_start): Use dump_bb instead.\n+\t(verify_wide_reg): Likewise. Take a basic_block, not rtl endpoints.\n+\t(verify_wide_reg_1): Return 2 on mode test failure.\n+\n 2002-01-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \tPR c/3325, c/3326, c/2511, c/3347"}, {"sha": "315cb2d7e85851e4da01a3f38ca2ca4953d852c6", "filename": "gcc/flow.c", "status": "modified", "additions": 33, "deletions": 46, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ef54373434690e357bf937c8d6ba3a01007b29/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ef54373434690e357bf937c8d6ba3a01007b29/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=08ef54373434690e357bf937c8d6ba3a01007b29", "patch": "@@ -280,14 +280,9 @@ struct propagate_block_info\n    new elements on the floor.  */\n #define MAX_MEM_SET_LIST_LEN\t100\n \n-/* Have print_rtl_and_abort give the same information that fancy_abort\n-   does.  */\n-#define print_rtl_and_abort() \\\n-  print_rtl_and_abort_fcn (__FILE__, __LINE__, __FUNCTION__)\n-\n /* Forward declarations */\n static int verify_wide_reg_1\t\tPARAMS ((rtx *, void *));\n-static void verify_wide_reg\t\tPARAMS ((int, rtx, rtx));\n+static void verify_wide_reg\t\tPARAMS ((int, basic_block));\n static void verify_local_live_at_start\tPARAMS ((regset, basic_block));\n static void notice_stack_pointer_modification_1 PARAMS ((rtx, rtx, void *));\n static void notice_stack_pointer_modification PARAMS ((rtx));\n@@ -335,10 +330,6 @@ static void mark_used_regs\t\tPARAMS ((struct propagate_block_info *,\n \t\t\t\t\t\t rtx, rtx, rtx));\n void dump_flow_info\t\t\tPARAMS ((FILE *));\n void debug_flow_info\t\t\tPARAMS ((void));\n-static void print_rtl_and_abort_fcn\tPARAMS ((const char *, int,\n-\t\t\t\t\t\t const char *))\n-\t\t\t\t\tATTRIBUTE_NORETURN;\n-\n static void add_to_mem_set_list\t\tPARAMS ((struct propagate_block_info *,\n \t\t\t\t\t\t rtx));\n static void invalidate_mems_from_autoinc PARAMS ((struct propagate_block_info *,\n@@ -510,7 +501,8 @@ life_analysis (f, file, flags)\n }\n \n /* A subroutine of verify_wide_reg, called through for_each_rtx.\n-   Search for REGNO.  If found, abort if it is not wider than word_mode.  */\n+   Search for REGNO.  If found, return 2 if it is not wider than\n+   word_mode.  */\n \n static int\n verify_wide_reg_1 (px, pregno)\n@@ -523,34 +515,43 @@ verify_wide_reg_1 (px, pregno)\n   if (GET_CODE (x) == REG && REGNO (x) == regno)\n     {\n       if (GET_MODE_BITSIZE (GET_MODE (x)) <= BITS_PER_WORD)\n-\tabort ();\n+\treturn 2;\n       return 1;\n     }\n   return 0;\n }\n \n /* A subroutine of verify_local_live_at_start.  Search through insns\n-   between HEAD and END looking for register REGNO.  */\n+   of BB looking for register REGNO.  */\n \n static void\n-verify_wide_reg (regno, head, end)\n+verify_wide_reg (regno, bb)\n      int regno;\n-     rtx head, end;\n+     basic_block bb;\n {\n+  rtx head = bb->head, end = bb->end;\n+\n   while (1)\n     {\n-      if (INSN_P (head)\n-\t  && for_each_rtx (&PATTERN (head), verify_wide_reg_1, &regno))\n-\treturn;\n+      if (INSN_P (head))\n+\t{\n+\t  int r = for_each_rtx (&PATTERN (head), verify_wide_reg_1, &regno);\n+\t  if (r == 1)\n+\t    return;\n+\t  if (r == 2)\n+\t    break;\n+\t}\n       if (head == end)\n \tbreak;\n       head = NEXT_INSN (head);\n     }\n \n-  /* We didn't find the register at all.  Something's way screwy.  */\n   if (rtl_dump_file)\n-    fprintf (rtl_dump_file, \"Aborting in verify_wide_reg; reg %d\\n\", regno);\n-  print_rtl_and_abort ();\n+    {\n+      fprintf (rtl_dump_file, \"Register %d died unexpectedly.\\n\", regno);\n+      dump_bb (bb, rtl_dump_file);\n+    }\n+  abort ();\n }\n \n /* A subroutine of update_life_info.  Verify that there are no untoward\n@@ -570,12 +571,13 @@ verify_local_live_at_start (new_live_at_start, bb)\n \t  if (rtl_dump_file)\n \t    {\n \t      fprintf (rtl_dump_file,\n-\t\t       \"live_at_start mismatch in bb %d, aborting\\n\",\n+\t\t       \"live_at_start mismatch in bb %d, aborting\\nNew:\\n\",\n \t\t       bb->index);\n-\t      debug_bitmap_file (rtl_dump_file, bb->global_live_at_start);\n \t      debug_bitmap_file (rtl_dump_file, new_live_at_start);\n+\t      fputs (\"Old:\\n\", rtl_dump_file);\n+\t      dump_bb (bb, rtl_dump_file);\n \t    }\n-\t  print_rtl_and_abort ();\n+\t  abort ();\n \t}\n     }\n   else\n@@ -591,14 +593,16 @@ verify_local_live_at_start (new_live_at_start, bb)\n \t  if (REGNO_REG_SET_P (bb->global_live_at_start, i))\n \t    {\n \t      if (rtl_dump_file)\n-\t\tfprintf (rtl_dump_file,\n-\t\t\t \"Register %d died unexpectedly in block %d\\n\", i,\n-\t\t\t bb->index);\n-\t      print_rtl_and_abort ();\n+\t\t{\n+\t\t  fprintf (rtl_dump_file,\n+\t\t\t   \"Register %d died unexpectedly.\\n\", i);\n+\t\t  dump_bb (bb, rtl_dump_file);\n+\t\t}\n+\t      abort ();\n \t    }\n \n           /* Verify that the now-live register is wider than word_mode.  */\n-\t  verify_wide_reg (i, bb->head, bb->end);\n+\t  verify_wide_reg (i, bb);\n \t});\n     }\n }\n@@ -4112,23 +4116,6 @@ debug_regset (r)\n   putc ('\\n', stderr);\n }\n \n-/* Dump the rtl into the current debugging dump file, then abort.  */\n-\n-static void\n-print_rtl_and_abort_fcn (file, line, function)\n-     const char *file;\n-     int line;\n-     const char *function;\n-{\n-  if (rtl_dump_file)\n-    {\n-      print_rtl_with_bb (rtl_dump_file, get_insns ());\n-      fclose (rtl_dump_file);\n-    }\n-\n-  fancy_abort (file, line, function);\n-}\n-\n /* Recompute register set/reference counts immediately prior to register\n    allocation.\n "}]}