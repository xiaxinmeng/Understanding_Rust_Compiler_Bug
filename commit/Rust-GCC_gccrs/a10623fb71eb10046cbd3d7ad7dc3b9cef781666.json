{"sha": "a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwNjIzZmI3MWViMTAwNDZjYmQzZDdhZDdkYzNiOWNlZjc4MTY2Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-09-19T13:18:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-09-19T13:18:26Z"}, "message": "decl.c (gnat_to_gnu_entity): Explicitly test _LEVEL variables against zero in all cases.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Explicitly test _LEVEL\n\tvariables against zero in all cases.\n\t(rest_of_type_decl_compilation): Likewise.\n\t* gcc-interface/trans.c (gigi): Pass properly typed constants to\n\tcreate_var_decl.\n\t(call_to_gnu): Fix formatting.\n\t(Handled_Sequence_Of_Statements_to_gnu): Likewise.\n\t(Exception_Handler_to_gnu_zcx): Likewise.\n\t(gnat_to_gnu) <N_Object_Declaration>: Short-circuit handling of\n\tconstant\n\texpressions in presence of a freeze node.\n\nFrom-SVN: r164415", "tree": {"sha": "a5ed8033e0b3c5546a5519b7b314e7bbb3dd8ed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ed8033e0b3c5546a5519b7b314e7bbb3dd8ed4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/comments", "author": null, "committer": null, "parents": [{"sha": "50a6af053af7a89702c7093eec85b717257e88bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a6af053af7a89702c7093eec85b717257e88bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a6af053af7a89702c7093eec85b717257e88bc"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "713edf458e25744976b2b691e702013f9c244f90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "patch": "@@ -1,3 +1,17 @@\n+2010-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Explicitly test _LEVEL\n+\tvariables against zero in all cases.\n+\t(rest_of_type_decl_compilation): Likewise.\n+\t* gcc-interface/trans.c (gigi): Pass properly typed constants to\n+\tcreate_var_decl.\n+\t(call_to_gnu): Fix formatting.\n+\t(Handled_Sequence_Of_Statements_to_gnu): Likewise.\n+\t(Exception_Handler_to_gnu_zcx): Likewise.\n+\t(gnat_to_gnu) <N_Object_Declaration>: Short-circuit handling of\n+\tconstant\n+\texpressions in presence of a freeze node.\n+\n 2010-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Look into"}, {"sha": "850777d860902ec1bc42cd02d8cc67d6e1f6a073", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "patch": "@@ -3510,7 +3510,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    && TYPE_IS_DUMMY_P\n \t\t       (TREE_TYPE (get_gnu_tree (gnat_desig_equiv))))\n \t\t|| (!in_main_unit\n-\t\t    && defer_incomplete_level\n+\t\t    && defer_incomplete_level != 0\n \t\t    && !present_gnu_tree (gnat_desig_equiv))\n \t\t|| (in_main_unit\n \t\t    && is_from_limited_with\n@@ -3594,7 +3594,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    access type may be the full view of a private type.  Note\n \t\t    that the unconstrained array case is handled above.  */\n \t\t || ((!in_main_unit || imported_p)\n-\t\t     && defer_incomplete_level\n+\t\t     && defer_incomplete_level != 0\n \t\t     && !present_gnu_tree (gnat_desig_equiv)\n \t\t     && (Is_Record_Type (gnat_desig_rep)\n \t\t\t || Is_Array_Type (gnat_desig_rep)))\n@@ -3728,7 +3728,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       Besides, variants of this non-dummy type might have been created\n \t       along the way.  update_pointer_to is expected to properly take\n \t       care of those situations.  */\n-\t    if (!defer_incomplete_level && !is_from_limited_with_in_main_unit)\n+\t    if (defer_incomplete_level == 0\n+\t\t&& !is_from_limited_with_in_main_unit)\n \t      update_pointer_to (TYPE_MAIN_VARIANT (gnu_old_desig_type),\n \t\t\t\t gnat_to_gnu_type (gnat_desig_equiv));\n \t    else\n@@ -5045,7 +5046,7 @@ rest_of_type_decl_compilation (tree decl)\n {\n   /* We need to defer finalizing the type if incomplete types\n      are being deferred or if they are being processed.  */\n-  if (defer_incomplete_level || defer_finalize_level)\n+  if (defer_incomplete_level != 0 || defer_finalize_level != 0)\n     VEC_safe_push (tree, heap, defer_finalize_list, decl);\n   else\n     rest_of_type_decl_compilation_no_defer (decl);"}, {"sha": "028419b5eb8b7f73c658da83cbc5102e13240c13", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10623fb71eb10046cbd3d7ad7dc3b9cef781666/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "patch": "@@ -593,12 +593,14 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n   others_decl\n     = create_var_decl (get_identifier (\"OTHERS\"),\n \t\t       get_identifier (\"__gnat_others_value\"),\n-\t\t       integer_type_node, 0, 1, 0, 1, 1, 0, Empty);\n+\t\t       integer_type_node, NULL_TREE, true, false, true, false,\n+\t\t       NULL, Empty);\n \n   all_others_decl\n     = create_var_decl (get_identifier (\"ALL_OTHERS\"),\n \t\t       get_identifier (\"__gnat_all_others_value\"),\n-\t\t       integer_type_node, 0, 1, 0, 1, 1, 0, Empty);\n+\t\t       integer_type_node, NULL_TREE, true, false, true, false,\n+\t\t       NULL, Empty);\n \n   main_identifier_node = get_identifier (\"main\");\n \n@@ -2788,8 +2790,8 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t  /* Create an explicit temporary holding the copy.  This ensures that\n \t     its lifetime is as narrow as possible around a statement.  */\n \t  gnu_temp = create_var_decl (create_tmp_var_name (\"A\"), NULL_TREE,\n-\t\t\t\t      TREE_TYPE (gnu_name), NULL_TREE, false,\n-\t\t\t\t      false, false, false, NULL, Empty);\n+\t\t\t\t      TREE_TYPE (gnu_name), NULL_TREE,\n+\t\t\t\t      false, false, false, false, NULL, Empty);\n \t  DECL_ARTIFICIAL (gnu_temp) = 1;\n \t  DECL_IGNORED_P (gnu_temp) = 1;\n \n@@ -3210,8 +3212,8 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n       gnu_jmpsave_decl = create_var_decl (get_identifier (\"JMPBUF_SAVE\"),\n \t\t\t\t\t  NULL_TREE, jmpbuf_ptr_type,\n \t\t\t\t\t  build_call_0_expr (get_jmpbuf_decl),\n-\t\t\t\t\t  false, false, false, false, NULL,\n-\t\t\t\t\t  gnat_node);\n+\t\t\t\t\t  false, false, false, false,\n+\t\t\t\t\t  NULL, gnat_node);\n       DECL_ARTIFICIAL (gnu_jmpsave_decl) = 1;\n \n       /* The __builtin_setjmp receivers will immediately reinstall it.  Now\n@@ -3220,8 +3222,8 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \t it is uninitialized, although they will never be actually taken.  */\n       TREE_NO_WARNING (gnu_jmpsave_decl) = 1;\n       gnu_jmpbuf_decl = create_var_decl (get_identifier (\"JMP_BUF\"),\n-\t\t\t\t\t NULL_TREE, jmpbuf_type,\n-\t\t\t\t\t NULL_TREE, false, false, false, false,\n+\t\t\t\t\t NULL_TREE, jmpbuf_type, NULL_TREE,\n+\t\t\t\t\t false, false, false, false,\n \t\t\t\t\t NULL, gnat_node);\n       DECL_ARTIFICIAL (gnu_jmpbuf_decl) = 1;\n \n@@ -3273,12 +3275,11 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n       gnat_pushlevel ();\n \n       VEC_safe_push (tree, gc, gnu_except_ptr_stack,\n-\t\t     create_var_decl (get_identifier (\"EXCEPT_PTR\"),\n-\t\t\t\t      NULL_TREE,\n+\t\t     create_var_decl (get_identifier (\"EXCEPT_PTR\"), NULL_TREE,\n \t\t\t\t      build_pointer_type (except_type_node),\n \t\t\t\t      build_call_0_expr (get_excptr_decl),\n-\t\t\t\t\t\t\t false,\n-\t\t\t\t      false, false, false, NULL, gnat_node));\n+\t\t\t\t      false, false, false, false,\n+\t\t\t\t      NULL, gnat_node));\n \n       /* Generate code for each handler. The N_Exception_Handler case does the\n \t real work and returns a COND_EXPR for each handler, which we chain\n@@ -3537,8 +3538,8 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n \t\t       1, integer_zero_node);\n   gnu_incoming_exc_ptr = create_var_decl (get_identifier (\"EXPTR\"), NULL_TREE,\n \t\t\t\t\t  ptr_type_node, gnu_current_exc_ptr,\n-\t\t\t\t\t  false, false, false, false, NULL,\n-\t\t\t\t\t  gnat_node);\n+\t\t\t\t\t  false, false, false, false,\n+\t\t\t\t\t  NULL, gnat_node);\n \n   add_stmt_with_node (build_call_1_expr (begin_handler_decl,\n \t\t\t\t\t gnu_incoming_exc_ptr),\n@@ -3997,13 +3998,16 @@ gnat_to_gnu (Node_Id gnat_node)\n \t     is frozen.  */\n \t  if (Present (Freeze_Node (gnat_temp)))\n \t    {\n-\t      if ((Is_Public (gnat_temp) || global_bindings_p ())\n-\t\t  && !TREE_CONSTANT (gnu_expr))\n+\t      bool public_flag = Is_Public (gnat_temp);\n+\n+\t      if (TREE_CONSTANT (gnu_expr))\n+\t\t;\n+\t      else if (public_flag || global_bindings_p ())\n \t\tgnu_expr\n \t\t  = create_var_decl (create_concat_name (gnat_temp, \"init\"),\n-\t\t\t\t     NULL_TREE, TREE_TYPE (gnu_expr),\n-\t\t\t\t     gnu_expr, false, Is_Public (gnat_temp),\n-\t\t\t\t     false, false, NULL, gnat_temp);\n+\t\t\t\t     NULL_TREE, TREE_TYPE (gnu_expr), gnu_expr,\n+\t\t\t\t     false, public_flag, false, false,\n+\t\t\t\t     NULL, gnat_temp);\n \t      else\n \t\tgnu_expr = gnat_save_expr (gnu_expr);\n "}]}