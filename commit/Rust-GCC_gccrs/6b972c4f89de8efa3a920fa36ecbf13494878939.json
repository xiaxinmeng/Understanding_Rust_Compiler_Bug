{"sha": "6b972c4f89de8efa3a920fa36ecbf13494878939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5NzJjNGY4OWRlOGVmYTNhOTIwZmEzNmVjYmYxMzQ5NDg3ODkzOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-17T23:36:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-17T23:36:20Z"}, "message": "(expand_call): Undo Feb 27 change.\n\n(expand_call): Undo Feb 27 change.  Set nregs to -1 for\nnormal case.\n\nFrom-SVN: r6805", "tree": {"sha": "42d022d8fb0ca4dbc448ad3d209b00c620a389a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d022d8fb0ca4dbc448ad3d209b00c620a389a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b972c4f89de8efa3a920fa36ecbf13494878939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b972c4f89de8efa3a920fa36ecbf13494878939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b972c4f89de8efa3a920fa36ecbf13494878939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b972c4f89de8efa3a920fa36ecbf13494878939/comments", "author": null, "committer": null, "parents": [{"sha": "5a157bc426da5786c153e3b04935cafa7f0c05ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a157bc426da5786c153e3b04935cafa7f0c05ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a157bc426da5786c153e3b04935cafa7f0c05ee"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "c7a85bed1f804789ed8bdbfbfdca10ae7e743aa4", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b972c4f89de8efa3a920fa36ecbf13494878939/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b972c4f89de8efa3a920fa36ecbf13494878939/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=6b972c4f89de8efa3a920fa36ecbf13494878939", "patch": "@@ -1782,19 +1782,21 @@ expand_call (exp, target, ignore)\n \t  else\n \t    reg = list, list = 0;\n \n-\t  /* Set to non-zero if must move a word at a time, even if just one\n-\t     word (e.g, partial == 1 && mode == DFmode).  Set to zero if\n-\t     we just use a normal move insn.  */\n+\t  /* Set to non-negative if must move a word at a time, even if just\n+\t     one word (e.g, partial == 1 && mode == DFmode).  Set to -1 if\n+\t     we just use a normal move insn.  This value can be zero if the\n+\t     argument is a zero size structure with no fields.  */\n \t  nregs = (partial ? partial\n \t\t   : (TYPE_MODE (TREE_TYPE (args[i].tree_value)) == BLKmode\n-\t\t      ? -1\n-\t\t      : 0));\n+\t\t      ? ((int_size_in_bytes (TREE_TYPE (args[i].tree_value))\n+\t\t\t  + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD)\n+\t\t      : -1));\n \n \t  /* If simple case, just do move.  If normal partial, store_one_arg\n \t     has already loaded the register for us.  In all other cases,\n \t     load the register(s) from memory.  */\n \n-\t  if (nregs == 0)\n+\t  if (nregs == -1)\n \t    emit_move_insn (reg, args[i].value);\n \n #ifdef STRICT_ALIGNMENT\n@@ -1808,19 +1810,12 @@ expand_call (exp, target, ignore)\n #endif\n \n \t  else if (args[i].partial == 0 || args[i].pass_on_stack)\n-\t    {\n-\t      /* This value might be zero, if the argument is a zero size\n-\t\t structure with no fields, so we can't use it to set nregs\n-\t\t above.  */\n-\t      nregs = ((int_size_in_bytes (TREE_TYPE (args[i].tree_value))\n-\t\t\t+ (UNITS_PER_WORD - 1)) / UNITS_PER_WORD);\n-\t      move_block_to_reg (REGNO (reg),\n-\t\t\t\t validize_mem (args[i].value), nregs,\n-\t\t\t\t args[i].mode);\n-\t    }\n+\t    move_block_to_reg (REGNO (reg),\n+\t\t\t       validize_mem (args[i].value), nregs,\n+\t\t\t       args[i].mode);\n \t\n \t  push_to_sequence (use_insns);\n-\t  if (nregs == 0)\n+\t  if (nregs == -1)\n \t    emit_insn (gen_rtx (USE, VOIDmode, reg));\n \t  else\n \t    use_regs (REGNO (reg), nregs);"}]}