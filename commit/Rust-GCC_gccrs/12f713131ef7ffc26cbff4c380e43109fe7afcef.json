{"sha": "12f713131ef7ffc26cbff4c380e43109fe7afcef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmNzEzMTMxZWY3ZmZjMjZjYmZmNGMzODBlNDMxMDlmZTdhZmNlZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-09-21T02:51:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-09-21T02:51:40Z"}, "message": "[C++ PATCH] class member ordering\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-09/msg01426.html\n\t* name-lookup.c (member_name_cmp): Use DECL_UID for final\n\tordering.\n\nFrom-SVN: r253048", "tree": {"sha": "f5078591ce0e506d3f6a11aa120ee7c50286b318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5078591ce0e506d3f6a11aa120ee7c50286b318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f713131ef7ffc26cbff4c380e43109fe7afcef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f713131ef7ffc26cbff4c380e43109fe7afcef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f713131ef7ffc26cbff4c380e43109fe7afcef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f713131ef7ffc26cbff4c380e43109fe7afcef/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ed32e278609dd7544366ac3639b7ecb5ad4d60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed32e278609dd7544366ac3639b7ecb5ad4d60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed32e278609dd7544366ac3639b7ecb5ad4d60f"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "b8d3f04f70f4760d6f6eef82a6c96cbf007759fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f713131ef7ffc26cbff4c380e43109fe7afcef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f713131ef7ffc26cbff4c380e43109fe7afcef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12f713131ef7ffc26cbff4c380e43109fe7afcef", "patch": "@@ -1,3 +1,8 @@\n+2017-09-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (member_name_cmp): Use DECL_UID for final\n+\tordering.\n+\n 2017-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0409R2 - allow lambda capture [=, this]"}, {"sha": "a3a124b9ce208c9e79dbd3d50675f05de239c4c3", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f713131ef7ffc26cbff4c380e43109fe7afcef/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f713131ef7ffc26cbff4c380e43109fe7afcef/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=12f713131ef7ffc26cbff4c380e43109fe7afcef", "patch": "@@ -1434,29 +1434,38 @@ member_name_cmp (const void *a_p, const void *b_p)\n     b = OVL_FUNCTION (b);\n \n   /* We're in STAT_HACK or USING_DECL territory (or possibly error-land). */\n-  if (TREE_CODE (a) == TREE_CODE (b))\n-    /* We can get two TYPE_DECLs or two USING_DECLs.  Place in source\n-       order.  */\n-    return DECL_SOURCE_LOCATION (a) < DECL_SOURCE_LOCATION (b) ? -1 : +1;\n-\n-  /* If one of them is a TYPE_DECL, it loses.  */\n-  if (TREE_CODE (a) == TYPE_DECL)\n-    return +1;\n-  else if (TREE_CODE (b) == TYPE_DECL)\n-    return -1;\n-\n-  /* If one of them is a USING_DECL, it loses.  */\n-  if (TREE_CODE (a) == USING_DECL)\n-    return +1;\n-  else if (TREE_CODE (b) == USING_DECL)\n-    return -1;\n-\n-  /* There are no other cases, as duplicate detection should have\n-     kicked in earlier.  However, some erroneous cases get though.\n-     Order by source location.  We should really prevent this\n-     happening.  */\n-  gcc_assert (errorcount);\n-  return DECL_SOURCE_LOCATION (a) < DECL_SOURCE_LOCATION (b) ? -1 : +1;\n+  if (TREE_CODE (a) != TREE_CODE (b))\n+    {\n+      /* If one of them is a TYPE_DECL, it loses.  */\n+      if (TREE_CODE (a) == TYPE_DECL)\n+\treturn +1;\n+      else if (TREE_CODE (b) == TYPE_DECL)\n+\treturn -1;\n+\n+      /* If one of them is a USING_DECL, it loses.  */\n+      if (TREE_CODE (a) == USING_DECL)\n+\treturn +1;\n+      else if (TREE_CODE (b) == USING_DECL)\n+\treturn -1;\n+\n+      /* There are no other cases with different kinds of decls, as\n+\t duplicate detection should have kicked in earlier.  However,\n+\t some erroneous cases get though. */\n+      gcc_assert (errorcount);\n+    }\n+  \n+  /* Using source location would be the best thing here, but we can\n+     get identically-located decls in the following circumstances:\n+\n+     1) duplicate artificial type-decls for the same type.\n+\n+     2) pack expansions of using-decls.\n+\n+     We should not be doing #1, but in either case it doesn't matter\n+     how we order these.  Use UID as a proxy for source ordering, so\n+     that identically-located decls still have a well-defined stable\n+     ordering.  */\n+  return DECL_UID (a) < DECL_UID (b) ? -1 : +1;\n }\n \n static struct {"}]}