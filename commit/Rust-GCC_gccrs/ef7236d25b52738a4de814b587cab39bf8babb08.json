{"sha": "ef7236d25b52738a4de814b587cab39bf8babb08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3MjM2ZDI1YjUyNzM4YTRkZTgxNGI1ODdjYWIzOWJmOGJhYmIwOA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-07-06T12:37:22Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-06T12:37:22Z"}, "message": "re PR fortran/32633 (bogus error)\n\ngcc/fortran:\n2007-05-06  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/32633\n        * symbol.c (save_status): New.\n        * gfortran.h (save_status): Added external declaration.\n        (check_conflict): Check for conflicting explicite SAVE statements\n        only.\n        (gen_special_c_interop_ptr): Use SAVE_EXPLICIT constant.\n        * module.c (ab_attribute, attr_bits): Removed enumerator value \n\tAB_SAVE for save attribute.\n        (mio_symbol_attribute): Import/export the full SAVE status,\n        removed usage of AB_SAVE.\n        * dump-parse-tree.c (gfc_show_attr): Dump full SAVE status.\n        * decl.c (add_init_expr_to_sym): Set SAVE_IMPLICIT only if not\n        already explicit.\n\ngcc/testsuite:\n2007-07-06  Daniel Franke  <franke.daniel@gmail.com>\n\n        * gfortran.dg/save_parameter.f90: New test.\n        * gfortran.dg/module_md5_1.f90: Updated MD5 sum.\n\nFrom-SVN: r126413", "tree": {"sha": "e23e329b9cee8d78d66c5fb40698f15edf6dcf2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e23e329b9cee8d78d66c5fb40698f15edf6dcf2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7236d25b52738a4de814b587cab39bf8babb08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7236d25b52738a4de814b587cab39bf8babb08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7236d25b52738a4de814b587cab39bf8babb08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7236d25b52738a4de814b587cab39bf8babb08/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "004e2fa73b7677e460c760878469d7a6c3759ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004e2fa73b7677e460c760878469d7a6c3759ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004e2fa73b7677e460c760878469d7a6c3759ea4"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "e21010064bf854d6d7d0904b70fa609bad6263ed", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -1,3 +1,19 @@\n+2007-05-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32633\n+\t* symbol.c (save_status): New.\n+\t* gfortran.h (save_status): Added external declaration.\n+\t(check_conflict): Check for conflicting explicite SAVE statements\n+\tonly.\n+\t(gen_special_c_interop_ptr): Use SAVE_EXPLICIT constant.\n+\t* module.c (ab_attribute, attr_bits): Removed enumerator value \n+\tAB_SAVE for save attribute.\n+\t(mio_symbol_attribute): Import/export the full SAVE status, \n+\tremoved usage of AB_SAVE.\n+\t* dump-parse-tree.c (gfc_show_attr): Dump full SAVE status.\n+\t* decl.c (add_init_expr_to_sym): Set SAVE_IMPLICIT only if not\n+\talready explicit.\n+\n 2007-07-05  Daniel Franke  <franke.daniel@gmail.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "f103376562fc99c23863adbee9936aaf385aa298", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -1232,7 +1232,8 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t}\n \n       sym->value = init;\n-      sym->attr.save = SAVE_IMPLICIT;\n+      if (sym->attr.save == SAVE_NONE)\n+\tsym->attr.save = SAVE_IMPLICIT;\n       *initp = NULL;\n     }\n "}, {"sha": "5d181e2ab247b16ff0e256d91504a523294534ce", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -542,10 +542,11 @@ void\n gfc_show_attr (symbol_attribute *attr)\n {\n \n-  gfc_status (\"(%s %s %s %s\", gfc_code2string (flavors, attr->flavor),\n+  gfc_status (\"(%s %s %s %s %s\", gfc_code2string (flavors, attr->flavor),\n \t      gfc_intent_string (attr->intent),\n \t      gfc_code2string (access_types, attr->access),\n-\t      gfc_code2string (procedures, attr->proc));\n+\t      gfc_code2string (procedures, attr->proc),\n+\t      gfc_code2string (save_status, attr->save));\n \n   if (attr->allocatable)\n     gfc_status (\" ALLOCATABLE\");\n@@ -561,8 +562,6 @@ gfc_show_attr (symbol_attribute *attr)\n     gfc_status (\" POINTER\");\n   if (attr->protected)\n     gfc_status (\" PROTECTED\");\n-  if (attr->save)\n-    gfc_status (\" SAVE\");\n   if (attr->value)\n     gfc_status (\" VALUE\");\n   if (attr->volatile_)"}, {"sha": "6e2ee7b4141d010f2db2e002e7f0eee6b1441a49", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -311,6 +311,7 @@ extern const mstring procedures[];\n extern const mstring intents[];\n extern const mstring access_types[];\n extern const mstring ifsrc_types[];\n+extern const mstring save_status[];\n \n /* Enumeration of all the generic intrinsic functions.  Used by the\n    backend for identification of a function.  */"}, {"sha": "94e6392634fb63372c283a7559aa09c792e938d5", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -1512,7 +1512,7 @@ mio_internal_string (char *string)\n \n typedef enum\n { AB_ALLOCATABLE, AB_DIMENSION, AB_EXTERNAL, AB_INTRINSIC, AB_OPTIONAL,\n-  AB_POINTER, AB_SAVE, AB_TARGET, AB_DUMMY, AB_RESULT, AB_DATA,\n+  AB_POINTER, AB_TARGET, AB_DUMMY, AB_RESULT, AB_DATA,\n   AB_IN_NAMELIST, AB_IN_COMMON, AB_FUNCTION, AB_SUBROUTINE, AB_SEQUENCE,\n   AB_ELEMENTAL, AB_PURE, AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT,\n   AB_CRAY_POINTER, AB_CRAY_POINTEE, AB_THREADPRIVATE, AB_ALLOC_COMP,\n@@ -1529,7 +1529,6 @@ static const mstring attr_bits[] =\n     minit (\"INTRINSIC\", AB_INTRINSIC),\n     minit (\"OPTIONAL\", AB_OPTIONAL),\n     minit (\"POINTER\", AB_POINTER),\n-    minit (\"SAVE\", AB_SAVE),\n     minit (\"VOLATILE\", AB_VOLATILE),\n     minit (\"TARGET\", AB_TARGET),\n     minit (\"THREADPRIVATE\", AB_THREADPRIVATE),\n@@ -1567,6 +1566,7 @@ DECL_MIO_NAME (expr_t)\n DECL_MIO_NAME (gfc_access)\n DECL_MIO_NAME (gfc_intrinsic_op)\n DECL_MIO_NAME (ifsrc)\n+DECL_MIO_NAME (save_state)\n DECL_MIO_NAME (procedure_type)\n DECL_MIO_NAME (ref_type)\n DECL_MIO_NAME (sym_flavor)\n@@ -1590,6 +1590,7 @@ mio_symbol_attribute (symbol_attribute *attr)\n   attr->intent = MIO_NAME (sym_intent) (attr->intent, intents);\n   attr->proc = MIO_NAME (procedure_type) (attr->proc, procedures);\n   attr->if_source = MIO_NAME (ifsrc) (attr->if_source, ifsrc_types);\n+  attr->save = MIO_NAME (save_state) (attr->save, save_status);\n \n   if (iomode == IO_OUTPUT)\n     {\n@@ -1607,8 +1608,6 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME (ab_attribute) (AB_POINTER, attr_bits);\n       if (attr->protected)\n \tMIO_NAME (ab_attribute) (AB_PROTECTED, attr_bits);\n-      if (attr->save)\n-\tMIO_NAME (ab_attribute) (AB_SAVE, attr_bits);\n       if (attr->value)\n \tMIO_NAME (ab_attribute) (AB_VALUE, attr_bits);\n       if (attr->volatile_)\n@@ -1696,9 +1695,6 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t    case AB_PROTECTED:\n \t      attr->protected = 1;\n \t      break;\n-\t    case AB_SAVE:\n-\t      attr->save = 1;\n-\t      break;\n \t    case AB_VALUE:\n \t      attr->value = 1;\n \t      break;"}, {"sha": "5e76fe240f88353e6423660e07cd4cad3782594b", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -79,6 +79,12 @@ const mstring ifsrc_types[] =\n     minit (\"USAGE\", IFSRC_USAGE)\n };\n \n+const mstring save_status[] =\n+{\n+    minit (\"UNKNOWN\", SAVE_NONE),\n+    minit (\"EXPLICIT-SAVE\", SAVE_EXPLICIT),\n+    minit (\"IMPLICIT-SAVE\", SAVE_IMPLICIT),\n+};\n \n /* This is to make sure the backend generates setup code in the correct\n    order.  */\n@@ -393,9 +399,34 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n \t}\n     }\n \n+  if (attr->save == SAVE_EXPLICIT)\n+    {\n+      conf (dummy, save);\n+      conf (in_common, save);\n+      conf (result, save);\n+\n+      switch (attr->flavor)\n+\t{\n+\t  case FL_PROGRAM:\n+\t  case FL_BLOCK_DATA:\n+\t  case FL_MODULE:\n+\t  case FL_LABEL:\n+\t  case FL_PROCEDURE:\n+\t  case FL_DERIVED:\n+\t  case FL_PARAMETER:\n+            a1 = gfc_code2string (flavors, attr->flavor);\n+            a2 = save;\n+\t    goto conflict;\n+\n+\t  case FL_VARIABLE:\n+\t  case FL_NAMELIST:\n+\t  default:\n+\t    break;\n+\t}\n+    }\n+\n   conf (dummy, entry);\n   conf (dummy, intrinsic);\n-  conf (dummy, save);\n   conf (dummy, threadprivate);\n   conf (pointer, target);\n   conf (pointer, intrinsic);\n@@ -407,7 +438,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (external, dimension);   /* See Fortran 95's R504.  */\n \n   conf (external, intrinsic);\n-    \n+\n   if (attr->if_source || attr->contained)\n     {\n       conf (external, subroutine);\n@@ -423,8 +454,6 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (in_common, dummy);\n   conf (in_common, allocatable);\n   conf (in_common, result);\n-  conf (in_common, save);\n-  conf (result, save);\n \n   conf (dummy, result);\n \n@@ -536,7 +565,6 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n     case FL_LABEL:\n       conf2 (dimension);\n       conf2 (dummy);\n-      conf2 (save);\n       conf2 (volatile_);\n       conf2 (pointer);\n       conf2 (protected);\n@@ -558,7 +586,6 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n \n     case FL_PROCEDURE:\n       conf2 (intent);\n-      conf2 (save);\n \n       if (attr->subroutine)\n \t{\n@@ -586,7 +613,6 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n \tcase PROC_DUMMY:\n \t  conf2 (result);\n \t  conf2 (in_common);\n-\t  conf2 (save);\n \t  conf2 (threadprivate);\n \t  break;\n \n@@ -598,7 +624,6 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n \n     case FL_DERIVED:\n       conf2 (dummy);\n-      conf2 (save);\n       conf2 (pointer);\n       conf2 (target);\n       conf2 (external);\n@@ -630,7 +655,6 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (target);\n       conf2 (dummy);\n       conf2 (in_common);\n-      conf2 (save);\n       conf2 (value);\n       conf2 (volatile_);\n       conf2 (threadprivate);\n@@ -3161,7 +3185,7 @@ gen_special_c_interop_ptr (int ptr_id, const char *ptr_name,\n \n   /* Set up the symbol's important fields.  Save attr required so we can\n      initialize the ptr to NULL.  */\n-  tmp_sym->attr.save = 1;\n+  tmp_sym->attr.save = SAVE_EXPLICIT;\n   tmp_sym->ts.is_c_interop = 1;\n   tmp_sym->attr.is_c_interop = 1;\n   tmp_sym->ts.is_iso_c = 1;"}, {"sha": "d0d604aba577715122ec2082f0a8c96715f539d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -1,3 +1,8 @@\n+2007-07-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* gfortran.dg/save_parameter.f90: New test.\n+\t* gfortran.dg/module_md5_1.f90: Updated MD5 sum.\n+\n 2007-07-06  Richard Guenther  <rguenther@suse.de>\n \n \t* g++.dg/opt/pr30965.C: New testcase."}, {"sha": "8bf9ddb1eb3f4abdaefe606401ecdf295de3696a", "filename": "gcc/testsuite/gfortran.dg/module_md5_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -10,5 +10,5 @@ program test\n   use foo\n   print *, pi\n end program test\n-! { dg-final { scan-module \"foo\" \"MD5:6d026a84bb779a7b6789854d85d4f01f\" } }\n+! { dg-final { scan-module \"foo\" \"MD5:1a6374d65e99c0175c42016a649f79db\" } }\n ! { dg-final { cleanup-modules \"foo\" } }"}, {"sha": "dd879bb869d0b6625f17497a0088b74066ce6122", "filename": "gcc/testsuite/gfortran.dg/save_parameter.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ftestsuite%2Fgfortran.dg%2Fsave_parameter.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7236d25b52738a4de814b587cab39bf8babb08/gcc%2Ftestsuite%2Fgfortran.dg%2Fsave_parameter.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsave_parameter.f90?ref=ef7236d25b52738a4de814b587cab39bf8babb08", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! PR fortran/32633 - implied SAVE conflicts with parameter attribute\n+! Testcase contributed by: Joost VandeVondele <jv244@cam.ac.uk>\n+\n+MODULE test\n+  CHARACTER(len=1), PARAMETER :: backslash = '\\\\'\n+  PUBLIC :: backslash\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"test\" } }"}]}