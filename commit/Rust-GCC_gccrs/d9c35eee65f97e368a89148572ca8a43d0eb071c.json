{"sha": "d9c35eee65f97e368a89148572ca8a43d0eb071c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljMzVlZWU2NWY5N2UzNjhhODkxNDg1NzJjYThhNDNkMGViMDcxYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-11T16:58:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-11T16:58:51Z"}, "message": "genpreds.c (const_int_start, [...]): New variables.\n\ngcc/\n\t* genpreds.c (const_int_start, const_int_end): New variables.\n\t(choose_enum_order): Output CONST_INT constraints before memory\n\tconstraints.\n\t(write_tm_preds_h): Always define insn_const_int_ok_for_constraint.\n\tAdd CT_CONST_INT.\n\t* ira-costs.c (record_reg_classes): Handle CT_CONST_INT.\n\t* ira.c (ira_setup_alts): Likewise.\n\t* lra-constraints.c (process_alt_operands): Likewise.\n\t* recog.c (asm_operand_ok, preprocess_constraints): Likewise.\n\t* reload.c (find_reloads): Likewise.\n\nFrom-SVN: r211473", "tree": {"sha": "3d0591f6b1eb26e1dda4162bf800619545af750e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d0591f6b1eb26e1dda4162bf800619545af750e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c35eee65f97e368a89148572ca8a43d0eb071c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c35eee65f97e368a89148572ca8a43d0eb071c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c35eee65f97e368a89148572ca8a43d0eb071c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c35eee65f97e368a89148572ca8a43d0eb071c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c4c42e826b61d7b99e6be965dd1187784d2228c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4c42e826b61d7b99e6be965dd1187784d2228c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4c42e826b61d7b99e6be965dd1187784d2228c"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "3452b6df469b356e72c7d33d9738198f9848d3a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -1,3 +1,16 @@\n+2014-06-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* genpreds.c (const_int_start, const_int_end): New variables.\n+\t(choose_enum_order): Output CONST_INT constraints before memory\n+\tconstraints.\n+\t(write_tm_preds_h): Always define insn_const_int_ok_for_constraint.\n+\tAdd CT_CONST_INT.\n+\t* ira-costs.c (record_reg_classes): Handle CT_CONST_INT.\n+\t* ira.c (ira_setup_alts): Likewise.\n+\t* lra-constraints.c (process_alt_operands): Likewise.\n+\t* recog.c (asm_operand_ok, preprocess_constraints): Likewise.\n+\t* reload.c (find_reloads): Likewise.\n+\n 2014-06-11  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* recog.h (operand_alternative): Remove offmem_ok, nonffmem_ok,"}, {"sha": "c50b9cda38a22e3cc31e025a767a411cdaa33b31", "filename": "gcc/genpreds.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -690,6 +690,7 @@ static unsigned int num_constraints;\n static const constraint_data **enum_order;\n static unsigned int register_start, register_end;\n static unsigned int satisfied_start;\n+static unsigned int const_int_start, const_int_end;\n static unsigned int memory_start, memory_end;\n static unsigned int address_start, address_end;\n \n@@ -931,6 +932,12 @@ choose_enum_order (void)\n \n   satisfied_start = next;\n \n+  const_int_start = next;\n+  FOR_ALL_CONSTRAINTS (c)\n+    if (c->is_const_int)\n+      enum_order[next++] = c;\n+  const_int_end = next;\n+\n   memory_start = next;\n   FOR_ALL_CONSTRAINTS (c)\n     if (c->is_memory)\n@@ -944,7 +951,7 @@ choose_enum_order (void)\n   address_end = next;\n \n   FOR_ALL_CONSTRAINTS (c)\n-    if (!c->is_register && !c->is_memory && !c->is_address)\n+    if (!c->is_register && !c->is_const_int && !c->is_memory && !c->is_address)\n       enum_order[next++] = c;\n   gcc_assert (next == num_constraints);\n }\n@@ -1361,6 +1368,13 @@ write_tm_preds_h (void)\n \t      \"#define CONST_OK_FOR_CONSTRAINT_P(v_,c_,s_) \\\\\\n\"\n \t      \"    insn_const_int_ok_for_constraint (v_, \"\n \t      \"lookup_constraint (s_))\\n\");\n+      else\n+\tputs (\"static inline bool\\n\"\n+\t      \"insn_const_int_ok_for_constraint (HOST_WIDE_INT,\"\n+\t      \" enum constraint_num)\\n\"\n+\t      \"{\\n\"\n+\t      \"  return false;\\n\"\n+\t      \"}\\n\");\n       if (have_const_dbl_constraints)\n \tputs (\"#define CONST_DOUBLE_OK_FOR_CONSTRAINT_P(v_,c_,s_) \\\\\\n\"\n \t      \"    constraint_satisfied_p (v_, lookup_constraint (s_))\\n\");\n@@ -1370,6 +1384,7 @@ write_tm_preds_h (void)\n       puts (\"enum constraint_type\\n\"\n \t    \"{\\n\"\n \t    \"  CT_REGISTER,\\n\"\n+\t    \"  CT_CONST_INT,\\n\"\n \t    \"  CT_MEMORY,\\n\"\n \t    \"  CT_ADDRESS,\\n\"\n \t    \"  CT_FIXED_FORM\\n\"\n@@ -1378,7 +1393,9 @@ write_tm_preds_h (void)\n \t    \"static inline enum constraint_type\\n\"\n \t    \"get_constraint_type (enum constraint_num c)\\n\"\n \t    \"{\");\n-      auto_vec <std::pair <unsigned int, const char *>, 3> values;\n+      auto_vec <std::pair <unsigned int, const char *>, 4> values;\n+      if (const_int_start != const_int_end)\n+\tvalues.safe_push (std::make_pair (const_int_start, \"CT_CONST_INT\"));\n       if (memory_start != memory_end)\n \tvalues.safe_push (std::make_pair (memory_start, \"CT_MEMORY\"));\n       if (address_start != address_end)"}, {"sha": "795238f75f6fb443ff8f3e104be8415bbc25048c", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -763,6 +763,12 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t\tclasses[i] = ira_reg_class_subunion[classes[i]][cl];\n \t\t      break;\n \n+\t\t    case CT_CONST_INT:\n+\t\t      if (CONST_INT_P (op)\n+\t\t\t  && insn_const_int_ok_for_constraint (INTVAL (op), cn))\n+\t\t\twin = 1;\n+\t\t      break;\n+\n \t\t    case CT_MEMORY:\n \t\t      /* Every MEM can be reloaded to fit.  */\n \t\t      insn_allows_mem[i] = allows_mem[i] = 1;"}, {"sha": "f85ced33a8bd5311e18fc01a8c3097d6c22603bd", "filename": "gcc/ira.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -1936,6 +1936,13 @@ ira_setup_alts (rtx insn, HARD_REG_SET &alts)\n \t\t\t    goto op_success;\n \t\t\t  break;\n \n+\t\t\tcase CT_CONST_INT:\n+\t\t\t  if (CONST_INT_P (op)\n+\t\t\t      && (insn_const_int_ok_for_constraint\n+\t\t\t\t  (INTVAL (op), cn)))\n+\t\t\t    goto op_success;\n+\t\t\t  break;\n+\n \t\t\tcase CT_ADDRESS:\n \t\t\tcase CT_MEMORY:\n \t\t\t  goto op_success;"}, {"sha": "453c578f72a9f65a327b6ca4b2df8d2f697709a6", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -2041,6 +2041,12 @@ process_alt_operands (int only_alternative)\n \t\t\tgoto reg;\n \t\t      break;\n \n+\t\t    case CT_CONST_INT:\n+\t\t      if (CONST_INT_P (op)\n+\t\t\t  && insn_const_int_ok_for_constraint (INTVAL (op), cn))\n+\t\t\twin = true;\n+\t\t      break;\n+\n \t\t    case CT_MEMORY:\n \t\t      if (MEM_P (op)\n \t\t\t  && satisfies_memory_constraint_p (op, cn))"}, {"sha": "2b62167c4f69068da7bc178e80a1ab5e60cda1e9", "filename": "gcc/recog.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -1920,6 +1920,13 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t\tgoto reg;\n \t      break;\n \n+\t    case CT_CONST_INT:\n+\t      if (!result\n+\t\t  && CONST_INT_P (op)\n+\t\t  && insn_const_int_ok_for_constraint (INTVAL (op), cn))\n+\t\tresult = 1;\n+\t      break;\n+\n \t    case CT_MEMORY:\n \t      /* Every memory operand can be reloaded to fit.  */\n \t      result = result || memory_operand (op, VOIDmode);\n@@ -2443,6 +2450,9 @@ preprocess_constraints (int n_operands, int n_alternatives,\n \t\t\top_alt[i].cl = reg_class_subunion[op_alt[i].cl][cl];\n \t\t      break;\n \n+\t\t    case CT_CONST_INT:\n+\t\t      break;\n+\n \t\t    case CT_MEMORY:\n \t\t      op_alt[i].memory_ok = 1;\n \t\t      break;"}, {"sha": "cf2de93a0ea7448f14a785297c304b508a4fcf07", "filename": "gcc/reload.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c35eee65f97e368a89148572ca8a43d0eb071c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=d9c35eee65f97e368a89148572ca8a43d0eb071c", "patch": "@@ -3504,6 +3504,13 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t\t  goto reg;\n \t\t\tbreak;\n \n+\t\t      case CT_CONST_INT:\n+\t\t\tif (CONST_INT_P (operand)\n+\t\t\t    && (insn_const_int_ok_for_constraint\n+\t\t\t\t(INTVAL (operand), cn)))\n+\t\t\t  win = true;\n+\t\t\tbreak;\n+\n \t\t      case CT_MEMORY:\n \t\t\tif (force_reload)\n \t\t\t  break;"}]}