{"sha": "376d7c51ece6f8b39d83001717d66a2741318121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2ZDdjNTFlY2U2ZjhiMzlkODMwMDE3MTdkNjZhMjc0MTMxODEyMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-02T00:53:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-02T00:53:12Z"}, "message": "future (promise): Add constructors for uses-allocator construction from rvalue promise.\n\n\t* include/std/future (promise): Add constructors for uses-allocator\n\tconstruction from rvalue promise.\n\t(packaged_task): Implement LWG 2067. Add additional constructors for\n\tuses-allocator construction.\n\t* testsuite/30_threads/packaged_task/cons/3.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/alloc2.cc: New.\n\t* testsuite/30_threads/promise/cons/alloc2.cc: New.\n\nFrom-SVN: r180757", "tree": {"sha": "62e42f016bd36c3c7d5297f80bd233ae3780f5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62e42f016bd36c3c7d5297f80bd233ae3780f5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/376d7c51ece6f8b39d83001717d66a2741318121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d7c51ece6f8b39d83001717d66a2741318121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376d7c51ece6f8b39d83001717d66a2741318121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d7c51ece6f8b39d83001717d66a2741318121/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "095c8a9466befc23bb15618766ca40032c058145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095c8a9466befc23bb15618766ca40032c058145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095c8a9466befc23bb15618766ca40032c058145"}], "stats": {"total": 201, "additions": 197, "deletions": 4}, "files": [{"sha": "0e21cc7cc62c2930d825d0ef289f65f5a0a1cdc0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=376d7c51ece6f8b39d83001717d66a2741318121", "patch": "@@ -1,3 +1,13 @@\n+2011-11-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future (promise): Add constructors for uses-allocator\n+\tconstruction from rvalue promise.\n+\t(packaged_task): Implement LWG 2067. Add additional constructors for\n+\tuses-allocator construction.\n+\t* testsuite/30_threads/packaged_task/cons/3.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/alloc2.cc: New.\n+\t* testsuite/30_threads/promise/cons/alloc2.cc: New.\n+\n 2011-10-31  Jason Merrill  <jason@redhat.com>\n \n \t* include/Makefile.am (install-freestanding-headers): Install"}, {"sha": "cc8779b40b38696b7f5b4eca5d8746865e0b251c", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=376d7c51ece6f8b39d83001717d66a2741318121", "patch": "@@ -955,6 +955,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_storage(__future_base::_S_allocate_result<_Res>(__a))\n         { }\n \n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)\n+        : _M_future(std::move(__rhs._M_future)),\n+\t  _M_storage(std::move(__rhs._M_storage))\n+        { }\n+\n       promise(const promise&) = delete;\n \n       ~promise()\n@@ -1047,6 +1053,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_storage(__future_base::_S_allocate_result<_Res&>(__a))\n         { }\n \n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)\n+        : _M_future(std::move(__rhs._M_future)),\n+\t  _M_storage(std::move(__rhs._M_storage))\n+        { }\n+\n       promise(const promise&) = delete;\n \n       ~promise()\n@@ -1122,6 +1134,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_storage(__future_base::_S_allocate_result<void>(__a))\n         { }\n \n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)\n+        : _M_future(std::move(__rhs._M_future)),\n+\t  _M_storage(std::move(__rhs._M_storage))\n+        { }\n+\n       promise(const promise&) = delete;\n \n       ~promise()\n@@ -1270,6 +1288,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { return std::forward<_Tp>(__t); }\n     };\n \n+  template<typename _Task, typename _Fn, bool\n+           = is_same<_Task, typename remove_reference<_Fn>::type>::value>\n+    struct __is_same_pkgdtask\n+    { typedef void __type; };\n+\n+  template<typename _Task, typename _Fn>\n+    struct __is_same_pkgdtask<_Task, _Fn, true>\n+    { };\n+\n   /// packaged_task\n   template<typename _Res, typename... _ArgTypes>\n     class packaged_task<_Res(_ArgTypes...)>\n@@ -1281,13 +1308,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Construction and destruction\n       packaged_task() noexcept { }\n \n-      template<typename _Fn>\n+      template<typename _Allocator>\n+        explicit\n+        packaged_task(allocator_arg_t, const _Allocator& __a) noexcept\n+        { }\n+\n+      template<typename _Fn, typename = typename\n+               __is_same_pkgdtask<packaged_task, _Fn>::__type>\n         explicit\n         packaged_task(_Fn&& __fn)\n         : _M_state(std::make_shared<_State_type>(std::forward<_Fn>(__fn)))\n         { }\n \n-      template<typename _Fn, typename _Allocator>\n+      template<typename _Fn, typename _Allocator, typename = typename\n+               __is_same_pkgdtask<packaged_task, _Fn>::__type>\n         explicit\n         packaged_task(allocator_arg_t, const _Allocator& __a, _Fn&& __fn)\n         : _M_state(std::allocate_shared<_State_type>(__a,\n@@ -1301,13 +1335,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // No copy\n-      packaged_task(packaged_task&) = delete;\n-      packaged_task& operator=(packaged_task&) = delete;\n+      packaged_task(const packaged_task&) = delete;\n+      packaged_task& operator=(const packaged_task&) = delete;\n+\n+      template<typename _Allocator>\n+        explicit\n+        packaged_task(allocator_arg_t, const _Allocator&,\n+                      const packaged_task&) = delete;\n \n       // Move support\n       packaged_task(packaged_task&& __other) noexcept\n       { this->swap(__other); }\n \n+      template<typename _Allocator>\n+        explicit\n+        packaged_task(allocator_arg_t, const _Allocator&,\n+                      packaged_task&& __other) noexcept\n+        { this->swap(__other); }\n+\n       packaged_task& operator=(packaged_task&& __other) noexcept\n       {\n         packaged_task(std::move(__other)).swap(*this);"}, {"sha": "24ca72085fcbc16e2e04fa56e2dfded17d5ec686", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F3.cc?ref=376d7c51ece6f8b39d83001717d66a2741318121", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// LWG 2067. packaged_task should have deleted copy c'tor with const parameter\n+\n+#include <future>\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+template<typename F>\n+std::future<typename std::result_of<F()>::type> spawn_task(F f)\n+{\n+  typedef typename std::result_of<F()>::type result_type;\n+  std::packaged_task<result_type()> task(std::move(f));\n+  std::future<result_type> res(task.get_future());\n+  std::thread(std::move(task)).detach();\n+  return res;\n+}\n+\n+int get_res()\n+{\n+  return 42;\n+}\n+\n+void test01()\n+{\n+  auto f = spawn_task(get_res);\n+  VERIFY( f.get() == get_res() );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "40d30705a63d396ac783f38f7431c88c33d689ba", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/alloc2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc2.cc?ref=376d7c51ece6f8b39d83001717d66a2741318121", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test that packaged_task can be default-constructed or move-constructed\n+// in a context that does uses-allocator construction.\n+\n+#include <future>\n+#include <memory>\n+#include <tuple>\n+\n+using std::packaged_task;\n+using std::allocator_arg;\n+using std::allocator;\n+using std::tuple;\n+\n+typedef packaged_task<void()> task;\n+allocator<task> a;\n+\n+tuple<task> t1{ allocator_arg, a };\n+tuple<task> t2{ allocator_arg, a, task{} };"}, {"sha": "a22fd203438871158374de8b18973a9e39b44c74", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/alloc2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d7c51ece6f8b39d83001717d66a2741318121/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc2.cc?ref=376d7c51ece6f8b39d83001717d66a2741318121", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test that promise can be default-constructed or move-constructed\n+// in a context that does uses-allocator construction.\n+\n+#include <future>\n+#include <memory>\n+#include <tuple>\n+\n+using std::promise;\n+using std::allocator_arg;\n+using std::allocator;\n+using std::tuple;\n+\n+typedef promise<int>  p;\n+typedef promise<int&> pr;\n+typedef promise<void> pv;\n+allocator<p> a;\n+\n+tuple<p, pr, pv> t1{ allocator_arg, a };\n+tuple<p, pr, pv> t2{ allocator_arg, a, p{}, pr{}, pv{} };"}]}