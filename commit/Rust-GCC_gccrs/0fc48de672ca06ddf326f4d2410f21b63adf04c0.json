{"sha": "0fc48de672ca06ddf326f4d2410f21b63adf04c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjNDhkZTY3MmNhMDZkZGYzMjZmNGQyNDEwZjIxYjYzYWRmMDRjMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-01T17:44:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-01T17:44:19Z"}, "message": "(divhisi3, udivhisi3, modhisi3, umodhi3): Comment out.\n\n(divhisi3, udivhisi3, modhisi3, umodhi3 recognizers): Comment out.\n\nFrom-SVN: r5963", "tree": {"sha": "76df0687a0ba5fa84ed9f12e58b09fc4b9ef16b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76df0687a0ba5fa84ed9f12e58b09fc4b9ef16b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fc48de672ca06ddf326f4d2410f21b63adf04c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc48de672ca06ddf326f4d2410f21b63adf04c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc48de672ca06ddf326f4d2410f21b63adf04c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc48de672ca06ddf326f4d2410f21b63adf04c0/comments", "author": null, "committer": null, "parents": [{"sha": "3564e40e2c1d041491de0319989296cf46a1f10c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3564e40e2c1d041491de0319989296cf46a1f10c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3564e40e2c1d041491de0319989296cf46a1f10c"}], "stats": {"total": 255, "additions": 131, "deletions": 124}, "files": [{"sha": "910c02eb8abda38472b1e4a15d4bda149df4eebc", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 131, "deletions": 124, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc48de672ca06ddf326f4d2410f21b63adf04c0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc48de672ca06ddf326f4d2410f21b63adf04c0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=0fc48de672ca06ddf326f4d2410f21b63adf04c0", "patch": "@@ -2715,35 +2715,39 @@\n #endif\n }\")\n \n-(define_insn \"divhisi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI\n-\t (div:SI\n-\t  (match_operand:SI 1 \"general_operand\" \"0\")\n-\t  (sign_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n-  \"\"\n-  \"*\n-{\n-#ifdef MOTOROLA\n-  return \\\"divs%.w %2,%0\\\";\n-#else\n-  return \\\"divs %2,%0\\\";\n-#endif\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI (div:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n-  \"\"\n-  \"*\n-{\n-#ifdef MOTOROLA\n-  return \\\"divs%.w %2,%0\\\";\n-#else\n-  return \\\"divs %2,%0\\\";\n-#endif\n-}\")\n+;; These patterns don't work because the divs instruction is undefined if\n+;; the quotient is more than 16 bits.  This valid C would be miscompiled:\n+;; int n; short d; unsigned short q; ... q = (unsigned int) (n / d);\n+;; Imagine what happens when n = 100000 and d = 1.\n+;;(define_insn \"divhisi3\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI\n+;;\t (div:SI\n+;;\t  (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t  (sign_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;#ifdef MOTOROLA\n+;;  return \\\"divs%.w %2,%0\\\";\n+;;#else\n+;;  return \\\"divs %2,%0\\\";\n+;;#endif\n+;;}\")\n+\n+;;(define_insn \"\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI (div:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;#ifdef MOTOROLA\n+;;  return \\\"divs%.w %2,%0\\\";\n+;;#else\n+;;  return \\\"divs %2,%0\\\";\n+;;#endif\n+;;}\")\n \n (define_insn \"udivhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n@@ -2759,35 +2763,36 @@\n #endif\n }\")\n \n-(define_insn \"udivhisi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI\n-\t (udiv:SI\n-\t  (match_operand:SI 1 \"general_operand\" \"0\")\n-\t  (zero_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n-  \"\"\n-  \"*\n-{\n-#ifdef MOTOROLA\n-  return \\\"divu%.w %2,%0\\\";\n-#else\n-  return \\\"divu %2,%0\\\";\n-#endif\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI (udiv:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n-  \"\"\n-  \"*\n-{\n-#ifdef MOTOROLA\n-  return \\\"divu%.w %2,%0\\\";\n-#else\n-  return \\\"divu %2,%0\\\";\n-#endif\n-}\")\n+;; See comment before divhisi3 why these are commented out.\n+;;(define_insn \"udivhisi3\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI\n+;;\t (udiv:SI\n+;;\t  (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t  (zero_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;#ifdef MOTOROLA\n+;;  return \\\"divu%.w %2,%0\\\";\n+;;#else\n+;;  return \\\"divu %2,%0\\\";\n+;;#endif\n+;;}\")\n+\n+;;(define_insn \"\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI (udiv:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;#ifdef MOTOROLA\n+;;  return \\\"divu%.w %2,%0\\\";\n+;;#else\n+;;  return \\\"divu %2,%0\\\";\n+;;#endif\n+;;}\")\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n@@ -2888,39 +2893,40 @@\n #endif\n }\")\n \n-(define_insn \"modhisi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI\n-\t (mod:SI\n-\t  (match_operand:SI 1 \"general_operand\" \"0\")\n-\t  (sign_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n-  \"\"\n-  \"*\n-{\n-  /* The swap insn produces cc's that don't correspond to the result.  */\n-  CC_STATUS_INIT;\n-#ifdef MOTOROLA\n-  return \\\"divs%.w %2,%0\\;swap %0\\\";\n-#else\n-  return \\\"divs %2,%0\\;swap %0\\\";\n-#endif\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI (mod:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n-  \"\"\n-  \"*\n-{\n-  /* The swap insn produces cc's that don't correspond to the result.  */\n-  CC_STATUS_INIT;\n-#ifdef MOTOROLA\n-  return \\\"divs%.w %2,%0\\;swap %0\\\";\n-#else\n-  return \\\"divs %2,%0\\;swap %0\\\";\n-#endif\n-}\")\n+;; See comment before divhisi3 why these are commented out.\n+;;(define_insn \"modhisi3\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI\n+;;\t (mod:SI\n+;;\t  (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t  (sign_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;  /* The swap insn produces cc's that don't correspond to the result.  */\n+;;  CC_STATUS_INIT;\n+;;#ifdef MOTOROLA\n+;;  return \\\"divs%.w %2,%0\\;swap %0\\\";\n+;;#else\n+;;  return \\\"divs %2,%0\\;swap %0\\\";\n+;;#endif\n+;;}\")\n+\n+;;(define_insn \"\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI (mod:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;  /* The swap insn produces cc's that don't correspond to the result.  */\n+;;  CC_STATUS_INIT;\n+;;#ifdef MOTOROLA\n+;;  return \\\"divs%.w %2,%0\\;swap %0\\\";\n+;;#else\n+;;  return \\\"divs %2,%0\\;swap %0\\\";\n+;;#endif\n+;;}\")\n \n (define_insn \"umodhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n@@ -2938,39 +2944,40 @@\n #endif\n }\")\n \n-(define_insn \"umodhisi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI\n-\t (umod:SI\n-\t  (match_operand:SI 1 \"general_operand\" \"0\")\n-\t  (zero_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n-  \"\"\n-  \"*\n-{\n-  /* The swap insn produces cc's that don't correspond to the result.  */\n-  CC_STATUS_INIT;\n-#ifdef MOTOROLA\n-  return \\\"divu%.w %2,%0\\;swap %0\\\";\n-#else\n-  return \\\"divu %2,%0\\;swap %0\\\";\n-#endif\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(truncate:HI (umod:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n-  \"\"\n-  \"*\n-{\n-  /* The swap insn produces cc's that don't correspond to the result.  */\n-  CC_STATUS_INIT;\n-#ifdef MOTOROLA\n-  return \\\"divu%.w %2,%0\\;swap %0\\\";\n-#else\n-  return \\\"divu %2,%0\\;swap %0\\\";\n-#endif\n-}\")\n+;; See comment before divhisi3 why these are commented out.\n+;;(define_insn \"umodhisi3\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI\n+;;\t (umod:SI\n+;;\t  (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t  (zero_extend:SI (match_operand:HI 2 \"nonimmediate_operand\" \"dm\")))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;  /* The swap insn produces cc's that don't correspond to the result.  */\n+;;  CC_STATUS_INIT;\n+;;#ifdef MOTOROLA\n+;;  return \\\"divu%.w %2,%0\\;swap %0\\\";\n+;;#else\n+;;  return \\\"divu %2,%0\\;swap %0\\\";\n+;;#endif\n+;;}\")\n+\n+;;(define_insn \"\"\n+;;  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n+;;\t(truncate:HI (umod:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+;;\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n+;;  \"\"\n+;;  \"*\n+;;{\n+;;  /* The swap insn produces cc's that don't correspond to the result.  */\n+;;  CC_STATUS_INIT;\n+;;#ifdef MOTOROLA\n+;;  return \\\"divu%.w %2,%0\\;swap %0\\\";\n+;;#else\n+;;  return \\\"divu %2,%0\\;swap %0\\\";\n+;;#endif\n+;;}\")\n \n (define_insn \"divmodsi4\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")"}]}