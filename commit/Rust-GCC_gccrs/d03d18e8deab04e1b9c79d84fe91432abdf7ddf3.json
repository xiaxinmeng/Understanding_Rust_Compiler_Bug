{"sha": "d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzZDE4ZThkZWFiMDRlMWI5Yzc5ZDg0ZmU5MTQzMmFiZGY3ZGRmMw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-07-17T14:07:42Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-07-17T14:07:42Z"}, "message": "re PR c++/3797 (gcc 3.0 fails to emit explicit specialization of a template member)\n\n\tPR c++/3797\n\t* decl.c (duplicate_decls): Don't propagate inlining parameters from\n\tolddecl to newdecl when newdecl is a specialization of the\n\tinstantiation olddecl.\n\nFrom-SVN: r55525", "tree": {"sha": "ad6129f28cc816744985bf883222621cf769e456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad6129f28cc816744985bf883222621cf769e456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3/comments", "author": null, "committer": null, "parents": [{"sha": "ba59df78eb56fa25667da86a5e6ae401a2960a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba59df78eb56fa25667da86a5e6ae401a2960a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba59df78eb56fa25667da86a5e6ae401a2960a22"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "6975f32923f56c44c05ecda05e228acc03da22a2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "patch": "@@ -1,3 +1,10 @@\n+2002-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/3797\n+\t* decl.c (duplicate_decls): Don't propagate inlining parameters from\n+\tolddecl to newdecl when newdecl is a specialization of the \n+\tinstantiation olddecl.\n+\n 2002-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/4802, c++/5387"}, {"sha": "f280384d98f14c669eba8c5001d253741607326f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "patch": "@@ -3366,8 +3366,6 @@ duplicate_decls (newdecl, olddecl)\n \tDECL_VIRTUAL_CONTEXT (newdecl) = DECL_VIRTUAL_CONTEXT (olddecl);\n       if (DECL_CONTEXT (olddecl))\n \tDECL_CONTEXT (newdecl) = DECL_CONTEXT (olddecl);\n-      if (DECL_PENDING_INLINE_INFO (newdecl) == 0)\n-\tDECL_PENDING_INLINE_INFO (newdecl) = DECL_PENDING_INLINE_INFO (olddecl);\n       DECL_STATIC_CONSTRUCTOR (newdecl) |= DECL_STATIC_CONSTRUCTOR (olddecl);\n       DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n       DECL_PURE_VIRTUAL_P (newdecl) |= DECL_PURE_VIRTUAL_P (olddecl);\n@@ -3614,17 +3612,26 @@ duplicate_decls (newdecl, olddecl)\n \t\t      olddecl);\n \n \t  SET_DECL_TEMPLATE_SPECIALIZATION (olddecl);\n+\n+\t  /* [temp.expl.spec/14] We don't inline explicit specialization\n+\t     just because the primary template says so.  */\n \t}\n-      DECL_DECLARED_INLINE_P (newdecl) |= DECL_DECLARED_INLINE_P (olddecl);\n+      else\n+\t{\n+\t  if (DECL_PENDING_INLINE_INFO (newdecl) == 0)\n+\t    DECL_PENDING_INLINE_INFO (newdecl) = DECL_PENDING_INLINE_INFO (olddecl);\n \n-      /* If either decl says `inline', this fn is inline, unless its\n-         definition was passed already.  */\n-      if (DECL_INLINE (newdecl) && DECL_INITIAL (olddecl) == NULL_TREE)\n-\tDECL_INLINE (olddecl) = 1;\n-      DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n+\t  DECL_DECLARED_INLINE_P (newdecl) |= DECL_DECLARED_INLINE_P (olddecl);\n \n-      DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n-\t= (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n+\t  /* If either decl says `inline', this fn is inline, unless \n+\t     its definition was passed already.  */\n+\t  if (DECL_INLINE (newdecl) && DECL_INITIAL (olddecl) == NULL_TREE)\n+\t    DECL_INLINE (olddecl) = 1;\n+\t  DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n+\n+\t  DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n+\t    = (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n+\t}\n \n       /* Preserve abstractness on cloned [cd]tors.  */\n       DECL_ABSTRACT (newdecl) = DECL_ABSTRACT (olddecl);"}]}