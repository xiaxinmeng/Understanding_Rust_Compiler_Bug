{"sha": "86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzMDdmNDlhNzdhYjNkNmFiODJhMzNlMWEwNzI5YmQ2OGNiMGY2YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-05-21T17:27:04Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-05-21T17:27:04Z"}, "message": "re PR fortran/57035 (TS29113's C535b: Wrongly accept DIMENSION(..) to TRANSFER)\n\n2013-05-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57035\n        * intrinsic.c (do_check): Add contraint check for\n        NO_ARG_CHECK, assumed rank and assumed type.\n        * gfortran.texi (NO_ARG_CHECK): Minor wording change,\n        allow PRESENT intrinsic.\n\n2013-05-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57035\n        * gfortran.dg/assumed_type_5.f90: New.\n        * gfortran.dg/assumed_rank_1.f90: Comment invalid statement.\n        * gfortran.dg/assumed_rank_2.f90: Ditto.\n        * gfortran.dg/assumed_type_3.f90: Update dg-error.\n        * gfortran.dg/no_arg_check_3.f90: Ditto.\n\nFrom-SVN: r199158", "tree": {"sha": "458437d583ebbdbffe828d22fc28a54aecaef1d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/458437d583ebbdbffe828d22fc28a54aecaef1d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee49aa34fd5e63f0d0d99d58dc66be587236d8c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee49aa34fd5e63f0d0d99d58dc66be587236d8c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee49aa34fd5e63f0d0d99d58dc66be587236d8c2"}], "stats": {"total": 150, "additions": 130, "deletions": 20}, "files": [{"sha": "2704c6763346b0a8953de9f726c391919289099b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -1,3 +1,11 @@\n+2013-05-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57035\n+\t* intrinsic.c (do_check): Add contraint check for\n+\tNO_ARG_CHECK, assumed rank and assumed type.\n+\t* gfortran.texi (NO_ARG_CHECK): Minor wording change,\n+\tallow PRESENT intrinsic.\n+\n 2013-05-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48858"}, {"sha": "4a31a771d9e54861144d5652be67ee3fcc49c15a", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -2694,17 +2694,18 @@ with this attribute actual arguments of any type and kind (similar to\n @code{TYPE(*)}), scalars and arrays of any rank (no equivalent\n in Fortran standard) are accepted.  As with @code{TYPE(*)}, the argument\n is unlimited polymorphic and no type information is available.\n-Additionally, the same restrictions apply, i.e. the argument may only be\n-passed to dummy arguments with the @code{NO_ARG_CHECK} attribute and as\n-argument to the @code{C_LOC} intrinsic function of the @code{ISO_C_BINDING}\n-module.\n+Additionally, the argument may only be passed to dummy arguments\n+with the @code{NO_ARG_CHECK} attribute and as argument to the\n+@code{PRESENT} intrinsic function and to @code{C_LOC} of the\n+@code{ISO_C_BINDING} module.\n \n Variables with @code{NO_ARG_CHECK} attribute shall be of assumed-type\n-(@code{TYPE(*)}; recommended) or of an intrinsic numeric type; they\n-shall not have the @code{ALLOCATE}, @code{CODIMENSION}, @code{INTENT(OUT)},\n-@code{POINTER} or @code{VALUE} attribute; furthermore, they shall be\n-either scalar or of assumed-size (@code{dimension(*)}). As @code{TYPE(*)},\n-the @code{NO_ARG_CHECK} attribute requires an explicit interface.\n+(@code{TYPE(*)}; recommended) or of type @code{INTEGER}, @code{LOGICAL},\n+@code{REAL} or @code{COMPLEX}. They shall not have the @code{ALLOCATE},\n+@code{CODIMENSION}, @code{INTENT(OUT)}, @code{POINTER} or @code{VALUE}\n+attribute; furthermore, they shall be either scalar or of assumed-size\n+(@code{dimension(*)}). As @code{TYPE(*)}, the @code{NO_ARG_CHECK} attribute\n+requires an explicit interface.\n \n @itemize\n @item @code{NO_ARG_CHECK} -- disable the type, kind and rank checking"}, {"sha": "ddf9d8010fd3914522cc5340b406a721b3546ac9", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -182,10 +182,66 @@ static bool\n do_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n {\n   gfc_expr *a1, *a2, *a3, *a4, *a5;\n+  gfc_actual_arglist *a;\n \n   if (arg == NULL)\n     return (*specific->check.f0) ();\n \n+  /* Check TS29113, C407b for assumed type and C535b for assumed-rank,\n+     and a likewise check for NO_ARG_CHECK.  */\n+  for (a = arg; a; a = a->next)\n+    {\n+      if (!a->expr)\n+\tcontinue;\n+\n+      if (a->expr->expr_type == EXPR_VARIABLE\n+\t  && (a->expr->symtree->n.sym->attr.ext_attr\n+\t      & (1 << EXT_ATTR_NO_ARG_CHECK))\n+\t  && specific->id != GFC_ISYM_C_LOC\n+\t  && specific->id != GFC_ISYM_PRESENT)\n+\t{\n+\t  gfc_error (\"Variable with NO_ARG_CHECK attribute at %L is only \"\n+\t\t     \"permitted as argument to the intrinsic functions \"\n+\t\t     \"C_LOC and PRESENT\", &a->expr->where);\n+\t  return false;\n+\t}\n+      else if (a->expr->ts.type == BT_ASSUMED\n+\t       && specific->id != GFC_ISYM_LBOUND\n+\t       && specific->id != GFC_ISYM_PRESENT\n+\t       && specific->id != GFC_ISYM_RANK\n+\t       && specific->id != GFC_ISYM_SHAPE\n+\t       && specific->id != GFC_ISYM_SIZE\n+\t       && specific->id != GFC_ISYM_UBOUND\n+\t       && specific->id != GFC_ISYM_C_LOC)\n+\t{\n+\t  gfc_error (\"Assumed-type argument at %L is not permitted as actual\"\n+\t\t     \" argument to the intrinsic %s\", &a->expr->where,\n+\t\t     gfc_current_intrinsic);\n+\t  return false;\n+\t}\n+      else if (a->expr->ts.type == BT_ASSUMED && a != arg)\n+\t{\n+\t  gfc_error (\"Assumed-type argument at %L is only permitted as \"\n+\t\t     \"first actual argument to the intrinsic %s\",\n+\t\t     &a->expr->where, gfc_current_intrinsic);\n+\t  return false;\n+\t}\n+      if (a->expr->rank == -1 && !specific->inquiry)\n+\t{\n+\t  gfc_error (\"Assumed-rank argument at %L is only permitted as actual \"\n+\t\t     \"argument to intrinsic inquiry functions\",\n+\t\t     &a->expr->where);\n+\t  return false;\n+\t}\n+      if (a->expr->rank == -1 && arg != a)\n+\t{\n+\t  gfc_error (\"Assumed-rank argument at %L is only permitted as first \"\n+\t\t     \"actual argument to the intrinsic inquiry function %s\",\n+\t\t     &a->expr->where, gfc_current_intrinsic);\n+\t  return false;\n+\t}\n+    }\n+\n   a1 = arg->expr;\n   arg = arg->next;\n   if (arg == NULL)"}, {"sha": "1663fcc76a19dee5d39daed7747b7190cbe080ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -1,3 +1,12 @@\n+2013-05-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57035\n+\t* gfortran.dg/assumed_type_5.f90: New.\n+\t* gfortran.dg/assumed_rank_1.f90: Comment invalid statement.\n+\t* gfortran.dg/assumed_rank_2.f90: Ditto.\n+\t* gfortran.dg/assumed_type_3.f90: Update dg-error.\n+\t* gfortran.dg/no_arg_check_3.f90: Ditto.\n+\n 2013-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57331"}, {"sha": "afddc830097f60bb02c34cbb2cf2a1d2cb8121c1", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_1.f90?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -52,11 +52,11 @@ subroutine check_value(b, n, val)\n   subroutine bar(a,b, prsnt)\n     integer, pointer, optional, intent(in) :: a(..),b(..)\n     logical, value :: prsnt\n-    ! The following is not valid, but it goes past the constraint check\n-    ! Technically, it could be allowed and might be in Fortran 2015:\n     if (.not. associated(a)) call abort()\n     if (present(b)) then\n-      if (.not. associated(a,b)) call abort()\n+       ! The following is not valid.\n+       ! Technically, it could be allowed and might be in Fortran 2015:\n+       ! if (.not. associated(a,b)) call abort()\n     else\n       if (.not. associated(a)) call abort()\n     end if"}, {"sha": "8a1ea05768c6cf354298032af702c926aaa8449c", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_2.f90?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -45,11 +45,11 @@\n   subroutine bar(a,b, prsnt)\n     integer, pointer, optional, intent(in) :: a(..),b(..)\n     logical, value :: prsnt\n-    ! The following is not valid, but it goes past the constraint check\n-    ! Technically, it could be allowed and might be in Fortran 2015:\n     if (.not. associated(a)) call abort()\n     if (present(b)) then\n-      if (.not. associated(a,b)) call abort()\n+      ! The following is not valid\n+      ! Technically, it could be allowed and might be in Fortran 2015:\n+      ! if (.not. associated(a,b)) call abort()\n     else\n       if (.not. associated(a)) call abort()\n     end if"}, {"sha": "e5bff509e40c179be993700a6c41d315bf3d2e13", "filename": "gcc/testsuite/gfortran.dg/assumed_type_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_3.f90?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -110,7 +110,7 @@ end subroutine twelf\n subroutine thirteen(x, y)\n   type(*) :: x\n   integer :: y(:)\n-  print *, ubound(y, dim=x) ! { dg-error \"must be INTEGER\" }\n+  print *, ubound(y, dim=x) ! { dg-error \"Assumed-type argument at .1. is only permitted as first actual argument to the intrinsic ubound\" }\n end subroutine thirteen\n \n subroutine fourteen(x)"}, {"sha": "5f4c553d989b6fa9dd1978368ad0653edaf0b1cd", "filename": "gcc/testsuite/gfortran.dg/assumed_type_5.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_5.f90?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+!\n+! PR fortran/57035\n+!\n+!\n+\n+subroutine assumed_rank (a)\n+  use iso_c_binding\n+  integer, intent(in), target :: a(..)\n+  integer :: c(1:4)\n+  type(c_ptr) :: xx\n+  c = ubound(c,a) ! { dg-error \"Assumed-rank argument at .1. is only permitted as first actual argument to the intrinsic inquiry function ubound\" }\n+  c = transfer(a,1) ! { dg-error \"Assumed-rank argument at .1. is only permitted as actual argument to intrinsic inquiry functions\" }\n+  xx = c_loc(a)\n+end subroutine\n+\n+subroutine assumed_type (a)\n+  use iso_c_binding\n+  type(*), intent(in), target :: a\n+  integer :: c(1:4)\n+  type(c_ptr) :: xx\n+  c = ubound(c,a) ! { dg-error \"Assumed-type argument at .1. is only permitted as first actual argument to the intrinsic ubound\" }\n+  c = transfer(a,1) ! { dg-error \"Assumed-type argument at .1. is not permitted as actual argument to the intrinsic transfer\" }\n+  xx = c_loc(a)\n+end subroutine\n+\n+subroutine no_arg_check (a)\n+  use iso_c_binding\n+  integer, intent(in), target :: a\n+  !gcc$ attributes no_arg_check :: a\n+  integer :: c(1:4)\n+  type(c_ptr) :: xx\n+  c = ubound(c,a) ! { dg-error \"Variable with NO_ARG_CHECK attribute at .1. is only permitted as argument to the intrinsic functions C_LOC and PRESENT\" }\n+  c = transfer(a,1) ! { dg-error \"Variable with NO_ARG_CHECK attribute at .1. is only permitted as argument to the intrinsic functions C_LOC and PRESENT\" }\n+  xx = c_loc(a)\n+end subroutine"}, {"sha": "ff176fef81ac211b3b22cda1c51d6febbb69f429", "filename": "gcc/testsuite/gfortran.dg/no_arg_check_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_3.f90?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -114,7 +114,7 @@ subroutine thirteen(x, y)\n !GCC$ attributes NO_ARG_CHECK :: x\n   integer :: x\n   integer :: y(:)\n-  print *, ubound(y, dim=x) ! { dg-error \"must be INTEGER\" }\n+  print *, ubound(y, dim=x) ! { dg-error \"Variable with NO_ARG_CHECK attribute at .1. is only permitted as argument to the intrinsic functions C_LOC and PRESENT\" }\n end subroutine thirteen\n \n subroutine fourteen(x)"}, {"sha": "5f1928828060786098f5e42127d3ca121f11e3d8", "filename": "gcc/testsuite/gfortran.dg/sizeof_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_2.f90?ref=86307f49a77ab3d6ab82a33e1a0729bd68cb0f6a", "patch": "@@ -10,9 +10,9 @@ subroutine foo(x, y)\n   integer(8) :: ii\n   procedure() :: proc\n \n-  ii = sizeof (x) ! { dg-error \"shall not be TYPE\\(.\\)\" }\n-  ii = c_sizeof (x) ! { dg-error \"shall not be TYPE\\(.\\)\" }\n-  ii = storage_size (x) ! { dg-error \"shall not be TYPE\\(.\\)\" }\n+  ii = sizeof (x) ! { dg-error \"Assumed-type argument at .1. is not permitted as actual argument to the intrinsic sizeof\" }\n+  ii = c_sizeof (x) ! { dg-error \"Assumed-type argument at .1. is not permitted as actual argument to the intrinsic c_sizeof\" }\n+  ii = storage_size (x) ! { dg-error \"Assumed-type argument at .1. is not permitted as actual argument to the intrinsic storage_size\" }\n \n   ii = sizeof (y) ! { dg-error \"shall not be an assumed-size array\" }\n   ii = c_sizeof (y) ! { dg-error \"shall not be an assumed-size array\" }"}]}