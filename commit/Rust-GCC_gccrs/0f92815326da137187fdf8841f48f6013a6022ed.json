{"sha": "0f92815326da137187fdf8841f48f6013a6022ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5MjgxNTMyNmRhMTM3MTg3ZmRmODg0MWY0OGY2MDEzYTYwMjJlZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-10-30T11:49:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-30T11:49:21Z"}, "message": "typeck.c (cp_build_modify_expr): Prefer error + inform to error + error in one place.\n\n/cp\n2019-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_modify_expr): Prefer error + inform to\n\terror + error in one place.\n\t(get_delta_difference_1): Likewise.\n\t(get_delta_difference): Likewise, in two places.\n\n/testsuite\n2019-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/conversion/ptrmem2.C: Adjust for error + inform.\n\t* g++.dg/gomp/tpl-atomic-2.C: Likewise.\n\nFrom-SVN: r277610", "tree": {"sha": "d08265e58d236c3f977a4634fafd1cc8d20de227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d08265e58d236c3f977a4634fafd1cc8d20de227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f92815326da137187fdf8841f48f6013a6022ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f92815326da137187fdf8841f48f6013a6022ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f92815326da137187fdf8841f48f6013a6022ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f92815326da137187fdf8841f48f6013a6022ed/comments", "author": null, "committer": null, "parents": [{"sha": "c425e66b27eb0aa79f1100a6da87f65731ecd8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c425e66b27eb0aa79f1100a6da87f65731ecd8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c425e66b27eb0aa79f1100a6da87f65731ecd8b5"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "87a78f20b60695e20f4cc08838e36163fa80d852", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f92815326da137187fdf8841f48f6013a6022ed", "patch": "@@ -1,3 +1,10 @@\n+2019-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_modify_expr): Prefer error + inform to\n+\terror + error in one place.\n+\t(get_delta_difference_1): Likewise.\n+\t(get_delta_difference): Likewise, in two places.\n+\n 2019-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (build_x_unary_op): Use the location_t argument in"}, {"sha": "477c6a3995520ee8948bf2d40ac328478638cbc4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0f92815326da137187fdf8841f48f6013a6022ed", "patch": "@@ -8358,8 +8358,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t  if (newrhs == error_mark_node)\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"  in evaluation of %<%Q(%#T, %#T)%>\", modifycode,\n-\t\t       TREE_TYPE (lhs), TREE_TYPE (rhs));\n+\t\tinform (loc, \"  in evaluation of %<%Q(%#T, %#T)%>\",\n+\t\t\tmodifycode, TREE_TYPE (lhs), TREE_TYPE (rhs));\n \t      return error_mark_node;\n \t    }\n \n@@ -8594,7 +8594,7 @@ get_delta_difference_1 (tree from, tree to, bool c_cast_p,\n       if (!(complain & tf_error))\n \treturn error_mark_node;\n \n-      error (\"   in pointer to member function conversion\");\n+      inform (input_location, \"   in pointer to member function conversion\");\n       return size_zero_node;\n     }\n   else if (binfo)\n@@ -8655,7 +8655,7 @@ get_delta_difference (tree from, tree to,\n \t  return error_mark_node;\n \n \terror_not_base_type (from, to);\n-\terror (\"   in pointer to member conversion\");\n+\tinform (input_location, \"   in pointer to member conversion\");\n       \tresult = size_zero_node;\n       }\n     else\n@@ -8674,7 +8674,7 @@ get_delta_difference (tree from, tree to,\n \t      return error_mark_node;\n \n \t    error_not_base_type (from, to);\n-\t    error (\"   in pointer to member conversion\");\n+\t    inform (input_location, \"   in pointer to member conversion\");\n \t    result = size_zero_node;\n \t  }\n       }"}, {"sha": "bac4d0015508c6ccf6d54479d19d8aaae36fbb7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f92815326da137187fdf8841f48f6013a6022ed", "patch": "@@ -1,3 +1,8 @@\n+2019-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/conversion/ptrmem2.C: Adjust for error + inform.\n+\t* g++.dg/gomp/tpl-atomic-2.C: Likewise.\n+\n 2019-10-30  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/91393"}, {"sha": "1dec36bfba8f8b6bb9795c9688de3dcc9addf059", "filename": "gcc/testsuite/g++.dg/conversion/ptrmem2.C", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem2.C?ref=0f92815326da137187fdf8841f48f6013a6022ed", "patch": "@@ -15,16 +15,20 @@ int B::*p1 = static_cast<int B::*>(&D::x);\n int D::*p2 = static_cast<int D::*>(&B::x);\n \n // Virtual base class.\n-int V::*p3 = static_cast<int V::*>(&D::x);  // { dg-error \"\" }\n-int D::*p4 = static_cast<int D::*>(&V::x);  // { dg-error \"\" }\n+int V::*p3 = static_cast<int V::*>(&D::x);  // { dg-error \"virtual base\" }\n+int D::*p4 = static_cast<int D::*>(&V::x);  // { dg-error \"virtual base\" }\n \n // Inaccessible base class.\n-int P::*p5 = static_cast<int P::*>(&D::x);  // { dg-error \"\" }\n-int D::*p6 = static_cast<int D::*>(&P::x);  // { dg-error \"\" }\n+int P::*p5 = static_cast<int P::*>(&D::x);  // { dg-error \"inaccessible base\" }\n+// { dg-message \"pointer to member function\" \"\" { target *-*-* } .-1 }\n+int D::*p6 = static_cast<int D::*>(&P::x);  // { dg-error \"inaccessible base\" }\n+// { dg-message \"pointer to member function\" \"\" { target *-*-* } .-1 }\n \n // Ambiguous base class.\n-int A::*p7 = static_cast<int A::*>(&D::x);  // { dg-error \"\" }\n-int D::*p8 = static_cast<int D::*>(&A::x);  // { dg-error \"\" }\n+int A::*p7 = static_cast<int A::*>(&D::x);  // { dg-error \"ambiguous base\" }\n+// { dg-message \"pointer to member function\" \"\" { target *-*-* } .-1 }\n+int D::*p8 = static_cast<int D::*>(&A::x);  // { dg-error \"ambiguous base\" }\n+// { dg-message \"pointer to member function\" \"\" { target *-*-* } .-1 }\n \n // Valid conversions which increase cv-qualification.\n const int B::*p9 = static_cast<const int B::*>(&D::x);\n@@ -35,5 +39,5 @@ int B::*p11 = static_cast<int B::*>(p10); // { dg-error \"casts away qualifiers\"\n int D::*p12 = static_cast<int D::*>(p9);  // { dg-error \"casts away qualifiers\" }\n \n // Attempts to change member type.\n-float B::*p13 = static_cast<float B::*>(&D::x); // { dg-error \"\" }\n-float D::*p14 = static_cast<float D::*>(&B::x); // { dg-error \"\" }\n+float B::*p13 = static_cast<float B::*>(&D::x); // { dg-error \"invalid .static_cast.\" }\n+float D::*p14 = static_cast<float D::*>(&B::x); // { dg-error \"invalid .static_cast.\" }"}, {"sha": "1591831c5940f824ece3cc3fc1cb8fa0eb541af4", "filename": "gcc/testsuite/g++.dg/gomp/tpl-atomic-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftpl-atomic-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f92815326da137187fdf8841f48f6013a6022ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftpl-atomic-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftpl-atomic-2.C?ref=0f92815326da137187fdf8841f48f6013a6022ed", "patch": "@@ -13,14 +13,14 @@ template<typename T> void f1()\n template<typename T> void f2(float *f)\n {\n   #pragma omp atomic\t// { dg-error \"invalid\" }\n-  *f |= 1;\t\t// { dg-error \"evaluation\" }\n+  *f |= 1;             // { dg-message \"evaluation\" \"\" { target *-*-* } .-1 }\n }\n \n // Here the rhs is dependent, but not type dependent.\n template<typename T> void f3(float *f)\n {\n   #pragma omp atomic\t// { dg-error \"invalid\" }\n-  *f |= sizeof (T);\t// { dg-error \"evaluation\" }\n+  *f |= sizeof (T);    // { dg-message \"evaluation\" \"\" { target *-*-* } .-1 }\n }\n \n // And the converse, no error here because we're never fed a T."}]}