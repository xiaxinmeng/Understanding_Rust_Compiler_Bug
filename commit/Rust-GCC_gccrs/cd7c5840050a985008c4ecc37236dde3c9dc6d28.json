{"sha": "cd7c5840050a985008c4ecc37236dde3c9dc6d28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q3YzU4NDAwNTBhOTg1MDA4YzRlY2MzNzIzNmRkZTNjOWRjNmQyOA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-03-08T01:37:39Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-03-08T01:37:39Z"}, "message": "re GNATS gcj/102 (crashes when compiling try block from java source)\n\n2000-03-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (qualify_ambiguous_name): Properly handle expressions\n\tusing `null'.\n\n(This fixes the Java PR #102:\n http://sourceware.cygnus.com/ml/java-prs/1999-q4/msg00152.html)\n\nFrom-SVN: r32397", "tree": {"sha": "ccc9a4f22abf465f91f3c7e8568dbaa14d5372dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc9a4f22abf465f91f3c7e8568dbaa14d5372dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd7c5840050a985008c4ecc37236dde3c9dc6d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7c5840050a985008c4ecc37236dde3c9dc6d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7c5840050a985008c4ecc37236dde3c9dc6d28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7c5840050a985008c4ecc37236dde3c9dc6d28/comments", "author": null, "committer": null, "parents": [{"sha": "6632dcdd410754a2c25a117cae5fab151b94c6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6632dcdd410754a2c25a117cae5fab151b94c6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6632dcdd410754a2c25a117cae5fab151b94c6b4"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "034faed97692cdb826918d2a42014c1003034262", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7c5840050a985008c4ecc37236dde3c9dc6d28/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7c5840050a985008c4ecc37236dde3c9dc6d28/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cd7c5840050a985008c4ecc37236dde3c9dc6d28", "patch": "@@ -1,3 +1,8 @@\n+2000-03-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (qualify_ambiguous_name): Properly handle expressions\n+\tusing `null'.\n+\t\n 2000-03-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (check_final_assignment): Extended to process"}, {"sha": "0434edfe8ceca57afb28068783cf673225b700ea", "filename": "gcc/java/parse.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7c5840050a985008c4ecc37236dde3c9dc6d28/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7c5840050a985008c4ecc37236dde3c9dc6d28/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=cd7c5840050a985008c4ecc37236dde3c9dc6d28", "patch": "@@ -10632,6 +10632,9 @@ qualify_ambiguous_name (id)\n \t&& TREE_CODE (TREE_TYPE (qual_wfl)) == EXPR_WITH_FILE_LOCATION)\n       name = EXPR_WFL_NODE (TREE_TYPE (qual_wfl));\n \n+    else if (code == INTEGER_CST)\n+      name = qual_wfl;\n+    \n     else if ((code == ARRAY_REF || code == CALL_EXPR || code == MODIFY_EXPR) &&\n \t     TREE_CODE (TREE_OPERAND (qual_wfl, 0)) == EXPR_WITH_FILE_LOCATION)\n       name = EXPR_WFL_NODE (TREE_OPERAND (qual_wfl, 0));\n@@ -10686,8 +10689,9 @@ qualify_ambiguous_name (id)\n      declaration or parameter declaration, then it is an expression\n      name. We don't carry this test out if we're in the context of the\n      use of SUPER or THIS */\n-  if (!this_found && !super_found && \n-      TREE_CODE (name) != STRING_CST && (decl = IDENTIFIER_LOCAL_VALUE (name)))\n+  if (!this_found && !super_found \n+      && TREE_CODE (name) != STRING_CST && TREE_CODE (name) != INTEGER_CST\n+      && (decl = IDENTIFIER_LOCAL_VALUE (name)))\n     {\n       RESOLVE_EXPRESSION_NAME_P (qual_wfl) = 1;\n       QUAL_RESOLUTION (qual) = decl;\n@@ -10713,8 +10717,8 @@ qualify_ambiguous_name (id)\n      - NAME is declared by exactly on type-import-on-demand declaration\n      of the compilation unit containing NAME. \n      - NAME is actually a STRING_CST. */\n-  else if (TREE_CODE (name) == STRING_CST ||\n-\t   (decl = resolve_and_layout (name, NULL_TREE)))\n+  else if (TREE_CODE (name) == STRING_CST || TREE_CODE (name) == INTEGER_CST\n+\t   || (decl = resolve_and_layout (name, NULL_TREE)))\n     {\n       RESOLVE_TYPE_NAME_P (qual_wfl) = 1;\n       QUAL_RESOLUTION (qual) = decl;"}, {"sha": "682cf7839fe69ad1311d6f662bc262579955e53c", "filename": "gcc/java/parse.y", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7c5840050a985008c4ecc37236dde3c9dc6d28/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7c5840050a985008c4ecc37236dde3c9dc6d28/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=cd7c5840050a985008c4ecc37236dde3c9dc6d28", "patch": "@@ -7942,6 +7942,9 @@ qualify_ambiguous_name (id)\n \t&& TREE_CODE (TREE_TYPE (qual_wfl)) == EXPR_WITH_FILE_LOCATION)\n       name = EXPR_WFL_NODE (TREE_TYPE (qual_wfl));\n \n+    else if (code == INTEGER_CST)\n+      name = qual_wfl;\n+    \n     else if ((code == ARRAY_REF || code == CALL_EXPR || code == MODIFY_EXPR) &&\n \t     TREE_CODE (TREE_OPERAND (qual_wfl, 0)) == EXPR_WITH_FILE_LOCATION)\n       name = EXPR_WFL_NODE (TREE_OPERAND (qual_wfl, 0));\n@@ -7996,8 +7999,9 @@ qualify_ambiguous_name (id)\n      declaration or parameter declaration, then it is an expression\n      name. We don't carry this test out if we're in the context of the\n      use of SUPER or THIS */\n-  if (!this_found && !super_found && \n-      TREE_CODE (name) != STRING_CST && (decl = IDENTIFIER_LOCAL_VALUE (name)))\n+  if (!this_found && !super_found \n+      && TREE_CODE (name) != STRING_CST && TREE_CODE (name) != INTEGER_CST\n+      && (decl = IDENTIFIER_LOCAL_VALUE (name)))\n     {\n       RESOLVE_EXPRESSION_NAME_P (qual_wfl) = 1;\n       QUAL_RESOLUTION (qual) = decl;\n@@ -8023,8 +8027,8 @@ qualify_ambiguous_name (id)\n      - NAME is declared by exactly on type-import-on-demand declaration\n      of the compilation unit containing NAME. \n      - NAME is actually a STRING_CST. */\n-  else if (TREE_CODE (name) == STRING_CST ||\n-\t   (decl = resolve_and_layout (name, NULL_TREE)))\n+  else if (TREE_CODE (name) == STRING_CST || TREE_CODE (name) == INTEGER_CST\n+\t   || (decl = resolve_and_layout (name, NULL_TREE)))\n     {\n       RESOLVE_TYPE_NAME_P (qual_wfl) = 1;\n       QUAL_RESOLUTION (qual) = decl;"}]}