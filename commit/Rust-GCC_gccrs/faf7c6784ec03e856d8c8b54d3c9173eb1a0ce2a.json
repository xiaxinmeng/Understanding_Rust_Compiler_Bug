{"sha": "faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmN2M2Nzg0ZWMwM2U4NTZkOGM4YjU0ZDNjOTE3M2ViMWEwY2UyYQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2006-02-18T20:31:28Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-02-18T20:31:28Z"}, "message": "tree-flow.h (struct var_ann_d): Rename field is_alias_tag to is_aliased.\n\n\n\t* tree-flow.h (struct var_ann_d): Rename field is_alias_tag to\n\tis_aliased.\n\tUpdate all users.\n\nFrom-SVN: r111249", "tree": {"sha": "8706195a9d7fb08a7c0d067ba68332832e65eaa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8706195a9d7fb08a7c0d067ba68332832e65eaa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/comments", "author": null, "committer": null, "parents": [{"sha": "3f2de3dcf930e5fb85df3d6f89a6faac8d6c5367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2de3dcf930e5fb85df3d6f89a6faac8d6c5367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2de3dcf930e5fb85df3d6f89a6faac8d6c5367"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "f2ccbca6139e839d2eb59d2c6645d1b1e886f313", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "patch": "@@ -1,3 +1,9 @@\n+2006-02-18  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-flow.h (struct var_ann_d): Rename field is_alias_tag to\n+\tis_aliased.\n+\tUpdate all users.\n+\n 2006-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/26334"}, {"sha": "a21b99284e4b8d99afadc362f92ad6d306594000", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "patch": "@@ -350,8 +350,8 @@ dump_variable (FILE *file, tree var)\n       print_generic_expr (file, ann->type_mem_tag, dump_flags);\n     }\n \n-  if (ann && ann->is_alias_tag)\n-    fprintf (file, \", is an alias tag\");\n+  if (ann && ann->is_aliased)\n+    fprintf (file, \", is aliased\");\n \n   if (TREE_ADDRESSABLE (var))\n     fprintf (file, \", is addressable\");"}, {"sha": "32b8c9f6da6eb01d0fc61976d3ec1f39b29d2892", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "patch": "@@ -164,10 +164,8 @@ struct var_ann_d GTY(())\n   /* Used when building root_var structures in tree_ssa_live.[ch].  */\n   unsigned root_var_processed : 1;\n \n-  /* Nonzero if this variable is an alias tag that represents references to\n-     other variables (i.e., this variable appears in the MAY_ALIASES array\n-     of other variables).  */\n-  unsigned is_alias_tag : 1;\n+  /* Nonzero if this variable is in the alias set of another variable.  */\n+  unsigned is_aliased : 1;\n \n   /* Nonzero if this variable was used after SSA optimizations were\n      applied.  We set this when translating out of SSA form.  */\n@@ -206,7 +204,6 @@ struct var_ann_d GTY(())\n      current version of this variable (an SSA_NAME).  */\n   tree current_def;\n   \n-\n   /* If this variable is a structure, this fields holds a list of\n      symbols representing each of the fields of the structure.  */\n   subvar_t subvars;"}, {"sha": "bb2c3ce5c9ef92e7c9fe65e66883ce9cf9332797", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "patch": "@@ -766,7 +766,7 @@ init_alias_info (void)\n \t{\n \t  var_ann_t ann = var_ann (var);\n \t  \n-\t  ann->is_alias_tag = 0;\n+\t  ann->is_aliased = 0;\n \t  ann->may_aliases = NULL;\n \t  NUM_REFERENCES_CLEAR (ann);\n \n@@ -1209,7 +1209,7 @@ group_aliases_into (tree tag, bitmap tag_aliases, struct alias_info *ai)\n       var_ann_t ann = var_ann (var);\n \n       /* Make TAG the unique alias of VAR.  */\n-      ann->is_alias_tag = 0;\n+      ann->is_aliased = 0;\n       ann->may_aliases = NULL;\n \n       /* Note that VAR and TAG may be the same if the function has no\n@@ -1849,7 +1849,7 @@ add_may_alias (tree var, tree alias)\n       return;\n \n   VEC_safe_push (tree, gc, v_ann->may_aliases, alias);\n-  a_ann->is_alias_tag = 1;\n+  a_ann->is_aliased = 1;\n }\n \n \n@@ -2454,7 +2454,7 @@ is_aliased_with (tree tag, tree sym)\n   VEC(tree,gc) *aliases;\n   tree al;\n \n-  if (var_ann (sym)->is_alias_tag)\n+  if (var_ann (sym)->is_aliased)\n     {\n       aliases = var_ann (tag)->may_aliases;\n "}, {"sha": "748ff5d62f698d0f21eba5fc46f3b4573908d1eb", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "patch": "@@ -1740,6 +1740,7 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n   return true;\n }\n \n+\n /* Add VAR to the virtual operands array. FLAGS is as in\n    get_expr_operands.  FULL_REF is a tree that contains the entire\n    pointer dereference expression, if available, or NULL otherwise.\n@@ -1780,7 +1781,6 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n   if ((flags & opf_non_specific) && unmodifiable_var_p (var))\n     flags &= ~(opf_is_def | opf_kill_def);\n   \n-\n   /* The variable is not a GIMPLE register.  Add it (or its aliases) to\n      virtual operands, unless the caller has specifically requested\n      not to add virtual operands (used when adding operands inside an\n@@ -1845,7 +1845,8 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t     It is also necessary to add bare defs on clobbers for\n \t     TMT's, so that bare TMT uses caused by pruning all the\n \t     aliases will link up properly with calls.   */\n-\t  if (v_ann->is_alias_tag || none_added\n+\t  if (v_ann->is_aliased\n+\t      || none_added\n \t      || (TREE_CODE (var) == TYPE_MEMORY_TAG && for_clobber))\n \t    append_v_may_def (var);\n \t}\n@@ -1862,13 +1863,14 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \n \t  /* Similarly, append a virtual uses for VAR itself, when\n \t     it is an alias tag.  */\n-\t  if (v_ann->is_alias_tag || none_added)\n+\t  if (v_ann->is_aliased || none_added)\n \t    append_vuse (var);\n \t}\n     }\n }\n \n-/* Add *VAR_P to the appropriate operand array for INFO.  FLAGS is as in\n+\n+/* Add *VAR_P to the appropriate operand array for S_ANN.  FLAGS is as in\n    get_expr_operands.  If *VAR_P is a GIMPLE register, it will be added to\n    the statement's real operands, otherwise it is added to virtual\n    operands.  */\n@@ -1884,8 +1886,9 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n   gcc_assert (SSA_VAR_P (var));\n \n   is_real_op = is_gimple_reg (var);\n-  /* If this is a real operand, the operand is either ssa name or decl.\n-     Virtual operands may only be decls.  */\n+\n+  /* If this is a real operand, the operand is either an SSA name or a \n+     decl.  Virtual operands may only be decls.  */\n   gcc_assert (is_real_op || DECL_P (var));\n \n   sym = (TREE_CODE (var) == SSA_NAME ? SSA_NAME_VAR (var) : var);"}, {"sha": "02e8f1ed4ab204c30fa9c04c9a4f59f432cef862", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=faf7c6784ec03e856d8c8b54d3c9173eb1a0ce2a", "patch": "@@ -406,10 +406,10 @@ verify_flow_insensitive_alias_info (void)\n       ann = var_ann (var);\n \n       if (!MTAG_P (var)\n-\t  && ann->is_alias_tag\n+\t  && ann->is_aliased\n \t  && !bitmap_bit_p (visited, DECL_UID (var)))\n \t{\n-\t  error (\"addressable variable that is an alias tag but is not in any alias set\");\n+\t  error (\"addressable variable that is aliased but is not in any alias set\");\n \t  goto err;\n \t}\n     }"}]}