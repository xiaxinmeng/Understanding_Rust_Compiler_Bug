{"sha": "fdc545922bfb96301e5bbcb49935c4f70750f573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjNTQ1OTIyYmZiOTYzMDFlNWJiY2I0OTkzNWM0ZjcwNzUwZjU3Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-13T08:36:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-13T08:36:21Z"}, "message": "alpha.md (FMODE): New mode iterator.\n\n\t* config/alpha/alpha.md (FMODE): New mode iterator.\n\t(modesuffix): Handle SF and DF modes.\n\t(opmode): New mode attribute.\n\t(abs<mode>2): Macroize insn from abs{sf,df}2 using FMODE mode iterator.\n\t(*nabs<mode>2): Macroize insn from *nabs{sf,df}2 using\n\tFMODE mode iterator.\n\t(neg<mode>2): Macroize insn from neg{sf,df}2 using FMODE mode iterator.\n\t(copysign<mode>3): Macroize insn from copysign{sf,df}3 using\n\tFMODE mode iterator.\n\t(*ncopysign<mode>3): Macroize insn from *ncopysign{sf,df}3 using\n\tFMODE mode iterator.\n\t(*add<mode>3_ieee): Macroize insn from *add{sf,df}_ieee using\n\tFMODE mode iterator.\n\t(add<mode>3): Macroize insn from add{sf,df}3 using FMODE mode iterator.\n\t(*sub<mode>3_ieee): Macroize insn from *sub{sf,df}3_ieee using\n\tFMODE mode iterator.\n\t(sub<mode>3): Macroize insn from sub{sf,df}3 using FMODE mode iterator.\n\t(*mul<mode>3_ieee): Macroize insn from *mul{sf,df}3_ieee using\n\tFMODE mode iterator.\n\t(mul<mode>3): Macroize insn from mul{sf,df}3 using FMODE mode iterator.\n\t(*div<mode>3_ieee): Macroize insn from *div{sf,df}3_ieee using\n\tFMODE mode iterator.\n\t(div<mode>3): Macroize insn from div{sf,df}3 using FMODE mode iterator.\n\t(*sqrt<mode>2_ieee): Macroize insn from *sqrt{sf,df}2_ieee using\n\tFMODE mode iterator.\n\t(sqrt<mode>2): Macroize insn from sqrt{sf,df}2\n\tusing FMODE mode iterator.\n\t(*mov<mode>cc_internal): Macroize insn from *mov{sf,df}cc_internal\n\tusing FMODE mode iterator.\n\t(mov<mode>cc): Macroize expander from mov{sf,df}cc\n\tusing FMODE mode iterator.\n\nFrom-SVN: r192421", "tree": {"sha": "972d8a8242a9aa0817a3637b6691396bb27d7deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972d8a8242a9aa0817a3637b6691396bb27d7deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc545922bfb96301e5bbcb49935c4f70750f573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc545922bfb96301e5bbcb49935c4f70750f573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc545922bfb96301e5bbcb49935c4f70750f573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc545922bfb96301e5bbcb49935c4f70750f573/comments", "author": null, "committer": null, "parents": [{"sha": "c4648c1daceeac3f009a78de83ac8db0668e14ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4648c1daceeac3f009a78de83ac8db0668e14ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4648c1daceeac3f009a78de83ac8db0668e14ee"}], "stats": {"total": 719, "additions": 294, "deletions": 425}, "files": [{"sha": "190748015d29b6c3d28ce5c2099737c946e34faf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc545922bfb96301e5bbcb49935c4f70750f573/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc545922bfb96301e5bbcb49935c4f70750f573/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdc545922bfb96301e5bbcb49935c4f70750f573", "patch": "@@ -1,3 +1,37 @@\n+2012-10-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.md (FMODE): New mode iterator.\n+\t(modesuffix): Handle SF and DF modes.\n+\t(opmode): New mode attribute.\n+\t(abs<mode>2): Macroize insn from abs{sf,df}2 using FMODE mode iterator.\n+\t(*nabs<mode>2): Macroize insn from *nabs{sf,df}2 using\n+\tFMODE mode iterator.\n+\t(neg<mode>2): Macroize insn from neg{sf,df}2 using FMODE mode iterator.\n+\t(copysign<mode>3): Macroize insn from copysign{sf,df}3 using\n+\tFMODE mode iterator.\n+\t(*ncopysign<mode>3): Macroize insn from *ncopysign{sf,df}3 using\n+\tFMODE mode iterator.\n+\t(*add<mode>3_ieee): Macroize insn from *add{sf,df}_ieee using\n+\tFMODE mode iterator.\n+\t(add<mode>3): Macroize insn from add{sf,df}3 using FMODE mode iterator.\n+\t(*sub<mode>3_ieee): Macroize insn from *sub{sf,df}3_ieee using\n+\tFMODE mode iterator.\n+\t(sub<mode>3): Macroize insn from sub{sf,df}3 using FMODE mode iterator.\n+\t(*mul<mode>3_ieee): Macroize insn from *mul{sf,df}3_ieee using\n+\tFMODE mode iterator.\n+\t(mul<mode>3): Macroize insn from mul{sf,df}3 using FMODE mode iterator.\n+\t(*div<mode>3_ieee): Macroize insn from *div{sf,df}3_ieee using\n+\tFMODE mode iterator.\n+\t(div<mode>3): Macroize insn from div{sf,df}3 using FMODE mode iterator.\n+\t(*sqrt<mode>2_ieee): Macroize insn from *sqrt{sf,df}2_ieee using\n+\tFMODE mode iterator.\n+\t(sqrt<mode>2): Macroize insn from sqrt{sf,df}2\n+\tusing FMODE mode iterator.\n+\t(*mov<mode>cc_internal): Macroize insn from *mov{sf,df}cc_internal\n+\tusing FMODE mode iterator.\n+\t(mov<mode>cc): Macroize expander from mov{sf,df}cc\n+\tusing FMODE mode iterator.\n+\n 2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54602\n@@ -12,8 +46,8 @@\n \t* config/sh/predicates.md (fpul_operand): Add comment.\n \t(fpul_fsca_operand, fsca_scale_factor): New predicates.\n \t* config/sh/sh.md (fsca): Move below sincossf3 expander.  Convert to\n-\tinsn_and_split.  Use fpul_fsca_operand and fsca_scale_factor predicates.\n-\tSimplify fpul operand in splitter.\n+\tinsn_and_split.  Use fpul_fsca_operand and fsca_scale_factor\n+\tpredicates.  Simplify fpul operand in splitter.\n \n 2012-10-12  Jan Hubicka <jh@suse.cz>\n \n@@ -33,8 +67,7 @@\n \tprotected, private, template, operator, friend, &, ~.\n \t(TYPEDEF): New.  Support typedef.\n \t* gengtype-parser.c: updated 'token_names[]'\n-\t(direct_declarator): Add support for parsing functions\n-\tand ctors.\n+\t(direct_declarator): Add support for parsing functions and ctors.\n \n 2012-10-12  Diego Novillo  <dnovillo@google.com>\n \n@@ -54,23 +87,22 @@\n \tAdd argument IN_STRUCT.\n \tIf the token following ID is a '(', consider ID a\n \tfunction and return NULL.\n-\tIf the token following '(' is not a '*', and IN_STRUCT is\n-\ttrue, conclude that this is a ctor and return NULL.\n+\tIf the token following '(' is not a '*', and IN_STRUCT is true,\n+\tconclude that this is a ctor and return NULL.\n \tIf the token is IGNORABLE_CXX_KEYWORD, return NULL.\n \t(inner_declarator): Add argument IN_STRUCT.\n \tUpdate all callers.\n-\t(declarator): Add argument IN_STRUCT with default value\n-\tfalse.  Update all callers.\n+\t(declarator): Add argument IN_STRUCT with default value false.\n+\tUpdate all callers.\n \t(type): Document argument NESTED.\n \tSkip over C++ inheritance specifiers.\n \tIf a token TYPEDEF is found, emit an error.\n-\tIf an enum is found inside a class/structure, emit an\n-\terror.\n+\tIf an enum is found inside a class/structure, emit an error.\n \t(typedefs, structures, param_structs, variables): Initialize.\n \t(new_structure): Do not complain about duplicate\n \tstructures if S has a line location set.\n-\t* gengtype-state.c (write_state_type): Remove default\n-\thandler.  Add handler for TYPE_NONE.\n+\t* gengtype-state.c (write_state_type): Remove default handler.\n+\tAdd handler for TYPE_NONE.\n \t(read_state_scalar_char_type):\n \t* gengtype.c: Fix spacing.\n \t* gengtype.h (enum gty_token): Add name.  Add token"}, {"sha": "d4081d77cc72a16eccf60862c5f2265328f1cb7c", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 250, "deletions": 413, "changes": 663, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc545922bfb96301e5bbcb49935c4f70750f573/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc545922bfb96301e5bbcb49935c4f70750f573/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=fdc545922bfb96301e5bbcb49935c4f70750f573", "patch": "@@ -98,7 +98,8 @@\n \n (define_mode_attr DWI [(SI \"DI\") (DI \"TI\")])\n (define_mode_attr modesuffix [(QI \"b\") (HI \"w\") (SI \"l\") (DI \"q\")\n-\t\t  \t      (V8QI \"b8\") (V4HI \"w4\")])\n+\t\t  \t      (V8QI \"b8\") (V4HI \"w4\")\n+\t\t\t      (SF \"%,\") (DF \"%-\")])\n (define_mode_attr vecmodesuffix [(QI \"b8\") (HI \"w4\")])\n \n (define_code_iterator any_maxmin [smax smin umax umin])\n@@ -1666,30 +1667,21 @@\n ;; from single, so indicate that.  The exception are the ones that simply\n ;; play with the sign bits; it's not clear what to do there.\n \n-(define_insn \"abssf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(abs:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"cpys $f31,%R1,%0\"\n-  [(set_attr \"type\" \"fcpys\")])\n+(define_mode_iterator FMODE [SF DF])\n \n-(define_insn \"*nabssf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (abs:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))))]\n-  \"TARGET_FP\"\n-  \"cpysn $f31,%R1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n+(define_mode_attr opmode [(SF \"si\") (DF \"di\")])\n \n-(define_insn \"absdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(abs:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")))]\n+(define_insn \"abs<mode>2\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(abs:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n   \"cpys $f31,%R1,%0\"\n   [(set_attr \"type\" \"fcpys\")])\n \n-(define_insn \"*nabsdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (abs:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\"))))]\n+(define_insn \"*nabs<mode>2\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(neg:FMODE\n+\t (abs:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\"))))]\n   \"TARGET_FP\"\n   \"cpysn $f31,%R1,%0\"\n   [(set_attr \"type\" \"fadd\")])\n@@ -1717,16 +1709,9 @@\n   [(const_int 0)]\n   \"alpha_split_tfmode_frobsign (operands, gen_andnotdi3); DONE;\")\n \n-(define_insn \"negsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"cpysn %R1,%R1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n-\n-(define_insn \"negdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")))]\n+(define_insn \"neg<mode>2\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(neg:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n   \"cpysn %R1,%R1,%0\"\n   [(set_attr \"type\" \"fadd\")])\n@@ -1754,117 +1739,285 @@\n   [(const_int 0)]\n   \"alpha_split_tfmode_frobsign (operands, gen_xordi3); DONE;\")\n \n-(define_insn \"copysignsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t    (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")]\n-\t\t   UNSPEC_COPYSIGN))]\n+(define_insn \"copysign<mode>3\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(unspec:FMODE [(match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")\n+\t\t       (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")]\n+\t\t      UNSPEC_COPYSIGN))]\n   \"TARGET_FP\"\n   \"cpys %R2,%R1,%0\"\n   [(set_attr \"type\" \"fadd\")])\n \n-(define_insn \"*ncopysignsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (unspec:SF [(match_operand:SF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t\t    (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")]\n-\t\t\t   UNSPEC_COPYSIGN)))]\n+(define_insn \"*ncopysign<mode>3\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(neg:FMODE\n+\t (unspec:FMODE [(match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")\n+\t\t\t(match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")]\n+\t\t       UNSPEC_COPYSIGN)))]\n   \"TARGET_FP\"\n   \"cpysn %R2,%R1,%0\"\n   [(set_attr \"type\" \"fadd\")])\n \n-(define_insn \"copysigndf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t    (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")]\n-\t\t   UNSPEC_COPYSIGN))]\n+(define_insn \"*add<mode>3_ieee\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=&f\")\n+\t(plus:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"%fG\")\n+\t\t    (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n+  \"add<modesuffix>%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"add<mode>3\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(plus:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"%fG\")\n+\t\t    (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"cpys %R2,%R1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n+  \"add<modesuffix>%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"*ncopysigndf3\"\n+(define_insn \"*adddf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (unspec:DF [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t\t    (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")]\n-\t\t\t   UNSPEC_COPYSIGN)))]\n-  \"TARGET_FP\"\n-  \"cpysn %R2,%R1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n+\t(plus:DF (float_extend:DF\n+\t\t  (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n+\t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"add%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"*addsf_ieee\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n-\t(plus:SF (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n+(define_insn \"*adddf_ext2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(plus:DF (float_extend:DF\n+\t\t  (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\"))\n+\t\t (float_extend:DF\n+\t\t  (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"add%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_expand \"addtf3\"\n+  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n+   (use (match_operand:TF 1 \"general_operand\" \"\"))\n+   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  \"TARGET_HAS_XFLOATING_LIBS\"\n+  \"alpha_emit_xfloating_arith (PLUS, operands); DONE;\")\n+\n+(define_insn \"*sub<mode>3_ieee\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=&f\")\n+\t(minus:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")\n+\t\t     (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"add%,%/ %R1,%R2,%0\"\n+  \"sub<modesuffix>%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"addsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n+(define_insn \"sub<mode>3\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(minus:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")\n+\t\t     (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"add%,%/ %R1,%R2,%0\"\n+  \"sub<modesuffix>%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"*adddf_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n-\t(plus:DF (match_operand:DF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"add%-%/ %R1,%R2,%0\"\n+(define_insn \"*subdf_ext1\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(minus:DF (float_extend:DF\n+\t\t   (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n+\t\t  (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"adddf3\"\n+(define_insn \"*subdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (match_operand:DF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"add%-%/ %R1,%R2,%0\"\n+\t(minus:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n+\t\t  (float_extend:DF\n+\t\t   (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"*adddf_ext1\"\n+(define_insn \"*subdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (float_extend:DF\n+\t(minus:DF (float_extend:DF\n+\t\t   (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n+\t\t  (float_extend:DF\n+\t\t   (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"sub%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_expand \"subtf3\"\n+  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n+   (use (match_operand:TF 1 \"general_operand\" \"\"))\n+   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  \"TARGET_HAS_XFLOATING_LIBS\"\n+  \"alpha_emit_xfloating_arith (MINUS, operands); DONE;\")\n+\n+(define_insn \"*mul<mode>3_ieee\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=&f\")\n+\t(mult:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"%fG\")\n+\t\t    (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n+  \"mul<modesuffix>%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"mul<mode>3\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(mult:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"%fG\")\n+\t\t    (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP\"\n+  \"mul<modesuffix>%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"*muldf_ext1\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n \t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"add%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n+  \"mul%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fmul\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_insn \"*adddf_ext2\"\n+(define_insn \"*muldf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (float_extend:DF\n+\t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\"))\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"add%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n+  \"mul%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fmul\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"normal\")\n    (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n-(define_expand \"addtf3\"\n+(define_expand \"multf3\"\n   [(use (match_operand:TF 0 \"register_operand\" \"\"))\n    (use (match_operand:TF 1 \"general_operand\" \"\"))\n    (use (match_operand:TF 2 \"general_operand\" \"\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n-  \"alpha_emit_xfloating_arith (PLUS, operands); DONE;\")\n+  \"alpha_emit_xfloating_arith (MULT, operands); DONE;\")\n+\n+(define_insn \"*div<mode>3_ieee\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=&f\")\n+\t(div:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")\n+\t\t   (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n+  \"div<modesuffix>%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fdiv\")\n+   (set_attr \"opsize\" \"<opmode>\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"div<mode>3\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(div:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")\n+\t\t   (match_operand:FMODE 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP\"\n+  \"div<modesuffix>%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fdiv\")\n+   (set_attr \"opsize\" \"<opmode>\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"*divdf_ext1\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n+\t\t(match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"div%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fdiv\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"*divdf_ext2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(div:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n+\t\t(float_extend:DF\n+\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"div%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fdiv\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"*divdf_ext3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n+\t\t(float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n+  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n+  \"div%-%/ %R1,%R2,%0\"\n+  [(set_attr \"type\" \"fdiv\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_expand \"divtf3\"\n+  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n+   (use (match_operand:TF 1 \"general_operand\" \"\"))\n+   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n+  \"TARGET_HAS_XFLOATING_LIBS\"\n+  \"alpha_emit_xfloating_arith (DIV, operands); DONE;\")\n+\n+(define_insn \"*sqrt<mode>2_ieee\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=&f\")\n+\t(sqrt:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n+  \"sqrt<modesuffix>%/ %R1,%0\"\n+  [(set_attr \"type\" \"fsqrt\")\n+   (set_attr \"opsize\" \"<opmode>\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n+\n+(define_insn \"sqrt<mode>2\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f\")\n+\t(sqrt:FMODE (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG\")))]\n+  \"TARGET_FP && TARGET_FIX\"\n+  \"sqrt<modesuffix>%/ %R1,%0\"\n+  [(set_attr \"type\" \"fsqrt\")\n+   (set_attr \"opsize\" \"<opmode>\")\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n ;; Define conversion operators between DFmode and SImode, using the cvtql\n ;; instruction.  To allow combine et al to do useful things, we keep the\n@@ -2270,299 +2423,6 @@\n   emit_insn (gen_truncdfsf2 (operands[0], tmpf));\n   DONE;\n })\n-\n-(define_insn \"*divsf3_ieee\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n-\t(div:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t(match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"div%,%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"divsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(div:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t(match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"div%,%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*divdf3_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n-\t(div:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t(match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"div%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"divdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(div:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t(match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"div%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*divdf_ext1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n-\t\t(match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"div%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*divdf_ext2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(div:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t(float_extend:DF\n-\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"div%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*divdf_ext3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n-\t\t(float_extend:DF (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"div%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_expand \"divtf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n-  \"TARGET_HAS_XFLOATING_LIBS\"\n-  \"alpha_emit_xfloating_arith (DIV, operands); DONE;\")\n-\n-(define_insn \"*mulsf3_ieee\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n-\t(mult:SF (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"mul%,%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"mulsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(mult:SF (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"mul%,%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*muldf3_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n-\t(mult:DF (match_operand:DF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"mul%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"muldf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(mult:DF (match_operand:DF 1 \"reg_or_0_operand\" \"%fG\")\n-\t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"mul%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*muldf_ext1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(mult:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n-\t\t (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"mul%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*muldf_ext2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(mult:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"reg_or_0_operand\" \"%fG\"))\n-\t\t (float_extend:DF\n-\t\t  (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"mul%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_expand \"multf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n-  \"TARGET_HAS_XFLOATING_LIBS\"\n-  \"alpha_emit_xfloating_arith (MULT, operands); DONE;\")\n-\n-(define_insn \"*subsf3_ieee\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n-\t(minus:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t  (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sub%,%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"subsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t  (match_operand:SF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"sub%,%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*subdf3_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n-\t(minus:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t  (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sub%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"subdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t  (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP\"\n-  \"sub%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*subdf_ext1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (float_extend:DF\n-\t\t   (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n-\t\t  (match_operand:DF 2 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"sub%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*subdf_ext2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")\n-\t\t  (float_extend:DF\n-\t\t   (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"sub%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*subdf_ext3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (float_extend:DF\n-\t\t   (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))\n-\t\t  (float_extend:DF\n-\t\t   (match_operand:SF 2 \"reg_or_0_operand\" \"fG\"))))]\n-  \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"sub%-%/ %R1,%R2,%0\"\n-  [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_expand \"subtf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"\"))\n-   (use (match_operand:TF 1 \"general_operand\" \"\"))\n-   (use (match_operand:TF 2 \"general_operand\" \"\"))]\n-  \"TARGET_HAS_XFLOATING_LIBS\"\n-  \"alpha_emit_xfloating_arith (MINUS, operands); DONE;\")\n-\n-(define_insn \"*sqrtsf2_ieee\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n-\t(sqrt:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sqrt%,%/ %R1,%0\"\n-  [(set_attr \"type\" \"fsqrt\")\n-   (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"sqrtsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(sqrt:SF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_FIX\"\n-  \"sqrt%,%/ %R1,%0\"\n-  [(set_attr \"type\" \"fsqrt\")\n-   (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"*sqrtdf2_ieee\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n-\t(sqrt:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sqrt%-%/ %R1,%0\"\n-  [(set_attr \"type\" \"fsqrt\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n-\n-(define_insn \"sqrtdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(sqrt:DF (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_FIX\"\n-  \"sqrt%-%/ %R1,%0\"\n-  [(set_attr \"type\" \"fsqrt\")\n-   (set_attr \"trap\" \"yes\")\n-   (set_attr \"round_suffix\" \"normal\")\n-   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \f\n ;; Next are all the integer comparisons, and conditional moves and branches\n ;; and some of the related define_expand's and define_split's.\n@@ -2979,28 +2839,14 @@\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"trap_suffix\" \"su\")])\n \n-(define_insn \"*movdfcc_internal\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:DF\n-\t (match_operator 3 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DF 4 \"reg_or_0_operand\" \"fG,fG\")\n-\t\t\t  (match_operand:DF 2 \"const0_operand\" \"G,G\")])\n-\t (match_operand:DF 1 \"reg_or_0_operand\" \"fG,0\")\n-\t (match_operand:DF 5 \"reg_or_0_operand\" \"0,fG\")))]\n-  \"TARGET_FP\"\n-  \"@\n-   fcmov%C3 %R4,%R1,%0\n-   fcmov%D3 %R4,%R5,%0\"\n-  [(set_attr \"type\" \"fcmov\")])\n-\n-(define_insn \"*movsfcc_internal\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:SF\n+(define_insn \"*mov<mode>cc_internal\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:FMODE\n \t (match_operator 3 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DF 4 \"reg_or_0_operand\" \"fG,fG\")\n \t\t\t  (match_operand:DF 2 \"const0_operand\" \"G,G\")])\n-\t (match_operand:SF 1 \"reg_or_0_operand\" \"fG,0\")\n-\t (match_operand:SF 5 \"reg_or_0_operand\" \"0,fG\")))]\n+\t (match_operand:FMODE 1 \"reg_or_0_operand\" \"fG,0\")\n+\t (match_operand:FMODE 5 \"reg_or_0_operand\" \"0,fG\")))]\n   \"TARGET_FP\"\n   \"@\n    fcmov%C3 %R4,%R1,%0\n@@ -3209,25 +3055,16 @@\n     FAIL;\n })\n \n-(define_expand \"movsfcc\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:SF 2 \"reg_or_8bit_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"reg_or_8bit_operand\" \"\")))]\n-  \"\"\n-{\n-  if ((operands[1] = alpha_emit_conditional_move (operands[1], SFmode)) == 0)\n-    FAIL;\n-})\n-\n-(define_expand \"movdfcc\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:DF 2 \"reg_or_8bit_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"reg_or_8bit_operand\" \"\")))]\n+(define_expand \"mov<mode>cc\"\n+  [(set (match_operand:FMODE 0 \"register_operand\" \"\")\n+\t(if_then_else:FMODE\n+\t  (match_operand 1 \"comparison_operator\" \"\")\n+\t  (match_operand:FMODE 2 \"reg_or_8bit_operand\" \"\")\n+\t  (match_operand:FMODE 3 \"reg_or_8bit_operand\" \"\")))]\n   \"\"\n {\n-  if ((operands[1] = alpha_emit_conditional_move (operands[1], DFmode)) == 0)\n+  operands[1] = alpha_emit_conditional_move (operands[1], <MODE>mode);\n+  if (operands[1] == 0)\n     FAIL;\n })\n \f"}]}