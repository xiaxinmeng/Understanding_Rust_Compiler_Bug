{"sha": "75be04262789545634d6459235b249b01560742c", "node_id": "C_kwDOANBUbNoAKDc1YmUwNDI2Mjc4OTU0NTYzNGQ2NDU5MjM1YjI0OWIwMTU2MDc0MmM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-23T11:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-23T11:39:06Z"}, "message": "Merge #687\n\n687: Fix byte char and byte string lexing code r=philberty a=tschwinge\n\nThere were two warnings in lexer parse_byte_char and parse_byte_string\r\ncode for arches with signed chars:\r\n\r\n```\r\nrust-lex.cc: In member function\r\n             \u2018Rust::TokenPtr Rust::Lexer::parse_byte_char(Location)\u2019:\r\nrust-lex.cc:1564:21: warning: comparison is always false due to limited\r\n                     range of data type [-Wtype-limits]\r\n 1564 |       if (byte_char > 127)\r\n      |           ~~~~~~~~~~^~~~~\r\nrust-lex.cc: In member function\r\n             \u2018Rust::TokenPtr Rust::Lexer::parse_byte_string(Location)\u2019:\r\nrust-lex.cc:1639:27: warning: comparison is always false due to limited\r\n                     range of data type [-Wtype-limits]\r\n 1639 |           if (output_char > 127)\r\n      |               ~~~~~~~~~~~~^~~~~\r\n```\r\n\r\nThe fix would be to cast to an unsigned char before the comparison.\r\nBut that is actually wrong, and would produce the following errors\r\nparsing a byte char or byte string:\r\n\r\n```\r\nbytecharstring.rs:3:14: error: \u2018byte char\u2019 \u2018\ufffd\u2019 out of range\r\n    3 |   let _bc = b'\\x80';\r\n      |              ^\r\nbytecharstring.rs:4:14: error: character \u2018\ufffd\u2019 in byte string out of range\r\n    4 |   let _bs = b\"foo\\x80bar\";\r\n      |              ^\r\n```\r\n\r\nBoth byte chars and byte strings may contain up to \\xFF (255)\r\ncharacters. It is utf-8 chars or strings that can only\r\n\r\nRemove the faulty check and add a new testcase bytecharstring.rs\r\nthat checks byte chars and strings do accept > 127 hex char\r\nescapes, but utf-8 chars and strings reject such hex char escapes.\r\n\r\n---\r\n\r\n<http://mid.mail-archive.com/20210921225430.166550-1-mark@klomp.org>\r\n\r\n---\r\n\r\nAddresses: #336 \r\nFixes: #343, #344\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "74d034b08cf293959f12c97c8a111a8c5755c722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d034b08cf293959f12c97c8a111a8c5755c722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75be04262789545634d6459235b249b01560742c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhTGdaCRBK7hj4Ov3rIwAAWCMIAH46mG6fWcXrPPgZmK9AiOI+\nN5dbRMCXTk1DaB/Iu8Oyr7MIX2l/ZzG5MGDCuPvjVr4E65iBDLDncJWX65wIYEx6\nrAVSTsgwWAPP/NLqL52cLKJNAP3Mo/9k73MAbNS+yGoTGYw7MVy0VEg6LEYh384K\n8SYjibrBvlHsjJkG/Tql1SCxsMXWSeA6kfnRjiNZWEl8a/AtO4JO41Yz+nu163eK\ndMQr5CHZtBDIsOc3bK+TlZiLFauFMsETTdOmwlAAPt7brsHJC56HFDKjTFTm8pE5\n+5cLfuhMBKZBI7YlGKno4giLvHF4j0dvvBuIUDwO9xW4vnWdVq6gfvBp4vqOD3I=\n=6hEm\n-----END PGP SIGNATURE-----\n", "payload": "tree 74d034b08cf293959f12c97c8a111a8c5755c722\nparent 98359f20cd2d9268df582ea1ee289e0ea69efcb5\nparent d68a9eacebb8439ef60b15fe1331d8c007b65bc7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632397146 +0000\ncommitter GitHub <noreply@github.com> 1632397146 +0000\n\nMerge #687\n\n687: Fix byte char and byte string lexing code r=philberty a=tschwinge\n\nThere were two warnings in lexer parse_byte_char and parse_byte_string\r\ncode for arches with signed chars:\r\n\r\n```\r\nrust-lex.cc: In member function\r\n             \u2018Rust::TokenPtr Rust::Lexer::parse_byte_char(Location)\u2019:\r\nrust-lex.cc:1564:21: warning: comparison is always false due to limited\r\n                     range of data type [-Wtype-limits]\r\n 1564 |       if (byte_char > 127)\r\n      |           ~~~~~~~~~~^~~~~\r\nrust-lex.cc: In member function\r\n             \u2018Rust::TokenPtr Rust::Lexer::parse_byte_string(Location)\u2019:\r\nrust-lex.cc:1639:27: warning: comparison is always false due to limited\r\n                     range of data type [-Wtype-limits]\r\n 1639 |           if (output_char > 127)\r\n      |               ~~~~~~~~~~~~^~~~~\r\n```\r\n\r\nThe fix would be to cast to an unsigned char before the comparison.\r\nBut that is actually wrong, and would produce the following errors\r\nparsing a byte char or byte string:\r\n\r\n```\r\nbytecharstring.rs:3:14: error: \u2018byte char\u2019 \u2018\ufffd\u2019 out of range\r\n    3 |   let _bc = b'\\x80';\r\n      |              ^\r\nbytecharstring.rs:4:14: error: character \u2018\ufffd\u2019 in byte string out of range\r\n    4 |   let _bs = b\"foo\\x80bar\";\r\n      |              ^\r\n```\r\n\r\nBoth byte chars and byte strings may contain up to \\xFF (255)\r\ncharacters. It is utf-8 chars or strings that can only\r\n\r\nRemove the faulty check and add a new testcase bytecharstring.rs\r\nthat checks byte chars and strings do accept > 127 hex char\r\nescapes, but utf-8 chars and strings reject such hex char escapes.\r\n\r\n---\r\n\r\n<http://mid.mail-archive.com/20210921225430.166550-1-mark@klomp.org>\r\n\r\n---\r\n\r\nAddresses: #336 \r\nFixes: #343, #344\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75be04262789545634d6459235b249b01560742c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75be04262789545634d6459235b249b01560742c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75be04262789545634d6459235b249b01560742c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98359f20cd2d9268df582ea1ee289e0ea69efcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98359f20cd2d9268df582ea1ee289e0ea69efcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98359f20cd2d9268df582ea1ee289e0ea69efcb5"}, {"sha": "d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d68a9eacebb8439ef60b15fe1331d8c007b65bc7"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "b70877be9ffea335bef9998ddc2054aeb858cbe7", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be04262789545634d6459235b249b01560742c/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be04262789545634d6459235b249b01560742c/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=75be04262789545634d6459235b249b01560742c", "patch": "@@ -1559,13 +1559,6 @@ Lexer::parse_byte_char (Location loc)\n       byte_char = std::get<0> (escape_length_pair);\n       length += std::get<1> (escape_length_pair);\n \n-      if (byte_char > 127)\n-\t{\n-\t  rust_error_at (get_current_location (),\n-\t\t\t \"%<byte char%> %<%c%> out of range\", byte_char);\n-\t  byte_char = 0;\n-\t}\n-\n       current_char = peek_input ();\n \n       if (current_char != '\\'')\n@@ -1634,14 +1627,6 @@ Lexer::parse_byte_string (Location loc)\n \t  else\n \t    length += std::get<1> (escape_length_pair);\n \n-\t  if (output_char > 127)\n-\t    {\n-\t      rust_error_at (get_current_location (),\n-\t\t\t     \"character %<%c%> in byte string out of range\",\n-\t\t\t     output_char);\n-\t      output_char = 0;\n-\t    }\n-\n \t  if (output_char != 0)\n \t    str += output_char;\n "}, {"sha": "9242e2c5a0bce2c3d2587505c440a33c5e916aac", "filename": "gcc/testsuite/rust/compile/bytecharstring.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be04262789545634d6459235b249b01560742c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be04262789545634d6459235b249b01560742c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs?ref=75be04262789545634d6459235b249b01560742c", "patch": "@@ -0,0 +1,8 @@\n+fn main ()\n+{\n+  let _bc = b'\\x80';\n+  let _bs = b\"foo\\x80bar\";\n+\n+  let _c = '\\xef';        // { dg-error \"out of range\" }\n+  let _s = \"Foo\\xEFBar\";  // { dg-error \"out of range\" }\n+}"}]}