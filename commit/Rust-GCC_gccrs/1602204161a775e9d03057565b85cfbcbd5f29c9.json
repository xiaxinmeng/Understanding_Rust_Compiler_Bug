{"sha": "1602204161a775e9d03057565b85cfbcbd5f29c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwMjIwNDE2MWE3NzVlOWQwMzA1NzU2NWI4NWNmYmNiZDVmMjljOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-10-15T18:24:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-10-15T18:24:30Z"}, "message": "tree-tailcall.c (find_tail_calls): Don't use tail-call recursion for built-in functions.\n\ngcc/\n2013-10-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-tailcall.c (find_tail_calls): Don't use tail-call recursion\n\tfor built-in functions.\n\ngcc/testsuite/\n\t* gcc.dg/torture/builtin-self.c: New file.\n\nlibgcc/\n\t* sync.c: Remove static aliases and define each function directly\n\tunder its real name.\n\nFrom-SVN: r203628", "tree": {"sha": "2fb3dd6d894f00d9fff1ba8e8fc2b73c2cc737f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fb3dd6d894f00d9fff1ba8e8fc2b73c2cc737f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1602204161a775e9d03057565b85cfbcbd5f29c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1602204161a775e9d03057565b85cfbcbd5f29c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1602204161a775e9d03057565b85cfbcbd5f29c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1602204161a775e9d03057565b85cfbcbd5f29c9/comments", "author": null, "committer": null, "parents": [{"sha": "b114bfb45570c08000ad34110337641a7021727f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b114bfb45570c08000ad34110337641a7021727f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b114bfb45570c08000ad34110337641a7021727f"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "c3c209d13b217cb03e0ec9e37bd57ea11c0a93fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1602204161a775e9d03057565b85cfbcbd5f29c9", "patch": "@@ -1,3 +1,8 @@\n+2013-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-tailcall.c (find_tail_calls): Don't use tail-call recursion\n+\tfor built-in functions.\n+\n 2013-10-15  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n \t* tree-ssa-reassoc.c: Include rtl.h and tm_p.h."}, {"sha": "11099e190b15b3cd993c3c9d865cd6f2dc1d2769", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1602204161a775e9d03057565b85cfbcbd5f29c9", "patch": "@@ -1,3 +1,7 @@\n+2013-10-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.dg/torture/builtin-self.c: New file.\n+\n 2013-10-15  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n \t* gcc.dg/tree-ssa/reassoc-32.c: New test case."}, {"sha": "6d1719f7517d9c5268b73686109c9b119e67d7b5", "filename": "gcc/testsuite/gcc.dg/torture/builtin-self.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-self.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-self.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-self.c?ref=1602204161a775e9d03057565b85cfbcbd5f29c9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* Check that we can use this idiom to define out-of-line copies of built-in\n+   functions.  This is used by libgcc/sync.c, for example.  */\n+void __sync_synchronize (void)\n+{\n+  __sync_synchronize ();\n+}\n+/* { dg-final { scan-assembler \"__sync_synchronize\" } } */\n+/* { dg-final { scan-assembler \"\\t(lock|mfence)\" } } */\n+/* { dg-final { scan-assembler-not \"\\tcall\" } } */"}, {"sha": "415d19acbbbb549f0d79c42f1a44d07f0ef00e25", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1602204161a775e9d03057565b85cfbcbd5f29c9/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=1602204161a775e9d03057565b85cfbcbd5f29c9", "patch": "@@ -446,7 +446,9 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n   /* We found the call, check whether it is suitable.  */\n   tail_recursion = false;\n   func = gimple_call_fndecl (call);\n-  if (func && recursive_call_p (current_function_decl, func))\n+  if (func\n+      && !DECL_BUILT_IN (func)\n+      && recursive_call_p (current_function_decl, func))\n     {\n       tree arg;\n "}, {"sha": "867155a24d55039687d6ffdf1d624011c0236086", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1602204161a775e9d03057565b85cfbcbd5f29c9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1602204161a775e9d03057565b85cfbcbd5f29c9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1602204161a775e9d03057565b85cfbcbd5f29c9", "patch": "@@ -1,3 +1,8 @@\n+2013-10-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* sync.c: Remove static aliases and define each function directly\n+\tunder its real name.\n+\n 2013-10-02  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config.host (hppa*64*-*-linux*): Define extra_parts."}, {"sha": "17158c902171ea0ca4a95f7dfde4aadaab909c4c", "filename": "libgcc/sync.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1602204161a775e9d03057565b85cfbcbd5f29c9/libgcc%2Fsync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1602204161a775e9d03057565b85cfbcbd5f29c9/libgcc%2Fsync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsync.c?ref=1602204161a775e9d03057565b85cfbcbd5f29c9", "patch": "@@ -67,27 +67,26 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #if defined FN\n \n-/* Define macros for each __sync_* function type.  Each macro defines a\n-   local function called <NAME>_<UNITS> that acts like __<NAME>_<UNITS>.\n-   TYPE is a type that has UNITS bytes.  */\n+/* Define functions called __sync_<NAME>_<UNITS>, with one macro per\n+   signature.  TYPE is a type that has UNITS bytes.  */\n \n #define DEFINE_V_PV(NAME, UNITS, TYPE)\t\t\t\t\t\\\n-  static TYPE\t\t\t\t\t\t\t\t\\\n-  NAME##_##UNITS (TYPE *ptr, TYPE value)\t\t\t\t\\\n+  TYPE\t\t\t\t\t\t\t\t\t\\\n+  __##NAME##_##UNITS (TYPE *ptr, TYPE value)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     return __##NAME (ptr, value);\t\t\t\t\t\\\n   }\n \n-#define DEFINE_V_PVV(NAME, UNITS, TYPE)\t\t\t\t\\\n-  static TYPE\t\t\t\t\t\t\t\t\\\n-  NAME##_##UNITS (TYPE *ptr, TYPE value1, TYPE value2)\t\t\t\\\n+#define DEFINE_V_PVV(NAME, UNITS, TYPE)\t\t\t\t\t\\\n+  TYPE\t\t\t\t\t\t\t\t\t\\\n+  __##NAME##_##UNITS (TYPE *ptr, TYPE value1, TYPE value2)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     return __##NAME (ptr, value1, value2);\t\t\t\t\\\n   }\n \n #define DEFINE_BOOL_PVV(NAME, UNITS, TYPE)\t\t\t\t\\\n-  static _Bool\t\t\t\t\t\t\t\t\\\n-  NAME##_##UNITS (TYPE *ptr, TYPE value1, TYPE value2)\t\t\t\\\n+  _Bool\t\t\t\t\t\t\t\t\t\\\n+  __##NAME##_##UNITS (TYPE *ptr, TYPE value1, TYPE value2)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     return __##NAME (ptr, value1, value2);\t\t\t\t\\\n   }\n@@ -118,9 +117,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DEFINE1(NAME, UNITS, TYPE) \\\n   static int unused[sizeof (TYPE) == UNITS ? 1 : -1]\t\\\n     __attribute__((unused));\t\t\t\t\\\n-  local_##NAME (NAME, UNITS, TYPE);\t\t\t\\\n-  typeof (NAME##_##UNITS) __##NAME##_##UNITS\t\t\\\n-    __attribute__((alias (#NAME \"_\" #UNITS)));\n+  local_##NAME (NAME, UNITS, TYPE);\n \n /* As above, but performing macro expansion on the arguments.  */\n #define DEFINE(NAME, UNITS, TYPE) DEFINE1 (NAME, UNITS, TYPE)\n@@ -167,13 +164,11 @@ DEFINE (FN, 8, UOItype)\n \n #if defined Lsync_synchronize\n \n-static void\n-sync_synchronize (void)\n+void\n+__sync_synchronize (void)\n {\n   __sync_synchronize ();\n }\n-typeof (sync_synchronize) __sync_synchronize \\\n-  __attribute__((alias (\"sync_synchronize\")));\n \n #endif\n "}]}