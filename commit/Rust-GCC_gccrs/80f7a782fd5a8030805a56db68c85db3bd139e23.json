{"sha": "80f7a782fd5a8030805a56db68c85db3bd139e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmN2E3ODJmZDVhODAzMDgwNWE1NmRiNjhjODVkYjNiZDEzOWUyMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-22T20:35:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-22T20:35:58Z"}, "message": "re PR c++/48665 (type of const member function)\n\n\tPR c++/48665\n\t* rtti.c (get_typeid): Diagnose qualified function type.\n\t* pt.c (tsubst) [POINTER_TYPE]: Likewise.\n\nFrom-SVN: r198160", "tree": {"sha": "aa9b5669ab9a21f24f5d9a49ab89e7e53ab05db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa9b5669ab9a21f24f5d9a49ab89e7e53ab05db0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f7a782fd5a8030805a56db68c85db3bd139e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f7a782fd5a8030805a56db68c85db3bd139e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f7a782fd5a8030805a56db68c85db3bd139e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f7a782fd5a8030805a56db68c85db3bd139e23/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af580858ea4338535dfb2ae4a28cbda18d1b50d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af580858ea4338535dfb2ae4a28cbda18d1b50d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af580858ea4338535dfb2ae4a28cbda18d1b50d0"}], "stats": {"total": 149, "additions": 99, "deletions": 50}, "files": [{"sha": "cb27315c6b9412336f11e4e455ddba0ebbab8202", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -1,5 +1,9 @@\n 2013-04-22  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48665\n+\t* rtti.c (get_typeid): Diagnose qualified function type.\n+\t* pt.c (tsubst) [POINTER_TYPE]: Likewise.\n+\n \t* error.c (dump_aggr_type): Fix lambda detection.\n \t(dump_simple_decl): Pretty-print capture field.\n "}, {"sha": "6ce2770c1c603ca71a57f408124f444276f77f03", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -11521,6 +11521,21 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \t    return error_mark_node;\n \t  }\n+\telse if (TREE_CODE (type) == FUNCTION_TYPE\n+\t\t && (type_memfn_quals (type) != TYPE_UNQUALIFIED\n+\t\t     || type_memfn_rqual (type) != REF_QUAL_NONE))\n+\t  {\n+\t    if (complain & tf_error)\n+\t      {\n+\t\tif (code == POINTER_TYPE)\n+\t\t  error (\"forming pointer to qualified function type %qT\",\n+\t\t\t type);\n+\t\telse\n+\t\t  error (\"forming reference to qualified function type %qT\",\n+\t\t\t type);\n+\t      }\n+\t    return error_mark_node;\n+\t  }\n \telse if (code == POINTER_TYPE)\n \t  {\n \t    r = build_pointer_type (type);"}, {"sha": "4e7316560ec9d4c936265148c346087a3930f392", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -477,6 +477,16 @@ get_typeid (tree type, tsubst_flags_t complain)\n      referenced type.  */\n   type = non_reference (type);\n \n+  /* This is not one of the uses of a qualified function type in 8.3.5.  */\n+  if (TREE_CODE (type) == FUNCTION_TYPE\n+      && (type_memfn_quals (type) != TYPE_UNQUALIFIED\n+\t  || type_memfn_rqual (type) != REF_QUAL_NONE))\n+    {\n+      if (complain & tf_error)\n+\terror (\"typeid of qualified function type %qT\", type);\n+      return error_mark_node;\n+    }\n+\n   /* The top-level cv-qualifiers of the lvalue expression or the type-id\n      that is the operand of typeid are always ignored.  */\n   type = TYPE_MAIN_VARIANT (type);"}, {"sha": "55258f4d88d6ec6afb0075c987b96a6ec0326026", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype40.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype40.C?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -68,7 +68,7 @@ static_assert(sizeof(g<void(&)()>(0)) == 2, \"Ouch\");\n static_assert(sizeof(g<void(&&)()>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f<void, void>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f<void(), void()>(0)) == 2, \"Ouch\");\n-static_assert(sizeof(f<void() const, void() const>(0)) == 2, \"Ouch\");\n+//static_assert(sizeof(f<void() const, void() const>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f<int, void>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f<void, int>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f<C, void>(0)) == 2, \"Ouch\");\n@@ -90,7 +90,7 @@ static_assert(sizeof(g2<void(&)()>(0)) == 2, \"Ouch\");\n static_assert(sizeof(g2<void(&&)()>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f2<void, void>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f2<void(), void()>(0)) == 2, \"Ouch\");\n-static_assert(sizeof(f2<void() const, void() const>(0)) == 2, \"Ouch\");\n+//static_assert(sizeof(f2<void() const, void() const>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f2<int, void>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f2<void, int>(0)) == 2, \"Ouch\");\n static_assert(sizeof(f2<C, void>(0)) == 2, \"Ouch\");"}, {"sha": "75d24f8a9f688b87923fddfd30ec1289f95b78a6", "filename": "gcc/testsuite/g++.dg/rtti/fn-quals.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ffn-quals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ffn-quals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ffn-quals.C?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/48665\n+\n+#include <typeinfo>\n+extern \"C\" void abort();\n+\n+template<class A,class B> void f() {\n+  if (typeid(A)==typeid(B)) abort(); // { dg-error \"qualified function\" }\n+  if (typeid(A*)==typeid(B*)) abort(); // { dg-error \"qualified function\" }\n+}\n+int main() {\n+  f<void()const,void()>();\n+}"}, {"sha": "b44f584bfc26ab7186c62a925abf3a153f64c887", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -1,3 +1,11 @@\n+2013-04-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/20_util/is_assignable/value.cc: Comment out tests involving\n+\tfunction-cv-quals.\n+\t* testsuite/20_util/is_constructible/value-2.cc: Likewise.\n+\t* testsuite/20_util/reference_wrapper/result_type.cc: Likewise.\n+\t* testsuite/20_util/reference_wrapper/typedefs-2.cc: Likewise.\n+\n 2013-04-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable_policy.h: Add C++11 allocator support."}, {"sha": "8d45671fd1dd3dc99ac2bd054b48156c3f5fded2", "filename": "libstdc++-v3/testsuite/20_util/is_assignable/value.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -277,8 +277,8 @@ static_assert(!std::is_assignable<DelAnyAssign&, int&>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, const int&>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void()>::value, \"Error\");\n-static_assert(!std::is_assignable<DelAnyAssign&, void()\n-const>::value, \"Error\");\n+// static_assert(!std::is_assignable<DelAnyAssign&, void()\n+// const>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void(&)()>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void(&&)()>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&,\n@@ -600,7 +600,7 @@ static_assert(std::is_assignable<UAssignAll&,\n std::nullptr_t&>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void()>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void(&)()>::value, \"Error\");\n-static_assert(std::is_assignable<UAssignAll&, void() const>::value, \"Error\");\n+//static_assert(std::is_assignable<UAssignAll&, void() const>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void(*)()>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void(*&)()>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, int*>::value, \"Error\");\n@@ -636,8 +636,8 @@ static_assert(!std::is_assignable<UDelAssignAll&,\n std::nullptr_t&>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void()>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void(&)()>::value, \"Error\");\n-static_assert(!std::is_assignable<UDelAssignAll&, void()\n-const>::value, \"Error\");\n+// static_assert(!std::is_assignable<UDelAssignAll&, void()\n+// const>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void(*)()>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void(*&)()>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, int*>::value, \"Error\");"}, {"sha": "f3119111b0cb22e2792d5f2ca4fb1c3038a145b2", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value-2.cc", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -72,8 +72,8 @@ static_assert(!std::is_constructible<DelEllipsis, SE>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, OpE>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, OpSE>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, void()>::value, \"Error\");\n-static_assert(!std::is_constructible<DelEllipsis, void() const>::value,\n-\t      \"Error\");\n+// static_assert(!std::is_constructible<DelEllipsis, void() const>::value,\n+// \t      \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, int[1]>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, int[]>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, int*>::value, \"Error\");\n@@ -461,20 +461,20 @@ static_assert(!std::is_constructible<OpSE, void()>::value, \"Error\");\n static_assert(!std::is_constructible<int[], void()>::value, \"Error\");\n static_assert(!std::is_constructible<int[1], void()>::value, \"Error\");\n \n-static_assert(!std::is_constructible<void(int) const,\n-\t      void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<int, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<Abstract, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<std::nullptr_t, void() const>::value,\n-\t      \"Error\");\n-static_assert(!std::is_constructible<Empty, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<U, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<E, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<SE, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<OpE, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<OpSE, void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<int[], void() const>::value, \"Error\");\n-static_assert(!std::is_constructible<int[1], void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<void(int) const,\n+// \t      void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<int, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<Abstract, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<std::nullptr_t, void() const>::value,\n+// \t      \"Error\");\n+// static_assert(!std::is_constructible<Empty, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<U, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<E, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<SE, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<OpE, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<OpSE, void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<int[], void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<int[1], void() const>::value, \"Error\");\n \n static_assert(!std::is_constructible<void, int, int>::value, \"Error\");\n static_assert(!std::is_constructible<void, Empty, B>::value, \"Error\");\n@@ -488,8 +488,8 @@ static_assert(!std::is_constructible<void, int[], int[]>::value, \"Error\");\n static_assert(!std::is_constructible<void, void, int>::value, \"Error\");\n static_assert(!std::is_constructible<void, void, void>::value, \"Error\");\n static_assert(!std::is_constructible<void, void(), void()>::value, \"Error\");\n-static_assert(!std::is_constructible<void, void() const,\n-\t      void() volatile>::value, \"Error\");\n+// static_assert(!std::is_constructible<void, void() const,\n+// \t      void() volatile>::value, \"Error\");\n \n static_assert(!std::is_constructible<int, int, int>::value, \"Error\");\n static_assert(!std::is_constructible<const int, int, int>::value, \"Error\");\n@@ -651,13 +651,13 @@ static_assert(!std::is_constructible<void(), void, void>::value, \"Error\");\n static_assert(!std::is_constructible<void(), void(), int>::value, \"Error\");\n static_assert(!std::is_constructible<void(), void(), void()>::value, \"Error\");\n \n-static_assert(!std::is_constructible<void() const, int, int>::value, \"Error\");\n-static_assert(!std::is_constructible<void() const, void, int>::value, \"Error\");\n-static_assert(!std::is_constructible<void() const, void, void>::value, \"Error\");\n-static_assert(!std::is_constructible<void() const, void() volatile,\n-\t      int>::value, \"Error\");\n-static_assert(!std::is_constructible<void() const, void() volatile const,\n-\t      void() const>::value, \"Error\");\n+// static_assert(!std::is_constructible<void() const, int, int>::value, \"Error\");\n+// static_assert(!std::is_constructible<void() const, void, int>::value, \"Error\");\n+// static_assert(!std::is_constructible<void() const, void, void>::value, \"Error\");\n+// static_assert(!std::is_constructible<void() const, void() volatile,\n+// \t      int>::value, \"Error\");\n+// static_assert(!std::is_constructible<void() const, void() volatile const,\n+// \t      void() const>::value, \"Error\");\n \n static_assert(!std::is_constructible<FromArgs<int>, int, int>::value, \"Error\");\n static_assert(!std::is_constructible<const FromArgs<int>, int, int>::value,"}, {"sha": "e849a5dc3b43978195bd8610c4de7b95b8b40e74", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/result_type.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fresult_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fresult_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fresult_type.cc?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -27,9 +27,9 @@ using namespace std;\n struct T;\n \n reference_wrapper<int(float, ...)>::result_type                       i01;\n-reference_wrapper<int(float, ...) const>::result_type                 i02;\n-reference_wrapper<int(float, ...) volatile>::result_type              i03;\n-reference_wrapper<int(float, ...) const volatile>::result_type        i04;\n+// reference_wrapper<int(float, ...) const>::result_type                 i02;\n+// reference_wrapper<int(float, ...) volatile>::result_type              i03;\n+// reference_wrapper<int(float, ...) const volatile>::result_type        i04;\n \n reference_wrapper<int(*)(float, ...)>::result_type                    i05;\n reference_wrapper<int(* const)(float, ...)>::result_type              i06;"}, {"sha": "e0f7231ed929864aa3ae4b9c348e80666154c388", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/typedefs-2.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f7a782fd5a8030805a56db68c85db3bd139e23/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-2.cc?ref=80f7a782fd5a8030805a56db68c85db3bd139e23", "patch": "@@ -25,13 +25,13 @@\n using namespace std;\n \n reference_wrapper<int(float)>::argument_type                               i01;\n-reference_wrapper<int(float) const>::argument_type                         i02;\n-reference_wrapper<int(float) volatile>::argument_type                      i03;\n-reference_wrapper<int(float) const volatile>::argument_type                i04;\n+// reference_wrapper<int(float) const>::argument_type                         i02;\n+// reference_wrapper<int(float) volatile>::argument_type                      i03;\n+// reference_wrapper<int(float) const volatile>::argument_type                i04;\n reference_wrapper<int(float)>::result_type                                 i05;\n-reference_wrapper<int(float) const>::result_type                           i06;\n-reference_wrapper<int(float) volatile>::result_type                        i07;\n-reference_wrapper<int(float) const volatile>::result_type                  i08;\n+// reference_wrapper<int(float) const>::result_type                           i06;\n+// reference_wrapper<int(float) volatile>::result_type                        i07;\n+// reference_wrapper<int(float) const volatile>::result_type                  i08;\n \n reference_wrapper<int(*)(float)>::argument_type                            i09;\n reference_wrapper<int(* const)(float)>::argument_type                      i10;\n@@ -43,17 +43,17 @@ reference_wrapper<int(* volatile)(float)>::result_type                     i15;\n reference_wrapper<int(* const volatile)(float)>::result_type               i16;\n \n reference_wrapper<int(float, char)>::first_argument_type                   i17;\n-reference_wrapper<int(float, char) const>::first_argument_type             i18;\n-reference_wrapper<int(float, char) volatile>::first_argument_type          i19;\n-reference_wrapper<int(float, char) const volatile>::first_argument_type    i20;\n+// reference_wrapper<int(float, char) const>::first_argument_type             i18;\n+// reference_wrapper<int(float, char) volatile>::first_argument_type          i19;\n+// reference_wrapper<int(float, char) const volatile>::first_argument_type    i20;\n reference_wrapper<int(float, char)>::second_argument_type                  i21;\n-reference_wrapper<int(float, char) const>::second_argument_type            i22;\n-reference_wrapper<int(float, char) volatile>::second_argument_type         i23;\n-reference_wrapper<int(float, char) const volatile>::second_argument_type   i24;\n+// reference_wrapper<int(float, char) const>::second_argument_type            i22;\n+// reference_wrapper<int(float, char) volatile>::second_argument_type         i23;\n+// reference_wrapper<int(float, char) const volatile>::second_argument_type   i24;\n reference_wrapper<int(float, char)>::result_type                           i25;\n-reference_wrapper<int(float, char) const>::result_type                     i26;\n-reference_wrapper<int(float, char) volatile>::result_type                  i27;\n-reference_wrapper<int(float, char) const volatile>::result_type            i28;\n+// reference_wrapper<int(float, char) const>::result_type                     i26;\n+// reference_wrapper<int(float, char) volatile>::result_type                  i27;\n+// reference_wrapper<int(float, char) const volatile>::result_type            i28;\n \n reference_wrapper<int(*)(float, char)>::first_argument_type                i29;\n reference_wrapper<int(* const)(float, char)>::first_argument_type          i30;"}]}