{"sha": "de7df9ebdc66ea3a978327f5a039d939a9523a72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU3ZGY5ZWJkYzY2ZWEzYTk3ODMyN2Y1YTAzOWQ5MzlhOTUyM2E3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-07-24T20:48:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-07-24T20:48:13Z"}, "message": "tree.h (boolean_type_node): Move from C/C++/Java frontends.\n\n        * tree.h (boolean_type_node): Move from C/C++/Java frontends.\n        (boolean_true_node, boolean_false_node): Likewise.\n        (enum tree_index): Add TI_BOOLEAN_{TYPE,FALSE,TRUE}.\n        * tree.c (build_common_tree_nodes): Init boolean_type_node.\n        (build_common_tree_nodes_2): Init boolean_{true,false}_node.\n        * stor-layout.c (set_sizetype): Handle an early BOOLEAN_TYPE.\n        * c-common.h (truthvalue_type_node): Renamed from boolean_type_node.\n        (truthvalue_true_node): Renamed from boolean_true_node.\n        (truthvalue_false_node): Renamed from boolean_false_node.\n        * c-decl.c: Just set truthvalue_* to integer_*.\n        * c-*.[ch]: s/boolean/truthvalue/.  s/c_bool/boolean/.\n        * cp/decl.c: Just set truthvalue_* to boolean_*.\n        * java/java-tree.h: Move boolean_type_node et al to the back end.\n\nFrom-SVN: r69758", "tree": {"sha": "d426fb98d29071f56b15614831aba8bebbb69f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d426fb98d29071f56b15614831aba8bebbb69f6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de7df9ebdc66ea3a978327f5a039d939a9523a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7df9ebdc66ea3a978327f5a039d939a9523a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de7df9ebdc66ea3a978327f5a039d939a9523a72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7df9ebdc66ea3a978327f5a039d939a9523a72/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6907ddd3babc97c39c88ef55b7d8da4f5d439d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6907ddd3babc97c39c88ef55b7d8da4f5d439d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6907ddd3babc97c39c88ef55b7d8da4f5d439d56"}], "stats": {"total": 208, "additions": 109, "deletions": 99}, "files": [{"sha": "63907a40c13570b2842eaae7f5d23d0f5f52dfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -1,3 +1,17 @@\n+2003-07-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (boolean_type_node): Move from C/C++/Java frontends.\n+\t(boolean_true_node, boolean_false_node): Likewise.\n+\t(enum tree_index): Add TI_BOOLEAN_{TYPE,FALSE,TRUE}.\n+\t* tree.c (build_common_tree_nodes): Init boolean_type_node.\n+\t(build_common_tree_nodes_2): Init boolean_{true,false}_node.\n+\t* stor-layout.c (set_sizetype): Handle an early BOOLEAN_TYPE.\n+\t* c-common.h (truthvalue_type_node): Renamed from boolean_type_node.\n+\t(truthvalue_true_node): Renamed from boolean_true_node.\n+\t(truthvalue_false_node): Renamed from boolean_false_node.\n+\t* c-decl.c: Just set truthvalue_* to integer_*.\n+\t* c-*.[ch]: s/boolean/truthvalue/.  s/c_bool/boolean/.\n+\n 2003-07-24  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-decl.c (match_builtin_function_types): New subroutine of"}, {"sha": "685ec2cae7d51c2263fbbdda9474b93e46b57421", "filename": "gcc/c-common.c", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -100,9 +100,9 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \ttree long_unsigned_type_node;\n \ttree long_long_unsigned_type_node;\n \n-\ttree boolean_type_node;\n-\ttree boolean_false_node;\n-\ttree boolean_true_node;\n+\ttree truthvalue_type_node;\n+\ttree truthvalue_false_node;\n+\ttree truthvalue_true_node;\n \n \ttree ptrdiff_type_node;\n \n@@ -2258,40 +2258,40 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n       if (code == NE_EXPR)\n \t{\n \t  if (max_lt || min_gt)\n-\t    val = boolean_true_node;\n+\t    val = truthvalue_true_node;\n \t}\n       else if (code == EQ_EXPR)\n \t{\n \t  if (max_lt || min_gt)\n-\t    val = boolean_false_node;\n+\t    val = truthvalue_false_node;\n \t}\n       else if (code == LT_EXPR)\n \t{\n \t  if (max_lt)\n-\t    val = boolean_true_node;\n+\t    val = truthvalue_true_node;\n \t  if (!min_lt)\n-\t    val = boolean_false_node;\n+\t    val = truthvalue_false_node;\n \t}\n       else if (code == GT_EXPR)\n \t{\n \t  if (min_gt)\n-\t    val = boolean_true_node;\n+\t    val = truthvalue_true_node;\n \t  if (!max_gt)\n-\t    val = boolean_false_node;\n+\t    val = truthvalue_false_node;\n \t}\n       else if (code == LE_EXPR)\n \t{\n \t  if (!max_gt)\n-\t    val = boolean_true_node;\n+\t    val = truthvalue_true_node;\n \t  if (min_gt)\n-\t    val = boolean_false_node;\n+\t    val = truthvalue_false_node;\n \t}\n       else if (code == GE_EXPR)\n \t{\n \t  if (!min_lt)\n-\t    val = boolean_true_node;\n+\t    val = truthvalue_true_node;\n \t  if (max_lt)\n-\t    val = boolean_false_node;\n+\t    val = truthvalue_false_node;\n \t}\n \n       /* If primop0 was sign-extended and unsigned comparison specd,\n@@ -2330,9 +2330,9 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \n       if (TREE_CODE (primop0) != INTEGER_CST)\n \t{\n-\t  if (val == boolean_false_node)\n+\t  if (val == truthvalue_false_node)\n \t    warning (\"comparison is always false due to limited range of data type\");\n-\t  if (val == boolean_true_node)\n+\t  if (val == truthvalue_true_node)\n \t    warning (\"comparison is always true due to limited range of data type\");\n \t}\n \n@@ -2404,7 +2404,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t\t\t&& ! TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t\t     primop0))))\n \t\twarning (\"comparison of unsigned expression >= 0 is always true\");\n-\t      value = boolean_true_node;\n+\t      value = truthvalue_true_node;\n \t      break;\n \n \t    case LT_EXPR:\n@@ -2413,7 +2413,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t\t\t&& ! TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t\t     primop0))))\n \t\twarning (\"comparison of unsigned expression < 0 is always false\");\n-\t      value = boolean_false_node;\n+\t      value = truthvalue_false_node;\n \t      break;\n \n \t    default:\n@@ -2434,7 +2434,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n   *op0_ptr = convert (type, primop0);\n   *op1_ptr = convert (type, primop1);\n \n-  *restype_ptr = boolean_type_node;\n+  *restype_ptr = truthvalue_type_node;\n \n   return 0;\n }\n@@ -2544,10 +2544,10 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n    This preparation consists of taking the ordinary\n    representation of an expression expr and producing a valid tree\n    boolean expression describing whether expr is nonzero.  We could\n-   simply always do build_binary_op (NE_EXPR, expr, boolean_false_node, 1),\n+   simply always do build_binary_op (NE_EXPR, expr, truthvalue_false_node, 1),\n    but we optimize comparisons, &&, ||, and !.\n \n-   The resulting type should always be `boolean_type_node'.  */\n+   The resulting type should always be `truthvalue_type_node'.  */\n \n tree\n c_common_truthvalue_conversion (tree expr)\n@@ -2562,15 +2562,15 @@ c_common_truthvalue_conversion (tree expr)\n     {\n     case RECORD_TYPE:\n       error (\"struct type value used where scalar is required\");\n-      return boolean_false_node;\n+      return truthvalue_false_node;\n \n     case UNION_TYPE:\n       error (\"union type value used where scalar is required\");\n-      return boolean_false_node;\n+      return truthvalue_false_node;\n \n     case ARRAY_TYPE:\n       error (\"array type value used where scalar is required\");\n-      return boolean_false_node;\n+      return truthvalue_false_node;\n \n     default:\n       break;\n@@ -2587,17 +2587,17 @@ c_common_truthvalue_conversion (tree expr)\n     case TRUTH_OR_EXPR:\n     case TRUTH_XOR_EXPR:\n     case TRUTH_NOT_EXPR:\n-      TREE_TYPE (expr) = boolean_type_node;\n+      TREE_TYPE (expr) = truthvalue_type_node;\n       return expr;\n \n     case ERROR_MARK:\n       return expr;\n \n     case INTEGER_CST:\n-      return integer_zerop (expr) ? boolean_false_node : boolean_true_node;\n+      return integer_zerop (expr) ? truthvalue_false_node : truthvalue_true_node;\n \n     case REAL_CST:\n-      return real_zerop (expr) ? boolean_false_node : boolean_true_node;\n+      return real_zerop (expr) ? truthvalue_false_node : truthvalue_true_node;\n \n     case ADDR_EXPR:\n       /* If we are taking the address of an external decl, it might be zero\n@@ -2607,10 +2607,10 @@ c_common_truthvalue_conversion (tree expr)\n \tbreak;\n \n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 0)))\n-\treturn build (COMPOUND_EXPR, boolean_type_node,\n-\t\t      TREE_OPERAND (expr, 0), boolean_true_node);\n+\treturn build (COMPOUND_EXPR, truthvalue_type_node,\n+\t\t      TREE_OPERAND (expr, 0), truthvalue_true_node);\n       else\n-\treturn boolean_true_node;\n+\treturn truthvalue_true_node;\n \n     case COMPLEX_EXPR:\n       return build_binary_op ((TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n@@ -2632,14 +2632,14 @@ c_common_truthvalue_conversion (tree expr)\n       /* These don't change whether an object is zero or nonzero, but\n \t we can't ignore them if their second arg has side-effects.  */\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1)))\n-\treturn build (COMPOUND_EXPR, boolean_type_node, TREE_OPERAND (expr, 1),\n+\treturn build (COMPOUND_EXPR, truthvalue_type_node, TREE_OPERAND (expr, 1),\n \t\t      c_common_truthvalue_conversion (TREE_OPERAND (expr, 0)));\n       else\n \treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n-      return fold (build (COND_EXPR, boolean_type_node, TREE_OPERAND (expr, 0),\n+      return fold (build (COND_EXPR, truthvalue_type_node, TREE_OPERAND (expr, 0),\n \t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n \t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n \n@@ -2683,9 +2683,9 @@ c_common_truthvalue_conversion (tree expr)\n \n     case BIT_AND_EXPR:\n       if (integer_onep (TREE_OPERAND (expr, 1))\n-\t  && TREE_TYPE (expr) != boolean_type_node)\n+\t  && TREE_TYPE (expr) != truthvalue_type_node)\n \t/* Using convert here would cause infinite recursion.  */\n-\treturn build1 (NOP_EXPR, boolean_type_node, expr);\n+\treturn build1 (NOP_EXPR, truthvalue_type_node, expr);\n       break;\n \n     case MODIFY_EXPR:\n@@ -4418,7 +4418,7 @@ tree\n boolean_increment (enum tree_code code, tree arg)\n {\n   tree val;\n-  tree true_res = (c_dialect_cxx () ? boolean_true_node : c_bool_true_node);\n+  tree true_res = boolean_true_node;\n \n   arg = stabilize_reference (arg);\n   switch (code)"}, {"sha": "f46058f8b4e289638c4a665ba851772e4c87b4cf", "filename": "gcc/c-common.h", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -146,13 +146,10 @@ enum c_tree_index\n     CTI_CONST_STRING_TYPE,\n \n     /* Type for boolean expressions (bool in C++, int in C).  */\n-    CTI_BOOLEAN_TYPE,\n-    CTI_BOOLEAN_TRUE,\n-    CTI_BOOLEAN_FALSE,\n-    /* C99's _Bool type.  */\n-    CTI_C_BOOL_TYPE,\n-    CTI_C_BOOL_TRUE,\n-    CTI_C_BOOL_FALSE,\n+    CTI_TRUTHVALUE_TYPE,\n+    CTI_TRUTHVALUE_TRUE,\n+    CTI_TRUTHVALUE_FALSE,\n+\n     CTI_DEFAULT_FUNCTION_TYPE,\n \n     CTI_G77_INTEGER_TYPE,\n@@ -192,13 +189,9 @@ struct c_common_identifier GTY(())\n #define widest_integer_literal_type_node c_global_trees[CTI_WIDEST_INT_LIT_TYPE]\n #define widest_unsigned_literal_type_node c_global_trees[CTI_WIDEST_UINT_LIT_TYPE]\n \n-#define boolean_type_node\t\tc_global_trees[CTI_BOOLEAN_TYPE]\n-#define boolean_true_node\t\tc_global_trees[CTI_BOOLEAN_TRUE]\n-#define boolean_false_node\t\tc_global_trees[CTI_BOOLEAN_FALSE]\n-\n-#define c_bool_type_node\t\tc_global_trees[CTI_C_BOOL_TYPE]\n-#define c_bool_true_node\t\tc_global_trees[CTI_C_BOOL_TRUE]\n-#define c_bool_false_node\t\tc_global_trees[CTI_C_BOOL_FALSE]\n+#define truthvalue_type_node\t\tc_global_trees[CTI_TRUTHVALUE_TYPE]\n+#define truthvalue_true_node\t\tc_global_trees[CTI_TRUTHVALUE_TRUE]\n+#define truthvalue_false_node\t\tc_global_trees[CTI_TRUTHVALUE_FALSE]\n \n #define char_array_type_node\t\tc_global_trees[CTI_CHAR_ARRAY_TYPE]\n #define wchar_array_type_node\t\tc_global_trees[CTI_WCHAR_ARRAY_TYPE]"}, {"sha": "5506ac8cc81e95a4e5155321e6da56c3061e28e3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -2295,21 +2295,14 @@ c_init_decl_processing (void)\n \n   c_common_nodes_and_builtins ();\n \n-  boolean_type_node = integer_type_node;\n-  boolean_true_node = integer_one_node;\n-  boolean_false_node = integer_zero_node;\n-\n-  c_bool_type_node = make_unsigned_type (BOOL_TYPE_SIZE);\n-  TREE_SET_CODE (c_bool_type_node, BOOLEAN_TYPE);\n-  TYPE_MAX_VALUE (c_bool_type_node) = build_int_2 (1, 0);\n-  TREE_TYPE (TYPE_MAX_VALUE (c_bool_type_node)) = c_bool_type_node;\n-  TYPE_PRECISION (c_bool_type_node) = 1;\n+  /* In C, comparisons and TRUTH_* expressions have type int.  */\n+  truthvalue_type_node = integer_type_node;\n+  truthvalue_true_node = integer_one_node;\n+  truthvalue_false_node = integer_zero_node;\n+\n+  /* Even in C99, which has a real boolean type.  */\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"_Bool\"),\n-\t\t\tc_bool_type_node));\n-  c_bool_false_node = build_int_2 (0, 0);\n-  TREE_TYPE (c_bool_false_node) = c_bool_type_node;\n-  c_bool_true_node = build_int_2 (1, 0);\n-  TREE_TYPE (c_bool_true_node) = c_bool_type_node;\n+\t\t\tboolean_type_node));\n \n   endlink = void_list_node;\n   ptr_ftype_void = build_function_type (ptr_type_node, endlink);\n@@ -5033,7 +5026,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n       if (DECL_INITIAL (x) && pedantic\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != integer_type_node\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != unsigned_type_node\n-\t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != c_bool_type_node\n+\t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != boolean_type_node\n \t  /* Accept an enum that's equivalent to int or unsigned int.  */\n \t  && !(TREE_CODE (TREE_TYPE (x)) == ENUMERAL_TYPE\n \t       && (TYPE_PRECISION (TREE_TYPE (x))\n@@ -5046,7 +5039,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n       if (DECL_INITIAL (x))\n \t{\n \t  int max_width\n-\t    = (TYPE_MAIN_VARIANT (TREE_TYPE (x)) == c_bool_type_node\n+\t    = (TYPE_MAIN_VARIANT (TREE_TYPE (x)) == boolean_type_node\n \t       ? CHAR_TYPE_SIZE : TYPE_PRECISION (TREE_TYPE (x)));\n \n \t  if (tree_int_cst_sgn (DECL_INITIAL (x)) < 0)"}, {"sha": "8ac14120e6f8921c12b4292b44ce5c99c4b7b504", "filename": "gcc/c-parse.in", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -578,26 +578,26 @@ expr_no_commas:\n \t| expr_no_commas ANDAND\n \t\t{ $1 = c_common_truthvalue_conversion\n \t\t    (default_conversion ($1));\n-\t\t  skip_evaluation += $1 == boolean_false_node; }\n+\t\t  skip_evaluation += $1 == truthvalue_false_node; }\n \t  expr_no_commas\n-\t\t{ skip_evaluation -= $1 == boolean_false_node;\n+\t\t{ skip_evaluation -= $1 == truthvalue_false_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ANDIF_EXPR, $1, $4); }\n \t| expr_no_commas OROR\n \t\t{ $1 = c_common_truthvalue_conversion\n \t\t    (default_conversion ($1));\n-\t\t  skip_evaluation += $1 == boolean_true_node; }\n+\t\t  skip_evaluation += $1 == truthvalue_true_node; }\n \t  expr_no_commas\n-\t\t{ skip_evaluation -= $1 == boolean_true_node;\n+\t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ORIF_EXPR, $1, $4); }\n \t| expr_no_commas '?'\n \t\t{ $1 = c_common_truthvalue_conversion\n \t\t    (default_conversion ($1));\n-\t\t  skip_evaluation += $1 == boolean_false_node; }\n+\t\t  skip_evaluation += $1 == truthvalue_false_node; }\n           expr ':'\n-\t\t{ skip_evaluation += (($1 == boolean_true_node)\n-\t\t\t\t      - ($1 == boolean_false_node)); }\n+\t\t{ skip_evaluation += (($1 == truthvalue_true_node)\n+\t\t\t\t      - ($1 == truthvalue_false_node)); }\n \t  expr_no_commas\n-\t\t{ skip_evaluation -= $1 == boolean_true_node;\n+\t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n \t\t  $$ = build_conditional_expr ($1, $4, $7); }\n \t| expr_no_commas '?'\n \t\t{ if (pedantic)\n@@ -606,9 +606,9 @@ expr_no_commas:\n \t\t  $<ttype>2 = save_expr ($1);\n \t\t  $1 = c_common_truthvalue_conversion\n \t\t    (default_conversion ($<ttype>2));\n-\t\t  skip_evaluation += $1 == boolean_true_node; }\n+\t\t  skip_evaluation += $1 == truthvalue_true_node; }\n \t  ':' expr_no_commas\n-\t\t{ skip_evaluation -= $1 == boolean_true_node;\n+\t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n \t\t  $$ = build_conditional_expr ($1, $<ttype>2, $5); }\n \t| expr_no_commas '=' expr_no_commas\n \t\t{ char class;"}, {"sha": "cbffbe09411d6d451d58369cc756908b06ab9596", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -668,7 +668,7 @@ genrtl_switch_stmt (tree t)\n   if (cond == error_mark_node)\n     /* The code is in error, but we don't want expand_end_case to\n        crash.  */\n-    cond = boolean_false_node;\n+    cond = truthvalue_false_node;\n \n   emit_line_note (input_location);\n   expand_start_case (1, cond, TREE_TYPE (cond), \"switch statement\");"}, {"sha": "c9930bba76c7f68c20f60e6992c9fd64727b96e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -1,3 +1,7 @@\n+2003-07-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c: Just set truthvalue_* to boolean_*.\n+\n 2003-07-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (reshape_init): Remove unreachable code."}, {"sha": "4443d70d400876a6587052dad1605b37c126f73e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -6260,16 +6260,10 @@ cxx_init_decl_processing (void)\n   integer_three_node = build_int_2 (3, 0);\n   TREE_TYPE (integer_three_node) = integer_type_node;\n \n-  boolean_type_node = make_unsigned_type (BOOL_TYPE_SIZE);\n-  TREE_SET_CODE (boolean_type_node, BOOLEAN_TYPE);\n-  TYPE_MAX_VALUE (boolean_type_node) = build_int_2 (1, 0);\n-  TREE_TYPE (TYPE_MAX_VALUE (boolean_type_node)) = boolean_type_node;\n-  TYPE_PRECISION (boolean_type_node) = 1;\n   record_builtin_type (RID_BOOL, \"bool\", boolean_type_node);\n-  boolean_false_node = build_int_2 (0, 0);\n-  TREE_TYPE (boolean_false_node) = boolean_type_node;\n-  boolean_true_node = build_int_2 (1, 0);\n-  TREE_TYPE (boolean_true_node) = boolean_type_node;\n+  truthvalue_type_node = boolean_type_node;\n+  truthvalue_false_node = boolean_false_node;\n+  truthvalue_true_node = boolean_true_node;\n \n   empty_except_spec = build_tree_list (NULL_TREE, NULL_TREE);\n "}, {"sha": "7aa7f12abffb58779d753045ef5c78bebc5fc62f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -1,3 +1,7 @@\n+2003-07-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* java-tree.h: Move boolean_type_node et al to the back end.\n+\n 2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c java-tree.h jcf-write.c jvspec.c: Remove unnecessary"}, {"sha": "0c7cf75220f43636e85402911d9b37c25f7d1908", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -287,8 +287,6 @@ enum java_tree_index\n   JTI_DECIMAL_INT_MAX_NODE,\n   JTI_DECIMAL_LONG_MAX_NODE,\n \n-  JTI_BOOLEAN_TYPE_NODE,\n-\n   JTI_OBJECT_TYPE_NODE,\n   JTI_UNQUALIFIED_OBJECT_ID_NODE,\n   JTI_OBJECT_PTR_TYPE_NODE,\n@@ -338,9 +336,6 @@ enum java_tree_index\n \n   JTI_RETURN_ADDRESS_TYPE_NODE,\n \n-  JTI_BOOLEAN_TRUE_NODE, \n-  JTI_BOOLEAN_FALSE_NODE,\n-\n   JTI_LONG_ZERO_NODE,\n   JTI_FLOAT_ZERO_NODE,\n   JTI_DOUBLE_ZERO_NODE,\n@@ -457,9 +452,6 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n #define decimal_long_max \\\n   java_global_trees[JTI_DECIMAL_LONG_MAX_NODE]\n \n-#define boolean_type_node \\\n-  java_global_trees[JTI_BOOLEAN_TYPE_NODE]\n-\n #define object_type_node \\\n   java_global_trees[JTI_OBJECT_TYPE_NODE]\n #define unqualified_object_id_node \\\n@@ -556,12 +548,6 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n #define return_address_type_node \\\n   java_global_trees[JTI_RETURN_ADDRESS_TYPE_NODE]\n \n-/* Nodes for boolean constants TRUE and FALSE. */\n-#define boolean_true_node \\\n-  java_global_trees[JTI_BOOLEAN_TRUE_NODE]\n-#define boolean_false_node \\\n-  java_global_trees[JTI_BOOLEAN_FALSE_NODE]\n-\n /* Integer constants not declared in tree.h. */\n #define long_zero_node \\\n   java_global_trees[JTI_LONG_ZERO_NODE]"}, {"sha": "d3343744714d8cf140f8d05cc8f0ccb79eb824d8", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -1941,7 +1941,8 @@ set_sizetype (tree type)\n      for the sizes in them.  */\n   for (t = early_type_list; t != 0; t = TREE_CHAIN (t))\n     {\n-      if (TREE_CODE (TREE_VALUE (t)) != INTEGER_TYPE)\n+      if (TREE_CODE (TREE_VALUE (t)) != INTEGER_TYPE\n+\t  && TREE_CODE (TREE_VALUE (t)) != BOOLEAN_TYPE)\n \tabort ();\n \n       TREE_TYPE (TYPE_SIZE (TREE_VALUE (t))) = bitsizetype;"}, {"sha": "7ac0402dd01fe83af5314e03b33574cfee91e132", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -4754,6 +4754,16 @@ build_common_tree_nodes (int signed_char)\n   long_long_integer_type_node = make_signed_type (LONG_LONG_TYPE_SIZE);\n   long_long_unsigned_type_node = make_unsigned_type (LONG_LONG_TYPE_SIZE);\n \n+  /* Define a boolean type.  This type only represents boolean values but\n+     may be larger than char depending on the value of BOOL_TYPE_SIZE.\n+     Front ends which want to override this size (i.e. Java) can redefine\n+     boolean_type_node before calling build_common_tree_nodes_2.  */\n+  boolean_type_node = make_unsigned_type (BOOL_TYPE_SIZE);\n+  TREE_SET_CODE (boolean_type_node, BOOLEAN_TYPE);\n+  TYPE_MAX_VALUE (boolean_type_node) = build_int_2 (1, 0);\n+  TREE_TYPE (TYPE_MAX_VALUE (boolean_type_node)) = boolean_type_node;\n+  TYPE_PRECISION (boolean_type_node) = 1;\n+\n   intQI_type_node = make_signed_type (GET_MODE_BITSIZE (QImode));\n   intHI_type_node = make_signed_type (GET_MODE_BITSIZE (HImode));\n   intSI_type_node = make_signed_type (GET_MODE_BITSIZE (SImode));\n@@ -4784,6 +4794,9 @@ build_common_tree_nodes_2 (int short_double)\n   bitsize_one_node = bitsize_int (1);\n   bitsize_unit_node = bitsize_int (BITS_PER_UNIT);\n \n+  boolean_false_node = TYPE_MIN_VALUE (boolean_type_node);\n+  boolean_true_node = TYPE_MAX_VALUE (boolean_type_node);\n+\n   void_type_node = make_node (VOID_TYPE);\n   layout_type (void_type_node);\n "}, {"sha": "01cca269a338b02d299e998aa74ad1085b53f82d", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7df9ebdc66ea3a978327f5a039d939a9523a72/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=de7df9ebdc66ea3a978327f5a039d939a9523a72", "patch": "@@ -1779,6 +1779,9 @@ enum tree_index\n   TI_BITSIZE_ONE,\n   TI_BITSIZE_UNIT,\n \n+  TI_BOOLEAN_FALSE,\n+  TI_BOOLEAN_TRUE,\n+\n   TI_COMPLEX_INTEGER_TYPE,\n   TI_COMPLEX_FLOAT_TYPE,\n   TI_COMPLEX_DOUBLE_TYPE,\n@@ -1794,6 +1797,7 @@ enum tree_index\n   TI_SIZE_TYPE,\n   TI_PTRDIFF_TYPE,\n   TI_VA_LIST_TYPE,\n+  TI_BOOLEAN_TYPE,\n \n   TI_VOID_LIST_NODE,\n \n@@ -1880,6 +1884,10 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n \n+#define boolean_type_node\t\tglobal_trees[TI_BOOLEAN_TYPE]\n+#define boolean_false_node\t\tglobal_trees[TI_BOOLEAN_FALSE]\n+#define boolean_true_node\t\tglobal_trees[TI_BOOLEAN_TRUE]\n+\n /* The node that should be placed at the end of a parameter list to\n    indicate that the function does not take a variable number of\n    arguments.  The TREE_VALUE will be void_type_node and there will be"}]}