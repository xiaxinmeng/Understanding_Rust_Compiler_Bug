{"sha": "0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5NzNjMGEwZDkwYTBhMzAyZTdlZGExYTRkOTcwOWJlM2M1YjEwMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-20T09:36:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-20T09:36:52Z"}, "message": "openmp: Implement the error directive\n\nThis patch implements the error directive.  Depending on clauses it is either\na compile time diagnostics (in that case diagnosed right away) or runtime\ndiagnostics (libgomp API call that diagnoses at runtime), and either fatal\nor warning (error or warning at compile time or fatal error vs. error at\nruntime) and either has no message or user supplied message (this kind of\ne.g. deprecated attribute).  The directive is also stand-alone directive\nwhen at runtime while utility (thus disappears from the IL as if it wasn't\nthere for parsing like nothing directive) at compile time.\n\nThere are some clarifications in the works ATM, so this patch doesn't yet\nrequire that for compile time diagnostics the user message must be a constant\nstring literal, there are uncertainities on what exactly is valid argument\nof message clause (whether just const char * type, convertible to const char *,\nqualified/unqualified const char * or char * or what else) and what to do\nin templates.  Currently even in templates it is diagnosed right away for\ncompile time diagnostics, if we'll need to substitute it, we'd need to queue\nsomething into the IL, have pt.c handle it and diagnose only later.\n\n2021-08-20  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* omp-builtins.def (BUILT_IN_GOMP_WARNING, BUILT_IN_GOMP_ERROR): New\n\tbuiltins.\ngcc/c-family/\n\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_ERROR.\n\t* c-pragma.c (omp_pragmas): Add error directive.\n\t* c-omp.c (omp_directives): Uncomment error directive entry.\ngcc/c/\n\t* c-parser.c (c_parser_omp_error): New function.\n\t(c_parser_pragma): Handle PRAGMA_OMP_ERROR.\ngcc/cp/\n\t* parser.c (cp_parser_handle_statement_omp_attributes): Determine if\n\tPRAGMA_OMP_ERROR directive is C_OMP_DIR_STANDALONE.\n\t(cp_parser_omp_error): New function.\n\t(cp_parser_pragma): Handle PRAGMA_OMP_ERROR.\ngcc/fortran/\n\t* types.def (BT_FN_VOID_CONST_PTR_SIZE): New DEF_FUNCTION_TYPE_2.\n\t* f95-lang.c (ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST): Define.\ngcc/testsuite/\n\t* c-c++-common/gomp/error-1.c: New test.\n\t* c-c++-common/gomp/error-2.c: New test.\n\t* c-c++-common/gomp/error-3.c: New test.\n\t* g++.dg/gomp/attrs-1.C (bar): Add error directive test.\n\t* g++.dg/gomp/attrs-2.C (bar): Add error directive test.\n\t* g++.dg/gomp/attrs-13.C: New test.\n\t* g++.dg/gomp/error-1.C: New test.\nlibgomp/\n\t* libgomp.map (GOMP_5.1): Add GOMP_error and GOMP_warning.\n\t* libgomp_g.h (GOMP_warning, GOMP_error): Declare.\n\t* error.c (GOMP_warning, GOMP_error): New functions.\n\t* testsuite/libgomp.c-c++-common/error-1.c: New test.", "tree": {"sha": "9201cdf5e6e4357301650e6ccfc09c63f380d800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9201cdf5e6e4357301650e6ccfc09c63f380d800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9400e4e4705845f2b0cdc4eab30c214e0e4cbe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9400e4e4705845f2b0cdc4eab30c214e0e4cbe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9400e4e4705845f2b0cdc4eab30c214e0e4cbe0"}], "stats": {"total": 704, "additions": 696, "deletions": 8}, "files": [{"sha": "18de7e42b93324ebc870fc4906e961bde4065619", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -2991,8 +2991,8 @@ static const struct c_omp_directive omp_directives[] = {\n   /* { \"end\", \"metadirective\", nullptr, PRAGMA_OMP_END,\n     C_OMP_DIR_???, ??? },  */\n   /* error with at(execution) is C_OMP_DIR_STANDALONE.  */\n-  /* { \"error\", nullptr, nullptr, PRAGMA_OMP_ERROR,\n-    C_OMP_DIR_UTILITY, false },  */\n+  { \"error\", nullptr, nullptr, PRAGMA_OMP_ERROR,\n+    C_OMP_DIR_UTILITY, false },\n   { \"flush\", nullptr, nullptr, PRAGMA_OMP_FLUSH,\n     C_OMP_DIR_STANDALONE, false },\n   { \"for\", nullptr, nullptr, PRAGMA_OMP_FOR,"}, {"sha": "a9be8df0384d152b53a8c25eef5ad5c43056bf75", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -1326,6 +1326,7 @@ static const struct omp_pragma_def omp_pragmas[] = {\n   { \"cancellation\", PRAGMA_OMP_CANCELLATION_POINT },\n   { \"critical\", PRAGMA_OMP_CRITICAL },\n   { \"depobj\", PRAGMA_OMP_DEPOBJ },\n+  { \"error\", PRAGMA_OMP_ERROR },\n   { \"end\", PRAGMA_OMP_END_DECLARE_TARGET },\n   { \"flush\", PRAGMA_OMP_FLUSH },\n   { \"nothing\", PRAGMA_OMP_NOTHING },"}, {"sha": "0c5b07ab4e1095efdf93b949d37ad6e5a387f211", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -53,6 +53,7 @@ enum pragma_kind {\n   PRAGMA_OMP_DECLARE,\n   PRAGMA_OMP_DEPOBJ,\n   PRAGMA_OMP_DISTRIBUTE,\n+  PRAGMA_OMP_ERROR,\n   PRAGMA_OMP_END_DECLARE_TARGET,\n   PRAGMA_OMP_FLUSH,\n   PRAGMA_OMP_FOR,"}, {"sha": "c5783075a999737933b0695ba6689bacc5c2e64f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -1588,6 +1588,7 @@ static bool c_parser_omp_target (c_parser *, enum pragma_context, bool *);\n static void c_parser_omp_end_declare_target (c_parser *);\n static bool c_parser_omp_declare (c_parser *, enum pragma_context);\n static void c_parser_omp_requires (c_parser *);\n+static bool c_parser_omp_error (c_parser *, enum pragma_context);\n static bool c_parser_omp_ordered (c_parser *, enum pragma_context, bool *);\n static void c_parser_oacc_routine (c_parser *, enum pragma_context);\n \n@@ -12485,6 +12486,9 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n       c_parser_omp_nothing (parser);\n       return false;\n \n+    case PRAGMA_OMP_ERROR:\n+      return c_parser_omp_error (parser, context);\n+\n     case PRAGMA_OMP_ORDERED:\n       return c_parser_omp_ordered (parser, context, if_p);\n \n@@ -21936,6 +21940,173 @@ c_parser_omp_nothing (c_parser *parser)\n   c_parser_skip_to_pragma_eol (parser);\n }\n \n+/* OpenMP 5.1\n+   #pragma omp error clauses[optseq] new-line  */\n+\n+static bool\n+c_parser_omp_error (c_parser *parser, enum pragma_context context)\n+{\n+  int at_compilation = -1;\n+  int severity_fatal = -1;\n+  tree message = NULL_TREE;\n+  bool first = true;\n+  bool bad = false;\n+  location_t loc = c_parser_peek_token (parser)->location;\n+\n+  c_parser_consume_pragma (parser);\n+\n+  while (c_parser_next_token_is_not (parser, CPP_PRAGMA_EOL))\n+    {\n+      if (!first\n+\t  && c_parser_next_token_is (parser, CPP_COMMA)\n+\t  && c_parser_peek_2nd_token (parser)->type == CPP_NAME)\n+\tc_parser_consume_token (parser);\n+\n+      first = false;\n+\n+      if (!c_parser_next_token_is (parser, CPP_NAME))\n+\tbreak;\n+\n+      const char *p\n+\t= IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n+      location_t cloc = c_parser_peek_token (parser)->location;\n+      static const char *args[] = {\n+\t\"execution\", \"compilation\", \"warning\", \"fatal\"\n+      };\n+      int *v = NULL;\n+      int idx = 0, n = -1;\n+      tree m = NULL_TREE;\n+\n+      if (!strcmp (p, \"at\"))\n+\tv = &at_compilation;\n+      else if (!strcmp (p, \"severity\"))\n+\t{\n+\t  v = &severity_fatal;\n+\t  idx += 2;\n+\t}\n+      else if (strcmp (p, \"message\"))\n+\t{\n+\t  error_at (cloc,\n+\t\t    \"expected %<at%>, %<severity%> or %<message%> clause\");\n+\t  c_parser_skip_to_pragma_eol (parser, false);\n+\t  return false;\n+\t}\n+\n+      c_parser_consume_token (parser);\n+\n+      matching_parens parens;\n+      if (parens.require_open (parser))\n+\t{\n+\t  if (v == NULL)\n+\t    {\n+\t      location_t expr_loc = c_parser_peek_token (parser)->location;\n+\t      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n+\t      expr = convert_lvalue_to_rvalue (expr_loc, expr, true, true);\n+\t      m = convert (const_string_type_node, expr.value);\n+\t      m = c_fully_fold (m, false, NULL);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (c_parser_next_token_is (parser, CPP_NAME))\n+\t\t{\n+\t\t  tree val = c_parser_peek_token (parser)->value;\n+\t\t  const char *q = IDENTIFIER_POINTER (val);\n+\n+\t\t  if (!strcmp (q, args[idx]))\n+\t\t    n = 0;\n+\t\t  else if (!strcmp (q, args[idx + 1]))\n+\t\t    n = 1;\n+\t\t}\n+\t      if (n == -1)\n+\t\t{\n+\t\t  error_at (c_parser_peek_token (parser)->location,\n+\t\t\t    \"expected %qs or %qs\", args[idx], args[idx + 1]);\n+\t\t  bad = true;\n+\t\t  switch (c_parser_peek_token (parser)->type)\n+\t\t    {\n+\t\t    case CPP_EOF:\n+\t\t    case CPP_PRAGMA_EOL:\n+\t\t    case CPP_CLOSE_PAREN:\n+\t\t      break;\n+\t\t    default:\n+\t\t      if (c_parser_peek_2nd_token (parser)->type\n+\t\t\t  == CPP_CLOSE_PAREN)\n+\t\t\tc_parser_consume_token (parser);\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tc_parser_consume_token (parser);\n+\t    }\n+\n+\t  parens.skip_until_found_close (parser);\n+\n+\t  if (v == NULL)\n+\t    {\n+\t      if (message)\n+\t\t{\n+\t\t  error_at (cloc, \"too many %qs clauses\", p);\n+\t\t  bad = true;\n+\t\t}\n+\t      else\n+\t\tmessage = m;\n+\t    }\n+\t  else if (n != -1)\n+\t    {\n+\t      if (*v != -1)\n+\t\t{\n+\t\t  error_at (cloc, \"too many %qs clauses\", p);\n+\t\t  bad = true;\n+\t\t}\n+\t      else\n+\t\t*v = n;\n+\t    }\n+\t}\n+      else\n+\tbad = true;\n+    }\n+  c_parser_skip_to_pragma_eol (parser);\n+  if (bad)\n+    return true;\n+\n+  if (at_compilation == -1)\n+    at_compilation = 1;\n+  if (severity_fatal == -1)\n+    severity_fatal = 1;\n+  if (!at_compilation)\n+    {\n+      if (context != pragma_compound)\n+\t{\n+\t  error_at (loc, \"%<#pragma omp error%> with %<at(execution)%> clause \"\n+\t\t\t \"may only be used in compound statements\");\n+\t  return true;\n+\t}\n+      tree fndecl\n+\t= builtin_decl_explicit (severity_fatal ? BUILT_IN_GOMP_ERROR\n+\t\t\t\t\t\t: BUILT_IN_GOMP_WARNING);\n+      if (!message)\n+\tmessage = build_zero_cst (const_string_type_node);\n+      tree stmt = build_call_expr_loc (loc, fndecl, 2, message,\n+\t\t\t\t       build_all_ones_cst (size_type_node));\n+      add_stmt (stmt);\n+      return true;\n+    }\n+  const char *msg = NULL;\n+  if (message)\n+    {\n+      msg = c_getstr (message);\n+      if (msg == NULL)\n+\tmsg = _(\"<message unknown at compile time>\");\n+    }\n+  if (msg)\n+    emit_diagnostic (severity_fatal ? DK_ERROR : DK_WARNING, loc, 0,\n+\t\t     \"%<pragma omp error%> encountered: %s\", msg);\n+  else\n+    emit_diagnostic (severity_fatal ? DK_ERROR : DK_WARNING, loc, 0,\n+\t\t     \"%<pragma omp error%> encountered\");\n+  return false;\n+}\n+\n /* Main entry point to parsing most OpenMP pragmas.  */\n \n static void"}, {"sha": "63c950398540033b136546629b5bfde27e447b95", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 204, "deletions": 3, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -11760,10 +11760,30 @@ cp_parser_handle_statement_omp_attributes (cp_parser *parser, tree attrs)\n \t\t\t\t    \"depend\") == 0)\n \t\t  kind = C_OMP_DIR_STANDALONE;\n \t      }\n-\t    /* else if (dir->id == PRAGMA_OMP_ERROR)\n+\t    else if (dir->id == PRAGMA_OMP_ERROR)\n \t      {\n-\t\terror with at(execution) clause is C_OMP_DIR_STANDALONE.\n-\t      }  */\n+\t\t/* error with at(execution) clause is C_OMP_DIR_STANDALONE.  */\n+\t\tint paren_depth = 0;\n+\t\tfor (int i = 1; first + i < last; i++)\n+\t\t  if (first[i].type == CPP_OPEN_PAREN)\n+\t\t    paren_depth++;\n+\t\t  else if (first[i].type == CPP_CLOSE_PAREN)\n+\t\t    paren_depth--;\n+\t\t  else if (paren_depth == 0\n+\t\t\t   && first + i + 2 < last\n+\t\t\t   && first[i].type == CPP_NAME\n+\t\t\t   && first[i + 1].type == CPP_OPEN_PAREN\n+\t\t\t   && first[i + 2].type == CPP_NAME\n+\t\t\t   && !strcmp (IDENTIFIER_POINTER (first[i].u.value),\n+\t\t\t\t       \"at\")\n+\t\t\t   && !strcmp (IDENTIFIER_POINTER (first[i\n+\t\t\t\t\t\t\t\t + 2].u.value),\n+\t\t\t\t       \"execution\"))\n+\t\t    {\n+\t\t      kind = C_OMP_DIR_STANDALONE;\n+\t\t      break;\n+\t\t    }\n+\t      }\n \t    cp_omp_attribute_data v = { DEFPARSE_TOKENS (d), dir, kind };\n \t    vec.safe_push (v);\n \t    if (flag_openmp || dir->simd)\n@@ -45590,6 +45610,184 @@ cp_parser_omp_nothing (cp_parser *parser, cp_token *pragma_tok)\n }\n \n \n+/* OpenMP 5.1\n+   #pragma omp error clauses[optseq] new-line  */\n+\n+static bool\n+cp_parser_omp_error (cp_parser *parser, cp_token *pragma_tok,\n+\t\t     enum pragma_context context)\n+{\n+  int at_compilation = -1;\n+  int severity_fatal = -1;\n+  tree message = NULL_TREE;\n+  bool first = true;\n+  bool bad = false;\n+  location_t loc = pragma_tok->location;\n+\n+  while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))\n+    {\n+      /* For now only in C++ attributes, do it always for OpenMP 5.1.  */\n+      if ((!first || parser->lexer->in_omp_attribute_pragma)\n+\t  && cp_lexer_next_token_is (parser->lexer, CPP_COMMA)\n+\t  && cp_lexer_nth_token_is (parser->lexer, 2, CPP_NAME))\n+\tcp_lexer_consume_token (parser->lexer);\n+\n+      first = false;\n+\n+      if (cp_lexer_next_token_is_not (parser->lexer, CPP_NAME))\n+\tbreak;\n+\n+      const char *p\n+\t= IDENTIFIER_POINTER (cp_lexer_peek_token (parser->lexer)->u.value);\n+      location_t cloc = cp_lexer_peek_token (parser->lexer)->location;\n+      static const char *args[] = {\n+\t\"execution\", \"compilation\", \"warning\", \"fatal\"\n+      };\n+      int *v = NULL;\n+      int idx = 0, n = -1;\n+      tree m = NULL_TREE;\n+\n+      if (!strcmp (p, \"at\"))\n+\tv = &at_compilation;\n+      else if (!strcmp (p, \"severity\"))\n+\t{\n+\t  v = &severity_fatal;\n+\t  idx += 2;\n+\t}\n+      else if (strcmp (p, \"message\"))\n+\t{\n+\t  error_at (cloc,\n+\t\t    \"expected %<at%>, %<severity%> or %<message%> clause\");\n+\t  cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n+\t  return false;\n+\t}\n+\n+      cp_lexer_consume_token (parser->lexer);\n+\n+      matching_parens parens;\n+      if (parens.require_open (parser))\n+\t{\n+\t  if (v == NULL)\n+\t    {\n+\t      m = cp_parser_assignment_expression (parser);\n+\t      if (type_dependent_expression_p (m))\n+\t\tm = build1 (IMPLICIT_CONV_EXPR, const_string_type_node, m);\n+\t      else\n+\t\tm = perform_implicit_conversion_flags (const_string_type_node, m,\n+\t\t\t\t\t\t       tf_warning_or_error,\n+\t\t\t\t\t\t       LOOKUP_NORMAL);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+\t\t{\n+\t\t  tree val = cp_lexer_peek_token (parser->lexer)->u.value;\n+\t\t  const char *q = IDENTIFIER_POINTER (val);\n+\n+\t\t  if (!strcmp (q, args[idx]))\n+\t\t    n = 0;\n+\t\t  else if (!strcmp (q, args[idx + 1]))\n+\t\t    n = 1;\n+\t\t}\n+\t      if (n == -1)\n+\t\t{\n+\t\t  error_at (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t\t    \"expected %qs or %qs\", args[idx], args[idx + 1]);\n+\t\t  bad = true;\n+\t\t  switch (cp_lexer_peek_token (parser->lexer)->type)\n+\t\t    {\n+\t\t    case CPP_EOF:\n+\t\t    case CPP_PRAGMA_EOL:\n+\t\t    case CPP_CLOSE_PAREN:\n+\t\t      break;\n+\t\t    default:\n+\t\t      if (cp_lexer_nth_token_is (parser->lexer, 2,\n+\t\t\t\t\t\t CPP_CLOSE_PAREN))\n+\t\t\tcp_lexer_consume_token (parser->lexer);\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tcp_lexer_consume_token (parser->lexer);\n+\t    }\n+\n+\t  if (!parens.require_close (parser))\n+\t    cp_parser_skip_to_closing_parenthesis (parser,\n+\t\t\t\t\t\t   /*recovering=*/true,\n+\t\t\t\t\t\t   /*or_comma=*/false,\n+\t\t\t\t\t\t   /*consume_paren=*/\n+\t\t\t\t\t\t   true);\n+\n+\t  if (v == NULL)\n+\t    {\n+\t      if (message)\n+\t\t{\n+\t\t  error_at (cloc, \"too many %qs clauses\", p);\n+\t\t  bad = true;\n+\t\t}\n+\t      else\n+\t\tmessage = m;\n+\t    }\n+\t  else if (n != -1)\n+\t    {\n+\t      if (*v != -1)\n+\t\t{\n+\t\t  error_at (cloc, \"too many %qs clauses\", p);\n+\t\t  bad = true;\n+\t\t}\n+\t      else\n+\t\t*v = n;\n+\t    }\n+\t}\n+      else\n+\tbad = true;\n+    }\n+  cp_parser_require_pragma_eol (parser, pragma_tok);\n+  if (bad)\n+    return true;\n+\n+  if (at_compilation == -1)\n+    at_compilation = 1;\n+  if (severity_fatal == -1)\n+    severity_fatal = 1;\n+  if (!at_compilation)\n+    {\n+      if (context != pragma_compound)\n+\t{\n+\t  error_at (loc, \"%<#pragma omp error%> with %<at(execution)%> clause \"\n+\t\t\t \"may only be used in compound statements\");\n+\t  return true;\n+\t}\n+      tree fndecl\n+\t= builtin_decl_explicit (severity_fatal ? BUILT_IN_GOMP_ERROR\n+\t\t\t\t\t\t: BUILT_IN_GOMP_WARNING);\n+      if (!message)\n+\tmessage = build_zero_cst (const_string_type_node);\n+      tree stmt = build_call_expr_loc (loc, fndecl, 2, message,\n+\t\t\t\t       build_all_ones_cst (size_type_node));\n+      add_stmt (stmt);\n+      return true;\n+    }\n+\n+  if (in_discarded_stmt)\n+    return false;\n+\n+  const char *msg = NULL;\n+  if (message)\n+    {\n+      msg = c_getstr (fold_for_warn (message));\n+      if (msg == NULL)\n+\tmsg = _(\"<message unknown at compile time>\");\n+    }\n+  if (msg)\n+    emit_diagnostic (severity_fatal ? DK_ERROR : DK_WARNING, loc, 0,\n+\t\t     \"%<pragma omp error%> encountered: %s\", msg);\n+  else\n+    emit_diagnostic (severity_fatal ? DK_ERROR : DK_WARNING, loc, 0,\n+\t\t     \"%<pragma omp error%> encountered\");\n+  return false;\n+}\n+\n /* OpenMP 4.5:\n    #pragma omp taskloop taskloop-clause[optseq] new-line\n      for-loop\n@@ -46703,6 +46901,9 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n       cp_parser_omp_nothing (parser, pragma_tok);\n       return false;\n \n+    case PRAGMA_OMP_ERROR:\n+      return cp_parser_omp_error (parser, pragma_tok, context);\n+\n     case PRAGMA_OMP_ORDERED:\n       if (context != pragma_stmt && context != pragma_compound)\n \tgoto bad_stmt;"}, {"sha": "026228da09f29ee2ed4b3b20e94894037aaf968a", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -535,7 +535,7 @@ gfc_builtin_function (tree decl)\n   return decl;\n }\n \n-/* So far we need just these 8 attribute types.  */\n+/* So far we need just these 10 attribute types.  */\n #define ATTR_NULL\t\t\t0\n #define ATTR_LEAF_LIST\t\t\t(ECF_LEAF)\n #define ATTR_NOTHROW_LEAF_LIST\t\t(ECF_NOTHROW | ECF_LEAF)\n@@ -546,6 +546,9 @@ gfc_builtin_function (tree decl)\n #define ATTR_CONST_NOTHROW_LIST\t\t(ECF_NOTHROW | ECF_CONST)\n #define ATTR_ALLOC_WARN_UNUSED_RESULT_SIZE_2_NOTHROW_LIST \\\n \t\t\t\t\t(ECF_NOTHROW)\n+#define ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST \\\n+\t\t\t\t\t(ECF_COLD | ECF_NORETURN | \\\n+\t\t\t\t\t ECF_NOTHROW | ECF_LEAF)\n \n static void\n gfc_define_builtin (const char *name, tree type, enum built_in_function code,"}, {"sha": "85b85ed05802736fd1b182c2e1e87f9987237552", "filename": "gcc/fortran/types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ffortran%2Ftypes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ffortran%2Ftypes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftypes.def?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -120,6 +120,7 @@ DEF_FUNCTION_TYPE_2 (BT_FN_BOOL_INT_BOOL, BT_BOOL, BT_INT, BT_BOOL)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_UINT_UINT, BT_VOID, BT_UINT, BT_UINT)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_PTRMODE,\n \t\t     BT_VOID, BT_PTR, BT_PTRMODE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_CONST_PTR_SIZE, BT_VOID, BT_CONST_PTR, BT_SIZE)\n \n DEF_POINTER_TYPE (BT_PTR_FN_VOID_PTR_PTR, BT_FN_VOID_PTR_PTR)\n "}, {"sha": "4520dc01b932816aa265501e05022d5760c0bf14", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -463,3 +463,7 @@ DEF_GOMP_BUILTIN (BUILT_IN_GOMP_ALLOC,\n \t\t  ATTR_ALLOC_WARN_UNUSED_RESULT_SIZE_2_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_FREE,\n \t\t  \"GOMP_free\", BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GOMP_BUILTIN (BUILT_IN_GOMP_WARNING, \"GOMP_warning\",\n+\t\t  BT_FN_VOID_CONST_PTR_SIZE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GOMP_BUILTIN (BUILT_IN_GOMP_ERROR, \"GOMP_error\",\n+\t\t  BT_FN_VOID_CONST_PTR_SIZE, ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "6a40f85b382a6d7a9526cfc6deec650629990493", "filename": "gcc/testsuite/c-c++-common/gomp/error-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-1.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -0,0 +1,45 @@\n+#pragma omp error\t\t\t/* { dg-error \"'pragma omp error' encountered\" } */\n+#pragma omp error at(compilation)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+#pragma omp error severity(fatal)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+#pragma omp error message(\"my msg\")\t/* { dg-error \"'pragma omp error' encountered: my msg\" } */\n+#pragma omp error severity(warning)message(\"another message\")at(compilation)\t/* { dg-warning \"'pragma omp error' encountered: another message\" } */\n+\n+struct S {\n+  #pragma omp error\t\t\t/* { dg-error \"'pragma omp error' encountered\" } */\n+  #pragma omp error at(compilation)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+  #pragma omp error severity(fatal)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+  #pragma omp error message(\"42\")\t/* { dg-error \"'pragma omp error' encountered: 42\" } */\n+  #pragma omp error severity(warning), message(\"foo\"), at(compilation)\t/* { dg-warning \"'pragma omp error' encountered: foo\" } */\n+  int s;\n+};\n+\n+int\n+foo (int i, int x)\n+{\n+  #pragma omp error\t\t\t/* { dg-error \"'pragma omp error' encountered\" } */\n+  #pragma omp error at(compilation)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+  #pragma omp error severity(fatal)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+  #pragma omp error message(\"42 / 1\")\t/* { dg-error \"'pragma omp error' encountered: 42 / 1\" } */\n+  #pragma omp error severity(warning) message(\"bar\") at(compilation)\t/* { dg-warning \"'pragma omp error' encountered: bar\" } */\n+  if (x)\n+    #pragma omp error\t\t\t/* { dg-error \"'pragma omp error' encountered\" } */\n+    i++;\n+  if (x)\n+    ;\n+  else\n+    #pragma omp error at(compilation)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+    i++;\n+  switch (0)\n+    #pragma omp error severity(fatal)\t/* { dg-error \"'pragma omp error' encountered\" } */\n+    {\n+    default:\n+      break;\n+    }\n+  while (0)\n+    #pragma omp error message(\"42 - 1\")\t/* { dg-error \"'pragma omp error' encountered: 42 - 1\" } */\n+    i++;\n+  lab:\n+  #pragma omp error severity(warning) message(\"bar\") at(compilation)\t/* { dg-warning \"'pragma omp error' encountered: bar\" } */\n+    i++;\n+  return i;\n+}"}, {"sha": "4e13f03ec8de1d1f71bbf8b5428e3fc0b3390959", "filename": "gcc/testsuite/c-c++-common/gomp/error-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-2.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -0,0 +1,24 @@\n+void\n+foo (int x, const char *msg1, const char *msg2)\n+{\n+  if (x == 0)\n+    {\n+      #pragma omp error at(execution)\n+    }\n+  else if (x == 1)\n+    {\n+      #pragma omp error severity (warning), at (execution)\n+    }\n+  else if (x == 2)\n+    {\n+      #pragma omp error at ( execution ) severity (fatal) message (\"baz\")\n+    }\n+  else if (x == 3)\n+    {\n+      #pragma omp error severity(warning) message (msg1) at(execution)\n+    }\n+  else\n+    {\n+      #pragma omp error message (msg2), at(execution), severity(fatal)\n+    }\n+}"}, {"sha": "d2b8b830bd1ef7dc37a55f56e01c864e30679f88", "filename": "gcc/testsuite/c-c++-common/gomp/error-3.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ferror-3.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -0,0 +1,70 @@\n+#pragma omp error asdf\t\t\t\t/* { dg-error \"expected 'at', 'severity' or 'message' clause\" } */\n+#pragma omp error at\t\t\t\t/* { dg-error \"expected '\\\\\\(' before end of line\" } */\n+#pragma omp error at(\t\t\t\t/* { dg-error \"expected 'execution' or 'compilation'\" } */\n+\t\t\t\t\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error at(runtime)\t\t\t/* { dg-error \"expected 'execution' or 'compilation'\" } */\n+#pragma omp error at(+\t\t\t\t/* { dg-error \"expected 'execution' or 'compilation'\" } */\n+\t\t\t\t\t\t/* { dg-error \"expected '\\\\\\)' before '\\\\\\+' token\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error at(compilation\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error severity\t\t\t/* { dg-error \"expected '\\\\\\(' before end of line\" } */\n+#pragma omp error severity(\t\t\t/* { dg-error \"expected 'warning' or 'fatal'\" } */\n+\t\t\t\t\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error severity(error)\t\t/* { dg-error \"expected 'warning' or 'fatal'\" } */\n+#pragma omp error severity(-\t\t\t/* { dg-error \"expected 'warning' or 'fatal'\" } */\n+\t\t\t\t\t\t/* { dg-error \"expected '\\\\\\)' before '-' token\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error severity(fatal\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error message\t\t\t/* { dg-error \"expected '\\\\\\(' before end of line\" } */\n+#pragma omp error message(\t\t\t/* { dg-error \"expected expression before end of line\" \"\" { target c } } */\n+\t\t\t\t\t\t/* { dg-error \"expected primary-expression before end of line\" \"\" { target c++ } .-1 } */\n+\t\t\t\t\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" \"\" { target c++ } .-2 } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered: <message unknown at compile time>\" \"\" { target *-*-* } .-3 } */\n+#pragma omp error message(0\t\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered: <message unknown at compile time>\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error message(\"foo\"\t\t\t/* { dg-error \"expected '\\\\\\)' before end of line\" } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered: foo\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error message(1)\t\t\t/* { dg-error \"'pragma omp error' encountered: <message unknown at compile time>\" } */\n+\t\t\t\t\t\t/* { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" \"\" { target c++ } .-1 } */\n+#pragma omp error message(1.2)\t\t\t/* { dg-error \"cannot convert to a pointer type\" \"\" { target c } } */\n+\t\t\t\t\t\t/* { dg-error \"could not convert\" \"\" { target c++ } .-1 } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered: <message unknown at compile time>\" \"\" { target *-*-* } .-2 } */\n+#pragma omp error message(L\"bar\")\t\t/* { dg-error \"'pragma omp error' encountered: <message unknown at compile time>\" } */\n+\t\t\t\t\t\t/* { dg-error \"could not convert\" \"\" { target c++ } .-1 } */\n+#pragma omp error message(\"foo\"),at(compilation),severity(fatal),\t/* { dg-error \"expected end of line before ',' token\" } */\n+\t\t\t\t\t\t/* { dg-error \"'pragma omp error' encountered: foo\" \"\" { target *-*-* } .-1 } */\n+#pragma omp error message(\"foo\"),at(compilation),severity(fatal),asdf\t/* { dg-error \"expected 'at', 'severity' or 'message' clause\" } */\n+#pragma omp error at(compilation) at(compilation)\t/* { dg-error \"too many 'at' clauses\" } */\n+#pragma omp error severity(fatal) severity(warning)\t/* { dg-error \"too many 'severity' clauses\" } */\n+#pragma omp error message(\"foo\") message(\"foo\")\t\t/* { dg-error \"too many 'message' clauses\" } */\n+#pragma omp error at(execution)\t\t\t/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+\n+struct S\n+{\n+  #pragma omp error at(execution) message(\"foo\")/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+  int s;\n+};\n+\n+int\n+foo (int i, int x, const char *msg)\n+{\n+  #pragma omp error message(msg)\t\t/* { dg-error \"'pragma omp error' encountered: <message unknown at compile time>\" } */\n+  if (x)\n+    #pragma omp error at(execution)\t\t/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+  i++;\n+  if (x)\n+    ;\n+  else\n+    #pragma omp error at(execution) severity(warning)\t/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+  i++;\n+  switch (0)\n+    #pragma omp error severity(fatal) at(execution)\t/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+    ;\n+  while (0)\n+    #pragma omp error at(execution)message(\"42 - 1\")\t/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+    i++;\n+  lab:\n+  #pragma omp error severity(warning) message(\"bar\") at(execution)\t/* { dg-error \"'#pragma omp error' with 'at\\\\\\(execution\\\\\\)' clause may only be used in compound statements\" } */\n+    i++;\n+  return i;\n+}"}, {"sha": "cd20845b634d7ca7ce48ba254d6c99e6a1413213", "filename": "gcc/testsuite/g++.dg/gomp/attrs-1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -109,9 +109,11 @@ baz (int d, int m, int i1, int i2, int p, int *idp, int s,\n \n void\n bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n-     int nte, int tl, int nth, int g, int nta, int fi, int pp, int *q, int *dd, int ntm)\n+     int nte, int tl, int nth, int g, int nta, int fi, int pp, int *q, int *dd, int ntm,\n+     const char *msg)\n {\n   [[omp::directive (nothing)]];\n+  [[omp::directive (error at (execution) severity (warning) message (msg))]];\n   [[omp::directive (for simd\n     private (p) firstprivate (f) lastprivate (l) linear (ll:1) reduction(+:r) schedule(static, 4) collapse(1) nowait\n     safelen(8) simdlen(4) aligned(q: 32) nontemporal(ntm) if(i1) order(concurrent) allocate (f))]]"}, {"sha": "35e2435cb74337051ab98f1836946fcf85402510", "filename": "gcc/testsuite/g++.dg/gomp/attrs-13.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-13.C?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile { target c++11 } }\n+\n+[[omp::directive(error)]];\t\t\t// { dg-error \"'pragma omp error' encountered\" }\n+[[omp::directive(error, at(compilation))]];\t// { dg-error \"'pragma omp error' encountered\" }\n+[[omp::directive(error severity(fatal))]];\t// { dg-error \"'pragma omp error' encountered\" }\n+[[omp::directive(error, message(\"my msg\"))]];\t// { dg-error \"'pragma omp error' encountered: my msg\" }\n+[[omp::directive(error severity(warning)message(\"another message\")at(compilation))]];\t// { dg-warning \"'pragma omp error' encountered: another message\" }\n+\n+int\n+foo (int i, int x)\n+{\n+  [[omp::directive(error)]];\t\t\t// { dg-error \"'pragma omp error' encountered\" }\n+  [[omp::directive(error, at(compilation))]];\t// { dg-error \"'pragma omp error' encountered\" }\n+  [[omp::directive(error severity(fatal))]];\t// { dg-error \"'pragma omp error' encountered\" }\n+  [[omp::directive(error, message(\"42 / 1\"))]];\t// { dg-error \"'pragma omp error' encountered: 42 / 1\" }\n+  [[omp::directive(error severity(warning) message(\"bar\") at(compilation))]];\t// { dg-warning \"'pragma omp error' encountered: bar\" }\n+  if (x)\n+    [[omp::directive(error)]];\t\t\t// { dg-error \"'pragma omp error' encountered\" }\n+  i++;\n+  if (x)\n+    ;\n+  else\n+    [[omp::directive(error at(compilation))]];\t// { dg-error \"'pragma omp error' encountered\" }\n+  i++;\n+  switch (0)\n+    [[omp::directive(error, severity(fatal))]];\t// { dg-error \"'pragma omp error' encountered\" }\n+  while (0)\n+    [[omp::directive(error, message(\"42 - 1\"))]];\t// { dg-error \"'pragma omp error' encountered: 42 - 1\" }\n+  i++;\n+  lab:\n+  [[omp::directive(error, severity(warning) message(\"bar\"), at(compilation))]];\t// { dg-warning \"'pragma omp error' encountered: bar\" }\n+  i++;\n+  return i;\n+}"}, {"sha": "5c54905576d1fe19b09ab1a27bce4179c4b216c1", "filename": "gcc/testsuite/g++.dg/gomp/attrs-2.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -109,9 +109,11 @@ baz (int d, int m, int i1, int i2, int p, int *idp, int s,\n \n void\n bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n-     int nte, int tl, int nth, int g, int nta, int fi, int pp, int *q, int *dd, int ntm)\n+     int nte, int tl, int nth, int g, int nta, int fi, int pp, int *q, int *dd, int ntm,\n+     const char *msg)\n {\n   [[omp::directive (nothing)]];\n+  [[omp::directive (error, at (execution), severity (warning), message (msg))]];\n   [[omp::directive (for simd,\n     private (p),firstprivate (f),lastprivate (l),linear (ll:1),reduction(+:r),schedule(static, 4),collapse(1),nowait,\n     safelen(8),simdlen(4),aligned(q: 32),nontemporal(ntm),if(i1),order(concurrent),allocate (f))]]"}, {"sha": "a636550bc0c1389bcb42a1b645d3e914ea20dc3d", "filename": "gcc/testsuite/g++.dg/gomp/error-1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ferror-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ferror-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ferror-1.C?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { target c++17 } }\n+\n+void\n+foo ()\n+{\n+  if constexpr (false)\n+    {\n+      #pragma omp error\t\t\t\t\t\t\t\t// { dg-bogus \"'pragma omp error' encountered\" }\n+    }\n+  else\n+    {\n+      #pragma omp error at(compilation) severity(warning) message(\"foo\")\t// { dg-warning \"'pragma omp error' encountered: foo\" }\n+    }\n+  if constexpr (true)\n+    {\n+      #pragma omp error message(\"bar\")\t\t\t\t\t\t// { dg-error \"'pragma omp error' encountered: bar\" }\n+    }\n+  else\n+    {\n+      #pragma omp error message(\"baz\")\t\t\t\t\t\t// { dg-bogus \"'pragma omp error' encountered\" }\n+    }\n+}\n+\n+template <typename T>\n+bool\n+bar (T x)\n+{\n+  #pragma omp error at(execution) message (x)\n+  return false;\n+}\n+\n+bool a = bar (\"foo\");\n+\n+template <typename T>\n+bool\n+baz (T x)\n+{\n+  #pragma omp error at(execution) message (x)\t\t\t\t\t// { dg-error \"could not convert\" }\n+  return false;\n+}\n+\n+bool b = baz (L\"foo\");"}, {"sha": "9b69a4b33fe373999ba3f66484ecb6f1409a8c8a", "filename": "libgomp/error.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ferror.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -89,3 +89,34 @@ gomp_fatal (const char *fmt, ...)\n   gomp_vfatal (fmt, list);\n   va_end (list);\n }\n+\n+void\n+GOMP_warning (const char *msg, size_t msglen)\n+{\n+  if (msg && msglen == (size_t) -1)\n+    gomp_error (\"error directive encountered: %s\", msg);\n+  else if (msg)\n+    {\n+      fputs (\"\\nlibgomp: error directive encountered: \", stderr);\n+      fwrite (msg, 1, msglen, stderr);\n+      fputc ('\\n', stderr);\n+    }\n+  else\n+    gomp_error (\"error directive encountered\");\n+}\n+\n+void\n+GOMP_error (const char *msg, size_t msglen)\n+{\n+  if (msg && msglen == (size_t) -1)\n+    gomp_fatal (\"fatal error: error directive encountered: %s\", msg);\n+  else if (msg)\n+    {\n+      fputs (\"\\nlibgomp: fatal error: error directive encountered: \", stderr);\n+      fwrite (msg, 1, msglen, stderr);\n+      fputc ('\\n', stderr);\n+      exit (EXIT_FAILURE);\n+    }\n+  else\n+    gomp_fatal (\"fatal error: error directive encountered\");\n+}"}, {"sha": "e0c813c2716d824d7bf0aa1c5694ad29e00fe585", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -382,7 +382,9 @@ GOMP_5.0.1 {\n \n GOMP_5.1 {\n   global:\n+\tGOMP_error;\n \tGOMP_scope_start;\n+\tGOMP_warning;\n } GOMP_5.0.1;\n \n OACC_2.0 {"}, {"sha": "40e5cf0490725f3ca7f737f7620aed81bc74a748", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -366,6 +366,11 @@ extern void GOMP_teams_reg (void (*) (void *), void *, unsigned, unsigned,\n extern void *GOMP_alloc (size_t, size_t, uintptr_t);\n extern void GOMP_free (void *, uintptr_t);\n \n+/* error.c */\n+\n+extern void GOMP_warning (const char *, size_t);\n+extern void GOMP_error (const char *, size_t);\n+\n /* oacc-async.c */\n \n extern void GOACC_wait (int, int, ...);"}, {"sha": "5f454c1adaa6644fa4fc61c880d5893a5c2da6e7", "filename": "libgomp/testsuite/libgomp.c-c++-common/error-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ferror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ferror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ferror-1.c?ref=0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-shouldfail \"error directive\" } */\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+void abort ();\n+\n+int\n+foo (int i, int x)\n+{\n+  if (x)\n+    #pragma omp error severity(warning)\t/* { dg-warning \"'pragma omp error' encountered\" } */\n+    i++;\n+  if (!x)\n+    ;\n+  else\n+    #pragma omp error severity(warning)\t/* { dg-warning \"'pragma omp error' encountered\" } */\n+    i += 2;\n+  switch (0)\n+    #pragma omp error severity(warning)\t/* { dg-warning \"'pragma omp error' encountered\" } */\n+    {\n+    default:\n+      break;\n+    }\n+  while (0)\n+    #pragma omp error message(\"42 - 1\")\tseverity (warning) /* { dg-warning \"'pragma omp error' encountered: 42 - 1\" } */\n+    i += 4;\n+  lab:\n+  #pragma omp error severity(warning) message(\"bar\") at(compilation)\t/* { dg-warning \"'pragma omp error' encountered: bar\" } */\n+    i += 8;\n+  return i;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (5, 0) != 13 || foo (6, 1) != 17)\n+    abort ();\n+  #pragma omp error at (execution) severity (warning)\n+  const char *msg = \"my message\" + 2;\n+  #pragma omp error at (execution) severity (warning) message (msg + 1)\n+  #pragma omp error at (execution) severity (fatal) message (msg - 2)\n+  #pragma omp error at (execution) severity (warning) message (\"foobar\")\n+  return 0;\n+}\n+\n+/* { dg-output \"libgomp: error directive encountered(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" } */\n+/* { dg-output \"libgomp: error directive encountered: message(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" } */\n+/* { dg-output \"libgomp: fatal error: error directive encountered: my message\" } */"}]}