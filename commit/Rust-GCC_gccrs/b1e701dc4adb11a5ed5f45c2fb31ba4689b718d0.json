{"sha": "b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "node_id": "C_kwDOANBUbNoAKGIxZTcwMWRjNGFkYjExYTVlZDVmNDVjMmZiMzFiYTQ2ODliNzE4ZDA", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-01-04T21:36:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-01-05T12:13:56Z"}, "message": "[c++] Adjust mark used member in instantiated class scope\n\nThe fix for PR97966 caused a regression with (non-template) member\nfunctions of template classes.  We need to mark them used in the\ninstantiated class's scope, rather than the scope we were in before\ninstantiating, as the latter may itself be in template and change the\nbehaviour of marking a function as used.\n\n\tgcc/cp/\n\t* pt.c (instantiate_class_template_1): Process attribute((used)) set\n\tin class's context.\n\tgcc/testsuite/\n\t* g++.dg/template/attr-used.C: New.", "tree": {"sha": "6fcf71bb828c4c3bbcac68230ab96813ef6071de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fcf71bb828c4c3bbcac68230ab96813ef6071de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2da9e26f5c0f04d48872938eff130e2028e75d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2da9e26f5c0f04d48872938eff130e2028e75d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2da9e26f5c0f04d48872938eff130e2028e75d3"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "0fa4a162354e1502fac7ddd59167e3253dac6ef3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "patch": "@@ -12277,6 +12277,14 @@ instantiate_class_template_1 (tree type)\n \n   perform_instantiation_time_access_checks (pattern, args);\n   perform_deferred_access_checks (tf_warning_or_error);\n+\n+  /* Now that we've gone through all the members, instantiate those\n+     marked with attribute used.  We must do this in the context of\n+     the class -- not the context we pushed from, as that might be\n+     inside a template and change the behaviour of mark_used.  */\n+  for (tree x : used)\n+    mark_used (x);\n+\n   pop_nested_class ();\n   maximum_field_alignment = saved_maximum_field_alignment;\n   if (!fn_context)\n@@ -12290,11 +12298,6 @@ instantiate_class_template_1 (tree type)\n   if (TYPE_CONTAINS_VPTR_P (type) && CLASSTYPE_KEY_METHOD (type))\n     vec_safe_push (keyed_classes, type);\n \n-  /* Now that we've gone through all the members, instantiate those\n-     marked with attribute used.  */\n-  for (tree x : used)\n-    mark_used (x);\n-\n   return type;\n }\n "}, {"sha": "e12bf4caa3f787ffed3dc927060f52ac96fb91dc", "filename": "gcc/testsuite/g++.dg/template/attr-used.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fattr-used.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fattr-used.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fattr-used.C?ref=b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+template<typename T> struct X {\n+  void g () {}\n+  void f () __attribute__((__used__)) {}\n+};\n+\n+extern X<int> x; // X<int> incomplete here\n+\n+template <typename T>\n+void Frob (T t) {\n+  x.g(); // X<int> completed here, X<int>::f's body marked for instantiation\n+}\n+\n+// Make sure X<int>::f is emitted\n+// { dg-final { scan-assembler \"_ZN1XIiE1fEv:\" } }"}]}