{"sha": "216cc294ef714ffc4634e7ac6139550515acae3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2Y2MyOTRlZjcxNGZmYzQ2MzRlN2FjNjEzOTU1MDUxNWFjYWUzYQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "hiraditya@msn.com", "date": "2015-10-06T15:56:09Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-10-06T15:56:09Z"}, "message": "Early exit to avoid redundant computations\n\nAnalyze only those bbs which are outside the region for uses which might be\ndefined inside the region. This is intended to improve the compile time. This\nalgorithm may be further improved by only looking at the successors of region as\nthese regions are sese. Added FIXMEs to make this improvement in future.\n\nPasses regtest and bootstrap on x86_64.\n\ngcc/ChangeLog:\n\n2015-10-05  Aditya Kumar  <hiraditya@msn.com>\n\n        * graphite-sese-to-poly.c (build_loop_iteration_domains): Only loops\n        which are in this region are passed so gcc_assert and remove redundant\n        computation.\n        * sese.c (sese_build_liveouts): Pass only those bbs which are not in region.\n        (sese_bad_liveouts_use): Only BBs which are not in region are passed so\n        gcc_assert on that and remove unnecessary computation.\n        (sese_build_liveouts_use): Same.\n\nFrom-SVN: r228529", "tree": {"sha": "821a193faee8968c0ce737e35bd1e68ee7355f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821a193faee8968c0ce737e35bd1e68ee7355f15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/216cc294ef714ffc4634e7ac6139550515acae3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216cc294ef714ffc4634e7ac6139550515acae3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216cc294ef714ffc4634e7ac6139550515acae3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216cc294ef714ffc4634e7ac6139550515acae3a/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4dc590c8878aaae1cdf5db6cbf84f8546b6511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4dc590c8878aaae1cdf5db6cbf84f8546b6511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4dc590c8878aaae1cdf5db6cbf84f8546b6511"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "002e7f79733ecc4c5e2d9bd9c7605faa7f57bcc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216cc294ef714ffc4634e7ac6139550515acae3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216cc294ef714ffc4634e7ac6139550515acae3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=216cc294ef714ffc4634e7ac6139550515acae3a", "patch": "@@ -1,3 +1,13 @@\n+2015-10-05  Aditya Kumar  <hiraditya@msn.com>\n+\n+\t* graphite-sese-to-poly.c (build_loop_iteration_domains): Only loops\n+\twhich are in this region are passed so gcc_assert and remove redundant\n+\tcomputation.\n+\t* sese.c (sese_build_liveouts): Pass only those bbs which are not in region.\n+\t(sese_bad_liveouts_use): Only BBs which are not in region are passed so\n+\tgcc_assert on that and remove unnecessary computation.\n+\t(sese_build_liveouts_use): Same.\n+\n 2015-10-05  Aditya Kumar  <aditya.k7@samsung.com>\n \n \t* graphite-dependences.c (scop_get_reads): Renamed scop->context"}, {"sha": "d0c7eb44bf20ce17085bf3becfd7131b1b338ec1", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216cc294ef714ffc4634e7ac6139550515acae3a/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216cc294ef714ffc4634e7ac6139550515acae3a/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=216cc294ef714ffc4634e7ac6139550515acae3a", "patch": "@@ -595,6 +595,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n \n   tree nb_iters = number_of_latch_executions (loop);\n   sese region = SCOP_REGION (scop);\n+  gcc_assert (loop_in_sese_p (loop, region));\n \n   isl_set *inner = isl_set_copy (outer);\n   int pos = isl_set_dim (outer, isl_dim_set);\n@@ -679,7 +680,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n   else\n     gcc_unreachable ();\n \n-  if (loop->inner && loop_in_sese_p (loop->inner, region))\n+  if (loop->inner)\n     build_loop_iteration_domains (scop, loop->inner, nb + 1,\n \t\t\t\t  isl_set_copy (inner), doms);\n "}, {"sha": "6f01ca6b5fb6dba4b38b8590f0fb2ef85b47cbc5", "filename": "gcc/sese.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216cc294ef714ffc4634e7ac6139550515acae3a/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216cc294ef714ffc4634e7ac6139550515acae3a/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=216cc294ef714ffc4634e7ac6139550515acae3a", "patch": "@@ -134,20 +134,16 @@ static void\n sese_build_liveouts_use (sese region, bitmap liveouts, basic_block bb,\n \t\t\t tree use)\n {\n-  unsigned ver;\n-  basic_block def_bb;\n-\n+  gcc_assert (!bb_in_sese_p (bb, region));\n   if (TREE_CODE (use) != SSA_NAME)\n     return;\n \n-  ver = SSA_NAME_VERSION (use);\n-  def_bb = gimple_bb (SSA_NAME_DEF_STMT (use));\n+  basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (use));\n \n-  if (!def_bb\n-      || !bb_in_sese_p (def_bb, region)\n-      || bb_in_sese_p (bb, region))\n+  if (!def_bb || !bb_in_sese_p (def_bb, region))\n     return;\n \n+  unsigned ver = SSA_NAME_VERSION (use);\n   bitmap_set_bit (liveouts, ver);\n }\n \n@@ -188,24 +184,21 @@ static bool\n sese_bad_liveouts_use (sese region, bitmap liveouts, basic_block bb,\n \t\t       tree use)\n {\n-  unsigned ver;\n-  basic_block def_bb;\n+  gcc_assert (!bb_in_sese_p (bb, region));\n \n   if (TREE_CODE (use) != SSA_NAME)\n     return false;\n \n-  ver = SSA_NAME_VERSION (use);\n+  unsigned ver = SSA_NAME_VERSION (use);\n \n   /* If it's in liveouts, the variable will get a new PHI node, and\n      the debug use will be properly adjusted.  */\n   if (bitmap_bit_p (liveouts, ver))\n     return false;\n \n-  def_bb = gimple_bb (SSA_NAME_DEF_STMT (use));\n+  basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (use));\n \n-  if (!def_bb\n-      || !bb_in_sese_p (def_bb, region)\n-      || bb_in_sese_p (bb, region))\n+  if (!def_bb || !bb_in_sese_p (def_bb, region))\n     return false;\n \n   return true;\n@@ -247,11 +240,16 @@ sese_build_liveouts (sese region, bitmap liveouts)\n {\n   basic_block bb;\n \n+  /* FIXME: We could start iterating form the successor of sese.  */\n   FOR_EACH_BB_FN (bb, cfun)\n-    sese_build_liveouts_bb (region, liveouts, bb);\n+    if (!bb_in_sese_p (bb, region))\n+      sese_build_liveouts_bb (region, liveouts, bb);\n+\n+  /* FIXME: We could start iterating form the successor of sese.  */\n   if (MAY_HAVE_DEBUG_STMTS)\n     FOR_EACH_BB_FN (bb, cfun)\n-      sese_reset_debug_liveouts_bb (region, liveouts, bb);\n+      if (!bb_in_sese_p (bb, region))\n+\tsese_reset_debug_liveouts_bb (region, liveouts, bb);\n }\n \n /* Builds a new SESE region from edges ENTRY and EXIT.  */"}]}