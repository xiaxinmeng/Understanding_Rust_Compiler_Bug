{"sha": "04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmMzA3Y2JiOWUwNjEwYjJlM2M3MDAyOWVlNmJmZGJkN2I4YjlkZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-19T18:28:48Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-21T10:17:30Z"}, "message": "aarch64: Add SVE support for -mlow-precision-div\n\nSVE was missing support for -mlow-precision-div, which meant that\n-march=armv8.2-a+sve -mlow-precision-div could cause a performance\nregression compared to -march=armv8.2-a -mlow-precision-div.\n\nI ended up doing this much later than originally intended, sorry...\n\n2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_emit_mult): New function.\n\t(aarch64_emit_approx_div): Add SVE support.  Use aarch64_emit_mult\n\tinstead of emitting multiplication instructions directly.\n\t* config/aarch64/iterators.md (SVE_COND_FP_BINARY_OPTAB): New iterator.\n\t* config/aarch64/aarch64-sve.md (div<mode>3, @aarch64_frecpe<mode>)\n\t(@aarch64_frecps<mode>): New expanders.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/recip_1.c: New test.\n\t* gcc.target/aarch64/sve/recip_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/recip_2.c: Likewise.\n\t* gcc.target/aarch64/sve/recip_2_run.c: Likewise.", "tree": {"sha": "dedb8e3ec29d23564e4cd873b789139102f439a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dedb8e3ec29d23564e4cd873b789139102f439a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87778ed097f24a0bf394c0255019547008c3479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87778ed097f24a0bf394c0255019547008c3479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87778ed097f24a0bf394c0255019547008c3479"}], "stats": {"total": 211, "additions": 207, "deletions": 4}, "files": [{"sha": "4d161ca2cd1d58f1122517de73c4a829bc5f618f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -1,3 +1,12 @@\n+2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_emit_mult): New function.\n+\t(aarch64_emit_approx_div): Add SVE support.  Use aarch64_emit_mult\n+\tinstead of emitting multiplication instructions directly.\n+\t* config/aarch64/iterators.md (SVE_COND_FP_BINARY_OPTAB): New iterator.\n+\t* config/aarch64/aarch64-sve.md (div<mode>3, @aarch64_frecpe<mode>)\n+\t(@aarch64_frecps<mode>): New expanders.\n+\n 2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (AARCH64_APPROX_MODE): Operate"}, {"sha": "e3b1da89c1ae30bae34dfd1860c5cf504c7f6b7e", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -99,6 +99,7 @@\n ;; ---- [FP] Subtraction\n ;; ---- [FP] Absolute difference\n ;; ---- [FP] Multiplication\n+;; ---- [FP] Division\n ;; ---- [FP] Binary logical operations\n ;; ---- [FP] Sign copying\n ;; ---- [FP] Maximum and minimum\n@@ -4719,7 +4720,7 @@\n \t   (const_int SVE_RELAXED_GP)\n \t   (match_operand:SVE_FULL_F 1 \"<sve_pred_fp_rhs1_operand>\")\n \t   (match_operand:SVE_FULL_F 2 \"<sve_pred_fp_rhs2_operand>\")]\n-\t  SVE_COND_FP_BINARY))]\n+\t  SVE_COND_FP_BINARY_OPTAB))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -5455,6 +5456,47 @@\n   \"fmul\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>[%3]\"\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Division\n+;; -------------------------------------------------------------------------\n+;; The patterns in this section are synthetic.\n+;; -------------------------------------------------------------------------\n+\n+(define_expand \"div<mode>3\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_dup 3)\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:SVE_FULL_F 1 \"nonmemory_operand\")\n+\t   (match_operand:SVE_FULL_F 2 \"register_operand\")]\n+\t  UNSPEC_COND_FDIV))]\n+  \"TARGET_SVE\"\n+  {\n+    if (aarch64_emit_approx_div (operands[0], operands[1], operands[2]))\n+      DONE;\n+\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n+(define_expand \"@aarch64_frecpe<mode>\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_operand:SVE_FULL_F 1 \"register_operand\")]\n+\t  UNSPEC_FRECPE))]\n+  \"TARGET_SVE\"\n+)\n+\n+(define_expand \"@aarch64_frecps<mode>\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_operand:SVE_FULL_F 1 \"register_operand\")\n+\t   (match_operand:SVE_FULL_F 2 \"register_operand\")]\n+\t  UNSPEC_FRECPS))]\n+  \"TARGET_SVE\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Binary logical operations\n ;; -------------------------------------------------------------------------"}, {"sha": "c1bbc4917c74ea5d636d16b30d104277eb8d2943", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -12739,6 +12739,25 @@ aarch64_builtin_reciprocal (tree fndecl)\n   gcc_unreachable ();\n }\n \n+/* Emit code to perform the floating-point operation:\n+\n+     DST = SRC1 * SRC2\n+\n+   where all three operands are already known to be registers.\n+   If the operation is an SVE one, PTRUE is a suitable all-true\n+   predicate.  */\n+\n+static void\n+aarch64_emit_mult (rtx dst, rtx ptrue, rtx src1, rtx src2)\n+{\n+  if (ptrue)\n+    emit_insn (gen_aarch64_pred (UNSPEC_COND_FMUL, GET_MODE (dst),\n+\t\t\t\t dst, ptrue, src1, src2,\n+\t\t\t\t gen_int_mode (SVE_RELAXED_GP, SImode)));\n+  else\n+    emit_set_insn (dst, gen_rtx_MULT (GET_MODE (dst), src1, src2));\n+}\n+\n /* Emit instruction sequence to compute either the approximate square root\n    or its approximate reciprocal, depending on the flag RECP, and return\n    whether the sequence was emitted or not.  */\n@@ -12857,6 +12876,10 @@ aarch64_emit_approx_div (rtx quo, rtx num, rtx den)\n   if (!TARGET_SIMD && VECTOR_MODE_P (mode))\n     return false;\n \n+  rtx pg = NULL_RTX;\n+  if (aarch64_sve_mode_p (mode))\n+    pg = aarch64_ptrue_reg (aarch64_sve_pred_mode (mode));\n+\n   /* Estimate the approximate reciprocal.  */\n   rtx xrcp = gen_reg_rtx (mode);\n   emit_insn (gen_aarch64_frecpe (mode, xrcp, den));\n@@ -12876,19 +12899,19 @@ aarch64_emit_approx_div (rtx quo, rtx num, rtx den)\n       emit_insn (gen_aarch64_frecps (mode, xtmp, xrcp, den));\n \n       if (iterations > 0)\n-\temit_set_insn (xrcp, gen_rtx_MULT (mode, xrcp, xtmp));\n+\taarch64_emit_mult (xrcp, pg, xrcp, xtmp);\n     }\n \n   if (num != CONST1_RTX (mode))\n     {\n       /* As the approximate reciprocal of DEN is already calculated, only\n \t calculate the approximate division when NUM is not 1.0.  */\n       rtx xnum = force_reg (mode, num);\n-      emit_set_insn (xrcp, gen_rtx_MULT (mode, xrcp, xnum));\n+      aarch64_emit_mult (xrcp, pg, xrcp, xnum);\n     }\n \n   /* Finalize the approximation.  */\n-  emit_set_insn (quo, gen_rtx_MULT (mode, xrcp, xtmp));\n+  aarch64_emit_mult (quo, pg, xrcp, xtmp);\n   return true;\n }\n "}, {"sha": "548ee0f51e87621f7326708c87d6ce4f1a506d98", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -2291,6 +2291,17 @@\n \t\t\t\t\t UNSPEC_COND_FMULX\n \t\t\t\t\t UNSPEC_COND_FSUB])\n \n+;; Same as SVE_COND_FP_BINARY, but without codes that have a dedicated\n+;; <optab><mode>3 expander.\n+(define_int_iterator SVE_COND_FP_BINARY_OPTAB [UNSPEC_COND_FADD\n+\t\t\t\t\t       UNSPEC_COND_FMAX\n+\t\t\t\t\t       UNSPEC_COND_FMAXNM\n+\t\t\t\t\t       UNSPEC_COND_FMIN\n+\t\t\t\t\t       UNSPEC_COND_FMINNM\n+\t\t\t\t\t       UNSPEC_COND_FMUL\n+\t\t\t\t\t       UNSPEC_COND_FMULX\n+\t\t\t\t\t       UNSPEC_COND_FSUB])\n+\n (define_int_iterator SVE_COND_FP_BINARY_INT [UNSPEC_COND_FSCALE])\n \n (define_int_iterator SVE_COND_FP_ADD [UNSPEC_COND_FADD])"}, {"sha": "936260e4ae796604eb337e298ba265d0c0f18815", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -1,3 +1,10 @@\n+2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/recip_1.c: New test.\n+\t* gcc.target/aarch64/sve/recip_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/recip_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/recip_2_run.c: Likewise.\n+\n 2020-02-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/93801"}, {"sha": "c9d470f5c03fc291822c0ee9628be10833df9262", "filename": "gcc/testsuite/gcc.target/aarch64/sve/recip_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_1.c?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-options \"-Ofast -mlow-precision-div\" } */\n+\n+#define DEF_LOOP(TYPE)\t\t\t\\\n+  void\t\t\t\t\t\\\n+  test_##TYPE (TYPE *x, int n)\t\t\\\n+  {\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\\\n+      x[i] = (TYPE) 1 / x[i];\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\\\n+  T (_Float16)\t\t\\\n+  T (float)\t\t\\\n+  T (double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-not {\\tfrecpe\\tz[0-9]+\\.h} } } */\n+/* { dg-final { scan-assembler-not {\\tfrecps\\tz[0-9]+\\.h} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecpe\\tz[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecps\\tz[0-9]+\\.s} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecpe\\tz[0-9]+\\.d} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecps\\tz[0-9]+\\.d} 2 } } */"}, {"sha": "b232b88530a1521ee785562404f85fe79dcfa567", "filename": "gcc/testsuite/gcc.target/aarch64/sve/recip_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_1_run.c?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-Ofast -mlow-precision-div\" } */\n+\n+#include \"recip_1.c\"\n+\n+#define N 77\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE a[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      a[i] = i + 1;\t\t\t\t\\\n+    test_##TYPE (a, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tdouble diff = a[i] - 1.0 / (i + 1);\t\\\n+\tif (__builtin_fabs (diff) > 0x1.0p-8)\t\\\n+\t  __builtin_abort ();\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}, {"sha": "f308a6b787457f245143e0ab002dcd082116e6da", "filename": "gcc/testsuite/gcc.target/aarch64/sve/recip_2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_2.c?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-options \"-Ofast -mlow-precision-div\" } */\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  test_##TYPE (TYPE *restrict x, TYPE *restrict y, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      x[i] /= y[i];\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\\\n+  T (_Float16)\t\t\\\n+  T (float)\t\t\\\n+  T (double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-not {\\tfrecpe\\tz[0-9]+\\.h} } } */\n+/* { dg-final { scan-assembler-not {\\tfrecps\\tz[0-9]+\\.h} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecpe\\tz[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecps\\tz[0-9]+\\.s} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecpe\\tz[0-9]+\\.d} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrecps\\tz[0-9]+\\.d} 2 } } */"}, {"sha": "25a31e11f550f21f38d7c4fcb6b066e187b6d5f4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/recip_2_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frecip_2_run.c?ref=04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-Ofast -mlow-precision-div\" } */\n+\n+#include \"recip_2.c\"\n+\n+#define N 77\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = i + 11;\t\t\t\t\t\\\n+\tb[i] = i + 1;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    test_##TYPE (a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdouble diff = a[i] - (i + 11.0) / (i + 1);\t\\\n+\tif (__builtin_fabs (diff) > 0x1.0p-8)\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}]}