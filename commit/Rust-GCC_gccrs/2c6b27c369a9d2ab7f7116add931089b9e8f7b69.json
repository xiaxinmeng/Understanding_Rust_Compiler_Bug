{"sha": "2c6b27c369a9d2ab7f7116add931089b9e8f7b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM2YjI3YzM2OWE5ZDJhYjdmNzExNmFkZDkzMTA4OWI5ZThmN2I2OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-05-17T15:23:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-05-17T15:23:12Z"}, "message": "i386.c (construct_container): Do not produce BLKmode registers.\n\n\t* i386.c (construct_container): Do not produce BLKmode registers.\n\t(classify_argument): Properly compute alignment of complex types.\n\nFrom-SVN: r81937", "tree": {"sha": "01b157cced5ed33a1a7baaf1724c5b88164500ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b157cced5ed33a1a7baaf1724c5b88164500ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c6b27c369a9d2ab7f7116add931089b9e8f7b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c6b27c369a9d2ab7f7116add931089b9e8f7b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c6b27c369a9d2ab7f7116add931089b9e8f7b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c6b27c369a9d2ab7f7116add931089b9e8f7b69/comments", "author": null, "committer": null, "parents": [{"sha": "044b389201cf912c8b94e7e228cb136493d967ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044b389201cf912c8b94e7e228cb136493d967ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044b389201cf912c8b94e7e228cb136493d967ca"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "906b4d5a6a2ce15a8961b4f26339835599268fc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c6b27c369a9d2ab7f7116add931089b9e8f7b69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c6b27c369a9d2ab7f7116add931089b9e8f7b69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c6b27c369a9d2ab7f7116add931089b9e8f7b69", "patch": "@@ -1,3 +1,8 @@\n+2004-05-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (construct_container): Do not produce BLKmode registers.\n+\t(classify_argument): Properly compute alignment of complex types.\n+\n 2004-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/15084"}, {"sha": "ad0407d762384df2cdcdf5058e3c58e3f28c21e0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c6b27c369a9d2ab7f7116add931089b9e8f7b69/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c6b27c369a9d2ab7f7116add931089b9e8f7b69/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2c6b27c369a9d2ab7f7116add931089b9e8f7b69", "patch": "@@ -2246,6 +2246,8 @@ classify_argument (enum machine_mode mode, tree type,\n \tmode_alignment = 128;\n       else if (mode == XCmode)\n \tmode_alignment = 256;\n+      if (COMPLEX_MODE_P (mode))\n+\tmode_alignment /= 2;\n       /* Misaligned fields are always returned in memory.  */\n       if (bit_offset % mode_alignment)\n \treturn 0;\n@@ -2423,7 +2425,8 @@ construct_container (enum machine_mode mode, tree type, int in_return,\n       default:\n \tabort ();\n       }\n-  if (n == 2 && class[0] == X86_64_SSE_CLASS && class[1] == X86_64_SSEUP_CLASS)\n+  if (n == 2 && class[0] == X86_64_SSE_CLASS && class[1] == X86_64_SSEUP_CLASS\n+      && mode != BLKmode)\n     return gen_rtx_REG (mode, SSE_REGNO (sse_regno));\n   if (n == 2\n       && class[0] == X86_64_X87_CLASS && class[1] == X86_64_X87UP_CLASS)\n@@ -2435,7 +2438,8 @@ construct_container (enum machine_mode mode, tree type, int in_return,\n     return gen_rtx_REG (mode, intreg[0]);\n   if (n == 4\n       && class[0] == X86_64_X87_CLASS && class[1] == X86_64_X87UP_CLASS\n-      && class[2] == X86_64_X87_CLASS && class[3] == X86_64_X87UP_CLASS)\n+      && class[2] == X86_64_X87_CLASS && class[3] == X86_64_X87UP_CLASS\n+      && mode != BLKmode)\n     return gen_rtx_REG (XCmode, FIRST_STACK_REG);\n \n   /* Otherwise figure out the entries of the PARALLEL.  */"}]}