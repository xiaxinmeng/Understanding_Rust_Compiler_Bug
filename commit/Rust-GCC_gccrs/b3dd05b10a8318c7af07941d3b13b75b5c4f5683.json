{"sha": "b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkZDA1YjEwYTgzMThjN2FmMDc5NDFkM2IxM2I3NWI1YzRmNTY4Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-05-28T23:34:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-05-28T23:34:39Z"}, "message": "re PR c++/15471 (Incorrect member pointer offsets in anonymous structs/unions)\n\n\tPR c++/15471\n\t* typeck.c (unary_complex_lvalue): Use context_for_name_lookup\n\twhen determining the scope to use for a pointer to member.\n\t(lookup_anon_field): Give it external linkage.\n\t* cp-tree.h (lookup_anon_field): Declare it.\n\t* expr.c (cplus_expand_constant): Use it.\n\nFrom-SVN: r82401", "tree": {"sha": "fc43bc68b07b9156872a885e6b8eb0ad184a0c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc43bc68b07b9156872a885e6b8eb0ad184a0c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/comments", "author": null, "committer": null, "parents": [{"sha": "5182fafe486b98e95bd51d2d665a2a18f397fbe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5182fafe486b98e95bd51d2d665a2a18f397fbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5182fafe486b98e95bd51d2d665a2a18f397fbe4"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "73d34b8c1ebcee1fff7950f909e46aa4929af8e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "patch": "@@ -16,6 +16,9 @@\n \tPR c++/15471\n \t* typeck.c (unary_complex_lvalue): Use context_for_name_lookup\n \twhen determining the scope to use for a pointer to member.\n+\t(lookup_anon_field): Give it external linkage.\n+\t* cp-tree.h (lookup_anon_field): Declare it.\n+\t* expr.c (cplus_expand_constant): Use it.\n \n 2004-05-28  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "8b4e7f7af15870bc0c296372b71ccdd995e8ad31", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "patch": "@@ -4243,6 +4243,7 @@ extern tree build_ptrmemfunc_access_expr       (tree, tree);\n extern tree build_address                       (tree);\n extern tree build_nop                           (tree, tree);\n extern tree non_reference                       (tree);\n+extern tree lookup_anon_field                   (tree, tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "466d984642b9bb887689b35ca9753a2cf161f2ba", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "patch": "@@ -51,8 +51,21 @@ cplus_expand_constant (tree cst)\n \tmember = PTRMEM_CST_MEMBER (cst);\n \n \tif (TREE_CODE (member) == FIELD_DECL) \n-\t  /* Find the offset for the field.  */\n-\t  cst = fold (build_nop (type, byte_position (member)));\n+\t  {\n+\t    /* Find the offset for the field.  */\n+\t    cst = byte_position (member);\n+\t    while (!same_type_p (DECL_CONTEXT (member),\n+\t\t\t\t TYPE_PTRMEM_CLASS_TYPE (type)))\n+\t      {\n+\t\t/* The MEMBER must have been nestled within an\n+\t\t   anonymous aggregate contained in TYPE.  Find the\n+\t\t   anonymous aggregate.  */\n+\t\tmember = lookup_anon_field (TYPE_PTRMEM_CLASS_TYPE (type),\n+\t\t\t\t\t    DECL_CONTEXT (member));\n+\t\tcst = size_binop (PLUS_EXPR, cst, byte_position (member));\n+\t      }\n+\t    cst = fold (build_nop (type, cst));\n+\t  }\n \telse\n \t  {\n \t    tree delta;"}, {"sha": "527134d1493ae56f8356757bef37f346be22d123", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd05b10a8318c7af07941d3b13b75b5c4f5683/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "patch": "@@ -54,7 +54,6 @@ static int comp_ptr_ttypes_const (tree, tree);\n static bool comp_except_types (tree, tree, bool);\n static bool comp_array_types (tree, tree, bool);\n static tree common_base_type (tree, tree);\n-static tree lookup_anon_field (tree, tree);\n static tree pointer_diff (tree, tree, tree);\n static tree get_delta_difference (tree, tree, int);\n static void casts_away_constness_r (tree *, tree *);\n@@ -1517,7 +1516,7 @@ rationalize_conditional_expr (enum tree_code code, tree t)\n    anonymous unions can nest, we must also search all anonymous unions\n    that are directly reachable.  */\n \n-static tree\n+tree\n lookup_anon_field (tree t, tree type)\n {\n   tree field;"}]}