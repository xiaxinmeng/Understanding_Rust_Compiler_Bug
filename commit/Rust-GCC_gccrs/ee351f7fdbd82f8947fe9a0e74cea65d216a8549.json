{"sha": "ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzNTFmN2ZkYmQ4MmY4OTQ3ZmU5YTBlNzRjZWE2NWQyMTZhODU0OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-16T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-16T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "4a3c8c3aa21a5b589d7755293ab84fc89ec68586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a3c8c3aa21a5b589d7755293ab84fc89ec68586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/comments", "author": null, "committer": null, "parents": [{"sha": "da879e01ecd35737c18be1da3324f4560aba1961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da879e01ecd35737c18be1da3324f4560aba1961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da879e01ecd35737c18be1da3324f4560aba1961"}], "stats": {"total": 209, "additions": 208, "deletions": 1}, "files": [{"sha": "ff0fc066944b95a1b4404740273303b8349a8305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,31 @@\n+2021-04-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Other params don't use it, remove it.\n+\n+2021-04-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-builder.h: Add deprecation note.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/98852\n+\t* attribs.h (restrict_type_identity_attributes_to): Declare.\n+\t* attribs.c (restrict_type_identity_attributes_to): New function.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c/98852\n+\t* attribs.h (affects_type_identity_attributes): Declare.\n+\t* attribs.c (remove_attributes_matching): New function.\n+\t(affects_type_identity_attributes): Likewise.\n+\n+2021-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100056\n+\t* config/aarch64/aarch64.md (*<LOGICAL:optab>_<SHIFT:optab><mode>3):\n+\tAdd combine splitters for *<LOGICAL:optab>_ashl<mode>3 with\n+\tZERO_EXTEND, SIGN_EXTEND or AND.\n+\n 2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/99929"}, {"sha": "e74bf2b4f1c5d8c75ab21a51557f24c09b83231d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1 +1 @@\n-20210415\n+20210416"}, {"sha": "cf7415be61784650e574b76df6133f8452fccc20", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,15 @@\n+2021-04-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/99420\n+\tPR c/99972\n+\t* c-decl.c (pushdecl): Always propagate type attribute.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c/98852\n+\t* c-typeck.c (c_common_type): Do not drop attributes that\n+\taffect type identity.\n+\n 2021-04-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/99990"}, {"sha": "b5c21bf113d8fafd7a0d4c9ff5570e41ab8b98a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,30 @@\n+2021-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/80456\n+\t* call.c (build_new_method_call_1): Check again for side-effects\n+\twith a volatile object.\n+\n+2021-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100101\n+\tPR c++/99583\n+\t* pt.c (find_parameter_packs_r) [FUNCTION_TYPE]: Walk into\n+\tTYPE_RAISES_EXCEPTIONS here.\n+\t* tree.c (cp_walk_subtrees): Not here.\n+\n+2021-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100091\n+\tPR c++/99478\n+\t* parser.c (cp_parser_default_type_template_argument): Set\n+\tparser->local_variables_forbidden_p.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/98852\n+\t* typeck.c (merge_type_attributes_from): New function.\n+\t(cp_common_type): Use it for vector types.\n+\n 2021-04-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100078"}, {"sha": "bbf70a6cf0c3eb093578e2159d8770caa7d22cc7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,32 @@\n+2021-04-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/99307\n+\t* symbol.c: Remove trailing white space.\n+\t* trans-array.c (gfc_trans_create_temp_array): Create a class\n+\ttemporary for class expressions and assign the new descriptor\n+\tto the data field.\n+\t(build_class_array_ref): If the class expr can be extracted,\n+\tthen use that for 'decl'. Class function results are reliably\n+\thandled this way. Call gfc_find_and_cut_at_last_class_ref to\n+\teliminate largely redundant code. Remove dead code and recast\n+\tthe rest of the code to extract 'decl' for remaining cases.\n+\tCall gfc_build_spanned_array_ref.\n+\t(gfc_alloc_allocatable_for_assignment): Use class descriptor\n+\telement length for 'elemsize1'. Eliminate repeat set of dtype\n+\tfor class expressions.\n+\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Include\n+\tadditional code from build_class_array_ref, and use optional\n+\tgfc_typespec pointer argument.\n+\t(gfc_trans_scalar_assign): Make use of pre and post blocks for\n+\tall class expressions.\n+\t* trans.c (get_array_span): For unlimited polymorphic exprs\n+\tmultiply the span by the value of the _len field.\n+\t(gfc_build_spanned_array_ref): New function.\n+\t(gfc_build_array_ref): Call gfc_build_spanned_array_ref and\n+\teliminate repeated code.\n+\t* trans.h: Add arg to gfc_find_and_cut_at_last_class_ref and\n+\tadd prototype for gfc_build_spanned_array_ref.\n+\n 2021-04-14  Martin Liska  <mliska@suse.cz>\n \n \t* intrinsic.texi: The table has first column empty and it makes"}, {"sha": "3cfbb1ed68fe43d098b7cba926446a4d54142fe7", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,8 @@\n+2021-04-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/98599\n+\t* lto.c (lto_wpa_write_files): Fix handling of clones.\n+\n 2021-04-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/99883"}, {"sha": "f0e8b218dc17eccc67a5a4b35eeb06ca3ffd6b64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,84 @@\n+2021-04-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/99420\n+\tPR c/99972\n+\t* gcc.dg/Warray-parameter-9.c: New test.\n+\t* gcc.dg/Wnonnull-6.c: New test.\n+\t* gcc.dg/Wreturn-type3.c: New test.\n+\t* gcc.dg/Wunused-result.c: New test.\n+\t* gcc.dg/attr-noreturn.c: New test.\n+\t* gcc.dg/attr-returns-nonnull.c: New test.\n+\n+2021-04-15  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR middle-end/84877\n+\t* gcc.dg/pr84877.c: Xfail for cris-*-*.\n+\n+2021-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/80456\n+\t* g++.dg/cpp0x/constexpr-volatile3.C: New test.\n+\n+2021-04-15  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/uninit-pr89230-1.c: New test.\n+\t* gcc.dg/uninit-pr89230-2.c: Same.\n+\n+2021-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100101\n+\t* g++.dg/cpp0x/noexcept67.C: New test.\n+\n+2021-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100091\n+\t* g++.dg/cpp2a/lambda-uneval15.C: New test.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: Add\n+\t-mtune=generic to the SVE flags.\n+\t* g++.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp: Likewise.\n+\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: Likewise.\n+\t* gcc.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp: Likewise.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/gcc-defs.exp (aarch64-arch-dg-options): New procedure.\n+\t(aarch64-with-arch-dg-options): Likewise.\n+\t* g++.target/aarch64/sve/aarch64-sve.exp: Run the tests inside\n+\taarch64-with-arch-dg-options.  Move the default architecture\n+\tflags to the final dg-runtest argument.\n+\t* gcc.target/aarch64/sve/aarch64-sve.exp: Likewise.  Dispense with\n+\tDEFAULT_CFLAGS.\n+\t* gcc.target/aarch64/sve2/aarch64-sve2.exp: Likewise.\n+\n+2021-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/100073\n+\t* gcc.dg/pr86058.c: Enable also on i?86-*-*.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/98852\n+\t* g++.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp: New file.\n+\t* g++.target/aarch64/advsimd-intrinsics/pr98852.C: New file.\n+\n+2021-04-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c/98852\n+\t* gcc.target/aarch64/advsimd-intrinsics/pr98852.c: New test.\n+\n+2021-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100056\n+\t* gcc.target/aarch64/pr100056.c: New test.\n+\n+2021-04-15  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.dg/pr93210.c: Adapt regex in order to also support a\n+\tRESULT_DECL as an operand for a RETURN_EXPR.\n+\n 2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/pr99929_1.c: New file."}, {"sha": "b26867349605fe4c338dc0618ca75636f942ecd1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,14 @@\n+2021-04-15  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/99555\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_offload_device_nvptx): New.\n+\t* testsuite/libgomp.c/pr99555-1.c <nvptx offload device>: Until\n+\tresolved, make sure that we exit quickly, with error status,\n+\tXFAILed.\n+\t* testsuite/libgomp.c-c++-common/task-detach-6.c: Likewise.\n+\t* testsuite/libgomp.fortran/task-detach-6.f90: Likewise.\n+\n 2021-04-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/100071"}, {"sha": "0314c4045d38677fd185e1909450edcd0d882f2e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee351f7fdbd82f8947fe9a0e74cea65d216a8549/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ee351f7fdbd82f8947fe9a0e74cea65d216a8549", "patch": "@@ -1,3 +1,17 @@\n+2021-04-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/dg-options.exp (add_options_for_libatomic): Also\n+\tadd libatomic options for 32-bit sparc*-*-linux-gnu.\n+\n+2021-04-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96657\n+\t* libsupc++/Makefile.am: Add atomicity.cc here.\n+\t* src/c++98/Makefile.am: Remove it from here.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* testsuite/18_support/exception_ptr/96657.cc: New test.\n+\n 2021-04-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/100060"}]}