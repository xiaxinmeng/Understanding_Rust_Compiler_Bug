{"sha": "67e6357041db4186f994489810191259421576de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdlNjM1NzA0MWRiNDE4NmY5OTQ0ODk4MTAxOTEyNTk0MjE1NzZkZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-01-13T12:45:31Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-01-13T12:45:31Z"}, "message": "Update gcc_release for move to git.\n\nThis patch updates the gcc_release script, used for snapshots and\nreleases, to use git instead of SVN.\n\nThe parts of the changes used in building snapshots have been tested.\nThe parts used for building releases have not, so it's likely further\nfixes may turn out to be needed there when releases are first built\nfrom git.\n\n\t* gcc_release: Use git instead of SVN.\n\t* crontab: Update gcc_release calls.", "tree": {"sha": "fd2c26d4cd1774823a5990fbdc4a18c19bbaddd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2c26d4cd1774823a5990fbdc4a18c19bbaddd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67e6357041db4186f994489810191259421576de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e6357041db4186f994489810191259421576de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e6357041db4186f994489810191259421576de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e6357041db4186f994489810191259421576de/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a171d3f181ecf1369a1aef2c6a7015cee9df95ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a171d3f181ecf1369a1aef2c6a7015cee9df95ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a171d3f181ecf1369a1aef2c6a7015cee9df95ae"}], "stats": {"total": 118, "additions": 66, "deletions": 52}, "files": [{"sha": "cadcad35a1a15094a2d47c08c1f14f44ced1cfd7", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6357041db4186f994489810191259421576de/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6357041db4186f994489810191259421576de/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=67e6357041db4186f994489810191259421576de", "patch": "@@ -1,3 +1,8 @@\n+2020-01-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_release: Use git instead of SVN.\n+\t* crontab: Update gcc_release calls.\n+\n 2020-01-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* update_version_git: New file."}, {"sha": "0cf342fdf3a8ebeb315b81ab15c9e24258d0fa2d", "filename": "maintainer-scripts/crontab", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6357041db4186f994489810191259421576de/maintainer-scripts%2Fcrontab", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6357041db4186f994489810191259421576de/maintainer-scripts%2Fcrontab", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fcrontab?ref=67e6357041db4186f994489810191259421576de", "patch": "@@ -1,6 +1,6 @@\n 16  0 * * * sh /home/gccadmin/scripts/update_version_git\n 50  0 * * * sh /home/gccadmin/scripts/update_web_docs_svn\n 55  0 * * * sh /home/gccadmin/scripts/update_web_docs_libstdcxx_svn\n-32 22 * * 5 sh /home/gccadmin/scripts/gcc_release -s 8:branches/gcc-8-branch -l -d /sourceware/snapshot-tmp/gcc all\n-32 22 * * 6 sh /home/gccadmin/scripts/gcc_release -s 9:branches/gcc-9-branch -l -d /sourceware/snapshot-tmp/gcc all\n-32 22 * * 7 sh /home/gccadmin/scripts/gcc_release -s 10:trunk -l -d /sourceware/snapshot-tmp/gcc all\n+32 22 * * 5 sh /home/gccadmin/scripts/gcc_release -s 8:releases/gcc-8 -l -d /sourceware/snapshot-tmp/gcc all\n+32 22 * * 6 sh /home/gccadmin/scripts/gcc_release -s 9:releases/gcc-9 -l -d /sourceware/snapshot-tmp/gcc all\n+32 22 * * 7 sh /home/gccadmin/scripts/gcc_release -s 10:master -l -d /sourceware/snapshot-tmp/gcc all"}, {"sha": "8be870154f7fb50c373de632b705af90116f0865", "filename": "maintainer-scripts/gcc_release", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6357041db4186f994489810191259421576de/maintainer-scripts%2Fgcc_release", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6357041db4186f994489810191259421576de/maintainer-scripts%2Fgcc_release", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fgcc_release?ref=67e6357041db4186f994489810191259421576de", "patch": "@@ -64,19 +64,19 @@ inform() {\n usage() {\n cat <<EOF\n gcc_release -r release [-f] [further options]\n-gcc_release -s name:svnbranch [further options]\n+gcc_release -s name:gitbranch [further options]\n \n Options:\n \n   -r release           Version of the form X.Y or X.Y.Z.\n-  -s name:svnbranch    Create a snapshot, not a real release.\n+  -s name:gitbranch    Create a snapshot, not a real release.\n \n   -d destination       Local working directory where we will build the release\n                        (default=${HOME}).\n   -f                   Create a final release (and update ChangeLogs,...).\n   -l                   Indicate that we are running on gcc.gnu.org.\n   -p previous-tarball  Location of a previous tarball (to generate diff files).\n-  -t tag               Tag to mark the release in SVN.\n+  -t tag               Tag to mark the release in git.\n   -u username          Username for upload operations.\n EOF\n     exit 1\n@@ -102,14 +102,15 @@ build_sources() {\n     || error \"Could not create \\`${WORKING_DIRECTORY}'\"\n   changedir \"${WORKING_DIRECTORY}\"\n \n+  # Check out the sources.\n+  ${GIT} clone -q -b \"${GITBRANCH}\" \"${GITROOT}\" \"`basename ${SOURCE_DIRECTORY}`\" || \\\n+      error \"Could not check out release sources\"\n+\n   # If this is a final release, make sure that the ChangeLogs\n   # and version strings are updated.\n   if [ ${FINAL} -ne 0 ]; then\n     inform \"Updating ChangeLogs and version files\"\n \n-    ${SVN} -q co \"${SVNROOT}/${SVNBRANCH}\" \"`basename ${SOURCE_DIRECTORY}`\" ||\\\n-           error \"Could not check out release sources\"\n-\n     grep -q \"gcc-${RELEASE_MAJOR}/index.html gcc-${RELEASE_MAJOR}/changes.html\" \\\n \t ${SOURCE_DIRECTORY}/contrib/gennews ||\\\n \t   error \"New release not listed in contrib/gennews\"\n@@ -139,7 +140,7 @@ build_sources() {\n \n     rm -f NEWS\n \n-    svnciargs=\"\"\n+    commit_files=\"\"\n     for x in `changedir ${SOURCE_DIRECTORY} && \\\n \t      find . -name ChangeLog`; do\n       # Update this ChangeLog file only if it does not yet contain the\n@@ -154,7 +155,7 @@ ${LONG_DATE}  Release Manager\n EOF\n \tmv ${SOURCE_DIRECTORY}/${x}.new ${SOURCE_DIRECTORY}/${x} \\\n \t  || error \"Could not update ${x}\"\n-\tsvnciargs=\"${svnciargs} ${x}\"\n+\tcommit_files=\"${commit_files} ${x}\"\n       fi\n     done\n \n@@ -169,24 +170,23 @@ EOF\n \t(changedir ${SOURCE_DIRECTORY}/gcc && \\\n \t echo ${RELEASE} > BASE-VER) || \\\n \terror \"Could not update BASE-VER\"\n-\tsvnciargs=\"${svnciargs} gcc/BASE-VER\"\n+\tcommit_files=\"${commit_files} gcc/BASE-VER\"\n       else\n \terror \"Release number ${RELEASE} does not immediately follow BASE-VER\"\n       fi\n     fi\n     (changedir ${SOURCE_DIRECTORY}/gcc && \\\n      : > DEV-PHASE) || \\\n     error \"Could not update DEV-PHASE\"\n-    svnciargs=\"${svnciargs} gcc/DEV-PHASE\"\n+    commit_files=\"${commit_files} gcc/DEV-PHASE\"\n \n     (changedir ${SOURCE_DIRECTORY} && \\\n-     ${SVN} -q ci -m 'Update ChangeLog and version files for release' ${svnciargs}) || \\\n+     ${GIT} commit -q -m 'Update ChangeLog and version files for release' ${commit_files} && \\\n+     ${GIT} push) || \\\n     error \"Could not commit ChangeLog and version file updates\"\n \n     # Make sure we tag the sources for a final release.\n-    TAG=\"tags/gcc_`echo ${RELEASE} | tr . _`_release\"\n-\n-    rm -rf ${SOURCE_DIRECTORY}\n+    TAG=\"releases/gcc-${RELEASE}\"\n   fi\n \n   # Tag the sources.\n@@ -195,30 +195,43 @@ EOF\n     # We don't want to overwrite an existing tag.  So, if the tag\n     # already exists, issue an error message; the release manager can\n     # manually remove the tag if appropriate.\n-    echo \"${SVN} ls ${SVNROOT}/${TAG}/ChangeLog\" \n-    if ${SVN} ls \"${SVNROOT}/${TAG}/ChangeLog\"; then \n+    if (changedir ${SOURCE_DIRECTORY} && \\\n+\t${GIT} rev-parse \"refs/tags/${TAG}\" > /dev/null 2>&1); then\n       error \"Tag ${TAG} already exists\"\n     fi\n-    ${SVN} -m \"Tagging source as ${TAG}\" cp \"${SVNROOT}/${SVNBRANCH}\" \"${SVNROOT}/${TAG}\" || \\\n+    (changedir ${SOURCE_DIRECTORY} && \\\n+     ${GIT} tag -s -m \"GCC ${RELEASE} release\" \"${TAG}\" && \\\n+     ${GIT} push origin tag \"${TAG}\") || \\\n       error \"Could not tag sources\"\n-    SVNBRANCH=${TAG}\n+    GITBRANCH=${TAG}\n   fi\n-  SVNREV=`${SVN} info \"${SVNROOT}/${SVNBRANCH}\"|awk '/Revision:/ {print $2}'`\n \n-  # Export the current sources.\n-  inform \"Retrieving sources (svn export -r ${SVNREV} ${SVNROOT}/${SVNBRANCH})\"\n+  GITREV=`cd ${SOURCE_DIRECTORY} && ${GIT} rev-parse HEAD`\n+  inform \"Sources are commit ${GITREV}\"\n+\n+  # Make sure there are no uncommitted changes in the sources.\n+  status=${WORKING_DIRECTORY}/gitstatus.$$\n+  (changedir ${SOURCE_DIRECTORY} && \\\n+   ${GIT} status --porcelain --ignored > \"$status\") || \\\n+    error \"Could not get source directory status\"\n+  if [ -s \"$status\" ]; then\n+    cat \"$status\"\n+    error \"Source directory has unexpected changes\"\n+  fi\n+  rm \"$status\"\n \n-  ${SVN} -q export -r${SVNREV} \"${SVNROOT}/${SVNBRANCH}\" \"`basename ${SOURCE_DIRECTORY}`\" ||\\\n-    error \"Could not retrieve sources\"\n+  # Remove .git from the sources.\n+  rm -rf \"${SOURCE_DIRECTORY}/.git\" || \\\n+    error \"Could not remove .git from sources\"\n \n   # Run gcc_update on them to set up the timestamps nicely, and (re)write\n-  # the LAST_UPDATED file containing the SVN tag/revision used.\n+  # the LAST_UPDATED file containing the git tag/revision used.\n   changedir \"gcc-${RELEASE}\"\n   contrib/gcc_update --touch\n-  echo \"Obtained from SVN: ${SVNBRANCH} revision ${SVNREV}\" > LAST_UPDATED\n+  echo \"Obtained from git: ${GITBRANCH} revision ${GITREV}\" > LAST_UPDATED\n \n   # For a prerelease or real release, we need to generate additional\n-  # files not present in SVN.\n+  # files not present in git.\n   changedir \"${SOURCE_DIRECTORY}\"\n   if [ $SNAPSHOT -ne 1 ]; then\n     # Generate the documentation.\n@@ -433,8 +446,8 @@ announce_snapshot() {\n   https://gcc.gnu.org/pub/gcc/snapshots/\"${RELEASE}\"/\n and on various mirrors, see http://gcc.gnu.org/mirrors.html for details.\n \n-This snapshot has been generated from the GCC \"${BRANCH}\" SVN branch\n-with the following options: \"svn://gcc.gnu.org/svn/gcc/${SVNBRANCH} revision ${SVNREV}\"\n+This snapshot has been generated from the GCC \"${BRANCH}\" git branch\n+with the following options: \"git://gcc.gnu.org/git/gcc.git branch ${GITBRANCH} revision ${GITREV}\"\n \n You'll find:\n \" > ${SNAPSHOT_README}\n@@ -457,8 +470,8 @@ for testing purposes.</p>\n we highly recommend you join the GCC developers list.  Details for\n how to sign up can be found on the GCC project home page.</p>\n \n-<p>This snapshot has been generated from the GCC \"${BRANCH}\" SVN branch\n-with the following options: <code>\"svn://gcc.gnu.org/svn/gcc/${SVNBRANCH} revision ${SVNREV}\"</code></p>\n+<p>This snapshot has been generated from the GCC \"${BRANCH}\" git branch\n+with the following options: <code>\"git://gcc.gnu.org/git/gcc.git branch ${GITBRANCH} revision ${GITREV}\"</code></p>\n \n <table>\" > ${SNAPSHOT_INDEX}\n        \n@@ -511,13 +524,13 @@ export LC_ALL\n DATE=`date \"+%Y%m%d\"`\n LONG_DATE=`date \"+%Y-%m-%d\"`\n \n-SVN=${SVN:-svn}\n-# The CVS server containing the GCC repository.\n-SVN_SERVER=\"gcc.gnu.org\"\n+GIT=${GIT:-git}\n+# The server containing the GCC repository.\n+GIT_SERVER=\"gcc.gnu.org\"\n # The path to the repository on that server.\n-SVN_REPOSITORY=\"/svn/gcc\"\n+GIT_REPOSITORY=\"/git/gcc.git\"\n # The username to use when connecting to the server.\n-SVN_USERNAME=\"${USER}\"\n+GIT_USERNAME=\"${USER}\"\n \n # The machine to which files will be uploaded.\n GCC_HOSTNAME=\"gcc.gnu.org\"\n@@ -546,7 +559,7 @@ BRANCH=\"\"\n \n # The name of the branch from which the release should be made, as used\n # for our version control system.\n-SVNBRANCH=\"\"\n+GITBRANCH=\"\"\n \n # The tag to apply to the sources used for the release.\n TAG=\"\"\n@@ -605,11 +618,11 @@ while getopts \"d:fr:u:t:p:s:l\" ARG; do\n     d)    DESTINATION=\"${OPTARG}\";;\n     r)    RELEASE=\"${OPTARG}\";;\n     t)    TAG=\"${OPTARG}\";;\n-    u)    SVN_USERNAME=\"${OPTARG}\";;\n+    u)    GIT_USERNAME=\"${OPTARG}\";;\n     f)    FINAL=1;;\n     s)    SNAPSHOT=1\n           BRANCH=${OPTARG%:*}\n-          SVNBRANCH=${OPTARG#*:}\n+          GITBRANCH=${OPTARG#*:}\n           ;;\n     l)    LOCAL=1\n \t  SCP=cp\n@@ -643,7 +656,7 @@ while [ $# -ne 0 ]; do\n done\n \n # Perform consistency checking.\n-if [ ${LOCAL} -eq 0 ] && [ -z ${SVN_USERNAME} ]; then\n+if [ ${LOCAL} -eq 0 ] && [ -z ${GIT_USERNAME} ]; then\n   error \"No username specified\"\n fi\n \n@@ -673,12 +686,8 @@ if [ $SNAPSHOT -eq 0 ]; then\n   fi\n \n   # Compute the name of the branch, which is based solely on the major\n-  # and minor release numbers.\n-  if [ ${RELEASE_MAJOR} -ge 5 ]; then\n-    SVNBRANCH=\"branches/gcc-${RELEASE_MAJOR}-branch\"\n-  else\n-    SVNBRANCH=\"branches/gcc-${RELEASE_MAJOR}_${RELEASE_MINOR}-branch\"\n-  fi\n+  # release number.\n+  GITBRANCH=\"releases/gcc-${RELEASE_MAJOR}\"\n \n   # If this is not a final release, set various parameters accordingly.\n   if [ ${FINAL} -ne 1 ]; then\n@@ -707,13 +716,13 @@ fi\n WORKING_DIRECTORY=\"${DESTINATION}/gcc-${RELEASE}\"\n SOURCE_DIRECTORY=\"${WORKING_DIRECTORY}/gcc-${RELEASE}\"\n \n-# Set up SVNROOT.\n+# Set up GITROOT.\n if [ $LOCAL -eq 0 ]; then\n-    SVNROOT=\"svn+ssh://${SVN_USERNAME}@${SVN_SERVER}${SVN_REPOSITORY}\"\n+    GITROOT=\"git+ssh://${GIT_USERNAME}@${GIT_SERVER}${GIT_REPOSITORY}\"\n else\n-    SVNROOT=\"file:///svn/gcc\"\n+    GITROOT=\"/git/gcc.git\"\n fi\n-export SVNROOT\n+export GITROOT\n \n ########################################################################\n # Main Program"}]}