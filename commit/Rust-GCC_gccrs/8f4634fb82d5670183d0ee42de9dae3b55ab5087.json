{"sha": "8f4634fb82d5670183d0ee42de9dae3b55ab5087", "node_id": "C_kwDOANBUbNoAKDhmNDYzNGZiODJkNTY3MDE4M2QwZWU0MmRlOWRhZTNiNTVhYjUwODc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-13T13:24:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-13T13:36:02Z"}, "message": "tree-optimization/105801 - CCP and .DEFERRED_INIT\n\nThis makes sure we treat .DEFERRED_INIT as producing UNDEFINED so\nwe can continue optimizing uninitialized uses the same as without\n-ftrivial-auto-var-init=zero.  For the testcase this means we\ncatch the return 1 optimization opportunity at CCP rather than\nonly at FRE which already does the right thing here.\n\n\tPR tree-optimization/105801\n\t* tree-ssa-ccp.cc (likely_value): .DEFERRED_INIT produces\n\tUNDEFINED.\n\t* doc/invoke.texi (ftrivial-auto-var-init): Explicitely\n\tmention we treat variables without an initializer as\n\tundefined also for optimization purposes.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-43.c: New testcase.", "tree": {"sha": "6cbcf2f4ba649ad9d793c0a08d5f590951fe74f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cbcf2f4ba649ad9d793c0a08d5f590951fe74f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4634fb82d5670183d0ee42de9dae3b55ab5087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4634fb82d5670183d0ee42de9dae3b55ab5087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4634fb82d5670183d0ee42de9dae3b55ab5087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4634fb82d5670183d0ee42de9dae3b55ab5087/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc676cfe8988c62c81b0df224c7fe82583012b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc676cfe8988c62c81b0df224c7fe82583012b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc676cfe8988c62c81b0df224c7fe82583012b1"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "13371972fd1cfb605f805f45896c689fbc29a68e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4634fb82d5670183d0ee42de9dae3b55ab5087/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4634fb82d5670183d0ee42de9dae3b55ab5087/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8f4634fb82d5670183d0ee42de9dae3b55ab5087", "patch": "@@ -13208,7 +13208,8 @@ disclosure and use.\n GCC still considers an automatic variable that doesn't have an explicit\n initializer as uninitialized, @option{-Wuninitialized} and\n @option{-Wanalyzer-use-of-uninitialized-value} will still report\n-warning messages on such automatic variables.\n+warning messages on such automatic variables and the compiler will\n+perform optimization as if the variable were uninitialized.\n With this option, GCC will also initialize any padding of automatic variables\n that have structure or union types to zeroes.\n However, the current implementation cannot initialize automatic variables that"}, {"sha": "3e0a3d659d1d1c89d7902800e8b095182aefd2dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-43.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4634fb82d5670183d0ee42de9dae3b55ab5087/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4634fb82d5670183d0ee42de9dae3b55ab5087/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-43.c?ref=8f4634fb82d5670183d0ee42de9dae3b55ab5087", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftrivial-auto-var-init=zero -fdump-tree-ccp1\" } */\n+\n+int foo (int flag)\n+{\n+  int i;\n+  if (flag)\n+    i = 1;\n+  return i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"ccp1\" } } */"}, {"sha": "0d47289b31d8f358cc7eefd52a851be819ce7857", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4634fb82d5670183d0ee42de9dae3b55ab5087/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4634fb82d5670183d0ee42de9dae3b55ab5087/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=8f4634fb82d5670183d0ee42de9dae3b55ab5087", "patch": "@@ -722,6 +722,10 @@ likely_value (gimple *stmt)\n   if (gimple_has_volatile_ops (stmt))\n     return VARYING;\n \n+  /* .DEFERRED_INIT produces undefined.  */\n+  if (gimple_call_internal_p (stmt, IFN_DEFERRED_INIT))\n+    return UNDEFINED;\n+\n   /* Arrive here for more complex cases.  */\n   has_constant_operand = false;\n   has_undefined_operand = false;"}]}