{"sha": "ec8e621da9820b3bb8d316a29195da93c926e8c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4ZTYyMWRhOTgyMGIzYmI4ZDMxNmEyOTE5NWRhOTNjOTI2ZThjMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-27T15:32:18Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-27T15:32:18Z"}, "message": "aix.h (REG_SIZE): Don't #undef.\n\n\t* ia64/aix.h (REG_SIZE): Don't #undef.\n\t* sparc.h (REG_SIZE): Delete.\n\t* flow.c (mark_used_regs): Don't use REG_SIZE.\n\t* regs.h (REG_SIZE): Delete.\n\nFrom-SVN: r47378", "tree": {"sha": "0ebd56d67867b2fffb18604276462ab609a63247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ebd56d67867b2fffb18604276462ab609a63247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec8e621da9820b3bb8d316a29195da93c926e8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8e621da9820b3bb8d316a29195da93c926e8c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8e621da9820b3bb8d316a29195da93c926e8c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8e621da9820b3bb8d316a29195da93c926e8c1/comments", "author": null, "committer": null, "parents": [{"sha": "4a2fadaeccab5f82e7ab4d5d681fdc456ca0a990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2fadaeccab5f82e7ab4d5d681fdc456ca0a990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2fadaeccab5f82e7ab4d5d681fdc456ca0a990"}], "stats": {"total": 54, "additions": 15, "deletions": 39}, "files": [{"sha": "5d9e6a0e05f648ecdaeef328ae98ecf209274b9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec8e621da9820b3bb8d316a29195da93c926e8c1", "patch": "@@ -1,3 +1,10 @@\n+2001-11-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ia64/aix.h (REG_SIZE): Don't #undef.\n+\t* sparc.h (REG_SIZE): Delete.\n+\t* flow.c (mark_used_regs): Don't use REG_SIZE.\n+\t* regs.h (REG_SIZE): Delete.\n+\n 2001-11-27  Andreas Schwab  <schwab@suse.de>\n \n \t* gcc.c: Fix typo PREFERRED_DEBUGGING_FORMAT ->"}, {"sha": "cee762181d6ada5a3f360fa74c22d0a4560ea410", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=ec8e621da9820b3bb8d316a29195da93c926e8c1", "patch": "@@ -248,11 +248,6 @@ extern unsigned int ia64_section_threshold;\n #define WCHAR_TYPE \"unsigned short\"\n #endif\n \n-/* Have to get rid of the system's definition so that we can use gcc's\n-   instead. */\n-#include <sys/machine.h>\n-#undef REG_SIZE\n-\n /* Define the `__builtin_va_list' type for AIX.  Use char* b/c that's what the\n    system headers expect.  */\n #define BUILD_VA_LIST_TYPE(VALIST) \\"}, {"sha": "310942f2833f70c03586b4f4174c49a245f6bf4e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=ec8e621da9820b3bb8d316a29195da93c926e8c1", "patch": "@@ -1099,23 +1099,8 @@ while (0)\n        : (GET_MODE_SIZE (MODE) + 3) / 4)\t\t\t\t\\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n-/* Due to the ARCH64 descrepancy above we must override these\n-   next two macros too.  */\n-#define REG_SIZE(R) \\\n-  (TARGET_ARCH64\t\t\t\t\t\t\t\\\n-   && ((GET_CODE (R) == REG\t\t\t\t\t\t\\\n-        && ((REGNO (R) >= FIRST_PSEUDO_REGISTER\t\t\t\t\\\n-\t     && FLOAT_MODE_P (GET_MODE (R)))\t\t\t\t\\\n-\t    || (REGNO (R) < FIRST_PSEUDO_REGISTER\t\t\t\\\n-\t\t&& REGNO (R) >= 32)))\t\t\t\t\t\\\n-       || (GET_CODE (R) == SUBREG\t\t\t\t\t\\\n-\t   && ((REGNO (SUBREG_REG (R)) >= FIRST_PSEUDO_REGISTER\t\t\\\n-\t     && FLOAT_MODE_P (GET_MODE (SUBREG_REG (R))))\t\t\\\n-\t    || (REGNO (SUBREG_REG (R)) < FIRST_PSEUDO_REGISTER\t\t\\\n-\t\t&& REGNO (SUBREG_REG (R)) >= 32))))\t\t\t\\\n-   ? (GET_MODE_SIZE (GET_MODE (R)) + 3) / 4\t\t\t\t\\\n-   : (GET_MODE_SIZE (GET_MODE (R)) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n-\n+/* Due to the ARCH64 descrepancy above we must override this next\n+   macro too.  */\n #define REGMODE_NATURAL_SIZE(MODE) \\\n   ((TARGET_ARCH64 && FLOAT_MODE_P (MODE)) ? 4 : UNITS_PER_WORD)\n "}, {"sha": "df27edc8f4552943e6d0b1ceed7aa6252256a557", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ec8e621da9820b3bb8d316a29195da93c926e8c1", "patch": "@@ -3630,7 +3630,10 @@ mark_used_regs (pbi, x, cond, insn)\n \t       does not use any of the old value.  But these other\n \t       ways of storing in a register do use the old value.  */\n \t    if (GET_CODE (testreg) == SUBREG\n-\t\t&& !(REG_SIZE (SUBREG_REG (testreg)) > REG_SIZE (testreg)))\n+\t\t&& !((REG_BYTES (SUBREG_REG (testreg))\n+\t\t      + UNITS_PER_WORD - 1) / UNITS_PER_WORD\n+\t\t     > (REG_BYTES (testreg)\n+\t\t\t+ UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \t      ;\n \t    else\n \t      mark_dest = 1;"}, {"sha": "0b35f07dee0aab1949b98a220154c5cf08a81a91", "filename": "gcc/regs.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8e621da9820b3bb8d316a29195da93c926e8c1/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=ec8e621da9820b3bb8d316a29195da93c926e8c1", "patch": "@@ -24,24 +24,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #define REG_BYTES(R) mode_size[(int) GET_MODE (R)]\n \n-/* Get the number of consecutive hard regs required to hold the REG or\n-   SUBREG rtx R.\n-   When something may be an explicit hard reg, REG_SIZE is the only\n-   valid way to get this value.  You cannot get it from the regno.\n-\n-   A target may override this definition, the case where you would do\n-   this is where there are registers which are smaller than WORD_SIZE\n-   such as the SFmode registers on sparc64.  */\n-\n-#ifndef REG_SIZE\n-#define REG_SIZE(R) \\\n-  ((mode_size[(int) GET_MODE (R)] + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n-#endif\n-\n /* When you only have the mode of a pseudo register before it has a hard\n    register chosen for it, this reports the size of each hard register\n-   a pseudo in such a mode would get allocated to.  Like REG_SIZE, a\n-   target may override this.  */\n+   a pseudo in such a mode would get allocated to.  A target may\n+   override this.  */\n \n #ifndef REGMODE_NATURAL_SIZE\n #define REGMODE_NATURAL_SIZE(MODE)\tUNITS_PER_WORD"}]}