{"sha": "7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2ZjdhYTQwOWViZTM3ZWE5ZWFjMjVjYzEzMWY0YThmMDNhY2ZhMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-29T11:34:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-29T12:02:28Z"}, "message": "Small housekeeping work in SPARC back-end\n\ngcc/\n\t* config/sparc/sparc.c (gen_load_pcrel_sym): Delete.\n\t(load_got_register): Do the PIC dance here.\n\t(sparc_legitimize_tls_address): Simplify.\n\t(sparc_emit_probe_stack_range): Likewise.\n\t(sparc32_initialize_trampoline): Likewise.\n\t(sparc64_initialize_trampoline): Likewise.\n\t* config/sparc/sparc.md (load_pcrel_sym<P:mode>): Add @ marker.\n\t(probe_stack_range<P:mode>): Likewise.\n\t(flush<P:mode>): Likewise.\n\t(tgd_hi22<P:mode>): Likewise.\n\t(tgd_lo10<P:mode>): Likewise.\n\t(tgd_add<P:mode>): Likewise.\n\t(tgd_call<P:mode>): Likewise.\n\t(tldm_hi22<P:mode>): Likewise.\n\t(tldm_lo10<P:mode>): Likewise.\n\t(tldm_add<P:mode>): Likewise.\n\t(tldm_call<P:mode>): Likewise.\n\t(tldo_hix22<P:mode>): Likewise.\n\t(tldo_lox10<P:mode>): Likewise.\n\t(tldo_add<P:mode>): Likewise.\n\t(tie_hi22<P:mode>): Likewise.\n\t(tie_lo10<P:mode>): Likewise.\n\t(tie_add<P:mode>): Likewise.\n\t(tle_hix22<P:mode>): Likewise.\n\t(tle_lox10<P:mode>): Likewise.\n\t(stack_protect_setsi): Rename to...\n\t(stack_protect_set32): ...this.\n\t(stack_protect_setdi): Rename to...\n\t(stack_protect_set64): ...this.\n\t(stack_protect_set): Adjust calls to above.\n\t(stack_protect_testsi): Rename to...\n\t(stack_protect_test32): ...this.\n\t(stack_protect_testdi): Rename to...\n\t(stack_protect_test64): ...this.\n\t(stack_protect_test): Adjust calls to above.", "tree": {"sha": "89f47e0416bd29372e3c7b69512c582fea46024a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89f47e0416bd29372e3c7b69512c582fea46024a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3/comments", "author": null, "committer": null, "parents": [{"sha": "985b3a6837dee7001e6b618f073ed74f0edf5787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b3a6837dee7001e6b618f073ed74f0edf5787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985b3a6837dee7001e6b618f073ed74f0edf5787"}], "stats": {"total": 197, "additions": 70, "deletions": 127}, "files": [{"sha": "3b4d41630f3d3c78c923fd76d3924ad77da80ae1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 43, "deletions": 100, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3", "patch": "@@ -4213,26 +4213,7 @@ sparc_got (void)\n   return got_symbol_rtx;\n }\n \n-/* Wrapper around the load_pcrel_sym{si,di} patterns.  */\n-\n-static rtx\n-gen_load_pcrel_sym (rtx op0, rtx op1, rtx op2)\n-{\n-  int orig_flag_pic = flag_pic;\n-  rtx insn;\n-\n-  /* The load_pcrel_sym{si,di} patterns require absolute addressing.  */\n-  flag_pic = 0;\n-  if (TARGET_ARCH64)\n-    insn = gen_load_pcrel_symdi (op0, op1, op2, GEN_INT (REGNO (op0)));\n-  else\n-    insn = gen_load_pcrel_symsi (op0, op1, op2, GEN_INT (REGNO (op0)));\n-  flag_pic = orig_flag_pic;\n-\n-  return insn;\n-}\n-\n-/* Output the load_pcrel_sym{si,di} patterns.  */\n+/* Output the load_pcrel_sym pattern.  */\n \n const char *\n output_load_pcrel_sym (rtx *operands)\n@@ -4299,8 +4280,15 @@ load_got_register (void)\n \t  got_helper_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n \t}\n \n-      insn\n-\t= gen_load_pcrel_sym (got_register_rtx, sparc_got (), got_helper_rtx);\n+      /* The load_pcrel_sym{si,di} patterns require absolute addressing.  */\n+      const int orig_flag_pic = flag_pic;\n+      flag_pic = 0;\n+      insn = gen_load_pcrel_sym (Pmode,\n+\t\t\t\t got_register_rtx,\n+\t\t\t\t sparc_got (),\n+\t\t\t\t got_helper_rtx,\n+\t\t\t\t GEN_INT (GLOBAL_OFFSET_TABLE_REGNUM));\n+      flag_pic = orig_flag_pic;\n     }\n \n   emit_insn (insn);\n@@ -4680,22 +4668,11 @@ sparc_legitimize_tls_address (rtx addr)\n \tret = gen_reg_rtx (Pmode);\n \to0 = gen_rtx_REG (Pmode, 8);\n \tgot = sparc_tls_got ();\n-\tif (TARGET_ARCH32)\n-\t  {\n-\t    emit_insn (gen_tgd_hi22si (temp1, addr));\n-\t    emit_insn (gen_tgd_lo10si (temp2, temp1, addr));\n-\t    emit_insn (gen_tgd_addsi (o0, got, temp2, addr));\n-\t    insn = emit_call_insn (gen_tgd_callsi (o0, sparc_tls_get_addr (),\n-\t\t\t\t\t\t   addr, const1_rtx));\n-\t  }\n-\telse\n-\t  {\n-\t    emit_insn (gen_tgd_hi22di (temp1, addr));\n-\t    emit_insn (gen_tgd_lo10di (temp2, temp1, addr));\n-\t    emit_insn (gen_tgd_adddi (o0, got, temp2, addr));\n-\t    insn = emit_call_insn (gen_tgd_calldi (o0, sparc_tls_get_addr (),\n-\t\t\t\t\t\t   addr, const1_rtx));\n-\t  }\n+\temit_insn (gen_tgd_hi22 (Pmode, temp1, addr));\n+\temit_insn (gen_tgd_lo10 (Pmode, temp2, temp1, addr));\n+\temit_insn (gen_tgd_add (Pmode, o0, got, temp2, addr));\n+\tinsn = emit_call_insn (gen_tgd_call (Pmode, o0, sparc_tls_get_addr (),\n+\t\t\t\t\t     addr, const1_rtx));\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (insn), o0);\n \tRTL_CONST_CALL_P (insn) = 1;\n \tinsn = get_insns ();\n@@ -4711,22 +4688,11 @@ sparc_legitimize_tls_address (rtx addr)\n \tret = gen_reg_rtx (Pmode);\n \to0 = gen_rtx_REG (Pmode, 8);\n \tgot = sparc_tls_got ();\n-\tif (TARGET_ARCH32)\n-\t  {\n-\t    emit_insn (gen_tldm_hi22si (temp1));\n-\t    emit_insn (gen_tldm_lo10si (temp2, temp1));\n-\t    emit_insn (gen_tldm_addsi (o0, got, temp2));\n-\t    insn = emit_call_insn (gen_tldm_callsi (o0, sparc_tls_get_addr (),\n-\t\t\t\t\t\t    const1_rtx));\n-\t  }\n-\telse\n-\t  {\n-\t    emit_insn (gen_tldm_hi22di (temp1));\n-\t    emit_insn (gen_tldm_lo10di (temp2, temp1));\n-\t    emit_insn (gen_tldm_adddi (o0, got, temp2));\n-\t    insn = emit_call_insn (gen_tldm_calldi (o0, sparc_tls_get_addr (),\n-\t\t\t\t\t\t    const1_rtx));\n-\t  }\n+\temit_insn (gen_tldm_hi22 (Pmode, temp1));\n+\temit_insn (gen_tldm_lo10 (Pmode, temp2, temp1));\n+\temit_insn (gen_tldm_add (Pmode, o0, got, temp2));\n+\tinsn = emit_call_insn (gen_tldm_call (Pmode, o0, sparc_tls_get_addr (),\n+\t\t\t\t\t      const1_rtx));\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (insn), o0);\n \tRTL_CONST_CALL_P (insn) = 1;\n \tinsn = get_insns ();\n@@ -4738,46 +4704,27 @@ sparc_legitimize_tls_address (rtx addr)\n \t\t\t\t\t    UNSPEC_TLSLD_BASE));\n \ttemp1 = gen_reg_rtx (Pmode);\n \ttemp2 = gen_reg_rtx (Pmode);\n-\tif (TARGET_ARCH32)\n-\t  {\n-\t    emit_insn (gen_tldo_hix22si (temp1, addr));\n-\t    emit_insn (gen_tldo_lox10si (temp2, temp1, addr));\n-\t    emit_insn (gen_tldo_addsi (ret, temp3, temp2, addr));\n-\t  }\n-\telse\n-\t  {\n-\t    emit_insn (gen_tldo_hix22di (temp1, addr));\n-\t    emit_insn (gen_tldo_lox10di (temp2, temp1, addr));\n-\t    emit_insn (gen_tldo_adddi (ret, temp3, temp2, addr));\n-\t  }\n+\temit_insn (gen_tldo_hix22 (Pmode, temp1, addr));\n+\temit_insn (gen_tldo_lox10 (Pmode, temp2, temp1, addr));\n+\temit_insn (gen_tldo_add (Pmode, ret, temp3, temp2, addr));\n \tbreak;\n \n       case TLS_MODEL_INITIAL_EXEC:\n \ttemp1 = gen_reg_rtx (Pmode);\n \ttemp2 = gen_reg_rtx (Pmode);\n \ttemp3 = gen_reg_rtx (Pmode);\n \tgot = sparc_tls_got ();\n+\temit_insn (gen_tie_hi22 (Pmode, temp1, addr));\n+\temit_insn (gen_tie_lo10 (Pmode, temp2, temp1, addr));\n \tif (TARGET_ARCH32)\n-\t  {\n-\t    emit_insn (gen_tie_hi22si (temp1, addr));\n-\t    emit_insn (gen_tie_lo10si (temp2, temp1, addr));\n-\t    emit_insn (gen_tie_ld32 (temp3, got, temp2, addr));\n-\t  }\n+\t  emit_insn (gen_tie_ld32 (temp3, got, temp2, addr));\n \telse\n-\t  {\n-\t    emit_insn (gen_tie_hi22di (temp1, addr));\n-\t    emit_insn (gen_tie_lo10di (temp2, temp1, addr));\n-\t    emit_insn (gen_tie_ld64 (temp3, got, temp2, addr));\n-\t  }\n+\t  emit_insn (gen_tie_ld64 (temp3, got, temp2, addr));\n         if (TARGET_SUN_TLS)\n \t  {\n \t    ret = gen_reg_rtx (Pmode);\n-\t    if (TARGET_ARCH32)\n-\t      emit_insn (gen_tie_addsi (ret, gen_rtx_REG (Pmode, 7),\n-\t\t\t\t\ttemp3, addr));\n-\t    else\n-\t      emit_insn (gen_tie_adddi (ret, gen_rtx_REG (Pmode, 7),\n-\t\t\t\t\ttemp3, addr));\n+\t    emit_insn (gen_tie_add (Pmode, ret, gen_rtx_REG (Pmode, 7),\n+\t\t\t\t    temp3, addr));\n \t  }\n \telse\n \t  ret = gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, 7), temp3);\n@@ -4786,16 +4733,8 @@ sparc_legitimize_tls_address (rtx addr)\n       case TLS_MODEL_LOCAL_EXEC:\n \ttemp1 = gen_reg_rtx (Pmode);\n \ttemp2 = gen_reg_rtx (Pmode);\n-\tif (TARGET_ARCH32)\n-\t  {\n-\t    emit_insn (gen_tle_hix22si (temp1, addr));\n-\t    emit_insn (gen_tle_lox10si (temp2, temp1, addr));\n-\t  }\n-\telse\n-\t  {\n-\t    emit_insn (gen_tle_hix22di (temp1, addr));\n-\t    emit_insn (gen_tle_lox10di (temp2, temp1, addr));\n-\t  }\n+\temit_insn (gen_tle_hix22 (Pmode, temp1, addr));\n+\temit_insn (gen_tle_lox10 (Pmode, temp2, temp1, addr));\n \tret = gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, 7), temp2);\n \tbreak;\n \n@@ -5696,10 +5635,7 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \t probes at FIRST + N * PROBE_INTERVAL for values of N from 1\n \t until it is equal to ROUNDED_SIZE.  */\n \n-      if (TARGET_ARCH64)\n-\temit_insn (gen_probe_stack_rangedi (g1, g1, g4));\n-      else\n-\temit_insn (gen_probe_stack_rangesi (g1, g1, g4));\n+      emit_insn (gen_probe_stack_range (Pmode, g1, g1, g4));\n \n \n       /* Step 4: probe at FIRST + SIZE if we cannot assert at compile-time\n@@ -9940,9 +9876,11 @@ sparc32_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n \t\t   GEN_INT (trunc_int_for_mode (0x8410a000, SImode)),\n \t\t   NULL_RTX, 1, OPTAB_DIRECT));\n \n+  emit_insn\n+    (gen_flush (SImode, validize_mem (adjust_address (m_tramp, SImode, 0))));\n+\n   /* On UltraSPARC a flush flushes an entire cache line.  The trampoline is\n      aligned on a 16 byte boundary so one flush clears it all.  */\n-  emit_insn (gen_flushsi (validize_mem (adjust_address (m_tramp, SImode, 0))));\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n       && sparc_cpu != PROCESSOR_NIAGARA\n@@ -9951,7 +9889,8 @@ sparc32_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n       && sparc_cpu != PROCESSOR_NIAGARA4\n       && sparc_cpu != PROCESSOR_NIAGARA7\n       && sparc_cpu != PROCESSOR_M8)\n-    emit_insn (gen_flushsi (validize_mem (adjust_address (m_tramp, SImode, 8))));\n+    emit_insn\n+      (gen_flush (SImode, validize_mem (adjust_address (m_tramp, SImode, 8))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n@@ -9988,8 +9927,11 @@ sparc64_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n \t\t  GEN_INT (trunc_int_for_mode (0xca586010, SImode)));\n   emit_move_insn (adjust_address (m_tramp, DImode, 16), cxt);\n   emit_move_insn (adjust_address (m_tramp, DImode, 24), fnaddr);\n-  emit_insn (gen_flushdi (validize_mem (adjust_address (m_tramp, DImode, 0))));\n+  emit_insn\n+    (gen_flush (DImode, validize_mem (adjust_address (m_tramp, DImode, 0))));\n \n+  /* On UltraSPARC a flush flushes an entire cache line.  The trampoline is\n+     aligned on a 16 byte boundary so one flush clears it all.  */\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n       && sparc_cpu != PROCESSOR_NIAGARA\n@@ -9998,7 +9940,8 @@ sparc64_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n       && sparc_cpu != PROCESSOR_NIAGARA4\n       && sparc_cpu != PROCESSOR_NIAGARA7\n       && sparc_cpu != PROCESSOR_M8)\n-    emit_insn (gen_flushdi (validize_mem (adjust_address (m_tramp, DImode, 8))));\n+    emit_insn\n+      (gen_flush (DImode, validize_mem (adjust_address (m_tramp, DImode, 8))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */"}, {"sha": "a8d99629fcd374c1938cd22ad977252f01af69a9", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7d6f7aa409ebe37ea9eac25cc131f4a8f03acfa3", "patch": "@@ -1592,7 +1592,7 @@\n ;; because the RDPC instruction is extremely expensive and incurs a complete\n ;; instruction pipeline flush.\n \n-(define_insn \"load_pcrel_sym<P:mode>\"\n+(define_insn \"@load_pcrel_sym<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")\n \t\t   (match_operand:P 2 \"call_address_operand\" \"\")\n@@ -7290,7 +7290,7 @@ visl\")\n     = adjust_address (operands[0], GET_MODE (operands[0]), SPARC_STACK_BIAS);\n })\n \n-(define_insn \"probe_stack_range<P:mode>\"\n+(define_insn \"@probe_stack_range<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")\n \t\t\t    (match_operand:P 2 \"register_operand\" \"r\")]\n@@ -7468,7 +7468,7 @@ visl\")\n \n ;; Special pattern for the FLUSH instruction.\n \n-(define_insn \"flush<P:mode>\"\n+(define_insn \"@flush<P:mode>\"\n   [(unspec_volatile [(match_operand:P 0 \"memory_operand\" \"m\")] UNSPECV_FLUSH)]\n   \"\"\n {\n@@ -7935,22 +7935,22 @@ visl\")\n \n ;; TLS support instructions.\n \n-(define_insn \"tgd_hi22<P:mode>\"\n+(define_insn \"@tgd_hi22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (high:P (unspec:P [(match_operand 1 \"tgd_symbolic_operand\" \"\")]\n \t\t\t  UNSPEC_TLSGD)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tgd_hi22(%a1), %0\")\n \n-(define_insn \"tgd_lo10<P:mode>\"\n+(define_insn \"@tgd_lo10<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t  (unspec:P [(match_operand 2 \"tgd_symbolic_operand\" \"\")]\n \t\t\t    UNSPEC_TLSGD)))]\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %%tgd_lo10(%a2), %0\")\n \n-(define_insn \"tgd_add<P:mode>\"\n+(define_insn \"@tgd_add<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n@@ -7959,7 +7959,7 @@ visl\")\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %2, %0, %%tgd_add(%a3)\")\n \n-(define_insn \"tgd_call<P:mode>\"\n+(define_insn \"@tgd_call<P:mode>\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(call (mem:P (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"s\")\n \t\t\t\t(match_operand 2 \"tgd_symbolic_operand\" \"\")]\n@@ -7972,28 +7972,28 @@ visl\")\n                                     (const_string \"call\")\n                                     (const_string \"call_no_delay_slot\")))])\n \n-(define_insn \"tldm_hi22<P:mode>\"\n+(define_insn \"@tldm_hi22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (high:P (unspec:P [(const_int 0)] UNSPEC_TLSLDM)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tldm_hi22(%&), %0\")\n \n-(define_insn \"tldm_lo10<P:mode>\"\n+(define_insn \"@tldm_lo10<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t  (unspec:P [(const_int 0)] UNSPEC_TLSLDM)))]\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %%tldm_lo10(%&), %0\")\n \n-(define_insn \"tldm_add<P:mode>\"\n+(define_insn \"@tldm_add<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")]\n \t\t\t  UNSPEC_TLSLDM)))]\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %2, %0, %%tldm_add(%&)\")\n \n-(define_insn \"tldm_call<P:mode>\"\n+(define_insn \"@tldm_call<P:mode>\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(call (mem:P (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"s\")]\n \t\t\t       UNSPEC_TLSLDM))\n@@ -8005,22 +8005,22 @@ visl\")\n                                     (const_string \"call\")\n                                     (const_string \"call_no_delay_slot\")))])\n \n-(define_insn \"tldo_hix22<P:mode>\"\n+(define_insn \"@tldo_hix22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (high:P (unspec:P [(match_operand 1 \"tld_symbolic_operand\" \"\")]\n \t\t\t  UNSPEC_TLSLDO)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tldo_hix22(%a1), %0\")\n \n-(define_insn \"tldo_lox10<P:mode>\"\n+(define_insn \"@tldo_lox10<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t  (unspec:P [(match_operand 2 \"tld_symbolic_operand\" \"\")]\n \t\t\t    UNSPEC_TLSLDO)))]\n   \"TARGET_TLS\"\n   \"xor\\\\t%1, %%tldo_lox10(%a2), %0\")\n \n-(define_insn \"tldo_add<P:mode>\"\n+(define_insn \"@tldo_add<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n@@ -8029,14 +8029,14 @@ visl\")\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %2, %0, %%tldo_add(%a3)\")\n \n-(define_insn \"tie_hi22<P:mode>\"\n+(define_insn \"@tie_hi22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (high:P (unspec:P [(match_operand 1 \"tie_symbolic_operand\" \"\")]\n \t\t\t  UNSPEC_TLSIE)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tie_hi22(%a1), %0\")\n \n-(define_insn \"tie_lo10<P:mode>\"\n+(define_insn \"@tie_lo10<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t  (unspec:P [(match_operand 2 \"tie_symbolic_operand\" \"\")]\n@@ -8068,7 +8068,7 @@ visl\")\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")])\n \n-(define_insn \"tie_add<P:mode>\"\n+(define_insn \"@tie_add<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n@@ -8077,14 +8077,14 @@ visl\")\n   \"TARGET_SUN_TLS\"\n   \"add\\\\t%1, %2, %0, %%tie_add(%a3)\")\n \n-(define_insn \"tle_hix22<P:mode>\"\n+(define_insn \"@tle_hix22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (high:P (unspec:P [(match_operand 1 \"tle_symbolic_operand\" \"\")]\n \t\t\t  UNSPEC_TLSLE)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tle_hix22(%a1), %0\")\n \n-(define_insn \"tle_lox10<P:mode>\"\n+(define_insn \"@tle_lox10<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t  (unspec:P [(match_operand 2 \"tle_symbolic_operand\" \"\")]\n@@ -8342,13 +8342,13 @@ visl\")\n   operands[1] = gen_rtx_MEM (Pmode, addr);\n #endif\n   if (TARGET_ARCH64)\n-    emit_insn (gen_stack_protect_setdi (operands[0], operands[1]));\n+    emit_insn (gen_stack_protect_set64 (operands[0], operands[1]));\n   else\n-    emit_insn (gen_stack_protect_setsi (operands[0], operands[1]));\n+    emit_insn (gen_stack_protect_set32 (operands[0], operands[1]));\n   DONE;\n })\n \n-(define_insn \"stack_protect_setsi\"\n+(define_insn \"stack_protect_set32\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n    (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n@@ -8357,7 +8357,7 @@ visl\")\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"stack_protect_setdi\"\n+(define_insn \"stack_protect_set64\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n \t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n    (set (match_scratch:DI 2 \"=&r\") (const_int 0))]\n@@ -8381,21 +8381,21 @@ visl\")\n   if (TARGET_ARCH64)\n     {\n       result = gen_reg_rtx (Pmode);\n-      emit_insn (gen_stack_protect_testdi (result, operands[0], operands[1]));\n+      emit_insn (gen_stack_protect_test64 (result, operands[0], operands[1]));\n       test = gen_rtx_EQ (VOIDmode, result, const0_rtx);\n       emit_jump_insn (gen_cbranchdi4 (test, result, const0_rtx, operands[2]));\n     }\n   else\n     {\n-      emit_insn (gen_stack_protect_testsi (operands[0], operands[1]));\n+      emit_insn (gen_stack_protect_test32 (operands[0], operands[1]));\n       result = gen_rtx_REG (CCmode, SPARC_ICC_REG);\n       test = gen_rtx_EQ (VOIDmode, result, const0_rtx);\n       emit_jump_insn (gen_cbranchcc4 (test, result, const0_rtx, operands[2]));\n     }\n   DONE;\n })\n \n-(define_insn \"stack_protect_testsi\"\n+(define_insn \"stack_protect_test32\"\n   [(set (reg:CC CC_REG)\n \t(unspec:CC [(match_operand:SI 0 \"memory_operand\" \"m\")\n \t\t    (match_operand:SI 1 \"memory_operand\" \"m\")]\n@@ -8407,7 +8407,7 @@ visl\")\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"stack_protect_testdi\"\n+(define_insn \"stack_protect_test64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n \t\t    (match_operand:DI 2 \"memory_operand\" \"m\")]"}]}