{"sha": "8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyMDAzNTA5ZWIzY2NmYmY5YzljZTkwOGEzYzYyYzUxOGU3ZmYwZg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-04-12T18:36:30Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-04-12T18:36:30Z"}, "message": "config.build (alpha*-dec-osf4*): Remove.\n\n\tgcc:\n\t* config.build (alpha*-dec-osf4*): Remove.\n\t* config.gcc: Remove alpha*-dec-osf4*, alpha-dec-osf5.0* from list\n\tof obsolete configurations.\n\t(alpha*-dec-osf[45]*): Remove alpha*-dec-osf4*, alpha-dec-osf5.0*\n\tsupport.\n\t* config/alpha/t-osf4: Renamed to ...\n\t* config/alpha/t-osf5: ... this.\n\t* config/alpha/osf.h: Renamed to ...\n\t* config/alpha/osf5.h: ... this.\n\tMerged old osf5.h contents.\n\tUpdate comments.\n\t(ASM_SPEC): Use ASM_OLDAS_SPEC directly.\n\t(EXTRA_SPECS): Removed.\n\t* doc/install.texi (Specific, alpha*-dec-osf5.1): Renamed to\n\treflect removal of Tru64 UNIX V4.0/V5.0 support.\n\tDocument that.\n\n\tfixincludes:\n\t* inclhack.def (alpha_wchar): Remove.\n\t* fixincl.x: Regenerate.\n\t* tests/base/wchar.h: Remove.\n\n\tlibgcc:\n\t* config.host (alpha*-dec-osf[45]*): Removed alpha*-dec-osf4*,\n\talpha-dec-osf5.0* support.\n\nFrom-SVN: r158235", "tree": {"sha": "cddc77083c1cfeaa50af1a351d07d7835b751b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddc77083c1cfeaa50af1a351d07d7835b751b74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "887204da16fe676a2d6f551ae0e58fd837375eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887204da16fe676a2d6f551ae0e58fd837375eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887204da16fe676a2d6f551ae0e58fd837375eef"}], "stats": {"total": 663, "additions": 283, "deletions": 380}, "files": [{"sha": "b0b26dfe3fde6fd3c23eb492591e96eb18b37389", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -1,3 +1,9 @@\n+2010-04-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* inclhack.def (alpha_wchar): Remove.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/wchar.h: Remove.\n+\n 2010-04-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* aclocal.m4: Regenerate."}, {"sha": "e80d50c5adcc7ac3dfaa80ca00430fc0946da3e2", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Tuesday March 30, 2010 at 09:51:20 PM MEST\n+ * It has been AutoGen-ed  Wednesday April  7, 2010 at 05:11:50 PM MEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Mar 30 21:51:20 MEST 2010\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Apr  7 17:11:50 MEST 2010\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 206 fixup descriptions.\n+ * This file contains 205 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -1352,43 +1352,6 @@ static const char* apzAlpha_SbrkPatch[] = {\n     \"void *sbrk(\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Alpha_Wchar fix\n- */\n-tSCC zAlpha_WcharName[] =\n-     \"alpha_wchar\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zAlpha_WcharList[] =\n-  \"wchar.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzAlpha_WcharMachs[] = {\n-        \"alpha*-dec-osf4*\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zAlpha_WcharSelect0[] =\n-       \"#define wcstok wcstok_r\";\n-\n-#define    ALPHA_WCHAR_TEST_CT  1\n-static tTestDesc aAlpha_WcharTests[] = {\n-  { TT_EGREP,    zAlpha_WcharSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Alpha_Wchar\n- */\n-static const char* apzAlpha_WcharPatch[] = { sed_cmd_z,\n-    \"-e\", \"s@#define wcstok wcstok_r@extern wchar_t *wcstok __((wchar_t *, const wchar_t *, wchar_t **)) __asm__(\\\"wcstok_r\\\");@\",\n-    \"-e\", \"s@#define wcsftime __wcsftime_isoc@extern size_t   wcsftime __((wchar_t *, size_t, const wchar_t *, const struct tm *)) __asm__(\\\"__wcsftime_isoc\\\");@\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Avoid_Bool_Define fix\n@@ -8395,9 +8358,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          246\n+#define REGEX_COUNT          245\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            206\n+#define FIX_COUNT            205\n \n /*\n  *  Enumerate the fixes\n@@ -8434,7 +8397,6 @@ typedef enum {\n     ALPHA_PTHREAD_GCC_FIXIDX,\n     ALPHA_PTHREAD_INIT_FIXIDX,\n     ALPHA_SBRK_FIXIDX,\n-    ALPHA_WCHAR_FIXIDX,\n     AVOID_BOOL_DEFINE_FIXIDX,\n     AVOID_BOOL_TYPE_FIXIDX,\n     AVOID_WCHAR_T_TYPE_FIXIDX,\n@@ -8767,11 +8729,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      ALPHA_SBRK_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aAlpha_SbrkTests,   apzAlpha_SbrkPatch, 0 },\n \n-  {  zAlpha_WcharName,    zAlpha_WcharList,\n-     apzAlpha_WcharMachs,\n-     ALPHA_WCHAR_TEST_CT, FD_MACH_ONLY,\n-     aAlpha_WcharTests,   apzAlpha_WcharPatch, 0 },\n-\n   {  zAvoid_Bool_DefineName,    zAvoid_Bool_DefineList,\n      apzAvoid_Bool_DefineMachs,\n      AVOID_BOOL_DEFINE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "4f70a9f3a6401e704731253b457ef2231e43eabc", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -793,27 +793,6 @@ fix = {\n };\n \n \n-/*\n- *  Change external names of wcstok/wcsftime via asm instead of macros on\n- *  Tru64 UNIX V4.0.\n- */\n-fix = {\n-    hackname = alpha_wchar;\n-    files    = wchar.h;\n-\n-    mach     = \"alpha*-dec-osf4*\";\n-    select   = \"#define wcstok wcstok_r\";\n-    sed      = \"s@#define wcstok wcstok_r@\"\n-                \"extern wchar_t *wcstok __((wchar_t *, const wchar_t *, \"\n-                          \"wchar_t **)) __asm__(\\\"wcstok_r\\\");@\";\n-    sed      = \"s@#define wcsftime __wcsftime_isoc@\"\n-                \"extern size_t   wcsftime __((wchar_t *, size_t, const wchar_t *\"\n-                          \", const struct tm *)) __asm__(\\\"__wcsftime_isoc\\\");@\";\n-    test_text = \"#define wcstok wcstok_r\\n\"\n-\t\t\"#define wcsftime __wcsftime_isoc\";\n-};\n-\n-\n /*\n  *  For C++, avoid any typedef or macro definition of bool,\n  *  and use the built in type instead."}, {"sha": "5c0b9dfe86adc3bdcfa8a2e2cab3928ebc548d53", "filename": "fixincludes/tests/base/wchar.h", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887204da16fe676a2d6f551ae0e58fd837375eef/fixincludes%2Ftests%2Fbase%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887204da16fe676a2d6f551ae0e58fd837375eef/fixincludes%2Ftests%2Fbase%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fwchar.h?ref=887204da16fe676a2d6f551ae0e58fd837375eef", "patch": "@@ -1,15 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/wchar.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( ALPHA_WCHAR_CHECK )\n-extern wchar_t *wcstok __((wchar_t *, const wchar_t *, wchar_t **)) __asm__(\"wcstok_r\");\n-extern size_t   wcsftime __((wchar_t *, size_t, const wchar_t *, const struct tm *)) __asm__(\"__wcsftime_isoc\");\n-#endif  /* ALPHA_WCHAR_CHECK */"}, {"sha": "cfdaa9e8b92f7cf04cba4edc22d9f9e7f278eeb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -1,3 +1,22 @@\n+2010-04-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.build (alpha*-dec-osf4*): Remove.\n+\t* config.gcc: Remove alpha*-dec-osf4*, alpha-dec-osf5.0* from list\n+\tof obsolete configurations.\n+\t(alpha*-dec-osf[45]*): Remove alpha*-dec-osf4*, alpha-dec-osf5.0*\n+\tsupport.\n+\t* config/alpha/t-osf4: Renamed to ...\n+\t* config/alpha/t-osf5: ... this.\n+\t* config/alpha/osf.h: Renamed to ...\n+\t* config/alpha/osf5.h: ... this.\n+\tMerged old osf5.h contents.\n+\tUpdate comments.\n+\t(ASM_SPEC): Use ASM_OLDAS_SPEC directly.\n+\t(EXTRA_SPECS): Removed.\n+\t* doc/install.texi (Specific, alpha*-dec-osf5.1): Renamed to\n+\treflect removal of Tru64 UNIX V4.0/V5.0 support.\n+\tDocument that.\n+\n 2010-04-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/contrib.texi (Contributors, Rainer Orth): Update."}, {"sha": "6c837c3c32f027e2c6b0cd3847c1b3a92d0dc49f", "filename": "gcc/config.build", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig.build", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig.build", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.build?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -1,5 +1,5 @@\n # GCC build-specific configuration file.\n-# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007, 2008, 2009\n+# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007, 2008, 2009, 2010\n # Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -51,11 +51,6 @@ build_file_translate=\n \n # System-specific settings.\n case $build in\n-  alpha*-dec-osf4*)\n-    # Some versions of OSF4 (specifically X4.0-9 296.7) have\n-    # a broken tar, so we use cpio instead.\n-    build_install_headers_dir=install-headers-cpio\n-    ;;\n   alpha64-dec-*vms*)\n     build_xm_file=\"vms/xm-vms.h vms/xm-vms64.h\"\n     build_exeext=.exe"}, {"sha": "a5788653dfc3f6ad3da82a9a770b50ddbba705e9", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -207,9 +207,7 @@ md_file=\n \n # Obsolete configurations.\n case ${target} in\n-   alpha*-dec-osf4*\t\t\t\\\n- | alpha*-dec-osf5.0*\t\t\t\\\n- | mips-sgi-irix5*\t\t\t\\\n+   mips-sgi-irix5*\t\t\t\\\n  | mips-sgi-irix6.[0-4]*\t\t\\\n  | *-*-solaris2.7*\t\t\t\\\n  )\n@@ -651,7 +649,7 @@ alpha*-*-openbsd*)\n \ttarget_cpu_default=\"MASK_GAS\"\n \ttmake_file=\"${tmake_file} alpha/t-alpha alpha/t-ieee\"\n \t;;\n-alpha*-dec-osf[45]*)\n+alpha*-dec-osf5.1*)\n \tif test x$stabs = xyes\n \tthen\n \t\ttm_file=\"${tm_file} dbx.h\"\n@@ -661,23 +659,11 @@ alpha*-dec-osf[45]*)\n \t\textra_passes=\"mips-tfile mips-tdump\"\n \tfi\n \tuse_collect2=yes\n-\ttmake_file=\"alpha/t-alpha alpha/t-ieee alpha/t-crtfm alpha/t-osf4\"\n-\ttm_file=\"${tm_file} alpha/osf.h\"\n+\ttmake_file=\"alpha/t-alpha alpha/t-ieee alpha/t-crtfm alpha/t-osf5\"\n+\ttm_file=\"${tm_file} alpha/osf5.h\"\n+\ttm_defines=\"${tm_defines} TARGET_SUPPORT_ARCH=1\"\n \textra_headers=va_list.h\n \tuse_gcc_stdint=provide\n-\tcase ${target} in\n-\t  *-*-osf4*)\n-\t    # Define TARGET_SUPPORT_ARCH except on 4.0a.\n-\t    case ${target} in\n-\t\t*-*-osf4.0a) ;;\n-\t\t*) tm_defines=\"${tm_defines} TARGET_SUPPORT_ARCH=1\"\n-\t    esac\n-\t    ;;\n-\t  *-*-osf5*)\n-\t    tm_file=\"${tm_file} alpha/osf5.h\"\n-\t    tm_defines=\"${tm_defines} TARGET_SUPPORT_ARCH=1\"\n-\t    ;;\n-\tesac\n \tcase ${enable_threads} in\n \t  \"\" | yes | posix)\n \t    thread_file='posix'"}, {"sha": "a384cc870f317739e81f1c12db2f71ca9bc64218", "filename": "gcc/config/alpha/osf.h", "status": "removed", "additions": 0, "deletions": 240, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887204da16fe676a2d6f551ae0e58fd837375eef/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887204da16fe676a2d6f551ae0e58fd837375eef/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=887204da16fe676a2d6f551ae0e58fd837375eef", "patch": "@@ -1,240 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for DEC Alpha on OSF/1.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003,\n-   2004, 2007, 2009 Free Software Foundation, Inc.\n-   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* As of OSF 4.0, as can subtract adjacent labels.  */\n-\n-#undef TARGET_AS_CAN_SUBTRACT_LABELS\n-#define TARGET_AS_CAN_SUBTRACT_LABELS 1\n-\n-/* The GEM libraries for X_float are present, though not used by C.  */\n-\n-#undef TARGET_HAS_XFLOATING_LIBS\n-#define TARGET_HAS_XFLOATING_LIBS 1\n-\n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n-    do {\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"unix\");\t\t\t\\\n-\tbuiltin_define_std (\"SYSTYPE_BSD\");\t\t\\\n-\tbuiltin_define (\"_SYSTYPE_BSD\");\t\t\\\n-\tbuiltin_define (\"__osf__\");\t\t\t\\\n-\tbuiltin_define (\"__digital__\");\t\t\t\\\n-\tbuiltin_define (\"__arch64__\");\t\t\t\\\n-\tbuiltin_define (\"_LONGLONG\");\t\t\t\\\n-\tbuiltin_assert (\"system=unix\");\t\t\t\\\n-\tbuiltin_assert (\"system=xpg4\");\t\t\t\\\n-\t/* Tru64 UNIX V5 has a 16 byte long\t\t\\\n-\t   double type and requires __X_FLOAT\t\t\\\n-\t   to be defined for <math.h>.  */\t\t\\\n-        if (LONG_DOUBLE_TYPE_SIZE == 128)\t\t\\\n-          builtin_define (\"__X_FLOAT\");\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-\t/* Tru64 UNIX V4/V5 provide several ISO C94\t\\\n-\t   features protected by the corresponding\t\\\n-\t   __STDC_VERSION__ macro.  libstdc++ v3\t\\\n-\t   needs them as well.  */\t\t\t\\\n-\tif (c_dialect_cxx ())\t\t\t\t\\\n-\t  builtin_define (\"__STDC_VERSION__=199409L\");\t\\\n-    } while (0)\n-\n-/* Accept DEC C flags for multithreaded programs.  We use _PTHREAD_USE_D4\n-   instead of PTHREAD_USE_D4 since both have the same effect and the former\n-   doesn't invade the users' namespace.  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \\\n-\"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4}\"\n-\n-/* Under OSF4, -p and -pg require -lprof1, and -lprof1 requires -lpdf.  */\n-\n-#define LIB_SPEC \\\n-\"%{p|pg:-lprof1%{pthread|threads:_r} -lpdf} %{a:-lprof2} \\\n- %{threads: -lpthreads} %{pthread|threads: -lpthread -lmach -lexc} -lc\"\n-\n-/* Pass \"-G 8\" to ld because Alpha's CC does.  Pass -O3 if we are\n-   optimizing, -O1 if we are not.  Pass -S to silence `weak symbol\n-   multiply defined' warnings.  Pass -shared, -non_shared or\n-   -call_shared as appropriate.  Pass -hidden_symbol so that our\n-   constructor and call-frame data structures are not accidentally\n-   overridden.  */\n-#define LINK_SPEC  \\\n-  \"-G 8 %{O*:-O3} %{!O*:-O1} -S %{static:-non_shared} \\\n-   %{!static:%{shared:-shared -hidden_symbol _GLOBAL_*} \\\n-   %{!shared:-call_shared}} %{pg} %{taso} %{rpath*}\"\n-\n-#define STARTFILE_SPEC  \\\n-  \"%{!shared:%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}\"\n-\n-#define ENDFILE_SPEC \\\n-  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n-\n-#define MD_STARTFILE_PREFIX \"/usr/lib/cmplrs/cc/\"\n-\n-/* Tru64 UNIX V5.1 requires a special as flag.  Empty by default.  */\n-\n-#define ASM_OLDAS_SPEC \"\"\n-\n-/* In OSF/1 v3.2c, the assembler by default does not output file names which\n-   causes mips-tfile to fail.  Passing -g to the assembler fixes this problem.\n-   ??? Strictly speaking, we need -g only if the user specifies -g.  Passing\n-   it always means that we get slightly larger than necessary object files\n-   if the user does not specify -g.  If we don't pass -g, then mips-tfile\n-   will need to be fixed to work in this case.  Pass -O0 since some\n-   optimization are broken and don't help us anyway.  Pass -nocpp because\n-   there's no point in running CPP on our assembler output.  */\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GAS) != 0\n-#define ASM_SPEC \"%{malpha-as:-g %(asm_oldas) -nocpp %{pg} -O0}\"\n-#else\n-#define ASM_SPEC \"%{!mgas:-g %(asm_oldas) -nocpp %{pg} -O0}\"\n-#endif\n-\n-/* Specify to run a post-processor, mips-tfile after the assembler\n-   has run to stuff the ecoff debug information into the object file.\n-   This is needed because the Alpha assembler provides no way\n-   of specifying such information in the assembly file.  */\n-\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GAS) != 0\n-\n-#define ASM_FINAL_SPEC \"\\\n-%{malpha-as: %{!mno-mips-tfile: \\\n-\t\\n mips-tfile %{v*: -v} \\\n-\t\t%{K: -I %b.o~} \\\n-\t\t%{!K: %{save-temps: -I %b.o~}} \\\n-\t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{,assembler:%i;:%g.s}}}\"\n-\n-#else\n-#define ASM_FINAL_SPEC \"\\\n-%{!mgas: %{!mno-mips-tfile: \\\n-\t\\n mips-tfile %{v*: -v} \\\n-\t\t%{K: -I %b.o~} \\\n-\t\t%{!K: %{save-temps: -I %b.o~}} \\\n-\t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{,assembler:%i;:%g.s}}}\"\n-\n-#endif\n-\n-#undef EXTRA_SPECS\n-#define EXTRA_SPECS { \"asm_oldas\", ASM_OLDAS_SPEC }\n-\n-/* Indicate that we have a stamp.h to use.  */\n-#ifndef CROSS_DIRECTORY_STRUCTURE\n-#define HAVE_STAMP_H 1\n-#endif\n-\n-/* Attempt to turn on access permissions for the stack.  */\n-\n-#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (void *addr)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern int mprotect (const void *, size_t, int);\t\t\t\\\n-  long size = getpagesize ();\t\t\t\t\t\t\\\n-  long mask = ~(size-1);\t\t\t\t\t\t\\\n-  char *page = (char *) (((long) addr) & mask);\t\t\t\t\\\n-  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n-  if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n-    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-}\n-\n-/* Digital UNIX V4.0E (1091)/usr/include/sys/types.h 4.3.49.9 1997/08/14 */\n-#define SIZE_TYPE\t\"long unsigned int\"\n-#define PTRDIFF_TYPE\t\"long int\"\n-\n-#define SIG_ATOMIC_TYPE \"int\"\n-\n-#define INT8_TYPE \"signed char\"\n-#define INT16_TYPE \"short int\"\n-#define INT32_TYPE \"int\"\n-#define INT64_TYPE \"long int\"\n-#define UINT8_TYPE \"unsigned char\"\n-#define UINT16_TYPE \"short unsigned int\"\n-#define UINT32_TYPE \"unsigned int\"\n-#define UINT64_TYPE \"long unsigned int\"\n-\n-#define INT_LEAST8_TYPE \"signed char\"\n-#define INT_LEAST16_TYPE \"short int\"\n-#define INT_LEAST32_TYPE \"int\"\n-#define INT_LEAST64_TYPE \"long int\"\n-#define UINT_LEAST8_TYPE \"unsigned char\"\n-#define UINT_LEAST16_TYPE \"short unsigned int\"\n-#define UINT_LEAST32_TYPE \"unsigned int\"\n-#define UINT_LEAST64_TYPE \"long unsigned int\"\n-\n-#define INT_FAST8_TYPE \"signed char\"\n-#define INT_FAST16_TYPE \"int\"\n-#define INT_FAST32_TYPE \"int\"\n-#define INT_FAST64_TYPE \"long int\"\n-#define UINT_FAST8_TYPE \"unsigned char\"\n-#define UINT_FAST16_TYPE \"unsigned int\"\n-#define UINT_FAST32_TYPE \"unsigned int\"\n-#define UINT_FAST64_TYPE \"long unsigned int\"\n-\n-#define INTPTR_TYPE \"long int\"\n-#define UINTPTR_TYPE \"long unsigned int\"\n-\n-/* The linker will stick __main into the .init section.  */\n-#define HAS_INIT_SECTION\n-#define LD_INIT_SWITCH \"-init\"\n-#define LD_FINI_SWITCH \"-fini\"\n-\n-/* Select a format to encode pointers in exception handling data.  CODE\n-   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n-   true if the symbol may be affected by dynamic relocations.\n-   \n-   We really ought to be using the SREL32 relocations that ECOFF has,\n-   but no version of the native assembler supports creating such things,\n-   and Compaq has no plans to rectify this.  Worse, the dynamic loader\n-   cannot handle unaligned relocations, so we have to make sure that\n-   things get padded appropriately.  */\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t     \\\n-  (TARGET_GAS\t\t\t\t\t\t\t\t     \\\n-   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4) \\\n-   : DW_EH_PE_aligned)\n-\n-/* This is how we tell the assembler that a symbol is weak.  */\n-\n-#define ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, VALUE)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      (*targetm.asm_out.globalize_label) (FILE, NAME);  \\\n-      fputs (\"\\t.weakext\\t\", FILE);\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\\\n-      if (VALUE)\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n-          fputc (' ', FILE);\t\t\t\t\\\n-          assemble_name (FILE, VALUE);\t\t\t\\\n-        }\t\t\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define ASM_WEAKEN_LABEL(FILE, NAME) ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, 0)\n-\n-/* Handle #pragma weak and #pragma pack.  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n-/* Handle #pragma extern_prefix.  Technically only needed for Tru64 5.x,\n-   but easier to manipulate preprocessor bits from here.  */\n-#define TARGET_HANDLE_PRAGMA_EXTERN_PREFIX 1"}, {"sha": "406eda4c4f3dcc6742d8165b7e66e76bb043d06d", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 237, "deletions": 25, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -1,34 +1,116 @@\n-/* Definitions of target machine for GNU compiler, for DEC Alpha on Tru64 5.\n-   Copyright (C) 2000, 2001, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler, for DEC Alpha on\n+   Tru64 UNIX V5.1.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+   Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n-   This file is part of GCC.\n+This file is part of GCC.\n \n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n \n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n \n-   You should have received a copy of the GNU General Public License\n+You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Tru64 5.1 uses IEEE QUAD format.  */\n+/* As of DEC OSF/1 V4.0, as can subtract adjacent labels.  */\n+\n+#undef TARGET_AS_CAN_SUBTRACT_LABELS\n+#define TARGET_AS_CAN_SUBTRACT_LABELS 1\n+\n+/* The GEM libraries for X_float are present, though not used by C.  */\n+\n+#undef TARGET_HAS_XFLOATING_LIBS\n+#define TARGET_HAS_XFLOATING_LIBS 1\n+\n+/* Tru64 UNIX V5.1 uses IEEE QUAD format.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT\t(MASK_FPREGS | MASK_LONG_DOUBLE_128)\n \n+/* The linker appears to perform invalid code optimizations that result\n+   in the ldgp emitted for the exception_receiver pattern being incorrectly\n+   linked.  */\n+#undef TARGET_LD_BUGGY_LDGP\n+#define TARGET_LD_BUGGY_LDGP 1\n+\n+/* Tru64 UNIX V5.1 has the float and long double forms of math functions.  */\n+#undef TARGET_C99_FUNCTIONS\n+#define TARGET_C99_FUNCTIONS  1\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+    do {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\\\n+\tbuiltin_define_std (\"SYSTYPE_BSD\");\t\t\\\n+\tbuiltin_define (\"_SYSTYPE_BSD\");\t\t\\\n+\tbuiltin_define (\"__osf__\");\t\t\t\\\n+\tbuiltin_define (\"__digital__\");\t\t\t\\\n+\tbuiltin_define (\"__arch64__\");\t\t\t\\\n+\tbuiltin_define (\"_LONGLONG\");\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\\\n+\tbuiltin_assert (\"system=xpg4\");\t\t\t\\\n+\t/* Tru64 UNIX V5 has a 16 byte long\t\t\\\n+\t   double type and requires __X_FLOAT\t\t\\\n+\t   to be defined for <math.h>.  */\t\t\\\n+        if (LONG_DOUBLE_TYPE_SIZE == 128)\t\t\\\n+          builtin_define (\"__X_FLOAT\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t/* Tru64 UNIX V4/V5 provide several ISO C94\t\\\n+\t   features protected by the corresponding\t\\\n+\t   __STDC_VERSION__ macro.  libstdc++ v3\t\\\n+\t   needs them as well.  */\t\t\t\\\n+\tif (c_dialect_cxx ())\t\t\t\t\\\n+\t  builtin_define (\"__STDC_VERSION__=199409L\");\t\\\n+    } while (0)\n+\n+/* Accept DEC C flags for multithreaded programs.  We use _PTHREAD_USE_D4\n+   instead of PTHREAD_USE_D4 since both have the same effect and the former\n+   doesn't invade the users' namespace.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+\"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4}\"\n+\n+/* Under DEC OSF/1 V4, -p and -pg require -lprof1, and -lprof1 requires \n+   -lpdf.  */\n+\n+#define LIB_SPEC \\\n+\"%{p|pg:-lprof1%{pthread|threads:_r} -lpdf} %{a:-lprof2} \\\n+ %{threads: -lpthreads} %{pthread|threads: -lpthread -lmach -lexc} -lc\"\n+\n+/* Pass \"-G 8\" to ld because Alpha's CC does.  Pass -O3 if we are\n+   optimizing, -O1 if we are not.  Pass -S to silence `weak symbol\n+   multiply defined' warnings.  Pass -shared, -non_shared or\n+   -call_shared as appropriate.  Pass -hidden_symbol so that our\n+   constructor and call-frame data structures are not accidentally\n+   overridden.  */\n+#define LINK_SPEC  \\\n+  \"-G 8 %{O*:-O3} %{!O*:-O1} -S %{static:-non_shared} \\\n+   %{!static:%{shared:-shared -hidden_symbol _GLOBAL_*} \\\n+   %{!shared:-call_shared}} %{pg} %{taso} %{rpath*}\"\n+\n+#define STARTFILE_SPEC  \\\n+  \"%{!shared:%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}\"\n+\n+#define ENDFILE_SPEC \\\n+  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n+\n+#define MD_STARTFILE_PREFIX \"/usr/lib/cmplrs/cc/\"\n+\n /* In Tru64 UNIX V5.1, Compaq introduced a new assembler\n    (/usr/lib/cmplrs/cc/adu) which currently (versions between 3.04.29 and\n    3.04.32) breaks mips-tfile.  Passing the undocumented -oldas flag reverts\n    to using the old assembler (/usr/lib/cmplrs/cc/as[01]).\n \n-   The V5.0 and V5.0A assemblers silently ignore -oldas, so it can be\n-   specified here.\n-\n    It is clearly not desirable to depend on this undocumented flag, and\n    Compaq wants -oldas to go away soon, but until they have released a\n    new adu that works with mips-tfile, this is the only option.\n@@ -37,20 +119,150 @@ along with GCC; see the file COPYING3.  If not see\n    assembly.  This has been fixed in current versions, but adding -c\n    works as expected for all versions.  */\n \n-#undef ASM_OLDAS_SPEC\n #define ASM_OLDAS_SPEC \"-oldas -c\"\n \n-/* The linker appears to perform invalid code optimizations that result\n-   in the ldgp emitted for the exception_receiver pattern being incorrectly\n-   linked.  */\n-#undef TARGET_LD_BUGGY_LDGP\n-#define TARGET_LD_BUGGY_LDGP 1\n+/* In OSF/1 v3.2c, the assembler by default does not output file names which\n+   causes mips-tfile to fail.  Passing -g to the assembler fixes this problem.\n+   ??? Strictly speaking, we need -g only if the user specifies -g.  Passing\n+   it always means that we get slightly larger than necessary object files\n+   if the user does not specify -g.  If we don't pass -g, then mips-tfile\n+   will need to be fixed to work in this case.  Pass -O0 since some\n+   optimization are broken and don't help us anyway.  Pass -nocpp because\n+   there's no point in running CPP on our assembler output.  */\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GAS) != 0\n+#define ASM_SPEC \"%{malpha-as:-g \" ASM_OLDAS_SPEC \" -nocpp %{pg} -O0}\"\n+#else\n+#define ASM_SPEC \"%{!mgas:-g \" ASM_OLDAS_SPEC \" -nocpp %{pg} -O0}\"\n+#endif\n \n-/* Tru64 v5.1 has the float and long double forms of math functions.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS  1\n+/* Specify to run a post-processor, mips-tfile after the assembler\n+   has run to stuff the ecoff debug information into the object file.\n+   This is needed because the Alpha assembler provides no way\n+   of specifying such information in the assembly file.  */\n+\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GAS) != 0\n+\n+#define ASM_FINAL_SPEC \"\\\n+%{malpha-as: %{!mno-mips-tfile: \\\n+\t\\n mips-tfile %{v*: -v} \\\n+\t\t%{K: -I %b.o~} \\\n+\t\t%{!K: %{save-temps: -I %b.o~}} \\\n+\t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n+\t\t%{,assembler:%i;:%g.s}}}\"\n+\n+#else\n+#define ASM_FINAL_SPEC \"\\\n+%{!mgas: %{!mno-mips-tfile: \\\n+\t\\n mips-tfile %{v*: -v} \\\n+\t\t%{K: -I %b.o~} \\\n+\t\t%{!K: %{save-temps: -I %b.o~}} \\\n+\t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n+\t\t%{,assembler:%i;:%g.s}}}\"\n+\n+#endif\n+\n+/* Indicate that we have a stamp.h to use.  */\n+#ifndef CROSS_DIRECTORY_STRUCTURE\n+#define HAVE_STAMP_H 1\n+#endif\n+\n+/* Attempt to turn on access permissions for the stack.  */\n+\n+#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (void *addr)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  extern int mprotect (const void *, size_t, int);\t\t\t\\\n+  long size = getpagesize ();\t\t\t\t\t\t\\\n+  long mask = ~(size-1);\t\t\t\t\t\t\\\n+  char *page = (char *) (((long) addr) & mask);\t\t\t\t\\\n+  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n+  if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n+    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n+}\n+\n+/* Digital UNIX V4.0E (1091)/usr/include/sys/types.h 4.3.49.9 1997/08/14 */\n+#define SIZE_TYPE\t\"long unsigned int\"\n+#define PTRDIFF_TYPE\t\"long int\"\n+\n+#define SIG_ATOMIC_TYPE \"int\"\n+\n+#define INT8_TYPE \"signed char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE \"long int\"\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE \"long unsigned int\"\n+\n+#define INT_LEAST8_TYPE \"signed char\"\n+#define INT_LEAST16_TYPE \"short int\"\n+#define INT_LEAST32_TYPE \"int\"\n+#define INT_LEAST64_TYPE \"long int\"\n+#define UINT_LEAST8_TYPE \"unsigned char\"\n+#define UINT_LEAST16_TYPE \"short unsigned int\"\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+#define UINT_LEAST64_TYPE \"long unsigned int\"\n+\n+#define INT_FAST8_TYPE \"signed char\"\n+#define INT_FAST16_TYPE \"int\"\n+#define INT_FAST32_TYPE \"int\"\n+#define INT_FAST64_TYPE \"long int\"\n+#define UINT_FAST8_TYPE \"unsigned char\"\n+#define UINT_FAST16_TYPE \"unsigned int\"\n+#define UINT_FAST32_TYPE \"unsigned int\"\n+#define UINT_FAST64_TYPE \"long unsigned int\"\n+\n+#define INTPTR_TYPE \"long int\"\n+#define UINTPTR_TYPE \"long unsigned int\"\n+\n+/* The linker will stick __main into the .init section.  */\n+#define HAS_INIT_SECTION\n+#define LD_INIT_SWITCH \"-init\"\n+#define LD_FINI_SWITCH \"-fini\"\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.\n+   \n+   We really ought to be using the SREL32 relocations that ECOFF has,\n+   but no version of the native assembler supports creating such things,\n+   and Compaq has no plans to rectify this.  Worse, the dynamic loader\n+   cannot handle unaligned relocations, so we have to make sure that\n+   things get padded appropriately.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t     \\\n+  (TARGET_GAS\t\t\t\t\t\t\t\t     \\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4) \\\n+   : DW_EH_PE_aligned)\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#define ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, VALUE)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, NAME);  \\\n+      fputs (\"\\t.weakext\\t\", FILE);\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\\\n+      if (VALUE)\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\\\n+          fputc (' ', FILE);\t\t\t\t\\\n+          assemble_name (FILE, VALUE);\t\t\t\\\n+        }\t\t\t\t\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define ASM_WEAKEN_LABEL(FILE, NAME) ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, 0)\n \n /* The native assembler doesn't understand parenthesis.  */\n #define TARGET_ASM_OPEN_PAREN \"\"\n #define TARGET_ASM_CLOSE_PAREN \"\"\n \n+/* Handle #pragma weak and #pragma pack.  */\n+#define HANDLE_SYSV_PRAGMA 1\n+\n+/* Handle #pragma extern_prefix.  */\n+#define TARGET_HANDLE_PRAGMA_EXTERN_PREFIX 1"}, {"sha": "eabf2728f26f9b92949b3a87e5c996a02e3c1382", "filename": "gcc/config/alpha/t-osf5", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig%2Falpha%2Ft-osf5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fconfig%2Falpha%2Ft-osf5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-osf5?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "previous_filename": "gcc/config/alpha/t-osf4"}, {"sha": "f20c87c0d9471340bf6ab09fc52aafc5daf13266", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -2862,7 +2862,7 @@ information are.\n @item\n @uref{#alpha-x-x,,alpha*-*-*}\n @item\n-@uref{#alpha-dec-osf,,alpha*-dec-osf*}\n+@uref{#alpha-dec-osf51,,alpha*-dec-osf5.1}\n @item\n @uref{#arc-x-elf,,arc-*-elf}\n @item\n@@ -3009,16 +3009,15 @@ shared libraries.\n @html\n <hr />\n @end html\n-@heading @anchor{alpha-dec-osf}alpha*-dec-osf*\n+@heading @anchor{alpha-dec-osf51}alpha*-dec-osf5.1\n Systems using processors that implement the DEC Alpha architecture and\n are running the DEC/Compaq/HP Unix (DEC OSF/1, Digital UNIX, or Compaq/HP\n Tru64 UNIX) operating system, for example the DEC Alpha AXP systems.\n \n As of GCC 3.2, versions before @code{alpha*-dec-osf4} are no longer\n supported.  (These are the versions which identify themselves as DEC\n-OSF/1.)  As of GCC 4.5, support for Tru64 UNIX V4.0 and V5.0 has been\n-obsoleted, but can still be enabled by configuring with\n-@option{--enable-obsolete}.  Support will be removed in GCC 4.6.\n+OSF/1.)  As of GCC 4.6, support for Tru64 UNIX V4.0 and V5.0 has been\n+removed.\n \n On Tru64 UNIX, virtual memory exhausted bootstrap failures\n may be fixed by reconfiguring Kernel Virtual Memory and Swap parameters"}, {"sha": "9aa32c093526507546d1e50efd17d282f53a52c5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -1,3 +1,8 @@\n+2010-04-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.host (alpha*-dec-osf[45]*): Removed alpha*-dec-osf4*,\n+\talpha-dec-osf5.0* support.\n+\n 2010-04-01  Ralf Cors\u00e9pius <ralf.corsepius@rtems.org>\n \n \t* config.host: Add lm32-*-rtems*."}, {"sha": "0e2046686d8ab2e879153d0391e8f0416358c554", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=8c2003509eb3ccfbf9c9ce908a3c62c518e7ff0f", "patch": "@@ -189,7 +189,7 @@ alpha*-*-netbsd*)\n \t;;\n alpha*-*-openbsd*)\n \t;;\n-alpha*-dec-osf[45]*)\n+alpha*-dec-osf5.1*)\n \t;;\n alpha64-dec-*vms*)\n \ttmake_file=\"vms/t-vms vms/t-vms64 alpha/t-vms\""}]}