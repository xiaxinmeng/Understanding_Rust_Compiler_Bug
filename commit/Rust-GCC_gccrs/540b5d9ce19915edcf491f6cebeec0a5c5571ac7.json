{"sha": "540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwYjVkOWNlMTk5MTVlZGNmNDkxZjZjZWJlZWMwYTVjNTU3MWFjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T10:44:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T10:44:27Z"}, "message": "[multiple changes]\n\n2009-04-16  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Make sure that pragma pack is not\n\ttaken into account for VM targets.\n\n2009-04-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* g-calend.ads, g-calend.adb (Week_In_Year): Now calls\n\tYear_Week_In_Year.\n\t(Year_Week_In_Year): New routine which contains the original code from\n\tWeek_In_Year. Add the missing special case for January 1st falling on\n\ta Monday.\n\nFrom-SVN: r146167", "tree": {"sha": "19234e62b03b6b4b5729aab19428cda3fb16a6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19234e62b03b6b4b5729aab19428cda3fb16a6b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/comments", "author": null, "committer": null, "parents": [{"sha": "dae4faf2e17c5c51954dd6f7e29229780371750c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae4faf2e17c5c51954dd6f7e29229780371750c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae4faf2e17c5c51954dd6f7e29229780371750c"}], "stats": {"total": 134, "additions": 88, "deletions": 46}, "files": [{"sha": "b9474b85df63b03ed6305b997a1f980d9ad64b79", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "patch": "@@ -1,3 +1,16 @@\n+2009-04-16  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Make sure that pragma pack is not\n+\ttaken into account for VM targets.\n+\n+2009-04-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* g-calend.ads, g-calend.adb (Week_In_Year): Now calls\n+\tYear_Week_In_Year.\n+\t(Year_Week_In_Year): New routine which contains the original code from\n+\tWeek_In_Year. Add the missing special case for January 1st falling on\n+\ta Monday.\n+\n 2009-04-16  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_dist.adb (Build_From_Any_Call): For a subtype that is a generic"}, {"sha": "8ccd4337b615940d7416a31fe594ea78aa109e6e", "filename": "gcc/ada/g-calend.adb", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2Fg-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2Fg-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.adb?ref=540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "patch": "@@ -293,7 +293,23 @@ package body GNAT.Calendar is\n    ------------------\n \n    function Week_In_Year (Date : Time) return Week_In_Year_Number is\n-      Year       : Year_Number;\n+      Year : Year_Number;\n+      Week : Week_In_Year_Number;\n+      pragma Unreferenced (Year);\n+   begin\n+      Year_Week_In_Year (Date, Year, Week);\n+      return Week;\n+   end Week_In_Year;\n+\n+   -----------------------\n+   -- Year_Week_In_Year --\n+   -----------------------\n+\n+   procedure Year_Week_In_Year\n+     (Date : Time;\n+      Year : out Year_Number;\n+      Week : out Week_In_Year_Number)\n+   is\n       Month      : Month_Number;\n       Day        : Day_Number;\n       Hour       : Hour_Number;\n@@ -381,14 +397,13 @@ package body GNAT.Calendar is\n       is\n          Last_Jan_1 : constant Day_Name :=\n                         Jan_1_Day_Of_Week (Jan_1, Year, Last_Year => True);\n+\n       begin\n          --  These two cases are illustrated in the table below\n \n          return\n            Last_Jan_1 = Thursday\n-             or else\n-               (Last_Jan_1 = Wednesday\n-                  and then Is_Leap (Year - 1));\n+             or else (Last_Jan_1 = Wednesday and then Is_Leap (Year - 1));\n       end Last_Year_Has_53_Weeks;\n \n    --  Start of processing for Week_In_Year\n@@ -437,9 +452,7 @@ package body GNAT.Calendar is\n       --  when special casing the first week of January and the last week of\n       --  December.\n \n-      if Day = 1\n-        and then Month = 1\n-      then\n+      if Day = 1 and then Month = 1 then\n          Jan_1 := Day_Of_Week (Date);\n       else\n          Jan_1 := Day_Of_Week (Time_Of (Year, 1, 1, 0.0));\n@@ -461,19 +474,23 @@ package body GNAT.Calendar is\n          --    +-----+-----+-----+=====+-----+-----+-----+\n \n          if (Day = 1 and then Jan_1 in Friday .. Sunday)\n-           or else\n+               or else\n             (Day = 2 and then Jan_1 in Friday .. Saturday)\n-           or else\n+               or else\n             (Day = 3 and then Jan_1 = Friday)\n          then\n             if Last_Year_Has_53_Weeks (Jan_1, Year) then\n-               return 53;\n+               Week := 53;\n             else\n-               return 52;\n+               Week := 52;\n             end if;\n \n-         --  Special case 2: January 1, 2, 3, 4, 5 and 6 of the first week. In\n-         --  this scenario January 1 does not fall on a Monday.\n+            --  January 1, 2 and 3 belong to the previous year\n+\n+            Year := Year - 1;\n+            return;\n+\n+         --  Special case 2: January 1, 2, 3, 4, 5, 6 and 7 of the first week\n \n          --    +-----+-----+-----+=====+-----+-----+-----+\n          --    | Mon | Tue | Wed # Thu # Fri | Sat | Sun |\n@@ -484,14 +501,19 @@ package body GNAT.Calendar is\n          --    +-----+-----+-----+-----+-----+-----+-----+\n          --    | 31  |  1  |  2  #  3  #  4  |  5  |  6  |\n          --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    |  1  |  2  |  3  #  4  #  5  |  6  |  7  |\n+         --    +-----+-----+-----+=====+-----+-----+-----+\n \n-         elsif (Day <= 4 and then Jan_1 in Tuesday .. Thursday)\n-           or else\n-               (Day = 5  and then Jan_1 in Tuesday .. Wednesday)\n-           or else\n-               (Day = 6  and then Jan_1 = Tuesday)\n+         elsif (Day <= 4 and then Jan_1 in Monday .. Thursday)\n+                  or else\n+               (Day = 5  and then Jan_1 in Monday .. Wednesday)\n+                  or else\n+               (Day = 6  and then Jan_1 in Monday ..  Tuesday)\n+                  or else\n+               (Day = 7  and then Jan_1 = Monday)\n          then\n-            return 1;\n+            Week := 1;\n+            return;\n          end if;\n \n       --  Special case 3: December 29, 30 and 31. These days may belong to\n@@ -507,20 +529,20 @@ package body GNAT.Calendar is\n       --    | 31  |  1  |  2  #  3  #  4  |  5  |  6  |\n       --    +-----+-----+-----+=====+-----+-----+-----+\n \n-      elsif Month = 12\n-        and then Day > 28\n-      then\n+      elsif Month = 12 and then Day > 28 then\n          declare\n             Next_Jan_1 : constant Day_Name :=\n                            Jan_1_Day_Of_Week (Jan_1, Year, Next_Year => True);\n          begin\n             if (Day = 29 and then Next_Jan_1 = Thursday)\n-              or else\n+                  or else\n                (Day = 30 and then Next_Jan_1 in Wednesday .. Thursday)\n-              or else\n+                  or else\n                (Day = 31 and then Next_Jan_1 in Tuesday .. Thursday)\n             then\n-               return 1;\n+               Year := Year + 1;\n+               Week := 1;\n+               return;\n             end if;\n          end;\n       end if;\n@@ -541,7 +563,7 @@ package body GNAT.Calendar is\n       --  origin which falls on Monday.\n \n       Shift := 7 - Day_Name'Pos (Jan_1);\n-      return Start_Week + (Day_In_Year (Date) - Shift - 1) / 7;\n-   end Week_In_Year;\n+      Week  := Start_Week + (Day_In_Year (Date) - Shift - 1) / 7;\n+   end Year_Week_In_Year;\n \n end GNAT.Calendar;"}, {"sha": "39ca20371a09ee5deea7ab5aafa9c1043e30285a", "filename": "gcc/ada/g-calend.ads", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2Fg-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2Fg-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.ads?ref=540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "patch": "@@ -70,18 +70,9 @@ package GNAT.Calendar is\n    --  Return the day name\n \n    function Day_In_Year (Date : Ada.Calendar.Time) return Day_In_Year_Number;\n-   --  Returns the day number in the year. (1st January is day 1 and 31st\n+   --  Return the day number in the year. (1st January is day 1 and 31st\n    --  December is day 365 or 366 for leap year).\n \n-   function Week_In_Year (Date : Ada.Calendar.Time) return Week_In_Year_Number;\n-   --  Returns the week number as defined in ISO 8601. A week always starts on\n-   --  a Monday and the first week of a particular year is the one containing\n-   --  the first Thursday. A year may have 53 weeks when January 1st is a\n-   --  Wednesday and the year is leap or January 1st is a Thursday. Note that\n-   --  the last days of December may belong to the first week on the next year\n-   --  and conversely, the first days of January may belong to the last week\n-   --  of the last year.\n-\n    procedure Split\n      (Date       : Ada.Calendar.Time;\n       Year       : out Ada.Calendar.Year_Number;\n@@ -102,7 +93,23 @@ package GNAT.Calendar is\n       Minute     : Minute_Number;\n       Second     : Second_Number;\n       Sub_Second : Second_Duration := 0.0) return Ada.Calendar.Time;\n-   --  Returns an Ada.Calendar.Time data built from the date and time values\n+   --  Return an Ada.Calendar.Time data built from the date and time values\n+\n+   function Week_In_Year (Date : Ada.Calendar.Time) return Week_In_Year_Number;\n+   --  Return the week number as defined in ISO 8601. A week always starts on\n+   --  a Monday and the first week of a particular year is the one containing\n+   --  the first Thursday. A year may have 53 weeks when January 1st is a\n+   --  Wednesday and the year is leap or January 1st is a Thursday. Note that\n+   --  the last days of December may belong to the first week on the next year\n+   --  and conversely, the first days of January may belong to the last week\n+   --  of the last year.\n+\n+   procedure Year_Week_In_Year\n+     (Date : Ada.Calendar.Time;\n+      Year : out Ada.Calendar.Year_Number;\n+      Week : out Week_In_Year_Number);\n+   --  Return the week number as defined in ISO 8601 along with the year in\n+   --  which the week occurs.\n \n    --  C timeval conversion\n "}, {"sha": "c3b0f345146c9117156ee6002fc28cbc9b65cc0a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540b5d9ce19915edcf491f6cebeec0a5c5571ac7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "patch": "@@ -9365,14 +9365,14 @@ package body Sem_Prag is\n                else\n                   if not Rep_Item_Too_Late (Typ, N) then\n                      if VM_Target = No_VM then\n-                        Set_Is_Packed (Base_Type (Typ));\n+                        Set_Is_Packed            (Base_Type (Typ));\n+                        Set_Has_Pragma_Pack      (Base_Type (Typ));\n+                        Set_Has_Non_Standard_Rep (Base_Type (Typ));\n+\n                      elsif not GNAT_Mode then\n                         Error_Pragma\n                           (\"?pragma% ignored in this configuration\");\n                      end if;\n-\n-                     Set_Has_Pragma_Pack      (Base_Type (Typ));\n-                     Set_Has_Non_Standard_Rep (Base_Type (Typ));\n                   end if;\n                end if;\n \n@@ -9381,13 +9381,13 @@ package body Sem_Prag is\n             else pragma Assert (Is_Record_Type (Typ));\n                if not Rep_Item_Too_Late (Typ, N) then\n                   if VM_Target = No_VM then\n-                     Set_Is_Packed (Base_Type (Typ));\n+                     Set_Is_Packed            (Base_Type (Typ));\n+                     Set_Has_Pragma_Pack      (Base_Type (Typ));\n+                     Set_Has_Non_Standard_Rep (Base_Type (Typ));\n+\n                   elsif not GNAT_Mode then\n                      Error_Pragma (\"?pragma% ignored in this configuration\");\n                   end if;\n-\n-                  Set_Has_Pragma_Pack      (Base_Type (Typ));\n-                  Set_Has_Non_Standard_Rep (Base_Type (Typ));\n                end if;\n             end if;\n          end Pack;"}]}