{"sha": "8ba8ebffc4621552febf47eea470c260488418b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhOGViZmZjNDYyMTU1MmZlYmY0N2VlYTQ3MGMyNjA0ODg0MThiNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-10T18:41:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-10T18:41:44Z"}, "message": "[arm] Fix BE index for single-var vector initialisers (PR91060)\n\nIf a vector constructor has a single nonconstant element,\nneon_expand_vector_init loads the constant lanes and then inserts the\nnonconstant value.  The problem was that it was doing the insertion\nusing the arm_neon.h neon_vset_lane<mode> patterns, which use\narchitectural lane numbering rather than GCC lane numbering.\n\n2019-07-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/91060\n\t* config/arm/iterators.md (V2DI_ONLY): New mode iterator.\n\t* config/arm/neon.md (vec_set<mode>_internal): Add a '@' prefix.\n\t(vec_setv2di_internal): Reexpress as...\n\t(@vec_set<V2DI_ONLY:mode>_internal): ...this.\n\t* config/arm/arm.c (neon_expand_vector_init): Use gen_vec_set_internal\n\trather than gen_neon_vset_lane<mode>.\n\nFrom-SVN: r273365", "tree": {"sha": "5fe02dc25c3ed66bc8fbe055e569aaae21a0fede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fe02dc25c3ed66bc8fbe055e569aaae21a0fede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba8ebffc4621552febf47eea470c260488418b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba8ebffc4621552febf47eea470c260488418b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba8ebffc4621552febf47eea470c260488418b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba8ebffc4621552febf47eea470c260488418b5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b8d9b23371d3ee0f7a9c1d99e80745400542930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8d9b23371d3ee0f7a9c1d99e80745400542930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8d9b23371d3ee0f7a9c1d99e80745400542930"}], "stats": {"total": 62, "additions": 22, "deletions": 40}, "files": [{"sha": "4c75120a61a3e3243b868f802317d11234a2bcce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ba8ebffc4621552febf47eea470c260488418b5", "patch": "@@ -1,3 +1,13 @@\n+2019-07-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/91060\n+\t* config/arm/iterators.md (V2DI_ONLY): New mode iterator.\n+\t* config/arm/neon.md (vec_set<mode>_internal): Add a '@' prefix.\n+\t(vec_setv2di_internal): Reexpress as...\n+\t(@vec_set<V2DI_ONLY:mode>_internal): ...this.\n+\t* config/arm/arm.c (neon_expand_vector_init): Use gen_vec_set_internal\n+\trather than gen_neon_vset_lane<mode>.\n+\n 2019-07-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/91102"}, {"sha": "81286cadf32f908e045d704128c5e06842e0cc92", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8ba8ebffc4621552febf47eea470c260488418b5", "patch": "@@ -12471,7 +12471,7 @@ neon_expand_vector_init (rtx target, rtx vals)\n   if (n_var == 1)\n     {\n       rtx copy = copy_rtx (vals);\n-      rtx index = GEN_INT (one_var);\n+      rtx merge_mask = GEN_INT (1 << one_var);\n \n       /* Load constant part of vector, substitute neighboring value for\n \t varying element.  */\n@@ -12480,38 +12480,7 @@ neon_expand_vector_init (rtx target, rtx vals)\n \n       /* Insert variable.  */\n       x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, one_var));\n-      switch (mode)\n-\t{\n-\tcase E_V8QImode:\n-\t  emit_insn (gen_neon_vset_lanev8qi (target, x, target, index));\n-\t  break;\n-\tcase E_V16QImode:\n-\t  emit_insn (gen_neon_vset_lanev16qi (target, x, target, index));\n-\t  break;\n-\tcase E_V4HImode:\n-\t  emit_insn (gen_neon_vset_lanev4hi (target, x, target, index));\n-\t  break;\n-\tcase E_V8HImode:\n-\t  emit_insn (gen_neon_vset_lanev8hi (target, x, target, index));\n-\t  break;\n-\tcase E_V2SImode:\n-\t  emit_insn (gen_neon_vset_lanev2si (target, x, target, index));\n-\t  break;\n-\tcase E_V4SImode:\n-\t  emit_insn (gen_neon_vset_lanev4si (target, x, target, index));\n-\t  break;\n-\tcase E_V2SFmode:\n-\t  emit_insn (gen_neon_vset_lanev2sf (target, x, target, index));\n-\t  break;\n-\tcase E_V4SFmode:\n-\t  emit_insn (gen_neon_vset_lanev4sf (target, x, target, index));\n-\t  break;\n-\tcase E_V2DImode:\n-\t  emit_insn (gen_neon_vset_lanev2di (target, x, target, index));\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+      emit_insn (gen_vec_set_internal (mode, target, x, merge_mask, target));\n       return;\n     }\n "}, {"sha": "eca16636ade577d84dc62523d066e72f79dc38f6", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=8ba8ebffc4621552febf47eea470c260488418b5", "patch": "@@ -186,6 +186,9 @@\n ;; Modes with 8-bit elements.\n (define_mode_iterator VE [V8QI V16QI])\n \n+;; V2DI only (for use with @ patterns).\n+(define_mode_iterator V2DI_ONLY [V2DI])\n+\n ;; Modes with 64-bit elements only.\n (define_mode_iterator V64 [DI V2DI])\n "}, {"sha": "6333e0ea3ea68d73bed1f7c4d8ca090090ad68cc", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba8ebffc4621552febf47eea470c260488418b5/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=8ba8ebffc4621552febf47eea470c260488418b5", "patch": "@@ -319,7 +319,7 @@\n   \"vld1.<V_sz_elem>\\t{%q0}, %A1\"\n   [(set_attr \"type\" \"neon_load1_1reg<q>\")])\n \n-(define_insn \"vec_set<mode>_internal\"\n+(define_insn \"@vec_set<mode>_internal\"\n   [(set (match_operand:VD_LANE 0 \"s_register_operand\" \"=w,w\")\n         (vec_merge:VD_LANE\n           (vec_duplicate:VD_LANE\n@@ -340,7 +340,7 @@\n }\n   [(set_attr \"type\" \"neon_load1_all_lanes<q>,neon_from_gp<q>\")])\n \n-(define_insn \"vec_set<mode>_internal\"\n+(define_insn \"@vec_set<mode>_internal\"\n   [(set (match_operand:VQ2 0 \"s_register_operand\" \"=w,w\")\n         (vec_merge:VQ2\n           (vec_duplicate:VQ2\n@@ -369,12 +369,12 @@\n   [(set_attr \"type\" \"neon_load1_all_lanes<q>,neon_from_gp<q>\")]\n )\n \n-(define_insn \"vec_setv2di_internal\"\n-  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w,w\")\n-        (vec_merge:V2DI\n-          (vec_duplicate:V2DI\n+(define_insn \"@vec_set<mode>_internal\"\n+  [(set (match_operand:V2DI_ONLY 0 \"s_register_operand\" \"=w,w\")\n+        (vec_merge:V2DI_ONLY\n+          (vec_duplicate:V2DI_ONLY\n             (match_operand:DI 1 \"nonimmediate_operand\" \"Um,r\"))\n-          (match_operand:V2DI 3 \"s_register_operand\" \"0,0\")\n+          (match_operand:V2DI_ONLY 3 \"s_register_operand\" \"0,0\")\n           (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_NEON\"\n {"}]}