{"sha": "2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzZjlmM2Q2MjQ1M2I1NjNmYzBmOWM0YTc5OTgyZWYwYjAzZDI0YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-20T16:39:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-20T16:39:28Z"}, "message": "Use symbolic codes for exit.\n\nFrom-SVN: r13938", "tree": {"sha": "96b1726481535d65dacd329f0027bf61226b8bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96b1726481535d65dacd329f0027bf61226b8bb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/comments", "author": null, "committer": null, "parents": [{"sha": "65ed39df8921bc120c4202d4e50e94ffe72da5cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ed39df8921bc120c4202d4e50e94ffe72da5cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65ed39df8921bc120c4202d4e50e94ffe72da5cb"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "3464d3fb48fa22c59c2a6caee280b793c3711747", "filename": "gcc/fix-header.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "patch": "@@ -1,5 +1,5 @@\n /* fix-header.c - Make C header file suitable for C++.\n-   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -624,7 +624,7 @@ read_scan_file (in_fname, argc, argv)\n     fprintf (stderr, \"(%s: %d errors and %d warnings from cpp)\\n\",\n \t     inc_filename, scan_in.errors, warnings);\n   if (scan_in.errors)\n-    exit (0);\n+    exit (SUCCESS_EXIT_CODE);\n \n   /* Traditionally, getc and putc are defined in terms of _filbuf and _flsbuf.\n      If so, those functions are also required.  */\n@@ -689,7 +689,7 @@ read_scan_file (in_fname, argc, argv)\n     {\n       if (verbose)\n \tfprintf (stderr, \"%s: OK, nothing needs to be done.\\n\", inc_filename);\n-      exit (0);\n+      exit (SUCCESS_EXIT_CODE);\n     }\n   if (!verbose)\n     fprintf (stderr, \"%s: fixing %s\\n\", progname, inc_filename);\n@@ -1077,7 +1077,7 @@ main (argc, argv)\n     {\n       fprintf (stderr, \"%s: Usage: foo.h infile.h outfile.h options\\n\",\n \t       progname);\n-      exit (-1);\n+      exit (FATAL_EXIT_CODE);\n     }\n \n   inc_filename = argv[1];\n@@ -1095,7 +1095,7 @@ main (argc, argv)\n \t    {\n \t      if (verbose)\n \t\tfprintf (stderr, \"%s: ignoring %s\\n\", progname, inc_filename);\n-\t      exit (0);\n+\t      exit (SUCCESS_EXIT_CODE);\n \t    }\n \t}\n \t  \n@@ -1157,13 +1157,13 @@ main (argc, argv)\n       fprintf (stderr, \"%s: Cannot open '%s' for reading -\",\n \t       progname, argv[2]);\n       perror (NULL);\n-      exit (-1);\n+      exit (FATAL_EXIT_CODE);\n     }\n   if (fstat (inf_fd, &sbuf) < 0)\n     {\n       fprintf (stderr, \"%s: Cannot get size of '%s' -\", progname, argv[2]);\n       perror (NULL);\n-      exit (-1);\n+      exit (FATAL_EXIT_CODE);\n     }\n   inf_size = sbuf.st_size;\n   inf_buffer = (char *) xmalloc (inf_size + 2);\n@@ -1180,7 +1180,7 @@ main (argc, argv)\n \t{\n \t  fprintf (stderr, \"%s: Failed to read '%s' -\", progname, argv[2]);\n \t  perror (NULL);\n-\t  exit (-1);\n+\t  exit (FATAL_EXIT_CODE);\n \t}\n       if (i == 0)\n \t{\n@@ -1203,7 +1203,7 @@ main (argc, argv)\n       fprintf (stderr, \"%s: Cannot open '%s' for writing -\",\n \t       progname, argv[3]);\n       perror (NULL);\n-      exit (-1);\n+      exit (FATAL_EXIT_CODE);\n     }\n \n   lineno = 1;"}, {"sha": "fe9dce885974193090dc549d1cd5dfa627349a51", "filename": "gcc/gcov.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "patch": "@@ -1,7 +1,6 @@\n /* Gcov.c: prepend line execution counts and branch probabilities to a\n    source file.\n-   Copyright (C) 1990, 1991, 1992, 1993, 1994, 1996, 1997 Free Software\n-   Foundation, Inc.\n+   Copyright (C) 1990, 91, 92, 93, 94, 96, 1997 Free Software Foundation, Inc.\n    Contributed by James E. Wilson of Cygnus Support.\n    Mongled by Bob Manson of Cygnus Support.\n \n@@ -252,7 +251,7 @@ xmalloc (size)\n   if (value == 0)\n     {\n       fprintf (stderr, \"error: virtual memory exhausted\");\n-      exit (1);\n+      exit (FATAL_EXIT_CODE);\n     }\n   return value;\n }"}, {"sha": "e94b79c0f7af590379717460e6e8444ea9429b44", "filename": "gcc/protoize.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=2e3f9f3d62453b563fc0f9c4a79982ef0b03d24a", "patch": "@@ -1,5 +1,5 @@\n /* Protoize program - Original version by Ron Guilmette (rfg@segfault.us.com).\n-   Copyright (C) 1989, 92-95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 92-96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -666,7 +666,7 @@ xmalloc (byte_count)\n   if (rv == NULL)\n     {\n       fprintf (stderr, \"\\n%s: virtual memory exceeded\\n\", pname);\n-      exit (1);\n+      exit (FATAL_EXIT_CODE);\n       return 0;\t\t/* avoid warnings */\n     }\n   else\n@@ -686,7 +686,7 @@ xrealloc (old_space, byte_count)\n   if (rv == NULL)\n     {\n       fprintf (stderr, \"\\n%s: virtual memory exceeded\\n\", pname);\n-      exit (1);\n+      exit (FATAL_EXIT_CODE);\n       return 0;\t\t/* avoid warnings */\n     }\n   else\n@@ -739,7 +739,7 @@ void\n fancy_abort ()\n {\n   fprintf (stderr, \"%s: internal abort\\n\", pname);\n-  exit (1);\n+  exit (FATAL_EXIT_CODE);\n }\n \f\n /* Make a duplicate of the first N bytes of a given string in a newly\n@@ -877,7 +877,7 @@ usage ()\n   fprintf (stderr, \"%s: usage '%s [ -VqfnkNlgC ] [ -B <dirname> ] [ filename ... ]'\\n\",\n \t   pname, pname);\n #endif /* !defined (UNPROTOIZE) */\n-  exit (1);\n+  exit (FATAL_EXIT_CODE);\n }\n \n /* Return true if the given filename (assumed to be an absolute filename)\n@@ -1364,18 +1364,18 @@ abspath (cwd, rel_filename)\n                     while (outp >= abs_buffer && *outp != '/')\n               \toutp--;\n                     if (outp < abs_buffer)\n-                {\n-                  /* Catch cases like /.. where we try to backup to a\n-                     point above the absolute root of the logical file\n-                     system.  */\n-\n-              \t  fprintf (stderr, \"%s: invalid file name: %s\\n\",\n-\t\t\t   pname, rel_filename);\n-              \t  exit (1);\n-              \t}\n+\t\t      {\n+\t\t\t/* Catch cases like /.. where we try to backup to a\n+\t\t\t   point above the absolute root of the logical file\n+\t\t\t   system.  */\n+\n+\t\t\tfprintf (stderr, \"%s: invalid file name: %s\\n\",\n+\t\t\t\t pname, rel_filename);\n+\t\t\texit (FATAL_EXIT_CODE);\n+\t\t      }\n                     *++outp = '\\0';\n                     continue;\n-            }\n+\t\t  }\n         }\n       *outp++ = *inp++;\n     }\n@@ -1541,7 +1541,7 @@ aux_info_corrupted ()\n {\n   fprintf (stderr, \"\\n%s: fatal error: aux info file corrupted at line %d\\n\",\n \t   pname, current_aux_info_lineno);\n-  exit (1);\n+  exit (FATAL_EXIT_CODE);\n }\n \n /* ??? This comment is vague.  Say what the condition is for.  */\n@@ -1867,7 +1867,7 @@ save_def_or_dec (l, is_syscalls)\n \t\t\t def_dec_p->file->hash_entry->symbol,\n \t\t\t def_dec_p->line,\n \t\t\t def_dec_p->hash_entry->symbol);\n-                exit (1);\n+                exit (FATAL_EXIT_CODE);\n               }\n             free_def_dec (def_dec_p);\n             return;\n@@ -4575,7 +4575,7 @@ main (argc, argv)\n     {\n       fprintf (stderr, \"%s: cannot get working directory: %s\\n\",\n \t       pname, my_strerror(errno));\n-      exit (1);\n+      exit (FATAL_EXIT_CODE);\n     }\n \n   /* By default, convert the files in the current directory.  */\n@@ -4700,9 +4700,8 @@ main (argc, argv)\n         fprintf (stderr, \"%s: %s\\n\", pname, version_string);\n       do_processing ();\n     }\n-  if (errors)\n-    exit (1);\n-  else\n-    exit (0);\n+\n+  exit (errors ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n+\n   return 1;\n }"}]}