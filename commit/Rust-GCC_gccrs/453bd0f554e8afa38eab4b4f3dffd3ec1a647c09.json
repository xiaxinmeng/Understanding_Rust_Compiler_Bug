{"sha": "453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzYmQwZjU1NGU4YWZhMzhlYWI0YjRmM2RmZmQzZWMxYTY0N2MwOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-02-08T15:35:12Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-02-08T15:35:12Z"}, "message": "re PR target/19806 (cris-axis-elf testsuite failure: gcc.c-torture/execute/20001130-1.c compilation,  -O0)\n\n\tPR target/19806\n\t* config/cris/cris.c (in_code): New variable.\n\t(cris_output_addr_const): Now a static function, a wrapper for\n\toutput_addr_const.\n\t(cris_asm_output_symbol_ref): New function, broken out SYMBOL_REF\n\tcase from old cris_output_addr_const.\n\t(cris_asm_output_label_ref): Similar for LABEL_REF.\n\t(cris_output_addr_const_extra): Similar for UNSPEC.\n\t* config/cris/cris.h (OUTPUT_ADDR_CONST_EXTRA)\n\t(ASM_OUTPUT_SYMBOL_REF, ASM_OUTPUT_LABEL_REF): Define.\n\t* config/cris/cris-protos.h (cris_output_addr_const): Remove\n\tdeclaration.\n\t(cris_asm_output_symbol_ref, cris_output_addr_const_extra)\n\t(cris_asm_output_label_ref): Declare.\n\nFrom-SVN: r94738", "tree": {"sha": "67f378a8e25e7f88e70640fb844197d14630e5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f378a8e25e7f88e70640fb844197d14630e5c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "749c6ef9922642ee4f01a263f3803b3dcf8d850d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749c6ef9922642ee4f01a263f3803b3dcf8d850d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749c6ef9922642ee4f01a263f3803b3dcf8d850d"}], "stats": {"total": 268, "additions": 122, "deletions": 146}, "files": [{"sha": "13f8d9a9928141199ee2292b7a7b28fbe5db8a54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "patch": "@@ -1,3 +1,20 @@\n+2005-02-08  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/19806\n+\t* config/cris/cris.c (in_code): New variable.\n+\t(cris_output_addr_const): Now a static function, a wrapper for\n+\toutput_addr_const.\n+\t(cris_asm_output_symbol_ref): New function, broken out SYMBOL_REF\n+\tcase from old cris_output_addr_const.\n+\t(cris_asm_output_label_ref): Similar for LABEL_REF.\n+\t(cris_output_addr_const_extra): Similar for UNSPEC.\n+\t* config/cris/cris.h (OUTPUT_ADDR_CONST_EXTRA)\n+\t(ASM_OUTPUT_SYMBOL_REF, ASM_OUTPUT_LABEL_REF): Define.\n+\t* config/cris/cris-protos.h (cris_output_addr_const): Remove\n+\tdeclaration.\n+\t(cris_asm_output_symbol_ref, cris_output_addr_const_extra)\n+\t(cris_asm_output_label_ref): Declare.\n+\n 2005-02-08  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR preprocessor/19801"}, {"sha": "86b0c07acf44fd53f523f5e82871198207a61cbb", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "patch": "@@ -42,9 +42,11 @@ extern int cris_legitimate_pic_operand (rtx);\n extern int cris_gotless_symbol (rtx);\n extern int cris_got_symbol (rtx);\n extern int cris_symbol (rtx);\n-extern void cris_output_addr_const (FILE *, rtx);\n+extern void cris_asm_output_symbol_ref (FILE *, rtx);\n+extern bool cris_output_addr_const_extra (FILE *, rtx);\n extern int cris_cfun_uses_pic_table (void);\n #endif /* RTX_CODE */\n+extern void cris_asm_output_label_ref (FILE *, char *);\n extern void cris_target_asm_named_section (const char *, unsigned int, tree);\n \n extern int cris_return_address_on_stack (void);"}, {"sha": "4756f8ca02c3986306deae4419ad9184ef0fa5ad", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 93, "deletions": 145, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "patch": "@@ -83,13 +83,19 @@ static char cris_output_insn_is_bound = 0;\n    just the \"sym:GOTOFF\" part.  */\n static int cris_pic_sympart_only = 0;\n \n+/* In code for output macros, this is how we know whether e.g. constant\n+   goes in code or in a static initializer.  */\n+static int in_code = 0;\n+\n /* Fix for reg_overlap_mentioned_p.  */\n static int cris_reg_overlap_mentioned_p (rtx, rtx);\n \n static void cris_print_base (rtx, FILE *);\n \n static void cris_print_index (rtx, FILE *);\n \n+static void cris_output_addr_const (FILE *, rtx);\n+\n static struct machine_function * cris_init_machine_status (void);\n \n static rtx cris_struct_value_rtx (tree, int);\n@@ -2972,178 +2978,120 @@ cris_split_movdx (rtx *operands)\n   return val;\n }\n \n-/* This is in essence a copy of output_addr_const altered to output\n-   symbolic operands as PIC.\n-\n-   FIXME: Add hooks similar to ASM_OUTPUT_SYMBOL_REF to get this effect in\n-   the \"real\" output_addr_const.  All we need is one for LABEL_REF (and\n-   one for CODE_LABEL?).  */\n+/* Use from within code, from e.g. PRINT_OPERAND and\n+   PRINT_OPERAND_ADDRESS.  Macros used in output_addr_const need to emit\n+   different things depending on whether code operand or constant is\n+   emitted.  */\n \n-void\n+static void\n cris_output_addr_const (FILE *file, rtx x)\n {\n-  int is_plt = 0;\n-\n-restart:\n-  switch (GET_CODE (x))\n-    {\n-    case UNSPEC:\n-      ASSERT_PLT_UNSPEC (x);\n-      x = XVECEXP (x, 0, 0);\n-      is_plt = 1;\n-\n-      /* Fall through.  */\n-    case SYMBOL_REF:\n-      if (flag_pic)\n-\t{\n-\t  const char *origstr = XSTR (x, 0);\n-\t  const char *str;\n+  in_code++;\n+  output_addr_const (file, x);\n+  in_code--;\n+}\n \n-\t  str = (* targetm.strip_name_encoding) (origstr);\n+/* Worker function for ASM_OUTPUT_SYMBOL_REF.  */\n \n-\t  if (is_plt)\n-\t    {\n-\t      if (cris_pic_sympart_only)\n-\t\t{\n-\t\t  assemble_name (file, str);\n-\t\t  fprintf (file, \":PLTG\");\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (TARGET_AVOID_GOTPLT)\n-\t\t    /* We shouldn't get here.  */\n-\t\t    abort ();\n+void\n+cris_asm_output_symbol_ref (FILE *file, rtx x)\n+{\n+  if (flag_pic && in_code > 0)\n+    {\n+      const char *origstr = XSTR (x, 0);\n+      const char *str;\n \n-\t\t  fprintf (file, \"[$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n-\t\t  assemble_name (file, XSTR (x, 0));\n+      str = (* targetm.strip_name_encoding) (origstr);\n \n-\t\t  if (flag_pic == 1)\n-\t\t    fprintf (file, \":GOTPLT16]\");\n-\t\t  else\n-\t\t    fprintf (file, \":GOTPLT]\");\n-\t\t}\n-\t    }\n-\t  else if (cris_gotless_symbol (x))\n-\t    {\n-\t      if (! cris_pic_sympart_only)\n-\t\tfprintf (file, \"$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n-\t      assemble_name (file, str);\n-\t      fprintf (file, \":GOTOFF\");\n-\t    }\n-\t  else if (cris_got_symbol (x))\n-\t    {\n-\t      if (cris_pic_sympart_only)\n-\t\tabort ();\n-\t      fprintf (file, \"[$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n-\t      assemble_name (file, XSTR (x, 0));\n+      if (cris_gotless_symbol (x))\n+\t{\n+\t  if (! cris_pic_sympart_only)\n+\t    fprintf (file, \"$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n+\t  assemble_name (file, str);\n+\t  fprintf (file, \":GOTOFF\");\n+\t}\n+      else if (cris_got_symbol (x))\n+\t{\n+\t  if (cris_pic_sympart_only)\n+\t    abort ();\n+\t  fprintf (file, \"[$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n+\t  assemble_name (file, XSTR (x, 0));\n \n-\t      if (flag_pic == 1)\n-\t\tfprintf (file, \":GOT16]\");\n-\t      else\n-\t\tfprintf (file, \":GOT]\");\n-\t    }\n+\t  if (flag_pic == 1)\n+\t    fprintf (file, \":GOT16]\");\n \t  else\n-\t    LOSE_AND_RETURN (\"unexpected PIC symbol\", x);\n-\n-\t  /* Sanity check.  */\n-\t  if (! current_function_uses_pic_offset_table)\n-\t    output_operand_lossage (\"PIC register isn't set up\");\n+\t    fprintf (file, \":GOT]\");\n \t}\n       else\n-\tassemble_name (file, XSTR (x, 0));\n-      break;\n+\tLOSE_AND_RETURN (\"unexpected PIC symbol\", x);\n \n-    case LABEL_REF:\n-      /* If we get one of those here, it should be dressed as PIC.  Branch\n-\t labels are normally output with the 'l' specifier, which means it\n-\t will go directly to output_asm_label and not end up here.  */\n-      if (GET_CODE (XEXP (x, 0)) != CODE_LABEL\n-\t  && (GET_CODE (XEXP (x, 0)) != NOTE\n-\t      || NOTE_LINE_NUMBER (XEXP (x, 0)) != NOTE_INSN_DELETED_LABEL))\n-\tfatal_insn (\"unexpected address expression\", x);\n+      /* Sanity check.  */\n+      if (! current_function_uses_pic_offset_table)\n+\toutput_operand_lossage (\"PIC register isn't set up\");\n+    }\n+  else\n+    assemble_name (file, XSTR (x, 0));\n+}\n \n-      if (flag_pic)\n-\t{\n-\t  if (cris_gotless_symbol (x))\n-\t    {\n-\t      if (! cris_pic_sympart_only)\n-\t\tfprintf (file, \"$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n-\t      cris_output_addr_const (file, XEXP (x, 0));\n+/* Worker function for ASM_OUTPUT_LABEL_REF.  */\n \n-\t      fprintf (file, \":GOTOFF\");\n-\t    }\n-\t  else\n-\t    /* Labels are never marked as global symbols.  */\n-\t    fatal_insn (\"unexpected PIC symbol\", x);\n+void\n+cris_asm_output_label_ref (FILE *file, char *buf)\n+{\n+  if (flag_pic && in_code > 0)\n+    {\n+      if (! cris_pic_sympart_only)\n+\tfprintf (file, \"$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n+      assemble_name (file, buf);\n \n-\t  /* Sanity check.  */\n-\t  if (! current_function_uses_pic_offset_table)\n-\t    internal_error (\"emitting PIC operand, but PIC register isn't set up\");\n-\t  break;\n-\t}\n+      fprintf (file, \":GOTOFF\");\n \n-      output_addr_const (file, x);\n-      break;\n+      /* Sanity check.  */\n+      if (! current_function_uses_pic_offset_table)\n+\tinternal_error (\"emitting PIC operand, but PIC register isn't set up\");\n+    }\n+  else\n+    assemble_name (file, buf);\n+}\n \n-    case NOTE:\n-      if (NOTE_LINE_NUMBER (x) != NOTE_INSN_DELETED_LABEL)\n-\tfatal_insn (\"unexpected NOTE as addr_const:\", x);\n-    case CODE_LABEL:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case ZERO_EXTEND:\n-    case SIGN_EXTEND:\n-      output_addr_const (file, x);\n-      break;\n+/* Worker function for OUTPUT_ADDR_CONST_EXTRA.  */\n \n-    case CONST:\n-      /* This used to output parentheses around the expression,\n-\t but that does not work on the 386 (either ATT or BSD assembler).  */\n-      cris_output_addr_const (file, XEXP (x, 0));\n-      break;\n+bool\n+cris_output_addr_const_extra (FILE *file, rtx x)\n+{\n+  switch (GET_CODE (x))\n+    {\n+      const char *origstr;\n+      const char *str;\n \n-    case PLUS:\n-      /* Some assemblers need integer constants to appear last (e.g. masm).  */\n-      if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n+    case UNSPEC:\n+      ASSERT_PLT_UNSPEC (x);\n+      x = XVECEXP (x, 0, 0);\n+      origstr = XSTR (x, 0);\n+      str = (* targetm.strip_name_encoding) (origstr);\n+      if (cris_pic_sympart_only)\n \t{\n-\t  cris_output_addr_const (file, XEXP (x, 1));\n-\t  if (INTVAL (XEXP (x, 0)) >= 0)\n-\t    fprintf (file, \"+\");\n-\t  output_addr_const (file, XEXP (x, 0));\n+\t  assemble_name (file, str);\n+\t  fprintf (file, \":PLTG\");\n \t}\n       else\n \t{\n-\t  cris_output_addr_const (file, XEXP (x, 0));\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT\n-\t      || INTVAL (XEXP (x, 1)) >= 0)\n-\t    fprintf (file, \"+\");\n-\t  cris_output_addr_const (file, XEXP (x, 1));\n-\t}\n-      break;\n+\t  if (TARGET_AVOID_GOTPLT)\n+\t    /* We shouldn't get here.  */\n+\t    abort ();\n \n-    case MINUS:\n-      /* Avoid outputting things like x-x or x+5-x,\n-\t since some assemblers can't handle that.  */\n-      x = simplify_subtraction (x);\n-      if (GET_CODE (x) != MINUS)\n-\tgoto restart;\n-\n-      cris_output_addr_const (file, XEXP (x, 0));\n-      fprintf (file, \"-\");\n-      if ((GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t   && INTVAL (XEXP (x, 1)) < 0)\n-\t  || GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t{\n-\t  fprintf (file, \"%s\", targetm.asm_out.open_paren);\n-\t  cris_output_addr_const (file, XEXP (x, 1));\n-\t  fprintf (file, \"%s\", targetm.asm_out.close_paren);\n+\t  fprintf (file, \"[$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n+\t  assemble_name (file, XSTR (x, 0));\n+\n+\t  if (flag_pic == 1)\n+\t    fprintf (file, \":GOTPLT16]\");\n+\t  else\n+\t    fprintf (file, \":GOTPLT]\");\n \t}\n-      else\n-\toutput_addr_const (file, XEXP (x, 1));\n-      break;\n+      return true;\n \n     default:\n-      LOSE_AND_RETURN (\"unexpected address expression\", x);\n+      return false;\n     }\n }\n "}, {"sha": "c0435f7e65ce5d6bded99917d2bca3a082339214", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453bd0f554e8afa38eab4b4f3dffd3ec1a647c09/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=453bd0f554e8afa38eab4b4f3dffd3ec1a647c09", "patch": "@@ -1352,6 +1352,9 @@ struct cum_args {int regs;};\n \n /* Node: Data Output */\n \n+#define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL) \\\n+  do { if (!cris_output_addr_const_extra (STREAM, X)) goto FAIL; } while (0)\n+\n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C) (C) == '@'\n \n /* Node: Uninitialized Data */\n@@ -1422,6 +1425,12 @@ struct cum_args {int regs;};\n \n #define SUPPORTS_WEAK 1\n \n+#define ASM_OUTPUT_SYMBOL_REF(STREAM, SYM) \\\n+ cris_asm_output_symbol_ref (STREAM, SYM)\n+\n+#define ASM_OUTPUT_LABEL_REF(STREAM, BUF) \\\n+ cris_asm_output_label_ref (STREAM, BUF)\n+\n /* Remove any previous definition (elfos.h).  */\n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\\"}]}