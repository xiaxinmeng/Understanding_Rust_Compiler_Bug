{"sha": "038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4YzJmNTA2N2QzY2RiZTJmZTZiOTk2ZjE5ODk4ZDAwOTFlMjlhNA==", "commit": {"author": {"name": "Lars Brinkhoff", "email": "lars@nocrew.org", "date": "2001-08-23T13:40:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-08-23T13:40:40Z"}, "message": "Remove unused function\n\nFrom-SVN: r45131", "tree": {"sha": "0a53107f4c62c00edf5bffade285653c2da19443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a53107f4c62c00edf5bffade285653c2da19443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/comments", "author": {"login": "larsbrinkhoff", "id": 775050, "node_id": "MDQ6VXNlcjc3NTA1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/775050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsbrinkhoff", "html_url": "https://github.com/larsbrinkhoff", "followers_url": "https://api.github.com/users/larsbrinkhoff/followers", "following_url": "https://api.github.com/users/larsbrinkhoff/following{/other_user}", "gists_url": "https://api.github.com/users/larsbrinkhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsbrinkhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsbrinkhoff/subscriptions", "organizations_url": "https://api.github.com/users/larsbrinkhoff/orgs", "repos_url": "https://api.github.com/users/larsbrinkhoff/repos", "events_url": "https://api.github.com/users/larsbrinkhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/larsbrinkhoff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88c1082bf89c25ef0c9cb7bddcd567d62fe8776f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c1082bf89c25ef0c9cb7bddcd567d62fe8776f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c1082bf89c25ef0c9cb7bddcd567d62fe8776f"}], "stats": {"total": 80, "additions": 9, "deletions": 71}, "files": [{"sha": "8f1cd83aab3e03d384e3f3b34ebb94e70ebd747f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "patch": "@@ -1,3 +1,10 @@\n+2001-08-23  Lars Brinkhoff  <lars@nocrew.org>\n+\n+\t* config/mcore/mcore.h (MACHINE_DEPENDENT_SIMPLIFY): Remove.\n+\t* config/mcore/mcore.c (mcore_dependent_simplify_rtx): Likewise.\n+\t* config/mcore/mcore-protos.h (mcore_dependent_simplify_rtx):\n+\tRemove prototype.\n+\n 2001-08-23  Lars Brinkhoff  <lars@nocrew.org>\n \n \t* genconstants.c, genpreds.c, libfuncs.h, optabs.h, rtl-error.h:"}, {"sha": "9e197ca3996cf8ae7155e42ac54c7665ee82c7a7", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "patch": "@@ -63,7 +63,6 @@ extern int          mcore_is_dead                \tPARAMS ((rtx, rtx));\n extern int          mcore_expand_insv            \tPARAMS ((rtx *));\n extern int          mcore_modify_comparison      \tPARAMS ((RTX_CODE));\n extern void         mcore_expand_block_move      \tPARAMS ((rtx, rtx, rtx *));\n-extern rtx          mcore_dependent_simplify_rtx\tPARAMS ((rtx, int, int, int, int *));\n extern void         mcore_dependent_reorg        \tPARAMS ((rtx));\n extern int          mcore_const_costs            \tPARAMS ((rtx, RTX_CODE));\n extern int          mcore_and_cost               \tPARAMS ((rtx));"}, {"sha": "095eef38931c28abf6668cbfcdf40b441fcad58e", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "patch": "@@ -2615,70 +2615,6 @@ mcore_output_jump_label_table ()\n   return \"\";\n }\n \n-#if 0 /* XXX temporarily suppressed until I have time to look at what this code does.  */\n-\n-/* We need these below.  They use information stored in tables to figure out\n-   what values are in what registers, etc.  This is okay, since these tables\n-   are valid at the time mcore_dependent_simplify_rtx() is invoked.  Don't\n-   use them anywhere else.  BRC  */\n-\n-extern unsigned HOST_WIDE_INT nonzero_bits PARAMS ((rtx, enum machine_mode));\n-extern int num_sign_bit_copies PARAMS ((Rtx, enum machine_mode));\n-\n-/* Do machine dependent simplifications: see simplify_rtx() in combine.c.\n-   GENERAL_SIMPLIFY controls whether general machine independent \n-   simplifications should be tried after machine dependent ones.  Thus,\n-   we can filter out certain simplifications and keep the simplify_rtx()\n-   from changing things that we just simplified in a machine dependent\n-   fashion.  This is experimental.  BRC  */\n-rtx\n-mcore_dependent_simplify_rtx (x, int_op0_mode, last, in_dest, general_simplify)\n-     rtx x;\n-     int int_op0_mode;\n-     int last;\n-     int in_dest;\n-     int * general_simplify;\n-{\n-  enum machine_mode mode = GET_MODE (x);\n-  enum rtx_code code = GET_CODE (x);\n-\n-  /* Always simplify unless explicitly asked not to.  */\n-  * general_simplify = 1;\n-\n-  if (code == IF_THEN_ELSE)\n-    {\n-      int i;\n-      rtx cond = XEXP(x, 0);\n-      rtx true_rtx = XEXP(x, 1);\n-      rtx false_rtx = XEXP(x, 2);\n-      enum rtx_code true_code = GET_CODE (cond);\n-\n-      /* On the mcore, when doing -mcmov-one, we don't want to simplify:\n-\n-\t (if_then_else (ne A 0) C1 0)\n-\n-         if it would be turned into a shift by simplify_if_then_else().\n-         instead, leave it alone so that it will collapse into a conditional\n-         move.  besides, at least for the mcore, doing this simplification does\n-         not typically help.  see combine.c, line 4217.  BRC  */\n-\n-      if (true_code == NE && XEXP (cond, 1) == const0_rtx\n-\t  && false_rtx == const0_rtx && GET_CODE (true_rtx) == CONST_INT\n-\t  && ((1 == nonzero_bits (XEXP (cond, 0), mode)\n-\t       && (i = exact_log2 (INTVAL (true_rtx))) >= 0)\n-\t      || ((num_sign_bit_copies (XEXP (cond, 0), mode)\n-\t           == GET_MODE_BITSIZE (mode))\n-\t\t  && (i = exact_log2 (- INTVAL (true_rtx))) >= 0)))\n-\t{\n-\t  *general_simplify = 0; \n-\t  return x;\n-\t}\n-    }\n-\n-  return x;\n-}\n-#endif\n-\n /* Check whether insn is a candidate for a conditional.  */\n \n static cond_type"}, {"sha": "1ce51b85a13301d4063f8f19f46ce2b698cd174a", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "patch": "@@ -1379,10 +1379,6 @@ extern long mcore_current_compilation_timestamp;\n /* This is to handle loads from the constant pool.  */\n #define MACHINE_DEPENDENT_REORG(X) mcore_dependent_reorg (X)\n \n-/* This handles MCore dependent rtl simplifications.  */\n-#define MACHINE_DEPENDENT_SIMPLIFY(X,M,L,I,S) \\\n-  mcore_dependent_simplify_rtx (X, M, L, I, S)\n-     \n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   { \"mcore_arith_reg_operand\",\t\t{ REG, SUBREG }},\t\t\\\n   { \"mcore_general_movsrc_operand\",\t{ MEM, CONST_INT, REG, SUBREG }},\\"}, {"sha": "11d0ade72e183300096f1c6c2a45dfb8a55a7112", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038c2f5067d3cdbe2fe6b996f19898d0091e29a4/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=038c2f5067d3cdbe2fe6b996f19898d0091e29a4", "patch": "@@ -1179,9 +1179,9 @@\n     int low, high;\n \n     if (TARGET_LITTLE_END)\n-      low = 0, high = 1;\n+      low = 0, high = 4;\n     else\n-      low = 1, high = 0;\n+      low = 4, high = 0;\n     \n     emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], low),\n \t      operands[1]));"}]}