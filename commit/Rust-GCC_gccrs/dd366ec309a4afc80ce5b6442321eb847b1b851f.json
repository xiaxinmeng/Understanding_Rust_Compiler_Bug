{"sha": "dd366ec309a4afc80ce5b6442321eb847b1b851f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzNjZlYzMwOWE0YWZjODBjZTViNjQ0MjMyMWViODQ3YjFiODUxZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-26T11:13:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-26T11:13:14Z"}, "message": "Makefile.in (lto-streamer-in.o): Add $(CFGLOOP_H) dependency.\n\n2013-04-26  Richard Biener  <rguenther@suse.de>\n\n\t* Makefile.in (lto-streamer-in.o): Add $(CFGLOOP_H) dependency.\n\t(lto-streamer-out.o): Likewise.\n\t* cfgloop.c (init_loops_structure): Export, add struct function\n\targument and adjust.\n\t(flow_loops_find): Adjust.\n\t* cfgloop.h (enum loop_estimation): Add EST_LAST.\n\t(init_loops_structure): Declare.\n\t* lto-streamer-in.c: Include cfgloop.h.\n\t(input_cfg): Input the loop tree.\n\t* lto-streamer-out.c: Include cfgloop.h.\n\t(output_cfg): Output the loop tree.\n\t(output_struct_function_base): Do not drop PROP_loops.\n\nFrom-SVN: r198334", "tree": {"sha": "027570a5994a1bcef5487d0da3c38370ec98d67f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/027570a5994a1bcef5487d0da3c38370ec98d67f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd366ec309a4afc80ce5b6442321eb847b1b851f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd366ec309a4afc80ce5b6442321eb847b1b851f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd366ec309a4afc80ce5b6442321eb847b1b851f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd366ec309a4afc80ce5b6442321eb847b1b851f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9e0d843713b294d12c3a3faedbc0c817e581014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e0d843713b294d12c3a3faedbc0c817e581014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e0d843713b294d12c3a3faedbc0c817e581014"}], "stats": {"total": 139, "additions": 125, "deletions": 14}, "files": [{"sha": "001533795c230dc41e95e981af9b9dd6d7ab0cfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd366ec309a4afc80ce5b6442321eb847b1b851f", "patch": "@@ -1,3 +1,18 @@\n+2013-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* Makefile.in (lto-streamer-in.o): Add $(CFGLOOP_H) dependency.\n+\t(lto-streamer-out.o): Likewise.\n+\t* cfgloop.c (init_loops_structure): Export, add struct function\n+\targument and adjust.\n+\t(flow_loops_find): Adjust.\n+\t* cfgloop.h (enum loop_estimation): Add EST_LAST.\n+\t(init_loops_structure): Declare.\n+\t* lto-streamer-in.c: Include cfgloop.h.\n+\t(input_cfg): Input the loop tree.\n+\t* lto-streamer-out.c: Include cfgloop.h.\n+\t(output_cfg): Output the loop tree.\n+\t(output_struct_function_base): Do not drop PROP_loops.\n+\n 2013-03-26  Richard Biener  <rguenther@suse.de>\n \n \t* tree-cfg.c (execute_build_cfg): Build the loop tree."}, {"sha": "8dda925bd3b2cab48dcb125737a0fa24d19f0ec7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dd366ec309a4afc80ce5b6442321eb847b1b851f", "patch": "@@ -2173,11 +2173,11 @@ lto-streamer-in.o: lto-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) \\\n    input.h $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n    $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_H) $(EXCEPT_H) debug.h \\\n-   $(IPA_UTILS_H) $(LTO_STREAMER_H) toplev.h \\\n+   $(IPA_UTILS_H) $(LTO_STREAMER_H) toplev.h $(CFGLOOP_H) \\\n    $(DATA_STREAMER_H) $(GIMPLE_STREAMER_H) $(TREE_STREAMER_H)\n lto-streamer-out.o : lto-streamer-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(DIAGNOSTIC_CORE_H) $(TREE_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n-   $(HASHTAB_H) $(BASIC_BLOCK_H) tree-iterator.h \\\n+   $(HASHTAB_H) $(BASIC_BLOCK_H) tree-iterator.h $(CFGLOOP_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) \\\n    $(DIAGNOSTIC_CORE_H) $(EXCEPT_H) $(LTO_STREAMER_H) $(DIAGNOSTIC_CORE_H) \\\n    $(DATA_STREAMER_H) $(STREAMER_HOOKS_H) $(GIMPLE_STREAMER_H) \\"}, {"sha": "28b63ae2f36a12f221214c6b9ccf44b934a154b6", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=dd366ec309a4afc80ce5b6442321eb847b1b851f", "patch": "@@ -339,8 +339,9 @@ alloc_loop (void)\n /* Initializes loops structure LOOPS, reserving place for NUM_LOOPS loops\n    (including the root of the loop tree).  */\n \n-static void\n-init_loops_structure (struct loops *loops, unsigned num_loops)\n+void\n+init_loops_structure (struct function *fn,\n+\t\t      struct loops *loops, unsigned num_loops)\n {\n   struct loop *root;\n \n@@ -349,11 +350,11 @@ init_loops_structure (struct loops *loops, unsigned num_loops)\n \n   /* Dummy loop containing whole function.  */\n   root = alloc_loop ();\n-  root->num_nodes = n_basic_blocks;\n-  root->latch = EXIT_BLOCK_PTR;\n-  root->header = ENTRY_BLOCK_PTR;\n-  ENTRY_BLOCK_PTR->loop_father = root;\n-  EXIT_BLOCK_PTR->loop_father = root;\n+  root->num_nodes = n_basic_blocks_for_function (fn);\n+  root->latch = EXIT_BLOCK_PTR_FOR_FUNCTION (fn);\n+  root->header = ENTRY_BLOCK_PTR_FOR_FUNCTION (fn);\n+  ENTRY_BLOCK_PTR_FOR_FUNCTION (fn)->loop_father = root;\n+  EXIT_BLOCK_PTR_FOR_FUNCTION (fn)->loop_father = root;\n \n   loops->larray->quick_push (root);\n   loops->tree_root = root;\n@@ -411,7 +412,7 @@ flow_loops_find (struct loops *loops)\n   if (!loops)\n     {\n       loops = ggc_alloc_cleared_loops ();\n-      init_loops_structure (loops, 1);\n+      init_loops_structure (cfun, loops, 1);\n     }\n \n   /* Ensure that loop exits were released.  */"}, {"sha": "5c38599cc6c883538fa02b421dbc06e0df40bbce", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=dd366ec309a4afc80ce5b6442321eb847b1b851f", "patch": "@@ -97,7 +97,8 @@ enum loop_estimation\n   /* Estimate was not computed yet.  */\n   EST_NOT_COMPUTED,\n   /* Estimate is ready.  */\n-  EST_AVAILABLE\n+  EST_AVAILABLE,\n+  EST_LAST\n };\n \n /* Structure to hold information for each natural loop.  */\n@@ -213,6 +214,7 @@ struct GTY (()) loops {\n \n /* Loop recognition.  */\n bool bb_loop_header_p (basic_block);\n+void init_loops_structure (struct function *, struct loops *, unsigned);\n extern struct loops *flow_loops_find (struct loops *);\n extern void disambiguate_loops_with_multiple_latches (void);\n extern void flow_loops_free (struct loops *);"}, {"sha": "f5789c01277bdcaca31738ccc1b2bdd9e9bafaa0", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=dd366ec309a4afc80ce5b6442321eb847b1b851f", "patch": "@@ -48,6 +48,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-streamer.h\"\n #include \"tree-pass.h\"\n #include \"streamer-hooks.h\"\n+#include \"cfgloop.h\"\n+\n \n struct freeing_string_slot_hasher : string_slot_hasher\n {\n@@ -660,6 +662,58 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n       p_bb = bb;\n       index = streamer_read_hwi (ib);\n     }\n+\n+  /* ???  The cfgloop interface is tied to cfun.  */\n+  gcc_assert (cfun == fn);\n+\n+  /* Input the loop tree.  */\n+  unsigned n_loops = streamer_read_uhwi (ib);\n+  if (n_loops == 0)\n+    return;\n+\n+  struct loops *loops = ggc_alloc_cleared_loops ();\n+  init_loops_structure (fn, loops, n_loops);\n+\n+  /* Input each loop and associate it with its loop header so\n+     flow_loops_find can rebuild the loop tree.  */\n+  for (unsigned i = 1; i < n_loops; ++i)\n+    {\n+      int header_index = streamer_read_hwi (ib);\n+      if (header_index == -1)\n+\t{\n+\t  loops->larray->quick_push (NULL);\n+\t  continue;\n+\t}\n+\n+      struct loop *loop = alloc_loop ();\n+      loop->num = loops->larray->length ();\n+      loop->header = BASIC_BLOCK_FOR_FUNCTION (fn, header_index);\n+      loop->header->loop_father = loop;\n+\n+      /* Read everything copy_loop_info copies.  */\n+      loop->estimate_state = streamer_read_enum (ib, loop_estimation, EST_LAST);\n+      loop->any_upper_bound = streamer_read_hwi (ib);\n+      if (loop->any_upper_bound)\n+\t{\n+\t  loop->nb_iterations_upper_bound.low = streamer_read_uhwi (ib);\n+\t  loop->nb_iterations_upper_bound.high = streamer_read_hwi (ib);\n+\t}\n+      loop->any_estimate = streamer_read_hwi (ib);\n+      if (loop->any_estimate)\n+\t{\n+\t  loop->nb_iterations_estimate.low = streamer_read_uhwi (ib);\n+\t  loop->nb_iterations_estimate.high = streamer_read_hwi (ib);\n+\t}\n+\n+      loops->larray->quick_push (loop);\n+\n+      /* flow_loops_find doesn't like loops not in the tree, hook them\n+         all as siblings of the tree root temporarily.  */\n+      flow_loop_tree_node_add (loops->tree_root, loop);\n+    }\n+\n+  /* Rebuild the loop tree.  */\n+  fn->x_current_loops = flow_loops_find (loops);\n }\n \n "}, {"sha": "110cc3e580a8c75388d8e4c88525bfa721251d92", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd366ec309a4afc80ce5b6442321eb847b1b851f/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=dd366ec309a4afc80ce5b6442321eb847b1b851f", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-streamer.h\"\n #include \"tree-streamer.h\"\n #include \"streamer-hooks.h\"\n+#include \"cfgloop.h\"\n \n \n /* Clear the line info stored in DATA_IN.  */\n@@ -659,6 +660,45 @@ output_cfg (struct output_block *ob, struct function *fn)\n \n   streamer_write_hwi (ob, -1);\n \n+  /* ???  The cfgloop interface is tied to cfun.  */\n+  gcc_assert (cfun == fn);\n+\n+  /* Output the number of loops.  */\n+  streamer_write_uhwi (ob, number_of_loops ());\n+\n+  /* Output each loop, skipping the tree root which has number zero.  */\n+  for (unsigned i = 1; i < number_of_loops (); ++i)\n+    {\n+      struct loop *loop = get_loop (i);\n+\n+      /* Write the index of the loop header.  That's enough to rebuild\n+         the loop tree on the reader side.  Stream -1 for an unused\n+\t loop entry.  */\n+      if (!loop)\n+\t{\n+\t  streamer_write_hwi (ob, -1);\n+\t  continue;\n+\t}\n+      else\n+\tstreamer_write_hwi (ob, loop->header->index);\n+\n+      /* Write everything copy_loop_info copies.  */\n+      streamer_write_enum (ob->main_stream,\n+\t\t\t   loop_estimation, EST_LAST, loop->estimate_state);\n+      streamer_write_hwi (ob, loop->any_upper_bound);\n+      if (loop->any_upper_bound)\n+\t{\n+\t  streamer_write_uhwi (ob, loop->nb_iterations_upper_bound.low);\n+\t  streamer_write_hwi (ob, loop->nb_iterations_upper_bound.high);\n+\t}\n+      streamer_write_hwi (ob, loop->any_estimate);\n+      if (loop->any_estimate)\n+\t{\n+\t  streamer_write_uhwi (ob, loop->nb_iterations_estimate.low);\n+\t  streamer_write_hwi (ob, loop->nb_iterations_estimate.high);\n+\t}\n+    }\n+\n   ob->main_stream = tmp_stream;\n }\n \n@@ -733,9 +773,8 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   FOR_EACH_VEC_SAFE_ELT (fn->local_decls, i, t)\n     stream_write_tree (ob, t, true);\n \n-  /* Output current IL state of the function.\n-     ???  We don't stream loops.  */\n-  streamer_write_uhwi (ob, fn->curr_properties & ~PROP_loops);\n+  /* Output current IL state of the function.  */\n+  streamer_write_uhwi (ob, fn->curr_properties);\n \n   /* Write all the attributes for FN.  */\n   bp = bitpack_create (ob->main_stream);"}]}