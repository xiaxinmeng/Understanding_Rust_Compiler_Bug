{"sha": "9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0YzhiN2JiYmVmNzU2OWIyYmM5ZGVkZWNlNTM1MmM0OGE4NzAxZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-21T15:39:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-21T15:39:25Z"}, "message": "re PR target/78057 (FAIL: gcc.target/i386/bmi-{4,5,6}.c)\n\n\tPR target/78057\n\t* config/i386/i386.c: Include fold-const-call.h, tree-vrp.h\n\tand tree-ssanames.h.\n\t(ix86_fold_builtin): Fold IX86_BUILTIN_[LT]ZCNT{16,32,64}\n\twith INTEGER_CST argument.\n\t(ix86_gimple_fold_builtin): New function.\n\t(TARGET_GIMPLE_FOLD_BUILTIN): Define.\n\n\t* gcc.target/i386/pr78057.c: New test.\n\nFrom-SVN: r241411", "tree": {"sha": "74daadf2a63f7fd077bd50e8034f9bfe05d0aa48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74daadf2a63f7fd077bd50e8034f9bfe05d0aa48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c05986b936078409c99a8eb4ce81e371323132d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05986b936078409c99a8eb4ce81e371323132d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05986b936078409c99a8eb4ce81e371323132d0"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "4d88ef755aa035d3e58459e586d43b62cbb5a148", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "patch": "@@ -1,5 +1,13 @@\n 2016-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/78057\n+\t* config/i386/i386.c: Include fold-const-call.h, tree-vrp.h\n+\tand tree-ssanames.h.\n+\t(ix86_fold_builtin): Fold IX86_BUILTIN_[LT]ZCNT{16,32,64}\n+\twith INTEGER_CST argument.\n+\t(ix86_gimple_fold_builtin): New function.\n+\t(TARGET_GIMPLE_FOLD_BUILTIN): Define.\n+\n \t* dwarf2out.c (ranges_table): Change into vec<dw_ranges, va_gc> *.\n \t(ranges_by_label): Change into vec<dw_ranges_by_label, va_gc> *.\n \t(ranges_table_allocated, ranges_table_in_use,"}, {"sha": "69ad339797cab7dce633196de2d7b71ff5bcf181", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "patch": "@@ -77,6 +77,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"case-cfn-macros.h\"\n #include \"regrename.h\"\n #include \"dojump.h\"\n+#include \"fold-const-call.h\"\n+#include \"tree-vrp.h\"\n+#include \"tree-ssanames.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -33332,6 +33335,40 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t    return build_real (type, inf);\n \t  }\n \n+\tcase IX86_BUILTIN_TZCNT16:\n+\tcase IX86_BUILTIN_TZCNT32:\n+\tcase IX86_BUILTIN_TZCNT64:\n+\t  gcc_assert (n_args == 1);\n+\t  if (TREE_CODE (args[0]) == INTEGER_CST)\n+\t    {\n+\t      tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\t      tree arg = args[0];\n+\t      if (fn_code == IX86_BUILTIN_TZCNT16)\n+\t\targ = fold_convert (short_unsigned_type_node, arg);\n+\t      if (integer_zerop (arg))\n+\t\treturn build_int_cst (type, TYPE_PRECISION (TREE_TYPE (arg)));\n+\t      else\n+\t\treturn fold_const_call (CFN_CTZ, type, arg);\n+\t    }\n+\t  break;\n+\n+\tcase IX86_BUILTIN_LZCNT16:\n+\tcase IX86_BUILTIN_LZCNT32:\n+\tcase IX86_BUILTIN_LZCNT64:\n+\t  gcc_assert (n_args == 1);\n+\t  if (TREE_CODE (args[0]) == INTEGER_CST)\n+\t    {\n+\t      tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\t      tree arg = args[0];\n+\t      if (fn_code == IX86_BUILTIN_LZCNT16)\n+\t\targ = fold_convert (short_unsigned_type_node, arg);\n+\t      if (integer_zerop (arg))\n+\t\treturn build_int_cst (type, TYPE_PRECISION (TREE_TYPE (arg)));\n+\t      else\n+\t\treturn fold_const_call (CFN_CLZ, type, arg);\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -33344,6 +33381,70 @@ ix86_fold_builtin (tree fndecl, int n_args,\n   return NULL_TREE;\n }\n \n+/* Fold a MD builtin (use ix86_fold_builtin for folding into\n+   constant) in GIMPLE.  */\n+\n+bool\n+ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n+{\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree fndecl = gimple_call_fndecl (stmt);\n+  gcc_checking_assert (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD);\n+  int n_args = gimple_call_num_args (stmt);\n+  enum ix86_builtins fn_code = (enum ix86_builtins) DECL_FUNCTION_CODE (fndecl);\n+  tree decl = NULL_TREE;\n+  tree arg0;\n+\n+  switch (fn_code)\n+    {\n+    case IX86_BUILTIN_TZCNT32:\n+      decl = builtin_decl_implicit (BUILT_IN_CTZ);\n+      goto fold_tzcnt_lzcnt;\n+\n+    case IX86_BUILTIN_TZCNT64:\n+      decl = builtin_decl_implicit (BUILT_IN_CTZLL);\n+      goto fold_tzcnt_lzcnt;\n+\n+    case IX86_BUILTIN_LZCNT32:\n+      decl = builtin_decl_implicit (BUILT_IN_CLZ);\n+      goto fold_tzcnt_lzcnt;\n+\n+    case IX86_BUILTIN_LZCNT64:\n+      decl = builtin_decl_implicit (BUILT_IN_CLZLL);\n+      goto fold_tzcnt_lzcnt;\n+\n+    fold_tzcnt_lzcnt:\n+      gcc_assert (n_args == 1);\n+      arg0 = gimple_call_arg (stmt, 0);\n+      if (TREE_CODE (arg0) == SSA_NAME && decl && gimple_call_lhs (stmt))\n+\t{\n+\t  int prec = TYPE_PRECISION (TREE_TYPE (arg0));\n+\t  /* If arg0 is provably non-zero, optimize into generic\n+\t     __builtin_c[tl]z{,ll} function the middle-end handles\n+\t     better.  */\n+\t  if (!expr_not_equal_to (arg0, wi::zero (prec)))\n+\t    return false;\n+\n+\t  location_t loc = gimple_location (stmt);\n+\t  gimple *g = gimple_build_call (decl, 1, arg0);\n+\t  gimple_set_location (g, loc);\n+\t  tree lhs = make_ssa_name (integer_type_node);\n+\t  gimple_call_set_lhs (g, lhs);\n+\t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t  g = gimple_build_assign (gimple_call_lhs (stmt), NOP_EXPR, lhs);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_replace (gsi, g, true);\n+\t  return true;\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n /* Make builtins to detect cpu type and features supported.  NAME is\n    the builtin name, CODE is the builtin code, and FTYPE is the function\n    type of the builtin.  */\n@@ -50531,6 +50632,9 @@ ix86_addr_space_zero_address_valid (addr_space_t as)\n #undef TARGET_FOLD_BUILTIN\n #define TARGET_FOLD_BUILTIN ix86_fold_builtin\n \n+#undef TARGET_GIMPLE_FOLD_BUILTIN\n+#define TARGET_GIMPLE_FOLD_BUILTIN ix86_gimple_fold_builtin\n+\n #undef TARGET_COMPARE_VERSION_PRIORITY\n #define TARGET_COMPARE_VERSION_PRIORITY ix86_compare_version_priority\n "}, {"sha": "0754aec50040ee393186fd23d4a8081438969df1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "patch": "@@ -1,5 +1,8 @@\n 2016-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/78057\n+\t* gcc.target/i386/pr78057.c: New test.\n+\n \t* g++.dg/debug/dwarf2/constexpr-var-1.C: New test.\n \n 2016-10-21  Paul Thomas  <pault@gcc.gnu.org>"}, {"sha": "493a53332bb1b96df66d70f3c5144597aa79fd40", "filename": "gcc/testsuite/gcc.target/i386/pr78057.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78057.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4c8b7bbbef7569b2bc9dedece5352c48a8701d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78057.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78057.c?ref=9c4c8b7bbbef7569b2bc9dedece5352c48a8701d", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/78057 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -mlzcnt -fdump-tree-optimized\" } */\n+\n+extern void link_error (void);\n+\n+int\n+foo (int x)\n+{\n+  if (__builtin_ia32_tzcnt_u16 (16) != 4\n+      || __builtin_ia32_tzcnt_u16 (0) != 16\n+      || __builtin_ia32_lzcnt_u16 (0x1ff) != 7\n+      || __builtin_ia32_lzcnt_u16 (0) != 16\n+      || __builtin_ia32_tzcnt_u32 (8) != 3\n+      || __builtin_ia32_tzcnt_u32 (0) != 32\n+      || __builtin_ia32_lzcnt_u32 (0x3fffffff) != 2\n+      || __builtin_ia32_lzcnt_u32 (0) != 32\n+#ifdef __x86_64__\n+      || __builtin_ia32_tzcnt_u64 (4) != 2\n+      || __builtin_ia32_tzcnt_u64 (0) != 64\n+      || __builtin_ia32_lzcnt_u64 (0x1fffffff) != 35\n+      || __builtin_ia32_lzcnt_u64 (0) != 64\n+#endif\n+     )\n+    link_error ();\n+  x += 2;\n+  if (x == 0)\n+    return 5;\n+  return __builtin_ia32_tzcnt_u32 (x)\n+         + __builtin_ia32_lzcnt_u32 (x)\n+#ifdef __x86_64__\n+\t + __builtin_ia32_tzcnt_u64 (x)\n+\t + __builtin_ia32_lzcnt_u64 (x)\n+#endif\n+\t ;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_ia32_\\[lt]zcnt\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_ctz \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_clz \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_ctzll \" 1 \"optimized\" { target lp64 } } } */"}]}