{"sha": "2da068d5c04c748a27fa0694eb00bb385bac13aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhMDY4ZDVjMDRjNzQ4YTI3ZmEwNjk0ZWIwMGJiMzg1YmFjMTNhYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-07-26T09:48:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-07-26T09:48:24Z"}, "message": "ira-costs.c (find_costs_and_classes): For -O0...\n\ngcc/\n\t* ira-costs.c (find_costs_and_classes): For -O0, use the best class\n\tas the allocation class if it isn't likely to be spilled.\n\nFrom-SVN: r213078", "tree": {"sha": "3006f2eb1a6828336e2725fb1905e24df6ea07f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3006f2eb1a6828336e2725fb1905e24df6ea07f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2da068d5c04c748a27fa0694eb00bb385bac13aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da068d5c04c748a27fa0694eb00bb385bac13aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2da068d5c04c748a27fa0694eb00bb385bac13aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da068d5c04c748a27fa0694eb00bb385bac13aa/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "093a6c996efdb16e7cf20f2677dbe128e618031d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093a6c996efdb16e7cf20f2677dbe128e618031d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093a6c996efdb16e7cf20f2677dbe128e618031d"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "17506913c1d03c6860e4bc4cc17c402c0d34a5f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da068d5c04c748a27fa0694eb00bb385bac13aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da068d5c04c748a27fa0694eb00bb385bac13aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2da068d5c04c748a27fa0694eb00bb385bac13aa", "patch": "@@ -1,3 +1,8 @@\n+2014-07-26  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* ira-costs.c (find_costs_and_classes): For -O0, use the best class\n+\tas the allocation class if it isn't likely to be spilled.\n+\n 2014-07-26  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.h (tls_referenced_p): Declare."}, {"sha": "13bbf077829fa152858ff60d7bddfd614eee0410", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da068d5c04c748a27fa0694eb00bb385bac13aa/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da068d5c04c748a27fa0694eb00bb385bac13aa/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=2da068d5c04c748a27fa0694eb00bb385bac13aa", "patch": "@@ -1753,6 +1753,20 @@ find_costs_and_classes (FILE *dump_file)\n \t  alt_class = ira_allocno_class_translate[alt_class];\n \t  if (best_cost > i_mem_cost)\n \t    regno_aclass[i] = NO_REGS;\n+\t  else if (!optimize && !targetm.class_likely_spilled_p (best))\n+\t    /* Registers in the alternative class are likely to need\n+\t       longer or slower sequences than registers in the best class.\n+\t       When optimizing we make some effort to use the best class\n+\t       over the alternative class where possible, but at -O0 we\n+\t       effectively give the alternative class equal weight.\n+\t       We then run the risk of using slower alternative registers\n+\t       when plenty of registers from the best class are still free.\n+\t       This is especially true because live ranges tend to be very\n+\t       short in -O0 code and so register pressure tends to be low.\n+\n+\t       Avoid that by ignoring the alternative class if the best\n+\t       class has plenty of registers.  */\n+\t    regno_aclass[i] = best;\n \t  else\n \t    {\n \t      /* Make the common class the biggest class of best and"}]}