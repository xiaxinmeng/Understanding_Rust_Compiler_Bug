{"sha": "dc333d8ff60909dbed89126443e3024f1592f8a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzMzNkOGZmNjA5MDlkYmVkODkxMjY0NDNlMzAyNGYxNTkyZjhhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-09T17:59:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-09T17:59:14Z"}, "message": "Remove AND_HARD_REG_SET\n\nUse \"x &= y\" instead of \"AND_HARD_REG_SET (x, y)\" (or just \"x & y\"\nif the result is a temporary).\n\n2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* hard-reg-set.h (HARD_REG_SET::operator&): New function.\n\t(HARD_REG_SET::operator&): Likewise.\n\t(AND_HARD_REG_SET): Delete.\n\t* caller-save.c (setup_save_areas): Use \"&\" instead of\n\tAND_HARD_REG_SET.\n\t(save_call_clobbered_regs): Likewise.\n\t* config/gcn/gcn.c (gcn_md_reorg): Likewise.\n\t* config/m32c/m32c.c (reduce_class): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_register_move_cost): Likewise.\n\t* final.c (get_call_reg_set_usage): Likewise.\n\t* ira-color.c (add_allocno_hard_regs_to_forest): Likewise.\n\t(setup_left_conflict_sizes_p): Likewise.\n\t* ira-conflicts.c (print_allocno_conflicts): Likewise.\n\t(ira_build_conflicts): Likewise.\n\t* ira-costs.c (restrict_cost_classes): Likewise.\n\t* ira.c (setup_stack_reg_pressure_class, setup_class_translate_array)\n\t(setup_reg_class_relations): Likewise.\n\t* reginfo.c (init_reg_sets_1, record_subregs_of_mode): Likewise.\n\t* reload1.c (maybe_fix_stack_asms, finish_spills): Likewise.\n\t* resource.c (find_dead_or_set_registers): Likewise.\n\t* sel-sched.c (mark_unavailable_hard_regs): Likewise.\n\nFrom-SVN: r275530", "tree": {"sha": "8cb63764fe33068c8b53a63d5441237984aa4aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cb63764fe33068c8b53a63d5441237984aa4aa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc333d8ff60909dbed89126443e3024f1592f8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc333d8ff60909dbed89126443e3024f1592f8a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc333d8ff60909dbed89126443e3024f1592f8a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc333d8ff60909dbed89126443e3024f1592f8a4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50b3f54d551787e0a066451ef60ef3b055a893e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b3f54d551787e0a066451ef60ef3b055a893e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b3f54d551787e0a066451ef60ef3b055a893e6"}], "stats": {"total": 133, "additions": 73, "deletions": 60}, "files": [{"sha": "dcc87c952cfbac2f99b9bc7bf0d5a4f17d7236af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -1,3 +1,27 @@\n+2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hard-reg-set.h (HARD_REG_SET::operator&): New function.\n+\t(HARD_REG_SET::operator&): Likewise.\n+\t(AND_HARD_REG_SET): Delete.\n+\t* caller-save.c (setup_save_areas): Use \"&\" instead of\n+\tAND_HARD_REG_SET.\n+\t(save_call_clobbered_regs): Likewise.\n+\t* config/gcn/gcn.c (gcn_md_reorg): Likewise.\n+\t* config/m32c/m32c.c (reduce_class): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_register_move_cost): Likewise.\n+\t* final.c (get_call_reg_set_usage): Likewise.\n+\t* ira-color.c (add_allocno_hard_regs_to_forest): Likewise.\n+\t(setup_left_conflict_sizes_p): Likewise.\n+\t* ira-conflicts.c (print_allocno_conflicts): Likewise.\n+\t(ira_build_conflicts): Likewise.\n+\t* ira-costs.c (restrict_cost_classes): Likewise.\n+\t* ira.c (setup_stack_reg_pressure_class, setup_class_translate_array)\n+\t(setup_reg_class_relations): Likewise.\n+\t* reginfo.c (init_reg_sets_1, record_subregs_of_mode): Likewise.\n+\t* reload1.c (maybe_fix_stack_asms, finish_spills): Likewise.\n+\t* resource.c (find_dead_or_set_registers): Likewise.\n+\t* sel-sched.c (mark_unavailable_hard_regs): Likewise.\n+\n 2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hard-reg-set.h (HARD_REG_SET::operator~): New function."}, {"sha": "b6bcb7bd75f5e9c5a2253a5011d61db6ab96f41b", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -457,7 +457,7 @@ setup_save_areas (void)\n \n       AND_COMPL_HARD_REG_SET (used_regs, call_fixed_reg_set);\n       AND_COMPL_HARD_REG_SET (used_regs, this_insn_sets);\n-      AND_HARD_REG_SET (hard_regs_to_save, used_regs);\n+      hard_regs_to_save &= used_regs;\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif (TEST_HARD_REG_BIT (hard_regs_to_save, regno))\n \t  {\n@@ -542,7 +542,7 @@ setup_save_areas (void)\n \n \t  AND_COMPL_HARD_REG_SET (used_regs, call_fixed_reg_set);\n \t  AND_COMPL_HARD_REG_SET (used_regs, this_insn_sets);\n-\t  AND_HARD_REG_SET (hard_regs_to_save, used_regs);\n+\t  hard_regs_to_save &= used_regs;\n \t  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t    if (TEST_HARD_REG_BIT (hard_regs_to_save, regno))\n \t      {\n@@ -781,7 +781,7 @@ save_call_clobbered_regs (void)\n \t\t  CLEAR_HARD_REG_SET (referenced_regs);\n \t\t  mark_referenced_regs (&PATTERN (insn),\n \t\t\t\t\tmark_reg_as_referenced, NULL);\n-\t\t  AND_HARD_REG_SET (referenced_regs, hard_regs_saved);\n+\t\t  referenced_regs &= hard_regs_saved;\n \t\t}\n \n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n@@ -857,7 +857,7 @@ save_call_clobbered_regs (void)\n \t      AND_COMPL_HARD_REG_SET (hard_regs_to_save, hard_regs_saved);\n \t      get_call_reg_set_usage (insn, &call_def_reg_set,\n \t\t\t\t      call_used_reg_set);\n-\t      AND_HARD_REG_SET (hard_regs_to_save, call_def_reg_set);\n+\t      hard_regs_to_save &= call_def_reg_set;\n \n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t\tif (TEST_HARD_REG_BIT (hard_regs_to_save, regno))"}, {"sha": "2c6c872764638a3811cf43a830ffca5f622b435f", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -4552,9 +4552,7 @@ gcn_md_reorg (void)\n \t      && prev_insn->unit == UNIT_VECTOR\n \t      && gcn_vmem_insn_p (itype))\n \t    {\n-\t      HARD_REG_SET regs;\n-\t      regs = prev_insn->writes;\n-\t      AND_HARD_REG_SET (regs, ireads);\n+\t      HARD_REG_SET regs = prev_insn->writes & ireads;\n \t      if (hard_reg_set_intersect_p\n \t\t  (regs, reg_class_contents[(int) SGPR_REGS]))\n \t\tnops_rqd = 5 - prev_insn->age;\n@@ -4582,9 +4580,7 @@ gcn_md_reorg (void)\n \t      && prev_insn->unit == UNIT_VECTOR\n \t      && get_attr_laneselect (insn) == LANESELECT_YES)\n \t    {\n-\t      HARD_REG_SET regs;\n-\t      regs = prev_insn->writes;\n-\t      AND_HARD_REG_SET (regs, ireads);\n+\t      HARD_REG_SET regs = prev_insn->writes & ireads;\n \t      if (hard_reg_set_intersect_p\n \t\t  (regs, reg_class_contents[(int) SGPR_REGS])\n \t\t  || hard_reg_set_intersect_p\n@@ -4598,9 +4594,7 @@ gcn_md_reorg (void)\n \t      && prev_insn->unit == UNIT_VECTOR\n \t      && itype == TYPE_VOP_DPP)\n \t    {\n-\t      HARD_REG_SET regs;\n-\t      regs = prev_insn->writes;\n-\t      AND_HARD_REG_SET (regs, ireads);\n+\t      HARD_REG_SET regs = prev_insn->writes & ireads;\n \t      if (hard_reg_set_intersect_p\n \t\t  (regs, reg_class_contents[(int) VGPR_REGS]))\n \t\tnops_rqd = 2 - prev_insn->age;"}, {"sha": "d89064a7d207cedf7b0aba2b45bb516b34993adf", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -341,8 +341,7 @@ reduce_class (reg_class_t original_class, reg_class_t limiting_class,\n   if (original_class == limiting_class)\n     return original_class;\n \n-  cc = reg_class_contents[original_class];\n-  AND_HARD_REG_SET (cc, reg_class_contents[limiting_class]);\n+  cc = reg_class_contents[original_class] & reg_class_contents[limiting_class];\n \n   for (i = 0; i < LIM_REG_CLASSES; i++)\n     {"}, {"sha": "03349e8f75a03a8abe68b52e24b243f365319711", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -21107,10 +21107,8 @@ rs6000_register_move_cost (machine_mode mode,\n      Do this first so we give best-case answers for union classes\n      containing both gprs and vsx regs.  */\n   HARD_REG_SET to_vsx, from_vsx;\n-  to_vsx = reg_class_contents[to];\n-  AND_HARD_REG_SET (to_vsx, reg_class_contents[VSX_REGS]);\n-  from_vsx = reg_class_contents[from];\n-  AND_HARD_REG_SET (from_vsx, reg_class_contents[VSX_REGS]);\n+  to_vsx = reg_class_contents[to] & reg_class_contents[VSX_REGS];\n+  from_vsx = reg_class_contents[from] & reg_class_contents[VSX_REGS];\n   if (!hard_reg_set_empty_p (to_vsx)\n       && !hard_reg_set_empty_p (from_vsx)\n       && (TARGET_VSX"}, {"sha": "5347facde6d59e3dee51c888f41f2feac5c5916f", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -5090,8 +5090,7 @@ get_call_reg_set_usage (rtx_insn *insn, HARD_REG_SET *reg_set,\n       if (node != NULL\n \t  && node->function_used_regs_valid)\n \t{\n-\t  *reg_set = node->function_used_regs;\n-\t  AND_HARD_REG_SET (*reg_set, default_set);\n+\t  *reg_set = node->function_used_regs & default_set;\n \t  return true;\n \t}\n     }"}, {"sha": "5733782bc3d69c09e401f601ca424bc92d6ec8d3", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -62,6 +62,23 @@ struct HARD_REG_SET\n     return res;\n   }\n \n+  HARD_REG_SET\n+  operator& (const HARD_REG_SET &other) const\n+  {\n+    HARD_REG_SET res;\n+    for (unsigned int i = 0; i < ARRAY_SIZE (elts); ++i)\n+      res.elts[i] = elts[i] & other.elts[i];\n+    return res;\n+  }\n+\n+  HARD_REG_SET &\n+  operator&= (const HARD_REG_SET &other)\n+  {\n+    for (unsigned int i = 0; i < ARRAY_SIZE (elts); ++i)\n+      elts[i] &= other.elts[i];\n+    return *this;\n+  }\n+\n   HARD_REG_ELT_TYPE elts[HARD_REG_SET_LONGS];\n };\n typedef const HARD_REG_SET &const_hard_reg_set;\n@@ -92,10 +109,10 @@ struct hard_reg_set_container\n    CLEAR_HARD_REG_SET and SET_HARD_REG_SET.\n    These take just one argument.\n \n-   Also define macros for combining hard reg sets:\n-   IOR_HARD_REG_SET and AND_HARD_REG_SET.\n-   These take two arguments TO and FROM; they read from FROM\n-   and combine bitwise into TO.  Define also two variants\n+   Also define a macro for combining hard reg sets:\n+   IOR_HARD_REG_SET\n+   This takes two arguments TO and FROM; it reads from FROM\n+   and combines bitwise into TO.  Define also\n    IOR_COMPL_HARD_REG_SET and AND_COMPL_HARD_REG_SET\n    which use the complement of the set FROM.\n \n@@ -122,7 +139,6 @@ struct hard_reg_set_container\n \n #define IOR_HARD_REG_SET(TO, FROM) ((TO) |= (FROM))\n #define IOR_COMPL_HARD_REG_SET(TO, FROM) ((TO) |= ~ (FROM))\n-#define AND_HARD_REG_SET(TO, FROM) ((TO) &= (FROM))\n #define AND_COMPL_HARD_REG_SET(TO, FROM) ((TO) &= ~ (FROM))\n \n static inline bool\n@@ -186,13 +202,6 @@ SET_HARD_REG_SET (HARD_REG_SET &set)\n     set.elts[i] = -1;\n }\n \n-inline void\n-AND_HARD_REG_SET (HARD_REG_SET &to, const_hard_reg_set from)\n-{\n-  for (unsigned int i = 0; i < ARRAY_SIZE (to.elts); ++i)\n-    to.elts[i] &= from.elts[i];\n-}\n-\n inline void\n AND_COMPL_HARD_REG_SET (HARD_REG_SET &to, const_hard_reg_set from)\n {"}, {"sha": "0611891ca0341eb2fc8e009ec06f0ef20f0bd397", "filename": "gcc/ira-color.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -382,8 +382,7 @@ add_allocno_hard_regs_to_forest (allocno_hard_regs_node_t *roots,\n \thard_regs_node_vec.safe_push (node);\n       else if (hard_reg_set_intersect_p (hv->set, node->hard_regs->set))\n \t{\n-\t  temp_set = hv->set;\n-\t  AND_HARD_REG_SET (temp_set, node->hard_regs->set);\n+\t  temp_set = hv->set & node->hard_regs->set;\n \t  hv2 = add_allocno_hard_regs (temp_set, hv->cost);\n \t  add_allocno_hard_regs_to_forest (&node->first, hv2);\n \t}\n@@ -897,8 +896,7 @@ setup_left_conflict_sizes_p (ira_allocno_t a)\n \t  int j, n, hard_regno;\n \t  enum reg_class aclass;\n \t  \n-\t  temp_set = temp_node->hard_regs->set;\n-\t  AND_HARD_REG_SET (temp_set, profitable_hard_regs);\n+\t  temp_set = temp_node->hard_regs->set & profitable_hard_regs;\n \t  aclass = ALLOCNO_CLASS (a);\n \t  for (n = 0, j = ira_class_hard_regs_num[aclass] - 1; j >= 0; j--)\n \t    {"}, {"sha": "f8804b729607023fce33a26698df2f58feed9203", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -662,15 +662,13 @@ print_allocno_conflicts (FILE * file, bool reg_p, ira_allocno_t a)\n \t}\n       conflicting_hard_regs = OBJECT_TOTAL_CONFLICT_HARD_REGS (obj);\n       AND_COMPL_HARD_REG_SET (conflicting_hard_regs, ira_no_alloc_regs);\n-      AND_HARD_REG_SET (conflicting_hard_regs,\n-\t\t\treg_class_contents[ALLOCNO_CLASS (a)]);\n+      conflicting_hard_regs &= reg_class_contents[ALLOCNO_CLASS (a)];\n       print_hard_reg_set (file, \"\\n;;     total conflict hard regs:\",\n \t\t\t  conflicting_hard_regs);\n \n       conflicting_hard_regs = OBJECT_CONFLICT_HARD_REGS (obj);\n       AND_COMPL_HARD_REG_SET (conflicting_hard_regs, ira_no_alloc_regs);\n-      AND_HARD_REG_SET (conflicting_hard_regs,\n-\t\t\treg_class_contents[ALLOCNO_CLASS (a)]);\n+      conflicting_hard_regs &= reg_class_contents[ALLOCNO_CLASS (a)];\n       print_hard_reg_set (file, \";;     conflict hard regs:\",\n \t\t\t  conflicting_hard_regs);\n       putc ('\\n', file);\n@@ -743,7 +741,7 @@ ira_build_conflicts (void)\n     {\n       temp_hard_reg_set = reg_class_contents[base];\n       AND_COMPL_HARD_REG_SET (temp_hard_reg_set, ira_no_alloc_regs);\n-      AND_HARD_REG_SET (temp_hard_reg_set, call_used_reg_set);\n+      temp_hard_reg_set &= call_used_reg_set;\n     }\n   FOR_EACH_ALLOCNO (a, ai)\n     {"}, {"sha": "ae94365d1deef21fcd571eb7063b069d022a21ca", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -254,9 +254,7 @@ restrict_cost_classes (cost_classes_t full, machine_mode mode,\n \n       /* Calculate the set of registers in CL that belong to REGS and\n \t are valid for MODE.  */\n-      HARD_REG_SET valid_for_cl;\n-      valid_for_cl = reg_class_contents[cl];\n-      AND_HARD_REG_SET (valid_for_cl, regs);\n+      HARD_REG_SET valid_for_cl = reg_class_contents[cl] & regs;\n       AND_COMPL_HARD_REG_SET (valid_for_cl,\n \t\t\t      ira_prohibited_class_mode_regs[cl][mode]);\n       AND_COMPL_HARD_REG_SET (valid_for_cl, ira_no_alloc_regs);"}, {"sha": "6856d37400bb8c8ee56003edc49386dd6ed894b2", "filename": "gcc/ira.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -757,8 +757,7 @@ setup_stack_reg_pressure_class (void)\n     for (i = 0; i < ira_pressure_classes_num; i++)\n       {\n \tcl = ira_pressure_classes[i];\n-\ttemp_hard_regset2 = temp_hard_regset;\n-\tAND_HARD_REG_SET (temp_hard_regset2, reg_class_contents[cl]);\n+\ttemp_hard_regset2 = temp_hard_regset & reg_class_contents[cl];\n \tsize = hard_reg_set_size (temp_hard_regset2);\n \tif (best < size)\n \t  {\n@@ -1117,8 +1116,8 @@ setup_class_translate_array (enum reg_class *class_translate,\n       for (i = 0; i < classes_num; i++)\n \t{\n \t  aclass = classes[i];\n-\t  temp_hard_regset = reg_class_contents[aclass];\n-\t  AND_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl]);\n+\t  temp_hard_regset = (reg_class_contents[aclass]\n+\t\t\t      & reg_class_contents[cl]);\n \t  AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n \t  if (! hard_reg_set_empty_p (temp_hard_regset))\n \t    {\n@@ -1262,8 +1261,8 @@ setup_reg_class_relations (void)\n \t    }\n \t  ira_reg_class_subunion[cl1][cl2] = NO_REGS;\n \t  ira_reg_class_superunion[cl1][cl2] = NO_REGS;\n-\t  intersection_set = reg_class_contents[cl1];\n-\t  AND_HARD_REG_SET (intersection_set, reg_class_contents[cl2]);\n+\t  intersection_set = (reg_class_contents[cl1]\n+\t\t\t      & reg_class_contents[cl2]);\n \t  AND_COMPL_HARD_REG_SET (intersection_set, no_unit_alloc_regs);\n \t  union_set = reg_class_contents[cl1];\n \t  IOR_HARD_REG_SET (union_set, reg_class_contents[cl2]);"}, {"sha": "86f8b6899b4d9ae69a81fb2b3b1ce996c4fdd59b", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -378,7 +378,7 @@ init_reg_sets_1 (void)\n   else\n     CLEAR_REG_SET (fixed_reg_set_regset);\n \n-  AND_HARD_REG_SET (operand_reg_set, accessible_reg_set);\n+  operand_reg_set &= accessible_reg_set;\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       /* As a special exception, registers whose class is NO_REGS are\n@@ -1317,8 +1317,7 @@ record_subregs_of_mode (rtx subreg, bool partial_def)\n     }\n \n   if (valid_mode_changes[regno])\n-    AND_HARD_REG_SET (*valid_mode_changes[regno],\n-\t\t      simplifiable_subregs (shape));\n+    *valid_mode_changes[regno] &= simplifiable_subregs (shape);\n   else\n     {\n       valid_mode_changes[regno]"}, {"sha": "7aa3f8558327f15944301c04556718257f9c00bd", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -1399,7 +1399,7 @@ maybe_fix_stack_asms (void)\n       /* Those of the registers which are clobbered, but allowed by the\n \t constraints, must be usable as reload registers.  So clear them\n \t out of the life information.  */\n-      AND_HARD_REG_SET (allowed, clobbered);\n+      allowed &= clobbered;\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \tif (TEST_HARD_REG_BIT (allowed, i))\n \t  {\n@@ -4310,8 +4310,7 @@ finish_spills (int global)\n \t     may be not included in the value calculated here because\n \t     of possible removing caller-saves insns (see function\n \t     delete_caller_save_insns.  */\n-\t  chain->used_spill_regs = ~used_by_pseudos;\n-\t  AND_HARD_REG_SET (chain->used_spill_regs, used_spill_regs);\n+\t  chain->used_spill_regs = ~used_by_pseudos & used_spill_regs;\n \t}\n     }\n "}, {"sha": "b24679f414425b2f1cc8c47e0f4c5fd73f90ddc2", "filename": "gcc/resource.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -582,7 +582,7 @@ find_dead_or_set_registers (rtx_insn *target, struct resources *res,\n \t\t\t\t\t      &fallthrough_res, 0, jump_count,\n \t\t\t\t\t      set, needed);\n \t\t  IOR_HARD_REG_SET (fallthrough_res.regs, target_res.regs);\n-\t\t  AND_HARD_REG_SET (res->regs, fallthrough_res.regs);\n+\t\t  res->regs &= fallthrough_res.regs;\n \t\t  break;\n \t\t}\n \t      else"}, {"sha": "ccca43d0962cbdb64294e386ec574b228b07a8d3", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc333d8ff60909dbed89126443e3024f1592f8a4/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=dc333d8ff60909dbed89126443e3024f1592f8a4", "patch": "@@ -1245,8 +1245,7 @@ mark_unavailable_hard_regs (def_t def, struct reg_rename *reg_rename_p,\n   /* Leave only registers available for this mode.  */\n   if (!sel_hrd.regs_for_mode_ok[mode])\n     init_regs_for_mode (mode);\n-  AND_HARD_REG_SET (reg_rename_p->available_for_renaming,\n-                    sel_hrd.regs_for_mode[mode]);\n+  reg_rename_p->available_for_renaming &= sel_hrd.regs_for_mode[mode];\n \n   /* Exclude registers that are partially call clobbered.  */\n   if (def->crosses_call"}]}