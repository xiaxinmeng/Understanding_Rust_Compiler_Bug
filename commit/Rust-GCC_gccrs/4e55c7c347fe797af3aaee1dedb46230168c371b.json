{"sha": "4e55c7c347fe797af3aaee1dedb46230168c371b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU1NWM3YzM0N2ZlNzk3YWYzYWFlZTFkZWRiNDYyMzAxNjhjMzcxYg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-11-24T14:46:05Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-11-24T14:46:05Z"}, "message": "[PATCH][AArch64] Improve add immediate expansion\n\ngcc/\n\n\t* gcc/config/aarch64/aarch64.md (add<mode>3):\n\tBlock early expansion into 2 add instructions.\n\t(add<mode>3_pluslong): New pattern to combine complex\n\timmediates into 2 additions.\n\nFrom-SVN: r230814", "tree": {"sha": "475563192f5c4761ec5549b18b37857bf35de2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/475563192f5c4761ec5549b18b37857bf35de2fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e55c7c347fe797af3aaee1dedb46230168c371b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e55c7c347fe797af3aaee1dedb46230168c371b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e55c7c347fe797af3aaee1dedb46230168c371b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e55c7c347fe797af3aaee1dedb46230168c371b/comments", "author": null, "committer": null, "parents": [{"sha": "6b2f9bb6228bca4b610a6645a60e1557d65b14ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2f9bb6228bca4b610a6645a60e1557d65b14ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2f9bb6228bca4b610a6645a60e1557d65b14ef"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "6a5ebdeeed8fa9a568d9a87ca05cf11c3d655584", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e55c7c347fe797af3aaee1dedb46230168c371b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e55c7c347fe797af3aaee1dedb46230168c371b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e55c7c347fe797af3aaee1dedb46230168c371b", "patch": "@@ -1,3 +1,10 @@\n+2015-11-24  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64.md (add<mode>3):\n+\tBlock early expansion into 2 add instructions.\n+\t(add<mode>3_pluslong): New pattern to combine complex\n+\timmediates into 2 additions.\n+\n 2015-11-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/66217"}, {"sha": "c11e8ec01df4418044726a2bf771922ec004e43f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e55c7c347fe797af3aaee1dedb46230168c371b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e55c7c347fe797af3aaee1dedb46230168c371b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=4e55c7c347fe797af3aaee1dedb46230168c371b", "patch": "@@ -1588,30 +1588,46 @@\n \t      (match_operand:GPI 2 \"aarch64_pluslong_operand\" \"\")))]\n   \"\"\n   \"\n-  if (! aarch64_plus_operand (operands[2], VOIDmode))\n+  if (!aarch64_plus_operand (operands[2], VOIDmode))\n     {\n-      HOST_WIDE_INT imm = INTVAL (operands[2]);\n-\n-      if (aarch64_move_imm (imm, <MODE>mode) && can_create_pseudo_p ())\n-        {\n+      if (can_create_pseudo_p ())\n+\t{\n \t  rtx tmp = gen_reg_rtx (<MODE>mode);\n \t  emit_move_insn (tmp, operands[2]);\n \t  operands[2] = tmp;\n-        }\n+\t}\n       else\n-        {\n-\t  rtx subtarget = ((optimize && can_create_pseudo_p ())\n-\t\t\t   ? gen_reg_rtx (<MODE>mode) : operands[0]);\n-\n-\t  if (imm < 0)\n-\t    imm = -(-imm & ~0xfff);\n-\t  else\n-\t    imm &= ~0xfff;\n-\n-\t  emit_insn (gen_add<mode>3 (subtarget, operands[1], GEN_INT (imm)));\n-\t  operands[1] = subtarget;\n-\t  operands[2] = GEN_INT (INTVAL (operands[2]) - imm);\n-        }\n+\t{\n+\t  HOST_WIDE_INT imm = INTVAL (operands[2]);\n+\t  imm = imm >= 0 ? imm & 0xfff : -(-imm & 0xfff);\n+\t  emit_insn (gen_add<mode>3 (operands[0], operands[1],\n+\t\t\t\t     GEN_INT (INTVAL (operands[2]) - imm)));\n+\t  operands[1] = operands[0];\n+\t  operands[2] = GEN_INT (imm);\n+\t}\n+    }\n+  \"\n+)\n+\n+;; Find add with a 2-instruction immediate and merge into 2 add instructions.\n+\n+(define_insn_and_split \"*add<mode>3_pluslong\"\n+  [(set\n+    (match_operand:GPI 0 \"register_operand\" \"\")\n+    (plus:GPI (match_operand:GPI 1 \"register_operand\" \"\")\n+\t      (match_operand:GPI 2 \"aarch64_pluslong_operand\" \"\")))]\n+  \"!aarch64_plus_operand (operands[2], VOIDmode)\n+   && !aarch64_move_imm (INTVAL (operands[2]), <MODE>mode)\"\n+  \"#\"\n+  \"&& true\"\n+  [(set (match_dup 0) (plus:GPI (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (plus:GPI (match_dup 0) (match_dup 4)))]\n+  \"\n+    {\n+      HOST_WIDE_INT imm = INTVAL (operands[2]);\n+      imm = imm >= 0 ? imm & 0xfff : -(-imm & 0xfff);\n+      operands[3] = GEN_INT (INTVAL (operands[2]) - imm);\n+      operands[4] = GEN_INT (imm);\n     }\n   \"\n )"}]}