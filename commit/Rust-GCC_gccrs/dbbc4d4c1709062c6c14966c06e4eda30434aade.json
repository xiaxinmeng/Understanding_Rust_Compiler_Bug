{"sha": "dbbc4d4c1709062c6c14966c06e4eda30434aade", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiYzRkNGMxNzA5MDYyYzZjMTQ5NjZjMDZlNGVkYTMwNDM0YWFkZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-05-26T00:31:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-26T00:31:54Z"}, "message": "godump.c (go_format_type): Check for invalid type names, pointer target types, and struct field types.\n\n\t* godump.c (go_format_type): Check for invalid type names, pointer\n\ttarget types, and struct field types.\n\nFrom-SVN: r174253", "tree": {"sha": "bffe980aa9e6f998dae9d05e2992a6f215b315d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bffe980aa9e6f998dae9d05e2992a6f215b315d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbbc4d4c1709062c6c14966c06e4eda30434aade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbbc4d4c1709062c6c14966c06e4eda30434aade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbbc4d4c1709062c6c14966c06e4eda30434aade", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbbc4d4c1709062c6c14966c06e4eda30434aade/comments", "author": null, "committer": null, "parents": [{"sha": "45e4e4e2af8878f5c86f3fe6268df1097defa695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e4e4e2af8878f5c86f3fe6268df1097defa695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e4e4e2af8878f5c86f3fe6268df1097defa695"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "06d58bdf68626b6e0b1c99b9993ef37da6f2728d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbbc4d4c1709062c6c14966c06e4eda30434aade/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbbc4d4c1709062c6c14966c06e4eda30434aade/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbbc4d4c1709062c6c14966c06e4eda30434aade", "patch": "@@ -1,3 +1,8 @@\n+2011-05-25  Ian Lance Taylor  <iant@google.com>\n+\n+\t* godump.c (go_format_type): Check for invalid type names, pointer\n+\ttarget types, and struct field types.\n+\n 2011-05-25  Jason Merrill  <jason@redhat.com>\n \n \t* print-tree.c (print_node): Only look at TREE_TYPE if TS_TYPED."}, {"sha": "05c3064c9efc3b60452b02dd9e71de890e765b1e", "filename": "gcc/godump.c", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbbc4d4c1709062c6c14966c06e4eda30434aade/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbbc4d4c1709062c6c14966c06e4eda30434aade/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=dbbc4d4c1709062c6c14966c06e4eda30434aade", "patch": "@@ -532,8 +532,18 @@ go_format_type (struct godump_container *container, tree type,\n       break;\n \n     case TYPE_DECL:\n-      obstack_1grow (ob, '_');\n-      go_append_string (ob, DECL_NAME (type));\n+      {\n+\tvoid **slot;\n+\n+\tslot = htab_find_slot (container->invalid_hash,\n+\t\t\t       IDENTIFIER_POINTER (DECL_NAME (type)),\n+\t\t\t       NO_INSERT);\n+\tif (slot != NULL)\n+\t  ret = false;\n+\n+\tobstack_1grow (ob, '_');\n+\tgo_append_string (ob, DECL_NAME (type));\n+      }\n       break;\n \n     case INTEGER_TYPE:\n@@ -604,31 +614,28 @@ go_format_type (struct godump_container *container, tree type,\n \t\t      == FUNCTION_TYPE))))\n         {\n \t  tree name;\n+\t  void **slot;\n \n \t  name = TYPE_NAME (TREE_TYPE (type));\n-\t  if (TREE_CODE (name) == IDENTIFIER_NODE)\n-\t    {\n-\t      obstack_grow (ob, \"*_\", 2);\n-\t      go_append_string (ob, name);\n+\t  if (TREE_CODE (name) == TYPE_DECL)\n+\t    name = DECL_NAME (name);\n \n-\t      /* The pointer here can be used without the struct or\n-\t\t union definition.  So this struct or union is a a\n-\t\t potential dummy type.  */\n-\t      if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n-\t\tpointer_set_insert (container->pot_dummy_types,\n-\t\t\t\t    IDENTIFIER_POINTER (name));\n+\t  slot = htab_find_slot (container->invalid_hash,\n+\t\t\t\t IDENTIFIER_POINTER (name), NO_INSERT);\n+\t  if (slot != NULL)\n+\t    ret = false;\n \n-\t      return ret;\n-\t    }\n-\t  else if (TREE_CODE (name) == TYPE_DECL)\n-\t    {\n-\t      obstack_grow (ob, \"*_\", 2);\n-\t      go_append_string (ob, DECL_NAME (name));\n-\t      if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n-\t\tpointer_set_insert (container->pot_dummy_types,\n-\t\t\t\t    IDENTIFIER_POINTER (DECL_NAME (name)));\n-\t      return ret;\n-\t    }\n+\t  obstack_grow (ob, \"*_\", 2);\n+\t  go_append_string (ob, name);\n+\n+\t  /* The pointer here can be used without the struct or union\n+\t     definition.  So this struct or union is a potential dummy\n+\t     type.  */\n+\t  if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n+\t    pointer_set_insert (container->pot_dummy_types,\n+\t\t\t\tIDENTIFIER_POINTER (name));\n+\n+\t  return ret;\n         }\n       if (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n \tobstack_grow (ob, \"func\", 4);\n@@ -716,17 +723,21 @@ go_format_type (struct godump_container *container, tree type,\n \t\t\t    && (TREE_CODE (TREE_TYPE (TREE_TYPE (field)))\n                                 == FUNCTION_TYPE))))\n \t\t  {\n-\t\t    tree name = TYPE_NAME (TREE_TYPE (field));\n-\t\t    if (TREE_CODE (name) == IDENTIFIER_NODE)\n-\t\t      {\n-\t\t\tobstack_1grow (ob, '_');\n-\t\t\tgo_append_string (ob, name);\n-\t\t      }\n-\t\t    else if (TREE_CODE (name) == TYPE_DECL)\n-\t\t      {\n-\t\t\tobstack_1grow (ob, '_');\n-\t\t\tgo_append_string (ob, DECL_NAME (name));\n-\t\t      }\n+\t\t    tree name;\n+\t\t    void **slot;\n+\n+\t\t    name = TYPE_NAME (TREE_TYPE (field));\n+\t\t    if (TREE_CODE (name) == TYPE_DECL)\n+\t\t      name = DECL_NAME (name);\n+\n+\t\t    slot = htab_find_slot (container->invalid_hash,\n+\t\t\t\t\t   IDENTIFIER_POINTER (name),\n+\t\t\t\t\t   NO_INSERT);\n+\t\t    if (slot != NULL)\n+\t\t      ret = false;\n+\n+\t\t    obstack_1grow (ob, '_');\n+\t\t    go_append_string (ob, name);\n \t\t  }\n \t\telse\n \t\t  {"}]}