{"sha": "4a283090455f0d8c9271d18d2e02e1c1c6717809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyODMwOTA0NTVmMGQ4YzkyNzFkMThkMmUwMmUxYzFjNjcxNzgwOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-11T12:34:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-11T12:34:53Z"}, "message": "re PR middle-end/37448 (cannot compile big function)\n\n\tPR middle-end/37448\n\t* tree-inline.c (add_lexical_block): Replace with ...\n\t(prepend_lexical_block): ... prepend at begginig.\n\t(remap_blocks): Use it and reverse later.\n\t(expand_call_inline): Use prepend_lexical_block.\n\nFrom-SVN: r140281", "tree": {"sha": "886889879ce4d0e0f8184834eae57040a9936d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886889879ce4d0e0f8184834eae57040a9936d9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a283090455f0d8c9271d18d2e02e1c1c6717809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a283090455f0d8c9271d18d2e02e1c1c6717809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a283090455f0d8c9271d18d2e02e1c1c6717809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a283090455f0d8c9271d18d2e02e1c1c6717809/comments", "author": null, "committer": null, "parents": [{"sha": "a856e96f849318b2a909345ceff1828863b93c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a856e96f849318b2a909345ceff1828863b93c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a856e96f849318b2a909345ceff1828863b93c11"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "5777b0cbb9a495905857d07a8f217b27b6b8e9d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a283090455f0d8c9271d18d2e02e1c1c6717809/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a283090455f0d8c9271d18d2e02e1c1c6717809/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a283090455f0d8c9271d18d2e02e1c1c6717809", "patch": "@@ -1,3 +1,11 @@\n+2008-09-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/37448\n+\t* tree-inline.c (add_lexical_block): Replace with ...\n+\t(prepend_lexical_block): ... prepend at begginig.\n+\t(remap_blocks): Use it and reverse later.\n+\t(expand_call_inline): Use prepend_lexical_block.\n+\n 2008-09-11  Jan Hubicka  <jh@suse.cz>\n \n \t* gimplify.c (pop_gimplify_context): Free bind_expr_stack."}, {"sha": "114cd4718e359959fcdb3856d5cc43aec554b704", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a283090455f0d8c9271d18d2e02e1c1c6717809/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a283090455f0d8c9271d18d2e02e1c1c6717809/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4a283090455f0d8c9271d18d2e02e1c1c6717809", "patch": "@@ -129,7 +129,7 @@ static void unsave_expr_1 (tree);\n static tree unsave_r (tree *, int *, void *);\n static void declare_inline_vars (tree, tree);\n static void remap_save_expr (tree *, void *, int *);\n-static void add_lexical_block (tree current_block, tree new_block);\n+static void prepend_lexical_block (tree current_block, tree new_block);\n static tree copy_decl_to_var (tree, copy_body_data *);\n static tree copy_result_decl_to_var (tree, copy_body_data *);\n static tree copy_decl_maybe_to_var (tree, copy_body_data *);\n@@ -512,7 +512,10 @@ remap_blocks (tree block, copy_body_data *id)\n   remap_block (&new_tree, id);\n   gcc_assert (new_tree != block);\n   for (t = BLOCK_SUBBLOCKS (block); t ; t = BLOCK_CHAIN (t))\n-    add_lexical_block (new_tree, remap_blocks (t, id));\n+    prepend_lexical_block (new_tree, remap_blocks (t, id));\n+  /* Blocks are in arbitrary order, but make things slightly prettier and do\n+     not swap order when producing a copy.  */\n+  BLOCK_SUBBLOCKS (new_tree) = blocks_nreverse (BLOCK_SUBBLOCKS (new_tree));\n   return new_tree;\n }\n \n@@ -3032,16 +3035,10 @@ count_insns_seq (gimple_seq seq, eni_weights *weights)\n /* Install new lexical TREE_BLOCK underneath 'current_block'.  */\n \n static void\n-add_lexical_block (tree current_block, tree new_block)\n+prepend_lexical_block (tree current_block, tree new_block)\n {\n-  tree *blk_p;\n-\n-  /* Walk to the last sub-block.  */\n-  for (blk_p = &BLOCK_SUBBLOCKS (current_block);\n-       *blk_p;\n-       blk_p = &BLOCK_CHAIN (*blk_p))\n-    ;\n-  *blk_p = new_block;\n+  BLOCK_CHAIN (new_block) = BLOCK_SUBBLOCKS (current_block);\n+  BLOCK_SUBBLOCKS (current_block) = new_block;\n   BLOCK_SUPERCONTEXT (new_block) = current_block;\n }\n \n@@ -3222,7 +3219,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   id->block = make_node (BLOCK);\n   BLOCK_ABSTRACT_ORIGIN (id->block) = fn;\n   BLOCK_SOURCE_LOCATION (id->block) = input_location;\n-  add_lexical_block (gimple_block (stmt), id->block);\n+  prepend_lexical_block (gimple_block (stmt), id->block);\n \n   /* Local declarations will be replaced by their equivalents in this\n      map.  */\n@@ -3248,7 +3245,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   initialize_inlined_parameters (id, stmt, fn, bb);\n \n   if (DECL_INITIAL (fn))\n-    add_lexical_block (id->block, remap_blocks (DECL_INITIAL (fn), id));\n+    prepend_lexical_block (id->block, remap_blocks (DECL_INITIAL (fn), id));\n \n   /* Return statements in the function body will be replaced by jumps\n      to the RET_LABEL.  */"}]}