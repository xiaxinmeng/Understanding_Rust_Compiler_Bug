{"sha": "7b4ebba52333641f9f09c8079e1d73e9f638083f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0ZWJiYTUyMzMzNjQxZjlmMDljODA3OWUxZDczZTlmNjM4MDgzZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T10:13:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T10:13:54Z"}, "message": "[multiple changes]\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch7.adb, einfo.adb, einfo.ads, sem_ch13.adb: Minor change of\n\tidentifier name.\n\n2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Contract): Enable the volatility\n\tchecks when the related variable comes from source.\n\t* sem_res.adb (Resolve_Actuals): Enable the volatility checks\n\twhen the related actual parameter comes from source. Update comment.\n\t* freeze.adb (Freeze_Record_Type): Do not freeze the designated\n\ttype of an array of pointers when the designated type is\n\tclass-wide and its root type is the record being currently frozen.\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Preserve Ekind\n\tof renaming declaration created for domain of iteration.\n\t* sem_aggr.adb (Resolve_Array_Aggregate): Better placement\n\tfor error messages on aggregates whose index subtypes have\n\tpredicates. The new placement avoids posting messages on previous\n\tsubtype declarations rather than on the aggregate itself.\n\t* sem_disp.adb (Is_Inherited_Public_Operation): New predicate for\n\tAdd_Dispatching_Operation, to handle properly the overriding of\n\tthe predefined operations on controlled types, when the partial\n\tview of a type is not visibly controlled.\n\n2014-08-01  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Add tutorial on portable fixed-point types as an\n\tappendix.\n\nFrom-SVN: r213446", "tree": {"sha": "5b6f5e56219ca55925542658affca1b3131a869b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6f5e56219ca55925542658affca1b3131a869b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b4ebba52333641f9f09c8079e1d73e9f638083f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4ebba52333641f9f09c8079e1d73e9f638083f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4ebba52333641f9f09c8079e1d73e9f638083f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4ebba52333641f9f09c8079e1d73e9f638083f/comments", "author": null, "committer": null, "parents": [{"sha": "798595680bb04dc570d2d6a46322c35c0de3e482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798595680bb04dc570d2d6a46322c35c0de3e482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798595680bb04dc570d2d6a46322c35c0de3e482"}], "stats": {"total": 395, "additions": 322, "deletions": 73}, "files": [{"sha": "31bc891508a0ae4afe9a16ffcada36d2055770fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -1,3 +1,36 @@\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch7.adb, einfo.adb, einfo.ads, sem_ch13.adb: Minor change of\n+\tidentifier name.\n+\n+2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Contract): Enable the volatility\n+\tchecks when the related variable comes from source.\n+\t* sem_res.adb (Resolve_Actuals): Enable the volatility checks\n+\twhen the related actual parameter comes from source. Update comment.\n+\t* freeze.adb (Freeze_Record_Type): Do not freeze the designated\n+\ttype of an array of pointers when the designated type is\n+\tclass-wide and its root type is the record being currently frozen.\n+\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Preserve Ekind\n+\tof renaming declaration created for domain of iteration.\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Better placement\n+\tfor error messages on aggregates whose index subtypes have\n+\tpredicates. The new placement avoids posting messages on previous\n+\tsubtype declarations rather than on the aggregate itself.\n+\t* sem_disp.adb (Is_Inherited_Public_Operation): New predicate for\n+\tAdd_Dispatching_Operation, to handle properly the overriding of\n+\tthe predefined operations on controlled types, when the partial\n+\tview of a type is not visibly controlled.\n+\n+2014-08-01  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Add tutorial on portable fixed-point types as an\n+\tappendix.\n+\n 2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb (Is_Hidden_Non_Overridden_Subprogram): Remove the"}, {"sha": "84e7763721b67f681a55548250367bcc17b89c62", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -269,8 +269,7 @@ package body Einfo is\n    --  the spec of Einfo for further details.\n \n    --    Is_Inlined_Always               Flag1\n-   --    Is_Hidden_Non_Overridden_Subprogram\n-   --                                    Flag2\n+   --    Is_Hidden_Non_Overridden_Subpgm Flag2\n    --    Is_Frozen                       Flag4\n    --    Has_Discriminants               Flag5\n    --    Is_Dispatching_Operation        Flag6\n@@ -2066,10 +2065,10 @@ package body Einfo is\n       return Flag57 (Id);\n    end Is_Hidden;\n \n-   function Is_Hidden_Non_Overridden_Subprogram (Id : E) return B is\n+   function Is_Hidden_Non_Overridden_Subpgm (Id : E) return B is\n    begin\n       return Flag2 (Id);\n-   end Is_Hidden_Non_Overridden_Subprogram;\n+   end Is_Hidden_Non_Overridden_Subpgm;\n \n    function Is_Hidden_Open_Scope (Id : E) return B is\n    begin\n@@ -4847,10 +4846,11 @@ package body Einfo is\n       Set_Flag57 (Id, V);\n    end Set_Is_Hidden;\n \n-   procedure Set_Is_Hidden_Non_Overridden_Subprogram (Id : E; V : B := True) is\n+   procedure Set_Is_Hidden_Non_Overridden_Subpgm (Id : E; V : B := True) is\n    begin\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Flag2 (Id, V);\n-   end Set_Is_Hidden_Non_Overridden_Subprogram;\n+   end Set_Is_Hidden_Non_Overridden_Subpgm;\n \n    procedure Set_Is_Hidden_Open_Scope (Id : E; V : B := True) is\n    begin\n@@ -8359,8 +8359,7 @@ package body Einfo is\n       W (\"Is_Generic_Instance\",             Flag130 (Id));\n       W (\"Is_Generic_Type\",                 Flag13  (Id));\n       W (\"Is_Hidden\",                       Flag57  (Id));\n-      W (\"Is_Hidden_Non_Overridden_Subprogram\",\n-                                            Flag2   (Id));\n+      W (\"Is_Hidden_Non_Overridden_Subpgm\", Flag2   (Id));\n       W (\"Is_Hidden_Open_Scope\",            Flag171 (Id));\n       W (\"Is_Immediately_Visible\",          Flag7   (Id));\n       W (\"Is_Implementation_Defined\",       Flag254 (Id));"}, {"sha": "27c8f3035bfe2a32980d7b9187de73811d4eb04c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -2422,7 +2422,7 @@ package Einfo is\n --       child unit, and when compiling a private child unit (see Install_\n --       Private_Declaration in sem_ch7).\n \n---    Is_Hidden_Non_Overridden_Subprogram (Flag2)\n+--    Is_Hidden_Non_Overridden_Subpgm (Flag2)\n --       Defined in all entities. Set for implicitly declared subprograms\n --       that require overriding or are null procedures, and are hidden by\n --       a non-fully conformant homograph with the same characteristics\n@@ -5663,7 +5663,7 @@ package Einfo is\n    --    Is_Discriminant_Check_Function      (Flag264)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Generic_Actual_Subprogram        (Flag274)  (non-generic case only)\n-   --    Is_Hidden_Non_Overridden_Subprogram (Flag2)    (non-generic case only)\n+   --    Is_Hidden_Non_Overridden_Subpgm     (Flag2)    (non-generic case only)\n    --    Is_Inlined_Always                   (Flag1)    (non-generic case only)\n    --    Is_Instantiated                     (Flag126)  (generic case only)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n@@ -5957,7 +5957,7 @@ package Einfo is\n    --    Is_Constructor                      (Flag76)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Generic_Actual_Subprogram        (Flag274)  (non-generic case only)\n-   --    Is_Hidden_Non_Overridden_Subprogram (Flag2)    (non-generic case only)\n+   --    Is_Hidden_Non_Overridden_Subpgm     (Flag2)    (non-generic case only)\n    --    Is_Inlined_Always                   (Flag1)    (non-generic case only)\n    --    Is_Instantiated                     (Flag126)  (generic case only)\n    --    Is_Interrupt_Handler                (Flag89)\n@@ -6670,7 +6670,7 @@ package Einfo is\n    function Is_Frozen                           (Id : E) return B;\n    function Is_Generic_Instance                 (Id : E) return B;\n    function Is_Hidden                           (Id : E) return B;\n-   function Is_Hidden_Non_Overridden_Subprogram (Id : E) return B;\n+   function Is_Hidden_Non_Overridden_Subpgm     (Id : E) return B;\n    function Is_Hidden_Open_Scope                (Id : E) return B;\n    function Is_Immediately_Visible              (Id : E) return B;\n    function Is_Implementation_Defined           (Id : E) return B;\n@@ -7307,8 +7307,7 @@ package Einfo is\n    procedure Set_Is_Generic_Instance             (Id : E; V : B := True);\n    procedure Set_Is_Generic_Type                 (Id : E; V : B := True);\n    procedure Set_Is_Hidden                       (Id : E; V : B := True);\n-   procedure Set_Is_Hidden_Non_Overridden_Subprogram\n-                                                 (Id : E; V : B := True);\n+   procedure Set_Is_Hidden_Non_Overridden_Subpgm (Id : E; V : B := True);\n    procedure Set_Is_Hidden_Open_Scope            (Id : E; V : B := True);\n    procedure Set_Is_Immediately_Visible          (Id : E; V : B := True);\n    procedure Set_Is_Implementation_Defined       (Id : E; V : B := True);\n@@ -8076,7 +8075,7 @@ package Einfo is\n    pragma Inline (Is_Generic_Type);\n    pragma Inline (Is_Generic_Unit);\n    pragma Inline (Is_Hidden);\n-   pragma Inline (Is_Hidden_Non_Overridden_Subprogram);\n+   pragma Inline (Is_Hidden_Non_Overridden_Subpgm);\n    pragma Inline (Is_Hidden_Open_Scope);\n    pragma Inline (Is_Immediately_Visible);\n    pragma Inline (Is_Implementation_Defined);\n@@ -8533,7 +8532,7 @@ package Einfo is\n    pragma Inline (Set_Is_Generic_Instance);\n    pragma Inline (Set_Is_Generic_Type);\n    pragma Inline (Set_Is_Hidden);\n-   pragma Inline (Set_Is_Hidden_Non_Overridden_Subprogram);\n+   pragma Inline (Set_Is_Hidden_Non_Overridden_Subpgm);\n    pragma Inline (Set_Is_Hidden_Open_Scope);\n    pragma Inline (Set_Is_Immediately_Visible);\n    pragma Inline (Set_Is_Implementation_Defined);"}, {"sha": "9332930d96be2d808cee7edbecaf435a9bb7033e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -2667,10 +2667,10 @@ package body Freeze is\n       ------------------------\n \n       procedure Freeze_Record_Type (Rec : Entity_Id) is\n+         ADC  : Node_Id;\n          Comp : Entity_Id;\n          IR   : Node_Id;\n          Prev : Entity_Id;\n-         ADC  : Node_Id;\n \n          Junk : Boolean;\n          pragma Warnings (Off, Junk);\n@@ -3123,18 +3123,56 @@ package body Freeze is\n             then\n                Check_Itype (Etype (Comp));\n \n+            --  Freeze the designated type when initializing a component with\n+            --  an aggregate in case the aggregate contains allocators.\n+\n+            --     type T is ...;\n+            --     type T_Ptr is access all T;\n+            --     type T_Array is array ... of T_Ptr;\n+\n+            --     type Rec is record\n+            --        Comp : T_Array := (others => ...);\n+            --     end record;\n+\n             elsif Is_Array_Type (Etype (Comp))\n               and then Is_Access_Type (Component_Type (Etype (Comp)))\n-              and then Present (Parent (Comp))\n-              and then Nkind (Parent (Comp)) = N_Component_Declaration\n-              and then Present (Expression (Parent (Comp)))\n-              and then Nkind (Expression (Parent (Comp))) = N_Aggregate\n-              and then Is_Fully_Defined\n-                         (Designated_Type (Component_Type (Etype (Comp))))\n             then\n-               Freeze_And_Append\n-                 (Designated_Type\n-                    (Component_Type (Etype (Comp))), N, Result);\n+               declare\n+                  Comp_Par  : constant Node_Id   := Parent (Comp);\n+                  Desig_Typ : constant Entity_Id :=\n+                                Designated_Type\n+                                  (Component_Type (Etype (Comp)));\n+\n+               begin\n+                  --  The only case when this sort of freezing is not done is\n+                  --  when the designated type is class-wide and the root type\n+                  --  is the record owning the component. This scenario results\n+                  --  in a circularity because the class-wide type requires\n+                  --  primitives that have not been created yet as the root\n+                  --  type is in the process of being frozen.\n+\n+                  --     type Rec is tagged;\n+                  --     type Rec_Ptr is access all Rec'Class;\n+                  --     type Rec_Array is array ... of Rec_Ptr;\n+\n+                  --     type Rec is record\n+                  --        Comp : Rec_Array := (others => ...);\n+                  --     end record;\n+\n+                  if Is_Class_Wide_Type (Desig_Typ)\n+                    and then Root_Type (Desig_Typ) = Rec\n+                  then\n+                     null;\n+\n+                  elsif Is_Fully_Defined (Desig_Typ)\n+                    and then Present (Comp_Par)\n+                    and then Nkind (Comp_Par) = N_Component_Declaration\n+                    and then Present (Expression (Comp_Par))\n+                    and then Nkind (Expression (Comp_Par)) = N_Aggregate\n+                  then\n+                     Freeze_And_Append (Desig_Typ, N, Result);\n+                  end if;\n+               end;\n             end if;\n \n             Prev := Comp;"}, {"sha": "a63aa76d6ba08632ab46913d9b83758cd74d59e6", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -190,6 +190,7 @@ AdaCore@*\n * Overflow Check Handling in GNAT::\n * Conditional Compilation::\n * Inline Assembler::\n+* Writing Portable Fixed-Point Declarations::\n * Compatibility and Porting Guide::\n * Microsoft Windows Topics::\n * Mac OS Topics::\n@@ -426,6 +427,10 @@ both with Ada in general and with GNAT facilities in particular.\n @ref{Inline Assembler}, shows how to use the inline assembly facility\n in an Ada program.\n \n+@item\n+@ref{Writing Portable Fixed-Point Declarations}, gives some guidance on\n+defining portable fixed-point types.\n+\n @item\n @ref{Compatibility and Porting Guide}, contains sections on compatibility\n of GNAT with other Ada development environments (including Ada 83 systems),\n@@ -26410,6 +26415,146 @@ problems.\n @c END OF INLINE ASSEMBLER CHAPTER\n @c ===============================\n \n+\n+@c *****************************************\n+@c Writing Portable Fixed-Point Declarations\n+@c *****************************************\n+@node Writing Portable Fixed-Point Declarations\n+@appendix Writing Portable Fixed-Point Declarations\n+@cindex Fixed-point types (writing portable declarations)\n+\n+@noindent\n+The Ada Reference Manual gives an implementation freedom to choose bounds\n+that are narrower by @code{Small} from the given bounds.\n+For example, if we write\n+\n+@smallexample @c ada\n+   type F1 is delta 1.0 range -128.0 .. +128.0;\n+@end smallexample\n+\n+@noindent\n+then the implementation is allowed to choose -128.0 .. +127.0 if it\n+likes, but is not required to do so.\n+\n+This leads to possible portability problems, so let's have a closer\n+look at this, and figure out how to avoid these problems.\n+\n+First, why does this freedom exist, and why would an implementation\n+take advantage of it? To answer this, take a closer look at the type\n+declaration for @code{F1} above. If the compiler uses the given bounds,\n+it would need 9 bits to hold the largest positive value (and typically\n+that means 16 bits on all machines). But if the implementation chooses\n+the +127.0 bound then it can fit values of the type in 8 bits.\n+\n+Why not make the user write +127.0 if that's what is wanted?\n+The rationale is that if you are thinking of fixed point\n+as a kind of ``poor man's floating-point'', then you don't want\n+to be thinking about the scaled integers that are used in its\n+representation. Let's take another example:\n+\n+@smallexample @c ada\n+   type F2 is delta 2.0**(-15) range -1.0 .. +1.0;\n+@end smallexample\n+\n+@noindent\n+Looking at this declaration, it seems casually as though\n+it should fit in 16 bits, but again that extra positive value\n++1.0 has the scaled integer equivalent of 2**15 which is one too\n+big for signed 16 bits. The implementation can treat this as:\n+\n+@smallexample @c ada\n+   type F2 is delta 2.0**(-15) range -1.0 .. +1.0-(2.0**(-15));\n+@end smallexample\n+\n+@noindent\n+and the Ada language design team felt that this was too annoying\n+to require. We don't need to debate this decision at this point,\n+since it is well established (the rule about narrowing the ranges\n+dates to Ada 83).\n+\n+But the important point is that an implementation is not required\n+to do this narrowing, so we have a potential portability problem.\n+We could imagine three types of implementation:\n+\n+@enumerate a\n+@item\n+those that narrow the range automatically if they can figure\n+out that the narrower range will allow storage in a smaller machine unit,\n+\n+@item\n+those that will narrow only if forced to by a @code{'Size} clause, and\n+\n+@item\n+those that will never narrow.\n+@end enumerate\n+\n+@noindent\n+Now if we are language theoreticians, we can imagine a fourth\n+approach: is to narrow all the time, e.g. to treat\n+\n+@smallexample @c ada\n+   type F3 is delta 1.0 range -10.0 .. +23.0;\n+@end smallexample\n+\n+@noindent\n+as though it had been written:\n+\n+@smallexample @c ada\n+   type F3 is delta 1.0 range -9.0 .. +22.0;\n+@end smallexample\n+\n+@noindent\n+But although technically allowed, such a behavior would be hostile and silly,\n+and no real compiler would do this. All real compilers will fall into one of\n+the categories (a), (b) or (c) above.\n+\n+So, how do you get the compiler to do what you want? The answer is give the\n+actual bounds you want, and then use a @code{'Small} clause and a\n+@code{'Size} clause to absolutely pin down what the compiler does.\n+E.g., for @code{F2} above, we will write:\n+\n+@smallexample @c ada\n+@group\n+   My_Small : constant := 2.0**(-15);\n+   My_First : constant := -1.0;\n+   My_Last  : constant := +1.0 - My_Small;\n+\n+   type F2 is delta My_Small range My_First .. My_Last;\n+@end group\n+@end smallexample\n+\n+@noindent\n+and then add\n+\n+@smallexample @c ada\n+@group\n+   for F2'Small use my_Small;\n+   for F2'Size  use 16;\n+@end group\n+@end smallexample\n+\n+@noindent\n+In practice all compilers will do the same thing here and will give you\n+what you want, so the above declarations are fully portable. If you really\n+want to play language lawyer and guard against ludicrous behavior by the\n+compiler you could add\n+\n+@smallexample @c ada\n+@group\n+   Test1 : constant := 1 / Boolean'Pos (F2'First = My_First);\n+   Test2 : constant := 1 / Boolean'Pos (F2'Last  = My_Last);\n+@end group\n+@end smallexample\n+\n+@noindent\n+One or other or both are allowed to be illegal if the compiler is\n+behaving in a silly manner, but at least the silly compiler will not\n+get away with silently messing with your (very clear) intentions.\n+\n+If you follow this scheme you will be guaranteed that your fixed-point\n+types will be portable.\n+\n+\n @c ***********************************\n @c * Compatibility and Porting Guide *\n @c ***********************************"}, {"sha": "3ebaa7f6060aa0e9d78d0d303651031d45e87cb0", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -2230,30 +2230,37 @@ package body Sem_Aggr is\n \n                            if Lo_Val > Hi_Val + 1 then\n \n-                              --  Set location for flag, if the choice is an\n-                              --  explicit Range, then point to the low bound,\n-                              --  otherwise just point to  the choice.\n+                              declare\n+                                 Error_Node : Node_Id;\n \n-                              Choice := Table (J).Choice;\n+                              begin\n+                                 --  If the choice is the bound of a range in\n+                                 --  a subtype indication, it is not in the\n+                                 --  source lists for the aggregate itself, so\n+                                 --  post the error on the aggregate. Otherwise\n+                                 --  post it on choice itself.\n \n-                              if Nkind (Choice) = N_Range then\n-                                 Choice := Low_Bound (Choice);\n-                              end if;\n+                                 Choice := Table (J).Choice;\n \n-                              --  Now post appropriate message\n+                                 if Is_List_Member (Choice) then\n+                                    Error_Node := Choice;\n+                                 else\n+                                    Error_Node := N;\n+                                 end if;\n \n-                              if Hi_Val + 1 = Lo_Val - 1 then\n-                                 Error_Msg_N\n-                                   (\"missing index value in array aggregate!\",\n-                                    Choice);\n-                              else\n-                                 Error_Msg_N\n-                                   (\"missing index values in array aggregate!\",\n-                                    Choice);\n-                              end if;\n+                                 if Hi_Val + 1 = Lo_Val - 1 then\n+                                    Error_Msg_N\n+                                      (\"missing index value \"\n+                                       & \"in array aggregate!\", Error_Node);\n+                                 else\n+                                    Error_Msg_N\n+                                      (\"missing index values \"\n+                                       & \"in array aggregate!\", Error_Node);\n+                                 end if;\n \n-                              Output_Bad_Choices\n-                                (Hi_Val + 1, Lo_Val - 1, Choice);\n+                                 Output_Bad_Choices\n+                                   (Hi_Val + 1, Lo_Val - 1, Error_Node);\n+                              end;\n                            end if;\n                         end loop;\n                      end if;"}, {"sha": "76c7a70eb28d4bde46257f8525f47de887f939b7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -9981,13 +9981,13 @@ package body Sem_Ch13 is\n                  and then Is_Non_Overridden_Or_Null_Procedure (Prim)\n                  and then not Fully_Conformant (Prim, Subp_Id)\n                then\n-                  Set_Is_Hidden_Non_Overridden_Subprogram (Prim);\n-                  Set_Is_Immediately_Visible              (Prim, False);\n-                  Set_Is_Potentially_Use_Visible          (Prim, False);\n+                  Set_Is_Hidden_Non_Overridden_Subpgm (Prim);\n+                  Set_Is_Immediately_Visible          (Prim, False);\n+                  Set_Is_Potentially_Use_Visible      (Prim, False);\n \n-                  Set_Is_Hidden_Non_Overridden_Subprogram (Subp_Id);\n-                  Set_Is_Immediately_Visible              (Subp_Id, False);\n-                  Set_Is_Potentially_Use_Visible          (Subp_Id, False);\n+                  Set_Is_Hidden_Non_Overridden_Subpgm (Subp_Id);\n+                  Set_Is_Immediately_Visible          (Subp_Id, False);\n+                  Set_Is_Potentially_Use_Visible      (Subp_Id, False);\n                end if;\n \n                Next_Elmt (Prim_Elmt);"}, {"sha": "e9f3061adac255b5dd9f4582be23e2802e7820f8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -3037,9 +3037,10 @@ package body Sem_Ch3 is\n       else pragma Assert (Ekind (Obj_Id) = E_Variable);\n \n          --  The following checks are only relevant when SPARK_Mode is on as\n-         --  they are not standard Ada legality rules.\n+         --  they are not standard Ada legality rules. Internally generated\n+         --  temporaries are ignored.\n \n-         if SPARK_Mode = On then\n+         if SPARK_Mode = On and then Comes_From_Source (Obj_Id) then\n             if Is_Effectively_Volatile (Obj_Id) then\n \n                --  The declaration of an effectively volatile object must"}, {"sha": "4bbd42fab794cf54798d91de272b30fec9a57697", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -1853,11 +1853,8 @@ package body Sem_Ch5 is\n \n             --  The name in the renaming declaration may be a function call.\n             --  Indicate that it does not come from source, to suppress\n-            --  spurious warnings on renamings of parameterless functions, a\n-            --  common enough idiom in user-defined iterators. The entity of\n-            --  the renaming must be a variable, because user- defined Iterate\n-            --  function may have in-out parameters, even if predefined ones do\n-            --  not.\n+            --  spurious warnings on renamings of parameterless functions,\n+            --  a common enough idiom in user-defined iterators.\n \n             Decl :=\n               Make_Object_Renaming_Declaration (Loc,\n@@ -1870,7 +1867,6 @@ package body Sem_Ch5 is\n             Rewrite (Name (N), New_Occurrence_Of (Id, Loc));\n             Set_Etype (Id, Typ);\n             Set_Etype (Name (N), Typ);\n-            Set_Ekind (Id, E_Variable);\n          end;\n \n       --  Container is an entity or an array with uncontrolled components, or"}, {"sha": "f75b6c1aaa2080df77378cdc71991505b7ea2e61", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -1986,7 +1986,7 @@ package body Sem_Ch7 is\n          --  a tagged type back into visibility if they have non-conformant\n          --  homographs (Ada RM 8.3 12.3/2).\n \n-         elsif Is_Hidden_Non_Overridden_Subprogram (Id) then\n+         elsif Is_Hidden_Non_Overridden_Subpgm (Id) then\n             null;\n \n          else"}, {"sha": "35f61816db3cda82ef47d3613f7e42ca6ed9e32b", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,6 +86,10 @@ package body Sem_Disp is\n    --  This routine does not search for non-hidden primitives since they are\n    --  covered by the normal Ada 2005 rules.\n \n+   function Is_Inherited_Public_Operation (Op : Entity_Id) return Boolean;\n+   --  Check whether a primitive operation is inherited from an operation\n+   --  declared in the visible part of its package.\n+\n    -------------------------------\n    -- Add_Dispatching_Operation --\n    -------------------------------\n@@ -1233,9 +1237,17 @@ package body Sem_Disp is\n \n          Check_Subtype_Conformant (Subp, Ovr_Subp);\n \n+         --  A primitive operation with the name of a primitive controlled\n+         --  operation does not override a non-visible overriding controlled\n+         --  operation, i.e. one declared in a private part when the full\n+         --  view of a type is controlled. Conversely, it will override a\n+         --  visible operation that may be declared in a partial view when\n+         --  the full view is controlled.\n+\n          if Nam_In (Chars (Subp), Name_Initialize, Name_Adjust, Name_Finalize)\n            and then Is_Controlled (Tagged_Type)\n            and then not Is_Visibly_Controlled (Tagged_Type)\n+           and then not Is_Inherited_Public_Operation (Ovr_Subp)\n          then\n             Set_Overridden_Operation (Subp, Empty);\n \n@@ -2159,6 +2171,27 @@ package body Sem_Disp is\n         and then Is_Interface (Find_Dispatching_Type (E));\n    end Is_Null_Interface_Primitive;\n \n+   -----------------------------------\n+   -- Is_Inherited_Public_Operation --\n+   -----------------------------------\n+\n+   function Is_Inherited_Public_Operation (Op : Entity_Id) return Boolean is\n+      Prim      : constant Entity_Id := Alias (Op);\n+      Scop      : constant Entity_Id := Scope (Prim);\n+      Pack_Decl : Node_Id;\n+\n+   begin\n+      if Comes_From_Source (Prim) and then Ekind (Scop) = E_Package then\n+         Pack_Decl := Unit_Declaration_Node (Scop);\n+         return Nkind (Pack_Decl) = N_Package_Declaration\n+           and then List_Containing (Unit_Declaration_Node (Prim)) =\n+                            Visible_Declarations (Specification (Pack_Decl));\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Inherited_Public_Operation;\n+\n    --------------------------\n    -- Is_Tag_Indeterminate --\n    --------------------------\n@@ -2222,8 +2255,7 @@ package body Sem_Disp is\n       elsif Nkind (Orig_Node) = N_Attribute_Reference\n         and then\n           Get_Attribute_Id (Attribute_Name (Orig_Node)) = Attribute_Input\n-        and then\n-          Nkind (Prefix (Orig_Node)) /= N_Attribute_Reference\n+        and then Nkind (Prefix (Orig_Node)) /= N_Attribute_Reference\n       then\n          return True;\n \n@@ -2267,9 +2299,7 @@ package body Sem_Disp is\n       --  was malformed, and an error must have been emitted already.\n \n       Elmt := First_Elmt (Primitive_Operations (Tagged_Type));\n-      while Present (Elmt)\n-        and then Node (Elmt) /= Prev_Op\n-      loop\n+      while Present (Elmt) and then Node (Elmt) /= Prev_Op loop\n          Next_Elmt (Elmt);\n       end loop;\n \n@@ -2304,9 +2334,8 @@ package body Sem_Disp is\n          Replace_Elmt (Elmt, New_Op);\n       end if;\n \n-      if Ada_Version >= Ada_2005\n-        and then Has_Interfaces (Tagged_Type)\n-      then\n+      if Ada_Version >= Ada_2005 and then Has_Interfaces (Tagged_Type) then\n+\n          --  Ada 2005 (AI-251): Update the attribute alias of all the aliased\n          --  entities of the overridden primitive to reference New_Op, and\n          --  also propagate the proper value of Is_Abstract_Subprogram. Verify"}, {"sha": "38c1017e33957fc304ec8b1b581fdd5c52e96dd4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ebba52333641f9f09c8079e1d73e9f638083f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7b4ebba52333641f9f09c8079e1d73e9f638083f", "patch": "@@ -4325,10 +4325,12 @@ package body Sem_Res is\n             end if;\n \n             --  The following checks are only relevant when SPARK_Mode is on as\n-            --  they are not standard Ada legality rule.\n+            --  they are not standard Ada legality rule. Internally generated\n+            --  temporaries are ignored.\n \n             if SPARK_Mode = On\n               and then Is_Effectively_Volatile_Object (A)\n+              and then Comes_From_Source (A)\n             then\n                --  An effectively volatile object may act as an actual\n                --  parameter when the corresponding formal is of a non-scalar\n@@ -4353,9 +4355,9 @@ package body Sem_Res is\n \n                --  Detect an external variable with an enabled property that\n                --  does not match the mode of the corresponding formal in a\n-               --  procedure call.\n-\n-               --  why only procedure calls ???\n+               --  procedure call. Functions are not considered because they\n+               --  cannot have effectively volatile formal parameters in the\n+               --  first place.\n \n                if Ekind (Nam) = E_Procedure\n                  and then Is_Entity_Name (A)"}]}