{"sha": "40f648378061c170cf6a9ab680af01b3a3a83569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmNjQ4Mzc4MDYxYzE3MGNmNmE5YWI2ODBhZjAxYjNhM2E4MzU2OQ==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-02-07T15:04:23Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-02-07T15:04:23Z"}, "message": "aarch64: ACLE I8MM multiply-accumulate intrinsics\n\nThis patch adds intrinsics for 8-bit integer matrix multiply-accumulate\noperations including vmmlaq_s32, vmmlaq_u32, and vusmmlaq_s32.\n\ngcc/ChangeLog:\n\n2020-02-07  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def (simd_smmla): New entry.\n\t(simd_ummla, simd_usmmla): Likewise.\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_<sur>mmlav16qi): New.\n\t* config/aarch64/arm_neon.h (vmmlaq_s32, vmmlaq_u32): New.\n\t(vusmmlaq_s32): New.\n\ngcc/testsuite/ChangeLog:\n\n2020-02-07  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* gcc.target/aarch64/simd/vmmla.c: New test.", "tree": {"sha": "7c67d016392906eb12ab5507e948ca8b10c074b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c67d016392906eb12ab5507e948ca8b10c074b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f648378061c170cf6a9ab680af01b3a3a83569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f648378061c170cf6a9ab680af01b3a3a83569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f648378061c170cf6a9ab680af01b3a3a83569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f648378061c170cf6a9ab680af01b3a3a83569/comments", "author": null, "committer": null, "parents": [{"sha": "b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "d255bd9ea13b2e563d87b3086ac14dc6d24ae2b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f648378061c170cf6a9ab680af01b3a3a83569", "patch": "@@ -1,3 +1,11 @@\n+2020-02-07  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (simd_smmla): New entry.\n+\t(simd_ummla, simd_usmmla): Likewise.\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_<sur>mmlav16qi): New.\n+\t* config/aarch64/arm_neon.h (vmmlaq_s32, vmmlaq_u32): New.\n+\t(vusmmlaq_s32): New.\n+\n 2020-02-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/93519"}, {"sha": "fe3c7f1f832120abc7328fd027f32fce564e9185", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=40f648378061c170cf6a9ab680af01b3a3a83569", "patch": "@@ -703,3 +703,8 @@\n   VAR1 (QUADOP_LANE, bfmlalt_lane, 0, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalb_lane_q, 0, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalt_lane_q, 0, v4sf)\n+\n+  /* Implemented by aarch64_simd_<sur>mmlav16qi.  */\n+  VAR1 (TERNOP, simd_smmla, 0, v16qi)\n+  VAR1 (TERNOPU, simd_ummla, 0, v16qi)\n+  VAR1 (TERNOP_SSUS, simd_usmmla, 0, v16qi)"}, {"sha": "c8e1012bd7f7776bc44179d8ff6030a4e305846b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=40f648378061c170cf6a9ab680af01b3a3a83569", "patch": "@@ -7173,3 +7173,15 @@\n }\n   [(set_attr \"type\" \"neon_fp_mla_s_scalar_q\")]\n )\n+\n+;; 8-bit integer matrix multiply-accumulate\n+(define_insn \"aarch64_simd_<sur>mmlav16qi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n+\t(plus:V4SI\n+\t (unspec:V4SI [(match_operand:V16QI 2 \"register_operand\" \"w\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"w\")] MATMUL)\n+\t (match_operand:V4SI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_I8MM\"\n+  \"<sur>mmla\\\\t%0.4s, %2.16b, %3.16b\"\n+  [(set_attr \"type\" \"neon_mla_s_q\")]\n+)"}, {"sha": "a6bcdf1f64a2163c374efa72673f7e4177102ef7", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=40f648378061c170cf6a9ab680af01b3a3a83569", "patch": "@@ -34797,6 +34797,29 @@ vsudotq_laneq_s32 (int32x4_t __r, int8x16_t __a, uint8x16_t __b,\n   return __builtin_aarch64_sudot_laneqv16qi_sssus (__r, __a, __b, __index);\n }\n \n+/* Matrix Multiply-Accumulate.  */\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmmlaq_s32 (int32x4_t __r, int8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_aarch64_simd_smmlav16qi (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmmlaq_u32 (uint32x4_t __r, uint8x16_t __a, uint8x16_t __b)\n+{\n+  return __builtin_aarch64_simd_ummlav16qi_uuuu (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusmmlaq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_aarch64_simd_usmmlav16qi_ssus (__r, __a, __b);\n+}\n+\n #pragma GCC pop_options\n \n #undef __aarch64_vget_lane_any"}, {"sha": "7ec36cc1e3dc4bc4552c110de78da30c4ee2bf83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40f648378061c170cf6a9ab680af01b3a3a83569", "patch": "@@ -1,3 +1,7 @@\n+2020-02-07  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vmmla.c: New test.\n+\n 2020-02-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/93519"}, {"sha": "5eec2b5cfb96093174c28cde7395bbaa46eebf95", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmmla.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmmla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f648378061c170cf6a9ab680af01b3a3a83569/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmmla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmmla.c?ref=40f648378061c170cf6a9ab680af01b3a3a83569", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble} */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+i8mm\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+test_vmmlaq_s32 (int32x4_t r, int8x16_t a, int8x16_t b)\n+{\n+  return vmmlaq_s32 (r, a, b);\n+}\n+\n+uint32x4_t\n+test_vmmlaq_u32 (uint32x4_t r, uint8x16_t a, uint8x16_t b)\n+{\n+  return vmmlaq_u32 (r, a, b);\n+}\n+\n+int32x4_t\n+test_vusmmlaq_s32 (int32x4_t r, uint8x16_t a, int8x16_t b)\n+{\n+  return vusmmlaq_s32 (r, a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsmmla\\tv[0-9]+.4s, v[0-9]+.16b, v[0-9]+.16b} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tummla\\tv[0-9]+.4s, v[0-9]+.16b, v[0-9]+.16b} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tusmmla\\tv[0-9]+.4s, v[0-9]+.16b, v[0-9]+.16b} 1 } } */"}]}