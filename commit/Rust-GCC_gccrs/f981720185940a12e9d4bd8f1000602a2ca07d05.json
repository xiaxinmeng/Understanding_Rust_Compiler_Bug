{"sha": "f981720185940a12e9d4bd8f1000602a2ca07d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MTcyMDE4NTk0MGExMmU5ZDRiZDhmMTAwMDYwMmEyY2EwN2QwNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-11-23T02:49:41Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-11-23T02:49:41Z"}, "message": "cp-tree.def (FUNCTION_NAME): New tree node.\n\n\t* cp-tree.def (FUNCTION_NAME): New tree node.\n\t* cp-tree.h (current_function_name_declared): Tweak documentation.\n\t(lang_decl_flags): Add pretty_function_p, adjust dummy.\n\t(DECL_PRETTY_FUNCTION_P): New macro.\n\t* decl.c (cp_finish_decl): Handle declarations of __FUNCTION__,\n\tetc., in a template function.  Use at_function_scope_p instead of\n\texpanding it inline.\n\t* pt.c (tsubst_decl): Handle DECL_PRETTY_FUNCTION_P declarations\n\tspecially.\n\t(tsubst): Handle FUNCTION_NAME.\n\t(tsubst_copy): Likewise.\n\t(instantiate_decl): Prevent redeclarations of __PRETTY_FUNCTION__,\n\tetc. in instantiation.\n\t* semantics.c (begin_compound_stmt): Declare __FUNCTION__, etc.,\n\teven in template functions.\n\t(setup_vtbl_ptr): Don't declare __PRETTY_FUNCTION in the\n\tconditional scope at the top of a destructor.\n\n\t* error.c (dump_function_decl): Use `[ with ... ]' syntax for\n\tspecializations too.\n\nFrom-SVN: r30625", "tree": {"sha": "226ba8a834310f6b3389722c4c998ad288f65546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226ba8a834310f6b3389722c4c998ad288f65546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f981720185940a12e9d4bd8f1000602a2ca07d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981720185940a12e9d4bd8f1000602a2ca07d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f981720185940a12e9d4bd8f1000602a2ca07d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981720185940a12e9d4bd8f1000602a2ca07d05/comments", "author": null, "committer": null, "parents": [{"sha": "a96c67ec898a25a760997e6b51b4f5832f671fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96c67ec898a25a760997e6b51b4f5832f671fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96c67ec898a25a760997e6b51b4f5832f671fa1"}], "stats": {"total": 128, "additions": 111, "deletions": 17}, "files": [{"sha": "d214aaa0e86924960b88e2e2d66a6fad3293714e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -1,3 +1,26 @@\n+1999-11-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.def (FUNCTION_NAME): New tree node.\n+\t* cp-tree.h (current_function_name_declared): Tweak documentation.\n+\t(lang_decl_flags): Add pretty_function_p, adjust dummy.\n+\t(DECL_PRETTY_FUNCTION_P): New macro.\n+\t* decl.c (cp_finish_decl): Handle declarations of __FUNCTION__,\n+\tetc., in a template function.  Use at_function_scope_p instead of\n+\texpanding it inline.\n+\t* pt.c (tsubst_decl): Handle DECL_PRETTY_FUNCTION_P declarations\n+\tspecially.\n+\t(tsubst): Handle FUNCTION_NAME.\n+\t(tsubst_copy): Likewise.\n+\t(instantiate_decl): Prevent redeclarations of __PRETTY_FUNCTION__,\n+\tetc. in instantiation.\n+\t* semantics.c (begin_compound_stmt): Declare __FUNCTION__, etc.,\n+\teven in template functions.\n+\t(setup_vtbl_ptr): Don't declare __PRETTY_FUNCTION in the\n+\tconditional scope at the top of a destructor.\n+\t\n+\t* error.c (dump_function_decl): Use `[ with ... ]' syntax for\n+\tspecializations too.\n+\n 1999-11-22  Nathan Sidwell  <nathan@acm.org>\n \n \t* semantics.c (finish_unary_op_expr): Only set TREE_NEGATED_INT"}, {"sha": "de874cbd87ad1827767859da696e0e4b934a4d9d", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -200,6 +200,9 @@ DEFTREECODE (SRCLOC, \"srcloc\", 'x', 2)\n    unused.  */\n DEFTREECODE (LOOKUP_EXPR, \"lookup_expr\", 'e', 1)\n \n+/* Used to represent __PRETTY_FUNCTION__ in template bodies.  */\n+DEFTREECODE (FUNCTION_NAME, \"function_name\", 'e', 0)\n+\n /* A whole bunch of tree codes for the initial, superficial parsing of\n    templates.  */\n DEFTREECODE (MODOP_EXPR, \"modop_expr\", 'e', 3)"}, {"sha": "44d16c6b1a1846b5b4380b8a3adcac1dc2a32068", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -789,8 +789,9 @@ struct language_function\n #define current_function_parms_stored \\\n   cp_function_chain->parms_stored\n \n-/* Non-zero if we have already declared __FUNCTION__ (and related\n-   variables) in the current function.  */\n+/* One if we have already declared __FUNCTION__ (and related\n+   variables) in the current function.  Two if we are in the process\n+   of doing so.  */\n \n #define current_function_name_declared \\\n   cp_function_chain->name_declared\n@@ -1607,7 +1608,8 @@ struct lang_decl_flags\n   unsigned pending_inline_p : 1;\n   unsigned global_ctor_p : 1;\n   unsigned global_dtor_p : 1;\n-  unsigned dummy : 3;\n+  unsigned pretty_function_p : 1;\n+  unsigned dummy : 2;\n \n   tree context;\n \n@@ -1766,6 +1768,11 @@ struct lang_decl\n    must be overridden by derived classes.  */\n #define DECL_NEEDS_FINAL_OVERRIDER_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.needs_final_overrider)\n \n+/* Nonzero if this DECL is the __PRETTY_FUNCTION__ variable in a\n+   template function.  */\n+#define DECL_PRETTY_FUNCTION_P(NODE) \\\n+  (DECL_LANG_SPECIFIC(NODE)->decl_flags.pretty_function_p)\n+\n /* The _TYPE context in which this _DECL appears.  This field holds the\n    class where a virtual function instance is actually defined, and the\n    lexical scope of a friend function defined in a class body. */"}, {"sha": "adb3684f4ae8ef1d43b1d22238702cdb12b10e27", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -7606,6 +7606,26 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n       return;\n     }\n \n+  /* Handling __FUNCTION__ and its ilk in a template-function requires\n+     some special processing because we are called from\n+     language-independent code.  */\n+  if (current_function && processing_template_decl \n+      && current_function_name_declared == 2)\n+    {\n+      /* Since we're in a template function, we need to\n+\t push_template_decl.  The language-independent code in\n+\t declare_hidden_char_array doesn't know to do this.  */\n+      retrofit_lang_decl (decl);\n+      decl = push_template_decl (decl);\n+\n+      if (strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \n+\t\t  \"__PRETTY_FUNCTION__\") == 0)\n+\t{\n+\t  init = build (FUNCTION_NAME, const_string_type_node);\n+\t  DECL_PRETTY_FUNCTION_P (decl) = 1;\n+\t}\n+    }\n+\n   /* If a name was specified, get the string.  */\n   if (asmspec_tree)\n       asmspec = TREE_STRING_POINTER (asmspec_tree);\n@@ -7639,8 +7659,7 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n     return;\n \n   /* Add this declaration to the statement-tree.  */\n-  if (building_stmt_tree () \n-      && TREE_CODE (current_scope ()) == FUNCTION_DECL)\n+  if (building_stmt_tree () && at_function_scope_p ())\n     add_decl_stmt (decl);\n \n   if (TYPE_HAS_MUTABLE_P (type))"}, {"sha": "2b7b4eae3dcaf34a9b3e52b6141abb67015da220", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -1112,7 +1112,7 @@ dump_function_decl (t, flags)\n     t = DECL_TEMPLATE_RESULT (t);\n \n   /* Pretty print template instantiations only.  */\n-  if (DECL_TEMPLATE_INSTANTIATION (t))\n+  if (DECL_USE_TEMPLATE (t) && DECL_TEMPLATE_INFO (t))\n     {\n       template_args = DECL_TI_ARGS (t);\n       t = most_general_template (t);"}, {"sha": "18307b3e9aad7777fb9e19e069f11980dcce8caf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -5890,7 +5890,7 @@ tsubst_decl (t, args, type, in_decl)\n \t/* This declaration is going to have to be around for a while,\n \t   so me make sure it is on a saveable obstack.  */\n \tr = copy_node (t);\n-\n+\t\n \tTREE_TYPE (r) = type;\n \tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n \tDECL_CONTEXT (r) = ctx;\n@@ -5903,6 +5903,16 @@ tsubst_decl (t, args, type, in_decl)\n \tcopy_lang_decl (r);\n \tDECL_CLASS_CONTEXT (r) = DECL_CONTEXT (r);\n \n+\t/* For __PRETTY_FUNCTION__ we have to adjust the initializer.  */\n+\tif (DECL_PRETTY_FUNCTION_P (r))\n+\t  {\n+\t    DECL_INITIAL (r) = tsubst (DECL_INITIAL (t),\n+\t\t\t\t       args,\n+\t\t\t\t       /*complain=*/1,\n+\t\t\t\t       NULL_TREE);\n+\t    TREE_TYPE (r) = TREE_TYPE (DECL_INITIAL (r));\n+\t  }\n+\n \t/* Even if the original location is out of scope, the newly\n \t   substituted one is not.  */\n \tif (TREE_CODE (r) == VAR_DECL)\n@@ -6676,6 +6686,24 @@ tsubst (t, args, complain, in_decl)\n \treturn TREE_TYPE (e1); \n       }\n \n+    case FUNCTION_NAME:\n+      {\n+\tconst char *name;\n+\tint len;\n+\ttree type;\n+\ttree str;\n+\n+\t/* This code should match declare_hidden_char_array in\n+\t   c-common.c.  */\n+\tname = (*decl_printable_name) (current_function_decl, 2);\n+\tlen = strlen (name) + 1;\n+\ttype =  build_array_type (char_type_node,\n+\t\t\t\t  build_index_type (build_int_2 (len, 0)));\n+\tstr = build_string (len, name);\n+\tTREE_TYPE (str) = type;\n+\treturn str;\n+      }\n+\n     default:\n       sorry (\"use of `%s' in template\",\n \t     tree_code_name [(int) TREE_CODE (t)]);\n@@ -7035,7 +7063,10 @@ tsubst_copy (t, args, complain, in_decl)\n       return build_va_arg (tsubst_copy (TREE_OPERAND (t, 0), args, complain,\n \t\t\t\t\tin_decl),\n \t\t\t   tsubst (TREE_TYPE (t), args, complain, in_decl));\n-     \n+\n+    case FUNCTION_NAME:\n+      return tsubst (t, args, complain, in_decl);\n+\n     default:\n       return t;\n     }\n@@ -9532,6 +9563,10 @@ instantiate_decl (d)\n       start_function (NULL_TREE, d, NULL_TREE, SF_PRE_PARSED);\n       store_parm_decls ();\n \n+      /* We already set up __FUNCTION__, etc., so we don't want to do\n+\t it again now.  */\n+      current_function_name_declared = 1;\n+\n       /* Substitute into the body of the function.  */\n       tsubst_expr (DECL_SAVED_TREE (code_pattern), args,\n \t\t   /*complain=*/1, tmpl);"}, {"sha": "37510e5e7fae08c98c025bc391867d6bc09abfd5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -936,10 +936,14 @@ begin_compound_stmt (has_no_scope)\n      variables __FUNCTION__, __PRETTY_FUNCTION__, and so forth.  */\n   if (current_function\n       && !current_function_name_declared \n-      && !processing_template_decl\n       && !has_no_scope)\n     {\n+      /* When we get callbacks from the middle-end, we need to know\n+\t we're in the midst of declaring these variables.  */\n+      current_function_name_declared = 2;\n+      /* Actually insert the declarations.  */\n       declare_function_name ();\n+      /* And now just remember that we're all done.  */\n       current_function_name_declared = 1;\n     }\n \n@@ -1187,6 +1191,7 @@ setup_vtbl_ptr ()\n       tree binfo = TYPE_BINFO (current_class_type);\n       tree if_stmt;\n       tree compound_stmt;\n+      int saved_cfnd;\n \n       /* If the dtor is empty, and we know there is not possible way we\n \t could use any vtable entries, before they are possibly set by\n@@ -1202,11 +1207,17 @@ setup_vtbl_ptr ()\n       /* If it is not safe to avoid setting up the vtables, then\n \t someone will change the condition to be boolean_true_node.  \n          (Actually, for now, we do not have code to set the condition\n-\t appropriate, so we just assume that we always need to\n+\t appropriately, so we just assume that we always need to\n \t initialize the vtables.)  */\n       finish_if_stmt_cond (boolean_true_node, if_stmt);\n       current_vcalls_possible_p = &IF_COND (if_stmt);\n+\n+      /* Don't declare __PRETTY_FUNCTION__ and friends here when we\n+\t open the block for the if-body.  */\n+      saved_cfnd = current_function_name_declared;\n+      current_function_name_declared = 1;\n       compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n+      current_function_name_declared = saved_cfnd;\n \n       /* Make all virtual function table pointers in non-virtual base\n \t classes point to CURRENT_CLASS_TYPE's virtual function"}, {"sha": "8f69bf4b50f454e60fa7eedab8bb07b420c09c4c", "filename": "gcc/testsuite/g++.old-deja/g++.ext/pretty2.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty2.C?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -3,8 +3,6 @@\n \n // make sure __FUNCTION__ and __PRETTY_FUNCTION__ work in member functions\n \n-// execution test - XFAIL *-*-*\n-\n #include <stdio.h>\n #include <string.h>\n "}, {"sha": "820f08e6f5e140991724f3e8ca8468a0ac6ab375", "filename": "gcc/testsuite/g++.old-deja/g++.ext/pretty3.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty3.C?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -3,8 +3,6 @@\n \n // make sure __FUNCTION__ and __PRETTY_FUNCTION__ work in templates\n \n-// execution test - XFAIL *-*-*\n-\n #include <stdio.h>\n #include <string.h>\n \n@@ -21,7 +19,7 @@ template<class T> void f1 (T)\n   \n   if (strcmp (function, \"f1\"))\n     bad = true;\n-  if (strcmp (pretty, \"void f1<float> (float)\")) // only for float instantiation\n+  if (strcmp (pretty, \"void f1 (T) [with T = float]\")) // only for float instantiation\n     bad = true;\n }\n \n@@ -36,7 +34,7 @@ template<> void f1<int> (int)\n   \n   if (strcmp (function, \"f1\"))\n     bad = true;\n-  if (strcmp (pretty, \"void f1<int> (int)\"))\n+  if (strcmp (pretty, \"void f1 (T) [with T = int]\"))\n     bad = true;\n }\n "}, {"sha": "827e2df71c8c6d85f03c80ebf063599200807daf", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp77.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981720185940a12e9d4bd8f1000602a2ca07d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp77.C?ref=f981720185940a12e9d4bd8f1000602a2ca07d05", "patch": "@@ -18,7 +18,7 @@ char* S3<char>::h(int) { return __PRETTY_FUNCTION__; }\n int main()\n {\n   if (strcmp (S3<double>::h(7), \n-\t      \"char *S3<double>::h<int> (int)\") == 0)\n+\t      \"char *S3<T>::h (U) [with U = int, T = double]\") == 0)\n     return 0;\n   else \n     return 1;"}]}