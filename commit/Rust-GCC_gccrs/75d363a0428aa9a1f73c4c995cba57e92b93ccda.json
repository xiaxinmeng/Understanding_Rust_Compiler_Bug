{"sha": "75d363a0428aa9a1f73c4c995cba57e92b93ccda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkMzYzYTA0MjhhYTlhMWY3M2M0Yzk5NWNiYTU3ZTkyYjkzY2NkYQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-20T10:36:33Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-20T10:36:33Z"}, "message": "Fix VTV for targets with section anchors.\n\n\n2015-10-20  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR other/67868\n\t* varasm.c (assemble_variable): Move special vtv handling to..\n\t(handle_vtv_comdat_sections): .. here. New function.\n\t(output_object_block): Handle vtv sections.\n\nFrom-SVN: r229043", "tree": {"sha": "f7c1c17805044d1034e23b5428edc324161d3db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c1c17805044d1034e23b5428edc324161d3db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75d363a0428aa9a1f73c4c995cba57e92b93ccda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d363a0428aa9a1f73c4c995cba57e92b93ccda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d363a0428aa9a1f73c4c995cba57e92b93ccda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d363a0428aa9a1f73c4c995cba57e92b93ccda/comments", "author": null, "committer": null, "parents": [{"sha": "04b32ed7444af274054b00d8bd06f26819c97c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b32ed7444af274054b00d8bd06f26819c97c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b32ed7444af274054b00d8bd06f26819c97c65"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "2b6da59d753310dbc826c53de075468c2084a2e2", "filename": "gcc/varasm.c", "status": "modified", "additions": 63, "deletions": 49, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d363a0428aa9a1f73c4c995cba57e92b93ccda/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d363a0428aa9a1f73c4c995cba57e92b93ccda/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=75d363a0428aa9a1f73c4c995cba57e92b93ccda", "patch": "@@ -127,6 +127,7 @@ static void asm_output_aligned_bss (FILE *, tree, const char *,\n #endif /* BSS_SECTION_ASM_OP */\n static void mark_weak (tree);\n static void output_constant_pool (const char *, tree);\n+static void handle_vtv_comdat_section (section *, const_tree);\n \f\n /* Well-known sections, each one associated with some sort of *_ASM_OP.  */\n section *text_section;\n@@ -2230,56 +2231,10 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n     assemble_noswitch_variable (decl, name, sect, align);\n   else\n     {\n-      /* The following bit of code ensures that vtable_map \n-         variables are not only in the comdat section, but that\n-         each variable has its own unique comdat name.  If this\n-         code is removed, the variables end up in the same section\n-         with a single comdat name.\n-\n-         FIXME:  resolve_unique_section needs to deal better with\n-         decls with both DECL_SECTION_NAME and DECL_ONE_ONLY.  Once\n-         that is fixed, this if-else statement can be replaced with\n-         a single call to \"switch_to_section (sect)\".  */\n+      /* Special-case handling of vtv comdat sections.  */\n       if (sect->named.name\n \t  && (strcmp (sect->named.name, \".vtable_map_vars\") == 0))\n-\t{\n-#if defined (OBJECT_FORMAT_ELF)\n-          targetm.asm_out.named_section (sect->named.name,\n-\t\t\t\t\t sect->named.common.flags\n-\t\t\t\t         | SECTION_LINKONCE,\n-\t\t\t    \t         DECL_NAME (decl));\n-          in_section = sect;\n-#elif defined (TARGET_PECOFF)\n-          /* Neither OBJECT_FORMAT_PE, nor OBJECT_FORMAT_COFF is set here.\n-             Therefore the following check is used.\n-             In case a the target is PE or COFF a comdat group section\n-             is created, e.g. .vtable_map_vars$foo. The linker places\n-             everything in .vtable_map_vars at the end.\n-\n-             A fix could be made in\n-             gcc/config/i386/winnt.c: i386_pe_unique_section. */\n-          if (TARGET_PECOFF)\n-          {\n-            char *name;\n-            \n-            if (TREE_CODE (DECL_NAME (decl)) == IDENTIFIER_NODE)\n-              name = ACONCAT ((sect->named.name, \"$\",\n-                               IDENTIFIER_POINTER (DECL_NAME (decl)), NULL));\n-            else\n-              name = ACONCAT ((sect->named.name, \"$\",\n-                    IDENTIFIER_POINTER (DECL_COMDAT_GROUP (DECL_NAME (decl))),\n-                    NULL));\n-\n-            targetm.asm_out.named_section (name,\n-                                           sect->named.common.flags\n-                                           | SECTION_LINKONCE,\n-                                           DECL_NAME (decl));\n-            in_section = sect;\n-        }\n-#else\n-          switch_to_section (sect);\n-#endif\n-        }\n+\thandle_vtv_comdat_section (sect, decl);\n       else\n \tswitch_to_section (sect);\n       if (align > BITS_PER_UNIT)\n@@ -7330,7 +7285,14 @@ output_object_block (struct object_block *block)\n \n   /* Switch to the section and make sure that the first byte is\n      suitably aligned.  */\n-  switch_to_section (block->sect);\n+  /* Special case VTV comdat sections similar to assemble_variable.  */\n+  if (SECTION_STYLE (block->sect) == SECTION_NAMED\n+      && block->sect->named.name\n+      && (strcmp (block->sect->named.name, \".vtable_map_vars\") == 0))\n+    handle_vtv_comdat_section (block->sect, block->sect->named.decl);\n+  else\n+    switch_to_section (block->sect);\n+\n   assemble_align (block->alignment);\n \n   /* Define the values of all anchors relative to the current section\n@@ -7773,4 +7735,56 @@ default_asm_output_ident_directive (const char *ident_str)\n     fprintf (asm_out_file, \"%s\\\"%s\\\"\\n\", ident_asm_op, ident_str);\n }\n \n+\n+/* This function ensures that vtable_map variables are not only\n+   in the comdat section, but that each variable has its own unique\n+   comdat name.  Without this the variables end up in the same section\n+   with a single comdat name.\n+\n+   FIXME:  resolve_unique_section needs to deal better with\n+   decls with both DECL_SECTION_NAME and DECL_ONE_ONLY.  Once\n+   that is fixed, this if-else statement can be replaced with\n+   a single call to \"switch_to_section (sect)\".  */\n+\n+static void\n+handle_vtv_comdat_section (section *sect, const_tree decl)\n+{\n+#if defined (OBJECT_FORMAT_ELF)\n+  targetm.asm_out.named_section (sect->named.name,\n+\t\t\t\t sect->named.common.flags\n+\t\t\t\t | SECTION_LINKONCE,\n+\t\t\t\t DECL_NAME (decl));\n+  in_section = sect;\n+#elif defined (TARGET_PECOFF)\n+  /* Neither OBJECT_FORMAT_PE, nor OBJECT_FORMAT_COFF is set here.\n+     Therefore the following check is used.\n+     In case a the target is PE or COFF a comdat group section\n+     is created, e.g. .vtable_map_vars$foo. The linker places\n+     everything in .vtable_map_vars at the end.\n+\n+     A fix could be made in\n+     gcc/config/i386/winnt.c: i386_pe_unique_section.  */\n+  if (TARGET_PECOFF)\n+    {\n+      char *name;\n+\n+      if (TREE_CODE (DECL_NAME (decl)) == IDENTIFIER_NODE)\n+\tname = ACONCAT ((sect->named.name, \"$\",\n+\t\t\t IDENTIFIER_POINTER (DECL_NAME (decl)), NULL));\n+      else\n+\tname = ACONCAT ((sect->named.name, \"$\",\n+\t\t\t IDENTIFIER_POINTER (DECL_COMDAT_GROUP (DECL_NAME (decl))),\n+\t\t\t NULL));\n+\n+      targetm.asm_out.named_section (name,\n+\t\t\t\t     sect->named.common.flags\n+\t\t\t\t     | SECTION_LINKONCE,\n+\t\t\t\t     DECL_NAME (decl));\n+      in_section = sect;\n+    }\n+#else\n+  switch_to_section (sect);\n+#endif\n+}\n+\n #include \"gt-varasm.h\""}]}