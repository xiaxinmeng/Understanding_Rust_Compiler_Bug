{"sha": "4aad410db7d0ecc97870e0861f8ccda16fca2506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhZDQxMGRiN2QwZWNjOTc4NzBlMDg2MWY4Y2NkYTE2ZmNhMjUwNg==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-05-11T11:03:31Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-05-11T11:03:31Z"}, "message": "tree-data-ref.c (find_data_references_in_loop): Give up when the body of the loop contains a CALL_EXPR or an ASM_EXPR...\n\n\t* tree-data-ref.c (find_data_references_in_loop): Give up when\n\tthe body of the loop contains a CALL_EXPR or an ASM_EXPR: they\n\tmay embed arbitrary side effects.\n\tRemove the assumption that GIMPLE form contains a single array\n\taccess per statement.\n\tWhen the statement contains virtual operands, fail if it is not\n\ta MODIFY_EXPR or a CALL_EXPR.\n\tReturn after the dont know node is inserted.\n\nFrom-SVN: r99573", "tree": {"sha": "2b36f0d698e7273b6c6c70f5211052c8f17dcd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b36f0d698e7273b6c6c70f5211052c8f17dcd18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aad410db7d0ecc97870e0861f8ccda16fca2506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aad410db7d0ecc97870e0861f8ccda16fca2506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aad410db7d0ecc97870e0861f8ccda16fca2506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aad410db7d0ecc97870e0861f8ccda16fca2506/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "802fc8260d06c25a9f6df650a2b6d4f6a7a2ddb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802fc8260d06c25a9f6df650a2b6d4f6a7a2ddb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802fc8260d06c25a9f6df650a2b6d4f6a7a2ddb7"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "f18f5b496a783e55d63fa140594f88e6ce61b6bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aad410db7d0ecc97870e0861f8ccda16fca2506/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aad410db7d0ecc97870e0861f8ccda16fca2506/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aad410db7d0ecc97870e0861f8ccda16fca2506", "patch": "@@ -1,3 +1,14 @@\n+2005-05-11  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\t* tree-data-ref.c (find_data_references_in_loop): Give up when\n+\tthe body of the loop contains a CALL_EXPR or an ASM_EXPR: they\n+\tmay embed arbitrary side effects.\n+\tRemove the assumption that GIMPLE form contains a single array\n+\taccess per statement.\n+\tWhen the statement contains virtual operands, fail if it is not\n+\ta MODIFY_EXPR or a CALL_EXPR.\n+\tReturn after the dont know node is inserted.\n+\n 2005-05-11  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* arm.md (negsf2, negdf2): Permit these expands when compiling for VFP."}, {"sha": "90770e25a95de5e12a6ae3086c6f7f6f9263a215", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 53, "deletions": 19, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aad410db7d0ecc97870e0861f8ccda16fca2506/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aad410db7d0ecc97870e0861f8ccda16fca2506/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=4aad410db7d0ecc97870e0861f8ccda16fca2506", "patch": "@@ -2218,7 +2218,6 @@ compute_all_dependences (varray_type datarefs,\n tree \n find_data_references_in_loop (struct loop *loop, varray_type *datarefs)\n {\n-  bool dont_know_node_not_inserted = true;\n   basic_block bb, *bbs;\n   unsigned int i;\n   block_stmt_iterator bsi;\n@@ -2233,36 +2232,71 @@ find_data_references_in_loop (struct loop *loop, varray_type *datarefs)\n         {\n \t  tree stmt = bsi_stmt (bsi);\n \n-\t  if (TREE_CODE (stmt) != MODIFY_EXPR)\n-\t    continue;\n+\t  /* ASM_EXPR and CALL_EXPR may embed arbitrary side effects.\n+\t     Calls have side-effects, except those to const or pure\n+\t     functions.  */\n+\t  if ((TREE_CODE (stmt) == CALL_EXPR\n+\t       && !(call_expr_flags (stmt) & (ECF_CONST | ECF_PURE)))\n+\t      || (TREE_CODE (stmt) == ASM_EXPR\n+\t\t  && ASM_VOLATILE_P (stmt)))\n+\t    goto insert_dont_know_node;\n \n \t  if (ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n \t    continue;\n-\t  \n-\t  /* In the GIMPLE representation, a modify expression\n-  \t     contains a single load or store to memory.  */\n-\t  if (TREE_CODE (TREE_OPERAND (stmt, 0)) == ARRAY_REF)\n-\t    VARRAY_PUSH_GENERIC_PTR \n-\t\t    (*datarefs, analyze_array (stmt, TREE_OPERAND (stmt, 0), \n-\t\t\t\t\t       false));\n-\n-\t  else if (TREE_CODE (TREE_OPERAND (stmt, 1)) == ARRAY_REF)\n-\t    VARRAY_PUSH_GENERIC_PTR \n-\t\t    (*datarefs, analyze_array (stmt, TREE_OPERAND (stmt, 1), \n-\t\t\t\t\t       true));\n-  \t  else\n+\n+\t  switch (TREE_CODE (stmt))\n \t    {\n-\t      if (dont_know_node_not_inserted)\n+\t    case MODIFY_EXPR:\n+\t      if (TREE_CODE (TREE_OPERAND (stmt, 0)) == ARRAY_REF)\n+\t\tVARRAY_PUSH_GENERIC_PTR \n+\t\t  (*datarefs, analyze_array (stmt, TREE_OPERAND (stmt, 0),\n+\t\t\t\t\t     false));\n+\n+\t      if (TREE_CODE (TREE_OPERAND (stmt, 1)) == ARRAY_REF)\n+\t\tVARRAY_PUSH_GENERIC_PTR \n+\t\t  (*datarefs, analyze_array (stmt, TREE_OPERAND (stmt, 1),\n+\t\t\t\t\t     true));\n+\n+\t      if (TREE_CODE (TREE_OPERAND (stmt, 0)) != ARRAY_REF\n+\t\t  && TREE_CODE (TREE_OPERAND (stmt, 1)) != ARRAY_REF)\n+\t\tgoto insert_dont_know_node;\n+\n+\t      break;\n+\n+\t    case CALL_EXPR:\n+\t      {\n+\t\ttree args;\n+\t\tbool one_inserted = false;\n+\n+\t\tfor (args = TREE_OPERAND (stmt, 1); args; args = TREE_CHAIN (args))\n+\t\t  if (TREE_CODE (TREE_VALUE (args)) == ARRAY_REF)\n+\t\t    {\n+\t\t      VARRAY_PUSH_GENERIC_PTR \n+\t\t\t(*datarefs, analyze_array (stmt, TREE_VALUE (args), true));\n+\t\t      one_inserted = true;\n+\t\t    }\n+\n+\t\tif (!one_inserted)\n+\t\t  goto insert_dont_know_node;\n+\n+\t\tbreak;\n+\t      }\n+\n+\t    default:\n \t\t{\n \t\t  struct data_reference *res;\n+\n+\t\tinsert_dont_know_node:;\n \t\t  res = xmalloc (sizeof (struct data_reference));\n \t\t  DR_STMT (res) = NULL_TREE;\n \t\t  DR_REF (res) = NULL_TREE;\n \t\t  DR_ACCESS_FNS (res) = NULL;\n \t\t  DR_BASE_NAME (res) = NULL;\n \t\t  DR_IS_READ (res) = false;\n \t\t  VARRAY_PUSH_GENERIC_PTR (*datarefs, res);\n-\t\t  dont_know_node_not_inserted = false;\n+\n+\t\t  free (bbs);\n+\t\t  return chrec_dont_know;\n \t\t}\n \t    }\n \n@@ -2277,7 +2311,7 @@ find_data_references_in_loop (struct loop *loop, varray_type *datarefs)\n \n   free (bbs);\n \n-  return dont_know_node_not_inserted ? NULL_TREE : chrec_dont_know;\n+  return NULL_TREE;\n }\n \n \f"}]}