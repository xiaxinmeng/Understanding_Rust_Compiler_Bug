{"sha": "1d85354c982ba2e2c093de622b28a10fd2518dca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4NTM1NGM5ODJiYTJlMmMwOTNkZTYyMmIyOGExMGZkMjUxOGRjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-08T16:11:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-08T16:11:27Z"}, "message": "tree-ssa-structalias.c (get_constraint_for): Remove anyoffset argument.\n\n2006-01-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (get_constraint_for): Remove\n\tanyoffset argument.\n\t(get_constraint_for_component_ref): Likewise.\n\t(do_deref): Likewise.\n\t(get_constraint_for): Likewise.\n\t(do_structure_copy): Likewise.\n\t(handle_ptr_arith): Likewise.\n\t(find_func_aliases): Likewise.  Remove unused need_anyoffset\n\tvariable.\n\nFrom-SVN: r109472", "tree": {"sha": "8b8e75b9f47a82c3cb1091adaac4962e2e5c0d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b8e75b9f47a82c3cb1091adaac4962e2e5c0d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d85354c982ba2e2c093de622b28a10fd2518dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d85354c982ba2e2c093de622b28a10fd2518dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d85354c982ba2e2c093de622b28a10fd2518dca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d85354c982ba2e2c093de622b28a10fd2518dca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4220128209dba821e1b76d842028d55f0985a659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4220128209dba821e1b76d842028d55f0985a659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4220128209dba821e1b76d842028d55f0985a659"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "bacbe9d6929e3d9cea4e0ef4c69742adb9e48061", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d85354c982ba2e2c093de622b28a10fd2518dca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d85354c982ba2e2c093de622b28a10fd2518dca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d85354c982ba2e2c093de622b28a10fd2518dca", "patch": "@@ -1,3 +1,15 @@\n+2006-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (get_constraint_for): Remove\n+\tanyoffset argument.\n+\t(get_constraint_for_component_ref): Likewise.\n+\t(do_deref): Likewise.\n+\t(get_constraint_for): Likewise.\n+\t(do_structure_copy): Likewise.\n+\t(handle_ptr_arith): Likewise.\n+\t(find_func_aliases): Likewise.  Remove unused need_anyoffset\n+\tvariable.\n+\n 2006-01-08  J\"orn Rennecke  <joern.rennecke@st.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "63ba8d4deb84e2094591a41da5901c92d83862e9", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d85354c982ba2e2c093de622b28a10fd2518dca/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d85354c982ba2e2c093de622b28a10fd2518dca/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1d85354c982ba2e2c093de622b28a10fd2518dca", "patch": "@@ -393,7 +393,7 @@ struct constraint_expr\n typedef struct constraint_expr ce_s;\n DEF_VEC_O(ce_s);\n DEF_VEC_ALLOC_O(ce_s, heap);\n-static void get_constraint_for (tree, VEC(ce_s, heap) **, bool *);\n+static void get_constraint_for (tree, VEC(ce_s, heap) **);\n static void do_deref (VEC (ce_s, heap) **);\n \n /* Our set constraints are made up of two constraint expressions, one\n@@ -2343,8 +2343,7 @@ offset_overlaps_with_access (const unsigned HOST_WIDE_INT fieldpos,\n /* Given a COMPONENT_REF T, return the constraint_expr for it.  */\n \n static void\n-get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results, \n-\t\t\t\t  bool *anyoffset)\n+get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results)\n {\n   tree orig_t = t;\n   HOST_WIDE_INT bitsize = -1;\n@@ -2372,7 +2371,7 @@ get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results,\n     }\n  \n   t = get_ref_base_and_extent (t, &bitpos, &bitsize, &bitmaxsize);\n-  get_constraint_for (t, results, anyoffset);\n+  get_constraint_for (t, results);\n   result = VEC_last (ce_s, *results);\n \n   gcc_assert (beforelength + 1 == VEC_length (ce_s, *results));\n@@ -2387,12 +2386,6 @@ get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results,\n     {\n       result->offset = bitpos;\n     }\n-  /* FIXME: Handle the DEREF case.  */\n-  else if (anyoffset && result->type != DEREF)\n-    {\n-      result->offset = 0;\n-      *anyoffset = true;\n-    }\n   else\n     {\n       result->var = anything_id;\n@@ -2470,7 +2463,7 @@ do_deref (VEC (ce_s, heap) **constraints)\n /* Given a tree T, return the constraint expression for it.  */\n \n static void\n-get_constraint_for (tree t, VEC (ce_s, heap) **results, bool *anyoffset)\n+get_constraint_for (tree t, VEC (ce_s, heap) **results)\n {\n   struct constraint_expr temp;\n \n@@ -2512,7 +2505,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results, bool *anyoffset)\n \t      struct constraint_expr *c;\n \t      unsigned int i;\n \n-\t      get_constraint_for (TREE_OPERAND (t, 0), results, anyoffset);\n+\t      get_constraint_for (TREE_OPERAND (t, 0), results);\n \t      for (i = 0; VEC_iterate (ce_s, *results, i, c); i++)\n \t\t{\n \t\t  if (c->type == DEREF)\n@@ -2569,14 +2562,14 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results, bool *anyoffset)\n \t  {\n \t  case INDIRECT_REF:\n \t    {\n-\t      get_constraint_for (TREE_OPERAND (t, 0), results, anyoffset);\n+\t      get_constraint_for (TREE_OPERAND (t, 0), results);\n \t      do_deref (results);\n \t      return;\n \t    }\n \t  case ARRAY_REF:\n \t  case ARRAY_RANGE_REF:\n \t  case COMPONENT_REF:\n-\t    get_constraint_for_component_ref (t, results, anyoffset);\n+\t    get_constraint_for_component_ref (t, results);\n \t    return;\n \t  default:\n \t    {\n@@ -2603,7 +2596,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results, bool *anyoffset)\n \t      if (!(POINTER_TYPE_P (TREE_TYPE (t))\n \t\t    && ! POINTER_TYPE_P (TREE_TYPE (op))))\n \t\t{\n-\t\t  get_constraint_for (op, results, anyoffset);\n+\t\t  get_constraint_for (op, results);\n \t\t  return;\n \t\t}\n \n@@ -2625,7 +2618,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results, bool *anyoffset)\n \t  {\n \t  case PHI_NODE:\t   \n \t    {\n-\t      get_constraint_for (PHI_RESULT (t), results, anyoffset);\n+\t      get_constraint_for (PHI_RESULT (t), results);\n \t      return;\n \t    }\n \t    break;\n@@ -2823,8 +2816,8 @@ do_structure_copy (tree lhsop, tree rhsop)\n   unsigned HOST_WIDE_INT lhssize;\n   unsigned HOST_WIDE_INT rhssize;\n \n-  get_constraint_for (lhsop, &lhsc, NULL);\n-  get_constraint_for (rhsop, &rhsc, NULL);\n+  get_constraint_for (lhsop, &lhsc);\n+  get_constraint_for (rhsop, &rhsc);\n   gcc_assert (VEC_length (ce_s, lhsc) == 1);\n   gcc_assert (VEC_length (ce_s, rhsc) == 1);\n   lhs = *(VEC_last (ce_s, lhsc));\n@@ -3167,7 +3160,7 @@ handle_ptr_arith (VEC (ce_s, heap) *lhsc, tree expr)\n   op0 = TREE_OPERAND (expr, 0);\n   op1 = TREE_OPERAND (expr, 1);\n \n-  get_constraint_for (op0, &temp, NULL);\n+  get_constraint_for (op0, &temp);\n   if (POINTER_TYPE_P (TREE_TYPE (op0))\n       && TREE_CODE (TREE_TYPE (TREE_TYPE (op0))) == RECORD_TYPE\n       && TREE_CODE (op1) == INTEGER_CST)\n@@ -3231,10 +3224,10 @@ find_func_aliases (tree origt)\n \t  \n \t  /* For a phi node, assign all the arguments to\n \t     the result.  */\n-\t  get_constraint_for (PHI_RESULT (t), &lhsc, NULL);\n+\t  get_constraint_for (PHI_RESULT (t), &lhsc);\n \t  for (i = 0; i < PHI_NUM_ARGS (t); i++)\n \t    { \n-\t      get_constraint_for (PHI_ARG_DEF (t, i), &rhsc, NULL);\n+\t      get_constraint_for (PHI_ARG_DEF (t, i), &rhsc);\n \t      for (j = 0; VEC_iterate (ce_s, lhsc, j, c); j++)\n \t\t{\n \t\t  struct constraint_expr *c2;\n@@ -3307,7 +3300,7 @@ find_func_aliases (tree origt)\n \t  struct constraint_expr lhs ;\n \t  struct constraint_expr *rhsp;\n \n-\t  get_constraint_for (arg, &rhsc, NULL);\n+\t  get_constraint_for (arg, &rhsc);\n \t  if (TREE_CODE (decl) != FUNCTION_DECL)\n \t    {\n \t      lhs.type = DEREF;\n@@ -3335,7 +3328,7 @@ find_func_aliases (tree origt)\n \t  struct constraint_expr *lhsp;\n \t  unsigned int j = 0;\n \t  \n-\t  get_constraint_for (lhsop, &lhsc, NULL);\n+\t  get_constraint_for (lhsop, &lhsc);\n \t  if (TREE_CODE (decl) != FUNCTION_DECL)\n \t    {\n \t      rhs.type = DEREF;\n@@ -3372,7 +3365,7 @@ find_func_aliases (tree origt)\n \t      || AGGREGATE_TYPE_P (TREE_TYPE (lhsop))\n \t      || TREE_CODE (rhsop) == CALL_EXPR)\n \t    {\n-\t      get_constraint_for (lhsop, &lhsc, NULL);\n+\t      get_constraint_for (lhsop, &lhsc);\n \t      switch (TREE_CODE_CLASS (TREE_CODE (rhsop)))\n \t\t{\n \t\t  /* RHS that consist of unary operations,\n@@ -3386,7 +3379,6 @@ find_func_aliases (tree origt)\n \t\t  case tcc_unary:\n \t\t      {\n \t\t\tunsigned int j;\n-\t\t\tbool need_anyoffset = false;\n \t\t\ttree strippedrhs = rhsop;\n \t\t\ttree rhstype;\n \n@@ -3395,7 +3387,7 @@ find_func_aliases (tree origt)\n \t\t\tSTRIP_NOPS (strippedrhs);\n \t\t\trhstype = TREE_TYPE (strippedrhs);\n \t\t\t\n-\t\t\tget_constraint_for (rhsop, &rhsc, &need_anyoffset);\n+\t\t\tget_constraint_for (rhsop, &rhsc);\n \t\t\tif (TREE_CODE (strippedrhs) == ADDR_EXPR\n \t\t\t    && AGGREGATE_TYPE_P (TREE_TYPE (rhstype)))\n \t\t\t  {\n@@ -3449,7 +3441,7 @@ find_func_aliases (tree origt)\n \t\t\tunsigned int j;\n \n \t\t\tgcc_assert (VEC_length (ce_s, rhsc) == 0);\n-\t\t\tget_constraint_for (op, &rhsc, NULL);\n+\t\t\tget_constraint_for (op, &rhsc);\n \t\t\tfor (j = 0; VEC_iterate (ce_s, lhsc, j, c); j++)\n \t\t\t  {\n \t\t\t    struct constraint_expr *c2;"}]}