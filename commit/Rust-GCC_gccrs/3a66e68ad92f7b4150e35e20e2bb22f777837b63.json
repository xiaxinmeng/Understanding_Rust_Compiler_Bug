{"sha": "3a66e68ad92f7b4150e35e20e2bb22f777837b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E2NmU2OGFkOTJmN2I0MTUwZTM1ZTIwZTJiYjIyZjc3NzgzN2I2Mw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2019-08-01T15:25:42Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2019-08-01T15:25:42Z"}, "message": "Implement C++20 p0202 - Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers.\n\n2019-08-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement C++20 p0202 - Add Constexpr Modifiers to Functions\n\tin <algorithm> and <utility> Headers.\n\tImplement C++20 p1023 - constexpr comparison operators for std::array.\n\t* include/bits/algorithmfwd.h (all_of, any_of, binary_search, copy,\n\tcopy_backward, copy_if, copy_n, equal_range, fill, find_end,\n\tfind_if_not, includes, is_heap, is_heap_until, is_partitioned,\n\tis_permutation, is_sorted, is_sorted_until, iter_swap, lower_bound,\n\tnone_of, partition_copy, partition_point, remove, remove_if,\n\tremove_copy, remove_copy_if, replace_copy, replace_copy_if,\n\treverse_copy, rotate_copy, uunique, upper_bound, adjacent_find, count,\n\tcount_if, equal, find, find_first_of, find_if, for_each, generate,\n\tgenerate_n, lexicographical_compare, merge, mismatch, replace,\n\treplace_if, search, search_n, set_difference, set_intersection,\n\tset_symmetric_difference, set_union, transform, unique_copy):\n\tMark constexpr.\n\t* include/bits/cpp_type_traits.h (__miter_base): Mark constexpr.\n\t* include/bits/predefined_ops.h (_Iter_less_val::operator(),\n\t_Val_less_iter::operator(), _Iter_equal_to_iter::operator(),\n\t_Iter_equal_to_val::operator(), _Iter_equals_val::operator()):\n\t Use const ref instead of ref arg;\n\t(_Iter_less_val, __iter_less_val, _Val_less_iter, __val_less_iter,\n\t__iter_equal_to_iter, __iter_equal_to_val, __iter_comp_val,\n\t_Iter_comp_val, _Val_comp_iter, __val_comp_iter, __iter_equals_val,\n\t_Iter_equals_iter, __iter_comp_iter, _Iter_pred, __pred_iter,\n\t_Iter_comp_to_val, __iter_comp_val, _Iter_comp_to_iter,\n\t__iter_comp_iter): Mark constexpr.\n\t* include/bits/stl_algo.h (__find_if, __find_if_not, __find_if_not_n,\n\t__search, __search_n_aux, __search_n, __find_end, find_end, all_of,\n\tnone_of, any_of, find_if_not, is_partitioned, partition_point,\n\t__remove_copy_if, remove_copy, remove_copy_if, copy_if, __copy_n,\n\tcopy_n, partition_copy, __remove_if, remove, remove_if, __adjacent_find,\n\t__unique, unique, __unique_copy, reverse_copy, rotate_copy,\n\t__unguarded_linear_insert, __insertion_sort, __unguarded_insertion_sort,\n\t__final_insertion_sort, lower_bound, __upper_bound, upper_bound,\n\t__equal_range, equal_range, binary_search, __includes, includes,\n\t__next_permutation, __prev_permutation, __replace_copy_if, replace_copy,\n\treplace_copy_if, __count_if, is_sorted, __is_sorted_until,\n\tis_sorted_until, __is_permutation, is_permutation, for_each, find,\n\tfind_if, find_first_of, adjacent_find, count, count_if, search,\n\tsearch_n, transform, replace, replace_if, generate, generate_n,\n\tunique_copy, __merge, merge, __set_union, set_union, __set_intersection,\n\tset_intersection, __set_difference, set_difference,\n\t__set_symmetric_difference, set_symmetric_difference):  Mark constexpr.\n\t* include/bits/stl_algobase.h (__memmove, __memcmp): New maybe constexpr\n\twrappers around __builtin_memmove and __builtin_memcmp\n\trespectively;\n\t(__niter_base, __niter_wrap, __copy_m, __copy_move_a, __copy_move_a2,\n\tcopy, move, __copy_move_b, __copy_move_backward_a,\n\t__copy_move_backward_a2, copy_backward, move_backward, __fill_a, fill,\n\t__fill_n_a, fill_n, equal, __lc_rai::__newlast1, __lc_rai::__cnd2,\n\t__lexicographical_compare_impl, __lexicographical_compare,\n\t__lexicographical_compare<true>::__lc, __lexicographical_compare_aux,\n\t__lower_bound, lower_bound, equal, __equal4, lexicographical_compare,\n\t__mismatch, mismatch, __is_heap_until, __is_heap, is_heap_until,\n\tis_heap): Mark constexpr.\n\t* include/bits/stl_heap.h (__is_heap_until, __is_heap, is_heap_until,\n\tis_heap): Mark constexpr.\n\t* include/bits/stl_iterator.h (__niter_base, __miter_base): Mark constexpr.\n\t* include/std/array: Make comparison ops constexpr.\n\t* include/std/utility: Make exchange constexpr.\n\t* include/std/version (__cpp_lib_constexpr_algorithms): New macro.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust.\n\t* testsuite/23_containers/array/tuple_interface/\n\ttuple_element_neg.cc: Adjust.\n\t* testsuite/20_util/exchange/constexpr.cc: New.\n\t* testsuite/23_containers/array/comparison_operators/constexpr.cc: New.\n\t* testsuite/25_algorithms/constexpr_macro.cc: New.\n\t* testsuite/25_algorithms/adjacent_find/constexpr.cc: New.\n\t* testsuite/25_algorithms/all_of/constexpr.cc: New.\n\t* testsuite/25_algorithms/any_of/constexpr.cc: New.\n\t* testsuite/25_algorithms/binary_search/constexpr.cc: New.\n\t* testsuite/25_algorithms/copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/copy_backward/constexpr.cc: New.\n\t* testsuite/25_algorithms/copy_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/copy_n/constexpr.cc: New.\n\t* testsuite/25_algorithms/count/constexpr.cc: New.\n\t* testsuite/25_algorithms/count_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/equal/constexpr.cc: New.\n\t* testsuite/25_algorithms/equal_range/constexpr.cc: New.\n\t* testsuite/25_algorithms/fill/constexpr.cc: New.\n\t* testsuite/25_algorithms/fill_n/constexpr.cc: New.\n\t* testsuite/25_algorithms/find/constexpr.cc: New.\n\t* testsuite/25_algorithms/find_end/constexpr.cc: New.\n\t* testsuite/25_algorithms/find_first_of/constexpr.cc: New.\n\t* testsuite/25_algorithms/find_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/find_if_not/constexpr.cc: New.\n\t* testsuite/25_algorithms/for_each/constexpr.cc: New.\n\t* testsuite/25_algorithms/generate/constexpr.cc: New.\n\t* testsuite/25_algorithms/generate_n/constexpr.cc: New.\n\t* testsuite/25_algorithms/is_heap/constexpr.cc: New.\n\t* testsuite/25_algorithms/is_heap_until/constexpr.cc: New.\n\t* testsuite/25_algorithms/is_partitioned/constexpr.cc: New.\n\t* testsuite/25_algorithms/is_permutation/constexpr.cc: New.\n\t* testsuite/25_algorithms/is_sorted/constexpr.cc: New.\n\t* testsuite/25_algorithms/is_sorted_until/constexpr.cc: New.\n\t* testsuite/25_algorithms/lexicographical_compare/constexpr.cc: New.\n\t* testsuite/25_algorithms/lower_bound/constexpr.cc: New.\n\t* testsuite/25_algorithms/merge/constexpr.cc: New.\n\t* testsuite/25_algorithms/mismatch/constexpr.cc: New.\n\t* testsuite/25_algorithms/none_of/constexpr.cc: New.\n\t* testsuite/25_algorithms/partition_copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/partition_point/constexpr.cc: New.\n\t* testsuite/25_algorithms/remove/constexpr.cc: New.\n\t* testsuite/25_algorithms/remove_copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/remove_copy_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/remove_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/replace_copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/replace_copy_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/replace_if/constexpr.cc: New.\n\t* testsuite/25_algorithms/reverse_copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/rotate_copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/search/constexpr.cc: New.\n\t* testsuite/25_algorithms/search_n/constexpr.cc: New.\n\t* testsuite/25_algorithms/set_difference/constexpr.cc: New.\n\t* testsuite/25_algorithms/set_intersection/constexpr.cc: New.\n\t* testsuite/25_algorithms/set_symmetric_difference/constexpr.cc: New.\n\t* testsuite/25_algorithms/set_union/constexpr.cc: New.\n\t* testsuite/25_algorithms/transform/constexpr.cc: New.\n\t* testsuite/25_algorithms/unique/constexpr.cc: New.\n\t* testsuite/25_algorithms/unique_copy/constexpr.cc: New.\n\t* testsuite/25_algorithms/upper_bound/constexpr.cc: New.\n\nFrom-SVN: r273975", "tree": {"sha": "e5137e791f59723d98e3f6d0a0691e4c137019a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5137e791f59723d98e3f6d0a0691e4c137019a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a66e68ad92f7b4150e35e20e2bb22f777837b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a66e68ad92f7b4150e35e20e2bb22f777837b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a66e68ad92f7b4150e35e20e2bb22f777837b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a66e68ad92f7b4150e35e20e2bb22f777837b63/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd1f6968d6bf1bb4f7dd0726394217fe25deb943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1f6968d6bf1bb4f7dd0726394217fe25deb943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1f6968d6bf1bb4f7dd0726394217fe25deb943"}], "stats": {"total": 3037, "additions": 3012, "deletions": 25}, "files": [{"sha": "670e99bfcf37de8e500e2b033f2ab55346994a65", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -1,3 +1,127 @@\n+2019-08-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement C++20 p0202 - Add Constexpr Modifiers to Functions\n+\tin <algorithm> and <utility> Headers.\n+\tImplement C++20 p1023 - constexpr comparison operators for std::array.\n+\t* include/bits/algorithmfwd.h (all_of, any_of, binary_search, copy,\n+\tcopy_backward, copy_if, copy_n, equal_range, fill, find_end,\n+\tfind_if_not, includes, is_heap, is_heap_until, is_partitioned,\n+\tis_permutation, is_sorted, is_sorted_until, iter_swap, lower_bound,\n+\tnone_of, partition_copy, partition_point, remove, remove_if,\n+\tremove_copy, remove_copy_if, replace_copy, replace_copy_if,\n+\treverse_copy, rotate_copy, uunique, upper_bound, adjacent_find, count,\n+\tcount_if, equal, find, find_first_of, find_if, for_each, generate,\n+\tgenerate_n, lexicographical_compare, merge, mismatch, replace,\n+\treplace_if, search, search_n, set_difference, set_intersection,\n+\tset_symmetric_difference, set_union, transform, unique_copy):\n+\tMark constexpr.\n+\t* include/bits/cpp_type_traits.h (__miter_base): Mark constexpr.\n+\t* include/bits/predefined_ops.h (_Iter_less_val::operator(),\n+\t_Val_less_iter::operator(), _Iter_equal_to_iter::operator(),\n+\t_Iter_equal_to_val::operator(), _Iter_equals_val::operator()):\n+\t Use const ref instead of ref arg;\n+\t(_Iter_less_val, __iter_less_val, _Val_less_iter, __val_less_iter,\n+\t__iter_equal_to_iter, __iter_equal_to_val, __iter_comp_val,\n+\t_Iter_comp_val, _Val_comp_iter, __val_comp_iter, __iter_equals_val,\n+\t_Iter_equals_iter, __iter_comp_iter, _Iter_pred, __pred_iter,\n+\t_Iter_comp_to_val, __iter_comp_val, _Iter_comp_to_iter,\n+\t__iter_comp_iter): Mark constexpr.\n+\t* include/bits/stl_algo.h (__find_if, __find_if_not, __find_if_not_n,\n+\t__search, __search_n_aux, __search_n, __find_end, find_end, all_of,\n+\tnone_of, any_of, find_if_not, is_partitioned, partition_point,\n+\t__remove_copy_if, remove_copy, remove_copy_if, copy_if, __copy_n,\n+\tcopy_n, partition_copy, __remove_if, remove, remove_if, __adjacent_find,\n+\t__unique, unique, __unique_copy, reverse_copy, rotate_copy,\n+\t__unguarded_linear_insert, __insertion_sort, __unguarded_insertion_sort,\n+\t__final_insertion_sort, lower_bound, __upper_bound, upper_bound,\n+\t__equal_range, equal_range, binary_search, __includes, includes,\n+\t__next_permutation, __prev_permutation, __replace_copy_if, replace_copy,\n+\treplace_copy_if, __count_if, is_sorted, __is_sorted_until,\n+\tis_sorted_until, __is_permutation, is_permutation, for_each, find,\n+\tfind_if, find_first_of, adjacent_find, count, count_if, search,\n+\tsearch_n, transform, replace, replace_if, generate, generate_n,\n+\tunique_copy, __merge, merge, __set_union, set_union, __set_intersection,\n+\tset_intersection, __set_difference, set_difference,\n+\t__set_symmetric_difference, set_symmetric_difference):  Mark constexpr.\n+\t* include/bits/stl_algobase.h (__memmove, __memcmp): New maybe constexpr\n+\twrappers around __builtin_memmove and __builtin_memcmp\n+\trespectively;\n+\t(__niter_base, __niter_wrap, __copy_m, __copy_move_a, __copy_move_a2,\n+\tcopy, move, __copy_move_b, __copy_move_backward_a,\n+\t__copy_move_backward_a2, copy_backward, move_backward, __fill_a, fill,\n+\t__fill_n_a, fill_n, equal, __lc_rai::__newlast1, __lc_rai::__cnd2,\n+\t__lexicographical_compare_impl, __lexicographical_compare,\n+\t__lexicographical_compare<true>::__lc, __lexicographical_compare_aux,\n+\t__lower_bound, lower_bound, equal, __equal4, lexicographical_compare,\n+\t__mismatch, mismatch, __is_heap_until, __is_heap, is_heap_until,\n+\tis_heap): Mark constexpr.\n+\t* include/bits/stl_heap.h (__is_heap_until, __is_heap, is_heap_until,\n+\tis_heap): Mark constexpr.\n+\t* include/bits/stl_iterator.h (__niter_base, __miter_base): Mark constexpr.\n+\t* include/std/array: Make comparison ops constexpr.\n+\t* include/std/utility: Make exchange constexpr.\n+\t* include/std/version (__cpp_lib_constexpr_algorithms): New macro.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust.\n+\t* testsuite/23_containers/array/tuple_interface/\n+\ttuple_element_neg.cc: Adjust.\n+\t* testsuite/20_util/exchange/constexpr.cc: New.\n+\t* testsuite/23_containers/array/comparison_operators/constexpr.cc: New.\n+\t* testsuite/25_algorithms/constexpr_macro.cc: New.\n+\t* testsuite/25_algorithms/adjacent_find/constexpr.cc: New.\n+\t* testsuite/25_algorithms/all_of/constexpr.cc: New.\n+\t* testsuite/25_algorithms/any_of/constexpr.cc: New.\n+\t* testsuite/25_algorithms/binary_search/constexpr.cc: New.\n+\t* testsuite/25_algorithms/copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/copy_backward/constexpr.cc: New.\n+\t* testsuite/25_algorithms/copy_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/copy_n/constexpr.cc: New.\n+\t* testsuite/25_algorithms/count/constexpr.cc: New.\n+\t* testsuite/25_algorithms/count_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/equal/constexpr.cc: New.\n+\t* testsuite/25_algorithms/equal_range/constexpr.cc: New.\n+\t* testsuite/25_algorithms/fill/constexpr.cc: New.\n+\t* testsuite/25_algorithms/fill_n/constexpr.cc: New.\n+\t* testsuite/25_algorithms/find/constexpr.cc: New.\n+\t* testsuite/25_algorithms/find_end/constexpr.cc: New.\n+\t* testsuite/25_algorithms/find_first_of/constexpr.cc: New.\n+\t* testsuite/25_algorithms/find_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/find_if_not/constexpr.cc: New.\n+\t* testsuite/25_algorithms/for_each/constexpr.cc: New.\n+\t* testsuite/25_algorithms/generate/constexpr.cc: New.\n+\t* testsuite/25_algorithms/generate_n/constexpr.cc: New.\n+\t* testsuite/25_algorithms/is_heap/constexpr.cc: New.\n+\t* testsuite/25_algorithms/is_heap_until/constexpr.cc: New.\n+\t* testsuite/25_algorithms/is_partitioned/constexpr.cc: New.\n+\t* testsuite/25_algorithms/is_permutation/constexpr.cc: New.\n+\t* testsuite/25_algorithms/is_sorted/constexpr.cc: New.\n+\t* testsuite/25_algorithms/is_sorted_until/constexpr.cc: New.\n+\t* testsuite/25_algorithms/lexicographical_compare/constexpr.cc: New.\n+\t* testsuite/25_algorithms/lower_bound/constexpr.cc: New.\n+\t* testsuite/25_algorithms/merge/constexpr.cc: New.\n+\t* testsuite/25_algorithms/mismatch/constexpr.cc: New.\n+\t* testsuite/25_algorithms/none_of/constexpr.cc: New.\n+\t* testsuite/25_algorithms/partition_copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/partition_point/constexpr.cc: New.\n+\t* testsuite/25_algorithms/remove/constexpr.cc: New.\n+\t* testsuite/25_algorithms/remove_copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/remove_copy_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/remove_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/replace_copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/replace_copy_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/replace_if/constexpr.cc: New.\n+\t* testsuite/25_algorithms/reverse_copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/rotate_copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/search/constexpr.cc: New.\n+\t* testsuite/25_algorithms/search_n/constexpr.cc: New.\n+\t* testsuite/25_algorithms/set_difference/constexpr.cc: New.\n+\t* testsuite/25_algorithms/set_intersection/constexpr.cc: New.\n+\t* testsuite/25_algorithms/set_symmetric_difference/constexpr.cc: New.\n+\t* testsuite/25_algorithms/set_union/constexpr.cc: New.\n+\t* testsuite/25_algorithms/transform/constexpr.cc: New.\n+\t* testsuite/25_algorithms/unique/constexpr.cc: New.\n+\t* testsuite/25_algorithms/unique_copy/constexpr.cc: New.\n+\t* testsuite/25_algorithms/upper_bound/constexpr.cc: New.\n+\n 2019-07-31  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/memory (make_obj_using_allocator): Qualify call to"}, {"sha": "99491db1c5eadaab4d8ebc3ddc5084b593114a6d", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -191,21 +191,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // adjacent_find\n \n+#if __cplusplus > 201703L\n+#  define __cpp_lib_constexpr_algorithms 201711L\n+#endif\n+\n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     all_of(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     any_of(_IIter, _IIter, _Predicate);\n #endif\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     binary_search(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     binary_search(_FIter, _FIter, const _Tp&, _Compare);\n \n@@ -222,19 +230,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _IIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     copy(_IIter, _IIter, _OIter);\n \n   template<typename _BIter1, typename _BIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _BIter2\n     copy_backward(_BIter1, _BIter1, _BIter2);\n \n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _OIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n   template<typename _IIter, typename _Size, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     copy_n(_IIter, _Size, _OIter);\n #endif\n@@ -243,28 +255,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // count_if\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_FIter, _FIter>\n     equal_range(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_FIter, _FIter>\n     equal_range(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     fill(_FIter, _FIter, const _Tp&);\n \n   template<typename _OIter, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     fill_n(_OIter, _Size, const _Tp&);\n \n   // find\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_end(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n@@ -273,6 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _IIter\n     find_if_not(_IIter, _IIter, _Predicate);\n #endif\n@@ -282,10 +301,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // generate_n\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     includes(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n@@ -299,47 +320,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter\n     is_heap_until(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter\n     is_heap_until(_RAIter, _RAIter, _Compare);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_partitioned(_IIter, _IIter, _Predicate);\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_permutation(_FIter1, _FIter1, _FIter2);\n \n   template<typename _FIter1, typename _FIter2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_sorted(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_sorted(_FIter, _FIter, _Compare);\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     is_sorted_until(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     is_sorted_until(_FIter, _FIter, _Compare);\n #endif\n@@ -349,10 +381,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     iter_swap(_FIter1, _FIter2);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     lower_bound(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     lower_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n@@ -453,6 +487,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     none_of(_IIter, _IIter, _Predicate);\n #endif\n@@ -473,10 +508,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _OIter1,\n \t   typename _OIter2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_OIter1, _OIter2>\n     partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);\n \n   template<typename _FIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     partition_point(_FIter, _FIter, _Predicate);\n #endif\n@@ -508,28 +545,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // random_shuffle\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     remove(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     remove_if(_FIter, _FIter, _Predicate);\n \n   template<typename _IIter, typename _OIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     remove_copy(_IIter, _IIter, _OIter, const _Tp&);\n \n   template<typename _IIter, typename _OIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     remove_copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n   // replace\n \n   template<typename _IIter, typename _OIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);\n \n   template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);\n \n@@ -540,6 +583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     reverse(_BIter, _BIter);\n \n   template<typename _BIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     reverse_copy(_BIter, _BIter, _OIter);\n \n@@ -551,6 +595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   template<typename _FIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     rotate_copy(_FIter, _FIter, _FIter, _OIter);\n \n@@ -598,82 +643,101 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // transform\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     unique(_FIter, _FIter);\n \n   template<typename _FIter, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     unique(_FIter, _FIter, _BinaryPredicate);\n \n   // unique_copy\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     upper_bound(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     upper_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     adjacent_find(_FIter, _FIter);\n \n   template<typename _FIter, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     adjacent_find(_FIter, _FIter, _BinaryPredicate);\n \n   template<typename _IIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     typename iterator_traits<_IIter>::difference_type\n     count(_IIter, _IIter, const _Tp&);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     typename iterator_traits<_IIter>::difference_type\n     count_if(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     equal(_IIter1, _IIter1, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n   template<typename _IIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _IIter\n     find(_IIter, _IIter, const _Tp&);\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _IIter\n     find_if(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Funct>\n+    _GLIBCXX20_CONSTEXPR\n     _Funct\n     for_each(_IIter, _IIter, _Funct);\n \n   template<typename _FIter, typename _Generator>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     generate(_FIter, _FIter, _Generator);\n \n   template<typename _OIter, typename _Size, typename _Generator>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     generate_n(_OIter, _Size, _Generator);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n@@ -688,11 +752,13 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     max_element(_FIter, _FIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n@@ -707,10 +773,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     min_element(_FIter, _FIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_IIter1, _IIter2>\n     mismatch(_IIter1, _IIter1, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_IIter1, _IIter2>\n     mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n@@ -748,64 +816,78 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n #endif\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     replace(_FIter, _FIter, const _Tp&, const _Tp&);\n \n   template<typename _FIter, typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     replace_if(_FIter, _FIter, _Predicate, const _Tp&);\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     search(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     search_n(_FIter, _FIter, _Size, const _Tp&);\n \n   template<typename _FIter, typename _Size, typename _Tp,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,\n \t\t\t     _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n@@ -826,19 +908,23 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     stable_sort(_RAIter, _RAIter, _Compare);\n \n   template<typename _IIter, typename _OIter, typename _UnaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     transform(_IIter, _IIter, _OIter, _UnaryOperation);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);\n \n   template<typename _IIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     unique_copy(_IIter, _IIter, _OIter);\n \n   template<typename _IIter, typename _OIter, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n "}, {"sha": "3e165c77707cf328bc8760ba1ba963fe1875ddd6", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -424,6 +424,7 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n   // Fallback implementation of the function in bits/stl_iterator.h used to\n   // remove the move_iterator wrapper.\n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iterator\n     __miter_base(_Iterator __it)\n     { return __it; }"}, {"sha": "e3ddeb563b4c653af78976a01768c52deca40a21", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -145,6 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // C++11 version of std::exchange for internal use.\n   template <typename _Tp, typename _Up = _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     __exchange(_Tp& __obj, _Up&& __new_val)\n     {"}, {"sha": "e39b76cd7bd697dbc1b624ed9d63dc212722afe2", "filename": "libstdc++-v3/include/bits/predefined_ops.h", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -56,19 +56,23 @@ namespace __ops\n     _Iter_less_val() { }\n #endif\n \n+    _GLIBCXX20_CONSTEXPR\n     explicit\n     _Iter_less_val(_Iter_less_iter) { }\n \n     template<typename _Iterator, typename _Value>\n+      _GLIBCXX20_CONSTEXPR\n       bool\n       operator()(_Iterator __it, _Value& __val) const\n       { return *__it < __val; }\n   };\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Iter_less_val\n   __iter_less_val()\n   { return _Iter_less_val(); }\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Iter_less_val\n   __iter_comp_val(_Iter_less_iter)\n   { return _Iter_less_val(); }\n@@ -81,47 +85,56 @@ namespace __ops\n     _Val_less_iter() { }\n #endif\n \n+    _GLIBCXX20_CONSTEXPR\n     explicit\n     _Val_less_iter(_Iter_less_iter) { }\n \n     template<typename _Value, typename _Iterator>\n+      _GLIBCXX20_CONSTEXPR\n       bool\n       operator()(_Value& __val, _Iterator __it) const\n       { return __val < *__it; }\n   };\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Val_less_iter\n   __val_less_iter()\n   { return _Val_less_iter(); }\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Val_less_iter\n   __val_comp_iter(_Iter_less_iter)\n   { return _Val_less_iter(); }\n \n   struct _Iter_equal_to_iter\n   {\n     template<typename _Iterator1, typename _Iterator2>\n+      _GLIBCXX20_CONSTEXPR\n       bool\n       operator()(_Iterator1 __it1, _Iterator2 __it2) const\n       { return *__it1 == *__it2; }\n   };\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Iter_equal_to_iter\n   __iter_equal_to_iter()\n   { return _Iter_equal_to_iter(); }\n \n   struct _Iter_equal_to_val\n   {\n     template<typename _Iterator, typename _Value>\n+      _GLIBCXX20_CONSTEXPR\n       bool\n       operator()(_Iterator __it, _Value& __val) const\n       { return *__it == __val; }\n   };\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Iter_equal_to_val\n   __iter_equal_to_val()\n   { return _Iter_equal_to_val(); }\n \n+  _GLIBCXX20_CONSTEXPR\n   inline _Iter_equal_to_val\n   __iter_comp_val(_Iter_equal_to_iter)\n   { return _Iter_equal_to_val(); }\n@@ -154,35 +167,41 @@ namespace __ops\n     {\n       _Compare _M_comp;\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_comp_val(_Compare __comp)\n \t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)\n \t: _M_comp(__comp._M_comp)\n       { }\n \n #if __cplusplus >= 201103L\n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)\n \t: _M_comp(std::move(__comp._M_comp))\n       { }\n #endif\n \n       template<typename _Iterator, typename _Value>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator __it, _Value& __val)\n \t{ return bool(_M_comp(*__it, __val)); }\n     };\n \n   template<typename _Compare>\n-   inline _Iter_comp_val<_Compare>\n+    _GLIBCXX20_CONSTEXPR\n+    inline _Iter_comp_val<_Compare>\n     __iter_comp_val(_Compare __comp)\n     { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iter_comp_val<_Compare>\n     __iter_comp_val(_Iter_comp_iter<_Compare> __comp)\n     { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp)); }\n@@ -192,35 +211,41 @@ namespace __ops\n     {\n       _Compare _M_comp;\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Val_comp_iter(_Compare __comp)\n \t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)\n \t: _M_comp(__comp._M_comp)\n       { }\n \n #if __cplusplus >= 201103L\n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)\n \t: _M_comp(std::move(__comp._M_comp))\n       { }\n #endif\n \n       template<typename _Value, typename _Iterator>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Value& __val, _Iterator __it)\n \t{ return bool(_M_comp(__val, *__it)); }\n     };\n \n   template<typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Val_comp_iter<_Compare>\n     __val_comp_iter(_Compare __comp)\n     { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Val_comp_iter<_Compare>\n     __val_comp_iter(_Iter_comp_iter<_Compare> __comp)\n     { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }\n@@ -230,18 +255,21 @@ namespace __ops\n     {\n       _Value& _M_value;\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_equals_val(_Value& __value)\n \t: _M_value(__value)\n       { }\n \n       template<typename _Iterator>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator __it)\n \t{ return *__it == _M_value; }\n     };\n \n   template<typename _Value>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iter_equals_val<_Value>\n     __iter_equals_val(_Value& __val)\n     { return _Iter_equals_val<_Value>(__val); }\n@@ -251,18 +279,21 @@ namespace __ops\n     {\n       _Iterator1 _M_it1;\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_equals_iter(_Iterator1 __it1)\n \t: _M_it1(__it1)\n       { }\n \n       template<typename _Iterator2>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator2 __it2)\n \t{ return *__it2 == *_M_it1; }\n     };\n \n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iter_equals_iter<_Iterator>\n     __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)\n     { return _Iter_equals_iter<_Iterator>(__it); }\n@@ -272,18 +303,21 @@ namespace __ops\n     {\n       _Predicate _M_pred;\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_pred(_Predicate __pred)\n \t: _M_pred(_GLIBCXX_MOVE(__pred))\n       { }\n \n       template<typename _Iterator>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator __it)\n \t{ return bool(_M_pred(*__it)); }\n     };\n \n   template<typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iter_pred<_Predicate>\n     __pred_iter(_Predicate __pred)\n     { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }\n@@ -294,18 +328,21 @@ namespace __ops\n       _Compare _M_comp;\n       _Value& _M_value;\n \n+      _GLIBCXX20_CONSTEXPR\n       _Iter_comp_to_val(_Compare __comp, _Value& __value)\n \t: _M_comp(_GLIBCXX_MOVE(__comp)), _M_value(__value)\n       { }\n \n       template<typename _Iterator>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator __it)\n \t{ return bool(_M_comp(*__it, _M_value)); }\n     };\n \n   template<typename _Compare, typename _Value>\n     _Iter_comp_to_val<_Compare, _Value>\n+    _GLIBCXX20_CONSTEXPR\n     __iter_comp_val(_Compare __comp, _Value &__val)\n     {\n       return _Iter_comp_to_val<_Compare, _Value>(_GLIBCXX_MOVE(__comp), __val);\n@@ -317,17 +354,20 @@ namespace __ops\n       _Compare _M_comp;\n       _Iterator1 _M_it1;\n \n+      _GLIBCXX20_CONSTEXPR\n       _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)\n \t: _M_comp(_GLIBCXX_MOVE(__comp)), _M_it1(__it1)\n       { }\n \n       template<typename _Iterator2>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator2 __it2)\n \t{ return bool(_M_comp(*__it2, *_M_it1)); }\n     };\n \n   template<typename _Compare, typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iter_comp_to_iter<_Compare, _Iterator>\n     __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)\n     {\n@@ -340,18 +380,21 @@ namespace __ops\n     {\n       _Predicate _M_pred;\n \n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       _Iter_negate(_Predicate __pred)\n \t: _M_pred(_GLIBCXX_MOVE(__pred))\n       { }\n \n       template<typename _Iterator>\n+\t_GLIBCXX20_CONSTEXPR\n \tbool\n \toperator()(_Iterator __it)\n \t{ return !bool(_M_pred(*__it)); }\n     };\n \n   template<typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iter_negate<_Predicate>\n     __negate(_Iter_pred<_Predicate> __pred)\n     { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }"}, {"sha": "0d707250d2e17814884669e6112b8c1503bc0413", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 111, "deletions": 6, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -97,6 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is an overload used by find algos for the Input Iterator case.\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _InputIterator\n     __find_if(_InputIterator __first, _InputIterator __last,\n \t      _Predicate __pred, input_iterator_tag)\n@@ -108,6 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is an overload used by find algos for the RAI case.\n   template<typename _RandomAccessIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _RandomAccessIterator\n     __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      _Predicate __pred, random_access_iterator_tag)\n@@ -155,6 +157,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Iterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iterator\n     __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)\n     {\n@@ -164,6 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Provided for stable_partition to use.\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _InputIterator\n     __find_if_not(_InputIterator __first, _InputIterator __last,\n \t\t  _Predicate __pred)\n@@ -177,6 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// remaining range length instead of comparing against an end\n   /// iterator.\n   template<typename _InputIterator, typename _Predicate, typename _Distance>\n+    _GLIBCXX20_CONSTEXPR\n     _InputIterator\n     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)\n     {\n@@ -201,6 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator1\n     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t     _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n@@ -217,7 +223,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));\n \n       // General case.\n-      _ForwardIterator2 __p;\n       _ForwardIterator1 __current = __first1;\n \n       for (;;)\n@@ -229,7 +234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__first1 == __last1)\n \t    return __last1;\n \n-\t  __p = __p1;\n+\t  _ForwardIterator2 __p = __p1;\n \t  __current = __first1;\n \t  if (++__current == __last1)\n \t    return __last1;\n@@ -253,6 +258,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator, typename _Integer,\n \t   typename _UnaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,\n \t\t   _Integer __count, _UnaryPredicate __unary_pred,\n@@ -285,6 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _RandomAccessIter, typename _Integer,\n \t   typename _UnaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _RandomAccessIter\n     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,\n \t\t   _Integer __count, _UnaryPredicate __unary_pred,\n@@ -315,6 +322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _ForwardIterator, typename _Integer,\n \t   typename _UnaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t       _Integer __count,\n@@ -333,6 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // find_end for forward iterators.\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator1\n     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t       _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n@@ -361,6 +370,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // find_end for bidirectional iterators (much faster).\n   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _BidirectionalIterator1\n     __find_end(_BidirectionalIterator1 __first1,\n \t       _BidirectionalIterator1 __last1,\n@@ -421,6 +431,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  [__first1,__last1-(__last2-__first2))\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator1\n     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t     _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n@@ -470,6 +481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator1\n     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t     _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n@@ -504,6 +516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @p [__first,__last), and false otherwise.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     { return __last == std::find_if_not(__first, __last, __pred); }\n@@ -521,6 +534,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @p [__first,__last), and false otherwise.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }\n@@ -539,6 +553,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  otherwise.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     { return !std::none_of(__first, __last, __pred); }\n@@ -554,6 +569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _InputIterator\n     find_if_not(_InputIterator __first, _InputIterator __last,\n \t\t_Predicate __pred)\n@@ -578,6 +594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  do not.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_partitioned(_InputIterator __first, _InputIterator __last,\n \t\t   _Predicate __pred)\n@@ -599,6 +616,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           and @p none_of(mid, __last, __pred) are both true.\n   */\n   template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     partition_point(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    _Predicate __pred)\n@@ -615,13 +633,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_DistanceType;\n \n       _DistanceType __len = std::distance(__first, __last);\n-      _DistanceType __half;\n-      _ForwardIterator __middle;\n \n       while (__len > 0)\n \t{\n-\t  __half = __len >> 1;\n-\t  __middle = __first;\n+\t  _DistanceType __half = __len >> 1;\n+\t  _ForwardIterator __middle = __first;\n \t  std::advance(__middle, __half);\n \t  if (__pred(*__middle))\n \t    {\n@@ -638,6 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __remove_copy_if(_InputIterator __first, _InputIterator __last,\n \t\t     _OutputIterator __result, _Predicate __pred)\n@@ -666,6 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are copied is unchanged.\n   */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     remove_copy(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, const _Tp& __value)\n@@ -699,6 +717,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     remove_copy_if(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result, _Predicate __pred)\n@@ -733,6 +752,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     copy_if(_InputIterator __first, _InputIterator __last,\n \t    _OutputIterator __result, _Predicate __pred)\n@@ -755,6 +775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __copy_n(_InputIterator __first, _Size __n,\n \t     _OutputIterator __result, input_iterator_tag)\n@@ -776,6 +797,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _RandomAccessIterator, typename _Size,\n \t   typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     __copy_n(_RandomAccessIterator __first, _Size __n,\n \t     _OutputIterator __result, random_access_iterator_tag)\n@@ -795,6 +817,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  optimizations such as unrolling).\n   */\n   template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)\n     {\n@@ -824,6 +847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator1,\n \t   typename _OutputIterator2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_OutputIterator1, _OutputIterator2>\n     partition_copy(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator1 __out_true, _OutputIterator2 __out_false,\n@@ -856,6 +880,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __remove_if(_ForwardIterator __first, _ForwardIterator __last,\n \t\t_Predicate __pred)\n@@ -892,6 +917,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are still present, but their value is unspecified.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     remove(_ForwardIterator __first, _ForwardIterator __last,\n \t   const _Tp& __value)\n@@ -925,6 +951,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are still present, but their value is unspecified.\n   */\n   template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     remove_if(_ForwardIterator __first, _ForwardIterator __last,\n \t      _Predicate __pred)\n@@ -941,6 +968,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    _BinaryPredicate __binary_pred)\n@@ -958,6 +986,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __unique(_ForwardIterator __first, _ForwardIterator __last,\n \t     _BinaryPredicate __binary_pred)\n@@ -991,6 +1020,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are still present, but their value is unspecified.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     unique(_ForwardIterator __first, _ForwardIterator __last)\n     {\n@@ -1021,6 +1051,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are still present, but their value is unspecified.\n   */\n   template<typename _ForwardIterator, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     unique(_ForwardIterator __first, _ForwardIterator __last,\n \t   _BinaryPredicate __binary_pred)\n@@ -1045,6 +1076,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator, typename _OutputIterator,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  _OutputIterator __result, _BinaryPredicate __binary_pred,\n@@ -1074,6 +1106,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __unique_copy(_InputIterator __first, _InputIterator __last,\n \t\t  _OutputIterator __result, _BinaryPredicate __binary_pred,\n@@ -1106,6 +1139,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _ForwardIterator,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __unique_copy(_InputIterator __first, _InputIterator __last,\n \t\t  _ForwardIterator __result, _BinaryPredicate __binary_pred,\n@@ -1203,6 +1237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  [__result,__result+(__last-__first)) must not overlap.\n   */\n   template<typename _BidirectionalIterator, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,\n \t\t _OutputIterator __result)\n@@ -1467,6 +1502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  for each @p n in the range @p [0,__last-__first).\n   */\n   template<typename _ForwardIterator, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,\n \t\t_ForwardIterator __last, _OutputIterator __result)\n@@ -1816,6 +1852,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __unguarded_linear_insert(_RandomAccessIterator __last,\n \t\t\t      _Compare __comp)\n@@ -1835,6 +1872,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __insertion_sort(_RandomAccessIterator __first,\n \t\t     _RandomAccessIterator __last, _Compare __comp)\n@@ -1858,6 +1896,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     __unguarded_insertion_sort(_RandomAccessIterator __first,\n \t\t\t       _RandomAccessIterator __last, _Compare __comp)\n@@ -1875,6 +1914,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __final_insertion_sort(_RandomAccessIterator __first,\n \t\t\t   _RandomAccessIterator __last, _Compare __comp)\n@@ -2018,6 +2058,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the function used for the initial sort.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n@@ -2034,6 +2075,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  const _Tp& __val, _Compare __comp)\n@@ -2072,6 +2114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup binary_search_algorithms\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n@@ -2102,6 +2145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the function used for the initial sort.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n@@ -2119,6 +2163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _ForwardIterator, typename _Tp,\n \t   typename _CompareItTp, typename _CompareTpIt>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_ForwardIterator, _ForwardIterator>\n     __equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  const _Tp& __val,\n@@ -2173,6 +2218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  but does not actually call those functions.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline pair<_ForwardIterator, _ForwardIterator>\n     equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n@@ -2209,6 +2255,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  but does not actually call those functions.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline pair<_ForwardIterator, _ForwardIterator>\n     equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n@@ -2242,6 +2289,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  that, use std::find or a container's specialized find member functions.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     binary_search(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  const _Tp& __val)\n@@ -2275,6 +2323,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the function used for the initial sort.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     binary_search(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  const _Tp& __val, _Compare __comp)\n@@ -2778,6 +2827,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     __includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t       _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -2816,6 +2866,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  returned.\n   */\n   template<typename _InputIterator1, typename _InputIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2)\n@@ -2861,6 +2912,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -2895,6 +2947,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // max_element\n \n   template<typename _BidirectionalIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     __next_permutation(_BidirectionalIterator __first,\n \t\t       _BidirectionalIterator __last, _Compare __comp)\n@@ -2994,6 +3047,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _BidirectionalIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     __prev_permutation(_BidirectionalIterator __first,\n \t\t       _BidirectionalIterator __last, _Compare __comp)\n@@ -3098,6 +3152,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __replace_copy_if(_InputIterator __first, _InputIterator __last,\n \t\t      _OutputIterator __result,\n@@ -3126,6 +3181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  equal to @p __old_value with @p __new_value.\n   */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     replace_copy(_InputIterator __first, _InputIterator __last,\n \t\t _OutputIterator __result,\n@@ -3161,6 +3217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     replace_copy_if(_InputIterator __first, _InputIterator __last,\n \t\t    _OutputIterator __result,\n@@ -3180,6 +3237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     typename iterator_traits<_InputIterator>::difference_type\n     __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     {\n@@ -3199,6 +3257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return  True if the elements are sorted, false otherwise.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n     { return std::is_sorted_until(__first, __last) == __last; }\n@@ -3213,12 +3272,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return  True if the elements are sorted, false otherwise.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_sorted(_ForwardIterator __first, _ForwardIterator __last,\n \t      _Compare __comp)\n     { return std::is_sorted_until(__first, __last, __comp) == __last; }\n \n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,\n \t\t      _Compare __comp)\n@@ -3242,6 +3303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           for which the range [__first, i) is sorted.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)\n     {\n@@ -3266,6 +3328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           for which the range [__first, i) is sorted.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    _Compare __comp)\n@@ -3484,6 +3547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t     _ForwardIterator2 __first2, _BinaryPredicate __pred)\n@@ -3532,6 +3596,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          returns true; otherwise, returns false.\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2)\n@@ -3564,6 +3629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2, _BinaryPredicate __pred)\n@@ -3583,6 +3649,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201103L\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t     _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n@@ -3656,6 +3723,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          otherwise, returns false.\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n@@ -3684,6 +3752,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n@@ -3866,6 +3935,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  If @p __f has a return value it is ignored.\n   */\n   template<typename _InputIterator, typename _Function>\n+    _GLIBCXX20_CONSTEXPR\n     _Function\n     for_each(_InputIterator __first, _InputIterator __last, _Function __f)\n     {\n@@ -3920,6 +3990,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  such that @c *i == @p __val, or @p __last if no such iterator exists.\n   */\n   template<typename _InputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _InputIterator\n     find(_InputIterator __first, _InputIterator __last,\n \t const _Tp& __val)\n@@ -3944,6 +4015,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  such that @p __pred(*i) is true, or @p __last if no such iterator exists.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _InputIterator\n     find_if(_InputIterator __first, _InputIterator __last,\n \t    _Predicate __pred)\n@@ -3975,6 +4047,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  otherwise returns @p __last1.\n   */\n   template<typename _InputIterator, typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _InputIterator\n     find_first_of(_InputIterator __first1, _InputIterator __last1,\n \t\t  _ForwardIterator __first2, _ForwardIterator __last2)\n@@ -4016,6 +4089,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator, typename _ForwardIterator,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _InputIterator\n     find_first_of(_InputIterator __first1, _InputIterator __last1,\n \t\t  _ForwardIterator __first2, _ForwardIterator __last2,\n@@ -4047,6 +4121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  or @p __last if no such iterator exists.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     adjacent_find(_ForwardIterator __first, _ForwardIterator __last)\n     {\n@@ -4072,6 +4147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  exists.\n   */\n   template<typename _ForwardIterator, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     adjacent_find(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  _BinaryPredicate __binary_pred)\n@@ -4097,6 +4173,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  for which @c *i == @p __value\n   */\n   template<typename _InputIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename iterator_traits<_InputIterator>::difference_type\n     count(_InputIterator __first, _InputIterator __last, const _Tp& __value)\n     {\n@@ -4120,6 +4197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  for which @p __pred(*i) is true.\n   */\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename iterator_traits<_InputIterator>::difference_type\n     count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     {\n@@ -4160,6 +4238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p [__first1,__last1-(__last2-__first2))\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator1\n     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t   _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n@@ -4200,6 +4279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator1\n     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t   _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n@@ -4234,6 +4314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  equal to @p __val.\n   */\n   template<typename _ForwardIterator, typename _Integer, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t     _Integer __count, const _Tp& __val)\n@@ -4268,6 +4349,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _ForwardIterator, typename _Integer, typename _Tp,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t     _Integer __count, const _Tp& __val,\n@@ -4316,6 +4398,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _UnaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     transform(_InputIterator __first, _InputIterator __last,\n \t      _OutputIterator __result, _UnaryOperation __unary_op)\n@@ -4353,6 +4436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     transform(_InputIterator1 __first1, _InputIterator1 __last1,\n \t      _InputIterator2 __first2, _OutputIterator __result,\n@@ -4385,6 +4469,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p __old_value then the assignment @c *i = @p __new_value is performed.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     replace(_ForwardIterator __first, _ForwardIterator __last,\n \t    const _Tp& __old_value, const _Tp& __new_value)\n@@ -4417,6 +4502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  is true then the assignment @c *i = @p __new_value is performed.\n   */\n   template<typename _ForwardIterator, typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     replace_if(_ForwardIterator __first, _ForwardIterator __last,\n \t       _Predicate __pred, const _Tp& __new_value)\n@@ -4449,6 +4535,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p [__first,__last).\n   */\n   template<typename _ForwardIterator, typename _Generator>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     generate(_ForwardIterator __first, _ForwardIterator __last,\n \t     _Generator __gen)\n@@ -4482,6 +4569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   // DR 865. More algorithms that throw away information\n   // DR 426. search_n(), fill_n(), and generate_n() with negative n\n   template<typename _OutputIterator, typename _Size, typename _Generator>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     generate_n(_OutputIterator __first, _Size __n, _Generator __gen)\n     {\n@@ -4519,6 +4607,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  Assignable?\n   */\n   template<typename _InputIterator, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     unique_copy(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result)\n@@ -4560,6 +4649,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     unique_copy(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result,\n@@ -4898,6 +4988,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __merge(_InputIterator1 __first1, _InputIterator1 __last1,\n \t    _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -4942,6 +5033,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     merge(_InputIterator1 __first1, _InputIterator1 __last1,\n \t  _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -4992,6 +5084,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     merge(_InputIterator1 __first1, _InputIterator1 __last1,\n \t  _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5109,6 +5202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t_InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5159,6 +5253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n \t      _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5209,6 +5304,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n \t      _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5240,6 +5336,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t       _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5280,6 +5377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5329,6 +5427,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5358,6 +5457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5402,6 +5502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t   _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5453,6 +5554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t   _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5482,6 +5584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n     __set_symmetric_difference(_InputIterator1 __first1,\n \t\t\t       _InputIterator1 __last1,\n@@ -5532,6 +5635,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -5583,6 +5687,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n     set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t\t     _InputIterator2 __first2, _InputIterator2 __last2,"}, {"sha": "ab1ff5185d46616a41cc838e51341e4d3a46d790", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 123, "deletions": 10, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -77,6 +77,57 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /*\n+   * A constexpr wrapper for __builtin_memmove.\n+   * @param __num The number of elements of type _Tp (not bytes).\n+   */\n+  template<bool _IsMove, typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n+    inline void*\n+    __memmove(_Tp* __dst, const _Tp* __src, size_t __num)\n+    {\n+#ifdef __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\t{\n+\t  for(; __num > 0; --__num)\n+\t    {\n+\t      if constexpr (_IsMove)\n+\t\t*__dst = std::move(*__src);\n+\t      else\n+\t\t*__dst = *__src;\n+\t      ++__src;\n+\t      ++__dst;\n+\t    }\n+\t  return __dst;\n+\t}\n+      else\n+#endif\n+\treturn __builtin_memmove(__dst, __src, sizeof(_Tp) * __num);\n+      return __dst;\n+    }\n+\n+  /*\n+   * A constexpr wrapper for __builtin_memcmp.\n+   * @param __num The number of elements of type _Tp (not bytes).\n+   */\n+  template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n+    inline int\n+    __memcmp(const _Tp* __first1, const _Tp* __first2, size_t __num)\n+    {\n+#ifdef __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\t{\n+\t  for(; __num > 0; ++__first1, ++__first2, --__num)\n+\t    if (*__first1 != *__first2)\n+\t      return *__first1 < *__first2 ? -1 : 1;\n+\t  return 0;\n+\t}\n+      else\n+#endif\n+\treturn __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);\n+    }\n+\n #if __cplusplus < 201103L\n   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n   // nutshell, we are partially implementing the resolution of DR 187,\n@@ -276,6 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Fallback implementation of the function in bits/stl_iterator.h used to\n   // remove the __normal_iterator wrapper. See copy, fill, ...\n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iterator\n     __niter_base(_Iterator __it)\n     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)\n@@ -285,12 +337,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // __normal_iterator back again (this assumes that __normal_iterator\n   // is only used to wrap random access iterators, like pointers).\n   template<typename _From, typename _To>\n+    _GLIBCXX20_CONSTEXPR\n     inline _From\n     __niter_wrap(_From __from, _To __res)\n     { return __from + (__res - std::__niter_base(__from)); }\n \n   // No need to wrap, iterator already has the right type.\n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Iterator\n     __niter_wrap(const _Iterator&, _Iterator __res)\n     { return __res; }\n@@ -305,6 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move\n     {\n       template<typename _II, typename _OI>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _OI\n \t__copy_m(_II __first, _II __last, _OI __result)\n \t{\n@@ -319,6 +374,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<true, false, _Category>\n     {\n       template<typename _II, typename _OI>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _OI\n \t__copy_m(_II __first, _II __last, _OI __result)\n \t{\n@@ -333,6 +389,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<false, false, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _OI\n \t__copy_m(_II __first, _II __last, _OI __result)\n \t{\n@@ -352,6 +409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<true, false, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _OI\n \t__copy_m(_II __first, _II __last, _OI __result)\n \t{\n@@ -371,6 +429,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<_IsMove, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _Tp*\n \t__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n \t{\n@@ -383,12 +442,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t  const ptrdiff_t _Num = __last - __first;\n \t  if (_Num)\n-\t    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);\n+\t    std::__memmove<_IsMove>(__result, __first, _Num);\n \t  return __result + _Num;\n \t}\n     };\n \n   template<bool _IsMove, typename _II, typename _OI>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OI\n     __copy_move_a(_II __first, _II __last, _OI __result)\n     {\n@@ -399,7 +459,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     && __is_pointer<_II>::__value\n \t\t\t     && __is_pointer<_OI>::__value\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n-\n       return std::__copy_move<_IsMove, __simple,\n \t\t\t      _Category>::__copy_m(__first, __last, __result);\n     }\n@@ -434,6 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n \n   template<bool _IsMove, typename _II, typename _OI>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OI\n     __copy_move_a2(_II __first, _II __last, _OI __result)\n     {\n@@ -461,6 +521,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  within [first,last).\n   */\n   template<typename _II, typename _OI>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OI\n     copy(_II __first, _II __last, _OI __result)\n     {\n@@ -493,6 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  within [first,last).\n   */\n   template<typename _II, typename _OI>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OI\n     move(_II __first, _II __last, _OI __result)\n     {\n@@ -515,6 +577,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward\n     {\n       template<typename _BI1, typename _BI2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _BI2\n \t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n \t{\n@@ -529,6 +592,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<true, false, _Category>\n     {\n       template<typename _BI1, typename _BI2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _BI2\n \t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n \t{\n@@ -543,11 +607,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<false, false, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _BI2\n \t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n \t{\n-\t  typename iterator_traits<_BI1>::difference_type __n;\n-\t  for (__n = __last - __first; __n > 0; --__n)\n+\t  typename iterator_traits<_BI1>::difference_type\n+\t    __n = __last - __first;\n+\t  for (; __n > 0; --__n)\n \t    *--__result = *--__last;\n \t  return __result;\n \t}\n@@ -558,11 +624,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<true, false, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _BI2\n \t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n \t{\n-\t  typename iterator_traits<_BI1>::difference_type __n;\n-\t  for (__n = __last - __first; __n > 0; --__n)\n+\t  typename iterator_traits<_BI1>::difference_type\n+\t    __n = __last - __first;\n+\t  for (; __n > 0; --__n)\n \t    *--__result = std::move(*--__last);\n \t  return __result;\n \t}\n@@ -573,6 +641,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _Tp*\n \t__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n \t{\n@@ -585,12 +654,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t  const ptrdiff_t _Num = __last - __first;\n \t  if (_Num)\n-\t    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);\n+\t    std::__memmove<_IsMove>(__result - _Num, __first, _Num);\n \t  return __result - _Num;\n \t}\n     };\n \n   template<bool _IsMove, typename _BI1, typename _BI2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _BI2\n     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n@@ -602,13 +672,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n \n+#ifdef __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\treturn std::__copy_move_backward<true, false,\n+\t\t\t      _Category>::__copy_move_b(__first, __last,\n+\t\t\t\t\t\t\t__result);\n+#endif\n       return std::__copy_move_backward<_IsMove, __simple,\n \t\t\t\t       _Category>::__copy_move_b(__first,\n \t\t\t\t\t\t\t\t __last,\n \t\t\t\t\t\t\t\t __result);\n     }\n \n   template<bool _IsMove, typename _BI1, typename _BI2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _BI2\n     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n@@ -637,6 +714,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  that the start of the output range may overlap [first,last).\n   */\n   template<typename _BI1, typename _BI2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _BI2\n     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n@@ -672,6 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  that the start of the output range may overlap [first,last).\n   */\n   template<typename _BI1, typename _BI2>\n+    _GLIBCXX20_CONSTEXPR\n     inline _BI2\n     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n@@ -694,6 +773,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename\n     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type\n     __fill_a(_ForwardIterator __first, _ForwardIterator __last,\n@@ -704,6 +784,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename\n     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type\n     __fill_a(_ForwardIterator __first, _ForwardIterator __last,\n@@ -738,6 +819,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  to @c memset or @c wmemset.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)\n     {\n@@ -801,6 +883,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _OutputIterator, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename\n     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type\n     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n@@ -814,6 +897,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _OutputIterator, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename\n     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type\n     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n@@ -828,6 +912,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename\n     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type\n     __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)\n@@ -854,6 +939,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 865. More algorithms that throw away information\n   // DR 426. search_n(), fill_n(), and generate_n() with negative n\n   template<typename _OI, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _OI\n     fill_n(_OI __first, _Size __n, const _Tp& __value)\n     {\n@@ -870,6 +956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __equal\n     {\n       template<typename _II1, typename _II2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic bool\n \tequal(_II1 __first1, _II1 __last1, _II2 __first2)\n \t{\n@@ -884,16 +971,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __equal<true>\n     {\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic bool\n \tequal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)\n \t{\n \t  if (const size_t __len = (__last1 - __first1))\n-\t    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);\n+\t    return !std::__memcmp(__first1, __first2, __len);\n \t  return true;\n \t}\n     };\n \n   template<typename _II1, typename _II2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)\n     {\n@@ -912,11 +1001,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lc_rai\n     {\n       template<typename _II1, typename _II2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _II1\n \t__newlast1(_II1, _II1 __last1, _II2, _II2)\n \t{ return __last1; }\n \n       template<typename _II>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic bool\n \t__cnd2(_II __first, _II __last)\n \t{ return __first != __last; }\n@@ -926,6 +1017,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>\n     {\n       template<typename _RAI1, typename _RAI2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic _RAI1\n \t__newlast1(_RAI1 __first1, _RAI1 __last1,\n \t\t   _RAI2 __first2, _RAI2 __last2)\n@@ -938,12 +1030,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _RAI>\n-\tstatic bool\n+\tstatic _GLIBCXX20_CONSTEXPR bool\n \t__cnd2(_RAI, _RAI)\n \t{ return true; }\n     };\n \n   template<typename _II1, typename _II2, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     __lexicographical_compare_impl(_II1 __first1, _II1 __last1,\n \t\t\t\t   _II2 __first2, _II2 __last2,\n@@ -969,11 +1062,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lexicographical_compare\n     {\n       template<typename _II1, typename _II2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic bool __lc(_II1, _II1, _II2, _II2);\n     };\n \n   template<bool _BoolType>\n     template<typename _II1, typename _II2>\n+      _GLIBCXX20_CONSTEXPR\n       bool\n       __lexicographical_compare<_BoolType>::\n       __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n@@ -987,20 +1082,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lexicographical_compare<true>\n     {\n       template<typename _Tp, typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic bool\n \t__lc(const _Tp* __first1, const _Tp* __last1,\n \t     const _Up* __first2, const _Up* __last2)\n \t{\n \t  const size_t __len1 = __last1 - __first1;\n \t  const size_t __len2 = __last2 - __first2;\n \t  if (const size_t __len = std::min(__len1, __len2))\n-\t    if (int __result = __builtin_memcmp(__first1, __first2, __len))\n+\t    if (int __result = std::__memcmp(__first1, __first2, __len))\n \t      return __result < 0;\n \t  return __len1 < __len2;\n \t}\n     };\n \n   template<typename _II1, typename _II2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __lexicographical_compare_aux(_II1 __first1, _II1 __last1,\n \t\t\t\t  _II2 __first2, _II2 __last2)\n@@ -1019,6 +1116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  const _Tp& __val, _Compare __comp)\n@@ -1057,6 +1155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup binary_search_algorithms\n   */\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n@@ -1112,6 +1211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  ranges are equal.\n   */\n   template<typename _II1, typename _II2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_II1 __first1, _II1 __last1, _II2 __first2)\n     {\n@@ -1144,6 +1244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  ranges are equal.\n   */\n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_IIter1 __first1, _IIter1 __last1,\n \t  _IIter2 __first2, _BinaryPredicate __binary_pred)\n@@ -1162,6 +1263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n #if __cplusplus >= 201103L\n   // 4-iterator version of std::equal<It1, It2> for use in C++11.\n   template<typename _II1, typename _II2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n     {\n@@ -1187,6 +1289,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   // 4-iterator version of std::equal<It1, It2, BinaryPred> for use in C++11.\n   template<typename _II1, typename _II2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,\n \t     _BinaryPredicate __binary_pred)\n@@ -1231,6 +1334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  ranges are equal.\n   */\n   template<typename _II1, typename _II2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n     {\n@@ -1263,6 +1367,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  ranges are equal.\n   */\n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_IIter1 __first1, _IIter1 __last1,\n \t  _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)\n@@ -1294,6 +1399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  then this is an inline call to @c memcmp.\n   */\n   template<typename _II1, typename _II2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     lexicographical_compare(_II1 __first1, _II1 __last1,\n \t\t\t    _II2 __first2, _II2 __last2)\n@@ -1330,6 +1436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  comp parameter instead of @c <.\n   */\n   template<typename _II1, typename _II2, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     lexicographical_compare(_II1 __first1, _II1 __last1,\n \t\t\t    _II2 __first2, _II2 __last2, _Compare __comp)\n@@ -1347,6 +1454,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_InputIterator1, _InputIterator2>\n     __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t       _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n@@ -1373,6 +1481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  to by the iterators are not equal.\n   */\n   template<typename _InputIterator1, typename _InputIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2)\n@@ -1407,6 +1516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n@@ -1424,6 +1534,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_InputIterator1, _InputIterator2>\n     __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t       _InputIterator2 __first2, _InputIterator2 __last2,\n@@ -1453,6 +1564,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  to by the iterators are not equal.\n   */\n   template<typename _InputIterator1, typename _InputIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2)\n@@ -1489,6 +1601,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2,"}, {"sha": "d9530e66621b0490bf6ebd3c032c43b66323e4c1", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -70,6 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _RandomAccessIterator, typename _Distance,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _Distance\n     __is_heap_until(_RandomAccessIterator __first, _Distance __n,\n \t\t    _Compare& __comp)\n@@ -88,6 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // __is_heap, a predicate testing whether or not a range is a heap.\n   // This function is an extension, not part of the C++ standard.\n   template<typename _RandomAccessIterator, typename _Distance>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _Distance __n)\n     {\n@@ -97,6 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _RandomAccessIterator, typename _Compare,\n \t   typename _Distance>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)\n     {\n@@ -106,11 +109,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     { return std::__is_heap(__first, std::distance(__first, __last)); }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      _Compare __comp)\n@@ -473,6 +478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the range [__first, i) is a heap.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _RandomAccessIterator\n     is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n@@ -501,6 +507,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the range [__first, i) is a heap.  Comparisons are made using __comp.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _RandomAccessIterator\n     is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t\t  _Compare __comp)\n@@ -525,6 +532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup heap_algorithms\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     { return std::is_heap_until(__first, __last) == __last; }\n@@ -538,6 +546,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup heap_algorithms\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t    _Compare __comp)"}, {"sha": "8ab0d72b0c2bc0083aefbc50a4414114287b7cec", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -446,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _Iterator>\n-    auto\n+    _GLIBCXX20_CONSTEXPR auto\n     __niter_base(reverse_iterator<_Iterator> __it)\n     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))\n     { return __make_reverse_iterator(__niter_base(__it.base())); }\n@@ -457,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   template<typename _Iterator>\n-    auto\n+    _GLIBCXX20_CONSTEXPR auto\n     __miter_base(reverse_iterator<_Iterator> __it)\n     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))\n     { return __make_reverse_iterator(__miter_base(__it.base())); }"}, {"sha": "31eff9e8e1df20d5d35dd9cb1528aa8cbf60ced0", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -248,16 +248,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n   template<typename _Tp, std::size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one == __two); }\n \n   template<typename _Tp, std::size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n     {\n@@ -266,16 +269,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template<typename _Tp, std::size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return __two < __one; }\n \n   template<typename _Tp, std::size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one > __two); }\n \n   template<typename _Tp, std::size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one < __two); }\n@@ -289,6 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value\n     >::type\n #else\n+    _GLIBCXX20_CONSTEXPR\n     void\n #endif\n     swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)"}, {"sha": "5f496f68ded29fed4c3f64ed7d9d442881f04506", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -280,11 +280,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_exchange_function 201304\n \n+#if __cplusplus > 201703L\n+#  define __cpp_lib_constexpr_algorithms 201711L\n+#endif\n+\n   /// Assign @p __new_val to @p __obj and return its previous value.\n   template <typename _Tp, typename _Up = _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline _Tp\n     exchange(_Tp& __obj, _Up&& __new_val)\n     { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }\n+\n #endif\n \n   // Stores a tuple of indices.  Used by tuple and pair, and by bind() to"}, {"sha": "bf15a0e8542a9a01cdf2f1f811ebd54be26fb7d2", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -164,6 +164,7 @@\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_math_constants 201907L\n+#define __cpp_lib_constexpr_algorithms 201711L\n #endif // C++2a\n #endif // C++17\n #endif // C++14"}, {"sha": "38edfaadec228334e10b6d11aef92bbe46bba89a", "filename": "libstdc++-v3/testsuite/20_util/exchange/constexpr.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexchange%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexchange%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexchange%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+constexpr bool\n+test()\n+{\n+  constexpr double e_v = 2.71828182846;\n+  double e = e_v;\n+  constexpr double pi_v = 3.14159265359;\n+  const auto x = std::exchange(e, pi_v);\n+\n+  return x == e_v && e == pi_v;\n+}\n+\n+static_assert(test());"}, {"sha": "8655a9bede2d713138272b4b6b36e6ce9431561a", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/constexpr.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+//\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+constexpr std::array<int, 3> a1{{1, 2, 3}};\n+constexpr std::array<int, 3> a2{{4, 5, 6}};\n+constexpr std::array<int, 3> a3{{1, 2, 4}};\n+constexpr std::array<int, 3> a4{{1, 3, 3}};\n+\n+static_assert(a1 == a1);\n+static_assert(a1 != a2);\n+static_assert(a1 < a3);\n+static_assert(a4 > a1);\n+static_assert(a1 <= a3);\n+static_assert(a4 >= a1);"}, {"sha": "2ae8a5edc67326a1edcc5413cab94bbae071a97a", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 309 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 318 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 326 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 316 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 325 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 333 }"}, {"sha": "5de55fc31948e3d5e3fc409f4bf17979d9c7cd99", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 365 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 372 }"}, {"sha": "e62f43cc325777e3a15749c3205aa3fd7fe3c1f5", "filename": "libstdc++-v3/testsuite/25_algorithms/adjacent_find/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> car{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+\n+constexpr auto out0x = std::adjacent_find(car.begin(), car.end());\n+\n+constexpr auto out1x = std::adjacent_find(car.begin(), car.end(),\n+\t\t\t\t\t  std::equal_to<int>());\n+\n+constexpr bool\n+test()\n+{\n+  return out0x == car.begin() + 6 && out1x == car.begin() + 6;\n+}\n+\n+static_assert(test());"}, {"sha": "e3d187ca3902326dc71b4d15e701d54dd49f64d9", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 6> cae{{0, 2, 4, 6, 8, 10}};\n+\n+constexpr auto out2 = std::all_of(cae.begin(), cae.end(),\n+\t\t\t          [](int i){ return i % 2 == 0; });\n+\n+constexpr bool\n+test()\n+{\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "0ff427cbc82d7cdfcb884b3f1cfa1f7da8ad1d84", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto out3 = std::any_of(ca0.begin(), ca0.end(),\n+\t\t\t        [](int i){ return i % 2 == 0; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "aaa411275aadcf890e46b6ac1b58e040072b1a9f", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto out4 = std::binary_search(ca0.begin(), ca0.end(), 5);\n+\n+  const auto out5 = std::binary_search(ca0.begin(), ca0.end(), 5,\n+\t\t\t\t       std::equal_to<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "07808eed0420b74c8fe038ebaaf8c050fe578bc5", "filename": "libstdc++-v3/testsuite/25_algorithms/constexpr_macro.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fconstexpr_macro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fconstexpr_macro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fconstexpr_macro.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing in <version>\"\n+#elif __cpp_lib_constexpr_algorithms != 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value in <version>\"\n+#endif"}, {"sha": "826a35f7599a3a15e19b7fcac7207ee689626e45", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/58982.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F58982.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -36,6 +36,7 @@ void\n test01(T* result)\n {\n   T t[1];\n-  std::copy(t, t+1, result); // { dg-error \"here\" }\n+  std::copy(t, t+1, result); // { dg-error \"here|deleted\" }\n }\n // { dg-prune-output \"not assignable\" }\n+// { dg-prune-output \"use of deleted\" }"}, {"sha": "9a4aa25bb7a7f0db02a20db92e43d25e721c1f85", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  const auto out6 = std::copy(ca0.begin(), ca0.begin() + 8, ma0.begin() + 2);\n+\n+  return out6 == ma0.begin() + 10;\n+}\n+\n+static_assert(test());"}, {"sha": "293927d5e5f96dad28881aebc12942e744dfc528", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/move_iterators/69478.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F69478.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F69478.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F69478.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -37,3 +37,4 @@ test01()\n   trivial_rvalstruct a[1], b[1];\n   copy(std::make_move_iterator(a), std::make_move_iterator(a + 1), b);\n }\n+// { dg-prune-output \"use of deleted\" }"}, {"sha": "25cf97f62d7c9d6e2685dc12ecaa1bcd479d998f", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+  const auto out7 = std::copy_backward(ca0.begin(), ca0.begin() + 8,\n+\t\t\t\t       ma0.begin() + 10);\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "84d6793268478a2d5cdf5a1ce4b6e4901daba4fb", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/move_iterators/69478.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F69478.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F69478.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F69478.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -37,3 +37,4 @@ test01()\n   trivial_rvalstruct a[1], b[1];\n   copy_backward(std::make_move_iterator(a), std::make_move_iterator(a+1), b);\n }\n+// { dg-prune-output \"use of deleted\" }"}, {"sha": "59deacfbbccd1f7da006af17d86fd763d29d79b6", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_if/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+  const auto out1 = std::copy_if(ca0.begin(), ca0.end(), ma0.begin(),\n+\t\t\t\t [](int i){ return i % 2 == 1; });\n+\n+  return out1 == ma0.begin() + 6;\n+}\n+\n+static_assert(test());"}, {"sha": "bd08be4d201f95cba741783dba4705a0cd20d347", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/58982.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F58982.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -36,6 +36,7 @@ void\n test01(T* result)\n {\n   T t[1];\n-  std::copy_n(t, 1, result); // { dg-error \"here\" }\n+  std::copy_n(t, 1, result); // { dg-error \"here|deleted\" }\n }\n // { dg-prune-output \"not assignable\" }\n+// { dg-prune-output \"use of deleted\" }"}, {"sha": "72bc1e6e3f6472f3d7d5a317e559e6d46dfc9e2e", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+  std::copy_n(ca0.begin(), 12, ma0.begin());\n+\n+  return ma0[3] == ca0[3];\n+}\n+\n+static_assert(test());"}, {"sha": "d7cd56de04ccbc27a03fcb32710c7d61fe328a8a", "filename": "libstdc++-v3/testsuite/25_algorithms/count/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto out8 = std::count(ca0.begin(), ca0.end(), 6);\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "2a1c7d002ee9dceedf7200bbe3a7b72f263c4b05", "filename": "libstdc++-v3/testsuite/25_algorithms/count_if/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+constexpr auto out9 = std::count_if(ca0.begin(), ca0.end(),\n+\t\t\t\t    [](int i){ return i % 2 == 0; });\n+\n+constexpr bool\n+test()\n+{\n+  return out9 == 6;\n+}\n+\n+static_assert(test());"}, {"sha": "a95704dbb150e6a6eb5adcad9c83fac78e3aa8d2", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/constexpr.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> ca1{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+\n+  const auto outa = std::equal(ca0.begin(), ca0.end(), ca1.begin());\n+\n+  const auto outb = std::equal(ca0.begin(), ca0.end(), cas.begin(),\n+\t\t\t       [](int i, int j){ return i + 3 == j; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "2d570964405a82ac589c04232c30d8ec4f88071f", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> car{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+\n+  const auto outc = std::equal_range(car.begin(), car.end(), 6);\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "31e3568dde363fc5eeede9bb29fcef5cc8a996bc", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/constexpr.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+  std::fill(ma0.begin(), ma0.end(), 66);\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "a2011912805275bdad482cfeac8645fe60689aa7", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  const auto outd = std::fill_n(ma0.begin(), 6, 77);\n+\n+  return outd == ma0.begin() + 6;\n+}\n+\n+static_assert(test());"}, {"sha": "7d59de22833369a0a8f29d040522a3b99fb9fe69", "filename": "libstdc++-v3/testsuite/25_algorithms/find/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+\n+constexpr auto oute = std::find(ca0.begin(), ca0.end(), 5);\n+\n+constexpr bool\n+test()\n+{\n+  return oute == ca0.begin() + 5;\n+}\n+\n+static_assert(test());"}, {"sha": "88d6cc7c0d139dd6f77fbb41ff42a9816bb7098a", "filename": "libstdc++-v3/testsuite/25_algorithms/find_end/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 3> cam{{4, 5, 6}};\n+  constexpr std::array<int, 3> camm{{-4, -5, -6}};\n+\n+  const auto outf = std::find_end(ca0.begin(), ca0.end(),\n+\t\t\t\t  cam.begin(), cam.end());\n+\n+  const auto outg = std::find_end(ca0.begin(), ca0.end(),\n+\t\t\t\t  camm.begin(), camm.end(),\n+\t\t\t\t  [](int i, int j){ return i + 1 == -j; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "99cbed28297fdf8a4fb0f37beeb60d32de1eaa87", "filename": "libstdc++-v3/testsuite/25_algorithms/find_first_of/constexpr.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6,  7,  8,  9, 10, 11}};\n+constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+\n+constexpr auto outh = std::find_first_of(ca0.begin(), ca0.end(),\n+\t\t\t\t\t cas.begin(), cas.end());\n+\n+constexpr auto outi = std::find_first_of(ca0.begin(), ca0.end(),\n+\t\t\t\t\t cas.begin(), cas.end(),\n+\t\t\t\t\t[](int i, int j){ return i + 1 == j; });\n+\n+constexpr bool\n+test()\n+{\n+  return outh == ca0.begin() + 3 && outi == ca0.begin() + 2;\n+}\n+\n+static_assert(test());"}, {"sha": "395a21e9b36959dff5efc0f2a4c81ac79e980a17", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+\n+  const auto outj = std::find_if(ca0.begin(), ca0.end(),\n+\t\t\t\t [](int i){ return i == 6; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "5b1b9c3ad46f58931ddddeb255747e5734f2432b", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+constexpr auto outk = std::find_if_not(ca0.begin(), ca0.end(),\n+\t\t\t\t       [](int i){ return i <= 6; });\n+\n+constexpr bool\n+test()\n+{\n+  return outk == ca0.begin() + 7;\n+}\n+\n+static_assert(test());"}, {"sha": "d900ef43a4416f26ab5706f7f8579565d3df6a01", "filename": "libstdc++-v3/testsuite/25_algorithms/for_each/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+constexpr bool\n+test()\n+{\n+  int tot = 0;\n+  auto sum = [&total = tot](int i){ total += i; };\n+  auto sum2 = std::for_each(ca0.begin(), ca0.end(), sum);\n+\n+  return tot == 66;\n+}\n+\n+static_assert(test());"}, {"sha": "b0e26b69d91fc93ba4c68902c8b6b26e8a393fb0", "filename": "libstdc++-v3/testsuite/25_algorithms/generate/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  std::generate(ma0.begin(), ma0.begin() + 6, [](){ return 42; });\n+\n+  return ma0[5] == 42;\n+}\n+\n+static_assert(test());"}, {"sha": "f2a203e9c76b4c0390443569b18871a347e81ce0", "filename": "libstdc++-v3/testsuite/25_algorithms/generate_n/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  const auto outl = std::generate_n(ma0.begin(), 6, [](){ return 42; });\n+\n+  return outl == ma0.begin() + 6;\n+}\n+\n+static_assert(test());"}, {"sha": "d3b3540deb4e0cc19a08a4d9fdca650a84825895", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -23,115 +23,142 @@ namespace std\n  {\n   // 25.1, non-modifying sequence operations:\n   template<typename _IIter, typename _Funct>\n+    _GLIBCXX20_CONSTEXPR\n     _Funct \n     for_each(_IIter, _IIter, _Funct);\n \n   template<typename _IIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _IIter \n     find(_IIter, _IIter, const _Tp&);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _IIter\n     find_if(_IIter, _IIter, _Predicate);\n \n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     all_of(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     any_of(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     none_of(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _IIter\n     find_if_not(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     is_partitioned(_IIter, _IIter, _Predicate);\n \n   template<typename _FIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter\n     partition_point(_FIter, _FIter, _Predicate);\n #endif\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_end(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1\n     find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     adjacent_find(_FIter, _FIter);\n \n   template<typename _FIter, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     adjacent_find(_FIter, _FIter, _BinaryPredicate);\n \n   template<typename _IIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     typename iterator_traits<_IIter>::difference_type\n     count(_IIter, _IIter, const _Tp&);\n \n   template<typename _IIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     typename iterator_traits<_IIter>::difference_type\n     count_if(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_IIter1, _IIter2>\n     mismatch(_IIter1, _IIter1, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_IIter1, _IIter2>\n     mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     equal(_IIter1, _IIter1, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1 \n     search(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter1 \n     search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     search_n(_FIter, _FIter, _Size, const _Tp&);\n \n   template<typename _FIter, typename _Size, typename _Tp, \n \t   typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);\n \n   // 25.2, modifying sequence operations:\n   // 25.2.1, copy:\n   template<typename _IIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     copy(_IIter, _IIter, _OIter);\n \n   template<typename _BIter1, typename _BIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _BIter2\n     copy_backward (_BIter1, _BIter1, _BIter2);\n \n@@ -159,90 +186,111 @@ namespace std\n     iter_swap(_FIter1, _FIter2 b);\n \n   template<typename _IIter, typename _OIter, typename _UnaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     transform(_IIter, _IIter, _OIter, _UnaryOperation op);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter, \n \t   typename _BinaryOperation>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     replace(_FIter, _FIter, const _Tp&, const _Tp&);\n \n   template<typename _FIter, typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     replace_if(_FIter, _FIter, _Predicate, const _Tp&);\n \n   template<typename _IIter, typename _OIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);\n \n   template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     fill(_FIter, _FIter, const _Tp&);\n \n   template<typename _OIter, typename _Size, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     fill_n(_OIter, _Size n, const _Tp&);\n \n   template<typename _FIter, typename _Generator>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     generate(_FIter, _FIter, _Generator);\n \n   template<typename _OIter, typename _Size, typename _Generator>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     generate_n(_OIter, _Size, _Generator);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     remove(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     remove_if(_FIter, _FIter, _Predicate);\n \n   template<typename _IIter, typename _OIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     remove_copy(_IIter, _IIter, _OIter, const _Tp&);\n \n   template<typename _IIter, typename _OIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     remove_copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n #if __cplusplus >= 201103L\n   template<typename _IIter, typename _OIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n   template<typename _IIter, typename _Size, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     copy_n(_IIter, _Size, _OIter);\n \n   template<typename _IIter, typename _OIter1,\n \t   typename _OIter2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_OIter1, _OIter2>\n     partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);\n #endif\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     unique(_FIter, _FIter);\n \n   template<typename _FIter, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     unique(_FIter, _FIter, _BinaryPredicate);\n \n   template<typename _IIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     unique_copy(_IIter, _IIter, _OIter);\n \n   template<typename _IIter, typename _OIter, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n \n@@ -251,6 +299,7 @@ namespace std\n     reverse(_BIter, _BIter);\n \n   template<typename _BIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     reverse_copy(_BIter, _BIter, _OIter);\n \n@@ -259,6 +308,7 @@ namespace std\n     rotate(_FIter, _FIter, _FIter);\n \n   template<typename _FIter, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     rotate_copy (_FIter, _FIter, _FIter, _OIter);\n \n@@ -323,44 +373,54 @@ namespace std\n \n   // 25.3.3, binary search:\n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     lower_bound(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     lower_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     upper_bound(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     upper_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_FIter, _FIter>\n     equal_range(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     pair<_FIter, _FIter>\n     equal_range(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _FIter, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     binary_search(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     binary_search(_FIter, _FIter, const _Tp&, _Compare);\n \n   // 25.3.4, merge:\n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter, \n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n@@ -374,46 +434,56 @@ namespace std\n \n   // 25.3.5, set operations:\n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     includes(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter, \n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter \n     set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter, \n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _OIter\n     set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, \n \t\t\t     _OIter, _Compare);\n@@ -453,34 +523,42 @@ namespace std\n \n #if __cplusplus >= 201103L\n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     is_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     is_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter \n     is_heap_until(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter \n     is_heap_until(_RAIter, _RAIter, _Compare);\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     is_sorted(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     is_sorted(_FIter, _FIter, _Compare);\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     is_sorted_until(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter \n     is_sorted_until(_FIter, _FIter, _Compare);\n #endif\n@@ -579,10 +657,12 @@ namespace std\n #endif\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n "}, {"sha": "5f25a304405522899f117fcd10f62f455662d534", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+// heap\n+constexpr std::array<int, 23>\n+ah{{22,\n+    21, 20,\n+    17, 16, 19, 18,\n+    11, 10, 9, 8, 15, 14, 13, 12, 3, 2, 1, 0, 7, 6, 5, 4}};\n+\n+constexpr auto outo = std::is_heap(ah.begin(), ah.end());\n+\n+constexpr auto outp = std::is_heap(ah.begin(), ah.end(), std::less<int>());\n+\n+constexpr bool\n+test()\n+{\n+  return outo && outp;\n+}\n+\n+static_assert(test());"}, {"sha": "ddd4cdd10dc33749631edc68fdb29bdf47692e83", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap_until/constexpr.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+// heap\n+constexpr std::array<int, 23>\n+ahu{{22,\n+     21, 20,\n+     17, 16, 19, 18,//v\n+     11, 10,  9,  8, 23, 14, 13, 12, 3, 2, 1, 0, 7, 6, 5, 4}};\n+\n+constexpr auto outq = std::is_heap_until(ahu.begin(), ahu.end());\n+\n+constexpr auto outr = std::is_heap_until(ahu.begin(), ahu.end(),\n+\t\t\t\t\t std::less<int>());\n+\n+constexpr bool\n+test()\n+{\n+  return outq == ahu.begin() + 11 && outr == ahu.begin() + 11;\n+}\n+\n+static_assert(test());"}, {"sha": "527746f56f3cf80e1f24d72ba3e4ed5dfa102f93", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> caeo{{0, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9, 11}};\n+\n+  const auto outs = std::is_partitioned(caeo.begin(), caeo.end(),\n+\t\t\t\t\t[](int i){ return i % 2 == 0; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "3f5df35aaaacc83b1bf14ca497fa0b89cbdbfce0", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cap{{2, 1, 3, 6, 7, 5, 4, 8, 10, 9, 0, 11}};\n+\n+  const auto outt = std::is_permutation(ca0.begin(), ca0.end(), cap.begin());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "623d72c1a5934ccc939554f30fa7dc18f9fa7d85", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+constexpr auto outv = std::is_sorted(ca0.begin(), ca0.end());\n+\n+constexpr auto outw = std::is_sorted(ca0.begin(), ca0.end(),\n+\t\t\t\t     std::equal_to<int>());\n+\n+constexpr bool\n+test()\n+{\n+  return outv && outw;\n+}\n+\n+static_assert(test());"}, {"sha": "f109ee8ef10797324e0fa59ff5ad604b4837b5e7", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted_until/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> aus{{0, 1, 2, 3, 4, 5, 66, 7, 8, 9, 10, 11}};\n+\n+  const auto outx = std::is_sorted_until(aus.begin(), aus.end());\n+\n+  const auto outy = std::is_sorted_until(aus.begin(), aus.end(),\n+\t\t\t\t\t std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "93dee5d2f946deb71a646d555d53d48b99de3303", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/constexpr.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> ca1{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outz = !std::lexicographical_compare(ca0.begin(), ca0.end(),\n+\t\t\t\t\t\t  ca1.begin(), ca1.end());\n+\n+  const auto outaa = !std::lexicographical_compare(ca0.begin(), ca0.end(),\n+\t\t\t\t\t\t   ca1.begin(), ca1.end(),\n+\t\t\t\t\t\t   std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "f8c191b09703bfe62af6618bc8d8318490b6fd24", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outbb = std::lower_bound(ca0.begin(), ca0.end(), 6);\n+\n+  const auto outcc = std::lower_bound(ca0.begin(), ca0.end(), 6,\n+\t\t\t\t      std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "e240e4453fd240dd71855e14f2cb7a3d3f7ab0a2", "filename": "libstdc++-v3/testsuite/25_algorithms/merge/constexpr.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+  constexpr std::array<int, 3> camm{{-4, -5, -6}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outdd = std::merge(ca0.begin(), ca0.end(),\n+\t\t\t\tcas.begin(), cas.end(), out0.begin());\n+\n+  const auto outee = std::merge(ca0.begin(), ca0.end(),\n+\t\t\t\tcamm.begin(), camm.end(), out0.begin(),\n+\t\t\t\t[](int i, int j){ return i < -j; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "946199b0b7c47be78f4f9896cf034925e95fe8f8", "filename": "libstdc++-v3/testsuite/25_algorithms/mismatch/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 12> cax{{0, 1, 2, 3, 4, 5, 66, 7, 8, 99, 10, 11}};\n+\n+  const auto outff = std::mismatch(ca0.begin(), ca0.end(), cax.begin());\n+\n+  const auto outgg = std::mismatch(ca0.begin(), ca0.end(), cax.begin(),\n+\t\t\t\t   std::equal_to<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "c7f9f8899935b9a8fd814d4bc61b3ea8f62c076b", "filename": "libstdc++-v3/testsuite/25_algorithms/move/69478.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F69478.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F69478.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F69478.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -37,3 +37,4 @@ test01()\n   trivial_rvalstruct a[1], b[1];\n   std::move(a, a + 1, b);\n }\n+// { dg-prune-output \"use of deleted\" }"}, {"sha": "3a6e465f02049ea6d756bf686999ae5b75621443", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/69478.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F69478.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F69478.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F69478.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -37,3 +37,4 @@ test01()\n   trivial_rvalstruct a[1], b[1];\n   std::move_backward(a, a + 1, b);\n }\n+// { dg-prune-output \"use of deleted\" }"}, {"sha": "2d02adaec525facf7664a7830af59f388e9527a3", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outhh = std::none_of(ca0.begin(), ca0.end(),\n+\t\t\t\t  [](int i){ return i > 12; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "11c42ee77a59ea12cf59f27f1e124e3c0ffb3bd7", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+  std::array<int, 24> out1{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outii = std::partition_copy(ca0.begin(), ca0.end(),\n+\t\t\t\t\t out0.begin(), out1.begin(),\n+\t\t\t\t\t [](int i){ return i % 2 == 0; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "4ba82842362d6c6ab633144bd790f505adbc9fec", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> caeo{{0, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9, 11}};\n+\n+constexpr bool\n+test()\n+{\n+  const auto outjj = std::partition_point(caeo.begin(), caeo.end(),\n+\t\t\t\t\t  [](int i){ return i % 2 == 0; });\n+\n+  return outjj == caeo.begin() + 6;\n+}\n+\n+static_assert(test());"}, {"sha": "580ac10c75c8b5fd5b38831a713baaafc5a0ec4c", "filename": "libstdc++-v3/testsuite/25_algorithms/remove/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ar4{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outkk = std::remove(ar4.begin(), ar4.end(), 7);\n+\n+  return outkk == ar4.begin() + 11;\n+}\n+\n+static_assert(test());"}, {"sha": "a20e5290e5b35c95d6fc19bfbad1a4720d730cef", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outmm = std::remove_copy(ca0.begin(), ca0.end(), out0.begin(), 6);\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "0758d1014512e83b7c9ac20d2eeda5cdebb366b3", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy_if/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outnn = std::remove_copy_if(ca0.begin(), ca0.end(), out0.begin(),\n+\t\t\t\t\t [](int i){ return i == 7; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "e8c00484c02a3699056deeee57233ada54ab0ed6", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ac2{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outll = std::remove_if(ac2.begin(), ac2.end(),\n+\t\t\t\t    [](int i){ return i == 7; });\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "754b879974064d052d6d001f4c617401daf654a3", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8,  9, 10, 11}};\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outoo = std::replace_copy(ca0.begin(), ca0.end(),\n+\t\t\t\t       out0.begin(), 6, 66);\n+\n+  return outoo == out0.begin() + (ca0.end() - ca0.begin());\n+}\n+\n+static_assert(test());"}, {"sha": "1fa6bb023bb4d9efc075708ea32cfdb7f81f3315", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy_if/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+constexpr bool\n+test()\n+{\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outpp = std::replace_copy_if(ca0.begin(), ca0.end(),\n+\t\t\t\t\t  out0.begin(),\n+\t\t\t\t\t  [](int i){ return i < 6; }, 66);\n+\n+  return outpp == out0.begin() + (ca0.end() - ca0.begin());\n+}\n+\n+static_assert(test());"}, {"sha": "1dc28e1ddad7af808a850a3f581adaaf46cdcfd7", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_if/constexpr.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+\n+  std::replace_if(ar0.begin(), ar0.end(), [](int i){ return i % 2 == 1; }, 42);\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "224010914657a35f2c3f022443cdb5d292117de1", "filename": "libstdc++-v3/testsuite/25_algorithms/reverse_copy/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse_copy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outqq = std::reverse_copy(ca0.rbegin(), ca0.rend(), out0.begin());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "63bca002144baf1910d61ddcb7b5c5f029a4257d", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate_copy/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate_copy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outrr = std::rotate_copy(ca0.begin(), ca0.begin() + 6,\n+\t\t\t\t      ca0.end(), out0.begin());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "a611c1c858423a92c683ddf43e56403f084a6d4d", "filename": "libstdc++-v3/testsuite/25_algorithms/search/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 3> cam{{4, 5, 6}};\n+\n+  const auto outtt = std::search(ca0.begin(), ca0.end(),\n+\t\t\t\t cam.begin(), cam.end(),\n+\t\t\t\t std::equal_to<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "ac339202cc67af72bb1c5f58849ac745388ce1cb", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> car{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+\n+constexpr auto outuu = std::search_n(car.begin(), car.end(), 2, 6);\n+\n+constexpr auto outuv = std::search_n(car.begin(), car.end(), 2, 9,\n+\t\t\t\t     [](int i, int j){ return i == j; });\n+\n+constexpr bool\n+test()\n+{\n+  return outuu == car.begin() + 6 && outuv == car.begin() + 9 ;\n+}\n+\n+static_assert(test());"}, {"sha": "ff913eaffeb52a8790abc3bc0f73e3aa6d4cf8cc", "filename": "libstdc++-v3/testsuite/25_algorithms/set_difference/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outvv = std::set_difference(ca0.begin(), ca0.end(),\n+\t\t\t\t\t cas.begin(), cas.end(), out0.begin());\n+\n+  const auto outww = std::set_difference(ca0.begin(), ca0.end(),\n+\t\t\t\t         cas.begin(), cas.end(),\n+\t\t\t\t         out0.begin(), std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "f1a95a2983202ac5cbec7cc3cd53e43ef0dd603f", "filename": "libstdc++-v3/testsuite/25_algorithms/set_intersection/constexpr.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outxx = std::set_intersection(ca0.begin(), ca0.end(),\n+\t\t\t\t\t   cas.begin(), cas.end(),\n+\t\t\t\t\t   out0.begin());\n+\n+  const auto outyy = std::set_intersection(ca0.begin(), ca0.end(),\n+\t\t\t\t\t   cas.begin(), cas.end(),\n+\t\t\t\t\t   out0.begin(), std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "ff913eaffeb52a8790abc3bc0f73e3aa6d4cf8cc", "filename": "libstdc++-v3/testsuite/25_algorithms/set_symmetric_difference/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto outvv = std::set_difference(ca0.begin(), ca0.end(),\n+\t\t\t\t\t cas.begin(), cas.end(), out0.begin());\n+\n+  const auto outww = std::set_difference(ca0.begin(), ca0.end(),\n+\t\t\t\t         cas.begin(), cas.end(),\n+\t\t\t\t         out0.begin(), std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "61d3f1e62a2d1905bc9a3486ceda89910024aaa4", "filename": "libstdc++-v3/testsuite/25_algorithms/set_union/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto out11 = std::set_union(ca0.begin(), ca0.end(),\n+\t\t\t\t    cas.begin(), cas.end(), out0.begin());\n+\n+  const auto out22 = std::set_union(ca0.begin(), ca0.end(),\n+\t\t\t\t    cas.begin(), cas.end(),\n+\t\t\t\t    out0.begin(), std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "03c6d71db42523f4b1e6dd9d01486ca5d29c2803", "filename": "libstdc++-v3/testsuite/25_algorithms/transform/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+constexpr bool\n+test()\n+{\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto out99 = std::transform(ca0.begin(), ca0.end(), out0.begin(),\n+\t\t\t\t    [del = 6](int i){ return i + del; });\n+\n+  const auto out11 = std::transform(ca0.begin(), ca0.end(), ca0.begin(),\n+\t\t\t\t    out0.begin(),\n+\t\t\t\t    [](int i, int j){ return i + j; });\n+\n+  return out99 == out0.begin() + (ca0.end() - ca0.begin())\n+      && out11 == out0.begin() + (ca0.end() - ca0.begin());\n+}\n+\n+static_assert(test());"}, {"sha": "f90aaac0d99e5d44dd6c20d624b989348ba9b398", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ar1{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+  std::array<int, 12> ar2{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+\n+  const auto out33 = std::unique(ar1.begin(), ar1.end());\n+\n+  const auto out44 = std::unique(ar2.begin(), ar2.end(), std::equal_to<int>());\n+\n+  return out33 == ar1.begin() + 10 && out44 == ar2.begin() + 10;\n+}\n+\n+static_assert(test());"}, {"sha": "f13f38856989094a601c6aa902ce234458a19ce2", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  std::array<int, 12> ar3{{0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 11}};\n+  std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n+\n+  const auto out55 = std::unique_copy(ar3.begin(), ar3.end(), out0.begin());\n+\n+  const auto out66 = std::unique_copy(ar3.begin(), ar3.end(), out0.begin(),\n+\t\t\t\t      std::equal_to<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}, {"sha": "a0a8e25dc081d3f1e37186b70faa261ce526dfff", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/constexpr.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a66e68ad92f7b4150e35e20e2bb22f777837b63/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fconstexpr.cc?ref=3a66e68ad92f7b4150e35e20e2bb22f777837b63", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_algorithms\n+# error \"Feature-test macro for constexpr algorithms missing\"\n+#elif __cpp_lib_constexpr_algorithms < 201711L\n+# error \"Feature-test macro for constexpr algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+\n+  const auto out77 = std::upper_bound(ca0.begin(), ca0.end(), 6);\n+\n+  const auto out88 = std::upper_bound(ca0.begin(), ca0.end(), 6,\n+\t\t\t\t      std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test());"}]}