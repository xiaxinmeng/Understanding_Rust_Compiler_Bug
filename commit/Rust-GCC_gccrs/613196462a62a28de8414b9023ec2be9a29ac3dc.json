{"sha": "613196462a62a28de8414b9023ec2be9a29ac3dc", "node_id": "C_kwDOANBUbNoAKDYxMzE5NjQ2MmE2MmEyOGRlODQxNGI5MDIzZWMyYmU5YTI5YWMzZGM", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-24T11:17:42Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-08T02:09:55Z"}, "message": "Simplify (_Float16) ceil ((double) x) to .CEIL (x) when available.\n\ngcc/ChangeLog:\n\n\tPR target/102464\n\t* config/i386/i386.c (ix86_optab_supported_p):\n\tReturn true for HFmode.\n\t* match.pd: Simplify (_Float16) ceil ((double) x) to\n\t__builtin_ceilf16 (a) when a is _Float16 type and\n\tdirect_internal_fn_supported_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102464.c: New test.", "tree": {"sha": "78d57aa8ddeb6ac147d6a534a154c9225ff36e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d57aa8ddeb6ac147d6a534a154c9225ff36e43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/613196462a62a28de8414b9023ec2be9a29ac3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613196462a62a28de8414b9023ec2be9a29ac3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613196462a62a28de8414b9023ec2be9a29ac3dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613196462a62a28de8414b9023ec2be9a29ac3dc/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ca2cfcdcccee3c8e8aeaf1d03e9920893d2486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ca2cfcdcccee3c8e8aeaf1d03e9920893d2486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ca2cfcdcccee3c8e8aeaf1d03e9920893d2486"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "7bc1b0507569c06edd187a56ef40373a32390a75", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613196462a62a28de8414b9023ec2be9a29ac3dc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613196462a62a28de8414b9023ec2be9a29ac3dc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=613196462a62a28de8414b9023ec2be9a29ac3dc", "patch": "@@ -23582,20 +23582,24 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n       return opt_type == OPTIMIZE_FOR_SPEED;\n \n     case rint_optab:\n-      if (SSE_FLOAT_MODE_P (mode1)\n-\t  && TARGET_SSE_MATH\n-\t  && !flag_trapping_math\n-\t  && !TARGET_SSE4_1)\n+      if (mode1 == HFmode)\n+\treturn true;\n+      else if (SSE_FLOAT_MODE_P (mode1)\n+\t       && TARGET_SSE_MATH\n+\t       && !flag_trapping_math\n+\t       && !TARGET_SSE4_1)\n \treturn opt_type == OPTIMIZE_FOR_SPEED;\n       return true;\n \n     case floor_optab:\n     case ceil_optab:\n     case btrunc_optab:\n-      if (SSE_FLOAT_MODE_P (mode1)\n-\t  && TARGET_SSE_MATH\n-\t  && !flag_trapping_math\n-\t  && TARGET_SSE4_1)\n+      if (mode1 == HFmode)\n+\treturn true;\n+      else if (SSE_FLOAT_MODE_P (mode1)\n+\t       && TARGET_SSE_MATH\n+\t       && !flag_trapping_math\n+\t       && TARGET_SSE4_1)\n \treturn true;\n       return opt_type == OPTIMIZE_FOR_SPEED;\n "}, {"sha": "9d7c1ac637fca76e4676c7d4315a45ba510e5700", "filename": "gcc/match.pd", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613196462a62a28de8414b9023ec2be9a29ac3dc/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613196462a62a28de8414b9023ec2be9a29ac3dc/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=613196462a62a28de8414b9023ec2be9a29ac3dc", "patch": "@@ -6191,6 +6191,35 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (froms (convert float_value_p@0))\n    (convert (tos @0)))))\n \n+#if GIMPLE\n+(match float16_value_p\n+ @0\n+ (if (TYPE_MAIN_VARIANT (TREE_TYPE (@0)) == float16_type_node)))\n+(for froms (BUILT_IN_TRUNCL BUILT_IN_TRUNC BUILT_IN_TRUNCF\n+\t    BUILT_IN_FLOORL BUILT_IN_FLOOR BUILT_IN_FLOORF\n+\t    BUILT_IN_CEILL BUILT_IN_CEIL BUILT_IN_CEILF\n+\t    BUILT_IN_ROUNDEVENL BUILT_IN_ROUNDEVEN BUILT_IN_ROUNDEVENF\n+\t    BUILT_IN_ROUNDL BUILT_IN_ROUND BUILT_IN_ROUNDF\n+\t    BUILT_IN_NEARBYINTL BUILT_IN_NEARBYINT BUILT_IN_NEARBYINTF\n+\t    BUILT_IN_RINTL BUILT_IN_RINT BUILT_IN_RINTF)\n+     tos (IFN_TRUNC IFN_TRUNC IFN_TRUNC\n+\t  IFN_FLOOR IFN_FLOOR IFN_FLOOR\n+\t  IFN_CEIL IFN_CEIL IFN_CEIL\n+\t  IFN_ROUNDEVEN IFN_ROUNDEVEN IFN_ROUNDEVEN\n+\t  IFN_ROUND IFN_ROUND IFN_ROUND\n+\t  IFN_NEARBYINT IFN_NEARBYINT IFN_NEARBYINT\n+\t  IFN_RINT IFN_RINT IFN_RINT)\n+ /* (_Float16) round ((doube) x) -> __built_in_roundf16 (x), etc.,\n+    if x is a _Float16.  */\n+ (simplify\n+   (convert (froms (convert float16_value_p@0)))\n+     (if (optimize\n+\t  && types_match (type, TREE_TYPE (@0))\n+\t  && direct_internal_fn_supported_p (as_internal_fn (tos),\n+\t\t\t\t\t     type, OPTIMIZE_FOR_BOTH))\n+       (tos @0))))\n+#endif\n+\n (for froms (XFLOORL XCEILL XROUNDL XRINTL)\n      tos (XFLOOR XCEIL XROUND XRINT)\n  /* llfloorl(extend(x)) -> llfloor(x), etc., if x is a double.  */"}, {"sha": "e3e060ee80b2f774d30d68ce0edc49c6e43b64c2", "filename": "gcc/testsuite/gcc.target/i386/pr102464.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613196462a62a28de8414b9023ec2be9a29ac3dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613196462a62a28de8414b9023ec2be9a29ac3dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464.c?ref=613196462a62a28de8414b9023ec2be9a29ac3dc", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/102464.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#define FOO(FUNC,SUFFIX)                       \\\n+  _Float16                                     \\\n+  foo_##FUNC##_##SUFFIX (_Float16 a)           \\\n+  {                                            \\\n+    return __builtin_##FUNC##SUFFIX (a);       \\\n+  }\n+\n+FOO (roundeven, f16);\n+FOO (roundeven, f);\n+FOO (roundeven, );\n+FOO (roundeven, l);\n+FOO (trunc, f16);\n+FOO (trunc, f);\n+FOO (trunc, );\n+FOO (trunc, l);\n+FOO (ceil, f16);\n+FOO (ceil, f);\n+FOO (ceil, );\n+FOO (ceil, l);\n+FOO (floor, f16);\n+FOO (floor, f);\n+FOO (floor, );\n+FOO (floor, l);\n+FOO (nearbyint, f16);\n+FOO (nearbyint, f);\n+FOO (nearbyint, );\n+FOO (nearbyint, l);\n+FOO (rint, f16);\n+FOO (rint, f);\n+FOO (rint, );\n+FOO (rint, l);\n+\n+/* { dg-final { scan-assembler-not \"vcvtsh2s\\[sd\\]\" } } */\n+/* { dg-final { scan-assembler-not \"extendhfxf\" } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[^\\n\\r\\]*xmm\\[0-9\\]\" 24 } } */"}]}