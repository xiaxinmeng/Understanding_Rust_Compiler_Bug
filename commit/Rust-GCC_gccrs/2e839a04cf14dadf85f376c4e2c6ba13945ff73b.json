{"sha": "2e839a04cf14dadf85f376c4e2c6ba13945ff73b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU4MzlhMDRjZjE0ZGFkZjg1ZjM3NmM0ZTJjNmJhMTM5NDVmZjczYg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-03T02:39:18Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-03T02:39:18Z"}, "message": "20020402-3.c: New test.\n\n2002-04-02  David S. Miller  <davem@redhat.com>\n\n\t* gcc.c-torture/execute/20020402-3.c: New test.\n\nFrom-SVN: r51781", "tree": {"sha": "68aca795501a576d4749fa76dbcc23fa71139b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68aca795501a576d4749fa76dbcc23fa71139b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e839a04cf14dadf85f376c4e2c6ba13945ff73b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e839a04cf14dadf85f376c4e2c6ba13945ff73b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e839a04cf14dadf85f376c4e2c6ba13945ff73b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e839a04cf14dadf85f376c4e2c6ba13945ff73b/comments", "author": null, "committer": null, "parents": [{"sha": "1e533e4b01eb29c88d4f8f09a7018eba5560b4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e533e4b01eb29c88d4f8f09a7018eba5560b4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e533e4b01eb29c88d4f8f09a7018eba5560b4f2"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "9d1be4981f64d33fc3decabf546a0af85cf0d24e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e839a04cf14dadf85f376c4e2c6ba13945ff73b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e839a04cf14dadf85f376c4e2c6ba13945ff73b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e839a04cf14dadf85f376c4e2c6ba13945ff73b", "patch": "@@ -1,3 +1,7 @@\n+2002-04-02  David S. Miller  <davem@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020402-3.c: New test.\n+\n 2002-04-03  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* g77.dg/bprob/bprob.exp: Skip for mmix-*-* and cris-*-*."}, {"sha": "eef27409327bb926062390fb40621f7e3ef76074", "filename": "gcc/testsuite/gcc.c-torture/execute/20020402-3.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e839a04cf14dadf85f376c4e2c6ba13945ff73b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020402-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e839a04cf14dadf85f376c4e2c6ba13945ff73b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020402-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020402-3.c?ref=2e839a04cf14dadf85f376c4e2c6ba13945ff73b", "patch": "@@ -0,0 +1,81 @@\n+/* extracted from gdb sources */\n+\n+typedef unsigned long long CORE_ADDR;\n+\n+struct blockvector;\n+\n+struct symtab {\n+  struct blockvector *blockvector;\n+};\n+\n+struct sec {\n+  void *unused;\n+};\n+\n+struct symbol {\n+  int len;\n+  char *name;\n+};\n+\n+struct block {\n+\tCORE_ADDR startaddr, endaddr;\n+\tstruct symbol *function;\n+\tstruct block *superblock;\n+\tunsigned char gcc_compile_flag;\n+\tint nsyms;\n+\tstruct symbol syms[1];\n+};\n+\n+struct blockvector {\n+\tint nblocks;\n+\tstruct block *block[2];\n+};\n+\n+struct blockvector *blockvector_for_pc_sect(register CORE_ADDR pc,\n+\t\t\t\t\t    struct symtab *symtab)\n+{\n+  register struct block *b;\n+  register int bot, top, half;\n+  struct blockvector *bl;\n+\n+  bl = symtab->blockvector;\n+  b = bl->block[0];\n+\n+  bot = 0;\n+  top = bl->nblocks;\n+\n+  while (top - bot > 1)\n+    {\n+      half = (top - bot + 1) >> 1;\n+      b = bl->block[bot + half];\n+      if (b->startaddr <= pc)\n+\tbot += half;\n+      else\n+\ttop = bot + half;\n+    }\n+\n+  while (bot >= 0)\n+    {\n+      b = bl->block[bot];\n+      if (b->endaddr > pc)\n+\t{\n+\t  return bl;\n+\t}\n+      bot--;\n+    }\n+  return 0;\n+}\n+\n+int main(void)\n+{\n+  struct block a = { 0, 0x10000, 0, 0, 1, 20 };\n+  struct block b = { 0x10000, 0x20000, 0, 0, 1, 20 };\n+  struct blockvector bv = { 2, { &a, &b } };\n+  struct symtab s = { &bv };\n+\n+  struct blockvector *ret;\n+\n+  ret = blockvector_for_pc_sect(0x500, &s);\n+\n+  return 0;\n+}"}]}