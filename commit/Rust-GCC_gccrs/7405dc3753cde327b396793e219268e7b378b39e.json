{"sha": "7405dc3753cde327b396793e219268e7b378b39e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwNWRjMzc1M2NkZTMyN2IzOTY3OTNlMjE5MjY4ZTdiMzc4YjM5ZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2000-08-22T19:37:02Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-08-22T19:37:02Z"}, "message": "Before performing any restorative additions...\n\nBefore performing any restorative additions, test for bottom bits of IP being\nset, rather than relying upon the RORs not matching.\n\nFrom-SVN: r35888", "tree": {"sha": "bfe49fe4fce80f6e035c2bd0ad88f607071805bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfe49fe4fce80f6e035c2bd0ad88f607071805bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7405dc3753cde327b396793e219268e7b378b39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7405dc3753cde327b396793e219268e7b378b39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7405dc3753cde327b396793e219268e7b378b39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7405dc3753cde327b396793e219268e7b378b39e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d60eab50e172e80a6bdfbb67da40278e1a7ed5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60eab50e172e80a6bdfbb67da40278e1a7ed5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60eab50e172e80a6bdfbb67da40278e1a7ed5e4"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "5f56c85783e4b4b0fcd9e72f5e62c73cb6d3796d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7405dc3753cde327b396793e219268e7b378b39e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7405dc3753cde327b396793e219268e7b378b39e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7405dc3753cde327b396793e219268e7b378b39e", "patch": "@@ -1,3 +1,10 @@\n+2000-08-22  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/arm/lib1funcs.asm (__umodsi3): Before performing any\n+\trestorative additions, test for bottom bits of IP being set,\n+\trather than relying upon the RORs not matching.\n+\t(__modsi3): Ditto.\n+\n 2000-08-22  David Edelsohn  <edelsohn@gnu.org>\n \n \t* aix.h (ASM_DECLARE_FUNCTION_NAME): Call named_section() or"}, {"sha": "619a4802e495f3c3cac811344d270a495b0db929", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7405dc3753cde327b396793e219268e7b378b39e/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7405dc3753cde327b396793e219268e7b378b39e/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=7405dc3753cde327b396793e219268e7b378b39e", "patch": "@@ -1,7 +1,7 @@\n @ libgcc1 routines for ARM cpu.\n @ Division routines, written by Richard Earnshaw, (rearnsha@armltd.co.uk)\n \n-/* Copyright (C) 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n+/* Copyright 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -238,7 +238,7 @@ Lgot_result:\n \tmov\tr0, result\n \tpop\t{ work }\n \tRET\n-\t\n+\n #else /* ARM version.  */\n \t\n \tcmp\tdivisor, #0\n@@ -294,7 +294,7 @@ Lgot_result:\n \n #endif /* ARM version */\n \n-\tFUNC_END udivsi3\t\n+\tFUNC_END udivsi3\n \n #endif /* L_udivsi3 */\n /* ------------------------------------------------------------------------ */\n@@ -400,16 +400,24 @@ Over6:\n \t@ Any subtractions that we should not have done will be recorded in\n \t@ the top three bits of \"overdone\".  Exactly which were not needed\n \t@ are governed by the position of the bit, stored in ip.\n-\t@ If we terminated early, because dividend became zero,\n-\t@ then none of the below will match, since the bit in ip will not be\n-\t@ in the bottom nibble.\n-\n \tmov\twork, #0xe\n \tlsl\twork, #28\t\n \tand\toverdone, work\n \tbne\tOver7\n \tpop\t{ work }\n \tRET\t\t\t\t\t@ No fixups needed\n+\t\n+\t@ If we terminated early, because dividend became zero, then the \n+\t@ bit in ip will not be in the bottom nibble, and we should not\n+\t@ perform the additions below.  We must test for this though\n+\t@ (rather relying upon the TSTs to prevent the additions) since\n+\t@ the bit in ip could be in the top two bits which might then match\n+\t@ with one of the smaller RORs.\n+\tmov\tcurbit, ip\n+\tmov\twork, #0x7\n+\ttst\tcurbit, work\n+\tbeq\tOver10\n+\t\n Over7:\n \tmov\tcurbit, ip\n \tmov\twork, #3\n@@ -490,10 +498,14 @@ Loop3:\n \t@ Any subtractions that we should not have done will be recorded in\n \t@ the top three bits of \"overdone\".  Exactly which were not needed\n \t@ are governed by the position of the bit, stored in ip.\n-\t@ If we terminated early, because dividend became zero,\n-\t@ then none of the below will match, since the bit in ip will not be\n-\t@ in the bottom nibble.\n \tands\toverdone, overdone, #0xe0000000\n+\t@ If we terminated early, because dividend became zero, then the \n+\t@ bit in ip will not be in the bottom nibble, and we should not\n+\t@ perform the additions below.  We must test for this though\n+\t@ (rather relying upon the TSTs to prevent the additions) since\n+\t@ the bit in ip could be in the top two bits which might then match\n+\t@ with one of the smaller RORs.\n+\ttstNE\tip, #0x7\n \tRETc(eq)\t\t\t\t@ No fixups needed\n \ttst\toverdone, ip, ror #3\n \taddne\tdividend, dividend, divisor, lsr #3\n@@ -503,7 +515,7 @@ Loop3:\n \taddne\tdividend, dividend, divisor, lsr #1\n \tRET\t\n \n-#endif /* arm version */\n+#endif /* ARM version.  */\n \t\n \tFUNC_END umodsi3\n \n@@ -797,14 +809,22 @@ Over7:\n \t@ Any subtractions that we should not have done will be recorded in\n \t@ the top three bits of \"overdone\".  Exactly which were not needed\n \t@ are governed by the position of the bit, stored in ip.\n-\t@ If we terminated early, because dividend became zero,\n-\t@ then none of the below will match, since the bit in ip will not be\n-\t@ in the bottom nibble.\n \tmov\twork, #0xe\n \tlsl\twork, #28\n \tand\toverdone, work\n \tbeq\tLgot_result\n \t\n+\t@ If we terminated early, because dividend became zero, then the \n+\t@ bit in ip will not be in the bottom nibble, and we should not\n+\t@ perform the additions below.  We must test for this though\n+\t@ (rather relying upon the TSTs to prevent the additions) since\n+\t@ the bit in ip could be in the top two bits which might then match\n+\t@ with one of the smaller RORs.\n+\tmov\tcurbit, ip\n+\tmov\twork, #0x7\n+\ttst\tcurbit, work\n+\tbeq\tLgot_result\n+\t\n \tmov\tcurbit, ip\n \tmov\twork, #3\n \tror\tcurbit, work\n@@ -836,7 +856,7 @@ Lgot_result:\n Over10:\n \tpop\t{ work }\n \tRET\t\n-\t\n+\n #else /* ARM version.  */\n \t\n \tmov\tcurbit, #1\n@@ -896,10 +916,14 @@ Loop3:\n \t@ Any subtractions that we should not have done will be recorded in\n \t@ the top three bits of \"overdone\".  Exactly which were not needed\n \t@ are governed by the position of the bit, stored in ip.\n-\t@ If we terminated early, because dividend became zero,\n-\t@ then none of the below will match, since the bit in ip will not be\n-\t@ in the bottom nibble.\n \tands\toverdone, overdone, #0xe0000000\n+\t@ If we terminated early, because dividend became zero, then the \n+\t@ bit in ip will not be in the bottom nibble, and we should not\n+\t@ perform the additions below.  We must test for this though\n+\t@ (rather relying upon the TSTs to prevent the additions) since\n+\t@ the bit in ip could be in the top two bits which might then match\n+\t@ with one of the smaller RORs.\n+\ttstNE\tip, #0x7\n \tbeq\tLgot_result\n \ttst\toverdone, ip, ror #3\n \taddne\tdividend, dividend, divisor, lsr #3\n@@ -912,7 +936,7 @@ Lgot_result:\n \tcmp\tip, #0\n \trsbmi\tdividend, dividend, #0\n \tRET\t\n-\t\n+\n #endif /* ARM version */\n \t\n \tFUNC_END modsi3\n@@ -921,9 +945,9 @@ Lgot_result:\n /* ------------------------------------------------------------------------ */\n #ifdef L_dvmd_tls\n \n-\tFUNC_START div0\t\n+\tFUNC_START div0\n \n-\tRET\t\n+\tRET\n \n \tSIZE\t(__div0)\n \t\n@@ -936,7 +960,7 @@ Lgot_result:\n \t\n #define SIGFPE\t8\t\t\t@ cant use <asm/signal.h> as it\n \t\t\t\t\t@ contains too much C rubbish\n-\tFUNC_START div0\t\n+\tFUNC_START div0\n \n \tstmfd\tsp!, {r1, lr}\n \tswi\t__NR_getpid\n@@ -950,7 +974,7 @@ Lgot_result:\n #else\n \tldmfd\tsp!, {r1, pc}RETCOND\n #endif\n-\t\n+\n \tSIZE \t(__div0)\n \t\n #endif /* L_dvmd_lnx */\n@@ -973,7 +997,7 @@ Lgot_result:\n \t.text\n \t.align 0\n         .force_thumb\n-\t\n+\n .macro call_via register\n \tTHUMB_FUNC_START _call_via_\\register\n \n@@ -1005,7 +1029,7 @@ Lgot_result:\n    is the arm v3 architecture.  (This is one of the multilib\n    options).  */\n #if defined L_interwork_call_via_rX && ! defined __ARM_ARCH_3__\n-\t\n+\n /* These labels & instructions are used by the Arm/Thumb interworking code,\n    when the target address is in an unknown instruction set.  The address \n    of function to be called is loaded into a register and then one of these"}]}