{"sha": "6d0da573d22e446f7740f6340131b11f605715bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwZGE1NzNkMjJlNDQ2Zjc3NDBmNjM0MDEzMWIxMWY2MDU3MTViYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-05-04T11:03:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-05-04T11:03:54Z"}, "message": "Fix previous commit\n\nFrom-SVN: r247589", "tree": {"sha": "4a444f705bbe057e910954cf70e88d13f5d58c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a444f705bbe057e910954cf70e88d13f5d58c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0da573d22e446f7740f6340131b11f605715bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0da573d22e446f7740f6340131b11f605715bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0da573d22e446f7740f6340131b11f605715bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0da573d22e446f7740f6340131b11f605715bc/comments", "author": null, "committer": null, "parents": [{"sha": "446163e239056462095abb2998bf7cc21edb4532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446163e239056462095abb2998bf7cc21edb4532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446163e239056462095abb2998bf7cc21edb4532"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "6bfd86a07af4b93b157d1c2f36a4e9a50272b652", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0da573d22e446f7740f6340131b11f605715bc/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0da573d22e446f7740f6340131b11f605715bc/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6d0da573d22e446f7740f6340131b11f605715bc", "patch": "@@ -2590,7 +2590,7 @@ mips_stack_address_p (rtx x, machine_mode mode)\n \n   return (mips_classify_address (&addr, x, mode, false)\n \t  && addr.type == ADDRESS_REG\n-\t  && rtx_equal_p (addr.reg, stack_pointer_rtx));\n+\t  && addr.reg == stack_pointer_rtx);\n }\n \n /* Return true if ADDR matches the pattern for the LWXS load scaled indexed\n@@ -6098,9 +6098,7 @@ mips_function_arg_boundary (machine_mode mode, const_tree type)\n {\n   unsigned int alignment;\n \n-  alignment = type && mode == BLKmode\n-\t      ? TYPE_ALIGN (TYPE_MAIN_VARIANT (type))\n-\t      : GET_MODE_ALIGNMENT (mode);\n+  alignment = type ? TYPE_ALIGN (type) : GET_MODE_ALIGNMENT (mode);\n   if (alignment < PARM_BOUNDARY)\n     alignment = PARM_BOUNDARY;\n   if (alignment > STACK_BOUNDARY)\n@@ -8472,6 +8470,11 @@ and_operands_ok (machine_mode mode, rtx op1, rtx op2)\n \n   if (memory_operand (op1, mode))\n     {\n+      if (TARGET_MIPS16) {\n+\tstruct mips_address_info addr;\n+\tif (!mips_classify_address (&addr, op1, mode, false))\n+\t  return false;\n+      }\n       return and_load_operand (op2, mode);\n     }\n   else"}, {"sha": "28e0a444ba9d76ad9d29451216a3b898771d76c4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0da573d22e446f7740f6340131b11f605715bc/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0da573d22e446f7740f6340131b11f605715bc/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=6d0da573d22e446f7740f6340131b11f605715bc", "patch": "@@ -3306,12 +3306,7 @@\n   switch (which_alternative)\n     {\n     case 0:\n-    fprintf (stderr, \"-----\\n\");\n-    \t fprintf (stderr, \"%d %d %d\\n\", satisfies_constraint_W (operands[1]), memory_operand (operands[1], SImode), stack_operand (operands[1], SImode));\n-      debug_rtx (operands[1]);\n-    /*\n       operands[1] = gen_lowpart (QImode, operands[1]);\n-      */\n       return \"lbu\\t%0,%1\";\n     case 1:\n       operands[1] = gen_lowpart (HImode, operands[1]);"}, {"sha": "df8930d26fb2d9b5109f3d13766f0f0a9491b316", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-pow.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0da573d22e446f7740f6340131b11f605715bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0da573d22e446f7740f6340131b11f605715bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c?ref=6d0da573d22e446f7740f6340131b11f605715bc", "patch": "@@ -3,6 +3,7 @@\n /* Check for VSX here, even though we don't use VSX to eliminate SPE, PAIRED\n    and other ppc floating point varients.  However, we need to also eliminate\n    Darwin, since it doesn't like -mcpu=power6.  */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n /* { dg-options \"-O2 -ffast-math -mcpu=power6 -mno-vsx -mno-altivec\" } */\n /* { dg-final { scan-assembler-times \"fsqrt\" 3 } } */"}]}