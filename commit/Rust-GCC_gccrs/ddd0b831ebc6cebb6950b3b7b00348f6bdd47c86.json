{"sha": "ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkMGI4MzFlYmM2Y2ViYjY5NTBiM2I3YjAwMzQ4ZjZiZGQ0N2M4Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-28T17:53:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-28T17:53:11Z"}, "message": "decl.c, [...]: Fix comment typos.\n\n\t* decl.c, decl2.c, parser.c: Fix comment typos.  Follow\n\tspelling conventions.\n\nFrom-SVN: r114169", "tree": {"sha": "5925e6d3c7b082ef91873cbdcb55340f4bb07aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5925e6d3c7b082ef91873cbdcb55340f4bb07aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/comments", "author": null, "committer": null, "parents": [{"sha": "6fc0bb99a7d0fcedd1b345da14d4dd16926b5458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc0bb99a7d0fcedd1b345da14d4dd16926b5458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc0bb99a7d0fcedd1b345da14d4dd16926b5458"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "ebbca93be9b48bc0959c493da7c8c87f740512f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "patch": "@@ -1,3 +1,8 @@\n+2006-05-28  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* decl.c, decl2.c, parser.c: Fix comment typos.  Follow\n+\tspelling conventions.\n+\n 2006-05-24  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20103"}, {"sha": "5178bdfd91d327db0627e11b214731de98167d3a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "patch": "@@ -217,7 +217,7 @@ struct named_label_entry GTY(())\n \n   /* The following bits are set after the label is defined, and are\n      updated as scopes are popped.  They indicate that a backward jump\n-     to the label will illegally enter a scope of the given flavour.  */\n+     to the label will illegally enter a scope of the given flavor.  */\n   bool in_try_scope;\n   bool in_catch_scope;\n   bool in_omp_scope;"}, {"sha": "0949944d54f7cbe1d35d2612c0169d2c521e00f9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "patch": "@@ -2106,7 +2106,7 @@ start_objects (int method_type, int initp)\n \n   /* We cannot allow these functions to be elided, even if they do not\n      have external linkage.  And, there's no point in deferring\n-     compilation of thes functions; they're all going to have to be\n+     compilation of these functions; they're all going to have to be\n      out anyhow.  */\n   DECL_INLINE (current_function_decl) = 0;\n   DECL_UNINLINABLE (current_function_decl) = 1;"}, {"sha": "60a53c8076adcb5fb9aa23ae4835657b5a1c3e1e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ddd0b831ebc6cebb6950b3b7b00348f6bdd47c86", "patch": "@@ -13107,7 +13107,7 @@ cp_parser_class_head (cp_parser* parser,\n \t define a class that has already been declared with this\n \t syntax.\n \n-\t The proposed resolution for Core Issue 180 says that whever\n+\t The proposed resolution for Core Issue 180 says that wherever\n \t you see `class T::X' you should treat `X' as a type-name.\n \n \t It is OK to define an inaccessible class; for example:"}]}