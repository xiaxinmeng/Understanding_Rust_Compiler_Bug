{"sha": "c11c86648896159fd96cd276a33ddbaa4e777cca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExYzg2NjQ4ODk2MTU5ZmQ5NmNkMjc2YTMzZGRiYWE0ZTc3N2NjYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2014-10-20T11:54:22Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2014-10-20T11:54:22Z"}, "message": "re PR debug/60655 (ICE: output_operand: invalid expression as operand)\n\n\tPR debug/60655\n\t* simplify-rtx.c (simplify_plus_minus): Delete unused \"input_ops\".\n\tIncrease \"ops\" array size.  Correct array size tests.  Init\n\tn_constants in loop.  Break out of innermost loop when finding\n\ta trivial CONST expression.\n\nFrom-SVN: r216462", "tree": {"sha": "a55d0a230fbda0451f53757baf39376656223d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a55d0a230fbda0451f53757baf39376656223d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c11c86648896159fd96cd276a33ddbaa4e777cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11c86648896159fd96cd276a33ddbaa4e777cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11c86648896159fd96cd276a33ddbaa4e777cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11c86648896159fd96cd276a33ddbaa4e777cca/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13f659d456f817e643297bea1484cb7de224b542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f659d456f817e643297bea1484cb7de224b542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f659d456f817e643297bea1484cb7de224b542"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "0ba043443541eb1f042a848dbccc3ea88057a5f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11c86648896159fd96cd276a33ddbaa4e777cca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11c86648896159fd96cd276a33ddbaa4e777cca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c11c86648896159fd96cd276a33ddbaa4e777cca", "patch": "@@ -1,3 +1,11 @@\n+2014-10-20  Alan Modra  <amodra@gmail.com>\n+\n+\tPR debug/60655\n+\t* simplify-rtx.c (simplify_plus_minus): Delete unused \"input_ops\".\n+\tIncrease \"ops\" array size.  Correct array size tests.  Init\n+\tn_constants in loop.  Break out of innermost loop when finding\n+\ta trivial CONST expression.\n+\n 2014-10-20  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/63583"}, {"sha": "6b10917cd09f77dd602db74ba6c470276ba49457", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11c86648896159fd96cd276a33ddbaa4e777cca/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11c86648896159fd96cd276a33ddbaa4e777cca/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c11c86648896159fd96cd276a33ddbaa4e777cca", "patch": "@@ -3965,10 +3965,10 @@ static rtx\n simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t\t     rtx op1)\n {\n-  struct simplify_plus_minus_op_data ops[8];\n+  struct simplify_plus_minus_op_data ops[16];\n   rtx result, tem;\n-  int n_ops = 2, input_ops = 2;\n-  int changed, n_constants = 0, canonicalized = 0;\n+  int n_ops = 2;\n+  int changed, n_constants, canonicalized = 0;\n   int i, j;\n \n   memset (ops, 0, sizeof ops);\n@@ -3985,6 +3985,7 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n   do\n     {\n       changed = 0;\n+      n_constants = 0;\n \n       for (i = 0; i < n_ops; i++)\n \t{\n@@ -3996,15 +3997,14 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t    {\n \t    case PLUS:\n \t    case MINUS:\n-\t      if (n_ops == 7)\n+\t      if (n_ops == ARRAY_SIZE (ops))\n \t\treturn NULL_RTX;\n \n \t      ops[n_ops].op = XEXP (this_op, 1);\n \t      ops[n_ops].neg = (this_code == MINUS) ^ this_neg;\n \t      n_ops++;\n \n \t      ops[i].op = XEXP (this_op, 0);\n-\t      input_ops++;\n \t      changed = 1;\n \t      canonicalized |= this_neg;\n \t      break;\n@@ -4017,7 +4017,7 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t      break;\n \n \t    case CONST:\n-\t      if (n_ops < 7\n+\t      if (n_ops != ARRAY_SIZE (ops)\n \t\t  && GET_CODE (XEXP (this_op, 0)) == PLUS\n \t\t  && CONSTANT_P (XEXP (XEXP (this_op, 0), 0))\n \t\t  && CONSTANT_P (XEXP (XEXP (this_op, 0), 1)))\n@@ -4033,7 +4033,7 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \n \t    case NOT:\n \t      /* ~a -> (-a - 1) */\n-\t      if (n_ops != 7)\n+\t      if (n_ops != ARRAY_SIZE (ops))\n \t\t{\n \t\t  ops[n_ops].op = CONSTM1_RTX (mode);\n \t\t  ops[n_ops++].neg = this_neg;\n@@ -4097,7 +4097,7 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n   /* Now simplify each pair of operands until nothing changes.  */\n   do\n     {\n-      /* Insertion sort is good enough for an eight-element array.  */\n+      /* Insertion sort is good enough for a small array.  */\n       for (i = 1; i < n_ops; i++)\n         {\n           struct simplify_plus_minus_op_data save;\n@@ -4148,16 +4148,21 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t\telse\n \t\t  tem = simplify_binary_operation (ncode, mode, lhs, rhs);\n \n-\t\t/* Reject \"simplifications\" that just wrap the two\n-\t\t   arguments in a CONST.  Failure to do so can result\n-\t\t   in infinite recursion with simplify_binary_operation\n-\t\t   when it calls us to simplify CONST operations.  */\n-\t\tif (tem\n-\t\t    && ! (GET_CODE (tem) == CONST\n-\t\t\t  && GET_CODE (XEXP (tem, 0)) == ncode\n-\t\t\t  && XEXP (XEXP (tem, 0), 0) == lhs\n-\t\t\t  && XEXP (XEXP (tem, 0), 1) == rhs))\n+\t\tif (tem)\n \t\t  {\n+\t\t    /* Reject \"simplifications\" that just wrap the two\n+\t\t       arguments in a CONST.  Failure to do so can result\n+\t\t       in infinite recursion with simplify_binary_operation\n+\t\t       when it calls us to simplify CONST operations.\n+\t\t       Also, if we find such a simplification, don't try\n+\t\t       any more combinations with this rhs:  We must have\n+\t\t       something like symbol+offset, ie. one of the\n+\t\t       trivial CONST expressions we handle later.  */\n+\t\t    if (GET_CODE (tem) == CONST\n+\t\t\t&& GET_CODE (XEXP (tem, 0)) == ncode\n+\t\t\t&& XEXP (XEXP (tem, 0), 0) == lhs\n+\t\t\t&& XEXP (XEXP (tem, 0), 1) == rhs)\n+\t\t      break;\n \t\t    lneg &= rneg;\n \t\t    if (GET_CODE (tem) == NEG)\n \t\t      tem = XEXP (tem, 0), lneg = !lneg;"}]}