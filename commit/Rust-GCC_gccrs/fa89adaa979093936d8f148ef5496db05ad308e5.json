{"sha": "fa89adaa979093936d8f148ef5496db05ad308e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4OWFkYWE5NzkwOTM5MzZkOGYxNDhlZjU0OTZkYjA1YWQzMDhlNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T11:37:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T12:46:57Z"}, "message": "libstdc++: tuple_element_t is also wrong for const subrange (LWG 3398)\n\n\t* include/std/ranges (tuple_element<0, const subrange<I, S, K>>)\n\t(tuple_element<1, const subrange<I, S, K>>): Add partial\n\tspecializations (LWG 3398).\n\t* testsuite/std/ranges/subrange/tuple_like.cc: New test.", "tree": {"sha": "c1cd0aa1bedd6c17445080b02fe5c2ab7487d846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1cd0aa1bedd6c17445080b02fe5c2ab7487d846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa89adaa979093936d8f148ef5496db05ad308e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa89adaa979093936d8f148ef5496db05ad308e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa89adaa979093936d8f148ef5496db05ad308e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa89adaa979093936d8f148ef5496db05ad308e5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45fb21a10f486f6596b648e2c64bd1c7d808f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45fb21a10f486f6596b648e2c64bd1c7d808f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45fb21a10f486f6596b648e2c64bd1c7d808f18"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "f69507d667f9d11ebebd25f2a90002a996824679", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa89adaa979093936d8f148ef5496db05ad308e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa89adaa979093936d8f148ef5496db05ad308e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa89adaa979093936d8f148ef5496db05ad308e5", "patch": "@@ -1,5 +1,10 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/ranges (tuple_element<0, const subrange<I, S, K>>)\n+\t(tuple_element<1, const subrange<I, S, K>>): Add partial\n+\tspecializations (LWG 3398).\n+\t* testsuite/std/ranges/subrange/tuple_like.cc: New test.\n+\n \t* include/bits/ranges_algo.h (__find_fn, __find_first_of_fn)\n \t(__adjacent_find_fn, __remove_if_fn, __remove_copy_if_fn)\n \t(__unique_fn, __unique_copy_fn): Remove redundant conversions to bool."}, {"sha": "4e50206fb6159b684e4df9bef1b65065dc4769bb", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa89adaa979093936d8f148ef5496db05ad308e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa89adaa979093936d8f148ef5496db05ad308e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=fa89adaa979093936d8f148ef5496db05ad308e5", "patch": "@@ -3193,7 +3193,6 @@ namespace views\n \ttypename tuple_size<_Tp>::type;\n \trequires _Nm < tuple_size_v<_Tp>;\n \ttypename tuple_element_t<_Nm, _Tp>;\n-\t// XXX: we applied P3323 here\n \t{ std::get<_Nm>(__t) }\n \t  -> convertible_to<const tuple_element_t<_Nm, _Tp>&>;\n       };\n@@ -3451,6 +3450,14 @@ namespace views\n     struct tuple_element<1, ranges::subrange<_Iter, _Sent, _Kind>>\n     { using type = _Sent; };\n \n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_element<0, const ranges::subrange<_Iter, _Sent, _Kind>>\n+    { using type = _Iter; };\n+\n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_element<1, const ranges::subrange<_Iter, _Sent, _Kind>>\n+    { using type = _Sent; };\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n #endif // library concepts"}, {"sha": "a3020d21d29d831fb217706e2baca67849bc8be0", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/tuple_like.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa89adaa979093936d8f148ef5496db05ad308e5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Ftuple_like.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa89adaa979093936d8f148ef5496db05ad308e5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Ftuple_like.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Ftuple_like.cc?ref=fa89adaa979093936d8f148ef5496db05ad308e5", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+using S1 = std::ranges::subrange<int*>;\n+using S2 = std::ranges::subrange<long*, void*>;\n+\n+static_assert( std::tuple_size_v<S1> == 2 );\n+static_assert( std::tuple_size_v<S2> == 2 );\n+\n+static_assert( std::same_as<std::tuple_element_t<0, S1>, int*> );\n+static_assert( std::same_as<std::tuple_element_t<1, S1>, int*> );\n+// LWG 3398\n+static_assert( std::same_as<std::tuple_element_t<0, const S1>, int*> );\n+static_assert( std::same_as<std::tuple_element_t<1, const S1>, int*> );\n+\n+static_assert( std::same_as<std::tuple_element_t<0, S2>, long*> );\n+static_assert( std::same_as<std::tuple_element_t<1, S2>, void*> );\n+// LWG 3398\n+static_assert( std::same_as<std::tuple_element_t<0, const S2>, long*> );\n+static_assert( std::same_as<std::tuple_element_t<1, const S2>, void*> );\n+\n+S1 s1;\n+static_assert( std::same_as<decltype(std::get<0>(s1)), int*> );\n+static_assert( std::same_as<decltype(std::get<1>(s1)), int*> );\n+const S1 c1;\n+static_assert( std::same_as<decltype(std::get<0>(c1)), int*> );\n+static_assert( std::same_as<decltype(std::get<1>(c1)), int*> );\n+S2 s2;\n+static_assert( std::same_as<decltype(std::get<0>(s2)), long*> );\n+static_assert( std::same_as<decltype(std::get<1>(s2)), void*> );\n+const S2 c2;\n+static_assert( std::same_as<decltype(std::get<0>(c2)), long*> );\n+static_assert( std::same_as<decltype(std::get<1>(c2)), void*> );"}]}