{"sha": "731261c3344bcf635a503d4360995a9ca7caa552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxMjYxYzMzNDRiY2Y2MzVhNTAzZDQzNjA5OTVhOWNhN2NhYTU1Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T08:54:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T08:54:42Z"}, "message": "[multiple changes]\n\n2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Enumeration_Type): The anonymous base\n\tcreated for a derived enumeration type is not a first subtype,\n\teven though it is defined through a full type declaration.\n\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): Do not process\n\taspects for the anonymous base type constructed for a derived\n\tscalar type, because they will be set when the first subtype\n\tis frozen.\n\t(Inherit_Aspects_At_Freeze_Point): Fix typos on handling of\n\tDefault_Value and Default_Component_Value, that prevented the\n\tproper inheritance of these aspects.\n\n2015-05-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch6.adb, exp_unst.adb: Minor typo fixes.\n\nFrom-SVN: r223045", "tree": {"sha": "d75998e06d719cf6310cfac9841de3a29e2dccc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d75998e06d719cf6310cfac9841de3a29e2dccc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/731261c3344bcf635a503d4360995a9ca7caa552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731261c3344bcf635a503d4360995a9ca7caa552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/731261c3344bcf635a503d4360995a9ca7caa552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731261c3344bcf635a503d4360995a9ca7caa552/comments", "author": null, "committer": null, "parents": [{"sha": "f8dae9bb29d4dffc332c5a0670ff814816c87731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dae9bb29d4dffc332c5a0670ff814816c87731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dae9bb29d4dffc332c5a0670ff814816c87731"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "ce6cd7a4aaa0949525c836711f89d6c06402cc5b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=731261c3344bcf635a503d4360995a9ca7caa552", "patch": "@@ -1,3 +1,20 @@\n+2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Enumeration_Type): The anonymous base\n+\tcreated for a derived enumeration type is not a first subtype,\n+\teven though it is defined through a full type declaration.\n+\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): Do not process\n+\taspects for the anonymous base type constructed for a derived\n+\tscalar type, because they will be set when the first subtype\n+\tis frozen.\n+\t(Inherit_Aspects_At_Freeze_Point): Fix typos on handling of\n+\tDefault_Value and Default_Component_Value, that prevented the\n+\tproper inheritance of these aspects.\n+\n+2015-05-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb, exp_unst.adb: Minor typo fixes.\n+\n 2015-05-12  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb: Minor reformatting."}, {"sha": "73ee513f6b5ccac82241dce329e3ba31e1f52ff1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=731261c3344bcf635a503d4360995a9ca7caa552", "patch": "@@ -87,7 +87,7 @@ package body Exp_Ch6 is\n    --  we are in Unnest_Subprogram_Mode, then we record the subprogram entity\n    --  and the body in this table, to later be passed to Unnest_Subprogram.\n \n-   --  We need this delaying mechanism, because we have to wait untiil all\n+   --  We need this delaying mechanism, because we have to wait until all\n    --  instantiated bodies have been inserted before doing the unnesting.\n \n    type Unest_Entry is record"}, {"sha": "4a598f942616ac2bbd19339be40cd9d3ca796563", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=731261c3344bcf635a503d4360995a9ca7caa552", "patch": "@@ -95,7 +95,7 @@ package body Exp_Unst is\n       --  This flag is set True if there is a call path from the outer level\n       --  subprogram to this subprogram. If Reachable is False, it means that\n       --  the subprogram is declared but not actually referenced. We remove\n-      --  such suprograms from the tree, which simplifies our task, because\n+      --  such subprograms from the tree, which simplifies our task, because\n       --  we don't have to worry about e.g. uplevel references from such an\n       --  unreferenced subpogram, which might require (useless) activation\n       --  records to be created. This is computed by setting the outer level\n@@ -118,7 +118,7 @@ package body Exp_Unst is\n \n       Declares_AREC : Boolean;\n       --  This is set True for a subprogram which include the declarations\n-      --  for a local activation record to bew passed on downward calls. It\n+      --  for a local activation record to be passed on downward calls. It\n       --  is set True for the target level of an uplevel reference, and for\n       --  all intervening nested subprograms. For example, if a subprogram X\n       --  at level 5 makes an uplevel reference to an entity declared in a\n@@ -225,7 +225,7 @@ package body Exp_Unst is\n       Callee : Entity_Id;\n       --  The entity for the subprogram containing the referenced entity. Note\n       --  that the level of Callee must be less than the level of Caller, since\n-      --  this is uplevel reference.\n+      --  this is an uplevel reference.\n    end record;\n \n    package Urefs is new Table.Table ("}, {"sha": "8e4eb0be93ed1431ecb5850b4a45f502be485d6e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=731261c3344bcf635a503d4360995a9ca7caa552", "patch": "@@ -1130,7 +1130,20 @@ package body Sem_Ch13 is\n \n                   when Aspect_Default_Value           |\n                        Aspect_Default_Component_Value =>\n-                     Analyze_Aspect_Default_Value (ASN);\n+\n+                     --  Do not inherit aspect for anonymous base type of a\n+                     --  scalar or array type, because they apply to the first\n+                     --  subtype of the type, and will be processed when that\n+                     --  first subtype is frozen.\n+\n+                     if Is_Derived_Type (E)\n+                       and then not Comes_From_Source (E)\n+                       and then E /= First_Subtype (E)\n+                     then\n+                        null;\n+                     else\n+                        Analyze_Aspect_Default_Value (ASN);\n+                     end if;\n \n                   --  Ditto for iterator aspects, because the corresponding\n                   --  attributes may not have been analyzed yet.\n@@ -10910,9 +10923,12 @@ package body Sem_Ch13 is\n \n       --  Default_Component_Value\n \n+      --  Verify that there is no rep_item declared for the type, and there\n+      --  is one coming from an ancestor.\n+\n       if Is_Array_Type (Typ)\n         and then Is_Base_Type (Typ)\n-        and then Has_Rep_Item (Typ, Name_Default_Component_Value, False)\n+        and then not Has_Rep_Item (Typ, Name_Default_Component_Value, False)\n         and then Has_Rep_Item (Typ, Name_Default_Component_Value)\n       then\n          Set_Default_Aspect_Component_Value (Typ,\n@@ -10924,9 +10940,10 @@ package body Sem_Ch13 is\n \n       if Is_Scalar_Type (Typ)\n         and then Is_Base_Type (Typ)\n-        and then Has_Rep_Item (Typ, Name_Default_Value, False)\n+        and then not Has_Rep_Item (Typ, Name_Default_Value, False)\n         and then Has_Rep_Item (Typ, Name_Default_Value)\n       then\n+         Set_Has_Default_Aspect (Typ);\n          Set_Default_Aspect_Value (Typ,\n            Default_Aspect_Value\n              (Entity (Get_Rep_Item (Typ, Name_Default_Value))));"}, {"sha": "08ad303f0a5945e63a8d1ef9cfbe99d6ae12da97", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731261c3344bcf635a503d4360995a9ca7caa552/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=731261c3344bcf635a503d4360995a9ca7caa552", "patch": "@@ -6553,6 +6553,11 @@ package body Sem_Ch3 is\n          Insert_Before (N, Type_Decl);\n          Analyze (Type_Decl);\n \n+         --  The anonymous base now has a full declaration, but this base\n+         --  is not a first subtype.\n+\n+         Set_Is_First_Subtype (Implicit_Base, False);\n+\n          --  After the implicit base is analyzed its Etype needs to be changed\n          --  to reflect the fact that it is derived from the parent type which\n          --  was ignored during analysis. We also set the size at this point."}]}