{"sha": "2f53bab57a0f774d618cc2f9f150118ade618b86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1M2JhYjU3YTBmNzc0ZDYxOGNjMmY5ZjE1MDExOGFkZTYxOGI4Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-28T07:40:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-28T07:40:15Z"}, "message": "* ir.texi: Improve documentation for TARGET_EXPR.\n\nFrom-SVN: r29688", "tree": {"sha": "fbc704dbe8a377d3fc140c627c0ed53f0cd2c813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc704dbe8a377d3fc140c627c0ed53f0cd2c813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f53bab57a0f774d618cc2f9f150118ade618b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f53bab57a0f774d618cc2f9f150118ade618b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f53bab57a0f774d618cc2f9f150118ade618b86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f53bab57a0f774d618cc2f9f150118ade618b86/comments", "author": null, "committer": null, "parents": [{"sha": "18def38f7b5671119dcc9b738c371d28f8537301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18def38f7b5671119dcc9b738c371d28f8537301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18def38f7b5671119dcc9b738c371d28f8537301"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "783057ce8825e19d56600bc31f141cc97957cda8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f53bab57a0f774d618cc2f9f150118ade618b86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f53bab57a0f774d618cc2f9f150118ade618b86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f53bab57a0f774d618cc2f9f150118ade618b86", "patch": "@@ -1,3 +1,7 @@\n+1999-09-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* ir.texi: Improve documentation for TARGET_EXPR.\n+\n 1999-09-27  Nathan Sidwell  <nathan@acm.org>\n \n \tAugment stringification of trees."}, {"sha": "4e5396e449712b5854b8449b918e8e9dd0e87b4c", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f53bab57a0f774d618cc2f9f150118ade618b86/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f53bab57a0f774d618cc2f9f150118ade618b86/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=2f53bab57a0f774d618cc2f9f150118ade618b86", "patch": "@@ -1624,7 +1624,7 @@ These nodes represent @code{throw} expressions.  The single operand is\n an expression for the code that should be executed to throw the\n exception.  However, there is one implicit action not represented in\n that expression; namely the call to @code{__throw}.  This function takes\n-no arguments.  If @code{setjmp}/@code{longjmp} exceptiosn are used, the\n+no arguments.  If @code{setjmp}/@code{longjmp} exceptions are used, the\n function @code{__sjthrow} is called instead.  The normal G++ back-end\n uses the function @code{emit_throw} to generate this code; you can\n examine this function to see what needs to be done.\n@@ -1811,17 +1811,23 @@ is a @code{VAR_DECL} for the temporary variable.  The second operand is\n the initializer for the temporary.  The initializer is evaluated, and\n copied (bitwise) into the temporary.\n \n+Often, a @code{TARGET_EXPR} occurs on the right-hand side of an\n+assignment, or as the second operand to a comma-expression which is\n+itself the right-hand side of an assignment, etc.  In this case, we say\n+that the @code{TARGET_EXPR} is ``normal''; otherwise, we say it is\n+``orphaned''.  For a normal @code{TARGET_EXPR} the temporary variable\n+should be treated as an alias for the left-hand side of the assignment,\n+rather than as a new temporary variable.\n+\n The third operand to the @code{TARGET_EXPR}, if present, is a\n cleanup-expression (i.e., destructor call) for the temporary.  If this\n-expression is not copied into some other location (i.e., if it is not\n-the right-hand side of an assignment, or the second operand to a\n-comma-expression which is itself the right-hand side of an assignment,\n-etc.), then this expression must be executed when the statement\n-containing this expression is complete.  These cleanups must always be\n-executed in the order opposite to that in which they were encountered.\n-Note that if a temporary is created on one branch of a conditional\n-operator (i.e., in the second or third operand to a @code{COND_EXPR}),\n-the cleanup must be run only if that branch is actually executed.\n+expression is orphaned, then this expression must be executed when the\n+statement containing this expression is complete.  These cleanups must\n+always be executed in the order opposite to that in which they were\n+encountered.  Note that if a temporary is created on one branch of a\n+conditional operator (i.e., in the second or third operand to a\n+@code{COND_EXPR}), the cleanup must be run only if that branch is\n+actually executed.\n \n See @code{STMT_IS_FULL_EXPR_P} for more information about running these\n cleanups."}]}