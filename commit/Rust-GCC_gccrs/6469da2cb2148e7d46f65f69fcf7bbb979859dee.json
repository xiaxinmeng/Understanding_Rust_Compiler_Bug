{"sha": "6469da2cb2148e7d46f65f69fcf7bbb979859dee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2OWRhMmNiMjE0OGU3ZDQ2ZjY1ZjY5ZmNmN2JiYjk3OTg1OWRlZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-08-14T20:38:33Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-08-14T20:38:33Z"}, "message": "re PR target/57949 ([powerpc64] Structure parameter alignment issue with vector extensions)\n\ngcc:\n\n2013-08-14  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/57949\n\t* doc/invoke.texi: Add documentation of mcompat-align-parm\n\toption.\n\t* config/rs6000/rs6000.opt: Add mcompat-align-parm option.\n\t* config/rs6000/rs6000.c (rs6000_function_arg_boundary): For AIX\n\tand Linux, correct BLKmode alignment when 128-bit alignment is\n\trequired and compatibility flag is not set.\n\t(rs6000_gimplify_va_arg): For AIX and Linux, honor specified\n\talignment for zero-size arguments when compatibility flag is not\n\tset.\n\ngcc/testsuite:\n\n2013-08-14  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/57949\n\t* gcc.target/powerpc/pr57949-1.c: New.\n\t* gcc.target/powerpc/pr57949-2.c: New.\n\nFrom-SVN: r201750", "tree": {"sha": "5bb45cd306ebd5116d5828e9efdf0a82dc847b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb45cd306ebd5116d5828e9efdf0a82dc847b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6469da2cb2148e7d46f65f69fcf7bbb979859dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6469da2cb2148e7d46f65f69fcf7bbb979859dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6469da2cb2148e7d46f65f69fcf7bbb979859dee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6469da2cb2148e7d46f65f69fcf7bbb979859dee/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ca890e22e169bdbb2399d0c6b7c98111164e86a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca890e22e169bdbb2399d0c6b7c98111164e86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca890e22e169bdbb2399d0c6b7c98111164e86a"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "1040af8b0464940ad771517be74e8209d02af607", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -1,3 +1,16 @@\n+2013-08-14  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/57949\n+\t* doc/invoke.texi: Add documentation of mcompat-align-parm\n+\toption.\n+\t* config/rs6000/rs6000.opt: Add mcompat-align-parm option.\n+\t* config/rs6000/rs6000.c (rs6000_function_arg_boundary): For AIX\n+\tand Linux, correct BLKmode alignment when 128-bit alignment is\n+\trequired and compatibility flag is not set.\n+\t(rs6000_gimplify_va_arg): For AIX and Linux, honor specified\n+\talignment for zero-size arguments when compatibility flag is not\n+\tset.\n+\n 2013-08-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/58145"}, {"sha": "c1d4b99b81dcb74b933adf5bc9a959f531a93e39", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -8339,8 +8339,8 @@ rs6000_function_arg_boundary (enum machine_mode mode, const_tree type)\n \t   || (type && TREE_CODE (type) == VECTOR_TYPE\n \t       && int_size_in_bytes (type) >= 16))\n     return 128;\n-  else if (TARGET_MACHO\n- \t   && rs6000_darwin64_abi\n+  else if (((TARGET_MACHO && rs6000_darwin64_abi)\n+            || (DEFAULT_ABI == ABI_AIX && !rs6000_compat_align_parm))\n  \t   && mode == BLKmode\n \t   && type && TYPE_ALIGN (type) > 64)\n     return 128;\n@@ -9888,8 +9888,9 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n      We don't need to check for pass-by-reference because of the test above.\n      We can return a simplifed answer, since we know there's no offset to add.  */\n \n-  if (TARGET_MACHO\n-      && rs6000_darwin64_abi \n+  if (((TARGET_MACHO\n+        && rs6000_darwin64_abi)\n+       || (DEFAULT_ABI == ABI_AIX && !rs6000_compat_align_parm))\n       && integer_zerop (TYPE_SIZE (type)))\n     {\n       unsigned HOST_WIDE_INT align, boundary;"}, {"sha": "cd83cb2d206db72bbce0c593686ce4bebb8895c6", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -546,3 +546,7 @@ Use ISA 2.07 transactional memory (HTM) instructions\n mquad-memory\n Target Report Mask(QUAD_MEMORY) Var(rs6000_isa_flags)\n Generate the quad word memory instructions (lq/stq/lqarx/stqcx).\n+\n+mcompat-align-parm\n+Target Report Var(rs6000_compat_align_parm) Init(0) Save\n+Generate aggregate parameter passing code with at most 64-bit alignment."}, {"sha": "f6a4ec4d40db341b47d99171386cb007300182f9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -871,7 +871,8 @@ See RS/6000 and PowerPC Options.\n -msave-toc-indirect -mno-save-toc-indirect @gol\n -mpower8-fusion -mno-mpower8-fusion -mpower8-vector -mno-power8-vector @gol\n -mcrypto -mno-crypto -mdirect-move -mno-direct-move @gol\n--mquad-memory -mno-quad-memory}\n+-mquad-memory -mno-quad-memory @gol\n+-mcompat-align-parm -mno-compat-align-parm}\n \n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n@@ -18417,6 +18418,22 @@ stack location in the function prologue if the function calls through\n a pointer on AIX and 64-bit Linux systems.  If the TOC value is not\n saved in the prologue, it is saved just before the call through the\n pointer.  The @option{-mno-save-toc-indirect} option is the default.\n+\n+@item -mcompat-align-parm\n+@itemx -mno-compat-align-parm\n+@opindex mcompat-align-parm\n+Generate (do not generate) code to pass structure parameters with a\n+maximum alignment of 64 bits, for compatibility with older versions\n+of GCC.\n+\n+Older versions of GCC (prior to 4.9.0) incorrectly did not align a\n+structure parameter on a 128-bit boundary when that structure contained\n+a member requiring 128-bit alignment.  This is corrected in more\n+recent versions of GCC.  This option may be used to generate code\n+that is compatible with functions compiled with older versions of\n+GCC.\n+\n+The @option{-mno-compat-align-parm} option is the default.\n @end table\n \n @node RX Options"}, {"sha": "72fcd6087ce2873d3d8a350ef128d7ffa67c3c67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -1,3 +1,9 @@\n+2013-08-14  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/57949\n+\t* gcc.target/powerpc/pr57949-1.c: New.\n+\t* gcc.target/powerpc/pr57949-2.c: New.\n+\n 2013-08-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/58145"}, {"sha": "253b2d89083633b96cce0453cb84f50be24e8ea3", "filename": "gcc/testsuite/gcc.target/powerpc/pr57949-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr57949-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr57949-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr57949-1.c?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -mcpu=power7\" } */\n+\n+/* Verify that vs is 16-byte aligned in the absence of -mcompat-align-parm.  */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+struct s { long m; v4sf v; };\n+long n;\n+v4sf ve;\n+\n+void pr57949 (long d1, long d2, long d3, long d4, long d5, long d6,\n+\t      long d7, long d8, long d9, struct s vs) {\n+  n = vs.m;\n+  ve = vs.v;\n+}\n+\n+/* { dg-final { scan-assembler \"li \\.\\*,144\" } } */\n+/* { dg-final { scan-assembler \"ld \\.\\*,128\\\\(1\\\\)\" } } */"}, {"sha": "aa6a0d9631a2f05f4d9dbac393d68b62b4109411", "filename": "gcc/testsuite/gcc.target/powerpc/pr57949-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr57949-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6469da2cb2148e7d46f65f69fcf7bbb979859dee/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr57949-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr57949-2.c?ref=6469da2cb2148e7d46f65f69fcf7bbb979859dee", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -mcpu=power7 -mcompat-align-parm\" } */\n+\n+/* Verify that vs is not 16-byte aligned with -mcompat-align-parm.  */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+struct s { long m; v4sf v; };\n+long n;\n+v4sf ve;\n+\n+void pr57949 (long d1, long d2, long d3, long d4, long d5, long d6,\n+\t      long d7, long d8, long d9, struct s vs) {\n+  n = vs.m;\n+  ve = vs.v;\n+}\n+\n+/* { dg-final { scan-assembler \"ld .\\*,136\\\\(1\\\\)\" } } */\n+/* { dg-final { scan-assembler \"ld .\\*,120\\\\(1\\\\)\" } } */"}]}