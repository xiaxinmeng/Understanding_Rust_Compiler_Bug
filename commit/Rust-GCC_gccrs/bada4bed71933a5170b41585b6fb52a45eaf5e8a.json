{"sha": "bada4bed71933a5170b41585b6fb52a45eaf5e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkYTRiZWQ3MTkzM2E1MTcwYjQxNTg1YjZmYjUyYTQ1ZWFmNWU4YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-07-07T19:22:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-07-07T19:22:01Z"}, "message": "PR jit/66779: fix segfault\n\ngcc/jit/ChangeLog:\n\tPR jit/66779\n\t* dummy-frontend.c (jit_langhook_type_for_mode): Ensure that we\n\thandle modes QI, HI, SI, DI, TI.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/66779\n\t* jit.dg/all-non-failing-tests.h: Add test-pr66779.c.\n\t* jit.dg/test-pr66779.c: New testcase.\n\nFrom-SVN: r225522", "tree": {"sha": "2097da040daac8508208920be68b0d086cc49b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2097da040daac8508208920be68b0d086cc49b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bada4bed71933a5170b41585b6fb52a45eaf5e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bada4bed71933a5170b41585b6fb52a45eaf5e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bada4bed71933a5170b41585b6fb52a45eaf5e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bada4bed71933a5170b41585b6fb52a45eaf5e8a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "c38fd5092faa5baba090e6b3f223a21826e14b44", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=bada4bed71933a5170b41585b6fb52a45eaf5e8a", "patch": "@@ -1,3 +1,9 @@\n+2015-07-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66779\n+\t* dummy-frontend.c (jit_langhook_type_for_mode): Ensure that we\n+\thandle modes QI, HI, SI, DI, TI.\n+\n 2015-07-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/66700"}, {"sha": "3ddab5084ff1aea8fe716ea489083e6d0b346823", "filename": "gcc/jit/dummy-frontend.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Fjit%2Fdummy-frontend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Fjit%2Fdummy-frontend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.c?ref=bada4bed71933a5170b41585b6fb52a45eaf5e8a", "patch": "@@ -154,6 +154,17 @@ jit_langhook_type_for_mode (enum machine_mode mode, int unsignedp)\n   if (mode == TYPE_MODE (double_type_node))\n     return double_type_node;\n \n+  if (mode == TYPE_MODE (intQI_type_node))\n+    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n+  if (mode == TYPE_MODE (intHI_type_node))\n+    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n+  if (mode == TYPE_MODE (intSI_type_node))\n+    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n+  if (mode == TYPE_MODE (intDI_type_node))\n+    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n+  if (mode == TYPE_MODE (intTI_type_node))\n+    return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n+\n   if (mode == TYPE_MODE (integer_type_node))\n     return unsignedp ? unsigned_type_node : integer_type_node;\n "}, {"sha": "fb5d57fbc0ee73d370876c0c4848bc78d34293f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bada4bed71933a5170b41585b6fb52a45eaf5e8a", "patch": "@@ -1,3 +1,9 @@\n+2015-07-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66779\n+\t* jit.dg/all-non-failing-tests.h: Add test-pr66779.c.\n+\t* jit.dg/test-pr66779.c: New testcase.\n+\n 2015-07-07  Andrew Bennett  <andrew.bennett@imgtec.com>\n \n \t* gcc.target/mips/no-smartmips-lwxs.c: Change NOMIPS16 to"}, {"sha": "463eefb2ad04005843ee13c7b48f78890d9d30ee", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=bada4bed71933a5170b41585b6fb52a45eaf5e8a", "patch": "@@ -161,6 +161,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-pr66779.c */\n+#define create_code create_code_pr66779\n+#define verify_code verify_code_pr66779\n+#include \"test-pr66779.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-reading-struct.c */\n #define create_code create_code_reading_struct\n #define verify_code verify_code_reading_struct\n@@ -289,6 +296,9 @@ const struct testcase testcases[] = {\n   {\"pr66700_observing_write_through_ptr\",\n    create_code_pr66700_observing_write_through_ptr,\n    verify_code_pr66700_observing_write_through_ptr},\n+  {\"pr66779\",\n+   create_code_pr66779,\n+   verify_code_pr66779},\n   {\"reading_struct \",\n    create_code_reading_struct ,\n    verify_code_reading_struct },"}, {"sha": "ac5a72bd48be3ed2235982290b1bafa28af7504b", "filename": "gcc/testsuite/jit.dg/test-pr66779.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr66779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada4bed71933a5170b41585b6fb52a45eaf5e8a/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr66779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr66779.c?ref=bada4bed71933a5170b41585b6fb52a45eaf5e8a", "patch": "@@ -0,0 +1,143 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+/* Reproducer for PR jit/66779.\n+\n+   Inject the equivalent of:\n+     T FUNCNAME (T i, T j, T k)\n+     {\n+       bool comp0 = i & 0x40;\n+       bool comp1 = (j == k);\n+       if (comp0 && comp1)\n+\t return 7;\n+       else\n+\t return 22;\n+     }\n+   for some type T; this was segfaulting during the expansion to RTL\n+   due to missing handling for some machine modes in\n+   jit_langhook_type_for_mode.  */\n+\n+void\n+create_fn (gcc_jit_context *ctxt,\n+\t   const char *funcname,\n+\t   enum gcc_jit_types jit_type)\n+{\n+  gcc_jit_type *the_type =\n+    gcc_jit_context_get_type (ctxt, jit_type);\n+  gcc_jit_type *t_bool =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_BOOL);\n+  gcc_jit_param *param_i =\n+    gcc_jit_context_new_param (ctxt, NULL, the_type, \"i\");\n+  gcc_jit_param *param_j =\n+    gcc_jit_context_new_param (ctxt, NULL, the_type, \"j\");\n+  gcc_jit_param *param_k =\n+    gcc_jit_context_new_param (ctxt, NULL, the_type, \"k\");\n+  gcc_jit_param *params[3] = {\n+    param_i,\n+    param_j,\n+    param_k\n+  };\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  the_type,\n+\t\t\t\t  funcname,\n+\t\t\t\t  3, params,\n+\t\t\t\t  0);\n+  gcc_jit_block *b_entry = gcc_jit_function_new_block (func, \"entry\");\n+  gcc_jit_block *b_on_true = gcc_jit_function_new_block (func, \"on_true\");\n+  gcc_jit_block *b_on_false = gcc_jit_function_new_block (func, \"on_false\");\n+\n+  gcc_jit_lvalue *comp0 =\n+    gcc_jit_function_new_local (func, NULL, t_bool, \"comp0\");\n+\n+  gcc_jit_block_add_assignment (\n+    b_entry, NULL,\n+    comp0,\n+    gcc_jit_context_new_comparison (\n+      ctxt, NULL,\n+      GCC_JIT_COMPARISON_NE,\n+      gcc_jit_context_new_binary_op (\n+\tctxt, NULL,\n+\tGCC_JIT_BINARY_OP_BITWISE_AND,\n+\tthe_type,\n+\tgcc_jit_param_as_rvalue (param_i),\n+\tgcc_jit_context_new_rvalue_from_int (ctxt, the_type, 0x40)),\n+      gcc_jit_context_zero (ctxt, the_type)));\n+\n+  gcc_jit_lvalue *comp1 =\n+    gcc_jit_function_new_local (func, NULL, t_bool, \"comp1\");\n+\n+  gcc_jit_block_add_assignment (\n+    b_entry, NULL,\n+    comp1,\n+    gcc_jit_context_new_comparison (ctxt, NULL,\n+\t\t\t\t    GCC_JIT_COMPARISON_EQ,\n+\t\t\t\t    gcc_jit_param_as_rvalue (param_j),\n+\t\t\t\t    gcc_jit_param_as_rvalue (param_k)));\n+\n+ gcc_jit_rvalue *cond =\n+   gcc_jit_context_new_binary_op (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_BINARY_OP_LOGICAL_AND,\n+\t\t\t\t  t_bool,\n+\t\t\t\t  gcc_jit_lvalue_as_rvalue (comp0),\n+\t\t\t\t  gcc_jit_lvalue_as_rvalue (comp1));\n+\n+  gcc_jit_block_end_with_conditional (b_entry, NULL,\n+\t\t\t\t      cond,\n+\t\t\t\t      b_on_true,\n+\t\t\t\t      b_on_false);\n+\n+  gcc_jit_block_end_with_return (\n+    b_on_true, NULL,\n+    gcc_jit_context_new_rvalue_from_int (ctxt, the_type, 7));\n+\n+  gcc_jit_block_end_with_return (\n+    b_on_false, NULL,\n+    gcc_jit_context_new_rvalue_from_int (ctxt, the_type, 22));\n+}\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  create_fn (ctxt, \"pr66779_signed_char\", GCC_JIT_TYPE_SIGNED_CHAR);\n+  create_fn (ctxt, \"pr66779_unsigned_char\", GCC_JIT_TYPE_UNSIGNED_CHAR);\n+\n+  create_fn (ctxt, \"pr66779_short\", GCC_JIT_TYPE_SHORT);\n+  create_fn (ctxt, \"pr66779_unsigned_short\", GCC_JIT_TYPE_UNSIGNED_SHORT);\n+\n+  create_fn (ctxt, \"pr66779_int\", GCC_JIT_TYPE_INT);\n+  create_fn (ctxt, \"pr66779_unsigned_int\", GCC_JIT_TYPE_UNSIGNED_INT);\n+\n+  create_fn (ctxt, \"pr66779_long\", GCC_JIT_TYPE_LONG);\n+  create_fn (ctxt, \"pr66779_unsigned_long\", GCC_JIT_TYPE_UNSIGNED_LONG);\n+\n+  create_fn (ctxt, \"pr66779_long_long\",\n+\t     GCC_JIT_TYPE_LONG_LONG);\n+  create_fn (ctxt, \"pr66779_unsigned_long_long\",\n+\t     GCC_JIT_TYPE_UNSIGNED_LONG_LONG);\n+\n+  create_fn (ctxt, \"pr66779_size_t\", GCC_JIT_TYPE_SIZE_T);\n+}\n+\n+extern void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int (*fn_type) (int, int, int);\n+  CHECK_NON_NULL (result);\n+  /* Sanity-check the \"int\" case.  */\n+  fn_type fn =\n+    (fn_type)gcc_jit_result_get_code (result, \"pr66779_int\");\n+  CHECK_NON_NULL (fn);\n+  CHECK_VALUE (fn (0, 0, 0), 22);\n+  CHECK_VALUE (fn (0, 0, 1), 22);\n+  CHECK_VALUE (fn (0x40, 0, 0), 7);\n+  CHECK_VALUE (fn (0x40, 0, 1), 22);\n+  CHECK_VALUE (fn (0x40, 1, 1), 7);\n+  CHECK_VALUE (fn (0x3f, 0, 0), 22);\n+  CHECK_VALUE (fn (0x3f, 1, 1), 22);\n+}"}]}