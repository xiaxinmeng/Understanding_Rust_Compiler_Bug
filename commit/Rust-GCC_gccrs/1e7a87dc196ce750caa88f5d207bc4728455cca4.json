{"sha": "1e7a87dc196ce750caa88f5d207bc4728455cca4", "node_id": "C_kwDOANBUbNoAKDFlN2E4N2RjMTk2Y2U3NTBjYWE4OGY1ZDIwN2JjNDcyODQ1NWNjYTQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-15T08:34:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-15T08:34:41Z"}, "message": "c++: Add testcases from some Issaquah DRs\n\nThe following patch adds testcases for 5 DRs.  In the DR2475, DR2530 and\nCWG2691 my understanding is we already implement the desired behavior,\nin DR2478 partially (I've added 2 dg-bogus there, I think we inherit\nrather than overwrite DECL_DECLARED_CONSTINIT_P for explicit specialization\nsomewhere, still far better than clang++) and DR2673 on the other side the\nDR was to codify the clang++ behavior rather than GCC.\n\nNot 100% sure if it is better to commit the 2 with dg-bogus or just wait\nuntil the actual fixes are implemented.  BTW, I've noticed\nregister_specialization does:\n              FOR_EACH_CLONE (clone, fn)\n                {\n                  DECL_DECLARED_INLINE_P (clone)\n                    = DECL_DECLARED_INLINE_P (fn);\n                  DECL_SOURCE_LOCATION (clone)\n                    = DECL_SOURCE_LOCATION (fn);\n                  DECL_DELETED_FN (clone)\n                    = DECL_DELETED_FN (fn);\n                }\nbut not e.g. constexpr/consteval, have tried to cover that in a testcase\nbut haven't managed to do so.\n\n2023-02-15  Jakub Jelinek  <jakub@redhat.com>\n\n\t* g++.dg/DRs/dr2475.C: New test.\n\t* g++.dg/DRs/dr2478.C: New test.\n\t* g++.dg/DRs/dr2530.C: New test.\n\t* g++.dg/DRs/dr2673.C: New test.\n\t* c-c++-common/cpp/delimited-escape-seq-8.c: New test.", "tree": {"sha": "af2b55c2a9245755532088ebfdbd50109f8a0011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af2b55c2a9245755532088ebfdbd50109f8a0011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e7a87dc196ce750caa88f5d207bc4728455cca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7a87dc196ce750caa88f5d207bc4728455cca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7a87dc196ce750caa88f5d207bc4728455cca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7a87dc196ce750caa88f5d207bc4728455cca4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86bc0909613e19e284b40fce9f9914e3a115bbe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86bc0909613e19e284b40fce9f9914e3a115bbe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86bc0909613e19e284b40fce9f9914e3a115bbe8"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "02c053222a554972d33ec42bd48dfd2876c5b0f5", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-8.c?ref=1e7a87dc196ce750caa88f5d207bc4728455cca4", "patch": "@@ -0,0 +1,20 @@\n+// CWG 2691 - hexadecimal-escape-sequence is too greedy\n+/* { dg-do run } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=c++23\" { target c++ } } */\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n+\n+const char32_t *a = U\"\\x{20}ab\";\n+\n+int\n+main ()\n+{\n+  if (a[0] != U'\\x20' || a[1] != U'a' || a[2] != U'b' || a[3] != U'\\0')\n+    __builtin_abort ();\n+}"}, {"sha": "f13795e08749e52f02daa8e2d2679f733ce37974", "filename": "gcc/testsuite/g++.dg/DRs/dr2475.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2475.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2475.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2475.C?ref=1e7a87dc196ce750caa88f5d207bc4728455cca4", "patch": "@@ -0,0 +1,6 @@\n+// DR 2475 - Object declarations of type cv void\n+// { dg-do compile }\n+\n+int f(), x;\n+extern void g(),\n+  y;                   // { dg-error \"variable or field 'y' declared void\" }"}, {"sha": "7e939ac685018cef45b1bdb0e826da007956e604", "filename": "gcc/testsuite/g++.dg/DRs/dr2478.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2478.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2478.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2478.C?ref=1e7a87dc196ce750caa88f5d207bc4728455cca4", "patch": "@@ -0,0 +1,74 @@\n+// DR 2478 - Properties of explicit specializations of implicitly-instantiated class templates\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T>\n+struct S {\n+  int foo () { return 0; }\n+  constexpr int bar () { return 0; }\n+  int baz () { return 0; }\n+  consteval int qux () { return 0; }\n+  constexpr S () {}\n+  static constinit T x;\n+  static T y;\n+};\n+\n+template <typename T>\n+T S<T>::x = S<T> ().foo ();\t// { dg-error \"'constinit' variable 'S<char>::x' does not have a constant initializer\" }\n+\t\t\t\t// { dg-error \"call to non-'constexpr' function\" \"\" { target *-*-* } .-1 }\n+\n+template <typename T>\n+T S<T>::y = S<T> ().foo ();\n+\n+template <>\n+constexpr int\n+S<int>::foo ()\n+{\n+  return 0;\n+}\n+\n+template <>\n+int\n+S<int>::bar ()\n+{\n+  return 0;\n+}\n+\n+template <>\n+consteval int\n+S<char>::baz ()\n+{\n+  return 0;\n+}\n+\n+template <>\n+int\n+S<char>::qux ()\n+{\n+  return 0;\n+}\n+\n+template <>\n+long S<long>::x = S<long> ().foo ();\t// { dg-bogus \"'constinit' variable 'S<long int>::x' does not have a constant initializer\" \"\" { xfail *-*-* } }\n+\t\t\t\t\t// { dg-bogus \"call to non-'constexpr' function\" \"\" { xfail *-*-* } .-1 }\n+\n+template <>\n+constinit long S<long>::y = S<long> ().foo ();\t// { dg-error \"'constinit' variable 'S<long int>::y' does not have a constant initializer\" }\n+\t\t\t\t\t\t// { dg-error \"call to non-'constexpr' function\" \"\" { target *-*-* } .-1 }\n+\n+constinit auto a = S<char> ().foo ();\t// { dg-error \"'constinit' variable 'a' does not have a constant initializer\" }\n+\t\t\t\t\t// { dg-error \"call to non-'constexpr' function\" \"\" { target *-*-* } .-1 }\n+constinit auto b = S<char> ().bar ();\n+constinit auto c = S<int> ().foo ();\n+constinit auto d = S<int> ().bar ();\t// { dg-error \"'constinit' variable 'd' does not have a constant initializer\" }\n+\t\t\t\t\t// { dg-error \"call to non-'constexpr' function\" \"\" { target *-*-* } .-1 }\n+constinit auto e = S<char> ().baz ();\n+constinit auto f = S<char> ().qux ();\t// { dg-error \"'constinit' variable 'f' does not have a constant initializer\" }\n+\t\t\t\t\t// { dg-error \"call to non-'constexpr' function\" \"\" { target *-*-* } .-1 }\n+constinit auto g = S<int> ().baz ();\t// { dg-error \"'constinit' variable 'g' does not have a constant initializer\" }\n+\t\t\t\t\t// { dg-error \"call to non-'constexpr' function\" \"\" { target *-*-* } .-1 }\n+constinit auto h = S<int> ().qux ();\n+auto i = S<char>::x;\n+auto j = S<int>::x;\n+auto k = S<long>::x;\n+auto l = S<char>::y;\n+auto m = S<int>::y;"}, {"sha": "90676874f9388759048aabe6bc37758360d40a71", "filename": "gcc/testsuite/g++.dg/DRs/dr2530.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2530.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2530.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2530.C?ref=1e7a87dc196ce750caa88f5d207bc4728455cca4", "patch": "@@ -0,0 +1,5 @@\n+// DR 2530 - Multiple definitions of enumerators\n+// { dg-do compile }\n+\n+enum E { e, e };\t\t// { dg-error \"redefinition of 'e'\" }\n+enum F { f = 0, f = 0 };\t// { dg-error \"redefinition of 'f'\" }"}, {"sha": "7fbebdaf664bc04f1acd12e00cabfa5d9fb7e7dd", "filename": "gcc/testsuite/g++.dg/DRs/dr2673.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2673.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a87dc196ce750caa88f5d207bc4728455cca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2673.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2673.C?ref=1e7a87dc196ce750caa88f5d207bc4728455cca4", "patch": "@@ -0,0 +1,24 @@\n+// DR 2673 - User-declared spaceship vs. built-in operators\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+enum class E : int { E1, E2 };\n+enum class F : int { F1, F2 };\n+\n+constexpr auto\n+operator<=> (E lhs, E rhs)\n+{\n+  return (int) rhs <=> (int) lhs;\n+}\n+\n+constexpr bool\n+operator== (F lhs, F rhs)\n+{\n+  return (int) lhs != (int) rhs;\n+}\n+\n+static_assert ((E::E1 <=> E::E2) == (1 <=> 0));\n+static_assert (E::E1 > E::E2);\t\t// { dg-bogus \"static assertion failed\" \"\" { xfail *-*-* } }\n+static_assert (F::F1 == F::F2);\n+static_assert (!(F::F1 != F::F2));\t// { dg-bogus \"static assertion failed\" \"\" { xfail *-*-* } }"}]}