{"sha": "fb9875ebf10c86be21824cb836b7b3b80f3a731b", "node_id": "C_kwDOANBUbNoAKGZiOTg3NWViZjEwYzg2YmUyMTgyNGNiODM2YjdiM2I4MGYzYTczMWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-02T15:50:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T22:51:06Z"}, "message": "libstdc++: Do not leak empty COW strings\n\nWhen non-const references, pointers or iterators are obtained to the\ncontents of a COW std::basic_string, the implementation has to assume it\ncould result in a write to the contents. If the string was previously\nshared, it does the \"copy-on-write\" step of creating a new copy of the\ndata that is not shared by another object.  It also marks the string as\n\"leaked\", so that no future copies of it will share ownership either.\n\nHowever, if the string is empty then the only character in the sequence\nis the terminating null, and modifying that is undefined behaviour. This\nmeans that non-const references/pointers/iterators to an empty string\nare effectively const. Since no direct modification is possible, there\nis no need to \"leak\" the string, it can be safely shared with other\nobjects. This avoids unnecessary allocations to create new copies of\nempty strings that can't be modified anyway.\n\nWe already did this optimization for strings that share ownership of the\nstatic _S_empty_rep() object, but not for strings that have non-zero\ncapacity, and not for fully-dynamic-strings (where the _S_empty_rep()\nobject is never used).\n\nWith this change we avoid two allocations in the return statement:\n\n  std::string s;\n  s.reserve(1);       // allocate\n  std::string s2 = s;\n  std::string s3 = s;\n  return s[0] + s2[0] + s3[0]; // leak+allocate twice\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/cow_string.h (basic_string::_M_leak_hard): Do not\n\treallocate an empty string.", "tree": {"sha": "b19876ff4933e2237a1ed475ac362074b1f585e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b19876ff4933e2237a1ed475ac362074b1f585e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9875ebf10c86be21824cb836b7b3b80f3a731b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9875ebf10c86be21824cb836b7b3b80f3a731b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9875ebf10c86be21824cb836b7b3b80f3a731b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9875ebf10c86be21824cb836b7b3b80f3a731b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8463b0e3ec2438b4cfb8c9a468d59761db2c8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8463b0e3ec2438b4cfb8c9a468d59761db2c8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8463b0e3ec2438b4cfb8c9a468d59761db2c8a0"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "b21a7422246c45b237328cc992b58a6428f5adc9", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9875ebf10c86be21824cb836b7b3b80f3a731b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9875ebf10c86be21824cb836b7b3b80f3a731b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=fb9875ebf10c86be21824cb836b7b3b80f3a731b", "patch": "@@ -3366,10 +3366,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_leak_hard()\n     {\n-#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n-      if (_M_rep() == &_S_empty_rep())\n+      // No need to create a new copy of an empty string when a non-const\n+      // reference/pointer/iterator into it is obtained. Modifying the\n+      // trailing null character is undefined, so the ref/pointer/iterator\n+      // is effectively const anyway.\n+      if (this->empty())\n \treturn;\n-#endif\n+\n       if (_M_rep()->_M_is_shared())\n \t_M_mutate(0, 0, 0);\n       _M_rep()->_M_set_leaked();"}]}