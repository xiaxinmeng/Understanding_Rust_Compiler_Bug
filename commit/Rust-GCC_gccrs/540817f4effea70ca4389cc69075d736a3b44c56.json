{"sha": "540817f4effea70ca4389cc69075d736a3b44c56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwODE3ZjRlZmZlYTcwY2E0Mzg5Y2M2OTA3NWQ3MzZhM2I0NGM1Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-08T19:24:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-08T19:24:26Z"}, "message": "syscall: Always use _C_int for C libcalls.\n\nFrom-SVN: r195897", "tree": {"sha": "7d743557b4d06fef3bc38325709c3f79594a987a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d743557b4d06fef3bc38325709c3f79594a987a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/540817f4effea70ca4389cc69075d736a3b44c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540817f4effea70ca4389cc69075d736a3b44c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540817f4effea70ca4389cc69075d736a3b44c56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540817f4effea70ca4389cc69075d736a3b44c56/comments", "author": null, "committer": null, "parents": [{"sha": "19c5f6e600fdd1e62ab550eec4825c503919f857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c5f6e600fdd1e62ab550eec4825c503919f857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c5f6e600fdd1e62ab550eec4825c503919f857"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "50863fadf1809256b80a5c0d180c1ae2e530295d", "filename": "libgo/go/syscall/libcall_irix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -5,4 +5,4 @@\n package syscall\n \n //sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n-//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n+//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "79de2f389e91005f202b358b6a338ad8c9db4b96", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -9,10 +9,10 @@ package syscall\n import \"unsafe\"\n \n //sys\tOpenat(dirfd int, path string, flags int, mode uint32) (fd int, err error)\n-//openat(dirfd int, path *byte, flags int, mode Mode_t) int\n+//openat(dirfd _C_int, path *byte, flags _C_int, mode Mode_t) _C_int\n \n //sys\tfutimesat(dirfd int, path *byte, times *[2]Timeval) (err error)\n-//futimesat(dirfd int, path *byte, times *[2]Timeval) int\n+//futimesat(dirfd _C_int, path *byte, times *[2]Timeval) _C_int\n func Futimesat(dirfd int, path string, tv []Timeval) (err error) {\n \tif len(tv) != 2 {\n \t\treturn EINVAL\n@@ -27,10 +27,10 @@ func Futimes(fd int, tv []Timeval) (err error) {\n }\n \n //sys\tptrace(request int, pid int, addr uintptr, data uintptr) (err error)\n-//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n+//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n \n //sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n-//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n+//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n \n func ptracePeek(req int, pid int, addr uintptr, out []byte) (count int, err error) {\n \t// The peek requests are machine-size oriented, so we wrap it\n@@ -161,7 +161,7 @@ func PtraceAttach(pid int) (err error) { return ptrace(PTRACE_ATTACH, pid, 0, 0)\n func PtraceDetach(pid int) (err error) { return ptrace(PTRACE_DETACH, pid, 0, 0) }\n \n //sys\treboot(magic1 uint, magic2 uint, cmd int, arg string) (err error)\n-//reboot(magic1 uint, magic2 uint, cmd int, arg *byte) int\n+//reboot(magic1 _C_uint, magic2 _C_uint, cmd _C_int, arg *byte) _C_int\n func Reboot(cmd int) (err error) {\n \treturn reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, \"\")\n }\n@@ -185,28 +185,28 @@ func Accept4(fd int, flags int) (nfd int, sa Sockaddr, err error) {\n }\n \n //sys\tAcct(path string) (err error)\n-//acct(path *byte) int\n+//acct(path *byte) _C_int\n \n //sys\tAdjtimex(buf *Timex) (state int, err error)\n-//adjtimex(buf *Timex) int\n+//adjtimex(buf *Timex) _C_int\n \n //sys\tFaccessat(dirfd int, path string, mode uint32, flags int) (err error)\n-//faccessat(dirfd int, pathname *byte, mode int, flags int) int\n+//faccessat(dirfd _C_int, pathname *byte, mode _C_int, flags _C_int) _C_int\n \n //sys\tFallocate(fd int, mode uint32, off int64, len int64) (err error)\n-//fallocate(fd int, mode int, offset Offset_t, len Offset_t) int\n+//fallocate(fd _C_int, mode _C_int, offset Offset_t, len Offset_t) _C_int\n \n //sys\tFchmodat(dirfd int, path string, mode uint32, flags int) (err error)\n-//fchmodat(dirfd int, pathname *byte, mode Mode_t, flags int) int\n+//fchmodat(dirfd _C_int, pathname *byte, mode Mode_t, flags _C_int) _C_int\n \n //sys\tFchownat(dirfd int, path string, uid int, gid int, flags int) (err error)\n-//fchownat(dirfd int, path *byte, owner Uid_t, group Gid_t, flags int) int\n+//fchownat(dirfd _C_int, path *byte, owner Uid_t, group Gid_t, flags _C_int) _C_int\n \n //sys\tFlock(fd int, how int) (err error)\n-//flock(fd int, how int) int\n+//flock(fd _C_int, how _C_int) _C_int\n \n //sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n-//fstatfs(fd int, buf *Statfs_t) int\n+//fstatfs(fd _C_int, buf *Statfs_t) _C_int\n \n func Gettid() (tid int) {\n \tr1, _, _ := Syscall(SYS_GETTID, 0, 0, 0)\n@@ -269,25 +269,25 @@ func ParseDirent(buf []byte, max int, names []string) (consumed int, count int,\n }\n \n //sys\tInotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error)\n-//inotify_add_watch(fd int, pathname *byte, mask uint32) int\n+//inotify_add_watch(fd _C_int, pathname *byte, mask uint32) _C_int\n \n //sysnb\tInotifyInit() (fd int, err error)\n-//inotify_init() int\n+//inotify_init() _C_int\n \n //sysnb\tInotifyInit1(flags int) (fd int, err error)\n-//inotify_init1(flags int) int\n+//inotify_init1(flags _C_int) _C_int\n \n //sysnb\tInotifyRmWatch(fd int, watchdesc uint32) (success int, err error)\n-//inotify_rm_watch(fd int, wd uint32) int\n+//inotify_rm_watch(fd _C_int, wd uint32) _C_int\n \n //sys\tKlogctl(typ int, buf []byte) (n int, err error)\n-//klogctl(typ int, bufp *byte, len int) int\n+//klogctl(typ _C_int, bufp *byte, len _C_int) _C_int\n \n //sys\tMkdirat(dirfd int, path string, mode uint32) (err error)\n-//mkdirat(dirfd int, path *byte, mode Mode_t) int\n+//mkdirat(dirfd _C_int, path *byte, mode Mode_t) _C_int\n \n //sys\tMknodat(dirfd int, path string, mode uint32, dev int) (err error)\n-//mknodat(dirfd int, path *byte, mode Mode_t, dev _dev_t) int\n+//mknodat(dirfd _C_int, path *byte, mode Mode_t, dev _dev_t) _C_int\n \n //sysnb\tpipe2(p *[2]_C_int, flags int) (err error)\n //pipe2(p *[2]_C_int, flags _C_int) _C_int\n@@ -303,13 +303,13 @@ func Pipe2(p []int, flags int) (err error) {\n }\n \n //sys\tPivotRoot(newroot string, putold string) (err error)\n-//pivot_root(newroot *byte, putold *byte) int\n+//pivot_root(newroot *byte, putold *byte) _C_int\n \n //sys\tRenameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)\n-//renameat(olddirfd int, oldpath *byte, newdirfd int, newpath *byte) int\n+//renameat(olddirfd _C_int, oldpath *byte, newdirfd _C_int, newpath *byte) _C_int\n \n //sys\tsendfile(outfd int, infd int, offset *Offset_t, count int) (written int, err error)\n-//sendfile64(outfd int, infd int, offset *Offset_t, count Size_t) Ssize_t\n+//sendfile64(outfd _C_int, infd _C_int, offset *Offset_t, count Size_t) Ssize_t\n func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {\n \tif raceenabled {\n \t\traceReleaseMerge(unsafe.Pointer(&ioSync))\n@@ -327,19 +327,19 @@ func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n }\n \n //sys\tSetfsgid(gid int) (err error)\n-//setfsgid(gid Gid_t) int\n+//setfsgid(gid Gid_t) _C_int\n \n //sys\tSetfsuid(uid int) (err error)\n-//setfsuid(uid Uid_t) int\n+//setfsuid(uid Uid_t) _C_int\n \n //sysnb\tSetresgid(rgid int, egid int, sgid int) (err error)\n-//setresgid(rgid Gid_t, egid Gid_t, sgid Gid_t) int\n+//setresgid(rgid Gid_t, egid Gid_t, sgid Gid_t) _C_int\n \n //sysnb\tSetresuid(ruid int, eguid int, suid int) (err error)\n-//setresuid(ruid Uid_t, euid Uid_t, suid Uid_t) int\n+//setresuid(ruid Uid_t, euid Uid_t, suid Uid_t) _C_int\n \n //sys\tsplice(rfd int, roff *_loff_t, wfd int, woff *_loff_t, len int, flags int) (n int64, err error)\n-//splice(rfd int, roff *_loff_t, wfd int, woff *_loff_t, len Size_t, flags uint) Ssize_t\n+//splice(rfd _C_int, roff *_loff_t, wfd _C_int, woff *_loff_t, len Size_t, flags _C_uint) Ssize_t\n func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {\n \tvar lroff _loff_t\n \tvar plroff *_loff_t\n@@ -364,16 +364,16 @@ func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n i\n }\n \n //sys\tStatfs(path string, buf *Statfs_t) (err error)\n-//statfs(path *byte, buf *Statfs_t) int\n+//statfs(path *byte, buf *Statfs_t) _C_int\n \n //sys\tSyncFileRange(fd int, off int64, n int64, flags int) (err error)\n-//sync_file_range(fd int, off Offset_t, n Offset_t, flags uint) int\n+//sync_file_range(fd _C_int, off Offset_t, n Offset_t, flags _C_uint) _C_int\n \n //sysnb\tSysinfo(info *Sysinfo_t) (err error)\n-//sysinfo(info *Sysinfo_t) int\n+//sysinfo(info *Sysinfo_t) _C_int\n \n //sys\tTee(rfd int, wfd int, len int, flags int) (n int64, err error)\n-//tee(rfd int, wfd int, len Size_t, flags uint) Ssize_t\n+//tee(rfd _C_int, wfd _C_int, len Size_t, flags _C_uint) Ssize_t\n \n func Tgkill(tgid int, tid int, sig Signal) error {\n \tr1, _, errno := Syscall(SYS_TGKILL, uintptr(tgid), uintptr(tid), uintptr(sig))\n@@ -384,17 +384,17 @@ func Tgkill(tgid int, tid int, sig Signal) error {\n }\n \n //sys\tunlinkat(dirfd int, path string, flags int) (err error)\n-//unlinkat(dirfd int, path *byte, flags int) int\n+//unlinkat(dirfd _C_int, path *byte, flags _C_int) _C_int\n \n func Unlinkat(dirfd int, path string) (err error) {\n \treturn unlinkat(dirfd, path, 0)\n }\n \n //sys\tUnmount(target string, flags int) (err error) = SYS_UMOUNT2\n-//umount2(target *byte, flags int) int\n+//umount2(target *byte, flags _C_int) _C_int\n \n //sys\tUnshare(flags int) (err error)\n-//unshare(flags int) int\n+//unshare(flags _C_int) _C_int\n \n //sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n-//ustat(dev _dev_t, ubuf *Ustat_t) int\n+//ustat(dev _dev_t, ubuf *Ustat_t) _C_int"}, {"sha": "bdf0fda6c5417076b2d18f0ca6197fc17a67ebbe", "filename": "libgo/go/syscall/libcall_linux_386.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_386.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -7,7 +7,7 @@\n package syscall\n \n //sys\tIoperm(from int, num int, on int) (err error)\n-//ioperm(from _C_long, num _C_long, on int) int\n+//ioperm(from _C_long, num _C_long, on _C_int) _C_int\n \n //sys\tIopl(level int) (err error)\n-//iopl(level int) int\n+//iopl(level _C_int) _C_int"}, {"sha": "13ccf05a6a092c41feb295a3e6f98ef13a14c71b", "filename": "libgo/go/syscall/libcall_linux_alpha.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_alpha.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_alpha.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_alpha.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -7,7 +7,7 @@\n package syscall\n \n //sys\tIoperm(from int, num int, on int) (err error)\n-//ioperm(from _C_long, num _C_long, on int) int\n+//ioperm(from _C_long, num _C_long, on _C_int) _C_int\n \n //sys\tIopl(level int) (err error)\n-//iopl(level int) int\n+//iopl(level _C_int) _C_int"}, {"sha": "675de3d945a7788d80c395b3f6ea87ae732c42f6", "filename": "libgo/go/syscall/libcall_linux_amd64.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_amd64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_amd64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_amd64.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -7,7 +7,7 @@\n package syscall\n \n //sys\tIoperm(from int, num int, on int) (err error)\n-//ioperm(from _C_long, num _C_long, on int) int\n+//ioperm(from _C_long, num _C_long, on _C_int) _C_int\n \n //sys\tIopl(level int) (err error)\n-//iopl(level int) int\n+//iopl(level _C_int) _C_int"}, {"sha": "90da2ae04e5fb5b527d081f223a2776ab94be988", "filename": "libgo/go/syscall/libcall_linux_utimesnano.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -9,7 +9,7 @@ package syscall\n import \"unsafe\"\n \n //sys\tutimensat(dirfd int, path string, times *[2]Timespec, flags int) (err error)\n-//utimensat(dirfd int, path *byte, times *[2]Timespec, flags int) int\n+//utimensat(dirfd _C_int, path *byte, times *[2]Timespec, flags _C_int) _C_int\n func UtimesNano(path string, ts []Timespec) (err error) {\n \tif len(ts) != 2 {\n \t\treturn EINVAL"}, {"sha": "1e7823b541cb3f6dfab73ce0586e4a793983027f", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -74,7 +74,7 @@ func Getcwd(buf []byte) (n int, err error) {\n }\n \n //sysnb\tgetgroups(size int, list *Gid_t) (nn int, err error)\n-//getgroups(size int, list *Gid_t) _C_int\n+//getgroups(size _C_int, list *Gid_t) _C_int\n \n func Getgroups() (gids []int, err error) {\n \tn, err := getgroups(0, nil)"}, {"sha": "20eba22a302d8362b8f2fa91747a57170f5a5636", "filename": "libgo/go/syscall/libcall_solaris_386.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -6,7 +6,7 @@ package syscall\n \n // 32-bit Solaris 2/x86 needs to use _nuname internally, cf. <sys/utsname.h>.\n //sysnb\tUname(buf *Utsname) (err error)\n-//_nuname(buf *Utsname) int\n+//_nuname(buf *Utsname) _C_int\n \n //sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n-//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n+//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "50863fadf1809256b80a5c0d180c1ae2e530295d", "filename": "libgo/go/syscall/libcall_solaris_sparc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -5,4 +5,4 @@\n package syscall\n \n //sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n-//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n+//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "e8ab1eb27ac947cc0c0d18bbee7c2dafd491ab09", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540817f4effea70ca4389cc69075d736a3b44c56/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=540817f4effea70ca4389cc69075d736a3b44c56", "patch": "@@ -429,8 +429,10 @@ echo \"type Socklen_t _socklen_t\" >> ${OUT}\n sizeof_int=`grep '^const ___SIZEOF_INT__ = ' gen-sysinfo.go | sed -e 's/.*= //'`\n if test \"$sizeof_int\" = \"4\"; then\n   echo \"type _C_int int32\" >> ${OUT}\n+  echo \"type _C_uint uint32\" >> ${OUT}\n elif test \"$sizeof_int\" = \"8\"; then\n   echo \"type _C_int int64\" >> ${OUT}\n+  echo \"type _C_uint uint64\" >> ${OUT}\n else\n   echo 1>&2 \"mksysinfo.sh: could not determine size of int (got $sizeof_int)\"\n   exit 1"}]}