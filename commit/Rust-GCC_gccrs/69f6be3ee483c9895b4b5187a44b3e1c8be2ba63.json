{"sha": "69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "node_id": "C_kwDOANBUbNoAKDY5ZjZiZTNlZTQ4M2M5ODk1YjRiNTE4N2E0NGIzZTFjOGJlMmJhNjM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-29T15:17:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-29T15:17:03Z"}, "message": "Merge #846\n\n846: HIR visitor refactor r=philberty a=dkm\n\nThis is the first step of a bigger refactor (see #825).\r\n\r\nThis patch introduces a new HIRFullVisitor with default implementations for all\r\nvisitor methods. This visitor is used as base classe for several existing HIR\r\nvisitors that also currently define empty behavior (eg. TypeCheckBase,\r\nConstFoldBase, ...).\r\n\r\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "2f24331cdd2ea739ade92169f2ff4fb031b730f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f24331cdd2ea739ade92169f2ff4fb031b730f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhzHvvCRBK7hj4Ov3rIwAA9loIAI98hahcXjXReFYqGM5LgFI1\nc9yvJ/DzT0B3bj8B637KMUpMY8wjnOQ9pxzW8lb/qxTBWhBMh+KDftHSga0kQcb5\nP4To7NNEeJvVN1+KtXuUrMUq9DyrwY3wHrmXVh8chuIHgi+mCU8e9us1KQaXydxf\n395DXzgkjtCMZ9RERgDw2/Dx6S4Gb2fJ35Rfdr3xS0nVnM6ytk4Bxx9GOYeLG9ez\nOkd6dHPcmuOa9PPTu4Qrs+EIGwaGQrbYuZIabE5bTm+1koHtFnRAdW/uBDOqfbbh\nOnQlb9PUF53Z6tSgRMvLARjp7Ht37FOeMbSQzqh8C5yPufcN5diWrR+afZi7tfk=\n=i0Me\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f24331cdd2ea739ade92169f2ff4fb031b730f0\nparent 4c5ebc08e687bf749d548774df86e2a5cb69ebce\nparent f9b6c0caf816bd02ca39fae0ecf2cb68e1d792e2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640791023 +0000\ncommitter GitHub <noreply@github.com> 1640791023 +0000\n\nMerge #846\n\n846: HIR visitor refactor r=philberty a=dkm\n\nThis is the first step of a bigger refactor (see #825).\r\n\r\nThis patch introduces a new HIRFullVisitor with default implementations for all\r\nvisitor methods. This visitor is used as base classe for several existing HIR\r\nvisitors that also currently define empty behavior (eg. TypeCheckBase,\r\nConstFoldBase, ...).\r\n\r\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5ebc08e687bf749d548774df86e2a5cb69ebce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5ebc08e687bf749d548774df86e2a5cb69ebce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5ebc08e687bf749d548774df86e2a5cb69ebce"}, {"sha": "f9b6c0caf816bd02ca39fae0ecf2cb68e1d792e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b6c0caf816bd02ca39fae0ecf2cb68e1d792e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b6c0caf816bd02ca39fae0ecf2cb68e1d792e2"}], "stats": {"total": 1533, "additions": 466, "deletions": 1067}, "files": [{"sha": "b3ae1f61e15410b05fec8632cb059e6e7a2f2615", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 1, "deletions": 158, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -25,168 +25,11 @@\n namespace Rust {\n namespace Compile {\n \n-class HIRCompileBase : public HIR::HIRVisitor\n+class HIRCompileBase : public HIR::HIRFullVisitorBase\n {\n public:\n   virtual ~HIRCompileBase () {}\n \n-  // rust-ast.h\n-  virtual void visit (HIR::IdentifierExpr &ident_expr) {}\n-  virtual void visit (HIR::Lifetime &lifetime) {}\n-  virtual void visit (HIR::LifetimeParam &lifetime_param) {}\n-\n-  // rust-path.h\n-  virtual void visit (HIR::PathInExpression &path) {}\n-  virtual void visit (HIR::TypePathSegment &segment) {}\n-  virtual void visit (HIR::TypePathSegmentGeneric &segment) {}\n-  virtual void visit (HIR::TypePathSegmentFunction &segment) {}\n-  virtual void visit (HIR::TypePath &path) {}\n-  virtual void visit (HIR::QualifiedPathInExpression &path) {}\n-  virtual void visit (HIR::QualifiedPathInType &path) {}\n-\n-  // rust-expr.h\n-  virtual void visit (HIR::LiteralExpr &expr) {}\n-  virtual void visit (HIR::BorrowExpr &expr) {}\n-  virtual void visit (HIR::DereferenceExpr &expr) {}\n-  virtual void visit (HIR::ErrorPropagationExpr &expr) {}\n-  virtual void visit (HIR::NegationExpr &expr) {}\n-  virtual void visit (HIR::ArithmeticOrLogicalExpr &expr) {}\n-  virtual void visit (HIR::ComparisonExpr &expr) {}\n-  virtual void visit (HIR::LazyBooleanExpr &expr) {}\n-  virtual void visit (HIR::TypeCastExpr &expr) {}\n-  virtual void visit (HIR::AssignmentExpr &expr) {}\n-  virtual void visit (HIR::CompoundAssignmentExpr &expr) {}\n-  virtual void visit (HIR::GroupedExpr &expr) {}\n-  // virtual void visit(ArrayElems& elems) {}\n-  virtual void visit (HIR::ArrayElemsValues &elems) {}\n-  virtual void visit (HIR::ArrayElemsCopied &elems) {}\n-  virtual void visit (HIR::ArrayExpr &expr) {}\n-  virtual void visit (HIR::ArrayIndexExpr &expr) {}\n-  virtual void visit (HIR::TupleExpr &expr) {}\n-  virtual void visit (HIR::TupleIndexExpr &expr) {}\n-  virtual void visit (HIR::StructExprStruct &expr) {}\n-  // virtual void visit(StructExprField& field) {}\n-  virtual void visit (HIR::StructExprFieldIdentifier &field) {}\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &field) {}\n-  virtual void visit (HIR::StructExprFieldIndexValue &field) {}\n-  virtual void visit (HIR::StructExprStructFields &expr) {}\n-  virtual void visit (HIR::StructExprStructBase &expr) {}\n-  virtual void visit (HIR::CallExpr &expr) {}\n-  virtual void visit (HIR::MethodCallExpr &expr) {}\n-  virtual void visit (HIR::FieldAccessExpr &expr) {}\n-  virtual void visit (HIR::ClosureExprInner &expr) {}\n-  virtual void visit (HIR::BlockExpr &expr) {}\n-  virtual void visit (HIR::ClosureExprInnerTyped &expr) {}\n-  virtual void visit (HIR::ContinueExpr &expr) {}\n-  virtual void visit (HIR::BreakExpr &expr) {}\n-  virtual void visit (HIR::RangeFromToExpr &expr) {}\n-  virtual void visit (HIR::RangeFromExpr &expr) {}\n-  virtual void visit (HIR::RangeToExpr &expr) {}\n-  virtual void visit (HIR::RangeFullExpr &expr) {}\n-  virtual void visit (HIR::RangeFromToInclExpr &expr) {}\n-  virtual void visit (HIR::RangeToInclExpr &expr) {}\n-  virtual void visit (HIR::ReturnExpr &expr) {}\n-  virtual void visit (HIR::UnsafeBlockExpr &expr) {}\n-  virtual void visit (HIR::LoopExpr &expr) {}\n-  virtual void visit (HIR::WhileLoopExpr &expr) {}\n-  virtual void visit (HIR::WhileLetLoopExpr &expr) {}\n-  virtual void visit (HIR::ForLoopExpr &expr) {}\n-  virtual void visit (HIR::IfExpr &expr) {}\n-  virtual void visit (HIR::IfExprConseqElse &expr) {}\n-  virtual void visit (HIR::IfExprConseqIf &expr) {}\n-  virtual void visit (HIR::IfExprConseqIfLet &expr) {}\n-  virtual void visit (HIR::IfLetExpr &expr) {}\n-  virtual void visit (HIR::IfLetExprConseqElse &expr) {}\n-  virtual void visit (HIR::IfLetExprConseqIf &expr) {}\n-  virtual void visit (HIR::IfLetExprConseqIfLet &expr) {}\n-  // virtual void visit(MatchCase& match_case) {}\n-  // virtual void visit (HIR::MatchCaseBlockExpr &match_case) {}\n-  // virtual void visit (HIR::MatchCaseExpr &match_case) {}\n-  virtual void visit (HIR::MatchExpr &expr) {}\n-  virtual void visit (HIR::AwaitExpr &expr) {}\n-  virtual void visit (HIR::AsyncBlockExpr &expr) {}\n-\n-  // rust-item.h\n-  virtual void visit (HIR::TypeParam &param) {}\n-  // virtual void visit(WhereClauseItem& item) {}\n-  virtual void visit (HIR::LifetimeWhereClauseItem &item) {}\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &item) {}\n-  virtual void visit (HIR::Module &module) {}\n-  virtual void visit (HIR::ExternCrate &crate) {}\n-  // virtual void visit(UseTree& use_tree) {}\n-  virtual void visit (HIR::UseTreeGlob &use_tree) {}\n-  virtual void visit (HIR::UseTreeList &use_tree) {}\n-  virtual void visit (HIR::UseTreeRebind &use_tree) {}\n-  virtual void visit (HIR::UseDeclaration &use_decl) {}\n-  virtual void visit (HIR::Function &function) {}\n-  virtual void visit (HIR::TypeAlias &type_alias) {}\n-  virtual void visit (HIR::StructStruct &struct_item) {}\n-  virtual void visit (HIR::TupleStruct &tuple_struct) {}\n-  virtual void visit (HIR::EnumItem &item) {}\n-  virtual void visit (HIR::EnumItemTuple &item) {}\n-  virtual void visit (HIR::EnumItemStruct &item) {}\n-  virtual void visit (HIR::EnumItemDiscriminant &item) {}\n-  virtual void visit (HIR::Enum &enum_item) {}\n-  virtual void visit (HIR::Union &union_item) {}\n-  virtual void visit (HIR::ConstantItem &const_item) {}\n-  virtual void visit (HIR::StaticItem &static_item) {}\n-  virtual void visit (HIR::TraitItemFunc &item) {}\n-  virtual void visit (HIR::TraitItemConst &item) {}\n-  virtual void visit (HIR::TraitItemType &item) {}\n-  virtual void visit (HIR::Trait &trait) {}\n-  virtual void visit (HIR::ImplBlock &impl) {}\n-\n-  virtual void visit (HIR::ExternalStaticItem &item) {}\n-  virtual void visit (HIR::ExternalFunctionItem &item) {}\n-  virtual void visit (HIR::ExternBlock &block) {}\n-\n-  // rust-pattern.h\n-  virtual void visit (HIR::LiteralPattern &pattern) {}\n-  virtual void visit (HIR::IdentifierPattern &pattern) {}\n-  virtual void visit (HIR::WildcardPattern &pattern) {}\n-  // virtual void visit(RangePatternBound& bound) {}\n-  virtual void visit (HIR::RangePatternBoundLiteral &bound) {}\n-  virtual void visit (HIR::RangePatternBoundPath &bound) {}\n-  virtual void visit (HIR::RangePatternBoundQualPath &bound) {}\n-  virtual void visit (HIR::RangePattern &pattern) {}\n-  virtual void visit (HIR::ReferencePattern &pattern) {}\n-  // virtual void visit(StructPatternField& field) {}\n-  virtual void visit (HIR::StructPatternFieldTuplePat &field) {}\n-  virtual void visit (HIR::StructPatternFieldIdentPat &field) {}\n-  virtual void visit (HIR::StructPatternFieldIdent &field) {}\n-  virtual void visit (HIR::StructPattern &pattern) {}\n-  // virtual void visit(TupleStructItems& tuple_items) {}\n-  virtual void visit (HIR::TupleStructItemsNoRange &tuple_items) {}\n-  virtual void visit (HIR::TupleStructItemsRange &tuple_items) {}\n-  virtual void visit (HIR::TupleStructPattern &pattern) {}\n-  // virtual void visit(TuplePatternItems& tuple_items) {}\n-  virtual void visit (HIR::TuplePatternItemsMultiple &tuple_items) {}\n-  virtual void visit (HIR::TuplePatternItemsRanged &tuple_items) {}\n-  virtual void visit (HIR::TuplePattern &pattern) {}\n-  virtual void visit (HIR::GroupedPattern &pattern) {}\n-  virtual void visit (HIR::SlicePattern &pattern) {}\n-\n-  // rust-stmt.h\n-  virtual void visit (HIR::EmptyStmt &stmt) {}\n-  virtual void visit (HIR::LetStmt &stmt) {}\n-  virtual void visit (HIR::ExprStmtWithoutBlock &stmt) {}\n-  virtual void visit (HIR::ExprStmtWithBlock &stmt) {}\n-\n-  // rust-type.h\n-  virtual void visit (HIR::TraitBound &bound) {}\n-  virtual void visit (HIR::ImplTraitType &type) {}\n-  virtual void visit (HIR::TraitObjectType &type) {}\n-  virtual void visit (HIR::ParenthesisedType &type) {}\n-  virtual void visit (HIR::ImplTraitTypeOneBound &type) {}\n-  virtual void visit (HIR::TupleType &type) {}\n-  virtual void visit (HIR::NeverType &type) {}\n-  virtual void visit (HIR::RawPointerType &type) {}\n-  virtual void visit (HIR::ReferenceType &type) {}\n-  virtual void visit (HIR::ArrayType &type) {}\n-  virtual void visit (HIR::SliceType &type) {}\n-  virtual void visit (HIR::InferredType &type) {}\n-  virtual void visit (HIR::BareFunctionType &type) {}\n-\n protected:\n   HIRCompileBase (Context *ctx) : ctx (ctx) {}\n "}, {"sha": "40da4c13eb734ac08ebb49576fc603fe3f29d18f", "filename": "gcc/rust/hir/tree/rust-hir-cond-compilation.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-cond-compilation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-cond-compilation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-cond-compilation.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -38,7 +38,7 @@ class ConfigurationPredicate\n   }\n \n   // not sure if I'll use this but here anyway\n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n protected:\n   // Clone function impl to be overriden in base classes\n@@ -67,7 +67,7 @@ class ConfigurationOption : public ConfigurationPredicate\n   // Name-only constructor\n   ConfigurationOption (Identifier option_name) : option_name (option_name) {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -96,7 +96,7 @@ class ConfigurationAll : public ConfigurationPredicate\n     : predicate_list (predicate_list)\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -119,7 +119,7 @@ class ConfigurationAny : public ConfigurationPredicate\n     : predicate_list (predicate_list)\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -159,7 +159,7 @@ class ConfigurationNot : public ConfigurationPredicate\n   ConfigurationNot (ConfigurationNot &&other) = default;\n   ConfigurationNot &operator= (ConfigurationNot &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}, {"sha": "678455051cfb8048a4f230d2e320f8e9528dba22", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -93,7 +93,7 @@ class LiteralExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Literal *get_literal () { return &literal; }\n \n@@ -186,7 +186,7 @@ class BorrowExpr : public OperatorExpr\n       mut (mut), double_borrow (is_double_borrow)\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Mutability get_mut () const { return mut; }\n   bool is_mut () const { return mut == Mutability::Mut; }\n@@ -222,7 +222,7 @@ class DereferenceExpr : public OperatorExpr\n \t\t    std::move (outer_attribs), locus)\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -254,7 +254,7 @@ class ErrorPropagationExpr : public OperatorExpr\n \t\t    std::move (outer_attribs), locus)\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -298,7 +298,7 @@ class NegationExpr : public OperatorExpr\n       expr_type (expr_kind)\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -366,10 +366,10 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n   ArithmeticOrLogicalExpr &operator= (ArithmeticOrLogicalExpr &&other)\n     = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n-  void visit_lhs (HIRVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n-  void visit_rhs (HIRVisitor &vis) { right_expr->accept_vis (vis); }\n+  void visit_lhs (HIRFullVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n+  void visit_rhs (HIRFullVisitor &vis) { right_expr->accept_vis (vis); }\n \n   Expr *get_lhs () { return main_or_left_expr.get (); }\n   Expr *get_rhs () { return right_expr.get (); }\n@@ -440,7 +440,7 @@ class ComparisonExpr : public OperatorExpr\n   ComparisonExpr (ComparisonExpr &&other) = default;\n   ComparisonExpr &operator= (ComparisonExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_lhs () { return main_or_left_expr.get (); }\n   Expr *get_rhs () { return right_expr.get (); }\n@@ -513,7 +513,7 @@ class LazyBooleanExpr : public OperatorExpr\n \n   ExprType get_expr_type () const { return expr_type; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_lhs () { return main_or_left_expr.get (); }\n \n@@ -574,7 +574,7 @@ class TypeCastExpr : public OperatorExpr\n   TypeCastExpr (TypeCastExpr &&other) = default;\n   TypeCastExpr &operator= (TypeCastExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_casted_expr ()\n   {\n@@ -642,10 +642,10 @@ class AssignmentExpr : public OperatorExpr\n   AssignmentExpr (AssignmentExpr &&other) = default;\n   AssignmentExpr &operator= (AssignmentExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n-  void visit_lhs (HIRVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n-  void visit_rhs (HIRVisitor &vis) { right_expr->accept_vis (vis); }\n+  void visit_lhs (HIRFullVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n+  void visit_rhs (HIRFullVisitor &vis) { right_expr->accept_vis (vis); }\n \n   Expr *get_lhs () { return main_or_left_expr.get (); }\n   Expr *get_rhs () { return right_expr.get (); }\n@@ -714,7 +714,7 @@ class CompoundAssignmentExpr : public OperatorExpr\n   CompoundAssignmentExpr (CompoundAssignmentExpr &&other) = default;\n   CompoundAssignmentExpr &operator= (CompoundAssignmentExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_left_expr ()\n   {\n@@ -728,8 +728,8 @@ class CompoundAssignmentExpr : public OperatorExpr\n     return right_expr;\n   }\n \n-  void visit_lhs (HIRVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n-  void visit_rhs (HIRVisitor &vis) { right_expr->accept_vis (vis); }\n+  void visit_lhs (HIRFullVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n+  void visit_rhs (HIRFullVisitor &vis) { right_expr->accept_vis (vis); }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -786,7 +786,7 @@ class GroupedExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_expr_in_parens ()\n   {\n@@ -825,7 +825,7 @@ class ArrayElems\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n protected:\n   // pure virtual clone implementation\n@@ -868,7 +868,7 @@ class ArrayElemsValues : public ArrayElems\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   size_t get_num_elements () const { return values.size (); }\n \n@@ -916,7 +916,7 @@ class ArrayElemsCopied : public ArrayElems\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_elem_to_copy () { return elem_to_copy.get (); }\n \n@@ -983,7 +983,7 @@ class ArrayExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   ArrayElems *get_internal_elements () { return internal_elements.get (); };\n \n@@ -1048,7 +1048,7 @@ class ArrayIndexExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_array_expr () { return array_expr.get (); }\n   Expr *get_index_expr () { return index_expr.get (); }\n@@ -1126,7 +1126,7 @@ class TupleExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   const std::vector<std::unique_ptr<Expr> > &get_tuple_elems () const\n   {\n@@ -1200,7 +1200,7 @@ class TupleIndexExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_tuple_expr ()\n   {\n@@ -1266,7 +1266,7 @@ class StructExprStruct : public StructExpr\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1346,7 +1346,7 @@ class StructExprField\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   Analysis::NodeMapping &get_mappings () { return mappings; }\n \n@@ -1380,7 +1380,7 @@ class StructExprFieldIdentifier : public StructExprField\n \n   std::string as_string () const override { return field_name; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Identifier get_field_name () const { return field_name; }\n \n@@ -1449,7 +1449,7 @@ class StructExprFieldIdentifierValue : public StructExprFieldWithVal\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1477,7 +1477,7 @@ class StructExprFieldIndexValue : public StructExprFieldWithVal\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   TupleIndex get_tuple_index () const { return index; };\n \n@@ -1549,7 +1549,7 @@ class StructExprStructFields : public StructExprStruct\n   StructExprStructFields (StructExprStructFields &&other) = default;\n   StructExprStructFields &operator= (StructExprStructFields &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<StructExprField> > &get_fields ()\n   {\n@@ -1605,7 +1605,7 @@ class StructExprStructBase : public StructExprStruct\n       struct_base (std::move (base_struct))\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n   StructBase *get_struct_base () { return &struct_base; }\n \n protected:\n@@ -1678,7 +1678,7 @@ class CallExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_fnexpr () { return function.get (); }\n \n@@ -1760,7 +1760,7 @@ class MethodCallExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_receiver () { return receiver; }\n \n@@ -1836,7 +1836,7 @@ class FieldAccessExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_receiver_expr ()\n   {\n@@ -1980,7 +1980,7 @@ class ClosureExprInner : public ClosureExpr\n   ClosureExprInner (ClosureExprInner &&other) = default;\n   ClosureExprInner &operator= (ClosureExprInner &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2074,7 +2074,7 @@ class BlockExpr : public ExprWithBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n \n@@ -2159,7 +2159,7 @@ class ClosureExprInnerTyped : public ClosureExpr\n   ClosureExprInnerTyped (ClosureExprInnerTyped &&other) = default;\n   ClosureExprInnerTyped &operator= (ClosureExprInnerTyped &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2199,7 +2199,7 @@ class ContinueExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Lifetime &get_label () { return label; }\n \n@@ -2278,7 +2278,7 @@ class BreakExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Lifetime &get_label () { return label; }\n \n@@ -2349,7 +2349,7 @@ class RangeFromToExpr : public RangeExpr\n   RangeFromToExpr (RangeFromToExpr &&other) = default;\n   RangeFromToExpr &operator= (RangeFromToExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2399,7 +2399,7 @@ class RangeFromExpr : public RangeExpr\n   RangeFromExpr (RangeFromExpr &&other) = default;\n   RangeFromExpr &operator= (RangeFromExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2450,7 +2450,7 @@ class RangeToExpr : public RangeExpr\n   RangeToExpr (RangeToExpr &&other) = default;\n   RangeToExpr &operator= (RangeToExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2480,7 +2480,7 @@ class RangeFullExpr : public RangeExpr\n   {}\n   // outer attributes not allowed\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2536,7 +2536,7 @@ class RangeFromToInclExpr : public RangeExpr\n   RangeFromToInclExpr (RangeFromToInclExpr &&other) = default;\n   RangeFromToInclExpr &operator= (RangeFromToInclExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2587,7 +2587,7 @@ class RangeToInclExpr : public RangeExpr\n   RangeToInclExpr (RangeToInclExpr &&other) = default;\n   RangeToInclExpr &operator= (RangeToInclExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2653,7 +2653,7 @@ class ReturnExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_expr () { return return_expr.get (); }\n \n@@ -2714,7 +2714,7 @@ class UnsafeBlockExpr : public ExprWithBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<BlockExpr> &get_block_expr () { return expr; }\n \n@@ -2831,7 +2831,7 @@ class LoopExpr : public BaseLoopExpr\n \t\t    std::move (loop_label), std::move (outer_attribs))\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2886,7 +2886,7 @@ class WhileLoopExpr : public BaseLoopExpr\n   WhileLoopExpr (WhileLoopExpr &&other) = default;\n   WhileLoopExpr &operator= (WhileLoopExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_predicate_expr () { return condition; }\n \n@@ -2961,7 +2961,7 @@ class WhileLetLoopExpr : public BaseLoopExpr\n   WhileLetLoopExpr (WhileLetLoopExpr &&other) = default;\n   WhileLetLoopExpr &operator= (WhileLetLoopExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_cond () { return condition; }\n \n@@ -3026,7 +3026,7 @@ class ForLoopExpr : public BaseLoopExpr\n   ForLoopExpr (ForLoopExpr &&other) = default;\n   ForLoopExpr &operator= (ForLoopExpr &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_iterator_expr () { return iterator_expr; }\n \n@@ -3101,10 +3101,10 @@ class IfExpr : public ExprWithBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n-  void vis_if_condition (HIRVisitor &vis) { condition->accept_vis (vis); }\n-  void vis_if_block (HIRVisitor &vis) { if_block->accept_vis (vis); }\n+  void vis_if_condition (HIRFullVisitor &vis) { condition->accept_vis (vis); }\n+  void vis_if_block (HIRFullVisitor &vis) { if_block->accept_vis (vis); }\n \n   Expr *get_if_condition () { return condition.get (); }\n   BlockExpr *get_if_block () { return if_block.get (); }\n@@ -3163,9 +3163,9 @@ class IfExprConseqElse : public IfExpr\n   IfExprConseqElse (IfExprConseqElse &&other) = default;\n   IfExprConseqElse &operator= (IfExprConseqElse &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n-  void vis_else_block (HIRVisitor &vis) { else_block->accept_vis (vis); }\n+  void vis_else_block (HIRFullVisitor &vis) { else_block->accept_vis (vis); }\n \n   BlockExpr *get_else_block () { return else_block.get (); }\n \n@@ -3230,9 +3230,9 @@ class IfExprConseqIf : public IfExpr\n   IfExprConseqIf (IfExprConseqIf &&other) = default;\n   IfExprConseqIf &operator= (IfExprConseqIf &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n-  void vis_conseq_if_expr (HIRVisitor &vis)\n+  void vis_conseq_if_expr (HIRFullVisitor &vis)\n   {\n     conseq_if_expr->accept_vis (vis);\n   }\n@@ -3325,7 +3325,7 @@ class IfLetExpr : public ExprWithBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3385,7 +3385,7 @@ class IfExprConseqIfLet : public IfExpr\n   IfExprConseqIfLet (IfExprConseqIfLet &&other) = default;\n   IfExprConseqIfLet &operator= (IfExprConseqIfLet &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3452,7 +3452,7 @@ class IfLetExprConseqElse : public IfLetExpr\n   IfLetExprConseqElse (IfLetExprConseqElse &&other) = default;\n   IfLetExprConseqElse &operator= (IfLetExprConseqElse &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3518,7 +3518,7 @@ class IfLetExprConseqIf : public IfLetExpr\n   IfLetExprConseqIf (IfLetExprConseqIf &&other) = default;\n   IfLetExprConseqIf &operator= (IfLetExprConseqIf &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3584,7 +3584,7 @@ class IfLetExprConseqIfLet : public IfLetExpr\n   IfLetExprConseqIfLet (IfLetExprConseqIfLet &&other) = default;\n   IfLetExprConseqIfLet &operator= (IfLetExprConseqIfLet &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3756,7 +3756,7 @@ class MatchCaseBlockExpr : public MatchCase\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3800,7 +3800,7 @@ class MatchCaseExpr : public MatchCase\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3868,7 +3868,7 @@ class MatchExpr : public ExprWithBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_scrutinee_expr ()\n   {\n@@ -3931,7 +3931,7 @@ class AwaitExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3984,7 +3984,7 @@ class AsyncBlockExpr : public ExprWithBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}, {"sha": "adc8eeae55e9a72febddac5fbb417fa5695e0e5d", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 133, "deletions": 133, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -3750,799 +3750,799 @@ Module::add_crate_name (std::vector<std::string> &names) const\n }\n \n void\n-IdentifierExpr::accept_vis (HIRVisitor &vis)\n+IdentifierExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Lifetime::accept_vis (HIRVisitor &vis)\n+Lifetime::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LifetimeParam::accept_vis (HIRVisitor &vis)\n+LifetimeParam::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-PathInExpression::accept_vis (HIRVisitor &vis)\n+PathInExpression::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypePathSegment::accept_vis (HIRVisitor &vis)\n+TypePathSegment::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypePathSegmentGeneric::accept_vis (HIRVisitor &vis)\n+TypePathSegmentGeneric::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypePathSegmentFunction::accept_vis (HIRVisitor &vis)\n+TypePathSegmentFunction::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypePath::accept_vis (HIRVisitor &vis)\n+TypePath::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-QualifiedPathInExpression::accept_vis (HIRVisitor &vis)\n+QualifiedPathInExpression::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-QualifiedPathInType::accept_vis (HIRVisitor &vis)\n+QualifiedPathInType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LiteralExpr::accept_vis (HIRVisitor &vis)\n+LiteralExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-BorrowExpr::accept_vis (HIRVisitor &vis)\n+BorrowExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-DereferenceExpr::accept_vis (HIRVisitor &vis)\n+DereferenceExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ErrorPropagationExpr::accept_vis (HIRVisitor &vis)\n+ErrorPropagationExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-NegationExpr::accept_vis (HIRVisitor &vis)\n+NegationExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArithmeticOrLogicalExpr::accept_vis (HIRVisitor &vis)\n+ArithmeticOrLogicalExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ComparisonExpr::accept_vis (HIRVisitor &vis)\n+ComparisonExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LazyBooleanExpr::accept_vis (HIRVisitor &vis)\n+LazyBooleanExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypeCastExpr::accept_vis (HIRVisitor &vis)\n+TypeCastExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-AssignmentExpr::accept_vis (HIRVisitor &vis)\n+AssignmentExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-CompoundAssignmentExpr::accept_vis (HIRVisitor &vis)\n+CompoundAssignmentExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-GroupedExpr::accept_vis (HIRVisitor &vis)\n+GroupedExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayElemsValues::accept_vis (HIRVisitor &vis)\n+ArrayElemsValues::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayElemsCopied::accept_vis (HIRVisitor &vis)\n+ArrayElemsCopied::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayExpr::accept_vis (HIRVisitor &vis)\n+ArrayExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayIndexExpr::accept_vis (HIRVisitor &vis)\n+ArrayIndexExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleExpr::accept_vis (HIRVisitor &vis)\n+TupleExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleIndexExpr::accept_vis (HIRVisitor &vis)\n+TupleIndexExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprStruct::accept_vis (HIRVisitor &vis)\n+StructExprStruct::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprFieldIdentifier::accept_vis (HIRVisitor &vis)\n+StructExprFieldIdentifier::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprFieldIdentifierValue::accept_vis (HIRVisitor &vis)\n+StructExprFieldIdentifierValue::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprFieldIndexValue::accept_vis (HIRVisitor &vis)\n+StructExprFieldIndexValue::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprStructFields::accept_vis (HIRVisitor &vis)\n+StructExprStructFields::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprStructBase::accept_vis (HIRVisitor &vis)\n+StructExprStructBase::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-CallExpr::accept_vis (HIRVisitor &vis)\n+CallExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-MethodCallExpr::accept_vis (HIRVisitor &vis)\n+MethodCallExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-FieldAccessExpr::accept_vis (HIRVisitor &vis)\n+FieldAccessExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ClosureExprInner::accept_vis (HIRVisitor &vis)\n+ClosureExprInner::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-BlockExpr::accept_vis (HIRVisitor &vis)\n+BlockExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ClosureExprInnerTyped::accept_vis (HIRVisitor &vis)\n+ClosureExprInnerTyped::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ContinueExpr::accept_vis (HIRVisitor &vis)\n+ContinueExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-BreakExpr::accept_vis (HIRVisitor &vis)\n+BreakExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangeFromToExpr::accept_vis (HIRVisitor &vis)\n+RangeFromToExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangeFromExpr::accept_vis (HIRVisitor &vis)\n+RangeFromExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangeToExpr::accept_vis (HIRVisitor &vis)\n+RangeToExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangeFullExpr::accept_vis (HIRVisitor &vis)\n+RangeFullExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangeFromToInclExpr::accept_vis (HIRVisitor &vis)\n+RangeFromToInclExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangeToInclExpr::accept_vis (HIRVisitor &vis)\n+RangeToInclExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ReturnExpr::accept_vis (HIRVisitor &vis)\n+ReturnExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-UnsafeBlockExpr::accept_vis (HIRVisitor &vis)\n+UnsafeBlockExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LoopExpr::accept_vis (HIRVisitor &vis)\n+LoopExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-WhileLoopExpr::accept_vis (HIRVisitor &vis)\n+WhileLoopExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-WhileLetLoopExpr::accept_vis (HIRVisitor &vis)\n+WhileLetLoopExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ForLoopExpr::accept_vis (HIRVisitor &vis)\n+ForLoopExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfExpr::accept_vis (HIRVisitor &vis)\n+IfExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfExprConseqElse::accept_vis (HIRVisitor &vis)\n+IfExprConseqElse::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfExprConseqIf::accept_vis (HIRVisitor &vis)\n+IfExprConseqIf::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfExprConseqIfLet::accept_vis (HIRVisitor &vis)\n+IfExprConseqIfLet::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfLetExpr::accept_vis (HIRVisitor &vis)\n+IfLetExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfLetExprConseqElse::accept_vis (HIRVisitor &vis)\n+IfLetExprConseqElse::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfLetExprConseqIf::accept_vis (HIRVisitor &vis)\n+IfLetExprConseqIf::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IfLetExprConseqIfLet::accept_vis (HIRVisitor &vis)\n+IfLetExprConseqIfLet::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n /*void\n-MatchCaseBlockExpr::accept_vis (HIRVisitor &vis)\n+MatchCaseBlockExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-MatchCaseExpr::accept_vis (HIRVisitor &vis)\n+MatchCaseExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }*/\n \n void\n-MatchExpr::accept_vis (HIRVisitor &vis)\n+MatchExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-AwaitExpr::accept_vis (HIRVisitor &vis)\n+AwaitExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-AsyncBlockExpr::accept_vis (HIRVisitor &vis)\n+AsyncBlockExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypeParam::accept_vis (HIRVisitor &vis)\n+TypeParam::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LifetimeWhereClauseItem::accept_vis (HIRVisitor &vis)\n+LifetimeWhereClauseItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypeBoundWhereClauseItem::accept_vis (HIRVisitor &vis)\n+TypeBoundWhereClauseItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Module::accept_vis (HIRVisitor &vis)\n+Module::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ExternCrate::accept_vis (HIRVisitor &vis)\n+ExternCrate::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-UseTreeGlob::accept_vis (HIRVisitor &vis)\n+UseTreeGlob::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-UseTreeList::accept_vis (HIRVisitor &vis)\n+UseTreeList::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-UseTreeRebind::accept_vis (HIRVisitor &vis)\n+UseTreeRebind::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-UseDeclaration::accept_vis (HIRVisitor &vis)\n+UseDeclaration::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Function::accept_vis (HIRVisitor &vis)\n+Function::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypeAlias::accept_vis (HIRVisitor &vis)\n+TypeAlias::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructStruct::accept_vis (HIRVisitor &vis)\n+StructStruct::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleStruct::accept_vis (HIRVisitor &vis)\n+TupleStruct::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-EnumItem::accept_vis (HIRVisitor &vis)\n+EnumItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-EnumItemTuple::accept_vis (HIRVisitor &vis)\n+EnumItemTuple::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-EnumItemStruct::accept_vis (HIRVisitor &vis)\n+EnumItemStruct::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-EnumItemDiscriminant::accept_vis (HIRVisitor &vis)\n+EnumItemDiscriminant::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Enum::accept_vis (HIRVisitor &vis)\n+Enum::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Union::accept_vis (HIRVisitor &vis)\n+Union::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ConstantItem::accept_vis (HIRVisitor &vis)\n+ConstantItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StaticItem::accept_vis (HIRVisitor &vis)\n+StaticItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TraitItemFunc::accept_vis (HIRVisitor &vis)\n+TraitItemFunc::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TraitItemConst::accept_vis (HIRVisitor &vis)\n+TraitItemConst::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TraitItemType::accept_vis (HIRVisitor &vis)\n+TraitItemType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Trait::accept_vis (HIRVisitor &vis)\n+Trait::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ImplBlock::accept_vis (HIRVisitor &vis)\n+ImplBlock::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ExternalStaticItem::accept_vis (HIRVisitor &vis)\n+ExternalStaticItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ExternalFunctionItem::accept_vis (HIRVisitor &vis)\n+ExternalFunctionItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ExternBlock::accept_vis (HIRVisitor &vis)\n+ExternBlock::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LiteralPattern::accept_vis (HIRVisitor &vis)\n+LiteralPattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-IdentifierPattern::accept_vis (HIRVisitor &vis)\n+IdentifierPattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-WildcardPattern::accept_vis (HIRVisitor &vis)\n+WildcardPattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangePatternBoundLiteral::accept_vis (HIRVisitor &vis)\n+RangePatternBoundLiteral::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangePatternBoundPath::accept_vis (HIRVisitor &vis)\n+RangePatternBoundPath::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangePatternBoundQualPath::accept_vis (HIRVisitor &vis)\n+RangePatternBoundQualPath::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RangePattern::accept_vis (HIRVisitor &vis)\n+RangePattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ReferencePattern::accept_vis (HIRVisitor &vis)\n+ReferencePattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructPatternFieldTuplePat::accept_vis (HIRVisitor &vis)\n+StructPatternFieldTuplePat::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructPatternFieldIdentPat::accept_vis (HIRVisitor &vis)\n+StructPatternFieldIdentPat::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructPatternFieldIdent::accept_vis (HIRVisitor &vis)\n+StructPatternFieldIdent::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructPattern::accept_vis (HIRVisitor &vis)\n+StructPattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleStructItemsNoRange::accept_vis (HIRVisitor &vis)\n+TupleStructItemsNoRange::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleStructItemsRange::accept_vis (HIRVisitor &vis)\n+TupleStructItemsRange::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleStructPattern::accept_vis (HIRVisitor &vis)\n+TupleStructPattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TuplePatternItemsMultiple::accept_vis (HIRVisitor &vis)\n+TuplePatternItemsMultiple::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TuplePatternItemsRanged::accept_vis (HIRVisitor &vis)\n+TuplePatternItemsRanged::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TuplePattern::accept_vis (HIRVisitor &vis)\n+TuplePattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-GroupedPattern::accept_vis (HIRVisitor &vis)\n+GroupedPattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-SlicePattern::accept_vis (HIRVisitor &vis)\n+SlicePattern::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-EmptyStmt::accept_vis (HIRVisitor &vis)\n+EmptyStmt::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LetStmt::accept_vis (HIRVisitor &vis)\n+LetStmt::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ExprStmtWithoutBlock::accept_vis (HIRVisitor &vis)\n+ExprStmtWithoutBlock::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ExprStmtWithBlock::accept_vis (HIRVisitor &vis)\n+ExprStmtWithBlock::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TraitBound::accept_vis (HIRVisitor &vis)\n+TraitBound::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ImplTraitType::accept_vis (HIRVisitor &vis)\n+ImplTraitType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TraitObjectType::accept_vis (HIRVisitor &vis)\n+TraitObjectType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ParenthesisedType::accept_vis (HIRVisitor &vis)\n+ParenthesisedType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ImplTraitTypeOneBound::accept_vis (HIRVisitor &vis)\n+ImplTraitTypeOneBound::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleType::accept_vis (HIRVisitor &vis)\n+TupleType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-NeverType::accept_vis (HIRVisitor &vis)\n+NeverType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-RawPointerType::accept_vis (HIRVisitor &vis)\n+RawPointerType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ReferenceType::accept_vis (HIRVisitor &vis)\n+ReferenceType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayType::accept_vis (HIRVisitor &vis)\n+ArrayType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-SliceType::accept_vis (HIRVisitor &vis)\n+SliceType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-InferredType::accept_vis (HIRVisitor &vis)\n+InferredType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-BareFunctionType::accept_vis (HIRVisitor &vis)\n+BareFunctionType::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }"}, {"sha": "fb45bfa6de441b35102507c64d4b2186d6d3f719", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -107,7 +107,7 @@ class TypeParam : public GenericParam\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Identifier get_type_representation () const { return type_representation; }\n \n@@ -157,7 +157,7 @@ class WhereClauseItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_mappings () const = 0;\n \n@@ -187,7 +187,7 @@ class LifetimeWhereClauseItem : public WhereClauseItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Lifetime &get_lifetime () { return lifetime; }\n \n@@ -268,7 +268,7 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<LifetimeParam> &get_for_lifetimes () { return for_lifetimes; }\n \n@@ -750,7 +750,7 @@ class Module : public VisItem\n   Module (Module &&other) = default;\n   Module &operator= (Module &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<Item>> &get_items () { return items; };\n \n@@ -810,7 +810,7 @@ class ExternCrate : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   // Override that adds extern crate name in decl to passed list of names.\n   void add_crate_name (std::vector<std::string> &names) const override\n@@ -851,7 +851,7 @@ class UseTree\n \n   Location get_locus () const { return locus; }\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n protected:\n   // Clone function implementation as pure virtual method\n@@ -895,7 +895,7 @@ class UseTreeGlob : public UseTree\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   /* TODO: find way to ensure only PATH_PREFIXED glob_type has path - factory\n    * methods? */\n@@ -976,7 +976,7 @@ class UseTreeList : public UseTree\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   // TODO: find way to ensure only PATH_PREFIXED path_type has path - factory\n   // methods?\n@@ -1021,7 +1021,7 @@ class UseTreeRebind : public UseTree\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   // TODO: find way to ensure only PATH_PREFIXED path_type has path - factory\n   // methods?\n@@ -1075,7 +1075,7 @@ class UseDeclaration : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n@@ -1187,7 +1187,7 @@ class Function : public VisItem, public ImplItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_impl_mappings () const override\n   {\n@@ -1328,7 +1328,7 @@ class TypeAlias : public VisItem, public ImplItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -1551,7 +1551,7 @@ class StructStruct : public Struct\n    * type is defined. */\n   bool is_unit_struct () const { return is_unit; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<StructField> &get_fields () { return fields; }\n \n@@ -1659,7 +1659,7 @@ class TupleStruct : public Struct\n       fields (std::move (fields))\n   {}\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<TupleField> &get_fields () { return fields; }\n   const std::vector<TupleField> &get_fields () const { return fields; }\n@@ -1707,7 +1707,7 @@ class EnumItem : public Item\n   virtual std::string as_string () const override;\n \n   // not pure virtual as not abstract\n-  virtual void accept_vis (HIRVisitor &vis) override;\n+  virtual void accept_vis (HIRFullVisitor &vis) override;\n \n   Location get_locus () const override { return locus; }\n \n@@ -1737,7 +1737,7 @@ class EnumItemTuple : public EnumItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<TupleField> &get_tuple_fields () { return tuple_fields; }\n \n@@ -1769,7 +1769,7 @@ class EnumItemStruct : public EnumItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<StructField> &get_struct_fields () { return struct_fields; }\n \n@@ -1817,7 +1817,7 @@ class EnumItemDiscriminant : public EnumItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_discriminant_expression () { return expression; }\n \n@@ -1911,7 +1911,7 @@ class Enum : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Identifier get_identifier () const { return enum_name; }\n \n@@ -2013,7 +2013,7 @@ class Union : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<StructField> &get_variants () { return variants; }\n \n@@ -2072,7 +2072,7 @@ class ConstantItem : public VisItem, public ImplItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Type *get_type () { return type.get (); }\n \n@@ -2153,7 +2153,7 @@ class StaticItem : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Identifier get_identifier () const { return name; }\n \n@@ -2323,7 +2323,7 @@ class TraitItemFunc : public TraitItem\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   TraitFunctionDecl &get_decl () { return decl; }\n \n@@ -2400,7 +2400,7 @@ class TraitItemConst : public TraitItem\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Identifier get_name () const { return name; }\n \n@@ -2480,7 +2480,7 @@ class TraitItemType : public TraitItem\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Identifier get_name () const { return name; }\n \n@@ -2595,7 +2595,7 @@ class Trait : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -2693,7 +2693,7 @@ class ImplBlock : public VisItem\n   // Returns whether inherent impl block has inherent impl items.\n   bool has_impl_items () const { return !impl_items.empty (); }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<ImplItem>> &get_impl_items ()\n   {\n@@ -2768,7 +2768,7 @@ class ExternalItem\n \n   Location get_locus () const { return locus; }\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n@@ -2846,7 +2846,7 @@ class ExternalStaticItem : public ExternalItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n@@ -2988,7 +2988,7 @@ class ExternalFunctionItem : public ExternalItem\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -3081,7 +3081,7 @@ class ExternBlock : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<ExternalItem>> &get_extern_items ()\n   {"}, {"sha": "5bf1be552838b854433dd141132286bd5007ea83", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -317,7 +317,7 @@ class PathInExpression : public PathPattern, public PathExpr\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   bool opening_scope_resolution () { return has_opening_scope_resolution; }\n \n@@ -420,7 +420,7 @@ class TypePathSegment\n   Location get_locus () const { return locus; }\n \n   // not pure virtual as class not abstract\n-  virtual void accept_vis (HIRVisitor &vis);\n+  virtual void accept_vis (HIRFullVisitor &vis);\n \n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n@@ -469,7 +469,7 @@ class TypePathSegmentGeneric : public TypePathSegment\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   GenericArgs &get_generic_args () { return generic_args; }\n \n@@ -597,7 +597,7 @@ class TypePathSegmentFunction : public TypePathSegment\n \n   bool is_ident_only () const override { return false; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   virtual SegmentType get_type () const override final\n   {\n@@ -700,7 +700,7 @@ class TypePath : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   size_t get_num_segments () const { return segments.size (); }\n \n@@ -823,7 +823,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   QualifiedPathType &get_path_type () { return path_type; }\n \n@@ -921,7 +921,7 @@ class QualifiedPathInType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   QualifiedPathType &get_path_type () { return path_type; }\n "}, {"sha": "b0b123fa699432e991d4f1702072cf75c208fe54", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -51,7 +51,7 @@ class LiteralPattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -126,7 +126,7 @@ class IdentifierPattern : public Pattern\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -159,7 +159,7 @@ class WildcardPattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -190,7 +190,7 @@ class RangePatternBound\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n protected:\n   // pure virtual as RangePatternBound is abstract\n@@ -220,7 +220,7 @@ class RangePatternBoundLiteral : public RangePatternBound\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -246,7 +246,7 @@ class RangePatternBoundPath : public RangePatternBound\n \n   Location get_locus () const { return path.get_locus (); }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -274,7 +274,7 @@ class RangePatternBoundQualPath : public RangePatternBound\n \n   Location get_locus () const { return path.get_locus (); }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -337,7 +337,7 @@ class RangePattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -397,7 +397,7 @@ class ReferencePattern : public Pattern\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -440,7 +440,7 @@ class StructPatternField\n   }\n \n   virtual std::string as_string () const;\n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n   virtual ItemType get_item_type () const = 0;\n \n   Location get_locus () const { return locus; }\n@@ -496,7 +496,7 @@ class StructPatternFieldTuplePat : public StructPatternField\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   ItemType get_item_type () const override final { return ItemType::TUPLE_PAT; }\n \n@@ -548,7 +548,7 @@ class StructPatternFieldIdentPat : public StructPatternField\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   ItemType get_item_type () const override final { return ItemType::IDENT_PAT; }\n \n@@ -580,7 +580,7 @@ class StructPatternFieldIdent : public StructPatternField\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   ItemType get_item_type () const override final { return ItemType::IDENT; }\n \n@@ -673,7 +673,7 @@ class StructPattern : public Pattern\n \n   Location get_locus () const { return path.get_locus (); }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   PathInExpression &get_path () { return path; }\n   StructPatternElements &get_struct_pattern_elems () { return elems; }\n@@ -714,7 +714,7 @@ class TupleStructItems\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual ItemType get_item_type () const = 0;\n \n@@ -758,7 +758,7 @@ class TupleStructItemsNoRange : public TupleStructItems\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<Pattern> > &get_patterns () { return patterns; }\n   const std::vector<std::unique_ptr<Pattern> > &get_patterns () const\n@@ -822,7 +822,7 @@ class TupleStructItemsRange : public TupleStructItems\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<Pattern> > &get_lower_patterns ()\n   {\n@@ -896,7 +896,7 @@ class TupleStructPattern : public Pattern\n \n   Location get_locus () const { return path.get_locus (); }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   PathInExpression &get_path () { return path; }\n \n@@ -933,7 +933,7 @@ class TuplePatternItems\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n protected:\n   // pure virtual clone implementation\n@@ -1010,7 +1010,7 @@ class TuplePatternItemsMultiple : public TuplePatternItems\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1068,7 +1068,7 @@ class TuplePatternItemsRanged : public TuplePatternItems\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1115,7 +1115,7 @@ class TuplePattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -1172,7 +1172,7 @@ class GroupedPattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -1231,7 +1231,7 @@ class SlicePattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {"}, {"sha": "5d8a263b823f777b1b4096327d17b314f75e518b", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -39,7 +39,7 @@ class EmptyStmt : public Stmt\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   bool is_item () const override final { return false; }\n \n@@ -113,7 +113,7 @@ class LetStmt : public Stmt\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   HIR::Type *get_type () { return type.get (); }\n \n@@ -180,7 +180,7 @@ class ExprStmtWithoutBlock : public ExprStmt\n   ExprStmtWithoutBlock (ExprStmtWithoutBlock &&other) = default;\n   ExprStmtWithoutBlock &operator= (ExprStmtWithoutBlock &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Expr *get_expr () { return expr.get (); }\n \n@@ -227,7 +227,7 @@ class ExprStmtWithBlock : public ExprStmt\n   ExprStmtWithBlock (ExprStmtWithBlock &&other) = default;\n   ExprStmtWithBlock &operator= (ExprStmtWithBlock &&other) = default;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   ExprWithBlock *get_expr () { return expr.get (); }\n "}, {"sha": "c32a1c5749d8e3dadf6b17b06e32ebd2ff7fca25", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -57,7 +57,7 @@ class TraitBound : public TypeParamBound\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Analysis::NodeMapping get_mappings () const override final\n   {\n@@ -138,7 +138,7 @@ class ImplTraitType : public Type\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n };\n \n // An opaque value of another type that implements a set of traits\n@@ -195,7 +195,7 @@ class TraitObjectType : public Type\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n   {\n@@ -274,7 +274,7 @@ class ParenthesisedType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n };\n \n // Impl trait with a single bound? Poor reference material here.\n@@ -310,7 +310,7 @@ class ImplTraitTypeOneBound : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n };\n \n class TypePath; // definition moved to \"rust-path.h\"\n@@ -361,7 +361,7 @@ class TupleType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<std::unique_ptr<Type> > &get_elems () { return elems; }\n   const std::vector<std::unique_ptr<Type> > &get_elems () const\n@@ -410,7 +410,7 @@ class NeverType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n };\n \n // A type consisting of a pointer without safety or liveness guarantees\n@@ -452,7 +452,7 @@ class RawPointerType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::unique_ptr<Type> &get_type () { return type; }\n \n@@ -531,7 +531,7 @@ class ReferenceType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Lifetime &get_lifetime () { return lifetime; }\n \n@@ -597,7 +597,7 @@ class ArrayType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Type *get_element_type () { return elem_type.get (); }\n \n@@ -656,7 +656,7 @@ class SliceType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -702,7 +702,7 @@ class InferredType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n };\n \n class QualifiedPathInType; // definition moved to \"rust-path.h\"\n@@ -844,7 +844,7 @@ class BareFunctionType : public TypeNoBounds\n \n   Location get_locus () const { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::vector<MaybeNamedParam> &get_function_params () { return params; }\n   const std::vector<MaybeNamedParam> &get_function_params () const"}, {"sha": "9cf0f35a5101a00dfcfa4096b22bad99327b6d93", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 156, "deletions": 1, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -24,7 +24,7 @@\n namespace Rust {\n namespace HIR {\n \n-class HIRVisitor\n+class HIRFullVisitor\n {\n public:\n   virtual void visit (IdentifierExpr &ident_expr) = 0;\n@@ -160,6 +160,161 @@ class HIRVisitor\n   virtual void visit (BareFunctionType &type) = 0;\n };\n \n+class HIRFullVisitorBase : public HIRFullVisitor\n+{\n+public:\n+  virtual ~HIRFullVisitorBase () {}\n+\n+  virtual void visit (IdentifierExpr &) override {}\n+  virtual void visit (Lifetime &) override {}\n+  virtual void visit (LifetimeParam &) override {}\n+  virtual void visit (PathInExpression &) override {}\n+  virtual void visit (TypePathSegment &) override {}\n+  virtual void visit (TypePathSegmentGeneric &) override {}\n+  virtual void visit (TypePathSegmentFunction &) override {}\n+  virtual void visit (TypePath &) override {}\n+  virtual void visit (QualifiedPathInExpression &) override {}\n+  virtual void visit (QualifiedPathInType &) override {}\n+\n+  virtual void visit (LiteralExpr &) override {}\n+  virtual void visit (BorrowExpr &) override {}\n+  virtual void visit (DereferenceExpr &) override {}\n+  virtual void visit (ErrorPropagationExpr &) override {}\n+  virtual void visit (NegationExpr &) override {}\n+  virtual void visit (ArithmeticOrLogicalExpr &) override {}\n+  virtual void visit (ComparisonExpr &) override {}\n+  virtual void visit (LazyBooleanExpr &) override {}\n+  virtual void visit (TypeCastExpr &) override {}\n+  virtual void visit (AssignmentExpr &) override {}\n+  virtual void visit (CompoundAssignmentExpr &) override {}\n+  virtual void visit (GroupedExpr &) override {}\n+\n+  virtual void visit (ArrayElemsValues &) override {}\n+  virtual void visit (ArrayElemsCopied &) override {}\n+  virtual void visit (ArrayExpr &) override {}\n+  virtual void visit (ArrayIndexExpr &) override {}\n+  virtual void visit (TupleExpr &) override {}\n+  virtual void visit (TupleIndexExpr &) override {}\n+  virtual void visit (StructExprStruct &) override {}\n+\n+  virtual void visit (StructExprFieldIdentifier &) override {}\n+  virtual void visit (StructExprFieldIdentifierValue &) override {}\n+\n+  virtual void visit (StructExprFieldIndexValue &) override {}\n+  virtual void visit (StructExprStructFields &) override {}\n+  virtual void visit (StructExprStructBase &) override {}\n+\n+  virtual void visit (CallExpr &) override {}\n+  virtual void visit (MethodCallExpr &) override {}\n+  virtual void visit (FieldAccessExpr &) override {}\n+  virtual void visit (ClosureExprInner &) override {}\n+  virtual void visit (BlockExpr &) override {}\n+  virtual void visit (ClosureExprInnerTyped &) override {}\n+  virtual void visit (ContinueExpr &) override {}\n+  virtual void visit (BreakExpr &) override {}\n+  virtual void visit (RangeFromToExpr &) override {}\n+  virtual void visit (RangeFromExpr &) override {}\n+  virtual void visit (RangeToExpr &) override {}\n+  virtual void visit (RangeFullExpr &) override {}\n+  virtual void visit (RangeFromToInclExpr &) override {}\n+  virtual void visit (RangeToInclExpr &) override {}\n+  virtual void visit (ReturnExpr &) override {}\n+  virtual void visit (UnsafeBlockExpr &) override {}\n+  virtual void visit (LoopExpr &) override {}\n+  virtual void visit (WhileLoopExpr &) override {}\n+  virtual void visit (WhileLetLoopExpr &) override {}\n+  virtual void visit (ForLoopExpr &) override {}\n+  virtual void visit (IfExpr &) override {}\n+  virtual void visit (IfExprConseqElse &) override {}\n+  virtual void visit (IfExprConseqIf &) override {}\n+  virtual void visit (IfExprConseqIfLet &) override {}\n+  virtual void visit (IfLetExpr &) override {}\n+  virtual void visit (IfLetExprConseqElse &) override {}\n+  virtual void visit (IfLetExprConseqIf &) override {}\n+  virtual void visit (IfLetExprConseqIfLet &) override {}\n+\n+  virtual void visit (MatchExpr &) override {}\n+  virtual void visit (AwaitExpr &) override {}\n+  virtual void visit (AsyncBlockExpr &) override {}\n+\n+  virtual void visit (TypeParam &) override {}\n+\n+  virtual void visit (LifetimeWhereClauseItem &) override {}\n+  virtual void visit (TypeBoundWhereClauseItem &) override {}\n+  virtual void visit (Module &) override {}\n+  virtual void visit (ExternCrate &) override {}\n+\n+  virtual void visit (UseTreeGlob &) override {}\n+  virtual void visit (UseTreeList &) override {}\n+  virtual void visit (UseTreeRebind &) override {}\n+  virtual void visit (UseDeclaration &) override {}\n+  virtual void visit (Function &) override {}\n+  virtual void visit (TypeAlias &) override {}\n+  virtual void visit (StructStruct &) override {}\n+  virtual void visit (TupleStruct &) override {}\n+  virtual void visit (EnumItem &) override {}\n+  virtual void visit (EnumItemTuple &) override {}\n+  virtual void visit (EnumItemStruct &) override {}\n+  virtual void visit (EnumItemDiscriminant &) override {}\n+  virtual void visit (Enum &) override {}\n+  virtual void visit (Union &) override {}\n+  virtual void visit (ConstantItem &) override {}\n+  virtual void visit (StaticItem &) override {}\n+  virtual void visit (TraitItemFunc &) override {}\n+  virtual void visit (TraitItemConst &) override {}\n+  virtual void visit (TraitItemType &) override {}\n+  virtual void visit (Trait &) override {}\n+  virtual void visit (ImplBlock &) override {}\n+\n+  virtual void visit (ExternalStaticItem &) override {}\n+  virtual void visit (ExternalFunctionItem &) override {}\n+  virtual void visit (ExternBlock &) override {}\n+\n+  virtual void visit (LiteralPattern &) override {}\n+  virtual void visit (IdentifierPattern &) override {}\n+  virtual void visit (WildcardPattern &) override {}\n+\n+  virtual void visit (RangePatternBoundLiteral &) override {}\n+  virtual void visit (RangePatternBoundPath &) override {}\n+  virtual void visit (RangePatternBoundQualPath &) override {}\n+  virtual void visit (RangePattern &) override {}\n+  virtual void visit (ReferencePattern &) override {}\n+\n+  virtual void visit (StructPatternFieldTuplePat &) override {}\n+  virtual void visit (StructPatternFieldIdentPat &) override {}\n+  virtual void visit (StructPatternFieldIdent &) override {}\n+  virtual void visit (StructPattern &) override {}\n+\n+  virtual void visit (TupleStructItemsNoRange &) override {}\n+  virtual void visit (TupleStructItemsRange &) override {}\n+  virtual void visit (TupleStructPattern &) override {}\n+\n+  virtual void visit (TuplePatternItemsMultiple &) override {}\n+  virtual void visit (TuplePatternItemsRanged &) override {}\n+  virtual void visit (TuplePattern &) override {}\n+  virtual void visit (GroupedPattern &) override {}\n+  virtual void visit (SlicePattern &) override {}\n+\n+  virtual void visit (EmptyStmt &) override {}\n+  virtual void visit (LetStmt &) override {}\n+  virtual void visit (ExprStmtWithoutBlock &) override {}\n+  virtual void visit (ExprStmtWithBlock &) override {}\n+\n+  virtual void visit (TraitBound &) override {}\n+  virtual void visit (ImplTraitType &) override {}\n+  virtual void visit (TraitObjectType &) override {}\n+  virtual void visit (ParenthesisedType &) override {}\n+  virtual void visit (ImplTraitTypeOneBound &) override {}\n+  virtual void visit (TupleType &) override {}\n+  virtual void visit (NeverType &) override {}\n+  virtual void visit (RawPointerType &) override {}\n+  virtual void visit (ReferenceType &) override {}\n+  virtual void visit (ArrayType &) override {}\n+  virtual void visit (SliceType &) override {}\n+  virtual void visit (InferredType &) override {}\n+  virtual void visit (BareFunctionType &) override {}\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "17d207a5c3414483c326e517999d34a9816f5cdc", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -32,7 +32,7 @@ typedef int TupleIndex;\n \n namespace HIR {\n // foward decl: ast visitor\n-class HIRVisitor;\n+class HIRFullVisitor;\n \n // forward decl for use in token tree method\n class Token;\n@@ -96,7 +96,7 @@ class Stmt\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Location get_locus () const = 0;\n \n@@ -137,7 +137,7 @@ class Item : public Stmt\n   add_crate_name (std::vector<std::string> &names ATTRIBUTE_UNUSED) const\n   {}\n \n-  virtual void accept_vis (HIRVisitor &vis ATTRIBUTE_UNUSED) {}\n+  virtual void accept_vis (HIRFullVisitor &vis ATTRIBUTE_UNUSED) {}\n \n   AST::AttrVec &get_outer_attrs () { return outer_attrs; }\n   const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n@@ -199,7 +199,7 @@ class Expr\n   // HACK: strictly not needed, but faster than full downcast clone\n   virtual bool is_expr_without_block () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n@@ -284,7 +284,7 @@ class IdentifierExpr : public ExprWithoutBlock\n \n   Location get_locus () const override final { return locus; }\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   // Clones this object.\n   std::unique_ptr<IdentifierExpr> clone_identifier_expr () const\n@@ -326,7 +326,7 @@ class Pattern\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_pattern_mappings () const = 0;\n \n@@ -364,7 +364,7 @@ class Type\n   /* as pointer, shouldn't require definition beforehand, only forward\n    * declaration. */\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_mappings () const { return mappings; }\n \n@@ -423,7 +423,7 @@ class TypeParamBound\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_mappings () const = 0;\n \n@@ -468,7 +468,7 @@ class Lifetime : public TypeParamBound\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   std::string get_name () const { return lifetime_name; }\n \n@@ -519,7 +519,7 @@ class GenericParam\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Location get_locus () const = 0;\n \n@@ -606,7 +606,7 @@ class LifetimeParam : public GenericParam\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n   Location get_locus () const override final { return locus; }\n \n@@ -641,7 +641,7 @@ class TraitItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual const std::string trait_identifier () const = 0;\n \n@@ -668,7 +668,7 @@ class ImplItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_impl_mappings () const = 0;\n "}, {"sha": "20d2b81ba4aeb16770c6bd2332bb92c7073928d6", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 1, "deletions": 149, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -28,158 +28,10 @@\n namespace Rust {\n namespace Analysis {\n \n-class MarkLiveBase : public HIR::HIRVisitor\n+class MarkLiveBase : public HIR::HIRFullVisitorBase\n {\n public:\n   virtual ~MarkLiveBase () {}\n-  virtual void visit (HIR::IdentifierExpr &) override {}\n-  virtual void visit (HIR::Lifetime &) override {}\n-  virtual void visit (HIR::LifetimeParam &) override {}\n-  virtual void visit (HIR::PathInExpression &) override {}\n-  virtual void visit (HIR::TypePathSegment &) override {}\n-  virtual void visit (HIR::TypePathSegmentGeneric &) override {}\n-  virtual void visit (HIR::TypePathSegmentFunction &) override {}\n-  virtual void visit (HIR::TypePath &) override {}\n-  virtual void visit (HIR::QualifiedPathInExpression &) override {}\n-  virtual void visit (HIR::QualifiedPathInType &) override {}\n-\n-  virtual void visit (HIR::LiteralExpr &) override {}\n-  virtual void visit (HIR::BorrowExpr &) override {}\n-  virtual void visit (HIR::DereferenceExpr &) override {}\n-  virtual void visit (HIR::ErrorPropagationExpr &) override {}\n-  virtual void visit (HIR::NegationExpr &) override {}\n-  virtual void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n-  virtual void visit (HIR::ComparisonExpr &) override {}\n-  virtual void visit (HIR::LazyBooleanExpr &) override {}\n-  virtual void visit (HIR::TypeCastExpr &) override {}\n-  virtual void visit (HIR::AssignmentExpr &) override {}\n-  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n-  virtual void visit (HIR::GroupedExpr &) override {}\n-\n-  virtual void visit (HIR::ArrayElemsValues &) override {}\n-  virtual void visit (HIR::ArrayElemsCopied &) override {}\n-  virtual void visit (HIR::ArrayExpr &) override {}\n-  virtual void visit (HIR::ArrayIndexExpr &) override {}\n-  virtual void visit (HIR::TupleExpr &) override {}\n-  virtual void visit (HIR::TupleIndexExpr &) override {}\n-  virtual void visit (HIR::StructExprStruct &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::StructExprStructFields &) override {}\n-  virtual void visit (HIR::StructExprStructBase &) override {}\n-\n-  virtual void visit (HIR::CallExpr &) override {}\n-  virtual void visit (HIR::MethodCallExpr &) override {}\n-  virtual void visit (HIR::FieldAccessExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInner &) override {}\n-  virtual void visit (HIR::BlockExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInnerTyped &) override {}\n-  virtual void visit (HIR::ContinueExpr &) override {}\n-  virtual void visit (HIR::BreakExpr &) override {}\n-  virtual void visit (HIR::RangeFromToExpr &) override {}\n-  virtual void visit (HIR::RangeFromExpr &) override {}\n-  virtual void visit (HIR::RangeToExpr &) override {}\n-  virtual void visit (HIR::RangeFullExpr &) override {}\n-  virtual void visit (HIR::RangeFromToInclExpr &) override {}\n-  virtual void visit (HIR::RangeToInclExpr &) override {}\n-  virtual void visit (HIR::ReturnExpr &) override {}\n-  virtual void visit (HIR::UnsafeBlockExpr &) override {}\n-  virtual void visit (HIR::LoopExpr &) override {}\n-  virtual void visit (HIR::WhileLoopExpr &) override {}\n-  virtual void visit (HIR::WhileLetLoopExpr &) override {}\n-  virtual void visit (HIR::ForLoopExpr &) override {}\n-  virtual void visit (HIR::IfExpr &) override {}\n-  virtual void visit (HIR::IfExprConseqElse &) override {}\n-  virtual void visit (HIR::IfExprConseqIf &) override {}\n-  virtual void visit (HIR::IfExprConseqIfLet &) override {}\n-  virtual void visit (HIR::IfLetExpr &) override {}\n-  virtual void visit (HIR::IfLetExprConseqElse &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIf &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIfLet &) override {}\n-\n-  virtual void visit (HIR::MatchExpr &) override {}\n-  virtual void visit (HIR::AwaitExpr &) override {}\n-  virtual void visit (HIR::AsyncBlockExpr &) override {}\n-\n-  virtual void visit (HIR::TypeParam &) override {}\n-\n-  virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::Module &) override {}\n-  virtual void visit (HIR::ExternCrate &) override {}\n-\n-  virtual void visit (HIR::UseTreeGlob &) override {}\n-  virtual void visit (HIR::UseTreeList &) override {}\n-  virtual void visit (HIR::UseTreeRebind &) override {}\n-  virtual void visit (HIR::UseDeclaration &) override {}\n-  virtual void visit (HIR::Function &) override {}\n-  virtual void visit (HIR::TypeAlias &) override {}\n-  virtual void visit (HIR::StructStruct &) override {}\n-  virtual void visit (HIR::TupleStruct &) override {}\n-  virtual void visit (HIR::EnumItem &) override {}\n-  virtual void visit (HIR::EnumItemTuple &) override {}\n-  virtual void visit (HIR::EnumItemStruct &) override {}\n-  virtual void visit (HIR::EnumItemDiscriminant &) override {}\n-  virtual void visit (HIR::Enum &) override {}\n-  virtual void visit (HIR::Union &) override {}\n-  virtual void visit (HIR::ConstantItem &) override {}\n-  virtual void visit (HIR::StaticItem &) override {}\n-  virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemConst &) override {}\n-  virtual void visit (HIR::TraitItemType &) override {}\n-  virtual void visit (HIR::Trait &) override {}\n-  virtual void visit (HIR::ImplBlock &) override {}\n-\n-  virtual void visit (HIR::ExternalStaticItem &) override {}\n-  virtual void visit (HIR::ExternalFunctionItem &) override {}\n-  virtual void visit (HIR::ExternBlock &) override {}\n-\n-  virtual void visit (HIR::LiteralPattern &) override {}\n-  virtual void visit (HIR::IdentifierPattern &) override {}\n-  virtual void visit (HIR::WildcardPattern &) override {}\n-\n-  virtual void visit (HIR::RangePatternBoundLiteral &) override {}\n-  virtual void visit (HIR::RangePatternBoundPath &) override {}\n-  virtual void visit (HIR::RangePatternBoundQualPath &) override {}\n-  virtual void visit (HIR::RangePattern &) override {}\n-  virtual void visit (HIR::ReferencePattern &) override {}\n-\n-  virtual void visit (HIR::StructPatternFieldTuplePat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdentPat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdent &) override {}\n-  virtual void visit (HIR::StructPattern &) override {}\n-\n-  virtual void visit (HIR::TupleStructItemsNoRange &) override {}\n-  virtual void visit (HIR::TupleStructItemsRange &) override {}\n-  virtual void visit (HIR::TupleStructPattern &) override {}\n-\n-  virtual void visit (HIR::TuplePatternItemsMultiple &) override {}\n-  virtual void visit (HIR::TuplePatternItemsRanged &) override {}\n-  virtual void visit (HIR::TuplePattern &) override {}\n-  virtual void visit (HIR::GroupedPattern &) override {}\n-  virtual void visit (HIR::SlicePattern &) override {}\n-\n-  virtual void visit (HIR::EmptyStmt &) override {}\n-  virtual void visit (HIR::LetStmt &) override {}\n-  virtual void visit (HIR::ExprStmtWithoutBlock &) override {}\n-  virtual void visit (HIR::ExprStmtWithBlock &) override {}\n-\n-  virtual void visit (HIR::TraitBound &) override {}\n-  virtual void visit (HIR::ImplTraitType &) override {}\n-  virtual void visit (HIR::TraitObjectType &) override {}\n-  virtual void visit (HIR::ParenthesisedType &) override {}\n-  virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TupleType &) override {}\n-  virtual void visit (HIR::NeverType &) override {}\n-  virtual void visit (HIR::RawPointerType &) override {}\n-  virtual void visit (HIR::ReferenceType &) override {}\n-  virtual void visit (HIR::ArrayType &) override {}\n-  virtual void visit (HIR::SliceType &) override {}\n-  virtual void visit (HIR::InferredType &) override {}\n-  virtual void visit (HIR::BareFunctionType &) override {}\n \n protected:\n   MarkLiveBase () : mappings (Analysis::Mappings::get ()) {}"}, {"sha": "2ab44503cf19e57cb33dd45a4356d4720920e75d", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 1, "deletions": 150, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -30,160 +30,11 @@ namespace Rust {\n namespace ConstFold {\n \n // base class to allow derivatives to overload as needed\n-class ConstFoldBase : public HIR::HIRVisitor\n+class ConstFoldBase : public HIR::HIRFullVisitorBase\n {\n public:\n   virtual ~ConstFoldBase () {}\n \n-  virtual void visit (HIR::IdentifierExpr &) override {}\n-  virtual void visit (HIR::Lifetime &) override {}\n-  virtual void visit (HIR::LifetimeParam &) override {}\n-  virtual void visit (HIR::PathInExpression &) override {}\n-  virtual void visit (HIR::TypePathSegment &) override {}\n-  virtual void visit (HIR::TypePathSegmentGeneric &) override {}\n-  virtual void visit (HIR::TypePathSegmentFunction &) override {}\n-  virtual void visit (HIR::TypePath &) override {}\n-  virtual void visit (HIR::QualifiedPathInExpression &) override {}\n-  virtual void visit (HIR::QualifiedPathInType &) override {}\n-\n-  virtual void visit (HIR::LiteralExpr &) override {}\n-  virtual void visit (HIR::BorrowExpr &) override {}\n-  virtual void visit (HIR::DereferenceExpr &) override {}\n-  virtual void visit (HIR::ErrorPropagationExpr &) override {}\n-  virtual void visit (HIR::NegationExpr &) override {}\n-  virtual void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n-  virtual void visit (HIR::ComparisonExpr &) override {}\n-  virtual void visit (HIR::LazyBooleanExpr &) override {}\n-  virtual void visit (HIR::TypeCastExpr &) override {}\n-  virtual void visit (HIR::AssignmentExpr &) override {}\n-  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n-  virtual void visit (HIR::GroupedExpr &) override {}\n-\n-  virtual void visit (HIR::ArrayElemsValues &) override {}\n-  virtual void visit (HIR::ArrayElemsCopied &) override {}\n-  virtual void visit (HIR::ArrayExpr &) override {}\n-  virtual void visit (HIR::ArrayIndexExpr &) override {}\n-  virtual void visit (HIR::TupleExpr &) override {}\n-  virtual void visit (HIR::TupleIndexExpr &) override {}\n-  virtual void visit (HIR::StructExprStruct &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::StructExprStructFields &) override {}\n-  virtual void visit (HIR::StructExprStructBase &) override {}\n-\n-  virtual void visit (HIR::CallExpr &) override {}\n-  virtual void visit (HIR::MethodCallExpr &) override {}\n-  virtual void visit (HIR::FieldAccessExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInner &) override {}\n-  virtual void visit (HIR::BlockExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInnerTyped &) override {}\n-  virtual void visit (HIR::ContinueExpr &) override {}\n-  virtual void visit (HIR::BreakExpr &) override {}\n-  virtual void visit (HIR::RangeFromToExpr &) override {}\n-  virtual void visit (HIR::RangeFromExpr &) override {}\n-  virtual void visit (HIR::RangeToExpr &) override {}\n-  virtual void visit (HIR::RangeFullExpr &) override {}\n-  virtual void visit (HIR::RangeFromToInclExpr &) override {}\n-  virtual void visit (HIR::RangeToInclExpr &) override {}\n-  virtual void visit (HIR::ReturnExpr &) override {}\n-  virtual void visit (HIR::UnsafeBlockExpr &) override {}\n-  virtual void visit (HIR::LoopExpr &) override {}\n-  virtual void visit (HIR::WhileLoopExpr &) override {}\n-  virtual void visit (HIR::WhileLetLoopExpr &) override {}\n-  virtual void visit (HIR::ForLoopExpr &) override {}\n-  virtual void visit (HIR::IfExpr &) override {}\n-  virtual void visit (HIR::IfExprConseqElse &) override {}\n-  virtual void visit (HIR::IfExprConseqIf &) override {}\n-  virtual void visit (HIR::IfExprConseqIfLet &) override {}\n-  virtual void visit (HIR::IfLetExpr &) override {}\n-  virtual void visit (HIR::IfLetExprConseqElse &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIf &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIfLet &) override {}\n-\n-  virtual void visit (HIR::MatchExpr &) override {}\n-  virtual void visit (HIR::AwaitExpr &) override {}\n-  virtual void visit (HIR::AsyncBlockExpr &) override {}\n-\n-  virtual void visit (HIR::TypeParam &) override {}\n-\n-  virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::Module &) override {}\n-  virtual void visit (HIR::ExternCrate &) override {}\n-\n-  virtual void visit (HIR::UseTreeGlob &) override {}\n-  virtual void visit (HIR::UseTreeList &) override {}\n-  virtual void visit (HIR::UseTreeRebind &) override {}\n-  virtual void visit (HIR::UseDeclaration &) override {}\n-  virtual void visit (HIR::Function &) override {}\n-  virtual void visit (HIR::TypeAlias &) override {}\n-  virtual void visit (HIR::StructStruct &) override {}\n-  virtual void visit (HIR::TupleStruct &) override {}\n-  virtual void visit (HIR::EnumItem &) override {}\n-  virtual void visit (HIR::EnumItemTuple &) override {}\n-  virtual void visit (HIR::EnumItemStruct &) override {}\n-  virtual void visit (HIR::EnumItemDiscriminant &) override {}\n-  virtual void visit (HIR::Enum &) override {}\n-  virtual void visit (HIR::Union &) override {}\n-  virtual void visit (HIR::ConstantItem &) override {}\n-  virtual void visit (HIR::StaticItem &) override {}\n-  virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemConst &) override {}\n-  virtual void visit (HIR::TraitItemType &) override {}\n-  virtual void visit (HIR::Trait &) override {}\n-  virtual void visit (HIR::ImplBlock &) override {}\n-\n-  virtual void visit (HIR::ExternalStaticItem &) override {}\n-  virtual void visit (HIR::ExternalFunctionItem &) override {}\n-  virtual void visit (HIR::ExternBlock &) override {}\n-\n-  virtual void visit (HIR::LiteralPattern &) override {}\n-  virtual void visit (HIR::IdentifierPattern &) override {}\n-  virtual void visit (HIR::WildcardPattern &) override {}\n-\n-  virtual void visit (HIR::RangePatternBoundLiteral &) override {}\n-  virtual void visit (HIR::RangePatternBoundPath &) override {}\n-  virtual void visit (HIR::RangePatternBoundQualPath &) override {}\n-  virtual void visit (HIR::RangePattern &) override {}\n-  virtual void visit (HIR::ReferencePattern &) override {}\n-\n-  virtual void visit (HIR::StructPatternFieldTuplePat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdentPat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdent &) override {}\n-  virtual void visit (HIR::StructPattern &) override {}\n-\n-  virtual void visit (HIR::TupleStructItemsNoRange &) override {}\n-  virtual void visit (HIR::TupleStructItemsRange &) override {}\n-  virtual void visit (HIR::TupleStructPattern &) override {}\n-\n-  virtual void visit (HIR::TuplePatternItemsMultiple &) override {}\n-  virtual void visit (HIR::TuplePatternItemsRanged &) override {}\n-  virtual void visit (HIR::TuplePattern &) override {}\n-  virtual void visit (HIR::GroupedPattern &) override {}\n-  virtual void visit (HIR::SlicePattern &) override {}\n-\n-  virtual void visit (HIR::EmptyStmt &) override {}\n-  virtual void visit (HIR::LetStmt &) override {}\n-  virtual void visit (HIR::ExprStmtWithoutBlock &) override {}\n-  virtual void visit (HIR::ExprStmtWithBlock &) override {}\n-\n-  virtual void visit (HIR::TraitBound &) override {}\n-  virtual void visit (HIR::ImplTraitType &) override {}\n-  virtual void visit (HIR::TraitObjectType &) override {}\n-  virtual void visit (HIR::ParenthesisedType &) override {}\n-  virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TupleType &) override {}\n-  virtual void visit (HIR::NeverType &) override {}\n-  virtual void visit (HIR::RawPointerType &) override {}\n-  virtual void visit (HIR::ReferenceType &) override {}\n-  virtual void visit (HIR::ArrayType &) override {}\n-  virtual void visit (HIR::SliceType &) override {}\n-  virtual void visit (HIR::InferredType &) override {}\n-  virtual void visit (HIR::BareFunctionType &) override {}\n-\n protected:\n   ConstFoldBase ()\n     : mappings (Analysis::Mappings::get ()),"}, {"sha": "9942728dd6e7ea5c8ab1a164ae144f7baca63cd4", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 3, "deletions": 150, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -32,159 +32,12 @@ namespace Resolver {\n class TraitReference;\n \n // base class to allow derivatives to overload as needed\n-class TypeCheckBase : public HIR::HIRVisitor\n+class TypeCheckBase : public HIR::HIRFullVisitorBase\n {\n public:\n-  virtual ~TypeCheckBase () {}\n-\n-  virtual void visit (HIR::IdentifierExpr &) override {}\n-  virtual void visit (HIR::Lifetime &) override {}\n-  virtual void visit (HIR::LifetimeParam &) override {}\n-  virtual void visit (HIR::PathInExpression &) override {}\n-  virtual void visit (HIR::TypePathSegment &) override {}\n-  virtual void visit (HIR::TypePathSegmentGeneric &) override {}\n-  virtual void visit (HIR::TypePathSegmentFunction &) override {}\n-  virtual void visit (HIR::TypePath &) override {}\n-  virtual void visit (HIR::QualifiedPathInExpression &) override {}\n-  virtual void visit (HIR::QualifiedPathInType &) override {}\n-\n-  virtual void visit (HIR::LiteralExpr &) override {}\n-  virtual void visit (HIR::BorrowExpr &) override {}\n-  virtual void visit (HIR::DereferenceExpr &) override {}\n-  virtual void visit (HIR::ErrorPropagationExpr &) override {}\n-  virtual void visit (HIR::NegationExpr &) override {}\n-  virtual void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n-  virtual void visit (HIR::ComparisonExpr &) override {}\n-  virtual void visit (HIR::LazyBooleanExpr &) override {}\n-  virtual void visit (HIR::TypeCastExpr &) override {}\n-  virtual void visit (HIR::AssignmentExpr &) override {}\n-  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n-  virtual void visit (HIR::GroupedExpr &) override {}\n-\n-  virtual void visit (HIR::ArrayElemsValues &) override {}\n-  virtual void visit (HIR::ArrayElemsCopied &) override {}\n-  virtual void visit (HIR::ArrayExpr &) override {}\n-  virtual void visit (HIR::ArrayIndexExpr &) override {}\n-  virtual void visit (HIR::TupleExpr &) override {}\n-  virtual void visit (HIR::TupleIndexExpr &) override {}\n-  virtual void visit (HIR::StructExprStruct &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::StructExprStructFields &) override {}\n-  virtual void visit (HIR::StructExprStructBase &) override {}\n-\n-  virtual void visit (HIR::CallExpr &) override {}\n-  virtual void visit (HIR::MethodCallExpr &) override {}\n-  virtual void visit (HIR::FieldAccessExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInner &) override {}\n-  virtual void visit (HIR::BlockExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInnerTyped &) override {}\n-  virtual void visit (HIR::ContinueExpr &) override {}\n-  virtual void visit (HIR::BreakExpr &) override {}\n-  virtual void visit (HIR::RangeFromToExpr &) override {}\n-  virtual void visit (HIR::RangeFromExpr &) override {}\n-  virtual void visit (HIR::RangeToExpr &) override {}\n-  virtual void visit (HIR::RangeFullExpr &) override {}\n-  virtual void visit (HIR::RangeFromToInclExpr &) override {}\n-  virtual void visit (HIR::RangeToInclExpr &) override {}\n-  virtual void visit (HIR::ReturnExpr &) override {}\n-  virtual void visit (HIR::UnsafeBlockExpr &) override {}\n-  virtual void visit (HIR::LoopExpr &) override {}\n-  virtual void visit (HIR::WhileLoopExpr &) override {}\n-  virtual void visit (HIR::WhileLetLoopExpr &) override {}\n-  virtual void visit (HIR::ForLoopExpr &) override {}\n-  virtual void visit (HIR::IfExpr &) override {}\n-  virtual void visit (HIR::IfExprConseqElse &) override {}\n-  virtual void visit (HIR::IfExprConseqIf &) override {}\n-  virtual void visit (HIR::IfExprConseqIfLet &) override {}\n-  virtual void visit (HIR::IfLetExpr &) override {}\n-  virtual void visit (HIR::IfLetExprConseqElse &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIf &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIfLet &) override {}\n-\n-  virtual void visit (HIR::MatchExpr &) override {}\n-  virtual void visit (HIR::AwaitExpr &) override {}\n-  virtual void visit (HIR::AsyncBlockExpr &) override {}\n-\n-  virtual void visit (HIR::TypeParam &) override {}\n-\n-  virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::Module &) override {}\n-  virtual void visit (HIR::ExternCrate &) override {}\n+  using Rust::HIR::HIRFullVisitorBase::visit;\n \n-  virtual void visit (HIR::UseTreeGlob &) override {}\n-  virtual void visit (HIR::UseTreeList &) override {}\n-  virtual void visit (HIR::UseTreeRebind &) override {}\n-  virtual void visit (HIR::UseDeclaration &) override {}\n-  virtual void visit (HIR::Function &) override {}\n-  virtual void visit (HIR::TypeAlias &) override {}\n-  virtual void visit (HIR::StructStruct &) override {}\n-  virtual void visit (HIR::TupleStruct &) override {}\n-  virtual void visit (HIR::EnumItem &) override {}\n-  virtual void visit (HIR::EnumItemTuple &) override {}\n-  virtual void visit (HIR::EnumItemStruct &) override {}\n-  virtual void visit (HIR::EnumItemDiscriminant &) override {}\n-  virtual void visit (HIR::Enum &) override {}\n-  virtual void visit (HIR::Union &) override {}\n-  virtual void visit (HIR::ConstantItem &) override {}\n-  virtual void visit (HIR::StaticItem &) override {}\n-  virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemConst &) override {}\n-  virtual void visit (HIR::TraitItemType &) override {}\n-  virtual void visit (HIR::Trait &) override {}\n-  virtual void visit (HIR::ImplBlock &) override {}\n-\n-  virtual void visit (HIR::ExternalStaticItem &) override {}\n-  virtual void visit (HIR::ExternalFunctionItem &) override {}\n-  virtual void visit (HIR::ExternBlock &) override {}\n-\n-  virtual void visit (HIR::LiteralPattern &) override {}\n-  virtual void visit (HIR::IdentifierPattern &) override {}\n-  virtual void visit (HIR::WildcardPattern &) override {}\n-\n-  virtual void visit (HIR::RangePatternBoundLiteral &) override {}\n-  virtual void visit (HIR::RangePatternBoundPath &) override {}\n-  virtual void visit (HIR::RangePatternBoundQualPath &) override {}\n-  virtual void visit (HIR::RangePattern &) override {}\n-  virtual void visit (HIR::ReferencePattern &) override {}\n-\n-  virtual void visit (HIR::StructPatternFieldTuplePat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdentPat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdent &) override {}\n-  virtual void visit (HIR::StructPattern &) override {}\n-\n-  virtual void visit (HIR::TupleStructItemsNoRange &) override {}\n-  virtual void visit (HIR::TupleStructItemsRange &) override {}\n-  virtual void visit (HIR::TupleStructPattern &) override {}\n-\n-  virtual void visit (HIR::TuplePatternItemsMultiple &) override {}\n-  virtual void visit (HIR::TuplePatternItemsRanged &) override {}\n-  virtual void visit (HIR::TuplePattern &) override {}\n-  virtual void visit (HIR::GroupedPattern &) override {}\n-  virtual void visit (HIR::SlicePattern &) override {}\n-\n-  virtual void visit (HIR::EmptyStmt &) override {}\n-  virtual void visit (HIR::LetStmt &) override {}\n-  virtual void visit (HIR::ExprStmtWithoutBlock &) override {}\n-  virtual void visit (HIR::ExprStmtWithBlock &) override {}\n-\n-  virtual void visit (HIR::TraitBound &) override {}\n-  virtual void visit (HIR::ImplTraitType &) override {}\n-  virtual void visit (HIR::TraitObjectType &) override {}\n-  virtual void visit (HIR::ParenthesisedType &) override {}\n-  virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TupleType &) override {}\n-  virtual void visit (HIR::NeverType &) override {}\n-  virtual void visit (HIR::RawPointerType &) override {}\n-  virtual void visit (HIR::ReferenceType &) override {}\n-  virtual void visit (HIR::ArrayType &) override {}\n-  virtual void visit (HIR::SliceType &) override {}\n-  virtual void visit (HIR::InferredType &) override {}\n-  virtual void visit (HIR::BareFunctionType &) override {}\n+  virtual ~TypeCheckBase () {}\n \n protected:\n   TypeCheckBase ()"}, {"sha": "a6d7b83f8952596b6ef3d3714b73ce1226455c36", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 2, "deletions": 157, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -25,164 +25,9 @@\n namespace Rust {\n namespace Resolver {\n \n-class SimpleHirVisitor : public HIR::HIRVisitor\n+class ImplTypeIterator : public HIR::HIRFullVisitorBase\n {\n-public:\n-  virtual ~SimpleHirVisitor () {}\n-\n-  virtual void visit (HIR::IdentifierExpr &) override {}\n-  virtual void visit (HIR::Lifetime &) override {}\n-  virtual void visit (HIR::LifetimeParam &) override {}\n-  virtual void visit (HIR::PathInExpression &) override {}\n-  virtual void visit (HIR::TypePathSegment &) override {}\n-  virtual void visit (HIR::TypePathSegmentGeneric &) override {}\n-  virtual void visit (HIR::TypePathSegmentFunction &) override {}\n-  virtual void visit (HIR::TypePath &) override {}\n-  virtual void visit (HIR::QualifiedPathInExpression &) override {}\n-  virtual void visit (HIR::QualifiedPathInType &) override {}\n-\n-  virtual void visit (HIR::LiteralExpr &) override {}\n-  virtual void visit (HIR::BorrowExpr &) override {}\n-  virtual void visit (HIR::DereferenceExpr &) override {}\n-  virtual void visit (HIR::ErrorPropagationExpr &) override {}\n-  virtual void visit (HIR::NegationExpr &) override {}\n-  virtual void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n-  virtual void visit (HIR::ComparisonExpr &) override {}\n-  virtual void visit (HIR::LazyBooleanExpr &) override {}\n-  virtual void visit (HIR::TypeCastExpr &) override {}\n-  virtual void visit (HIR::AssignmentExpr &) override {}\n-  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n-  virtual void visit (HIR::GroupedExpr &) override {}\n-\n-  virtual void visit (HIR::ArrayElemsValues &) override {}\n-  virtual void visit (HIR::ArrayElemsCopied &) override {}\n-  virtual void visit (HIR::ArrayExpr &) override {}\n-  virtual void visit (HIR::ArrayIndexExpr &) override {}\n-  virtual void visit (HIR::TupleExpr &) override {}\n-  virtual void visit (HIR::TupleIndexExpr &) override {}\n-  virtual void visit (HIR::StructExprStruct &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::StructExprStructFields &) override {}\n-  virtual void visit (HIR::StructExprStructBase &) override {}\n-\n-  virtual void visit (HIR::CallExpr &) override {}\n-  virtual void visit (HIR::MethodCallExpr &) override {}\n-  virtual void visit (HIR::FieldAccessExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInner &) override {}\n-  virtual void visit (HIR::BlockExpr &) override {}\n-  virtual void visit (HIR::ClosureExprInnerTyped &) override {}\n-  virtual void visit (HIR::ContinueExpr &) override {}\n-  virtual void visit (HIR::BreakExpr &) override {}\n-  virtual void visit (HIR::RangeFromToExpr &) override {}\n-  virtual void visit (HIR::RangeFromExpr &) override {}\n-  virtual void visit (HIR::RangeToExpr &) override {}\n-  virtual void visit (HIR::RangeFullExpr &) override {}\n-  virtual void visit (HIR::RangeFromToInclExpr &) override {}\n-  virtual void visit (HIR::RangeToInclExpr &) override {}\n-  virtual void visit (HIR::ReturnExpr &) override {}\n-  virtual void visit (HIR::UnsafeBlockExpr &) override {}\n-  virtual void visit (HIR::LoopExpr &) override {}\n-  virtual void visit (HIR::WhileLoopExpr &) override {}\n-  virtual void visit (HIR::WhileLetLoopExpr &) override {}\n-  virtual void visit (HIR::ForLoopExpr &) override {}\n-  virtual void visit (HIR::IfExpr &) override {}\n-  virtual void visit (HIR::IfExprConseqElse &) override {}\n-  virtual void visit (HIR::IfExprConseqIf &) override {}\n-  virtual void visit (HIR::IfExprConseqIfLet &) override {}\n-  virtual void visit (HIR::IfLetExpr &) override {}\n-  virtual void visit (HIR::IfLetExprConseqElse &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIf &) override {}\n-  virtual void visit (HIR::IfLetExprConseqIfLet &) override {}\n-\n-  virtual void visit (HIR::MatchExpr &) override {}\n-  virtual void visit (HIR::AwaitExpr &) override {}\n-  virtual void visit (HIR::AsyncBlockExpr &) override {}\n-\n-  virtual void visit (HIR::TypeParam &) override {}\n-\n-  virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::Module &) override {}\n-  virtual void visit (HIR::ExternCrate &) override {}\n-\n-  virtual void visit (HIR::UseTreeGlob &) override {}\n-  virtual void visit (HIR::UseTreeList &) override {}\n-  virtual void visit (HIR::UseTreeRebind &) override {}\n-  virtual void visit (HIR::UseDeclaration &) override {}\n-  virtual void visit (HIR::Function &) override {}\n-  virtual void visit (HIR::TypeAlias &) override {}\n-  virtual void visit (HIR::StructStruct &) override {}\n-  virtual void visit (HIR::TupleStruct &) override {}\n-  virtual void visit (HIR::EnumItem &) override {}\n-  virtual void visit (HIR::EnumItemTuple &) override {}\n-  virtual void visit (HIR::EnumItemStruct &) override {}\n-  virtual void visit (HIR::EnumItemDiscriminant &) override {}\n-  virtual void visit (HIR::Enum &) override {}\n-  virtual void visit (HIR::Union &) override {}\n-  virtual void visit (HIR::ConstantItem &) override {}\n-  virtual void visit (HIR::StaticItem &) override {}\n-  virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemConst &) override {}\n-  virtual void visit (HIR::TraitItemType &) override {}\n-  virtual void visit (HIR::Trait &) override {}\n-  virtual void visit (HIR::ImplBlock &) override {}\n-\n-  virtual void visit (HIR::ExternalStaticItem &) override {}\n-  virtual void visit (HIR::ExternalFunctionItem &) override {}\n-  virtual void visit (HIR::ExternBlock &) override {}\n-\n-  virtual void visit (HIR::LiteralPattern &) override {}\n-  virtual void visit (HIR::IdentifierPattern &) override {}\n-  virtual void visit (HIR::WildcardPattern &) override {}\n-\n-  virtual void visit (HIR::RangePatternBoundLiteral &) override {}\n-  virtual void visit (HIR::RangePatternBoundPath &) override {}\n-  virtual void visit (HIR::RangePatternBoundQualPath &) override {}\n-  virtual void visit (HIR::RangePattern &) override {}\n-  virtual void visit (HIR::ReferencePattern &) override {}\n-\n-  virtual void visit (HIR::StructPatternFieldTuplePat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdentPat &) override {}\n-  virtual void visit (HIR::StructPatternFieldIdent &) override {}\n-  virtual void visit (HIR::StructPattern &) override {}\n-\n-  virtual void visit (HIR::TupleStructItemsNoRange &) override {}\n-  virtual void visit (HIR::TupleStructItemsRange &) override {}\n-  virtual void visit (HIR::TupleStructPattern &) override {}\n-\n-  virtual void visit (HIR::TuplePatternItemsMultiple &) override {}\n-  virtual void visit (HIR::TuplePatternItemsRanged &) override {}\n-  virtual void visit (HIR::TuplePattern &) override {}\n-  virtual void visit (HIR::GroupedPattern &) override {}\n-  virtual void visit (HIR::SlicePattern &) override {}\n-\n-  virtual void visit (HIR::EmptyStmt &) override {}\n-  virtual void visit (HIR::LetStmt &) override {}\n-  virtual void visit (HIR::ExprStmtWithoutBlock &) override {}\n-  virtual void visit (HIR::ExprStmtWithBlock &) override {}\n-\n-  virtual void visit (HIR::TraitBound &) override {}\n-  virtual void visit (HIR::ImplTraitType &) override {}\n-  virtual void visit (HIR::TraitObjectType &) override {}\n-  virtual void visit (HIR::ParenthesisedType &) override {}\n-  virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TupleType &) override {}\n-  virtual void visit (HIR::NeverType &) override {}\n-  virtual void visit (HIR::RawPointerType &) override {}\n-  virtual void visit (HIR::ReferenceType &) override {}\n-  virtual void visit (HIR::ArrayType &) override {}\n-  virtual void visit (HIR::SliceType &) override {}\n-  virtual void visit (HIR::InferredType &) override {}\n-  virtual void visit (HIR::BareFunctionType &) override {}\n-};\n-\n-class ImplTypeIterator : public SimpleHirVisitor\n-{\n-  using SimpleHirVisitor::visit;\n+  using HIR::HIRFullVisitorBase::visit;\n \n public:\n   ImplTypeIterator (HIR::ImplBlock &impl,"}, {"sha": "c7219cd31d583a8776db8fa5318881864d7f5c76", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "patch": "@@ -27,9 +27,9 @@ namespace Resolver {\n \n class TypeResolverDump : public TypeCheckBase\n {\n-public:\n-  using Rust::Resolver::TypeCheckBase::visit;\n+  using Rust::HIR::HIRFullVisitorBase::visit;\n \n+public:\n   static void go (HIR::Crate &crate, std::ofstream &out)\n   {\n     TypeResolverDump dumper;"}]}