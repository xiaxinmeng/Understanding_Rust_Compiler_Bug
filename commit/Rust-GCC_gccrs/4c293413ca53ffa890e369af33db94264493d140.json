{"sha": "4c293413ca53ffa890e369af33db94264493d140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyOTM0MTNjYTUzZmZhODkwZTM2OWFmMzNkYjk0MjY0NDkzZDE0MA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Fix predicates and constraints for EXTV/EXTZV/INSV insns\n\nIt makes no sense for insn operand predicates, as long as they accept a\nregister operand, to be more restrictive than the set of the associated\nconstraints, because expand will choose the insn based on the relevant\noperand being a pseudo register then and reload keep it happily as a\nmemory reference if a constraint permits it.  So the restriction posed\nby such a predicate will be happily ignored, and moreover if a splitter\nis added, such as required for MODE_CC support, the new instructions\nwill reject the original operands supplied, causing an ICE.  An actual\nexample will be given with a subsequent change.\n\nRemove such inconsistencies we have with the EXTV/EXTZV/INSV insns then,\nobserving that a bit-field located in memory is byte-addressed by the\nrespective machine instructions and therefore SImode may only be used\nwith a register or an offsettable memory operand (i.e. not an indexed,\npre-decremented, or post-incremented one), which has already been taken\ninto account with the constraints currently used, except for `*insv_2'.\nThe QI machine mode may be used for the bit-field location with any kind\nof memory operand, but we got the constraint wrong, although harmlessly\nin reality, with `*insv'.  Fix that for consistency though.\n\nAlso give the insns names, for easier reference here and elsewhere.\n\n\tgcc/\n\t* config/vax/vax.md (*insv_aligned, *extzv_aligned)\n\t(*extv_aligned, *extv_non_const, *extzv_non_const): Name insns.\n\tFix location predicate.\n\t(*extzv): Name insn.\n\t(*insv): Likewise.  Fix location constraint.\n\t(*insv_2): Likewise, and the predicate.", "tree": {"sha": "093dcd79a21605d5b3be94a45d1dada32e217872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/093dcd79a21605d5b3be94a45d1dada32e217872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c293413ca53ffa890e369af33db94264493d140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c293413ca53ffa890e369af33db94264493d140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c293413ca53ffa890e369af33db94264493d140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c293413ca53ffa890e369af33db94264493d140/comments", "author": null, "committer": null, "parents": [{"sha": "e93fbce844dd055da73e730ecc639ff797ba4518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93fbce844dd055da73e730ecc639ff797ba4518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93fbce844dd055da73e730ecc639ff797ba4518"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "de90848a6005a0b9d55557e6510662afb750af9a", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c293413ca53ffa890e369af33db94264493d140/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c293413ca53ffa890e369af33db94264493d140/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=4c293413ca53ffa890e369af33db94264493d140", "patch": "@@ -757,8 +757,8 @@\n ;; These handle aligned 8-bit and 16-bit fields,\n ;; which can usually be done with move instructions.\n \n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+ro\")\n+(define_insn \"*insv_aligned\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+ro\")\n \t\t\t (match_operand:QI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 3 \"general_operand\" \"g\"))]\n@@ -786,9 +786,9 @@\n   return \\\"movw %3,%0\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extzv_aligned\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=&g\")\n-\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n+\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n@@ -814,9 +814,9 @@\n   return \\\"movzwl %1,%0\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extv_aligned\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n+\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n@@ -842,7 +842,7 @@\n   return \\\"cvtwl %1,%0\\\";\n }\")\n \f\n-;; Register-only SImode cases of bit-field insns.\n+;; Register and non-offsettable-memory SImode cases of bit-field insns.\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -869,9 +869,9 @@\n ;; by a bicl or sign extension.  Because we might end up choosing ext[z]v\n ;; anyway, we can't allow immediate values for the primary source operand.\n \n-(define_insn \"\"\n+(define_insn \"*extv_non_const\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n+\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"nrmT\")))]\n   \"\"\n@@ -886,9 +886,9 @@\n   return \\\"rotl %R3,%1,%0\\;cvtwl %0,%0\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extzv_non_const\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n+\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"nrmT\")))]\n   \"\"\n@@ -962,7 +962,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*extzv\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n \t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n@@ -1015,8 +1015,8 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+g\")\n+(define_insn \"*insv\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+m\")\n \t\t\t (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"nrmT\"))\n \t(match_operand:SI 3 \"general_operand\" \"nrmT\"))]\n@@ -1046,8 +1046,8 @@\n   return \\\"insv %3,%2,%1,%0\\\";\n }\")\n \n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+(define_insn \"*insv_2\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+ro\")\n \t\t\t (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"nrmT\"))\n \t(match_operand:SI 3 \"general_operand\" \"nrmT\"))]"}]}