{"sha": "8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhNmVhODc4ZmQwOTY1NjA2YmE2Y2ZkNzRjZjcwOTdhNDBlZDZjMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-07-03T08:34:20Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-07-03T08:34:20Z"}, "message": "Remove another bunch of dead assignment.\n\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* lra-eliminations.c (eliminate_regs_in_insn): Remove\n\tdead assignemts.\n\t* reg-stack.c (check_asm_stack_operands): Likewise.\n\t* tree-ssa-structalias.c (create_function_info_for): Likewise.\n\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n\t* config/i386/i386-expand.c (ix86_expand_sse2_mulvxdi3): Use\n\tforce_expand_binop.\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* c-common.c (try_to_locate_new_include_insertion_point): Remove\n\tdead assignemts.\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* call.c (build_new_op_1): Remove\n\tdead assignemts.\n\t* typeck.c (cp_build_binary_op): Likewise.\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* check.c (gfc_check_c_funloc): Remove\n\tdead assignemts.\n\t* decl.c (variable_decl): Likewise.\n\t* resolve.c (resolve_typebound_function): Likewise.\n\t* simplify.c (gfc_simplify_matmul): Likewise.\n\t(gfc_simplify_scan): Likewise.\n\t* trans-array.c (gfc_could_be_alias): Likewise.\n\t* trans-common.c (add_equivalences): Likewise.\n\t* trans-expr.c (trans_class_vptr_len_assignment): Likewise.\n\t(gfc_trans_array_constructor_copy): Likewise.\n\t(gfc_trans_assignment_1): Likewise.\n\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Likewise.\n\t* trans-openmp.c (gfc_omp_finish_clause): Likewise.\n\t* trans-types.c (gfc_get_array_descriptor_base): Likewise.\n\t* trans.c (gfc_build_final_call): Likewise.\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* line-map.c (linemap_get_expansion_filename): Remove\n\tdead assignemts.\n\t* mkdeps.c (make_write): Likewise.\n\nFrom-SVN: r272994", "tree": {"sha": "2fcd128b29308fd9264fcad903970fa1cdcdb84a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fcd128b29308fd9264fcad903970fa1cdcdb84a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aa2e42cb4be16ee0937ba872b297b11d8f0a18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa2e42cb4be16ee0937ba872b297b11d8f0a18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa2e42cb4be16ee0937ba872b297b11d8f0a18b"}], "stats": {"total": 142, "additions": 78, "deletions": 64}, "files": [{"sha": "b76b213ce18a2ca868ab84e1b23e1d3e3420cb0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1,3 +1,13 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* lra-eliminations.c (eliminate_regs_in_insn): Remove\n+\tdead assignemts.\n+\t* reg-stack.c (check_asm_stack_operands): Likewise.\n+\t* tree-ssa-structalias.c (create_function_info_for): Likewise.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n+\t* config/i386/i386-expand.c (ix86_expand_sse2_mulvxdi3): Use\n+\tforce_expand_binop.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/90892"}, {"sha": "84d1f2e4f1d14a3c35c1c046180baaaadd267592", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1,3 +1,8 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.c (try_to_locate_new_include_insertion_point): Remove\n+\tdead assignemts.\n+\n 2019-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.c (c_omp_split_clauses): Put OMP_CLAUSE_REDUCTION_INSCAN"}, {"sha": "cb92710f2bc62e894592fac84cfc8f04d7e15fd7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -8601,8 +8601,8 @@ try_to_locate_new_include_insertion_point (const char *file, location_t loc)\n \n   /*  Get ordinary map containing LOC (or its expansion).  */\n   const line_map_ordinary *ord_map_for_loc = NULL;\n-  loc = linemap_resolve_location (line_table, loc, LRK_MACRO_EXPANSION_POINT,\n-\t\t\t\t  &ord_map_for_loc);\n+  linemap_resolve_location (line_table, loc, LRK_MACRO_EXPANSION_POINT,\n+\t\t\t    &ord_map_for_loc);\n   gcc_assert (ord_map_for_loc);\n \n   for (unsigned int i = 0; i < LINEMAPS_ORDINARY_USED (line_table); i++)"}, {"sha": "5d3b74a159fdcdb49b6f4189d100ba28b513f845", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -19779,8 +19779,7 @@ ix86_expand_sse2_mulvxdi3 (rtx op0, rtx op1, rtx op2)\n       emit_insn (gen_vec_widen_umult_even_v4si (t5, \n \t\t\t\t\tgen_lowpart (V4SImode, op1),\n \t\t\t\t\tgen_lowpart (V4SImode, op2)));\n-      op0 = expand_binop (mode, add_optab, t5, t4, op0, 1, OPTAB_DIRECT);\n-\n+      force_expand_binop (mode, add_optab, t5, t4, op0, 1, OPTAB_DIRECT);\n     }\n   else\n     {"}, {"sha": "7031d8d66bf8ddf75a322d386e018b77874a6d73", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1,3 +1,9 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* call.c (build_new_op_1): Remove\n+\tdead assignemts.\n+\t* typeck.c (cp_build_binary_op): Likewise.\n+\n 2019-06-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/55442 - memory-hog with highly recursive constexpr."}, {"sha": "0709325550568ff30615a8d9f72305abe8bcea8c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -6167,7 +6167,7 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t      conv = cand->convs[2];\n \t      if (conv->kind == ck_ref_bind)\n \t\tconv = next_conversion (conv);\n-\t      arg3 = convert_like (conv, arg3, complain);\n+\t      convert_like (conv, arg3, complain);\n \t    }\n \n \t}"}, {"sha": "77095953134838120ced894c20fe8d63e94b7e90", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -5218,7 +5218,6 @@ cp_build_binary_op (const op_location_t &location,\n \t    }\n \t  result_type = build_opaque_vector_type (intt,\n \t\t\t\t\t\t  TYPE_VECTOR_SUBPARTS (type0));\n-\t  converted = 1;\n \t  return build_vec_cmp (resultcode, result_type, op0, op1);\n \t}\n       build_type = boolean_type_node;"}, {"sha": "a163a1d79198715f1f3888cffa5cbbc01a769828", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1,3 +1,21 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* check.c (gfc_check_c_funloc): Remove\n+\tdead assignemts.\n+\t* decl.c (variable_decl): Likewise.\n+\t* resolve.c (resolve_typebound_function): Likewise.\n+\t* simplify.c (gfc_simplify_matmul): Likewise.\n+\t(gfc_simplify_scan): Likewise.\n+\t* trans-array.c (gfc_could_be_alias): Likewise.\n+\t* trans-common.c (add_equivalences): Likewise.\n+\t* trans-expr.c (trans_class_vptr_len_assignment): Likewise.\n+\t(gfc_trans_array_constructor_copy): Likewise.\n+\t(gfc_trans_assignment_1): Likewise.\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Likewise.\n+\t* trans-openmp.c (gfc_omp_finish_clause): Likewise.\n+\t* trans-types.c (gfc_get_array_descriptor_base): Likewise.\n+\t* trans.c (gfc_build_final_call): Likewise.\n+\n 2019-06-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/90987"}, {"sha": "9580180402247784d433bfa5164818f401867c34", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -4884,17 +4884,13 @@ gfc_check_c_funloc (gfc_expr *x)\n \n   if (attr.function && !attr.proc_pointer && x->expr_type == EXPR_VARIABLE\n       && x->symtree->n.sym == x->symtree->n.sym->result)\n-    {\n-      gfc_namespace *ns = gfc_current_ns;\n-\n-      for (ns = gfc_current_ns; ns; ns = ns->parent)\n-\tif (x->symtree->n.sym == ns->proc_name)\n-\t  {\n-\t    gfc_error (\"Function result %qs at %L is invalid as X argument \"\n-\t\t       \"to C_FUNLOC\", x->symtree->n.sym->name, &x->where);\n-\t    return false;\n-\t  }\n-    }\n+    for (gfc_namespace *ns = gfc_current_ns; ns; ns = ns->parent)\n+      if (x->symtree->n.sym == ns->proc_name)\n+\t{\n+\t  gfc_error (\"Function result %qs at %L is invalid as X argument \"\n+\t\t     \"to C_FUNLOC\", x->symtree->n.sym->name, &x->where);\n+\t  return false;\n+\t}\n \n   if (attr.flavor != FL_PROCEDURE)\n     {"}, {"sha": "3d29091282e457c86eb145b4de18c2ef3940e5a2", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -2455,7 +2455,6 @@ variable_decl (int elem)\n \n       /* %FILL components are given invalid fortran names.  */\n       snprintf (name, GFC_MAX_SYMBOL_LEN + 1, \"%%FILL%u\", fill_id++);\n-      m = MATCH_YES;\n     }\n \n   var_locus = gfc_current_locus;"}, {"sha": "c82e8f21341a408bacca6e6738a798a84f689185", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -6573,7 +6573,6 @@ resolve_typebound_function (gfc_expr* e)\n     }\n \n   c = gfc_find_component (declared, \"_data\", true, true, NULL);\n-  declared = c->ts.u.derived;\n \n   /* Treat the call as if it is a typebound procedure, in order to roll\n      out the correct name for the specific function.  */"}, {"sha": "2d20913ca560974d1edb7820f8c91afbb4c5d3c7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -4714,7 +4714,7 @@ gfc_simplify_matmul (gfc_expr *matrix_a, gfc_expr *matrix_b)\n   else\n     gcc_unreachable();\n \n-  offset_a = offset_b = 0;\n+  offset_b = 0;\n   for (col = 0; col < result_columns; ++col)\n     {\n       offset_a = 0;\n@@ -6999,20 +6999,17 @@ gfc_simplify_scan (gfc_expr *e, gfc_expr *c, gfc_expr *b, gfc_expr *kind)\n \t    indx = 0;\n \t}\n       else\n-\t{\n-\t  i = 0;\n-\t  for (indx = len; indx > 0; indx--)\n-\t    {\n-\t      for (i = 0; i < lenc; i++)\n-\t\t{\n-\t\t  if (c->value.character.string[i]\n-\t\t      == e->value.character.string[indx - 1])\n-\t\t    break;\n-\t\t}\n-\t      if (i < lenc)\n-\t\tbreak;\n-\t    }\n-\t}\n+\tfor (indx = len; indx > 0; indx--)\n+\t  {\n+\t    for (i = 0; i < lenc; i++)\n+\t      {\n+\t\tif (c->value.character.string[i]\n+\t\t    == e->value.character.string[indx - 1])\n+\t\t  break;\n+\t      }\n+\t    if (i < lenc)\n+\t      break;\n+\t  }\n     }\n \n   result = gfc_get_int_expr (k, &e->where, indx);"}, {"sha": "1ab03615fda0a6a9e93d3ffe029a2a8eddb14767", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -4794,8 +4794,6 @@ gfc_could_be_alias (gfc_ss * lss, gfc_ss * rss)\n \n   lsym_pointer = lsym->attr.pointer;\n   lsym_target = lsym->attr.target;\n-  lsym_pointer = lsym->attr.pointer;\n-  lsym_target = lsym->attr.target;\n \n   for (rref = rexpr->ref; rref != rss->info->data.array.ref; rref = rref->next)\n     {"}, {"sha": "9fc23ff5e7c7d2122c3bf50338424845e31e4bb2", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1007,10 +1007,8 @@ static void\n add_equivalences (bool *saw_equiv)\n {\n   segment_info *f;\n-  bool seen_one, more;\n+  bool more = TRUE;\n \n-  seen_one = false;\n-  more = TRUE;\n   while (more)\n     {\n       more = FALSE;\n@@ -1019,7 +1017,7 @@ add_equivalences (bool *saw_equiv)\n \t  if (!f->sym->equiv_built)\n \t    {\n \t      f->sym->equiv_built = 1;\n-\t      seen_one = find_equivalence (f);\n+\t      bool seen_one = find_equivalence (f);\n \t      if (seen_one)\n \t\t{\n \t\t  *saw_equiv = true;"}, {"sha": "a4e8351110ac247f77d213f2cc76ea00eb75206a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -8912,7 +8912,6 @@ trans_class_vptr_len_assignment (stmtblock_t *block, gfc_expr * le,\n \t\tfrom_len = rse->string_length;\n \t      else if (re->ts.type == BT_CHARACTER && re->ts.u.cl->length)\n \t\t{\n-\t\t  from_len = gfc_get_expr_charlen (re);\n \t\t  gfc_init_se (&se, NULL);\n \t\t  gfc_conv_expr (&se, re->ts.u.cl->length);\n \t\t  gfc_add_block_to_block (block, &se.pre);\n@@ -10171,10 +10170,6 @@ gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n   stype = gfc_typenode_for_spec (&expr2->ts);\n   src = gfc_build_constant_array_constructor (expr2, stype);\n \n-  stype = TREE_TYPE (src);\n-  if (POINTER_TYPE_P (stype))\n-    stype = TREE_TYPE (stype);\n-\n   return gfc_build_memcpy_call (dst, src, len);\n }\n \n@@ -10924,7 +10919,6 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t\t       && (gfc_is_class_array_function (expr2)\n \t\t\t   || gfc_is_alloc_class_scalar_function (expr2)))\n     {\n-      tmp = rse.expr;\n       tmp = gfc_nullify_alloc_comp (expr1->ts.u.derived, rse.expr, 0);\n       gfc_prepend_expr_to_block (&rse.post, tmp);\n       if (lss != gfc_ss_terminator && rss == gfc_ss_terminator)"}, {"sha": "a7ebc413d6ec4b82717146acbb3230fd3b6f03f7", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -10971,7 +10971,6 @@ conv_intrinsic_atomic_op (gfc_code *code)\n   fn = (built_in_function) ((int) fn\n \t\t\t    + exact_log2 (tree_to_uhwi (TYPE_SIZE_UNIT (tmp)))\n \t\t\t    + 1);\n-  tmp = builtin_decl_explicit (fn);\n   tree itype = TREE_TYPE (TREE_TYPE (atom));\n   tmp = builtin_decl_explicit (fn);\n "}, {"sha": "8eae7bc0a520dfee22797540c80659d560602a75", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1199,7 +1199,6 @@ gfc_omp_finish_clause (tree c, gimple_seq *pre_p)\n     {\n       OMP_CLAUSE_CHAIN (c4) = OMP_CLAUSE_CHAIN (last);\n       OMP_CLAUSE_CHAIN (last) = c4;\n-      last = c4;\n     }\n }\n "}, {"sha": "e1033b3b223bee3cd3184122e23658ce57a58ca0", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1817,11 +1817,11 @@ gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n   TYPE_NAMELESS (fat_type) = 1;\n \n   /* Add the data member as the first element of the descriptor.  */\n-  decl = gfc_add_field_to_struct_1 (fat_type,\n-\t\t\t\t    get_identifier (\"data\"),\n-\t\t\t\t    (restricted\n-\t\t\t\t     ? prvoid_type_node\n-\t\t\t\t     : ptr_type_node), &chain);\n+  gfc_add_field_to_struct_1 (fat_type,\n+\t\t\t     get_identifier (\"data\"),\n+\t\t\t     (restricted\n+\t\t\t      ? prvoid_type_node\n+\t\t\t      : ptr_type_node), &chain);\n \n   /* Add the base component.  */\n   decl = gfc_add_field_to_struct_1 (fat_type,"}, {"sha": "303abd994c5812b1d8e02e8db83b105107d8597f", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1014,9 +1014,6 @@ gfc_build_final_call (gfc_typespec ts, gfc_expr *final_wrapper, gfc_expr *var,\n \t  gfc_add_block_to_block (&block, &se.pre);\n \t  gcc_assert (se.post.head == NULL_TREE);\n \t  array = se.expr;\n-\t  if (TREE_CODE (array) == ADDR_EXPR\n-\t      && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (array, 0))))\n-\t    tmp = TREE_OPERAND (array, 0);\n \n \t  if (!gfc_is_coarray (array_expr))\n \t    {"}, {"sha": "051839a2717663e44d0e177aed2ea1819dfc2498", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1053,7 +1053,7 @@ eliminate_regs_in_insn (rtx_insn *insn, bool replace_p, bool first_p,\n      PARALLEL since the new one still will, but we can't call\n      single_set without having put new body into the insn and the\n      re-recognition won't hurt in this rare case.  */\n-  id = lra_update_insn_recog_data (insn);\n+  lra_update_insn_recog_data (insn);\n }\n \n /* Spill pseudos which are assigned to hard registers in SET.  Add"}, {"sha": "5576630c8f25f96dc83fa2a5bd19cbe3ce51c75e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -484,7 +484,6 @@ check_asm_stack_operands (rtx_insn *insn)\n \n   if (which_alternative < 0)\n     {\n-      malformed_asm = 1;\n       /* Avoid further trouble with this insn.  */\n       PATTERN (insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n       return 0;"}, {"sha": "29688d2618d41efe54d3c8c2720b730dde22e377", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -5955,7 +5955,6 @@ create_function_info_for (tree decl, const char *name, bool add_id,\n \n       gcc_assert (prev_vi->offset < argvi->offset);\n       prev_vi->next = argvi->id;\n-      prev_vi = argvi;\n     }\n \n   return vi;"}, {"sha": "8389f5555e81cfab32b3a8e239379bf982d47fc0", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1981,7 +1981,6 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       || code == VEC_UNPACK_FLOAT_LO_EXPR\n       || code == VEC_PACK_FLOAT_EXPR)\n     {\n-      type = TREE_TYPE (rhs1);\n       /* We do not know how to scalarize those.  */\n       return;\n     }\n@@ -2004,7 +2003,6 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       || code == VEC_WIDEN_LSHIFT_HI_EXPR\n       || code == VEC_WIDEN_LSHIFT_LO_EXPR)\n     {\n-      type = TREE_TYPE (rhs1);\n       /* We do not know how to scalarize those.  */\n       return;\n     }"}, {"sha": "ff5f0aa8e06ca3656be5814232ca0c38e44c2f73", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1,3 +1,9 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* line-map.c (linemap_get_expansion_filename): Remove\n+\tdead assignemts.\n+\t* mkdeps.c (make_write): Likewise.\n+\n 2019-07-02  qing zhao  <qing.zhao@oracle.com>\n \n \tPR preprocessor/90581"}, {"sha": "8ab873b4e184043f13adbf1393a6c8217df34d7d", "filename": "libcpp/line-map.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -1160,8 +1160,7 @@ linemap_get_expansion_filename (struct line_maps *set,\n   if (location < RESERVED_LOCATION_COUNT)\n     return NULL;\n \n-  location =\n-    linemap_macro_loc_to_exp_point (set, location, &map);\n+  linemap_macro_loc_to_exp_point (set, location, &map);\n \n   return LINEMAP_FILE (map);\n }"}, {"sha": "50f0fb2a80dc12847e400e07bed40c81430e399d", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "patch": "@@ -378,7 +378,7 @@ make_write (const struct mkdeps *d, FILE *fp, bool phony, unsigned int colmax)\n       column = make_write_vec (d->targets, fp, 0, colmax, d->quote_lwm);\n       fputs (\":\", fp);\n       column++;\n-      column = make_write_vec (d->deps, fp, column, colmax);\n+      make_write_vec (d->deps, fp, column, colmax);\n       fputs (\"\\n\", fp);\n       if (phony)\n \tfor (unsigned i = 1; i < d->deps.size (); i++)"}]}