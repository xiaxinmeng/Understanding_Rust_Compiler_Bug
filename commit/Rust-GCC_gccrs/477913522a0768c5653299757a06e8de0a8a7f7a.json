{"sha": "477913522a0768c5653299757a06e8de0a8a7f7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3OTEzNTIyYTA3NjhjNTY1MzI5OTc1N2EwNmU4ZGUwYThhN2Y3YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-04T10:59:56Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-04T10:59:56Z"}, "message": "2003-12-04  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramPacket.java\n\t(length): Made packge-private to make it accessible via CNI.\n\t(maxlen): New field.\n\t(DatagramPacket): Cleaned up.\n\t(setSocketAddress): Add message to exception.\n\t(setData): Call other setData().\n\t(setData): Call setLength().\n\t(setLength): Initialize maxlen too.\n\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (peekData):\n\tGet maximal length from maxlen field, set length field directly.\n\t(receive): Likewise.\n\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc (peekData):\n\tGet maximal length from maxlen field, set length field directly.\n\t(receive): Likewise.\n\nFrom-SVN: r74278", "tree": {"sha": "da9d9cde6113f511230666f5365023e8ee3caa08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9d9cde6113f511230666f5365023e8ee3caa08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477913522a0768c5653299757a06e8de0a8a7f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477913522a0768c5653299757a06e8de0a8a7f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477913522a0768c5653299757a06e8de0a8a7f7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477913522a0768c5653299757a06e8de0a8a7f7a/comments", "author": null, "committer": null, "parents": [{"sha": "7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1156ed35e4f5a14cea93e42137302eb1d1f07a"}], "stats": {"total": 121, "additions": 55, "deletions": 66}, "files": [{"sha": "cd35984824298a08e6ec20dffa1fab6377da21a2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=477913522a0768c5653299757a06e8de0a8a7f7a", "patch": "@@ -1,3 +1,20 @@\n+2003-12-04  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramPacket.java\n+\t(length): Made packge-private to make it accessible via CNI.\n+\t(maxlen): New field.\n+\t(DatagramPacket): Cleaned up.\n+\t(setSocketAddress): Add message to exception.\n+\t(setData): Call other setData().\n+\t(setData): Call setLength().\n+\t(setLength): Initialize maxlen too.\n+\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (peekData):\n+\tGet maximal length from maxlen field, set length field directly.\n+\t(receive): Likewise.\n+\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc (peekData):\n+\tGet maximal length from maxlen field, set length field directly.\n+\t(receive): Likewise.\n+\n 2003-12-03  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* gnu/java/nio/natSelectorImplPosix.cc"}, {"sha": "f296d12dfe80f6c82a82c9f6426c2c47ea9bfcb3", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=477913522a0768c5653299757a06e8de0a8a7f7a", "patch": "@@ -209,7 +209,7 @@ gnu::java::net::PlainDatagramSocketImpl::peekData (::java::net::DatagramPacket *\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n   jbyte *dbytes = elements (p->getData()) + p->getOffset();\n-  jint maxlen = p->getData()->length - p->getOffset();\n+  jint maxlen = p->maxlen - p->getOffset();\n   ssize_t retlen = 0;\n \n   // Do timeouts via select since SO_RCVTIMEO is not always available.\n@@ -255,7 +255,7 @@ gnu::java::net::PlainDatagramSocketImpl::peekData (::java::net::DatagramPacket *\n \n   p->setAddress (new ::java::net::InetAddress (raddr, NULL));\n   p->setPort (rport);\n-  p->setLength ((jint) retlen);\n+  p->length = (int) retlen;\n   return rport;\n \n  error:\n@@ -329,7 +329,7 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n   jbyte *dbytes = elements (p->getData()) + p->getOffset();\n-  jint maxlen = p->getData()->length - p->getOffset();\n+  jint maxlen = p->maxlen - p->getOffset();\n   ssize_t retlen = 0;\n \n   // Do timeouts via select since SO_RCVTIMEO is not always available.\n@@ -375,7 +375,7 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n \n   p->setAddress (new ::java::net::InetAddress (raddr, NULL));\n   p->setPort (rport);\n-  p->setLength ((jint) retlen);\n+  p->length = (jint) retlen;\n   return;\n \n  error:"}, {"sha": "18906a04bc462a9370fec67aec618d667f1d1a3e", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplWin32.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc?ref=477913522a0768c5653299757a06e8de0a8a7f7a", "patch": "@@ -203,7 +203,7 @@ gnu::java::net::PlainDatagramSocketImpl::peekData(::java::net::DatagramPacket *p\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n   jbyte *dbytes = elements (p->getData()) + p->getOffset();\n-  jint maxlen = p->getData()->length - p->getOffset();\n+  jint maxlen = p->maxlen - p->getOffset();\n   ssize_t retlen = 0;\n \n   if (timeout > 0)\n@@ -241,7 +241,7 @@ gnu::java::net::PlainDatagramSocketImpl::peekData(::java::net::DatagramPacket *p\n \n   p->setAddress (new ::java::net::InetAddress (raddr, NULL));\n   p->setPort (rport);\n-  p->setLength ((jint) retlen);\n+  p->length = (jint) retlen;\n   return rport;\n \n error:\n@@ -318,7 +318,7 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n   jbyte *dbytes = elements (p->getData()) + p->getOffset();\n-  jint maxlen = p->getData()->length - p->getOffset();\n+  jint maxlen = p->maxlen - p->getOffset();\n   ssize_t retlen = 0;\n \n   if (timeout > 0)\n@@ -359,7 +359,7 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n \n   p->setAddress (new ::java::net::InetAddress (raddr, NULL));\n   p->setPort (rport);\n-  p->setLength ((jint) retlen);\n+  p->length = (jint) retlen;\n   return;\n \n  error:"}, {"sha": "f23364cd0af87b7aaffd88b6cdb4b5c864908f3f", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 30, "deletions": 58, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477913522a0768c5653299757a06e8de0a8a7f7a/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=477913522a0768c5653299757a06e8de0a8a7f7a", "patch": "@@ -78,13 +78,18 @@\n   private int offset;\n \n   /**\n-   * The length of the data buffer to send\n+   * The length of the data buffer to send.\n    */\n-  private int length;\n+  int length;\n \n+  /**\n+   * The maximal length of the buffer.\n+   */\n+  int maxlen;\n+  \n   /**\n    * The address to which the packet should be sent or from which it\n-   * was received\n+   * was received.\n    */\n   private InetAddress address;\n \n@@ -106,21 +111,9 @@\n    */\n   public DatagramPacket(byte[] buf, int offset, int length)\n   {\n-    if (buf == null)\n-      throw new NullPointerException(\"Null buffer\");\n-    if (offset < 0)\n-      throw new IllegalArgumentException(\"Invalid offset: \" + offset);\n-    if (length < 0)\n-      throw new IllegalArgumentException(\"Invalid length: \" + length);\n-    if (offset + length > buf.length)\n-      throw new IllegalArgumentException(\"Potential buffer overflow - offset: \"\n-\t\t\t+ offset + \" length: \" + length);\n-\n-    buffer = buf;\n-    this.offset = offset;\n-    this.length = length;\n-    this.address = null;\n-    this.port = -1;\n+    setData(buf, offset, length);\n+    address = null;\n+    port = -1;\n   }\n \n   /**\n@@ -150,25 +143,9 @@ public DatagramPacket(byte[] buf, int length)\n   public DatagramPacket(byte[] buf, int offset, int length,\n \tInetAddress address, int port)\n   {\n-    if (buf == null)\n-      throw new NullPointerException(\"Null buffer\");\n-    if (offset < 0)\n-      throw new IllegalArgumentException(\"Invalid offset: \" + offset);\n-    if (length < 0)\n-      throw new IllegalArgumentException(\"Invalid length: \" + length);\n-    if (offset + length > buf.length)\n-      throw new IllegalArgumentException(\"Potential buffer overflow - offset: \"\n-\t\t\t+ offset + \" length: \" + length);\n-    if (port < 0 || port > 65535)\n-      throw new IllegalArgumentException(\"Invalid port: \" + port);\n-    if (address == null)\n-      throw new NullPointerException(\"Null address\");\n-\n-    buffer = buf;\n-    this.offset = offset;\n-    this.length = length;\n-    this.address = address;\n-    this.port = port;\n+    setData(buf, offset, length);\n+    setAddress(address);\n+    setPort(port);\n   }\n \n   /**\n@@ -203,8 +180,13 @@ public DatagramPacket(byte[] buf, int offset, int length,\n \t\t        SocketAddress address)\n      throws SocketException\n   {\n-    this(buf, offset, length, ((InetSocketAddress)address).getAddress(),\n-         ((InetSocketAddress)address).getPort());\n+    if (! (address instanceof InetSocketAddress))\n+      throw new IllegalArgumentException(\"unsupported address type\");\n+\n+    InetSocketAddress tmp = (InetSocketAddress) address;\n+    setData(buf, offset, length);\n+    setAddress(tmp.getAddress());\n+    setPort(tmp.getPort());\n   }\n \n   /**\n@@ -223,8 +205,7 @@ public DatagramPacket(byte[] buf, int offset, int length,\n   public DatagramPacket(byte[] buf, int length, SocketAddress address)\n     throws SocketException\n   {\n-    this(buf, 0, length, ((InetSocketAddress)address).getAddress(),\n-         ((InetSocketAddress)address).getPort());\n+    this(buf, 0, length, address);\n   }\n \n   /**\n@@ -330,9 +311,10 @@ public synchronized void setPort(int iport)\n   public void setSocketAddress(SocketAddress address)\n     throws IllegalArgumentException\n   {\n-    if (address == null) throw new IllegalArgumentException();\n+    if (address == null)\n+      throw new IllegalArgumentException(\"address may not be null\");\n \n-    InetSocketAddress tmp = (InetSocketAddress)address;\n+    InetSocketAddress tmp = (InetSocketAddress) address;\n     this.address = tmp.getAddress();\n     this.port = tmp.getPort();\n   }\n@@ -359,14 +341,9 @@ public SocketAddress getSocketAddress()\n    *\n    * @since 1.1\n    */\n-  public synchronized void setData(byte[] buf)\n+  public void setData(byte[] buf)\n   {\n-    // This form of setData requires setLength to be called separately\n-    // and subsequently.\n-    if (buf == null)\n-      throw new NullPointerException(\"Null buffer\");\n-\n-    buffer = buf;\n+    setData(buf, 0, buf.length);\n   }\n \n   /**\n@@ -388,15 +365,10 @@ public synchronized void setData(byte[] buf, int offset, int length)\n       throw new NullPointerException(\"Null buffer\");\n     if (offset < 0)\n       throw new IllegalArgumentException(\"Invalid offset: \" + offset);\n-    if (length < 0)\n-      throw new IllegalArgumentException(\"Invalid length: \" + length);\n-    if (offset + length > buf.length)\n-      throw new IllegalArgumentException(\"Potential buffer overflow - offset: \"\n-\t\t\t+ offset + \" length: \" + length);\n \n     buffer = buf;\n     this.offset = offset;\n-    this.length = length;\n+    setLength(length);\n   }\n \n   /**\n@@ -418,6 +390,6 @@ public synchronized void setLength(int length)\n \t\t\t+ offset + \" length: \" + length);\n \n     this.length = length;\n+    this.maxlen = length;\n   }\n-} // class DatagramPacket\n-\n+}"}]}