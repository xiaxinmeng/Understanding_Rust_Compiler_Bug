{"sha": "20bdc473ebd7176544e0c8cdf87750adc6f44a97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiZGM0NzNlYmQ3MTc2NTQ0ZTBjOGNkZjg3NzUwYWRjNmY0NGE5Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-22T16:26:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-22T16:26:43Z"}, "message": "Add a vect_get_scalar_dr_size helper function\n\nThis patch adds a helper function for getting the number of bytes\naccessed by an unvectorised data reference, which helps when general\nmodes have a variable size.\n\n2017-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vect_get_scalar_dr_size): New function.\n\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel): Use it.\n\t(vect_enhance_data_refs_alignment): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253099", "tree": {"sha": "3f0a8db11d05c48f085d0206443df458f655ad52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f0a8db11d05c48f085d0206443df458f655ad52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20bdc473ebd7176544e0c8cdf87750adc6f44a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20bdc473ebd7176544e0c8cdf87750adc6f44a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20bdc473ebd7176544e0c8cdf87750adc6f44a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20bdc473ebd7176544e0c8cdf87750adc6f44a97/comments", "author": null, "committer": null, "parents": [{"sha": "dce04e57faaa33c1da286effc97943f5c9924691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce04e57faaa33c1da286effc97943f5c9924691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce04e57faaa33c1da286effc97943f5c9924691"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "43e885b761496999fb5c92fcf351b8461ff16617", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20bdc473ebd7176544e0c8cdf87750adc6f44a97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20bdc473ebd7176544e0c8cdf87750adc6f44a97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20bdc473ebd7176544e0c8cdf87750adc6f44a97", "patch": "@@ -1,3 +1,11 @@\n+2017-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vectorizer.h (vect_get_scalar_dr_size): New function.\n+\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel): Use it.\n+\t(vect_enhance_data_refs_alignment): Likewise.\n+\n 2017-09-22  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* config/arm/parsecpu.awk (fatal): Note that we've encountered an"}, {"sha": "175052a290bed07332473c6343699245f0643aa3", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20bdc473ebd7176544e0c8cdf87750adc6f44a97/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20bdc473ebd7176544e0c8cdf87750adc6f44a97/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=20bdc473ebd7176544e0c8cdf87750adc6f44a97", "patch": "@@ -955,7 +955,6 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n   return true;\n }\n \n-\n /* Function vect_update_misalignment_for_peel.\n    Sets DR's misalignment\n    - to 0 if it has the same alignment as DR_PEEL,\n@@ -975,8 +974,8 @@ vect_update_misalignment_for_peel (struct data_reference *dr,\n   unsigned int i;\n   vec<dr_p> same_aligned_drs;\n   struct data_reference *current_dr;\n-  int dr_size = GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (DR_REF (dr))));\n-  int dr_peel_size = GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (DR_REF (dr_peel))));\n+  int dr_size = vect_get_scalar_dr_size (dr);\n+  int dr_peel_size = vect_get_scalar_dr_size (dr_peel);\n   stmt_vec_info stmt_info = vinfo_for_stmt (DR_STMT (dr));\n   stmt_vec_info peel_stmt_info = vinfo_for_stmt (DR_STMT (dr_peel));\n \n@@ -1664,8 +1663,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \n               vectype = STMT_VINFO_VECTYPE (stmt_info);\n               nelements = TYPE_VECTOR_SUBPARTS (vectype);\n-              mis = DR_MISALIGNMENT (dr) / GET_MODE_SIZE (TYPE_MODE (\n-                                                TREE_TYPE (DR_REF (dr))));\n+\t      mis = DR_MISALIGNMENT (dr) / vect_get_scalar_dr_size (dr);\n \t      if (DR_MISALIGNMENT (dr) != 0)\n \t\tnpeel_tmp = (negative ? (mis - nelements)\n \t\t\t     : (nelements - mis)) & (nelements - 1);\n@@ -1937,8 +1935,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n                  updating DR_MISALIGNMENT values.  The peeling factor is the\n                  vectorization factor minus the misalignment as an element\n                  count.  */\n-              mis = DR_MISALIGNMENT (dr0);\n-              mis /= GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (DR_REF (dr0))));\n+\t      mis = DR_MISALIGNMENT (dr0) / vect_get_scalar_dr_size (dr0);\n               npeel = ((negative ? mis - nelements : nelements - mis)\n \t\t       & (nelements - 1));\n             }"}, {"sha": "5d273ca1a68cb02c7cf57d37e9b8c6d04ce42c74", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20bdc473ebd7176544e0c8cdf87750adc6f44a97/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20bdc473ebd7176544e0c8cdf87750adc6f44a97/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=20bdc473ebd7176544e0c8cdf87750adc6f44a97", "patch": "@@ -1095,6 +1095,19 @@ vect_get_num_copies (loop_vec_info loop_vinfo, tree vectype)\n \t  / TYPE_VECTOR_SUBPARTS (vectype));\n }\n \n+/* Return the size of the value accessed by unvectorized data reference DR.\n+   This is only valid once STMT_VINFO_VECTYPE has been calculated for the\n+   associated gimple statement, since that guarantees that DR accesses\n+   either a scalar or a scalar equivalent.  (\"Scalar equivalent\" here\n+   includes things like V1SI, which can be vectorized in the same way\n+   as a plain SI.)  */\n+\n+inline unsigned int\n+vect_get_scalar_dr_size (struct data_reference *dr)\n+{\n+  return tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dr))));\n+}\n+\n /* Source location */\n extern source_location vect_location;\n "}]}