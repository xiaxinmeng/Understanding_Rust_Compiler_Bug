{"sha": "1a7391d97ffef5efb797f3701a82577c7270ce66", "node_id": "C_kwDOANBUbNoAKDFhNzM5MWQ5N2ZmZWY1ZWZiNzk3ZjM3MDFhODI1NzdjNzI3MGNlNjY", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-07T10:40:14Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-13T00:37:09Z"}, "message": "rust-session-manager: address comments ...\n\n... also more closely match rustc's behavior\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>", "tree": {"sha": "28aadfa16376730558896c624c7301b3b2a14529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28aadfa16376730558896c624c7301b3b2a14529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7391d97ffef5efb797f3701a82577c7270ce66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7391d97ffef5efb797f3701a82577c7270ce66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7391d97ffef5efb797f3701a82577c7270ce66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7391d97ffef5efb797f3701a82577c7270ce66/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28769ea0ab894248005db31dd6a8553df83e4907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28769ea0ab894248005db31dd6a8553df83e4907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28769ea0ab894248005db31dd6a8553df83e4907"}], "stats": {"total": 133, "additions": 89, "deletions": 44}, "files": [{"sha": "4584c93cea1cfa483ee234d97c6352c1504dbc49", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=1a7391d97ffef5efb797f3701a82577c7270ce66", "patch": "@@ -458,6 +458,7 @@ run_rust_tests ()\n   simple_assert ();\n   rust_cfg_parser_test ();\n   rust_privacy_ctx_test ();\n+  rust_crate_name_validation_test ();\n }\n } // namespace selftest\n "}, {"sha": "15a02f81146f04ea7973b13d7ab5dd69454067e9", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=1a7391d97ffef5efb797f3701a82577c7270ce66", "patch": "@@ -35,6 +35,7 @@\n #include \"diagnostic.h\"\n #include \"input.h\"\n #include \"rust-target.h\"\n+#include \"selftest.h\"\n \n extern bool\n saw_errors (void);\n@@ -55,9 +56,10 @@ const char *kHIRTypeResolutionDumpFile = \"gccrs.type-resolution.dump\";\n const char *kTargetOptionsDumpFile = \"gccrs.target-options.dump\";\n \n const std::string kDefaultCrateName = \"rust_out\";\n+const size_t kMaxNameLength = 64;\n \n static std::string\n-infer_crate_name (const std::string filename)\n+infer_crate_name (const std::string &filename)\n {\n   if (filename == \"-\")\n     return kDefaultCrateName;\n@@ -74,9 +76,42 @@ infer_crate_name (const std::string filename)\n   if (ext_position != std::string::npos)\n     crate.erase (ext_position);\n \n+  // Replace all the '-' symbols with '_' per Rust rules\n+  for (auto &c : crate)\n+    {\n+      if (c == '-')\n+\tc = '_';\n+    }\n   return crate;\n }\n \n+bool\n+CompileOptions::validate_crate_name (const std::string &crate_name)\n+{\n+  if (crate_name.empty ())\n+    {\n+      rust_error_at (Location (), \"crate name cannot be empty\");\n+      return false;\n+    }\n+  if (crate_name.length () > kMaxNameLength)\n+    {\n+      rust_error_at (Location (), \"crate name cannot exceed %ld characters\",\n+\t\t     kMaxNameLength);\n+      return false;\n+    }\n+  for (auto &c : crate_name)\n+    {\n+      if (!(ISALNUM (c) || c == '_'))\n+\t{\n+\t  rust_error_at (Location (),\n+\t\t\t \"invalid character %<%c%> in crate name: %<%s%>\", c,\n+\t\t\t crate_name.c_str ());\n+\t  return false;\n+\t}\n+    }\n+  return true;\n+}\n+\n // Implicitly enable a target_feature (and recursively enable dependencies).\n void\n Session::implicitly_enable_feature (std::string feature_name)\n@@ -496,21 +531,25 @@ Session::enable_dump (std::string arg)\n void\n Session::parse_files (int num_files, const char **files)\n {\n-  rust_assert (num_files > 0);\n-\n   if (options.crate_name.empty ())\n     {\n       /* HACK: We use the first file to infer the crate name, which might be\n        * incorrect: since rustc only allows one file to be supplied in the\n        * command-line */\n-      auto crate_name = infer_crate_name (files[0]);\n-      rust_debug_loc (Location (), \"inferred crate name: %s\",\n-\t\t      crate_name.c_str ());\n+      auto filename = \"-\";\n+      if (num_files > 0)\n+\tfilename = files[0];\n+\n+      auto crate_name = infer_crate_name (filename);\n+      rust_debug (\"inferred crate name: %s\", crate_name.c_str ());\n       if (!options.set_crate_name (crate_name))\n \t{\n-\t  rust_inform (Location (),\n-\t\t       \"crate name inferred from the input file %<%s%>\",\n-\t\t       files[0]);\n+\t  // fake a linemapping so that we can show the filename\n+\t  linemap->start_file (filename, 0);\n+\t  linemap->start_line (0, 1);\n+\t  rust_inform (linemap->get_location (0),\n+\t\t       \"crate name inferred from this file\");\n+\t  linemap->stop ();\n \t  return;\n \t}\n     }\n@@ -1157,3 +1196,33 @@ TargetOptions::enable_implicit_feature_reqs (std::string feature)\n  *  - code generation\n  *  - link */\n } // namespace Rust\n+\n+#if CHECKING_P\n+namespace selftest {\n+void\n+rust_crate_name_validation_test (void)\n+{\n+  ASSERT_TRUE (Rust::CompileOptions::validate_crate_name (\"example\"));\n+  ASSERT_TRUE (Rust::CompileOptions::validate_crate_name (\"abcdefg_1234\"));\n+  ASSERT_TRUE (Rust::CompileOptions::validate_crate_name (\"1\"));\n+  // FIXME: The next test does not pass as of current implementation\n+  // ASSERT_TRUE (Rust::CompileOptions::validate_crate_name (\"\u60ca\u5413\"));\n+  // NOTE: - is not allowed in the crate name ...\n+  /*\n+  ASSERT_FALSE (Rust::CompileOptions::validate_crate_name (\"abcdefg-1234\"));\n+  ASSERT_FALSE (Rust::CompileOptions::validate_crate_name (\"a+b\"));\n+  ASSERT_FALSE (Rust::CompileOptions::validate_crate_name (\"/a+b/\")); */\n+\n+  /* Tests for crate name inference */\n+  ASSERT_EQ (Rust::infer_crate_name (\"c.rs\"), \"c\");\n+  // NOTE: ... but - is allowed when in the filename\n+  ASSERT_EQ (Rust::infer_crate_name (\"a-b.rs\"), \"a_b\");\n+  ASSERT_EQ (Rust::infer_crate_name (\"book.rs.txt\"), \"book.rs\");\n+#if defined(HAVE_DOS_BASED_FILE_SYSTEM)\n+  ASSERT_EQ (Rust::infer_crate_name (\"a\\\\c\\\\a-b.rs\"), \"a_b\");\n+#else\n+  ASSERT_EQ (Rust::infer_crate_name (\"a/c/a-b.rs\"), \"a_b\");\n+#endif\n+}\n+} // namespace selftest\n+#endif // CHECKING_P"}, {"sha": "2b20486c637b6f93ab141838b298107c750627c5", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=1a7391d97ffef5efb797f3701a82577c7270ce66", "patch": "@@ -42,8 +42,6 @@ namespace HIR {\n struct Crate;\n }\n \n-const size_t kMaxNameLength = 64;\n-\n /* Data related to target, most useful for conditional compilation and\n  * whatever. */\n struct TargetOptions\n@@ -217,43 +215,13 @@ struct CompileOptions\n \n   /* Validate the crate name using the ASCII rules\n    TODO: Support Unicode version of the rules */\n-  bool validate_crate_name (const std::string &crate_name)\n-  {\n-    if (crate_name.empty ())\n-      {\n-\trust_error_at (Location (), \"crate name cannot be empty\");\n-\treturn false;\n-      }\n-    if (crate_name.length () > kMaxNameLength)\n-      {\n-\trust_error_at (Location (), \"crate name cannot exceed %ld characters\",\n-\t\t       kMaxNameLength);\n-\treturn false;\n-      }\n-    for (auto &c : crate_name)\n-      {\n-\tif (!(ISALNUM (c) || c == '_' || c == '-'))\n-\t  {\n-\t    rust_error_at (Location (),\n-\t\t\t   \"invalid character %<%c%> in crate name: %<%s%>\", c,\n-\t\t\t   crate_name.c_str ());\n-\t    return false;\n-\t  }\n-      }\n-    return true;\n-  }\n+  static bool validate_crate_name (const std::string &crate_name);\n \n   bool set_crate_name (std::string name)\n   {\n     if (!validate_crate_name (name))\n       return false;\n \n-    /* Replace all the '-' symbols with '_' per Rust rules */\n-    for (auto &c : name)\n-      {\n-\tif (c == '-')\n-\t  c = '_';\n-      }\n     crate_name = std::move (name);\n     return true;\n   }\n@@ -343,4 +311,11 @@ struct Session\n };\n } // namespace Rust\n \n+#if CHECKING_P\n+namespace selftest {\n+extern void\n+rust_crate_name_validation_test (void);\n+}\n+#endif // CHECKING_P\n+\n #endif"}, {"sha": "cfbebb0698d4a256fda86f5142c66cd1ba8c4590", "filename": "gcc/testsuite/rust/compile/bad=file-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs?ref=1a7391d97ffef5efb797f3701a82577c7270ce66", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options \"-fdump-tree-gimple -frust-crate=good-name\" }\n+// { dg-additional-options \"-fdump-tree-gimple -frust-crate=good_name\" }\n pub fn does_nothing() {}\n fn main() {\n     does_nothing()"}, {"sha": "56e2093b27c7ff880c0b14d91bfe5d6614a1df0d", "filename": "gcc/testsuite/rust/compile/bad_file_name.txt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs?ref=1a7391d97ffef5efb797f3701a82577c7270ce66", "previous_filename": "gcc/testsuite/rust/compile/bad-file-name.txt.rs"}, {"sha": "a86791570243ad5fe7f8e17b593ff24bc2b1c279", "filename": "gcc/testsuite/rust/compile/specify-crate-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7391d97ffef5efb797f3701a82577c7270ce66/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs?ref=1a7391d97ffef5efb797f3701a82577c7270ce66", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options \"-frust-crate=fancy-crate_name -fdump-tree-gimple\" }\n+// { dg-additional-options \"-frust-crate=fancy_crate_name -fdump-tree-gimple\" }\n pub fn does_nothing() {}\n fn main() {\n     does_nothing()"}]}