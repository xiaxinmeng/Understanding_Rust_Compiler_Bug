{"sha": "55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVkZDQ0NTM1ZDJlNGU1NzAzYzAxMDNjMjZlN2M1MWFiOGM1MDJjNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-23T21:59:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-24T22:22:56Z"}, "message": "c++: Fix parameter map handling of member typedef.\n\nany_template_parm_r was looking at the args of an alias template-id, but we\nneed to look at all args of a member alias/typedef, including implicit ones\nfrom the enclosing class.\n\n\tPR c++/93377 - ICE with member alias in constraint.\n\t* pt.c (any_template_parm_r): Look at template arguments for all\n\taliases, not only alias templates.", "tree": {"sha": "e1545d5470cb4f2f288bdc4f21b857b480a4c95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1545d5470cb4f2f288bdc4f21b857b480a4c95a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d782a8d909c5cc472c911c0ab4de0b890aad868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d782a8d909c5cc472c911c0ab4de0b890aad868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d782a8d909c5cc472c911c0ab4de0b890aad868"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "cddf169ea5bf5081acc51fd0917c3e50328f65c8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "patch": "@@ -1,3 +1,9 @@\n+2020-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93377 - ICE with member alias in constraint.\n+\t* pt.c (any_template_parm_r): Look at template arguments for all\n+\taliases, not only alias templates.\n+\n 2020-01-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93299 - ICE in tsubst_copy with parenthesized expression."}, {"sha": "209044135cb861a090d0d8dd712a01d9dd8e578d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "patch": "@@ -10427,19 +10427,15 @@ any_template_parm_r (tree t, void *data)\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+  /* A mention of a member alias/typedef is a use of all of its template\n+     arguments, including those from the enclosing class, so we don't use\n+     alias_template_specialization_p here.  */\n+  if (TYPE_P (t) && typedef_variant_p (t))\n+    if (tree tinfo = TYPE_ALIAS_TEMPLATE_INFO (t))\n+      WALK_SUBTREE (TI_ARGS (tinfo));\n+\n   switch (TREE_CODE (t))\n     {\n-    case RECORD_TYPE:\n-    case UNION_TYPE:\n-    case ENUMERAL_TYPE:\n-      /* Search for template parameters in type aliases.  */\n-      if (tree ats = alias_template_specialization_p (t, nt_opaque))\n-\t{\n-\t  tree tinfo = TYPE_ALIAS_TEMPLATE_INFO (ats);\n-\t  WALK_SUBTREE (TI_ARGS (tinfo));\n-        }\n-      break;\n-\n     case TEMPLATE_TYPE_PARM:\n       /* Type constraints of a placeholder type may contain parameters.  */\n       if (is_auto (t))\n@@ -10472,6 +10468,8 @@ any_template_parm_r (tree t, void *data)\n \ttree cparms = ftpi->ctx_parms;\n \twhile (TMPL_PARMS_DEPTH (dparms) > ftpi->max_depth)\n \t  dparms = TREE_CHAIN (dparms);\n+\twhile (TMPL_PARMS_DEPTH (cparms) > TMPL_PARMS_DEPTH (dparms))\n+\t  cparms = TREE_CHAIN (cparms);\n \twhile (dparms\n \t       && (TREE_TYPE (TREE_VALUE (dparms))\n \t\t   != TREE_TYPE (TREE_VALUE (cparms))))"}, {"sha": "907b0c2e3575104d9ac8cf0df87fb087c5513635", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-alias5.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd44535d2e4e5703c0103c26e7c51ab8c502c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias5.C?ref=55dd44535d2e4e5703c0103c26e7c51ab8c502c4", "patch": "@@ -0,0 +1,62 @@\n+// PR c++/93377\n+// { dg-do compile { target c++2a } }\n+\n+struct empty\n+{};\n+\n+template <typename c>\n+c value;\n+\n+template <typename c>\n+auto func(value<c>);\n+\n+template <typename, typename...>\n+struct alignment_algorithm;\n+\n+template <typename... args_t>\n+struct select\n+{\n+  template <typename algorithm_t, typename... _args_t>\n+  decltype(algorithm_t()(func<_args_t>...)) choose();\n+\n+  template <typename...>\n+  static empty choose();\n+\n+  using type = decltype(choose<alignment_algorithm<int>, args_t...>());\n+};\n+\n+template <typename, typename... args_t>\n+struct select_algorithm : select<args_t...>\n+{};\n+\n+template <typename, typename = void> struct maybe_value { int value; };\n+\n+template <typename cn>\n+struct maybe_value<cn, typename cn::sfinae>;\n+\n+struct function\n+{\n+  template <typename algorithm_t,\n+            typename = decltype(\n+                maybe_value<select_algorithm<algorithm_t, int>>::value)>\n+  function(algorithm_t);\n+};\n+\n+template <typename>\n+struct alignment_configuration_traits\n+{\n+  static constexpr bool is_vectorised = 0;\n+};\n+\n+template <typename config_t, typename...>\n+struct alignment_algorithm\n+{\n+  using traits_t = alignment_configuration_traits<config_t>;\n+  template <typename indexed_sequence_pairs_t>\n+  void operator()(indexed_sequence_pairs_t) requires traits_t::is_vectorised;\n+};\n+\n+int main()\n+{\n+    function{alignment_algorithm<int>{}};\n+}"}]}