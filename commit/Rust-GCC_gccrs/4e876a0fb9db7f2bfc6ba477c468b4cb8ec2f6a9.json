{"sha": "4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4NzZhMGZiOWRiN2YyYmZjNmJhNDc3YzQ2OGI0Y2I4ZWMyZjZhOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-05-18T14:10:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-05-18T14:10:35Z"}, "message": "split old changelogs by year\n\nFrom-SVN: r99901", "tree": {"sha": "7dea6f7f3e0efc43adc009b68db4ab32ad0a6b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dea6f7f3e0efc43adc009b68db4ab32ad0a6b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/comments", "author": null, "committer": null, "parents": [{"sha": "e743d142aebcc694e105de1dcc588ee3e2a003f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e743d142aebcc694e105de1dcc588ee3e2a003f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e743d142aebcc694e105de1dcc588ee3e2a003f6"}], "stats": {"total": 101624, "additions": 54249, "deletions": 47375}, "files": [{"sha": "074a7d2d8d2ed837b460c620c43193ff484e908d", "filename": "gcc/cp/ChangeLog-1993", "status": "added", "additions": 606, "deletions": 0, "changes": 606, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1993", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1993", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1993?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "patch": "@@ -0,0 +1,606 @@\n+Tue Dec 28 21:10:03 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-init.c (expand_vec_init): Remove comptypes test, as it is too\n+\tharsh here.\n+\n+Tue Dec 28 13:42:22 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-pt.c (do_pending_expansions): Decide to expand a template\n+\tmember function, based upon it's class type, not the class type of\n+\tthe first place it was declared.\n+\n+Tue Dec 28 05:42:31 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-class.c (is_normal): New routine, use to determine when the\n+\tgiven binfo is the normal one.  (The one that should have the simple\n+\tvtable name.)\n+\t* cp-class.c (modify_other_vtable_entries): Use DECL_ASSEMBLER_NAME\n+\tto check if two fndecls are `the same'.  Sometimes this routine can\n+\tmodify the main vtable, and normal should be 1, in that case, so use\n+\tis_normal() to determine if this is the main vtable for the class.\n+\tDon't recurse down virtual bases, as they are shared, and we take\n+\tcare of them elsewhere.\n+\t* cp-class.c (modify_vtable_entries): If we have already updated the\n+\tvtable with the new virtual, don't do it again.\n+\t* cp-class.c (finish_struct): Set CLASSTYPE_VFIELD_PARENT as\n+\tappropriate.  Do virtual function overriding in virtual bases, after\n+\tnormal overriding, so that the base function list in DECL_VINDEX is\n+\tnot overridden, before we have a chance to run through the list.\n+\tUse DECL_ASSEMBLER_NAME to check if two fndecls are `the same'.\n+\tMake sure we pass the right address into modify_vtable_entries.\n+\t* cp-tree.h (CLASSTYPE_VFIELD_PARENT): New field to indicate which\n+\tbinfo is the one that has the vtable that we based our vtable on.\n+\n+Fri Dec 24 09:40:52 1993  Michael Tiemann  <tiemann@blues.cygnus.com>\n+\n+\t* cp-typeck.c (c_expand_start_case): Use default_conversion to\n+\tconvert expression from reference type if necessary.\n+\n+Wed Dec 22 17:58:43 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-typeck.c (build_unary_op): Make sure that it's a TREE_LIST before\n+\ttrying to read its TREE_VALUE.\n+\n+\t* cp-class.c (finish_struct_methods): Clear DECL_IN_AGGR_P here.\n+\t(finish_struct): Instead of here.\n+\n+Tue Dec 21 14:34:25 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-tree.c (list_hash_lookup_or_cons): Make sure the type doesn't\n+\thave TYPE_PTRMEMFUNC_P set before we try to build its\n+\tCLASSTYPE_ID_AS_LIST.\n+\t(get_decl_list): Likewise, when trying to read it.\n+\n+\t* cp-tree.h (VTABLE_NAME): No def with NO_{DOLLAR,DOT} defined.\n+\t(VTABLE_NAME_P): Use it instead of VTABLE_NAME_FORMAT.\n+\n+Mon Dec 20 13:35:03 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-typeck.c (rationalize_conditional_expr): New function.\n+\t(unary_complex_lvalue): Use it.\n+\t(build_modify_expr): Use it, since trying to do an ADDR_EXPR of it\n+\twith build_unary_op won't cut it.  Don't wrap the COND_EXPR with a\n+\tSAVE_EXPR either.\n+\n+\t* cp-decl2.c (explicit_warn_return_type): Deleted variable.\n+\t(lang_decode_option): Set warn_return_type, not explicit_*, for\n+\t-Wreturn-type and -Wall.  This is what rest_of_compilation uses to\n+\tdecide if it should go into jump_optimize or not.\n+\t* cp-tree.h (explicit_warn_return_type): Deleted.\n+\t* cp-decl.c (grokdeclarator): Use warn_return_type, not explicit_*.\n+\t(finish_function): Also complain about no return in a non-void fn if\n+\twe're being pedantic (don't rely on use of -Wreturn-type).\n+\n+Fri Dec 17 15:45:46 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-decl.c (grokdeclarator): Forbid declaration of a function as\n+\tstatic if it's being done inside another function.\n+\n+\t* cp-search.c (compute_visibility): Check for friendship both ways.\n+\n+Fri Dec 17 14:28:25 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-cvt.c (build_default_binary_type_conversion): Make error\n+\tmessages more helpful.\n+\n+\t* cp-error.c (op_as_string): New function, returns \"operator ==\"\n+\tgiven EQ_EXPR or suchlike.\n+\n+Fri Dec 17 13:28:11 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-call.c (print_n_candidates): New function.\n+\t(build_overload_call_real): Use it when we complain about a call\n+\tbeing ambiguous.\n+\n+Fri Dec 17 12:41:17 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-call.c (build_method_call): Fix checking for static call\n+\tcontext.\n+\n+\t* cp-method.c (build_opfncall): Call build_indirect_ref on argument\n+\tto operator new.\n+\n+\t* cp-init.c (build_new): Don't mess with rval when building\n+\tindirect ref.\n+\n+Thu Dec 16 16:48:05 1993  Kung Hsu  <kung@cirdan.cygnus.com>\n+\n+\t* cp-lex.c (default_assign_ref_body): Add check when TYPE_NESTED_\n+\tNAME(type) may not be exist.  It's not a problem for old compiler.\n+\n+Thu Dec 16 14:46:06 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-tree.h (CLASSTYPE_ALTERS_VISIBILITIES_P): Delete macro, it's\n+\tnever used for anything.\n+\t(struct lang_type, member type_flags): Delete field\n+\t`alters_visibility', and up `dummy' by 1.\n+\t* cp-class.c (finish_base_struct): Delete code that copies the\n+\tsetting of CLASSTYPE_ALTERS_VISIBILITIES_P.\n+\t(finish_struct): Delete code that sets it.\n+\n+Thu Dec 16 14:44:39 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-decl.c, cp-init.c, cp-typeck.c: Fix arguments to\n+\tbuild_method_call that I messed up before.\n+\n+\t* cp-search.c (get_base_distance): If protect > 1, allow immediate\n+\tprivate base.\n+\n+\t* cp-class.c (finish_base_struct): Set cant_synth_* correctly.\n+\t(finish_struct): Likewise.  Well, nigh-correctly; it won't deal\n+\tproperly with the case where a class contains an object of an\n+\tambiguous base class which has a protected op=.  Should be fixed\n+\twhen the access control code gets overhauled.\n+\t(finish_struct_methods): Set TYPE_HAS_NONPUBLIC_* correctly.\n+\n+Thu Dec 16 12:17:06 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-lex.c (real_yylex): Turn the code back on that deals with\n+\t__FUNCTION__ and __PRETTY_FUNCTION__.  Don't use lookup_name, to\n+\tavoid the ambiguity problems that led to it being turned off in the\n+\tfirst place.\n+\n+\t* cp-method.c (hack_identifier): Also check for a TYPE_PTRMEMFUNC_P\n+\tto see if something is a method.\n+\n+Wed Dec 15 18:35:58 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-typeck.c (build_modify_expr): Avoid error messages on small\n+\tenum bit fields.\n+\t* cp-typeck.c (convert_for_assignment): Add missing argument to\n+\tcp_warning and cp_pedwarn calls.\n+\n+Wed Dec 15 18:25:32 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-parse.y (member_init): ANSI C++ doesn't forbid old-style base\n+\tinitializers; it's just anachronistic.\n+\n+\t* cp-decl.c (finish_decl): Don't require external-linkage arrays\n+\tto have a complete type at declaration time when pedantic.\n+\n+Tue Dec 14 11:37:23 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-decl.c (pushdecl): Don't set DECL_CONTEXT if it's already set.\n+\n+\t* cp-call.c (build_method_call): Don't dereference pointer given\n+\tas instance.\n+\n+\t* cp-decl.c (finish_function): Don't pass pointer to\n+\tbuild_method_call.\n+\t(finish_function): Likewise.\n+\n+\t* cp-typeck.c (build_x_function_call): Likewise.\n+\n+\t* cp-method.c (build_component_type_expr): Likewise.\n+\n+\t* cp-init.c (build_member_call): Likewise.\n+\t(build_new): Likewise.\n+\n+Mon Dec 13 18:04:33 1993  Kung Hsu  <kung@cirdan.cygnus.com>\n+\n+\t* cp-decl.c (xref_tag): Fix regression created by changes made\n+\tin Dec. 7 1993.\n+\t* cp-decl.c (xref_defn_tag): Fix parallel nested class problem.\n+\n+Fri Dec 10 12:40:25 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-call.c (compute_conversion_costs_ansi) [DEBUG_MATCHING]: Print\n+\tout the final evaluation of the function, so we can see if ELLIPSIS,\n+\tUSER, and EVIL were set at the end.\n+\n+\t* cp-call.c (convert_harshness_ansi): When the parm isn't an lvalue,\n+\tonly go for setting TRIVIAL_CODE if we are dealing with types that\n+\tare compatible.\n+\n+Thu Dec  9 18:27:22 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-decl.c (flag_huge_objects): New flag to allow large objects.\n+\t* toplev.c (lang_options): Likewise.\n+\t* cp-decl2.c (flag_huge_objects, lang_f_options): Likewise.\n+\t* cp-decl.c (delta_type_node): New type for delta entries.\n+\t* cp-tree.h (delta_type_node): Likewise.\n+\t* cp-decl.c (init_decl_processing): Setup delta_type_node.\n+\t* cp-decl.c (init_decl_processing, build_ptrmemfunc_type): Use\n+\tdelta_type_node instead of short_integer_type_node.\n+\t* cp-class.c (build_vtable_entry): Likewise.\n+\n+Thu Dec  9 16:19:05 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-tree.h (OPERATOR_TYPENAME_P): Define outside of\n+\tNO_{DOLLAR,DOT} macro checks, so it always gets defined.\n+\t(VTABLE_NAME_P): Define for NO_DOT && NO_DOLLAR_IN_LABEL.\n+\n+Wed Dec  8 17:38:06 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-decl.c (finish_decl): Make sure things that can go into\n+\t\"common\", do go into common, if -fcommon is given.\n+\n+Wed Dec  8 13:01:54 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-call.c (print_harshness) [DEBUG_MATCHING]: New function.\n+\t(compute_conversion_costs_ansi) [DEBUG_MATCHING]: Print out\n+\targument matching diagnostics to make instantly clear what the\n+\tcompiler is doing.\n+\n+\t* cp-call.c (convert_harshness_ansi): If the parm isn't an lvalue,\n+\tthen check to see if the penalty was increased due to\n+\tsigned/unsigned mismatch, and use a TRIVIAL_CODE if it wasn't.\n+\n+Tue Dec  7 18:29:14 1993  Kung Hsu  <kung@cirdan.cygnus.com>\n+\n+\t* cp-decl.c (xref_tag, pushtag): Fix nested class search/resolution\n+\tproblem.\n+\n+Tue Dec  7 16:09:34 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-class.c (finish_struct): Before synthesizing methods, if no\n+\tmethods have yet been declared then set nonprivate_method.  Don't\n+\tset non_private method after synthesizing a method.\n+\n+\t* cp-lex.c (extract_interface_info): If flag_alt_external_templates\n+\tis set, tie emitted code to the location of template instantiation,\n+\trather than definition.\n+\n+\t* cp-tree.h: Declare flag_alt_external_templates.\n+\n+\t* cp-decl2.c (lang_decode_option): Support -falt-external-templates.\n+\n+\t* toplev.c (lang_options): Likewise.\n+\n+Mon Oct  4 12:50:02 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t[changes propagated from 930810 snapshot]\n+\t* cp-decl.c (init_decl_processing): Make long long available for use\n+\tas SIZE_TYPE and PTRDIFF_TYPE.\n+\t(finish_decl): Allow file-scope static incomplete array.\n+\t(grokdeclarator): Don't pass on const and volatile fron function\n+\tvalue type to function type.\n+\tWarn here for volatile fn returning non-void type.\n+\t* cp-parse.y (attrib): Accept attributes `volatile' with alias\n+\t`noreturn', and `const'.\n+\t* cp-typeck.c (default_conversion): Don't lose const and volatile.\n+\t(build_binary_op_nodefault): Generate pedantic warning for comparison\n+\tof complete pointer type with incomplete pointer type.\n+\t(build_c_cast): Be careful that null pointer constant be INTEGER_CST.\n+\n+Tue Dec  7 10:46:48 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-init.c (expand_vec_init): When creating a temporary for copying\n+\tarrays, use the type of the source, not the target.\n+\n+\t* cp-cvt.c (convert): Pass an argument for errtype to\n+\tconvert_to_reference.\n+\n+\t* cp-error.c (dump_expr, COMPONENT_REF & CALL_EXPR): Deal with\n+\tmethods, -> and `this'.\n+\n+Mon Dec  6 17:12:33 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-error.c (parm_as_string): New function; returns `this' or arg\n+\tnumber.  Corresponds to %P.\n+\t(dump_expr): Deal with method calls.\n+\n+\t* cp-cvt.c (convert_to_reference): Stop using warn_for_assignment.\n+\t* cp-typeck.c (convert_for_assignment): Likewise.\n+\t(warn_for_assignment): Lose.\n+\n+Mon Dec  6 11:33:35 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-call.c (ideal_candidate_ansi): Delete code that was never\n+\tdoing anything useful.  Instead, sort once, and DO NOT wipe\n+\tout any codes with EVIL_CODE, since that's what we use as a\n+\tmarker for the end of the list of candidates.\n+\n+\t* cp-cvt.c (convert_to_aggr): Make sure to always set H_LEN.\n+\n+Mon Dec  6 12:49:17 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-init.c (get_aggr_from_typedef): New function, like\n+\tis_aggr_typedef but returns the _TYPE.\n+\n+\t* cp-call.c, cp-init.c, cp-method.c: Eradicate err_name.\n+\n+Sun Dec  5 18:12:48 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-lex.c (readescape): Pedwarn when a hex escape is out of range.\n+\n+Thu Nov 25 23:50:19 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\tDelay language context change until beginning of next decl.\n+\n+\t* cp-lex.h (c_header_level): Removed.\n+\t(pending_lang_change): Declared.\n+\t* cp-lex.c (c_header_level): Renamed from in_c_header, made static.\n+\t(pending_lang_change): Defined.\n+\t(check_newline): Rework code that recognizes line number and\n+\tfilename changes.  Instead of pushing and popping lang context,\n+\tincrement and decrement pending_lang_change.\n+\t(do_pending_lang_change):  Push and pop lang context according\n+\tto value of pending_lang_change.\n+\t* cp-parse.y (extdefs): Use lang_extdef instead of extdef.\n+\t(extdef): Same as extdef, but call do_pending_lang_change() first.\n+\n+Mon Nov 15 15:39:15 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-typeck.c (build_binary_op_nodefault): Warn for ordered\n+\tcompare of ptr with 0 only if pedantic in both cases.\n+\n+Thu Nov 25 13:31:37 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\tReinstate the below patch, which got lost in the Cygnus merge:\n+\tTue Nov 23 13:59:24 1993  Hallvard B Furuseth  (hbf@durin.uio.no)\n+\t* cp-parse.y (maybe_type_qual): Don't fail to set $$.\n+\n+Wed Nov 17 19:03:30 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-parse.y (attrib): Allow \"ident(ident)\" like the C front end.\n+\n+Fri Oct 22 20:43:37 1993  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* cp-lex.c (real_yylex): Diagnose floating point constants\n+\tthat are too large.\n+\n+Wed Nov 17 19:10:37 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-type2.c (build_functional_cast): ARM page 16: When a class\n+\tand an object, function or enumerator are declared in the same\n+\tscope with the same name, the class name is hidden.\n+\n+Wed Nov 17 19:07:18 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-call.c (convert_harshness_ansi): Distinguish float, double,\n+\tand long double from each other when overloading.\n+\t(compute_conversion_costs_{ansi,old}, build_method_call,\n+\tbuild_overlay_call_real, convert_to_aggr): Always set and\n+\talways use H_LEN member of candidate structure.\n+\n+Mon Oct 11 23:10:53 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-decl.c (duplicate_decls): Note redeclarations of library\n+\tfunctions, and generate distinct warnings for them.\n+\n+Mon Oct  4 12:26:49 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\tSupport format warnings in G++.\n+\n+\t* cp-tree.h: Protect against multiple inclusion.\n+\tDeclare all public functions in c-common.c (copy from c-tree.h).\n+\t(STDIO_PROTO): Define.\n+\t(warn_format): Declare.\n+\t(record_format_info): Remove declaration.\n+\t* cp-decl.c (init_decl_processing): Call init_function_format_info.\n+\t* cp-decl2.c (lang_decode_option): Make \"-Wall\" include warn_format.\n+\t* cp-typeck.c (build_function_call_real): Call check_function_format.\n+\t(record_format_info): Remove -- obsolete stub.\n+\n+Sat Jul 24 12:04:29 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-decl.c (duplicate_decls): Don't warn for non-extern var decl\n+\tfollowing an extern one (for -Wredundant-decls).\n+\t* cp-parse.y (primary): In statement expression case, if compstmt\n+\treturns something other than a BLOCK, return it unchanged.\n+\n+Thu Dec  2 20:44:58 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\t* cp-decl.c (warn_extern_redeclared_static): New function made\n+\tfrom code extracted from pushdecl.\n+\t(duplicate_decls, pushdecl): Call new function.\n+\t(lookup_name_current_level): Allow for IDENTIFIER_GLOBAL_VALUE\n+\tto be a TREE_LIST when function is declared in 'extern \"C\" {}'.\n+\n+Fri Dec  3 16:01:10 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-class.c (duplicate_tag_error): Use cp_error.\n+\t(finish_base_struct): Check for ambiguity with direct base, and don't\n+\tgenerate op= or copy ctor if it exists.\n+\n+Fri Dec  3 15:32:34 1993  Kung Hsu  <kung@cirdan.cygnus.com>\n+\n+\t* cp-init.c (expand_member_init): When initializer name is null,\n+\tdon't try to build it now because emit_base_init will handle it.\n+\n+Fri Dec  3 12:28:59 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-lex.c (init_lex): Initialize input_filename to \"<internal>\" for\n+\tcode such as ExceptionHandler::operator=.\n+\n+Fri Dec  3 10:32:08 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-decl.c (grokdeclarator): Don't try to print out dname when\n+\tcomplaining about arrays of references if decl_context==TYPENAME,\n+\tsince it will be null.\n+\n+\t* cp-decl2.c: Default to flag_ansi_overloading.\n+\n+Thu Dec  2 18:05:56 1993  Kung Hsu  <kung@cirdan.cygnus.com>\n+\n+\t* cp-call.c (build_method_call): Use binfo from instance if it's\n+\tdifferent from binfo (basetype_path) passed from above.\n+\n+Wed Nov 17 19:14:29 1993  Chip Salzenberg  <chip@fin.uucp>\n+\n+\tcp-error.c (dump_expr): Use unsigned chars to output a\n+\tTREE_REAL_CST in hex.\n+\n+Thu Dec  2 11:05:48 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-class.c (finish_struct): Fix typo in setting\n+\tcant_synth_asn_ref.\n+\n+\t* cp-tree.h (TYPE_NESTED_NAME): New macro, does\n+\tDECL_NESTED_TYPENAME (TYPE_NAME (NODE)).\n+\n+\t* cp-lex.c (default_copy_constructor_body): Change\n+\tDECL_NAME (TYPE_NAME (btype)) to TYPE_NESTED_NAME (btype).\n+\t(default_assign_ref_body): Likewise.\n+\t(default_copy_constructor_body): Call operator= explicitly for\n+\tbase classes that have no constructor.\n+\n+Thu Dec  2 10:47:15 1993  Michael Tiemann  <tiemann@blues.cygnus.com>\n+\n+\t* cp-call.c (build_method_call): If the instance variable is\n+\tconverted to error_mark_node when we're trying to convert it to the\n+\tbase type of a method we're looking up, return error_mark_node.\n+\n+Thu Dec  2 10:41:16 1993  Torbjorn Granlund  <tege@cygnus.com>\n+\n+\t* cp-typeck.c (build_binary_op_nodefault): In *_DIV_EXPR *_MOD_EXPR\n+\tcases, tests for unsigned operands by peeking inside a NOP_EXPR.\n+\n+Wed Dec  1 13:33:34 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-call.c (compute_conversion_costs_ansi): Use the size of struct\n+\tharshness_code, not the size of short, for clearing out the\n+\tansi_harshness.\n+\n+\t* cp-call.c (print_candidates): New function.\n+\t(build_method_call): When we had some candidates, but didn't get a\n+\tusable match, don't report that we got an error with the first\n+\tcandidate.  Instead, say there were no matches, and list the\n+\tcandidates with print_candidates.  In the second pass, make sure we\n+\tclear out ever_seen, so we can accurately count the number of\n+\tfunctions that qualified.\n+\n+Wed Dec  1 09:53:59 1993  Torbjorn Granlund  <tege@cygnus.com>\n+\n+\t* cp-typeck.c (build_binary_op_nodefault): Shorten for *_MOD_EXPR\n+\tonly if op1 is known to be != -1.\n+\t(build_binary_op_nodefault): Handle *_DIV_EXPR likewise.\n+\n+Tue Nov 30 14:07:26 1993  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-method.c (hack_identifier): If the field itself is private, and\n+\tnot from a private base class, say so.\n+\n+Mon Nov 29 03:00:56 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-decl.c (grokdeclarator): Always warn on initialization of\n+\tconst member.\n+\n+Wed Nov 24 00:49:35 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-class.c (finish_struct): Set TYPE_GETS_CONST_* properly.\n+\t(finish_base_struct): Set cant_synth_asn_ref properly.\n+\n+\t* cp-lex.c (cons_up_default_function): Add section for operator=.\n+\t(default_assign_ref_body): New function, mostly cribbed from\n+\tdefault_copy_constructor_body.\n+\n+\t* cp-class.c (base_info): Add members cant_synth_copy_ctor,\n+\tcant_synth_asn_ref, no_const_asn_ref.\n+\t(finish_base_struct): Update no_const_asn_ref, note that you should\n+\tupdate cant_synth_*, propagate TYPE_GETS_ASSIGN_REF.\n+\t(finish_struct): Add decls for cant_synth_*, no_const_asn_ref, and\n+\tinitialize them properly.  Set no_const_asn_ref properly.  Set\n+\tcant_synth_* in some of the situations where they should be set.\n+\tPropagate TYPE_GETS_ASSIGN_REF.  Use cant_synth_copy_ctor.  Add call\n+\tto cons_up_default_function for operator=.\n+\n+Tue Nov 23 20:24:58 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-cvt.c (convert_force): Add code to perform casting of pointer\n+\tto member function types.\n+\t* cp-typeck.c (build_ptrmemfunc): Add FORCE parameter to indicate\n+\twhen the conversion should be done, regardless.\n+\t* cp-tree.h (build_ptrmemfunc): Likewise.\n+\t* cp-type2.c (digest_init): Likewise.\n+\t* cp-typeck.c (convert_for_assignment): Likewise.\n+\n+Tue Nov 23 18:06:58 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-error.c (dump_expr): Do the right thing for variables of\n+\treference type.\n+\n+\t* cp-decl.c (grok_op_properties): Set TYPE_HAS_ASSIGN_REF\n+\tand its kin properly.\n+\t(xref_tag): Propagate TYPE_GETS_ASSIGN_REF.\n+\n+Tue Nov 23 12:26:13 1993  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cp-method.c (build_opfncall): Don't count pointer to member\n+\tfunctions as aggregates here, as we don't want to look up methods in\n+\tthem.  The compiler would core dump if we did, as they don't have\n+\tnormal names.\n+\t* cp-typeck.c (build_indirect_ref): Improve wording on error\n+\tmessage.\n+\n+Mon Nov 22 14:22:23 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-decl.c (grok_op_properties): Allow operator?: with pedwarn\n+\t(since it's supported in other compiler bits).\n+\n+\t* cp-method.c (report_type_mismatch): Use cp_error; ignore err_name\n+\targument.\n+\n+\t* cp-error.c (dump_function_decl): Don't print return type for\n+\tconstructors and destructors.\n+\n+\t* cp-cvt.c (cp_convert_to_pointer): Import code from\n+\tconvert_to_pointer so we can return error_mark_node in the case of an\n+\terror, and to allow more meaningful error messages.\n+\t(build_type_conversion): Don't go through void* when trying\n+\tto convert to a pointer type.\n+\n+\t* cp-decl.c (grokfndecl): Move call to grok_op_properties back\n+\tafter grokclassfn so that it's dealing with the right decl.\n+\t(grok_op_properties): Don't assert !methodp for op new and op delete.\n+\n+\t* cp-init.c (build_delete): Don't use TYPE_BUILT_IN (there are now\n+\tno uses of it in the compiler).\n+\n+\t* cp-call.c (build_scoped_method_call): Fix for destructors of simple\n+\ttypes.\n+\t(build_method_call): Likewise.\n+\n+Fri Nov 19 12:59:38 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-tree.c (count_functions): Abstraction function.\n+\n+\t* cp-call.c (build_overload_call_real): Deal with new overloading\n+\tproperly, remove dead code.\n+\n+\t* gcc.c (default_compilers): Generate and use .ii files in the\n+\tintermediate stage of compiling C++ source.\n+\n+Fri Nov 19 11:26:09 1993  Jim Wilson  <wilson@sphagnum.cygnus.com>\n+\n+\t* cp-expr.c (cplus_expand_expr): Make call_target a valid memory\n+\taddress before using it, so it can be later safely compared.\n+\n+Fri Nov 12 15:30:27 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-pt.c (tsubst): Deal with new overloading.\n+\n+\t* cp-typeck.c (fntype_p): Is the arg function type?\n+\t(comp_target_parms): pedwarn on conversion from (anything) to (...).\n+\t(build_x_function_call): Deal with new overloading.\n+\n+\t* cp-tree.c (decl_list_length): Deal with new overloading.\n+\t(decl_value_member): Like value_member, but for DECL_CHAINs.\n+\n+\t* cp-decl.c (duplicate_decls): Deal with new overloading.\n+\t(start_decl): Likewise.\n+\n+\t* cp-class.c (instantiate_type): Deal with new overloading.\n+\n+\t* cp-call.c (convert_harshness_ansi): Deal with new overloading.\n+\t(convert_harshness_old): Deal with new overloading.\n+\t(build_overload_call_real): Likewise.\n+\n+Mon Nov  8 13:50:49 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-tree.c (get_unique_fn): New function; returns FUNCTION_DECL\n+\tif unambiguous, NULL_TREE otherwise.\n+\t(get_first_fn): Returns the first appropriate FUNCTION_DECL.\n+\t(is_overloaded_fn): Returns whether or not the passed tree is\n+\ta function or list of functions.\n+\n+\t* cp-init.c (init_init_processing): Use `get_first_fn' to find\n+\tthe FUNCTION_DEFN for new and delete.\n+\n+\t* cp-decl.c (push_overloaded_decl): Use new overloading strategy, cut\n+\tcode size in half (I spit on special cases).\n+\n+Tue Sep  7 20:03:33 1993  Jason Merrill  <jason@deneb.cygnus.com>\n+\n+\t* cp-decl.c: Allow references and template type parameters as well"}, {"sha": "1ec125fa86d970c632132b84333cfcd2e39bb6f0", "filename": "gcc/cp/ChangeLog-1994", "status": "renamed", "additions": 0, "deletions": 4046, "changes": 4046, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1994", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1994", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1994?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "previous_filename": "gcc/cp/ChangeLog.1"}, {"sha": "c4f4046ad0570ef5f2474f1f5b3e55e6ec27a624", "filename": "gcc/cp/ChangeLog-1995", "status": "added", "additions": 3791, "deletions": 0, "changes": 3791, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1995", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1995", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1995?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "348378beb15c23c2108a574df1e3958874f56a09", "filename": "gcc/cp/ChangeLog-1996", "status": "added", "additions": 4047, "deletions": 0, "changes": 4047, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1996", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1996", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1996?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "8e2c7343428016b2ab4a068d9f9d706b087ae6d6", "filename": "gcc/cp/ChangeLog-1997", "status": "added", "additions": 2607, "deletions": 0, "changes": 2607, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1997", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1997", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1997?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9", "patch": "@@ -0,0 +1,2607 @@\n+Mon Dec 22 11:36:27 1997  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c (add_builtin_candidate): Add default case in enumeration\n+\tswitch.\n+\t(build_new_op): Likewise.\n+\t(convert_like): Likewise.\n+\t* cvt.c (build_expr_type_conversion): Likewise.\n+\t* tree.c (real_lvalue_p): Likewise.\n+\t(lvalue_p): Likewise.\n+\t(cp_tree_equal): Likewise.\n+\t* typeck.c (comptypes): Likewise.\n+\t(build_component_ref): Likewise.\n+\t(build_function_call_real): Likewise.\n+\t(build_binary_op_nodefault): Likewise.\n+\t(build_unary_op): Likewise.\n+\t(build_modify_expr): Likewise.\n+\t* typeck2.c (initializer_constant_valid_p): Likewise.\n+\n+Sun Dec 21 15:59:00 1997  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* decl2.c (lang_decode_option): Add support for -Wunknown-pragmas.\n+\n+Thu Dec 18 14:51:50 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (coerce_template_parms): Make sure to digest_init if\n+\tpossible.\n+\n+\t* decl.c (duplicate_decls): Make the newdecl virtual if the\n+\tolddecl was, just as is done with other attributes of olddecl.\n+\n+Thu Dec 18 14:43:19 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (unary_complex_lvalue): Ignore op0 when taking the\n+\taddress of an OFFSET_REF.\n+\n+\t* cp-tree.def: Add AGGR_INIT_EXPR.\n+\t* error.c, tree.c, typeck.c: Replace uses of NEW_EXPR with\n+\tAGGR_INIT_EXPR where appropriate.\n+\t* expr.c (cplus_expand_expr): Likewise.  Simplify.\n+\n+\t* decl2.c (finish_file): Remove call to register_exception_table.\n+\n+Wed Dec 17 17:08:52 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): Don't do injection when\n+\tprocessing_template_decl is true, as pollutes current_binding_level\n+\tfor base classes.\n+\n+Wed Dec 17 21:17:39 1997  Peter Schmid  <schmid@ltoi.iap.physik.tu-darmstadt.de>\n+\n+\t* pt.c (maybe_fold_nontype_arg): Add prototype.\n+\n+Tue Dec 16 10:31:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (mapcar): Handle TRY_CATCH_EXPR et al.\n+\t* error.c (dump_expr): Likewise.\n+\n+Mon Dec 15 12:22:04 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_function_call_real): Remove \"inline called before\n+\tdefinition\" pedwarn.\n+\n+\t* pt.c (coerce_template_parms): Use maybe_fold_nontype_arg.\n+\n+Sun Dec 14 22:34:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cvt.c (cp_convert_to_pointer): Fix base conversion of pm's.\n+\n+\t* pt.c (type_unification_real): Change __null to type void* with\n+\ta warning.\n+\n+Sun Dec 14 20:38:35 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* call.c (implicit_conversion): Don't call\n+\tbuild_user_type_conversion_1 with a NULL expr, since it will\n+\tcrash.\n+\n+\t* pt.c (unify): Don't try to unify array bounds if either array is\n+\tunbounded.\n+\n+Fri Dec 12 16:09:14 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* errfn.c (cp_pedwarn, cp_pedwarn_at, cp_error_at, cp_warning_at):\n+\tReplace extern decls with casts.\n+\n+\t* decl.c (expand_start_early_try_stmts): Don't mess with a sequence.\n+\tUpdate last_parm_cleanup_insn.\n+\t(store_after_parms): Remove.\n+\t* cp-tree.h: Adjust.\n+\n+Thu Dec 11 22:18:37 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (comdat_linkage): Also set DECL_COMDAT.\n+\t(finish_file): Check DECL_COMDAT instead of weak|one_only.\n+\t(import_export_vtable): Use make_decl_one_only instead of\n+\tcomdat_linkage for win32 tweak.\n+\t(import_export_decl): Likewise.\n+\t* pt.c (mark_decl_instantiated): Likewise.\n+\n+\t* decl2.c (finish_file): Lose handling of templates in pending_statics.\n+\n+Thu Dec 11 21:12:09 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Lose call to expand_builtin_throw.\n+\t* except.c (expand_builtin_throw): Remove.\n+\t* cp-tree.h: Remove ptr_ptr_type_node.\n+\t* decl.c: Likewise.\n+\n+Thu Dec 11 20:43:33 1997  Teemu Torma  <tot@trema.com>\n+\n+\t* decl.c (ptr_ptr_type_node): Define.\n+\t(init_decl_processing): Initialize it.\n+\t* cp-tree.h: Declare it.\n+\t* exception.cc (__cp_exception_info): Use __get_eh_info.\n+\t(__cp_push_exception): Likewise.\n+\t(__cp_pop_exception): Likewise.\n+\n+\tFrom Scott Snyder <snyder@d0sgif.fnal.gov>:\n+\t* except.c (expand_builtin_throw): Use get_saved_pc_ref instead of\n+\tsaved_pc.\n+\t(init_exception_processing): Removed saved_pc initialization.\n+\n+Wed Dec 10 11:04:45 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_decl): Defer all templates but inline functions.\n+\n+Mon Dec  8 23:17:13 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (expand_vec_init): Don't fold a list of parameters.\n+\n+\t* decl.c (copy_args_p): Handle copy elision for types with virtual\n+\tbases.\n+\t* call.c (build_over_call): Likewise.\n+\n+Sun Dec  7 22:38:12 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (lookup_template_function): Copy the template arguments,\n+\tnot just the list containing them, to the permanent obstack.\n+\n+Sun Dec  7 15:53:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_start_catch_block): suspend_momentary for the\n+\tterminate handler.\n+\n+\t* error.c (dump_decl): Handle LOOKUP_EXPR.\n+\n+Sun Dec  7 15:45:07 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* rtti.c (build_dynamic_cast): Copy the cast-to type to the\n+\tpermanent obstack if we are processing a template decl.\n+\t* typeck.c (build_static_cast): Likewise.\n+\t(build_const_cast): Likewise.\n+\t(build_reinterpret_cast): Likewise.\n+\n+\t* pt.c (coerce_template_parms): Coerce some expressions, even\n+\twhen processing_template_decl.\n+\n+Sun Dec  7 01:46:33 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* typeck.c (build_binary_op_nodefault, pointer_diff): Symmetric\n+\thandling of pointer difference expressions.\n+\n+\t* typeck.c (comp_target_types): Comparison of function/method types\n+\tis independent of nptrs.\n+\n+Sun Dec  7 01:40:27 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (tsubst): Avoid creating pointer to reference and\n+\treference to reference types.\n+\n+Sat Dec  6 01:29:37 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (do_id): New nonterminal.\n+\t(template_id): Use it.\n+\n+Fri Dec  5 01:17:34 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (template_id): do_identifier for PFUNCNAMEs, too.\n+\t* spew.c (yylex): Don't do_identifier here.\n+\t* decl2.c (build_expr_from_tree): Revert last change.\n+\n+\t* decl2.c (build_expr_from_tree): Expand the name for a method call.\n+\t* parse.y (object_template_id): Don't try to take the DECL_NAME.\n+\n+Wed Dec  3 20:02:39 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_new): Use a TARGET_EXPR instead of SAVE_EXPR for\n+\talloc_expr.\n+\t* call.c (build_op_delete_call): Adjust.\n+\n+\t* except.c (expand_end_catch_block): Lose rethrow region.\n+\t(expand_start_catch_block): Likewise.\n+\t(expand_end_catch_block): Don't expand_leftover_cleanups.\n+\n+Wed Dec  3 13:24:04 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* pt.c (tsubst): Remove tree_cons call (places redundant info into\n+\tDECL_TEMPLATE_INSTANTIATION).\n+\n+Wed Dec  3 11:44:52 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (is_overloaded_fn): Handle getting a fn template.\n+\t(really_overloaded_fn): Likewise.\n+\t* error.c (dump_decl): Handle TEMPLATE_ID_EXPRs better.\n+\t* pt.c (check_explicit_specialization): Tweak.\n+\t(determine_explicit_specialization): Tweak.\n+\n+\t* tree.c, cp-tree.h (get_target_expr): New fn.\n+\n+Wed Dec  3 08:47:27 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* pt.c (check_explicit_specialization): Fix misspelling in\n+\tdiagnostic: `preceeded'.\n+\t* typeck.c (get_delta_difference): Fix misspelling in diagnostic:\n+\t`conversiona'.\n+\n+1997-12-02  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (determine_explicit_specialization): Avoid an internal\n+\terror for bad specializations.\n+\n+\t* method.c (build_overload_value): Handle SCOPE_REF.\n+\n+Tue Dec  2 19:18:50 1997  Mike Stump  <mrs@wrs.com>\n+\n+\t* class.c (prepare_fresh_vtable): Enable even more complex MI\n+\tvtable names.\n+\n+Tue Dec  2 01:37:19 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* exception.cc (__check_eh_spec): Optimize a bit.\n+\n+\t* exception.cc (__cp_pop_exception): Lose handler arg.\n+\t* except.c (do_pop_exception): Likewise.\n+\t(push_eh_cleanup): Let the cleanup mechanism supply the handler.\n+\t(expand_end_catch_block): Likewise.\n+\n+Fri Nov 28 01:58:14 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (check_explicit_specialization): Complain about using a\n+\ttemplate-id for a non-specialization.\n+\n+Fri Nov 28 12:35:19 1997  Scott Christley  <scottc@net-community.com>\n+\n+\t* repo.c: Prototype rindex only if needed.\n+\t* xref.c: Likewise.\n+\n+Fri Nov 28 01:56:35 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* error.c (dump_decl): Handle TEMPLATE_ID_EXPR.\n+\n+Thu Nov 27 00:59:46 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_const_cast): Handle references here instead of\n+\thanding off to convert_to_reference.\n+\n+\t* except.c: Lose Unexpected, SetTerminate, SetUnexpected,\n+\tTerminateFunctionCall.\n+\t(init_exception_processing): Likewise.  Terminate et al are now\n+\tthe fns, not ADDR_EXPRs.\n+\t(various): Lose redundant assemble_external calls.\n+\t(do_unwind): s/BuiltinReturnAddress/builtin_return_address_fndecl/.\n+\n+\t* cp-tree.h (struct lang_decl_flags): Add comdat.\n+\t(DECL_COMDAT): New macro.\n+\t* decl.c (duplicate_decls): Propagate it.\n+\t(cp_finish_decl): Handle it.\n+\t* decl2.c (import_export_decl): Just set DECL_COMDAT on VAR_DECLs.\n+\n+\t* class.c: Remove static pending_hard_virtuals.\n+\t(add_virtual_function): Take pointers to pending_virtuals\n+\tand pending_hard_virtuals.\n+\t(finish_struct_1): Pass them.  Declare pending_hard_virtuals.\n+\n+Wed Nov 26 20:28:49 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (import_export_vtable): If we support one_only but not\n+\tweak symbols, mark instantiated template vtables one_only.\n+\t(import_export_decl): Likewise for tinfo functions.\n+\t(finish_vtable_vardecl): Also write out vtables from explicitly\n+\tinstantiated template classes.\n+\t* pt.c (mark_class_instantiated): Revert last change.\n+\n+\t* except.c (expand_throw): Call mark_used on the destructor.\n+\n+Wed Nov 26 15:13:48 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* lex.c (lang_init): Enable flag_exceptions by default if no\n+\tcommand line switch was specified.\n+\n+1997-11-26  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (unify): Handle `void' template parameters in\n+\tspecializations.\n+\n+Wed Nov 26 01:11:24 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* rtti.c (build_dynamic_cast): Handle template case here.\n+\t(build_dynamic_cast_1): Not here.\n+\n+\t* typeck2.c (digest_init): Make copies where appropriate.\n+\n+\t* decl2.c (delete_sanity): resolve_offset_ref.\n+\n+\t* except.c: Call terminate without caching so many bits.\n+\n+\t* except.c (expand_start_catch_block): Fix catching a reference\n+\tto pointer.\n+\n+Tue Nov 25 11:28:21 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_new): Copy size to the saveable obstack.\n+\n+\t* init.c (build_new): Stick a CLEANUP_POINT_EXPR inside the\n+\tTRY_CATCH_EXPR for now.\n+\n+Mon Nov 24 12:15:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (mark_addressable): Don't assume a FUNCTION_DECL\n+\thas DECL_LANG_SPECIFIC.\n+\n+\t* exception.cc (struct cp_eh_info): Add handlers field.\n+\t(__cp_push_exception): Initialize it.\n+\t(__cp_pop_exception): Decrement it.  Don't pop unless it's 0.\n+\t(__throw_bad_exception): Remove.\n+\t* except.c (call_eh_info): Add handlers field.\n+\t(get_eh_handlers): New fn.\n+\t(push_eh_cleanup): Increment handlers.\n+\n+Fri Nov 21 12:22:07 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_start_eh_spec): Use the try/catch code.\n+\t(expand_end_eh_spec): Likewise.  Call __check_eh_spec instead of\n+\tdoing everything inline.\n+\t(init_exception_processing): throw_type_match now takes\n+\tconst void pointers.\n+\t* exception.cc (__check_eh_spec): New fn.\n+\t* inc/exception: Neither terminate nor unexpected return.\n+\t* decl.c: Make const_ptr_type_node public.\n+\t* tinfo2.cc (__throw_type_match_rtti): Take the typeinfos constly.\n+\n+\t* except.c (expand_start_catch_block): We only need the rethrow\n+\tregion for non-sjlj exceptions.\n+\t(expand_end_catch_block): Likewise.  Use outer_context_label_stack.\n+\n+Thu Nov 20 14:40:17 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* Make-lang.in (CXX_LIB2FUNCS): Add new op new and op delete objs.\n+\t(various.o): Likewise.\n+\t* inc/new: Add placement deletes.  Add throw specs for default new.\n+\t* new.cc (set_new_handler): Move here from libgcc2.\n+\t* new1.cc (new (nothrow)): Catch a bad_alloc thrown from the handler.\n+\t(new): Move from libgcc2.  Throw bad_alloc.\n+\t* new2.cc: Move the rest of the op news and op deletes from libgcc2.\n+\t* decl.c (init_decl_processing): Update exception specs on new and\n+\tdelete.\n+\n+\t* method.c (build_decl_overload_real): Don't mess with global\n+\tplacement delete.\n+\n+\t* init.c (build_new): Check for null throw spec, not nothrow_t.\n+\n+\t* decl.c (duplicate_decls): Don't complain about different exceptions\n+\tfrom an internal declaration.\n+\n+\t* call.c (build_op_delete_call): Fix check for member fns again.\n+\n+\t* decl2.c (import_export_decl): Interface hackery affects\n+\tvirtual synthesized methods.\n+\n+Wed Nov 19 18:24:14 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (start_decl): Don't just complain about a mismatched\n+\tscope, fix it.\n+\n+\t* decl.c (make_implicit_typename): Handle case where t is not\n+\tactually from context.\n+\t* tree.c (get_type_decl): Lose identifier case.\n+\t* spew.c (yylex): Lose useless call to identifier_typedecl_value.\n+\t* parse.y (nonnested_type): Just use lookup_name.\n+\t(complex_type_name): Just use IDENTIFIER_GLOBAL_VALUE.\n+\n+Wed Nov 19 11:45:07 1997  Michael Tiemann  <tiemann@axon.cygnus.com>\n+\n+\t* error.c (dump_function_name): Test DECL_LANG_SPECIFIC in case\n+\tT was built in C language context (for example, by\n+\toutput_func_start_profiler).\n+\n+Wed Nov 19 10:39:27 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (make_implicit_typename): New fn.\n+\t(lookup_name_real): Use it.  Use current_class_type as the context.\n+\n+Mon Nov 17 23:42:03 1997  Bruno Haible  <haible@ilog.fr>\n+\n+\t* pt.c (do_poplevel): Don't prohibit jumps into this contour.\n+\n+Mon Nov 17 02:01:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* friend.c (do_friend): Warn about non-template friends in templates.\n+\n+\t* call.c (build_op_delete_call): Fix handling of inherited delete.\n+\n+\t* search.c (dfs_record_inheritance): Ignore template type parms.\n+\n+Sat Nov 15 00:30:51 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_new_op): Fix copy error.\n+\t(build_op_new_call): New fn.\n+\t(build_op_delete_call): New fn.\n+\t* cp-tree.h: Declare them.\n+\t* init.c (build_new): Use them.  Support placement delete.\n+\t(build_x_delete): Use build_op_delete_call.\n+\t(build_delete): Likewise.\n+\t* decl2.c (delete_sanity): Likewise.\n+\t(coerce_delete_type): Don't complain about placement delete.\n+\n+Thu Nov 13 01:52:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_new_function_call): Remove unused 'obj' parm.\n+\t* cp-tree.h, typeck.c: Adjust.\n+\n+\t* init.c (build_new): Make the cleanup last longer.\n+\t(expand_vec_init): Call do_pending_stack_adjust.\n+\n+Wed Nov 12 11:04:33 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (do_type_instantiation): Fix typo.\n+\t(mark_class_instantiated): If we support one_only but not weak\n+\tsymbols, don't mark this as known.\n+\n+\t* init.c (build_new): Handle vec delete in EH cleanup.\n+\n+Wed Nov 12 08:11:55 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* call.c (build_method_call): Call complete_type before checking\n+\tfor destructor.\n+\n+Sun Nov  9 01:29:55 1997  Jim Wilson  (wilson@cygnus.com)\n+\n+\t* decl.c (add_block_current_level): Delete.\n+\t* init.c (build_vec_delete_1): Delete build_block and\n+\tadd_block_current_level calls.\n+\n+Wed Nov 12 00:48:16 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_new): Handle freeing allocated memory when the\n+\tconstructor throws.\n+\n+\t* call.c (build_new_method_call): Fix flags arg.\n+\n+\t* pt.c (do_type_instantiation): Don't try to instantiate\n+\tmember templates.\n+\t(mark_decl_instantiated): If we support one_only but not\n+\tweak symbols, mark this one_only.\n+\t* decl2.c (import_export_vtable): Don't defer handling of vtables\n+\tif MULTIPLE_SYMBOL_SPACES.\n+\n+Tue Nov 11 12:02:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_end_catch_block): Lose call to __sjpopnthrow.\n+\n+Tue Nov 11 02:53:44 1997  Jason Merrill  <jason@lasher.cygnus.com>\n+\n+\t* except.c (do_pop_exception): Return a value.\n+\n+Mon Nov 10 20:25:31 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_new_method_call): Handle getting a\n+\tTEMPLATE_ID_EXPR around a TEMPLATE_DECL.  Don't look for a field\n+\tif we got template parms.\n+\t* typeck.c (build_x_function_call): Remember the TEMPLATE_ID_EXPR,\n+\tnot just the args.\n+\t* decl2.c (build_expr_from_tree): Tweak last change.\n+\t* pt.c (tsubst_copy): Use get_first_fn instead of TREE_VALUE.\n+\t(maybe_fold_nontype_arg): Split out from tsubst_copy.\n+\t* tree.c (get_first_fn): Just return a TEMPLATE_ID_EXPR.\n+\n+Mon Nov 10 20:08:38 1997  Kriang Lerdsuwanakij  <lerdsuwa@scf-fs.usc.edu>\n+\n+\t* pt.c (tsubst_copy): Handle explicit template arguments in\n+\tfunction calls.\n+\t* typeck.c (build_x_function_call): Likewise.\n+\t* decl2.c (build_expr_from_tree): Lookup function name if it\n+\thasn't been done.\n+\n+\t* pt.c (tsubst): Instantiate template functions properly when\n+\ttemplate parameter does not appear in function arguments and return\n+\ttype.\n+\t(comp_template_args): Handle member templates required by tsubst.\n+\n+Mon Nov 10 20:08:38 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (grokdeclarator): Tweak conditions for pedwarn in\n+\tprevious change.\n+\n+Mon Nov 10 20:08:29 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* pt.c (coerce_template_parms): Tweak error message.\n+\n+\t* decl.c (grokdeclarator): If -Wreturn-type, warn everytime a\n+\treturn type defaults to `int', even if there are storage-class\n+\tspecifiers.\n+\n+Mon Nov 10 03:04:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\tComplete nested exception support.\n+\t* except.c (do_pop_exception): Split out...\n+\t(push_eh_cleanup): From here.  Handle the EH region by hand.\n+\t(expand_start_catch_block): Add a new level for the catch parm.\n+\tMove the rethrow region outside the two cleanup regions.\n+\tProtect the initializer for the catch parm with terminate.\n+\t(expand_end_catch_block): Likewise.  End the region for the eh_cleanup.\n+\t* exception.cc (__cp_pop_exception): Now takes two parms.  Handle\n+\tpopping off the middle of the stack.\n+\t* tree.c (lvalue_p, real_lvalue_p): Handle TRY_CATCH_EXPR,\n+\tWITH_CLEANUP_EXPR, and UNSAVE_EXPR.\n+\t(build_cplus_new): Only wrap CALL_EXPRs.\n+\t* init.c (expand_default_init): Handle a TRY_CATCH_EXPR around\n+\tthe constructor call.\n+\n+Sun Nov  9 18:00:26 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* Make-lang.in (c++.distdir): Make inc subdirectory.\n+\n+Fri Nov  7 11:57:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Put back some code.\n+\n+Thu Nov  6 11:28:14 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Remove redundant code.\n+\t* method.c (emit_thunk): Don't let the backend defer generic thunks.\n+\n+Wed Nov  5 23:52:50 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (call_eh_info): Split out...\n+\t(push_eh_info): From here.\n+\t(expand_builtin_throw): Use it.\n+\t(expand_start_catch_block): Move region start back.\n+\n+Tue Nov  4 13:45:10 1997  Doug Evans  <devans@canuck.cygnus.com>\n+\n+\t* lex.c (MULTIBYTE_CHARS): #undef if cross compiling.\n+\t(real_yylex): Record wide strings using target endianness, not host.\n+\n+1997-11-03  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* repo.c (rindex): Add decl unconditionally.\n+\t(get_base_filename, open_repo_file): Don't cast rindex.\n+\t* xref.c (rindex): Add decl unconditionally.\n+\t(index): Remove unused decl.\n+\t(open_xref_file): Don't cast rindex.\n+\n+Sun Nov  2 15:04:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (build_vbase_path): Propagate the result type properly.\n+\n+1997-11-01  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* except.c (expand_builtin_throw) [!DWARF2_UNWIND_INFO]: Replace\n+\tremaining use of saved_throw_type with a call to get_eh_type.\n+\n+1997-10-31  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lex.c (FILE_NAME_NONDIRECTORY): Delete macro.\n+\t(file_name_nondirectory): New function, doing the same as the macro.\n+\t(set_typedecl_interface_info): Use it instead of the macro.\n+\t(check_newline): Likewise.\n+\t(handle_cp_pragma): Likewise.\n+\n+\t* repo.c (get_base_filename): Cast result of rindex to char*.\n+\t(open_repo_file): Likewise.\n+\t* xref.c (open_xref_file): Likewise.\n+\t* error.c (dump_char): Make its arg int, not char.\n+\n+\t* except.c (push_eh_info): Pass the number of fields - 1 down, not\n+\tthe exact number of fields.\n+\n+Fri Oct 31 01:47:57 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\tSupport for nested exceptions.\n+\t* tinfo2.cc (__is_pointer): New fn.\n+\t* exception.cc (struct cp_eh_info): Define.\n+\t(__cp_exception_info, __uncatch_exception): New fns.\n+\t(__cp_push_exception, __cp_pop_exception): New fns.\n+\t* except.c: Lose saved_throw_{type,value,cleanup,in_catch}.\n+\tLose empty_fndecl.\n+\t(init_exception_processing): Likewise.  __eh_pc is now external.\n+\t(push_eh_info): New fn.\n+\t(get_eh_{info,value,type,caught}): New fns.\n+\t(push_eh_cleanup): Just call __cp_pop_exception.\n+\t(expand_start_catch_block): Use push_eh_info.  Start the eh region\n+\tsooner.\n+\t(expand_end_eh_spec): Use push_eh_info.\n+\t(expand_throw): Call __cp_push_exception to set up the exception info.\n+\tJust pass the destructor or 0 as the cleanup.  Call __uncatch_exception\n+\twhen we rethrow.\n+\t(expand_builtin_throw): Don't refer to empty_fndecl.\n+\n+Thu Oct 23 02:01:30 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_decl): SET_DECL_IMPLICIT_INSTANTIATION on new decl.\n+\n+1997-10-22  Brendan Kehoe  <brendan@cygnus.com>\n+\n+\t* method.c (build_template_parm_names, build_decl_overload_real):\n+\tAdd static to definitions.\n+\t* pt.c (add_to_template_args, note_template_header,\n+\tprocessing_explicit_specialization, type_unification_real): Likewise.\n+\t({determine,check}_explicit_specialization): Use a single string for\n+\terror messages.\n+\n+Mon Oct 20 12:06:34 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_exception_blocks): Call do_pending_stack_adjust.\n+\t(expand_end_catch_block): Likewise.\n+\t(expand_end_eh_spec): Likewise.\n+\n+Mon Oct 20 11:44:20 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* decl.c (duplicate_decls): Handle template specializations\n+\tcorrectly.\n+\t* error.c (dump_function_name): Fix printing of specializations of\n+\tmember functions that are not member templates.\n+\t* cp-tree.h (processing_specialization): Make global.\n+\t* pt.c (processing_specialization): Likewise.\n+\t* lex.c (cons_up_default_function): Save and restore\n+\tprocessing_specialization to avoid confusion.\n+\n+Mon Oct 20 10:52:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (init_decl_processing): Give null_node unknown* type.\n+\t* typeck.c (comp_target_types): Handle UNKNOWN_TYPE.\n+\t(common_type): Likewise.\n+\t* error.c (args_as_string): Recognize null_node.\n+\n+Sun Oct 19 09:13:01 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* typeck.c (rationalize_conditional_expr): Handle {MIN,MAX}_EXPR.\n+\t(unary_complex_lvalue): Call it for {MIN,MAX}_EXPR.\n+\n+\t* decl.c (init_decl_processing): Call using_eh_for_cleanups.\n+\n+\t* Make-lang.in (g++): Include prefix.o.\n+\n+Thu Oct 16 15:31:09 1997  Judy Goldberg  <judygold@sanwafp.com>\n+\n+\t* pt.c (determine_explicit_specialization): Initialize \"dummy\"\n+\tto keep Purify quiet.\n+\n+Thu Oct 16 00:14:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (build_overload_value): Handle TEMPLATE_CONST_PARMs here.\n+\t(build_overload_int): Not here.\n+\n+Wed Oct 15 00:35:28 1997  Mike Stump  <mrs@wrs.com>\n+\n+\t* class.c (build_type_pathname): Remove.\n+\t(prepare_fresh_vtable): Fix problem with complex MI vtable names.\n+\n+1997-10-14  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* parse.y (unary_expr): Give a pedwarn if someone tries to use the\n+\t&&label GNU extension.\n+\n+Tue Oct 14 12:01:00 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* decl.c (pushtag): Unset DECL_ASSEMBLER_NAME before setting it,\n+\tso as to avoid incorrect manglings.\n+\t* method.c (build_decl_overload_real): Don't mangle return types\n+\tfor constructors.\n+\n+Tue Oct 14 11:46:14 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.h (scratchalloc, build_scratch_list, make_scratch_vec,\n+\tscratch_tree_cons): Define as macros for now.\n+\t* call.c, class.c, cvt.c, decl.c, decl2.c, except.c, expr.c, init.c,\n+\tlex.c, method.c, parse.y, pt.c, rtti.c, search.c, tree.c, typeck.c,\n+\ttypeck2.c: Use them and the expression_obstack variants.\n+\n+Mon Oct 13 17:41:26 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* decl.c (store_return_init): Allow classes with explicit ctors to\n+\tbe used with the named return values extension.\n+\n+Fri Oct 10 12:21:11 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_decl): Fix previous change.\n+\n+Thu Oct  9 12:08:21 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst): Fix thinko.\n+\t(instantiate_decl): Really use the original template.\n+\n+\t* call.c (build_new_method_call): Use simple constructor_name for\n+\terror messages.\n+\n+Wed Oct  8 22:44:42 1997  Jeffrey A Law  <law@cygnus.com>\n+\n+\t* method.c (build_underscore_int): Don't use ANSI specific\n+\tfeatures.\n+\n+Wed Oct  8 00:18:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_prevtable_vardecl): Check DECL_REALLY_EXTERN\n+\tfor our key method; it might have been inlined by -O3.\n+\n+Tue Oct  7 23:00:12 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* decl.c (make_typename_type): Do not try to call lookup_field for\n+\tnon-aggregate types.\n+\n+Tue Oct  7 22:52:10 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_reinterpret_cast): Tweak.\n+\n+Tue Oct  7 22:45:31 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* typeck.c (build_reinterpret_cast): Converting a void pointer\n+\tto function pointer with a reinterpret_cast produces a warning\n+\tif -pedantic is issued.\n+\n+Tue Oct  7 22:43:43 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* typeck.c (c_expand_return): Don't warn about returning a\n+\treference-type variable as a reference.\n+\n+Tue Oct  7 21:11:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (build_static_name): Fix typo.\n+\n+1997-10-07  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Make sure DECL_LANG_SPECIFIC is set on\n+\tOLDDECL before we try to do DECL_USE_TEMPLATE.\n+\n+Tue Oct  7 00:48:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Don't warn about template instances.\n+\n+\t* typeck.c (mark_addressable): Lose ancient code that unsets\n+\tDECL_EXTERNAL.\n+\n+\t* pt.c (do_decl_instantiation): Lose support for instantiating\n+\tnon-templates.\n+\n+\t* call.c (build_new_function_call): Fix handling of null explicit\n+\ttemplate args.\n+\t(build_new_method_call): Likewise.\n+\n+Mon Oct  6 23:44:34 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* method.c (build_underscore_int): Fix typo.\n+\n+1997-10-06  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* tree.c (print_lang_statistics): #if 0 call to\n+\tprint_inline_obstack_statistics until its definition is checked in.\n+\n+Mon Oct  6 09:27:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Move dump_tree_statistics to end.\n+\n+\t* pt.c (instantiate_decl): Look for the original template.\n+\t(tsubst): Set DECL_IMPLICIT_INSTANTIATION on partial instantiations\n+\tof member templates.\n+\n+Wed Oct  1 08:41:38 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* Makefile.in (g++FAQ.*): New rules.\n+\t(CONFLICTS): Update.\n+\t* g++FAQ.texi: Moved from libg++.\n+\n+\t* parse.y (PFUNCNAME): Only specify the type once.\n+\n+1997-10-01  Brendan Kehoe  <brendan@lasher.cygnus.com>\n+\n+\t* lex.c (real_yylex): Clean up the code to fully behave the way\n+\tthe c-lex.c parser does for complex and real numbers.\n+\n+Tue Sep 30 08:51:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (build_decl_overload_real): Reformat.\n+\n+Tue Sep 30 00:18:26 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (synthesize_method): If at_eof, determine our linkage.\n+\n+1997-09-29  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* lex.c (real_yylex): Treat `$' just like `_', except issue a\n+\tdiagnostic if !dollars_in_ident or if pedantic.\n+\n+\t* lang-specs.h (@c++): -ansi no longer implies -$.\n+\n+\t* decl2.c (lang_decode_option):\n+\t-traditional and -ansi now do not mess with\n+\tdollars_in_ident.\n+\n+Mon Sep 29 19:57:51 1997  H.J. Lu  <hjl@gnu.ai.mit.edu>\n+\n+\t* Makefile.in (parse.o, decl.o): Also depend on\n+\t$(srcdir)/../except.h $(srcdir)/../output.h.\n+\t(decl2.o): Also depend on $(srcdir)/../expr.h ../insn-codes.h\n+\t$(srcdir)/../except.h $(srcdir)/../output.h.\n+\t(typeck.o, init.o): Also depend on $(srcdir)/../expr.h\n+\t../insn-codes.h.\n+\n+\t* call.c, cp-tree.h, decl.c, tree.c: Finish prototyping.\n+\n+\t* expr.c (cplus_expand_expr): Make it static.\n+\n+\t* decl2.c, init.c, typeck.c: Include \"expr.h\".\n+\t(expand_expr): Use proper values when calling the function.\n+\n+Mon Sep 29 11:05:54 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* lang-options.h: New -Wold-style-cast flag.\n+\t* cp-tree.h (warn_old_style_cast): New variable.\n+\t* decl2.c (warn_old_style_cast): Likewise.\n+\t(lang_decode_option): Support -Wold-style-cast.\n+\t(reparse_absdcl_as_casts): Produce old-style-cast warning.\n+\n+Mon Sep 29 09:20:53 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* decl.c (cp_finish_decl): Allow expand_aggr_init to set\n+\tTREE_USED, reset value based on already_used.\n+\n+\t* init.c (expand_member_init): Revert change.\n+\n+Mon Sep 29 08:57:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.h, decl.c, decl2.c, pt.c:\n+\tLose DECL_C_STATIC and DECL_PUBLIC.  Don't pretend statics are public.\n+\n+\t* decl2.c (lang_decode_option): Add missing ;.\n+\n+Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* friend.c (do_friend): Disable injection for all template-derived\n+\tdecls.\n+\t* decl2.c (lang_decode_option): Handle -fguiding-decls.\n+\t* parse.y (notype_template_declarator): New nonterminal.\n+\t(direct_notype_declarator): Use it.\n+\t(complex_direct_notype_declarator): Likewise.\n+\t(object_template_id): Accept any kind of identifier after TEMPLATE.\n+\t(notype_qualified_id): Don't add template declarators here.\n+\n+Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* call.c (add_template_candidate): Add explicit_targs parameter.\n+\t(build_scoped_method_call): Use it.\n+\t(build_overload_call_real): Likewise.\n+\t(build_user_type_conversion_1): Likewise.\n+\t(build_new_function_call): Likewise.\n+\t(build_object_call): Likewise.\n+\t(build_new_op): Likewise.\n+\t(build_new_method_call): Likewise.\n+\t(build_new_function_call): Handle TEMPLATE_ID_EXPR.\n+\t(build_new_method_call): Likewise.\n+\n+\t* class.c (finish_struct_methods): Add specialization pass to\n+\tdetermine which methods were specializing which other methods.\n+\t(instantiate_type): Handle TEMPLATE_ID_EXPR.\n+\n+\t* cp-tree.def (TEMPLATE_ID_EXPR): New tree code.\n+\n+\t* cp-tree.h (name_mangling_version): New variable.\n+\t(flag_guiding_decls): Likewise.\n+\t(build_template_decl_overload): New function.\n+\t(begin_specialization): Likewise.\n+\t(reset_specialization): Likewise.\n+\t(end_specialization): Likewise.\n+\t(determine_explicit_specialization): Likewise.\n+\t(check_explicit_specialization): Likewise.\n+\t(lookup_template_function): Likewise.\n+\t(fn_type_unification): Add explicit_targs parameter.\n+\t(type_unification): Likewise.\n+\n+\t* decl.c (duplicate_decls): Add smarts for explicit\n+\tspecializations.\n+\t(grokdeclarator): Handle TEMPLATE_ID_EXPR, and function\n+\tspecializations.\n+\t(grokfndecl): Call check_explicit_specialization.\n+\n+\t* decl2.c (lang_decode_option): Handle -fname-mangling-version.\n+\t(build_expr_from_tree): Handle TEMPLATE_ID_EXPR.\n+\t(check_classfn): Handle specializations.\n+\n+\t* error.c (dump_function_name): Print specialization arguments.\n+\n+\t* friend.c (do_friend): Don't call pushdecl for template\n+\tinstantiations.\n+\n+\t* init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n+\n+\t* lang-options.h: Add -fname-mangling-version, -fguiding-decls,\n+\tand -fno-guiding-decls.\n+\n+\t* lex.c (identifier_type): Return PFUNCNAME for template function\n+\tnames.\n+\n+\t* method.c (build_decl_overload_real): New function.\n+\t(build_template_parm_names): New function.\n+\t(build_overload_identifier): Use it.\n+\t(build_underscore_int): New function.\n+\t(build_overload_int): Use it.  Add levels for template\n+\tparameters.\n+\t(build_overload_name): Likewise.  Also, handle TYPENAME_TYPEs.\n+\t(build_overload_nested_names): Handle template type parameters.\n+\t(build_template_decl_overload): New function.\n+\n+\t* parse.y (YYSTYPE): New ntype member.\n+\t(nested_name_specifier): Use it.\n+\t(nested_name_specifier_1): Likewise.\n+\t(PFUNCNAME): New token.\n+\t(template_id, object_template_id): New non-terminals.\n+\t(template_parm_list): Note specializations.\n+\t(template_def): Likewise.\n+\t(structsp): Likewise.\n+\t(fn.def2): Handle member template specializations.\n+\t(component_decl_1): Likewise.\n+\t(direct_notype_declarator): Handle template-ids.\n+\t(component_decl_1): Likewise.\n+\t(direct_notype_declarator): Handle template-ids.\n+\t(primary): Handle TEMPLATE_ID_EXPR, and template-ids.\n+\n+\t* pt.c (processing_specializations): New variable.\n+\t(template_header_count): Likewise.\n+\t(type_unification_real): New function.\n+\t(processing_explicit_specialization): Likewise.\n+\t(note_template_header): Likewise.\n+\t(is_member_template): Handle specializations.\n+\t(end_template_decl): Call reset_specialization.\n+\t(push_template_decl): Handle member template specializations.\n+\t(tsubst): Likewise.\n+\t(tsubst_copy): Handle TEMPLATE_ID_EXPR.\n+\t(instantiate_template): Handle specializations.\n+\t(instantiate_decl): Likewise.\n+\t(fn_type_unification): Handle explicit_targs.\n+\t(type_unification): Likewise.  Allow incomplete unification\n+\twithout an error message, if allow_incomplete.\n+\t(get_bindings): Use new calling sequence for fn_type_unification.\n+\n+\t* spew.c (yylex): Handle PFUNCNAME.\n+\n+\t* tree.c (is_overloaded_fn): Handle TEMPLATE_ID_EXPR.\n+\t(really_overloaded_fn): Likewise.\n+\t(get_first_fn): Handle function templates.\n+\n+\t* typeck.c (build_x_function_call): Use really_overloaded_fn.\n+\tHandle TEMPLATE_ID_EXPR.\n+\t(build_x_unary_op): Likewise.\n+\t(build_unary_op): Likewise.\n+\t(mark_addressable): Templates whose address is taken are marked\n+\tas used.\n+\n+1997-09-25  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* decl.c (init_decl_processing): Declare __builtin_constant_p as\n+\taccepting any kind of type, not only int.\n+\n+Fri Sep 26 00:22:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (get_matching_virtual): Notice virtual bases when sorrying\n+\tabout covariant returns.\n+\n+\t* parse.y (member_init): Also imply typename here.  Remove ancient\n+\textension for initializing base members.\n+\n+Thu Sep 25 11:11:13 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\tHandle multi-level typenames and implicit typename in base list.\n+\t* parse.y (typename_sub{,[0-2]}): New rules.\n+\t(structsp, rule TYPENAME_KEYWORD): Use typename_sub.\n+\t(nonnested_type): New rule.\n+\t(complete_type_name): Use it.\n+\t(base_class.1): Use typename_sub and nonnested_type.\n+\t(nested_name_specifier): Don't elide std:: here.\n+\t* decl.c (make_typename_type): Handle getting a type for NAME.\n+\t(lookup_name_real): Turn std:: into :: here.\n+\n+\tRvalue conversions were removed in London.\n+\t* call.c (is_subseq): Don't consider lvalue transformations.\n+\t(build_conv): LVALUE_CONV and RVALUE_CONV get IDENTITY_RANK.\n+\t(joust): Re-enable ?: kludge.\n+\n+1997-09-22  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* decl.c (start_function): Up warning of no return type to be a\n+\tpedwarn.\n+\n+Mon Sep 22 14:15:34 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* init.c (expand_member_init): Don't set TREE_USED.\n+\t* decl.c (cp_finish_decl): Mark decls used if type has TREE_USED\n+\tset,don't clear TREE_USED wholesale.\n+\n+Sat Sep 20 15:31:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_over_call): Do require_complete_type before\n+\tbuild_cplus_new.\n+\n+Thu Sep 18 16:47:52 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (lookup_field): Call complete_type in all cases.\n+\n+\t* decl.c (finish_function): Just warn about flowing off the end.\n+\n+Wed Sep 17 10:31:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (grokparms): Don't bash a permanent list node if we're\n+\tin a function.\n+\n+1997-09-17  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* Makefile.in (CONFLICTS): Fix s/r conflict count to 18.\n+\n+Tue Sep 16 14:06:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_new_op): Give better error for syntactically\n+\tcorrect, but semantically invalid, use of undeclared template.\n+\n+\t* call.c (compare_qual): Handle pmfs.\n+\n+\t* decl.c (store_parm_decls): last_parm_cleanup_insn is the insn\n+\tafter the exception spec.\n+\n+Mon Sep 15 11:52:13 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (null_ptr_cst_p): Integer type, not integral type.\n+\n+\t* call.c (joust): Disable warnings until they can be moved to the\n+\tright place.\n+\n+Fri Sep 12 16:11:13 1997  Per Bothner  <bothner@cygnus.com>\n+\n+\t* Makefile.in, config-lang.in:  Convert to autoconf.\n+\n+Thu Sep 11 17:14:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (lookup_name_real): Add implicit 'typename' to types from\n+\tbase classes.\n+\n+\t* pt.c (most_specialized_class): Fix typo.\n+\t(tsubst): Move constant folding to TREE_VEC case.\n+\n+Thu Sep 11 10:08:45 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (do_poplevel): Don't warn about unused local variables\n+\twhile processing_template_decl since we don't always know whether\n+\tor not they will need constructing/destructing.\n+\n+\t* pt.c (uses_template_parms): Check the values of an enumeration\n+\ttype to make sure they don't depend on template parms.\n+\n+\t* decl.c (make_typename_type): Don't lookup the field if the\n+\tcontext uses template parms, even if we're not\n+\tprocessing_template_decl at the moment.\n+\n+\t* pt.c (coerce_template_parms): Avoid looking at the\n+\tTYPE_LANG_DECL portion of a typename type, since there won't be\n+\tone.\n+\t(tsubst): Do constant folding as necessary to make sure that\n+\targuments passed to lookup_template_class really are constants.\n+\n+Wed Sep 10 16:39:26 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* Make-lang.in (LN, LN_S): New macros, use where appropriate.\n+\n+Wed Sep 10 11:21:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_builtin_throw): #ifndef DWARF2_UNWIND_INFO.\n+\t* decl2.c (finish_file): Only register exception tables if we\n+\tneed to.\n+\n+\t* decl.c (init_decl_processing): Add __builtin_[fs]p.\n+\n+Tue Sep  9 19:49:38 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (unify): Just return 0 for a TYPENAME_TYPE.\n+\n+Tue Sep  9 17:57:25 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* error.c (dump_decl): Avoid crashing when presented with a\n+\tuninitialized constant, as can occur with a template parameter.\n+\t(dump_expr): Make sure that there are enough levels of\n+\tcurrent_template_parms before we start diving through them.\n+\n+1997-09-09  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* typeck.c (build_indirect_ref): Heed FLAG_VOLATILE similar to\n+\tc-typeck.c.\n+\n+Tue Sep  9 09:36:39 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* except.c (expand_throw): Call build_delete for all\n+\texception types, not just objects with destructors.\n+\n+Mon Sep  8 02:33:20 1997  Jody Goldberg  <jodyg@idt.net>\n+\n+\t* decl.c (current_local_enum): Remove static.\n+\t* pt.c (tsubst_enum): Save and restore value of current_local_enum\n+\tin case template is expanded in enum decl.\n+\t(instantiate_class_template): Use new tsubst_enum signature.\n+\t(tsubst_expr): Likewise.\n+\n+Mon Sep  8 01:21:43 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (begin_member_template_processing): Take a function as\n+\targument, not a set of template arguments.  Use the template\n+\tparameters, rather than the arguments.  Handle non-type parameters\n+\tcorrectly.  Push a binding level for the parameters so that multiple\n+\tmember templates using the same parameter names can be declared.\n+\t(end_member_template_processing): Pop the binding level.\n+\t(push_template_decl): Mark member templates as static when\n+\tappropriate.\n+\n+\t* lex.c (do_pending_inlines): Pass the function, not its template\n+\targuments, to begin_member_template_processing.\n+\t(process_next_inline): Likewise.\n+\t(do_pending_defargs): Likewise.\n+\n+\t* error.c (dump_expr): Obtain the correct declaration for a\n+\tTEMPLATE_CONST_PARM.\n+\n+\t* call.c (add_template_conv_candidate): New function.\n+\t(build_object_call): Handle member templates, as done in the other\n+\tbuild_ functions.\n+\n+Sat Sep  6 10:20:27 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* decl.c (replace_defag): Undo previous change.\n+\t* lex.c (do_pending_defargs): Deal with member templates.\n+\n+\t* pt.c (is_member_template): Avoid crashing when passed a\n+\tnon-function argument.\n+\n+Fri Sep  5 17:27:38 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (grow_method): Remove check for redeclaration.\n+\n+Fri Sep  5 01:37:17 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* cp-tree.h (INNERMOST_TEMPLATE_PARMS): New macro.\n+\t(DECL_INNERMOST_TEMPLATE_PARMS): Likewise.\n+\t(PRIMARY_TEMPLATE_P): Use it.\n+\t* call.c (build_overload_call_real): Use it.\n+\t* class.c (instantiate_type): Likewise.\n+\t* decl.c (decls_match): Likewise.\n+\t* method.c (build_overload_identifier): Likewise.\n+\t* pt.c (push_template_decl): Likewise.\n+\t(classtype_mangled_name): Likewise.\n+\t(lookup_template_class): Likewise.\n+\n+\t* cp-tree.h (DECL_NTPARMS): Change name from DECL_NT_PARMS to\n+\tDECL_NTPARMS to conform to usage elsewhere.\n+\t* call.c (add_template_candidate): Likewise.\n+\t* class.c (instantiate_type): Likewise.\n+\t* pt.c (instantiate_template): Likewise.\n+\t(get_bindings): Likewise.\n+\n+\t* class.c (grow_method): Use DECL_FUNCTION_TEMPLATE_P instead of\n+\tis_member_template.\n+\n+\t* pt.c (unify): Undo changes to allow multiple levels of template\n+\tparameters.\n+\t(type_unification): Likewise.\n+\t(fn_type_unification): Likewise.\n+\t(get_class_bindings): Likewise.\n+\t* cp-tree.h (Likewise).\n+\n+\t* decl.c (replace_defarg): Check that the type of the default\n+\tparameter does not invlove a template type before complaining\n+\tabout the initialization.\n+\n+\t* error.c (dump_expr): Deal with template constant parameters in\n+\tmember templates correctly.\n+\n+\t* pt.c (is_member_template): Deal with class specializations\n+\tcorrectly.\n+\t(tsubst): Handle \"partial instantiation\" of member templates\n+\tcorrectly.\n+\n+Wed Sep  3 12:30:24 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (type_unification): Change calling sequence to allow for\n+\tmultiple levels of template parameters.\n+\t(tsubst_expr): Likewise.\n+\t(tsubst): Likewise.\n+\t(tsubst_copy): Likewise.\n+\t(instantiate_template): Likewise.\n+\t(unify): Likewise.\n+\t* call.c (build_overload_call_real): Use it.\n+\t(add_builtin_candidate): Use it.\n+\t(build_new_method_call): Use it.\n+\t* class.c (instantiate_type): Use it.\n+\t* decl.c (grokdeclarator): Use it.\n+\t* decl2.c (finish_file): Use it.\n+\t* method.c (build_overload_identifier): Use it.\n+\n+\t* call.c (add_template_candidate):  Add additional parameter for\n+\tthe function return type.  Call fn_type_unification istead of\n+\ttype_unification.\n+\t(build_user_type_conversion_1): Handle member templates.\n+\t(build_new_function_call): Likewise.\n+\t(build_new_op): Likewise.\n+\t(build_new_method_call): Likewise.\n+\n+\t* class.c (grow_method): Don't give an error message indicating\n+\tthat two member templates with the same name are ambiguous.\n+\t(finish_struct): Treat member template functions just like member\n+\tfunctions.\n+\n+\t* cp-tree.h (check_member_template): Add declaration.\n+\t(begin_member_template_processing): Likewise.\n+\t(end_member_template_processing): Likewise.\n+\t(fn_type_unification): Likewise.\n+\t(is_member_template): Likewise.\n+\t(tsubst): Change prototype.\n+\t(tsubst_expr): Likewise.\n+\t(tsubst_copy): Likewise.\n+\t(instantiate_template): Likewise.\n+\t(get_bindings): Likewise.\n+\n+\t* decl.c (decls_match): Handle multiple levels of template\n+\tparameters.\n+\t(pushdecl): Handle template type params just like other type\n+\tdeclarations.\n+\t(push_class_level_binding): Return immediately if the\n+\tclass_binding_level is NULL.\n+\t(grokfndecl): If check_classfn() returns a member_template, use\n+\tthe result of the template, not the template itself.\n+\n+\t* decl2.c (check_member_template): New function.  Check to see\n+\tthat the entity declared to be a member template can be one.\n+\t(check_classfn): Allow redeclaration of member template functions\n+\twith different types; the new functions can be specializations or\n+\texplicit instantiations.\n+\n+\t* error.c (dump_decl): Handle multiple levels of template\n+\tparameters.\n+\t(dump_function_decl): Update to handle function templates.\n+\n+\t* lex.c (do_pending_inlines): Set up template parameter context\n+\tfor member templates.\n+\t(process_next_inline): Likewise.\n+\n+\t* method.c (build_overload_identifier): Adjust for multiple levels\n+\tof template parameters.\n+\n+\t* parse.y (fn.def2): Add member templates.\n+\t(component_decl_1): Likewise.\n+\n+\t* pt.c (begin_member_template_processing): New function.\n+\t(end_member_template_processing): Likewise.\n+\t(is_member_template): Likewise.\n+\t(fn_type_unification): Likewise.\n+\t(current_template_parms): Return a vector of all the template\n+\tparms, not just the innermost level of parms.\n+\t(push_template_decl): Deal with the possibility of member\n+\ttemplates.\n+\t(lookup_template_class): Likewise.\n+\t(uses_template_parms): Likewise.\n+\t(tsubst): Modify processing to TEMPLATE_TYPE_PARM and\n+\tTEMPLATE_CONST_PARM to deal with multiple levels of template\n+\targuments.   Add processing of TEMPLATE_DECL to produce new\n+\tTEMPLATE_DECLs from old ones.\n+\t(do_decl_instantiation): Handle member templates.\n+\n+\t* search.c (lookup_fnfields_1): Handle member template conversion\n+\toperators.\n+\n+\t* tree.c (cp_tree_equal): Check the levels, as well as the\n+\tindices, of TEMPLATE_CONST_PARMs.\n+\n+\t* typeck.c (comptypes): Check the levels, as well as the indices,\n+\tfo TEMPLATE_TYPE_PARMs.\n+\t(build_x_function_call): Treat member templates like member\n+\tfunctions.\n+\n+Wed Sep  3 11:09:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (c_expand_return): Always convert_for_initialization\n+\tbefore checking for returning a pointer to local.\n+\n+\t* pt.c (type_unification): If strict and the function parm doesn't\n+\tuse template parms, just compare types.\n+\n+Wed Sep  3 10:35:49 1997  Klaus Espenlaub  <kespenla@student.informatik.uni-ulm.de>\n+\n+\t* method.c (build_overloaded_value): Replace direct call\n+\tto the floating point emulator with REAL_VALUE_TO_DECIMAL macro.\n+\n+Wed Sep  3 00:02:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (convert_arguments): Don't arbitrarily choose the first\n+\tof a set of overloaded functions.\n+\n+Tue Sep  2 12:09:13 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (real_yylex): Don't elide __FUNCTION__.\n+\n+\t* method.c (build_overload_value): Add in_template parm.\n+\t(build_overload_int): Likewise.\n+\t(build_overload_identifier): Pass it.\n+\n+\t* decl.c (duplicate_decls): Don't bash a previous template\n+\tdefinition with a redeclaration.\n+\n+\t* pt.c (unify): float doesn't match double.\n+\n+\t* pt.c (do_type_instantiation): Handle getting a _TYPE or a\n+\tTYPE_DECL.  Handle getting non-template types.\n+\t* parse.y (explicit_instantiation): Use typespec instead of\n+\taggr template_type.\n+\n+Tue Sep  2 10:27:08 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* typeck.c (build_ptrmemfunc1): Clean up ptr->int cast warnings.\n+\n+Mon Sep  1 13:19:04 1997  Eugene Mamchits  <eugin@ips.ras.ru>\n+\n+\t* call.c (add_builtin_candidate): Add missing TREE_TYPE.\n+\t(compare_ics): Likewise.\n+\n+Mon Sep  1 13:19:04 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (joust): Warn about choosing one conversion op over\n+\tanother because of 'this' argument when the other return type is\n+\tbetter.\n+\t(source_type): New fn.\n+\n+\t* call.c (build_new_op): Strip leading REF_BIND from first operand\n+\tto builtin operator.\n+\n+\t* decl2.c (mark_vtable_entries): Mark abort_fndecl as used when we\n+\tuse its RTL.\n+\n+Thu Aug 28 09:45:23 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (null_ptr_cst_p): Remove support for (void*)0.\n+\n+Wed Aug 27 02:03:34 1997  Jeffrey A Law  <law@cygnus.com>\n+\n+\t* typeck.c (expand_target_expr): Make definition match declaration.\n+\n+\t* class.c (get_basefndecls): Make definition match declaration.\n+\n+Mon Aug 25 14:30:02 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* input.c (sub_getch): Eventually give up and release the input file.\n+\n+\t* decl.c (cp_finish_decl): If #p i/i, put inline statics in the\n+\tright place.\n+\n+\t* call.c (joust): Tweak message.\n+\n+Sat Aug 23 18:02:59 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* error.c (type_as_string): Put const/volatile on template type\n+\tparameters where appropriate.\n+\n+Sat Aug 23 17:47:22 1997  Jeffrey A Law  <law@cygnus.com>\n+\n+\t* call.c (strictly_better): Make arguments unsigned ints.\n+\n+Thu Aug 21 18:48:44 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (real_yylex): Refer to __complex instead of complex.\n+\n+Thu Aug 21 22:25:46 1997  J\"orn Rennecke  <amylaar@cygnus.co.uk>\n+\n+\t* lex.c (real_yylex): Don't use getc directly.\n+\n+Wed Aug 20 17:25:08 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (is_subseq): Don't try to be clever.\n+\n+Wed Aug 20 03:13:36 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n+\n+\t* parse.y, pt.c: Include \"except.h\".\n+\t* call.c, class.c, class.h, cp-tree.h, cvt.c, decl.c, decl2.c,\n+\terror.c, except.c, expr.c, friend.c, g++spec.c, init.c, input.c,\n+\tlex.c, lex.h, method.c, parse.y, pt.c, repo.c, rtti.c, search.c,\n+\tsig.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c: Finish\n+\tprototyping.\n+\n+Wed Aug 20 01:34:40 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (mark_vtable_entries): Instead of replacing pure\n+\tvirtuals with a reference to __pure_virtual, copy the decl and\n+\tchange the RTL.\n+\n+Tue Aug 19 02:26:07 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (lookup_nested_type_by_name): Handle typedef wierdness.\n+\n+\t* typeck2.c (my_friendly_abort): Report bugs to egcs-bugs@cygnus.com.\n+\n+\t* pt.c (instantiate_class_template): Call repo_template_used\n+\tbefore finish_prevtable_vardecl.\n+\n+\t* call.c (is_subseq): New fn.\n+\t(compare_ics): Use it.\n+\n+\t* repo.c (finish_repo): Don't crash on no args.\n+\n+\t* parse.y (named_complex_class_head_sans_basetype): Handle\n+\texplicit global scope.\n+\t* decl2.c (handle_class_head): New fn.\n+\n+\t* pt.c (unify): Add CONST_DECL case.\n+\n+Thu Aug 14 10:05:13 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* rtti.c (permanent_obstack): Fix decl to not be a pointer.\n+\n+\t* cp-tree.h (report_type_mismatch): Add prototype.\n+\t* call.c (build_overload_call_real): Remove erroneous fourth\n+\targument to report_type_mismatch.\n+\t(build_user_type_conversion_1): Remove erroneous second arg to\n+\ttourney.\n+\t(build_new_function_call): Likewise.\n+\t(build_object_call): Likewise.\n+\t(build_new_op): Likewise.\n+\t(build_new_method_call): Likewise.\n+\n+Wed Aug 13 19:19:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* error.c (dump_decl): Don't bother processing a function with no\n+\tDECL_LANG_SPECIFIC.\n+\n+\t* method.c (emit_thunk): Call init_function_start in the macro case.\n+\n+Wed Aug 13 10:46:19 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n+\n+\t* decl2.c (DEFAULT_VTABLE_THUNKS): Define to be 0 if not\n+\tdefined and used to set flag_vtable_thunks.\n+\n+Tue Aug 12 20:13:57 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y: Don't clear the inlines from their obstack until they've\n+\tall been processed.\n+\n+\t* decl.c (duplicate_decls): Don't complain about exception\n+\tspecification mismatch if flag_exceptions is off.\n+\n+Mon Aug 11 15:01:56 1997  Marc Lehmann  <pcg@goof.com>\n+\n+\t* Make-lang.in (c++.distclean): Remove g++.c on make distclean.\n+\n+Sun Aug 10 12:06:09 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* cp-tree.h: Replace STDIO_PROTO with PROTO in include files.\n+\t* cvt.c, error.c, except.c, expr.c, friend.c, init.c, rtti.c:\n+\tInclude <stdio.h> before include files that formerly used STDIO_PROTO.\n+\n+\t* decl.c, g++spec.c, lex.c, method.c, repo.c:\n+\tInclude \"config.h\" first, as per autoconf manual.\n+\n+Fri Aug  8 11:47:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Tweak wording.\n+\t* lex.c (do_pending_defargs): Don't die if we see a default arg\n+\tthat isn't a DEFAULT_ARG.\n+\t* error.c (dump_expr): Handle DEFAULT_ARG.\n+\n+\t* decl2.c (lang_decode_option): Handle -fhandle-exceptions.\n+\t* lang-options.h: Add -fhandle-exceptions.\n+\n+\t* class.c (build_vtable): Vtables are artificial.\n+\t(prepare_fresh_vtable): Likewise.\n+\n+Wed Aug  6 11:02:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cvt.c (ocp_convert): After converting to the target type, set\n+\tLOOKUP_NO_CONVERSION.\n+\n+\t* call.c (joust): Warn about potentially confusing promotion rules\n+\twith -Wsign-promo.\n+\t* cp-tree.h, lang-options.h, decl2.c: Support -Wsign-promo.\n+\n+Tue Aug  5 15:15:07 1997  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* exception.cc: Declare __terminate_func with noreturn attribute.\n+\n+Fri Aug  1 03:18:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y: Break out eat_saved_input, handle errors.\n+\t(function_try_block): Use compstmt instead of compstmt_or_error.\n+\n+Thu Jul 31 17:14:04 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (build_cplus_new): Don't set TREE_ADDRESSABLE.\n+\n+Fri Jul  4 01:45:16 1997  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* Make-lang.in (cplib2.txt, cplib2.ready): Instead of checking for\n+\texistence of cc1plus check whether $(LANGUAGES) contains C++.\n+\n+Wed Jul 30 13:04:21 1997  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* method.c (do_build_copy_constructor): When copying an anonymous\n+\tunion member loop around to handle nested anonymous unions.  Use\n+\tthe offset of the member relative to the outer structure, not the\n+\tunion.\n+\n+Tue Jul 29 21:17:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (resolve_args): New fn.\n+\t(build_new_function_call): Use it.\n+\t(build_object_call): Likewise.\n+\t(build_new_method_call): Likewise.\n+\n+Mon Jul 28 16:02:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_over_call): tsubst all default parms from templates.\n+\n+Wed Jul 23 13:36:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (struct cp_function): Add static_labelno.\n+\t(push_cp_function_context): Save it.\n+\t(pop_cp_function_context): Restore it.\n+\n+Tue Jul 22 14:43:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_component_ref_1): Convert from reference.\n+\n+Tue Jul 22 11:06:23 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* parse.y (current_declspecs, prefix_attributes): Initialize to\n+\tNULL_TREE.\n+\n+\t* parse.y (initdcl0): Make sure CURRENT_DECLSPECS is non-nil\n+\tbefore we try to force it to be a TREE_LIST.\n+\t(decl): Make sure $1.t is non-nil.\n+\n+Sun Jul 20 11:53:07 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (uses_template_parms): Handle template first-parse codes.\n+\n+\t* decl.c (cp_finish_decl): Only warn about user-defined statics.\n+\n+Fri Jul 18 17:56:08 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (unify): Handle BOOLEAN_TYPE.\n+\n+\t* cp-tree.h: Lose PARM_DEFAULT_FROM_TEMPLATE.\n+\t* pt.c (tsubst): Don't set it.\n+\t* call.c (build_over_call): Use uses_template_parms.\n+\n+Thu Jul 17 18:06:30 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (build_overload_nested_name): Use static_labelno\n+\tinstead of var_labelno.\n+\t(build_qualified_name): New fn.\n+\t(build_overload_name): Split out from here.\n+\t(build_static_name): Use build_qualified_name.\n+\t* decl.c (cp_finish_decl): Statics in extern inline functions\n+\thave comdat linkage.\n+\t(start_function): Initialize static_labelno.\n+\n+Thu Jul 17 11:20:17 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* class.c (finish_struct_methods): Add check of warn_ctor_dtor_privacy\n+\tbefore \"all member functions in class [] are private\".\n+\n+Wed Jul 16 23:47:08 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (do_scoped_id): convert_from_reference.\n+\t* init.c (build_offset_ref): Likewise.\n+\n+Wed Jul 16 12:34:29 1997  Benjamin Kosnik  <bkoz@lisa.cygnus.com>\n+\n+\t* error.c (dump_expr): Check TREE_OPERAND before dump_expr_list.\n+\n+Mon Jul 14 03:23:46 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (get_member_function_from_ptrfunc): Promote index\n+\tbefore saving it.\n+\n+Sun Jul 13 00:11:52 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (layout_basetypes): Move non-virtual destructor warning.\n+\t* decl.c (xref_basetypes): Remove non-virtual destructor warning.\n+\n+Sat Jul 12 12:47:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (grokdeclarator): Call add_defarg_fn for the function\n+\ttype, too.\n+\t* lex.c (add_defarg_fn): Adjust.\n+\t(do_pending_defargs): Adjust.  Don't skip the first parm.\n+\n+Fri Jul 11 01:39:50 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (build_enumerator): Global enumerators are also readonly.\n+\n+\t* rtti.c (build_dynamic_cast_1): Renamed from build_dynamic_cast.\n+\t(build_dynamic_cast): Call it and convert_from_reference.\n+\n+\t* lex.c (add_defarg_fn): New fn.\n+\t(snarf_defarg): Don't add to defarg_types.\n+\t(do_pending_defargs): Lose defarg_types.  All fns we process now\n+\thave defargs.\n+\t* decl.c (grokfndecl): Call add_defarg_fn.\n+\n+\t* Makefile.in (CONFLICTS): Expect 18 s/r conflicts.\n+\t* cp-tree.def: Add DEFAULT_ARG.\n+\t* spew.c (yylex): Call snarf_defarg as appropriate.\n+\t* parse.y: New tokens DEFARG and DEFARG_MARKER.\n+\t(defarg_again, pending_defargs, defarg, defarg1): New rules.\n+\t(structsp): Use pending_defargs.\n+\t(parms, full_parm): Use defarg.\n+\t* lex.c (init_lex): Initialize inline_text_firstobj.\n+\t(do_pending_inlines): Never pass the obstack to feed_input.\n+\t(process_next_inline): Call end_input instead of restore_pending_input.\n+\t(clear_inline_text_obstack, reinit_parse_for_expr, do_pending_defargs,\n+\tfinish_defarg, feed_defarg, snarf_defarg, maybe_snarf_defarg): New fns.\n+\t* input.c (end_input): New fn.\n+\t(sub_getch): At the end of some fed input, just keep returning EOF\n+\tuntil someone calls end_input.\n+\tRemove 'obstack' field from struct input_source.\n+\t* decl.c (grokparms): Handle DEFAULT_ARG.\n+\t(replace_defarg): New fn.\n+\t* cp-tree.h (DEFARG_LENGTH, DEFARG_POINTER): New macros.\n+\n+Wed Jul  9 13:44:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (implicit_conversion): If nothing else works, try binding\n+\tan rvalue to a reference.\n+\n+Wed Jul  9 13:04:38 1997  Geoffrey Noer  <noer@cygnus.com>\n+\n+\t* decl.c (init_decl_processing): Fix Jun 30 patch -- move\n+\tifndef for Cygwin32 to include SIGSEGV.\n+\n+Thu Jul  3 01:44:05 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (finish_struct_1): Only complain about pointers without\n+\tcopy stuff if there are any constructors.\n+\n+\t* rtti.c (build_dynamic_cast): Call complete_type on the types.\n+\n+\t* decl.c (grokfndecl): If the function we chose doesn't actually\n+\tmatch, die.\n+\n+\t* decl2.c (grokclassfn): Don't specify 'const int' for the\n+\tartificial destructor parm.\n+\n+\t* pt.c (type_unification): If we are called recursively, nothing\n+\tdecays.\n+\n+Mon Jun 30 17:53:21 1997  Geoffrey Noer  <noer@cygnus.com>\n+\n+\t* decl.c (init_decl_processing): Stop trying to catch signals\n+\tother than SIGABRT since the Cygwin32 library doesn't support\n+\tthem correctly yet.  This fixes a situation in which g++ causes\n+\ta hang on SIGSEGVs and other such signals in our Win32-hosted\n+\ttools.\n+\n+Mon Jun 30 14:50:01 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (mapcar, case CALL_EXPR): Handle all the parse node data.\n+\n+Fri Jun 27 15:18:49 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck2.c (store_init_value): Always return the value if our\n+\ttype needs constructing.\n+\n+\t* method.c (hack_identifier): Convert class statics from\n+\treference, too.\n+\n+Thu Jun 26 11:44:46 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* Make-lang.in (cplib2.ready): Add $(LANGUAGES) dependency.\n+\n+Thu Jun 19 16:49:28 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* typeck.c (c_expand_return): Make sure we clean up temporaries at\n+\tthe end of return x;\n+\n+Thu Jun 19 12:28:43 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lex.c (check_for_missing_semicolon): Also check for CV_QUALIFIER.\n+\n+Tue Jun 17 18:35:57 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_builtin_throw): Add support\n+\t-fno-sjlj-exceptions -fPIC exception handling on the SPARC.\n+\n+Mon Jun 16 01:24:37 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* repo.c (extract_string): Null-terminate.\n+\n+\t* cp-tree.h (TI_SPEC_INFO): New macro.\n+\t(CLASSTYPE_TI_SPEC_INFO): New macro.\n+\t* pt.c (push_template_decl): Correctly determine # of template parms\n+\tfor partial specs.\n+\n+\t* call.c (compare_ics): Really fix 'this' conversions.\n+\n+\t* pt.c (do_decl_instantiation): Don't crash on explicit inst of\n+\tnon-template fn.\n+\n+\t* pt.c (push_template_decl): Complain about mismatch in # of\n+\ttemplate parms between a class template and a member template.\n+\n+Sun Jun 15 02:38:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (synthesize_method): You can't call\n+\tfunction_cannot_inline_p after finish_function.\n+\t* decl.c (finish_function): Turn on flag_inline_functions and turn\n+\toff DECL_INLINE before handing a synthesized method to the\n+\tbackend.\n+\n+Thu Jun 12 17:35:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (synthesize_method): Remove July 30 change to never set\n+\tDECL_INLINE if at_eof.\n+\n+Thu Jun 12 15:25:08 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* xref.c (GNU_xref_member): Ensure that the node has a\n+\tdecl_lang_specific part before checking DECL_FRIEND_P.\n+\n+Thu Jun 12 12:36:05 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): Diagnose non-class types used\n+\tas bases.\n+\n+Wed Jun 11 17:33:40 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_conditional_expr): Use convert_for_initialization\n+\tinstead of convert_and_check.\n+\n+Wed Jun 11 12:31:33 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* parse.y (typespec): Don't pedwarn for typeof.\n+\n+Tue Jun 10 00:22:09 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* repo.c (finish_repo): Only check changes if we would write a\n+\trepo file.\n+\n+\t* call.c (compare_ics): Fix handling of 'this' conversions.\n+\n+\t* pt.c (do_decl_instantiation): Support static data too.  Rename\n+\tfrom do_function_instantiation.\n+\t* cp-tree.h: Adjust.\n+\t* parse.y: Adjust.\n+\n+\t* repo.c (extract_string): New fn.\n+\t(get_base_filename): Use it.\n+\t(init_repo): Compare old args with current args.\n+\n+Mon Jun  9 14:25:30 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* Makefile.in, Make-lang.in: Protect C-ls with a comment\n+\tcharacter, idea from Paul Eggert <eggert@twinsun.com>.\n+\n+Mon Jun  9 01:52:03 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (c_expand_return): Be more persistent in looking for\n+\treturned temps.\n+\n+\t* cvt.c (build_up_reference): Use NOP_EXPR for switching from\n+\tpointer to reference.\n+\n+\t* class.c (build_vbase_path): Don't do anything if PATH has no steps.\n+\n+Sun Jun  8 03:07:05 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_member_call, build_offset_ref):\n+\tUse do_scoped_id instead of do_identifier.\n+\n+\t* cvt.c (convert): Remove bogosity.\n+\n+Sat Jun  7 20:50:17 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cvt.c (build_up_reference): Do checks of ARGTYPE and\n+\tTARGET_TYPE before trying to use get_binfo.\n+\n+Fri Jun  6 17:36:39 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cvt.c (build_up_reference): Call get_binfo to get access control.\n+\n+\t* decl2.c (import_export_decl): If we don't support weaks, leave\n+\tstatics undefined.\n+\n+Fri Jun  6 15:55:49 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_builtin_throw): Add support for machines that\n+\tcannot access globals after throw's epilogue when\n+\t-fno-sjlj-exceptions is used.\n+\n+Thu Jun  5 16:28:43 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y: 'std::' becomes '::'.\n+\t* lex.c (real_yylex): Remove 'namespace' warning.\n+\t* init.c (build_member_call): Ignore 'std::'.\n+\t(build_offset_ref): Likewise.\n+\t* decl2.c (do_using_directive): Ignore 'using namespace std;'.\n+\t(do_toplevel_using_decl): Ignore 'using std::whatever'.\n+\t* decl.c (push_namespace): Just sorry.\n+\t(pop_namespace): Nop.\n+\t(init_decl_processing): Declare std namespace.\n+\n+Tue Jun  3 18:08:23 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (push_class_decls): A name which ambiguously refers to\n+\tseveral instantiations of the same template just refers to the\n+\ttemplate.\n+\n+Tue Jun  3 12:30:40 1997  Benjamin Kosnik  <bkoz@cirdan.cygnus.com>\n+\n+\t* decl.c (build_enumerator): Fix problem with unsigned long\n+\tenumerated values being smashed to ints, causing overflow\n+\twhen computing next enumerated value (for enum values around\n+\tMAX_VAL).\n+\n+Mon Jun  2 17:40:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_component_ref): Only call mark_used on a decl.\n+\n+Thu May 29 15:54:17 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* typeck.c (build_c_cast): Make the check for a ptr to function\n+\tmore specific before possible default_conversion call.\n+\n+Thu May 29 13:02:06 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_exception_blocks): Simplify and fix and make\n+\tsure we don't end a region in a sequence, as expand_end_bindings\n+\tdoesn't like it.\n+\n+Wed May 28 17:08:03 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (init_exception_processing): Mark terminate as not\n+\treturning so that the optimizer can optimize better.\n+\n+Tue May 27 19:49:19 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cvt.c (convert): Don't do any extra work, if we can avoid it\n+\teasily.\n+\n+Tue May 27 18:21:47 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* *.[chy]: Change cp_convert to ocp_convert, change convert to\n+\tcp_convert.  convert is now reserved for the backend, and doesn't\n+\thave the semantics a frontend person should ever want.\n+\n+Fri May 23 10:58:31 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lang-specs.h: Define __EXCEPTIONS if exceptions are enabled.\n+\tLose -traditional support.\n+\n+Thu May 22 15:41:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* rtti.c (get_tinfo_var): Use TYPE_PRECISION (sizetype).\n+\n+\t* parse.y (self_reference): Do it for templates, too.\n+\t* class.c (pushclass): Don't overload_template_name; the alias\n+\tgenerated by build_self_reference serves the same purpose.\n+\n+\t* tree.c (list_hash): Make static, take more args.\n+\t(list_hash_lookup): Likewise.\n+\t(list_hash_add): Make static.\n+\t(list_hash_canon): Lose.\n+\t(hash_tree_cons): Only build a new node if one isn't already in the\n+\thashtable.\n+\t(hash_tree_chain): Use hash_tree_cons.\n+\t* cp-tree.h: Adjust.\n+\t* decl.c (grokfndecl): Just check IDENTIFIER_GLOBAL_VALUE instead\n+\tof calling lookup_name.\n+\n+Wed May 21 18:24:19 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): TYPE_VALUES for an enum\n+\tdoesn't refer to the CONST_DECLs.\n+\n+Tue May 20 21:09:32 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* rtti.c (get_tinfo_var): Either INT_TYPE_SIZE or 32, whichever\n+\tis bigger.\n+\t(expand_class_desc): Convert the last argument to a sizetype.\n+\n+Tue May 20 13:55:57 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* gxx.gperf (__complex, __complex__, __imag, __imag__, __real,\n+\t__real__): Add reswords.\n+\t* hash.h: Regenerate.\n+\t* lex.h (rid): Add RID_COMPLEX.\n+\t(RID_LAST_MODIFIER): Set to RID_COMPLEX.\n+\t* lex.c (init_lex): Add building of RID_COMPLEX.\n+\t(real_yylex): General cleanup in line with what c-lex.c also has,\n+\tsans the cruft for traditional; add handling of SPEC_IMAG, complex\n+\ttypes, and imaginary numeric constants.\n+\t* parse.y (REALPART, IMAGPART): Add tokens.\n+\t(unary_expr): Add REALPART and IMAGPART rules.\n+\t* cp-tree.h (complex_{integer,float,double,long}_type_node): Declare.\n+\t* decl.c (complex_{integer,float,double,long}_type_node): Define\n+\ttypes.\n+\t(init_decl_processing): Set up the types.\n+\t(grokdeclarator): Add handling of RID_COMPLEX.  Set and use\n+\tDEFAULTED_INT instead of EXPLICIT_INT when we default to int type.\n+\t* call.c (build_new_op): Add REALPART_EXPR and IMAGPART_EXPR cases.\n+\t* cvt.c (cp_convert): Handle COMPLEX_TYPE.\n+\t* error.c (dump_type_prefix, dump_type, dump_type_suffix): Add\n+\tCOMPLEX_TYPE case.\n+\t* method.c (build_overload_name): Add handling of the different\n+\tCOMPLEX_TYPEs, prefixing them with `J'.\n+\t* pt.c (process_template_parm): Don't let them use a COMPLEX_TYPE\n+\tas a template parm.\n+\t(uses_template_parms, tsubst, unify): Add COMPLEX_TYPE case.\n+\t* tree.c (lvalue_p): Add REALPART_EXPR and IMAGPART_EXPR cases.\n+\t(mapcar): Handle COMPLEX_CST.\n+\t* typeck.c (build_binary_op_nodefault): Handle COMPLEX_TYPE.\n+\t(common_type): Add code for complex types.\n+\t(build_unary_op): Add REALPART_EXPR and IMAGPART_EXPR cases.\n+\t(convert_for_assignment): Likewise.\n+\t(mark_addressable): Add REALPART_EXPR and IMAGPART_EXPR cases.\n+\n+Mon May 19 12:26:27 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst): Don't pass the MINUS_EXPR for an array domain to\n+\ttsubst_expr, as it might try to do overload resolution.\n+\n+Sat May 17 10:48:31 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): Oops.\n+\n+Fri May 16 14:23:57 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.def: Add TAG_DEFN.\n+\t* pt.c (tsubst_enum): New fn.\n+\t(instantiate_class_template): Use it.\n+\t(tsubst_expr): Support TAG_DEFN.\n+\t(tsubst): Support local enums.\n+\t(tsubst_copy): Likewise.\n+\t* decl.c (finish_enum): Likewise.\n+\t(start_enum): If this is a local enum, switch to permanent_obstack.\n+\n+Wed May 14 19:08:28 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* decl.c (store_parm_decls): Set last_parm_cleanup_insn here.\n+\t(finish_function): Put the base init code for constructors just\n+\tafter the parm cleanup insns.\n+\t(struct cp_function): Add last_parm_cleanup_insn.\n+\t(push_cp_function_context): Likewise.\n+\t(pop_cp_function_context): Likewise.\n+\n+Tue May 13 15:51:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst_copy): Handle BIT_NOT_EXPR.\n+\n+Wed May  7 11:17:59 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* method.c (emit_thunk) [ASM_OUTPUT_MI_THUNK]: Build up the RTL\n+\tfor THUNK_FNDECL before we switch to temporary allocation.\n+\n+Mon May  5 14:46:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_new_op): Handle null arg2 for ?:.\n+\n+Thu May  1 18:26:37 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_exception_blocks): Ensure that we flow through\n+\tthe end of the exception region for the exception specification.\n+\tMove exception region for the exception specification in, so that\n+\tit doesn't protect the parm cleanup.  Remove some obsolete code.\n+\t* decl.c (store_parm_decls): Likewise.\n+\t(finish_function): Likewise.\n+\n+Tue Apr 29 15:38:54 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_new): Fix nothrow handling.\n+\n+Tue Apr 29 14:29:50 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* init.c (emit_base_init): Don't warn about the initialization\n+\tlist for an artificial member.\n+\n+Fri Apr 25 17:47:59 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* expr.c (do_case): Handle !START case for the error msg.\n+\n+Fri Apr 25 11:55:23 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c, lang-options.h: New option -Weffc++.\n+\t* class.c, decl.c, init.c, typeck.c: Move Effective C++ warnings\n+\tto -Weffc++.\n+\n+\t* decl2.c (finish_prevtable_vardecl): Change NO_LINKAGE_HEURISTICS\n+\tto MULTIPLE_SYMBOL_SPACES.\n+\n+Wed Apr 23 18:06:50 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (emit_thunk, generic case): Set current_function_is_thunk.\n+\n+\t* method.c (emit_thunk, macro case): Set up DECL_RESULT.\n+\n+\t* typeck.c (c_expand_return): Don't complain about returning void\n+\tto void in an artificial function.\n+\t* method.c (make_thunk): Change settings of READONLY/VOLATILE,\n+\tdon't set DECL_RESULT, set DECL_ARTIFICIAL.\n+\t(emit_thunk, generic code): Also set up DECL_LANG_SPECIFIC.\n+\n+Wed Apr 23 14:43:06 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* init.c (init_decl_processing): Add support for setjmp/longjmp based\n+\texception handling.\n+\t* except.c (init_exception_processing): Likewise.\n+\t(expand_end_catch_block): Likewise.\n+\t(expand_exception_blocks): Likewise.\n+\t(expand_throw): Likewise.\n+\t* exception.cc (__default_terminate): Likewise.\n+\n+\t* init.c (perform_member_init): Use new method of expr level\n+\tcleanups, instead of cleanups_this_call and friends.\n+\t(emit_base_init): Likewise.\n+\t(expand_aggr_vbase_init_1): Likewise.\n+\t(expand_vec_init): Likewise.\n+\t* decl.c (cp_finish_decl): Likewise.\n+\t(expand_static_init): Likewise.\n+\t(store_parm_decls): Likewise.\n+\t(cplus_expand_expr_stmt): Likewise.\n+\t* decl2.c (finish_file): Likewise.\n+\n+\t* Make-lang.in (exception.o): Ok to compile with -O now.\n+\n+\t* decl.c (maybe_build_cleanup_1): We no longer have to unsave, as\n+\twe know it will be done later by the backend.\n+\n+\t* decl2.c (lang_f_options): Remove support for short temps.\n+\t* lang-options.h: Likewise.\n+\n+Wed Apr 23 04:12:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (varargs_function_p): New fn.\n+\t* method.c (emit_thunk): Replace broken generic code with code to\n+\tgenerate a heavyweight thunk function.\n+\n+Tue Apr 22 02:45:18 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (process_template_parm): pedwarn about floating-point parms.\n+\n+\t* decl.c (grokdeclarator): inline no longer implies static.\n+\n+\t* spew.c (yylex): Always return the TYPE_DECL if we got a scope.\n+\n+Mon Apr 21 15:42:27 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (check_for_override): The signature of an overriding\n+\tfunction is not changed.\n+\n+\t* call.c (build_over_call): Move setting of conv into the loop.\n+\tNote: this change, along with the related changes of the 18th thru\n+\tthe 20th of April, fix an infinite loop problem in conversions.\n+\n+Sun Apr 20 16:24:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_user_type_conversion_1): Really ignore rvalue\n+\tconversions when looking for a REFERENCE_TYPE.\n+\n+\t* cvt.c (build_up_reference): Eviscerate, use build_unary_op.\n+\t* cp-tree.h (TREE_REFERENCE_EXPR): #if 0.\n+\t* typeck.c (decay_conversion): Don't set TREE_REFERENCE_EXPR.\n+\t(build_unary_op): Likewise.\n+\t* call.c (build_over_call): See through a CONVERT_EXPR around the\n+\tADDR_EXPR for on a temporary.\n+\t* typeck.c (c_expand_return): See through a CONVERT_EXPR around\n+\tthe ADDR_EXPR for a local variable.\n+\n+Fri Apr 18 12:11:33 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_user_type_conversion_1): If we're trying to\n+\tconvert to a REFERENCE_TYPE, only consider lvalue conversions.\n+\t(build_new_function_call): Print candidates.\n+\t(implicit_conversion): Try a temp binding if the lvalue conv is BAD.\n+\t(reference_binding): Binding a temporary of a reference-related type\n+\tis BAD.\n+\n+Thu Apr 17 14:37:22 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* inc/typeinfo (type_info::before): Add cv-qualifier-seq.\n+\t* tinfo2.cc (type_info::before): Likewise.\n+\n+Mon Apr 14 12:38:17 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (implicit_conversion): Oops.\n+\n+Fri Apr 11 02:18:30 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (implicit_conversion): Try to find a reference conversion\n+\tbefore binding a const reference to a temporary.\n+\n+Wed Apr  2 12:51:36 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* exception.cc (__default_unexpected): Call terminate by default,\n+\tso that if the user overrides terminate, the correct function will\n+\tbe called.\n+\n+Wed Mar 19 14:14:45 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* parse.y (left_curly): Avoid trying to use any fields of\n+\terror_mark_node, as there aren't any.\n+\n+Thu Mar 13 16:33:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (do_identifier): Avoid breaking on overloaded methods\n+\tas default arguments.\n+\n+Wed Mar 12 13:55:10 1997  Hans-Peter Nilsson  <Hans-Peter.Nilsson@axis.se>\n+\n+\t* call.c (add_template_candidate): Initialize the variable \"dummy\".\n+\n+Mon Mar 10 15:13:14 1997  Brendan Kehoe  <brendan@canuck.cygnus.com>\n+\n+\t* decl.c (start_decl): Make sure TYPE isn't an error_mark_node\n+\tbefore we try to use TYPE_SIZE and TREE_CONSTANT on it.\n+\n+Fri Mar  7 13:19:36 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-tree.h (comp_ptr_ttypes, more_specialized): Add decl.\n+\t(debug_binfo): Delete decl, not needed.\n+\n+\t* tree.c (fnaddr_from_vtable_entry, function_arg_chain,\n+\tpromotes_to_aggr_type): Delete fns.\n+\t* cp-tree.h (FNADDR_FROM_VTABLE_ENTRY,\n+\tSET_FNADDR_FROM_VTABLE_ENTRY, FUNCTION_ARG_CHAIN,\n+\tPROMOTES_TO_AGGR_TYPE): Delete alternates to #if 1.\n+\n+\t* decl.c (pending_invalid_xref{,_file,_line}): Delete unused vars.\n+\n+\t* friend.c (is_friend_type): Delete fn.\n+\t* cp-tree.h (is_friend_type): Delete decl.\n+\n+\t* decl.c (original_result_rtx, double_ftype_double,\n+\tdouble_ftype_double_double, int_ftype_int, long_ftype_long,\n+\tfloat_ftype_float, ldouble_ftype_ldouble, last_dtor_insn): Make static.\n+\t* typeck.c (original_result_rtx, warn_synth): Delete extern decls.\n+\n+\t* decl.c (push_overloaded_decl{,_top_level}): Make static, adding\n+\tfwd decls.\n+\t* cp-tree.h (push_overloaded_decl{,_top_level}): Delete decls.\n+\n+\t* decl.c (pushdecl_nonclass_level): #if 0, unused.\n+\t* cp-tree.h (pushdecl_nonclass_level): #if 0 decl.\n+\n+\t* lex.c (reinit_lang_specific): #if 0, unused.\n+\t* cp-tree.h (reinit_lang_specific): #if 0 decl.\n+\n+\t* decl.c (revert_static_member_fn): Make static, adding fwd decl.\n+\t* cp-tree.h (revert_static_member_fn): Delete decl.\n+\n+\t* class.c (root_lang_context_p): Delete fn.\n+\t* cp-tree.h (root_lang_context_p): Delete decl.\n+\n+\t* decl.c (set_current_level_tags_transparency): #if 0, unused.\n+\t* cp-tree.h (set_current_level_tags_transparency): #if 0 decl.\n+\n+\t* lex.c (set_vardecl_interface_info): Make static.\n+\t* cp-tree.h (set_vardecl_interface_info): Delete decl.\n+\n+\t* call.c (find_scoped_type): Make static.\n+\t* cp-tree.h (find_scoped_type): Delete decl.\n+\n+\t* search.c (convert_pointer_to_vbase): Make static.\n+\t* cp-tree.h (convert_pointer_to_vbase): Delete decl.\n+\n+\t* decl.c (const_ptr_type_node): Likewise.\n+\t* cp-tree.h (const_ptr_type_node): Delete decl.\n+\n+\t* typeck.c (common_base_type): Make static.\n+\t* cp-tree.h (common_base_types): Delete erroneous decl.\n+\n+\t* pt.c (classtype_mangled_name): Make static.\n+\t* cp-tree.h (classtype_mangled_name): Delete decl.\n+\n+\t* lex.c (check_newline): Make static.\n+\t* cp-tree.h (check_newline): Delete decl.\n+\n+\t* typeck.c (build_x_array_ref): Delete fn, same idea as\n+\tgrok_array_decl.\n+\t* cp-tree.h (build_x_array_ref): Delete decl.\n+\n+\t* lex.c (copy_decl_lang_specific): Delete fn, same idea as\n+\tcopy_lang_decl.\n+\t* cp-tree.h (copy_decl_lang_specific): #if 0 decl.\n+\n+\t* class.c (build_vtable_entry): Make static.\n+\t* cp-tree.h (build_vtable_entry): Delete decl.\n+\n+\t* class.c (build_vbase_pointer): Make static.\n+\t* cp-tree.h (build_vbase_pointer): Delete decl.\n+\n+\t* sig.c (build_sptr_ref): Add forward decl and make static.\n+\t* cp-tree.h (build_sptr_ref): Delete decl.\n+\n+\t* call.c (build_new_method_call): Add forward decl and make static.\n+\t* cp-tree.h (build_new_method_call): Delete decl.\n+\n+\t* call.c (build_object_call): Make static.\n+\t* class.c (check_for_override, complete_type_p, mark_overriders):\n+\tLikewise.\n+\t* decl.c (cp_function_chain): Likewise.\n+\t* lex.c (set_typedecl_interface_info, reinit_parse_for_block):\n+\tLikewise.\n+\t* pt.c (comp_template_args, get_class_bindings, push_tinst_level):\n+\tLikewise.\n+\t* tree.c (build_cplus_array_type_1): Likewise.\n+\t* typeck.c (comp_ptr_ttypes_{const,real,reinterpret}): Likewise.\n+\t(comp_target_parms): Likewise.\n+\n+\t* init.c (build_builtin_call): Make static.\n+\t* cp-tree.h (build_builtin_call): Delete decl.\n+\n+\t* typeck.c (binary_op_error): Delete decl.\n+\t* cp-tree.h (binary_op_error): Likewise.\n+\n+Thu Mar  6 16:13:52 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* call.c (build_method_call): Compare against error_mark_node\n+\tdirectly, rather than the ERROR_MARK tree code.\n+\t* cvt.c (cp_convert): Likewise.\n+\t* decl.c (print_binding_level): Likewise.\n+\t(duplicate_decls): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* init.c (expand_aggr_init_1): Likewise.\n+\t(decl_constant_value): Likewise.\n+\t* method.c (build_opfncall): Likewise.\n+\t(hack_identifier): Likewise.\n+\t* typeck.c (build_modify_expr): Likewise.\n+\n+\t* typeck.c (build_c_cast): Don't decl TYPE as register tree.\n+\n+Sun Mar  2 02:54:36 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* pt.c (unify): Strip NOP_EXPR wrappers before unifying integer values.\n+\n+\t* pt.c (coerce_template_parms): Add new error message.\n+\n+\t* method.c (build_overload_value): Implement name mangling for\n+\tfloating-point template arguments.\n+\n+\t* method.c (build_overload_int, icat, dicat): Fix mangling of template\n+\targuments whose absolute value doesn't fit in a signed word.\n+\n+Mon Mar  3 12:14:54 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* friend.c: New file; put all of the friend stuff in here.\n+\t* init.c: Instead of here.\n+\t* Makefile.in (CXX_OBJS): Add friend.o.\n+\t(friend.o): Add dependencies.\n+\t* Make-lang.in (CXX_SRCS): Add $(srcdir)/cp/friend.c.\n+\n+Sun Mar  2 11:04:43 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_scoped_method_call): Complain if the scope isn't a\n+\tbase.\n+\n+Wed Feb 26 11:31:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (left_curly): Don't crash on erroneous type.\n+\n+\t* init.c (build_delete): Fix type of ref.\n+\n+Tue Feb 25 12:41:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (get_vbase_1): Renamed from get_vbase.\n+\t(get_vbase): Wrapper, now non-static.\n+\t(convert_pointer_to_vbase): Now static.\n+\n+\t* call.c (build_scoped_method_call): Accept a binfo for BASETYPE.\n+\t* init.c (build_delete): Pass one.\n+\t(build_partial_cleanup_for): Use build_scoped_method_call.\n+\t* decl.c (finish_function): Pass a binfo.\n+\n+Mon Feb 24 15:00:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_over_call): Only synthesize non-trivial copy ctors.\n+\n+\t* typeck.c (build_c_cast): Lose other reference to flag.\n+\n+\t* call.c (build_field_call): Don't look for [cd]tor_identifier.\n+\t* decl2.c (delete_sanity): Remove meaningless use of\n+\tLOOKUP_HAS_IN_CHARGE.\n+\t* decl.c (finish_function): Use build_scoped_method_call instead\n+\tof build_delete for running vbase dtors.\n+\t* init.c (build_delete): Call overload resolution code instead of\n+\tduplicating it badly.\n+\n+Thu Feb 20 15:12:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_over_call): Call mark_used before trying to elide\n+\tthe call.\n+\n+\t* decl.c (implicitly_declare): Don't set DECL_ARTIFICIAL.\n+\n+Wed Feb 19 11:18:53 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* typeck.c (build_modify_expr): Always pedwarn for a cast to\n+\tnon-reference used as an lvalue.\n+\n+Wed Feb 19 10:35:37 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cvt.c (cp_convert_to_pointer): Convert from 0 to a pmf properly.\n+\n+Tue Feb 18 15:40:57 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (handler): Fix template typo.\n+\n+Sun Feb 16 02:12:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* error.c (lang_decl_name): New fn.\n+\t* tree.c (lang_printable_name): Use it.\n+\n+Fri Feb 14 16:57:05 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* g++spec.c: Include config.h so that we can catch bzero #defines\n+\tfrom the config file.\n+\n+Tue Feb 11 13:50:48 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* new1.cc: Include a declaration for malloc, to avoid warning, and\n+\tavoid lossing on systems that require one (ones that define malloc\n+\tin xm.h).\n+\n+Mon Feb 10 22:51:13 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* decl2.c (max_tinst_depth): New variable.\n+\t(lang_decode_option): Parse \"-ftemplate-depth-NN\" command line\n+\toption.\n+\t* pt.c (max_tinst_depth): Variable moved.\n+\t* lang-options.h: Declare \"-ftemplate-depth-NN\" command line option\n+\tas legal.\n+\n+Fri Feb  7 15:43:34 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (xref_basetypes): Allow a base class that depends on\n+\ttemplate parms to be incomplete.\n+\n+\t* decl2.c (build_expr_from_tree): Support typeid(type).\n+\t* rtti.c (get_typeid): Support templates.\n+\t(expand_si_desc, expand_class_desc): Fix string length.\n+\t(expand_ptr_desc, expand_attr_desc, expand_generic_desc): Likewise.\n+\n+Tue Feb  4 11:28:24 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (unify, case TEMPLATE_CONST_PARM): Use cp_tree_equal.\n+\n+\t* pt.c (tsubst): Put it back for -fno-ansi-overloading.\n+\n+Mon Feb  3 18:41:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst, case FUNCTION_DECL): Lose obsolete code that\n+\tsmashes together template and non-template decls of the same\n+\tsignature.\n+\n+Thu Jan 30 19:18:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst): Don't recurse for the type of a TYPENAME_TYPE.\n+\n+Wed Jan 29 11:40:35 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Next route, pedwarn about different\n+\texceptions if -pedantic *or* olddecl !DECL_IN_SYSTEM_HEADER.\n+\n+Tue Jan 28 20:43:29 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* cp-tree.h (HAS_DEFAULT_IMPLEMENTATION): Delete macro.\n+\t(struct lang_type): Delete has_default_implementation member.\n+\tIncrease dummy to 21.\n+\t* decl.c (start_method): Delete usage.\n+\n+\t* cp-tree.h (build_call, null_ptr_cst_p, in_function_p,\n+\tstore_after_parms, start_decl_1, auto_function): Add decls.\n+\t(get_arglist_len_in_bytes, declare_implicit_exception,\n+\thave_exceptions_p, make_type_decl, typedecl_for_tag,\n+\tstore_in_parms, pop_implicit_try_blocks, push_exception_cleanup,\n+\tbuild_component_type_expr, cplus_exception_name,\n+\t{make,clear}_anon_parm_name, dont_see_typename): Removed decls.\n+\t* call.c (build_this): Make static.\n+\t(is_complete): Likewise.\n+\t(implicit_conversion): Likewise.\n+\t(reference_binding): Likewise.\n+\t(standard_conversion): Likewise.\n+\t(strip_top_quals): Likewise.\n+\t(non_reference): Likewise.\n+\t(build_conv): Likewise.\n+\t(user_harshness): Likewise.\n+\t(rank_for_ideal): Likewise.\n+\t* decl.c (start_decl_1): Delete forward decl.\n+\t(push_decl_level): Make static.\n+\t(resume_binding_level): Make static.\n+\t(namespace_bindings_p): Make static.\n+\t(declare_namespace_level): Make static.\n+\t(lookup_name_real): Make static.\n+\t(duplicate_decls): Make static.  Take register off NEWDECL and\n+\tOLDDECL parm decls.\n+\t* decl2.c (get_sentry): Make static.\n+\t(temp_name_p): Delete fn.\n+\t* except.c (auto_function): Delete decl.\n+\t* lex.c (handle_{cp,sysv}_pragma): Make static.\n+\t(handle_sysv_pragma) [HANDLE_SYSV_PRAGMA]: Add forward decl.\n+\t* method.c (do_build_{copy_constructor,assign_ref}): Make static.\n+\t* pt.c (tsubst_expr_values): Make static.\n+\t* rtti.c (combine_strings): Delete decl.\n+\n+Tue Jan 28 16:40:40 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (push_template_decl): Handle getting a typedef.\n+\n+\t* call.c (build_new_function_call): Complain about void arg.\n+\n+Tue Jan 28 15:25:09 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Give pedwarn of different exceptions\n+\tif -pedantic, instead of olddecl !DECL_IN_SYSTEM_HEADER.\n+\n+Mon Jan 27 19:21:29 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_throw): Don't expand the cleanup tree here,\n+\tsince we are not going to write the rtl out.  Fixes problem with\n+\t-g -O on SPARC.\n+\n+Mon Jan 27 16:24:35 1997  Sean McNeil  <sean@mcneil.com>\n+\n+\t* Make-lang.in: Add $(exeext) as necessary.\n+\n+Mon Jan 27 13:20:39 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* parse.y (handler_seq): Must have at least one catch clause.\n+\n+Sat Jan 25 12:00:05 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (add_builtin_candidate): Restore ?: hack.\n+\n+\t* decl.c (grok_op_properties): More warnings.\n+\n+Sat Jan 25 08:50:03 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): On second thought, do it as a pedwarn\n+\tstill but only if !DECL_IN_SYSTEM_HEADER (olddecl).\n+\n+\t* decl.c (duplicate_decls): Scale back to a warning, and only do\n+\t'em if -pedantic.\n+\n+Fri Jan 24 17:52:54 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* decl.c (duplicate_decls): pedwarn mismatched exception\n+\tspecifications.\n+\n+Thu Jan 23 18:18:54 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* call.c (build_new_method_call): Don't display the invisible\n+\targument for controlling virtual bases.\n+\n+Thu Jan 23 16:48:10 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* new: Add nothrow new and delete, bad_alloc and throw specifications\n+\tfor delete.\n+\t* decl.c (init_decl_processing): Add throw specification for delete.\n+\t* new.cc (nothrow): Define.\n+\t* lex.c (real_yylex): Removing warning that throw and friends are\n+\tkeywords.\n+\t* new1.cc (operator new (size_t sz, const nothrow_t&)): Define.\n+\t* new2.cc (operator new[] (size_t sz, const nothrow_t&): Define.\n+\t* Make-lang.in: Add new{1,2}.{cc,o}.\n+\n+Thu Jan 23 16:39:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (cons_up_default_function): Fix return type of synth op=.\n+\n+\t* init.c (emit_base_init): Add warnings for uninitialized members\n+\tand bases.\n+\n+\t* decl.c (xref_basetypes): Add warning for non-polymorphic type\n+\twith destructor used as base type.\n+\n+\t* decl.c (grok_op_properties): Add warning for op= returning void.\n+\t* typeck.c (c_expand_return): Add warning for op= returning anything\n+\tother than *this.\n+\n+\t* class.c (finish_struct_1): Add warning for class with pointers\n+\tbut not copy ctor or copy op=.\n+\n+\t* cp-tree.h (TI_PENDING_TEMPLATE_FLAG): New macro.\n+\t* pt.c (add_pending_template): Use it instead of LANG_FLAG_0.\n+\t(instantiate_template): If -fexternal-templates, add this\n+\tinstantiation to pending_templates.\n+\n+\t* decl2.c (copy_assignment_arg_p): Disable old hack to support\n+\tBooch components.\n+\n+Tue Jan 21 18:32:04 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* cvt.c (cp_convert): pedwarn enum to pointer conversions.\n+\n+Mon Jan 20 17:59:51 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (standard_conversion): Handle getting references.  Tack\n+\ton RVALUE_CONV here.  Do it for non-class types, too.\n+\t(reference_binding): Pass references to standard_conversion.\n+\t(implicit_conversion): Likewise.\n+\t(add_builtin_candidate): Disable one ?: kludge.\n+\t(convert_like): Handle RVALUE_CONVs for non-class types.\n+\t(joust): Disable the other ?: kludge.\n+\n+Mon Jan 20 14:53:13 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* decl.c (init_decl_processing): Add code to build up common\n+\tfunction types beforehand, to avoid creation then removal of\n+\tthings already in the hash table.\n+\n+Mon Jan 20 14:43:49 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (finish_function): Also zero out DECL_INCOMING_RTL for\n+\tthe arguments.\n+\n+\t* error.c (dump_expr, TEMPLATE_CONST_PARM): Don't require\n+\tcurrent_template_parms.\n+\n+Fri Jan 17 10:25:42 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (lookup_field): Don't return a function, check want_type.\n+\n+Thu Jan 16 18:14:35 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* init.c (build_new): Make sure PLACEMENT has a type.\n+\n+Thu Jan 16 17:40:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_new): Support new (nothrow).\n+\n+Wed Jan 15 12:38:14 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_decl): Also do push_to_top_level before setting\n+\tup DECL_INITIAL.\n+\n+\t* cp-tree.h (PARM_DEFAULT_FROM_TEMPLATE): New macro.\n+\t* pt.c (tsubst): Defer instantiation of default args.\n+\t* call.c (build_over_call): Until here.\n+\n+Wed Jan 15 10:08:10 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* search.c (lookup_field): Make sure we have an\n+\tIDENTIFIER_CLASS_VALUE before we try to return it.\n+\n+Thu Jan  9 07:19:01 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* call.c (build_method_call): Delete unused var PARM.\n+\t(build_overload_call_real): Likewise.\n+\t(build_object_call): Delete unused var P.\n+\t(build_new_op): Likewise.\n+\t* decl.c (builtin_type_tdescs_{arr, len, max}): #if 0 out static\n+\tvar definitions, which are never used.\n+\t(shadow_tag): Delete unused var FN.\n+\t* expr.c (cplus_expand_expr): Delete unused var ORIGINAL_TARGET.\n+\t* init.c (build_new): Delete unused var ALLOC_TEMP.\n+\t* method.c (hack_identifier): Delete unused var CONTEXT.\n+\t(do_build_copy_constructor): Delete unused var NAME.\n+\t(synthesize_method): Delete unused var BASE.\n+\t* pt.c (lookup_template_class): Delete unused var CODE_TYPE_NODE.\n+\t* rtti.c (build_headof): Delete unused var VPTR.\n+\t(get_typeid): Delete unused var T.\n+\t* typeck.c (build_conditional_expr): Delete unused vars ORIG_OP1\n+\tand ORIG_OP2.\n+\t(build_ptrmemfunc): Delete unused vars U and NINDEX.\n+\t* typeck2.c (build_functional_cast): Delete unused var BINFO.\n+\n+Wed Jan  8 13:09:54 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (lookup_field): Use IDENTIFIER_CLASS_VALUE to look up\n+\tthings in a type being defined.\n+\t* decl.c (finish_enum): Reverse the values so that they are in\n+\tthe correct order.\n+\n+\t* pt.c (instantiate_class_template): Don't initialize\n+\tBINFO_BASETYPES until the vector is filled out.\n+\t(unify): Don't abort on conflicting bindings, just fail.\n+\t(instantiate_decl): Do push_tinst_level before any tsubsting.\n+\n+\t* method.c (build_overload_value): Handle getting a\n+\tTEMPLATE_CONST_PARM for a pointer.\n+\n+Tue Jan  7 14:00:58 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (expand_member_init): Don't give 'not a base' error for\n+\ttemplates.\n+\n+\t* pt.c (instantiate_decl): Call import_export_decl later.\n+\n+\t* pt.c (instantiate_class_template): Return a value.\n+\n+\t* parse.y (extension): New rule for __extension__.\n+\t(extdef, unary_expr, decl, component_decl): Use it.\n+\n+Tue Jan  7 09:20:28 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* class.c (base_binfo): Remove unused base_has_virtual member.\n+\t(finish_base_struct): Likewise.\n+\t(finish_struct_1): Likewise.\n+"}, {"sha": "1b4e301d0253c47a92fb4bf3267c7648f850e0f9", "filename": "gcc/cp/ChangeLog-1998", "status": "added", "additions": 6887, "deletions": 0, "changes": 6887, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1998", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1998", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1998?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "b89cd350ae92bbdd6bdcb62888df109552ee7113", "filename": "gcc/cp/ChangeLog-1999", "status": "added", "additions": 6787, "deletions": 0, "changes": 6787, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1999", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-1999", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-1999?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "4855669fd625db24815de5ee993cceb31e7e10e0", "filename": "gcc/cp/ChangeLog-2000", "status": "added", "additions": 7274, "deletions": 0, "changes": 7274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-2000?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "9643357b261ed8ad8e3ab3eeb815c1d35fbf669c", "filename": "gcc/cp/ChangeLog-2001", "status": "added", "additions": 3895, "deletions": 0, "changes": 3895, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2001", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2001", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-2001?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "573715384a017b90dbb4c458518d2f002aa547f8", "filename": "gcc/cp/ChangeLog-2002", "status": "added", "additions": 4574, "deletions": 0, "changes": 4574, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2002", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2002", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-2002?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "f0500f4b147557ae0fcadf6c35f2538b7b4dcd15", "filename": "gcc/cp/ChangeLog-2003", "status": "added", "additions": 6904, "deletions": 0, "changes": 6904, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2003", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2003", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-2003?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "7dd4e26d4cbc2cdedda2854be04b6660e4beb0b9", "filename": "gcc/cp/ChangeLog-2004", "status": "added", "additions": 6877, "deletions": 0, "changes": 6877, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2004", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9/gcc%2Fcp%2FChangeLog-2004", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog-2004?ref=4e876a0fb9db7f2bfc6ba477c468b4cb8ec2f6a9"}, {"sha": "c4d6880a00d97bfe4decc0f352d017e80db45f18", "filename": "gcc/cp/ChangeLog.2", "status": "removed", "additions": 0, "deletions": 20677, "changes": 20677, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Fcp%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Fcp%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog.2?ref=e743d142aebcc694e105de1dcc588ee3e2a003f6"}, {"sha": "57e96f315f5348abbc425053770dafc49c8af4ee", "filename": "gcc/cp/ChangeLog.3", "status": "removed", "additions": 0, "deletions": 22648, "changes": 22648, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Fcp%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Fcp%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog.3?ref=e743d142aebcc694e105de1dcc588ee3e2a003f6"}, {"sha": "ddefd5c52fe1a22329415a43ed141a9af7d19c1c", "filename": "gcc/cp/ChangeLog.egcs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Fcp%2FChangeLog.egcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Fcp%2FChangeLog.egcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog.egcs?ref=e743d142aebcc694e105de1dcc588ee3e2a003f6", "patch": "@@ -1,4 +0,0 @@\n-Wed Sep 10 16:39:26 1997  Jim Wilson  <wilson@cygnus.com>\n-\n-\t* Make-lang.in (LN, LN_S): New macros, use where appropriate.\n-"}]}