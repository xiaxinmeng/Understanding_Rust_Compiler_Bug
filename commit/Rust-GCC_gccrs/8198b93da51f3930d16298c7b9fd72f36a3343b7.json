{"sha": "8198b93da51f3930d16298c7b9fd72f36a3343b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE5OGI5M2RhNTFmMzkzMGQxNjI5OGM3YjlmZDcyZjM2YTMzNDNiNw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2008-07-31T13:26:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-31T13:26:40Z"}, "message": "sem_ch6.adb (Disambiguate_Spec): Continue the disambiguation if the corresponding spec is a primitive wrapper.\n\n2008-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Disambiguate_Spec): Continue the disambiguation if the\n\tcorresponding spec is a primitive wrapper. Update comment.\n\nFrom-SVN: r138406", "tree": {"sha": "39385686d227c1824b61034d537f30ebe4580e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39385686d227c1824b61034d537f30ebe4580e17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8198b93da51f3930d16298c7b9fd72f36a3343b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8198b93da51f3930d16298c7b9fd72f36a3343b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8198b93da51f3930d16298c7b9fd72f36a3343b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8198b93da51f3930d16298c7b9fd72f36a3343b7/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8f2b5d9acf05785e007cdf15ee4c14f1895c01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f2b5d9acf05785e007cdf15ee4c14f1895c01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f2b5d9acf05785e007cdf15ee4c14f1895c01a"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "6583b72537db73a3590047b973e86b608939cca3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8198b93da51f3930d16298c7b9fd72f36a3343b7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8198b93da51f3930d16298c7b9fd72f36a3343b7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8198b93da51f3930d16298c7b9fd72f36a3343b7", "patch": "@@ -1564,9 +1564,14 @@ package body Sem_Ch6 is\n          --  Subprogram_Specification. In such cases, we undo the change\n          --  made by the analysis of the specification and try to find the\n          --  spec again.\n+         --  Note that wrappers already have their corresponding specs and\n+         --  bodies set during their creation, so if the candidate spec is\n+         --  a wrapper, then we definately need to swap all types to their\n+         --  original concurrent status.\n \n-         if No (Spec_N) then\n-\n+         if No (Spec_N)\n+           or else Is_Primitive_Wrapper (Spec_N)\n+         then\n             --  Restore all references of corresponding record types to the\n             --  original concurrent types.\n "}]}