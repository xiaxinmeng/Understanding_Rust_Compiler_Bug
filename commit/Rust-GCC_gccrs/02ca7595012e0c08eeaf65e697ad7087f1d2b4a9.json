{"sha": "02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJjYTc1OTUwMTJlMGMwOGVlYWY2NWU2OTdhZDcwODdmMWQyYjRhOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-05-01T17:05:18Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-05-01T17:05:18Z"}, "message": "rs6000.md (define_attr \"type\"): Add mfjmpr.\n\n        * config/rs6000/rs6000.md (define_attr \"type\"): Add mfjmpr.\n        (movsi_internal1): Use new mfjmpr attribute.\n        (movhi_internal): Same.\n        (movqi_internal): Same.\n        (movcc_internal1): Same.\n        (movdi_internal64): Same.\n        * config/rs6000/{40x.md,603.md,6xx.md,7450.md,7xx.md,mpc.md,\n        power4.md,rios1.md,rios2.md,rs64.md}: Add mfjmpr.\n        * config/rs6000/40x.md: Add fpu_405.\n        * config/rs6000/power4.md: Merge power4lsu and power4disp automata\n        into power4misc automata.  Remove extraneous parentheses.\n        * config/rs6000/440.md: New file.\n        * config/rs6000/rs6000.c (processor_target_table): Add 440,\n        440fp.  Rename 405f to 405fp.\n        (function_arg_padding): Correct formatting.\n        (rs6000_rtx_costs): Add PROCESSOR_PPC440 cases.\n\nFrom-SVN: r66336", "tree": {"sha": "25346d2a79b1e28e9ab1e3d9e065c4bd7244edfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25346d2a79b1e28e9ab1e3d9e065c4bd7244edfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/comments", "author": null, "committer": null, "parents": [{"sha": "397751aef082a19ac18a698f3e210b3efebaf97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397751aef082a19ac18a698f3e210b3efebaf97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397751aef082a19ac18a698f3e210b3efebaf97c"}], "stats": {"total": 353, "additions": 292, "deletions": 61}, "files": [{"sha": "9e779770d12553b946c8513ae88c45460f0dfbe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -1,3 +1,22 @@\n+2003-05-01  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (define_attr \"type\"): Add mfjmpr.\n+\t(movsi_internal1): Use new mfjmpr attribute.\n+\t(movhi_internal): Same.\n+\t(movqi_internal): Same.\n+\t(movcc_internal1): Same.\n+\t(movdi_internal64): Same.\n+\t* config/rs6000/{40x.md,603.md,6xx.md,7450.md,7xx.md,mpc.md,\n+\tpower4.md,rios1.md,rios2.md,rs64.md}: Add mfjmpr.\n+\t* config/rs6000/40x.md: Add fpu_405.\n+\t* config/rs6000/power4.md: Merge power4lsu and power4disp automata\n+\tinto power4misc automata.  Remove extraneous parentheses.\n+\t* config/rs6000/440.md: New file.\n+\t* config/rs6000/rs6000.c (processor_target_table): Add 440,\n+\t440fp.  Rename 405f to 405fp.\n+\t(function_arg_padding): Correct formatting.\n+\t(rs6000_rtx_costs): Add PROCESSOR_PPC440 cases.\n+\n 2003-05-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* input.h (lineno): Rename to ..."}, {"sha": "bc42e396d1f594ed09cb9b8a91925a8fd7c92cbf", "filename": "gcc/config/rs6000/40x.md", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -19,7 +19,7 @@\n ;; MA 02111-1307, USA.\n \n (define_automaton \"ppc40x\")\n-(define_cpu_unit \"iu_40x,bpu_40x\" \"ppc40x\")\n+(define_cpu_unit \"iu_40x,bpu_40x,fpu_405\" \"ppc40x\")\n \n ;; PPC401 / PPC403 / PPC405 32-bit integer only  IU BPU\n ;; Embedded PowerPC controller\n@@ -71,17 +71,37 @@\n   \"iu_40x*33\")\n \n (define_insn_reservation \"ppc403-mfcr\" 2\n-  (and (eq_attr \"type\" \"mfcr,mtcr\")\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x\")\n \n (define_insn_reservation \"ppc403-mtjmpr\" 4\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n-  \"bpu_40x\")\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n \n (define_insn_reservation \"ppc403-jmpreg\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr\")\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"bpu_40x\")\n+\n+(define_insn_reservation \"ppc403-cr\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"bpu_40x\")\n \n+(define_insn_reservation \"ppc405-float\" 11\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,fpcompare,fp,dmul,sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"fpu_405*10\")\n+"}, {"sha": "92ce3fea46a82b1518dd925a11e2eadf6d6bdf12", "filename": "gcc/config/rs6000/440.md", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F440.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -0,0 +1,120 @@\n+;; Scheduling description for IBM PowerPC 440 processor.\n+;;   Copyright (C) 2003 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GNU CC.\n+;;\n+;; GNU CC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GNU CC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GNU CC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+;; PPC440 Embedded PowerPC controller\n+;; dual issue\n+;; i_pipe - complex integer / compare / branch\n+;; j_pipe - simple integer arithmetic\n+;; l_pipe - load-store\n+;; f_pipe - floating point arithmetic\n+\n+(define_automaton \"ppc440_core,ppc440_apu\")\n+(define_cpu_unit \"ppc440_i_pipe,ppc440_j_pipe,ppc440_l_pipe\" \"ppc440_core\")\n+(define_cpu_unit \"ppc440_f_pipe\" \"ppc440_apu\")\n+(define_cpu_unit \"ppc440_issue_0,ppc440_issue_1\" \"ppc440_core\")\n+\n+(define_reservation \"ppc440_issue\" \"ppc440_issue_0|ppc440_issue_1\")\n+\n+\n+(define_insn_reservation \"ppc440-load\" 3\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-fpload\" 4\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe|ppc440_j_pipe\")\n+\n+(define_insn_reservation \"ppc440-imul\" 3\n+  (and (eq_attr \"type\" \"imul,imul_compare\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-imul2\" 2\n+  (and (eq_attr \"type\" \"imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-idiv\" 34\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe*33\")\n+\n+(define_insn_reservation \"ppc440-branch\" 1\n+  (and (eq_attr \"type\" \"branch,jmpreg\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-compare\" 2\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,cr_logical,delayed_cr,mfcr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-fpcompare\" 3 ; 2\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe+ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-fp\" 5\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe\")\n+\n+(define_insn_reservation \"ppc440-sdiv\" 19\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe*15\")\n+\n+(define_insn_reservation \"ppc440-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe*29\")\n+\n+(define_insn_reservation \"ppc440-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+"}, {"sha": "7605c69024db3b256a5020f730c15017c10ac9ca", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -105,20 +105,20 @@\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"fpu_603*33\")\n \n-(define_insn_reservation \"ppc603-mtcr\" 2\n-  (and (eq_attr \"type\" \"mtcr\")\n+(define_insn_reservation \"ppc603-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr,mfcr,mtcr\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"sru_603\")\n \n-(define_insn_reservation \"ppc603-crlogical\" 1\n-  (and (eq_attr \"type\" \"cr_logical,delayed_cr,mfcr\")\n+(define_insn_reservation \"ppc603-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"sru_603\")\n \n-(define_insn_reservation \"ppc603-mtjmpr\" 4\n-  (and (eq_attr \"type\" \"mtjmpr\")\n+(define_insn_reservation \"ppc603-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n        (eq_attr \"cpu\" \"ppc603\"))\n-  \"bpu_603\")\n+  \"sru_603\")\n \n (define_insn_reservation \"ppc603-jmpreg\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch\")"}, {"sha": "6ad7c73e5d24bf3681fc9cdef24c9b8539e6a43f", "filename": "gcc/config/rs6000/6xx.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -165,7 +165,7 @@\n (define_insn_reservation \"ppc630-fpcompare\" 5\n   (and (eq_attr \"type\" \"fpcompare\")\n        (eq_attr \"cpu\" \"ppc630\"))\n-  \"(fpu1_6xx|fpu2_6xx)\")\n+  \"fpu1_6xx|fpu2_6xx\")\n \n (define_insn_reservation \"ppc630-fp\" 3\n   (and (eq_attr \"type\" \"fp,dmul\")\n@@ -200,22 +200,32 @@\n (define_insn_reservation \"ppc604-mtcr\" 2\n   (and (eq_attr \"type\" \"mtcr\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n-  \"mciu_6xx\")\n+  \"iu1_6xx|iu2_6xx\")\n \n-(define_insn_reservation \"ppc604-crlogical\" 1\n+(define_insn_reservation \"ppc604-crlogical\" 2\n   (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n        (eq_attr \"cpu\" \"ppc604\"))\n   \"bpu_6xx\")\n \n-(define_insn_reservation \"ppc604e-crlogical\" 1\n+(define_insn_reservation \"ppc604e-crlogical\" 2\n   (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n        (eq_attr \"cpu\" \"ppc604e,ppc620,ppc630\"))\n   \"cru_6xx\")\n \n-(define_insn_reservation \"ppc604-mtjmpr\" 4\n+(define_insn_reservation \"ppc604-mtjmpr\" 2\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n-  \"bpu_6xx\")\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc604-mfjmpr\" 3\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc630-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"mciu_6xx\")\n \n (define_insn_reservation \"ppc604-jmpreg\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch\")"}, {"sha": "5b5168233aceeac74b984817a339ef3aa0b93729", "filename": "gcc/config/rs6000/7450.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -124,6 +124,11 @@\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"nothing,mciu_7450*2\")\n \n+(define_insn_reservation \"ppc7450-mfjmpr\" 3\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"nothing,mciu_7450*2\")\n+\n (define_insn_reservation \"ppc7450-jmpreg\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch\")\n        (eq_attr \"cpu\" \"ppc7450\"))"}, {"sha": "2da9ba538f8f21959868e83ce2b103812a2b4dad", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -134,6 +134,11 @@\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"nothing,sru_7xx*2\")\n \n+(define_insn_reservation \"ppc750-mfjmpr\" 3\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,sru_7xx*2\")\n+\n (define_insn_reservation \"ppc750-jmpreg\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))"}, {"sha": "3ed69d17e538aef766a10ba4c28a2511a17a1ff2", "filename": "gcc/config/rs6000/8540.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F8540.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -132,7 +132,7 @@\n \n ;; Mtjmpr\n (define_insn_reservation \"ppc8540_mtjmpr\" 1\n-  (and (eq_attr \"type\" \"mtjmpr\")\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n        (eq_attr \"cpu\" \"ppc8540\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n "}, {"sha": "a97b2b8ac4abcd4f35ce597f948f1424c1a733bc", "filename": "gcc/config/rs6000/mpc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -88,7 +88,7 @@\n   \"fpu_mpc*17\")\n \n (define_insn_reservation \"mpccore-mtjmpr\" 4\n-  (and (eq_attr \"type\" \"mtjmpr\")\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"bpu_mpc\")\n "}, {"sha": "b6af77bc0dbd3b33c341caccba7e181687740313", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -25,15 +25,15 @@\n ;; (split) or more internal ops.  The chip can issue up to 5\n ;; internal ops per cycle.\n \n-(define_automaton \"power4iu,power4lsu,power4fpu,power4misc,power4vec,power4disp\")\n+(define_automaton \"power4iu,power4fpu,power4vec,power4misc\")\n \n (define_cpu_unit \"iu1_power4,iu2_power4\" \"power4iu\")\n-(define_cpu_unit \"lsu1_power4,lsu2_power4\" \"power4lsu\")\n+(define_cpu_unit \"lsu1_power4,lsu2_power4\" \"power4misc\")\n (define_cpu_unit \"fpu1_power4,fpu2_power4\" \"power4fpu\")\n (define_cpu_unit \"bpu_power4,cru_power4\" \"power4misc\")\n (define_cpu_unit \"vec_power4,vecperm_power4\" \"power4vec\")\n (define_cpu_unit \"du1_power4,du2_power4,du3_power4,du4_power4,du5_power4\"\n-\t\t \"power4disp\")\n+\t\t \"power4misc\")\n \n (define_reservation \"lsq_power4\"\n \t\t    \"(du1_power4,lsu1_power4)\\\n@@ -42,10 +42,10 @@\n \t\t    |(du4_power4,nothing,lsu1_power4)\")\n \n (define_reservation \"lsuq_power4\"\n-\t\t    \"((du1_power4+du2_power4),lsu1_power4+iu2_power4)\\\n-\t\t    |((du2_power4+du3_power4),lsu2_power4+iu2_power4)\\\n-\t\t    |((du3_power4+du4_power4),lsu2_power4+iu1_power4)\")\n-;\t\t    |((du2_power4+du3_power4),nothing,lsu2_power4,iu2_power4)\n+\t\t    \"(du1_power4+du2_power4,lsu1_power4+iu2_power4)\\\n+\t\t    |(du2_power4+du3_power4,lsu2_power4+iu2_power4)\\\n+\t\t    |(du3_power4+du4_power4,lsu2_power4+iu1_power4)\")\n+;\t\t    |(du2_power4+du3_power4,nothing,lsu2_power4,iu2_power4)\n \n (define_reservation \"iq_power4\"\n \t\t    \"(du1_power4,iu1_power4)\\\n@@ -95,19 +95,19 @@\n (define_insn_reservation \"power4-load-ext-update\" 5\n   (and (eq_attr \"type\" \"load_ext_u\")\n        (eq_attr \"cpu\" \"power4\"))\n-  \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n-   (lsu1_power4+iu2_power4),nothing,nothing,iu2_power4\")\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+   lsu1_power4+iu2_power4,nothing,nothing,iu2_power4\")\n \n (define_insn_reservation \"power4-load-ext-update-indexed\" 5\n   (and (eq_attr \"type\" \"load_ext_ux\")\n        (eq_attr \"cpu\" \"power4\"))\n-  \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n    iu1_power4,lsu2_power4+iu1_power4,nothing,nothing,iu2_power4\")\n \n (define_insn_reservation \"power4-load-update-indexed\" 3\n   (and (eq_attr \"type\" \"load_ux\")\n        (eq_attr \"cpu\" \"power4\"))\n-   \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n    iu1_power4,lsu2_power4+iu2_power4\")\n \n (define_insn_reservation \"power4-load-update\" 4 ; 3\n@@ -253,16 +253,16 @@\n (define_insn_reservation \"power4-idiv\" 36\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"power4\"))\n-  \"(du1_power4+du2_power4),iu2_power4*35\")\n+  \"du1_power4+du2_power4,iu2_power4*35\")\n \n (define_insn_reservation \"power4-ldiv\" 68\n   (and (eq_attr \"type\" \"ldiv\")\n        (eq_attr \"cpu\" \"power4\"))\n-  \"(du1_power4+du2_power4),iu2_power4*67\")\n+  \"du1_power4+du2_power4,iu2_power4*67\")\n \n \n (define_insn_reservation \"power4-mtjmpr\" 3\n-  (and (eq_attr \"type\" \"mtjmpr\")\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"du1_power4,bpu_power4\")\n \n@@ -288,15 +288,15 @@\n (define_insn_reservation \"power4-delayedcr\" 4\n   (and (eq_attr \"type\" \"delayed_cr\")\n        (eq_attr \"cpu\" \"power4\"))\n-  \"(du1_power4+du2_power4),cru_power4,cru_power4\")\n+  \"du1_power4+du2_power4,cru_power4,cru_power4\")\n \n ; 4 mfcrf (each 3 cyc, 1/cyc) + 3 fxu\n (define_insn_reservation \"power4-mfcr\" 6\n   (and (eq_attr \"type\" \"mfcr\")\n        (eq_attr \"cpu\" \"power4\"))\n-  \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n-   (du1_power4+du2_power4+du3_power4+du4_power4+cru_power4),\\\n-    cru_power4,cru_power4,cru_power4\")\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+   du1_power4+du2_power4+du3_power4+du4_power4+cru_power4,\\\n+   cru_power4,cru_power4,cru_power4\")\n \n ; mtcrf (1 field)\n (define_insn_reservation \"power4-mtcr\" 4"}, {"sha": "5d370b036ef50a571ea9bd684028fe3be58ca477", "filename": "gcc/config/rs6000/rios1.md", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frios1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frios1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios1.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -51,7 +51,7 @@\n   \"iu_rios1+fpu_rios1\")\n \n (define_insn_reservation \"rios1-integer\" 1\n-  (and (eq_attr \"type\" \"integer,mfcr,mtcr\")\n+  (and (eq_attr \"type\" \"integer\")\n        (eq_attr \"cpu\" \"rios1,ppc601\"))\n   \"iu_rios1\")\n \n@@ -142,6 +142,16 @@\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"fpu_rios1*31\")\n \n+(define_insn_reservation \"rios1-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1,bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-mtcr\" 4\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1,bpu_rios1\")\n+\n (define_insn_reservation \"rios1-crlogical\" 4\n   (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n        (eq_attr \"cpu\" \"rios1,ppc601\"))\n@@ -150,12 +160,17 @@\n (define_insn_reservation \"rios1-mtjmpr\" 5\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"rios1\"))\n-  \"bpu_rios1\")\n+  \"iu_rios1,bpu_rios1\")\n \n (define_insn_reservation \"ppc601-mtjmpr\" 4\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"ppc601\"))\n-  \"bpu_rios1\")\n+  \"iu_rios1,bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1,bpu_rios1\")\n \n (define_insn_reservation \"rios1-branch\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch\")"}, {"sha": "219127f641cbb3aa0cb4e432dc59dc67e6ad1f05", "filename": "gcc/config/rs6000/rios2.md", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios2.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -39,7 +39,7 @@\n   \"iu1_rios2|iu2_rios2\")\n \n (define_insn_reservation \"rios2-integer\" 1\n-  (and (eq_attr \"type\" \"integer,mfcr,mtcr\")\n+  (and (eq_attr \"type\" \"integer\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"iu1_rios2|iu2_rios2\")\n \n@@ -85,17 +85,32 @@\n        (eq_attr \"cpu\" \"rios2\"))\n   \"(fpu1_rios2*26)|(fpu2_rios2*26)\")\n \n-(define_insn_reservation \"rios2-crlogical\" 4\n+(define_insn_reservation \"rios2-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2,bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2,bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-crlogical\" 3\n   (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"bpu_rios2\")\n \n (define_insn_reservation \"rios2-mtjmpr\" 5\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"rios2\"))\n-  \"bpu_rios2\")\n+  \"iu1_rios2,bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2,bpu_rios2\")\n \n-(define_insn_reservation \"rios2-jmpreg\" 1\n+(define_insn_reservation \"rios2-branch\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"bpu_rios2\")"}, {"sha": "43763fd7f57a4d78eb1bcf418a0e2a5377574c08", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -527,7 +527,13 @@ rs6000_override_options (default_cpu)\n \t {\"405\", PROCESSOR_PPC405,\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"405f\", PROCESSOR_PPC405,\n+\t {\"405fp\", PROCESSOR_PPC405,\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n+\t {\"440\", PROCESSOR_PPC440,\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n+\t {\"440fp\", PROCESSOR_PPC440,\n \t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"505\", PROCESSOR_MPCCORE,\n@@ -3175,12 +3181,12 @@ function_arg_padding (mode, type)\n \n   /* This is the default definition.  */\n   return (! BYTES_BIG_ENDIAN\n-          ? upward\n-          : ((mode == BLKmode\n-              ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-                 && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n-              : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n-             ? downward : upward));\n+\t  ? upward\n+\t  : ((mode == BLKmode\n+\t      ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n+\t\t && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n+\t      : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n+\t     ? downward : upward));\n }\n \n /* If defined, a C expression that gives the alignment boundary, in bits,\n@@ -13664,6 +13670,12 @@ rs6000_rtx_costs (x, code, outer_code, total)\n \t\t    ? COSTS_N_INSNS (3) : COSTS_N_INSNS (4));\n \t  return true;\n \n+\tcase PROCESSOR_PPC440:\n+\t  *total = (GET_CODE (XEXP (x, 1)) != CONST_INT\n+\t\t    ? COSTS_N_INSNS (3)\n+\t\t    : COSTS_N_INSNS (2));\n+\t  return true;\n+\n \tcase PROCESSOR_RS64A:\n \t  *total = (GET_CODE (XEXP (x, 1)) != CONST_INT\n \t\t    ? GET_MODE (XEXP (x, 1)) != DImode\n@@ -13766,6 +13778,10 @@ rs6000_rtx_costs (x, code, outer_code, total)\n \t  *total = COSTS_N_INSNS (35);\n \t  return true;\n \n+\tcase PROCESSOR_PPC440:\n+\t  *total = COSTS_N_INSNS (34);\n+\t  return true;\n+\n \tcase PROCESSOR_PPC601:\n \t  *total = COSTS_N_INSNS (36);\n \t  return true;"}, {"sha": "625355282eabb2df60809f747cd9bbb8484612ef", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -62,7 +62,7 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,branch,cmp,fast_compare,compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mtcr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv\"\n+(define_attr \"type\" \"integer,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,branch,cmp,fast_compare,compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n@@ -91,6 +91,7 @@\n (include \"rs64.md\")\n (include \"mpc.md\")\n (include \"40x.md\")\n+(include \"440.md\")\n (include \"603.md\")\n (include \"6xx.md\")\n (include \"7xx.md\")\n@@ -7682,7 +7683,7 @@\n    mt%0 %1\n    mt%0 %1\n    {cror 0,0,0|nop}\"\n-  [(set_attr \"type\" \"*,*,load,store,*,*,*,*,*,*,mtjmpr,*,*\")\n+  [(set_attr \"type\" \"*,*,load,store,*,*,*,*,mfjmpr,*,mtjmpr,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4,4,4\")])\n \n ;; Split a load of a large constant into the appropriate two-insn\n@@ -7751,7 +7752,7 @@\n    mt%0 %1\n    mt%0 %1\n    {cror 0,0,0|nop}\"\n-  [(set_attr \"type\" \"*,load,store,*,*,*,mtjmpr,*\")])\n+  [(set_attr \"type\" \"*,load,store,*,mfjmpr,*,mtjmpr,*\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n@@ -7773,7 +7774,7 @@\n    mt%0 %1\n    mt%0 %1\n    {cror 0,0,0|nop}\"\n-  [(set_attr \"type\" \"*,load,store,*,*,*,mtjmpr,*\")])\n+  [(set_attr \"type\" \"*,load,store,*,mfjmpr,*,mtjmpr,*\")])\n \f\n ;; Here is how to move condition codes around.  When we store CC data in\n ;; an integer register or memory, we store just the high-order 4 bits.\n@@ -7801,7 +7802,7 @@\n    mt%0 %1\n    {l%U1%X1|lwz%U1%X1} %0,%1\n    {st%U0%U1|stw%U0%U1} %1,%0\"\n-  [(set_attr \"type\" \"cr_logical,mtcr,mtcr,mfcr,mfcr,*,*,*,mtjmpr,load,store\")\n+  [(set_attr \"type\" \"cr_logical,mtcr,mtcr,mfcr,mfcr,*,mfjmpr,*,mtjmpr,load,store\")\n    (set_attr \"length\" \"4,4,12,4,8,4,4,4,4,4,4\")])\n \f\n ;; For floating-point, we normally deal with the floating-point registers\n@@ -8556,7 +8557,7 @@\n    mf%1 %0\n    mt%0 %1\n    {cror 0,0,0|nop}\"\n-  [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,*,mtjmpr,*\")\n+  [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,mfjmpr,mtjmpr,*\")\n    (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4\")])\n \n ;; immediate value valid for a single instruction hiding in a const_double"}, {"sha": "c1ef52a06278d7dc83e7854bff5183230613bf52", "filename": "gcc/config/rs6000/rs64.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ca7595012e0c08eeaf65e697ad7087f1d2b4a9/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=02ca7595012e0c08eeaf65e697ad7087f1d2b4a9", "patch": "@@ -104,17 +104,22 @@\n (define_insn_reservation \"rs64a-mfcr\" 2\n   (and (eq_attr \"type\" \"mfcr\")\n        (eq_attr \"cpu\" \"rs64a\"))\n-  \"mciu_rs64\")\n+  \"lsu_rs64\")\n \n (define_insn_reservation \"rs64a-mtcr\" 3\n   (and (eq_attr \"type\" \"mtcr\")\n        (eq_attr \"cpu\" \"rs64a\"))\n-  \"mciu_rs64\")\n+  \"lsu_rs64\")\n \n-(define_insn_reservation \"rs64a-mtjmpr\" 5\n+(define_insn_reservation \"rs64a-mtjmpr\" 3\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"rs64a\"))\n-  \"bpu_rs64\")\n+  \"lsu_rs64\")\n+\n+(define_insn_reservation \"rs64a-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"lsu_rs64\")\n \n (define_insn_reservation \"rs64a-jmpreg\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr\")"}]}