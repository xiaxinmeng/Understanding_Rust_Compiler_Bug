{"sha": "609ae0e2cef6f31f9cf871fd1997923f177c38df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5YWUwZTJjZWY2ZjMxZjljZjg3MWZkMTk5NzkyM2YxNzdjMzhkZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-10-06T13:23:30Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-10-06T13:23:30Z"}, "message": "builtins.c (expand_builtin_strcpy): Delete duplicate code.\n\n\t* builtins.c (expand_builtin_strcpy): Delete duplicate code.\n\tAccept an expression instead of an arglist.\n\t(expand_builtin_stpcpy): Accept an expression instead of an\n\targlist.\n\ntestsuite:\n\t* gcc.c-torture/execute/builtins/lib/strcpy.c: Don't abort when\n\toptimizing for size.\n\nFrom-SVN: r88604", "tree": {"sha": "c06da085b42fee9852c40c80dc16e03b0d80e320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c06da085b42fee9852c40c80dc16e03b0d80e320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/609ae0e2cef6f31f9cf871fd1997923f177c38df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609ae0e2cef6f31f9cf871fd1997923f177c38df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609ae0e2cef6f31f9cf871fd1997923f177c38df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609ae0e2cef6f31f9cf871fd1997923f177c38df/comments", "author": null, "committer": null, "parents": [{"sha": "96836f619421f1be5070b674d15948c1a516b5c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96836f619421f1be5070b674d15948c1a516b5c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96836f619421f1be5070b674d15948c1a516b5c4"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "71d6d1b3b8f8cb8707d191850cfdf30874db86a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=609ae0e2cef6f31f9cf871fd1997923f177c38df", "patch": "@@ -1,3 +1,10 @@\n+2004-10-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strcpy): Delete duplicate code.\n+\tAccept an expression instead of an arglist.\n+\t(expand_builtin_stpcpy): Accept an expression instead of an\n+\targlist.\n+\n 2004-10-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/16007"}, {"sha": "11fd5687a0efac265db33a5ebf24ec13331fd814", "filename": "gcc/builtins.c", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=609ae0e2cef6f31f9cf871fd1997923f177c38df", "patch": "@@ -2891,36 +2891,20 @@ expand_movstr (tree dest, tree src, rtx target, int endp)\n    convenient).  */\n \n static rtx\n-expand_builtin_strcpy (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_strcpy (tree exp, rtx target, enum machine_mode mode)\n {\n-  tree fn, len, src, dst;\n-\n-  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n-    return 0;\n-\n-  src = TREE_VALUE (TREE_CHAIN (arglist));\n-  dst = TREE_VALUE (arglist);\n-\n-  /* If SRC and DST are equal (and not volatile), return DST.  */\n-  if (operand_equal_p (src, dst, 0))\n-    return expand_expr (dst, target, mode, EXPAND_NORMAL);\n-\n-  len = c_strlen (src, 1);\n-  if (len == 0 || TREE_SIDE_EFFECTS (len))\n-    return expand_movstr (TREE_VALUE (arglist),\n-\t\t\t  TREE_VALUE (TREE_CHAIN (arglist)),\n-\t\t\t  target, /*endp=*/0);\n-\n-  fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n-  if (!fn)\n-    return 0;\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  if (validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n+    {\n+      tree result = fold_builtin_strcpy (exp, 0);\n+      if (result)\n+\treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n \n-  len = size_binop (PLUS_EXPR, len, ssize_int (1));\n-  arglist = build_tree_list (NULL_TREE, len);\n-  arglist = tree_cons (NULL_TREE, src, arglist);\n-  arglist = tree_cons (NULL_TREE, dst, arglist);\n-  return expand_expr (build_function_call_expr (fn, arglist),\n-\t\t      target, mode, EXPAND_NORMAL);\n+      return expand_movstr (TREE_VALUE (arglist),\n+\t\t\t    TREE_VALUE (TREE_CHAIN (arglist)),\n+\t\t\t    target, /*endp=*/0);\n+    }\n+  return 0;\n }\n \n /* Expand a call to the stpcpy builtin, with arguments in ARGLIST.\n@@ -2929,8 +2913,9 @@ expand_builtin_strcpy (tree arglist, rtx target, enum machine_mode mode)\n    mode MODE if that's convenient).  */\n \n static rtx\n-expand_builtin_stpcpy (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_stpcpy (tree exp, rtx target, enum machine_mode mode)\n {\n+  tree arglist = TREE_OPERAND (exp, 1);\n   /* If return value is ignored, transform stpcpy into strcpy.  */\n   if (target == const0_rtx)\n     {\n@@ -2976,7 +2961,7 @@ expand_builtin_stpcpy (tree arglist, rtx target, enum machine_mode mode)\n \n \t  if (GET_CODE (len_rtx) == CONST_INT)\n \t    {\n-\t      ret = expand_builtin_strcpy (arglist, target, mode);\n+\t      ret = expand_builtin_strcpy (exp, target, mode);\n \n \t      if (ret)\n \t\t{\n@@ -5400,7 +5385,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_STRCPY:\n-      target = expand_builtin_strcpy (arglist, target, mode);\n+      target = expand_builtin_strcpy (exp, target, mode);\n       if (target)\n \treturn target;\n       break;\n@@ -5412,7 +5397,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_STPCPY:\n-      target = expand_builtin_stpcpy (arglist, target, mode);\n+      target = expand_builtin_stpcpy (exp, target, mode);\n       if (target)\n \treturn target;\n       break;"}, {"sha": "8a39312affbeae13486c55d3319db3ebae61cce1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=609ae0e2cef6f31f9cf871fd1997923f177c38df", "patch": "@@ -1,3 +1,8 @@\n+2004-10-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/builtins/lib/strcpy.c: Don't abort when\n+\toptimizing for size.\n+\n 2004-10-05  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/complex-2.c, gcc.dg/complex-2.h: New test."}, {"sha": "0ee27c669aceb70eaf224363b90e3d2bc2f86a8f", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strcpy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609ae0e2cef6f31f9cf871fd1997923f177c38df/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcpy.c?ref=609ae0e2cef6f31f9cf871fd1997923f177c38df", "patch": "@@ -4,7 +4,7 @@ char *\n strcpy (char *d, const char *s)\n {\n   char *r = d;\n-#ifdef __OPTIMIZE__\n+#if defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__\n   if (inside_main)\n     abort ();\n #endif"}]}