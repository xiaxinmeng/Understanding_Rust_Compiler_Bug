{"sha": "9dd2cdd8338fd835a227521661eafe259e401830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkMmNkZDgzMzhmZDgzNWEyMjc1MjE2NjFlYWZlMjU5ZTQwMTgzMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:07:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:20Z"}, "message": "i386 build fix against latest gcc", "tree": {"sha": "83fefba1722112e88f93421a624e7bf5fa563fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83fefba1722112e88f93421a624e7bf5fa563fc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd2cdd8338fd835a227521661eafe259e401830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd2cdd8338fd835a227521661eafe259e401830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd2cdd8338fd835a227521661eafe259e401830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd2cdd8338fd835a227521661eafe259e401830/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "9ab0556d2429712ee2c356e9afb0b6d800f02114", "filename": "gcc/config/i386/i386-rust.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd2cdd8338fd835a227521661eafe259e401830/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd2cdd8338fd835a227521661eafe259e401830/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.c?ref=9dd2cdd8338fd835a227521661eafe259e401830", "patch": "@@ -211,11 +211,11 @@ ix86_rust_target_cpu_info (void)\n     rust_add_target_info(\"target_feature\", \"pku\");\n   if (TARGET_ISA_AVX512VNNI)\n     rust_add_target_info(\"target_feature\", \"avx512vnni\");\n-  if (TARGET_ISA_AVX512BF16)\n+  if (TARGET_ISA2_AVX512BF16)\n     rust_add_target_info(\"target_feature\", \"avx512bf16\");\n   if (TARGET_ISA_AVX512BITALG)\n     rust_add_target_info(\"target_feature\", \"avx512bitalg\");\n-  if (TARGET_ISA_AVX512VP2INTERSECT)\n+  if (TARGET_ISA2_AVX512VP2INTERSECT)\n     rust_add_target_info(\"target_feature\", \"avx512vp2intersect\");\n   if (TARGET_ISA_PCLMUL)\n     rust_add_target_info(\"target_feature\", \"pclmul\");\n@@ -229,7 +229,7 @@ ix86_rust_target_cpu_info (void)\n   // this is only enabled by choice in llvm, never by default - TODO determine if gcc enables it\n   // rust_add_target_info(\"target_feature\", \"sse-unaligned-mem\");\n \n-  if (TARGET_ISA_VAES)\n+  if (TARGET_ISA2_VAES)\n     rust_add_target_info(\"target_feature\", \"vaes\");\n   if (TARGET_ISA_LWP)\n     rust_add_target_info(\"target_feature\", \"lwp\");\n@@ -241,13 +241,13 @@ ix86_rust_target_cpu_info (void)\n     rust_add_target_info(\"target_feature\", \"prfchw\");\n   if (TARGET_ISA_SAHF) // would this be better as TARGET_USE_SAHF?\n     rust_add_target_info(\"target_feature\", \"sahf\");\n-  if (TARGET_ISA_MWAITX)\n+  if (TARGET_ISA2_MWAITX)\n     rust_add_target_info(\"target_feature\", \"mwaitx\");\n-  if (TARGET_ISA_CLZERO)\n+  if (TARGET_ISA2_CLZERO)\n     rust_add_target_info(\"target_feature\", \"clzero\");\n-  if (TARGET_ISA_CLDEMOTE)\n+  if (TARGET_ISA2_CLDEMOTE)\n     rust_add_target_info(\"target_feature\", \"cldemote\");\n-  if (TARGET_ISA_PTWRITE)\n+  if (TARGET_ISA2_PTWRITE)\n     rust_add_target_info(\"target_feature\", \"ptwrite\");\n   // TODO: add amx-tile, amx-int8, amx-bf16 features when gcc supports them \n \n@@ -280,19 +280,19 @@ ix86_rust_target_cpu_info (void)\n     || ix86_arch == PROCESSOR_COOPERLAKE; \n   if (hasINVPCID)\n     rust_add_target_info(\"target_feature\", \"invpcid\");\n-  if (TARGET_ISA_SGX)\n+  if (TARGET_ISA2_SGX)\n     rust_add_target_info(\"target_feature\", \"sgx\");\n   if (TARGET_ISA_CLFLUSHOPT)\n     rust_add_target_info(\"target_feature\", \"clflushopt\");\n   if (TARGET_ISA_CLWB)\n     rust_add_target_info(\"target_feature\", \"clwb\");\n-  if (TARGET_ISA_WBNOINVD)\n+  if (TARGET_ISA2_WBNOINVD)\n     rust_add_target_info(\"target_feature\", \"wbnoinvd\");\n-  if (TARGET_ISA_RDPID)\n+  if (TARGET_ISA2_RDPID)\n     rust_add_target_info(\"target_feature\", \"rdpid\");\n-  if (TARGET_ISA_WAITPKG)\n+  if (TARGET_ISA2_WAITPKG)\n     rust_add_target_info(\"target_feature\", \"waitpkg\");\n-  if (TARGET_ISA_ENQCMD)\n+  if (TARGET_ISA2_ENQCMD)\n     rust_add_target_info(\"target_feature\", \"enqcmd\");\n \n   // these are only enabled by choice in llvm, never by default - TODO determine if gcc supports them\n@@ -340,7 +340,7 @@ ix86_rust_target_cpu_info (void)\n   if (ix86_arch == PROCESSOR_HASWELL)\n     rust_add_target_info(\"target_feature\", \"false-deps-lzcnt-tzcnt\");\n \n-  if (TARGET_ISA_PCONFIG)\n+  if (TARGET_ISA2_PCONFIG)\n     rust_add_target_info(\"target_feature\", \"pconfig\");\n \n   // TODO: gcc seems to not record if variable-mask shuffles are fast, so basing it on llvm\n@@ -453,7 +453,7 @@ ix86_rust_target_cpu_info (void)\n \n   if (TARGET_ISA_MOVDIRI)\n     rust_add_target_info(\"target_feature\", \"movdiri\");\n-  if (TARGET_ISA_MOVDIR64B)\n+  if (TARGET_ISA2_MOVDIR64B)\n     rust_add_target_info(\"target_feature\", \"movdir64b\");\n \n   bool hasFastBEXTR = ix86_arch == PROCESSOR_BTVER2 || ix86_arch == PROCESSOR_BDVER2 "}]}