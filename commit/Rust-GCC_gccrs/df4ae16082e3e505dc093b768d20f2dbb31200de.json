{"sha": "df4ae16082e3e505dc093b768d20f2dbb31200de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0YWUxNjA4MmUzZTUwNWRjMDkzYjc2OGQyMGYyZGJiMzEyMDBkZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-05-04T15:06:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-05-04T15:06:41Z"}, "message": "alpha.h: NULL_PTR -> NULL.\n\n\t* alpha.h: NULL_PTR -> NULL.\n\t* arm.c: Likewise.\n\t* arm.h: Likewise.\n\t* avr.h: Likewise.\n\t* c4x.c: Likewise.\n\t* c4x.h: Likewise.\n\t* i386.c: Likewise.\n\t* i386.md: Likewise.\n\t* i860.c: Likewise.\n\t* ia64.c: Likewise.\n\t* m68hc11.h: Likewise.\n\t* rs6000.h: Likewise.\n\t* sh.c: Likewise.\n\t* sh.h: Likewise.\n\t* sparc.h: Likewise.\n\t* v850.c: Likewise.\n\n\t* expr.c: Likewise.\n\t* final.c: Likewise.\n\t* gcc.c: Likewise.\n\t* recog.c: Likewise.\n\nFrom-SVN: r41831", "tree": {"sha": "1ddedd2de7e35d61a49586dd95345d1b563fd5a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ddedd2de7e35d61a49586dd95345d1b563fd5a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df4ae16082e3e505dc093b768d20f2dbb31200de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4ae16082e3e505dc093b768d20f2dbb31200de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4ae16082e3e505dc093b768d20f2dbb31200de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4ae16082e3e505dc093b768d20f2dbb31200de/comments", "author": null, "committer": null, "parents": [{"sha": "37a580360c3df196e8dc6e075ba1bd24d83bbefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a580360c3df196e8dc6e075ba1bd24d83bbefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a580360c3df196e8dc6e075ba1bd24d83bbefc"}], "stats": {"total": 154, "additions": 88, "deletions": 66}, "files": [{"sha": "7b058cce28452ae42e98bbdbc9defe543ee05370", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1,3 +1,27 @@\n+2001-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.h: NULL_PTR -> NULL.\n+\t* arm.c: Likewise.\n+\t* arm.h: Likewise.\n+\t* avr.h: Likewise.\n+\t* c4x.c: Likewise.\n+\t* c4x.h: Likewise.\n+\t* i386.c: Likewise.\n+\t* i386.md: Likewise.\n+\t* i860.c: Likewise.\n+\t* ia64.c: Likewise.\n+\t* m68hc11.h: Likewise.\n+\t* rs6000.h: Likewise.\n+\t* sh.c: Likewise.\n+\t* sh.h: Likewise.\n+\t* sparc.h: Likewise.\n+\t* v850.c: Likewise.\n+\n+\t* expr.c: Likewise.\n+\t* final.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* recog.c: Likewise.\n+\n 2001-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* i386.c (ix86_emit_restore_regs_using_mov, ix86_save_reg): Change"}, {"sha": "195d42182661d297db63975503e9bce563064946", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1583,7 +1583,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\t\\\n       && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t\\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t\\\n \t\t   BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t\\\n \t\t   OPNUM, TYPE);\t\t\t\t\t\\\n       goto WIN;\t\t\t\t\t\t\t\t\\\n@@ -1611,7 +1611,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t      GEN_INT (high)),\t\t\t\\\n \t\t\tGEN_INT (low));\t\t\t\t\t\\\n \t  \t\t\t\t\t\t\t\t\\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t\\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t\\\n \t\t   BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t\\\n \t\t   OPNUM, TYPE);\t\t\t\t\t\\\n       goto WIN;\t\t\t\t\t\t\t\t\\"}, {"sha": "55e4630c15e037070a7eb2ca2fd0257d61db11fe", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -8647,7 +8647,7 @@ arm_final_prescan_insn (insn)\n \t      if (!this_insn)\n \t        {\n \t\t  /* Oh, dear! we ran off the end.. give up */\n-\t\t  recog (PATTERN (insn), insn, NULL_PTR);\n+\t\t  recog (PATTERN (insn), insn, NULL);\n \t\t  arm_ccfsm_state = 0;\n \t\t  arm_target_insn = NULL;\n \t\t  return;\n@@ -8685,7 +8685,7 @@ arm_final_prescan_insn (insn)\n \t destroy this array, but final.c assumes that it remains intact\n \t across this call; since the insn has been recognized already we\n \t call recog direct).  */\n-      recog (PATTERN (insn), insn, NULL_PTR);\n+      recog (PATTERN (insn), insn, NULL);\n     }\n }\n \n@@ -8801,7 +8801,7 @@ arm_debugger_arg_offset (value, addr)\n }\n \n #define def_builtin(NAME, TYPE, CODE) \\\n-  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL_PTR)\n+  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL)\n \n void\n arm_init_builtins ()"}, {"sha": "61082c35e4a5056c5f9209a43fdab678d26d95c6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1257,7 +1257,7 @@ enum reg_class\n \t\t\t    gen_rtx_PLUS (GET_MODE (X), XEXP (X, 0),\t   \\\n \t\t\t\t\t  GEN_INT (high)),\t\t   \\\n \t\t\t    GEN_INT (low));\t\t\t\t   \\\n-\t  push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t   \\\n+\t  push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t   \\\n \t\t       BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t   \\\n \t\t       OPNUM, TYPE);\t\t\t\t\t   \\\n \t  goto WIN;\t\t\t\t\t\t\t   \\\n@@ -1284,7 +1284,7 @@ enum reg_class\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx orig_X = X;\t\t\t\t\t\t\t\\\n       X = copy_rtx (X);\t\t\t\t\t\t\t\\\n-      push_reload (orig_X, NULL_RTX, &X, NULL_PTR,\t\t\t\\\n+      push_reload (orig_X, NULL_RTX, &X, NULL,\t\t\t\t\\\n \t\t   BASE_REG_CLASS,\t\t\t\t\t\\\n \t\t   Pmode, VOIDmode, 0, 0, OPNUM, TYPE);\t\t\t\\\n       goto WIN;\t\t\t\t\t\t\t\t\\"}, {"sha": "09399805744b0902aae52ae112969a8aff018dd7", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1677,22 +1677,22 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \t    {\t\t\t\t\t\t\t\t    \\\n \t      int regno = REGNO (XEXP (X, 0));\t\t\t\t    \\\n \t      rtx mem = make_memloc (X, regno);\t\t\t\t    \\\n-\t      push_reload (XEXP (mem,0), NULL_PTR, &XEXP (mem,0), NULL_PTR, \\\n+\t      push_reload (XEXP (mem,0), NULL, &XEXP (mem,0), NULL,         \\\n \t\t           POINTER_REGS, Pmode, VOIDmode, 0, 0,\t\t    \\\n \t\t           1, ADDR_TYPE (TYPE));\t\t\t    \\\n-\t      push_reload (mem, NULL_RTX, &XEXP (X, 0), NULL_PTR,\t    \\\n+\t      push_reload (mem, NULL_RTX, &XEXP (X, 0), NULL,\t\t    \\\n \t\t           BASE_POINTER_REGS, GET_MODE (X), VOIDmode, 0, 0, \\\n \t\t           OPNUM, TYPE);\t\t\t\t    \\\n \t      goto WIN;\t\t\t\t\t\t\t    \\\n \t    }\t\t\t\t\t\t\t\t    \\\n-\t  push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t    \\\n+\t  push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t    \\\n \t\t       BASE_POINTER_REGS, GET_MODE (X), VOIDmode, 0, 0,\t    \\\n \t\t       OPNUM, TYPE);\t\t\t\t\t    \\\n           goto WIN;\t\t\t\t\t\t\t    \\\n \t}\t\t\t\t\t\t\t\t    \\\n       else if (! (frame_pointer_needed && XEXP (X,0) == frame_pointer_rtx)) \\\n \t{\t\t\t\t\t\t\t\t    \\\n-\t  push_reload (X, NULL_RTX, &X, NULL_PTR,\t\t\t    \\\n+\t  push_reload (X, NULL_RTX, &X, NULL,\t\t\t\t    \\\n \t\t       POINTER_REGS, GET_MODE (X), VOIDmode, 0, 0,\t    \\\n \t\t       OPNUM, TYPE);\t\t\t\t\t    \\\n           goto WIN;\t\t\t\t\t\t\t    \\"}, {"sha": "9486fdce7febe6b649de42114556e64fc355407d", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -5032,37 +5032,37 @@ c4x_init_builtins (endlink)\n \t\t    build_function_type \n \t\t    (integer_type_node,\n \t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t    C4X_BUILTIN_FIX, BUILT_IN_MD, NULL_PTR);\n+\t\t    C4X_BUILTIN_FIX, BUILT_IN_MD, NULL);\n   builtin_function (\"ansi_ftoi\",\n \t\t    build_function_type \n \t\t    (integer_type_node, \n \t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t    C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL_PTR);\n+\t\t    C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL);\n   if (TARGET_C3X)\n     builtin_function (\"fast_imult\",\n \t\t      build_function_type\n \t\t      (integer_type_node, \n \t\t       tree_cons (NULL_TREE, integer_type_node,\n \t\t\t\t  tree_cons (NULL_TREE,\n \t\t\t\t\t     integer_type_node, endlink))),\n-\t\t      C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL_PTR);\n+\t\t      C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL);\n   else\n     {\n       builtin_function (\"toieee\",\n \t\t        build_function_type \n \t\t\t(double_type_node,\n \t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL_PTR);\n+\t\t        C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL);\n       builtin_function (\"frieee\",\n \t\t        build_function_type\n \t\t\t(double_type_node, \n \t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL_PTR);\n+\t\t        C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL);\n       builtin_function (\"fast_invf\",\n \t\t        build_function_type \n \t\t\t(double_type_node, \n \t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL_PTR);\n+\t\t        C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL);\n     }\n }\n "}, {"sha": "b344f4d4e0489c0be457ed3f9678bfa370417b9b", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1734,7 +1734,7 @@ CUMULATIVE_ARGS;\n       \t  X = gen_rtx_LO_SUM (GET_MODE (X),\t\t\t\t\\\n \t\t\t      gen_rtx_HIGH (GET_MODE (X), X), X);\t\\\n           i = push_reload (XEXP (X, 0), NULL_RTX,\t\t\t\\\n-\t\t\t   &XEXP (X, 0), NULL_PTR,\t\t\t\\\n+\t\t\t   &XEXP (X, 0), NULL,\t\t\t\t\\\n \t\t           DP_REG, GET_MODE (X), VOIDmode, 0, 0,\t\\\n \t\t           OPNUM, TYPE);\t\t\t\t\\\n           /* The only valid reg is DP. This is a fixed reg and will\t\\\n@@ -1757,7 +1757,7 @@ CUMULATIVE_ARGS;\n       if (! TARGET_SMALL)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n           int i = push_reload (XEXP (X, 0), NULL_RTX,\t\t\t\\\n-\t\t\t       &XEXP (X, 0), NULL_PTR,\t\t\t\\\n+\t\t\t       &XEXP (X, 0), NULL,\t\t\t\\\n \t\t               DP_REG, GET_MODE (X), VOIDmode, 0, 0,\t\\\n \t\t               OPNUM, TYPE);\t\t\t\t\\\n           /* The only valid reg is DP. This is a fixed reg and will\t\\"}, {"sha": "a18e890e8073a27afa40728b9c02197efd2164c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -9019,7 +9019,7 @@ x86_initialize_trampoline (tramp, fnaddr, cxt)\n }\n \n #define def_builtin(NAME, TYPE, CODE) \\\n-  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL_PTR)\n+  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL)\n struct builtin_description\n {\n   enum insn_code icode;"}, {"sha": "f38b405884c044a8af9729871a75604c33ce3690", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -17396,7 +17396,7 @@\n {\n   emit_insn (gen_rtx_TRAP_IF (VOIDmode,\n \t\t\t      ix86_expand_compare (GET_CODE (operands[0]),\n-\t\t\t\t\t\t   NULL_PTR, NULL_PTR),\n+\t\t\t\t\t\t   NULL, NULL),\n \t\t\t      operands[1]));\n   DONE;\n }\")"}, {"sha": "5261b6969bc4503bc782b65d30a4dc677ddb67ee", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1451,7 +1451,7 @@ output_delayed_branch (template, operands, insn)\n \t We must do this after outputting the branch insn,\n \t since operands may just be a pointer to `recog_data.operand'.  */\n       INSN_CODE (delay_insn) = insn_code_number\n-\t= recog (pat, delay_insn, NULL_PTR);\n+\t= recog (pat, delay_insn, NULL);\n       if (insn_code_number == -1)\n \tabort ();\n "}, {"sha": "31907fad6503f60c1823f86fa48e7d427cac74b3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -6950,7 +6950,7 @@ ia64_init_builtins ()\n \t\t\t\t\t\t      endlink));\n \n #define def_builtin(name, type, code) \\\n-  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL_PTR)\n+  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL)\n \n   def_builtin (\"__sync_val_compare_and_swap_si\", si_ftype_psi_si_si,\n \t       IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI);"}, {"sha": "f58183c7ca00ef29f1ff9d57606d835e5440b0c8", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1565,7 +1565,7 @@ do {                                                                    \\\n       && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\t\\\n       && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,       \\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,           \\\n                    BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,        \\\n                    OPNUM, TYPE);                                        \\\n       goto WIN;                                                         \\\n@@ -1588,7 +1588,7 @@ do {                                                                    \\\n                                       GEN_INT (high)),                  \\\n                         GEN_INT (low));                                 \\\n                                                                         \\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,       \\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,           \\\n                    BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,        \\\n                    OPNUM, TYPE);                                        \\\n       goto WIN;                                                         \\"}, {"sha": "fe48c0afc6a30c2b1270f500fad4043ddb4a4a5e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1943,7 +1943,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n       && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\t     \\\n       && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\t     \\\n     {\t\t\t\t\t\t\t\t\t     \\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t     \\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t\t     \\\n                    BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t     \\\n                    OPNUM, TYPE);\t\t\t\t\t     \\\n       goto WIN;\t\t\t\t\t\t\t\t     \\\n@@ -1971,7 +1971,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n                                       GEN_INT (high)),\t\t\t     \\\n                         GEN_INT (low));\t\t\t\t\t     \\\n \t\t\t\t\t\t\t\t\t     \\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t     \\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t\t     \\\n                    BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t     \\\n                    OPNUM, TYPE);\t\t\t\t\t     \\\n       goto WIN;\t\t\t\t\t\t\t\t     \\"}, {"sha": "e96bba9a3de08412d40f9c2477224665f90662c8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -5266,7 +5266,7 @@ sh_insn_length_adjustment (insn)\n \ttemplate = XSTR (body, 0);\n       else if (asm_noperands (body) >= 0)\n \ttemplate\n-\t  = decode_asm_operands (body, NULL_PTR, NULL_PTR, NULL_PTR, NULL_PTR);\n+\t  = decode_asm_operands (body, NULL, NULL, NULL, NULL);\n       else\n \treturn 0;\n       do"}, {"sha": "b6a21f46ba8f04fbf43d6cfc4471a9a926755947", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1543,7 +1543,7 @@ extern int current_function_anonymous_args;\n       if (TARGET_SH3E && MODE == SFmode)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  X = copy_rtx (X);\t\t\t\t\t\t\\\n-\t  push_reload (index_rtx, NULL_RTX, &XEXP (X, 1), NULL_PTR,\t\\\n+\t  push_reload (index_rtx, NULL_RTX, &XEXP (X, 1), NULL,\t\t\\\n \t\t       INDEX_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM),\t\\\n \t\t       (TYPE));\t\t\t\t\t\t\\\n \t  goto WIN;\t\t\t\t\t\t\t\\\n@@ -1565,7 +1565,7 @@ extern int current_function_anonymous_args;\n \t  sum = gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\t\\\n \t\t\t GEN_INT (offset_base));\t\t\t\\\n \t  X = gen_rtx (PLUS, Pmode, sum, GEN_INT (offset - offset_base));\\\n-\t  push_reload (sum, NULL_RTX, &XEXP (X, 0), NULL_PTR,\t\\\n+\t  push_reload (sum, NULL_RTX, &XEXP (X, 0), NULL,\t\t\\\n \t\t       BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM),\t\\\n \t\t       (TYPE));\t\t\t\t\t\t\\\n \t  goto WIN;\t\t\t\t\t\t\t\\\n@@ -1583,7 +1583,7 @@ extern int current_function_anonymous_args;\n       /* Because this address is so complex, we know it must have\t\\\n \t been created by LEGITIMIZE_RELOAD_ADDRESS before; thus,\t\\\n \t it is already unshared, and needs no further unsharing.  */\t\\\n-      push_reload (XEXP ((X), 0), NULL_RTX, &XEXP ((X), 0), NULL_PTR,\t\\\n+      push_reload (XEXP ((X), 0), NULL_RTX, &XEXP ((X), 0), NULL,\t\\\n \t\t   BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM), (TYPE));\\\n       goto WIN;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "a8107561d2137bfee588aa3006f417c617689d4b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -2605,7 +2605,7 @@ do {                                                                    \\\n     {\t\t\t\t\t\t\t\t\t\\\n       X = gen_rtx_LO_SUM (GET_MODE (X),\t\t\t\t\t\\\n \t\t\t  gen_rtx_HIGH (GET_MODE (X), X), X);\t\t\\\n-      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL_PTR,\t\\\n+      push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t\t\\\n                    BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t\\\n                    OPNUM, TYPE);\t\t\t\t\t\\\n       goto WIN;\t\t\t\t\t\t\t\t\\"}, {"sha": "e97b76da57dcbb3245f20fb3450d54df2fa4569c", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1605,7 +1605,7 @@ expand_prologue ()\n \t      offset -= 4;\n \t    }\n \n-\t  code = recog (save_all, NULL_RTX, NULL_PTR);\n+\t  code = recog (save_all, NULL_RTX, NULL);\n \t  if (code >= 0)\n \t    {\n \t      rtx insn = emit_insn (save_all);\n@@ -1790,7 +1790,7 @@ expand_epilogue ()\n \t      offset -= 4;\n \t    }\n \n-\t  code = recog (restore_all, NULL_RTX, NULL_PTR);\n+\t  code = recog (restore_all, NULL_RTX, NULL);\n \t  \n \t  if (code >= 0)\n \t    {"}, {"sha": "7edfea63c09f0e7381568e17b081457eb44805e3", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -2382,7 +2382,7 @@ clear_by_pieces (to, len, align)\n   struct store_by_pieces data;\n \n   data.constfun = clear_by_pieces_1;\n-  data.constfundata = NULL_PTR;\n+  data.constfundata = NULL;\n   data.len = len;\n   data.to = to;\n   store_by_pieces_1 (&data, align);\n@@ -6601,7 +6601,7 @@ expand_expr (exp, target, tmode, modifier)\n       return const0_rtx;\n \n     case EXIT_EXPR:\n-      expand_exit_loop_if_false (NULL_PTR,\n+      expand_exit_loop_if_false (NULL,\n \t\t\t\t invert_truthvalue (TREE_OPERAND (exp, 0)));\n       return const0_rtx;\n "}, {"sha": "57d34f5c817b01e1e8a29177b2a2c7b57de13dbc", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -1532,8 +1532,7 @@ asm_insn_count (body)\n   if (GET_CODE (body) == ASM_INPUT)\n     template = XSTR (body, 0);\n   else\n-    template = decode_asm_operands (body, NULL_PTR, NULL_PTR,\n-\t\t\t\t    NULL_PTR, NULL_PTR);\n+    template = decode_asm_operands (body, NULL, NULL, NULL, NULL);\n \n   for (; *template; template++)\n     if (IS_ASM_LOGICAL_LINE_SEPARATOR (*template) || *template == '\\n')\n@@ -2337,7 +2336,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       new_block = 1;\n \n #ifdef FINAL_PRESCAN_LABEL\n-      FINAL_PRESCAN_INSN (insn, NULL_PTR, 0);\n+      FINAL_PRESCAN_INSN (insn, NULL, 0);\n #endif\n \n #ifdef SDB_DEBUGGING_INFO\n@@ -2539,8 +2538,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      }\n \n \t    /* Get out the operand values.  */\n-\t    string = decode_asm_operands (body, ops, NULL_PTR,\n-\t\t\t\t\t  NULL_PTR, NULL_PTR);\n+\t    string = decode_asm_operands (body, ops, NULL, NULL, NULL);\n \t    /* Inhibit aborts on what would otherwise be compiler bugs.  */\n \t    insn_noperands = noperands;\n \t    this_is_asm_operands = insn;"}, {"sha": "643345e1b13e07d22070c8c47121211de941b7a8", "filename": "gcc/gcc.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -3051,9 +3051,9 @@ process_command (argc, argv)\n \n       set_std_prefix (gcc_exec_prefix, len);\n       add_prefix (&exec_prefixes, gcc_exec_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL);\n       add_prefix (&startfile_prefixes, gcc_exec_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL);\n     }\n \n   /* COMPILER_PATH and LIBRARY_PATH have values\n@@ -3081,10 +3081,10 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp - startp] = 0;\n \t      add_prefix (&exec_prefixes, nstore, 0,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL);\n \t      add_prefix (&include_prefixes,\n \t\t\t  concat (nstore, \"include\", NULL),\n-\t\t\t  0, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t\t  0, PREFIX_PRIORITY_LAST, 0, NULL);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3116,7 +3116,7 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp - startp] = 0;\n \t      add_prefix (&startfile_prefixes, nstore, NULL,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3149,7 +3149,7 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp - startp] = 0;\n \t      add_prefix (&startfile_prefixes, nstore, NULL,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3375,14 +3375,14 @@ process_command (argc, argv)\n \t\t    {\n \t\t      if (len == 7)\n \t\t\tadd_prefix (&include_prefixes, \"include\", NULL,\n-\t\t\t\t    PREFIX_PRIORITY_B_OPT, 0, NULL_PTR);\n+\t\t\t\t    PREFIX_PRIORITY_B_OPT, 0, NULL);\n \t\t      else\n \t\t\t{\n \t\t\t  char *string = xmalloc (len + 1);\n \t\t\t  strncpy (string, value, len-7);\n \t\t\t  strcpy (string+len-7, \"include\");\n \t\t\t  add_prefix (&include_prefixes, string, NULL,\n-\t\t\t\t      PREFIX_PRIORITY_B_OPT, 0, NULL_PTR);\n+\t\t\t\t      PREFIX_PRIORITY_B_OPT, 0, NULL);\n \t\t\t}\n \t\t    }\n \t\t}\n@@ -3391,7 +3391,7 @@ process_command (argc, argv)\n \t\tadd_prefix (&startfile_prefixes, value, NULL,\n \t\t\t    PREFIX_PRIORITY_B_OPT, 0, &warn_B);\n \t\tadd_prefix (&include_prefixes, concat (value, \"include\", NULL),\n-\t\t\t    NULL, PREFIX_PRIORITY_B_OPT, 0, NULL_PTR);\n+\t\t\t    NULL, PREFIX_PRIORITY_B_OPT, 0, NULL);\n \t\tn_switches++;\n \t      }\n \t      break;\n@@ -3597,11 +3597,11 @@ process_command (argc, argv)\n \t  add_prefix (&exec_prefixes,\n \t\t      concat (gcc_exec_tooldir_prefix, \"bin\",\n \t\t\t      dir_separator_str, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL);\n \t  add_prefix (&startfile_prefixes,\n \t\t      concat (gcc_exec_tooldir_prefix, \"lib\",\n \t\t\t      dir_separator_str, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL);\n \t}\n \n       tooldir_prefix = concat (standard_exec_prefix, spec_machine,\n@@ -3611,10 +3611,10 @@ process_command (argc, argv)\n \n   add_prefix (&exec_prefixes,\n \t      concat (tooldir_prefix, \"bin\", dir_separator_str, NULL),\n-\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL);\n   add_prefix (&startfile_prefixes,\n \t      concat (tooldir_prefix, \"lib\", dir_separator_str, NULL),\n-\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL);\n \n   /* More prefixes are enabled in main, after we read the specs file\n      and determine whether this is cross-compilation or not.  */\n@@ -5643,47 +5643,47 @@ main (argc, argv)\n       if (*md_exec_prefix)\n \t{\n \t  add_prefix (&exec_prefixes, md_exec_prefix, \"GCC\",\n-\t\t      PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t      PREFIX_PRIORITY_LAST, 0, NULL);\n \t  add_prefix (&startfile_prefixes, md_exec_prefix, \"GCC\",\n-\t\t      PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t      PREFIX_PRIORITY_LAST, 0, NULL);\n \t}\n \n       if (*md_startfile_prefix)\n \tadd_prefix (&startfile_prefixes, md_startfile_prefix, \"GCC\",\n-\t\t    PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t    PREFIX_PRIORITY_LAST, 0, NULL);\n \n       if (*md_startfile_prefix_1)\n \tadd_prefix (&startfile_prefixes, md_startfile_prefix_1, \"GCC\",\n-\t\t    PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t    PREFIX_PRIORITY_LAST, 0, NULL);\n \n       /* If standard_startfile_prefix is relative, base it on\n \t standard_exec_prefix.  This lets us move the installed tree\n \t as a unit.  If GCC_EXEC_PREFIX is defined, base\n \t standard_startfile_prefix on that as well.  */\n       if (IS_ABSOLUTE_PATHNAME (standard_startfile_prefix))\n \tadd_prefix (&startfile_prefixes, standard_startfile_prefix, \"BINUTILS\",\n-\t\t    PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t    PREFIX_PRIORITY_LAST, 0, NULL);\n       else\n \t{\n \t  if (gcc_exec_prefix)\n \t    add_prefix (&startfile_prefixes,\n \t\t\tconcat (gcc_exec_prefix, machine_suffix,\n \t\t\t\tstandard_startfile_prefix, NULL),\n-\t\t\tNULL, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t\tNULL, PREFIX_PRIORITY_LAST, 0, NULL);\n \t  add_prefix (&startfile_prefixes,\n \t\t      concat (standard_exec_prefix,\n \t\t\t      machine_suffix,\n \t\t\t      standard_startfile_prefix, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL);\n \t}\n \n       add_prefix (&startfile_prefixes, standard_startfile_prefix_1,\n-\t\t  \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t  \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL);\n       add_prefix (&startfile_prefixes, standard_startfile_prefix_2,\n-\t\t  \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t  \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL);\n #if 0 /* Can cause surprises, and one can use -B./ instead.  */\n       add_prefix (&startfile_prefixes, \"./\", NULL,\n-\t\t  PREFIX_PRIORITY_LAST, 1, NULL_PTR);\n+\t\t  PREFIX_PRIORITY_LAST, 1, NULL);\n #endif\n     }\n   else\n@@ -5693,7 +5693,7 @@ main (argc, argv)\n \tadd_prefix (&startfile_prefixes,\n \t\t    concat (gcc_exec_prefix, machine_suffix,\n \t\t\t    standard_startfile_prefix, NULL),\n-\t\t    \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t\t    \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL);\n     }\n \n   /* Process any user specified specs in the order given on the command"}, {"sha": "86483168f7c6349b4d41a43bbe882664c611a7d9", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ae16082e3e505dc093b768d20f2dbb31200de/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=df4ae16082e3e505dc093b768d20f2dbb31200de", "patch": "@@ -149,7 +149,7 @@ check_asm_operands (x)\n   operands = (rtx *) alloca (noperands * sizeof (rtx));\n   constraints = (const char **) alloca (noperands * sizeof (char *));\n \n-  decode_asm_operands (x, operands, NULL_PTR, constraints, NULL_PTR);\n+  decode_asm_operands (x, operands, NULL, constraints, NULL);\n \n   for (i = 0; i < noperands; i++)\n     {"}]}