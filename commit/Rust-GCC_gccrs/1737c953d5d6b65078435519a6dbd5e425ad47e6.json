{"sha": "1737c953d5d6b65078435519a6dbd5e425ad47e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczN2M5NTNkNWQ2YjY1MDc4NDM1NTE5YTZkYmQ1ZTQyNWFkNDdlNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-12-15T20:06:12Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-15T20:06:12Z"}, "message": "gcc.c, [...]: Use American spelling in messages.\n\n\t* gcc.c, config/fr30/fr30.c, config/v850/v850-c.c, toplev.c: Use\n\tAmerican spelling in messages.\n\t* po/gcc.pot: Regenerate.\n\nch:\n\t* decl.c, parse.c, typeck.c: Use American spelling in messages.\n\ncp:\n\t* lang-options.h: Use American spelling in messages.\n\nFrom-SVN: r48047", "tree": {"sha": "ebc53bbcecda952d04e1c0bfb5531ae9907616ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc53bbcecda952d04e1c0bfb5531ae9907616ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1737c953d5d6b65078435519a6dbd5e425ad47e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1737c953d5d6b65078435519a6dbd5e425ad47e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1737c953d5d6b65078435519a6dbd5e425ad47e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1737c953d5d6b65078435519a6dbd5e425ad47e6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56deb74c8623b1218658480a8419b63772cac245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56deb74c8623b1218658480a8419b63772cac245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56deb74c8623b1218658480a8419b63772cac245"}], "stats": {"total": 7812, "additions": 4364, "deletions": 3448}, "files": [{"sha": "b93eae92048f9f6e4505e0a27f4af0ea0d1fdd20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -1,3 +1,9 @@\n+2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c, config/fr30/fr30.c, config/v850/v850-c.c, toplev.c: Use\n+\tAmerican spelling in messages.\n+\t* po/gcc.pot: Regenerate.\n+\n 2001-12-15  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md: Adjust whitespacing.  Remove"}, {"sha": "2905f87c05672e4a251e0a068143193b7fbe9d4a", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -1,3 +1,7 @@\n+2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c, parse.c, typeck.c: Use American spelling in messages.\n+\n 2001-12-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* chill.texi: Don't condition menus on @ifinfo."}, {"sha": "dc9a00fadccbc2b2e1cbb5174f2803666329ab97", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -1056,7 +1056,7 @@ do_decl (name, type, is_static, lifetime_bound, opt_init, opt_external)\n \t  if (CH_TYPE_NONVALUE_P (type))\n \t    {\n \t      error_with_decl (decl,\n-\t\t\t       \"no initialisation allowed for `%s'\");\n+\t\t\t       \"no initialization allowed for `%s'\");\n \t      temp = NULL_TREE;\n \t    }\n \t  else if (TREE_CODE (type) == REFERENCE_TYPE)"}, {"sha": "f8e0e5481dfbc1e92c037f77762b6f6eec0b35c2", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -961,7 +961,7 @@ parse_loc_declaration (in_spec_module)\n       ignoring = save_ignoring;\n     }\n   if (init_value == NULL_TREE && loc_decl && pass == 1)\n-    error (\"loc-identity declaration without initialisation\");\n+    error (\"loc-identity declaration without initialization\");\n   do_decls (names, mode,\n \t    is_static || global_bindings_p ()\n \t    /* the variable becomes STATIC if all_static_flag is set and"}, {"sha": "84ee56ebd395fd2aad04ebd2cb17b81df7b12589", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -3441,12 +3441,12 @@ smash_dummy_type (type)\n \t    }\n \t  else if (TREE_CODE (origin) == RECORD_TYPE)\n \t    {\n-\t      error (\"parameterised structures not implemented\");\n+\t      error (\"parameterized structures not implemented\");\n \t      return error_mark_node;\n \t    }\n \t  else\n \t    {\n-\t      error (\"invalid parameterised type\");\n+\t      error (\"invalid parameterized type\");\n \t      return error_mark_node;\n \t    }\n \t    "}, {"sha": "d50499150d7792400b5f2005f13a91ce22881570", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -476,7 +476,7 @@ fr30_print_operand (file, x, code)\n       /* Compute the register name of the second register in a hi/lo\n \t register pair.  */\n       if (GET_CODE (x) != REG)\n-\toutput_operand_lossage (\"fr30_print_operand: unrecognised %p code\");\n+\toutput_operand_lossage (\"fr30_print_operand: unrecognized %p code\");\n       else\n \tfprintf (file, \"r%d\", REGNO (x) + 1);\n       return;\n@@ -496,7 +496,7 @@ fr30_print_operand (file, x, code)\n \tcase GTU: fprintf (file, \"hi\"); break;\n \tcase GEU: fprintf (file, \"nc\");  break;\n \tdefault:\n-\t  output_operand_lossage (\"fr30_print_operand: unrecognised %b code\");\n+\t  output_operand_lossage (\"fr30_print_operand: unrecognized %b code\");\n \t  break;\n \t}\n       return;\n@@ -517,7 +517,7 @@ fr30_print_operand (file, x, code)\n \tcase GTU: fprintf (file, \"ls\"); break;\n \tcase GEU: fprintf (file, \"c\"); break;\n \tdefault:\n-\t  output_operand_lossage (\"fr30_print_operand: unrecognised %B code\");\n+\t  output_operand_lossage (\"fr30_print_operand: unrecognized %B code\");\n \t  break;\n \t}\n       return;"}, {"sha": "32f4882dd8722c76f26f96cfe6cb0f30e33e748b", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -163,7 +163,7 @@ ghs_pragma_section (pfile)\n       else if (streq (sect, \"zbss\"))    kind = GHS_SECTION_KIND_ZDATA;\n       else\n \t{\n-\t  warning (\"unrecognised section name \\\"%s\\\"\", sect);\n+\t  warning (\"unrecognized section name \\\"%s\\\"\", sect);\n \t  return;\n \t}\n       "}, {"sha": "b653af5f4523db53c26709f5b4d8d24ccc15848a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -1,3 +1,7 @@\n+2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* lang-options.h: Use American spelling in messages.\n+\n 2001-12-13  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (parse.h): Separate rule, just depend on parse.c."}, {"sha": "10daa409755518d202c2f4e43abf6dce23588c03", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -61,7 +61,7 @@ DEFINE_LANG_NAME (\"C++\")\n     N_(\"Scope of for-init-statement vars extends outside\") },\n   { \"-fgnu-keywords\", \"\" },\n   { \"-fno-gnu-keywords\", \n-    N_(\"Do not recognise GNU defined keywords\") },\n+    N_(\"Do not recognize GNU defined keywords\") },\n   { \"-fhandle-exceptions\", \"\" },\n   { \"-fno-handle-exceptions\", \"\" },\n   { \"-fhuge-objects\", \n@@ -84,7 +84,7 @@ DEFINE_LANG_NAME (\"C++\")\n     N_(\"Don't pedwarn about uses of Microsoft extensions\") },\n   { \"-fno-ms-extensions\", \"\" },\n   { \"-foperator-names\", \n-    N_(\"Recognise and/bitand/bitor/compl/not/or/xor\") },\n+    N_(\"Recognize and/bitand/bitor/compl/not/or/xor\") },\n   { \"-fno-operator-names\", \"\" },\n   { \"-foptional-diags\", \"\" },\n   { \"-fno-optional-diags\", \n@@ -137,7 +137,7 @@ DEFINE_LANG_NAME (\"C++\")\n     N_(\"Warn when the compiler reorders code\") },\n   { \"-Wno-reorder\", \"\" },\n   { \"-Wsynth\", \n-    N_(\"Warn when synthesis behaviour differs from Cfront\") },\n+    N_(\"Warn when synthesis behavior differs from Cfront\") },\n   { \"-Wno-synth\", \"\" },\n   { \"-Wpmf-conversions\", \"\" },\n   { \"-Wno-pmf-conversions\", "}, {"sha": "81d16754b4321fde000a7b1349b741c0055ebd9b", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -3067,7 +3067,7 @@ display_help ()\n   fputs (_(\"\\\n   -x <language>            Specify the language of the following input files\\n\\\n                            Permissable languages include: c c++ assembler none\\n\\\n-                           'none' means revert to the default behaviour of\\n\\\n+                           'none' means revert to the default behavior of\\n\\\n                            guessing the language based on the file's extension\\n\\\n \"), stdout);\n \n@@ -5027,7 +5027,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      /* Catch the case where a spec string contains something like\n \t\t '%{foo:%*}'.  ie there is no * in the pattern on the left\n \t\t hand side of the :.  */\n-\t      error (\"spec failure: '%%*' has not been initialised by pattern match\");\n+\t      error (\"spec failure: '%%*' has not been initialized by pattern match\");\n \t    break;\n \n \t    /* Process a string found as the value of a spec given by name.\n@@ -5179,7 +5179,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    break;\n \n \t  default:\n-\t    error (\"spec failure: unrecognised spec option '%c'\", c);\n+\t    error (\"spec failure: unrecognized spec option '%c'\", c);\n \t    break;\n \t  }\n \tbreak;"}, {"sha": "c16b46319d7f596141be381d7942e09edf79c3a2", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 4323, "deletions": 3421, "changes": 7744, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6"}, {"sha": "910296b4d8a64a9d9be73ed178ee58abd5542829", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1737c953d5d6b65078435519a6dbd5e425ad47e6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1737c953d5d6b65078435519a6dbd5e425ad47e6", "patch": "@@ -997,11 +997,11 @@ lang_independent_options f_options[] =\n   {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n    N_(\"When running CSE, follow conditional jumps\") },\n   {\"expensive-optimizations\", &flag_expensive_optimizations, 1,\n-   N_(\"Perform a number of minor, expensive optimisations\") },\n+   N_(\"Perform a number of minor, expensive optimizations\") },\n   {\"thread-jumps\", &flag_thread_jumps, 1,\n-   N_(\"Perform jump threading optimisations\") },\n+   N_(\"Perform jump threading optimizations\") },\n   {\"strength-reduce\", &flag_strength_reduce, 1,\n-   N_(\"Perform strength reduction optimisations\") },\n+   N_(\"Perform strength reduction optimizations\") },\n   {\"unroll-loops\", &flag_unroll_loops, 1,\n    N_(\"Perform loop unrolling when iteration count is known\") },\n   {\"unroll-all-loops\", &flag_unroll_all_loops, 1,\n@@ -1015,7 +1015,7 @@ lang_independent_options f_options[] =\n   {\"writable-strings\", &flag_writable_strings, 1,\n    N_(\"Store strings in writable data section\") },\n   {\"peephole\", &flag_no_peephole, 0,\n-   N_(\"Enable machine specific peephole optimisations\") },\n+   N_(\"Enable machine specific peephole optimizations\") },\n   {\"force-mem\", &flag_force_mem, 1,\n    N_(\"Copy memory operands into registers before using\") },\n   {\"force-addr\", &flag_force_addr, 1,\n@@ -1049,9 +1049,9 @@ lang_independent_options f_options[] =\n   {\"gcse-sm\", &flag_gcse_sm, 1,\n    N_(\"Perform store motion after global subexpression elimination\") },\n   {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n-   N_(\"Run CSE pass after loop optimisations\") },\n+   N_(\"Run CSE pass after loop optimizations\") },\n   {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n-   N_(\"Run the loop optimiser twice\") },\n+   N_(\"Run the loop optimizer twice\") },\n   {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1,\n    N_(\"Delete useless null pointer checks\") },\n   {\"pretend-float\", &flag_pretend_float, 1,\n@@ -1104,9 +1104,9 @@ lang_independent_options f_options[] =\n   {\"verbose-asm\", &flag_verbose_asm, 1,\n    N_(\"Add extra commentry to assembler output\") },\n   {\"gnu-linker\", &flag_gnu_linker, 1,\n-   N_(\"Output GNU ld formatted global initialisers\") },\n+   N_(\"Output GNU ld formatted global initializers\") },\n   {\"regmove\", &flag_regmove, 1,\n-   N_(\"Enables a register move optimisation\") },\n+   N_(\"Enables a register move optimization\") },\n   {\"optimize-register-move\", &flag_regmove, 1,\n    N_(\"Do the full regmove optimization pass\") },\n   {\"pack-struct\", &flag_pack_struct, 1,\n@@ -1211,10 +1211,10 @@ documented_lang_options[] =\n \n   { \"-fasm\", \"\" },\n   { \"-fno-asm\", \n-    N_(\"Do not recognise the 'asm' keyword\") },\n+    N_(\"Do not recognize the 'asm' keyword\") },\n   { \"-fbuiltin\", \"\" },\n   { \"-fno-builtin\", \n-    N_(\"Do not recognise any built in functions\") },\n+    N_(\"Do not recognize any built in functions\") },\n   { \"-fhosted\", \n     N_(\"Assume normal C execution environment\") },\n   { \"-fno-hosted\", \"\" },\n@@ -1297,7 +1297,7 @@ documented_lang_options[] =\n     N_(\"Warn about suspicious declarations of main\") },\n   { \"-Wno-main\", \"\" },\n   { \"-Wmissing-braces\",\n-    N_(\"Warn about possibly missing braces around initialisers\") },\n+    N_(\"Warn about possibly missing braces around initializers\") },\n   { \"-Wno-missing-braces\", \"\" },\n   { \"-Wmissing-declarations\",\n     N_(\"Warn about global funcs without previous declarations\") },\n@@ -3578,8 +3578,8 @@ display_help ()\n \t\tf_options[i].string, _(description));\n     }\n \n-  printf (_(\"  -O[number]              Set optimisation level to [number]\\n\"));\n-  printf (_(\"  -Os                     Optimise for space rather than speed\\n\"));\n+  printf (_(\"  -O[number]              Set optimization level to [number]\\n\"));\n+  printf (_(\"  -Os                     Optimize for space rather than speed\\n\"));\n   for (i = LAST_PARAM; i--;)\n     {\n       const char *description = compiler_params[i].help;"}]}