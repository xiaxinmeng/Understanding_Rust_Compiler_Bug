{"sha": "af3c5588abd4ddfd04435045fc7a526a0d1b141f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzYzU1ODhhYmQ0ZGRmZDA0NDM1MDQ1ZmM3YTUyNmEwZDFiMTQxZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-22T12:11:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-22T12:11:59Z"}, "message": "(T_ST): New macro.\n\n(scan_char_table): With s, c and [, allow `a' flag.\n(print_char_table): Accept Z and m codes.\n(check_format_info): Handle the `a' flag.\n\nFrom-SVN: r6258", "tree": {"sha": "bc6c0e1502d778eb870a64875e5a3fa191a06886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc6c0e1502d778eb870a64875e5a3fa191a06886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af3c5588abd4ddfd04435045fc7a526a0d1b141f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3c5588abd4ddfd04435045fc7a526a0d1b141f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3c5588abd4ddfd04435045fc7a526a0d1b141f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3c5588abd4ddfd04435045fc7a526a0d1b141f/comments", "author": null, "committer": null, "parents": [{"sha": "3b0ad9f9c4588e0443e5d9c05ea1e8e1b54ec88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0ad9f9c4588e0443e5d9c05ea1e8e1b54ec88e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0ad9f9c4588e0443e5d9c05ea1e8e1b54ec88e"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "968d369269e373c7f07e6cdb5e83b1aa85aedc20", "filename": "gcc/c-common.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3c5588abd4ddfd04435045fc7a526a0d1b141f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3c5588abd4ddfd04435045fc7a526a0d1b141f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=af3c5588abd4ddfd04435045fc7a526a0d1b141f", "patch": "@@ -357,6 +357,7 @@ decl_attributes (decl, attributes)\n #define T_C\t&char_type_node\n #define T_V\t&void_type_node\n #define T_W\t&wchar_type_node\n+#define T_ST    &size_type\n \n typedef struct {\n   char *format_chars;\n@@ -380,6 +381,9 @@ static format_char_info print_char_table[] = {\n   { \"di\",\t0,\tT_I,\tT_I,\tT_L,\tNULL,\t\"-wp0 +\"\t},\n   { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\t\"-wp0#\"\t\t},\n   { \"u\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\t\"-wp0\"\t\t},\n+/* Two GNU extensions.  */\n+  { \"Z\",\t0,\tT_ST,\tNULL,\tNULL,\tNULL,\t\"-wp0\"\t\t},\n+  { \"m\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\t\"-wp\"\t\t},\n   { \"feEgG\",\t0,\tT_D,\tNULL,\tNULL,\tT_LD,\t\"-wp0 +#\"\t},\n   { \"c\",\t0,\tT_I,\tNULL,\tT_W,\tNULL,\t\"-w\"\t\t},\n   { \"C\",\t0,\tT_W,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n@@ -394,8 +398,8 @@ static format_char_info scan_char_table[] = {\n   { \"di\",\t1,\tT_I,\tT_S,\tT_L,\tNULL,\t\"*\"\t},\n   { \"ouxX\",\t1,\tT_UI,\tT_US,\tT_UL,\tNULL,\t\"*\"\t},\t\n   { \"efgEG\",\t1,\tT_F,\tNULL,\tT_D,\tT_LD,\t\"*\"\t},\n-  { \"sc\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\t\"*\"\t},\n-  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"sc\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\t\"*a\"\t},\n+  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n   { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n   { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n   { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n@@ -583,6 +587,7 @@ check_format_info (info, params)\n   first_fillin_param = params;\n   while (1)\n     {\n+      int aflag;\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - TREE_STRING_POINTER (format_tree) != format_length)\n@@ -748,6 +753,12 @@ check_format_info (info, params)\n \tlength_char = *format_chars++;\n       else\n \tlength_char = 0;\n+      aflag = 0;\n+      if (*format_chars == 'a')\n+\t{\n+\t  aflag = 1;\n+\t  format_chars++;\n+\t}\n       if (suppressed && length_char != 0)\n \t{\n \t  sprintf (message,\n@@ -791,6 +802,12 @@ check_format_info (info, params)\n \t\t   format_char);\n \t  warning (message);\n \t}\n+      if (aflag && index (fci->flag_chars, 'a') == 0)\n+\t{\n+\t  sprintf (message, \"`a' flag used with `%c' format\",\n+\t\t   format_char);\n+\t  warning (message);\n+\t}\n       if (info->is_scan && format_char == '[')\n \t{\n \t  /* Skip over scan set, in case it happens to have '%' in it.  */"}]}