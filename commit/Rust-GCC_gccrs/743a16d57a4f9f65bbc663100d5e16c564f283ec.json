{"sha": "743a16d57a4f9f65bbc663100d5e16c564f283ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzYTE2ZDU3YTRmOWY2NWJiYzY2MzEwMGQ1ZTE2YzU2NGYyODNlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-18T11:37:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-18T11:37:02Z"}, "message": "Make assemble_real generate canonical CONST_INTs\n\nassemble_real used GEN_INT to create integers directly from the\nlongs returned by real_to_target.  assemble_integer then went on\nto interpret the const_ints as though they had the mode corresponding\nto the accompanying size parameter:\n\n      imode = mode_for_size (size * BITS_PER_UNIT, mclass, 0).require ();\n\n      for (i = 0; i < size; i += subsize)\n\t{\n\t  rtx partial = simplify_subreg (omode, x, imode, i);\n\nBut in the assemble_real case, X might not be canonical for IMODE.\n\nIf the interface to assemble_integer is supposed to allow outputting\n(say) the low 4 bytes of a DImode integer, then the simplify_subreg\nabove is wrong.  But if the number of bytes passed to assemble_integer\nis supposed to be the number of bytes that the integer actually contains,\nassemble_real is wrong.\n\nThis patch takes the latter interpretation and makes assemble_real\ngenerate const_ints that are canonical for the number of bytes passed.\n\nThe flip_storage_order handling assumes that each long is a full\nSImode, which e.g. excludes BITS_PER_UNIT != 8 and float formats\nwhose memory size is not a multiple of 32 bits (which includes\nHFmode at least).  The patch therefore leaves that code alone.\nIf interpreting each integer as SImode is correct, the const_ints\nthat it generates are also correct.\n\n2019-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* varasm.c (assemble_real): Generate canonical const_ints.\n\nFrom-SVN: r275873", "tree": {"sha": "c8f6533dc06f9ec92b25c46db395fd42100eaf58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8f6533dc06f9ec92b25c46db395fd42100eaf58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/743a16d57a4f9f65bbc663100d5e16c564f283ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743a16d57a4f9f65bbc663100d5e16c564f283ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743a16d57a4f9f65bbc663100d5e16c564f283ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743a16d57a4f9f65bbc663100d5e16c564f283ec/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3d09469041ab66ee1e12c2f3e4de33c4bf96732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d09469041ab66ee1e12c2f3e4de33c4bf96732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d09469041ab66ee1e12c2f3e4de33c4bf96732"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "a6869cfcbdbb7bf75858c73c2ce398890ae5dcab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743a16d57a4f9f65bbc663100d5e16c564f283ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743a16d57a4f9f65bbc663100d5e16c564f283ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=743a16d57a4f9f65bbc663100d5e16c564f283ec", "patch": "@@ -1,3 +1,7 @@\n+2019-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* varasm.c (assemble_real): Generate canonical const_ints.\n+\n 2019-09-18  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/91763"}, {"sha": "57365ad2e761a0f3e91f7b930eabb379054fc965", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743a16d57a4f9f65bbc663100d5e16c564f283ec/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743a16d57a4f9f65bbc663100d5e16c564f283ec/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=743a16d57a4f9f65bbc663100d5e16c564f283ec", "patch": "@@ -2873,25 +2873,27 @@ assemble_real (REAL_VALUE_TYPE d, scalar_float_mode mode, unsigned int align,\n   real_to_target (data, &d, mode);\n \n   /* Put out the first word with the specified alignment.  */\n+  unsigned int chunk_nunits = MIN (nunits, units_per);\n   if (reverse)\n     elt = flip_storage_order (SImode, gen_int_mode (data[nelts - 1], SImode));\n   else\n-    elt = GEN_INT (data[0]);\n-  assemble_integer (elt, MIN (nunits, units_per), align, 1);\n-  nunits -= units_per;\n+    elt = GEN_INT (sext_hwi (data[0], chunk_nunits * BITS_PER_UNIT));\n+  assemble_integer (elt, chunk_nunits, align, 1);\n+  nunits -= chunk_nunits;\n \n   /* Subsequent words need only 32-bit alignment.  */\n   align = min_align (align, 32);\n \n   for (int i = 1; i < nelts; i++)\n     {\n+      chunk_nunits = MIN (nunits, units_per);\n       if (reverse)\n \telt = flip_storage_order (SImode,\n \t\t\t\t  gen_int_mode (data[nelts - 1 - i], SImode));\n       else\n-\telt = GEN_INT (data[i]);\n-      assemble_integer (elt, MIN (nunits, units_per), align, 1);\n-      nunits -= units_per;\n+\telt = GEN_INT (sext_hwi (data[i], chunk_nunits * BITS_PER_UNIT));\n+      assemble_integer (elt, chunk_nunits, align, 1);\n+      nunits -= chunk_nunits;\n     }\n }\n \f"}]}