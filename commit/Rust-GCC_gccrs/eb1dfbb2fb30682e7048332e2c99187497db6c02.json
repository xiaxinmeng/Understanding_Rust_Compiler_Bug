{"sha": "eb1dfbb2fb30682e7048332e2c99187497db6c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxZGZiYjJmYjMwNjgyZTcwNDgzMzJlMmM5OTE4NzQ5N2RiNmMwMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-17T20:12:21Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-17T20:12:21Z"}, "message": "c-decl.c: Fix typos in several comments.\n\n\t* c-decl.c: Fix typos in several comments.  Remove all\n\t#if 0 blocks; reindent as needed.  Remove unused argument\n\tto declare_parm_level; all callers changed.\n\t* c-parse.in: Update calls to declare_parm_level.  Avoid\n\tissuing a double warning in some circumstances.\n\t* c-typeck.c: Update calls to declare_parm_level.\n\t* c-tree.h: Update prototype of declare_parm_level.\n\n\t* c-pragma.c (apply_pragma_weak): Don't complain about a\n\tredundant #pragma weak.\n\n\t* objc/objc-act.c (forward_declare_categories,\n\tbuild_selector_reference_decl, build_class_reference_decl,\n\tbuild_objc_string_decl, synth_forward_declarations,\n\tbuild_protocol_reference): Set TREE_PUBLIC on synthetic\n\tforward decl to 0, consistent with eventual definition.\n\tCorrect comments to match.\n\ncp:\n\t* pt.c (get_bindings): Make definition consistent with\n\tforward declaration.\n\nFrom-SVN: r69519", "tree": {"sha": "039fb91b57a3220b33a7ad55edc6af0d1c8d74c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039fb91b57a3220b33a7ad55edc6af0d1c8d74c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1dfbb2fb30682e7048332e2c99187497db6c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1dfbb2fb30682e7048332e2c99187497db6c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1dfbb2fb30682e7048332e2c99187497db6c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1dfbb2fb30682e7048332e2c99187497db6c02/comments", "author": null, "committer": null, "parents": [{"sha": "78ff95dc17c157fafe2169b9e0bb47c2417dce85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ff95dc17c157fafe2169b9e0bb47c2417dce85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ff95dc17c157fafe2169b9e0bb47c2417dce85"}], "stats": {"total": 233, "additions": 85, "deletions": 148}, "files": [{"sha": "72dec0501fb68dba2483c30b0b667d3a5b088432", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -1,5 +1,23 @@\n 2003-07-17  Zack Weinberg  <zack@codesourcery.com>\n \n+\t* c-decl.c: Fix typos in several comments.  Remove all\n+\t#if 0 blocks; reindent as needed.  Remove unused argument\n+\tto declare_parm_level; all callers changed.\n+\t* c-parse.in: Update calls to declare_parm_level.  Avoid\n+\tissuing a double warning in some circumstances.\n+\t* c-typeck.c: Update calls to declare_parm_level.\n+\t* c-tree.h: Update prototype of declare_parm_level.\n+\n+\t* c-pragma.c (apply_pragma_weak): Don't complain about a\n+\tredundant #pragma weak.\n+\n+\t* objc/objc-act.c (forward_declare_categories,\n+\tbuild_selector_reference_decl, build_class_reference_decl,\n+\tbuild_objc_string_decl, synth_forward_declarations,\n+\tbuild_protocol_reference): Set TREE_PUBLIC on synthetic\n+\tforward decl to 0, consistent with eventual definition.\n+\tCorrect comments to match.\n+\n \t* fixinc/inclhack.def (solaris_mutex_init_2): Escape braces\n \tin regexp that don't form a range expression.\n \t* fixinc/fixincl.def: Regenerate."}, {"sha": "9647a9e77c30081d0162a652d618731f968433c4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 36, "deletions": 125, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -83,26 +83,28 @@ static tree enum_next_value;\n static int enum_overflow;\n \n /* Parsing a function declarator leaves a list of parameter names\n-   or a chain or parameter decls here.  */\n+   or a chain of parameter decls here.  */\n \n static tree last_function_parms;\n \n-/* Parsing a function declarator leaves here a chain of structure\n-   and enum types declared in the parmlist.  */\n+/* Parsing a function declarator leaves a chain of structure\n+   and enum types declared in the parmlist here.  */\n \n static tree last_function_parm_tags;\n \n /* After parsing the declarator that starts a function definition,\n-   `start_function' puts here the list of parameter names or chain of decls.\n-   `store_parm_decls' finds it here.  */\n+   `start_function' puts the list of parameter names or chain of decls here\n+   for `store_parm_decls' to find.  */\n \n static tree current_function_parms;\n \n /* Similar, for last_function_parm_tags.  */\n+\n static tree current_function_parm_tags;\n \n /* Similar, for the file and line that the prototype came from if this is\n    an old-style definition.  */\n+\n static location_t current_function_prototype_locus;\n \n /* The current statement tree.  */\n@@ -401,13 +403,10 @@ kept_level_p (void)\n \t  || current_binding_level->tags != 0);\n }\n \n-/* Identify this binding level as a level of parameters.\n-   DEFINITION_FLAG is 1 for a definition, 0 for a declaration.\n-   But it turns out there is no way to pass the right value for\n-   DEFINITION_FLAG, so we ignore it.  */\n+/* Identify this binding level as a level of parameters.  */\n \n void\n-declare_parm_level (int definition_flag ATTRIBUTE_UNUSED)\n+declare_parm_level (void)\n {\n   current_binding_level->parm_flag = 1;\n }\n@@ -2659,14 +2658,6 @@ start_decl (tree declarator, tree declspecs, int initialized, tree attributes)\n \n   if (initialized)\n     {\n-#if 0\n-      /* Seems redundant with grokdeclarator.  */\n-      if (current_binding_level != global_binding_level\n-\t  && DECL_EXTERNAL (decl)\n-\t  && TREE_CODE (decl) != FUNCTION_DECL)\n-\twarning (\"declaration of `%s' has `extern' and is initialized\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (decl)));\n-#endif\n       DECL_EXTERNAL (decl) = 0;\n       if (current_binding_level == global_binding_level)\n \tTREE_STATIC (decl) = 1;\n@@ -3020,17 +3011,6 @@ push_parm_decl (tree parm)\n \t\t\t TREE_PURPOSE (TREE_PURPOSE (parm)), PARM, 0);\n   decl_attributes (&decl, TREE_VALUE (parm), 0);\n \n-#if 0\n-  if (DECL_NAME (decl))\n-    {\n-      tree olddecl;\n-      olddecl = lookup_name (DECL_NAME (decl));\n-      if (pedantic && olddecl != 0 && TREE_CODE (olddecl) == TYPE_DECL)\n-\tpedwarn_with_decl (decl,\n-\t\t\t   \"ISO C forbids parameter `%s' shadowing typedef\");\n-    }\n-#endif\n-\n   decl = pushdecl (decl);\n \n   immediate_size_expand = old_immediate_size_expand;\n@@ -3930,14 +3910,6 @@ grokdeclarator (tree declarator, tree declspecs,\n \t  if (pedantic && !COMPLETE_TYPE_P (type))\n \t    pedwarn (\"array type has incomplete element type\");\n \n-#if 0\n-\t  /* We shouldn't have a function type here at all!\n-\t     Functions aren't allowed as array elements.  */\n-\t  if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n-\t      && (constp || volatilep))\n-\t    pedwarn (\"ISO C forbids const or volatile function types\");\n-#endif\n-\n \t  /* Build the array type itself, then merge any constancy or\n \t     volatility into the target type.  We must do it in this order\n \t     to ensure that the TYPE_MAIN_VARIANT field of the array type\n@@ -4303,10 +4275,6 @@ grokdeclarator (tree declarator, tree declspecs,\n \t    type = build_array_type (c_build_qualified_type (TREE_TYPE (type),\n \t\t\t\t\t\t\t     type_quals),\n \t\t\t\t     TYPE_DOMAIN (type));\n-#if 0\n-\t    /* Leave the field const or volatile as well.  */\n-\t    type_quals = TYPE_UNQUALIFIED;\n-#endif\n \t  }\n \tdecl = build_decl (FIELD_DECL, declarator, type);\n \tDECL_NONADDRESSABLE_P (decl) = bitfield;\n@@ -4410,9 +4378,6 @@ grokdeclarator (tree declarator, tree declspecs,\n \t\t\t\t\t\t\t     type_quals),\n \t\t\t\t     TYPE_DOMAIN (type));\n \t    TYPE_ALIGN (type) = saved_align;\n-#if 0 /* Leave the variable const or volatile as well.  */\n-\t    type_quals = TYPE_UNQUALIFIED;\n-#endif\n \t  }\n \telse if (type_quals)\n \t  type = c_build_qualified_type (type, type_quals);\n@@ -4533,62 +4498,36 @@ grokparms (tree parms_info, int funcdef_flag)\n     {\n       tree parm;\n       tree typelt;\n-      /* We no longer test FUNCDEF_FLAG.\n-\t If the arg types are incomplete in a declaration,\n+      /* If the arg types are incomplete in a declaration,\n \t they must include undefined tags.\n \t These tags can never be defined in the scope of the declaration,\n \t so the types can never be completed,\n \t and no call can be compiled successfully.  */\n-#if 0\n-      /* In a fcn definition, arg types must be complete.  */\n-      if (funcdef_flag)\n-#endif\n-\tfor (parm = last_function_parms, typelt = first_parm;\n-\t     parm;\n-\t     parm = TREE_CHAIN (parm))\n-\t  /* Skip over any enumeration constants declared here.  */\n-\t  if (TREE_CODE (parm) == PARM_DECL)\n-\t    {\n-\t      /* Barf if the parameter itself has an incomplete type.  */\n-\t      tree type = TREE_VALUE (typelt);\n-\t      if (type == error_mark_node)\n-\t\tcontinue;\n-\t      if (!COMPLETE_TYPE_P (type))\n-\t\t{\n-\t\t  if (funcdef_flag && DECL_NAME (parm) != 0)\n-\t\t    error (\"parameter `%s' has incomplete type\",\n-\t\t\t   IDENTIFIER_POINTER (DECL_NAME (parm)));\n-\t\t  else\n-\t\t    warning (\"parameter has incomplete type\");\n-\t\t  if (funcdef_flag)\n-\t\t    {\n-\t\t      TREE_VALUE (typelt) = error_mark_node;\n-\t\t      TREE_TYPE (parm) = error_mark_node;\n-\t\t    }\n-\t\t}\n-#if 0\n-\t      /* This has been replaced by parm_tags_warning, which\n-\t\t uses a more accurate criterion for what to warn\n-\t\t about.  */\n-\t      else\n-\t\t{\n-\t\t  /* Now warn if is a pointer to an incomplete type.  */\n-\t\t  while (TREE_CODE (type) == POINTER_TYPE\n-\t\t\t || TREE_CODE (type) == REFERENCE_TYPE)\n-\t\t    type = TREE_TYPE (type);\n-\t\t  type = TYPE_MAIN_VARIANT (type);\n-\t\t  if (!COMPLETE_TYPE_P (type))\n-\t\t    {\n-\t\t      if (DECL_NAME (parm) != 0)\n-\t\t\twarning (\"parameter `%s' points to incomplete type\",\n-\t\t\t\t IDENTIFIER_POINTER (DECL_NAME (parm)));\n-\t\t      else\n-\t\t\twarning (\"parameter points to incomplete type\");\n-\t\t    }\n-\t\t}\n-#endif\n-\t      typelt = TREE_CHAIN (typelt);\n-\t    }\n+      for (parm = last_function_parms, typelt = first_parm;\n+\t   parm;\n+\t   parm = TREE_CHAIN (parm))\n+\t/* Skip over any enumeration constants declared here.  */\n+\tif (TREE_CODE (parm) == PARM_DECL)\n+\t  {\n+\t    /* Barf if the parameter itself has an incomplete type.  */\n+\t    tree type = TREE_VALUE (typelt);\n+\t    if (type == error_mark_node)\n+\t      continue;\n+\t    if (!COMPLETE_TYPE_P (type))\n+\t      {\n+\t\tif (funcdef_flag && DECL_NAME (parm) != 0)\n+\t\t  error (\"parameter `%s' has incomplete type\",\n+\t\t\t IDENTIFIER_POINTER (DECL_NAME (parm)));\n+\t\telse\n+\t\t  warning (\"parameter has incomplete type\");\n+\t\tif (funcdef_flag)\n+\t\t  {\n+\t\t    TREE_VALUE (typelt) = error_mark_node;\n+\t\t    TREE_TYPE (parm) = error_mark_node;\n+\t\t  }\n+\t      }\n+\t    typelt = TREE_CHAIN (typelt);\n+\t  }\n \n       return first_parm;\n     }\n@@ -5732,7 +5671,7 @@ start_function (tree declspecs, tree declarator, tree attributes)\n   current_function_decl = pushdecl (decl1);\n \n   pushlevel (0);\n-  declare_parm_level (1);\n+  declare_parm_level ();\n \n   make_decl_rtl (current_function_decl, NULL);\n \n@@ -5864,22 +5803,6 @@ store_parm_decls (void)\n \t and record in the function.  */\n       DECL_ARGUMENTS (fndecl) = getdecls ();\n \n-#if 0\n-      /* If this function takes a variable number of arguments,\n-\t add a phony parameter to the end of the parm list,\n-\t to represent the position of the first unnamed argument.  */\n-      if (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (fndecl))))\n-\t  != void_type_node)\n-\t{\n-\t  tree dummy = build_decl (PARM_DECL, NULL_TREE, void_type_node);\n-\t  /* Let's hope the address of the unnamed parm\n-\t     won't depend on its type.  */\n-\t  TREE_TYPE (dummy) = integer_type_node;\n-\t  DECL_ARG_TYPE (dummy) = integer_type_node;\n-\t  DECL_ARGUMENTS (fndecl) = chainon (DECL_ARGUMENTS (fndecl), dummy);\n-\t}\n-#endif\n-\n       /* Now pushdecl the enum constants.  */\n       for (parm = others; parm; parm = next)\n \t{\n@@ -6142,12 +6065,6 @@ store_parm_decls (void)\n \n   keep_next_if_subblocks = 1;\n \n-  /* ??? This might be an improvement,\n-     but needs to be thought about some more.  */\n-#if 0\n-  keep_next_level_flag = 1;\n-#endif\n-\n   /* Write a record describing this function definition to the prototypes\n      file (if requested).  */\n \n@@ -6216,12 +6133,6 @@ finish_function (int nested, int can_defer_p)\n       poplevel (1, 0, 1);\n     }\n \n-#if 0\n-  /* This caused &foo to be of type ptr-to-const-function which then\n-     got a warning when stored in a ptr-to-function variable.  */\n-  TREE_READONLY (fndecl) = 1;\n-#endif\n-\n   BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n \n   /* Must mark the RESULT_DECL as being in this function.  */"}, {"sha": "1764558f8036711c1da3a80b53e8905806329823", "filename": "gcc/c-parse.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -1842,7 +1842,7 @@ component_decl:\n \t| declspecs_nosc_nots\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ISO C forbids member declarations with no members\");\n-\t\t  shadow_tag($1);\n+\t\t  shadow_tag_warned ($1, pedantic);\n \t\t  $$ = NULL_TREE; }\n \t| error\n \t\t{ $$ = NULL_TREE; }\n@@ -2482,7 +2482,7 @@ parmlist:\n \t  maybe_attribute\n \t\t{ pushlevel (0);\n \t\t  clear_parm_order ();\n-\t\t  declare_parm_level (0); }\n+\t\t  declare_parm_level (); }\n \t  parmlist_1\n \t\t{ $$ = $3;\n \t\t  parmlist_tags_warning ();\n@@ -2604,7 +2604,7 @@ parmlist_or_identifiers:\n \t  maybe_attribute\n \t\t{ pushlevel (0);\n \t\t  clear_parm_order ();\n-\t\t  declare_parm_level (1); }\n+\t\t  declare_parm_level (); }\n \t  parmlist_or_identifiers_1\n \t\t{ $$ = $3;\n \t\t  parmlist_tags_warning ();"}, {"sha": "bd53c806dd75c018e75ce3d4f14ee0e7edca0c72", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -273,6 +273,7 @@ apply_pragma_weak (tree decl, tree value)\n     }\n \n   if (SUPPORTS_WEAK && DECL_EXTERNAL (decl) && TREE_USED (decl)\n+      && !DECL_WEAK (decl) /* don't complain about a redundant #pragma */\n       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n     warning_with_decl (decl, \"applying #pragma weak `%s' after first use results in unspecified behavior\");\n "}, {"sha": "ca071a99a8f716da886ef3dfe765074812ac56a8", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -191,7 +191,7 @@ extern tree build_enumerator (tree, tree);\n extern void check_for_loop_decls (void);\n extern void clear_parm_order (void);\n extern int  complete_array_type (tree, tree, int);\n-extern void declare_parm_level (int);\n+extern void declare_parm_level (void);\n extern tree define_label (location_t, tree);\n extern void finish_decl (tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);"}, {"sha": "43b5797b7a7cbe65d899cc60ea9dbeebecae7eb3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -375,7 +375,7 @@ common_type (tree t1, tree t2)\n \t   lists, argument by argument.  */\n \n \tpushlevel (0);\n-\tdeclare_parm_level (1);\n+\tdeclare_parm_level ();\n \n \tlen = list_length (p1);\n \tnewargs = 0;"}, {"sha": "a7a5826c21f9c9b1d6d81754c23a2de84fc02e79", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -1,3 +1,8 @@\n+2003-07-17  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* pt.c (get_bindings): Make definition consistent with\n+\tforward declaration.\n+\n 2003-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/7809\n@@ -6,7 +11,7 @@\n 2003-07-17  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tPR c++/10668\n-\t* typeck.c (build_class_member_access_expr): Improve diagnostic. \n+\t* typeck.c (build_class_member_access_expr): Improve diagnostic.\n \n 2003-07-16  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -43,7 +48,7 @@\n \t(tsubst_expr): Tweak use of DECL_PRETTY_FUNCTION_P.\n \t* semantics.c (finish_id_expression): Use\n \tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n-\t\n+\n 2003-07-16  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang-options.h: Remove.\n@@ -95,7 +100,7 @@\n \t* friend.c (do_friend): Likewise.\n \t* init.c (build_offset_ref): Likewise.\n \t* lex.c (unqualified_fn_lookup_error): Use pedwarn.  Do not create\n-\tLOOKUP_EXPRs \n+\tLOOKUP_EXPRs\n \t* mangle.c (write_expression): Remove support for LOOKUP_EXPR.\n \t* parser.c (cp_parser_postfix_expression): Modify Koenig lookup\n \ttest.\n@@ -116,7 +121,7 @@\n \t(finish_fname): Likewise.\n \t(finish_id_expression): Likewise.\n \t* tree.c (is_aggr_type_2): Remove.\n-\t\n+\n 2003-07-16  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tPR c++/11531\n@@ -133,8 +138,8 @@\n \tPR c++/11509\n \t* pt.c (dependent_scope_ref_p): New function.\n \t(value_dependent_expression_p): Use it.\n-\t(type_dependent_expression_p): Likewise.\t\n-\t\n+\t(type_dependent_expression_p): Likewise.\n+\n \t* pt.c (tsubst_friend_function): Use reregister_specialization.\n \n \tPR c++/7019\n@@ -152,7 +157,7 @@\n \n \tPR c++/11510\n \t* call.c (op_error): Properly format  REALPART_EXPR and\n-\tIMAGPART_EXPR. \n+\tIMAGPART_EXPR.\n \t* error.c (dump_expr): Likewise.\n \n 2003-07-14  Gabriel Dos Reis <gdr@integrable-solutions.net>\n@@ -185,7 +190,7 @@\n \t* search.c (lookup_base): Use DECL_SELF_REFERENCE_P.\n \n \t* pt.c (reregister_specialization): Fix thinko in previous change.\n-\t\n+\n \t* cp-tree.h (cp_id_kind): New type.\n \t(unqualified_name_lookup_error): Change prototype.\n \t(unqualified_fn_lookup_error): New function.\n@@ -225,7 +230,7 @@\n \t(regenerate_decl_from_template): Use reregister_specialization.\n \t* semantics.c (perform_koenig_lookup): New function.\n \t(finish_id_expression): Likewise.\n-\t\n+\n 2003-07-13  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* pt.c (push_access_scope_real): Remove.\n@@ -306,7 +311,7 @@\n \t* cp-tree.h (break_out_calls): Remove declaration.\n \t* tree.c (break_out_calls): Remove.\n \t* typeck.c (build_modify_expr): Avoid invalid sharing of trees.\n-\t\n+\n 2003-07-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++ 9483"}, {"sha": "bbce47e769aeb0c3f5b12d19bef589168f65e890", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -10028,7 +10028,7 @@ get_bindings_real (tree fn,\n \n /* For most uses, we want to check the return type.  */\n \n-tree \n+static tree \n get_bindings (tree fn, tree decl, tree explicit_args)\n {\n   return get_bindings_real (fn, decl, explicit_args, 1, DEDUCE_EXACT, -1);"}, {"sha": "3f451b0f5992427b8708807a57e353711cdc9eaf", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1dfbb2fb30682e7048332e2c99187497db6c02/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=eb1dfbb2fb30682e7048332e2c99187497db6c02", "patch": "@@ -1591,6 +1591,7 @@ forward_declare_categories ()\n \t  impent->class_decl\n \t    = create_builtin_decl (VAR_DECL, objc_category_template,\n \t\t\t\t   IDENTIFIER_POINTER (synth_id_with_class_suffix (\"_OBJC_CATEGORY\", objc_implementation_context)));\n+\t  TREE_PUBLIC (impent->class_decl) = 0;\n \t}\n     }\n   objc_implementation_context = sav;\n@@ -1975,7 +1976,7 @@ build_selector_reference_decl ()\n \n   decl = build_decl (VAR_DECL, ident, selector_type);\n   DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n+  TREE_PUBLIC (decl) = 0;\n   TREE_USED (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n@@ -2190,7 +2191,7 @@ build_class_reference_decl ()\n \n   decl = build_decl (VAR_DECL, ident, objc_class_type);\n   DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n+  TREE_PUBLIC (decl) = 0;\n   TREE_USED (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_CONTEXT (decl) = 0;\n@@ -2327,7 +2328,7 @@ build_objc_string_decl (section)\n \n   decl = build_decl (VAR_DECL, ident, build_array_type (char_type_node, 0));\n   DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n+  TREE_PUBLIC (decl) = 0;\n   TREE_USED (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   TREE_CONSTANT (decl) = 1;\n@@ -3460,7 +3461,7 @@ synth_forward_declarations ()\n {\n   tree sc_spec, decl_specs, an_id;\n \n-  /* extern struct objc_class _OBJC_CLASS_<my_name>; */\n+  /* static struct objc_class _OBJC_CLASS_<my_name>; */\n \n   an_id = synth_id_with_class_suffix (\"_OBJC_CLASS\", objc_implementation_context);\n \n@@ -3477,7 +3478,8 @@ synth_forward_declarations ()\n \n   UOBJC_METACLASS_decl = define_decl (an_id, decl_specs);\n   TREE_USED (UOBJC_METACLASS_decl) = 1;\n-  DECL_ARTIFICIAL(UOBJC_METACLASS_decl) = 1;\n+  DECL_ARTIFICIAL (UOBJC_METACLASS_decl) = 1;\n+  TREE_PUBLIC (UOBJC_METACLASS_decl) = 0;\n \n   /* Pre-build the following entities - for speed/convenience.  */\n \n@@ -5226,7 +5228,7 @@ build_protocol_reference (p)\n {\n   tree decl, ident, ptype;\n \n-  /* extern struct objc_protocol _OBJC_PROTOCOL_<mumble>; */\n+  /* static struct objc_protocol _OBJC_PROTOCOL_<mumble>; */\n \n   ident = synth_id_with_class_suffix (\"_OBJC_PROTOCOL\", p);\n   ptype\n@@ -5240,7 +5242,7 @@ build_protocol_reference (p)\n     {\n       decl = build_decl (VAR_DECL, ident, ptype);\n       DECL_EXTERNAL (decl) = 1;\n-      TREE_PUBLIC (decl) = 1;\n+      TREE_PUBLIC (decl) = 0;\n       TREE_USED (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n "}]}