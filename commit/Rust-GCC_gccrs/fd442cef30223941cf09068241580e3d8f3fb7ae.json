{"sha": "fd442cef30223941cf09068241580e3d8f3fb7ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0NDJjZWYzMDIyMzk0MWNmMDkwNjgyNDE1ODBlM2Q4ZjNmYjdhZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-24T23:49:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-24T23:49:22Z"}, "message": "sibcall.c (skip_pic_restore): New.\n\n        * sibcall.c (skip_pic_restore): New.\n        (identify_call_return_value): Use it.\n\nFrom-SVN: r36596", "tree": {"sha": "8e87e0537093d0bf9cff3f150b0ff0fbc0170b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e87e0537093d0bf9cff3f150b0ff0fbc0170b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd442cef30223941cf09068241580e3d8f3fb7ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd442cef30223941cf09068241580e3d8f3fb7ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd442cef30223941cf09068241580e3d8f3fb7ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd442cef30223941cf09068241580e3d8f3fb7ae/comments", "author": null, "committer": null, "parents": [{"sha": "e1389cac8de5596ecf7729176e2410081e8ff288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1389cac8de5596ecf7729176e2410081e8ff288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1389cac8de5596ecf7729176e2410081e8ff288"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "0e48841c911ca9705f99d2cf61b6b8237a85e14d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd442cef30223941cf09068241580e3d8f3fb7ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd442cef30223941cf09068241580e3d8f3fb7ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd442cef30223941cf09068241580e3d8f3fb7ae", "patch": "@@ -2,6 +2,9 @@\n \n \t* emit-rtl.c (gen_lowpart_common): Use trunc_int_for_mode.\n \n+\t* sibcall.c (skip_pic_restore): New.\n+\t(identify_call_return_value): Use it.\n+\n 2000-09-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-tree.texi: Moved here from cp/ir.texi.  Documented nested"}, {"sha": "eaf9ae76fe58c654835eb3e49cca10ae474b70ab", "filename": "gcc/sibcall.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd442cef30223941cf09068241580e3d8f3fb7ae/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd442cef30223941cf09068241580e3d8f3fb7ae/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=fd442cef30223941cf09068241580e3d8f3fb7ae", "patch": "@@ -36,6 +36,7 @@ static int identify_call_return_value\tPARAMS ((rtx, rtx *, rtx *));\n static rtx skip_copy_to_return_value\tPARAMS ((rtx, rtx, rtx));\n static rtx skip_use_of_return_value\tPARAMS ((rtx, enum rtx_code));\n static rtx skip_stack_adjustment\tPARAMS ((rtx));\n+static rtx skip_pic_restore\t\tPARAMS ((rtx));\n static rtx skip_jump_insn\t\tPARAMS ((rtx));\n static int uses_addressof\t\tPARAMS ((rtx));\n static int sequence_uses_addressof\tPARAMS ((rtx));\n@@ -82,6 +83,11 @@ identify_call_return_value (cp, p_hard_return, p_soft_return)\n   if (! insn)\n     return 0;\n \n+  /* Restore of GP register may appear here.  */\n+  insn = skip_pic_restore (insn);\n+  if (! insn)\n+    return 0;\n+\n   /* If there's nothing after, there's no soft return value.  */\n   insn = NEXT_INSN (insn);\n   if (! insn)\n@@ -199,10 +205,6 @@ skip_stack_adjustment (orig_insn)\n   if (insn)\n     set = single_set (insn);\n \n-  /* The source must be the same as the current function's return value to\n-     ensure that any return value is put in the same place by the current\n-     function and the function we're calling.   The destination register\n-     must be a pseudo.  */\n   if (insn\n       && set\n       && GET_CODE (SET_SRC (set)) == PLUS\n@@ -211,8 +213,26 @@ skip_stack_adjustment (orig_insn)\n       && SET_DEST (set) == stack_pointer_rtx)\n     return insn;\n \n-  /* It did not look like a copy of the return value, so return the\n-     same insn we were passed.  */\n+  return orig_insn;\n+}\n+\n+/* If the first real insn after ORIG_INSN sets the pic register,\n+   return it.  Otherwise return ORIG_INSN.  */\n+\n+static rtx\n+skip_pic_restore (orig_insn)\n+     rtx orig_insn;\n+{\n+  rtx insn, set = NULL_RTX;\n+\n+  insn = next_nonnote_insn (orig_insn);\n+\n+  if (insn)\n+    set = single_set (insn);\n+\n+  if (insn && set && SET_DEST (set) == pic_offset_table_rtx)\n+    return insn;\n+\n   return orig_insn;\n }\n "}]}