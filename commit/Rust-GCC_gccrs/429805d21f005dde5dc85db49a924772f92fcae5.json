{"sha": "429805d21f005dde5dc85db49a924772f92fcae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5ODA1ZDIxZjAwNWRkZTVkYzg1ZGI0OWE5MjQ3NzJmOTJmY2FlNQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-01-07T20:45:34Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-01-07T20:45:34Z"}, "message": "invoke.texi: Fix incorrect uses of @samp markup throughout the file where @code...\n\n2015-01-07  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Fix incorrect uses of @samp markup throughout\n\tthe file where @code, @command, etc is more appropriate.\n\nFrom-SVN: r219322", "tree": {"sha": "6bccef9623aab80a6adcb51c6f323839a41fc653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bccef9623aab80a6adcb51c6f323839a41fc653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429805d21f005dde5dc85db49a924772f92fcae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429805d21f005dde5dc85db49a924772f92fcae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429805d21f005dde5dc85db49a924772f92fcae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429805d21f005dde5dc85db49a924772f92fcae5/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18146f456f5a66b20d9f9f886a38364369b0474c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18146f456f5a66b20d9f9f886a38364369b0474c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18146f456f5a66b20d9f9f886a38364369b0474c"}], "stats": {"total": 229, "additions": 117, "deletions": 112}, "files": [{"sha": "efdfccc0047003c784d5f0846dd826aeaafa7115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429805d21f005dde5dc85db49a924772f92fcae5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429805d21f005dde5dc85db49a924772f92fcae5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=429805d21f005dde5dc85db49a924772f92fcae5", "patch": "@@ -1,3 +1,8 @@\n+2015-01-07  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi: Fix incorrect uses of @samp markup throughout\n+\tthe file where @code, @command, etc is more appropriate.\n+\n 2015-01-06  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (RS/6000 and PowerPC Options): Tidy formatting"}, {"sha": "3121b19251f9ceb2de4f225cad4499282f58fe84", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429805d21f005dde5dc85db49a924772f92fcae5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429805d21f005dde5dc85db49a924772f92fcae5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=429805d21f005dde5dc85db49a924772f92fcae5", "patch": "@@ -41,7 +41,7 @@ gcc [@option{-c}|@option{-S}|@option{-E}] [@option{-std=}@var{standard}]\n     [@option{-o} @var{outfile}] [@@@var{file}] @var{infile}@dots{}\n \n Only the most useful options are listed here; see below for the\n-remainder.  @samp{g++} accepts mostly the same options as @samp{gcc}.\n+remainder.  @command{g++} accepts mostly the same options as @command{gcc}.\n @c man end\n @c man begin SEEALSO\n gpl(7), gfdl(7), fsf-funding(7),\n@@ -2112,7 +2112,7 @@ Check that the pointer returned by @code{operator new} is non-null\n before attempting to modify the storage allocated.  This check is\n normally unnecessary because the C++ standard specifies that\n @code{operator new} only returns @code{0} if it is declared\n-@samp{throw()}, in which case the compiler always checks the\n+@code{throw()}, in which case the compiler always checks the\n return value even without this option.  In all other cases, when\n @code{operator new} has a non-empty exception specification, memory\n exhaustion is signalled by throwing @code{std::bad_alloc}.  See also\n@@ -2173,7 +2173,7 @@ call the copy constructor in all cases.\n Don't generate code to check for violation of exception specifications\n at run time.  This option violates the C++ standard, but may be useful\n for reducing code size in production builds, much like defining\n-@samp{NDEBUG}.  This does not give user code permission to throw\n+@code{NDEBUG}.  This does not give user code permission to throw\n exceptions in violation of the exception specifications; the compiler\n still optimizes based on the specifications, so throwing an\n unexpected exception results in undefined behavior at run time.\n@@ -2182,8 +2182,8 @@ unexpected exception results in undefined behavior at run time.\n @itemx -fno-extern-tls-init\n @opindex fextern-tls-init\n @opindex fno-extern-tls-init\n-The C++11 and OpenMP standards allow @samp{thread_local} and\n-@samp{threadprivate} variables to have dynamic (runtime)\n+The C++11 and OpenMP standards allow @code{thread_local} and\n+@code{threadprivate} variables to have dynamic (runtime)\n initialization.  To support this, any use of such a variable goes\n through a wrapper function that performs any necessary initialization.\n When the use and definition of the variable are in the same\n@@ -2206,7 +2206,7 @@ aliases, the default is @option{-fno-extern-tls-init}.\n @opindex ffor-scope\n @opindex fno-for-scope\n If @option{-ffor-scope} is specified, the scope of variables declared in\n-a @i{for-init-statement} is limited to the @samp{for} loop itself,\n+a @i{for-init-statement} is limited to the @code{for} loop itself,\n as specified by the C++ standard.\n If @option{-fno-for-scope} is specified, the scope of variables declared in\n a @i{for-init-statement} extends to the end of the enclosing scope,\n@@ -2238,7 +2238,7 @@ without optimization need the same set of explicit instantiations.\n @item -fno-implement-inlines\n @opindex fno-implement-inlines\n To save space, do not emit out-of-line copies of inline functions\n-controlled by @samp{#pragma implementation}.  This causes linker\n+controlled by @code{#pragma implementation}.  This causes linker\n errors if these functions are not inlined everywhere they are called.\n \n @item -fms-extensions\n@@ -2305,10 +2305,10 @@ Instantiation}, for more information.\n @opindex fno-rtti\n Disable generation of information about every class with virtual\n functions for use by the C++ run-time type identification features\n-(@samp{dynamic_cast} and @samp{typeid}).  If you don't use those parts\n+(@code{dynamic_cast} and @code{typeid}).  If you don't use those parts\n of the language, you can save some space by using this flag.  Note that\n exception handling uses the same information, but G++ generates it as\n-needed. The @samp{dynamic_cast} operator can still be used for casts that\n+needed. The @code{dynamic_cast} operator can still be used for casts that\n do not require run-time type information, i.e.@: casts to @code{void *} or to\n unambiguous base classes.\n \n@@ -2563,9 +2563,9 @@ These mangling issues were fixed in @option{-fabi-version=5}.\n \n @item\n Scoped enumerators passed as arguments to a variadic function are\n-promoted like unscoped enumerators, causing @samp{va_arg} to complain.\n+promoted like unscoped enumerators, causing @code{va_arg} to complain.\n On most targets this does not actually affect the parameter passing\n-ABI, as there is no way to pass an argument smaller than @samp{int}.\n+ABI, as there is no way to pass an argument smaller than @code{int}.\n \n Also, the ABI changed the mangling of template argument packs,\n @code{const_cast}, @code{static_cast}, prefix increment/decrement, and\n@@ -2620,7 +2620,7 @@ a constructor or destructor.\n @item -Wdelete-non-virtual-dtor @r{(C++ and Objective-C++ only)}\n @opindex Wdelete-non-virtual-dtor\n @opindex Wno-delete-non-virtual-dtor\n-Warn when @samp{delete} is used to destroy an instance of a class that\n+Warn when @code{delete} is used to destroy an instance of a class that\n has virtual functions and non-virtual destructor. It is unsafe to delete\n an instance of a derived class through a pointer to a base class if the\n base class does not have a virtual destructor.  This warning is enabled\n@@ -2672,7 +2672,7 @@ are still considered ill-formed in SFINAE context.\n @opindex Wno-noexcept\n Warn when a noexcept-expression evaluates to false because of a call\n to a function that does not have a non-throwing exception\n-specification (i.e. @samp{throw()} or @samp{noexcept}) but is known by\n+specification (i.e. @code{throw()} or @code{noexcept}) but is known by\n the compiler to never throw an exception.\n \n @item -Wnon-virtual-dtor @r{(C++ and Objective-C++ only)}\n@@ -2701,8 +2701,8 @@ struct A @{\n @end smallexample\n \n @noindent\n-The compiler rearranges the member initializers for @samp{i}\n-and @samp{j} to match the declaration order of the members, emitting\n+The compiler rearranges the member initializers for @code{i}\n+and @code{j} to match the declaration order of the members, emitting\n a warning to that effect.  This warning is enabled by @option{-Wall}.\n \n @item -fext-numeric-literals @r{(C++ and Objective-C++ only)}\n@@ -2790,8 +2790,8 @@ but disables the helpful warning.\n @opindex Wold-style-cast\n @opindex Wno-old-style-cast\n Warn if an old-style (C-style) cast to a non-void type is used within\n-a C++ program.  The new-style casts (@samp{dynamic_cast},\n-@samp{static_cast}, @samp{reinterpret_cast}, and @samp{const_cast}) are\n+a C++ program.  The new-style casts (@code{dynamic_cast},\n+@code{static_cast}, @code{reinterpret_cast}, and @code{const_cast}) are\n less vulnerable to unintended effects and much easier to search for.\n \n @item -Woverloaded-virtual @r{(C++ and Objective-C++ only)}\n@@ -3444,8 +3444,8 @@ following cases:\n @itemize @bullet\n \n @item\n-A pointer is compared against integer zero with @samp{<}, @samp{<=},\n-@samp{>}, or @samp{>=}.\n+A pointer is compared against integer zero with @code{<}, @code{<=},\n+@code{>}, or @code{>=}.\n \n @item\n (C++ only) An enumerator and a non-enumerator both appear in a\n@@ -3455,11 +3455,11 @@ conditional expression.\n (C++ only) Ambiguous virtual bases.\n \n @item\n-(C++ only) Subscripting an array that has been declared @samp{register}.\n+(C++ only) Subscripting an array that has been declared @code{register}.\n \n @item\n (C++ only) Taking the address of a variable that has been declared\n-@samp{register}.\n+@code{register}.\n \n @item\n (C++ only) A base class is not initialized in a derived class's copy\n@@ -3703,7 +3703,7 @@ This warning is also enabled by @option{-Wextra}.\n @item -Wmain\n @opindex Wmain\n @opindex Wno-main\n-Warn if the type of @samp{main} is suspicious.  @samp{main} should be\n+Warn if the type of @code{main} is suspicious.  @code{main} should be\n a function with external linkage, returning int, taking either zero\n arguments, two, or three arguments of appropriate types.  This warning\n is enabled by default in C++ and is enabled by either @option{-Wall}\n@@ -3713,8 +3713,8 @@ or @option{-Wpedantic}.\n @opindex Wmissing-braces\n @opindex Wno-missing-braces\n Warn if an aggregate or union initializer is not fully bracketed.  In\n-the following example, the initializer for @samp{a} is not fully\n-bracketed, but that for @samp{b} is fully bracketed.  This warning is\n+the following example, the initializer for @code{a} is not fully\n+bracketed, but that for @code{b} is fully bracketed.  This warning is\n enabled by @option{-Wall} in C.\n \n @smallexample\n@@ -3737,8 +3737,8 @@ as when there is an assignment in a context where a truth value\n is expected, or when operators are nested whose precedence people\n often get confused about.\n \n-Also warn if a comparison like @samp{x<=y<=z} appears; this is\n-equivalent to @samp{(x<=y ? 1 : 0) <= z}, which is a different\n+Also warn if a comparison like @code{x<=y<=z} appears; this is\n+equivalent to @code{(x<=y ? 1 : 0) <= z}, which is a different\n interpretation from that of ordinary mathematical notation.\n \n Also warn about constructions where there may be confusion to which\n@@ -3853,7 +3853,7 @@ expression in a function whose return type is @code{void}.\n \n For C++, a function without return type always produces a diagnostic\n message, even when @option{-Wno-return-type} is specified.  The only\n-exceptions are @samp{main} and functions defined in system headers.\n+exceptions are @code{main} and functions defined in system headers.\n \n This warning is enabled by @option{-Wall}.\n \n@@ -3930,7 +3930,7 @@ This warning is enabled by @option{-Wall}.\n Warn whenever a function parameter is assigned to, but otherwise unused\n (aside from its declaration).\n \n-To suppress this warning use the @samp{unused} attribute\n+To suppress this warning use the @code{unused} attribute\n (@pxref{Variable Attributes}).\n \n This warning is also enabled by @option{-Wunused} together with\n@@ -3943,7 +3943,7 @@ Warn whenever a local variable is assigned to, but otherwise unused\n (aside from its declaration).\n This warning is enabled by @option{-Wall}.\n \n-To suppress this warning use the @samp{unused} attribute\n+To suppress this warning use the @code{unused} attribute\n (@pxref{Variable Attributes}).\n \n This warning is also enabled by @option{-Wunused}, which is enabled\n@@ -3962,7 +3962,7 @@ This warning is enabled by @option{-Wall}.\n Warn whenever a label is declared but not used.\n This warning is enabled by @option{-Wall}.\n \n-To suppress this warning use the @samp{unused} attribute\n+To suppress this warning use the @code{unused} attribute\n (@pxref{Variable Attributes}).\n \n @item -Wunused-local-typedefs @r{(C, Objective-C, C++ and Objective-C++ only)}\n@@ -3975,7 +3975,7 @@ This warning is enabled by @option{-Wall}.\n @opindex Wno-unused-parameter\n Warn whenever a function parameter is unused aside from its declaration.\n \n-To suppress this warning use the @samp{unused} attribute\n+To suppress this warning use the @code{unused} attribute\n (@pxref{Variable Attributes}).\n \n @item -Wno-unused-result\n@@ -3992,18 +3992,18 @@ Warn whenever a local variable or non-constant static variable is unused\n aside from its declaration.\n This warning is enabled by @option{-Wall}.\n \n-To suppress this warning use the @samp{unused} attribute\n+To suppress this warning use the @code{unused} attribute\n (@pxref{Variable Attributes}).\n \n @item -Wunused-value\n @opindex Wunused-value\n @opindex Wno-unused-value\n Warn whenever a statement computes a result that is explicitly not\n used. To suppress this warning cast the unused expression to\n-@samp{void}. This includes an expression-statement or the left-hand\n+@code{void}. This includes an expression-statement or the left-hand\n side of a comma expression that contains no side effects. For example,\n-an expression such as @samp{x[i,j]} causes a warning, while\n-@samp{x[(void)i,j]} does not.\n+an expression such as @code{x[i,j]} causes a warning, while\n+@code{x[(void)i,j]} does not.\n \n This warning is enabled by @option{-Wall}.\n \n@@ -4410,8 +4410,8 @@ if the @samp{#} appeared in column 1 on the line.  Therefore\n @option{-Wtraditional} warns about directives that traditional C\n understands but ignores because the @samp{#} does not appear as the\n first character on the line.  It also suggests you hide directives like\n-@samp{#pragma} not understood by traditional C by indenting them.  Some\n-traditional implementations do not recognize @samp{#elif}, so this option\n+@code{#pragma} not understood by traditional C by indenting them.  Some\n+traditional implementations do not recognize @code{#elif}, so this option\n suggests avoiding it altogether.\n \n @item\n@@ -4499,12 +4499,12 @@ GCC versions before GCC 3.0.  @xref{Mixed Declarations}.\n @item -Wundef\n @opindex Wundef\n @opindex Wno-undef\n-Warn if an undefined identifier is evaluated in an @samp{#if} directive.\n+Warn if an undefined identifier is evaluated in an @code{#if} directive.\n \n @item -Wno-endif-labels\n @opindex Wno-endif-labels\n @opindex Wendif-labels\n-Do not warn whenever an @samp{#else} or an @samp{#endif} are followed by text.\n+Do not warn whenever an @code{#else} or an @code{#endif} are followed by text.\n \n @item -Wshadow\n @opindex Wshadow\n@@ -4606,7 +4606,7 @@ to functions.  In C++, warn also when an arithmetic operation involves\n Warn if a comparison is always true or always false due to the limited\n range of the data type, but do not warn for constant expressions.  For\n example, warn if an unsigned variable is compared against zero with\n-@samp{<} or @samp{>=}.  This warning is also enabled by\n+@code{<} or @code{>=}.  This warning is also enabled by\n @option{-Wextra}.\n \n @item -Wbad-function-cast @r{(C and Objective-C only)}\n@@ -4699,8 +4699,8 @@ programs.\n @item -Wclobbered\n @opindex Wclobbered\n @opindex Wno-clobbered\n-Warn for variables that might be changed by @samp{longjmp} or\n-@samp{vfork}.  This warning is also enabled by @option{-Wextra}.\n+Warn for variables that might be changed by @code{longjmp} or\n+@code{vfork}.  This warning is also enabled by @option{-Wextra}.\n \n @item -Wconditionally-supported @r{(C++ and Objective-C++ only)}\n @opindex Wconditionally-supported\n@@ -4760,7 +4760,7 @@ Warn when an expression is casted to its own type.\n @item -Wempty-body\n @opindex Wempty-body\n @opindex Wno-empty-body\n-Warn if an empty body occurs in an @samp{if}, @samp{else} or @samp{do\n+Warn if an empty body occurs in an @code{if}, @code{else} or @code{do\n while} statement.  This warning is also enabled by @option{-Wextra}.\n \n @item -Wenum-compare\n@@ -5204,15 +5204,15 @@ warnings produced by @option{-Winline} to appear or disappear.\n @item -Wno-invalid-offsetof @r{(C++ and Objective-C++ only)}\n @opindex Wno-invalid-offsetof\n @opindex Winvalid-offsetof\n-Suppress warnings from applying the @samp{offsetof} macro to a non-POD\n-type.  According to the 2014 ISO C++ standard, applying @samp{offsetof}\n+Suppress warnings from applying the @code{offsetof} macro to a non-POD\n+type.  According to the 2014 ISO C++ standard, applying @code{offsetof}\n to a non-standard-layout type is undefined.  In existing C++ implementations,\n-however, @samp{offsetof} typically gives meaningful results.\n+however, @code{offsetof} typically gives meaningful results.\n This flag is for users who are aware that they are\n writing nonportable code and who have deliberately chosen to ignore the\n warning about it.\n \n-The restrictions on @samp{offsetof} may be relaxed in a future version\n+The restrictions on @code{offsetof} may be relaxed in a future version\n of the C++ standard.\n \n @item -Wno-int-to-pointer-cast\n@@ -5238,7 +5238,7 @@ the search path but can't be used.\n @item -Wlong-long\n @opindex Wlong-long\n @opindex Wno-long-long\n-Warn if @samp{long long} type is used.  This is enabled by either\n+Warn if @code{long long} type is used.  This is enabled by either\n @option{-Wpedantic} or @option{-Wtraditional} in ISO C90 and C++98\n modes.  To inhibit the warning messages, use @option{-Wno-long-long}.\n \n@@ -5254,7 +5254,7 @@ messages, use @option{-Wno-variadic-macros}.\n @opindex Wvarargs\n @opindex Wno-varargs\n Warn upon questionable usage of the macros used to handle variable\n-arguments like @samp{va_start}.  This is default.  To inhibit the\n+arguments like @code{va_start}.  This is default.  To inhibit the\n warning messages, use @option{-Wno-varargs}.\n \n @item -Wvector-operation-performance\n@@ -7087,7 +7087,7 @@ relative to some @file{lib} subdirectory.\n \n @item -print-prog-name=@var{program}\n @opindex print-prog-name\n-Like @option{-print-file-name}, but searches for a program such as @samp{cpp}.\n+Like @option{-print-file-name}, but searches for a program such as @command{cpp}.\n \n @item -print-libgcc-file-name\n @opindex print-libgcc-file-name\n@@ -7134,7 +7134,7 @@ Print the compiler's target machine (for example,\n \n @item -dumpversion\n @opindex dumpversion\n-Print the compiler version (for example, @samp{3.0})---and don't do\n+Print the compiler version (for example, @code{3.0})---and don't do\n anything else.\n \n @item -dumpspecs\n@@ -8766,12 +8766,12 @@ Do not guess branch probabilities using heuristics.\n GCC uses heuristics to guess branch probabilities if they are\n not provided by profiling feedback (@option{-fprofile-arcs}).  These\n heuristics are based on the control flow graph.  If some branch probabilities\n-are specified by @samp{__builtin_expect}, then the heuristics are\n+are specified by @code{__builtin_expect}, then the heuristics are\n used to guess branch probabilities for the rest of the control flow graph,\n-taking the @samp{__builtin_expect} info into account.  The interactions\n-between the heuristics and @samp{__builtin_expect} can be complex, and in\n+taking the @code{__builtin_expect} info into account.  The interactions\n+between the heuristics and @code{__builtin_expect} can be complex, and in\n some cases, it may be useful to disable the heuristics so that the effects\n-of @samp{__builtin_expect} are easier to understand.\n+of @code{__builtin_expect} are easier to understand.\n \n The default is @option{-fguess-branch-probability} at levels\n @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n@@ -10946,7 +10946,7 @@ other standard libraries.  In other words, when you specify @option{-nostdlib}\n or @option{-nodefaultlibs} you should usually specify @option{-lgcc} as well.\n This ensures that you have no unresolved references to internal GCC\n library subroutines.\n-(An example of such an internal subroutine is @samp{__main}, used to ensure C++\n+(An example of such an internal subroutine is @code{__main}, used to ensure C++\n constructors are called; @pxref{Collect2,,@code{collect2}, gccint,\n GNU Compiler Collection (GCC) Internals}.)\n \n@@ -11173,8 +11173,8 @@ to be used by the user, but only passed by the driver.\n @item -iquote@var{dir}\n @opindex iquote\n Add the directory @var{dir} to the head of the list of directories to\n-be searched for header files only for the case of @samp{#include\n-\"@var{file}\"}; they are not searched for @samp{#include <@var{file}>},\n+be searched for header files only for the case of @code{#include\n+\"@var{file}\"}; they are not searched for @code{#include <@var{file}>},\n otherwise just like @option{-I}.\n \n @item -L@var{dir}\n@@ -11264,17 +11264,17 @@ such a suffix.\n This option has been deprecated.  Please use @option{-iquote} instead for\n @option{-I} directories before the @option{-I-} and remove the @option{-I-}.\n Any directories you specify with @option{-I} options before the @option{-I-}\n-option are searched only for the case of @samp{#include \"@var{file}\"};\n-they are not searched for @samp{#include <@var{file}>}.\n+option are searched only for the case of @code{#include \"@var{file}\"};\n+they are not searched for @code{#include <@var{file}>}.\n \n If additional directories are specified with @option{-I} options after\n-the @option{-I-}, these directories are searched for all @samp{#include}\n+the @option{-I-}, these directories are searched for all @code{#include}\n directives.  (Ordinarily @emph{all} @option{-I} directories are used\n this way.)\n \n In addition, the @option{-I-} option inhibits the use of the current\n directory (where the current input file came from) as the first search\n-directory for @samp{#include \"@var{file}\"}.  There is no way to\n+directory for @code{#include \"@var{file}\"}.  There is no way to\n override this effect of @option{-I-}.  With @option{-I.} you can specify\n searching the directory that is current when the compiler is\n invoked.  That is not exactly the same as what the preprocessor does\n@@ -12810,7 +12810,7 @@ This is a synonym for @option{-mapcs-frame}.\n Generate code to check the amount of stack space available upon entry to\n every function (that actually uses some stack space).  If there is\n insufficient space available then either the function\n-@samp{__rt_stkovf_split_small} or @samp{__rt_stkovf_split_big} is\n+@code{__rt_stkovf_split_small} or @code{__rt_stkovf_split_big} is\n called, depending upon the amount of stack space required.  The runtime\n system is required to provide these functions.  The default is\n @option{-mno-apcs-stack-check}, since this produces smaller code.\n@@ -13040,18 +13040,18 @@ version of subroutine call instruction.\n \n Even if this switch is enabled, not all function calls are turned\n into long calls.  The heuristic is that static functions, functions\n-that have the @samp{short-call} attribute, functions that are inside\n-the scope of a @samp{#pragma no_long_calls} directive, and functions whose\n+that have the @code{short_call} attribute, functions that are inside\n+the scope of a @code{#pragma no_long_calls} directive, and functions whose\n definitions have already been compiled within the current compilation\n unit are not turned into long calls.  The exceptions to this rule are\n-that weak function definitions, functions with the @samp{long-call}\n-attribute or the @samp{section} attribute, and functions that are within\n-the scope of a @samp{#pragma long_calls} directive are always\n+that weak function definitions, functions with the @code{long_call}\n+attribute or the @code{section} attribute, and functions that are within\n+the scope of a @code{#pragma long_calls} directive are always\n turned into long calls.\n \n This feature is not enabled by default.  Specifying\n @option{-mno-long-calls} restores the default behavior, as does\n-placing the function calls within the scope of a @samp{#pragma\n+placing the function calls within the scope of a @code{#pragma\n long_calls_off} directive.  Note these switches have no effect on how\n the compiler generates code to handle function calls via function\n pointers.\n@@ -13882,12 +13882,12 @@ Choose startup files and linker script suitable for the simulator.\n \n @item -msdata=default\n @opindex msdata=default\n-Put small global and static data in the @samp{.neardata} section,\n+Put small global and static data in the @code{.neardata} section,\n which is pointed to by register @code{B14}.  Put small uninitialized\n-global and static data in the @samp{.bss} section, which is adjacent\n-to the @samp{.neardata} section.  Put small read-only data into the\n-@samp{.rodata} section.  The corresponding sections used for large\n-pieces of data are @samp{.fardata}, @samp{.far} and @samp{.const}.\n+global and static data in the @code{.bss} section, which is adjacent\n+to the @code{.neardata} section.  Put small read-only data into the\n+@code{.rodata} section.  The corresponding sections used for large\n+pieces of data are @code{.fardata}, @code{.far} and @code{.const}.\n \n @item -msdata=all\n @opindex msdata=all\n@@ -13899,8 +13899,8 @@ access them.\n @opindex msdata=none\n Make no use of the sections reserved for small data, and use absolute\n addresses to access all data.  Put all initialized global and static\n-data in the @samp{.fardata} section, and all uninitialized data in the\n-@samp{.far} section.  Put all constant data into the @samp{.const}\n+data in the @code{.fardata} section, and all uninitialized data in the\n+@code{.far} section.  Put all constant data into the @code{.const}\n section.\n @end table\n \n@@ -14171,9 +14171,9 @@ applicable.  This mode also sets @option{-mno-altivec},\n \n @item -mone-byte-bool\n @opindex mone-byte-bool\n-Override the defaults for @samp{bool} so that @samp{sizeof(bool)==1}.\n-By default @samp{sizeof(bool)} is @samp{4} when compiling for\n-Darwin/PowerPC and @samp{1} when compiling for Darwin/x86, so this\n+Override the defaults for @code{bool} so that @code{sizeof(bool)==1}.\n+By default @code{sizeof(bool)} is @code{4} when compiling for\n+Darwin/PowerPC and @code{1} when compiling for Darwin/x86, so this\n option has no effect on x86.\n \n @strong{Warning:} The @option{-mone-byte-bool} switch causes GCC\n@@ -15775,9 +15775,9 @@ instruction in the caller since there is no need to pop the arguments\n there.\n \n You can specify that an individual function is called with this calling\n-sequence with the function attribute @samp{stdcall}.  You can also\n+sequence with the function attribute @code{stdcall}.  You can also\n override the @option{-mrtd} option by using the function attribute\n-@samp{cdecl}.  @xref{Function Attributes}.\n+@code{cdecl}.  @xref{Function Attributes}.\n \n @strong{Warning:} this calling convention is incompatible with the one\n normally used on Unix, so you cannot use it if you need to call\n@@ -15797,7 +15797,7 @@ harmlessly ignored.)\n Control how many registers are used to pass integer arguments.  By\n default, no registers are used to pass arguments, and at most 3\n registers can be used.  You can control this behavior for a specific\n-function by using the function attribute @samp{regparm}.\n+function by using the function attribute @code{regparm}.\n @xref{Function Attributes}.\n \n @strong{Warning:} if you use this switch, and\n@@ -15809,7 +15809,7 @@ startup modules.\n @opindex msseregparm\n Use SSE register passing conventions for float and double arguments\n and return values.  You can control this behavior for a specific\n-function by using the function attribute @samp{sseregparm}.\n+function by using the function attribute @code{sseregparm}.\n @xref{Function Attributes}.\n \n @strong{Warning:} if you use this switch then you must build all\n@@ -16209,8 +16209,8 @@ Generate code for the specified calling convention.  Permissible values\n are @samp{sysv} for the ABI used on GNU/Linux and other systems, and\n @samp{ms} for the Microsoft ABI.  The default is to use the Microsoft\n ABI when targeting Microsoft Windows and the SysV ABI on all other systems.\n-You can control this behavior for a specific function by\n-using the function attribute @samp{ms_abi}/@samp{sysv_abi}.\n+You can control this behavior for specific functions by\n+using the function attributes @code{ms_abi} and @code{sysv_abi}.\n @xref{Function Attributes}.\n \n @item -mtls-dialect=@var{type}\n@@ -16935,11 +16935,11 @@ instruction sequence).\n @item -msdata=none\n @opindex msdata=none\n Disable use of the small data area.  Variables are put into\n-one of @samp{.data}, @samp{.bss}, or @samp{.rodata} (unless the\n+one of @code{.data}, @code{.bss}, or @code{.rodata} (unless the\n @code{section} attribute has been specified).\n This is the default.\n \n-The small data area consists of sections @samp{.sdata} and @samp{.sbss}.\n+The small data area consists of sections @code{.sdata} and @code{.sbss}.\n Objects may be explicitly put in the small data area with the\n @code{section} attribute using one of these sections.\n \n@@ -17031,7 +17031,7 @@ architectures are selected according to Freescale's ISA classification\n and the permissible values are: @samp{isaa}, @samp{isaaplus},\n @samp{isab} and @samp{isac}.\n \n-GCC defines a macro @samp{__mcf@var{arch}__} whenever it is generating\n+GCC defines a macro @code{__mcf@var{arch}__} whenever it is generating\n code for a ColdFire target.  The @var{arch} in this macro is one of the\n @option{-march} arguments given above.\n \n@@ -20493,21 +20493,21 @@ configured GCC using one of the @samp{powerpc*-*-eabi*} options.\n @item -msdata=eabi\n @opindex msdata=eabi\n On System V.4 and embedded PowerPC systems, put small initialized\n-@code{const} global and static data in the @samp{.sdata2} section, which\n+@code{const} global and static data in the @code{.sdata2} section, which\n is pointed to by register @code{r2}.  Put small initialized\n-non-@code{const} global and static data in the @samp{.sdata} section,\n+non-@code{const} global and static data in the @code{.sdata} section,\n which is pointed to by register @code{r13}.  Put small uninitialized\n-global and static data in the @samp{.sbss} section, which is adjacent to\n-the @samp{.sdata} section.  The @option{-msdata=eabi} option is\n+global and static data in the @code{.sbss} section, which is adjacent to\n+the @code{.sdata} section.  The @option{-msdata=eabi} option is\n incompatible with the @option{-mrelocatable} option.  The\n @option{-msdata=eabi} option also sets the @option{-memb} option.\n \n @item -msdata=sysv\n @opindex msdata=sysv\n On System V.4 and embedded PowerPC systems, put small global and static\n-data in the @samp{.sdata} section, which is pointed to by register\n+data in the @code{.sdata} section, which is pointed to by register\n @code{r13}.  Put small uninitialized global and static data in the\n-@samp{.sbss} section, which is adjacent to the @samp{.sdata} section.\n+@code{.sbss} section, which is adjacent to the @code{.sdata} section.\n The @option{-msdata=sysv} option is incompatible with the\n @option{-mrelocatable} option.\n \n@@ -20522,8 +20522,8 @@ same as @option{-msdata=sysv}.\n @item -msdata=data\n @opindex msdata=data\n On System V.4 and embedded PowerPC systems, put small global\n-data in the @samp{.sdata} section.  Put small uninitialized global\n-data in the @samp{.sbss} section.  Do not use register @code{r13}\n+data in the @code{.sdata} section.  Put small uninitialized global\n+data in the @code{.sbss} section.  Do not use register @code{r13}\n to address small data however.  This is the default behavior unless\n other @option{-msdata} options are used.\n \n@@ -20532,8 +20532,8 @@ other @option{-msdata} options are used.\n @opindex msdata=none\n @opindex mno-sdata\n On embedded PowerPC systems, put all initialized global and static data\n-in the @samp{.data} section, and all uninitialized data in the\n-@samp{.bss} section.\n+in the @code{.data} section, and all uninitialized data in the\n+@code{.bss} section.\n \n @item -mblock-move-inline-limit=@var{num}\n @opindex mblock-move-inline-limit\n@@ -22454,7 +22454,7 @@ Specify that the target processor is the V850.\n @item -mv850e3v5\n @opindex mv850e3v5\n Specify that the target processor is the V850E3V5.  The preprocessor\n-constant @samp{__v850e3v5__} is defined if this option is used.\n+constant @code{__v850e3v5__} is defined if this option is used.\n \n @item -mv850e2v4\n @opindex mv850e2v4\n@@ -22464,17 +22464,17 @@ the @option{-mv850e3v5} option.\n @item -mv850e2v3\n @opindex mv850e2v3\n Specify that the target processor is the V850E2V3.  The preprocessor\n-constant @samp{__v850e2v3__} is defined if this option is used.\n+constant @code{__v850e2v3__} is defined if this option is used.\n \n @item -mv850e2\n @opindex mv850e2\n Specify that the target processor is the V850E2.  The preprocessor\n-constant @samp{__v850e2__} is defined if this option is used.\n+constant @code{__v850e2__} is defined if this option is used.\n \n @item -mv850e1\n @opindex mv850e1\n Specify that the target processor is the V850E1.  The preprocessor\n-constants @samp{__v850e1__} and @samp{__v850e__} are defined if\n+constants @code{__v850e1__} and @code{__v850e__} are defined if\n this option is used.\n \n @item -mv850es\n@@ -22485,14 +22485,14 @@ the @option{-mv850e1} option.\n @item -mv850e\n @opindex mv850e\n Specify that the target processor is the V850E@.  The preprocessor\n-constant @samp{__v850e__} is defined if this option is used.\n+constant @code{__v850e__} is defined if this option is used.\n \n If neither @option{-mv850} nor @option{-mv850e} nor @option{-mv850e1}\n nor @option{-mv850e2} nor @option{-mv850e2v3} nor @option{-mv850e3v5}\n are defined then a default target processor is chosen and the\n relevant @samp{__v850*__} preprocessor constant is defined.\n \n-The preprocessor constants @samp{__v850} and @samp{__v851__} are always\n+The preprocessor constants @code{__v850} and @code{__v851__} are always\n defined, regardless of which processor variant is the target.\n \n @item -mdisable-callt\n@@ -23137,7 +23137,7 @@ Use it to conform to a non-default application binary interface.\n \n @item -fshort-wchar\n @opindex fshort-wchar\n-Override the underlying type for @samp{wchar_t} to be @samp{short\n+Override the underlying type for @code{wchar_t} to be @code{short\n unsigned int} instead of the default for the target.  This option is\n useful for building programs to run under WINE@.\n \n@@ -23169,7 +23169,7 @@ variable declarations this way.\n \n @item -fno-ident\n @opindex fno-ident\n-Ignore the @samp{#ident} directive.\n+Ignore the @code{#ident} directive.\n \n @item -finhibit-size-directive\n @opindex finhibit-size-directive\n@@ -23343,7 +23343,7 @@ functions.  The profiling calls indicate where, conceptually, the\n inline function is entered and exited.  This means that addressable\n versions of such functions must be available.  If all your uses of a\n function are expanded inline, this may mean an additional expansion of\n-code size.  If you use @samp{extern inline} in your C code, an\n+code size.  If you use @code{extern inline} in your C code, an\n addressable version of such functions must be provided.  (This is\n normally the case anyway, but if you get lucky and the optimizer always\n expands the functions inline, you might have gotten away without\n@@ -23524,10 +23524,10 @@ identical syntax.  This is a great boon to those working with\n cross-platform projects.\n \n For those adding visibility support to existing code, you may find\n-@samp{#pragma GCC visibility} of use.  This works by you enclosing\n+@code{#pragma GCC visibility} of use.  This works by you enclosing\n the declarations you wish to set visibility for with (for example)\n-@samp{#pragma GCC visibility push(hidden)} and\n-@samp{#pragma GCC visibility pop}.\n+@code{#pragma GCC visibility push(hidden)} and\n+@code{#pragma GCC visibility pop}.\n Bear in mind that symbol visibility should be viewed @strong{as\n part of the API interface contract} and thus all new code should\n always specify visibility when it is not the default; i.e., declarations\n@@ -23540,10 +23540,10 @@ Note that due to ISO C++ specification requirements, @code{operator new} and\n Be aware that headers from outside your project, in particular system\n headers and headers from any other library you use, may not be\n expecting to be compiled with visibility other than the default.  You\n-may need to explicitly say @samp{#pragma GCC visibility push(default)}\n+may need to explicitly say @code{#pragma GCC visibility push(default)}\n before including any such headers.\n \n-@samp{extern} declarations are not affected by @option{-fvisibility}, so\n+@code{extern} declarations are not affected by @option{-fvisibility}, so\n a lot of code can be recompiled with @option{-fvisibility=hidden} with\n no modifications.  However, this means that calls to @code{extern}\n functions with no explicit visibility use the PLT, so it is more"}]}