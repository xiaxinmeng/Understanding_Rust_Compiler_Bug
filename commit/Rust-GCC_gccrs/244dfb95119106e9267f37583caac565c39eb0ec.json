{"sha": "244dfb95119106e9267f37583caac565c39eb0ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0ZGZiOTUxMTkxMDZlOTI2N2YzNzU4M2NhYWM1NjVjMzllYjBlYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-21T00:24:09Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-22T21:35:38Z"}, "message": "c++: Prevent bogus -Wtype-limits warning with NTTP [PR100161]\n\nRecently, we made sure that we never call value_dependent_expression_p\non an expression that isn't potential_constant_expression.  That caused\nthis bogus warning with a non-type template parameter, something that\nusers don't want to see.\n\nThe problem is that in tsubst_copy_and_build/LE_EXPR 't' is \"i < n\",\nwhich, due to 'i', is not p_c_e, therefore we call t_d_e_p.  But the\ntype of 'n' isn't dependent, so we think the whole 't' expression is\nnot dependent.  It seems we need to test both op0 and op1 separately\nto suppress this warning.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100161\n\t* pt.c (tsubst_copy_and_build) <case PLUS_EXPR>: Test op0 and\n\top1 separately for value- or type-dependence.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100161\n\t* g++.dg/warn/Wtype-limits6.C: New test.", "tree": {"sha": "157a684ffc69a6222e8e7d96917b11dc3942aa37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/157a684ffc69a6222e8e7d96917b11dc3942aa37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/244dfb95119106e9267f37583caac565c39eb0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244dfb95119106e9267f37583caac565c39eb0ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244dfb95119106e9267f37583caac565c39eb0ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244dfb95119106e9267f37583caac565c39eb0ec/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3275f2e2af24541f55462c23af4c6530ac12c5e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3275f2e2af24541f55462c23af4c6530ac12c5e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3275f2e2af24541f55462c23af4c6530ac12c5e2"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "8d64fef957d9af55f23224d0a06f2a078ef53661", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244dfb95119106e9267f37583caac565c39eb0ec/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244dfb95119106e9267f37583caac565c39eb0ec/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=244dfb95119106e9267f37583caac565c39eb0ec", "patch": "@@ -19906,15 +19906,21 @@ tsubst_copy_and_build (tree t,\n     case MEMBER_REF:\n     case DOTSTAR_EXPR:\n       {\n-\t/* If T was type-dependent, suppress warnings that depend on the range\n-\t   of the types involved.  */\n-\t++processing_template_decl;\n-\tconst bool was_dep = (potential_constant_expression (t)\n-\t\t\t      ? value_dependent_expression_p (t)\n-\t\t\t      : type_dependent_expression_p (t));\n-\t--processing_template_decl;\n-\ttree op0 = RECUR (TREE_OPERAND (t, 0));\n-\ttree op1 = RECUR (TREE_OPERAND (t, 1));\n+\t/* If either OP0 or OP1 was value- or type-dependent, suppress\n+\t   warnings that depend on the range of the types involved.  */\n+\ttree op0 = TREE_OPERAND (t, 0);\n+\ttree op1 = TREE_OPERAND (t, 1);\n+\tauto dep_p = [](tree t) {\n+\t  ++processing_template_decl;\n+\t  bool r = (potential_constant_expression (t)\n+\t\t    ? value_dependent_expression_p (t)\n+\t\t    : type_dependent_expression_p (t));\n+\t  --processing_template_decl;\n+\t  return r;\n+\t};\n+\tconst bool was_dep = dep_p (op0) || dep_p (op1);\n+\top0 = RECUR (op0);\n+\top1 = RECUR (op1);\n \n \twarning_sentinel s1(warn_type_limits, was_dep);\n \twarning_sentinel s2(warn_div_by_zero, was_dep);"}, {"sha": "9d5886d532373f19de02459341646d3d90cecdd1", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244dfb95119106e9267f37583caac565c39eb0ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244dfb95119106e9267f37583caac565c39eb0ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits6.C?ref=244dfb95119106e9267f37583caac565c39eb0ec", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/100161\n+// { dg-additional-options \"-Wtype-limits\" }\n+\n+void f(unsigned);\n+\n+template<unsigned n>\n+void g()\n+{\n+    for (unsigned i = 0; i < n; i++) { // { dg-bogus \"always false\" }\n+        f(i);\n+    }\n+}\n+\n+void h()\n+{\n+    g<0>();\n+}"}]}