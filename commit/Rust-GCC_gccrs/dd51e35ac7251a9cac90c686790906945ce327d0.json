{"sha": "dd51e35ac7251a9cac90c686790906945ce327d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ1MWUzNWFjNzI1MWE5Y2FjOTBjNjg2NzkwOTA2OTQ1Y2UzMjdkMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:49:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:49:06Z"}, "message": "mep.c (option_mtiny_specified): Remove.\n\n\t* config/mep/mep.c (option_mtiny_specified): Remove.\n\t(mep_option_override): Move register handling for -mivc2 from\n\tmep_handle_option.  Use global_options_set.x_mep_tiny_cutoff\n\tinstead of option_mtiny_specified.\n\t(mep_handle_option): Access target_flags via opts pointer.  Don't\n\tassert that global structures are in use.  Defer part of -mivc2\n\thandling and move it to mep_option_override.\n\t* config/mep/mep.opt (IVC2): New Mask entry.\n\t(mivc2): Use Var and Defer instead of Mask.\n\nFrom-SVN: r171328", "tree": {"sha": "b88f4094f3424143f6fb43a286b4932f9c3a2815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b88f4094f3424143f6fb43a286b4932f9c3a2815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd51e35ac7251a9cac90c686790906945ce327d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd51e35ac7251a9cac90c686790906945ce327d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd51e35ac7251a9cac90c686790906945ce327d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd51e35ac7251a9cac90c686790906945ce327d0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8d3d9161118cfa3e8188b7a84f34cf842e0787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8d3d9161118cfa3e8188b7a84f34cf842e0787"}], "stats": {"total": 142, "additions": 83, "deletions": 59}, "files": [{"sha": "522d016cbe4b1891b39cb76b6711c4d9deda6b54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd51e35ac7251a9cac90c686790906945ce327d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd51e35ac7251a9cac90c686790906945ce327d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd51e35ac7251a9cac90c686790906945ce327d0", "patch": "@@ -1,3 +1,15 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/mep/mep.c (option_mtiny_specified): Remove.\n+\t(mep_option_override): Move register handling for -mivc2 from\n+\tmep_handle_option.  Use global_options_set.x_mep_tiny_cutoff\n+\tinstead of option_mtiny_specified.\n+\t(mep_handle_option): Access target_flags via opts pointer.  Don't\n+\tassert that global structures are in use.  Defer part of -mivc2\n+\thandling and move it to mep_option_override.\n+\t* config/mep/mep.opt (IVC2): New Mask entry.\n+\t(mivc2): Use Var and Defer instead of Mask.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/v850/v850-opts.h: New."}, {"sha": "02c825ad763d5283a02f6c7f7529d6d6f79e7eb8", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 67, "deletions": 57, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd51e35ac7251a9cac90c686790906945ce327d0/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd51e35ac7251a9cac90c686790906945ce327d0/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=dd51e35ac7251a9cac90c686790906945ce327d0", "patch": "@@ -268,8 +268,6 @@ static const int mep_cmov_insns[] = {\n   mep_cor3\n };\n \n-static int option_mtiny_specified = 0;\n-\n \f\n static void\n mep_set_leaf_registers (int enable)\n@@ -316,6 +314,58 @@ static const struct default_options mep_option_optimization_table[] =\n static void\n mep_option_override (void)\n {\n+  unsigned int i;\n+  int j;\n+  cl_deferred_option *opt;\n+  VEC(cl_deferred_option,heap) *vec\n+    = (VEC(cl_deferred_option,heap) *) mep_deferred_options;\n+\n+  FOR_EACH_VEC_ELT (cl_deferred_option, vec, i, opt)\n+    {\n+      switch (opt->opt_index)\n+\t{\n+\tcase OPT_mivc2:\n+\t  for (j = 0; j < 32; j++)\n+\t    fixed_regs[j + 48] = 0;\n+\t  for (j = 0; j < 32; j++)\n+\t    call_used_regs[j + 48] = 1;\n+\t  for (j = 6; j < 8; j++)\n+\t    call_used_regs[j + 48] = 0;\n+\n+#define RN(n,s) reg_names[FIRST_CCR_REGNO + n] = s\n+\t  RN (0, \"$csar0\");\n+\t  RN (1, \"$cc\");\n+\t  RN (4, \"$cofr0\");\n+\t  RN (5, \"$cofr1\");\n+\t  RN (6, \"$cofa0\");\n+\t  RN (7, \"$cofa1\");\n+\t  RN (15, \"$csar1\");\n+\n+\t  RN (16, \"$acc0_0\");\n+\t  RN (17, \"$acc0_1\");\n+\t  RN (18, \"$acc0_2\");\n+\t  RN (19, \"$acc0_3\");\n+\t  RN (20, \"$acc0_4\");\n+\t  RN (21, \"$acc0_5\");\n+\t  RN (22, \"$acc0_6\");\n+\t  RN (23, \"$acc0_7\");\n+\n+\t  RN (24, \"$acc1_0\");\n+\t  RN (25, \"$acc1_1\");\n+\t  RN (26, \"$acc1_2\");\n+\t  RN (27, \"$acc1_3\");\n+\t  RN (28, \"$acc1_4\");\n+\t  RN (29, \"$acc1_5\");\n+\t  RN (30, \"$acc1_6\");\n+\t  RN (31, \"$acc1_7\");\n+#undef RN\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   if (flag_pic == 1)\n     warning (OPT_fpic, \"-fpic is not supported\");\n   if (flag_pic == 2)\n@@ -326,9 +376,9 @@ mep_option_override (void)\n     error (\"only one of -ms and -ml may be given\");\n   if (TARGET_M && TARGET_L)\n     error (\"only one of -mm and -ml may be given\");\n-  if (TARGET_S && option_mtiny_specified)\n+  if (TARGET_S && global_options_set.x_mep_tiny_cutoff)\n     error (\"only one of -ms and -mtiny= may be given\");\n-  if (TARGET_M && option_mtiny_specified)\n+  if (TARGET_M && global_options_set.x_mep_tiny_cutoff)\n     error (\"only one of -mm and -mtiny= may be given\");\n   if (TARGET_OPT_CLIP && ! TARGET_OPT_MINMAX)\n     warning (0, \"-mclip currently has no effect without -mminmax\");\n@@ -345,7 +395,7 @@ mep_option_override (void)\n     mep_tiny_cutoff = 65536;\n   if (TARGET_M)\n     mep_tiny_cutoff = 0;\n-  if (TARGET_L && ! option_mtiny_specified)\n+  if (TARGET_L && ! global_options_set.x_mep_tiny_cutoff)\n     mep_tiny_cutoff = 0;\n \n   if (TARGET_64BIT_CR_REGS)\n@@ -7260,76 +7310,36 @@ mep_address_cost (rtx addr ATTRIBUTE_UNUSED, bool ATTRIBUTE_UNUSED speed_p)\n }\n \n static bool\n-mep_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+mep_handle_option (struct gcc_options *opts,\n+\t\t   struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t   const struct cl_decoded_option *decoded,\n \t\t   location_t loc ATTRIBUTE_UNUSED)\n {\n-  int i;\n   size_t code = decoded->opt_index;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n     case OPT_mall_opts:\n-      target_flags |= MEP_ALL_OPTS;\n+      opts->x_target_flags |= MEP_ALL_OPTS;\n       break;\n \n     case OPT_mno_opts:\n-      target_flags &= ~ MEP_ALL_OPTS;\n+      opts->x_target_flags &= ~ MEP_ALL_OPTS;\n       break;\n \n     case OPT_mcop64:\n-      target_flags |= MASK_COP;\n-      target_flags |= MASK_64BIT_CR_REGS;\n+      opts->x_target_flags |= MASK_COP;\n+      opts->x_target_flags |= MASK_64BIT_CR_REGS;\n       break;\n \n-    case OPT_mtiny_:\n-      option_mtiny_specified = 1;\n-\n     case OPT_mivc2:\n-      target_flags |= MASK_COP;\n-      target_flags |= MASK_64BIT_CR_REGS;\n-      target_flags |= MASK_VLIW;\n-      target_flags |= MASK_OPT_VL64;\n-      target_flags |= MASK_IVC2;\n-\n-      for (i=0; i<32; i++)\n-\tfixed_regs[i+48] = 0;\n-      for (i=0; i<32; i++)\n-\tcall_used_regs[i+48] = 1;\n-      for (i=6; i<8; i++)\n-\tcall_used_regs[i+48] = 0;\n-\n-#define RN(n,s) reg_names[FIRST_CCR_REGNO + n] = s\n-      RN (0, \"$csar0\");\n-      RN (1, \"$cc\");\n-      RN (4, \"$cofr0\");\n-      RN (5, \"$cofr1\");\n-      RN (6, \"$cofa0\");\n-      RN (7, \"$cofa1\");\n-      RN (15, \"$csar1\");\n-\n-      RN (16, \"$acc0_0\");\n-      RN (17, \"$acc0_1\");\n-      RN (18, \"$acc0_2\");\n-      RN (19, \"$acc0_3\");\n-      RN (20, \"$acc0_4\");\n-      RN (21, \"$acc0_5\");\n-      RN (22, \"$acc0_6\");\n-      RN (23, \"$acc0_7\");\n-\n-      RN (24, \"$acc1_0\");\n-      RN (25, \"$acc1_1\");\n-      RN (26, \"$acc1_2\");\n-      RN (27, \"$acc1_3\");\n-      RN (28, \"$acc1_4\");\n-      RN (29, \"$acc1_5\");\n-      RN (30, \"$acc1_6\");\n-      RN (31, \"$acc1_7\");\n-#undef RN\n+      opts->x_target_flags |= MASK_COP;\n+      opts->x_target_flags |= MASK_64BIT_CR_REGS;\n+      opts->x_target_flags |= MASK_VLIW;\n+      opts->x_target_flags |= MASK_OPT_VL64;\n+      opts->x_target_flags |= MASK_IVC2;\n \n+      /* Remaining handling of this option deferred.  */\n       break;\n \n     default:"}, {"sha": "38b8f80527bba674ae853f8a20f07d86fa4f8454", "filename": "gcc/config/mep/mep.opt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd51e35ac7251a9cac90c686790906945ce327d0/gcc%2Fconfig%2Fmep%2Fmep.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd51e35ac7251a9cac90c686790906945ce327d0/gcc%2Fconfig%2Fmep%2Fmep.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.opt?ref=dd51e35ac7251a9cac90c686790906945ce327d0", "patch": "@@ -1,5 +1,5 @@\n ; Target specific command line options for the MEP port of the compiler.\n-; Copyright (C) 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n ; Contributed by Red Hat Inc.\n ;\n ; GCC is free software; you can redistribute it and/or modify it under\n@@ -16,6 +16,8 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.  */\n \n+Mask(IVC2)\n+\n mabsdiff\n Target Mask(OPT_ABSDIFF)\n Enable absolute difference instructions\n@@ -61,7 +63,7 @@ Target Mask(64BIT_CR_REGS) RejectNegative\n Enable MeP Coprocessor with 64-bit registers\n \n mivc2\n-Target Mask(IVC2) RejectNegative\n+Target RejectNegative Var(mep_deferred_options) Defer\n Enable IVC2 scheduling\n \n mdc"}]}