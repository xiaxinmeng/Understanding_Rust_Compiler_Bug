{"sha": "9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzNGRiYmYwNmY3YWM4YTJhMGFjMGQ5YzRmZDg1NDBmMjRjZWM4Mw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-18T21:02:44Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-18T21:02:44Z"}, "message": "extend.texi, [...]: Eliminate overfull or underfull hboxes.\n\n        * doc/extend.texi, doc/gcc.texi, doc/install-old.texi,\n        doc/invoke.texi, doc/md.texi, doc/rtl.texi, doc/include/gpl.texi:\n        Eliminate overfull or underfull hboxes.\n\nFrom-SVN: r45012", "tree": {"sha": "fe743a1b6588147724f41a6c3991d22299f3b611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe743a1b6588147724f41a6c3991d22299f3b611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/comments", "author": null, "committer": null, "parents": [{"sha": "b649398a84df1df9c44e50b58c4fe766909af897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b649398a84df1df9c44e50b58c4fe766909af897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b649398a84df1df9c44e50b58c4fe766909af897"}], "stats": {"total": 689, "additions": 344, "deletions": 345}, "files": [{"sha": "2ddce085476371810cd16108355f4931500818b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -1,6 +1,12 @@\n 2001-08-18  Zack Weinberg  <zackw@panix.com>\n \n-\t* cpperror.c: Use VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout. \n+\t* doc/extend.texi, doc/gcc.texi, doc/install-old.texi,\n+\tdoc/invoke.texi, doc/md.texi, doc/rtl.texi, doc/include/gpl.texi:\n+\tEliminate overfull or underfull hboxes.\n+\n+2001-08-18  Zack Weinberg  <zackw@panix.com>\n+\n+\t* cpperror.c: Use VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout.\n \n 2001-08-18  Zack Weinberg  <zackw@panix.com>\n \n@@ -12,12 +18,12 @@\n \tTARGET_SCHED_ADJUST_PRIORITY, TARGET_SCHED_ISSUE_RATE,\n \tTARGET_SCHED_VARIABLE_ISSUE, TARGET_SCHED_INIT,\n \tTARGET_SCHED_FINISH, TARGET_SCHED_REORDER,\n-\tTARGET_SCHED_REORDER2, TARGET_SCHED_CYCLE_DISPLAY): \n+\tTARGET_SCHED_REORDER2, TARGET_SCHED_CYCLE_DISPLAY):\n \tNew hook #defines to be overridden.\n \t(TARGET_SCHED): Bring them all together.\n \t(TARGET_INITIALIZER): Update.\n \t* target.h: Don't forward declare struct rtx_def.  Use 'rtx'\n-\tinstead of 'struct rtx_def *' throughout.  \n+\tinstead of 'struct rtx_def *' throughout.\n \t(struct sched): New set of hooks for the scheduler.\n \t* Makefile.in (haifa-sched.o): Depend on target.h.\n \t* doc/tm.texi: Document the new scheduler hooks, together in\n@@ -81,7 +87,7 @@\n 2001-08-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* except.c (TYPE_HASH): Delete.\n-\t\n+\n \t* objc/objc-act.c (HASHFUNCTION): Cast to size_t, not\n \tHOST_WIDE_INT.\n \n@@ -140,7 +146,7 @@\n \t(MAX_OFILE_ALIGNMENT): New.\n \t(ASM_OUTPUT_ALIGNED_LOCAL): Use bss_section.\n \t* config/mips/mips.c (mips_make_temp_file, temp_filename): Remove.\n-\t(copy_file_data): Split out from \n+\t(copy_file_data): Split out from\n \t(mips_asm_file_end): ... here.\n \t(mips_asm_file_start): Remove extra .section directive.  Use\n \ttmpfile instead of mips_make_temp_file."}, {"sha": "05a2e5854e66404b8db02656c88de35ae13ea137", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 90, "deletions": 60, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -147,7 +147,8 @@ results (5.2.4.2.2).}\n \n @item\n @cite{The rounding behaviors characterized by non-standard values\n-of @code{FLT_ROUNDS} (5.2.4.2.2).}\n+of @code{FLT_ROUNDS} @gol\n+(5.2.4.2.2).}\n \n @item\n @cite{The evaluation methods characterized by non-standard negative\n@@ -788,9 +789,11 @@ but it's not wise to take the risk.  If, however, the nested function\n does not refer to anything that has gone out of scope, you should be\n safe.\n \n-GCC implements taking the address of a nested function using a\n-technique called @dfn{trampolines}.   A paper describing them is\n-available as @uref{http://people.debian.org/~karlheg/Usenix88-lexic.pdf}.\n+GCC implements taking the address of a nested function using a technique\n+called @dfn{trampolines}.  A paper describing them is available as\n+\n+@noindent\n+@uref{http://people.debian.org/~karlheg/Usenix88-lexic.pdf}.\n \n A nested function can jump to a label inherited from a containing\n function, provided the label was explicitly declared in the containing\n@@ -2546,27 +2549,40 @@ An attribute specifier list may appear immediately before a declarator\n (other than the first) in a comma-separated list of declarators in a\n declaration of more than one identifier using a single list of\n specifiers and qualifiers.  Such attribute specifiers apply\n-only to the identifier before whose declarator they appear.  For example, in\n-@code{__attribute__((noreturn)) void d0 (void),\n-__attribute__((format(printf, 1, 2))) d1 (const char *, ...), d2\n-(void)}, the @code{noreturn} attribute applies to all the functions\n+only to the identifier before whose declarator they appear.  For\n+example, in\n+\n+@smallexample\n+__attribute__((noreturn)) void d0 (void),\n+    __attribute__((format(printf, 1, 2))) d1 (const char *, ...),\n+     d2 (void)\n+@end smallexample\n+\n+@noindent\n+the @code{noreturn} attribute applies to all the functions\n declared; the @code{format} attribute only applies to @code{d1}.\n \n An attribute specifier list may appear immediately before the comma,\n @code{=} or semicolon terminating the declaration of an identifier other\n than a function definition.  At present, such attribute specifiers apply\n to the declared object or function, but in future they may attach to the\n outermost adjacent declarator.  In simple cases there is no difference,\n-but, for example, in @code{void (****f)(void)\n-__attribute__((noreturn));}, at present the @code{noreturn} attribute\n-applies to @code{f}, which causes a warning since @code{f} is not a\n-function, but in future it may apply to the function @code{****f}.  The\n-precise semantics of what attributes in such cases will apply to are not\n-yet specified.  Where an assembler name for an object or function is\n-specified (@pxref{Asm Labels}), at present the attribute must follow the\n-@code{asm} specification; in future, attributes before the @code{asm}\n-specification may apply to the adjacent declarator, and those after it\n-to the declared object or function.\n+but, for example, in \n+\n+@smallexample\n+void (****f)(void) __attribute__((noreturn));\n+@end smallexample\n+\n+@noindent\n+at present the @code{noreturn} attribute applies to @code{f}, which\n+causes a warning since @code{f} is not a function, but in future it may\n+apply to the function @code{****f}.  The precise semantics of what\n+attributes in such cases will apply to are not yet specified.  Where an\n+assembler name for an object or function is specified (@pxref{Asm\n+Labels}), at present the attribute must follow the @code{asm}\n+specification; in future, attributes before the @code{asm} specification\n+may apply to the adjacent declarator, and those after it to the declared\n+object or function.\n \n An attribute specifier list may, in future, be permitted to appear after\n the declarator in a function definition (before any old-style parameter\n@@ -2610,12 +2626,24 @@ declaration @code{T D} specifies the type\n @var{type-qualifier-and-attribute-specifier-list} @var{Type}'' for\n @var{ident}.\n \n-For example, @code{void (__attribute__((noreturn)) ****f)();} specifies\n-the type ``pointer to pointer to pointer to pointer to non-returning\n-function returning @code{void}''.  As another example, @code{char\n-*__attribute__((aligned(8))) *f;} specifies the type ``pointer to\n-8-byte-aligned pointer to @code{char}''.  Note again that this describes\n-intended future semantics, not current implementation.\n+For example, \n+\n+@smallexample\n+void (__attribute__((noreturn)) ****f) (void);\n+@end smallexample\n+\n+@noindent\n+specifies the type ``pointer to pointer to pointer to pointer to\n+non-returning function returning @code{void}''.  As another example,\n+\n+@smallexample\n+char *__attribute__((aligned(8))) *f;\n+@end smallexample\n+\n+@noindent\n+specifies the type ``pointer to 8-byte-aligned pointer to @code{char}''.\n+Note again that this describes intended future semantics, not current\n+implementation.\n \n @node Function Prototypes\n @section Prototypes and Old-Style Function Definitions\n@@ -2672,6 +2700,7 @@ isroot (uid_t x)\n @}\n @end example\n \n+@noindent\n GNU C++ does not support old-style function definitions, so this\n extension is irrelevant.\n \n@@ -4166,11 +4195,11 @@ recommend general use of these functions.\n The remaining functions are provided for optimization purposes.\n \n @opindex fno-builtin\n-GCC includes built-in versions of many of the functions in the\n-standard C library.  The versions prefixed with @code{__builtin_} will\n-always be treated as having the same meaning as the C library function\n-even if you specify the @option{-fno-builtin} (@pxref{C Dialect Options})\n-option.  Many of these functions are only optimized in certain cases; if\n+GCC includes built-in versions of many of the functions in the standard\n+C library.  The versions prefixed with @code{__builtin_} will always be\n+treated as having the same meaning as the C library function even if you\n+specify the @option{-fno-builtin} option. (@pxref{C Dialect Options})\n+Many of these functions are only optimized in certain cases; if they are\n not optimized in a particular case, a call to the library function will\n be emitted.\n \n@@ -4184,38 +4213,38 @@ strict C89 mode (@option{-ansi} or @option{-std=c89}).\n \n Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n @code{bzero}, @code{index}, @code{rindex} and @code{ffs} may be handled\n-as built-in functions.  Corresponding versions @code{__builtin_alloca},\n-@code{__builtin_bcmp}, @code{__builtin_bzero}, @code{__builtin_index},\n-@code{__builtin_rindex} and @code{__builtin_ffs} are also recognized in\n-strict ISO C mode.\n+as built-in functions.  All these functions have corresponding versions\n+prefixed with @code{__builtin_}, which may be used even in strict C89\n+mode.\n \n The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl},\n @code{creal}, @code{crealf}, @code{creall}, @code{cimag}, @code{cimagf},\n-@code{cimagl}, @code{llabs} and @code{imaxabs} are handled as built-in functions\n-except in strict ISO C89 mode.  There are also built-in versions of the ISO C99\n-functions @code{cosf}, @code{cosl}, @code{fabsf}, @code{fabsl},\n-@code{sinf}, @code{sinl}, @code{sqrtf}, and @code{sqrtl}, that are\n-recognized in any mode since ISO C89 reserves these names for the\n-purpose to which ISO C99 puts them.  All these functions have\n-corresponding versions prefixed with @code{__builtin_}.\n-\n-The following ISO C89 functions are recognized as built-in functions unless\n-@option{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n+@code{cimagl}, @code{llabs} and @code{imaxabs} are handled as built-in\n+functions except in strict ISO C89 mode.  There are also built-in\n+versions of the ISO C99 functions @code{cosf}, @code{cosl},\n+@code{fabsf}, @code{fabsl}, @code{sinf}, @code{sinl}, @code{sqrtf}, and\n+@code{sqrtl}, that are recognized in any mode since ISO C89 reserves\n+these names for the purpose to which ISO C99 puts them.  All these\n+functions have corresponding versions prefixed with @code{__builtin_}.\n+\n+The ISO C89 functions @code{abs}, @code{cos}, @code{fabs},\n @code{fprintf}, @code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy},\n @code{memset}, @code{printf}, @code{sin}, @code{sqrt}, @code{strcat},\n @code{strchr}, @code{strcmp}, @code{strcpy}, @code{strcspn},\n @code{strlen}, @code{strncat}, @code{strncmp}, @code{strncpy},\n-@code{strpbrk}, @code{strrchr}, @code{strspn}, and @code{strstr}.  All\n-of these functions have corresponding versions prefixed with\n-@code{__builtin_}, except that the version for @code{sqrt} is called\n-@code{__builtin_fsqrt}.\n-\n-GCC provides built-in versions of the ISO C99 floating point\n-comparison macros (that avoid raising exceptions for unordered\n-operands): @code{__builtin_isgreater}, @code{__builtin_isgreaterequal},\n-@code{__builtin_isless}, @code{__builtin_islessequal},\n-@code{__builtin_islessgreater}, and @code{__builtin_isunordered}.\n-\n+@code{strpbrk}, @code{strrchr}, @code{strspn}, and @code{strstr} are all\n+recognized as built-in functions unless @option{-fno-builtin} is\n+specified.  All of these functions have corresponding versions prefixed\n+with @code{__builtin_}, except that the version for @code{sqrt} is\n+called @code{__builtin_fsqrt}.\n+\n+GCC provides built-in versions of the ISO C99 floating point comparison\n+macros that avoid raising exceptions for unordered operands.  They have\n+the same names as the standard macros ( @code{isgreater},\n+@code{isgreaterequal}, @code{isless}, @code{islessequal},\n+@code{islessgreater}, and @code{isunordered}) , with @code{__builtin_}\n+prefixed.  We intend for a library implementor to be able to simply\n+@code{#define} each standard macro to its built-in equivalent.\n \n @deftypefn {Built-in Function} int __builtin_constant_p (@var{exp})\n You can use the built-in function @code{__builtin_constant_p} to\n@@ -4943,9 +4972,10 @@ using code written for the Cfront model, the file containing a class\n template and the file containing its member templates should be\n implemented in the same translation unit.\n \n+@item\n @opindex falt-external-templates\n-A slight variation on this approach is to instead use the flag\n-@option{-falt-external-templates}; this flag causes template\n+A slight variation on this approach is to use the flag\n+@option{-falt-external-templates} instead.  This flag causes template\n instances to be emitted in the translation unit that implements the\n header where they are first instantiated, rather than the one which\n implements the file where the templates are defined.  This header must\n@@ -5047,11 +5077,11 @@ from C++.  Normally, GNU C++ will automatically detect when you are\n writing C++ code that uses Java exceptions, and handle them\n appropriately.  However, if C++ code only needs to execute destructors\n when Java exceptions are thrown through it, GCC will guess incorrectly.\n-Sample problematic code:\n+Sample problematic code is:\n \n @example\n   struct S @{ ~S(); @};\n-  extern void bar();    // is implemented in Java and may throw exceptions\n+  extern void bar();    // is written in Java, and may throw exceptions\n   void foo()\n   @{\n     S s;\n@@ -5071,8 +5101,8 @@ exceptions, or run destructors when exceptions are thrown through them.\n \n You cannot mix Java and C++ exceptions in the same translation unit.  It\n is believed to be safe to throw a C++ exception from one file through\n-another file compiled for the for the Java exception model, or vice\n-versa, but there may be bugs in this area.\n+another file compiled for the Java exception model, or vice versa, but\n+there may be bugs in this area.\n \n @node Deprecated Features\n @section Deprecated Features"}, {"sha": "862d2fe29db77a5d2f32519280ca1219a3c08bba", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -2529,11 +2529,18 @@ our current development sources are available by CVS (see\n @uref{http://gcc.gnu.org/cvs.html}).  Source and binary snapshots are\n also available for FTP; see @uref{http://gcc.gnu.org/snapshots.html}.\n \n-If you would like to work on improvements to GCC, please read\n-@uref{http://gcc.gnu.org/contribute.html} and\n-@uref{http://gcc.gnu.org/contributewhy.html} for information on how to\n-make useful contributions and avoid duplication of effort.  Suggested\n-projects are listed at @uref{http://gcc.gnu.org/projects/}.\n+If you would like to work on improvements to GCC, please read the\n+advice at these URLs:\n+\n+@smallexample\n+@uref{http://gcc.gnu.org/contribute.html} \n+@uref{http://gcc.gnu.org/contributewhy.html}\n+@end smallexample\n+\n+@noindent\n+for information on how to make useful contributions and avoid\n+duplication of effort.  Suggested projects are listed at\n+@uref{http://gcc.gnu.org/projects/}.\n \n @node VMS\n @chapter Using GCC on VMS\n@@ -3229,23 +3236,23 @@ tree node that represents an expression has a data type attached.\n Variables are represented as declaration nodes.\n \n The language-independent source files for parsing are\n-@file{stor-layout.c}, @file{fold-const.c}, and @file{tree.c}.\n+@file{tree.c}, @file{fold-const.c}, and @file{stor-layout.c}.\n There are also header files @file{tree.h} and @file{tree.def}\n which define the format of the tree representation.\n \n-C Preprocessing, for language front ends, that want or require it, is\n+C preprocessing, for language front ends, that want or require it, is\n performed by cpplib, which is covered in seperate documentation.  In\n-particular, the internals are covered in @xref{Top, ,Cpplib internals, cppinternals, Cpplib Internals}.\n-\n+particular, the internals are covered in @xref{Top, ,Cpplib internals,\n+cppinternals, Cpplib Internals}.\n \n @c Avoiding overfull is tricky here.\n The source files to parse C are\n-@file{c-aux-info.c},\n @file{c-convert.c},\n @file{c-decl.c},\n @file{c-errors.c},\n @file{c-lang.c},\n @file{c-parse.in},\n+@file{c-aux-info.c},\n and\n @file{c-typeck.c},\n along with a header file\n@@ -3266,19 +3273,18 @@ They are @file{parse.y},\n @file{cp-tree.h}, and @file{decl.h}.\n \n The special source files for parsing Objective-C are in @file{objc/}.\n-They are @file{objc-parse.y}, @file{objc-act.c}, @file{objc-tree.def}, and\n-@file{objc-act.h}.  Certain C-specific files are used for this as\n-well.\n+They are @file{objc-act.c}, @file{objc-tree.def}, and @file{objc-act.h}.\n+Certain C-specific files are used for this as well.\n \n The files\n @file{c-common.c},\n @file{c-common.def},\n @file{c-dump.c},\n @file{c-format.c},\n-@file{c-lex.c},\n @file{c-pragma.c},\n-and\n @file{c-semantics.c},\n+and\n+@file{c-lex.c},\n along with header files\n @file{c-common.h},\n @file{c-dump.h},\n@@ -4193,7 +4199,9 @@ For example, in the PowerPC embedded ABI support, it is not desirable\n to build libraries compiled with the @option{-mcall-aix} option\n and either of the @option{-fleading-underscore} or @option{-mlittle} options\n at the same time.  Therefore @code{MULTILIB_EXCEPTIONS} is set to\n-@code{*mcall-aix/*fleading-underscore* *mlittle/*mcall-aix*}.\n+@smallexample\n+*mcall-aix/*fleading-underscore* *mlittle/*mcall-aix*\n+@end smallexample\n \n @findex MULTILIB_EXTRA_OPTS\n @item MULTILIB_EXTRA_OPTS"}, {"sha": "32e74060f2693f8f9bc04934c7e45ab7099e7131", "filename": "gcc/doc/include/gpl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Finclude%2Fgpl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Finclude%2Fgpl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finclude%2Fgpl.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -61,7 +61,7 @@ patent must be licensed for everyone's free use or not licensed at all.\n modification follow.\n \n @iftex\n-@unnumberedsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n+@unnumberedsec TERMS AND CONDITIONS FOR COPYING,@*DISTRIBUTION AND MODIFICATION\n @end iftex\n @ifnottex\n @center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION"}, {"sha": "94c00975c6e17d7c12e4cf08081ba4078805ec02", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -430,11 +430,11 @@ machine, the cross-compiler can use them also.\n Otherwise, you're on your own in finding header files to use when\n cross-compiling.\n \n-When you have found suitable header files, put them in the directory\n-@file{/usr/local/@var{target}/include}, before building the cross\n-compiler.  Then installation will run fixincludes properly and install\n-the corrected versions of the header files where the compiler will use\n-them.\n+When you have found suitable header files, you should put them in the\n+directory @file{/usr/local/@var{target}/include}, before building the\n+cross compiler.  Then installation will run fixincludes properly and\n+install the corrected versions of the header files where the compiler\n+will use them.\n \n Provide the header files before you build the cross-compiler, because\n the build stage actually runs the cross-compiler to produce parts of\n@@ -613,9 +613,9 @@ $ install replace sys$common:[syslib]dcltables\n @end smallexample\n \n @item\n-Type @samp{@@make-gcc} to recompile everything (alternatively, submit\n-the file @file{make-gcc.com} to a batch queue).  If you wish to build\n-the GNU C++ compiler as well as the GNU CC compiler, you must first edit\n+Type @samp{@@make-gcc} to recompile everything, or submit the file\n+@file{make-gcc.com} to a batch queue.  If you wish to build the GNU C++\n+compiler as well as the GNU CC compiler, you must first edit\n @file{make-gcc.com} and follow the instructions that appear in the\n comments.\n \n@@ -680,12 +680,6 @@ the read-only bit set, and the linker will generate warning messages\n about mismatched psect attributes for these variables.  These warning\n messages are merely a nuisance, and can safely be ignored.\n \n-If you are compiling with a version of GNU CC older than 1.33, specify\n-@samp{/DEFINE=(\"inline=\")} as an option in all the compilations.  This\n-requires editing all the @code{gcc} commands in @file{make-cc1.com}.\n-(The older versions had problems supporting @code{inline}.)  Once you\n-have a working 1.33 or newer GNU CC, you can change this file back.\n-\n @item\n If you want to build GNU CC with the VAX C compiler, you will need to\n make minor changes in @file{make-cccp.com} and @file{make-cc1.com}\n@@ -829,11 +823,12 @@ done).\n is where @code{g++} looks first for header files.  The C++ library\n installs only target independent header files in that directory.\n \n-@code{LOCAL_INCLUDE_DIR} is used only for a native compiler.  It is\n-normally @file{/usr/local/include}.  GNU CC searches this directory so\n-that users can install header files in @file{/usr/local/include}.\n+@code{LOCAL_INCLUDE_DIR} is used only by native compilers.  GNU CC\n+doesn't install anything there.  It is normally\n+@file{/usr/local/include}.  This is where local additions to a packaged\n+system should place header files.\n \n-@code{CROSS_INCLUDE_DIR} is used only for a cross compiler.  GNU CC\n+@code{CROSS_INCLUDE_DIR} is used only by cross compilers.  GNU CC\n doesn't install anything there.\n \n @code{TOOL_INCLUDE_DIR} is used for both native and cross compilers.  It"}, {"sha": "67c25c00720f032a3d6ba0dab423bb6d3d4ec5a2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 181, "deletions": 221, "changes": 402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -435,7 +435,8 @@ in the following sections.\n -mstrict-align  -mno-strict-align  -mrelocatable @gol\n -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n -mtoc  -mno-toc -mlittle  -mlittle-endian  -mbig  -mbig-endian @gol\n--mcall-aix -mcall-sysv -mcall-netbsd -mprototype  -mno-prototype @gol\n+-mcall-aix -mcall-sysv -mcall-netbsd @gol\n+-mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb -msdata @gol\n -msdata=@var{opt}  -mvxworks -G @var{num}}\n \n@@ -1107,50 +1108,12 @@ rely on ISO C features.  Some vendors are starting to ship systems with\n ISO C header files and you cannot use @option{-traditional} on such\n systems to compile files that include any system headers.\n \n-The @option{-traditional} option also enables @option{-traditional-cpp},\n-which is described next.\n+The @option{-traditional} option also enables @option{-traditional-cpp}.\n \n @item -traditional-cpp\n @opindex traditional-cpp\n Attempt to support some aspects of traditional C preprocessors.\n-Specifically:\n-\n-@itemize @bullet\n-@item\n-Comments convert to nothing at all, rather than to a space.  This allows\n-traditional token concatenation.\n-\n-@item\n-In a preprocessing directive, the @samp{#} symbol must appear as the first\n-character of a line.\n-\n-@item\n-Macro arguments are recognized within string constants in a macro\n-definition (and their values are stringified, though without additional\n-quote marks, when they appear in such a context).  The preprocessor\n-always considers a string constant to end at a newline.\n-\n-@item\n-@cindex detecting @w{@option{-traditional}}\n-The predefined macro @code{__STDC__} is not defined when you use\n-@option{-traditional}, but @code{__GNUC__} is (since the GNU extensions\n-which @code{__GNUC__} indicates are not affected by\n-@option{-traditional}).  If you need to write header files that work\n-differently depending on whether @option{-traditional} is in use, by\n-testing both of these predefined macros you can distinguish four\n-situations: GNU C, traditional GNU C, other ISO C compilers, and other\n-old C compilers.  The predefined macro @code{__STDC_VERSION__} is also\n-not defined when you use @option{-traditional}.  @xref{Standard\n-Predefined,,Standard Predefined Macros,cpp.info,The C Preprocessor},\n-for more discussion of these and other predefined macros.\n-\n-@item\n-@cindex string constants vs newline\n-@cindex newline vs string constants\n-The preprocessor considers a string constant to end at a newline (unless\n-the newline is escaped with @samp{\\}).  (Without @w{@option{-traditional}},\n-string constants can contain the newline character as typed.)\n-@end itemize\n+See the GNU CPP manual for details.\n \n @item -fcond-mismatch\n @opindex fcond-mismatch\n@@ -1319,17 +1282,18 @@ will still optimize based on the exception specifications.\n \n @item -fexternal-templates\n @opindex fexternal-templates\n-Cause template instantiations to obey @samp{#pragma interface} and\n-@samp{implementation}; template instances are emitted or not according\n+\n+Cause @samp{#pragma interface} and @samp{implementation} to apply to\n+template instantiation; template instances are emitted or not according\n to the location of the template definition.  @xref{Template\n Instantiation}, for more information.\n \n This option is deprecated.\n \n @item -falt-external-templates\n @opindex falt-external-templates\n-Similar to @option{-fexternal-templates}, but template instances are emitted or\n-not according to the place where they are first instantiated.\n+Similar to @option{-fexternal-templates}, but template instances are\n+emitted or not according to the place where they are first instantiated.\n @xref{Template Instantiation}, for more information.\n \n This option is deprecated.\n@@ -1406,9 +1370,9 @@ option are superseded by @option{-pedantic}, which works as it does for GNU C@.\n \n @item -frepo\n @opindex frepo\n-Enable automatic template instantiation.  This option also implies\n-@option{-fno-implicit-templates}.  @xref{Template Instantiation}, for more\n-information.\n+Enable automatic template instantiation at link time.  This option also\n+implies @option{-fno-implicit-templates}.  @xref{Template\n+Instantiation}, for more information.\n \n @item -fno-rtti\n @opindex fno-rtti\n@@ -1983,9 +1947,10 @@ this sort of problem in programs.\n The present implementation of this option only works for C programs.  A\n future implementation may also work for C++ programs.\n \n-There is some controversy over the precise meaning of the sequence point\n-rules in subtle cases.  Links to papers with alternative formal definitions\n-and other related discussions may be found on our readings page\n+The C standard is worded confusingly, therefore there is some debate\n+over the precise meaning of the sequence point rules in subtle cases.\n+Links to discussions of the problem, including proposed formal\n+definitions, may be found on our readings page, at\n @w{@uref{http://gcc.gnu.org/readings.html}}.\n \n @item -Wreturn-type\n@@ -2889,9 +2854,8 @@ Dump after global register allocation, to @file{@var{file}.21.greg}.\n @opindex dh\n Dump after finalization of EH handling code, to @file{@var{file}.02.eh}.\n @item o\n-@item o\n @opindex do\n-Dump after post-reload CSE and other optimizations, to @file{@var{file}.22.postreload}.\n+Dump after post-reload optimizations, to @file{@var{file}.22.postreload}.\n @item G\n @opindex dG\n Dump after GCSE, to @file{@var{file}.10.gcse}.\n@@ -2925,16 +2889,14 @@ Dump after the register move pass, to @file{@var{file}.18.regmove}.\n Dump after RTL generation, to @file{@var{file}.00.rtl}.\n @item R\n @opindex dR\n-Dump after the second instruction scheduling pass, to\n-@file{@var{file}.27.sched2}.\n+Dump after the second scheduling pass, to @file{@var{file}.27.sched2}.\n @item s\n @opindex ds\n Dump after CSE (including the jump optimization that sometimes follows\n CSE), to @file{@var{file}.08.cse}.\n @item S\n @opindex dS\n-Dump after the first instruction scheduling pass, to\n-@file{@var{file}.19.sched}.\n+Dump after the first scheduling pass, to @file{@var{file}.19.sched}.\n @item t\n @opindex dt\n Dump after the second CSE pass (including the jump optimization that\n@@ -2944,7 +2906,7 @@ sometimes follows CSE), to @file{@var{file}.12.cse2}.\n Dump after the second flow pass, to @file{@var{file}.23.flow2}.\n @item X\n @opindex dX\n-Dump after SSA aggressive dead code elimination, to @file{@var{file}.06.ssadce}.\n+Dump after SSA dead code elimination, to @file{@var{file}.06.ssadce}.\n @item z\n @opindex dz\n Dump after the peephole pass, to @file{@var{file}.24.peephole2}.\n@@ -3028,8 +2990,7 @@ Dump before any tree based optimization, to @file{@var{file}.original}.\n @item optimized\n Dump after all tree based optimization, to @file{@var{file}.optimized}.\n @item inlined\n-Dump after inlining within the body of the function, to\n-@file{@var{file}.inlined}.\n+Dump after function inlining, to @file{@var{file}.inlined}.\n @end table\n \n @item -fpretend-float\n@@ -3152,19 +3113,9 @@ between statements, you can then assign a new value to any variable or\n change the program counter to any other statement in the function and\n get exactly the results you would expect from the source code.\n \n-Without @option{-O}, the compiler only allocates variables declared\n-@code{register} in registers.  The resulting compiled code is a little\n-worse than produced by PCC without @option{-O}.\n-\n With @option{-O}, the compiler tries to reduce code size and execution\n-time.\n-\n-When you specify @option{-O}, the compiler turns on @option{-fthread-jumps}\n-and @option{-fdefer-pop} on all machines.  The compiler turns on\n-@option{-fdelayed-branch} on machines that have delay slots, and\n-@option{-fomit-frame-pointer} on machines that can support debugging even\n-without a frame pointer.  On some machines the compiler also turns\n-on other flags.\n+time, without performing any optimizations that take a great deal of\n+compilation time.\n \n @item -O2\n @opindex O2\n@@ -3349,8 +3300,8 @@ performed when this option is not used.\n \n @item -ffast-math\n @opindex ffast-math\n-Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations},\n-and @option{-fno-trapping-math}.\n+Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations}, and @*\n+@option{-fno-trapping-math}.\n \n This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n \n@@ -3371,8 +3322,7 @@ it can result in incorrect output for programs which depend on\n an exact implementation of IEEE or ISO rules/specifications for\n math functions.\n \n-The default is @option{-fmath-errno}.  The @option{-ffast-math} option\n-sets @option{-fno-math-errno}.\n+The default is @option{-fmath-errno}.\n \n @item -funsafe-math-optimizations\n @opindex funsafe-math-optimizations\n@@ -3387,8 +3337,7 @@ it can result in incorrect output for programs which depend on\n an exact implementation of IEEE or ISO rules/specifications for\n math functions.\n \n-The default is @option{-fno-unsafe-math-optimizations}.  The\n-@option{-ffast-math} option sets @option{-funsafe-math-optimizations}.\n+The default is @option{-fno-unsafe-math-optimizations}.\n \n @item -fno-trapping-math\n @opindex fno-trapping-math\n@@ -3401,12 +3350,9 @@ it can result in incorrect output for programs which depend on\n an exact implementation of IEEE or ISO rules/specifications for\n math functions.\n \n-The default is @option{-ftrapping-math}.  The @option{-ffast-math}\n-option sets @option{-fno-trapping-math}.\n+The default is @option{-ftrapping-math}.\n @end table\n \n-@c following causes underfulls.. they don't look great, but we deal.\n-@c --mew 26jan93\n The following options control specific optimizations.  The @option{-O2}\n option turns on all of these optimizations except @option{-funroll-loops}\n and @option{-funroll-all-loops}.  On most machines, the @option{-O} option\n@@ -3416,6 +3362,9 @@ but specific machines may handle it differently.\n You can use the following flags in the rare cases when ``fine-tuning''\n of optimizations to be performed is desired.\n \n+Not all of the optimizations performed by GCC have @option{-f} options\n+to control them.\n+\n @table @gcctabopt\n @item -fstrength-reduce\n @opindex fstrength-reduce\n@@ -3481,11 +3430,15 @@ can be changed to a load before the loop and a store after the loop.\n \n @item -fdelete-null-pointer-checks\n @opindex fdelete-null-pointer-checks\n-Use global dataflow analysis to identify and eliminate useless null\n-pointer checks.  Programs which rely on NULL pointer dereferences @emph{not}\n-halting the program may not work properly with this option.  Use\n-@option{-fno-delete-null-pointer-checks} to disable this optimizing for programs\n-which depend on that behavior.\n+Use global dataflow analysis to identify and eliminate useless checks\n+for null pointers.  The compiler assumes that dereferencing a null\n+pointer would have halted the program.  If a pointer is checked after\n+it has already been dereferenced, it cannot be null.\n+\n+In some environments, this assumption is not true, and programs can\n+safely dereference null pointers.  Use\n+@option{-fno-delete-null-pointer-checks} to disable this optimization\n+for programs which depend on that behavior.\n \n @item -fexpensive-optimizations\n @opindex fexpensive-optimizations\n@@ -3562,16 +3515,18 @@ default.\n \n @item -funroll-loops\n @opindex funroll-loops\n-Perform the optimization of loop unrolling.  This is only done for loops\n-whose number of iterations can be determined at compile time or run time.\n-@option{-funroll-loops} implies both @option{-fstrength-reduce} and\n-@option{-frerun-cse-after-loop}.\n+Unroll loops whose number of iterations can be determined at compile\n+time or upon entry to the loop.  @option{-funroll-loops} implies both\n+@option{-fstrength-reduce} and @option{-frerun-cse-after-loop}.  This\n+option makes code larger, and may or may not make it run faster.\n \n @item -funroll-all-loops\n @opindex funroll-all-loops\n-Perform the optimization of loop unrolling.  This is done for all loops\n-and usually makes programs run more slowly.  @option{-funroll-all-loops}\n-implies @option{-fstrength-reduce} as well as @option{-frerun-cse-after-loop}.\n+Unroll all loops, even if their number of iterations is uncertain when\n+the loop is entered.  This usually makes programs run more slowly.\n+@option{-funroll-all-loops} implies the same options as\n+@option{-funroll-loops},\n+\n \n @item -fmove-all-movables\n @opindex fmove-all-movables\n@@ -3629,13 +3584,19 @@ exactly determine which path is taken more often.\n \n @item -fno-guess-branch-probability\n @opindex fno-guess-branch-probability\n-Sometimes gcc will opt to guess branch probabilities when none are\n-available from either profile directed feedback (@option{-fprofile-arcs})\n-or @samp{__builtin_expect}.  In a hard real-time system, people don't\n-want different runs of the compiler to produce code that has different\n-behavior; minimizing non-determinism is of paramount import.  This\n-switch allows users to reduce non-determinism, possibly at the expense\n-of inferior optimization.\n+Do not guess branch probabilities using a randomized model.\n+\n+Sometimes gcc will opt to use a randomized model to guess branch\n+probabilities, when none are available from either profiling feedback\n+(@option{-fprofile-arcs}) or @samp{__builtin_expect}.  This means that\n+different runs of the compiler on the same program may produce different\n+object code.\n+\n+In a hard real-time system, people don't want different runs of the\n+compiler to produce code that has different behavior; minimizing\n+non-determinism is of paramount import.  This switch allows users to\n+reduce non-determinism, possibly at the expense of inferior\n+optimization.\n \n @item -fstrict-aliasing\n @opindex fstrict-aliasing\n@@ -5497,11 +5458,11 @@ Set the instruction scheduling parameters for machine type\n @var{cpu_type}, but do not set the instruction set or register set that the\n option @option{-mcpu=@var{cpu_type}} would.\n \n-The same values for @option{-mcpu=@var{cpu_type}} are used for\n-@option{-mtune=@var{cpu_type}}, though the only useful values are those that\n-select a particular cpu implementation: @samp{cypress}, @samp{supersparc},\n-@samp{hypersparc}, @samp{f930}, @samp{f934}, @samp{sparclite86x},\n-@samp{tsc701}, @samp{ultrasparc}.\n+The same values for @option{-mcpu=@var{cpu_type}} can be used for\n+@option{-mtune=@var{cpu_type}}, but the only useful values are those\n+that select a particular cpu implementation.  Those are @samp{cypress},\n+@samp{supersparc}, @samp{hypersparc}, @samp{f930}, @samp{f934},\n+@samp{sparclite86x}, @samp{tsc701}, and @samp{ultrasparc}.\n \n @end table\n \n@@ -6315,15 +6276,16 @@ pointer is not eliminated when debugging information is selected by the\n -g switch.\n \n @item -moptimize-arg-area\n-@itemx -mno-optimize-arg-area\n @opindex moptimize-arg-area\n-@opindex mno-optimize-arg-area\n @cindex arguments in frame (88k)\n-Control how function arguments are stored in stack frames.\n-@option{-moptimize-arg-area} saves space by optimizing them, but this\n-conflicts with the 88open specifications.  The opposite alternative,\n-@option{-mno-optimize-arg-area}, agrees with 88open standards.  By default\n-GCC does not optimize the argument area.\n+Save space by reorganizing the stack frame.  This option generates code\n+that does not agree with the 88open specifications, but uses less\n+memory.\n+\n+@itemx -mno-optimize-arg-area\n+@opindex mno-optimize-arg-area\n+Do not reorganize the stack frame to save space.  This is the default.\n+The generated conforms to the specification, but uses more memory.\n \n @item -mshort-data-@var{num}\n @opindex mshort-data\n@@ -6409,14 +6371,14 @@ division by zero under certain conditions.  By default, when\n compiling code that might be run on such a processor, GCC\n generates code that explicitly checks for zero-valued divisors\n and traps with exception number 503 when one is detected.  Use of\n-mno-check-zero-division suppresses such checking for code\n+@option{-mno-check-zero-division} suppresses such checking for code\n generated to run on an MC88100 processor.\n \n-GCC assumes that the MC88110 processor correctly detects all\n-instances of integer division by zero.  When @option{-m88110} is\n-specified, both @option{-mcheck-zero-division} and\n-@option{-mno-check-zero-division} are ignored, and no explicit checks for\n-zero-valued divisors are generated.\n+GCC assumes that the MC88110 processor correctly detects all instances\n+of integer division by zero.  When @option{-m88110} is specified, no\n+explicit checks for zero-valued divisors are generated, and both\n+@option{-mcheck-zero-division} and @option{-mno-check-zero-division} are\n+ignored.\n \n @item -muse-div-instruction\n @opindex muse-div-instruction\n@@ -6466,6 +6428,10 @@ language, and are often the source of portability problems.  By default,\n GCC issues no such warning.\n @end table\n \n+@c break page here to avoid unsightly interparagraph stretch.\n+@c -zw, 2001-8-17\n+@page\n+\n @node RS/6000 and PowerPC Options\n @subsection IBM RS/6000 and PowerPC Options\n @cindex RS/6000 and PowerPC Options\n@@ -6546,13 +6512,12 @@ allow use of the MQ register; specify this for the Motorola MPC601.\n @itemx -mold-mnemonics\n @opindex mnew-mnemonics\n @opindex mold-mnemonics\n-Select which mnemonics to use in the generated assembler code.\n-@option{-mnew-mnemonics} requests output that uses the assembler mnemonics\n-defined for the PowerPC architecture, while @option{-mold-mnemonics}\n-requests the assembler mnemonics defined for the POWER architecture.\n-Instructions defined in only one architecture have only one mnemonic;\n-GCC uses that mnemonic irrespective of which of these options is\n-specified.\n+Select which mnemonics to use in the generated assembler code.  With\n+@option{-mnew-mnemonics}, GCC uses the assembler mnemonics defined for\n+the PowerPC architecture.  With @option{-mold-mnemonics} it uses the\n+assembler mnemonics defined for the POWER architecture.  Instructions\n+defined in only one architecture have only one mnemonic; GCC uses that\n+mnemonic irrespective of which of these options is specified.\n \n GCC defaults to the mnemonics appropriate for the architecture in\n use.  Specifying @option{-mcpu=@var{cpu_type}} sometimes overrides the\n@@ -6569,54 +6534,69 @@ Supported values for @var{cpu_type} are @samp{rios}, @samp{rios1},\n @samp{603}, @samp{603e}, @samp{604}, @samp{604e}, @samp{620},\n @samp{630}, @samp{740}, @samp{750}, @samp{power}, @samp{power2},\n @samp{powerpc}, @samp{403}, @samp{505}, @samp{801}, @samp{821},\n-@samp{823}, and @samp{860} and @samp{common}.  @option{-mcpu=power},\n-@option{-mcpu=power2}, @option{-mcpu=powerpc}, and @option{-mcpu=powerpc64}\n-specify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601),\n-and 64-bit PowerPC architecture machine types, with an appropriate,\n-generic processor model assumed for scheduling purposes.\n-\n-Specifying any of the following options:\n-@option{-mcpu=rios1}, @option{-mcpu=rios2}, @option{-mcpu=rsc},\n-@option{-mcpu=power}, or @option{-mcpu=power2}\n-enables the @option{-mpower} option and disables the @option{-mpowerpc} option;\n-@option{-mcpu=601} enables both the @option{-mpower} and @option{-mpowerpc} options.\n-All of @option{-mcpu=rs64a}, @option{-mcpu=602}, @option{-mcpu=603},\n-@option{-mcpu=603e}, @option{-mcpu=604}, @option{-mcpu=620}, @option{-mcpu=630},\n-@option{-mcpu=740}, and @option{-mcpu=750}\n-enable the @option{-mpowerpc} option and disable the @option{-mpower} option.\n-Exactly similarly, all of @option{-mcpu=403},\n-@option{-mcpu=505}, @option{-mcpu=821}, @option{-mcpu=860} and @option{-mcpu=powerpc}\n-enable the @option{-mpowerpc} option and disable the @option{-mpower} option.\n-@option{-mcpu=common} disables both the\n-@option{-mpower} and @option{-mpowerpc} options.\n-\n-AIX versions 4 or greater selects @option{-mcpu=common} by default, so\n-that code will operate on all members of the RS/6000 POWER and PowerPC\n-families.  In that case, GCC will use only the instructions in the\n-common subset of both architectures plus some special AIX common-mode\n-calls, and will not use the MQ register.  GCC assumes a generic\n+@samp{823}, and @samp{860} and @samp{common}.\n+\n+@option{-mcpu=common} selects a completely generic processor.  Code\n+generated under this option will run on any POWER or PowerPC processor.\n+GCC will use only the instructions in the common subset of both\n+architectures, and will not use the MQ register.  GCC assumes a generic\n processor model for scheduling purposes.\n \n-Specifying any of the options @option{-mcpu=rios1}, @option{-mcpu=rios2},\n-@option{-mcpu=rsc}, @option{-mcpu=power}, or @option{-mcpu=power2} also\n-disables the @samp{new-mnemonics} option.  Specifying @option{-mcpu=601},\n-@option{-mcpu=602}, @option{-mcpu=603}, @option{-mcpu=603e}, @option{-mcpu=604},\n-@option{-mcpu=620}, @option{-mcpu=630}, @option{-mcpu=403}, @option{-mcpu=505},\n-@option{-mcpu=821}, @option{-mcpu=860} or @option{-mcpu=powerpc} also enables\n-the @samp{new-mnemonics} option.\n+@option{-mcpu=power}, @option{-mcpu=power2}, @option{-mcpu=powerpc}, and\n+@option{-mcpu=powerpc64} specify generic POWER, POWER2, pure 32-bit\n+PowerPC (i.e., not MPC601), and 64-bit PowerPC architecture machine\n+types, with an appropriate, generic processor model assumed for\n+scheduling purposes.\n \n-Specifying @option{-mcpu=403}, @option{-mcpu=821}, or @option{-mcpu=860} also\n-enables the @option{-msoft-float} option.\n+The other options specify a specific processor.  Code generated under\n+those options will run best on that processor, and may not run at all on\n+others.\n+\n+The @option{-mcpu} options automatically enable or disable other\n+@option{-m} options as follows:\n+\n+@table @samp\n+@item common\n+@option{-mno-power}, @option{-mno-powerc}\n+\n+@item power\n+@itemx power2\n+@itemx rios1\n+@itemx rios2\n+@itemx rsc\n+@option{-mpower}, @option{-mno-powerpc}, @option{-mno-new-mnemonics}\n+\n+@item powerpc\n+@itemx rs64a\n+@itemx 602\n+@itemx 603\n+@itemx 603e\n+@itemx 604\n+@itemx 620\n+@itemx 630\n+@itemx 740\n+@itemx 750\n+@itemx 505\n+@option{-mno-power}, @option{-mpowerpc}, @option{-mnew-mnemonics}\n+\n+@item 601\n+@option{-mpower}, @option{-mpowerpc}, @option{-mnew-mnemonics}\n+\n+@item 403\n+@itemx 821\n+@itemx 860\n+@option{-mno-power}, @option{-mpowerpc}, @option{-mnew-mnemonics}, @option{-msoft-float}\n+@end table\n \n @item -mtune=@var{cpu_type}\n @opindex mtune\n Set the instruction scheduling parameters for machine type\n-@var{cpu_type}, but do not set the architecture type, register usage,\n-choice of mnemonics like @option{-mcpu=@var{cpu_type}} would.  The same\n-values for @var{cpu_type} are used for @option{-mtune=@var{cpu_type}} as\n-for @option{-mcpu=@var{cpu_type}}.  The @option{-mtune=@var{cpu_type}}\n-option overrides the @option{-mcpu=@var{cpu_type}} option in terms of\n-instruction scheduling parameters.\n+@var{cpu_type}, but do not set the architecture type, register usage, or\n+choice of mnemonics, as @option{-mcpu=@var{cpu_type}} would.  The same\n+values for @var{cpu_type} are used for @option{-mtune} as for\n+@option{-mcpu}.  If both are specified, the code generated will use the\n+architecture, registers, and mnemonics set by @option{-mcpu}, but the\n+scheduling parameters set by @option{-mtune}.\n \n @item -mfull-toc\n @itemx -mno-fp-in-toc\n@@ -7405,8 +7385,9 @@ specifying @option{-march=@var{cpu-type}} implies @option{-mcpu=@var{cpu-type}}.\n @opindex m486\n @opindex mpentium\n @opindex mpentiumpro\n-Synonyms for @option{-mcpu=i386}, @option{-mcpu=i486}, @option{-mcpu=pentium}, and @option{-mcpu=pentiumpro}\n-respectively.  These synonyms are deprecated.\n+These options are synonyms for @option{-mcpu=i386}, @option{-mcpu=i486},\n+@option{-mcpu=pentium}, and @option{-mcpu=pentiumpro} respectively.\n+These synonyms are deprecated.\n \n @item -mintel-syntax\n @opindex mintel-syntax\n@@ -7488,9 +7469,9 @@ application binary interface.  This is the default.\n @itemx -mno-svr3-shlib\n @opindex msvr3-shlib\n @opindex mno-svr3-shlib\n-Control whether GCC places uninitialized locals into @code{bss} or\n-@code{data}.  @option{-msvr3-shlib} places these locals into @code{bss}.\n-These options are meaningful only on System V Release 3.\n+Control whether GCC places uninitialized local variables into the\n+@code{bss} or @code{data} segments.  @option{-msvr3-shlib} places them\n+into @code{bss}.  These options are meaningful only on System V Release 3.\n \n @item -mno-wide-multiply\n @itemx -mwide-multiply\n@@ -7881,44 +7862,23 @@ maximum performance.  It is mostly compliant with the IEEE floating\n point standard.  However, for full compliance, software assistance is\n required.  This option generates code fully IEEE compliant code\n @emph{except} that the @var{inexact-flag} is not maintained (see below).\n-If this option is turned on, the CPP macro @code{_IEEE_FP} is defined\n-during compilation.  The option is a shorthand for: @option{-D_IEEE_FP\n--mfp-trap-mode=su -mtrap-precision=i -mieee-conformant}.  The resulting\n-code is less efficient but is able to correctly support denormalized\n-numbers and exceptional IEEE values such as not-a-number and plus/minus\n-infinity.  Other Alpha compilers call this option\n-@option{-ieee_with_no_inexact}.\n+If this option is turned on, the preprocessor macro @code{_IEEE_FP} is\n+defined during compilation.  The resulting code is less efficient but is\n+able to correctly support denormalized numbers and exceptional IEEE\n+values such as not-a-number and plus/minus infinity.  Other Alpha\n+compilers call this option @option{-ieee_with_no_inexact}.\n \n @item -mieee-with-inexact\n @opindex mieee-with-inexact\n-@c overfull hbox here --bob 22 jul96\n-@c original text between ignore ... end ignore\n-@ignore\n-This is like @option{-mieee} except the generated code also maintains the\n-IEEE @var{inexact-flag}.  Turning on this option causes the generated\n-code to implement fully-compliant IEEE math.  The option is a shorthand\n-for @option{-D_IEEE_FP -D_IEEE_FP_INEXACT} plus @option{-mieee-conformant},\n-@option{-mfp-trap-mode=sui}, and @option{-mtrap-precision=i}.  On some Alpha\n-implementations the resulting code may execute significantly slower than\n-the code generated by default.  Since there is very little code that\n-depends on the @var{inexact-flag}, you should normally not specify this\n-option.  Other Alpha compilers call this option\n-@option{-ieee_with_inexact}.\n-@end ignore\n-@c            changed paragraph\n-This is like @option{-mieee} except the generated code also maintains the\n-IEEE @var{inexact-flag}.  Turning on this option causes the generated\n-code to implement fully-compliant IEEE math.  The option is a shorthand\n-for @option{-D_IEEE_FP -D_IEEE_FP_INEXACT} plus the three following:\n-@option{-mieee-conformant},\n-@option{-mfp-trap-mode=sui},\n-and @option{-mtrap-precision=i}.\n-On some Alpha implementations the resulting code may execute\n-significantly slower than the code generated by default.  Since there\n-is very little code that depends on the @var{inexact-flag}, you should\n+This is like @option{-mieee} except the generated code also maintains\n+the IEEE @var{inexact-flag}.  Turning on this option causes the\n+generated code to implement fully-compliant IEEE math.  In addition to\n+@code{_IEEE_FP}, @code{_IEEE_FP_EXACT} is defined as a preprocessor\n+macro.  On some Alpha implementations the resulting code may execute\n+significantly slower than the code generated by default.  Since there is\n+very little code that depends on the @var{inexact-flag}, you should\n normally not specify this option.  Other Alpha compilers call this\n option @option{-ieee_with_inexact}.\n-@c             end changes to prevent overfull hboxes\n \n @item -mfp-trap-mode=@var{trap-mode}\n @opindex mfp-trap-mode\n@@ -8117,8 +8077,8 @@ Produce code for a C300 Clipper processor.  This is the default.\n \n @item -mc400\n @opindex mc400\n-Produce code for a C400 Clipper processor i.e.@: use floating point\n-registers f8---f15.\n+Produce code for a C400 Clipper processor, i.e.@: use floating point\n+registers f8--f15.\n @end table\n \n @node H8/300 Options\n@@ -9102,16 +9062,16 @@ that of some integer type.\n \n @item -freg-struct-return\n @opindex freg-struct-return\n-Use the convention that @code{struct} and @code{union} values are\n-returned in registers when possible.  This is more efficient for small\n-structures than @option{-fpcc-struct-return}.\n+Return @code{struct} and @code{union} values in registers when possible.\n+This is more efficient for small structures than\n+@option{-fpcc-struct-return}.\n \n-If you specify neither @option{-fpcc-struct-return} nor its contrary\n+If you specify neither @option{-fpcc-struct-return} nor\n @option{-freg-struct-return}, GCC defaults to whichever convention is\n standard for the target.  If there is no standard convention, GCC\n-defaults to @option{-fpcc-struct-return}, except on targets where GCC\n-is the principal compiler.  In those cases, we can choose the standard,\n-and we chose the more efficient register return alternative.\n+defaults to @option{-fpcc-struct-return}, except on targets where GCC is\n+the principal compiler.  In those cases, we can choose the standard, and\n+we chose the more efficient register return alternative.\n \n @item -fshort-enums\n @opindex fshort-enums\n@@ -9399,11 +9359,11 @@ would grow beyond the value, a signal is raised.  For most targets,\n the signal is raised before the stack overruns the boundary, so\n it is possible to catch the signal without taking special precautions.\n \n-For instance, if the stack starts at address @samp{0x80000000} and grows\n-downwards you can use the flags\n-@samp{-fstack-limit-symbol=__stack_limit\n--Wl,--defsym,__stack_limit=0x7ffe0000} which will enforce a stack\n-limit of 128K@.\n+For instance, if the stack starts at absolute address @samp{0x80000000}\n+and grows downwards, you can use the flags\n+@option{-fstack-limit-symbol=__stack_limit} and\n+@option{-Wl,--defsym,__stack_limit=0x7ffe0000} to enforce a stack limit\n+of 128KB@.  Note that this may only work with the GNU linker.\n \n @cindex aliasing of parameters\n @cindex parameters, aliased\n@@ -9417,9 +9377,9 @@ Specify the possible relationships among parameters and between\n parameters and global data.\n \n @option{-fargument-alias} specifies that arguments (parameters) may\n-alias each other and may alias global storage.\n+alias each other and may alias global storage.@*\n @option{-fargument-noalias} specifies that arguments do not alias\n-each other, but may alias global storage.\n+each other, but may alias global storage.@*\n @option{-fargument-noalias-global} specifies that arguments do not\n alias each other and do not alias global storage.\n "}, {"sha": "f2e7b8fd604a2c53bf735cb9fd4dda0c342b8fb3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -448,8 +448,6 @@ those listed in the @code{match_parallel}.\n A typical use of @code{match_parallel} is to match load and store\n multiple expressions, which can contain a variable number of elements\n in a @code{parallel}.  For example,\n-@c the following is *still* going over.  need to change the code.\n-@c also need to work on grouping of this example.  --mew 1feb93\n \n @smallexample\n (define_insn \"\"\n@@ -463,7 +461,7 @@ in a @code{parallel}.  For example,\n @end smallexample\n \n This example comes from @file{a29k.md}.  The function\n-@code{load_multiple_operations} is defined in @file{a29k.c} and checks\n+@code{load_multiple_operation} is defined in @file{a29k.c} and checks\n that subsequent elements in the @code{parallel} are the same as the\n @code{set} in the pattern, except that they are referencing subsequent\n registers and memory locations.\n@@ -1295,12 +1293,12 @@ general-purpose registers respectively; @pxref{Simple Constraints}), and\n @samp{I}, usually the letter indicating the most common\n immediate-constant format.\n \n-For each machine architecture, the @file{config/@var{machine}.h} file\n-defines additional constraints.  These constraints are used by the\n-compiler itself for instruction generation, as well as for @code{asm}\n-statements; therefore, some of the constraints are not particularly\n-interesting for @code{asm}.  The constraints are defined through these\n-macros:\n+For each machine architecture, the\n+@file{config/@var{machine}/@var{machine}.h} file defines additional\n+constraints.  These constraints are used by the compiler itself for\n+instruction generation, as well as for @code{asm} statements; therefore,\n+some of the constraints are not particularly interesting for @code{asm}.\n+The constraints are defined through these macros:\n \n @table @code\n @item REG_CLASS_FROM_LETTER\n@@ -2068,9 +2066,8 @@ machines explicit memory references will get optional reloads.\n If a scratch register is required to move an object to or from memory,\n it can be allocated using @code{gen_reg_rtx} prior to life analysis.\n \n-If there are cases needing\n-scratch registers after reload, you must define\n-@code{SECONDARY_INPUT_RELOAD_CLASS} and perhaps also\n+If there are cases which need scratch registers during or after reload,\n+you must define @code{SECONDARY_INPUT_RELOAD_CLASS} and/or\n @code{SECONDARY_OUTPUT_RELOAD_CLASS} to detect them, and provide\n patterns @samp{reload_in@var{m}} or @samp{reload_out@var{m}} to handle\n them.  @xref{Register Classes}.\n@@ -2947,8 +2944,8 @@ the function should return.  This will normally need to copied by the\n pattern to some special register or memory location.\n \n This pattern only needs to be defined if call frame exception handling\n-is to be used, and simple moves to @code{EH_RETURN_STACKADJ_RTX} and\n-@code{EH_RETURN_HANDLER_RTX} are not sufficient.\n+is to be used, and simple moves involving @code{EH_RETURN_STACKADJ_RTX}\n+and @code{EH_RETURN_HANDLER_RTX} are not sufficient.\n \n @cindex @code{prologue} instruction pattern\n @anchor{prologue instruction pattern}\n@@ -3251,9 +3248,9 @@ iterations.  This avoids the need for fetching and executing a\n @samp{dbra}-like instruction and avoids pipeline stalls associated with\n the jump.\n \n-GCC has three special named patterns to support low overhead looping,\n-@samp{decrement_and_branch_until_zero}, @samp{doloop_begin}, and\n-@samp{doloop_end}.  The first pattern,\n+GCC has three special named patterns to support low overhead looping.\n+They are @samp{decrement_and_branch_until_zero}, @samp{doloop_begin},\n+and @samp{doloop_end}.  The first pattern,\n @samp{decrement_and_branch_until_zero}, is not emitted during RTL\n generation but may be emitted during the instruction combination phase.\n This requires the assistance of the loop optimizer, using information\n@@ -3888,7 +3885,8 @@ from i386.md:\n   \"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (const_int 65535)))\n+  [(parallel [(set (match_dup 0) \n+                   (and:SI (match_dup 0) (const_int 65535)))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n   [(set_attr \"type\" \"alu1\")])\n@@ -4749,9 +4747,10 @@ as follows:\n    return (get_attr_length (insn) == 4\n            ? \"b %l0\" : \"l r15,=a(%l0); br r15\");\n @}\n-  [(set (attr \"length\") (if_then_else (lt (match_dup 0) (const_int 4096))\n-                                      (const_int 4)\n-                                      (const_int 6)))])\n+  [(set (attr \"length\")\n+        (if_then_else (lt (match_dup 0) (const_int 4096))\n+                      (const_int 4)\n+                      (const_int 6)))])\n @end smallexample\n \n @node Constant Attributes"}, {"sha": "c6beaaab84d012b794fba15b3573430adc31c9ae", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "patch": "@@ -1527,8 +1527,8 @@ than the operands.  Write the pattern for this as\n where @var{m} is wider than the modes of @var{x} and @var{y}, which need\n not be the same.\n \n-Write patterns for unsigned widening multiplication similarly using\n-@code{zero_extend}.\n+For unsigned widening multiplication, use the same idiom, but with\n+@code{zero_extend} instead of @code{sign_extend}.\n \n @findex div\n @cindex division\n@@ -2169,7 +2169,8 @@ either wrap around or use saturating addition depending on the value\n of a special control register:\n \n @example\n-(parallel [(set (reg:SI 2) (unspec:SI [(reg:SI 3) (reg:SI 4)] 0))\n+(parallel [(set (reg:SI 2) (unspec:SI [(reg:SI 3) \n+                                       (reg:SI 4)] 0))\n            (use (reg:SI 1))])\n @end example\n "}]}