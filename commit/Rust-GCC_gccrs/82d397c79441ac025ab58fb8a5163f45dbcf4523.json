{"sha": "82d397c79441ac025ab58fb8a5163f45dbcf4523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkMzk3Yzc5NDQxYWMwMjVhYjU4ZmI4YTUxNjNmNDVkYmNmNDUyMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-16T12:53:16Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-16T12:53:16Z"}, "message": "optabs.h (enum optab_index): Add new OTI_tan and OTI_atan.\n\n\n\t* optabs.h (enum optab_index): Add new OTI_tan and OTI_atan.\n\t(tan_optab, atan_optab): Define corresponding macros.\n\t* optabs.c (init_optabs): Initialize tan_optab and atan_optab.\n\t* genopinit.c (optabs): Implement tan_optab and atan_optab\n\tusing tan?f2 and atan?f2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_TAN{,F,L}\n\tusing tan_optab, and BUILT_IN_ATAN{,F,L} using atan_optab.\n\tChange the default value of errno_set to false.\n\t(expand_builtin): Expand BUILT_IN_TAN{,F,L} and BUILT_IN_ATAN{,F,L}\n\tusing expand_builtin_mathfn.\n\n\t* config/i386/i386.md (atansf2, atandf2, atanxf2, atantf2): New\n\texpander patterns implemented using existing atan2?f3 patterns.\n\n\t* gcc.dg/i386-387-5.c: New test case.\n\t* gcc.dg/i386-387-6.c: New test case.\n\t* gcc.dg/builtins-23.c: New test case.\n\nFrom-SVN: r68013", "tree": {"sha": "24bfff3f06bd11da343290bf7f9fda94ee11a36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24bfff3f06bd11da343290bf7f9fda94ee11a36f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82d397c79441ac025ab58fb8a5163f45dbcf4523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d397c79441ac025ab58fb8a5163f45dbcf4523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d397c79441ac025ab58fb8a5163f45dbcf4523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d397c79441ac025ab58fb8a5163f45dbcf4523/comments", "author": null, "committer": null, "parents": [{"sha": "c6547c920bd81449caa301b2256b85409d6d69fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6547c920bd81449caa301b2256b85409d6d69fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6547c920bd81449caa301b2256b85409d6d69fa"}], "stats": {"total": 141, "additions": 132, "deletions": 9}, "files": [{"sha": "0cd54a086426c2ead46a00b207cef0a3d36276d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -1,3 +1,19 @@\n+2003-06-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_tan and OTI_atan.\n+\t(tan_optab, atan_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize tan_optab and atan_optab.\n+\t* genopinit.c (optabs): Implement tan_optab and atan_optab\n+\tusing tan?f2 and atan?f2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_TAN{,F,L}\n+\tusing tan_optab, and BUILT_IN_ATAN{,F,L} using atan_optab.\n+\tChange the default value of errno_set to false.\n+\t(expand_builtin): Expand BUILT_IN_TAN{,F,L} and BUILT_IN_ATAN{,F,L}\n+\tusing expand_builtin_mathfn.\n+\n+\t* config/i386/i386.md (atansf2, atandf2, atanxf2, atantf2): New\n+\texpander patterns implemented using existing atan2?f3 patterns.\n+\n 2003-06-16  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (expand_expr <PLUS_EXPR>): If operand_equal_p considers"}, {"sha": "efc808d9081a310791c01f580223b42d84931a68", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -1702,7 +1702,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode argmode;\n-  bool errno_set = true;\n+  bool errno_set = false;\n \n   if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n     return 0;\n@@ -1744,35 +1744,43 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_SQRT:\n     case BUILT_IN_SQRTF:\n     case BUILT_IN_SQRTL:\n-      builtin_optab = sqrt_optab; break;\n+      errno_set = true; builtin_optab = sqrt_optab; break;\n     case BUILT_IN_EXP:\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPL:\n-      builtin_optab = exp_optab; break;\n+      errno_set = true; builtin_optab = exp_optab; break;\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n-      builtin_optab = log_optab; break;\n+      errno_set = true; builtin_optab = log_optab; break;\n+    case BUILT_IN_TAN:\n+    case BUILT_IN_TANF:\n+    case BUILT_IN_TANL:\n+      builtin_optab = tan_optab; break;\n+    case BUILT_IN_ATAN:\n+    case BUILT_IN_ATANF:\n+    case BUILT_IN_ATANL:\n+      builtin_optab = atan_optab; break;\n     case BUILT_IN_FLOOR:\n     case BUILT_IN_FLOORF:\n     case BUILT_IN_FLOORL:\n-      errno_set = false ; builtin_optab = floor_optab; break;\n+      builtin_optab = floor_optab; break;\n     case BUILT_IN_CEIL:\n     case BUILT_IN_CEILF:\n     case BUILT_IN_CEILL:\n-      errno_set = false ; builtin_optab = ceil_optab; break;\n+      builtin_optab = ceil_optab; break;\n     case BUILT_IN_TRUNC:\n     case BUILT_IN_TRUNCF:\n     case BUILT_IN_TRUNCL:\n-      errno_set = false ; builtin_optab = trunc_optab; break;\n+      builtin_optab = trunc_optab; break;\n     case BUILT_IN_ROUND:\n     case BUILT_IN_ROUNDF:\n     case BUILT_IN_ROUNDL:\n-      errno_set = false ; builtin_optab = round_optab; break;\n+      builtin_optab = round_optab; break;\n     case BUILT_IN_NEARBYINT:\n     case BUILT_IN_NEARBYINTF:\n     case BUILT_IN_NEARBYINTL:\n-      errno_set = false ; builtin_optab = nearbyint_optab; break;\n+      builtin_optab = nearbyint_optab; break;\n     default:\n       abort ();\n     }\n@@ -4416,6 +4424,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n+    case BUILT_IN_TAN:\n+    case BUILT_IN_TANF:\n+    case BUILT_IN_TANL:\n+    case BUILT_IN_ATAN:\n+    case BUILT_IN_ATANF:\n+    case BUILT_IN_ATANL:\n       /* Treat these like sqrt only if unsafe math optimizations are allowed,\n \t because of possible accuracy problems.  */\n       if (! flag_unsafe_math_optimizations)"}, {"sha": "4218fb3a3067fe3cb8f0f496f2b214c8634c2fb8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -15855,6 +15855,58 @@\n   emit_move_insn (operands[2], temp);\n   emit_move_insn (operands[7], CONST1_RTX (XFmode));  /* fld1 */\n })\n+\n+(define_expand \"atansf2\"\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 2)\n+\t\t\t       (match_operand:SF 1 \"register_operand\" \"\")]\n+\t\t    UNSPEC_FPATAN))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (SFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (SFmode));  /* fld1 */\n+})\n+\n+(define_expand \"atandf2\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 2)\n+\t\t\t       (match_operand:DF 1 \"register_operand\" \"\")]\n+\t\t    UNSPEC_FPATAN))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (DFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (DFmode));  /* fld1 */\n+})\n+\n+(define_expand \"atanxf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 2)\n+\t\t\t       (match_operand:XF 1 \"register_operand\" \"\")]\n+\t\t    UNSPEC_FPATAN))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"atantf2\"\n+  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t\t   (unspec:TF [(match_dup 2)\n+\t\t\t       (match_operand:TF 1 \"register_operand\" \"\")]\n+\t\t    UNSPEC_FPATAN))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (TFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (TFmode));  /* fld1 */\n+})\n \f\n ;; Block operation instructions\n "}, {"sha": "47f441cf2f72ae73f4956348dcd16e14e2a47866", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -125,6 +125,8 @@ static const char * const optabs[] =\n   \"cos_optab->handlers[$A].insn_code = CODE_FOR_$(cos$a2$)\",\n   \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\",\n+  \"tan_optab->handlers[$A].insn_code = CODE_FOR_$(tan$a2$)\",\n+  \"atan_optab->handlers[$A].insn_code = CODE_FOR_$(atan$a2$)\",\n   \"strlen_optab->handlers[$A].insn_code = CODE_FOR_$(strlen$a$)\",\n   \"one_cmpl_optab->handlers[$A].insn_code = CODE_FOR_$(one_cmpl$a2$)\",\n   \"ffs_optab->handlers[$A].insn_code = CODE_FOR_$(ffs$a2$)\","}, {"sha": "7f1a5a34fd06d2ac2988899141ae2c73aa912829", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -5557,6 +5557,8 @@ init_optabs ()\n   cos_optab = init_optab (UNKNOWN);\n   exp_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);\n+  tan_optab = init_optab (UNKNOWN);\n+  atan_optab = init_optab (UNKNOWN);\n   strlen_optab = init_optab (UNKNOWN);\n   cbranch_optab = init_optab (UNKNOWN);\n   cmov_optab = init_optab (UNKNOWN);"}, {"sha": "0c04a9d1b494993449be7c26cf65333c2de512b2", "filename": "gcc/optabs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -149,6 +149,10 @@ enum optab_index\n   OTI_trunc,\n   OTI_round,\n   OTI_nearbyint,\n+  /* Tangent */\n+  OTI_tan,\n+  /* Inverse tangent */\n+  OTI_atan,\n \n   /* Compare insn; two operands.  */\n   OTI_cmp,\n@@ -232,6 +236,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define trunc_optab (optab_table[OTI_trunc])\n #define round_optab (optab_table[OTI_round])\n #define nearbyint_optab (optab_table[OTI_nearbyint])\n+#define tan_optab (optab_table[OTI_tan])\n+#define atan_optab (optab_table[OTI_atan])\n \n #define cmp_optab (optab_table[OTI_cmp])\n #define ucmp_optab (optab_table[OTI_ucmp])"}, {"sha": "ed61bcf8dd92d30d7011a8bdf56294c1fa2c9981", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -1,3 +1,9 @@\n+2003-06-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/i386-387-5.c: New test case.\n+\t* gcc.dg/i386-387-6.c: New test case.\n+\t* gcc.dg/builtins-23.c: New test case.\n+\n 2003-06-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/builtins-22.c: New test case."}, {"sha": "f463e17e1e15e19f0f7277fa6e8038e412b91f5e", "filename": "gcc/testsuite/gcc.dg/builtins-23.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-23.c?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -0,0 +1,12 @@\n+/* Related to PR optimization/10764  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+double atan(double x);\n+\n+double foo(double x)\n+{\n+  return atan(atan(x));\n+}\n+"}, {"sha": "8ccc5c96701087767d91e193bba9aace4bf9a7d4", "filename": "gcc/testsuite/gcc.dg/i386-387-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-5.c?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -0,0 +1,7 @@\n+/* Verify that -mno-fancy-math-387 works.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O -ffast-math -mfpmath=387 -mno-fancy-math-387\" } */\n+/* { dg-final { scan-assembler \"call\\t_?atan\" } } */\n+\n+double f1(double x) { return __builtin_atan(x); }\n+"}, {"sha": "8eb29a11320b3ef5e53e58f88e624efc94e9fe78", "filename": "gcc/testsuite/gcc.dg/i386-387-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d397c79441ac025ab58fb8a5163f45dbcf4523/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-6.c?ref=82d397c79441ac025ab58fb8a5163f45dbcf4523", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that -march overrides -mno-fancy-math-387.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O -ffast-math -mfpmath=387 -march=i686 -mno-fancy-math-387\" } */\n+/* { dg-final { scan-assembler \"fpatan\" } } */\n+\n+double f1(double x) { return __builtin_atan(x); }"}]}