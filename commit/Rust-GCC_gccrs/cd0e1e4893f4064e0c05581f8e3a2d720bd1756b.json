{"sha": "cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwZTFlNDg5M2Y0MDY0ZTBjMDU1ODFmOGUzYTJkNzIwYmQxNzU2Yg==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "1999-08-29T11:04:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-29T11:04:24Z"}, "message": "pa.md (interspace_jump): New pattern.\n\n        * pa.md (interspace_jump): New pattern.\n        (builtin_longjmp): New expander.\n\nFrom-SVN: r28964", "tree": {"sha": "bcac0e7e8055966be523faa0a70d681fef128e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcac0e7e8055966be523faa0a70d681fef128e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b/comments", "author": null, "committer": null, "parents": [{"sha": "f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f592f509392ba52fdb9cfed7ea8a3cc93d24814f"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "1ecc178009a5d7ed420dc2f2b164636b28b8a63d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "patch": "@@ -1,3 +1,8 @@\n+Sun Aug 29 05:01:17 1999  John David Anglin <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.md (interspace_jump): New pattern.\n+\t(builtin_longjmp): New expander.\n+\n 1999-08-29  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* fp-bit.c (add, sub, multiply, divide, compare, _eq_f2, _ne_f2,"}, {"sha": "f28d191564382b539b8726dd38523a2e8ab78015", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "patch": "@@ -4697,6 +4697,44 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n+;;; EH does longjmp's from and within the data section.  Thus,\n+;;; an interspace branch is required for the longjmp implementation.\n+;;; Registers r1 and r2 are not saved in the jmpbuf environment.\n+;;; Thus, they can be used as scratch registers for the jump.\n+(define_insn \"interspace_jump\"\n+  [(set (pc) (match_operand:SI 0 \"register_operand\" \"a\"))\n+  (clobber (reg:SI 2))]\n+  \"\"\n+  \"ldsid (%%sr0,%0),%%r2\\; mtsp %%r2,%%sr0\\; be%* 0(%%sr0,%0)\"\n+   [(set_attr \"type\" \"branch\")\n+    (set_attr \"length\" \"12\")])\n+\n+(define_expand \"builtin_longjmp\"\n+  [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")] 3)]\n+  \"\"\n+  \"\n+{\n+  /* The elements of the buffer are, in order:  */\n+  rtx fp = gen_rtx_MEM (Pmode, operands[0]);\n+  rtx lab = gen_rtx_MEM (Pmode, plus_constant (operands[0], 4));\n+  rtx stack = gen_rtx_MEM (Pmode, plus_constant (operands[0], 8));\n+  rtx pv = gen_rtx_REG (Pmode, 1);\n+\n+  /* This bit is the same as expand_builtin_longjmp.  */\n+  emit_move_insn (hard_frame_pointer_rtx, fp);\n+  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n+  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n+  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+\n+  /* Load the label we are jumping through into r1 so that we know\n+     where to look for it when we get back to setjmp's function for\n+     restoring the gp.  */\n+  emit_move_insn (pv, lab);\n+  emit_jump_insn (gen_interspace_jump (pv));\n+  emit_barrier ();\n+  DONE;\n+}\")\n+\n (define_insn \"extzv\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")"}]}