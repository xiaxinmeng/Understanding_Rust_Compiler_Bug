{"sha": "5ff62c2e815d91b79229cb15058828724d956f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZmNjJjMmU4MTVkOTFiNzkyMjljYjE1MDU4ODI4NzI0ZDk1NmY4NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-29T03:57:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-29T03:57:15Z"}, "message": "cal.c, [...]: Fix comment typos.\n\n\t* cal.c, decl.c, init.c, raise.c, trans.c, utils2.c: Fix\n\tcomment typos.\n\t* gnat_rm.texi, gnat_ugn.texi: Fix typos.\n\nFrom-SVN: r100312", "tree": {"sha": "2da0d7b83f595be76a4a27d1501d770959ab4e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2da0d7b83f595be76a4a27d1501d770959ab4e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ff62c2e815d91b79229cb15058828724d956f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff62c2e815d91b79229cb15058828724d956f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ff62c2e815d91b79229cb15058828724d956f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff62c2e815d91b79229cb15058828724d956f85/comments", "author": null, "committer": null, "parents": [{"sha": "fe21ff2d90d45aad1e0f7e60fc195fcbb5501ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe21ff2d90d45aad1e0f7e60fc195fcbb5501ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe21ff2d90d45aad1e0f7e60fc195fcbb5501ebb"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "b8c042c9d6914c323c786a5cd644a3a08db2182b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -1,3 +1,9 @@\n+2005-05-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cal.c, decl.c, init.c, raise.c, trans.c, utils2.c: Fix\n+\tcomment typos.\n+\t* gnat_rm.texi, gnat_ugn.texi: Fix typos.\n+\n 2005-05-16  Nathanael Nerode <neroden@gcc.gnu.org>\n \n \tPR ada/20270"}, {"sha": "283a0e6856ebf8d9c6342988a6447f255261d665", "filename": "gcc/ada/cal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fcal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fcal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcal.c?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -32,8 +32,8 @@\n \n /*  This file contains those routines named by Import pragmas in package    */\n /*  GNAT.Calendar. It is used to do Duration to timeval conversion.         */\n-/*  These are simple wrappers function to abstarct the fact that the C      */\n-/*  struct timeval fields type are not normalized (they are generaly        */\n+/*  These are simple wrappers function to abstract the fact that the C      */\n+/*  struct timeval fields type are not normalized (they are generally       */\n /*  defined as int or long values).                                         */\n \n #if defined(VMS)"}, {"sha": "bd9f26017b5472be2a6e8dd5ab98532785956376", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -839,7 +839,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \t/* If this is a pointer and it does not have an initializing\n-\t   expression, initialize it to NULL, unless the obect is\n+\t   expression, initialize it to NULL, unless the object is\n            imported.  */\n \tif (definition\n \t    && (POINTER_TYPE_P (gnu_type) || TYPE_FAT_POINTER_P (gnu_type))\n@@ -4223,7 +4223,7 @@ elaborate_entity (Entity_Id gnat_entity)\n \tNode_Id gnat_lb = Type_Low_Bound (gnat_entity);\n \tNode_Id gnat_hb = Type_High_Bound (gnat_entity);\n \n-\t/* ??? Tests for avoiding static constaint error expression\n+\t/* ??? Tests for avoiding static constraint error expression\n \t   is needed until the front stops generating bogus conversions\n \t   on bounds of real types. */\n \n@@ -6322,7 +6322,7 @@ static int\n compatible_signatures_p (tree ftype1, tree ftype2)\n {\n   /* As of now, we only perform very trivial tests and consider it's the\n-     programmer's responsability to ensure the type correctness in the Ada\n+     programmer's responsibility to ensure the type correctness in the Ada\n      declaration, as in the regular Import cases.\n \n      Mismatches typically result in either error messages from the builtin"}, {"sha": "a985edc42d81e47c78cfc8be977598a1a5e5683c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -4818,7 +4818,7 @@ subprogram yields a value that can be called as long as the subprogram\n is in scope (normal Ada 95 accessibility rules restrict this usage).\n \n It is possible to use @code{Unrestricted_Access} for any type, but care\n-must be excercised if it is used to create pointers to unconstrained\n+must be exercised if it is used to create pointers to unconstrained\n objects. In this case, the resulting pointer has the same scope as the\n context of the attribute, and may not be returned to some enclosing\n scope. For instance, a function cannot use @code{Unrestricted_Access}\n@@ -12522,7 +12522,7 @@ collisions occur and each item can be retrieved from the table in one\n probe (perfect property). The hash table size corresponds to the exact\n size of the key set and no larger (minimal property). The key set has to\n be know in advance (static property). The hash functions are also order\n-preservering. If w2 is inserted after w1 in the generator, their\n+preserving. If w2 is inserted after w1 in the generator, their\n hashcode are in the same order. These hashing functions are very\n convenient for use with realtime applications.\n "}, {"sha": "e27ed3de73cea36f4cb95e783f35edc3ae960cf0", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -12582,7 +12582,7 @@ Additionally, you may define the library-related attributes\n @code{Library_Auto_Init}, @code{Library_Options} and @code{Library_GCC}.\n \n The @code{Library_Name} attribute has a string value. There is no restriction\n-on the name of a library. It is the responsability of the developer to\n+on the name of a library. It is the responsibility of the developer to\n choose a name that will be accepted by the platform. It is recommended to\n choose names that could be Ada identifiers; such names are almost guaranteed\n to be acceptable on all platforms.\n@@ -12664,7 +12664,7 @@ if @file{a1.ads}, @file{a2.ads} or @file{a2.adb} includes a statement\n @code{\"with L1;\"}.\n \n To be sure that all the sources in the library associated with @code{L} are\n-up to date, and that all the sources of parject @code{A} are also up to date,\n+up to date, and that all the sources of project @code{A} are also up to date,\n the following two commands needs to be used:\n \n @smallexample\n@@ -15221,7 +15221,7 @@ affected cases include:\n @noindent\n In compact mode (when GNAT style layout or compact layout is set),\n the pretty printer uses one level of indentation instead\n-of two. This is achived in the record definition and record representation\n+of two. This is achieved in the record definition and record representation\n clause cases by putting the @code{record} keyword on the same line as the\n start of the declaration or representation clause, and in the block and loop\n case by putting the block or loop header on the same line as the statement\n@@ -16106,7 +16106,7 @@ all upper case). Characters of the other case are folded as required.\n @var{length} represents the length of the krunched name. The default\n when no argument is given is ^8^39^ characters. A length of zero stands for\n unlimited, in other words do not chop except for system files where the\n-impled crunching length is always eight characters.\n+implied crunching length is always eight characters.\n \n @noindent\n The output is the krunched name. The output has an extension only if the\n@@ -27062,7 +27062,7 @@ There is nothing specific to Windows in this area. @pxref{Library Projects}.\n @end menu\n \n @noindent\n-Note that it is prefered to use the built-in GNAT DLL support\n+Note that it is preferred to use the built-in GNAT DLL support\n (@pxref{Building DLLs with GNAT}) or GNAT Project files\n (@pxref{Building DLLs with GNAT Project files}) to build DLLs.\n "}, {"sha": "7ca680040bde11f0c249676b1b402bc225e92a06", "filename": "gcc/ada/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -277,10 +277,10 @@ __gnat_set_globals (int main_priority,\n    call chain. To evaluate if a handler applies at some point in this chain,\n    the propagation engine needs to determine what region the corresponding\n    call instruction pertains to. The return address may not be attached to the\n-   same region as the call, so the unwinder unconditionally substracts \"some\"\n+   same region as the call, so the unwinder unconditionally subtracts \"some\"\n    amount to the return addresses it gets to search the region tables. The\n    exact amount is computed to ensure that the resulting address is inside the\n-   call instruction, and is thus target dependant (think about delay slots for\n+   call instruction, and is thus target dependent (think about delay slots for\n    instance).\n \n    When we raise an exception from a signal handler, e.g. to transform a\n@@ -1794,10 +1794,10 @@ __gnat_initialize (void *eh ATTRIBUTE_UNUSED)\n      constructor fashion, typically triggered by the VxWorks loader.  This is\n      achieved by way of a special variable declaration in the crt object, the\n      name of which has been deduced by analyzing the output of the \"munching\"\n-     step documented for C++.  The de-registration is handled symetrically,\n+     step documented for C++.  The de-registration is handled symmetrically,\n      a-la C++ destructor fashion and typically triggered by the dynamic\n      unloader.  Note that since the tables shall be registered against a\n-     common datastructure, libgcc should be one of the modules (vs beeing\n+     common datastructure, libgcc should be one of the modules (vs being\n      partially linked against all the others at build time) and shall be\n      loaded first.\n \n@@ -1991,7 +1991,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n {\n   /* The point is that the interrupted context PC typically is the address\n      that we should search an EH region for, which is different from the call\n-     return address case. The target independant part of the GCC unwinder\n+     return address case. The target independent part of the GCC unwinder\n      don't differentiate the two situations, so we compensate here for the\n      adjustments it will blindly make.\n "}, {"sha": "626adfe74bf049f9211f1477975f6a560ce7fa4f", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -264,7 +264,7 @@ db_phases (int phases)\n    table which heads a list of possible actions to be taken (see below).\n \n    If it is determined that indeed an action should be taken, that\n-   is, if one action filter matches the exception beeing propagated,\n+   is, if one action filter matches the exception being propagated,\n    then control should be transfered to landing-pad.\n \n    A null first-action-index indicates that there are only cleanups\n@@ -283,7 +283,7 @@ db_phases (int phases)\n \n    Non null action-filters provide an index into the ttypes [] table\n    (see below), from which information may be retrieved to check if it\n-   matches the exception beeing propagated.\n+   matches the exception being propagated.\n \n    action-filter > 0  means there is a regular handler to be run,\n \n@@ -302,7 +302,7 @@ db_phases (int phases)\n    A null value indicates a catch-all handler in C++, and an \"others\"\n    handler in Ada.\n \n-   Non null values are used to match the exception beeing propagated:\n+   Non null values are used to match the exception being propagated:\n    In C++ this is a pointer to some rtti data, while in Ada this is an\n    exception id.\n \n@@ -611,7 +611,7 @@ get_region_description_for (_Unwind_Context *uw_context,\n typedef enum\n {\n   /* Found some call site base data, but need to analyze further\n-     before beeing able to decide.  */\n+     before being able to decide.  */\n   unknown,\n \n   /* There is nothing relevant in the context at hand. */\n@@ -761,7 +761,7 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n {\n   _Unwind_Ptr ip\n     = _Unwind_GetIP (uw_context) - 1;\n-  /* Substract 1 because GetIP yields a call return address while we are\n+  /* Subtract 1 because GetIP yields a call return address while we are\n      interested in information for the call point. This does not always yield\n      the exact call instruction address but always brings the ip back within\n      the corresponding region."}, {"sha": "394ea1b64a02f5c032fa46774481440dc2bcadb4", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -2316,7 +2316,7 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n \t is integer_zero_node.  It would not work, however, because GCC's\n \t notion of \"catch all\" is stronger than our notion of \"others\".  Until\n \t we correctly use the cleanup interface as well, doing that would\n-\t prevent the \"all others\" handlers from beeing seen, because nothing\n+\t prevent the \"all others\" handlers from being seen, because nothing\n \t can be caught beyond a catch all from GCC's point of view.  */\n       gnu_etypes_list = tree_cons (NULL_TREE, gnu_etype, gnu_etypes_list);\n     }\n@@ -2431,7 +2431,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n    If this is an expression, return the GCC equivalent of the expression.  If\n    it is a statement, return the statement.  In the case when called for a\n    statement, it may also add statements to the current statement group, in\n-   which case anything it returns is to be interpreted as occuring after\n+   which case anything it returns is to be interpreted as occurring after\n    anything `it already added.  */\n \n tree\n@@ -4261,7 +4261,7 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \t}\n     }\n \n-  /* If this is a DECL_EXPR for a variable with DECL_INITIAl set,\n+  /* If this is a DECL_EXPR for a variable with DECL_INITIAL set,\n      there are two cases we need to handle here.  */\n   if (TREE_CODE (gnu_decl) == VAR_DECL && DECL_INITIAL (gnu_decl))\n     {"}, {"sha": "ae56b421a32ca695cdad9f01a4592acea5d46eb3", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff62c2e815d91b79229cb15058828724d956f85/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=5ff62c2e815d91b79229cb15058828724d956f85", "patch": "@@ -176,7 +176,7 @@ known_alignment (tree exp)\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n       /* If two address are added, the alignment of the result is the\n-\t minimum of the two aligments.  */\n+\t minimum of the two alignments.  */\n       lhs = known_alignment (TREE_OPERAND (exp, 0));\n       rhs = known_alignment (TREE_OPERAND (exp, 1));\n       this_alignment = MIN (lhs, rhs);"}]}