{"sha": "4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "node_id": "C_kwDOANBUbNoAKDRhZDIwMGFkZGMzZWFmNTVmYmE2Y2M5MWRiM2QzYjY2ZWFiYWYzZDA", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-08-15T12:21:33Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-08-15T12:21:33Z"}, "message": "i386 PIE: testsuite: cope with default pie on ia32\n\nThis patch continues the effort of cleaning up the testsuite for\n--enable-default-pie; the focus herein is mostly 32-bit x86.\n\nAs much as I tried to avoid it, most of the changes to the testsuite\nsimply disable PIC/PIE, for reasons I'm going to detail below.\n\nstatic-cdtor1.C gets new patterns to match PIE output.  Some\navx512fp16 tests change only in register allocation, because of the\nregister used to hold the GOT base address.  Interrupt tests changed\nin this regard as well, but here it also affected register saving and\nrestoring.\n\nThe previous patch modified cet-sjlj tests, mentioning a single regexp\ncovering PIC and nonPIC got incorrect match counts.  I found out that\nadding ?: to parenthesized subpatterns avoids miscounting matches.\nOther tests that count certain kinds of insns needed adjustment over\ninsns in get_pc_thunk, extra loads from the GOT, or extra adds to\ncompute addresses.  In one case, namely stack-check-12, it is nonPIC\nthat had extra insns, that PIC gets rid of, or rather, pushing and\npopping the PIC register obviates the dummy push and matching pop used\nfor stack probing in nonpic.\n\npr95126 tests were supposed to optimize loads into known constants,\nbut the @GOTOFF addresses prevent that for reasons I have not\ninvestigated, but that would be clearly desirable, so I've XFAILed\nthese.  pr95852 is another case of missed optimization: sibcalls are\nnot possible when the PIC register needs to be set up for the call,\nwhich prevents the expected constant propagation to the return block;\nI have adjusted the codegen expectations of these tests.\n\nAs for tests that disable PIE...  Some are judgment calls, that fail\nfor similar reasons as tests described above, but I chose not to\nadjust their expectations; others are just not possible with PIC, or\nnot worth the effort of adjusting.\n\nanon[14].C check for no global or comdat symbols, respectively, but\n-fPIE outputs get_pc_thunk, as global hidden comdat.\ninitlist-const1.C wants .rodata and checks for no .data, but PIC\noutputs constant data that needs relocations in .data.rel.ro.local.\nno-stack-protector-attr-3.C and stackprotectexplicit2.C count\nstack_check_fail matches; -fPIE calls stack_check_fail_local instead,\nwhich matches the pattern, but this symbol is also marked as .hidden,\nso the match count needs to be adjusted.\n\npr71694.C checks for no movl, but get_pc_thunk contains one.\npr102892-1.c is a missed optimization, ivopts creates an induction\nvariable because the array address can't be part of an indexing base\naddress with PIE, and that ends up stopping a load from being resolved\nto a constant as expected.  sibcall-11.c needs @PLT for the call,\nwhich requires the PIC register, which makes sibcalling impossible.\nbuiltin-self.c, in turn, expects no calls, but PIC calls get_pc_thunk.\n\navx* vector tests that had PIE disabled were affected in that the need\nfor GOT-based addressing modes changed instruction selection in ways\nthat deviated from the expectations of the tests.  Ditto other vector\ntests: pr100865*, pr101796-1, pr101846, pr101989-broadcast-1, and\npr102021, pr54855-[37], and pr90773-17.\n\npr15184* tests need a PIC register to access global variables, which\naffects register allocation, so the patterns would have to be\nadjusted.  pr27971 can't use the expected addressing mode to\ndereference the array with PIC, so it ends up selecting an indexed\naddressing mode, obviating the expected separate shift insn.\n\npr70263-2 is another case that implicitly expects a sibcall,\nimpossible because of the need for the PIC register; without a\nsibcall, the expected REG_EQUIV for the reuse of the stack slot of an\nincoming argument does not occur.  pr78035 duplicates the final\ncompare in both then and else blocks with PIE, which deviates from the\nexpected cmp count.  pr81736-[57] test for no frame pointer, but the\nPIC register assignment to a call-saved register forces a frame; the\nformer ends up not using the PIC register, but it's only optimized out\nafter committing to a stack frame to preserve it.  pr85620-6 also\nexpects a tail call in a situation that is impossible on ia32 PIC.\n\npr85667-6 doesn't expect the movl in get_pc_thunk.  pr93492-5 tests\n-mfentry, not available with PIC on ia32.  pr96539 expects a\ntail-call, to avoid copying a large-ish struct argument, but the call\nrequires the PIC register, so no tail-call.  stack-prot-sym.c expects\na nonpic addressing mode.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* g++.dg/abi/anon1.C: Disable pie on ia32.\n\t* g++.dg/abi/anon4.C: Likewise.\n\t* g++.dg/cpp0x/initlist-const1.C: Likewise.\n\t* g++.dg/no-stack-protector-attr-3.C: Likewise.\n\t* g++.dg/stackprotectexplicit2.C: Likewise.\n\t* g++.dg/pr71694.C: Likewise.\n\t* gcc.dg/pr102892-1.c: Likewise.\n\t* gcc.dg/sibcall-11.c: Likewise.\n\t* gcc.dg/torture/builtin-self.c: Likewise.\n\t* gcc.target/i386/avx2-dest-false-dep-for-glc.c: Likewise.\n\t* gcc.target/i386/avx512bf16-cvtsbh2ss-1.c: Likewise.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: Likewise.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-3.c: Likewise.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: Likewise.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-7.c: Likewise.\n\t* gcc.target/i386/avx512fp16-broadcast-1.c: Likewise.\n\t* gcc.target/i386/avx512fp16-pr101846.c: Likewise.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-3.c: Likewise.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: Likewise.\n\t* gcc.target/i386/pr100865-2.c: Likewise.\n\t* gcc.target/i386/pr100865-3.c: Likewise.\n\t* gcc.target/i386/pr100865-4a.c: Likewise.\n\t* gcc.target/i386/pr100865-4b.c: Likewise.\n\t* gcc.target/i386/pr100865-5a.c: Likewise.\n\t* gcc.target/i386/pr100865-5b.c: Likewise.\n\t* gcc.target/i386/pr100865-6a.c: Likewise.\n\t* gcc.target/i386/pr100865-6b.c: Likewise.\n\t* gcc.target/i386/pr100865-6c.c: Likewise.\n\t* gcc.target/i386/pr100865-7b.c: Likewise.\n\t* gcc.target/i386/pr101796-1.c: Likewise.\n\t* gcc.target/i386/pr101846-2.c: Likewise.\n\t* gcc.target/i386/pr101989-broadcast-1.c: Likewise.\n\t* gcc.target/i386/pr102021.c: Likewise.\n\t* gcc.target/i386/pr90773-17.c: Likewise.\n\t* gcc.target/i386/pr54855-3.c: Likewise.\n\t* gcc.target/i386/pr54855-7.c: Likewise.\n\t* gcc.target/i386/pr15184-1.c: Likewise.\n\t* gcc.target/i386/pr15184-2.c: Likewise.\n\t* gcc.target/i386/pr27971.c: Likewise.\n\t* gcc.target/i386/pr70263-2.c: Likewise.\n\t* gcc.target/i386/pr78035.c: Likewise.\n\t* gcc.target/i386/pr81736-5.c: Likewise.\n\t* gcc.target/i386/pr81736-7.c: Likewise.\n\t* gcc.target/i386/pr85620-6.c: Likewise.\n\t* gcc.target/i386/pr85667-6.c: Likewise.\n\t* gcc.target/i386/pr93492-5.c: Likewise.\n\t* gcc.target/i386/pr96539.c: Likewise.\n\tPR target/81708 (%gs:my_guard)\n\t* gcc.target/i386/stack-prot-sym.c: Likewise.\n\t* g++.dg/init/static-cdtor1.C: Add alternate patterns for PIC.\n\t* gcc.target/i386/avx512fp16-vcvtsh2si-1a.c: Extend patterns\n\tfor PIC/PIE register allocation.\n\t* gcc.target/i386/pr100704-3.c: Likewise.\n\t* gcc.target/i386/avx512fp16-vcvtsh2usi-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16-vcvttsh2si-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16-vcvttsh2usi-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16-vmovsh-1a.c: Likewise.\n\t* gcc.target/i386/interrupt-11.c: Likewise, allowing for\n\tpreservation of the PIC register.\n\t* gcc.target/i386/interrupt-12.c: Likewise.\n\t* gcc.target/i386/interrupt-13.c: Likewise.\n\t* gcc.target/i386/interrupt-15.c: Likewise.\n\t* gcc.target/i386/interrupt-16.c: Likewise.\n\t* gcc.target/i386/interrupt-17.c: Likewise.\n\t* gcc.target/i386/interrupt-8.c: Likewise.\n\t* gcc.target/i386/cet-sjlj-6a.c: Combine patterns from\n\tprevious change.\n\t* gcc.target/i386/cet-sjlj-6b.c: Likewise.\n\t* gcc.target/i386/pad-10.c: Accept insns in get_pc_thunk.\n\t* gcc.target/i386/pr70321.c: Likewise.\n\t* gcc.target/i386/pr81563.c: Likewise.\n\t* gcc.target/i386/pr84278.c: Likewise.\n\t* gcc.target/i386/pr90773-2.c: Likewise, plus extra loads from\n\tthe GOT.\n\t* gcc.target/i386/pr90773-3.c: Likewise.\n\t* gcc.target/i386/pr94913-2.c: Accept additional PIC insns.\n\t* gcc.target/i386/stack-check-17.c: Likewise.\n\t* gcc.target/i386/stack-check-12.c: Do not require dummy stack\n\tprobing obviated with PIC.\n\t* gcc.target/i386/pr95126-m32-1.c: Expect missed optimization\n\twith PIC.\n\t* gcc.target/i386/pr95126-m32-2.c: Likewise.\n\t* gcc.target/i386/pr95852-2.c: Accept different optimization\n\twith PIC.\n\t* gcc.target/i386/pr95852-4.c: Likewise.", "tree": {"sha": "d731e33a0c1985368693221211afa80075a60a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d731e33a0c1985368693221211afa80075a60a15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/comments", "author": null, "committer": null, "parents": [{"sha": "3a74a7bf62f47ed0d19866576378724be932ee17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a74a7bf62f47ed0d19866576378724be932ee17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a74a7bf62f47ed0d19866576378724be932ee17"}], "stats": {"total": 207, "additions": 149, "deletions": 58}, "files": [{"sha": "52018c317c45ff061838613f815370f59596fefa", "filename": "gcc/testsuite/g++.dg/abi/anon1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon1.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,4 +1,5 @@\n // PR c++/54883\n+// { dg-additional-options \"-fno-pie\" { target ia32 } }\n \n namespace { enum E { E1 }; } void f(E e) { }\n "}, {"sha": "517cc5284437b462e7219bb4dada029faa4e7ba7", "filename": "gcc/testsuite/g++.dg/abi/anon4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon4.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,5 @@\n // PR c++/65209\n-// { dg-additional-options \"-fno-pie\" { target sparc*-*-* } }\n+// { dg-additional-options \"-fno-pie\" { target { ia32 || sparc*-*-* } } }\n // { dg-final { scan-assembler-not \"comdat\" } }\n \n // Everything involving the anonymous namespace bits should be private, not"}, {"sha": "0da07592f75e04a35bbdace0a171315d8ea22bc9", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-const1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-const1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-const1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-const1.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,4 +1,6 @@\n // { dg-do compile { target c++11 } }\n+/* PIC uses .data.rel.ro.local rather than .rodata.  */\n+/* { dg-additional-options \"-fno-PIE\" } */\n \n #include <initializer_list>\n "}, {"sha": "d4d85f99c43c1edf486930a3f72f90ccb9a824cd", "filename": "gcc/testsuite/g++.dg/init/static-cdtor1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic-cdtor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic-cdtor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic-cdtor1.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -3,9 +3,11 @@\n // Make sure we emit initializers in the correct order.\n \n // ctors\n-// { dg-final { scan-assembler {_Z41__static_initialization_and_destruction_0v:.*movl\t\\$var1[^\\n]*\\n[^\\n]*_ZN5LeelaC1Ev[^\\n]*\\n[^\\n]*movl\t\\$var2[^\\n]*\\n[^\\n]*_ZN5LeelaC1Ev[^\\n]*\\n[^\\n]*movl\t\\$var3[^\\n]*\\n[^\\n]*_ZN5LeelaC1Ev} } }\n+// { dg-final { scan-assembler {_Z41__static_initialization_and_destruction_0v:.*movl\t\\$var1[^\\n]*\\n[^\\n]*_ZN5LeelaC1Ev[^\\n]*\\n[^\\n]*movl\t\\$var2[^\\n]*\\n[^\\n]*_ZN5LeelaC1Ev[^\\n]*\\n[^\\n]*movl\t\\$var3[^\\n]*\\n[^\\n]*_ZN5LeelaC1Ev} { target nonpic } } }\n+// { dg-final { scan-assembler {_Z41__static_initialization_and_destruction_0v:.*leaq\tvar1[^\\n]*\\n[^\\n]*(?:|movq[^\\n]*\\n[^\\n]*)_ZN5LeelaC1Ev[^\\n]*\\n[^\\n]*leaq\tvar2[^\\n]*\\n[^\\n]*(?:|movq[^\\n]*\\n[^\\n]*)_ZN5LeelaC1Ev[^\\n]*\\n[^\\n]*leaq\tvar3[^\\n]*\\n[^\\n]*(?:|movq[^\\n]*\\n[^\\n]*)_ZN5LeelaC1Ev} { target { ! nonpic } } } }\n // dtors\n-// { dg-final { scan-assembler {_Z41__static_initialization_and_destruction_1v:.*movl\t\\$var3[^\\n]*\\n[^\\n]*_ZN5LeelaD1Ev[^\\n]*\\n[^\\n]*movl\t\\$var2[^\\n]*\\n[^\\n]*_ZN5LeelaD1Ev[^\\n]*\\n[^\\n]*movl\t\\$var1[^\\n]*\\n[^\\n]*_ZN5LeelaD1Ev} } }\n+// { dg-final { scan-assembler {_Z41__static_initialization_and_destruction_1v:.*movl\t\\$var3[^\\n]*\\n[^\\n]*_ZN5LeelaD1Ev[^\\n]*\\n[^\\n]*movl\t\\$var2[^\\n]*\\n[^\\n]*_ZN5LeelaD1Ev[^\\n]*\\n[^\\n]*movl\t\\$var1[^\\n]*\\n[^\\n]*_ZN5LeelaD1Ev} { target nonpic } } }\n+// { dg-final { scan-assembler {_Z41__static_initialization_and_destruction_1v:.*leaq\tvar3[^\\n]*\\n[^\\n]*(?:|movq[^\\n]*\\n[^\\n]*)_ZN5LeelaD1Ev[^\\n]*\\n[^\\n]*leaq\tvar2[^\\n]*\\n[^\\n]*(?:|movq[^\\n]*\\n[^\\n]*)_ZN5LeelaD1Ev[^\\n]*\\n[^\\n]*leaq\tvar1[^\\n]*\\n[^\\n]*(?:|movq[^\\n]*\\n[^\\n]*)_ZN5LeelaD1Ev} { target { ! nonpic } } } }\n \n struct Leela {\n   Leela ();"}, {"sha": "147c2b79f780b6fda2f22a04f03ba6ed924d4d5b", "filename": "gcc/testsuite/g++.dg/no-stack-protector-attr-3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-3.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2 -fstack-protector-explicit\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n /* { dg-do compile { target { ! hppa*-*-* } } } */\n "}, {"sha": "60f246ff83ee89d00e015d20e4b651b935fca113", "filename": "gcc/testsuite/g++.dg/pr71694.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71694.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71694.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71694.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-store-merging\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-fno-common -mdynamic-no-pic\" { target { ia32 && { x86_64-*-darwin* i?86-*-darwin* } } } } */\n \n struct B {"}, {"sha": "70d8df4c73de2447d9ac29d7d37121fb2fdf6dbe", "filename": "gcc/testsuite/g++.dg/stackprotectexplicit2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstackprotectexplicit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstackprotectexplicit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstackprotectexplicit2.C?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2 -fstack-protector-explicit\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n int A()\n {"}, {"sha": "f08b2b84f525bc53627056fbf86710c65002babe", "filename": "gcc/testsuite/gcc.dg/pr102892-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102892-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102892-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102892-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do link } */\n /* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-fno-PIC\" { target ia32 } } */\n /* { dg-additional-sources \"pr102892-2.c\" } */\n \n static long b[2][1] = {0};"}, {"sha": "12f6d9c9c34ea61aa1df747f26844e40281dfba4", "filename": "gcc/testsuite/gcc.dg/sibcall-11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-11.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n // Test for sibcall optimization with empty struct.\n // { dg-options \"-O2\" }\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n // { dg-final { scan-assembler \"jmp\" { target i?86-*-* x86_64-*-* } } }\n \n struct A { };"}, {"sha": "56188fcc468a9a452299670e504552b597471284", "filename": "gcc/testsuite/gcc.dg/torture/builtin-self.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-self.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-self.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-self.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* Check that we can use this idiom to define out-of-line copies of built-in\n    functions.  This is used by libgcc/sync.c, for example.  */\n void __sync_synchronize (void)"}, {"sha": "fe331fe5e2c37d28cd70157944bbe4c08b06b1e7", "filename": "gcc/testsuite/gcc.target/i386/avx2-dest-false-dep-for-glc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-dest-false-dep-for-glc.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx2 -mtune=generic -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n \n #include <immintrin.h>"}, {"sha": "831abd37d8073c22878cb9d7b1403330f120bab4", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-cvtsbh2ss-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"sall\\[ \\\\t\\]+\\[^\\{\\n\\]*16\" 1 } } */\n /* { dg-final { scan-assembler-times \"movl\" 1 } } */\n "}, {"sha": "0fa93e031359ea5dd84cb8331fba1187010386e2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512dq\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 { target { ! ia32 } } } }  */\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 5 { target ia32 } } } */"}, {"sha": "b1a75f22daf5730a6fd793100c49c9519de3083a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-3.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 4 } }  */"}, {"sha": "f1b672aba4db091c5dc86e85c85309488bc6a5c8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %zmm\\[0-9\\]+\" 4 } } */"}, {"sha": "1f141d0f8061d6bf4bf700ace329995f43d40454", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-7.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"vadd\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n /* { dg-final { scan-assembler-times \"vadd\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */"}, {"sha": "1e9b8f3cad6be63d9948cb97477a7f9b841fd38f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-broadcast-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 4 } }  */"}, {"sha": "01571d21e3d0fca2f35ab2333b515cafaa477467", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-pr101846.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr101846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr101846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr101846.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"vpmovzxwd\" \"3\" } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\" \"3\" } } */\n "}, {"sha": "7200f291b1e565f2edca6e20b0ea616f90b2ef2b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2si-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n \n \n #include <immintrin.h>"}, {"sha": "0d00803c7304bdf4f55ae4451b6a89818392b799", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2usi-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n \n \n #include <immintrin.h>"}, {"sha": "4fb0684d6623a283d46fe5a11fd5af4f37ede7d6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2si-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "3d408f13d095380a76043aa5b711fed1f3313fc4", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2usi-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%e\\[ad]x\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "ba10096aa200d14cdff0aec12a3b44fd6cd5dc14", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovsh-1a.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r\\]*%\\[er\\]ax+\\[^\\n\\r]*\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+\\[^\\n\\r\\]*%\\[er\\]ax+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+\\[^\\n\\r\\]*%\\[er\\]ax+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r\\]*%\\[er\\]\\[ad]x+\\[^\\n\\r]*\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+\\[^\\n\\r\\]*%\\[er\\]\\[ad]x+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+\\[^\\n\\r\\]*%\\[er\\]\\[ad]x+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^z\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "0304b9de3a3c3062f8c09fe2e70a6d6a2af5850c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512vl -mavx512dq\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 2 { target { ! ia32 } } } }  */\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 4 { target { ! ia32 } } } }  */"}, {"sha": "8ad8fd75b1ab3b40a5a66dcb264beef6937ac496", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-3.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 4 } }  */\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 8 } }  */"}, {"sha": "0ba0cd943c2c7a4ce67881d9b862c4c4cc730c85", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR target/87767 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 4 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 4 { target ia32 } } } */"}, {"sha": "6cc88ad436fe031bf757bbe0c67143c647c0e1cb", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-6a.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -2,10 +2,8 @@\n /* { dg-require-effective-target maybe_x32 } */\n /* { dg-options \"-O -maddress-mode=short -fcf-protection -mx32\" } */\n /* { dg-final { scan-assembler-times \"endbr64\" 2 } } */\n-/* { dg-final { scan-assembler-times \"movq\\t\\[^\\n\\]*buf\\\\+8\" 1 { target nonpic } } } */\n-/* { dg-final { scan-assembler-times \"movq\\t\\[^\\n\\]*8\\\\+buf\" 1 { target { ! nonpic } } } } */\n-/* { dg-final { scan-assembler-times \"subq\\tbuf\\\\+8\" 1 { target nonpic } } } */\n-/* { dg-final { scan-assembler-times \"subq\\t8\\\\+buf\" 1 { target { ! nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"movq\\t\\[^\\n\\]*(?:8\\\\+buf|buf\\\\+8)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subq\\t(?:8\\\\+buf|buf\\\\+8)\" 1 } } */\n /* { dg-final { scan-assembler-times \"shrl\\t\\\\\\$3,\" 1 } } */\n /* { dg-final { scan-assembler-times \"rdsspq\" 2 } } */\n /* { dg-final { scan-assembler-times \"incsspq\" 2 } } */"}, {"sha": "b80acfdfdf80d39dea1cc1668662d9923409b38d", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-6b.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-6b.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -2,10 +2,8 @@\n /* { dg-require-effective-target maybe_x32 } */\n /* { dg-options \"-O -maddress-mode=long -fcf-protection -mx32\" } */\n /* { dg-final { scan-assembler-times \"endbr64\" 2 } } */\n-/* { dg-final { scan-assembler-times \"movq\\t\\[^\\n\\]*buf\\\\+16\" 1 { target nonpic } } } */\n-/* { dg-final { scan-assembler-times \"movq\\t\\[^\\n\\]*16\\\\+buf\" 1 { target { ! nonpic } } } } */\n-/* { dg-final { scan-assembler-times \"subq\\tbuf\\\\+16\" 1 { target nonpic } } } */\n-/* { dg-final { scan-assembler-times \"subq\\t16\\\\+buf\" 1 { target { ! nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"movq\\t\\[^\\n\\]*(?:16\\\\+buf|buf\\\\+16)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subq\\t(?:16\\\\+buf|buf\\\\+16)\" 1 } } */\n /* { dg-final { scan-assembler-times \"shrl\\t\\\\\\$3,\" 1 } } */\n /* { dg-final { scan-assembler-times \"rdsspq\" 2 } } */\n /* { dg-final { scan-assembler-times \"incsspq\" 2 } } */"}, {"sha": "4a119b9748afe7cd41ab009128a5d852d904f493", "filename": "gcc/testsuite/gcc.target/i386/interrupt-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-11.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -15,7 +15,7 @@ foo (void *frame)\n /* { dg-final { scan-assembler-not \"kmov.\\[\\\\t \\]*\\[0-9\\]*\\\\(%\\[re\\]?sp\\\\),\\[\\\\t \\]*%k\\[0-7\\]+\" } } */\n /* { dg-final { scan-assembler-not \"pushq\\[\\\\t \\]*%rbx\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-not \"pushq\\[\\\\t \\]*%r1\\[2-5\\]+\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%ebx\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%ebx\" { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%esi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:e|r)ax\" 1 } } */"}, {"sha": "4e91a27de43b33451718fdf9245522022e872608", "filename": "gcc/testsuite/gcc.target/i386/interrupt-12.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-12.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -12,15 +12,17 @@ fn1 (void *frame, uword_t error)\n }\n \n /* { dg-final { scan-assembler-not \"movups\\[\\\\t .\\]*%(x|y|z)mm\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(b|c|d)x\" } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)bx\" { target { nonpic || { ! ia32 } } } } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(c|d)x\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)si\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%rax\" { target { { ! ia32 } &&  nonpic } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[0-9\\]+\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"leave\" 1 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 1 { target { ia32 && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"popl\\[\\\\t \\]*%eax\" 1 { target { ia32 && { ! nonpic } } } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"(addl|leal).*4.*%esp\" { target ia32 } } } */"}, {"sha": "4afd1b03dac2e03ad58f273d07fcbc7198d13b03", "filename": "gcc/testsuite/gcc.target/i386/interrupt-13.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-13.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -12,15 +12,17 @@ fn1 (void *frame, uword_t error)\n }\n \n /* { dg-final { scan-assembler-not \"movups\\[\\\\t .\\]*%(x|y|z)mm\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(b|c|d)x\" } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)bx\" { target { nonpic || { ! ia32 } } } } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(c|d)x\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)si\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%rax\" { target { { ! ia32 } && nonpic } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[0-9\\]+\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"leave\" 1 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 1 { target { ia32 && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"popl\\[\\\\t \\]*%eax\" 1 { target { ia32 && { ! nonpic } } } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"(addl|leal).*4.*%esp\" { target ia32 } } } */"}, {"sha": "f43aabc90dde6e4071fd31c3827a9c6062cbff99", "filename": "gcc/testsuite/gcc.target/i386/interrupt-15.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-15.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -19,15 +19,16 @@ fn2 (void *frame, uword_t error)\n }\n \n /* { dg-final { scan-assembler-not \"movups\\[\\\\t .\\]*%(x|y|z)mm\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(b|c|d)x\" } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)ax\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(c|d)x\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)si\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%rax\" { target { { ! ia32 } && nonpic } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[0-9\\]+\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 2 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"leave\" 2 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%eax\" 2 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 2 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 2 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 2 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 2 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"(addl|leal).*4.*%esp\" { target ia32 } } } */"}, {"sha": "cb45ba54e3dced77b10121fd891fbfd874310541", "filename": "gcc/testsuite/gcc.target/i386/interrupt-16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-16.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -12,7 +12,8 @@ foo (int i)\n \n /* { dg-final { scan-assembler-not \"movups\\[\\\\t \\]*%(x|y|z)mm\\[0-9\\]+,\\[\\\\t \\]-*\\[0-9\\]*\\\\(%\\[re\\]?bp\\\\)\" } } */\n /* { dg-final { scan-assembler-not \"movups\\[\\\\t \\]*-\\[0-9\\]*\\\\(%\\[re\\]?bp\\\\),\\[\\\\t \\]*%(x|y|z)mm\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(a|b|c|d)x\" } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)bx\" { target { nonpic || { ! ia32 } } } } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(a|c|d)x\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)si\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)bp\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */"}, {"sha": "218ed60854a911dd5980e62d64e6913ca479b853", "filename": "gcc/testsuite/gcc.target/i386/interrupt-17.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-17.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -11,7 +11,8 @@ foo (int i)\n }\n \n /* { dg-final { scan-assembler-not \"movups\\[\\\\t \\]*%(x|y|z)mm\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(a|b|c|d)x\" } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)bx\" { target { nonpic || { ! ia32 } } } } } */\n+/* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)(a|c|d)x\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)si\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)bp\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */"}, {"sha": "039ccd57f88e2c5e9ed97f1875dfdb4914a02486", "filename": "gcc/testsuite/gcc.target/i386/interrupt-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-8.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -15,7 +15,7 @@ foo (void *frame)\n /* { dg-final { scan-assembler-not \"kmov.\\[\\\\t \\]*\\[0-9\\]*\\\\(%\\[re\\]?sp\\\\),\\[\\\\t \\]*%k\\[0-7\\]+\" } } */\n /* { dg-final { scan-assembler-not \"pushq\\[\\\\t \\]*%rbx\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-not \"pushq\\[\\\\t \\]*%r1\\[2-5\\]+\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%ebx\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%ebx\" { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-not \"pushl\\[\\\\t \\]*%e(s|d)i\" { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:e|r)ax\" 1 } } */\n /* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:e|r)cx\" 1 } } */"}, {"sha": "ac015f222c1d05c1889663c4f3ad8bb81f726231", "filename": "gcc/testsuite/gcc.target/i386/pad-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=atom\" } } */\n /* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n-/* { dg-final { scan-assembler-not \"nop\" } } */\n+/* { dg-final { scan-assembler-not \"nop\" { target { nonpic || { ! ia32 } } } } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n extern void bar ();"}, {"sha": "6f7a3e59ecff5509972e48415ebb5f3768625a91", "filename": "gcc/testsuite/gcc.target/i386/pr100704-3.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-3.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -17,4 +17,6 @@ foo (void)\n   bar (1, 2, 3, 4, 5, 6, foooo[0]);\n }\n \n-/* { dg-final { scan-assembler \"push\\[lq\\]\\tfoooo\\+\" } } */\n+/* { dg-final { scan-assembler \"push\\[lq\\]\\tfoooo\\+\" { target { nonpic || { ! ia32 } } } } }*/\n+/* { dg-final { scan-assembler \"movl\\tfoooo@GOT\\\\(%ebx\\\\), %eax\" { target { ia32 && { ! nonpic } } } } } */\n+/* { dg-final { scan-assembler-times \"pushl\\t(?:|4|8|12)\\\\(%eax\\\\)\" 4 { target { ia32 && { ! nonpic } } } } } */"}, {"sha": "090a010b719d458895e2dfcbe1f6b34e33b2e07c", "filename": "gcc/testsuite/gcc.target/i386/pr100865-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern char *dst;\n "}, {"sha": "cde4b1c8927b7c1ee457f140ccf6a3b227c0ae09", "filename": "gcc/testsuite/gcc.target/i386/pr100865-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern char *dst;\n "}, {"sha": "bd99945fd9dbe8c17e59fe20c022dca238787ebf", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4a.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake -mtune-ctrl=avx256_store_by_pieces\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern char array[64];\n "}, {"sha": "1814306d5fc31f8cfc6bd227ef2d2bbbd50850e5", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #include \"pr100865-4a.c\"\n "}, {"sha": "b023fcae0ad4f9c121071cf0488599dcfe218dcd", "filename": "gcc/testsuite/gcc.target/i386/pr100865-5a.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern short array[64];\n "}, {"sha": "5bccfd0de9fd5d499dd610c104b6c1cc19995bf9", "filename": "gcc/testsuite/gcc.target/i386/pr100865-5b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5b.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #include \"pr100865-5a.c\"\n "}, {"sha": "34951a9c96891722b328776459d36c35b73624bd", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6a.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6a.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern int array[64];\n "}, {"sha": "09b0e71d9120c4dd46df05b1a7d136bb697c15fa", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #include \"pr100865-6a.c\"\n "}, {"sha": "bab7c88d89c17a6ed9014d88fa5c90ed86c11772", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6c.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern int array[64];\n "}, {"sha": "49f752e1f241bb5f83786527f23f4b225ffd4fb4", "filename": "gcc/testsuite/gcc.target/i386/pr100865-7b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #include \"pr100865-7a.c\"\n "}, {"sha": "b25464ddb8722aefaa945db634dcc181282a8454", "filename": "gcc/testsuite/gcc.target/i386/pr101796-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101796-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101796-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101796-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final {scan-assembler-times \"vpsrlw\\[ \\\\t\\]\" 1 } } */\n /* { dg-final {scan-assembler-times \"vpsllw\\[ \\\\t\\]\" 1 } } */\n /* { dg-final {scan-assembler-times \"vpsraw\\[ \\\\t\\]\" 1 } } */"}, {"sha": "bc2b466262dfbf2b321eb866e740f2779763fc1a", "filename": "gcc/testsuite/gcc.target/i386/pr101846-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -mavx512vbmi -O2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\" \"3\" } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\" \"3\" } } */\n /* { dg-final { scan-assembler-times \"vpmovqd\" \"3\" } } */"}, {"sha": "428c40c49dba14bc2f19d6db8cc628f7ce9de5a5", "filename": "gcc/testsuite/gcc.target/i386/pr101989-broadcast-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101989-broadcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101989-broadcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101989-broadcast-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"vpternlog\" 4 } } */\n /* { dg-final { scan-assembler-times \"\\\\\\{1to4\\\\\\}\" 4 } } */\n #include<immintrin.h>"}, {"sha": "a5012a4beb10c3f43c4413f903442fdd444e2f31", "filename": "gcc/testsuite/gcc.target/i386/pr102021.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102021.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #include<immintrin.h>\n "}, {"sha": "756183de987dc197452661ce0cfa07ad821a80b7", "filename": "gcc/testsuite/gcc.target/i386/pr15184-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr15184-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr15184-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr15184-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR 15184 first two tests, plus two addition ones.  */\n /* { dg-do compile { target ia32 } } */\n /* { dg-options \"-O2 -march=pentiumpro\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #define regparm __attribute__((__regparm__(1)))\n "}, {"sha": "cb8201f9731f0f9658848416b8bd56fc5c26aa33", "filename": "gcc/testsuite/gcc.target/i386/pr15184-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr15184-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr15184-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr15184-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,7 @@\n /* PR 15184 second two tests\n /* { dg-do compile { target ia32 } } */\n /* { dg-options \"-O2 -march=pentiumpro\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n #define regparm __attribute__((__regparm__(1)))\n "}, {"sha": "19eb3548d87f196e57398c1c8717590ed7e9ad4b", "filename": "gcc/testsuite/gcc.target/i386/pr27971.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr27971.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr27971.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr27971.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mno-tbm\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } } */\n \n unsigned array[4];\n@@ -17,4 +18,3 @@ unsigned foo(TYPE x)\n \n /* { dg-final { scan-assembler-not \"shr\\[^\\\\n\\]*2\" } } */\n /* { dg-final { scan-assembler \"and\\[^\\\\n\\]*12\" } } */\n- \n\\ No newline at end of file"}, {"sha": "a58a8ba534767df3be9cf0d5cbc8e080e5f83ed1", "filename": "gcc/testsuite/gcc.target/i386/pr54855-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-3.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse2 -mfpmath=sse\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"subsd\" 1 } } */\n /* { dg-final { scan-assembler-not \"movapd\" } } */\n /* { dg-final { scan-assembler-not \"movsd\" } } */"}, {"sha": "d9ef66a3b44ac2905bfe5bfa7c445cf84d800816", "filename": "gcc/testsuite/gcc.target/i386/pr54855-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-7.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse -mfpmath=sse\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"divss\" 1 } } */\n /* { dg-final { scan-assembler-not \"movaps\" } } */\n /* { dg-final { scan-assembler-not \"movss\" } } */"}, {"sha": "20447ede517c6350764b6f14cf0d286c8fdbf12b", "filename": "gcc/testsuite/gcc.target/i386/pr70263-2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70263-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70263-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70263-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-rtl-ira\" } */\n+/* ia32 PIC prevents tail-calling, which forces bar's arg to be pushed, which\n+   drops the equivalence.  */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n /* { dg-final { scan-rtl-dump \"Adding REG_EQUIV to insn \\[0-9\\]+ for source of insn \\[0-9\\]+\" \"ira\" } } */\n "}, {"sha": "57552efe7a27921c6bed4e7221fe45983d486d3f", "filename": "gcc/testsuite/gcc.target/i386/pr70321.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70321.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70321.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70321.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -7,4 +7,6 @@ void foo (long long ixi)\n     __builtin_abort ();\n }\n \n-/* { dg-final { scan-assembler-times \"mov\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov\" 1 { target nonpic } } } */\n+/* get_pc_thunk adds an extra mov insn.  */\n+/* { dg-final { scan-assembler-times \"mov\" 2 { target { ! nonpic } } } } */"}, {"sha": "7d3a983b2188fa8394ae4dfa9170055a208192de", "filename": "gcc/testsuite/gcc.target/i386/pr78035.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78035.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78035.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78035.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern int a;\n extern int b;"}, {"sha": "3d3f95944b8ddecbf1cf361eee54c4f97347e5c5", "filename": "gcc/testsuite/gcc.target/i386/pr81563.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81563.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -10,4 +10,4 @@ fn1 (long long int x)\n   return x;\n }\n \n-/* { dg-final { scan-assembler-not \"movl\\[ \\\\t\\]+\\[0-9]*\\\\(%esp\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\\\t\\]+\\[0-9]+\\\\(%esp\\\\)\" } } */"}, {"sha": "0dcf17b98a2a68ecd7a38ed3f280da5fc24ef3bf", "filename": "gcc/testsuite/gcc.target/i386/pr81736-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-5.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-omit-frame-pointer -mavx\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n typedef int v8si __attribute__ ((vector_size (32)));\n "}, {"sha": "95b380d238b2e220758630b46278d0239df99238", "filename": "gcc/testsuite/gcc.target/i386/pr81736-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-7.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern int foo (void);\n "}, {"sha": "2fa84802c6790d849be3879cf95eda0f82276237", "filename": "gcc/testsuite/gcc.target/i386/pr84278.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84278.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -15,4 +15,6 @@ void foo(void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"\\\\\\(%.sp\\\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\(%.sp\\\\\\)\" { target { nonpic || { ! ia32 } } } } } */\n+/* ia32's get_pc_thunk variants all load from %(esp).  */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\t]*\\\\\\(%.sp\\\\\\)\" 1 { target { ! { nonpic || { ! ia32 } } } } } } */"}, {"sha": "4f04ba0e49141425fe412ba848220a58148b4023", "filename": "gcc/testsuite/gcc.target/i386/pr85620-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-6.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler \"jmp\" } } */\n \n struct ucontext;"}, {"sha": "06570dd64608f21a833baffdf19eb8646c08dc51", "filename": "gcc/testsuite/gcc.target/i386/pr85667-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-6.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target ia32 } } */\n /* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-times \"movl\\[^\\n\\r]*, %eax\" 1 } } */\n /* { dg-final { scan-assembler-times \"flds\\[^\\n\\r]*\" 1 } } */\n typedef struct"}, {"sha": "3036085b7bf774b02692a13033352b615f989ddb", "filename": "gcc/testsuite/gcc.target/i386/pr90773-17.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-17.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n extern char *dst;\n "}, {"sha": "b5373ca8c0d6afd5802e9adb3a4f5e5c22e4a93d", "filename": "gcc/testsuite/gcc.target/i386/pr90773-2.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -13,7 +13,10 @@ foo (void)\n \n /* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+15\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* PIC gets one extra match in get_pc_thunk, and two extra matches to load\n+   dst's and src's values after loading their addresses from the GOT.  */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ia32 && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 4 { target { ia32 && { ! nonpic } } } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+4\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+8\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+12\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */"}, {"sha": "dd2430f0bbbf7cbd741d09cfc1d4e05a4612396d", "filename": "gcc/testsuite/gcc.target/i386/pr90773-3.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-3.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -13,7 +13,10 @@ foo (void)\n \n /* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+15\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* PIC gets one extra match in get_pc_thunk, and two extra matches to load\n+   dst's and src's values after loading their addresses from the GOT.  */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ia32 && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 4 { target { ia32 && { ! nonpic } } } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+4\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+8\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+12\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */"}, {"sha": "1ca5ba1fac16c46ff8b93b776c920d6b584f52cc", "filename": "gcc/testsuite/gcc.target/i386/pr93492-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-5.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do \"compile\" { target *-*-linux* } } */\n /* { dg-options \"-O1 -fpatchable-function-entry=1 -mfentry -pg -fasynchronous-unwind-tables\" } */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n /* Test the placement of the .LPFE1 label.  */\n "}, {"sha": "199f3fe7a0168143fb9e4fb082d98ed3bd14f4ab", "filename": "gcc/testsuite/gcc.target/i386/pr94913-2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -21,4 +21,8 @@ void fooi (unsigned long x, unsigned long y)\n }\n \n /* { dg-final { scan-assembler-not \"cmp\" } } */\n-/* { dg-final { scan-assembler-times \"add\" 3 } } */\n+/* On IA32, PIC adds one add per function to compute the PIC register, and\n+   another add to adjust %esp in the epilogue needed to restore the PIC\n+   register.  */\n+/* { dg-final { scan-assembler-times \"add\" 3 { target { ! { ia32 && { ! nonpic } } } } } } */\n+/* { dg-final { scan-assembler-times \"add\" 9 { target { ia32 && { ! nonpic } } } } } */"}, {"sha": "9dfe15d7efe37b6923e60817ec22701c5153b9c3", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m32-1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-1.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -10,7 +10,8 @@ void call_func(void)\n     func(s);\n }\n \n-/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$\" } } */\n-/* { dg-final { scan-assembler \"movb\\[ \\\\t]*\\\\\\$0, \" } } */\n-/* { dg-final { scan-assembler-not \"movzwl\" } } */\n-\n+/* The @GOTOFF addressing seems to prevent the optimization of the loads to\n+   known constants.  */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$\" { xfail { ! nonpic } } } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\\\t]*\\\\\\$0, \" { xfail { ! nonpic } } } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" { xfail { ! nonpic } } } } */"}, {"sha": "f4d9123a7680078a9815635258eff507cedc22fb", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m32-2.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -10,7 +10,8 @@ void call_func(void)\n   func(s);\n }\n \n-/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$\" } } */\n-/* { dg-final { scan-assembler \"movb\\[ \\\\t]*\\\\\\$0, \" } } */\n-/* { dg-final { scan-assembler-not \"movzwl\" } } */\n-\n+/* The @GOTOFF addressing seems to prevent the optimization of the loads to\n+   known constants.  */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$\" { xfail { ! nonpic } } } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\\\t]*\\\\\\$0, \" { xfail { ! nonpic } } } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" { xfail { ! nonpic } } } } */"}, {"sha": "558308fee1fe35997aa68d9b520a602ddc861aee", "filename": "gcc/testsuite/gcc.target/i386/pr95852-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95852-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95852-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95852-2.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -3,7 +3,13 @@\n /* { dg-options \"-O2 -fdump-tree-optimized -masm=att\" } */\n /* { dg-final { scan-tree-dump-times \" = \\.MUL_OVERFLOW \" 32 \"optimized\" } } */\n /* { dg-final { scan-assembler-times \"\\tmull\\t\" 32 } } */\n-/* { dg-final { scan-assembler-times \"\\tseto\\t\" 8 } } */\n+/* In functions that return 0 on non-overflow (f2, f10, f18, f26), the overflow\n+   flag is propagated to the return value's PHI node in the non-call path; on\n+   ia32 PIC, sibcalls are not viable, so the known value of the flag can't be\n+   propagated to the return block, that is only duplicated in bbro, too late\n+   for fwprop2 or even cprop_hardreg.  */\n+/* { dg-final { scan-assembler-times \"\\tseto\\t\" 12 { target { ia32 && { ! nonpic } } } } } */\n+/* { dg-final { scan-assembler-times \"\\tseto\\t\" 8 { target { nonpic || { ! ia32 } } } } } */\n /* { dg-final { scan-assembler-times \"\\tsetno\\t\" 8 } } */\n /* { dg-final { scan-assembler-times \"\\tjn\\?o\\t\" 16 } } */\n "}, {"sha": "cb48b61121e5d96f63c4985a63e1c19c196e9d9f", "filename": "gcc/testsuite/gcc.target/i386/pr95852-4.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95852-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95852-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95852-4.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -3,7 +3,13 @@\n /* { dg-options \"-O2 -fdump-tree-optimized -masm=att\" } */\n /* { dg-final { scan-tree-dump-times \" = \\.MUL_OVERFLOW \" 32 \"optimized\" } } */\n /* { dg-final { scan-assembler-times \"\\timull\\t\" 32 } } */\n-/* { dg-final { scan-assembler-times \"\\tseto\\t\" 8 } } */\n+/* In functions that return 0 on non-overflow (f2, f10, f18, f26), the overflow\n+   flag is propagated to the return value's PHI node in the non-call path; on\n+   ia32 PIC, sibcalls are not viable, so the known value of the flag can't be\n+   propagated to the return block, that is only duplicated in bbro, too late\n+   for fwprop2 or even cprop_hardreg.  */\n+/* { dg-final { scan-assembler-times \"\\tseto\\t\" 12 { target { ia32 && { ! nonpic } } } } } */\n+/* { dg-final { scan-assembler-times \"\\tseto\\t\" 8 { target { nonpic || { ! ia32 } } } } } */\n /* { dg-final { scan-assembler-times \"\\tsetno\\t\" 8 } } */\n /* { dg-final { scan-assembler-times \"\\tjn\\?o\\t\" 16 } } */\n "}, {"sha": "696929be0af2da542728cafd2577e0d09d3085bd", "filename": "gcc/testsuite/gcc.target/i386/pr96539.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96539.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96539.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96539.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,9 @@\n /* PR rtl-optimization/96539 */\n /* { dg-do compile } *\n /* { dg-options \"-Os\" } */\n+/* The need to restore the PIC register prevents PLT tail-calls on ia32,\n+   so S has to be copied to call baz.  */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n /* { dg-final { scan-assembler-not \"rep\\[^\\n\\r]\\*movs\" } } */\n \n struct A { int a, b, c, d, e, f; void *g, *h, *i, *j, *k, *l, *m; };"}, {"sha": "aa9c233e749928402f1998e096e3340adc99a8bc", "filename": "gcc/testsuite/gcc.target/i386/stack-check-12.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-12.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -11,8 +11,9 @@ f (void)\n }\n \n /* { dg-final { scan-assembler-not \"or\\[ql\\]\" } } */\n-/* { dg-final { scan-assembler \"pushl\t%esi\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"popl\t%esi\" { target ia32 } } }*/\n+/* On ia32 PIC, saving the PIC register requires a stack frame, which does away\n+   with the need for the dummy %esi pushing and popping for stack probing.  */\n+/* { dg-final { scan-assembler \"pushl\t%esi\" { target { ia32 && nonpic } } } } */\n+/* { dg-final { scan-assembler \"popl\t%esi\" { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler \"pushq\t%rax\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"popq\t%rax\" { target { ! ia32 } } } }*/\n-\n+/* { dg-final { scan-assembler \"popq\t%rax\" { target { ! ia32 } } } } */"}, {"sha": "b3e41cb3d25560290f31501d3d2119c81cdfce43", "filename": "gcc/testsuite/gcc.target/i386/stack-check-17.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-17.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -31,9 +31,11 @@ f3 (void)\n    into either a stack slot or callee saved register.  The former\n    would be rather dumb.  So assume it does not happen.\n \n-   So search for two/four pushes for the callee register saves/argument\n-   pushes and no pops (since the function has no reachable epilogue).  */\n+   So search for two/four pushes for the callee register saves/argument pushes\n+   (plus one for the PIC register if needed on ia32) and no pops (since the\n+   function has no reachable epilogue).  */\n /* { dg-final { scan-assembler-times \"push\\[ql\\]\" 2 { target { ! ia32 } } } }  */\n-/* { dg-final { scan-assembler-times \"push\\[ql\\]\" 4 { target { ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"push\\[ql\\]\" 4 { target { ia32 && nonpic } } } }  */\n+/* { dg-final { scan-assembler-times \"push\\[ql\\]\" 5 { target { ia32 && { ! nonpic } } } } }  */\n /* { dg-final { scan-assembler-not \"pop\" } } */\n "}, {"sha": "81790f63753f120aa38e6170920ba5542bd070a1", "filename": "gcc/testsuite/gcc.target/i386/stack-prot-sym.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-sym.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-sym.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-sym.c?ref=4ad200addc3eaf55fba6cc91db3d3b66eabaf3d0", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target tls_native } */\n /* { dg-options \"-O2 -fstack-protector-all -mstack-protector-guard=tls -mstack-protector-guard-reg=gs -mstack-protector-guard-symbol=my_guard\" } */\n+/* We don't expect GOT relocations; should we?  */\n+/* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n void f(void) { }\n "}]}