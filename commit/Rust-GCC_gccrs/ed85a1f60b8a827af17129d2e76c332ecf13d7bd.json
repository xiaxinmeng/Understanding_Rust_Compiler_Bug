{"sha": "ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4NWExZjYwYjhhODI3YWYxNzEyOWQyZTc2YzMzMmVjZjEzZDdiZA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-08-07T15:38:59Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-08-07T15:38:59Z"}, "message": "semantics.c (finish_decltype_type): Handle calls to function pointers and references to functions properly.\n\n2008-08-07  Douglas Gregor  <doug.gregor@gmail.com>\n\t\n\t* semantics.c (finish_decltype_type): Handle calls to function\n\tpointers and references to functions properly.\n\t\n2008-08-07  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* g++.dg/cpp0x/decltype12.C: New.\n\nFrom-SVN: r138843", "tree": {"sha": "d0b0600d972dd2e78c8abdb979bb1a5f24f8b99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b0600d972dd2e78c8abdb979bb1a5f24f8b99e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e297d9fe0df8e5b1fb5dee3700be0bf3c2894680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e297d9fe0df8e5b1fb5dee3700be0bf3c2894680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e297d9fe0df8e5b1fb5dee3700be0bf3c2894680"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "c4c4680c8ae85beb7dc3b6c41edd02b76e08305c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "patch": "@@ -1,3 +1,8 @@\n+2008-08-07  Douglas Gregor  <doug.gregor@gmail.com>\n+\t\n+\t* semantics.c (finish_decltype_type): Handle calls to function\n+\tpointers and references to functions properly.\n+\t\n 2008-08-06  Douglas Gregor  <doug.gregor@gmail.com>\n \n        PR c++/36460"}, {"sha": "9a8af7c077498fe6826b87ae83f3756f4d97c969", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "patch": "@@ -4586,8 +4586,6 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n     }\n   else\n     {\n-      tree fndecl;\n-\n       /* Expressions of reference type are sometimes wrapped in\n          INDIRECT_REFs.  INDIRECT_REFs are just internal compiler\n          representation, not part of the language, so we have to look\n@@ -4597,14 +4595,28 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n   \t  == REFERENCE_TYPE)\n         expr = TREE_OPERAND (expr, 0);\n \n-      if (TREE_CODE (expr) == CALL_EXPR\n-          && (fndecl = get_callee_fndecl (expr))\n-          && (fndecl != error_mark_node))\n-        /* If e is a function call (5.2.2 [expr.call]) or an\n+      if (TREE_CODE (expr) == CALL_EXPR)\n+        {\n+          /* If e is a function call (5.2.2 [expr.call]) or an\n            invocation of an overloaded operator (parentheses around e\n            are ignored), decltype(e) is defined as the return type of\n            that function.  */\n-        type = TREE_TYPE (TREE_TYPE (fndecl));\n+          tree fndecl = get_callee_fndecl (expr);\n+          if (fndecl && fndecl != error_mark_node)\n+            type = TREE_TYPE (TREE_TYPE (fndecl));\n+          else \n+            {\n+              tree target_type = TREE_TYPE (CALL_EXPR_FN (expr));\n+              if ((TREE_CODE (target_type) == REFERENCE_TYPE\n+                   || TREE_CODE (target_type) == POINTER_TYPE)\n+                  && (TREE_CODE (TREE_TYPE (target_type)) == FUNCTION_TYPE\n+                      || TREE_CODE (TREE_TYPE (target_type)) == METHOD_TYPE))\n+                type = TREE_TYPE (TREE_TYPE (target_type));\n+              else\n+                sorry (\"unable to determine the declared type of expression %<%E%>\",\n+                       expr);\n+            }\n+        }\n       else \n         {\n           type = is_bitfield_expr_with_lowered_type (expr);"}, {"sha": "bd034f014fdb562aec339393798a5654b826d6fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "patch": "@@ -1,3 +1,7 @@\n+2008-08-07  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* g++.dg/cpp0x/decltype12.C: New.\n+\n 2008-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/36992"}, {"sha": "77c794bcf09c925c89a7c94ee5b849f4e5552d29", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype12.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed85a1f60b8a827af17129d2e76c332ecf13d7bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype12.C?ref=ed85a1f60b8a827af17129d2e76c332ecf13d7bd", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T>\n+{\n+  static const bool value = true;\n+};\n+\n+int&& f(const int&) {}\n+int&& (*fp)(const int&) = f;\n+int&& (&fr)(const int&) = f;\n+\n+struct X { int&& f(const int&); };\n+\n+int&& (X::*mfp)(const int&) = &X::f;\n+\n+void g(X& xr, X* xp)\n+{\n+  int i;\n+  static_assert(is_same<decltype(f(i)), int&&>::value, \"direct call\");\n+  static_assert(is_same<decltype(fp(i)), int&&>::value, \"pointer\");\n+  static_assert(is_same<decltype((*fp)(i)), int&&>::value, \n+                \"dereferenced pointer\");\n+  static_assert(is_same<decltype(fr(i)), int&&>::value, \n+                \"reference\");\n+  static_assert(is_same<decltype(xr.f(i)), int&&>::value,\n+                \"member function call\");\n+  static_assert(is_same<decltype((xr.*mfp)(i)), int&&>::value, \n+                \"member function pointer with .*\");\n+  static_assert(is_same<decltype((xp->*mfp)(i)), int&&>::value, \n+                \"member function pointer with ->*\");\n+}"}]}