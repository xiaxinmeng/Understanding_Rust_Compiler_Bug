{"sha": "d50a26f2bad59ba73c52694190aac02e90423bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwYTI2ZjJiYWQ1OWJhNzNjNTI2OTQxOTBhYWMwMmU5MDQyM2JiZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-04T15:00:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-04T15:00:57Z"}, "message": "[multiple changes]\n\n2015-03-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb: Minor reformatting.\n\t* init.c: Minor tweaks.\n\n2015-03-04  Dmitriy Anisimko  <anisimko@adacore.com>\n\n\t* a-coinho-shared.adb: Fix clear of already empty holder.\n\n2015-03-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_unst.adb (Check_Dynamic_Type): Ignore library level types.\n\t(Check_Uplevel_Reference_To_Type): Ignore call inside generic.\n\t(Note_Uplevel_Reference): Ignore call inside generic.\n\t(Note_Uplevel_Reference): Fix check for no entity field.\n\t(Unnest_Subprogram): Ignore call inside generic.\n\t(Find_Current_Subprogram): Use Defining_Entity, not Defining_Unit_Name.\n\t(Visit_Node): Ignore calls to Imported subprograms.\n\t(Visit_Node): Fix problem in finding subprogram body in some cases.\n\t(Add_Form_To_Spec): Use Defining_Entity, not Defining_Unit_Name.\n\nFrom-SVN: r221188", "tree": {"sha": "c174547473c0047a3ed8c4c166c52a592f1dfa34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c174547473c0047a3ed8c4c166c52a592f1dfa34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d50a26f2bad59ba73c52694190aac02e90423bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50a26f2bad59ba73c52694190aac02e90423bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50a26f2bad59ba73c52694190aac02e90423bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50a26f2bad59ba73c52694190aac02e90423bbd/comments", "author": null, "committer": null, "parents": [{"sha": "58009744b53fa118a5caac4e20135cd5dd41f4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58009744b53fa118a5caac4e20135cd5dd41f4aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58009744b53fa118a5caac4e20135cd5dd41f4aa"}], "stats": {"total": 95, "additions": 72, "deletions": 23}, "files": [{"sha": "9dc33a7aadc41793337ba611b8a0b423e93c31ff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d50a26f2bad59ba73c52694190aac02e90423bbd", "patch": "@@ -1,3 +1,24 @@\n+2015-03-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb: Minor reformatting.\n+\t* init.c: Minor tweaks.\n+\n+2015-03-04  Dmitriy Anisimko  <anisimko@adacore.com>\n+\n+\t* a-coinho-shared.adb: Fix clear of already empty holder.\n+\n+2015-03-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_unst.adb (Check_Dynamic_Type): Ignore library level types.\n+\t(Check_Uplevel_Reference_To_Type): Ignore call inside generic.\n+\t(Note_Uplevel_Reference): Ignore call inside generic.\n+\t(Note_Uplevel_Reference): Fix check for no entity field.\n+\t(Unnest_Subprogram): Ignore call inside generic.\n+\t(Find_Current_Subprogram): Use Defining_Entity, not Defining_Unit_Name.\n+\t(Visit_Node): Ignore calls to Imported subprograms.\n+\t(Visit_Node): Fix problem in finding subprogram body in some cases.\n+\t(Add_Form_To_Spec): Use Defining_Entity, not Defining_Unit_Name.\n+\n 2015-03-04  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.adb (Is_ARECnF_Entity): Removed."}, {"sha": "9dd5b2f18ccc2df61bca198c7e7b46410a5f9a12", "filename": "gcc/ada/a-coinho-shared.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Fa-coinho-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Fa-coinho-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho-shared.adb?ref=d50a26f2bad59ba73c52694190aac02e90423bbd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2013-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2013-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,8 +129,10 @@ package body Ada.Containers.Indefinite_Holders is\n          raise Program_Error with \"attempt to tamper with elements\";\n       end if;\n \n-      Unreference (Container.Reference);\n-      Container.Reference := null;\n+      if Container.Reference /= null then\n+         Unreference (Container.Reference);\n+         Container.Reference := null;\n+      end if;\n    end Clear;\n \n    ------------------------"}, {"sha": "2034b0e03b519f60165aabee31c0444bda5bfad6", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=d50a26f2bad59ba73c52694190aac02e90423bbd", "patch": "@@ -153,12 +153,19 @@ package body Exp_Unst is\n             Set_Has_Uplevel_Reference (Typ);\n             return True;\n \n+         --  If the type is at library level, always consider it static, since\n+         --  uplevel references do not matter in this case.\n+\n+         elsif Is_Library_Level_Entity (T) then\n+            Set_Is_Static_Type (T);\n+            return False;\n+\n          --  Otherwise we need to figure out what the story is with this type\n \n          else\n             DT := False;\n \n-         --  For a scalar type, check bounds\n+            --  For a scalar type, check bounds\n \n             if Is_Scalar_Type (T) then\n \n@@ -243,9 +250,14 @@ package body Exp_Unst is\n    --  Start of processing for Check_Uplevel_Reference_To_Type\n \n    begin\n+      --  Nothing to do inside a generic (all processing is for instance)\n+\n+      if Inside_A_Generic then\n+         return;\n+\n       --  Nothing to do if we know this is a static type\n \n-      if Is_Static_Type (Typ) then\n+      elsif Is_Static_Type (Typ) then\n          return;\n \n       --  Nothing to do if already marked as uplevel referenced\n@@ -270,9 +282,15 @@ package body Exp_Unst is\n \n    procedure Note_Uplevel_Reference (N : Node_Id; Subp : Entity_Id) is\n    begin\n+      --  Nothing to do inside a generic (all processing is for instance)\n+\n+      if Inside_A_Generic then\n+         return;\n+      end if;\n+\n       --  Nothing to do if reference has no entity field\n \n-      if Nkind (N) not in N_Entity then\n+      if Nkind (N) not in N_Has_Entity then\n          return;\n       end if;\n \n@@ -382,6 +400,11 @@ package body Exp_Unst is\n    --  Start of processing for Unnest_Subprogram\n \n    begin\n+      --  Nothing to do inside a generic (all processing is for instance)\n+\n+      if Inside_A_Generic then\n+         return;\n+      end if;\n       --  At least for now, do not unnest anything but main source unit\n \n       if not In_Extended_Main_Source_Unit (Subp_Body) then\n@@ -434,7 +457,7 @@ package body Exp_Unst is\n \n                   if Nkind (Nod) = N_Subprogram_Body then\n                      if Acts_As_Spec (Nod) then\n-                        return Defining_Unit_Name (Specification (Nod));\n+                        return Defining_Entity (Specification (Nod));\n                      else\n                         return Corresponding_Spec (Nod);\n                      end if;\n@@ -470,6 +493,11 @@ package body Exp_Unst is\n                   then\n                      null;\n \n+                  --  Ignore calls to imported routines\n+\n+                  elsif Is_Imported (Ent) then\n+                     null;\n+\n                   --  Here we have a call to keep and analyze\n \n                   else\n@@ -501,14 +529,14 @@ package body Exp_Unst is\n                begin\n                   --  Set fields of Subp_Entry for new subprogram\n \n-                  STJ.Ent := Defining_Unit_Name (Specification (N));\n+                  STJ.Ent := Defining_Entity (Specification (N));\n                   STJ.Lev := Get_Level (STJ.Ent);\n \n                   if Nkind (N) = N_Subprogram_Body then\n                      STJ.Bod := N;\n                   else\n-                     STJ.Bod := Parent (Parent (Corresponding_Body (N)));\n-\n+                     STJ.Bod :=\n+                       Parent (Declaration_Node (Corresponding_Body (N)));\n                      pragma Assert (Nkind (STJ.Bod) = N_Subprogram_Body);\n                   end if;\n \n@@ -697,7 +725,7 @@ package body Exp_Unst is\n                      ----------------------\n \n                      procedure Add_Form_To_Spec (F : Entity_Id; S : Node_Id) is\n-                        Sub : constant Entity_Id := Defining_Unit_Name (S);\n+                        Sub : constant Entity_Id := Defining_Entity (S);\n                         Ent : Entity_Id;\n \n                      begin"}, {"sha": "7b8b870580c0d15e738cb94d3b84a0a66aa31cf5", "filename": "gcc/ada/init.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=d50a26f2bad59ba73c52694190aac02e90423bbd", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2015, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -38,9 +38,9 @@\n     installed by this file are used to catch the resulting signals that come\n     from these probes failing (i.e. touching protected pages).  */\n \n-/* This file should be kept synchronized with 2sinit.ads, 2sinit.adb,\n-   s-init-ae653-cert.adb and s-init-xi-sparc.adb.  All these files implement\n-   the required functionality for different targets.  */\n+/* This file should be kept synchronized with s-init.ads, s-init.adb and the\n+   s-init-*.adb variants. All these files implement the required functionality\n+   for different targets.  */\n \n /* The following include is here to meet the published VxWorks requirement\n    that the __vxworks header appear before any other include.  */\n@@ -674,7 +674,7 @@ __gnat_error_handler (int sig)\n       msg = \"unhandled signal\";\n     }\n \n-    Raise_From_Signal_Handler(exception, msg);\n+    Raise_From_Signal_Handler (exception, msg);\n }\n \n void\n@@ -1912,8 +1912,8 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   sigprocmask (SIG_SETMASK, &mask, NULL);\n \n #if defined (__ARMEL__) || defined (__PPC__)\n-  /* On PowerPC, kernel mode, we process signals through a Call Frame Info\n-     trampoline, voiding the need for myriads of fallback_frame_state\n+  /* On ARM and PowerPC, kernel mode, we process signals through a Call Frame\n+     Info trampoline, voiding the need for myriads of fallback_frame_state\n      variants in the ZCX runtime.  We have no simple way to distinguish ZCX\n      from SJLJ here, so we do this for SJLJ as well even though this is not\n      necessary.  This only incurs a few extra instructions and a tiny\n@@ -2100,7 +2100,7 @@ __gnat_error_handler (int sig)\n       msg = \"unhandled signal\";\n     }\n \n-    Raise_From_Signal_Handler(exception, msg);\n+    Raise_From_Signal_Handler (exception, msg);\n }\n \n void\n@@ -2163,7 +2163,7 @@ __gnat_error_handler (int sig)\n       msg = \"unhandled signal\";\n     }\n \n-    Raise_From_Signal_Handler(exception, msg);\n+    Raise_From_Signal_Handler (exception, msg);\n }\n \n void"}, {"sha": "518c9191e3779379f30468678b3fad8d4985c78f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a26f2bad59ba73c52694190aac02e90423bbd/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=d50a26f2bad59ba73c52694190aac02e90423bbd", "patch": "@@ -3109,9 +3109,7 @@ package body Sem_Warn is\n \n    procedure Output_Unreferenced_Messages is\n    begin\n-      for J in Unreferenced_Entities.First ..\n-               Unreferenced_Entities.Last\n-      loop\n+      for J in Unreferenced_Entities.First .. Unreferenced_Entities.Last loop\n          Warn_On_Unreferenced_Entity (Unreferenced_Entities.Table (J));\n       end loop;\n    end Output_Unreferenced_Messages;"}]}