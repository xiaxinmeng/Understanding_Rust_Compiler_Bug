{"sha": "b41caf7c04d68a4c063607b40b0fafce9e06f009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxY2FmN2MwNGQ2OGE0YzA2MzYwN2I0MGIwZmFmY2U5ZTA2ZjAwOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2002-07-22T17:41:27Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-07-22T17:41:27Z"}, "message": "arm.md (movqi): If optimizing and we can create pseudos...\n\n* arm.md (movqi): If optimizing and we can create pseudos, use\na ZERO_EXTEND to load from memory, then copy the result into the\ntarget.\n(movhi): Likewise, but only for ARMv4.\n\nFrom-SVN: r55655", "tree": {"sha": "2aefa72d7cbbdc535bac1b7a509056a082f6e665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aefa72d7cbbdc535bac1b7a509056a082f6e665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41caf7c04d68a4c063607b40b0fafce9e06f009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41caf7c04d68a4c063607b40b0fafce9e06f009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41caf7c04d68a4c063607b40b0fafce9e06f009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41caf7c04d68a4c063607b40b0fafce9e06f009/comments", "author": null, "committer": null, "parents": [{"sha": "492e99345fa6d4649d6f583243ed02e972f66c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492e99345fa6d4649d6f583243ed02e972f66c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492e99345fa6d4649d6f583243ed02e972f66c61"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "5dc440709aebcb9b7315c2696a0855836c2e8d55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41caf7c04d68a4c063607b40b0fafce9e06f009/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41caf7c04d68a4c063607b40b0fafce9e06f009/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b41caf7c04d68a4c063607b40b0fafce9e06f009", "patch": "@@ -1,3 +1,10 @@\n+2002-07-22  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (movqi): If optimizing and we can create pseudos, use\n+\ta ZERO_EXTEND to load from memory, then copy the result into the\n+\ttarget.\n+\t(movhi): Likewise, but only for ARMv4.\n+\n 2002-07-22  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* ssa-ccp.c (PHI_PARMS): Remove."}, {"sha": "8bd129cf0e5e0009c06e439b5fae6752bf906923", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41caf7c04d68a4c063607b40b0fafce9e06f009/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41caf7c04d68a4c063607b40b0fafce9e06f009/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b41caf7c04d68a4c063607b40b0fafce9e06f009", "patch": "@@ -4417,6 +4417,14 @@\n \t      emit_insn (gen_movsi (reg, GEN_INT (val)));\n \t      operands[1] = gen_lowpart (HImode, reg);\n \t    }\n+\t  else if (arm_arch4 && !no_new_pseudos && optimize > 0\n+\t\t   && GET_CODE (operands[1]) == MEM)\n+\t    {\n+\t      rtx reg = gen_reg_rtx (SImode);\n+\n+\t      emit_insn (gen_zero_extendhisi2 (reg, operands[1]));\n+\t      operands[1] = gen_lowpart (HImode, reg);\n+\t    }\n           else if (!arm_arch4)\n \t    {\n \t     /* Note: We do not have to worry about TARGET_MMU_TRAPS\n@@ -4814,9 +4822,16 @@\n \t      emit_insn (gen_movsi (reg, operands[1]));\n \t      operands[1] = gen_lowpart (QImode, reg);\n \t    }\n-         if (GET_CODE (operands[0]) == MEM)\n-\t   operands[1] = force_reg (QImode, operands[1]);\n-       }\n+\t  if (GET_CODE (operands[1]) == MEM && optimize > 0)\n+\t    {\n+\t      rtx reg = gen_reg_rtx (SImode);\n+\n+\t      emit_insn (gen_zero_extendqisi2 (reg, operands[1]));\n+\t      operands[1] = gen_lowpart (QImode, reg);\n+\t    }\n+          if (GET_CODE (operands[0]) == MEM)\n+\t    operands[1] = force_reg (QImode, operands[1]);\n+        }\n     }\n   else /* TARGET_THUMB */\n     {"}]}