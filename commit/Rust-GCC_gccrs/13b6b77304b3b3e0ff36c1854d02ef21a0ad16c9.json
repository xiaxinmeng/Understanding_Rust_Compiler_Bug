{"sha": "13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiNmI3NzMwNGIzYjNlMGZmMzZjMTg1NGQwMmVmMjFhMGFkMTZjOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-05-15T08:43:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-05-15T08:43:25Z"}, "message": "trans.c (return_value_ok_for_nrv_p): Only apply the addressability check in the constrained case.\n\n\t* gcc-interface/trans.c (return_value_ok_for_nrv_p): Only apply the\n\taddressability check in the constrained case.\n\nFrom-SVN: r248053", "tree": {"sha": "e1fc0da7d351dcdf375d067c1420cbd227793058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1fc0da7d351dcdf375d067c1420cbd227793058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9/comments", "author": null, "committer": null, "parents": [{"sha": "3946f0003c6707fbd4a19533d4e12713f229f349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3946f0003c6707fbd4a19533d4e12713f229f349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3946f0003c6707fbd4a19533d4e12713f229f349"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "78a3bb1c71bec268aa78e15057082dea92bc56ff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9", "patch": "@@ -1,3 +1,8 @@\n+2017-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (return_value_ok_for_nrv_p): Only apply the\n+\taddressability check in the constrained case.\n+\n 2017-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Identifier_to_gnu): Also accept incomplete"}, {"sha": "abdef0375459b04c3d1b9fe470f87ec0d1b0ce4d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=13b6b77304b3b3e0ff36c1854d02ef21a0ad16c9", "patch": "@@ -3238,8 +3238,9 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n      RETURN_EXPR [<retval> = Ri]\n        [...]\n \n-   and we try to fulfill a simple criterion that would make it possible to\n-   replace one or several Ri variables with the RESULT_DECL of the function.\n+   where the Ri are not addressable and we try to fulfill a simple criterion\n+   that would make it possible to replace one or several Ri variables by the\n+   single RESULT_DECL of the function.\n \n    The first observation is that RETURN_EXPRs that don't directly reference\n    any of the Ri variables on the RHS of their assignment are transparent wrt\n@@ -3271,8 +3272,8 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n    because the anonymous return object is allocated on the secondary stack\n    and RESULT_DECL is only a pointer to it.  Each return object can be of a\n    different size and is allocated separately so we need not care about the\n-   aforementioned overlapping issues.  Therefore, we don't collect the other\n-   expressions and skip step #2 in the algorithm.  */\n+   addressability and the aforementioned overlapping issues.  Therefore, we\n+   don't collect the other expressions and skip step #2 in the algorithm.  */\n \n struct nrv_data\n {\n@@ -3612,7 +3613,8 @@ return_value_ok_for_nrv_p (tree ret_obj, tree ret_val)\n   if (TREE_STATIC (ret_val))\n     return false;\n \n-  if (TREE_ADDRESSABLE (ret_val))\n+  /* For the constrained case, test for addressability.  */\n+  if (ret_obj && TREE_ADDRESSABLE (ret_val))\n     return false;\n \n   /* For the constrained case, test for overalignment.  */"}]}