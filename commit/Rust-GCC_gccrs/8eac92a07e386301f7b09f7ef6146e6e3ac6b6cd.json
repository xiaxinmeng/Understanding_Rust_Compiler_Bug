{"sha": "8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhYzkyYTA3ZTM4NjMwMWY3YjA5ZjdlZjYxNDZlNmUzYWM2YjZjZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-17T09:48:59Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-17T09:48:59Z"}, "message": "docs: Use -O1 as a canonical value for -O option\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Use consistently -O1 instead of -O.", "tree": {"sha": "48c94613587872fe16f4f019f79d74f41c99e80a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48c94613587872fe16f4f019f79d74f41c99e80a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0954059dba9b369439bcb77643655e42f9a181e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0954059dba9b369439bcb77643655e42f9a181e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0954059dba9b369439bcb77643655e42f9a181e"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "af2ce189faec33b350e4fb3ff85b90ef0be76735", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "patch": "@@ -9944,7 +9944,7 @@ This option causes GCC to create markers in the internal representation\n at the beginning of statements, and to keep them roughly in place\n throughout compilation, using them to guide the output of @code{is_stmt}\n markers in the line number table.  This is enabled by default when\n-compiling with optimization (@option{-Os}, @option{-O}, @option{-O2},\n+compiling with optimization (@option{-Os}, @option{-O1}, @option{-O2},\n @dots{}), and outputting DWARF 2 debug information at the normal level.\n \n @item -gvariable-location-views\n@@ -10223,7 +10223,7 @@ that do not involve a space-speed tradeoff.\n As compared to @option{-O}, this option increases both compilation time\n and the performance of the generated code.\n \n-@option{-O2} turns on all optimization flags specified by @option{-O}.  It\n+@option{-O2} turns on all optimization flags specified by @option{-O1}.  It\n also turns on the following optimization flags:\n \n @c Please keep the following list alphabetized!\n@@ -10370,7 +10370,7 @@ instructions and checks if the result can be simplified.  If loop unrolling\n is active, two passes are performed and the second is scheduled after\n loop unrolling.\n \n-This option is enabled by default at optimization levels @option{-O},\n+This option is enabled by default at optimization levels @option{-O1},\n @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -ffp-contract=@var{style}\n@@ -10398,7 +10398,7 @@ Note that @option{-fno-omit-frame-pointer} doesn't guarantee the frame pointer\n is used in all functions.  Several targets always omit the frame pointer in\n leaf functions.\n \n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -foptimize-sibling-calls\n @opindex foptimize-sibling-calls\n@@ -10552,7 +10552,7 @@ This option is the default for optimized compilation if the assembler and\n linker support it.  Use @option{-fno-merge-constants} to inhibit this\n behavior.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fmerge-all-constants\n @opindex fmerge-all-constants\n@@ -10638,7 +10638,7 @@ long} on a 32-bit system, split the registers apart and allocate them\n independently.  This normally generates better code for those types,\n but may make debugging more difficult.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3},\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3},\n @option{-Os}.\n \n @item -fsplit-wide-types-early\n@@ -10750,18 +10750,18 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n @opindex fauto-inc-dec\n Combine increments or decrements of addresses with memory accesses.\n This pass is always skipped on architectures that do not have\n-instructions to support this.  Enabled by default at @option{-O} and\n+instructions to support this.  Enabled by default at @option{-O1} and\n higher on architectures that support this.\n \n @item -fdce\n @opindex fdce\n Perform dead code elimination (DCE) on RTL@.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fdse\n @opindex fdse\n Perform dead store elimination (DSE) on RTL@.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fif-conversion\n @opindex fif-conversion\n@@ -10770,15 +10770,15 @@ includes use of conditional moves, min, max, set flags and abs instructions, and\n some tricks doable by standard arithmetics.  The use of conditional execution\n on chips where it is available is controlled by @option{-fif-conversion2}.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}, but\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}, but\n not with @option{-Og}.\n \n @item -fif-conversion2\n @opindex fif-conversion2\n Use conditional execution (where available) to transform conditional jumps into\n branch-less equivalents.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}, but\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}, but\n not with @option{-Og}.\n \n @item -fdeclone-ctor-dtor\n@@ -10958,7 +10958,7 @@ If supported for the target machine, attempt to reorder instructions\n to exploit instruction slots available after delayed branch\n instructions.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os},\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os},\n but not at @option{-Og}.\n \n @item -fschedule-insns\n@@ -11196,7 +11196,7 @@ and the @option{large-stack-frame-growth} parameter to 400.\n @item -ftree-reassoc\n @opindex ftree-reassoc\n Perform reassociation on trees.  This flag is enabled by default\n-at @option{-O} and higher.\n+at @option{-O1} and higher.\n \n @item -fcode-hoisting\n @opindex fcode-hoisting\n@@ -11219,20 +11219,20 @@ enabled by default at @option{-O3}.\n @item -ftree-forwprop\n @opindex ftree-forwprop\n Perform forward propagation on trees.  This flag is enabled by default\n-at @option{-O} and higher.\n+at @option{-O1} and higher.\n \n @item -ftree-fre\n @opindex ftree-fre\n Perform full redundancy elimination (FRE) on trees.  The difference\n between FRE and PRE is that FRE only considers expressions\n that are computed on all paths leading to the redundant computation.\n This analysis is faster than PRE, though it exposes fewer redundancies.\n-This flag is enabled by default at @option{-O} and higher.\n+This flag is enabled by default at @option{-O1} and higher.\n \n @item -ftree-phiprop\n @opindex ftree-phiprop\n Perform hoisting of loads from conditional pointers on trees.  This\n-pass is enabled by default at @option{-O} and higher.\n+pass is enabled by default at @option{-O1} and higher.\n \n @item -fhoist-adjacent-loads\n @opindex fhoist-adjacent-loads\n@@ -11244,24 +11244,24 @@ by default at @option{-O2} and higher.\n @item -ftree-copy-prop\n @opindex ftree-copy-prop\n Perform copy propagation on trees.  This pass eliminates unnecessary\n-copy operations.  This flag is enabled by default at @option{-O} and\n+copy operations.  This flag is enabled by default at @option{-O1} and\n higher.\n \n @item -fipa-pure-const\n @opindex fipa-pure-const\n Discover which functions are pure or constant.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fipa-reference\n @opindex fipa-reference\n Discover which static variables do not escape the\n compilation unit.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fipa-reference-addressable\n @opindex fipa-reference-addressable\n Discover read-only, write-only and non-addressable static variables.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fipa-stack-alignment\n @opindex fipa-stack-alignment\n@@ -11282,14 +11282,14 @@ cold functions are marked as cold. Also functions executed once (such as\n @code{cold}, @code{noreturn}, static constructors or destructors) are\n identified. Cold functions and loop less parts of functions executed once are\n then optimized for size.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fipa-modref\n @opindex fipa-modref\n Perform interprocedural mod/ref analysis.  This optimization analyzes the side\n effects of functions (memory locations that are modified or referenced) and\n enables better optimization across the function call boundary.  This flag is\n-enabled by default at @option{-O} and higher.\n+enabled by default at @option{-O1} and higher.\n \n @item -fipa-cp\n @opindex fipa-cp\n@@ -11417,7 +11417,7 @@ currently enabled, but may be enabled by @option{-O2} in the future.\n @item -ftree-sink\n @opindex ftree-sink\n Perform forward store motion on trees.  This flag is\n-enabled by default at @option{-O} and higher.\n+enabled by default at @option{-O1} and higher.\n \n @item -ftree-bit-ccp\n @opindex ftree-bit-ccp\n@@ -11431,14 +11431,14 @@ It requires that @option{-ftree-ccp} is enabled.\n @opindex ftree-ccp\n Perform sparse conditional constant propagation (CCP) on trees.  This\n pass only operates on local scalar variables and is enabled by default\n-at @option{-O} and higher.\n+at @option{-O1} and higher.\n \n @item -fssa-backprop\n @opindex fssa-backprop\n Propagate information about uses of a value up the definition chain\n in order to simplify the definitions.  For example, this pass strips\n sign operations if the sign of a value never matters.  The flag is\n-enabled by default at @option{-O} and higher.\n+enabled by default at @option{-O1} and higher.\n \n @item -fssa-phiopt\n @opindex fssa-phiopt\n@@ -11464,7 +11464,7 @@ be limited using @option{max-tail-merge-comparisons} parameter and\n @item -ftree-dce\n @opindex ftree-dce\n Perform dead code elimination (DCE) on trees.  This flag is enabled by\n-default at @option{-O} and higher.\n+default at @option{-O1} and higher.\n \n @item -ftree-builtin-call-dce\n @opindex ftree-builtin-call-dce\n@@ -11489,26 +11489,26 @@ Perform a variety of simple scalar cleanups (constant/copy\n propagation, redundancy elimination, range propagation and expression\n simplification) based on a dominator tree traversal.  This also\n performs jump threading (to reduce jumps to jumps). This flag is\n-enabled by default at @option{-O} and higher.\n+enabled by default at @option{-O1} and higher.\n \n @item -ftree-dse\n @opindex ftree-dse\n Perform dead store elimination (DSE) on trees.  A dead store is a store into\n a memory location that is later overwritten by another store without\n any intervening loads.  In this case the earlier store can be deleted.  This\n-flag is enabled by default at @option{-O} and higher.\n+flag is enabled by default at @option{-O1} and higher.\n \n @item -ftree-ch\n @opindex ftree-ch\n Perform loop header copying on trees.  This is beneficial since it increases\n effectiveness of code motion optimizations.  It also saves one jump.  This flag\n-is enabled by default at @option{-O} and higher.  It is not enabled\n+is enabled by default at @option{-O1} and higher.  It is not enabled\n for @option{-Os}, since it usually increases code size.\n \n @item -ftree-loop-optimize\n @opindex ftree-loop-optimize\n Perform loop optimizations on trees.  This flag is enabled by default\n-at @option{-O} and higher.\n+at @option{-O1} and higher.\n \n @item -ftree-loop-linear\n @itemx -floop-strip-mine\n@@ -11663,7 +11663,7 @@ in such a way that its value when exiting the loop can be determined using\n only its initial value and the number of loop iterations, replace uses of\n the final value by such a computation, provided it is sufficiently cheap.\n This reduces data dependencies and may allow further simplifications.\n-Enabled by default at @option{-O} and higher.\n+Enabled by default at @option{-O1} and higher.\n \n @item -fivopts\n @opindex fivopts\n@@ -11705,13 +11705,13 @@ Perform temporary expression replacement during the SSA->normal phase.  Single\n use/single def temporaries are replaced at their use location with their\n defining expression.  This results in non-GIMPLE code, but gives the expanders\n much more complex trees to work on resulting in better RTL generation.  This is\n-enabled by default at @option{-O} and higher.\n+enabled by default at @option{-O1} and higher.\n \n @item -ftree-slsr\n @opindex ftree-slsr\n Perform straight-line strength reduction on trees.  This recognizes related\n expressions involving multiplications and replaces them by less expensive\n-calculations when possible.  This is enabled by default at @option{-O} and\n+calculations when possible.  This is enabled by default at @option{-O1} and\n higher.\n \n @item -ftree-vectorize\n@@ -11892,7 +11892,7 @@ The default is @option{-fguess-branch-probability} at levels\n Reorder basic blocks in the compiled function in order to reduce number of\n taken branches and improve code locality.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -freorder-blocks-algorithm=@var{algorithm}\n @opindex freorder-blocks-algorithm\n@@ -11903,7 +11903,7 @@ or @samp{stc}, the ``software trace cache'' algorithm, which tries to\n put all often executed code together, minimizing the number of branches\n executed by making extra copies of code.\n \n-The default is @samp{simple} at levels @option{-O}, @option{-Os}, and\n+The default is @samp{simple} at levels @option{-O1}, @option{-Os}, and\n @samp{stc} at levels @option{-O2}, @option{-O3}.\n \n @item -freorder-blocks-and-partition\n@@ -12473,15 +12473,15 @@ explicit comparison operation.\n This pass only applies to certain targets that cannot explicitly represent\n the comparison operation before register allocation is complete.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fcprop-registers\n @opindex fcprop-registers\n After register allocation and post-register allocation instruction splitting,\n perform a copy-propagation pass to try to reduce scheduling dependencies\n and occasionally eliminate the copy.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fprofile-correction\n @opindex fprofile-correction"}]}