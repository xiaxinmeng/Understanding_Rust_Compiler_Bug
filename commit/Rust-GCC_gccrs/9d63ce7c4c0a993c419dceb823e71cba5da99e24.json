{"sha": "9d63ce7c4c0a993c419dceb823e71cba5da99e24", "node_id": "C_kwDOANBUbNoAKDlkNjNjZTdjNGMwYTk5M2M0MTlkY2ViODIzZTcxY2JhNWRhOTllMjQ", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2023-03-08T11:04:11Z"}, "committer": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2023-04-05T16:45:14Z"}, "message": "libstdc++: Harmonize <version> and other headers\n\nDue to recent, large changes in libstdc++, the feature test macros\ndeclared in <version> got out of sync with the other headers that\npossibly declare them.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/unique_ptr.h (__cpp_lib_constexpr_memory):\n\tSynchronize the definition block with...\n\t* include/bits/ptr_traits.h (__cpp_lib_constexpr_memory):\n\t... this one here.  Also define the 202202L value, rather than\n\tleaving it up to purely unique_ptr.h, so that the value is\n\tsynchronized across all headers.\n\t(__gnu_debug::_Safe_iterator_base): Move into new conditional\n\tblock.\n\t* include/std/memory (__cpp_lib_atomic_value_initialization):\n\tDefine on freestanding under the same conditions as in\n\tatomic_base.h.\n\t* include/std/version (__cpp_lib_robust_nonmodifying_seq_ops):\n\tAlso define on freestanding.\n\t(__cpp_lib_to_chars): Ditto.\n\t(__cpp_lib_gcd): Ditto.\n\t(__cpp_lib_gcd_lcm): Ditto.\n\t(__cpp_lib_raw_memory_algorithms): Ditto.\n\t(__cpp_lib_array_constexpr): Ditto.\n\t(__cpp_lib_nonmember_container_access): Ditto.\n\t(__cpp_lib_clamp): Ditto.\n\t(__cpp_lib_constexpr_char_traits): Ditto.\n\t(__cpp_lib_constexpr_string): Ditto.\n\t(__cpp_lib_sample): Ditto.\n\t(__cpp_lib_lcm): Ditto.\n\t(__cpp_lib_constexpr_iterator): Ditto.\n\t(__cpp_lib_constexpr_char_traits): Ditto.\n\t(__cpp_lib_interpolate): Ditto.\n\t(__cpp_lib_constexpr_utility): Ditto.\n\t(__cpp_lib_shift): Ditto.\n\t(__cpp_lib_ranges): Ditto.\n\t(__cpp_lib_move_iterator_concept): Ditto.\n\t(__cpp_lib_constexpr_numeric): Ditto.\n\t(__cpp_lib_constexpr_functional): Ditto.\n\t(__cpp_lib_constexpr_algorithms): Ditto.\n\t(__cpp_lib_constexpr_tuple): Ditto.\n\t(__cpp_lib_constexpr_memory): Ditto.", "tree": {"sha": "b212ec8cd357e4fcb28d57c6fc24352c749f6b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b212ec8cd357e4fcb28d57c6fc24352c749f6b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d63ce7c4c0a993c419dceb823e71cba5da99e24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niNUEABYKAH0WIQT+4rPRE/wAoxYtYGFSwpQwHqLEkwUCZC2lml8UgAAAAAAuAChp\nc3N1ZXItZnByQG5vdGF0aW9ucy5vcGVucGdwLmZpZnRoaG9yc2VtYW4ubmV0RkVF\nMkIzRDExM0ZDMDBBMzE2MkQ2MDYxNTJDMjk0MzAxRUEyQzQ5MwAKCRBSwpQwHqLE\nk9TaAP9/A/Wd23Y/r8/eY8ktF45MPnBbkRVo6GS3HasRQAbsMQEAlG/XiLBjsxIs\nud3STiSkl9+1r2wHCQX+BqdzZEfqPgE=\n=h1Qr\n-----END PGP SIGNATURE-----", "payload": "tree b212ec8cd357e4fcb28d57c6fc24352c749f6b69\nparent 85cefbc66e7a4a179324585215ddbfe56fad9473\nauthor Arsen Arsenovi\u0107 <arsen@aarsen.me> 1678273451 +0100\ncommitter Arsen Arsenovi\u0107 <arsen@aarsen.me> 1680713114 +0200\n\nlibstdc++: Harmonize <version> and other headers\n\nDue to recent, large changes in libstdc++, the feature test macros\ndeclared in <version> got out of sync with the other headers that\npossibly declare them.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/unique_ptr.h (__cpp_lib_constexpr_memory):\n\tSynchronize the definition block with...\n\t* include/bits/ptr_traits.h (__cpp_lib_constexpr_memory):\n\t... this one here.  Also define the 202202L value, rather than\n\tleaving it up to purely unique_ptr.h, so that the value is\n\tsynchronized across all headers.\n\t(__gnu_debug::_Safe_iterator_base): Move into new conditional\n\tblock.\n\t* include/std/memory (__cpp_lib_atomic_value_initialization):\n\tDefine on freestanding under the same conditions as in\n\tatomic_base.h.\n\t* include/std/version (__cpp_lib_robust_nonmodifying_seq_ops):\n\tAlso define on freestanding.\n\t(__cpp_lib_to_chars): Ditto.\n\t(__cpp_lib_gcd): Ditto.\n\t(__cpp_lib_gcd_lcm): Ditto.\n\t(__cpp_lib_raw_memory_algorithms): Ditto.\n\t(__cpp_lib_array_constexpr): Ditto.\n\t(__cpp_lib_nonmember_container_access): Ditto.\n\t(__cpp_lib_clamp): Ditto.\n\t(__cpp_lib_constexpr_char_traits): Ditto.\n\t(__cpp_lib_constexpr_string): Ditto.\n\t(__cpp_lib_sample): Ditto.\n\t(__cpp_lib_lcm): Ditto.\n\t(__cpp_lib_constexpr_iterator): Ditto.\n\t(__cpp_lib_constexpr_char_traits): Ditto.\n\t(__cpp_lib_interpolate): Ditto.\n\t(__cpp_lib_constexpr_utility): Ditto.\n\t(__cpp_lib_shift): Ditto.\n\t(__cpp_lib_ranges): Ditto.\n\t(__cpp_lib_move_iterator_concept): Ditto.\n\t(__cpp_lib_constexpr_numeric): Ditto.\n\t(__cpp_lib_constexpr_functional): Ditto.\n\t(__cpp_lib_constexpr_algorithms): Ditto.\n\t(__cpp_lib_constexpr_tuple): Ditto.\n\t(__cpp_lib_constexpr_memory): Ditto.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d63ce7c4c0a993c419dceb823e71cba5da99e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d63ce7c4c0a993c419dceb823e71cba5da99e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d63ce7c4c0a993c419dceb823e71cba5da99e24/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85cefbc66e7a4a179324585215ddbfe56fad9473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85cefbc66e7a4a179324585215ddbfe56fad9473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85cefbc66e7a4a179324585215ddbfe56fad9473"}], "stats": {"total": 113, "additions": 65, "deletions": 48}, "files": [{"sha": "8a919ec1090908462494714afcbd145b33e2a718", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=9d63ce7c4c0a993c419dceb823e71cba5da99e24", "patch": "@@ -34,12 +34,15 @@\n \n #include <bits/move.h>\n \n+/* Duplicate definition with unique_ptr.h.  */\n+#if __cplusplus > 202002L && defined(__cpp_constexpr_dynamic_alloc)\n+# define __cpp_lib_constexpr_memory 202202L\n+#elif __cplusplus > 201703L\n+# define __cpp_lib_constexpr_memory 201811L\n+#endif\n+\n #if __cplusplus > 201703L\n #include <concepts>\n-# ifndef __cpp_lib_constexpr_memory\n-// Defined to a newer value in bits/unique_ptr.h for C++23\n-#  define __cpp_lib_constexpr_memory 201811L\n-# endif\n namespace __gnu_debug { struct _Safe_iterator_base; }\n #endif\n "}, {"sha": "f0c6d2383b478da6270e3611e7b2f6c346b44048", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=9d63ce7c4c0a993c419dceb823e71cba5da99e24", "patch": "@@ -43,12 +43,11 @@\n # endif\n #endif\n \n-#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc\n-# if __cpp_lib_constexpr_memory < 202202L\n-// Defined with older value in bits/ptr_traits.h for C++20\n-#  undef __cpp_lib_constexpr_memory\n-#  define __cpp_lib_constexpr_memory 202202L\n-# endif\n+/* Duplicate definition with ptr_traits.h.  */\n+#if __cplusplus > 202002L && defined(__cpp_constexpr_dynamic_alloc)\n+# define __cpp_lib_constexpr_memory 202202L\n+#elif __cplusplus > 201703L\n+# define __cpp_lib_constexpr_memory 201811L\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "85c36d67ee1de7fa18a04d4922d60375bdc64284", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=9d63ce7c4c0a993c419dceb823e71cba5da99e24", "patch": "@@ -91,6 +91,12 @@\n #  include <bits/uses_allocator_args.h>\n #endif\n \n+/* As a hack, we declare __cpp_lib_atomic_value_initialization here even though\n+   we don't include the bit that actually declares it, for consistency.  */\n+#if !defined(__cpp_lib_atomic_value_initialization) && __cplusplus >= 202002L\n+# define __cpp_lib_atomic_value_initialization 201911L\n+#endif\n+\n #if __cplusplus >= 201103L && __cplusplus <= 202002L && _GLIBCXX_HOSTED\n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "cdd24248c57cdf2cb8ea3b2ea6ede5ffb280e51a", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d63ce7c4c0a993c419dceb823e71cba5da99e24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=9d63ce7c4c0a993c419dceb823e71cba5da99e24", "patch": "@@ -81,18 +81,23 @@\n #ifndef _GLIBCXX_DEBUG // PR libstdc++/70303\n # define __cpp_lib_null_iterators 201304L\n #endif\n+#define __cpp_lib_robust_nonmodifying_seq_ops 201304L\n #define __cpp_lib_transformation_trait_aliases 201304L\n #define __cpp_lib_transparent_operators 201510L\n #define __cpp_lib_tuple_element_t 201402L\n #define __cpp_lib_tuples_by_type 201304L\n \n+#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 \\\n+    && __SIZE_WIDTH__ >= 32\n+# define __cpp_lib_to_chars 201611L\n+#endif\n+\n #if _GLIBCXX_HOSTED\n # define __cpp_lib_chrono_udls 201304L\n # define __cpp_lib_complex_udls 201309L\n # define __cpp_lib_generic_associative_lookup 201304L\n # define __cpp_lib_make_unique 201304L\n # define __cpp_lib_quoted_string_io 201304L\n-# define __cpp_lib_robust_nonmodifying_seq_ops 201304L\n # ifdef _GLIBCXX_HAS_GTHREADS\n #  define __cpp_lib_shared_timed_mutex 201402L\n # endif\n@@ -108,6 +113,9 @@\n #define __cpp_lib_atomic_is_always_lock_free 201603L\n #define __cpp_lib_bool_constant 201505L\n #define __cpp_lib_byte 201603L\n+#define __cpp_lib_clamp 201603L\n+#define __cpp_lib_gcd 201606L\n+#define __cpp_lib_gcd_lcm 201606L\n #ifdef _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP\n # define __cpp_lib_has_unique_object_representations 201606L\n #endif\n@@ -123,40 +131,40 @@\n #ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER\n # define __cpp_lib_launder 201606L\n #endif\n+#define __cpp_lib_lcm 201606L\n #define __cpp_lib_logical_traits 201510L\n #define __cpp_lib_make_from_tuple 201606L\n+#define __cpp_lib_nonmember_container_access 201411L\n #define __cpp_lib_not_fn 201603L\n #if __cplusplus == 201703L // N.B. updated value in C++20\n # define __cpp_lib_optional 201606L\n #endif\n+#define __cpp_lib_raw_memory_algorithms 201606L\n+#define __cpp_lib_sample 201603L\n #define __cpp_lib_type_trait_variable_templates 201510L\n #define __cpp_lib_uncaught_exceptions 201411L\n #if !(__cpp_concepts >= 202002L && __cpp_constexpr >= 201811L)\n // N.B. updated value in C++20\n # define __cpp_lib_variant 202102L\n #endif\n #define __cpp_lib_void_t 201411L\n-\n-#if _GLIBCXX_HOSTED\n #if __cplusplus == 201703L // N.B. updated value in C++20\n # define __cpp_lib_array_constexpr 201803L\n #endif\n-#define __cpp_lib_boyer_moore_searcher 201603L\n-#define __cpp_lib_chrono 201611L\n-#define __cpp_lib_clamp 201603L\n #if __cplusplus == 201703L // N.B. updated value in C++20\n # if _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n #  define __cpp_lib_constexpr_char_traits 201611L\n #  define __cpp_lib_constexpr_string 201611L\n # endif\n #endif\n+\n+#if _GLIBCXX_HOSTED\n+#define __cpp_lib_boyer_moore_searcher 201603L\n+#define __cpp_lib_chrono 201611L\n #define __cpp_lib_enable_shared_from_this 201603L\n #define __cpp_lib_execution 201902L // FIXME: should be 201603L\n #define __cpp_lib_filesystem 201703L\n-#define __cpp_lib_gcd 201606L\n-#define __cpp_lib_gcd_lcm 201606L\n #define __cpp_lib_hypot 201603L\n-#define __cpp_lib_lcm 201606L\n #define __cpp_lib_map_try_emplace 201411L\n #define __cpp_lib_math_special_functions 201603L\n #ifdef _GLIBCXX_HAS_GTHREADS\n@@ -165,20 +173,13 @@\n # define __cpp_lib_memory_resource 1\n #endif\n #define __cpp_lib_node_extract 201606L\n-#define __cpp_lib_nonmember_container_access 201411L\n #define __cpp_lib_parallel_algorithm 201603L\n-#define __cpp_lib_raw_memory_algorithms 201606L\n-#define __cpp_lib_sample 201603L\n #ifdef _GLIBCXX_HAS_GTHREADS\n # define __cpp_lib_scoped_lock 201703L\n # define __cpp_lib_shared_mutex 201505L\n #endif\n #define __cpp_lib_shared_ptr_weak_type 201606L\n #define __cpp_lib_string_view 201803L\n-#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 \\\n-    && __SIZE_WIDTH__ >= 32\n-# define __cpp_lib_to_chars 201611L\n-#endif\n #define __cpp_lib_unordered_map_try_emplace 201411L\n #endif\n \n@@ -224,7 +225,9 @@\n #if __cpp_lib_concepts\n # define __cpp_lib_make_obj_using_allocator 201811L\n #endif\n-#define __cpp_lib_optional 202106L\n+#if __cplusplus <= 202002L // N.B. updated value in C++23\n+# define __cpp_lib_optional 202106L\n+#endif\n #define __cpp_lib_remove_cvref 201711L\n #if __has_builtin(__builtin_source_location)\n # define __cpp_lib_source_location 201907L\n@@ -243,9 +246,27 @@\n #if __cpp_concepts >= 202002L && __cpp_constexpr >= 201811L\n # define __cpp_lib_variant 202106L\n #endif\n+#define __cpp_lib_constexpr_algorithms 201806L\n+#define __cpp_lib_constexpr_functional 201907L\n+#if __cplusplus <= 202002L // N.B. updated value in C++23\n+# define __cpp_lib_constexpr_memory 201811L\n+#endif // C++20\n+#define __cpp_lib_constexpr_numeric 201911L\n+#define __cpp_lib_constexpr_tuple 201811L\n+#define __cpp_lib_array_constexpr 201811L\n+#ifdef __cpp_lib_is_constant_evaluated\n+# define __cpp_lib_constexpr_char_traits 201811L\n+#endif\n+#define __cpp_lib_constexpr_iterator 201811L\n+#define __cpp_lib_constexpr_utility 201811L\n+#define __cpp_lib_interpolate 201902L\n+#if __cpp_lib_concepts\n+# define __cpp_lib_move_iterator_concept 202207L\n+# define __cpp_lib_ranges 202110L\n+#endif\n+#define __cpp_lib_shift 201806L\n \n #if _GLIBCXX_HOSTED\n-#define __cpp_lib_array_constexpr 201811L\n #define __cpp_lib_atomic_shared_ptr 201711L\n #if defined _GLIBCXX_HAS_GTHREADS || defined _GLIBCXX_HAVE_LINUX_FUTEX\n # define __cpp_lib_atomic_wait 201907L\n@@ -256,30 +277,20 @@\n // #undef __cpp_lib_chrono\n // #define __cpp_lib_chrono 201907L\n // FIXME: #define __cpp_lib_execution 201902L\n-#define __cpp_lib_constexpr_algorithms 201806L\n-#ifdef __cpp_lib_is_constant_evaluated\n-# define __cpp_lib_constexpr_char_traits 201811L\n-#endif\n #define __cpp_lib_constexpr_complex 201711L\n #define __cpp_lib_constexpr_dynamic_alloc 201907L\n-#define __cpp_lib_constexpr_functional 201907L\n-#define __cpp_lib_constexpr_iterator 201811L\n-#define __cpp_lib_constexpr_memory 201811L\n-#define __cpp_lib_constexpr_numeric 201911L\n+#define __cpp_lib_constexpr_tuple 201811L\n #ifdef __cpp_lib_is_constant_evaluated\n # if _GLIBCXX_USE_CXX11_ABI\n #  define __cpp_lib_constexpr_string 201907L\n # else\n #  define __cpp_lib_constexpr_string 201811L\n # endif\n #endif\n-#define __cpp_lib_constexpr_tuple 201811L\n-#define __cpp_lib_constexpr_utility 201811L\n #define __cpp_lib_constexpr_vector 201907L\n #define __cpp_lib_erase_if 202002L\n #define __cpp_lib_format 202106L\n #define __cpp_lib_generic_unordered_lookup 201811L\n-#define __cpp_lib_interpolate 201902L\n #ifdef _GLIBCXX_HAS_GTHREADS\n # define __cpp_lib_jthread 201911L\n #endif\n@@ -288,15 +299,10 @@\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_polymorphic_allocator 201902L\n-#if __cpp_lib_concepts\n-# define __cpp_lib_ranges 202110L\n-# define __cpp_lib_move_iterator_concept 202207L\n-#endif\n #if __cpp_lib_atomic_wait || _GLIBCXX_HAVE_POSIX_SEMAPHORE\n # define __cpp_lib_semaphore 201907L\n #endif\n #define __cpp_lib_shared_ptr_arrays 201707L\n-#define __cpp_lib_shift 201806L\n #define __cpp_lib_smart_ptr_for_overwrite 202002L\n # if _GLIBCXX_USE_CXX11_ABI\n // Only supported with cxx11-abi\n@@ -330,14 +336,17 @@\n #define __cpp_lib_ranges_stride 202207L\n #define __cpp_lib_ranges_cartesian_product 202207L\n #define __cpp_lib_ranges_as_rvalue 202207L\n-\n-#if _GLIBCXX_HOSTED\n-#define __cpp_lib_adaptor_iterator_pair_constructor 202106L\n #if __cpp_constexpr_dynamic_alloc\n-# define __cpp_lib_constexpr_bitset 202202L\n+# if _GLIBCXX_HOSTED\n+#  define __cpp_lib_constexpr_bitset 202202L\n+# endif\n # undef __cpp_lib_constexpr_memory\n # define __cpp_lib_constexpr_memory 202202L\n #endif\n+#define __cpp_lib_stdatomic_h 202011L\n+\n+#if _GLIBCXX_HOSTED\n+#define __cpp_lib_adaptor_iterator_pair_constructor 202106L\n #define __cpp_lib_ios_noreplace 202207L\n #define __cpp_lib_move_only_function 202110L\n #if __cpp_lib_span"}]}