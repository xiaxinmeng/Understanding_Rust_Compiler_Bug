{"sha": "5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "node_id": "C_kwDOANBUbNoAKDVjNWVmMmY5YWI1NDViNjgwY2Q0YmI2YzU0MGE5ZGFkYjEyZWFkODY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-10-27T10:48:41Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-01T03:23:45Z"}, "message": "Enable more optimization for 32-bit/64-bit shrd/shld with imm shift count.\n\nThis patch doens't handle variable count since it require 5 insns to\nbe combined to get wanted pattern, but current pass_combine only\nsupports at most 4.\nThis patch doesn't handle 16-bit shrd/shld either.\n\ngcc/ChangeLog:\n\n\tPR target/55583\n\t* config/i386/i386.md (*x86_64_shld_1): Rename to ..\n\t(x86_64_shld_1): .. this.\n\t(*x86_shld_1): Rename to ..\n\t(x86_shld_1): .. this.\n\t(*x86_64_shrd_1): Rename to ..\n\t(x86_64_shrd_1): .. this.\n\t(*x86_shrd_1): Rename to ..\n\t(x86_shrd_1): .. this.\n\t(*x86_64_shld_shrd_1_nozext): New pre_reload splitter.\n\t(*x86_shld_shrd_1_nozext): Ditto.\n\t(*x86_64_shrd_shld_1_nozext): Ditto.\n\t(*x86_shrd_shld_1_nozext): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr55583.c: New test.", "tree": {"sha": "500d8816c1ea6a7fb678cbdd9748468220e0f655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500d8816c1ea6a7fb678cbdd9748468220e0f655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af6d747df7e311a6555dda3a75f6724ecc4481bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6d747df7e311a6555dda3a75f6724ecc4481bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6d747df7e311a6555dda3a75f6724ecc4481bd"}], "stats": {"total": 177, "additions": 173, "deletions": 4}, "files": [{"sha": "85567980aa379d685d53169fdf02bf9e1f97725c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 146, "deletions": 4, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "patch": "@@ -12479,7 +12479,7 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n-(define_insn \"*x86_64_shld_1\"\n+(define_insn \"x86_64_shld_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (ashift:DI (match_dup 0)\n \t\t\t   (match_operand:QI 2 \"const_0_to_63_operand\"))\n@@ -12500,6 +12500,42 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn_and_split \"*x86_64_shld_shrd_1_nozext\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(ior:DI (ashift:DI (match_operand:DI 4 \"nonimmediate_operand\")\n+\t\t\t     (match_operand:QI 2 \"const_0_to_63_operand\"))\n+\t\t(lshiftrt:DI\n+\t\t  (match_operand:DI 1 \"nonimmediate_operand\")\n+\t\t  (match_operand:QI 3 \"const_0_to_63_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && INTVAL (operands[3]) == 64 - INTVAL (operands[2])\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (rtx_equal_p (operands[4], operands[0]))\n+    {\n+      operands[1] = force_reg (DImode, operands[1]);\n+      emit_insn (gen_x86_64_shld_1 (operands[0], operands[1], operands[2], operands[3]));\n+    }\n+  else if (rtx_equal_p (operands[1], operands[0]))\n+    {\n+      operands[4] = force_reg (DImode, operands[4]);\n+      emit_insn (gen_x86_64_shrd_1 (operands[0], operands[4], operands[3], operands[2]));\n+    }\n+  else\n+   {\n+     operands[1] = force_reg (DImode, operands[1]);\n+     rtx tmp = gen_reg_rtx (DImode);\n+     emit_move_insn (tmp, operands[4]);\n+     emit_insn (gen_x86_64_shld_1 (tmp, operands[1], operands[2], operands[3]));\n+     emit_move_insn (operands[0], tmp);\n+   }\n+   DONE;\n+})\n+\n (define_insn_and_split \"*x86_64_shld_2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\")\n \t(ior:DI (ashift:DI (match_dup 0)\n@@ -12543,7 +12579,7 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n-(define_insn \"*x86_shld_1\"\n+(define_insn \"x86_shld_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (ashift:SI (match_dup 0)\n \t\t\t   (match_operand:QI 2 \"const_0_to_31_operand\"))\n@@ -12564,6 +12600,41 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn_and_split \"*x86_shld_shrd_1_nozext\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+\t(ior:SI (ashift:SI (match_operand:SI 4 \"nonimmediate_operand\")\n+\t\t\t     (match_operand:QI 2 \"const_0_to_31_operand\"))\n+\t       (lshiftrt:SI\n+\t\t   (match_operand:SI 1 \"nonimmediate_operand\")\n+\t\t   (match_operand:QI 3 \"const_0_to_31_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) == 32 - INTVAL (operands[2])\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (rtx_equal_p (operands[4], operands[0]))\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+      emit_insn (gen_x86_shld_1 (operands[0], operands[1], operands[2], operands[3]));\n+    }\n+  else if (rtx_equal_p (operands[1], operands[0]))\n+    {\n+      operands[4] = force_reg (SImode, operands[4]);\n+      emit_insn (gen_x86_shrd_1 (operands[0], operands[4], operands[3], operands[2]));\n+    }\n+  else\n+   {\n+     operands[1] = force_reg (SImode, operands[1]);\n+     rtx tmp = gen_reg_rtx (SImode);\n+     emit_move_insn (tmp, operands[4]);\n+     emit_insn (gen_x86_shld_1 (tmp, operands[1], operands[2], operands[3]));\n+     emit_move_insn (operands[0], tmp);\n+   }\n+   DONE;\n+})\n+\n (define_insn_and_split \"*x86_shld_2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\")\n \t(ior:SI (ashift:SI (match_dup 0)\n@@ -13442,7 +13513,7 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n-(define_insn \"*x86_64_shrd_1\"\n+(define_insn \"x86_64_shrd_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (lshiftrt:DI (match_dup 0)\n \t\t\t     (match_operand:QI 2 \"const_0_to_63_operand\"))\n@@ -13463,6 +13534,42 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn_and_split \"*x86_64_shrd_shld_1_nozext\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(ior:DI (lshiftrt:DI (match_operand:DI 4 \"nonimmediate_operand\")\n+\t\t\t     (match_operand:QI 2 \"const_0_to_63_operand\"))\n+\t\t(ashift:DI\n+\t\t  (match_operand:DI 1 \"nonimmediate_operand\")\n+\t\t  (match_operand:QI 3 \"const_0_to_63_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && INTVAL (operands[3]) == 64 - INTVAL (operands[2])\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (rtx_equal_p (operands[4], operands[0]))\n+    {\n+      operands[1] = force_reg (DImode, operands[1]);\n+      emit_insn (gen_x86_64_shrd_1 (operands[0], operands[1], operands[2], operands[3]));\n+    }\n+  else if (rtx_equal_p (operands[1], operands[0]))\n+    {\n+      operands[4] = force_reg (DImode, operands[4]);\n+      emit_insn (gen_x86_64_shld_1 (operands[0], operands[4], operands[3], operands[2]));\n+    }\n+  else\n+   {\n+     operands[1] = force_reg (DImode, operands[1]);\n+     rtx tmp = gen_reg_rtx (DImode);\n+     emit_move_insn (tmp, operands[4]);\n+     emit_insn (gen_x86_64_shrd_1 (tmp, operands[1], operands[2], operands[3]));\n+     emit_move_insn (operands[0], tmp);\n+   }\n+   DONE;\n+})\n+\n (define_insn_and_split \"*x86_64_shrd_2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\")\n \t(ior:DI (lshiftrt:DI (match_dup 0)\n@@ -13506,7 +13613,7 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n-(define_insn \"*x86_shrd_1\"\n+(define_insn \"x86_shrd_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (lshiftrt:SI (match_dup 0)\n \t\t\t     (match_operand:QI 2 \"const_0_to_31_operand\"))\n@@ -13527,6 +13634,41 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn_and_split \"*x86_shrd_shld_1_nozext\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+\t(ior:SI (lshiftrt:SI (match_operand:SI 4 \"nonimmediate_operand\")\n+\t\t\t     (match_operand:QI 2 \"const_0_to_31_operand\"))\n+\t       (ashift:SI\n+\t\t   (match_operand:SI 1 \"nonimmediate_operand\")\n+\t\t   (match_operand:QI 3 \"const_0_to_31_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) == 32 - INTVAL (operands[2])\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (rtx_equal_p (operands[4], operands[0]))\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+      emit_insn (gen_x86_shrd_1 (operands[0], operands[1], operands[2], operands[3]));\n+    }\n+  else if (rtx_equal_p (operands[1], operands[0]))\n+    {\n+      operands[4] = force_reg (SImode, operands[4]);\n+      emit_insn (gen_x86_shld_1 (operands[0], operands[4], operands[3], operands[2]));\n+    }\n+  else\n+   {\n+     operands[1] = force_reg (SImode, operands[1]);\n+     rtx tmp = gen_reg_rtx (SImode);\n+     emit_move_insn (tmp, operands[4]);\n+     emit_insn (gen_x86_shrd_1 (tmp, operands[1], operands[2], operands[3]));\n+     emit_move_insn (operands[0], tmp);\n+   }\n+   DONE;\n+})\n+\n (define_insn_and_split \"*x86_shrd_2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\")\n \t(ior:SI (lshiftrt:SI (match_dup 0)"}, {"sha": "1c128b5d9292d65cb9d07b4f58b57443333b87a6", "filename": "gcc/testsuite/gcc.target/i386/pr55583.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55583.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55583.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55583.c?ref=5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile  } */\n+/* { dg-options \"-O2 -Wno-shift-count-overflow\" } */\n+/* { dg-final { scan-assembler-times {(?n)shrd[ql]?[\\t ]*\\$2} 4 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times {(?n)shrdl?[\\t ]*\\$2} 2 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times {(?n)shldl?[\\t ]*\\$2} 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times {(?n)shld[ql]?[\\t ]*\\$2} 2 { target { ! ia32 } } } } */\n+\n+typedef unsigned long  u64;\n+typedef unsigned int   u32;\n+typedef unsigned short u16;\n+\n+long  a, b;\n+int   c, d;\n+short e, f;\n+const int n = 2;\n+\n+void test64r () { b = ((u64)b >> n) | (a << (64 - n)); }\n+void test32r () { d = ((u32)d >> n) | (c << (32 - n)); }\n+\n+unsigned long  ua, ub;\n+unsigned int   uc, ud;\n+unsigned short ue, uf;\n+\n+void testu64l () { ub = (ub << n) | (ua >> (64 - n)); }\n+void testu64r () { ub = (ub >> n) | (ua << (64 - n)); }\n+void testu32l () { ud = (ud << n) | (uc >> (32 - n)); }\n+void testu32r () { ud = (ud >> n) | (uc << (32 - n)); }"}]}