{"sha": "04807c286441c25e0997b453f308ffee25e3524e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4MDdjMjg2NDQxYzI1ZTA5OTdiNDUzZjMwOGZmZWUyNWUzNTI0ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-15T22:50:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-15T22:50:11Z"}, "message": "locale.cc (locale::locale(const char* __name)): Consolidate name setting.\n\n\n2000-09-15  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/locale.cc (locale::locale(const char* __name)): Consolidate\n\tname setting. Add checks for NULL __name pointers. Remove calls to\n\t_S_initialize() as initial locale initialization can either be\n\tassumed, or needs to be made consistent throughout locale\n\tconstrutors.\n\t(locale::locale(const locale& __other, const char* __name,\n\tcategory __cat): Add checks for NULL name. Add checks for\n\tassignment to self.\n\t* src/localename.cc (locale::_Impl:: _Impl(const _Impl& __other,\n\tconst string& __name, category __cat, size_t __refs)): Set correct\n\tname, has_name values.\n\t* testsuite/22_locale/ctor_copy_dtor.cc (test01): More tests.\n\t* docs/22_locale/locale.html: New file, more unfinished docs...\n\nFrom-SVN: r36450", "tree": {"sha": "a894220fc3cccbb8e9ce51dc41924ee1bb8b5472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a894220fc3cccbb8e9ce51dc41924ee1bb8b5472"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04807c286441c25e0997b453f308ffee25e3524e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04807c286441c25e0997b453f308ffee25e3524e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04807c286441c25e0997b453f308ffee25e3524e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04807c286441c25e0997b453f308ffee25e3524e/comments", "author": null, "committer": null, "parents": [{"sha": "4c4b521a59ec0cafbd1b5be5b13c4ecd5d88a79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4b521a59ec0cafbd1b5be5b13c4ecd5d88a79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4b521a59ec0cafbd1b5be5b13c4ecd5d88a79b"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "dc3510be351d6b415eabc1136a827271d15efcb6", "filename": "libstdc++-v3/docs/22_locale/locale.html", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04807c286441c25e0997b453f308ffee25e3524e/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04807c286441c25e0997b453f308ffee25e3524e/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Flocale.html?ref=04807c286441c25e0997b453f308ffee25e3524e", "patch": "@@ -0,0 +1,103 @@\n+<HTML>\n+<HEAD>\n+  <H1>\n+  Notes on the locale implementation.\n+  </H1>\n+</HEAD>\n+<I>\n+prepared by Benjamin Kosnik (bkoz@redhat.com) on September 15, 2000\n+</I>\n+\n+<P>\n+<H2>\n+1. Abstract\n+</H2>\n+<P>\n+</P>\n+\n+<P>\n+<H2>\n+2. What the standard says\n+</H2>\n+\n+\n+<P>\n+<H2>\n+3. Problems with &quot;C&quot; locales : global locales, termination.\n+</H2>\n+\n+<P>\n+For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n+conversions are made between the internal character set (always UCS4\n+on GNU/Linux) and whatever the currently selected locale for the\n+LC_CTYPE category implements.\n+\n+<P>\n+<H2>\n+4. Design\n+</H2>\n+The two required specializations are implemented as follows:\n+\n+\n+<P>\n+<H2>\n+5.  Examples\n+</H2>\n+\n+<pre>\n+  typedef ctype<char> cctype;\n+</pre>\n+\n+More information can be found in the following testcases:\n+<UL>\n+<LI> testsuite/22_locale/ctype_char_members.cc \n+<LI> testsuite/22_locale/ctype_wchar_t_members.cc \n+</UL>\n+\n+<P>\n+<H2>\n+6.  Unresolved Issues\n+</H2>\n+\n+<UL>\n+\t<LI> locale -a displays available locales on linux\n+\n+\t<LI> locale initialization: at what point does _S_classic,\n+\t_S_global get initialized? Can named locales assume this\n+\tinitialization has already taken place?\n+</UL>\n+\n+\n+<P>\n+<H2>\n+7. Acknowledgments\n+</H2>\n+\n+<P>\n+<H2>\n+8. Bibliography / Referenced Documents\n+</H2>\n+\n+Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n+\n+<P>\n+Drepper, Ulrich, Numerous, late-night email correspondence\n+\n+<P>\n+ISO/IEC 14882:1998 Programming languages - C++\n+\n+<P>\n+ISO/IEC 9899:1999 Programming languages - C\n+\n+<P>\n+Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n+\n+<P>\n+Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n+\n+<P>\n+System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n+http://www.opennc.org/austin/docreg.html\n+\n+"}]}