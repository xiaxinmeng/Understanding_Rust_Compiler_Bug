{"sha": "b891ade601b742d159a4a566e89321317bfe8975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5MWFkZTYwMWI3NDJkMTU5YTRhNTY2ZTg5MzIxMzE3YmZlODk3NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-29T14:31:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-29T14:31:56Z"}, "message": "i386.md (operations with memory inputs setting flags peephole2): Remove uneeded REG_P checks.\n\n\t* config/i386/i386.md\n\t(operations with memory inputs setting flags peephole2):\n\tRemove uneeded REG_P checks.  Cleanup pattern generation.\n\nFrom-SVN: r235641", "tree": {"sha": "c2c2ddff8e249a8b3a5288b50d14b51e669c9829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c2ddff8e249a8b3a5288b50d14b51e669c9829"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b891ade601b742d159a4a566e89321317bfe8975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b891ade601b742d159a4a566e89321317bfe8975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b891ade601b742d159a4a566e89321317bfe8975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b891ade601b742d159a4a566e89321317bfe8975/comments", "author": null, "committer": null, "parents": [{"sha": "9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9129c8cfcd802fdad53e6f6be302e52690d6ec2a"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "86523e00fea249d759ce40635a15c6ab29967d10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b891ade601b742d159a4a566e89321317bfe8975/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b891ade601b742d159a4a566e89321317bfe8975/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b891ade601b742d159a4a566e89321317bfe8975", "patch": "@@ -1,3 +1,9 @@\n+2016-04-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md\n+\t(operations with memory inputs setting flags peephole2):\n+\tRemove uneeded REG_P checks.  Cleanup pattern generation.\n+\n 2016-04-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-vect-loop.c (vect_transform_loop): Fix\n@@ -12,9 +18,8 @@\n \n 2016-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n-\t* config/arc/arc.md (*loadqi_update): Replace use of 'rI'\n-\tconstraint with 'rCm2' constraints to limit possible immediate\n-\tsize.\n+\t* config/arc/arc.md (*loadqi_update): Replace use of 'rI' constraint\n+\twith 'rCm2' constraints to limit possible immediate size.\n \t(*load_zeroextendqisi_update): Likewise.\n \t(*load_signextendqisi_update): Likewise.\n \t(*loadhi_update): Likewise."}, {"sha": "217551b1dc984c25ce499b8a8b42555d6ec1e643", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b891ade601b742d159a4a566e89321317bfe8975/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b891ade601b742d159a4a566e89321317bfe8975/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b891ade601b742d159a4a566e89321317bfe8975", "patch": "@@ -18006,16 +18006,18 @@\n \t\t\t (GET_CODE (operands[3]) == PLUS\n \t\t\t  || GET_CODE (operands[3]) == MINUS)\n \t\t\t ? CCGOCmode : CCNOmode)\"\n-  [(parallel [(set (match_dup 4) (match_dup 5))\n-\t      (set (match_dup 1) (match_op_dup 3 [(match_dup 1)\n-\t\t\t\t\t\t  (match_dup 2)]))])]\n+  [(parallel [(set (match_dup 4) (match_dup 6))\n+\t      (set (match_dup 1) (match_dup 5))])]\n {\n   operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n-  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\tcopy_rtx (operands[1]),\n-\t\t\t\tcopy_rtx (operands[2]));\n-  operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n-\t\t\t\t operands[5], const0_rtx);\n+  operands[5]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[3]), GET_MODE (operands[3]),\n+\t\t      copy_rtx (operands[1]),\n+\t\t      operands[2]);\n+  operands[6]\n+    = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t       copy_rtx (operands[5]),\n+\t\t       const0_rtx);\n })\n \n ;; Likewise for instances where we have a lea pattern.\n@@ -18038,16 +18040,18 @@\n        || immediate_operand (operands[2], QImode)\n        || any_QIreg_operand (operands[2], QImode))\n    && ix86_match_ccmode (peep2_next_insn (3), CCGOCmode)\"\n-  [(parallel [(set (match_dup 4) (match_dup 5))\n-\t      (set (match_dup 1) (plus:SWI (match_dup 1)\n-\t\t\t\t\t   (match_dup 2)))])]\n+  [(parallel [(set (match_dup 4) (match_dup 6))\n+\t      (set (match_dup 1) (match_dup 5))])]\n {\n   operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n-  operands[5] = gen_rtx_PLUS (<MODE>mode,\n-\t\t\t      copy_rtx (operands[1]),\n-\t\t\t      copy_rtx (operands[2]));\n-  operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n-\t\t\t\t operands[5], const0_rtx);\n+  operands[5]\n+    = gen_rtx_PLUS (<MODE>mode,\n+\t\t    copy_rtx (operands[1]),\n+\t\t    operands[2]);\n+  operands[6]\n+    = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t       copy_rtx (operands[5]),\n+\t\t       const0_rtx);\n })\n \n (define_peephole2\n@@ -18065,16 +18069,18 @@\n    && ix86_match_ccmode (peep2_next_insn (2),\n \t\t\t GET_CODE (operands[2]) == PLUS\n \t\t\t ? CCGOCmode : CCNOmode)\"\n-  [(parallel [(set (match_dup 3) (match_dup 4))\n-\t      (set (match_dup 1) (match_op_dup 2 [(match_dup 1)\n-\t\t\t\t\t\t  (match_dup 0)]))])]\n+  [(parallel [(set (match_dup 3) (match_dup 5))\n+\t      (set (match_dup 1) (match_dup 4))])]\n {\n   operands[3] = SET_DEST (PATTERN (peep2_next_insn (2)));\n-  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]), <MODE>mode,\n-\t\t\t\tcopy_rtx (operands[1]),\n-\t\t\t\tcopy_rtx (operands[0]));\n-  operands[4] = gen_rtx_COMPARE (GET_MODE (operands[3]),\n-\t\t\t\t operands[4], const0_rtx);\n+  operands[4]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[2]), GET_MODE (operands[2]),\n+\t\t      copy_rtx (operands[1]),\n+\t\t      operands[0]);\n+  operands[5]\n+    = gen_rtx_COMPARE (GET_MODE (operands[3]),\n+\t\t       copy_rtx (operands[4]),\n+\t\t       const0_rtx);\n })\n \n (define_peephole2\n@@ -18088,7 +18094,6 @@\n    (set (match_dup 1) (match_dup 0))\n    (set (reg FLAGS_REG) (compare (match_dup 0) (const_int 0)))]\n   \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n-   && REG_P (operands[0]) && REG_P (operands[4])\n    && REGNO (operands[0]) == REGNO (operands[4])\n    && peep2_reg_dead_p (4, operands[0])\n    && (<MODE>mode != QImode\n@@ -18100,18 +18105,18 @@\n \t\t\t (GET_CODE (operands[3]) == PLUS\n \t\t\t  || GET_CODE (operands[3]) == MINUS)\n \t\t\t ? CCGOCmode : CCNOmode)\"\n-  [(parallel [(set (match_dup 4) (match_dup 5))\n-\t      (set (match_dup 1) (match_dup 6))])]\n+  [(parallel [(set (match_dup 4) (match_dup 6))\n+\t      (set (match_dup 1) (match_dup 5))])]\n {\n-  operands[2] = gen_lowpart (<MODE>mode, operands[2]);\n   operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n-  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\tcopy_rtx (operands[1]), operands[2]);\n-  operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n-\t\t\t\t operands[5], const0_rtx);\n-  operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\tcopy_rtx (operands[1]),\n-\t\t\t\tcopy_rtx (operands[2]));\n+  operands[5]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t      copy_rtx (operands[1]),\n+\t\t      gen_lowpart (<MODE>mode, operands[2]));\n+  operands[6]\n+    = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t       copy_rtx (operands[5]),\n+\t\t       const0_rtx);\n })\n \n ;; Attempt to always use XOR for zeroing registers (including FP modes)."}]}