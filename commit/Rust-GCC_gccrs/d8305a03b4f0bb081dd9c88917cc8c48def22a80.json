{"sha": "d8305a03b4f0bb081dd9c88917cc8c48def22a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzMDVhMDNiNGYwYmIwODFkZDljODg5MTdjYzhjNDhkZWYyMmE4MA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2020-02-14T17:14:36Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2020-02-14T17:22:36Z"}, "message": "rtlanal: optimize costly division in rtx_cost\n\nThere's a costly signed 64-bit division in rtx_cost on x86 as well as\nany other target where UNITS_PER_WORD expands to TARGET_64BIT ?  8 : 4.\nIt's also evident that rtx_cost does redundant work for a SET.\n\nObviously the variable named 'factor' rarely exceeds 1, so in the\nmajority of cases it can be computed with a well-predictable branch\nrather than a division.\n\nThis patch makes rtx_cost do the division only in case mode is wider\nthan UNITS_PER_WORD, and also moves a test for a SET up front to avoid\nredundancy.\nNo functional change.\n\n\t* rtlanal.c (rtx_cost): Handle a SET up front. Avoid division if\n\tthe mode is not wider than UNITS_PER_WORD.", "tree": {"sha": "cb1eb11e78e31963e2d7e79195a9170a281aa2aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb1eb11e78e31963e2d7e79195a9170a281aa2aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8305a03b4f0bb081dd9c88917cc8c48def22a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8305a03b4f0bb081dd9c88917cc8c48def22a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8305a03b4f0bb081dd9c88917cc8c48def22a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8305a03b4f0bb081dd9c88917cc8c48def22a80/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519a33f954fd71cb8b74053e168e23a1cb00d30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519a33f954fd71cb8b74053e168e23a1cb00d30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519a33f954fd71cb8b74053e168e23a1cb00d30b"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "2080b738fb653923756209dd5236c9e89c1f69dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8305a03b4f0bb081dd9c88917cc8c48def22a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8305a03b4f0bb081dd9c88917cc8c48def22a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8305a03b4f0bb081dd9c88917cc8c48def22a80", "patch": "@@ -1,3 +1,8 @@\n+2020-02-14  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* rtlanal.c (rtx_cost): Handle a SET up front. Avoid division if\n+\tthe mode is not wider than UNITS_PER_WORD.\n+\n 2020-02-14  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/93516"}, {"sha": "c7ab86e228b1fe4c3645d7746b5c1ae046b0f821", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8305a03b4f0bb081dd9c88917cc8c48def22a80/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8305a03b4f0bb081dd9c88917cc8c48def22a80/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d8305a03b4f0bb081dd9c88917cc8c48def22a80", "patch": "@@ -4207,18 +4207,23 @@ rtx_cost (rtx x, machine_mode mode, enum rtx_code outer_code,\n   const char *fmt;\n   int total;\n   int factor;\n+  unsigned mode_size;\n \n   if (x == 0)\n     return 0;\n \n-  if (GET_MODE (x) != VOIDmode)\n+  if (GET_CODE (x) == SET)\n+    /* A SET doesn't have a mode, so let's look at the SET_DEST to get\n+       the mode for the factor.  */\n+    mode = GET_MODE (SET_DEST (x));\n+  else if (GET_MODE (x) != VOIDmode)\n     mode = GET_MODE (x);\n \n+  mode_size = estimated_poly_value (GET_MODE_SIZE (mode));\n+\n   /* A size N times larger than UNITS_PER_WORD likely needs N times as\n      many insns, taking N times as long.  */\n-  factor = estimated_poly_value (GET_MODE_SIZE (mode)) / UNITS_PER_WORD;\n-  if (factor == 0)\n-    factor = 1;\n+  factor = mode_size > UNITS_PER_WORD ? mode_size / UNITS_PER_WORD : 1;\n \n   /* Compute the default costs of certain things.\n      Note that targetm.rtx_costs can override the defaults.  */\n@@ -4243,14 +4248,6 @@ rtx_cost (rtx x, machine_mode mode, enum rtx_code outer_code,\n       /* Used in combine.c as a marker.  */\n       total = 0;\n       break;\n-    case SET:\n-      /* A SET doesn't have a mode, so let's look at the SET_DEST to get\n-\t the mode for the factor.  */\n-      mode = GET_MODE (SET_DEST (x));\n-      factor = estimated_poly_value (GET_MODE_SIZE (mode)) / UNITS_PER_WORD;\n-      if (factor == 0)\n-\tfactor = 1;\n-      /* FALLTHRU */\n     default:\n       total = factor * COSTS_N_INSNS (1);\n     }"}]}