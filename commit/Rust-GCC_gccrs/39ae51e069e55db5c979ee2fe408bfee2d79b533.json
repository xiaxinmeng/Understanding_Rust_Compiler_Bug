{"sha": "39ae51e069e55db5c979ee2fe408bfee2d79b533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhZTUxZTA2OWU1NWRiNWM5NzllZTJmZTQwOGJmZWUyZDc5YjUzMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-03-01T10:53:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-03-01T10:53:17Z"}, "message": "re PR ada/39264 (gnat.dg/pack3.adb fails on powerpc64/s390x)\n\n\tPR ada/39264\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Do no\n\tcall make_packable_type on fat pointer types.\n\t<E_Array_Subtype>: Likewise.\n\t<E_Record_Subtype>: Call make_packable_type on all record types\n\texcept for fat pointer types.\n\t(make_packable_type): Likewise.\n\t(gnat_to_gnu_field): Likewise.\n\nFrom-SVN: r144514", "tree": {"sha": "54189ffad8b37b0caeed60c21d5704619c6a9968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54189ffad8b37b0caeed60c21d5704619c6a9968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ae51e069e55db5c979ee2fe408bfee2d79b533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ae51e069e55db5c979ee2fe408bfee2d79b533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ae51e069e55db5c979ee2fe408bfee2d79b533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ae51e069e55db5c979ee2fe408bfee2d79b533/comments", "author": null, "committer": null, "parents": [{"sha": "625d32515767fcb3c878bf7e7cf007a6fd479302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625d32515767fcb3c878bf7e7cf007a6fd479302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625d32515767fcb3c878bf7e7cf007a6fd479302"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "7380a0bff1030cb0792ac7bfa30afda064d4b308", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=39ae51e069e55db5c979ee2fe408bfee2d79b533", "patch": "@@ -1,3 +1,14 @@\n+2009-03-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/39264\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Do no\n+\tcall make_packable_type on fat pointer types.\n+\t<E_Array_Subtype>: Likewise.\n+\t<E_Record_Subtype>: Call make_packable_type on all record types\n+\texcept for fat pointer types.\n+\t(make_packable_type): Likewise.\n+\t(gnat_to_gnu_field): Likewise.\n+\n 2009-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in (cygwin/mingw): Revert accidental"}, {"sha": "0d722f273ea3c345c5facf83dff2fb0e8905145b", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=39ae51e069e55db5c979ee2fe408bfee2d79b533", "patch": "@@ -1958,6 +1958,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && !Has_Aliased_Components (gnat_entity)\n \t    && !Strict_Alignment (Component_Type (gnat_entity))\n \t    && TREE_CODE (tem) == RECORD_TYPE\n+\t    && !TYPE_IS_FAT_POINTER_P (tem)\n \t    && host_integerp (TYPE_SIZE (tem), 1))\n \t  tem = make_packable_type (tem, false);\n \n@@ -2326,6 +2327,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  && !Has_Aliased_Components (gnat_entity)\n \t\t  && !Strict_Alignment (Component_Type (gnat_entity))\n \t\t  && TREE_CODE (gnu_type) == RECORD_TYPE\n+\t\t  && !TYPE_IS_FAT_POINTER_P (gnu_type)\n \t\t  && host_integerp (TYPE_SIZE (gnu_type), 1))\n \t\tgnu_type = make_packable_type (gnu_type, false);\n \n@@ -3082,8 +3084,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t        == INTEGER_CST)\n \t\t      {\n \t\t\tgnu_size = DECL_SIZE (gnu_old_field);\n-\t\t\tif (TYPE_MODE (gnu_field_type) == BLKmode\n-\t\t\t    && TREE_CODE (gnu_field_type) == RECORD_TYPE\n+\t\t\tif (TREE_CODE (gnu_field_type) == RECORD_TYPE\n+\t\t\t    && !TYPE_IS_FAT_POINTER_P (gnu_field_type)\n \t\t\t    && host_integerp (TYPE_SIZE (gnu_field_type), 1))\n \t\t\t  gnu_field_type\n \t\t\t    = make_packable_type (gnu_field_type, true);\n@@ -5697,8 +5699,8 @@ round_up_to_align (unsigned HOST_WIDE_INT t, unsigned int align)\n    as the field type of a packed record if IN_RECORD is true, or as the\n    component type of a packed array if IN_RECORD is false.  See if we can\n    rewrite it either as a type that has a non-BLKmode, which we can pack\n-   tighter in the packed record case, or as a smaller type with BLKmode.\n-   If so, return the new type.  If not, return the original type.  */\n+   tighter in the packed record case, or as a smaller type.  If so, return\n+   the new type.  If not, return the original type.  */\n \n static tree\n make_packable_type (tree type, bool in_record)\n@@ -5760,10 +5762,10 @@ make_packable_type (tree type, bool in_record)\n       tree new_field_type = TREE_TYPE (old_field);\n       tree new_field, new_size;\n \n-      if (TYPE_MODE (new_field_type) == BLKmode\n-\t  && (TREE_CODE (new_field_type) == RECORD_TYPE\n-\t      || TREE_CODE (new_field_type) == UNION_TYPE\n-\t      || TREE_CODE (new_field_type) == QUAL_UNION_TYPE)\n+      if ((TREE_CODE (new_field_type) == RECORD_TYPE\n+\t   || TREE_CODE (new_field_type) == UNION_TYPE\n+\t   || TREE_CODE (new_field_type) == QUAL_UNION_TYPE)\n+\t  && !TYPE_IS_FAT_POINTER_P (new_field_type)\n \t  && host_integerp (TYPE_SIZE (new_field_type), 1))\n \tnew_field_type = make_packable_type (new_field_type, true);\n \n@@ -6207,11 +6209,10 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n     gnu_size = NULL_TREE;\n \n   /* If we have a specified size that's smaller than that of the field type,\n-     or a position is specified, and the field type is also a record that's\n-     BLKmode, see if we can get either an integral mode form of the type or\n-     a smaller BLKmode form.  If we can, show a size was specified for the\n-     field if there wasn't one already, so we know to make this a bitfield\n-     and avoid making things wider.\n+     or a position is specified, and the field type is a record, see if we can\n+     get either an integral mode form of the type or a smaller form.  If we\n+     can, show a size was specified for the field if there wasn't one already,\n+     so we know to make this a bitfield and avoid making things wider.\n \n      Doing this is first useful if the record is packed because we may then\n      place the field at a non-byte-aligned position and so achieve tighter\n@@ -6231,7 +6232,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n      from a component clause.  */\n \n   if (TREE_CODE (gnu_field_type) == RECORD_TYPE\n-      && TYPE_MODE (gnu_field_type) == BLKmode\n+      && !TYPE_IS_FAT_POINTER_P (gnu_field_type)\n       && host_integerp (TYPE_SIZE (gnu_field_type), 1)\n       && (packed == 1\n \t  || (gnu_size"}, {"sha": "aeec72ade596a2f6b90176b0917b6f4879ca5897", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39ae51e069e55db5c979ee2fe408bfee2d79b533", "patch": "@@ -1,3 +1,7 @@\n+2009-03-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack12.adb: New test.\n+\n 2009-02-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c++/37789"}, {"sha": "640ace325de7e26c6f002a2cb9789feded9fb041", "filename": "gcc/testsuite/gnat.dg/pack12.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Ftestsuite%2Fgnat.dg%2Fpack12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ae51e069e55db5c979ee2fe408bfee2d79b533/gcc%2Ftestsuite%2Fgnat.dg%2Fpack12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack12.adb?ref=39ae51e069e55db5c979ee2fe408bfee2d79b533", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do run }\n+\n+procedure Pack12 is\n+\n+  type U16 is mod 2 ** 16;\n+\n+  type Key is record\n+    Value : U16;\n+    Valid : Boolean;\n+  end record;\n+\n+  type Key_Buffer is record\n+    Current, Latch : Key;\n+  end record;\n+\n+  type Block is record\n+    Keys  : Key_Buffer;\n+    Stamp : U16;\n+  end record;\n+  pragma Pack (Block);\n+\n+  My_Block : Block;\n+  My_Stamp : constant := 16#1234#;\n+\n+begin\n+  My_Block.Stamp := My_Stamp;\n+  My_Block.Keys.Latch := My_Block.Keys.Current;\n+  if My_Block.Stamp /= My_Stamp then\n+    raise Program_Error;\n+  end if;\n+end;"}]}