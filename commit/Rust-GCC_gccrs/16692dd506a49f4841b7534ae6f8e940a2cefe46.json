{"sha": "16692dd506a49f4841b7534ae6f8e940a2cefe46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY2OTJkZDUwNmE0OWY0ODQxYjc1MzRhZTZmOGU5NDBhMmNlZmU0Ng==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-05-05T14:35:58Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-05-05T14:35:58Z"}, "message": "re PR c++/10496 ([diagnostic] erroneus suggestion in diagnostic asks the user to write \"&const class::memfun\" which is illegal)\n\n\tPR c++/10496\n\t* typeck.c (build_unary_op): Don't output const qualifier when\n\toutput invalid pointer-to-member diagnostics.\n\n\t* g++.dg/warn/pmf1.C: New test.\n\nFrom-SVN: r66481", "tree": {"sha": "fc3f53c5cb371da8abedf8dbf6bc9aa5716b68b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc3f53c5cb371da8abedf8dbf6bc9aa5716b68b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16692dd506a49f4841b7534ae6f8e940a2cefe46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16692dd506a49f4841b7534ae6f8e940a2cefe46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16692dd506a49f4841b7534ae6f8e940a2cefe46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16692dd506a49f4841b7534ae6f8e940a2cefe46/comments", "author": null, "committer": null, "parents": [{"sha": "2c9d95efce554b186e0bca82125a447b83f17ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9d95efce554b186e0bca82125a447b83f17ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9d95efce554b186e0bca82125a447b83f17ae1"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "3567da7c0b2f59758efc969eb1b1c59c2223f0ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=16692dd506a49f4841b7534ae6f8e940a2cefe46", "patch": "@@ -1,3 +1,9 @@\n+2003-05-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/10496\n+\t* typeck.c (build_unary_op): Don't output const qualifier when\n+\toutput invalid pointer-to-member diagnostics.\n+\n 2003-05-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* decl.c: Fix typos."}, {"sha": "35073dc3a7cfeb6aecb931232169d0376d1e98a1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=16692dd506a49f4841b7534ae6f8e940a2cefe46", "patch": "@@ -4435,12 +4435,21 @@ build_unary_op (code, xarg, noconvert)\n \n \t  if (! flag_ms_extensions)\n \t    {\n+\t      /* Inside constant member functions, the `this' pointer\n+\t\t contains an extra const qualifier.  TYPE_MAIN_VARIANT\n+\t\t is used here to remove this const from the diagnostics.  */\n \t      if (current_class_type\n \t\t  && TREE_OPERAND (arg, 0) == current_class_ref)\n \t\t/* An expression like &memfn.  */\n-\t\tpedwarn (\"ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say `&%T::%D'\", base, name);\n+\t\tpedwarn (\"ISO C++ forbids taking the address of an unqualified\"\n+\t\t\t \" or parenthesized non-static member function to form\"\n+\t\t\t \" a pointer to member function.  Say `&%T::%D'\",\n+\t\t\t TYPE_MAIN_VARIANT (base), name);\n \t      else\n-\t\tpedwarn (\"ISO C++ forbids taking the address of a bound member function to form a pointer to member function.  Say `&%T::%D'\", base, name);\n+\t\tpedwarn (\"ISO C++ forbids taking the address of a bound member\"\n+\t\t\t \" function to form a pointer to member function.\"\n+\t\t\t \"  Say `&%T::%D'\",\n+\t\t\t TYPE_MAIN_VARIANT (base), name);\n \t    }\n \t  arg = build_offset_ref (base, name);\n         }"}, {"sha": "c86b9217d6f90c75259dd5d36bae742570cbde46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16692dd506a49f4841b7534ae6f8e940a2cefe46", "patch": "@@ -1,3 +1,8 @@\n+2003-05-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/10496\n+\t* g++.dg/warn/pmf1.C: New test.\n+\n 2003-05-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/4494"}, {"sha": "013c21b6db9986ea010424ffc91c2db7198e2c52", "filename": "gcc/testsuite/g++.dg/warn/pmf1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpmf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16692dd506a49f4841b7534ae6f8e940a2cefe46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpmf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpmf1.C?ref=16692dd506a49f4841b7534ae6f8e940a2cefe46", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+\n+// Origin: benko@sztaki.hu\n+\n+// PR c++/10496: Incorrect pointer to member function diagnostics\n+// for constant member functions.\n+\n+struct a\n+{\n+  int f() const;\n+};\n+\n+\n+int\n+a::f() const\n+{\n+  int (a::* b)() const = &f; // { dg-error \"&a::f\" }\n+}"}]}