{"sha": "780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwYTViNzE3ODk2MTZmODkwN2E1YTBkODc5YzFlOGI2ZDVjZTY0Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-18T19:18:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-18T19:18:12Z"}, "message": "i386.c (x86_64_ms_sysv_extra_clobbered_registers): New array.\n\n\t* config/i386/i386.c (x86_64_ms_sysv_extra_clobbered_registers):\n\tNew array.\n\t(ix86_expand_call): Remove clobbered_registers array and use\n\tx86_64_ms_sysv_extra_clobbered_registers instead.\n\t* config/i386/i386.h (x86_64_ms_sysv_extra_clobbered_registers):\n\tDeclare here.\n\t* config/i386/predicates.md (call_rex64_ms_sysv_operation): New\n\tpredicate.\n\t* config/i386/i386.md (*call_rex64_ms_sysv): Use\n\tcall_rex64_ms_sysv_operation predicate.  Remove explicit clobbers.\n\t(*call_value_rex64_ms_sysv): Ditto.\n\nFrom-SVN: r198069", "tree": {"sha": "0b833a7bbc6a80096325bfb12c5b9fcc720787c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b833a7bbc6a80096325bfb12c5b9fcc720787c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/comments", "author": null, "committer": null, "parents": [{"sha": "36abe8958790744a78e4159c96d8be05d1458ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36abe8958790744a78e4159c96d8be05d1458ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36abe8958790744a78e4159c96d8be05d1458ff9"}], "stats": {"total": 134, "additions": 82, "deletions": 52}, "files": [{"sha": "48ffa01865b211554b1cf276c2c895432c192c2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "patch": "@@ -1,3 +1,17 @@\n+2013-04-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (x86_64_ms_sysv_extra_clobbered_registers):\n+\tNew array.\n+\t(ix86_expand_call): Remove clobbered_registers array and use\n+\tx86_64_ms_sysv_extra_clobbered_registers instead.\n+\t* config/i386/i386.h (x86_64_ms_sysv_extra_clobbered_registers):\n+\tDeclare here.\n+\t* config/i386/predicates.md (call_rex64_ms_sysv_operation): New\n+\tpredicate.\n+\t* config/i386/i386.md (*call_rex64_ms_sysv): Use\n+\tcall_rex64_ms_sysv_operation predicate.  Remove explicit clobbers.\n+\t(*call_value_rex64_ms_sysv): Ditto.\n+\n 2013-04-18  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2out.c (output_pubnames): Check die_perennial_p of\n@@ -12,7 +26,7 @@\n \t* gimple.h (enum ssa_mode): Define.\n \t(gimple_seq_set_location): New.\n \t* asan.c (build_check_stmt): Change some gimple_build_* calls\n-        to use build_assign and build_type_cast.\n+\tto use build_assign and build_type_cast.\n \n 2013-04-18  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "c365e2c36fc146908def01fadd8b25730f29f967", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "patch": "@@ -2216,6 +2216,16 @@ static int const x86_64_int_return_registers[4] =\n   AX_REG, DX_REG, DI_REG, SI_REG\n };\n \n+/* Additional registers that are clobbered by SYSV calls.  */\n+\n+int const x86_64_ms_sysv_extra_clobbered_registers[12] =\n+{\n+  SI_REG, DI_REG,\n+  XMM6_REG, XMM7_REG,\n+  XMM8_REG, XMM9_REG, XMM10_REG, XMM11_REG,\n+  XMM12_REG, XMM13_REG, XMM14_REG, XMM15_REG\n+};\n+\n /* Define the structure for the machine field in struct function.  */\n \n struct GTY(()) stack_local_entry {\n@@ -23704,17 +23714,10 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t\t  rtx callarg2,\n \t\t  rtx pop, bool sibcall)\n {\n-  /* We need to represent that SI and DI registers are clobbered\n-     by SYSV calls.  */\n-  static int clobbered_registers[] = {\n-\tXMM6_REG, XMM7_REG, XMM8_REG,\n-\tXMM9_REG, XMM10_REG, XMM11_REG,\n-\tXMM12_REG, XMM13_REG, XMM14_REG,\n-\tXMM15_REG, SI_REG, DI_REG\n-  };\n-  rtx vec[ARRAY_SIZE (clobbered_registers) + 3];\n+  int const cregs_size = ARRAY_SIZE (x86_64_ms_sysv_extra_clobbered_registers);\n+  rtx vec[3 + cregs_size];\n   rtx use = NULL, call;\n-  unsigned int vec_len;\n+  unsigned int vec_len = 0;\n \n   if (pop == const0_rtx)\n     pop = NULL;\n@@ -23730,8 +23733,10 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n   else\n     {\n       /* Static functions and indirect calls don't need the pic register.  */\n-      if (flag_pic && (!TARGET_64BIT\n-                       || (ix86_cmodel == CM_LARGE_PIC && DEFAULT_ABI != MS_ABI))\n+      if (flag_pic\n+\t  && (!TARGET_64BIT\n+\t      || (ix86_cmodel == CM_LARGE_PIC\n+\t\t  && DEFAULT_ABI != MS_ABI))\n \t  && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n \t  && ! SYMBOL_REF_LOCAL_P (XEXP (fnaddr, 0)))\n \tuse_reg (&use, pic_offset_table_rtx);\n@@ -23758,7 +23763,6 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       fnaddr = gen_rtx_MEM (QImode, copy_to_mode_reg (word_mode, fnaddr));\n     }\n \n-  vec_len = 0;\n   call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);\n   if (retval)\n     call = gen_rtx_SET (VOIDmode, retval, call);\n@@ -23779,12 +23783,14 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       vec[vec_len++] = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (1, const0_rtx),\n \t\t\t\t       UNSPEC_MS_TO_SYSV_CALL);\n \n-      for (i = 0; i < ARRAY_SIZE (clobbered_registers); i++)\n-\tvec[vec_len++]\n-\t  = gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t     gen_rtx_REG (SSE_REGNO_P (clobbered_registers[i])\n-\t\t\t\t\t  ? TImode : DImode,\n-\t\t\t\t\t  clobbered_registers[i]));\n+      for (i = 0; i < cregs_size; i++)\n+\t{\n+\t  int regno = x86_64_ms_sysv_extra_clobbered_registers[i];\n+\t  enum machine_mode mode = SSE_REGNO_P (regno) ? TImode : DImode;\n+\n+\t  vec[vec_len++]\n+\t    = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (mode, regno));\n+\t}\n     }\n \n   if (vec_len > 1)"}, {"sha": "d0f5f6f72ab5f6bd10c6851a0743817a48dbd3c8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "patch": "@@ -1963,6 +1963,8 @@ extern int const dbx_register_map[FIRST_PSEUDO_REGISTER];\n extern int const dbx64_register_map[FIRST_PSEUDO_REGISTER];\n extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n \n+extern int const x86_64_ms_sysv_extra_clobbered_registers[12];\n+\n /* Before the prologue, RA is at 0(%esp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n   gen_rtx_MEM (VOIDmode, gen_rtx_REG (VOIDmode, STACK_POINTER_REGNUM))"}, {"sha": "8bbcdace2547589b73334d1f4d69fed320b75d62", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "patch": "@@ -10903,21 +10903,10 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_rex64_ms_sysv\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzw\"))\n-\t (match_operand 1))\n-   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n-   (clobber (reg:TI XMM6_REG))\n-   (clobber (reg:TI XMM7_REG))\n-   (clobber (reg:TI XMM8_REG))\n-   (clobber (reg:TI XMM9_REG))\n-   (clobber (reg:TI XMM10_REG))\n-   (clobber (reg:TI XMM11_REG))\n-   (clobber (reg:TI XMM12_REG))\n-   (clobber (reg:TI XMM13_REG))\n-   (clobber (reg:TI XMM14_REG))\n-   (clobber (reg:TI XMM15_REG))\n-   (clobber (reg:DI SI_REG))\n-   (clobber (reg:DI DI_REG))]\n+  [(match_parallel 2 \"call_rex64_ms_sysv_operation\"\n+    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzw\"))\n+\t   (match_operand 1))\n+     (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)])]\n   \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n@@ -11005,23 +10994,12 @@\n   [(set_attr \"type\" \"callv\")])\n \n (define_insn \"*call_value_rex64_ms_sysv\"\n-  [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzw\"))\n-\t      (match_operand 2)))\n-   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n-   (clobber (reg:TI XMM6_REG))\n-   (clobber (reg:TI XMM7_REG))\n-   (clobber (reg:TI XMM8_REG))\n-   (clobber (reg:TI XMM9_REG))\n-   (clobber (reg:TI XMM10_REG))\n-   (clobber (reg:TI XMM11_REG))\n-   (clobber (reg:TI XMM12_REG))\n-   (clobber (reg:TI XMM13_REG))\n-   (clobber (reg:TI XMM14_REG))\n-   (clobber (reg:TI XMM15_REG))\n-   (clobber (reg:DI SI_REG))\n-   (clobber (reg:DI DI_REG))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n+  [(match_parallel 3 \"call_rex64_ms_sysv_operation\"\n+    [(set (match_operand 0)\n+\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzw\"))\n+\t\t(match_operand 2)))\n+     (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)])]\n+ \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n "}, {"sha": "56ebff768ad18c04de29200f238e68401f91d5f3", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780a5b71789616f8907a5a0d879c1e8b6d5ce64b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=780a5b71789616f8907a5a0d879c1e8b6d5ce64b", "patch": "@@ -573,6 +573,36 @@\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"register_no_elim_operand\")))\n \n+;; Return true if OP is a vzeroall operation, known to be a PARALLEL.\n+(define_predicate \"call_rex64_ms_sysv_operation\"\n+  (match_code \"parallel\")\n+{\n+  unsigned creg_size = ARRAY_SIZE (x86_64_ms_sysv_extra_clobbered_registers);\n+  unsigned i;\n+\n+  if ((unsigned) XVECLEN (op, 0) != creg_size + 2)\n+    return false;\n+\n+  for (i = 0; i < creg_size; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i+2);\n+      enum machine_mode mode;\n+      unsigned regno;\n+\n+      if (GET_CODE (elt) != CLOBBER\n+          || GET_CODE (SET_DEST (elt)) != REG)\n+        return false;\n+\n+      regno = x86_64_ms_sysv_extra_clobbered_registers[i];\n+      mode = SSE_REGNO_P (regno) ? TImode : DImode;\n+\n+      if (GET_MODE (SET_DEST (elt)) != mode\n+\t  || REGNO (SET_DEST (elt)) != regno)\n+\treturn false;\n+    }\n+  return true;\n+})\n+\n ;; Match exactly zero.\n (define_predicate \"const0_operand\"\n   (match_code \"const_int,const_double,const_vector\")"}]}