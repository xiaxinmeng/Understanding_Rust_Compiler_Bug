{"sha": "c4d423c74abd470d0161ec2a428fd01de5e1ed76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkNDIzYzc0YWJkNDcwZDAxNjFlYzJhNDI4ZmQwMWRlNWUxZWQ3Ng==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-02-28T19:43:30Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-16T05:09:01Z"}, "message": "AVX512FP16: Add vmovw/vmovsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h: (_mm_cvtsi16_si128):\n\tNew intrinsic.\n\t(_mm_cvtsi128_si16): Likewise.\n\t(_mm_mask_load_sh): Likewise.\n\t(_mm_maskz_load_sh): Likewise.\n\t(_mm_mask_store_sh): Likewise.\n\t(_mm_move_sh): Likewise.\n\t(_mm_mask_move_sh): Likewise.\n\t(_mm_maskz_move_sh): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_special_args_builtin): Handle new builtin types.\n\t(ix86_expand_vector_init_one_nonzero): Adjust for FP16 target.\n\t* config/i386/sse.md (VI2F): New mode iterator.\n\t(vec_set<mode>_0): Use new mode iterator.\n\t(avx512f_mov<ssescalarmodelower>_mask): Adjust for HF vector mode.\n\t(avx512f_store<mode>_mask): Ditto.", "tree": {"sha": "700b63883398be470f3dca67484ecfbc32120084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/700b63883398be470f3dca67484ecfbc32120084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d423c74abd470d0161ec2a428fd01de5e1ed76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d423c74abd470d0161ec2a428fd01de5e1ed76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d423c74abd470d0161ec2a428fd01de5e1ed76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d423c74abd470d0161ec2a428fd01de5e1ed76/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d970817a5892b6bb4634499d47f6d2ee7d46e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d970817a5892b6bb4634499d47f6d2ee7d46e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d970817a5892b6bb4634499d47f6d2ee7d46e4c"}], "stats": {"total": 111, "additions": 95, "deletions": 16}, "files": [{"sha": "baa5be485e9fa2dc81af5a9ab8fc57d2993cab7e", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=c4d423c74abd470d0161ec2a428fd01de5e1ed76", "patch": "@@ -2453,6 +2453,65 @@ _mm512_maskz_getmant_round_ph (__mmask32 __U, __m512h __A,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vmovw.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsi16_si128 (short __A)\n+{\n+  return _mm_set_epi16 (0, 0, 0, 0, 0, 0, 0, __A);\n+}\n+\n+extern __inline short\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsi128_si16 (__m128i __A)\n+{\n+  return __builtin_ia32_vec_ext_v8hi ((__v8hi)__A, 0);\n+}\n+\n+/* Intrinsics vmovsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_load_sh (__m128h __A, __mmask8 __B, _Float16 const* __C)\n+{\n+  return __builtin_ia32_loadsh_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_load_sh (__mmask8 __A, _Float16 const* __B)\n+{\n+  return __builtin_ia32_loadsh_mask (__B, _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_store_sh (_Float16 const* __A, __mmask8 __B, __m128h __C)\n+{\n+  __builtin_ia32_storesh_mask (__A,  __C, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_move_sh (__m128h __A, __m128h  __B)\n+{\n+  __A[0] = __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_move_sh (__m128h __A, __mmask8 __B, __m128h  __C, __m128h __D)\n+{\n+  return __builtin_ia32_vmovsh_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_move_sh (__mmask8 __A, __m128h  __B, __m128h __C)\n+{\n+  return __builtin_ia32_vmovsh_mask (__B, __C, _mm_setzero_ph (), __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "126cc0c45ce54436c6e3bbf7e82da702023d3ed8", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=c4d423c74abd470d0161ec2a428fd01de5e1ed76", "patch": "@@ -134,6 +134,7 @@ DEF_POINTER_TYPE (PCVOID, VOID, CONST)\n DEF_POINTER_TYPE (PVOID, VOID)\n DEF_POINTER_TYPE (PDOUBLE, DOUBLE)\n DEF_POINTER_TYPE (PFLOAT, FLOAT)\n+DEF_POINTER_TYPE (PCFLOAT16, FLOAT16, CONST)\n DEF_POINTER_TYPE (PSHORT, SHORT)\n DEF_POINTER_TYPE (PUSHORT, USHORT)\n DEF_POINTER_TYPE (PINT, INT)\n@@ -1308,6 +1309,8 @@ DEF_FUNCTION_TYPE (QI, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (HI, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (SI, V32HF, INT, USI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n+DEF_FUNCTION_TYPE (VOID, PCFLOAT16, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, PCFLOAT16, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, INT, V8HF, UQI)"}, {"sha": "b8f782b27502648ee5e872474e714987e4e1068e", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=c4d423c74abd470d0161ec2a428fd01de5e1ed76", "patch": "@@ -393,6 +393,10 @@ BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_us_truncatev32hiv32qi2_mas\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_ss_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovswb512mem_mask\", IX86_BUILTIN_PMOVSWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovwb512mem_mask\", IX86_BUILTIN_PMOVWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)\n \n+/* AVX512FP16 */\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_loadhf_mask, \"__builtin_ia32_loadsh_mask\", IX86_BUILTIN_LOADSH_MASK, UNKNOWN, (int) V8HF_FTYPE_PCFLOAT16_V8HF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_storehf_mask, \"__builtin_ia32_storesh_mask\", IX86_BUILTIN_STORESH_MASK, UNKNOWN, (int) VOID_FTYPE_PCFLOAT16_V8HF_UQI)\n+\n /* RDPKRU and WRPKRU.  */\n BDESC (OPTION_MASK_ISA_PKU, 0, CODE_FOR_rdpkru,  \"__builtin_ia32_rdpkru\", IX86_BUILTIN_RDPKRU, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_PKU, 0, CODE_FOR_wrpkru,  \"__builtin_ia32_wrpkru\", IX86_BUILTIN_WRPKRU, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n@@ -2826,6 +2830,7 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_getexpv8hf_mask, \"__builtin_ia32_getexpph128_mask\", IX86_BUILTIN_GETEXPPH128, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_getmantv16hf_mask, \"__builtin_ia32_getmantph256_mask\", IX86_BUILTIN_GETMANTPH256, UNKNOWN, (int) V16HF_FTYPE_V16HF_INT_V16HF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_getmantv8hf_mask, \"__builtin_ia32_getmantph128_mask\", IX86_BUILTIN_GETMANTPH128, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_V8HF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_movhf_mask, \"__builtin_ia32_vmovsh_mask\", IX86_BUILTIN_VMOVSH_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)"}, {"sha": "7e830873691be259ebcce5ba0ff2955e0214da27", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=c4d423c74abd470d0161ec2a428fd01de5e1ed76", "patch": "@@ -11085,6 +11085,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PFLOAT_V16SF_UHI:\n     case VOID_FTYPE_PFLOAT_V8SF_UQI:\n     case VOID_FTYPE_PFLOAT_V4SF_UQI:\n+    case VOID_FTYPE_PCFLOAT16_V8HF_UQI:\n     case VOID_FTYPE_PV32QI_V32HI_USI:\n     case VOID_FTYPE_PV16QI_V16HI_UHI:\n     case VOID_FTYPE_PUDI_V8HI_UQI:\n@@ -11157,6 +11158,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case V16SF_FTYPE_PCFLOAT_V16SF_UHI:\n     case V8SF_FTYPE_PCFLOAT_V8SF_UQI:\n     case V4SF_FTYPE_PCFLOAT_V4SF_UQI:\n+    case V8HF_FTYPE_PCFLOAT16_V8HF_UQI:\n       nargs = 3;\n       klass = load;\n       memory = 0;\n@@ -14194,6 +14196,8 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n       break;\n     case E_V8HImode:\n       use_vector_set = TARGET_SSE2;\n+      gen_vec_set_0 = TARGET_AVX512FP16 && one_var == 0\n+\t? gen_vec_setv8hi_0 : NULL;\n       break;\n     case E_V8QImode:\n       use_vector_set = TARGET_MMX_WITH_SSE && TARGET_SSE4_1;\n@@ -14205,8 +14209,12 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n       use_vector_set = TARGET_SSE4_1;\n       break;\n     case E_V32QImode:\n+      use_vector_set = TARGET_AVX;\n+      break;\n     case E_V16HImode:\n       use_vector_set = TARGET_AVX;\n+      gen_vec_set_0 = TARGET_AVX512FP16 && one_var == 0\n+\t? gen_vec_setv16hi_0 : NULL;\n       break;\n     case E_V8SImode:\n       use_vector_set = TARGET_AVX;\n@@ -14254,6 +14262,9 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n       use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n       gen_vec_set_0 = gen_vec_setv32hf_0;\n       break;\n+    case E_V32HImode:\n+      use_vector_set = TARGET_AVX512FP16 && one_var == 0;\n+      gen_vec_set_0 = gen_vec_setv32hi_0;\n     default:\n       break;\n     }"}, {"sha": "5dbbed0c09d573c790d5845e6e35467ed3a66f51", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d423c74abd470d0161ec2a428fd01de5e1ed76/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c4d423c74abd470d0161ec2a428fd01de5e1ed76", "patch": "@@ -779,6 +779,7 @@\n   (V32HF \"TARGET_AVX512BW\")])\n \n ;; Int-float size matches\n+(define_mode_iterator VI2F [V8HI V16HI V32HI V8HF V16HF V32HF])\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n (define_mode_iterator VI8F_128 [V2DI V2DF])\n (define_mode_iterator VI4F_256 [V8SI V8SF])\n@@ -1361,13 +1362,13 @@\n   [(set (match_dup 0) (match_dup 1))])\n \n (define_insn \"avx512f_mov<ssescalarmodelower>_mask\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (match_operand:VF_128 2 \"register_operand\" \"v\")\n-\t    (match_operand:VF_128 3 \"nonimm_or_0_operand\" \"0C\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (match_operand:VFH_128 2 \"register_operand\" \"v\")\n+\t    (match_operand:VFH_128 3 \"nonimm_or_0_operand\" \"0C\")\n \t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n-\t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t  (match_operand:VFH_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n   \"vmov<ssescalarmodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n@@ -1380,7 +1381,7 @@\n \t(vec_merge:<ssevecmode>\n \t  (vec_merge:<ssevecmode>\n \t    (vec_duplicate:<ssevecmode>\n-\t      (match_operand:MODEF 1 \"memory_operand\"))\n+\t      (match_operand:MODEFH 1 \"memory_operand\"))\n \t    (match_operand:<ssevecmode> 2 \"nonimm_or_0_operand\")\n \t    (match_operand:QI 3 \"register_operand\"))\n \t  (match_dup 4)\n@@ -1393,7 +1394,7 @@\n \t(vec_merge:<ssevecmode>\n \t  (vec_merge:<ssevecmode>\n \t    (vec_duplicate:<ssevecmode>\n-\t      (match_operand:MODEF 1 \"memory_operand\" \"m\"))\n+\t      (match_operand:MODEFH 1 \"memory_operand\" \"m\"))\n \t    (match_operand:<ssevecmode> 2 \"nonimm_or_0_operand\" \"0C\")\n \t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n \t  (match_operand:<ssevecmode> 4 \"const0_operand\" \"C\")\n@@ -1406,11 +1407,11 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_store<mode>_mask\"\n-  [(set (match_operand:MODEF 0 \"memory_operand\" \"=m\")\n-\t(if_then_else:MODEF\n+  [(set (match_operand:MODEFH 0 \"memory_operand\" \"=m\")\n+\t(if_then_else:MODEFH\n \t  (and:QI (match_operand:QI 2 \"register_operand\" \"Yk\")\n \t\t (const_int 1))\n-\t  (vec_select:MODEF\n+\t  (vec_select:MODEFH\n \t    (match_operand:<ssevecmode> 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))\n \t  (match_dup 0)))]\n@@ -8818,11 +8819,11 @@\n \n ;; vmovw clears also the higer bits\n (define_insn \"vec_set<mode>_0\"\n-  [(set (match_operand:VF_AVX512FP16 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_AVX512FP16\n-\t  (vec_duplicate:VF_AVX512FP16\n-\t    (match_operand:HF 2 \"nonimmediate_operand\" \"r,m\"))\n-\t  (match_operand:VF_AVX512FP16 1 \"const0_operand\" \"C,C\")\n+  [(set (match_operand:VI2F 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VI2F\n+\t  (vec_duplicate:VI2F\n+\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m\"))\n+\t  (match_operand:VI2F 1 \"const0_operand\" \"C,C\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512FP16\"\n   \"@"}]}