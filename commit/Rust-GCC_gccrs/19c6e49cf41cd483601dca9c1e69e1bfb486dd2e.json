{"sha": "19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljNmU0OWNmNDFjZDQ4MzYwMWRjYTljMWU2OWUxYmZiNDg2ZGQyZQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-16T10:12:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-16T10:12:15Z"}, "message": "[multiple changes]\n\n2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Include): Including a node which is also a compilation\n\tunit terminates the search because there are no more lists to examine.\n\n2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Ensure that a renaming\n\tdeclaration does not define a primitive operation of a tagged type for\n\tSPARK.\n\t(Check_SPARK_Primitive_Operation): New routine.\n\n2017-11-16  Arnaud Charlet  <charlet@adacore.com>\n\n\t* libgnat/a-elchha.adb (Last_Chance_Handler): Display Argv (0) in\n\tmessage when using -E binder switch.\n\n2017-11-16  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* errout.ads: Fix minor typo in comment.\n\nFrom-SVN: r254804", "tree": {"sha": "725e8f46ba1df06a1de0a852f2eb3a0d589bc5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725e8f46ba1df06a1de0a852f2eb3a0d589bc5a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/comments", "author": null, "committer": null, "parents": [{"sha": "6361db43b2a245e9b38cfb84d4f725e8c410812f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6361db43b2a245e9b38cfb84d4f725e8c410812f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6361db43b2a245e9b38cfb84d4f725e8c410812f"}], "stats": {"total": 141, "additions": 127, "deletions": 14}, "files": [{"sha": "9306265edb55e2f8ae7b0a8437fd0e4aa918eb31", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "patch": "@@ -1,3 +1,24 @@\n+2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Include): Including a node which is also a compilation\n+\tunit terminates the search because there are no more lists to examine.\n+\n+2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Ensure that a renaming\n+\tdeclaration does not define a primitive operation of a tagged type for\n+\tSPARK.\n+\t(Check_SPARK_Primitive_Operation): New routine.\n+\n+2017-11-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-elchha.adb (Last_Chance_Handler): Display Argv (0) in\n+\tmessage when using -E binder switch.\n+\n+2017-11-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.ads: Fix minor typo in comment.\n+\n 2017-11-16  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Process_Subtype): If the subtype indication does not"}, {"sha": "1d8b8fc194e3b3950881e2b96be3b813cbed5216", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "patch": "@@ -218,7 +218,7 @@ package Errout is\n    --    Insertion character } (Right brace: insert type reference)\n    --      The character } is replaced by a string describing the type\n    --      referenced by the entity whose Id is stored in Error_Msg_Node_1.\n-   --      the string gives the name or description of the type, and also\n+   --      The string gives the name or description of the type, and also\n    --      where appropriate the location of its declaration. Special cases\n    --      like \"some integer type\" are handled appropriately. Only one } is\n    --      allowed in a message, since there is not enough room for two (the"}, {"sha": "0d612c2b3856ffc06ea780a1eb67f4fb75eb0138", "filename": "gcc/ada/libgnat/a-elchha.adb", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Flibgnat%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Flibgnat%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-elchha.adb?ref=19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "patch": "@@ -34,7 +34,7 @@\n pragma Compiler_Unit_Warning;\n \n with System.Standard_Library; use System.Standard_Library;\n-with System.Soft_Links;\n+with System.Soft_Links; use System;\n \n procedure Ada.Exceptions.Last_Chance_Handler\n   (Except : Exception_Occurrence)\n@@ -67,6 +67,15 @@ is\n    pragma Import (Ada, To_Stderr, \"__gnat_to_stderr\");\n    --  Little routine to output string to stderr\n \n+   Gnat_Argv : System.Address;\n+   pragma Import (C, Gnat_Argv, \"gnat_argv\");\n+\n+   procedure Fill_Arg (A : System.Address; Arg_Num : Integer);\n+   pragma Import (C, Fill_Arg, \"__gnat_fill_arg\");\n+\n+   function Len_Arg (Arg_Num : Integer) return Integer;\n+   pragma Import (C, Len_Arg, \"__gnat_len_arg\");\n+\n    Ptr   : Natural := 0;\n    Nobuf : String (1 .. 0);\n \n@@ -131,7 +140,20 @@ begin\n \n    else\n       To_Stderr (Nline);\n-      To_Stderr (\"Execution terminated by unhandled exception\");\n+\n+      if Gnat_Argv = System.Null_Address then\n+         To_Stderr (\"Execution terminated by unhandled exception\");\n+      else\n+         declare\n+            Arg : aliased String (1 .. Len_Arg (0));\n+         begin\n+            Fill_Arg (Arg'Address, 0);\n+            To_Stderr (\"Execution of \");\n+            To_Stderr (Arg);\n+            To_Stderr (\" terminated by unhandled exception\");\n+         end;\n+      end if;\n+\n       To_Stderr (Nline);\n \n       Append_Info_Untailored_Exception_Information (Except, Nobuf, Ptr);"}, {"sha": "729e717f4ad76c009399cc6aa818bc71823bd4cc", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "patch": "@@ -59,6 +59,7 @@ with Sem_Disp; use Sem_Disp;\n with Sem_Dist; use Sem_Dist;\n with Sem_Elab; use Sem_Elab;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sem_Type; use Sem_Type;\n@@ -1924,6 +1925,10 @@ package body Sem_Ch8 is\n       --    have one. Otherwise the subtype of Sub's return profile must\n       --    exclude null.\n \n+      procedure Check_SPARK_Primitive_Operation (Subp_Id : Entity_Id);\n+      --  Ensure that a SPARK renaming denoted by its entity Subp_Id does not\n+      --  declare a primitive operation of a tagged type (SPARK RM 6.1.1(3)).\n+\n       procedure Freeze_Actual_Profile;\n       --  In Ada 2012, enforce the freezing rule concerning formal incomplete\n       --  types: a callable entity freezes its profile, unless it has an\n@@ -2519,6 +2524,52 @@ package body Sem_Ch8 is\n          end if;\n       end Check_Null_Exclusion;\n \n+      -------------------------------------\n+      -- Check_SPARK_Primitive_Operation --\n+      -------------------------------------\n+\n+      procedure Check_SPARK_Primitive_Operation (Subp_Id : Entity_Id) is\n+         Prag : constant Node_Id := SPARK_Pragma (Subp_Id);\n+         Typ  : Entity_Id;\n+\n+      begin\n+         --  Nothing to do when the subprogram appears within an instance\n+\n+         if In_Instance then\n+            return;\n+\n+         --  Nothing to do when the subprogram is not subject to SPARK_Mode On\n+         --  because this check applies to SPARK code only.\n+\n+         elsif not (Present (Prag)\n+                     and then Get_SPARK_Mode_From_Annotation (Prag) = On)\n+         then\n+            return;\n+\n+         --  Nothing to do when the subprogram is not a primitive operation\n+\n+         elsif not Is_Primitive (Subp_Id) then\n+            return;\n+         end if;\n+\n+         Typ := Find_Dispatching_Type (Subp_Id);\n+\n+         --  Nothing to do when the subprogram is a primitive operation of an\n+         --  untagged type.\n+\n+         if No (Typ) then\n+            return;\n+         end if;\n+\n+         --  At this point a renaming declaration introduces a new primitive\n+         --  operation for a tagged type.\n+\n+         Error_Msg_Node_2 := Typ;\n+         Error_Msg_NE\n+           (\"subprogram renaming & cannot declare primitive for type & \"\n+            & \"(SPARK RM 6.1.1(3))\", N, Subp_Id);\n+      end Check_SPARK_Primitive_Operation;\n+\n       ---------------------------\n       -- Freeze_Actual_Profile --\n       ---------------------------\n@@ -2899,7 +2950,7 @@ package body Sem_Ch8 is\n \n       --  Set SPARK mode from current context\n \n-      Set_SPARK_Pragma (New_S, SPARK_Mode_Pragma);\n+      Set_SPARK_Pragma           (New_S, SPARK_Mode_Pragma);\n       Set_SPARK_Pragma_Inherited (New_S);\n \n       Rename_Spec := Find_Corresponding_Spec (N);\n@@ -3009,13 +3060,16 @@ package body Sem_Ch8 is\n          Generate_Definition (New_S);\n          New_Overloaded_Entity (New_S);\n \n-         if Is_Entity_Name (Nam)\n-           and then Is_Intrinsic_Subprogram (Entity (Nam))\n+         if not (Is_Entity_Name (Nam)\n+                  and then Is_Intrinsic_Subprogram (Entity (Nam)))\n          then\n-            null;\n-         else\n             Check_Delayed_Subprogram (New_S);\n          end if;\n+\n+         --  Verify that a SPARK renaming does not declare a primitive\n+         --  operation of a tagged type.\n+\n+         Check_SPARK_Primitive_Operation (New_S);\n       end if;\n \n       --  There is no need for elaboration checks on the new entity, which may\n@@ -3205,10 +3259,9 @@ package body Sem_Ch8 is\n \n          elsif Requires_Overriding (Old_S)\n            or else\n-              (Is_Abstract_Subprogram (Old_S)\n-                 and then Present (Find_Dispatching_Type (Old_S))\n-                 and then\n-                   not Is_Abstract_Type (Find_Dispatching_Type (Old_S)))\n+             (Is_Abstract_Subprogram (Old_S)\n+               and then Present (Find_Dispatching_Type (Old_S))\n+               and then not Is_Abstract_Type (Find_Dispatching_Type (Old_S)))\n          then\n             Error_Msg_N\n               (\"renamed entity cannot be subprogram that requires overriding \""}, {"sha": "b66eae4e77d79f33a42d8c6ee63b1847b8a09df2", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "patch": "@@ -4245,7 +4245,7 @@ package body Sem_Elab is\n       procedure Include (N : Node_Id; Curr : in out Node_Id);\n       pragma Inline (Include);\n       --  Update the Curr and Start pointers to include arbitrary construct N\n-      --  in the early call region.\n+      --  in the early call region. This routine raises ECR_Found.\n \n       function Is_OK_Preelaborable_Construct (N : Node_Id) return Boolean;\n       pragma Inline (Is_OK_Preelaborable_Construct);\n@@ -4559,7 +4559,24 @@ package body Sem_Elab is\n       procedure Include (N : Node_Id; Curr : in out Node_Id) is\n       begin\n          Start := N;\n-         Curr  := Prev (Start);\n+\n+         --  The input node is a compilation unit. This terminates the search\n+         --  because there are no more lists to inspect and there are no more\n+         --  enclosing constructs to climb up to. The transitions are:\n+         --\n+         --    private declarations -> terminate\n+         --    visible declarations -> terminate\n+         --    statements           -> terminate\n+         --    declarations         -> terminate\n+\n+         if Nkind (Parent (Start)) = N_Compilation_Unit then\n+            raise ECR_Found;\n+\n+         --  Otherwise the input node is still within some list\n+\n+         else\n+            Curr := Prev (Start);\n+         end if;\n       end Include;\n \n       -----------------------------------"}]}