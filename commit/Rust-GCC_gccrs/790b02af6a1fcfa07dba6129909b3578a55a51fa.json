{"sha": "790b02af6a1fcfa07dba6129909b3578a55a51fa", "node_id": "C_kwDOANBUbNoAKDc5MGIwMmFmNmExZmNmYTA3ZGJhNjEyOTkwOWIzNTc4YTU1YTUxZmE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-06T02:29:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-11T12:37:03Z"}, "message": "c++: -Wplacement-new and anon union member [PR100370]\n\nThis bug was an object/value confusion; we are interested in the size\nof *b.ip, but instead the code was calculating the size of b.ip itself.\n\nThis seems to be because compute_objsize will compute the size of whatever\nobject it can find in the argument: if you pass it a VAR_DECL, it gives you\nthe size of that variable.  If you pass it an ADDR_EXPR of a VAR_DECL, it\nagain gives you the size of the variable.  The way you can tell the\ndifference is by looking at the deref member of access_ref: if it's -1, the\nargument is a pointer to the object.  Since that's what we're interested in,\nwe should check for that, like check_dangling_stores does.\n\nThis regressed some tests because compute_objsize_r was wrongly zeroing\nderef in the POINTER_PLUS_EXPR handling; adding an offset to a pointer\ndoesn't change whether the pointer is itself a variable or a pointer to\none.  In fact, handling POINTER_PLUS_EXPR only really makes sense for deref\n== -1, where we're adjusting a pointer to the variable.\n\n\tPR c++/100370\n\ngcc/cp/ChangeLog:\n\n\t* init.cc (warn_placement_new_too_small): Check deref.\n\ngcc/ChangeLog:\n\n\t* pointer-query.cc (compute_objsize_r) [POINTER_PLUS_EXPR]: Require\n\tderef == -1.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wplacement-new-size-11.C: New test.", "tree": {"sha": "866dc26b9e6c6429479a82e3981d21420d710251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866dc26b9e6c6429479a82e3981d21420d710251"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/790b02af6a1fcfa07dba6129909b3578a55a51fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790b02af6a1fcfa07dba6129909b3578a55a51fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790b02af6a1fcfa07dba6129909b3578a55a51fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790b02af6a1fcfa07dba6129909b3578a55a51fa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42aa68bf1ad745a6b36ab9beed1fc2e77ac3f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42aa68bf1ad745a6b36ab9beed1fc2e77ac3f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42aa68bf1ad745a6b36ab9beed1fc2e77ac3f88"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "ce332c7e3292915bf42fe1ad3624bedd5e1332df", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b02af6a1fcfa07dba6129909b3578a55a51fa/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b02af6a1fcfa07dba6129909b3578a55a51fa/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=790b02af6a1fcfa07dba6129909b3578a55a51fa", "patch": "@@ -2811,6 +2811,11 @@ warn_placement_new_too_small (tree type, tree nelts, tree size, tree oper)\n   if (!objsize)\n     return;\n \n+  /* We can only draw conclusions if ref.deref == -1,\n+     i.e. oper is the address of the object.  */\n+  if (ref.deref != -1)\n+    return;\n+\n   offset_int bytes_avail = wi::to_offset (objsize);\n   offset_int bytes_need;\n "}, {"sha": "d93657f32064b41a1da269a6e9c1e67edb6781cc", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b02af6a1fcfa07dba6129909b3578a55a51fa/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b02af6a1fcfa07dba6129909b3578a55a51fa/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=790b02af6a1fcfa07dba6129909b3578a55a51fa", "patch": "@@ -2299,9 +2299,10 @@ compute_objsize_r (tree ptr, gimple *stmt, bool addr, int ostype,\n       if (!compute_objsize_r (ref, stmt, addr, ostype, pref, snlim, qry))\n \treturn false;\n \n-      /* Clear DEREF since the offset is being applied to the target\n-\t of the dereference.  */\n-      pref->deref = 0;\n+      /* The below only makes sense if the offset is being applied to the\n+\t address of the object.  */\n+      if (pref->deref != -1)\n+\treturn false;\n \n       offset_int orng[2];\n       tree off = pref->eval (TREE_OPERAND (ptr, 1));"}, {"sha": "a6fe82e90ae63af92eb7f53b35bc750b6ec28ef5", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size-11.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b02af6a1fcfa07dba6129909b3578a55a51fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b02af6a1fcfa07dba6129909b3578a55a51fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-11.C?ref=790b02af6a1fcfa07dba6129909b3578a55a51fa", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/100370\n+// { dg-do compile { target c++11 } }\n+\n+using size_t = decltype(sizeof(1));\n+inline void *operator new (size_t s, void *p) { return p; }\n+\n+int main()\n+{\n+  struct s1 { int iv[4]; };\n+  struct s2 { union { char* cp; int* ip; }; };\n+\n+  s2 b;\n+  b.ip=new int[8];\n+  new (b.ip+4) s1;\t\t// { dg-bogus \"-Wplacement-new\" }\n+}"}]}