{"sha": "ddce00dba244d889d688490517fb106169a72f01", "node_id": "C_kwDOANBUbNoAKGRkY2UwMGRiYTI0NGQ4ODlkNjg4NDkwNTE3ZmIxMDYxNjlhNzJmMDE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-19T01:24:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-19T01:24:06Z"}, "message": "i386: Fix GLC tuning with -masm=intel [PR104104]\n\n> > On Sat, Jan 15, 2022 at 5:39 PM Hongyu Wang <wwwhhhyyy333@gmail.com> wrote:\n> > > Thanks for the suggestion, here is the updated patch that survived\n> > > bootstrap/regtest.\n\nUnfortunately the patch results in assembler failures with -masm=intel.\n\n> > > > +  if (TARGET_DEST_FALSE_DEPENDENCY\n> > > > +      && get_attr_dest_false_dep (insn) ==\n> > > > +        DEST_FALSE_DEP_TRUE)\n> > > > +    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n\nAll the vxorps insns were emitted like the above, which means for -masm=sysv\nit looks like\n        vxorps  %xmm3, %xmm3, %xmm3\nbut for -masm=intel like:\n        vxorps\nWe want obviously\n        vxorps  xmm3, xmm3, xmm3\nso the following patch just drops the errorneous {}s.\n\n2022-01-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104104\n\t* config/i386/sse.md\n\t(<avx512>_<complexopname>_<mode><maskc_name><round_name>,\n\tavx512fp16_<complexopname>sh_v8hf<mask_scalarc_name><round_scalarcz_name>,\n\tavx512dq_mul<mode>3<mask_name>, <avx2_avx512>_permvar<mode><mask_name>,\n\tavx2_perm<mode>_1<mask_name>, avx512f_perm<mode>_1<mask_name>,\n\tavx512dq_rangep<mode><mask_name><round_saeonly_name>,\n\tavx512dq_ranges<mode><mask_scalar_name><round_saeonly_scalar_name>,\n\t<avx512>_getmant<mode><mask_name><round_saeonly_name>,\n\tavx512f_vgetmant<mode><mask_scalar_name><round_saeonly_scalar_name>):\n\tUse vxorps\\t%x0, %x0, %x0 instead of vxorps\\t{%x0, %x0, %x0}.\n\n\t* gcc.target/i386/pr104104.c: New test.", "tree": {"sha": "4fce2d3cf3d19fcd7510a24d62d4d4154590f9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fce2d3cf3d19fcd7510a24d62d4d4154590f9e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddce00dba244d889d688490517fb106169a72f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddce00dba244d889d688490517fb106169a72f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddce00dba244d889d688490517fb106169a72f01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddce00dba244d889d688490517fb106169a72f01/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6325041c2b68af096195e0eef92091b2e293e950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6325041c2b68af096195e0eef92091b2e293e950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6325041c2b68af096195e0eef92091b2e293e950"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "829107e00c9b1382711c6590cb6dd62a071e5238", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce00dba244d889d688490517fb106169a72f01/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce00dba244d889d688490517fb106169a72f01/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ddce00dba244d889d688490517fb106169a72f01", "patch": "@@ -6539,7 +6539,7 @@\n {\n   if (TARGET_DEST_FALSE_DEP_FOR_GLC\n       && <maskc_dest_false_dep_for_glc_cond>)\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"v<complexopname><ssemodesuffix>\\t{<round_maskc_op3>%2, %1, %0<maskc_operand3>|%0<maskc_operand3>, %1, %2<round_maskc_op3>}\";\n }\n   [(set_attr \"type\" \"ssemul\")\n@@ -6750,7 +6750,7 @@\n {\n   if (TARGET_DEST_FALSE_DEP_FOR_GLC\n       && <mask_scalarc_dest_false_dep_for_glc_cond>)\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"v<complexopname>sh\\t{<round_scalarc_mask_op3>%2, %1, %0<mask_scalarc_operand3>|%0<mask_scalarc_operand3>, %1, %2<round_scalarc_mask_op3>}\";\n }\n   [(set_attr \"type\" \"ssemul\")\n@@ -15222,7 +15222,7 @@\n       && <mask3_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1])\n       && !reg_mentioned_p (operands[0], operands[2]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vpmullq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sseimul\")\n@@ -24658,7 +24658,7 @@\n       && <mask3_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1])\n       && !reg_mentioned_p (operands[0], operands[2]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vperm<ssemodesuffix>\\t{%1, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1}\";\n }\n   [(set_attr \"type\" \"sselog\")\n@@ -24900,7 +24900,7 @@\n   if (TARGET_DEST_FALSE_DEP_FOR_GLC\n       && <mask6_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vperm<ssemodesuffix>\\t{%2, %1, %0<mask_operand6>|%0<mask_operand6>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n@@ -24975,7 +24975,7 @@\n   if (TARGET_DEST_FALSE_DEP_FOR_GLC\n       && <mask10_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vperm<ssemodesuffix>\\t{%2, %1, %0<mask_operand10>|%0<mask_operand10>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n@@ -26880,7 +26880,7 @@\n       && <mask4_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1])\n       && !reg_mentioned_p (operands[0], operands[2]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vrange<ssemodesuffix>\\t{%3, <round_saeonly_mask_op4>%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2<round_saeonly_mask_op4>, %3}\";\n }\n   [(set_attr \"type\" \"sse\")\n@@ -26903,7 +26903,7 @@\n       && <mask_scalar4_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1])\n       && !reg_mentioned_p (operands[0], operands[2]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\";\n }\n   [(set_attr \"type\" \"sse\")\n@@ -26949,7 +26949,7 @@\n   if (TARGET_DEST_FALSE_DEP_FOR_GLC\n       && <mask3_dest_false_dep_for_glc_cond>\n       && MEM_P (operands[1]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vgetmant<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\";\n }\n   [(set_attr \"prefix\" \"evex\")\n@@ -26971,7 +26971,7 @@\n       && <mask_scalar4_dest_false_dep_for_glc_cond>\n       && !reg_mentioned_p (operands[0], operands[1])\n       && !reg_mentioned_p (operands[0], operands[2]))\n-    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+    output_asm_insn (\"vxorps\\t%x0, %x0, %x0\", operands);\n   return \"vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\";\n }\n    [(set_attr \"prefix\" \"evex\")"}, {"sha": "1653caedc037e91cd37d259c5402436e8ad66f41", "filename": "gcc/testsuite/gcc.target/i386/pr104104.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce00dba244d889d688490517fb106169a72f01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce00dba244d889d688490517fb106169a72f01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104104.c?ref=ddce00dba244d889d688490517fb106169a72f01", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/104104 */\n+/* { dg-do assemble { target vect_simd_clones } } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-march=alderlake -masm=intel -O1 -fallow-store-data-races -funroll-all-loops\" } */\n+\n+__attribute__ ((simd)) short int\n+foo (void)\n+{\n+  return 0;\n+}"}]}