{"sha": "de594739f7ec9f9938e0ab1c7303f7386ba0860c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU1OTQ3MzlmN2VjOWY5OTM4ZTBhYjFjNzMwM2Y3Mzg2YmEwODYwYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-16T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-16T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "95b9ab8849387e1024abd396acd4f4701dbad8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95b9ab8849387e1024abd396acd4f4701dbad8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de594739f7ec9f9938e0ab1c7303f7386ba0860c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de594739f7ec9f9938e0ab1c7303f7386ba0860c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de594739f7ec9f9938e0ab1c7303f7386ba0860c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de594739f7ec9f9938e0ab1c7303f7386ba0860c/comments", "author": null, "committer": null, "parents": [{"sha": "f9d4544df5533df9f6144f4ca40b64195fd3de47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d4544df5533df9f6144f4ca40b64195fd3de47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d4544df5533df9f6144f4ca40b64195fd3de47"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "be7c24ce1b3d2a2fb5141d045cf041b6c18ee9e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de594739f7ec9f9938e0ab1c7303f7386ba0860c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de594739f7ec9f9938e0ab1c7303f7386ba0860c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de594739f7ec9f9938e0ab1c7303f7386ba0860c", "patch": "@@ -1,3 +1,122 @@\n+2021-02-15  Maya Rashish  <coypu@sdf.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_init_builtins):\n+\tCall SUBTARGET_INIT_BUILTINS.\n+\n+2021-02-15  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/98872\n+\t* init-regs.c (initialize_uninitialized_regs): Skip initialization\n+\tif CONST0_RTX is NULL.\n+\n+2021-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98863\n+\t* rtl-ssa/functions.h (function_info::bb_live_out_info): Delete.\n+\t(function_info::build_info): Turn into a declaration, moving the\n+\tdefinition to internals.h.\n+\t(function_info::bb_walker): Declare.\n+\t(function_info::create_reg_use): Likewise.\n+\t(function_info::calculate_potential_phi_regs): Take a build_info\n+\tparameter.\n+\t(function_info::place_phis, function_info::create_ebbs): Declare.\n+\t(function_info::calculate_ebb_live_in_for_debug): Likewise.\n+\t(function_info::populate_backedge_phis): Delete.\n+\t(function_info::start_block, function_info::end_block): Declare.\n+\t(function_info::populate_phi_inputs): Delete.\n+\t(function_info::m_potential_phi_regs): Move information to build_info.\n+\t* rtl-ssa/internals.h: New file.\n+\t(function_info::bb_phi_info): New class.\n+\t(function_info::build_info): Moved from functions.h.\n+\tAdd a constructor and destructor.\n+\t(function_info::build_info::ebb_use): Delete.\n+\t(function_info::build_info::ebb_def): Likewise.\n+\t(function_info::build_info::bb_live_out): Likewise.\n+\t(function_info::build_info::tmp_ebb_live_in_for_debug): New variable.\n+\t(function_info::build_info::potential_phi_regs): Likewise.\n+\t(function_info::build_info::potential_phi_regs_for_debug): Likewise.\n+\t(function_info::build_info::ebb_def_regs): Likewise.\n+\t(function_info::build_info::bb_phis): Likewise.\n+\t(function_info::build_info::bb_mem_live_out): Likewise.\n+\t(function_info::build_info::bb_to_rpo): Likewise.\n+\t(function_info::build_info::def_stack): Likewise.\n+\t(function_info::build_info::old_def_stack_limit): Likewise.\n+\t* rtl-ssa/internals.inl (function_info::build_info::record_reg_def):\n+\tRemove the regno argument.  Push the previous definition onto the\n+\tdefinition stack where necessary.\n+\t* rtl-ssa/accesses.cc: Include internals.h.\n+\t* rtl-ssa/changes.cc: Likewise.\n+\t* rtl-ssa/blocks.cc: Likewise.\n+\t(function_info::build_info::build_info): Define.\n+\t(function_info::build_info::~build_info): Likewise.\n+\t(function_info::bb_walker): New class.\n+\t(function_info::bb_walker::bb_walker): Define.\n+\t(function_info::add_live_out_use): Convert a logarithmic-complexity\n+\ttest into a linear one.  Allow the same definition to be passed\n+\tmultiple times.\n+\t(function_info::calculate_potential_phi_regs): Moved from\n+\tfunctions.cc.  Take a build_info parameter and store the\n+\tinformation there instead.\n+\t(function_info::place_phis): New function.\n+\t(function_info::add_entry_block_defs): Update call to record_reg_def.\n+\t(function_info::calculate_ebb_live_in_for_debug): New function.\n+\t(function_info::add_phi_nodes): Use bb_phis to decide which\n+\tregisters need phi nodes and initialize ebb_def_regs accordingly.\n+\tDo not add degenerate phis here.\n+\t(function_info::add_artificial_accesses): Use create_reg_use.\n+\tAssert that all definitions are listed in the DF LR sets.\n+\tUpdate call to record_reg_def.\n+\t(function_info::record_block_live_out): Record live-out register\n+\tvalues in the phis of successor blocks.  Use the live-out set\n+\twhen processing the last block in an EBB, instead of always\n+\tusing the live-in sets of successor blocks.  AND the live sets\n+\twith the set of registers that have been defined in the EBB,\n+\trather than with all potential phi registers.  Cope correctly\n+\twith branches back to the start of the current EBB.\n+\t(function_info::start_block): New function.\n+\t(function_info::end_block): Likewise.\n+\t(function_info::populate_phi_inputs): Likewise.\n+\t(function_info::create_ebbs): Likewise.\n+\t(function_info::process_all_blocks): Rewrite into a multi-phase\n+\tprocess.\n+\t* rtl-ssa/functions.cc: Include internals.h.\n+\t(function_info::calculate_potential_phi_regs): Move to blocks.cc.\n+\t(function_info::init_function_data): Remove caller.\n+\t* rtl-ssa/insns.cc: Include internals.h\n+\t(function_info::create_reg_use): New function.  Lazily any\n+\tdegenerate phis needed by the linear RPO view.\n+\t(function_info::record_use): Use create_reg_use.  When processing\n+\tdebug uses, use potential_phi_regs and test it before checking\n+\twhether the register is live on entry to the current EBB.  Lazily\n+\tcalculate ebb_live_in_for_debug.\n+\t(function_info::record_call_clobbers): Update call to record_reg_def.\n+\t(function_info::record_def): Likewise.\n+\n+2021-02-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* toplev.c (init_asm_output): Free output of\n+\tgen_command_line_string function.\n+\t(process_options): Likewise.\n+\n+2021-02-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* params.opt: Add 2 missing Param keywords.\n+\n+2021-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* df-core.c (df_worklist_dataflow_doublequeue): Use proper cast.\n+\n+2021-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/99079\n+\t* match.pd (A % (pow2pcst << N) -> A & ((pow2pcst << N) - 1)): Remove\n+\tuseless tree_nop_conversion_p (type, TREE_TYPE (@3)) check.  Instead\n+\trequire both type and TREE_TYPE (@1) to be integral types and either\n+\ttype having smaller or equal precision, or TREE_TYPE (@1) being\n+\tunsigned type, or type being signed type.  If TREE_TYPE (@1)\n+\tdoesn't have wrapping overflow, perform the subtraction of one in\n+\tunsigned type.\n+\n 2021-02-14  Jan Hubicka  <hubicka@ucw.cz>\n \t    Richard Biener  <rguether@suse.de>\n "}, {"sha": "a9cae583357efaafa10f5bd376fffc0b66959826", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de594739f7ec9f9938e0ab1c7303f7386ba0860c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de594739f7ec9f9938e0ab1c7303f7386ba0860c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=de594739f7ec9f9938e0ab1c7303f7386ba0860c", "patch": "@@ -1 +1 @@\n-20210215\n+20210216"}, {"sha": "76f2fc086b72aa1226b25f78aefda236f2ae1d3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de594739f7ec9f9938e0ab1c7303f7386ba0860c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de594739f7ec9f9938e0ab1c7303f7386ba0860c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de594739f7ec9f9938e0ab1c7303f7386ba0860c", "patch": "@@ -1,3 +1,14 @@\n+2021-02-15  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/98872\n+\t* gcc.target/powerpc/pr98872.c: New test.\n+\n+2021-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/99079\n+\t* gcc.dg/fold-modpow2-2.c: New test.\n+\t* gcc.c-torture/execute/pr99079.c: New test.\n+\n 2021-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/98439"}, {"sha": "91a9e40cd98930ba31fcb1f72c1c1fce48df487e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de594739f7ec9f9938e0ab1c7303f7386ba0860c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de594739f7ec9f9938e0ab1c7303f7386ba0860c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=de594739f7ec9f9938e0ab1c7303f7386ba0860c", "patch": "@@ -1,3 +1,16 @@\n+2021-02-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_wait.h (__thread_yield()): Check\n+\t_GLIBCXX_HAS_GTHREADS before using __gthread_yield.\n+\t(__thread_relax()): Use __thread_yield() instead of repeating\n+\tthe preprocessor checks for __gthread_yield.\n+\n+2021-02-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/mutex (once_flag::_M_activate()): Add explicit\n+\treturn statement for passive case.\n+\t(once_flag::_M_finish(bool)): Use reserved name for parameter.\n+\n 2021-02-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/99096"}]}