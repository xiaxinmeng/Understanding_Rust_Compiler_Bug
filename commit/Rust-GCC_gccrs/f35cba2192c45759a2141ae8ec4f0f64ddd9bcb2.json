{"sha": "f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1Y2JhMjE5MmM0NTc1OWEyMTQxYWU4ZWM0ZjBmNjRkZGQ5YmNiMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-12-12T16:52:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-12-12T16:52:32Z"}, "message": "alpha.c (alpha_expand_block_move): mode_for_size expects bits, not bytes.\n\n        * alpha.c (alpha_expand_block_move): mode_for_size expects\n        bits, not bytes.  Infer extra alignment from addressof.\n\nFrom-SVN: r24270", "tree": {"sha": "f9b7d30d2d42b0fe5a6eefd64cb8e1317b880ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b7d30d2d42b0fe5a6eefd64cb8e1317b880ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2/comments", "author": null, "committer": null, "parents": [{"sha": "4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "08d919c0a59442417e6f1979781b8f270656c65d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2", "patch": "@@ -1,3 +1,8 @@\n+Sat Dec 12 16:49:24 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_expand_block_move): mode_for_size expects\n+\tbits, not bytes.  Infer extra alignment from addressof.\n+\n 1998-12-11  Michael Meissner  <meissner@cygnus.com>\n \n \t* rs6000/sysv4.h (ASM_OUTPUT_ALIGNED_LOCAL): Put small data in the"}, {"sha": "452b6d8d98666e92f34bb257dcfca46c5186258c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f35cba2192c45759a2141ae8ec4f0f64ddd9bcb2", "patch": "@@ -1836,7 +1836,8 @@ alpha_expand_block_move (operands)\n {\n   rtx bytes_rtx\t= operands[2];\n   rtx align_rtx = operands[3];\n-  HOST_WIDE_INT bytes = INTVAL (bytes_rtx);\n+  HOST_WIDE_INT orig_bytes = INTVAL (bytes_rtx);\n+  HOST_WIDE_INT bytes = orig_bytes;\n   HOST_WIDE_INT src_align = INTVAL (align_rtx);\n   HOST_WIDE_INT dst_align = src_align;\n   rtx orig_src\t= operands[1];\n@@ -1909,7 +1910,7 @@ alpha_expand_block_move (operands)\n       enum machine_mode mode;\n       tmp = XEXP (XEXP (orig_src, 0), 0);\n \n-      mode = mode_for_size (bytes, MODE_INT, 1);\n+      mode = mode_for_size (bytes * BITS_PER_UNIT, MODE_INT, 1);\n       if (mode != BLKmode\n \t  && GET_MODE_SIZE (GET_MODE (tmp)) <= bytes)\n \t{\n@@ -2039,7 +2040,7 @@ alpha_expand_block_move (operands)\n       enum machine_mode mode;\n       tmp = XEXP (XEXP (orig_dst, 0), 0);\n \n-      mode = mode_for_size (bytes, MODE_INT, 1);\n+      mode = mode_for_size (orig_bytes * BITS_PER_UNIT, MODE_INT, 1);\n       if (GET_MODE (tmp) == mode && nregs == 1)\n \t{\n \t  emit_move_insn (tmp, data_regs[0]);\n@@ -2049,9 +2050,12 @@ alpha_expand_block_move (operands)\n \n       /* ??? If nregs > 1, consider reconstructing the word in regs.  */\n       /* ??? Optimize mode < dst_mode with strict_low_part.  */\n-      /* No appropriate mode; fall back on memory.  */\n+\n+      /* No appropriate mode; fall back on memory.  We can speed things\n+\t up by recognizing extra alignment information.  */\n       orig_dst = change_address (orig_dst, GET_MODE (orig_dst),\n \t\t\t\t copy_addr_to_reg (XEXP (orig_dst, 0)));\n+      dst_align = GET_MODE_SIZE (GET_MODE (tmp));\n     }\n \n   /* Write out the data in whatever chunks reading the source allowed.  */"}]}