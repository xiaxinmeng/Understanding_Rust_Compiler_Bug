{"sha": "5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "node_id": "C_kwDOANBUbNoAKDVlMDA1MzkzZDRmZjBhNDI4YzVmNTViOWJhN2Y2NWQ2MDc4YTdjZjU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-30T07:30:51Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-06-08T03:23:49Z"}, "message": "Disparages SSE_REGS alternatives sligntly with ?v instead of *v in *mov{si,di}_internal.\n\nSo alternative v won't be igored in record_reg_classess.\n\nSimilar for *r alternatives in some vector patterns.\n\nIt helps testcase in the PR, also RA now makes better decisions for\ngcc.target/i386/extract-insert-combining.c\n\n        movd    %esi, %xmm0\n        movd    %edi, %xmm1\n-       movl    %esi, -12(%rsp)\n        paddd   %xmm0, %xmm1\n        pinsrd  $0, %esi, %xmm0\n        paddd   %xmm1, %xmm0\n\nThe patch has no big impact on SPEC2017 for both O2 and Ofast\nmarch=native run.\n\nAnd I noticed there's some changes in SPEC2017 from code like\n\nmov mem, %eax\nvmovd %eax, %xmm0\n..\nmov %eax, 64(%rsp)\n\nto\n\nvmovd mem, %xmm0\n..\nvmovd %xmm0, 64(%rsp)\n\nWhich should be exactly what we want?\n\ngcc/ChangeLog:\n\n\tPR target/105513\n\tPR target/105504\n\t* config/i386/i386.md (*movsi_internal): Change alternative\n\tfrom *v to ?v.\n\t(*movdi_internal): Ditto.\n\t* config/i386/sse.md (vec_set<mode>_0): Change alternative *r\n\tto ?r.\n\t(*vec_extractv4sf_mem): Ditto.\n\t(*vec_extracthf): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105513-1.c: New test.\n\t* gcc.target/i386/extract-insert-combining.c: Add new\n\tscan-assembler-not for spill.", "tree": {"sha": "ec0597e79a6e2f5edc49614ec0e810d5e72fedec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0597e79a6e2f5edc49614ec0e810d5e72fedec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4bdeaba6ef8a83877417f7ec172fd8743370284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bdeaba6ef8a83877417f7ec172fd8743370284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bdeaba6ef8a83877417f7ec172fd8743370284"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "5b538413942c2f0b4d6e1d4facd31f9cf4fed648", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "patch": "@@ -2251,9 +2251,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k  ,*r,*m,*k\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,?v,?v,?v,m ,m,?r ,?*Yd,?r,?v,?*y,?*x,*k,*k  ,*r,*m,*k\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,Bk ,*y,*y,r  ,C ,*v,Bk,*v,v,*Yd,r   ,*v,r  ,*x ,*y ,*r,*kBk,*k,*k,CBC\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,Bk ,*y,*y,r  ,C ,?v,Bk,?v,v,*Yd,r   ,?v,r  ,*x ,*y ,*r,*kBk,*k,*k,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_hardreg_mov_ok (operands[0], operands[1])\"\n {\n@@ -2472,9 +2472,9 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-    \"=r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,?r,?*v,*k,*k  ,*rm,*k\")\n+    \"=r,m ,*y,*y,?*y,?m,?r,?*y,?v,?v,?v,m ,?r,?v,*k,*k  ,*rm,*k\")\n \t(match_operand:SI 1 \"general_operand\"\n-    \"g ,re,C ,*y,Bk ,*y,*y,r  ,C ,*v,Bk,*v,*v,r  ,*r,*kBk,*k ,CBC\"))]\n+    \"g ,re,C ,*y,Bk ,*y,*y,r  ,C ,?v,Bk,?v,?v,r  ,*r,*kBk,*k ,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_hardreg_mov_ok (operands[0], operands[1])\"\n {"}, {"sha": "75609eaf9b7f2e7382b50aaa9da0d6f84bd1f479", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "patch": "@@ -10590,11 +10590,11 @@\n ;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=Yr,*x,v,v,v,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n+\t  \"=Yr,*x,v,v,v,x,x,v,Yr ,?x ,x  ,m ,m   ,m\")\n \t(vec_merge:VI4F_128\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" Yr,*x,v,m,r ,m,x,v,*rm,*rm,*rm,!x,!*re,!*fF\"))\n+\t  \" Yr,*x,v,m,r ,m,x,v,?rm,?rm,?rm,!x,?re,!*fF\"))\n \t  (match_operand:VI4F_128 1 \"nonimm_or_0_operand\"\n \t  \" C , C,C,C,C ,C,0,v,0  ,0  ,x  ,0 ,0   ,0\")\n \t  (const_int 1)))]\n@@ -11056,7 +11056,7 @@\n    (set_attr \"mode\" \"V4SF,V4SF,V4SF,*,*\")])\n \n (define_insn_and_split \"*vec_extractv4sf_mem\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=v,*r,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=v,?r,f\")\n \t(vec_select:SF\n \t  (match_operand:V4SF 1 \"memory_operand\" \"o,o,o\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")])))]\n@@ -11933,7 +11933,7 @@\n   \"operands[1] = gen_lowpart (HFmode, operands[1]);\")\n \n (define_insn \"*vec_extracthf\"\n-  [(set (match_operand:HF 0 \"register_sse4nonimm_operand\" \"=*r,m,x,v\")\n+  [(set (match_operand:HF 0 \"register_sse4nonimm_operand\" \"=?r,m,x,v\")\n \t(vec_select:HF\n \t  (match_operand:V8HF 1 \"register_operand\" \"v,v,0,v\")\n \t  (parallel"}, {"sha": "5a53d4cbf06ee4d7ca1d199e9d2933bace3d5952", "filename": "gcc/testsuite/gcc.target/i386/extract-insert-combining.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-insert-combining.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-insert-combining.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-insert-combining.c?ref=5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "patch": "@@ -4,6 +4,7 @@\n /* { dg-final { scan-assembler-times \"(?:vpaddd|paddd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"(?:vpinsrd|pinsrd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n /* { dg-final { scan-assembler-not \"vmovss\" } } */\n+/* { dg-final { scan-assembler-not {(?n)mov.*(%rsp)} { target { ! ia32 } } } } */\n \n #include <immintrin.h>\n "}, {"sha": "530f5292252c36e61f668826298262eaf9b400eb", "filename": "gcc/testsuite/gcc.target/i386/pr105513-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105513-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105513-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105513-1.c?ref=5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mtune=skylake -mfpmath=sse\" } */\n+/* { dg-final { scan-assembler-not \"\\\\(%rsp\\\\)\" } } */\n+\n+static int as_int(float x)\n+{\n+    return (union{float x; int i;}){x}.i;\n+}\n+\n+float f(double y, float x)\n+{\n+    int i = as_int(x);\n+    if (__builtin_expect(i > 99, 0)) return 0;\n+    if (i*2u < 77) if (i==2) return 0;\n+    return y*x;\n+}"}]}