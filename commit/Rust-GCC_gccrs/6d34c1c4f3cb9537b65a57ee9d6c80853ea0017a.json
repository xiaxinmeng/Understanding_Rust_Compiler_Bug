{"sha": "6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQzNGMxYzRmM2NiOTUzN2I2NWE1N2VlOWQ2YzgwODUzZWEwMDE3YQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-06-16T10:59:48Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-06-16T10:59:48Z"}, "message": "cpp.texi, [...]: Update.\n\n\t* cpp.texi, invoke.texi: Update.\n\t* cpp.1, gcc.1: Regenerate.\n\nFrom-SVN: r43419", "tree": {"sha": "a785a492c91f8942141616471fea08f96edc1ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a785a492c91f8942141616471fea08f96edc1ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/comments", "author": null, "committer": null, "parents": [{"sha": "138b7342b18190807ee0a2263bdf1bf670500697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138b7342b18190807ee0a2263bdf1bf670500697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138b7342b18190807ee0a2263bdf1bf670500697"}], "stats": {"total": 138, "additions": 87, "deletions": 51}, "files": [{"sha": "bcdd9079ca4946d0cf031531278873e273675673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "patch": "@@ -1,3 +1,8 @@\n+2001-06-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpp.texi, invoke.texi: Update.\n+\t* cpp.1, gcc.1: Regenerate.\n+\n Sat Jun 16 12:45:20 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (minsf): Fix splitter. (PR fortran/3191)"}, {"sha": "281cd37c2d594b8d1aa0f758d219bd5614c4daf6", "filename": "gcc/doc/cpp.1", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.1?ref=6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Sat Jun 16 00:25:57 2001\n+.\\\" Sat Jun 16 11:46:14 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -203,10 +203,14 @@ Either \\fIinfile\\fR or \\fIoutfile\\fR may be \\fB-\\fR, which as\n means to write to standard output.  Also, if either file is omitted, it\n means the same as if \\fB-\\fR had been specified for that file.\n .PP\n-All single-letter options which take an argument may have that argument\n-appear immediately after the option letter, or with a space between\n-option and argument:  \\fB\\-Ifoo\\fR and \\fB\\-I foo\\fR have the same\n-effect.\n+Unless otherwise noted, or the option ends in \\fB=\\fR, all options\n+which take an argument may have that argument appear either immediately\n+after the option, or with a space between option and argument:\n+\\&\\fB\\-Ifoo\\fR and \\fB\\-I foo\\fR have the same effect.\n+.PP\n+Many options have multi-letter names; therefore multiple single-letter\n+options may \\fInot\\fR be grouped: \\fB\\-dM\\fR is very different from\n+\\&\\fB\\-d\\ \\-M\\fR.\n .Ip \"\\fB\\-D\\fR \\fIname\\fR\" 4\n .IX Item \"-D name\"\n Predefine \\fIname\\fR as a macro, with definition \\f(CW\\*(C`1\\*(C'\\fR.\n@@ -588,8 +592,15 @@ Cancel all predefined assertions and all assertions preceding it on\n the command line.  Also, undefine all predefined macros and all\n macros preceding it on the command line.  (This is a historical wart and\n may change in the future.)\n-.Ip \"\\fB\\-dM\\fR\" 4\n-.IX Item \"-dM\"\n+.Ip \"\\fB\\-dCHARS\\fR\" 4\n+.IX Item \"-dCHARS\"\n+\\&\\fI\\s-1CHARS\\s0\\fR is a sequence of one or more of the following characters,\n+and must not be preceded by a space.  Other characters are reserved for\n+future versions of \\s-1GCC\\s0, and silently ignored.  If you specify characters\n+whose behavior conflicts, the result is undefined.\n+.RS 4\n+.Ip \"\\fBM\\fR\" 4\n+.IX Item \"M\"\n Instead of the normal output, generate a list of \\fB#define\\fR\n directives for all the macros defined during the execution of the\n preprocessor, including predefined macros.  This gives you a way of\n@@ -600,19 +611,22 @@ Assuming you have no file \\fIfoo.h\\fR, the command\n \\&        touch foo.h; cpp -dM foo.h\n .Ve\n will show all the predefined macros.\n-.Ip \"\\fB\\-dD\\fR\" 4\n-.IX Item \"-dD\"\n-Like \\fB\\-dM\\fR except in two respects: it does \\fInot\\fR include the\n+.Ip \"\\fBD\\fR\" 4\n+.IX Item \"D\"\n+Like \\fBM\\fR except in two respects: it does \\fInot\\fR include the\n predefined macros, and it outputs \\fIboth\\fR the \\fB#define\\fR\n directives and the result of preprocessing.  Both kinds of output go to\n the standard output file.\n-.Ip \"\\fB\\-dN\\fR\" 4\n-.IX Item \"-dN\"\n-Like \\fB\\-dD\\fR, but emit only the macro names, not their expansions.\n-.Ip \"\\fB\\-dI\\fR\" 4\n-.IX Item \"-dI\"\n+.Ip \"\\fBN\\fR\" 4\n+.IX Item \"N\"\n+Like \\fBD\\fR, but emit only the macro names, not their expansions.\n+.Ip \"\\fBI\\fR\" 4\n+.IX Item \"I\"\n Output \\fB#include\\fR directives in addition to the result of\n preprocessing.\n+.RE\n+.RS 4\n+.RE\n .Ip \"\\fB\\-P\\fR\" 4\n .IX Item \"-P\"\n Inhibit generation of linemarkers in the output from the preprocessor."}, {"sha": "05bd6bcb0bd73b094d2469020d49a6cf52dfd894", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "patch": "@@ -986,7 +986,7 @@ These rules are implementation-defined behavior according to the C\n standard.  To minimize the risk of different compilers interpreting your\n computed includes differently, we recommend you use only a single\n object-like macro which expands to a string constant.  This will also\n-minimize any confusion to people reading your program.\n+minimize confusion for people reading your program.\n \n @node Wrapper Headers\n @section Wrapper Headers\n@@ -1634,7 +1634,7 @@ eprintf(\"success!\\n\", );\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n @end example\n \n-GNU CPP has a pair of extensions which deals with this problem. First,\n+GNU CPP has a pair of extensions which deal with this problem. First,\n you are allowed to leave the variable argument out entirely:\n \n @example\n@@ -1893,7 +1893,7 @@ testing @code{@w{(__GNUC__ && __cplusplus)}}.\n @item __STRICT_ANSI__\n GCC defines this macro if and only if the @option{-ansi} switch, or a\n @option{-std} switch specifying strict conformance to some version of ISO C,\n-was specified when GCC was invoked.  Its definition is the null string.\n+was specified when GCC was invoked.  It is defined to @samp{1}.\n This macro exists primarily to direct GNU libc's header files to\n restrict their definitions to the minimal set found in the 1989 C\n standard.\n@@ -3006,13 +3006,13 @@ symbolic debuggers to be able to refer to @code{bison}'s input file.\n @samp{#line} directives into the output file.  @samp{#line} is a\n directive that specifies the original line number and source file name\n for subsequent input in the current preprocessor input file.\n-@samp{#line} has four variants:\n+@samp{#line} has three variants:\n \n @table @code\n @item #line @var{linenum}\n-@var{linenum} is a decimal integer constant.  It specifies the line\n-number which should be reported for the following line of input.\n-Subsequent lines are counted from @var{linenum}.\n+@var{linenum} is a non-negative decimal integer constant.  It specifies\n+the line number which should be reported for the following line of\n+input.  Subsequent lines are counted from @var{linenum}.\n \n @item #line @var{linenum} @var{filename}\n @var{linenum} is the same as for the first form, and has the same\n@@ -3022,15 +3022,7 @@ file it specifies, until something else happens to change that.\n \n @item #line @var{anything else}\n @var{anything else} is checked for macro calls, which are expanded.\n-The result should match one of the above three forms.\n-\n-@item # @var{linenum} @var{filename} @var{flags@dots{}}\n-This form is a GCC extension.  @var{linenum} and @var{filename} are the\n-same as the second form.  The @var{flags} are small increasing positive\n-integers, which have the same meaning as the flags which can appear at\n-the end of a linemarker in the preprocessor's output.\n-@xref{Preprocessor Output}.  Note that this form does not use the\n-directive name @samp{line}.\n+The result should match one of the above two forms.\n @end table\n \n @samp{#line} directives alter the results of the @code{__FILE__} and\n@@ -3236,6 +3228,12 @@ wrapped in an implicit @code{extern \"C\"} block.\n @c maybe cross reference NO_IMPLICIT_EXTERN_C\n @end table\n \n+As an extension, the preprocessor accepts linemarkers in non-assembler\n+input files.  They are treated like the corresponding @samp{#line}\n+directive, (@pxref{Line Control}), except that trailing flags are\n+permitted, and are interpreted with the meanings described above.  If\n+multiple flags are given, they must be in ascending order.\n+\n Some directives may be duplicated in the output of the preprocessor.\n These are @samp{#ident} (always), @samp{#pragma} (only if the\n preprocessor does not handle the pragma itself), and @samp{#define} and\n@@ -3815,10 +3813,16 @@ Either @var{infile} or @var{outfile} may be @option{-}, which as\n means to write to standard output.  Also, if either file is omitted, it\n means the same as if @option{-} had been specified for that file.\n \n-All single-letter options which take an argument may have that argument\n-appear immediately after the option letter, or with a space between\n-option and argument:  @option{-Ifoo} and @option{-I foo} have the same\n-effect.\n+Unless otherwise noted, or the option ends in @samp{=}, all options\n+which take an argument may have that argument appear either immediately\n+after the option, or with a space between option and argument:\n+@option{-Ifoo} and @option{-I foo} have the same effect.\n+\n+@cindex grouping options\n+@cindex options, grouping\n+Many options have multi-letter names; therefore multiple single-letter\n+options may @emph{not} be grouped: @option{-dM} is very different from\n+@w{@samp{-d -M}}.\n \n @cindex options\n @table @gcctabopt\n@@ -4170,7 +4174,15 @@ the command line.  Also, undefine all predefined macros and all\n macros preceding it on the command line.  (This is a historical wart and\n may change in the future.)\n \n-@item -dM\n+@item -dCHARS\n+@var{CHARS} is a sequence of one or more of the following characters,\n+and must not be preceded by a space.  Other characters are interpreted\n+by the compiler proper, or reserved for future versions of GCC, and so\n+are silently ignored.  If you specify characters whose behavior\n+conflicts, the result is undefined.\n+\n+@table @samp\n+@item M\n Instead of the normal output, generate a list of @samp{#define}\n directives for all the macros defined during the execution of the\n preprocessor, including predefined macros.  This gives you a way of\n@@ -4184,18 +4196,19 @@ touch foo.h; cpp -dM foo.h\n @noindent\n will show all the predefined macros.\n \n-@item -dD\n-Like @option{-dM} except in two respects: it does @emph{not} include the\n+@item D\n+Like @samp{M} except in two respects: it does @emph{not} include the\n predefined macros, and it outputs @emph{both} the @samp{#define}\n directives and the result of preprocessing.  Both kinds of output go to\n the standard output file.\n \n-@item -dN\n-Like @option{-dD}, but emit only the macro names, not their expansions.\n+@item N\n+Like @samp{D}, but emit only the macro names, not their expansions.\n \n-@item -dI\n+@item I\n Output @samp{#include} directives in addition to the result of\n preprocessing.\n+@end table\n \n @item -P\n Inhibit generation of linemarkers in the output from the preprocessor."}, {"sha": "82fd7bc2b361b954dd14269832fb84900169841b", "filename": "gcc/doc/gcc.1", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.1?ref=6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Thu Jun 14 22:41:32 2001\n+.\\\" Sat Jun 16 09:19:37 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"GCC 1\"\n-.TH GCC 1 \"gcc-3.1\" \"2001-06-14\" \"GNU\"\n+.TH GCC 1 \"gcc-3.1\" \"2001-06-16\" \"GNU\"\n .UC\n .SH \"NAME\"\n gcc \\- \\s-1GNU\\s0 project C and \\*(C+ compiler\n@@ -3619,12 +3619,14 @@ preprocessing.\n Indicate to the preprocessor that the input file has already been\n preprocessed.  This suppresses things like macro expansion, trigraph\n conversion, escaped newline splicing, and processing of most directives.\n-In this mode the integrated preprocessor is little more than a tokenizer\n-for the front ends.\n+The preprocessor still recognizes and removes comments, so that you can\n+pass a file preprocessed with \\fB\\-C\\fR to the compiler without\n+problems.  In this mode the integrated preprocessor is little more than\n+a tokenizer for the front ends.\n .Sp\n \\&\\fB\\-fpreprocessed\\fR is implicit if the input file has one of the\n-extensions \\fBi\\fR, \\fBii\\fR or \\fBmi\\fR indicating it has already\n-been preprocessed.\n+extensions \\fBi\\fR, \\fBii\\fR or \\fBmi\\fR.  These are the extensions\n+that \\s-1GCC\\s0 uses for preprocessed files created by \\fB\\-save-temps\\fR.\n .Ip \"\\fB\\-trigraphs\\fR\" 4\n .IX Item \"-trigraphs\"\n Process \\s-1ISO\\s0 standard trigraph sequences.  These are three-character"}, {"sha": "9bef3a7e0cdb6951c66803561e5a1fcba06adf98", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d34c1c4f3cb9537b65a57ee9d6c80853ea0017a", "patch": "@@ -4059,12 +4059,14 @@ preprocessing.\n Indicate to the preprocessor that the input file has already been\n preprocessed.  This suppresses things like macro expansion, trigraph\n conversion, escaped newline splicing, and processing of most directives.\n-In this mode the integrated preprocessor is little more than a tokenizer\n-for the front ends.\n+The preprocessor still recognizes and removes comments, so that you can\n+pass a file preprocessed with @option{-C} to the compiler without\n+problems.  In this mode the integrated preprocessor is little more than\n+a tokenizer for the front ends.\n \n @option{-fpreprocessed} is implicit if the input file has one of the\n-extensions @samp{i}, @samp{ii} or @samp{mi} indicating it has already\n-been preprocessed.\n+extensions @samp{i}, @samp{ii} or @samp{mi}.  These are the extensions\n+that GCC uses for preprocessed files created by @option{-save-temps}.\n \n @item -trigraphs\n @opindex trigraphs"}]}