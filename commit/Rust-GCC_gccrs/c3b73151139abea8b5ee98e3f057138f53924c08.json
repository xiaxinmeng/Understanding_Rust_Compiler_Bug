{"sha": "c3b73151139abea8b5ee98e3f057138f53924c08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiNzMxNTExMzlhYmVhOGI1ZWU5OGUzZjA1NzEzOGY1MzkyNGMwOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-05-02T21:46:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-05-02T21:46:40Z"}, "message": "pt.c (is_auto_or_concept): Remove.\n\n2017-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (is_auto_or_concept): Remove.\n\t(type_uses_auto_or_concept): Remove, unused.\n\t(find_parameter_packs_r, extract_autos_r, is_auto_r): Adjust.\n\t* parser.c (tree_type_is_auto_or_concept): Remove, unused.\n\t* cp-tree.h (is_auto_or_concept): Remove.\n\nFrom-SVN: r247526", "tree": {"sha": "d2f38c3043b8b7da1ac4d604052a3f3fe649f436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2f38c3043b8b7da1ac4d604052a3f3fe649f436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3b73151139abea8b5ee98e3f057138f53924c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b73151139abea8b5ee98e3f057138f53924c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b73151139abea8b5ee98e3f057138f53924c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b73151139abea8b5ee98e3f057138f53924c08/comments", "author": null, "committer": null, "parents": [{"sha": "459d2f5a49c5b9e5c1166dcb91c83f91223fded1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459d2f5a49c5b9e5c1166dcb91c83f91223fded1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459d2f5a49c5b9e5c1166dcb91c83f91223fded1"}], "stats": {"total": 45, "additions": 11, "deletions": 34}, "files": [{"sha": "b12f87ef762d2b8cbde739e7302b4df3ad2076ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3b73151139abea8b5ee98e3f057138f53924c08", "patch": "@@ -1,3 +1,11 @@\n+2017-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (is_auto_or_concept): Remove.\n+\t(type_uses_auto_or_concept): Remove, unused.\n+\t(find_parameter_packs_r, extract_autos_r, is_auto_r): Adjust.\n+\t* parser.c (tree_type_is_auto_or_concept): Remove, unused.\n+\t* cp-tree.h (is_auto_or_concept): Remove.\n+\n 2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n \n         PR c++/80038"}, {"sha": "675b1568bbcf647cc7aa18f6fe0154ee801326f6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c3b73151139abea8b5ee98e3f057138f53924c08", "patch": "@@ -6161,7 +6161,6 @@ extern void append_type_to_template_for_access_check (tree, tree, tree,\n extern tree convert_generic_types_to_packs\t(tree, int, int);\n extern tree splice_late_return_type\t\t(tree, tree);\n extern bool is_auto\t\t\t\t(const_tree);\n-extern bool is_auto_or_concept\t\t\t(const_tree);\n extern tree process_template_parm\t\t(tree, location_t, tree, \n \t\t\t\t\t\t bool, bool);\n extern tree end_template_parm_list\t\t(tree);"}, {"sha": "7197c1941159e9d0f4ff81d370b0a4019d6e6270", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c3b73151139abea8b5ee98e3f057138f53924c08", "patch": "@@ -38795,16 +38795,6 @@ make_generic_type_name ()\n   return get_identifier (buf);\n }\n \n-/* Predicate that behaves as is_auto_or_concept but matches the parent\n-   node of the generic type rather than the generic type itself.  This\n-   allows for type transformation in add_implicit_template_parms.  */\n-\n-static inline bool\n-tree_type_is_auto_or_concept (const_tree t)\n-{\n-  return TREE_TYPE (t) && is_auto_or_concept (TREE_TYPE (t));\n-}\n-\n /* Add an implicit template type parameter to the CURRENT_TEMPLATE_PARMS\n    (creating a new template parameter list if necessary).  Returns the newly\n    created template type parm.  */"}, {"sha": "1567e2b50004e601f0f223d200f44147cad4639f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3b73151139abea8b5ee98e3f057138f53924c08/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c3b73151139abea8b5ee98e3f057138f53924c08", "patch": "@@ -3489,7 +3489,7 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \t parameter pack (14.6.3), or the type-specifier-seq of a type-id that\n \t is a pack expansion, the invented template parameter is a template\n \t parameter pack.  */\n-      if (ppd->type_pack_expansion_p && is_auto_or_concept (t))\n+      if (ppd->type_pack_expansion_p && is_auto (t))\n \tTEMPLATE_TYPE_PARAMETER_PACK (t) = true;\n       if (TEMPLATE_TYPE_PARAMETER_PACK (t))\n         parameter_pack_p = true;\n@@ -24806,7 +24806,7 @@ static int\n extract_autos_r (tree t, void *data)\n {\n   hash_table<auto_hash> &hash = *(hash_table<auto_hash>*)data;\n-  if (is_auto_or_concept (t))\n+  if (is_auto (t))\n     {\n       /* All the autos were built with index 0; fix that up now.  */\n       tree *p = hash.find_slot (t, INSERT);\n@@ -25530,7 +25530,7 @@ is_auto (const_tree type)\n int\n is_auto_r (tree tp, void */*data*/)\n {\n-  return is_auto_or_concept (tp);\n+  return is_auto (tp);\n }\n \n /* Returns the TEMPLATE_TYPE_PARM in TYPE representing `auto' iff TYPE contains\n@@ -25556,26 +25556,6 @@ type_uses_auto (tree type)\n     return find_type_usage (type, is_auto);\n }\n \n-/* Returns true iff TYPE is a TEMPLATE_TYPE_PARM representing 'auto',\n-   'decltype(auto)' or a concept.  */\n-\n-bool\n-is_auto_or_concept (const_tree type)\n-{\n-  return is_auto (type); // or concept\n-}\n-\n-/* Returns the TEMPLATE_TYPE_PARM in TYPE representing a generic type (`auto' or\n-   a concept identifier) iff TYPE contains a use of a generic type.  Returns\n-   NULL_TREE otherwise.  */\n-\n-tree\n-type_uses_auto_or_concept (tree type)\n-{\n-  return find_type_usage (type, is_auto_or_concept);\n-}\n-\n-\n /* For a given template T, return the vector of typedefs referenced\n    in T for which access check is needed at T instantiation time.\n    T is either  a FUNCTION_DECL or a RECORD_TYPE."}]}