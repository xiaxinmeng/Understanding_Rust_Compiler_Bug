{"sha": "282a61e6620915e88b1320f9cbf84d5cc617e2c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgyYTYxZTY2MjA5MTVlODhiMTMyMGY5Y2JmODRkNWNjNjE3ZTJjNw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-06-09T04:06:45Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-06-09T04:06:45Z"}, "message": "* invoke.texi: Add C4x invocation docs.\n\nFrom-SVN: r27445", "tree": {"sha": "6dc3b1fefc1692353613c73a52baecbcf3998355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc3b1fefc1692353613c73a52baecbcf3998355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/282a61e6620915e88b1320f9cbf84d5cc617e2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282a61e6620915e88b1320f9cbf84d5cc617e2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282a61e6620915e88b1320f9cbf84d5cc617e2c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282a61e6620915e88b1320f9cbf84d5cc617e2c7/comments", "author": null, "committer": null, "parents": [{"sha": "314451260e90e153afde24c9f0f8093a35372043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314451260e90e153afde24c9f0f8093a35372043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314451260e90e153afde24c9f0f8093a35372043"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "64b99d685c2268a8ee856a8682b481f0b1886f47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282a61e6620915e88b1320f9cbf84d5cc617e2c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282a61e6620915e88b1320f9cbf84d5cc617e2c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=282a61e6620915e88b1320f9cbf84d5cc617e2c7", "patch": "@@ -1,3 +1,7 @@\n+Wed Jun  9 22:57:02 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* invoke.texi: Add C4x invocation docs.\n+\n Wed Jun  9 22:34:38 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.h (TARGET_EXPOSE_LDP, LEGITIMIZE_RELOAD_ADDRESS):"}, {"sha": "38cf3e877f5daabcc269859178f901f7186857e1", "filename": "gcc/invoke.texi", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282a61e6620915e88b1320f9cbf84d5cc617e2c7/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282a61e6620915e88b1320f9cbf84d5cc617e2c7/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=282a61e6620915e88b1320f9cbf84d5cc617e2c7", "patch": "@@ -393,6 +393,12 @@ in the following sections.\n -mmangle-cpu  -mcpu=@var{cpu}  -mtext=@var{text section}\n -mdata=@var{data section}  -mrodata=@var{readonly data section}\n \n+@emph{TMS320C3x/C4x Options}\n+-mcpu=@var{cpu} -mbig -msmall -mregparm -mmemparm\n+-mfast-fix -mmpyi -mbk -mti -mdp-isr-reload\n+-mrpts=@var{count}  -mrptb -mdb -mloop-unsigned\n+-mparallel-insns -mparallel-mpy -mpreserve-float\n+\n @emph{V850 Options}\n -mlong-calls -mno-long-calls -mep -mno-ep\n -mprolog-function -mno-prolog-function -mspace\n@@ -3110,6 +3116,7 @@ that macro, which enables you to change the defaults.\n * H8/300 Options::\n * SH Options::\n * System V Options::\n+* TMS320C3x/C4x Options::\n * V850 Options::\n * ARC Options::\n * NS32K Options::\n@@ -5749,6 +5756,130 @@ The assembler uses this option.\n @c the generic assembler that comes with Solaris takes just -Ym.\n @end table\n \n+@node TMS320C3x/C4x Options\n+@subsection TMS320C3x/C4x Options\n+@cindex TMS320C3x/C4x Options\n+\n+These @samp{-m} options are defined for TMS320C3x/C4x implementations:\n+\n+@table @code\n+\n+@item -mcpu=@var{cpu_type}\n+Set the instruction set, register set, and instruction scheduling\n+parameters for machine type @var{cpu_type}.  Supported values for\n+@var{cpu_type} are @samp{c30}, @samp{c31}, @samp{c32}, @samp{c40}, and\n+@samp{c44}.  The default is @samp{c40} to generate code for the\n+TMS320C40.\n+\n+@item -mbig-memory\n+@item -mbig\n+@itemx -msmall-memory\n+@itemx -msmall\n+Generates code for the big or small memory model.  The small memory\n+model assumed that all data fits into one 64K word page.  At run-time\n+the data page (DP) register must be set to point to the 64K page\n+containing the .bss and .data program sections.  The big memory model is\n+the default and requires reloading of the DP register for every direct\n+memory access.\n+\n+@item -mbk\n+@itemx -mno-bk\n+Allow (disallow) allocation of general integer operands into the block\n+count register BK. \n+\n+@item -mdb\n+@itemx -mno-db\n+Enable (disable) generation of code using decrement and branch,\n+DBcond(D), instructions.  This is enabled by default for the C4x.  To be\n+on the safe side, this is disabled for the C3x, since the maximum\n+iteration count on the C3x is 2^23 + 1 (but who iterates loops more than\n+2^23 times on the C3x?).  Note that GCC will try to reverse a loop so\n+that it can utilise the decrement and branch instruction, but will give\n+up if there is more than one memory reference in the loop.  Thus a loop\n+where the loop counter is decremented can generate slightly more\n+efficient code, in cases where the RPTB instruction cannot be utilised.\n+\n+@item -mdp-isr-reload\n+@itemx -mparanoid\n+Force the DP register to be saved on entry to an interrupt service\n+routine (ISR), reloaded to point to the data section, and restored on\n+exit from the ISR.  This should not be required unless someone has\n+violated the small memory model by modifying the DP register, say within\n+an object library.\n+\n+@item -mmpyi\n+@itemx -mno-mpyi\n+For the C3x use the 24-bit MPYI instruction for integer multiplies\n+instead of a library call to guarantee 32-bit results.  Note that if one\n+of the operands is a constant, then the multiplication will be performed\n+using shifts and adds.  If the -mmpyi option is not specified for the C3x,\n+then squaring operations are performed inline instead of a library call.\n+\n+@item -mfast-fix\n+@itemx -mno-fast-fix\n+The C3x/C4x FIX instruction to convert a floating point value to an\n+integer value chooses the nearest integer less than or equal to the\n+floating point value rather than to the nearest integer.  Thus if the\n+floating point number is negative, the result will be incorrectly\n+truncated an additional code is necessary to detect and correct this\n+case.  This option can be used to disable generation of the additional\n+code required to correct the result.\n+\n+@item -mrptb\n+@itemx -mno-rptb\n+Enable (disable) generation of repeat block sequences using the RPTB\n+instruction for zero overhead looping.  The RPTB construct is only used\n+for innermost loops that do not call functions or jump across the loop\n+boundaries.  There is no advantage having nested RPTB loops due to the\n+overhead required to save and restore the RC, RS, and RE registers.\n+This is enabled by default with -O2.\n+\n+@item -mrpts=@var{count}\n+@itemx -mno-rpts\n+Enable (disable) the use of the single instruction repeat instruction\n+RPTS.  If a repeat block contains a single instruction, and the loop\n+count can be guaranteed to be less than the value @var{count}, GCC will\n+emit a RPTS instruction instead of a RPTB.  If no value is specified,\n+then a RPTS will be emitted even if the loop count cannot be determined\n+at compile time.  Note that the repeated instruction following RPTS does\n+not have to be reloaded from memory each iteration, thus freeing up the\n+CPU buses for oeprands.  However, since interrupts are blocked by this\n+instruction, it is disabled by default.\n+\n+@item -mloop-unsigned\n+@itemx -mno-loop-unsigned\n+The maximum iteration count when using RPTS and RPTB (and DB on the C40)\n+is 2^31 + 1 since these instructions test if the iteration count is\n+negative to terminate the loop.  If the iteration count is unsigned\n+there is a possibility than the 2^31 + 1 maximum iteration count may be\n+exceeded.  This switch allows an unsigned iteration count.\n+\n+@item -mti\n+Try to emit an assembler syntax that the TI assembler (asm30) is happy\n+with.  This also enforces compatibility with the API employed by the TI\n+C3x C compiler.  For example, long doubles are passed as structures\n+rather than in floating point registers.\n+\n+@item -mregparm\n+@itemx -mmemparm\n+Generate code that uses registers (stack) for passing arguments to functions.\n+By default, arguments are passed in registers where possible rather\n+than by pushing arguments on to the stack.\n+\n+@item -mparallel-insns\n+@itemx -mno-parallel-insns\n+Allow the generation of parallel instructions.  This is enabled by\n+default with -O2.\n+\n+@item -mparallel-mpy\n+@itemx -mno-parallel-mpy\n+Allow the generation of MPY||ADD and MPY||SUB parallel instructions,\n+provided -mparallel-insns is also specified.  These instructions have\n+tight register constraints which can pessimize the code generation\n+of large functions.\n+\n+@end table\n+\n @node V850 Options\n @subsection V850 Options\n @cindex V850 Options"}]}