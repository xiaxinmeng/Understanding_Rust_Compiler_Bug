{"sha": "43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmMTgxNGNmMTVmMGQ5MmJiN2E0MWFiNGUzOGFjODNkYzNmZWM3NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-30T16:34:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-30T16:34:13Z"}, "message": "[C++ PATCH] Feature macros are long\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg02157.html\n\t* c-cppbuiltin.c (c_cpp_builtins): Add 'L' suffix to feature\n\tmacros.\n\nFrom-SVN: r277632", "tree": {"sha": "f6c372ed2fa78875d7fc05571f76914f1610d413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6c372ed2fa78875d7fc05571f76914f1610d413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91ae0a46fd6bf4669fe251398c3f4f3ebaa7b2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ae0a46fd6bf4669fe251398c3f4f3ebaa7b2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ae0a46fd6bf4669fe251398c3f4f3ebaa7b2ff"}], "stats": {"total": 137, "additions": 71, "deletions": 66}, "files": [{"sha": "372f452dc2d2a574e6ca8f6df2cb2258be91669c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74", "patch": "@@ -1,3 +1,8 @@\n+2019-10-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Add 'L' suffix to feature\n+\tmacros.\n+\n 2019-10-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/66970"}, {"sha": "f9cd76b2c86914c5c8a58e84915cdc77c10c55e2", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=43f1814cf15f0d92bb7a41ab4e38ac83dc3fec74", "patch": "@@ -890,7 +890,7 @@ c_cpp_builtins (cpp_reader *pfile)\n       if (flag_rtti)\n \t{\n \t  cpp_define (pfile, \"__GXX_RTTI\");\n-\t  cpp_define (pfile, \"__cpp_rtti=199711\");\n+\t  cpp_define (pfile, \"__cpp_rtti=199711L\");\n \t}\n \n       if (cxx_dialect >= cxx11)\n@@ -899,132 +899,132 @@ c_cpp_builtins (cpp_reader *pfile)\n       /* Binary literals have been allowed in g++ before C++11\n \t and were standardized for C++14.  */\n       if (!pedantic || cxx_dialect > cxx11)\n-\tcpp_define (pfile, \"__cpp_binary_literals=201304\");\n+\tcpp_define (pfile, \"__cpp_binary_literals=201304L\");\n \n       /* Similarly for hexadecimal floating point literals and C++17.  */\n       if (!pedantic || cpp_get_options (parse_in)->extended_numbers)\n-\tcpp_define (pfile, \"__cpp_hex_float=201603\");\n+\tcpp_define (pfile, \"__cpp_hex_float=201603L\");\n \n       /* Arrays of runtime bound were removed from C++14, but we still\n \t support GNU VLAs.  Let's define this macro to a low number\n \t (corresponding to the initial test release of GNU C++) if we won't\n \t complain about use of VLAs.  */\n       if (c_dialect_cxx ()\n \t  && (pedantic ? warn_vla == 0 : warn_vla <= 0))\n-\tcpp_define (pfile, \"__cpp_runtime_arrays=198712\");\n+\tcpp_define (pfile, \"__cpp_runtime_arrays=198712L\");\n \n       if (cxx_dialect >= cxx11)\n \t{\n \t  /* Set feature test macros for C++11.  */\n \t  if (cxx_dialect <= cxx14)\n-\t    cpp_define (pfile, \"__cpp_unicode_characters=200704\");\n-\t  cpp_define (pfile, \"__cpp_raw_strings=200710\");\n-\t  cpp_define (pfile, \"__cpp_unicode_literals=200710\");\n-\t  cpp_define (pfile, \"__cpp_user_defined_literals=200809\");\n-\t  cpp_define (pfile, \"__cpp_lambdas=200907\");\n+\t    cpp_define (pfile, \"__cpp_unicode_characters=200704L\");\n+\t  cpp_define (pfile, \"__cpp_raw_strings=200710L\");\n+\t  cpp_define (pfile, \"__cpp_unicode_literals=200710L\");\n+\t  cpp_define (pfile, \"__cpp_user_defined_literals=200809L\");\n+\t  cpp_define (pfile, \"__cpp_lambdas=200907L\");\n \t  if (cxx_dialect == cxx11)\n-\t    cpp_define (pfile, \"__cpp_constexpr=200704\");\n+\t    cpp_define (pfile, \"__cpp_constexpr=200704L\");\n \t  if (cxx_dialect <= cxx14)\n-\t    cpp_define (pfile, \"__cpp_range_based_for=200907\");\n+\t    cpp_define (pfile, \"__cpp_range_based_for=200907L\");\n \t  if (cxx_dialect <= cxx14)\n-\t    cpp_define (pfile, \"__cpp_static_assert=200410\");\n-\t  cpp_define (pfile, \"__cpp_decltype=200707\");\n-\t  cpp_define (pfile, \"__cpp_attributes=200809\");\n-\t  cpp_define (pfile, \"__cpp_rvalue_reference=200610\");\n-\t  cpp_define (pfile, \"__cpp_rvalue_references=200610\");\n-\t  cpp_define (pfile, \"__cpp_variadic_templates=200704\");\n-\t  cpp_define (pfile, \"__cpp_initializer_lists=200806\");\n-\t  cpp_define (pfile, \"__cpp_delegating_constructors=200604\");\n-\t  cpp_define (pfile, \"__cpp_nsdmi=200809\");\n+\t    cpp_define (pfile, \"__cpp_static_assert=200410L\");\n+\t  cpp_define (pfile, \"__cpp_decltype=200707L\");\n+\t  cpp_define (pfile, \"__cpp_attributes=200809L\");\n+\t  cpp_define (pfile, \"__cpp_rvalue_reference=200610L\");\n+\t  cpp_define (pfile, \"__cpp_rvalue_references=200610L\");\n+\t  cpp_define (pfile, \"__cpp_variadic_templates=200704L\");\n+\t  cpp_define (pfile, \"__cpp_initializer_lists=200806L\");\n+\t  cpp_define (pfile, \"__cpp_delegating_constructors=200604L\");\n+\t  cpp_define (pfile, \"__cpp_nsdmi=200809L\");\n \t  if (!flag_new_inheriting_ctors)\n-\t    cpp_define (pfile, \"__cpp_inheriting_constructors=200802\");\n+\t    cpp_define (pfile, \"__cpp_inheriting_constructors=200802L\");\n \t  else\n-\t    cpp_define (pfile, \"__cpp_inheriting_constructors=201511\");\n-\t  cpp_define (pfile, \"__cpp_ref_qualifiers=200710\");\n-\t  cpp_define (pfile, \"__cpp_alias_templates=200704\");\n+\t    cpp_define (pfile, \"__cpp_inheriting_constructors=201511L\");\n+\t  cpp_define (pfile, \"__cpp_ref_qualifiers=200710L\");\n+\t  cpp_define (pfile, \"__cpp_alias_templates=200704L\");\n \t}\n       if (cxx_dialect > cxx11)\n \t{\n \t  /* Set feature test macros for C++14.  */\n-\t  cpp_define (pfile, \"__cpp_return_type_deduction=201304\");\n-\t  cpp_define (pfile, \"__cpp_init_captures=201304\");\n-\t  cpp_define (pfile, \"__cpp_generic_lambdas=201304\");\n+\t  cpp_define (pfile, \"__cpp_return_type_deduction=201304L\");\n+\t  cpp_define (pfile, \"__cpp_init_captures=201304L\");\n+\t  cpp_define (pfile, \"__cpp_generic_lambdas=201304L\");\n \t  if (cxx_dialect <= cxx14)\n-\t    cpp_define (pfile, \"__cpp_constexpr=201304\");\n-\t  cpp_define (pfile, \"__cpp_decltype_auto=201304\");\n-\t  cpp_define (pfile, \"__cpp_aggregate_nsdmi=201304\");\n-\t  cpp_define (pfile, \"__cpp_variable_templates=201304\");\n-\t  cpp_define (pfile, \"__cpp_digit_separators=201309\");\n+\t    cpp_define (pfile, \"__cpp_constexpr=201304L\");\n+\t  cpp_define (pfile, \"__cpp_decltype_auto=201304L\");\n+\t  cpp_define (pfile, \"__cpp_aggregate_nsdmi=201304L\");\n+\t  cpp_define (pfile, \"__cpp_variable_templates=201304L\");\n+\t  cpp_define (pfile, \"__cpp_digit_separators=201309L\");\n \t}\n       if (cxx_dialect > cxx14)\n \t{\n \t  /* Set feature test macros for C++17.  */\n-\t  cpp_define (pfile, \"__cpp_unicode_characters=201411\");\n-\t  cpp_define (pfile, \"__cpp_static_assert=201411\");\n-\t  cpp_define (pfile, \"__cpp_namespace_attributes=201411\");\n-\t  cpp_define (pfile, \"__cpp_enumerator_attributes=201411\");\n-\t  cpp_define (pfile, \"__cpp_nested_namespace_definitions=201411\");\n-\t  cpp_define (pfile, \"__cpp_fold_expressions=201603\");\n-\t  cpp_define (pfile, \"__cpp_nontype_template_args=201411\");\n-\t  cpp_define (pfile, \"__cpp_range_based_for=201603\");\n-\t  cpp_define (pfile, \"__cpp_constexpr=201603\");\n-\t  cpp_define (pfile, \"__cpp_if_constexpr=201606\");\n-\t  cpp_define (pfile, \"__cpp_capture_star_this=201603\");\n-\t  cpp_define (pfile, \"__cpp_inline_variables=201606\");\n-\t  cpp_define (pfile, \"__cpp_aggregate_bases=201603\");\n-\t  cpp_define (pfile, \"__cpp_deduction_guides=201703\");\n-\t  cpp_define (pfile, \"__cpp_noexcept_function_type=201510\");\n+\t  cpp_define (pfile, \"__cpp_unicode_characters=201411L\");\n+\t  cpp_define (pfile, \"__cpp_static_assert=201411L\");\n+\t  cpp_define (pfile, \"__cpp_namespace_attributes=201411L\");\n+\t  cpp_define (pfile, \"__cpp_enumerator_attributes=201411L\");\n+\t  cpp_define (pfile, \"__cpp_nested_namespace_definitions=201411L\");\n+\t  cpp_define (pfile, \"__cpp_fold_expressions=201603L\");\n+\t  cpp_define (pfile, \"__cpp_nontype_template_args=201411L\");\n+\t  cpp_define (pfile, \"__cpp_range_based_for=201603L\");\n+\t  cpp_define (pfile, \"__cpp_constexpr=201603L\");\n+\t  cpp_define (pfile, \"__cpp_if_constexpr=201606L\");\n+\t  cpp_define (pfile, \"__cpp_capture_star_this=201603L\");\n+\t  cpp_define (pfile, \"__cpp_inline_variables=201606L\");\n+\t  cpp_define (pfile, \"__cpp_aggregate_bases=201603L\");\n+\t  cpp_define (pfile, \"__cpp_deduction_guides=201703L\");\n+\t  cpp_define (pfile, \"__cpp_noexcept_function_type=201510L\");\n \t  /* Old macro, superseded by\n \t     __cpp_nontype_template_parameter_auto.  */\n-\t  cpp_define (pfile, \"__cpp_template_auto=201606\");\n-\t  cpp_define (pfile, \"__cpp_structured_bindings=201606\");\n-\t  cpp_define (pfile, \"__cpp_variadic_using=201611\");\n-\t  cpp_define (pfile, \"__cpp_guaranteed_copy_elision=201606\");\n-\t  cpp_define (pfile, \"__cpp_nontype_template_parameter_auto=201606\");\n+\t  cpp_define (pfile, \"__cpp_template_auto=201606L\");\n+\t  cpp_define (pfile, \"__cpp_structured_bindings=201606L\");\n+\t  cpp_define (pfile, \"__cpp_variadic_using=201611L\");\n+\t  cpp_define (pfile, \"__cpp_guaranteed_copy_elision=201606L\");\n+\t  cpp_define (pfile, \"__cpp_nontype_template_parameter_auto=201606L\");\n \t}\n       if (cxx_dialect > cxx17)\n \t{\n \t  /* Set feature test macros for C++2a.  */\n-\t  cpp_define (pfile, \"__cpp_conditional_explicit=201806\");\n-\t  cpp_define (pfile, \"__cpp_constinit=201907\");\n-\t  cpp_define (pfile, \"__cpp_nontype_template_parameter_class=201806\");\n-\t  cpp_define (pfile, \"__cpp_impl_destroying_delete=201806\");\n-\t  cpp_define (pfile, \"__cpp_constexpr_dynamic_alloc=201907\");\n+\t  cpp_define (pfile, \"__cpp_conditional_explicit=201806L\");\n+\t  cpp_define (pfile, \"__cpp_constinit=201907L\");\n+\t  cpp_define (pfile, \"__cpp_nontype_template_parameter_class=201806L\");\n+\t  cpp_define (pfile, \"__cpp_impl_destroying_delete=201806L\");\n+\t  cpp_define (pfile, \"__cpp_constexpr_dynamic_alloc=201907L\");\n \t}\n       if (flag_concepts)\n         {\n           if (cxx_dialect >= cxx2a)\n             /* FIXME: Update this to the value required by the IS.  */\n-            cpp_define (pfile, \"__cpp_concepts=201907\");\n+            cpp_define (pfile, \"__cpp_concepts=201907L\");\n           else\n-            cpp_define (pfile, \"__cpp_concepts=201507\");\n+            cpp_define (pfile, \"__cpp_concepts=201507L\");\n         }\n       if (flag_tm)\n \t/* Use a value smaller than the 201505 specified in\n \t   the TS, since we don't yet support atomic_cancel.  */\n-\tcpp_define (pfile, \"__cpp_transactional_memory=201500\");\n+\tcpp_define (pfile, \"__cpp_transactional_memory=201500L\");\n       if (flag_sized_deallocation)\n-\tcpp_define (pfile, \"__cpp_sized_deallocation=201309\");\n+\tcpp_define (pfile, \"__cpp_sized_deallocation=201309L\");\n       if (aligned_new_threshold)\n \t{\n-\t  cpp_define (pfile, \"__cpp_aligned_new=201606\");\n+\t  cpp_define (pfile, \"__cpp_aligned_new=201606L\");\n \t  cpp_define_formatted (pfile, \"__STDCPP_DEFAULT_NEW_ALIGNMENT__=%d\",\n \t\t\t\taligned_new_threshold);\n \t}\n       if (flag_new_ttp)\n-\tcpp_define (pfile, \"__cpp_template_template_args=201611\");\n+\tcpp_define (pfile, \"__cpp_template_template_args=201611L\");\n       if (flag_threadsafe_statics)\n-\tcpp_define (pfile, \"__cpp_threadsafe_static_init=200806\");\n+\tcpp_define (pfile, \"__cpp_threadsafe_static_init=200806L\");\n       if (flag_char8_t)\n-        cpp_define (pfile, \"__cpp_char8_t=201811\");\n+        cpp_define (pfile, \"__cpp_char8_t=201811L\");\n     }\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */\n   if (flag_exceptions)\n     {\n       cpp_define (pfile, \"__EXCEPTIONS\");\n       if (c_dialect_cxx ())\n-\tcpp_define (pfile, \"__cpp_exceptions=199711\");\n+\tcpp_define (pfile, \"__cpp_exceptions=199711L\");\n     }\n \n   /* Represents the C++ ABI version, always defined so it can be used while"}]}