{"sha": "949eab55b6f37c70cf3d9a28d59004a2a86088f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5ZWFiNTViNmYzN2M3MGNmM2Q5YTI4ZDU5MDA0YTJhODYwODhmNA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-02T11:57:31Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-03T15:51:12Z"}, "message": "testsuite: aarch64: Add tests for narrowing-arithmetic intrinsics\n\nAdd tests for v[r]addhn_high and v[r]subhn_high Neon intrinsics.\nSince these intrinsics are only supported for AArch64, these tests\nare restricted to only run on AArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-03-02  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vXXXhn_high.inc:\n\tNew test template.\n\t* gcc.target/aarch64/advsimd-intrinsics/vaddhn_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vraddhn_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsubhn_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsubhn_high.c:\n\tNew test.", "tree": {"sha": "88c91e5903d7e92e338ada4d9bb9a93c46f294fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c91e5903d7e92e338ada4d9bb9a93c46f294fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/949eab55b6f37c70cf3d9a28d59004a2a86088f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949eab55b6f37c70cf3d9a28d59004a2a86088f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949eab55b6f37c70cf3d9a28d59004a2a86088f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949eab55b6f37c70cf3d9a28d59004a2a86088f4/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b8fa12015f717ac7e4fe2ffbad96a0cb0df2584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8fa12015f717ac7e4fe2ffbad96a0cb0df2584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8fa12015f717ac7e4fe2ffbad96a0cb0df2584"}], "stats": {"total": 193, "additions": 193, "deletions": 0}, "files": [{"sha": "e77e84520139069a90cb5d62046744eaf14ff195", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vXXXhn_high.inc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvXXXhn_high.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvXXXhn_high.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvXXXhn_high.inc?ref=949eab55b6f37c70cf3d9a28d59004a2a86088f4", "patch": "@@ -0,0 +1,65 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: v128_r=vXXXhn_high(v64_r, v128_a, v128_b), store result.  */\n+#define TEST_VXXXHN_HIGH1(INSN, T1, T2, W1, W2, N1, N2)\t\t\t\t\\\n+  VECT_VAR(v128_r, T1, W2, N2) = INSN##_##T2##W1(VECT_VAR(v64_r, T1, W2, N1),\t\\\n+\t\t\t\t\t\t VECT_VAR(v128_a, T1, W1, N1),\t\\\n+\t\t\t\t\t\t VECT_VAR(v128_b, T1, W1, N1));\t\\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2), VECT_VAR(v128_r, T1, W2, N2))\n+\n+#define TEST_VXXXHN_HIGH(INSN, T1, T2, W1, W2, N1, N2)\t\t\t\t\\\n+  TEST_VXXXHN_HIGH1(INSN, T1, T2, W1, W2, N1, N2)\n+\n+  DECL_VARIABLE_128BITS_VARIANTS(v128_r);\n+  DECL_VARIABLE_64BITS_VARIANTS(v64_r);\n+  DECL_VARIABLE_128BITS_VARIANTS(v128_a);\n+  DECL_VARIABLE_128BITS_VARIANTS(v128_b);\n+\n+  clean_results ();\n+\n+  /* Fill v64_r with a value easy to recognise in the result vector. */\n+  VDUP(v64_r, , int, s, 8, 8, 0x5);\n+  VDUP(v64_r, , int, s, 16, 4, 0x5);\n+  VDUP(v64_r, , int, s, 32, 2, 0x5);\n+  VDUP(v64_r, , uint, u, 8, 8, 0x5);\n+  VDUP(v64_r, , uint, u, 16, 4, 0x5);\n+  VDUP(v64_r, , uint, u, 32, 2, 0x5);\n+\n+  /* Fill input v128_a and v128_b with arbitrary values. */\n+  VDUP(v128_a, q, int, s, 16, 8, 50*(UINT8_MAX+1));\n+  VDUP(v128_a, q, int, s, 32, 4, 50*(UINT16_MAX+1));\n+  VDUP(v128_a, q, int, s, 64, 2, 24*((uint64_t)UINT32_MAX+1));\n+  VDUP(v128_a, q, uint, u, 16, 8, 3*(UINT8_MAX+1));\n+  VDUP(v128_a, q, uint, u, 32, 4, 55*(UINT16_MAX+1));\n+  VDUP(v128_a, q, uint, u, 64, 2, 3*((uint64_t)UINT32_MAX+1));\n+\n+  VDUP(v128_b, q, int, s, 16, 8, (uint16_t)UINT8_MAX);\n+  VDUP(v128_b, q, int, s, 32, 4, (uint32_t)UINT16_MAX);\n+  VDUP(v128_b, q, int, s, 64, 2, (uint64_t)UINT32_MAX);\n+  VDUP(v128_b, q, uint, u, 16, 8, (uint16_t)UINT8_MAX);\n+  VDUP(v128_b, q, uint, u, 32, 4, (uint32_t)UINT16_MAX);\n+  VDUP(v128_b, q, uint, u, 64, 2, (uint64_t)UINT32_MAX);\n+\n+  TEST_VXXXHN_HIGH(INSN_NAME, int, s, 16, 8, 8, 16);\n+  TEST_VXXXHN_HIGH(INSN_NAME, int, s, 32, 16, 4, 8);\n+  TEST_VXXXHN_HIGH(INSN_NAME, int, s, 64, 32, 2, 4);\n+  TEST_VXXXHN_HIGH(INSN_NAME, uint, u, 16, 8, 8, 16);\n+  TEST_VXXXHN_HIGH(INSN_NAME, uint, u, 32, 16, 4, 8);\n+  TEST_VXXXHN_HIGH(INSN_NAME, uint, u, 64, 32, 2, 4);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "329dd494f8b2cd3b9c64187278b55107651ea05a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vaddhn_high.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn_high.c?ref=949eab55b6f37c70cf3d9a28d59004a2a86088f4", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vaddhn_high\n+#define TEST_MSG \"VADDHN_HIGH\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t           0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x32, 0x32, 0x32, 0x32,\n+\t\t\t\t\t   0x32, 0x32, 0x32, 0x32 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x32, 0x32, 0x32, 0x32 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0x18, 0x18 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x3, 0x3, 0x3, 0x3,\n+\t\t\t\t\t    0x3, 0x3, 0x3, 0x3 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x37, 0x37, 0x37, 0x37 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0x3, 0x3 };\n+\n+#include \"vXXXhn_high.inc\""}, {"sha": "c0cd9386a790c56c6a0a3705961a282ba7966af6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vraddhn_high.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvraddhn_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvraddhn_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvraddhn_high.c?ref=949eab55b6f37c70cf3d9a28d59004a2a86088f4", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vraddhn_high\n+#define TEST_MSG \"VRADDHN_HIGH\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t           0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t   0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0x19, 0x19 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x4, 0x4, 0x4, 0x4,\n+\t\t\t\t\t    0x4, 0x4, 0x4, 0x4 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x38, 0x38, 0x38, 0x38 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0x4, 0x4 };\n+\n+#include \"vXXXhn_high.inc\""}, {"sha": "1928245cdf881aaa84a726d8ad1c6c574d657f12", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsubhn_high.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsubhn_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsubhn_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsubhn_high.c?ref=949eab55b6f37c70cf3d9a28d59004a2a86088f4", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vrsubhn_high\n+#define TEST_MSG \"VRSUBHN_HIGH\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t           0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x31, 0x31, 0x31, 0x31,\n+\t\t\t\t\t   0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0x17, 0x17 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t    0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x36, 0x36, 0x36, 0x36 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0x2, 0x2 };\n+\n+#include \"vXXXhn_high.inc\""}, {"sha": "dd1ec6b31c8266cf99c9f45bf4211bcdb3500c09", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsubhn_high.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubhn_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949eab55b6f37c70cf3d9a28d59004a2a86088f4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubhn_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubhn_high.c?ref=949eab55b6f37c70cf3d9a28d59004a2a86088f4", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+#define INSN_NAME vsubhn_high\n+#define TEST_MSG \"VSUBHN_HIGH\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t           0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x31, 0x31, 0x31, 0x31,\n+\t\t\t\t\t   0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x31, 0x31, 0x31, 0x31 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0x17, 0x17 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t    0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x36, 0x36, 0x36, 0x36 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0x2, 0x2 };\n+\n+#include \"vXXXhn_high.inc\""}]}