{"sha": "77630ba95a5b0220fdbb460727cf12e45a0c1115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2MzBiYTk1YTViMDIyMGZkYmI0NjA3MjdjZjEyZTQ1YTBjMTExNQ==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-04-29T18:44:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-05T13:09:16Z"}, "message": "[Ada] Fix some \"current instance\" bugs\n\ngcc/ada/\n\n\t* exp_ch3.adb (Build_Record_Init_Proc.Build_Assignment): When\n\tbuilding the assignment statement corresponding to the default\n\texpression for a component, we make a copy of the expression.\n\tWhen making that copy (and if we have seen a component that\n\trequires late initialization), pass a Map parameter into the\n\tcall to New_Copy_Tree to redirect references to the type to\n\tinstead refer to the _Init formal parameter of the init proc.\n\tThis includes hoisting the declaration of Has_Late_Init_Comp out\n\tone level so that it becomes available to Build_Assignment.\n\t(Find_Current_Instance): Return True for other kinds of current\n\tinstance references, instead of just access-valued attribute\n\treferences such as T'Access.\n\t* sem_util.adb (Is_Aliased_View): Return True for the _Init\n\tformal parameter of an init procedure. The changes in\n\texp_ch3.adb can have the effect of replacing a \"T'Access\"\n\tattribute reference in an init procedure with an \"_Init'Access\"\n\tattribute reference. We want such an attribute reference to be\n\tlegal. However, we do not simply mark the formal parameter as\n\tbeing aliased because that might impact callers.\n\t(Is_Object_Image): Return True if Is_Current_Instance returns\n\tTrue for the prefix of an Image (or related attribute) attribute\n\treference.", "tree": {"sha": "38c37a7e60a99d7bc1ef8f123e1a6a146acc71aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c37a7e60a99d7bc1ef8f123e1a6a146acc71aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77630ba95a5b0220fdbb460727cf12e45a0c1115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77630ba95a5b0220fdbb460727cf12e45a0c1115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77630ba95a5b0220fdbb460727cf12e45a0c1115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77630ba95a5b0220fdbb460727cf12e45a0c1115/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf7cc8ccf3a7f34c1772f8da11a1c127fee3363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf7cc8ccf3a7f34c1772f8da11a1c127fee3363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf7cc8ccf3a7f34c1772f8da11a1c127fee3363"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "504410dd00a08f733721d6aa9a64f1060a9c3a2b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77630ba95a5b0220fdbb460727cf12e45a0c1115/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77630ba95a5b0220fdbb460727cf12e45a0c1115/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=77630ba95a5b0220fdbb460727cf12e45a0c1115", "patch": "@@ -1926,6 +1926,7 @@ package body Exp_Ch3 is\n       Proc_Id   : Entity_Id;\n       Rec_Type  : Entity_Id;\n       Set_Tag   : Entity_Id := Empty;\n+      Has_Late_Init_Comp : Boolean := False; -- set in Build_Init_Statements\n \n       function Build_Assignment\n         (Id      : Entity_Id;\n@@ -2021,35 +2022,27 @@ package body Exp_Ch3 is\n              Selector_Name => New_Occurrence_Of (Id, Default_Loc));\n          Set_Assignment_OK (Lhs);\n \n-         --  Case of an access attribute applied to the current instance.\n-         --  Replace the reference to the type by a reference to the actual\n-         --  object. (Note that this handles the case of the top level of\n-         --  the expression being given by such an attribute, but does not\n-         --  cover uses nested within an initial value expression. Nested\n-         --  uses are unlikely to occur in practice, but are theoretically\n-         --  possible.) It is not clear how to handle them without fully\n-         --  traversing the expression. ???\n-\n-         if Kind = N_Attribute_Reference\n-           and then Attribute_Name (Default) in Name_Unchecked_Access\n-                                              | Name_Unrestricted_Access\n-           and then Is_Entity_Name (Prefix (Default))\n-           and then Is_Type (Entity (Prefix (Default)))\n-           and then Entity (Prefix (Default)) = Rec_Type\n-         then\n-            Exp :=\n-              Make_Attribute_Reference (Default_Loc,\n-                Prefix         =>\n-                  Make_Identifier (Default_Loc, Name_uInit),\n-                Attribute_Name => Name_Unrestricted_Access);\n-         end if;\n-\n          --  Take a copy of Exp to ensure that later copies of this component\n          --  declaration in derived types see the original tree, not a node\n          --  rewritten during expansion of the init_proc. If the copy contains\n          --  itypes, the scope of the new itypes is the init_proc being built.\n \n-         Exp := New_Copy_Tree (Exp, New_Scope => Proc_Id);\n+         declare\n+            Map : Elist_Id := No_Elist;\n+         begin\n+            if Has_Late_Init_Comp then\n+               --  Map the type to the _Init parameter in order to\n+               --  handle \"current instance\" references.\n+\n+               Map := New_Elmt_List\n+                        (Elmt1 => Rec_Type,\n+                         Elmt2 => Defining_Identifier (First\n+                                   (Parameter_Specifications\n+                                      (Parent (Proc_Id)))));\n+            end if;\n+\n+            Exp := New_Copy_Tree (Exp, New_Scope => Proc_Id, Map => Map);\n+         end;\n \n          Res := New_List (\n            Make_Assignment_Statement (Loc,\n@@ -2981,7 +2974,6 @@ package body Exp_Ch3 is\n          Counter_Id         : Entity_Id        := Empty;\n          Comp_Loc           : Source_Ptr;\n          Decl               : Node_Id;\n-         Has_Late_Init_Comp : Boolean;\n          Id                 : Entity_Id;\n          Parent_Stmts       : List_Id;\n          Stmts              : List_Id;\n@@ -3097,10 +3089,9 @@ package body Exp_Ch3 is\n             function Find_Current_Instance\n               (N : Node_Id) return Traverse_Result is\n             begin\n-               if Nkind (N) = N_Attribute_Reference\n-                 and then Is_Access_Type (Etype (N))\n-                 and then Is_Entity_Name (Prefix (N))\n-                 and then Is_Type (Entity (Prefix (N)))\n+               if Is_Entity_Name (N)\n+                 and then Present (Entity (N))\n+                 and then Is_Current_Instance (N)\n                then\n                   References_Current_Instance := True;\n                   return Abandon;\n@@ -3255,8 +3246,6 @@ package body Exp_Ch3 is\n          --  step deals with regular components. The second step deals with\n          --  components that require late initialization.\n \n-         Has_Late_Init_Comp := False;\n-\n          --  First pass : regular components\n \n          Decl := First_Non_Pragma (Component_Items (Comp_List));"}, {"sha": "7ea809bf5a6ad02108ab11a2607eba2b98ed8e1b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77630ba95a5b0220fdbb460727cf12e45a0c1115/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77630ba95a5b0220fdbb460727cf12e45a0c1115/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=77630ba95a5b0220fdbb460727cf12e45a0c1115", "patch": "@@ -15691,6 +15691,15 @@ package body Sem_Util is\n            --  statement is aliased if its type is immutably limited.\n \n            or else (Is_Return_Object (E)\n+                     and then Is_Limited_View (Etype (E)))\n+\n+           --  The current instance of a limited type is aliased, so\n+           --  we want to allow uses of T'Access in the init proc for\n+           --  a limited type T. However, we don't want to mark the formal\n+           --  parameter as being aliased since that could impact callers.\n+\n+           or else (Is_Formal (E)\n+                     and then Chars (E) = Name_uInit\n                      and then Is_Limited_View (Etype (E)));\n \n       elsif Nkind (Obj) = N_Selected_Component then\n@@ -18838,7 +18847,9 @@ package body Sem_Util is\n       --  This is because the parser always checks that prefixes of attributes\n       --  are named.\n \n-      return not (Is_Entity_Name (Prefix) and then Is_Type (Entity (Prefix)));\n+      return not (Is_Entity_Name (Prefix)\n+                  and then Is_Type (Entity (Prefix))\n+                  and then not Is_Current_Instance (Prefix));\n    end Is_Object_Image;\n \n    -------------------------"}]}