{"sha": "aa23e73b1a090659344ff88361135bd947064e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyM2U3M2IxYTA5MDY1OTM0NGZmODgzNjExMzViZDk0NzA2NGUzMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-31T17:38:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-31T17:38:44Z"}, "message": "re PR preprocessor/92296 (internal compiler error: Segmentation fault  #pragma push_macro(\"__LINE__\"))\n\n\tPR preprocessor/92296\n\t* internal.h (struct def_pragma_macro): Add is_builtin bitfield.\n\t(_cpp_restore_special_builtin): Declare.\n\t* init.c (_cpp_restore_special_builtin): New function.\n\t* directives.c (do_pragma_push_macro): For NT_BUILTIN_MACRO\n\tset is_builtin and don't try to grab definition.\n\t(cpp_pop_definition): Use _cpp_restore_special_builtin to restore\n\tbuiltin macros.\n\n\t* c-c++-common/cpp/pr92296-1.c: New test.\n\t* c-c++-common/cpp/pr92296-2.c: New test.\n\nFrom-SVN: r277685", "tree": {"sha": "ab29c66793009b48773fdd1844beac65d7c2a2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab29c66793009b48773fdd1844beac65d7c2a2a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa23e73b1a090659344ff88361135bd947064e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa23e73b1a090659344ff88361135bd947064e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa23e73b1a090659344ff88361135bd947064e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa23e73b1a090659344ff88361135bd947064e30/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0092b21f24a6778a54caac4015db1d0ad6291a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0092b21f24a6778a54caac4015db1d0ad6291a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0092b21f24a6778a54caac4015db1d0ad6291a45"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "6f0cc3971b48d00721a179f282a8937cc76329ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -1,3 +1,9 @@\n+2019-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/92296\n+\t* c-c++-common/cpp/pr92296-1.c: New test.\n+\t* c-c++-common/cpp/pr92296-2.c: New test.\n+\n 2019-10-31  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/devices-main.c: Move to devices subdirectory."}, {"sha": "a6a00b5210dbf138e4ac42da52cac4c7d8584cd4", "filename": "gcc/testsuite/c-c++-common/cpp/pr92296-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr92296-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr92296-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr92296-1.c?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -0,0 +1,35 @@\n+/* PR preprocessor/92296 */\n+/* { dg-do preprocess } */\n+\n+#pragma push_macro(\"__TIMESTAMP__\")\n+#pragma pop_macro(\"__TIMESTAMP__\")\n+\n+#pragma push_macro(\"__TIME__\")\n+#pragma pop_macro(\"__TIME__\")\n+\n+#pragma push_macro(\"__DATE__\")\n+#pragma pop_macro(\"__DATE__\")\n+\n+#pragma push_macro(\"__FILE__\")\n+#pragma pop_macro(\"__FILE__\")\n+\n+#pragma push_macro(\"__BASE_FILE__\")\n+#pragma pop_macro(\"__BASE_FILE__\")\n+\n+#pragma push_macro(\"__LINE__\")\n+#pragma pop_macro(\"__LINE__\")\n+\n+#pragma push_macro(\"__INCLUDE_LEVEL__\")\n+#pragma pop_macro(\"__INCLUDE_LEVEL__\")\n+\n+#pragma push_macro(\"__COUNTER__\")\n+#pragma pop_macro(\"__COUNTER__\")\n+\n+#pragma push_macro(\"__has_attribute\")\n+#pragma pop_macro(\"__has_attribute\")\n+\n+#pragma push_macro(\"__has_cpp_attribute\")\n+#pragma pop_macro(\"__has_cpp_attribute\")\n+\n+#pragma push_macro(\"__has_builtin\")\n+#pragma pop_macro(\"__has_builtin\")"}, {"sha": "e3f74cd459cfc29270da4e02f06137abba238601", "filename": "gcc/testsuite/c-c++-common/cpp/pr92296-2.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr92296-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr92296-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr92296-2.c?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -0,0 +1,80 @@\n+/* PR preprocessor/92296 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wno-builtin-macro-redefined\" } */\n+\n+#pragma push_macro(\"__TIMESTAMP__\")\n+#undef __TIMESTAMP__\n+#define __TIMESTAMP__ \"Thu Oct 31 12:00:00 2019\"\n+timestamp1 = __TIMESTAMP__\n+#pragma pop_macro(\"__TIMESTAMP__\")\n+timestamp2 = __TIMESTAMP__\n+\n+#pragma push_macro(\"__TIME__\")\n+#undef __TIME__\n+#define __TIME__ \"12:00:00\"\n+time1 = __TIME__\n+#pragma pop_macro(\"__TIME__\")\n+time2 = __TIME__\n+\n+#pragma push_macro(\"__DATE__\")\n+#undef __DATE__\n+#define __DATE__ \"Oct 31 2019\"\n+date1 = __DATE__\n+#pragma pop_macro(\"__DATE__\")\n+date2 = __DATE__\n+\n+#pragma push_macro(\"__FILE__\")\n+#undef __FILE__\n+#define __FILE__ \"pr92296-3.c\"\n+file1 = __FILE__\t/* { dg-final { scan-file pr92296-2.i \"file1 = \\\"pr92296-3.c\\\"\" } } */\n+#pragma pop_macro(\"__FILE__\")\n+file2 = __FILE__\t/* { dg-final { scan-file-not pr92296-2.i \"file2 = \\\"pr92296-3.c\\\"\" } } */\n+\n+#pragma push_macro(\"__BASE_FILE__\")\n+#undef __BASE_FILE__\n+#define __BASE_FILE__ \"pr92296-4.c\"\n+filebase1 = __BASE_FILE__\t/* { dg-final { scan-file pr92296-2.i \"filebase1 = \\\"pr92296-4.c\\\"\" } } */\n+#pragma pop_macro(\"__BASE_FILE__\")\n+filebase2 = __BASE_FILE__\t/* { dg-final { scan-file-not pr92296-2.i \"filebase2 = \\\"pr92296-4.c\\\"\" } } */\n+\n+#pragma push_macro(\"__LINE__\")\n+#undef __LINE__\t\t/* { dg-warning \"undefining\" } */\n+#define __LINE__ 142\n+line1 = __LINE__\t/* { dg-final { scan-file pr92296-2.i \"line1 = 142\" } } */\n+#pragma pop_macro(\"__LINE__\")\n+line2 = __LINE__\t/* { dg-final { scan-file pr92296-2.i \"line2 = 45\" } } */\n+\n+#pragma push_macro(\"__INCLUDE_LEVEL__\")\n+#undef __INCLUDE_LEVEL__\t/* { dg-warning \"undefining\" } */\n+#define __INCLUDE_LEVEL__ 42\n+includelevel1 = __INCLUDE_LEVEL__\t/* { dg-final { scan-file pr92296-2.i \"includelevel1 = 42\" } } */\n+#pragma pop_macro(\"__INCLUDE_LEVEL__\")\n+includelevel2 = __INCLUDE_LEVEL__\t/* { dg-final { scan-file pr92296-2.i \"includelevel2 = 0\" } } */\n+\n+#pragma push_macro(\"__COUNTER__\")\n+#undef __COUNTER__\t/* { dg-warning \"undefining\" } */\n+#define __COUNTER__ 172\n+counter1 = __COUNTER__\t/* { dg-final { scan-file pr92296-2.i \"counter1 = 172\" } } */\n+#pragma pop_macro(\"__COUNTER__\")\n+counter2 = __COUNTER__\t/* { dg-final { scan-file-not pr92296-2.i \"counter2 = 172\" } } */\n+\n+#pragma push_macro(\"__has_attribute\")\n+#undef __has_attribute\t/* { dg-warning \"undefining\" } */\n+#define __has_attribute(x) 0\n+hasattr1 = __has_attribute(noreturn)\t/* { dg-final { scan-file pr92296-2.i \"hasattr1 = 0\" } } */\n+#pragma pop_macro(\"__has_attribute\")\n+hasattr2 = __has_attribute(noreturn)\t/* { dg-final { scan-file-not pr92296-2.i \"hasattr2 = 0\" } } */\n+\n+#pragma push_macro(\"__has_cpp_attribute\")\n+#undef __has_cpp_attribute\t/* { dg-warning \"undefining\" } */\n+#define __has_cpp_attribute(x) 0\n+hasattrcpp1 = __has_cpp_attribute(noreturn)\t/* { dg-final { scan-file pr92296-2.i \"hasattrcpp1 = 0\" } } */\n+#pragma pop_macro(\"__has_cpp_attribute\")\n+hasattrcpp2 = __has_cpp_attribute(noreturn)\t/* { dg-final { scan-file-not pr92296-2.i \"hasattrcpp2 = 0\" } } */\n+\n+#pragma push_macro(\"__has_builtin\")\n+#undef __has_builtin\t/* { dg-warning \"undefining\" } */\n+#define __has_builtin(x) 0\n+hasbuiltin1 = __has_builtin(__builtin_expect)\t/* { dg-final { scan-file pr92296-2.i \"hasbuiltin1 = 0\" } } */\n+#pragma pop_macro(\"__has_builtin\")\n+hasbuiltin2 = __has_builtin(__builtin_expect)\t/* { dg-final { scan-file pr92296-2.i \"hasbuiltin2 = 1\" } } */"}, {"sha": "a13f75085990ea237e9af3a270db23dda5a6b60d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -1,3 +1,14 @@\n+2019-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/92296\n+\t* internal.h (struct def_pragma_macro): Add is_builtin bitfield.\n+\t(_cpp_restore_special_builtin): Declare.\n+\t* init.c (_cpp_restore_special_builtin): New function.\n+\t* directives.c (do_pragma_push_macro): For NT_BUILTIN_MACRO\n+\tset is_builtin and don't try to grab definition.\n+\t(cpp_pop_definition): Use _cpp_restore_special_builtin to restore\n+\tbuiltin macros.\n+\n 2019-10-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/line-map.h (struct maps_info_ordinary): Make cache"}, {"sha": "6e011a1bae25062d8ef84f27cf8d30c6075201f7", "filename": "libcpp/directives.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -1582,6 +1582,8 @@ do_pragma_push_macro (cpp_reader *pfile)\n   node = _cpp_lex_identifier (pfile, c->name);\n   if (node->type == NT_VOID)\n     c->is_undef = 1;\n+  else if (node->type == NT_BUILTIN_MACRO)\n+    c->is_builtin = 1;\n   else\n     {\n       defn = cpp_macro_definition (pfile, node);\n@@ -2470,6 +2472,11 @@ cpp_pop_definition (cpp_reader *pfile, struct def_pragma_macro *c)\n \n   if (c->is_undef)\n     return;\n+  if (c->is_builtin)\n+    {\n+      _cpp_restore_special_builtin (pfile, c);\n+      return;\n+    }\n \n   {\n     size_t namelen;"}, {"sha": "32b0e70a2107beab98485c4178a358c5e537c413", "filename": "libcpp/init.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -497,6 +497,25 @@ cpp_init_special_builtins (cpp_reader *pfile)\n     }\n }\n \n+/* Restore macro C to builtin macro definition.  */\n+\n+void\n+_cpp_restore_special_builtin (cpp_reader *pfile, struct def_pragma_macro *c)\n+{\n+  size_t len = strlen (c->name);\n+\n+  for (const struct builtin_macro *b = builtin_array;\n+       b < builtin_array + ARRAY_SIZE (builtin_array); b++)\n+    if (b->len == len && memcmp (c->name, b->name, len + 1) == 0)\n+      {\n+\tcpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n+\thp->type = NT_BUILTIN_MACRO;\n+\tif (b->always_warn_if_redefined)\n+\t  hp->flags |= NODE_WARN;\n+\thp->value.builtin = (enum cpp_builtin_type) b->value;\n+      }\n+}\n+\n /* Read the builtins table above and enter them, and language-specific\n    macros, into the hash table.  HOSTED is true if this is a hosted\n    environment.  */"}, {"sha": "e759bec0b5f50c4b4fe7e8dc7d07d075aa8328a8", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa23e73b1a090659344ff88361135bd947064e30/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=aa23e73b1a090659344ff88361135bd947064e30", "patch": "@@ -391,6 +391,8 @@ struct def_pragma_macro {\n \n   /* Mark if we save an undefined macro.  */\n   unsigned int is_undef : 1;\n+  /* Nonzero if it was a builtin macro.  */\n+  unsigned int is_builtin : 1;\n };\n \n /* A cpp_reader encapsulates the \"state\" of a pre-processor run.\n@@ -722,6 +724,8 @@ extern void *_cpp_commit_buff (cpp_reader *pfile, size_t size);\n /* In init.c.  */\n extern void _cpp_maybe_push_include_file (cpp_reader *);\n extern const char *cpp_named_operator2name (enum cpp_ttype type);\n+extern void _cpp_restore_special_builtin (cpp_reader *pfile,\n+\t\t\t\t\t  struct def_pragma_macro *);\n \n /* In directives.c */\n extern int _cpp_test_assertion (cpp_reader *, unsigned int *);"}]}