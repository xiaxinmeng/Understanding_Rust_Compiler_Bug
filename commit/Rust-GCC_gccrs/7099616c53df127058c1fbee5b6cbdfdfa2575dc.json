{"sha": "7099616c53df127058c1fbee5b6cbdfdfa2575dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5OTYxNmM1M2RmMTI3MDU4YzFmYmVlNWI2Y2JkZmRmYTI1NzVkYw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-25T11:23:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-25T11:23:33Z"}, "message": "ColorModel.java: New version from classpath.\n\n2003-06-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/image/ColorModel.java:\n\tNew version from classpath.\n\nFrom-SVN: r68474", "tree": {"sha": "1fc249118bc4d39bbedff6dba05dd3305d273df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fc249118bc4d39bbedff6dba05dd3305d273df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7099616c53df127058c1fbee5b6cbdfdfa2575dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7099616c53df127058c1fbee5b6cbdfdfa2575dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7099616c53df127058c1fbee5b6cbdfdfa2575dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7099616c53df127058c1fbee5b6cbdfdfa2575dc/comments", "author": null, "committer": null, "parents": [{"sha": "b348a598a808ac5ad34eb3b7bb518d9af32d0f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b348a598a808ac5ad34eb3b7bb518d9af32d0f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b348a598a808ac5ad34eb3b7bb518d9af32d0f91"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "901e4b7c4a4686fbf2f57e0f63cc2eaaa6962eb6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7099616c53df127058c1fbee5b6cbdfdfa2575dc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7099616c53df127058c1fbee5b6cbdfdfa2575dc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7099616c53df127058c1fbee5b6cbdfdfa2575dc", "patch": "@@ -1,3 +1,8 @@\n+2003-06-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/image/ColorModel.java:\n+\tNew version from classpath.\n+\n 2003-06-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/PlainDatagramSocketImpl.java:"}, {"sha": "767b83f7dd03c2ed5eabd838d559698f61eae48e", "filename": "libjava/java/awt/image/ColorModel.java", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7099616c53df127058c1fbee5b6cbdfdfa2575dc/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7099616c53df127058c1fbee5b6cbdfdfa2575dc/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java?ref=7099616c53df127058c1fbee5b6cbdfdfa2575dc", "patch": "@@ -76,7 +76,7 @@\n  * </ul>\n  *\n  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n- * @author C. Brian Jones (cbj@gnu.org) \n+ * @author C. Brian Jones <cbj@gnu.org>\n  */\n public abstract class ColorModel implements Transparency\n {\n@@ -155,6 +155,11 @@ protected ColorModel(int pixel_bits, int[] bits, ColorSpace cspace,\n     this.transferType = transferType;\n   }\n \n+  public void finalize()\n+  {\n+    // Do nothing here.\n+  }\n+\n   /**\n    * Returns the default color model which in Sun's case is an instance\n    * of <code>DirectColorModel</code>.\n@@ -226,7 +231,7 @@ public int getNumColorComponents()\n    *\n    * @see #getRed(int)\n    */\n-    public abstract int getGreen(int pixel);\n+  public abstract int getGreen(int pixel);\n     \n   /**\n    * Converts pixel value to sRGB and extract blue int sample\n@@ -384,7 +389,7 @@ public int getRGB(Object inData)\n    */\n   public Object getDataElements(int rgb, Object pixel)\n   {\n-    // FIXME: implement\n+    // subclasses has to implement this method.\n     throw new UnsupportedOperationException();\n   }\n \n@@ -403,8 +408,9 @@ public Object getDataElements(int rgb, Object pixel)\n    * according to the color model. Each component sample is stored\n    * as a separate element in the array.\n    */\n-  public int[] getComponents(int pixel, int[] components, int offset) {\n-    // FIXME: implement\n+  public int[] getComponents(int pixel, int[] components, int offset)\n+  {\n+    // subclasses has to implement this method.\n     throw new UnsupportedOperationException();\n   }\n   \n@@ -426,6 +432,7 @@ public int[] getComponents(int pixel, int[] components, int offset) {\n    */\n   public int[] getComponents(Object pixel, int[] components, int offset)\n   {\n+    // subclasses has to implement this method.\n     throw new UnsupportedOperationException();\n   }\n \n@@ -475,6 +482,19 @@ public float[] getNormalizedComponents(int[] components,\n     return normComponents;\n   }\n \n+  /**\n+   * Convert unnormalized components to normalized components.\n+   *\n+   * @since 1.4\n+   */\n+  public float[] getNormalizedComponents (Object pixel,\n+                                          float[] normComponents,\n+                                          int normOffset)\n+  {\n+    // subclasses has to implement this method.\n+    throw new UnsupportedOperationException();\n+  }\n+\n   /**\n    * Converts the unnormalized component samples from an array to a\n    * pixel value. I.e. composes the pixel from component samples, but\n@@ -499,14 +519,28 @@ public float[] getNormalizedComponents(int[] components,\n    */\n   public int getDataElement(int[] components, int offset)\n   {\n+    // subclasses has to implement this method.\n     throw new UnsupportedOperationException();\n   }\n \n+  public int getDataElement (float[] components, int offset)\n+  {\n+    // subclasses has to implement this method.\n+    throw new UnsupportedOperationException();\n+  }\n+  \n   public Object getDataElements(int[] components, int offset, Object obj)\n   {\n+    // subclasses has to implement this method.\n     throw new UnsupportedOperationException();\n   }\n \n+  public int getDataElements (float[] components, Object obj)\n+  {\n+    // subclasses has to implement this method.\n+    throw new UnsupportedOperationException();\n+  }\n+  \n   public boolean equals(Object obj)\n   {\n     if (!(obj instanceof ColorModel)) return false;\n@@ -594,10 +628,6 @@ public final int getTransferType ()\n     return transferType;\n   }\n \n-  public void finalize()\n-  {\n-  }\n-\n   /**\n    * Subclasses must override this method if it is possible for the\n    * color model to have an alpha channel."}]}