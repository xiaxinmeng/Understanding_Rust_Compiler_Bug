{"sha": "5116b54e4644cb0d7b99891c76f8f015097f6530", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExNmI1NGU0NjQ0Y2IwZDdiOTk4OTFjNzZmOGYwMTUwOTdmNjUzMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-05-18T09:56:05Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-05-18T09:56:05Z"}, "message": "gcc/configure.ac: Fix cross build by using $(CFLAGS-$@) [PR100598]\n\nBUILD_CFLAGS is set by configure; by default, BUILD_CFLAGS = $(ALL_CFLAGS)\nis used. The latter contains (see gcc/Makefile.in) $(CFLAGS-$@), which is used\nto pass .o-file specific flags to the compiler.\nFor cross builds, BUILD_CFLAGS is constructed in configure{,.ac} and missed\nthe $(CFLAGS-$@) - despite the comment above ALL_CFLAGS that configure.ac\nmight have to kept in sync.\n\ngcc/ChangeLog:\n\n\tPR other/100598\n\t* configure: Regenerate.\n\t* configure.ac (BUILD_CFLAG, BUILD_CXXFLAGS): Add $(CFLAGS-$@).", "tree": {"sha": "2d2b39a3bc8e1c5ccc7ad2f15f4a352c06e51cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d2b39a3bc8e1c5ccc7ad2f15f4a352c06e51cc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5116b54e4644cb0d7b99891c76f8f015097f6530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116b54e4644cb0d7b99891c76f8f015097f6530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5116b54e4644cb0d7b99891c76f8f015097f6530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116b54e4644cb0d7b99891c76f8f015097f6530/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1cca88019ab1208f8389606dd18a25cd50c20e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cca88019ab1208f8389606dd18a25cd50c20e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1cca88019ab1208f8389606dd18a25cd50c20e1"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "4a9e4fa08ab9de80f6fbf5ffed1461d0a1ad9a83", "filename": "gcc/configure", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116b54e4644cb0d7b99891c76f8f015097f6530/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116b54e4644cb0d7b99891c76f8f015097f6530/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=5116b54e4644cb0d7b99891c76f8f015097f6530", "patch": "@@ -911,7 +911,6 @@ infodir\n docdir\n oldincludedir\n includedir\n-runstatedir\n localstatedir\n sharedstatedir\n sysconfdir\n@@ -1086,7 +1085,6 @@ datadir='${datarootdir}'\n sysconfdir='${prefix}/etc'\n sharedstatedir='${prefix}/com'\n localstatedir='${prefix}/var'\n-runstatedir='${localstatedir}/run'\n includedir='${prefix}/include'\n oldincludedir='/usr/include'\n docdir='${datarootdir}/doc/${PACKAGE}'\n@@ -1339,15 +1337,6 @@ do\n   | -silent | --silent | --silen | --sile | --sil)\n     silent=yes ;;\n \n-  -runstatedir | --runstatedir | --runstatedi | --runstated \\\n-  | --runstate | --runstat | --runsta | --runst | --runs \\\n-  | --run | --ru | --r)\n-    ac_prev=runstatedir ;;\n-  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\\n-  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\\n-  | --run=* | --ru=* | --r=*)\n-    runstatedir=$ac_optarg ;;\n-\n   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n     ac_prev=sbindir ;;\n   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n@@ -1485,7 +1474,7 @@ fi\n for ac_var in\texec_prefix prefix bindir sbindir libexecdir datarootdir \\\n \t\tdatadir sysconfdir sharedstatedir localstatedir includedir \\\n \t\toldincludedir docdir infodir htmldir dvidir pdfdir psdir \\\n-\t\tlibdir localedir mandir runstatedir\n+\t\tlibdir localedir mandir\n do\n   eval ac_val=\\$$ac_var\n   # Remove trailing slashes.\n@@ -1638,7 +1627,6 @@ Fine tuning of the installation directories:\n   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n-  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]\n   --libdir=DIR            object code libraries [EPREFIX/lib]\n   --includedir=DIR        C header files [PREFIX/include]\n   --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n@@ -13309,8 +13297,8 @@ BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG)'\n # And these apply if build != host, or we are generating coverage data\n if test x$build != x$host || test \"x$coverage_flags\" != x\n then\n-    BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD)'\n-    BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CXXFLAGS_FOR_BUILD)'\n+    BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CFLAGS_FOR_BUILD)'\n+    BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS_FOR_BUILD)'\n     BUILD_LDFLAGS='$(LDFLAGS_FOR_BUILD)'\n \n     NO_PIE_CFLAGS_FOR_BUILD=${NO_PIE_CFLAGS_FOR_BUILD-${NO_PIE_CFLAGS}}\n@@ -19447,7 +19435,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19450 \"configure\"\n+#line 19438 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19553,7 +19541,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19556 \"configure\"\n+#line 19544 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d9fc3c219e8e3d013a9880e15b4716daa990d14e", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116b54e4644cb0d7b99891c76f8f015097f6530/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116b54e4644cb0d7b99891c76f8f015097f6530/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=5116b54e4644cb0d7b99891c76f8f015097f6530", "patch": "@@ -2448,8 +2448,8 @@ BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG)' AC_SUBST(BUILD_NO_PIE_FLAG)\n # And these apply if build != host, or we are generating coverage data\n if test x$build != x$host || test \"x$coverage_flags\" != x\n then\n-    BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD)'\n-    BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CXXFLAGS_FOR_BUILD)'\n+    BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CFLAGS_FOR_BUILD)'\n+    BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS_FOR_BUILD)'\n     BUILD_LDFLAGS='$(LDFLAGS_FOR_BUILD)'\n \n     NO_PIE_CFLAGS_FOR_BUILD=${NO_PIE_CFLAGS_FOR_BUILD-${NO_PIE_CFLAGS}}"}]}