{"sha": "160633c62690e70e5af6bad15c3e0ccab8b59578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwNjMzYzYyNjkwZTcwZTVhZjZiYWQxNWMzZTBjY2FiOGI1OTU3OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-07-25T19:42:04Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-07-25T19:42:04Z"}, "message": "gcc.c (option_map): Add --sysroot.\n\n\t* gcc.c (option_map): Add --sysroot.\n\t(process_command): Handle --sysroot.\n\t(display_help): Document it.\n\t* doc/cppopts.tex (-isysroot): Document.\n\t* doc/invoke.texi (--sysroot): Document.\n\t* doc/install.texi (--with-build-sysroot): Document.\n\n\t* Makefile.in (inhibit_libc): New variable.\n\t(INHIBIT_LIBC_CFLAGS): Likewise.\n\t(LIBGCC2_CFLAGS): Include\n\t$(INHIBIT_LIBC_CFLAGS).\n\t(CRTSTUFF_CFLAGS): Include $(INHIBIT_LIBC_CFLAGS).\n\t($(T)crtbegin.o): Do not use @inhibit_libc@.\n\t($(T)crtend.o): Likewise.\n\t($(T)crtbeginS.o): Do not use @inhibit_libc@.\n\t($(T)crtendS.o): Likewise.\n\t($(T)crtbeginT.o): Do not use @inhibit_libc@.\n\t($(T)crtendT.o): Likewise.\n\t(stmp-fixinc): Do not complain about missing headers if\n\tinhibit_libc.\n\t* configure.ac (inhibit_libc): Set it to true/false.\n\t(--with-build-sysroot): New option.  Use it to set\n\tSYSTEM_HEADER_DIR.\n\t* configure: Regenerated.\n\nFrom-SVN: r102367", "tree": {"sha": "a777a9c833f5e8d7258fa7861d57d97cee80a26f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a777a9c833f5e8d7258fa7861d57d97cee80a26f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/160633c62690e70e5af6bad15c3e0ccab8b59578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160633c62690e70e5af6bad15c3e0ccab8b59578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160633c62690e70e5af6bad15c3e0ccab8b59578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160633c62690e70e5af6bad15c3e0ccab8b59578/comments", "author": null, "committer": null, "parents": [{"sha": "334a03fd1e560c81ccf7b3a47e7481307fc5babe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334a03fd1e560c81ccf7b3a47e7481307fc5babe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334a03fd1e560c81ccf7b3a47e7481307fc5babe"}], "stats": {"total": 143, "additions": 122, "deletions": 21}, "files": [{"sha": "7d8d6f7784515c1d451b2ecd61e371ad518e552b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -1,3 +1,30 @@\n+2005-07-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.c (option_map): Add --sysroot.\n+\t(process_command): Handle --sysroot.\n+\t(display_help): Document it.\n+\t* doc/cppopts.tex (-isysroot): Document.\n+\t* doc/invoke.texi (--sysroot): Document.\n+\t* doc/install.texi (--with-build-sysroot): Document.\n+\n+\t* Makefile.in (inhibit_libc): New variable.\n+\t(INHIBIT_LIBC_CFLAGS): Likewise.\n+\t(LIBGCC2_CFLAGS): Include\n+\t$(INHIBIT_LIBC_CFLAGS).\n+\t(CRTSTUFF_CFLAGS): Include $(INHIBIT_LIBC_CFLAGS).\n+\t($(T)crtbegin.o): Do not use @inhibit_libc@.\n+\t($(T)crtend.o): Likewise.\n+\t($(T)crtbeginS.o): Do not use @inhibit_libc@.\n+\t($(T)crtendS.o): Likewise.\n+\t($(T)crtbeginT.o): Do not use @inhibit_libc@.\n+\t($(T)crtendT.o): Likewise.\n+\t(stmp-fixinc): Do not complain about missing headers if\n+\tinhibit_libc.\n+\t* configure.ac (inhibit_libc): Set it to true/false.\n+\t(--with-build-sysroot): New option.  Use it to set\n+\tSYSTEM_HEADER_DIR. \n+\t* configure: Regenerated.\n+\n 2005-07-25  Manfred Hollstein  <mh@suse.com>\n \n \t* calls.c (store_one_arg): Fix unsigned comparison warning."}, {"sha": "55b6e74ab4898ce8406cb036475e1a30fe4daf0a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -325,7 +325,7 @@ GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isyste\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./.\n # It also specifies -isystem ./include to find, e.g., stddef.h.\n-GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)\n+GCC_CFLAGS=$(CFLAGS_FOR_TARGET) $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)\n \n # ---------------------------------------------------\n # Programs which produce files for the target machine\n@@ -511,12 +511,20 @@ GGC_LIB=\n LIBGCC = libgcc.a\n INSTALL_LIBGCC = install-libgcc\n \n+# \"true\" if the target C library headers are unavailable; \"false\"\n+# otherwise.\n+inhibit_libc = @inhibit_libc@\n+ifeq ($(inhibit_libc),true)\n+INHIBIT_LIBC_CFLAGS = -Dinhibit_libc\n+endif\n+\n # Options to use when compiling libgcc2.a.\n #\n LIBGCC2_DEBUG_CFLAGS = -g\n LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) \\\n \t\t $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) \\\n-\t\t -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED @inhibit_libc@\n+\t\t -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED \\\n+\t\t $(INHIBIT_LIBC_CFLAGS)\n \n # Additional options to use when compiling libgcc2.a.\n # Some targets override this to -isystem include\n@@ -528,7 +536,8 @@ TARGET_LIBGCC2_CFLAGS =\n # Options to use when compiling crtbegin/end.\n CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n   -finhibit-size-directive -fno-inline-functions -fno-exceptions \\\n-  -fno-zero-initialized-in-bss -fno-unit-at-a-time\n+  -fno-zero-initialized-in-bss -fno-unit-at-a-time \\\n+  $(INHIBIT_LIBC_CFLAGS)\n \n # Additional sources to handle exceptions; overridden by targets as needed.\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n@@ -1393,33 +1402,33 @@ stmp-multilib: $(LIBGCC_DEPS)\n $(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n \t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_BEGIN \\\n+\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN \\\n \t  -o $(T)crtbegin$(objext)\n \n $(T)crtend.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n \t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_END \\\n+\t  -c $(srcdir)/crtstuff.c -DCRT_END \\\n \t  -o $(T)crtend$(objext)\n \n # These are versions of crtbegin and crtend for shared libraries.\n $(T)crtbeginS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n \t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \\\n-\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFS_O \\\n+\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFS_O \\\n \t  -o $(T)crtbeginS$(objext)\n \n $(T)crtendS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n \t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \\\n-\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O \\\n+\t  -c $(srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O \\\n \t  -o $(T)crtendS$(objext)\n \n # This is a version of crtbegin for -static links.\n $(T)crtbeginT.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n \t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \\\n+\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \\\n \t  -o $(T)crtbeginT$(objext)\n \n # Compile the start modules crt0.o and mcrt0.o that are linked with\n@@ -3137,7 +3146,7 @@ s-macro_list : $(GCC_PASSES)\n stmp-fixinc: gsyslimits.h macro_list \\\n   $(build_objdir)/fixincludes/fixincl \\\n   $(build_objdir)/fixincludes/fixinc.sh\n-\t@if test ! -d ${SYSTEM_HEADER_DIR}; then \\\n+\t@if ! $(inhibit_libc) && test ! -d ${SYSTEM_HEADER_DIR}; then \\\n \t  echo The directory that should contain system headers does not exist: >&2 ; \\\n \t  echo \"  ${SYSTEM_HEADER_DIR}\" >&2 ; \\\n \t  if test \"x${SYSTEM_HEADER_DIR}\" = \"x${gcc_tooldir}/sys-include\"; \\"}, {"sha": "59e0b2596d0c1b867ff4b0c463e724ec8f3bd24e", "filename": "gcc/configure", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -922,6 +922,8 @@ Optional Packages:\n   --with-as               arrange to use the specified as (full pathname)\n   --with-stabs            arrange to use stabs instead of host debug format\n   --with-dwarf2           force the default debug format to be DWARF 2\n+  --with-build-sysroot=sysroot\n+                          use sysroot as the system root during the build\n   --with-sysroot=DIR Search for usr/lib, usr/include, et al, within DIR.\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n@@ -6934,6 +6936,13 @@ fi;\n \n \n \n+# Check whether --with-build-sysroot or --without-build-sysroot was given.\n+if test \"${with_build_sysroot+set}\" = set; then\n+  withval=\"$with_build_sysroot\"\n+\n+fi;\n+\n+\n # Check whether --with-sysroot or --without-sysroot was given.\n if test \"${with_sysroot+set}\" = set; then\n   withval=\"$with_sysroot\"\n@@ -6945,6 +6954,11 @@ if test \"${with_sysroot+set}\" = set; then\n \n  TARGET_SYSTEM_ROOT_DEFINE='-DTARGET_SYSTEM_ROOT=\\\"$(TARGET_SYSTEM_ROOT)\\\"'\n  CROSS_SYSTEM_HEADER_DIR='$(TARGET_SYSTEM_ROOT)$(NATIVE_SYSTEM_HEADER_DIR)'\n+ if test \"x$with_build_sysroot\" != x; then\n+   build_system_header_dir=$with_build_sysroot'$(NATIVE_SYSTEM_HEADER_DIR)'\n+ else\n+   build_system_header_dir='$(CROSS_SYSTEM_HEADER_DIR)'\n+ fi\n \n  if test \"x$exec_prefix\" = xNONE; then\n   if test \"x$prefix\" = xNONE; then\n@@ -7464,7 +7478,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7467: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7481: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)\n@@ -12737,7 +12751,7 @@ if test x$host != x$target\n then\n \tCROSS=\"-DCROSS_COMPILE\"\n \tALL=all.cross\n-\tSYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n+\tSYSTEM_HEADER_DIR=$build_system_header_dir\n \tcase \"$host\",\"$target\" in\n \t# Darwin crosses can use the host system's libraries and headers,\n \t# because of the fat library support.  Of course, it must be the\n@@ -12771,11 +12785,11 @@ fi\n # then define inhibit_libc in LIBGCC2_CFLAGS.\n # This prevents libgcc2 from containing any code which requires libc\n # support.\n-inhibit_libc=\n+inhibit_libc=false\n if { { test x$host != x$target && test \"x$with_sysroot\" = x ; } ||\n        test x$with_newlib = xyes ; } &&\n      { test \"x$with_headers\" = x || test \"x$with_headers\" = xno ; } ; then\n-       inhibit_libc=-Dinhibit_libc\n+       inhibit_libc=true\n fi\n \n \n@@ -13059,7 +13073,7 @@ fi\n \n   test -n \"$gcc_cv_as\" && break\n done\n-test -n \"$gcc_cv_as\" || gcc_cv_as=\"$gcc_cv_tool_prefix/bin/$default_tool_name$build_exeext\"\n+test -n \"$gcc_cv_as\" || gcc_cv_as=\"$gcc_cv_tool_prefix/$default_tool_name$build_exeext\"\n \n fi\n test \"$silent\" != yes && exec 6>&1\n@@ -13237,7 +13251,7 @@ fi\n \n   test -n \"$gcc_cv_ld\" && break\n done\n-test -n \"$gcc_cv_ld\" || gcc_cv_ld=\"$gcc_cv_tool_prefix/bin/$default_tool_name$build_exeext\"\n+test -n \"$gcc_cv_ld\" || gcc_cv_ld=\"$gcc_cv_tool_prefix/$default_tool_name$build_exeext\"\n \n fi\n test \"$silent\" != yes && exec 6>&1\n@@ -13381,7 +13395,7 @@ fi\n \n   test -n \"$gcc_cv_nm\" && break\n done\n-test -n \"$gcc_cv_nm\" || gcc_cv_nm=\"$gcc_cv_tool_prefix/bin/$default_tool_name$build_exeext\"\n+test -n \"$gcc_cv_nm\" || gcc_cv_nm=\"$gcc_cv_tool_prefix/$default_tool_name$build_exeext\"\n \n fi\n test \"$silent\" != yes && exec 6>&1"}, {"sha": "d9f2167ad441d30b6bc26eec9e8c79012e1cb1a0", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -681,6 +681,10 @@ AC_ARG_ENABLE(shared,\n ], [enable_shared=yes])\n AC_SUBST(enable_shared)\n \n+AC_ARG_WITH(build-sysroot, \n+  [  --with-build-sysroot=sysroot\n+                          use sysroot as the system root during the build])\n+\n AC_ARG_WITH(sysroot,\n [  --with-sysroot[=DIR] Search for usr/lib, usr/include, et al, within DIR.],\n [\n@@ -691,7 +695,12 @@ AC_ARG_WITH(sysroot,\n    \n  TARGET_SYSTEM_ROOT_DEFINE='-DTARGET_SYSTEM_ROOT=\\\"$(TARGET_SYSTEM_ROOT)\\\"'\n  CROSS_SYSTEM_HEADER_DIR='$(TARGET_SYSTEM_ROOT)$(NATIVE_SYSTEM_HEADER_DIR)'\n-\n+ if test \"x$with_build_sysroot\" != x; then\n+   build_system_header_dir=$with_build_sysroot'$(NATIVE_SYSTEM_HEADER_DIR)'\n+ else\n+   build_system_header_dir='$(CROSS_SYSTEM_HEADER_DIR)'\n+ fi\n+ \n  if test \"x$exec_prefix\" = xNONE; then\n   if test \"x$prefix\" = xNONE; then\n    test_prefix=/usr/local\n@@ -1643,7 +1652,7 @@ if test x$host != x$target\n then\n \tCROSS=\"-DCROSS_COMPILE\"\n \tALL=all.cross\n-\tSYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n+\tSYSTEM_HEADER_DIR=$build_system_header_dir\n \tcase \"$host\",\"$target\" in\n \t# Darwin crosses can use the host system's libraries and headers,\n \t# because of the fat library support.  Of course, it must be the\n@@ -1677,11 +1686,11 @@ fi\n # then define inhibit_libc in LIBGCC2_CFLAGS.\n # This prevents libgcc2 from containing any code which requires libc\n # support.\n-inhibit_libc=\n+inhibit_libc=false\n if { { test x$host != x$target && test \"x$with_sysroot\" = x ; } ||\n        test x$with_newlib = xyes ; } &&\n      { test \"x$with_headers\" = x || test \"x$with_headers\" = xno ; } ; then\n-       inhibit_libc=-Dinhibit_libc\n+       inhibit_libc=true\n fi\n AC_SUBST(inhibit_libc)\n "}, {"sha": "2790e8c77345bbb070bea7d264ab5dd191c28a6a", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -478,6 +478,11 @@ Append @var{dir} to the prefix specified previously with\n path.  @option{-iwithprefixbefore} puts it in the same place @option{-I}\n would; @option{-iwithprefix} puts it where @option{-idirafter} would.\n \n+@item -isysroot @var{dir}\n+@opindex isysroot\n+This option is like the @option{--sysroot} option, but applies only to\n+header files.  See the @option{--sysroot} option for more information.\n+\n @item -isystem @var{dir}\n @opindex isystem\n Search @var{dir} for header files, after all directories specified by"}, {"sha": "2baf003b95cb5cc5fb84b9cbd468eb7e9b7e282c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -1228,6 +1228,16 @@ in case @option{--with-sysroot} is not given an argument, is\n subdirectory of @option{$@{exec_prefix@}}, then it will be found relative to\n the GCC binaries if the installation tree is moved.\n \n+@item --with-build-sysroot\n+@itemx --with-build-sysroot=@var{dir}\n+Tells GCC to consider @var{dir} as the system root (see\n+@option{--with-sysroot}) while building the compiler itself, instead of\n+the directory specified with @option{--with-sysroot}.  This option is\n+only useful when you are already using @option{--with-sysroot}.  You\n+can use @option{--with-build-sysroot} when you are configure with\n+@option{--prefix} set to a directory that is different from the one in\n+which you are installing GCC and your target libraries.\n+\n @item --with-headers\n @itemx --with-headers=@var{dir}\n Deprecated in favor of @option{--with-sysroot}."}, {"sha": "f24505562a7e510d7dbc89b0df9145193ecc6d67", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -349,6 +349,7 @@ Objective-C and Objective-C++ Dialects}.\n -include @var{file}  -imacros @var{file} @gol\n -iprefix @var{file}  -iwithprefix @var{dir} @gol\n -iwithprefixbefore @var{dir}  -isystem @var{dir} @gol\n+-isysroot @var{dir} @gol\n -M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  @gol\n -P  -fworking-directory  -remap @gol\n -trigraphs  -undef  -U@var{macro}  -Wp,@var{option} @gol\n@@ -368,7 +369,8 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Directory Options\n @xref{Directory Options,,Options for Directory Search}.\n-@gccoptlist{-B@var{prefix}  -I@var{dir}  -iquote@var{dir}  -L@var{dir}  -specs=@var{file}  -I-}\n+@gccoptlist{-B@var{prefix}  -I@var{dir}  -iquote@var{dir}  -L@var{dir}\n+-specs=@var{file}  -I- --sysroot=@var{dir}}\n \n @item Target Options\n @c I wrote this xref this way to avoid overfull hbox. -- rms\n@@ -6372,6 +6374,22 @@ program uses when determining what switches to pass to @file{cc1},\n @option{-specs=@var{file}} can be specified on the command line, and they\n are processed in order, from left to right.\n \n+@item --sysroot=@var{dir}\n+@opindex sysroot\n+Use @var{dir} as the logical root directory for headers and libraries.\n+For example, if the compiler would normally search for headers in\n+@file{/usr/include} and libraries in @file{/usr/lib}, it will instead\n+search @file{@var{dir}/usr/include} and @file{@var{dir}/usr/lib}.  \n+\n+If you use both this option and the @option{-isysroot} option, then\n+the @option{--sysroot} option will apply to libraries, but the\n+@option{-isysroot} option will apply to header files.\n+\n+The GNU linker (beginning with version 2.16) has the necessary support\n+for this option.  If your linker does not support this option, the\n+header file aspect of @option{--sysroot} will still work, but the\n+library aspect will not.\n+\n @item -I-\n @opindex I-\n This option has been deprecated.  Please use @option{-iquote} instead for"}, {"sha": "c62dbbbe53c5c942509c18ada0a52daab2e40dce", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160633c62690e70e5af6bad15c3e0ccab8b59578/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=160633c62690e70e5af6bad15c3e0ccab8b59578", "patch": "@@ -1120,6 +1120,7 @@ static const struct option_map option_map[] =\n    {\"--static\", \"-static\", 0},\n    {\"--std\", \"-std=\", \"aj\"},\n    {\"--symbolic\", \"-symbolic\", 0},\n+   {\"--sysroot\", \"--sysroot=\", \"aj\"}, \n    {\"--time\", \"-time\", 0},\n    {\"--trace-includes\", \"-H\", 0},\n    {\"--traditional\", \"-traditional\", 0},\n@@ -3064,6 +3065,9 @@ display_help (void)\n   fputs (_(\"  -time                    Time the execution of each subprocess\\n\"), stdout);\n   fputs (_(\"  -specs=<file>            Override built-in specs with the contents of <file>\\n\"), stdout);\n   fputs (_(\"  -std=<standard>          Assume that the input sources are for <standard>\\n\"), stdout);\n+  fputs (_(\"\\\n+  --sysroot=<directory>    Use <directory> as the root directory for headers\\n\\\n+                           for headers and libraries\\n\"), stdout);\n   fputs (_(\"  -B <directory>           Add <directory> to the compiler's search paths\\n\"), stdout);\n   fputs (_(\"  -b <machine>             Run gcc for target <machine>, if installed\\n\"), stdout);\n   fputs (_(\"  -V <version>             Run gcc version number <version>, if installed\\n\"), stdout);\n@@ -3926,6 +3930,11 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t;\n       else if (! strcmp (argv[i], \"-fhelp\"))\n \t;\n+      else if (! strncmp (argv[i], \"--sysroot=\", strlen (\"--sysroot=\")))\n+\t{\n+\t  target_system_root = argv[i] + strlen (\"--sysroot=\");\n+\t  target_system_root_changed = 1;\n+\t}\n       else if (argv[i][0] == '+' && argv[i][1] == 'e')\n \t{\n \t  /* Compensate for the +e options to the C++ front-end;"}]}