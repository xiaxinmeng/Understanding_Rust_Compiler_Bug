{"sha": "d5c8be275911317dc85c8441a852775c1192f022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjOGJlMjc1OTExMzE3ZGM4NWM4NDQxYTg1Mjc3NWMxMTkyZjAyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-04-02T21:39:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-04-02T21:39:00Z"}, "message": "re PR c++/25185 (deep typedef substitution in error message)\n\n        PR c++/25185\n        * error.c (find_typenames, find_typenames_r): New fns.\n        (dump_function_decl): Call find_typenames.\n        (dump_template_bindings): Print typenames as well.\n        * pt.c (tsubst): Non-static.\n        * cp-tree.h: Declare it.\n\nFrom-SVN: r145476", "tree": {"sha": "7cabe9179dbbf65afa81affa232feaffc076e6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cabe9179dbbf65afa81affa232feaffc076e6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c8be275911317dc85c8441a852775c1192f022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c8be275911317dc85c8441a852775c1192f022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c8be275911317dc85c8441a852775c1192f022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c8be275911317dc85c8441a852775c1192f022/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14fdc6134e2a667f631cf91941402aaf09ffc24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fdc6134e2a667f631cf91941402aaf09ffc24d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14fdc6134e2a667f631cf91941402aaf09ffc24d"}], "stats": {"total": 104, "additions": 99, "deletions": 5}, "files": [{"sha": "5cba9d0747a97dc82ccf3cfa72800c443193332d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d5c8be275911317dc85c8441a852775c1192f022", "patch": "@@ -1,3 +1,12 @@\n+2009-04-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/25185\n+\t* error.c (find_typenames, find_typenames_r): New fns.\n+\t(dump_function_decl): Call find_typenames.\n+\t(dump_template_bindings): Print typenames as well.\n+\t* pt.c (tsubst): Non-static.\n+\t* cp-tree.h: Declare it.\n+\n 2009-04-02  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/26693"}, {"sha": "849fdc736e430637ec67f3386f58855a4cca9f54", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d5c8be275911317dc85c8441a852775c1192f022", "patch": "@@ -4593,6 +4593,7 @@ extern tree most_specialized_instantiation\t(tree);\n extern void print_candidates\t\t\t(tree);\n extern void instantiate_pending_templates\t(int);\n extern tree tsubst_default_argument\t\t(tree, tree, tree);\n+extern tree tsubst (tree, tree, tsubst_flags_t, tree);\n extern tree tsubst_copy_and_build\t\t(tree, tree, tsubst_flags_t,\n \t\t\t\t\t\t tree, bool, bool);\n extern tree most_general_template\t\t(tree);"}, {"sha": "a3d6cc7326279fdb14a4c86d43a2fd5790ecacd9", "filename": "gcc/cp/error.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=d5c8be275911317dc85c8441a852775c1192f022", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"langhooks-def.h\"\n #include \"cxx-pretty-print.h\"\n+#include \"pointer-set.h\"\n \n #define pp_separate_with_comma(PP) pp_cxx_separate_with (PP, ',')\n \n@@ -74,7 +75,7 @@ static void dump_exception_spec (tree, int);\n static void dump_template_argument (tree, int);\n static void dump_template_argument_list (tree, int);\n static void dump_template_parameter (tree, int);\n-static void dump_template_bindings (tree, tree);\n+static void dump_template_bindings (tree, tree, VEC(tree,gc) *);\n static void dump_scope (tree, int);\n static void dump_template_parms (tree, int, int);\n \n@@ -227,9 +228,11 @@ dump_template_parameter (tree parm, int flags)\n    TREE_VEC.  */\n \n static void\n-dump_template_bindings (tree parms, tree args)\n+dump_template_bindings (tree parms, tree args, VEC(tree,gc)* typenames)\n {\n   int need_comma = 0;\n+  int i;\n+  tree t;\n \n   while (parms)\n     {\n@@ -267,6 +270,17 @@ dump_template_bindings (tree parms, tree args)\n \n       parms = TREE_CHAIN (parms);\n     }\n+\n+  for (i = 0; VEC_iterate (tree, typenames, i, t); ++i)\n+    {\n+      if (need_comma)\n+\tpp_separate_with_comma (cxx_pp);\n+      dump_type (t, 0);\n+      pp_cxx_whitespace (cxx_pp);\n+      pp_equal (cxx_pp);\n+      pp_cxx_whitespace (cxx_pp);\n+      dump_type (tsubst (t, args, tf_none, NULL_TREE), 0);\n+    }\n }\n \n /* Dump a human-readable equivalent of TYPE.  FLAGS controls the\n@@ -1074,6 +1088,51 @@ dump_template_decl (tree t, int flags)\n     }\n }\n \n+/* find_typenames looks through the type of the function template T\n+   and returns a VEC containing any TYPENAME_TYPEs it finds.  */\n+\n+struct find_typenames_t\n+{\n+  struct pointer_set_t *p_set;\n+  VEC (tree,gc) *typenames;\n+};\n+\n+static tree\n+find_typenames_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  struct find_typenames_t *d = (struct find_typenames_t *)data;\n+\n+  if (TREE_CODE (*tp) == TYPENAME_TYPE)\n+    {\n+      /* Discard any cv-qualifiers.  */\n+      tree mv = TYPE_MAIN_VARIANT (*tp);\n+      if (mv == *tp || !pointer_set_insert (d->p_set, mv))\n+\tVEC_safe_push (tree, gc, d->typenames, mv);\n+      *walk_subtrees = 0;\n+    }\n+  /* Search into class template arguments, which cp_walk_subtrees\n+     doesn't do.  */\n+  else if (CLASS_TYPE_P (*tp) && CLASSTYPE_TEMPLATE_INFO (*tp))\n+    {\n+      cp_walk_tree (&CLASSTYPE_TI_ARGS (*tp), find_typenames_r,\n+\t\t    data, d->p_set);\n+      *walk_subtrees = 0;\n+    }\n+  return NULL_TREE;\n+}\n+\n+static VEC(tree,gc) *\n+find_typenames (tree t)\n+{\n+  struct find_typenames_t ft;\n+  ft.p_set = pointer_set_create ();\n+  ft.typenames = NULL;\n+  cp_walk_tree (&TREE_TYPE (DECL_TEMPLATE_RESULT (t)),\n+\t\tfind_typenames_r, &ft, ft.p_set);\n+  pointer_set_destroy (ft.p_set);\n+  return ft.typenames;\n+}\n+\n /* Pretty print a function decl. There are several ways we want to print a\n    function declaration. The TFF_ bits in FLAGS tells us how to behave.\n    As error can only apply the '#' flag once to give 0 and 1 for V, there\n@@ -1090,6 +1149,7 @@ dump_function_decl (tree t, int flags)\n   int show_return = flags & TFF_RETURN_TYPE || flags & TFF_DECL_SPECIFIERS;\n   int do_outer_scope = ! (flags & TFF_UNQUALIFIED_NAME);\n   tree exceptions;\n+  VEC(tree,gc) *typenames = NULL;\n \n   flags &= ~TFF_UNQUALIFIED_NAME;\n   if (TREE_CODE (t) == TEMPLATE_DECL)\n@@ -1110,6 +1170,7 @@ dump_function_decl (tree t, int flags)\n \t{\n \t  template_parms = DECL_TEMPLATE_PARMS (tmpl);\n \t  t = tmpl;\n+\t  typenames = find_typenames (t);\n \t}\n     }\n \n@@ -1177,7 +1238,7 @@ dump_function_decl (tree t, int flags)\n       pp_cxx_left_bracket (cxx_pp);\n       pp_cxx_identifier (cxx_pp, \"with\");\n       pp_cxx_whitespace (cxx_pp);\n-      dump_template_bindings (template_parms, template_args);\n+      dump_template_bindings (template_parms, template_args, typenames);\n       pp_cxx_right_bracket (cxx_pp);\n     }\n }"}, {"sha": "8b2fa6e7e17c21f15c5f1d160c972c3bc2403633", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d5c8be275911317dc85c8441a852775c1192f022", "patch": "@@ -170,7 +170,6 @@ static int eq_local_specializations (const void *, const void *);\n static bool dependent_template_arg_p (tree);\n static bool any_template_arguments_need_structural_equality_p (tree);\n static bool dependent_type_p_r (tree);\n-static tree tsubst (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_expr\t(tree, tree, tsubst_flags_t, tree, bool);\n static tree tsubst_copy\t(tree, tree, tsubst_flags_t, tree);\n static tree tsubst_pack_expansion (tree, tree, tsubst_flags_t, tree);\n@@ -9079,7 +9078,7 @@ tsubst_exception_specification (tree fntype,\n    This function is used for dealing with types, decls and the like;\n    for expressions, use tsubst_expr or tsubst_copy.  */\n \n-static tree\n+tree\n tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n {\n   tree type, r;"}, {"sha": "4d1e325065f57a06cd60d751930b3a9f2491fcac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5c8be275911317dc85c8441a852775c1192f022", "patch": "@@ -1,3 +1,8 @@\n+2009-04-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/25185\n+\t* g++.dg/template/error38.C: New test.\n+\n 2009-04-02  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR tree-optimization/31677"}, {"sha": "a444b1a233f3296d47cf9e26b3acf829d2428ceb", "filename": "gcc/testsuite/g++.dg/template/error38.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c8be275911317dc85c8441a852775c1192f022/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror38.C?ref=d5c8be275911317dc85c8441a852775c1192f022", "patch": "@@ -0,0 +1,19 @@\n+// Testcase for printing typename bindings as well as template args\n+// in diagnostics (PR c++/25185)\n+\n+template <class T>\n+struct A {\n+  typename T::type f();\t\t// { dg-message \"typename T::type = void*\" }\n+  void f(int i = 0);\t\t// { dg-message \"\" }\n+};\n+\n+struct B\n+{\n+  typedef void* type;\n+};\n+\n+int main()\n+{\n+  A<B> a;\n+  a.f();\t\t\t// { dg-error \"\" }\n+}"}]}