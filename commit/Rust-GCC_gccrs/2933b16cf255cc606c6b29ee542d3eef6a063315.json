{"sha": "2933b16cf255cc606c6b29ee542d3eef6a063315", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzM2IxNmNmMjU1Y2M2MDZjNmIyOWVlNTQyZDNlZWY2YTA2MzMxNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-08-01T16:16:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T16:16:24Z"}, "message": "sem_util.ads, [...] (Last_Source_Statement): Replaces Last_Source_Node_In_Sequence.\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads, sem_util.adb, sem_ch6.adb (Last_Source_Statement):\n\tReplaces Last_Source_Node_In_Sequence.\n\t* err_vars.ads (Error_Msg_Lang): 16 is OK, don't need 4K\n\t* errout.adb (Set_Error_Msg_Lang): Takes arg with no parens, but stores\n\tparens and blank in string (this was inconsistently implemented).\n\t* errout.ads\n\t(Set_Error_Msg_Lang): Takes arg with no parens, but stores parens and\n\tblank in string (this was inconsistently implemented).\n\t* gnat1drv.adb\n\t(Set_Global_Switches): Set formal mode switches appropriately\n\t* opt.ads, opt.adb: Formal mode is now global switches, more consistent\n\t* par-prag.adb\n\t(Analyze_Pragma, case SPARK_95): Set opt switches appropriately and\n\tcall Set_Error_Msg_Lang to set \"spark\" as language name.\n\t* par.adb: Remove unnecessary call to set formal language for errout\n\t* sem_prag.adb (P_Pragma, case SPARK_95): Set opt switches\n\tappropriately and call Set_Error_Msg_Lang to set \"spark\" as language\n\tname.\n\t* sem_ch4.adb (Analyze_Concatenation_Operand): remove procedure and\n\tcalls to it, moved after resolution so that types are known\n\t* sem_res.adb (Resolve_Op_Concat): issue an error in formal mode if\n\tresult of concatenation is not of type String\n\t(Resolve_Op_Concat_Arg): issue an error in formal mode if an operand of\n\tconcatenation is not properly restricted\n\t* gnat_rm.texi: Add doc on pragma Spark_95.\n\t* gcc-interface/Makefile.in: Remove obsolete target pairs for\n\tInterfaces.C.* on VMS. Remove s-parame-vms-restrict.ads.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\nFrom-SVN: r177061", "tree": {"sha": "46a56dc338b04690e329bebaaa2bc1eeb8757661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a56dc338b04690e329bebaaa2bc1eeb8757661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2933b16cf255cc606c6b29ee542d3eef6a063315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2933b16cf255cc606c6b29ee542d3eef6a063315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2933b16cf255cc606c6b29ee542d3eef6a063315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2933b16cf255cc606c6b29ee542d3eef6a063315/comments", "author": null, "committer": null, "parents": [{"sha": "05dbd302cf611413886938da4448a7cdaeb88232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05dbd302cf611413886938da4448a7cdaeb88232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05dbd302cf611413886938da4448a7cdaeb88232"}], "stats": {"total": 393, "additions": 191, "deletions": 202}, "files": [{"sha": "9cfb1e2b7533e9c536ac7d081aab4366c5e76b4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -1,3 +1,34 @@\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb, sem_ch6.adb (Last_Source_Statement):\n+\tReplaces Last_Source_Node_In_Sequence.\n+\t* err_vars.ads (Error_Msg_Lang): 16 is OK, don't need 4K\n+\t* errout.adb (Set_Error_Msg_Lang): Takes arg with no parens, but stores\n+\tparens and blank in string (this was inconsistently implemented).\n+\t* errout.ads\n+\t(Set_Error_Msg_Lang): Takes arg with no parens, but stores parens and\n+\tblank in string (this was inconsistently implemented).\n+\t* gnat1drv.adb\n+\t(Set_Global_Switches): Set formal mode switches appropriately\n+\t* opt.ads, opt.adb: Formal mode is now global switches, more consistent\n+\t* par-prag.adb\n+\t(Analyze_Pragma, case SPARK_95): Set opt switches appropriately and\n+\tcall Set_Error_Msg_Lang to set \"spark\" as language name.\n+\t* par.adb: Remove unnecessary call to set formal language for errout\n+\t* sem_prag.adb (P_Pragma, case SPARK_95): Set opt switches\n+\tappropriately and call Set_Error_Msg_Lang to set \"spark\" as language\n+\tname.\n+\t* sem_ch4.adb (Analyze_Concatenation_Operand): remove procedure and\n+\tcalls to it, moved after resolution so that types are known\n+\t* sem_res.adb (Resolve_Op_Concat): issue an error in formal mode if\n+\tresult of concatenation is not of type String\n+\t(Resolve_Op_Concat_Arg): issue an error in formal mode if an operand of\n+\tconcatenation is not properly restricted\n+\t* gnat_rm.texi: Add doc on pragma Spark_95.\n+\t* gcc-interface/Makefile.in: Remove obsolete target pairs for\n+\tInterfaces.C.* on VMS. Remove s-parame-vms-restrict.ads.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n 2011-08-01  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_disp.adb (Override_Dispatching_Operation): Enforce strictness of"}, {"sha": "2f1b048b39809a93db14602d4cb33ff596d697f7", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -150,7 +150,7 @@ package Err_Vars is\n    --  Used if current message contains a ~ insertion character to indicate\n    --  insertion of the string Error_Msg_String (1 .. Error_Msg_Strlen).\n \n-   Error_Msg_Lang : String (1 .. 4096);\n+   Error_Msg_Lang : String (1 .. 16);\n    Error_Msg_Langlen : Natural;\n    --  Used if current message contains a ~~ insertion character to indicate\n    --  insertion of the string Error_Msg_Lang (1 .. Error_Msg_Langlen)."}, {"sha": "59babb14581aeeaf3a2e669b17bec49ea499b3dc", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -2177,8 +2177,11 @@ package body Errout is\n \n    procedure Set_Error_Msg_Lang (To : String) is\n    begin\n-      Error_Msg_Langlen := To'Length;\n-      Error_Msg_Lang (1 .. Error_Msg_Langlen) := To;\n+      Error_Msg_Lang (1) := '(';\n+      Error_Msg_Lang (2 .. To'Length + 1) := To;\n+      Error_Msg_Lang (To'Length + 2) := ')';\n+      Error_Msg_Lang (To'Length + 3) := ' ';\n+      Error_Msg_Langlen := To'Length + 3;\n    end Set_Error_Msg_Lang;\n \n    -----------------------"}, {"sha": "57b8efe0abb79b1985ffd33df49a86d6d03bbb76", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -767,8 +767,9 @@ package Errout is\n    --  on each element of the list, see above).\n \n    procedure Set_Error_Msg_Lang (To : String);\n-   --  Set Error_Msg_Lang and Error_Msg_Langlen used for insertion character ~~\n-   --  so that Error_Msg_Lang (1 .. Error_Msg_Langlen) = To.\n+   --  Set Error_Msg_Lang/Error_Msg_Langlen used for insertion character ~~.\n+   --  The argument is just the language name, e.g. \"spark\". The stored string\n+   --  is of the form \"(langname) \".\n \n    procedure Set_Ignore_Errors (To : Boolean);\n    --  Following a call to this procedure with To=True, all error calls are"}, {"sha": "c925db01cca6bf484a288464af26a1f66541d65a", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -2817,12 +2817,12 @@ ada/nmake.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/urealp.ads \n \n ada/opt.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n-   ada/gnatvsn.ads ada/hostparm.ads ada/opt.ads ada/opt.adb ada/system.ads \\\n-   ada/s-exctab.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-secsta.ads \\\n-   ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n-   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-wchcon.ads ada/tree_io.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads \n+   ada/debug.ads ada/gnatvsn.ads ada/hostparm.ads ada/opt.ads ada/opt.adb \\\n+   ada/system.ads ada/s-exctab.ads ada/s-os_lib.ads ada/s-parame.ads \\\n+   ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads \\\n+   ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/tree_io.ads ada/types.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads \n \n ada/osint-b.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/hostparm.ads \\"}, {"sha": "580bbcdb4609c53317ef8a5bdb29500d75467b8e", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -1492,45 +1492,6 @@ LN_S = cp -p\n endif\n \n ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ))),)\n-  ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n-    LIBGNAT_TARGET_PAIRS_AUX1 = \\\n-      g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n-      g-trasym.adb<g-trasym-vms-ia64.adb \\\n-      s-asthan.adb<s-asthan-vms-ia64.adb \\\n-      s-auxdec.adb<s-auxdec-vms-ia64.adb \\\n-      s-osinte.adb<s-osinte-vms-ia64.adb \\\n-      s-osinte.ads<s-osinte-vms-ia64.ads \\\n-      s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n-      system.ads<system-vms-ia64.ads\n-\n-    LIBGNAT_TARGET_PAIRS_AUX2 = \\\n-      s-parame.ads<s-parame-vms-ia64.ads \\\n-      $(ATOMICS_TARGET_PAIRS)\n-  else\n-    ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(targ))),)\n-      LIBGNAT_TARGET_PAIRS_AUX1 = \\\n-        g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n-        g-trasym.adb<g-trasym-vms-alpha.adb \\\n-        s-asthan.adb<s-asthan-vms-alpha.adb \\\n-        s-auxdec.adb<s-auxdec-vms-alpha.adb \\\n-        s-osinte.adb<s-osinte-vms.adb \\\n-        s-osinte.ads<s-osinte-vms.ads \\\n-        s-traent.adb<s-traent-vms.adb \\\n-        s-traent.ads<s-traent-vms.ads \\\n-        s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n-        system.ads<system-vms_64.ads\n-\n-      ifeq ($(strip $(filter-out express EXPRESS,$(THREAD_KIND))),)\n-        LIBGNAT_TARGET_PAIRS_AUX2 = \\\n-          s-parame.ads<s-parame-vms-restrict.ads\n-      else\n-        LIBGNAT_TARGET_PAIRS_AUX2 = \\\n-          s-parame.ads<s-parame-vms-alpha.ads \\\n-          $(ATOMICS_TARGET_PAIRS)\n-      endif\n-    endif\n-  endif\n-\n   LIBGNAT_TARGET_PAIRS = \\\n     a-caldel.adb<a-caldel-vms.adb \\\n     a-calend.adb<a-calend-vms.adb \\\n@@ -1543,11 +1504,6 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n     g-socthi.ads<g-socthi-vms.ads \\\n     g-socthi.adb<g-socthi-vms.adb \\\n     g-stsifd.adb<g-stsifd-sockets.adb \\\n-    i-c.ads<i-c-vms_64.ads \\\n-    i-cstrin.ads<i-cstrin-vms_64.ads \\\n-    i-cstrin.adb<i-cstrin-vms_64.adb \\\n-    i-cpoint.ads<i-cpoint-vms_64.ads \\\n-    i-cpoint.adb<i-cpoint-vms_64.adb \\\n     i-cstrea.adb<i-cstrea-vms.adb \\\n     memtrack.adb<memtrack-vms_64.adb \\\n     s-auxdec.ads<s-auxdec-vms_64.ads \\\n@@ -1564,20 +1520,46 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n     s-taspri.ads<s-taspri-vms.ads \\\n     s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n     s-tpopde.adb<s-tpopde-vms.adb \\\n-    s-tpopde.ads<s-tpopde-vms.ads \\\n-    $(LIBGNAT_TARGET_PAIRS_AUX1) \\\n-    $(LIBGNAT_TARGET_PAIRS_AUX2)\n+    s-tpopde.ads<s-tpopde-vms.ads\n \n   ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n+    LIBGNAT_TARGET_PAIRS += \\\n+      g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n+      g-trasym.adb<g-trasym-vms-ia64.adb \\\n+      s-asthan.adb<s-asthan-vms-ia64.adb \\\n+      s-auxdec.adb<s-auxdec-vms-ia64.adb \\\n+      s-osinte.adb<s-osinte-vms-ia64.adb \\\n+      s-osinte.ads<s-osinte-vms-ia64.ads \\\n+      s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n+      system.ads<system-vms-ia64.ads \\\n+      s-parame.ads<s-parame-vms-ia64.ads \\\n+      $(ATOMICS_TARGET_PAIRS)\n+\n     TOOLS_TARGET_PAIRS= \\\n       mlib-tgt-specific.adb<mlib-tgt-specific-vms-ia64.adb \\\n       symbols.adb<symbols-vms.adb \\\n       symbols-processing.adb<symbols-processing-vms-ia64.adb\n   else\n+    ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(targ))),)\n+      LIBGNAT_TARGET_PAIRS += \\\n+        g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n+        g-trasym.adb<g-trasym-vms-alpha.adb \\\n+        s-asthan.adb<s-asthan-vms-alpha.adb \\\n+        s-auxdec.adb<s-auxdec-vms-alpha.adb \\\n+        s-osinte.adb<s-osinte-vms.adb \\\n+        s-osinte.ads<s-osinte-vms.ads \\\n+        s-traent.adb<s-traent-vms.adb \\\n+        s-traent.ads<s-traent-vms.ads \\\n+        s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n+        system.ads<system-vms_64.ads \\\n+\ts-parame.ads<s-parame-vms-alpha.ads \\\n+        $(ATOMICS_TARGET_PAIRS)\n+\n     TOOLS_TARGET_PAIRS= \\\n       mlib-tgt-specific.adb<mlib-tgt-specific-vms-alpha.adb \\\n       symbols.adb<symbols-vms.adb \\\n       symbols-processing.adb<symbols-processing-vms-alpha.adb\n+    endif\n   endif\n \n adamsg.o: adamsg.msg"}, {"sha": "06ab52cca994c9468d2612be543b24235843c6ed", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -389,6 +389,30 @@ procedure Gnat1drv is\n       else\n          Back_End_Handles_Limited_Types := False;\n       end if;\n+\n+      --  Set switches for formal verification modes\n+\n+      if Debug_Flag_Dot_DD then\n+         SPARK_Mode := True;\n+      end if;\n+\n+      if Debug_Flag_Dot_EE then\n+         ALFA_Through_SPARK_Mode := True;\n+      end if;\n+\n+      if Debug_Flag_Dot_FF then\n+         ALFA_Through_Why_Mode := True;\n+      end if;\n+\n+      ALFA_Mode := ALFA_Through_SPARK_Mode or ALFA_Through_Why_Mode;\n+\n+      if ALFA_Mode then\n+         Set_Error_Msg_Lang (\"alfa\");\n+         Formal_Verification_Mode := True;\n+      elsif SPARK_Mode then\n+         Set_Error_Msg_Lang (\"spark\");\n+         Formal_Verification_Mode := True;\n+      end if;\n    end Adjust_Global_Switches;\n \n    --------------------"}, {"sha": "4849daab97cdeaad5203cca1ddc084222c5872b1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -192,6 +192,7 @@ Implementation Defined Pragmas\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n+* Pragma SPARK_95::\n * Pragma Static_Elaboration_Desired::\n * Pragma Stream_Convert::\n * Pragma Style_Checks::\n@@ -818,6 +819,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n+* Pragma SPARK_95::\n * Pragma Static_Elaboration_Desired::\n * Pragma Stream_Convert::\n * Pragma Style_Checks::\n@@ -4601,6 +4603,32 @@ The second argument must be a string literal, it cannot be a static\n string expression other than a string literal.  This is because its value\n is needed for error messages issued by all phases of the compiler.\n \n+@node Pragma SPARK_95\n+@unnumberedsec Pragma SPARK_95\n+@findex SPARK_95\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma SPARK_95;\n+@end smallexample\n+\n+@noindent\n+A configuration pragma that establishes SPARK 95 mode for the unit to which\n+it applies, regardless of the mode set by the command line switches.\n+In this mode, the compiler rejects constructs outside the SPARK 95 subset of\n+Ada, which provides a useful initial filter for those projects developed in\n+SPARK. Syntax and semantic error messages related to SPARK restrictions have\n+the form:\n+\n+@code{(spark) error message}.\n+\n+This is not a replacement for the semantic checks performed by the\n+SPARK Examiner tool, as the compiler only deals currently with code,\n+not at all with SPARK annotations, so it may well be the case that code which\n+passes the compiler in SPARK 95 mode is rejected by the SPARK Examiner,\n+e.g. due to the different visibility rules of the Examiner based on\n+@code{inherit} SPARK annotations.\n+\n @node Pragma Static_Elaboration_Desired\n @unnumberedsec Pragma Static_Elaboration_Desired\n @findex Static_Elaboration_Desired"}, {"sha": "0fea77d744756a6d2c281b6e76d2f1833ba5dafd", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -29,7 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Debug;\n with Gnatvsn; use Gnatvsn;\n with System;  use System;\n with Tree_IO; use Tree_IO;\n@@ -39,59 +38,6 @@ package body Opt is\n    SU : constant := Storage_Unit;\n    --  Shorthand for System.Storage_Unit\n \n-   ---------------\n-   -- ALFA_Mode --\n-   ---------------\n-\n-   function ALFA_Mode return Boolean is\n-   begin\n-      return ALFA_Through_SPARK_Mode or else ALFA_Through_Why_Mode;\n-   end ALFA_Mode;\n-\n-   -----------------------------\n-   -- ALFA_Through_SPARK_Mode --\n-   -----------------------------\n-\n-   function ALFA_Through_SPARK_Mode return Boolean is\n-   begin\n-      return Debug.Debug_Flag_Dot_EE;\n-   end ALFA_Through_SPARK_Mode;\n-\n-   ---------------------------\n-   -- ALFA_Through_Why_Mode --\n-   ---------------------------\n-\n-   function ALFA_Through_Why_Mode return Boolean is\n-   begin\n-      return Debug.Debug_Flag_Dot_FF;\n-   end ALFA_Through_Why_Mode;\n-\n-   ---------------------\n-   -- Formal_Language --\n-   ---------------------\n-\n-   function Formal_Language return String is\n-   begin\n-      pragma Assert (Formal_Verification_Mode);\n-      if ALFA_Mode then\n-         return \"alfa\";\n-      elsif SPARK_Mode then\n-         return \"spark\";\n-      else\n-         pragma Assert (False);\n-         return \"\";  --  unreachable\n-      end if;\n-   end Formal_Language;\n-\n-   ------------------------------\n-   -- Formal_Verification_Mode --\n-   ------------------------------\n-\n-   function Formal_Verification_Mode return Boolean is\n-   begin\n-      return ALFA_Mode or else SPARK_Mode;\n-   end Formal_Verification_Mode;\n-\n    ----------------------------------\n    -- Register_Opt_Config_Switches --\n    ----------------------------------\n@@ -257,19 +203,6 @@ package body Opt is\n       Short_Descriptors              := Short_Descriptors_Config;\n    end Set_Opt_Config_Switches;\n \n-   ----------------\n-   -- SPARK_Mode --\n-   ----------------\n-\n-   function SPARK_Mode return Boolean is\n-   begin\n-      --  When dropping the debug flag in favor of a compiler option,\n-      --  the option should implicitly set the SPARK_Version, so that this test\n-      --  becomes simply SPARK_Version > SPARK_None.\n-\n-      return Debug.Debug_Flag_Dot_DD or else SPARK_Version > SPARK_None;\n-   end SPARK_Mode;\n-\n    ---------------\n    -- Tree_Read --\n    ---------------"}, {"sha": "32326ecd3c7ba9df7105491457fb23cee4b011ed", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -1877,27 +1877,25 @@ package Opt is\n \n    --  These modes are currently defined through debug flags\n \n-   function Formal_Language return String;\n-   --  Returns \"alfa\" in ALFA_Mode and \"spark\" in SPARK_Mode\n+   Formal_Verification_Mode : Boolean := False;\n+   --  Set True if ALFA_Mode or SPARK_Mode\n \n-   function Formal_Verification_Mode return Boolean;\n-   --  Shorthand for ALFA_Mode or else SPARK_Mode\n+   ALFA_Mode : Boolean := False;\n+   --  Set True if ALFA_Through_SPARK_Mode or else ALFA_Through_Why_Mode\n \n-   function ALFA_Mode return Boolean;\n-   --  Shorthand for ALFA_Through_SPARK_Mode or else ALFA_Through_Why_Mode\n-\n-   function ALFA_Through_SPARK_Mode return Boolean;\n+   ALFA_Through_SPARK_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification through\n    --  the generation of SPARK code for those parts of the input code that\n-   --  belong to the ALFA subset of Ada. It is set by the flag -gnatd.E.\n+   --  belong to the ALFA subset of Ada. Set by debug flag -gnatd.E.\n \n-   function ALFA_Through_Why_Mode return Boolean;\n+   ALFA_Through_Why_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification through\n    --  the generation of Why code for those parts of the input code that\n-   --  belong to the ALFA subset of Ada. It is set by the flag -gnatd.F.\n+   --  belong to the ALFA subset of Ada. Set by debuf flag -gnatd.F.\n \n-   function SPARK_Mode return Boolean;\n-   --  Accept the SPARK subset of Ada only. It is set by the flag -gnatd.D.\n+   SPARK_Mode : Boolean := False;\n+   --  Reject constructs not allowed by SPARK. Set by flag -gnatd.D or\n+   --  by pragma SPARK_95.\n \n private\n "}, {"sha": "93a5be90d8307bd1003dbe4232cd5f592283474d", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -893,13 +893,15 @@ begin\n       -- SPARK_95 --\n       --------------\n \n-      --  This pragma must be processed at parse time, since we want to set\n-      --  the SPARK version properly at parse time to recognize the appropriate\n+      --  This pragma must be processed at parse time, since we want to set the\n+      --  SPARK version properly at parse time to recognize the appropriate\n       --  SPARK version syntax.\n \n       when Pragma_SPARK_95 =>\n          SPARK_Version := SPARK_95;\n-         Set_Error_Msg_Lang (\"(\" & Formal_Language & \") \");\n+         SPARK_Mode := True;\n+         Set_Error_Msg_Lang (\"spark\");\n+         Formal_Verification_Mode := True;\n \n       -------------------------\n       -- Style_Checks (GNAT) --"}, {"sha": "99f6806057d7ad1ee5f7a1ffe3ea01595343c3dc", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -1318,10 +1318,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n begin\n    Compiler_State := Parsing;\n \n-   if Formal_Verification_Mode then\n-      Set_Error_Msg_Lang (\"(\" & Formal_Language & \") \");\n-   end if;\n-\n    --  Deal with configuration pragmas case first\n \n    if Configuration_Pragmas then"}, {"sha": "b5a8e18af01e0c882f41b00905e8154ed0763cee", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -67,11 +67,6 @@ package body Sem_Ch4 is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Analyze_Concatenation_Operand (N : Node_Id);\n-   --  Checks that concatenation operands are properly restricted in SPARK or\n-   --  ALFA: each operand must be either a string literal, a static character\n-   --  expression, or another concatenation.\n-\n    procedure Analyze_Concatenation_Rest (N : Node_Id);\n    --  Does the \"rest\" of the work of Analyze_Concatenation, after the left\n    --  operand has been analyzed. See Analyze_Concatenation for details.\n@@ -1357,7 +1352,6 @@ package body Sem_Ch4 is\n       --  First analyze L ...\n \n       Analyze_Expression (L);\n-      Analyze_Concatenation_Operand (L);\n \n       --  ... then walk NN back up until we reach N (where we started), calling\n       --  Analyze_Concatenation_Rest along the way.\n@@ -1367,45 +1361,8 @@ package body Sem_Ch4 is\n          exit when NN = N;\n          NN := Parent (NN);\n       end loop;\n-\n-      if Formal_Verification_Mode\n-        and then Etype (N) /= Standard_String\n-      then\n-         Error_Msg_F (\"|~~result of concatenation should have type String\", N);\n-      end if;\n    end Analyze_Concatenation;\n \n-   -----------------------------------\n-   -- Analyze_Concatenation_Operand --\n-   -----------------------------------\n-\n-   --  Concatenation is restricted in SPARK or ALFA: each operand must be\n-   --  either a string literal, a static character expression, or another\n-   --  concatenation. N cannot be a concatenation here as Analyze_Concatenation\n-   --  and Analyze_Concatenation_Rest call Analyze_Concatenation_Operand\n-   --  separately on each final operand, past concatenation operations.\n-\n-   procedure Analyze_Concatenation_Operand (N : Node_Id) is\n-   begin\n-      if Formal_Verification_Mode then\n-         if Is_Character_Type (Etype (N)) then\n-            if not Is_Static_Expression (N) then\n-               Error_Msg_F (\"|~~character operand for concatenation should be \"\n-                            & \"static\", N);\n-            end if;\n-         elsif Is_String_Type (Etype (N)) then\n-            if Nkind (N) /= N_String_Literal then\n-               Error_Msg_F (\"|~~string operand for concatenation should be \"\n-                            & \"a literal\", N);\n-            end if;\n-\n-         --  Do not issue error on an operand that is neither a character nor\n-         --  a string, as the error is issued in Analyze_Concatenation_Rest.\n-\n-         end if;\n-      end if;\n-   end Analyze_Concatenation_Operand;\n-\n    --------------------------------\n    -- Analyze_Concatenation_Rest --\n    --------------------------------\n@@ -1424,7 +1381,6 @@ package body Sem_Ch4 is\n \n    begin\n       Analyze_Expression (R);\n-      Analyze_Concatenation_Operand (R);\n \n       --  If the entity is present, the node appears in an instance, and\n       --  denotes a predefined concatenation operation. The resulting type is"}, {"sha": "72a1529adb364c27164238d8cb038b8f2c546f91", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -1851,8 +1851,7 @@ package body Sem_Ch6 is\n \n             if Formal_Verification_Mode then\n                declare\n-                  Stat : constant Node_Id :=\n-                           Last_Source_Node_In_Sequence (Statements (HSS));\n+                  Stat : constant Node_Id := Last_Source_Statement (HSS);\n                begin\n                   if Present (Stat)\n                     and then not Nkind_In (Stat,"}, {"sha": "d2528acfc75ee4cae6c1988d3abe4c026724f370", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -12334,7 +12334,9 @@ package body Sem_Prag is\n             Check_Arg_Count (0);\n             Check_Valid_Configuration_Pragma;\n             SPARK_Version := SPARK_95;\n-            Set_Error_Msg_Lang (\"(\" & Formal_Language & \") \");\n+            SPARK_Mode := True;\n+            Formal_Verification_Mode := True;\n+            Set_Error_Msg_Lang (\"spark\");\n \n          --------------------------------\n          -- Static_Elaboration_Desired --"}, {"sha": "6cda48eb764381cc673efecbda9d7d8a74043993", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -7402,6 +7402,12 @@ package body Sem_Res is\n          exit when NN = N;\n          NN := Parent (NN);\n       end loop;\n+\n+      if Formal_Verification_Mode\n+        and then Base_Type (Etype (N)) /= Standard_String\n+      then\n+         Error_Msg_F (\"|~~result of concatenation should have type String\", N);\n+      end if;\n    end Resolve_Op_Concat;\n \n    ---------------------------\n@@ -7505,6 +7511,33 @@ package body Sem_Res is\n          Resolve (Arg, Btyp);\n       end if;\n \n+      --  Concatenation is restricted in SPARK or ALFA: each operand must be\n+      --  either a string literal, a static character expression, or another\n+      --  concatenation. Arg cannot be a concatenation here as callers of\n+      --  Resolve_Op_Concat_Arg call it separately on each final operand, past\n+      --  concatenation operations.\n+\n+      if Formal_Verification_Mode then\n+         if Is_Character_Type (Etype (Arg)) then\n+            if not Is_Static_Expression (Arg) then\n+               Error_Msg_F (\"|~~character operand for concatenation should be \"\n+                            & \"static\", N);\n+            end if;\n+\n+         elsif Is_String_Type (Etype (Arg)) then\n+            if Nkind (Arg) /= N_String_Literal then\n+               Error_Msg_F (\"|~~string operand for concatenation should be \"\n+                            & \"a literal\", N);\n+            end if;\n+\n+         --  Do not issue error on an operand that is neither a character nor\n+         --  a string, as the error is issued in Resolve_Op_Concat.\n+\n+         else\n+            null;\n+         end if;\n+      end if;\n+\n       Check_Unset_Reference (Arg);\n    end Resolve_Op_Concat_Arg;\n "}, {"sha": "f401f9441ae3afe9b2bc6814d23feb05cab02acc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -7981,22 +7981,22 @@ package body Sem_Util is\n       end case;\n    end Known_To_Be_Assigned;\n \n-   ----------------------------------\n-   -- Last_Source_Node_In_Sequence --\n-   ----------------------------------\n+   ---------------------------\n+   -- Last_Source_Statement --\n+   ---------------------------\n \n-   function Last_Source_Node_In_Sequence (List : List_Id) return Node_Id is\n+   function Last_Source_Statement (HSS : Node_Id) return Node_Id is\n       N : Node_Id;\n \n    begin\n-      N := Last (List);\n+      N := Last (Statements (HSS));\n       while Present (N) loop\n          exit when Comes_From_Source (N);\n-         N := Prev (N);\n+         Prev (N);\n       end loop;\n \n       return N;\n-   end Last_Source_Node_In_Sequence;\n+   end Last_Source_Statement;\n \n    -------------------\n    -- May_Be_Lvalue --"}, {"sha": "bb4e1c2bbbdcfc8854d75328be9437d750f90a47", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2933b16cf255cc606c6b29ee542d3eef6a063315/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=2933b16cf255cc606c6b29ee542d3eef6a063315", "patch": "@@ -927,9 +927,10 @@ package Sem_Util is\n    --  direction. Cases which may possibly be assignments but are not known to\n    --  be may return True from May_Be_Lvalue, but False from this function.\n \n-   function Last_Source_Node_In_Sequence (List : List_Id) return Node_Id;\n-   --  Returns the last node in List for which Comes_From_Source returns True,\n-   --  if any, or Empty otherwise.\n+   function Last_Source_Statement (HSS : Node_Id) return Node_Id;\n+   --  HSS is a handled statement sequence. This function returns the last\n+   --  statement in Statements (HSS) that has Comes_From_Source set. If no\n+   --  such statement exists, Empty is returned.\n \n    function Make_Simple_Return_Statement\n      (Sloc       : Source_Ptr;"}]}