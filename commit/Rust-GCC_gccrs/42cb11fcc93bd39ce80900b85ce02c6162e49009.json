{"sha": "42cb11fcc93bd39ce80900b85ce02c6162e49009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjYjExZmNjOTNiZDM5Y2U4MDkwMGI4NWNlMDJjNjE2MmU0OTAwOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-09T19:45:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-09T19:45:34Z"}, "message": "Remove now-unused variables.\n\nFrom-SVN: r24601", "tree": {"sha": "eea04bf2ee4328dd30f581d8d8a972be757e9e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea04bf2ee4328dd30f581d8d8a972be757e9e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42cb11fcc93bd39ce80900b85ce02c6162e49009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cb11fcc93bd39ce80900b85ce02c6162e49009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42cb11fcc93bd39ce80900b85ce02c6162e49009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cb11fcc93bd39ce80900b85ce02c6162e49009/comments", "author": null, "committer": null, "parents": [{"sha": "5e6a42d9e45fd193b3cc6d1a41f6604b8147e6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e6a42d9e45fd193b3cc6d1a41f6604b8147e6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e6a42d9e45fd193b3cc6d1a41f6604b8147e6af"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "cf5477c22781de864de24f24175dc83bc408b71d", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cb11fcc93bd39ce80900b85ce02c6162e49009/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cb11fcc93bd39ce80900b85ce02c6162e49009/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=42cb11fcc93bd39ce80900b85ce02c6162e49009", "patch": "@@ -940,7 +940,6 @@ make_node (code)\n   register int type = TREE_CODE_CLASS (code);\n   register int length = 0;\n   register struct obstack *obstack = current_obstack;\n-  register int i;\n #ifdef GATHER_STATISTICS\n   register tree_node_kind kind;\n #endif\n@@ -1134,7 +1133,6 @@ copy_node (node)\n   register tree t;\n   register enum tree_code code = TREE_CODE (node);\n   register int length = 0;\n-  register int i;\n \n   switch (TREE_CODE_CLASS (code))\n     {\n@@ -1546,7 +1544,6 @@ make_tree_vec (len)\n   register tree t;\n   register int length = (len-1) * sizeof (tree) + sizeof (struct tree_vec);\n   register struct obstack *obstack = current_obstack;\n-  register int i;\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)vec_kind]++;\n@@ -3045,7 +3042,7 @@ build1 (code, type, node)\n      tree node;\n {\n   register struct obstack *obstack = expression_obstack;\n-  register int i, length;\n+  register int length;\n #ifdef GATHER_STATISTICS\n   register tree_node_kind kind;\n #endif"}]}