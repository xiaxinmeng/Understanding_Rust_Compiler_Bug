{"sha": "61c07d3c9ba1d6351bbefc0227e526b905a63839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjMDdkM2M5YmExZDYzNTFiYmVmYzAyMjdlNTI2YjkwNWE2MzgzOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-07-03T14:41:22Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-07-03T14:41:22Z"}, "message": "rs6000.md (fix_truncdfsi2_internal): Ignore DImode in FPR as preference.\n\n        * config/rs6000/rs6000.md (fix_truncdfsi2_internal): Ignore DImode\n        in FPR as preference.\n        (fctiwz): Same.\n        (floatdidf2, fix_truncdfdi2): Same.\n        (floatdisf2, floatditf2, fix_trunctfdi2): Same.\n        (floatditf2): Same.\n        (floatsitf2, fix_trunctfsi2): SImode in GPR.\n        (ctrdi): Remove FPR alternative and splitter.\n\nFrom-SVN: r55212", "tree": {"sha": "c486452642db297f2535cf1bb51fc736f7e4d00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c486452642db297f2535cf1bb51fc736f7e4d00b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c07d3c9ba1d6351bbefc0227e526b905a63839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c07d3c9ba1d6351bbefc0227e526b905a63839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c07d3c9ba1d6351bbefc0227e526b905a63839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c07d3c9ba1d6351bbefc0227e526b905a63839/comments", "author": null, "committer": null, "parents": [{"sha": "77966be34bd2032e26d43348362f76314c6870eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77966be34bd2032e26d43348362f76314c6870eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77966be34bd2032e26d43348362f76314c6870eb"}], "stats": {"total": 173, "additions": 68, "deletions": 105}, "files": [{"sha": "704ed18abd7a885a523bc33b566a6608139ce20a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c07d3c9ba1d6351bbefc0227e526b905a63839/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c07d3c9ba1d6351bbefc0227e526b905a63839/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61c07d3c9ba1d6351bbefc0227e526b905a63839", "patch": "@@ -1,4 +1,15 @@\n-2002-07-02  Will Cohen <wcohen@redhat.com>\n+2002-07-03  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (fix_truncdfsi2_internal): Ignore DImode\n+\tin FPR as preference.\n+\t(fctiwz): Same.\n+\t(floatdidf2, fix_truncdfdi2): Same.\n+\t(floatdisf2, floatditf2, fix_trunctfdi2): Same.\n+\t(floatditf2): Same.\n+\t(floatsitf2, fix_trunctfsi2): SImode in GPR.\n+\t(ctrdi): Remove FPR alternative and splitter.\n+\n+2002-07-03  Will Cohen  <wcohen@redhat.com>\n \n \t* config/i386/i386.c (x86_integer_DFmode_moves): Disable for PPro.\n "}, {"sha": "338bd861ad6a8edd8595bf868ebce4d9b1e0703c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 56, "deletions": 104, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c07d3c9ba1d6351bbefc0227e526b905a63839/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c07d3c9ba1d6351bbefc0227e526b905a63839/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=61c07d3c9ba1d6351bbefc0227e526b905a63839", "patch": "@@ -5486,7 +5486,7 @@\n (define_insn \"*fix_truncdfsi2_internal\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n-   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=*f\"))\n    (clobber (match_operand:DI 3 \"memory_operand\" \"=o\"))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n   \"#\"\n@@ -5522,21 +5522,21 @@\n ; because the first makes it clear that operand 0 is not live\n ; before the instruction.\n (define_insn \"fctiwz\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n \t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))] 10))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))]\n+\t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"fctidz %0,%1\"\n@@ -5545,7 +5545,7 @@\n ;; This only is safe if rounding mode set appropriately.\n (define_insn_and_split \"floatdisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-        (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))\n+        (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && flag_unsafe_math_optimizations\"\n   \"#\"\n@@ -8316,7 +8316,7 @@\n \n (define_insn_and_split \"floatditf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n-        (float:TF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))\n+        (float:TF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n    && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n@@ -8330,7 +8330,7 @@\n \n (define_insn_and_split \"floatsitf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n-        (float:TF (match_operand:SI 1 \"gpc_reg_operand\" \"f\")))\n+        (float:TF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n@@ -8342,7 +8342,7 @@\n   \"\")\n \n (define_insn_and_split \"fix_trunctfdi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n         (fix:DI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n    && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n@@ -8355,7 +8355,7 @@\n   \"\")\n \n (define_insn_and_split \"fix_trunctfsi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=f\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n@@ -13333,11 +13333,9 @@\n \t\t   (plus:DI (match_dup 0)\n \t\t\t    (const_int -1)))\n \t      (clobber (match_scratch:CC 2 \"\"))\n-\t      (clobber (match_scratch:DI 3 \"\"))\n-\t      (clobber (match_dup 4))])]\n+\t      (clobber (match_scratch:DI 3 \"\"))])]\n   \"TARGET_POWERPC64\"\n-  \"\n-{ operands[4] = gen_reg_rtx (DImode); }\")\n+  \"\")\n \n ;; We need to be able to do this for any operand, including MEM, or we\n ;; will cause reload to blow up since we don't allow output reloads on\n@@ -13395,16 +13393,15 @@\n \n (define_insn \"*ctrdi_internal1\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13416,20 +13413,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16,24\")])\n+   (set_attr \"length\" \"*,12,16\")])\n \n (define_insn \"*ctrdi_internal2\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13441,7 +13437,7 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16,24\")])\n+   (set_attr \"length\" \"*,12,16\")])\n \n ;; Similar, but we can use GE since we have a REG_NONNEG.\n \n@@ -13495,16 +13491,15 @@\n \n (define_insn \"*ctrdi_internal3\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -13516,20 +13511,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16,24\")])\n+   (set_attr \"length\" \"*,12,16\")])\n \n (define_insn \"*ctrdi_internal4\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -13541,7 +13535,7 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16,24\")])\n+   (set_attr \"length\" \"*,12,16\")])\n \n ;; Similar but use EQ\n \n@@ -13595,16 +13589,15 @@\n \n (define_insn \"*ctrdi_internal5\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13616,20 +13609,19 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16,24\")])\n+   (set_attr \"length\" \"*,12,16\")])\n \n (define_insn \"*ctrdi_internal6\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13641,7 +13633,7 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16,24\")])\n+   (set_attr \"length\" \"*,12,16\")])\n \n ;; Now the splitters if we could not allocate the CTR register\n \n@@ -13705,41 +13697,39 @@\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n \t\t\t\t      [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t       (const_int 1)])\n-\t\t      (match_operand 6 \"\" \"\")\n-\t\t      (match_operand 7 \"\" \"\")))\n+\t\t      (match_operand 5 \"\" \"\")\n+\t\t      (match_operand 6 \"\" \"\")))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:DI 4 \"\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed && INT_REGNO_P (REGNO (operands[0]))\"\n+   (clobber (match_scratch:DI 4 \"\"))]\n+  \"TARGET_POWERPC64 && reload_completed\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:DI (match_dup 1)\n \t\t\t\t\t(const_int -1))\n \t\t\t       (const_int 0)))\n \t      (set (match_dup 0)\n \t\t   (plus:DI (match_dup 1)\n \t\t\t    (const_int -1)))])\n-   (set (pc) (if_then_else (match_dup 8)\n-\t\t\t   (match_dup 6)\n-\t\t\t   (match_dup 7)))]\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n   \"\n-{ operands[8] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n \t\t\t\t      [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t       (const_int 1)])\n-\t\t      (match_operand 6 \"\" \"\")\n-\t\t      (match_operand 7 \"\" \"\")))\n+\t\t      (match_operand 5 \"\" \"\")\n+\t\t      (match_operand 6 \"\" \"\")))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(plus:DI (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:DI 4 \"\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"\"))]\n+   (clobber (match_scratch:DI 4 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\n    && ! gpc_reg_operand (operands[0], DImode)\"\n   [(parallel [(set (match_dup 3)\n@@ -13751,51 +13741,13 @@\n \t\t\t    (const_int -1)))])\n    (set (match_dup 0)\n \t(match_dup 4))\n-   (set (pc) (if_then_else (match_dup 8)\n-\t\t\t   (match_dup 6)\n-\t\t\t   (match_dup 7)))]\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n   \"\n-{ operands[8] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n-(define_split\n-  [(set (pc)\n-       (if_then_else (match_operator 2 \"comparison_operator\"\n-\t\t\t\t     [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t      (const_int 1)])\n-\t\t     (match_operand 6 \"\" \"\")\n-\t\t     (match_operand 7 \"\" \"\")))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-       (plus:DI (match_dup 1)\n-\t\t(const_int -1)))\n-   (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:DI 4 \"\"))\n-   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed && FP_REGNO_P (REGNO (operands[0]))\"\n-  [(set (match_dup 5)\n-\t(match_dup 1))\n-   (set (match_dup 4)\n-\t(match_dup 5))\n-   (parallel [(set (match_dup 3)\n-\t\t   (compare:CC (plus:DI (match_dup 4)\n-\t\t\t\t\t(const_int -1))\n-\t\t\t       (const_int 0)))\n-\t      (set (match_dup 4)\n-\t\t   (plus:DI (match_dup 4)\n-\t\t\t    (const_int -1)))])\n-   (set (match_dup 5)\n-\t(match_dup 4))\n-   (set (match_dup 0)\n-\t(match_dup 5))\n-   (set (pc) (if_then_else (match_dup 8)\n-\t\t\t   (match_dup 6)\n-\t\t\t   (match_dup 7)))]\n-  \"\n-{\n-  operands[8] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n-\t\t\t const0_rtx);\n-}\")\n-\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]"}]}