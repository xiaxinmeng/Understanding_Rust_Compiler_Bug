{"sha": "cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3ZDJlYjAzM2MyZjc5ODIxYjQ4ZjM4YTY0MGYyYjc3ODQ1ZTRkNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-04-04T21:38:12Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-04-04T21:38:12Z"}, "message": "re PR fortran/39577 (False positive with -fcheck=recursion)\n\n2009-04-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/39577\n        * trans-decl.c (gfc_generate_function_code): Move recursive\n        check to the right position.\n\n2009-04-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/39577\n        * gfortran.dg/recursive_check_8.f90: New.\n        * gfortran.dg/recursive_check_9.f90: New.\n        * gfortran.dg/recursive_check_10.f90: New.\n        * gfortran.dg/recursive_check_11.f90: New.\n        * gfortran.dg/recursive_check_12.f90: New.\n        * gfortran.dg/recursive_check_13.f90: New.\n        * gfortran.dg/recursive_check_14.f90: New.\n\nFrom-SVN: r145552", "tree": {"sha": "f3bdb36fa5464d954273b3aaf6f24994494d1a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3bdb36fa5464d954273b3aaf6f24994494d1a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "862900112e016aa821f4bd659c3e53ac91853f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862900112e016aa821f4bd659c3e53ac91853f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862900112e016aa821f4bd659c3e53ac91853f32"}], "stats": {"total": 244, "additions": 239, "deletions": 5}, "files": [{"sha": "d1c823a857754813257786e141b2bdf8068594a7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -1,3 +1,9 @@\n+2009-04-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/39577\n+\t* trans-decl.c (gfc_generate_function_code): Move recursive\n+\tcheck to the right position.\n+\n 2009-04-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37614"}, {"sha": "ac768b3a00169abf6edac581c8c3eac60f9385f2", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -3718,6 +3718,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n   tree recurcheckvar = NULL;\n   gfc_symbol *sym;\n   int rank;\n+  bool is_recursive;\n \n   sym = ns->proc_name;\n \n@@ -3883,7 +3884,10 @@ gfc_generate_function_code (gfc_namespace * ns)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n-   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !sym->attr.recursive)\n+   is_recursive = sym->attr.recursive\n+\t\t  || (sym->attr.entry_master\n+\t\t      && sym->ns->entries->sym->attr.recursive);\n+   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n      {\n        char * msg;\n \n@@ -3953,6 +3957,13 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n       gfc_add_expr_to_block (&block, tmp);\n \n+      /* Reset recursion-check variable.  */\n+      if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n+      {\n+\tgfc_add_modify (&block, recurcheckvar, boolean_false_node);\n+\trecurcheckvar = NULL;\n+      }\n+\n       if (result == NULL_TREE)\n \t{\n \t  /* TODO: move to the appropriate place in resolve.c.  */\n@@ -3975,11 +3986,16 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t}\n     }\n   else\n-    gfc_add_expr_to_block (&block, tmp);\n+    {\n+      gfc_add_expr_to_block (&block, tmp);\n+      /* Reset recursion-check variable.  */\n+      if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n+      {\n+\tgfc_add_modify (&block, recurcheckvar, boolean_false_node);\n+\trecurcheckvar = NULL;\n+      }\n+    }\n \n- /* Reset recursion-check variable.  */\n- if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !sym->attr.recursive)\n-   gfc_add_modify (&block, recurcheckvar, boolean_false_node);\n \n   /* Add all the decls we created during processing.  */\n   decl = saved_function_decls;"}, {"sha": "1f090d0616d137ed6718d398b53fda63f3ff5a74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -1,3 +1,14 @@\n+2009-04-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/39577\n+\t* gfortran.dg/recursive_check_8.f90: New.\n+\t* gfortran.dg/recursive_check_9.f90: New.\n+\t* gfortran.dg/recursive_check_10.f90: New.\n+\t* gfortran.dg/recursive_check_11.f90: New.\n+\t* gfortran.dg/recursive_check_12.f90: New.\n+\t* gfortran.dg/recursive_check_13.f90: New.\n+\t* gfortran.dg/recursive_check_14.f90: New.\n+\n 2009-04-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/25185"}, {"sha": "a30b82caaf2683d281beafa1e2cf4943ec8a9c10", "filename": "gcc/testsuite/gfortran.dg/recursive_check_10.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_10.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+!\n+! PR fortran/39577\n+!\n+! OK - no recursion\n+program test\n+ integer :: i\n+ i = f(.false.)\n+ print *,i\n+ i = f(.false.)\n+ print *,i\n+contains\n+  integer function f(rec) \n+    logical :: rec\n+    if(rec) then\n+      f = g()\n+    else\n+      f = 42\n+    end if\n+  end function f\n+  integer function g()\n+    g = f(.false.)\n+  end function g\n+end program test"}, {"sha": "870c1127d012cccc1697ba9b4814383a39e5c1ba", "filename": "gcc/testsuite/gfortran.dg/recursive_check_11.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_11.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+! { dg-shouldfail \"Recursion check\" }\n+!\n+! { dg-output \"Fortran runtime error: Recursive call to nonrecursive procedure 'f'\" }\n+!\n+! PR fortran/39577\n+!\n+! wrong - recursion\n+program test\n+ integer :: i\n+ i = f(.false.)\n+ print *,i\n+ i = f(.true.)\n+ print *,i\n+contains\n+  integer function f(rec) \n+    logical :: rec\n+    if(rec) then\n+      f = g()\n+    else\n+      f = 42\n+    end if\n+  end function f\n+  integer function g()\n+    g = f(.false.)\n+  end function g\n+end program test"}, {"sha": "22eaf7d0f282ea25cc1445e9949af42eb45c6726", "filename": "gcc/testsuite/gfortran.dg/recursive_check_12.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_12.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+!\n+! PR fortran/39577\n+!\n+! OK - no recursion\n+module m\n+  implicit none\n+contains\n+  subroutine f(rec) \n+    logical :: rec\n+    if(rec) then\n+      call h()\n+    end if\n+    return\n+  entry g()\n+  end subroutine f\n+  subroutine h()\n+    call f(.false.)\n+  end subroutine h\n+end module m\n+\n+program test\n+ use m\n+ implicit none\n+ call f(.false.)\n+ call f(.false.)\n+end program test\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "ed222a322ec5046ee06560c1c10a6be1a9e95ff9", "filename": "gcc/testsuite/gfortran.dg/recursive_check_13.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_13.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+! { dg-shouldfail \"Recursion check\" }\n+!\n+! { dg-output \"Fortran runtime error: Recursive call to nonrecursive procedure 'master.0.f'\" }\n+!\n+! PR fortran/39577\n+!\n+! invalid - recursion\n+module m\n+  implicit none\n+contains\n+  subroutine f(rec) \n+    logical :: rec\n+    if(rec) then\n+      call h()\n+    end if\n+    return\n+  entry g()\n+  end subroutine f\n+  subroutine h()\n+    call f(.false.)\n+  end subroutine h\n+end module m\n+\n+program test\n+ use m\n+ implicit none\n+ call f(.false.)\n+ call f(.true.)\n+end program test\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "e68e5fc566b1b39aa5901370cb1719efb2de1de4", "filename": "gcc/testsuite/gfortran.dg/recursive_check_14.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_14.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+!\n+! PR fortran/39577\n+!\n+! Recursive but valid program\n+! Contributed by Dominique Dhumieres\n+!\n+recursive function fac(i) result (res)\n+  integer :: i, j, k, res\n+  k = 1\n+  goto 100\n+entry bifac(i,j) result (res)\n+  k = j\n+100 continue\n+  if (i < k) then\n+    res = 1\n+  else\n+    res = i * bifac(i-k,k)\n+  end if\n+end function\n+\n+program test\n+interface\n+  recursive function fac(n) result (res)\n+    integer :: res\n+    integer :: n\n+  end function fac\n+  recursive function bifac(m,n) result (res)\n+    integer :: m, n, res\n+  end function  bifac\n+end interface\n+\n+  print *, fac(5)\n+  print *, bifac(5,2)\n+  print*, fac(6)\n+  print *, bifac(6,2)\n+  print*, fac(0)\n+  print *, bifac(1,2)\n+end program test"}, {"sha": "4d83498c7e24db8344a2817e9be2f329baa60332", "filename": "gcc/testsuite/gfortran.dg/recursive_check_8.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_8.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+!\n+! PR fortran/39577\n+!\n+! OK - no recursion\n+program test\n+ call f(.false.)\n+ call f(.false.)\n+contains\n+  subroutine f(rec) \n+    logical :: rec\n+    if(rec) then\n+      call g()\n+    end if\n+    return\n+  end subroutine f\n+  subroutine g()\n+    call f(.false.)\n+    return\n+  end subroutine g\n+end program test"}, {"sha": "50af06787fc94366eff81d220be81b5f0a62e237", "filename": "gcc/testsuite/gfortran.dg/recursive_check_9.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7d2eb033c2f79821b48f38a640f2b77845e4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_9.f90?ref=cf7d2eb033c2f79821b48f38a640f2b77845e4d5", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=recursion\" }\n+! { dg-shouldfail \"Recursion check\" }\n+!\n+! { dg-output \"Fortran runtime error: Recursive call to nonrecursive procedure 'f'\" }\n+!\n+! PR fortran/39577\n+!\n+! Invalid - recursion\n+program test\n+ call f(.false.)\n+ call f(.true.)\n+contains\n+  subroutine f(rec) \n+    logical :: rec\n+    if(rec) then\n+      call g()\n+    end if\n+    return\n+  end subroutine f\n+  subroutine g()\n+    call f(.false.)\n+    return\n+  end subroutine g\n+end program test"}]}