{"sha": "7bdbfa05dba783697d330f283a8427002667408f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkYmZhMDVkYmE3ODM2OTdkMzMwZjI4M2E4NDI3MDAyNjY3NDA4Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1999-01-21T21:16:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-01-21T21:16:22Z"}, "message": "cp-tree.h (PUSH_GLOBAL): New macro.\n\n\t* cp-tree.h (PUSH_GLOBAL): New macro.\n\t(PUSH_LOCAL): Likewise.\n\t(PUSH_USING): Likewise.\n\t(namespace_bindings_p): Declare.\n\t(push_overloaded_decl): Likewise.\n\t* decl.c (push_overloaded_decl): Don't make it static.  Check for\n\tillegal declarations after using declarations here.\n\t(namespace_bindings_p): Likewise.\n\t(duplicate_decls): Don't consider declarations from different\n\tnamespaces to be the same.\n\t(pushdecl): Use symbolic PUSH_ constants in calls to\n\tpush_overloaded_decl.\n\t(push_overloaded_decl_1): Likewise.\n\t* decl2.c (validate_nonmember_using_decl): Tweak `std' handling.\n\t(do_nonmember_using_decl): Check for illegal using declarations\n\tafter ordinary declarations here.\n\t(do_local_using_decl): Call pushdecl to insert declarations.\n\nFrom-SVN: r24812", "tree": {"sha": "e6f14953b9b72129c669c461010c89a23823f94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6f14953b9b72129c669c461010c89a23823f94b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bdbfa05dba783697d330f283a8427002667408f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdbfa05dba783697d330f283a8427002667408f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bdbfa05dba783697d330f283a8427002667408f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdbfa05dba783697d330f283a8427002667408f/comments", "author": null, "committer": null, "parents": [{"sha": "15914757c6d0717225a6d87035cb524fb06c5ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15914757c6d0717225a6d87035cb524fb06c5ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15914757c6d0717225a6d87035cb524fb06c5ac9"}], "stats": {"total": 173, "additions": 147, "deletions": 26}, "files": [{"sha": "280d14db9ad0006064b4540459f49b894145ed76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -1,9 +1,32 @@\n+1999-01-21  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cp-tree.h (PUSH_GLOBAL): New macro.\n+\t(PUSH_LOCAL): Likewise.\n+\t(PUSH_USING): Likewise.\n+\t(namespace_bindings_p): Declare.\n+\t(push_overloaded_decl): Likewise.\n+\t* decl.c (push_overloaded_decl): Don't make it static.  Check for\n+\tillegal declarations after using declarations here.\n+\t(namespace_bindings_p): Likewise.\n+\t(duplicate_decls): Don't consider declarations from different\n+\tnamespaces to be the same.\n+\t(pushdecl): Use symbolic PUSH_ constants in calls to\n+\tpush_overloaded_decl.\n+\t(push_overloaded_decl_1): Likewise.\n+\t* decl2.c (validate_nonmember_using_decl): Tweak `std' handling. \n+\t(do_nonmember_using_decl): Check for illegal using declarations\n+\tafter ordinary declarations here.\n+\t(do_local_using_decl): Call pushdecl to insert declarations.\n+\n 1999-01-21  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grokdeclarator): Fix lang_c -> lang_name_c typo.\n \n 1999-01-21  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* tree.c (build_cplus_array_type_1): Don't call build_array_type\n+\tfor types involving template parameters.\n+\t\n \t* cp-tree.h (PARM_DECL_EXPR): Delete.\n \t(convert_default_arg): Change prototype.\n \t(check_default_argument): Declare."}, {"sha": "e26a910cc67b97aab9ca5839bf0148a0dfb11e85", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -2582,6 +2582,14 @@ extern tree current_class_name;\t/* IDENTIFIER_NODE: name of current class */\n \t\t\t\t   another declaration of an existing\n \t\t\t\t   entity is seen.  */\n \n+/* Used with push_overloaded_decl.  */\n+#define PUSH_GLOBAL          0  /* Push the DECL into namespace scope,\n+\t\t\t\t   regardless of the current scope.  */\n+#define PUSH_LOCAL           1  /* Push the DECL into the current\n+\t\t\t\t   scope.  */\n+#define PUSH_USING           2  /* We are pushing this DECL as the\n+\t\t\t\t   result of a using declaration.  */\n+\n /* Returns nonzero iff TYPE1 and TYPE2 are the same type, in the usual\n    sense of `same'.  */\n #define same_type_p(type1, type2) \\\n@@ -2692,6 +2700,7 @@ extern tree perform_qualification_conversions   PROTO((tree, tree));\n extern void set_identifier_local_value\t\tPROTO((tree, tree));\n extern int global_bindings_p\t\t\tPROTO((void));\n extern int toplevel_bindings_p\t\t\tPROTO((void));\n+extern int namespace_bindings_p\t\t\tPROTO((void));\n extern void keep_next_level\t\t\tPROTO((void));\n extern int kept_level_p\t\t\t\tPROTO((void));\n extern void declare_parm_level\t\t\tPROTO((void));\n@@ -2816,6 +2825,7 @@ extern int check_static_variable_definition     PROTO((tree, tree));\n extern void push_local_binding                  PROTO((tree, tree));\n extern void push_class_binding                  PROTO((tree, tree));\n extern tree check_default_argument              PROTO((tree, tree));\n+extern tree push_overloaded_decl\t\tPROTO((tree, int));\n \n /* in decl2.c */\n extern int check_java_method\t\t\tPROTO((tree));"}, {"sha": "39e07a4ba6efdbcfe55ec6ff2b46dbbdb2166a45", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -135,7 +135,6 @@ static struct stack_level *decl_stack;\n static tree grokparms\t\t\t\tPROTO((tree, int));\n static tree lookup_nested_type\t\t\tPROTO((tree, tree));\n static char *redeclaration_error_message\tPROTO((tree, tree));\n-static tree push_overloaded_decl\t\tPROTO((tree, int));\n \n static struct stack_level *push_decl_level PROTO((struct stack_level *,\n \t\t\t\t\t\t  struct obstack *));\n@@ -145,7 +144,6 @@ static void pop_binding_level PROTO((void));\n static void suspend_binding_level PROTO((void));\n static void resume_binding_level PROTO((struct binding_level *));\n static struct binding_level *make_binding_level PROTO((void));\n-static int namespace_bindings_p PROTO((void));\n static void declare_namespace_level PROTO((void));\n static void signal_catch PROTO((int)) ATTRIBUTE_NORETURN;\n static void storedecls PROTO((tree));\n@@ -922,7 +920,7 @@ toplevel_bindings_p ()\n \n /* Nonzero if this is a namespace scope.  */\n \n-static int\n+int\n namespace_bindings_p ()\n {\n   return current_binding_level->namespace_p;\n@@ -2942,6 +2940,11 @@ duplicate_decls (newdecl, olddecl)\n     }\n   else if (!types_match)\n     {\n+      if (DECL_REAL_CONTEXT (newdecl) != DECL_REAL_CONTEXT (olddecl))\n+\t/* These are certainly not duplicate declarations; they're\n+\t   from different scopes.  */\n+\treturn 0;\n+\n       if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n \t{\n \t  /* The name of a class template may not be declared to refer to\n@@ -3655,7 +3658,7 @@ pushdecl (x)\n \n       if (TREE_CODE (x) == FUNCTION_DECL && ! DECL_FUNCTION_MEMBER_P (x))\n \t{\n-\t  t = push_overloaded_decl (x, 1);\n+\t  t = push_overloaded_decl (x, PUSH_LOCAL);\n \t  if (t != x || DECL_LANGUAGE (x) == lang_c)\n \t    return t;\n \t  if (!namespace_bindings_p ())\n@@ -3665,7 +3668,7 @@ pushdecl (x)\n \t    need_new_binding = 0;\n \t}\n       else if (DECL_FUNCTION_TEMPLATE_P (x) && DECL_NAMESPACE_SCOPE_P (x))\n-\treturn push_overloaded_decl (x, 0);\n+\treturn push_overloaded_decl (x, PUSH_GLOBAL);\n \n       /* If declaring a type as a typedef, copy the type (unless we're\n \t at line 0), and install this TYPE_DECL as the new type's typedef\n@@ -4157,19 +4160,25 @@ push_using_directive (used)\n    DECL may also be a TEMPLATE_DECL, with a FUNCTION_DECL in its DECL_RESULT\n    slot.  It is dealt with the same way.\n \n+   FLAGS is a bitwise-or of the following values:\n+     PUSH_LOCAL: Bind DECL in the current scope, rather than at\n+                 namespace scope.\n+     PUSH_USING: DECL is being pushed as the result of a using\n+                 declaration. \n+\n    The value returned may be a previous declaration if we guessed wrong\n    about what language DECL should belong to (C or C++).  Otherwise,\n    it's always DECL (and never something that's not a _DECL).  */\n \n-static tree\n-push_overloaded_decl (decl, forgettable)\n+tree\n+push_overloaded_decl (decl, flags)\n      tree decl;\n-     int forgettable;\n+     int flags;\n {\n   tree name = DECL_NAME (decl);\n   tree old;\n   tree new_binding;\n-  int doing_global = (namespace_bindings_p () || ! forgettable);\n+  int doing_global = (namespace_bindings_p () || !(flags & PUSH_LOCAL));\n \n   if (doing_global)\n     {\n@@ -4202,9 +4211,19 @@ push_overloaded_decl (decl, forgettable)\n           tree tmp;\n \t  \n \t  for (tmp = old; tmp; tmp = OVL_NEXT (tmp))\n-\t    if (decl == OVL_CURRENT (tmp) \n-\t\t|| duplicate_decls (decl, OVL_CURRENT (tmp)))\n-\t      return OVL_CURRENT (tmp);\n+\t    {\n+\t      tree fn = OVL_CURRENT (tmp);\n+\n+\t      if (TREE_CODE (tmp) == OVERLOAD && OVL_USED (tmp)\n+\t\t  && !(flags & PUSH_USING)\n+\t\t  && compparms (TYPE_ARG_TYPES (TREE_TYPE (fn)),\n+\t\t\t\tTYPE_ARG_TYPES (TREE_TYPE (decl))))\n+\t\tcp_error (\"`%#D' conflicts with previous using declaration `%#D'\",\n+\t\t\t  decl, fn);\n+\t      \n+\t      if (duplicate_decls (decl, fn))\n+\t\treturn fn;\n+\t    }\n \t}\n       else\n \t{\n@@ -5776,7 +5795,7 @@ static void\n push_overloaded_decl_1 (x)\n      tree x;\n {\n-  push_overloaded_decl (x, 0);\n+  push_overloaded_decl (x, PUSH_GLOBAL);\n }\n \n #ifdef __GNUC__"}, {"sha": "ed9c11b3824d93ee7fc8fa7d75ed54a221109e4c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -4703,6 +4703,16 @@ validate_nonmember_using_decl (decl, scope, name)\n   if (TREE_CODE (decl) == SCOPE_REF\n       && TREE_OPERAND (decl, 0) == std_node)\n     {\n+      if (namespace_bindings_p ()\n+\t  && current_namespace == global_namespace)\n+\t/* There's no need for a using declaration at all, here,\n+\t   since `std' is the same as `::'.  We can't just pass this\n+\t   on because we'll complain later about declaring something\n+\t   in the same scope as a using declaration with the same\n+\t   name.  We return NULL_TREE which indicates to the caller\n+\t   that there's no need to do any further processing.  */\n+\treturn NULL_TREE;\n+\n       *scope = global_namespace;\n       *name = TREE_OPERAND (decl, 1);\n     }\n@@ -4773,17 +4783,37 @@ do_nonmember_using_decl (scope, name, oldval, oldtype, newval, newtype)\n       *newval = oldval;\n       for (tmp = BINDING_VALUE (decls); tmp; tmp = OVL_NEXT (tmp))\n \t{\n-\t  /* Compare each new function with each old one.\n-\t     If the old function was also used, there is no conflict. */\n+\t  tree new_fn = OVL_CURRENT (tmp);\n+\n+\t  /* [namespace.udecl]\n+\n+\t     If a function declaration in namespace scope or block\n+\t     scope has the same name and the same parameter types as a\n+\t     function introduced by a using declaration the program is\n+\t     ill-formed.  */\n \t  for (tmp1 = oldval; tmp1; tmp1 = OVL_NEXT (tmp1))\n-\t    if (OVL_CURRENT (tmp) == OVL_CURRENT (tmp1))\n-\t      break;\n-\t    else if (OVL_USED (tmp1))\n-\t      continue;\n-\t    else if (duplicate_decls (OVL_CURRENT (tmp), OVL_CURRENT (tmp1)))\n-\t      return;\n+\t    {\n+\t      tree old_fn = OVL_CURRENT (tmp1);\n \n-\t  /* Duplicate use, ignore */\n+\t      if (!OVL_USED (tmp1)\n+\t\t  && compparms (TYPE_ARG_TYPES (TREE_TYPE (new_fn)),\n+\t\t\t\tTYPE_ARG_TYPES (TREE_TYPE (old_fn))))\n+\t\t{\n+\t\t  /* There was already a non-using declaration in\n+\t\t     this scope with the same parameter types.  */\n+\t\t  cp_error (\"`%D' is already declared in this scope\",\n+\t\t\t    name);\n+\t\t  break;\n+\t\t}\n+\t      else if (duplicate_decls (new_fn, old_fn))\n+\t\t/* We're re-using something we already used \n+\t\t   before.  We don't need to add it again.  */ \n+\t\tbreak;\n+\t    }\n+\n+\t  /* If we broke out of the loop, there's no reason to add\n+\t     this function to the using declarations for this\n+\t     scope.  */\n \t  if (tmp1)\n \t    continue;\n \t    \n@@ -4856,7 +4886,20 @@ do_local_using_decl (decl)\n   do_nonmember_using_decl (scope, name, oldval, oldtype, &newval, &newtype);\n \n   if (newval)\n-    push_local_binding (name, newval);\n+    {\n+      if (is_overloaded_fn (newval))\n+\t{\n+\t  tree fn;\n+\n+\t  /* We only need to push declarations for those functions\n+\t     that were not already bound in the current level.  */\n+\t  for (fn = newval; fn != oldval; fn = OVL_NEXT (fn))\n+\t    push_overloaded_decl (OVL_CURRENT (fn), \n+\t\t\t\t  PUSH_LOCAL | PUSH_USING);\n+\t}\n+      else\n+\tpush_local_binding (name, newval);\n+    }\n   if (newtype)\n     set_identifier_type_value (name, newtype);\n }"}, {"sha": "656cc52d036cf9fa41fbc3b1c1565adc20a9cb64", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -416,7 +416,9 @@ build_cplus_array_type_1 (elt_type, index_type)\n       saveable_obstack = &permanent_obstack;\n     }\n \n-  if (processing_template_decl)\n+  if (processing_template_decl \n+      || uses_template_parms (elt_type) \n+      || uses_template_parms (index_type))\n     {\n       t = make_node (ARRAY_TYPE);\n       TREE_TYPE (t) = elt_type;"}, {"sha": "ad96157641958fd8311e6f2a09e55b67f7e3309c", "filename": "gcc/testsuite/g++.old-deja/g++.ns/overload4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Foverload4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Foverload4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Foverload4.C?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -1,6 +1,6 @@\n // Build don't link:\n namespace A{\n-  void f();   // ERROR - .*\n+  void f();  \n }\n \n using A::f;"}, {"sha": "24a0a6df4daeb7042b2cd0dd4a53630659f86434", "filename": "gcc/testsuite/g++.old-deja/g++.ns/overload5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Foverload5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Foverload5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Foverload5.C?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -1,6 +1,6 @@\n // Build don't link:\n namespace A{\n-  void f(){}         // ERROR - previous declaration\n+  void f(){}        \n }\n \n using A::f;"}, {"sha": "edc863b08bf5f564085f2816f40695032286b59b", "filename": "gcc/testsuite/g++.old-deja/g++.ns/using12.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fusing12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fusing12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fusing12.C?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link:\n+// Origin: Brendan Kehoe <brendan@cygnus.com>\n+\n+namespace foo\n+{\n+  void x (bool);     // ERROR - candidates\n+  void x (char);     // ERROR - candidates\n+  void x (int);      // ERROR - candidates\n+  void x (double);   // ERROR - candidates\n+}\n+\n+namespace baz { void x (int); }  // ERROR - candidates\n+\n+void fn (int i)\n+{\n+  using foo::x;\n+  using baz::x;\n+  x(i); \t // ERROR - ambiguous\n+}"}, {"sha": "ec5e1e0e3a7987670b6ba2a7520f184897fac103", "filename": "gcc/testsuite/g++.old-deja/g++.pt/array3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Farray3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdbfa05dba783697d330f283a8427002667408f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Farray3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Farray3.C?ref=7bdbfa05dba783697d330f283a8427002667408f", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link:\n+// Origin: Brendan Kehoe <brendan@cygnus.com>\n+\n+ template <int x> int foo(char[4][x]) { return x; }\n+ int (*bar)(char[4][3]) = &foo;"}]}