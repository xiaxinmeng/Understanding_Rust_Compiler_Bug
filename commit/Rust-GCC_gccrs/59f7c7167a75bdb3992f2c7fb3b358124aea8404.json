{"sha": "59f7c7167a75bdb3992f2c7fb3b358124aea8404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmN2M3MTY3YTc1YmRiMzk5MmYyYzdmYjNiMzU4MTI0YWVhODQwNA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-05-31T10:45:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-31T10:45:51Z"}, "message": "[Ada] Fix compiler crash for tagged private types\n\n2018-05-31  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.ads, sem_util.adb (Find_Primitive_Eq): New subprogram.\n\t* exp_ch4.adb (Expand_Composite_Equality): Use the new subprogram\n\tFind_Primitive_Eq to search for the primitive of types whose underlying\n\ttype is a tagged type.\n\ngcc/testsuite/\n\n\t* gnat.dg/tagged1.adb, gnat.dg/tagged1.ads: New testcase.\n\nFrom-SVN: r260997", "tree": {"sha": "198660b878b5f1653ab3ea397774c2c1676ced74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198660b878b5f1653ab3ea397774c2c1676ced74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f7c7167a75bdb3992f2c7fb3b358124aea8404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f7c7167a75bdb3992f2c7fb3b358124aea8404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f7c7167a75bdb3992f2c7fb3b358124aea8404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f7c7167a75bdb3992f2c7fb3b358124aea8404/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01f481c77e01414e75fc26adead0d143b27df85d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f481c77e01414e75fc26adead0d143b27df85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f481c77e01414e75fc26adead0d143b27df85d"}], "stats": {"total": 179, "additions": 148, "deletions": 31}, "files": [{"sha": "cec6c39879ac5ee6e5b6d7cb2db1f2fc0c9e1bad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -1,3 +1,10 @@\n+2018-05-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Find_Primitive_Eq): New subprogram.\n+\t* exp_ch4.adb (Expand_Composite_Equality): Use the new subprogram\n+\tFind_Primitive_Eq to search for the primitive of types whose underlying\n+\ttype is a tagged type.\n+\n 2018-05-31  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma.Check_Loop_Pragma_Placement): Inverse"}, {"sha": "0d836f856987bf0127a0acc3e155fc70cecff1cf", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -2335,7 +2335,6 @@ package body Exp_Ch4 is\n    is\n       Loc       : constant Source_Ptr := Sloc (Nod);\n       Full_Type : Entity_Id;\n-      Prim      : Elmt_Id;\n       Eq_Op     : Entity_Id;\n \n       function Find_Primitive_Eq return Node_Id;\n@@ -2481,36 +2480,8 @@ package body Exp_Ch4 is\n       --  Case of tagged record types\n \n       elsif Is_Tagged_Type (Full_Type) then\n-\n-         --  Call the primitive operation \"=\" of this type\n-\n-         if Is_Class_Wide_Type (Full_Type) then\n-            Full_Type := Root_Type (Full_Type);\n-         end if;\n-\n-         --  If this is an untagged private type completed with a derivation of\n-         --  an untagged private type whose full view is a tagged type, we use\n-         --  the primitive operations of the private parent type (since it does\n-         --  not have a full view, and also because its equality primitive may\n-         --  have been overridden in its untagged full view).\n-\n-         if Inherits_From_Tagged_Full_View (Typ) then\n-            Prim := First_Elmt (Collect_Primitive_Operations (Typ));\n-         else\n-            Prim := First_Elmt (Primitive_Operations (Full_Type));\n-         end if;\n-\n-         loop\n-            Eq_Op := Node (Prim);\n-            exit when Chars (Eq_Op) = Name_Op_Eq\n-              and then Etype (First_Formal (Eq_Op)) =\n-                       Etype (Next_Formal (First_Formal (Eq_Op)))\n-              and then Base_Type (Etype (Eq_Op)) = Standard_Boolean;\n-            Next_Elmt (Prim);\n-            pragma Assert (Present (Prim));\n-         end loop;\n-\n-         Eq_Op := Node (Prim);\n+         Eq_Op := Find_Primitive_Eq (Typ);\n+         pragma Assert (Present (Eq_Op));\n \n          return\n            Make_Function_Call (Loc,"}, {"sha": "8fbad1d7e87cd8520497c59c218b15985ccb459b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -8325,6 +8325,93 @@ package body Sem_Util is\n       end loop;\n    end Find_Placement_In_State_Space;\n \n+   -----------------------\n+   -- Find_Primitive_Eq --\n+   -----------------------\n+\n+   function Find_Primitive_Eq (Typ : Entity_Id) return Entity_Id is\n+      function Find_Eq_Prim (Prims_List : Elist_Id) return Entity_Id;\n+      --  Search for the equality primitive; return Empty if the primitive is\n+      --  not found.\n+\n+      function Find_Eq_Prim (Prims_List : Elist_Id) return Entity_Id is\n+         Prim_E : Elmt_Id := First_Elmt (Prims_List);\n+         Prim   : Entity_Id;\n+\n+      begin\n+         while Present (Prim_E) loop\n+            Prim := Node (Prim_E);\n+\n+            --  Locate primitive equality with the right signature\n+\n+            if Chars (Prim) = Name_Op_Eq\n+              and then Etype (First_Formal (Prim)) =\n+                       Etype (Next_Formal (First_Formal (Prim)))\n+              and then Base_Type (Etype (Prim)) = Standard_Boolean\n+            then\n+               return Prim;\n+            end if;\n+\n+            Next_Elmt (Prim_E);\n+         end loop;\n+\n+         return Empty;\n+      end Find_Eq_Prim;\n+\n+      --  Local Variables\n+\n+      Full_Type : Entity_Id;\n+      Eq_Prim   : Entity_Id;\n+\n+   --  Start of processing for Find_Primitive_Eq\n+\n+   begin\n+      if Is_Private_Type (Typ) then\n+         Full_Type := Underlying_Type (Typ);\n+      else\n+         Full_Type := Typ;\n+      end if;\n+\n+      if No (Full_Type) then\n+         return Empty;\n+      end if;\n+\n+      Full_Type := Base_Type (Full_Type);\n+\n+      --  When the base type itself is private, use the full view\n+\n+      if Is_Private_Type (Full_Type) then\n+         Full_Type := Underlying_Type (Full_Type);\n+      end if;\n+\n+      if Is_Class_Wide_Type (Full_Type) then\n+         Full_Type := Root_Type (Full_Type);\n+      end if;\n+\n+      if not Is_Tagged_Type (Full_Type) then\n+         Eq_Prim := Find_Eq_Prim (Collect_Primitive_Operations (Typ));\n+\n+      --  If this is an untagged private type completed with a derivation of\n+      --  an untagged private type whose full view is a tagged type, we use\n+      --  the primitive operations of the private parent type (since it does\n+      --  not have a full view, and also because its equality primitive may\n+      --  have been overridden in its untagged full view). If no equality was\n+      --  defined for it then take its dispatching equality primitive.\n+\n+      elsif Inherits_From_Tagged_Full_View (Typ) then\n+         Eq_Prim := Find_Eq_Prim (Collect_Primitive_Operations (Typ));\n+\n+         if No (Eq_Prim) then\n+            Eq_Prim := Find_Eq_Prim (Primitive_Operations (Full_Type));\n+         end if;\n+\n+      else\n+         Eq_Prim := Find_Eq_Prim (Primitive_Operations (Full_Type));\n+      end if;\n+\n+      return Eq_Prim;\n+   end Find_Primitive_Eq;\n+\n    ------------------------\n    -- Find_Specific_Type --\n    ------------------------"}, {"sha": "a2eca15b257b064a29964b8de691835539ce43ed", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -877,6 +877,10 @@ package Sem_Util is\n    --  If the state space is that of a package, Pack_Id denotes its entity,\n    --  otherwise Pack_Id is Empty.\n \n+   function Find_Primitive_Eq (Typ : Entity_Id) return Entity_Id;\n+   --  Locate primitive equality for type if it exists. Return Empty if it is\n+   --  not available.\n+\n    function Find_Specific_Type (CW : Entity_Id) return Entity_Id;\n    --  Find specific type of a class-wide type, and handle the case of an\n    --  incomplete type coming either from a limited_with clause or from an"}, {"sha": "d5f177e5ed51f0e43028613de78e671818a27777", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -1,3 +1,7 @@\n+2018-05-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/tagged1.adb, gnat.dg/tagged1.ads: New testcase.\n+\n 2018-05-31  Sameera Deshpande  <sameera.deshpande@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vld1x3.c: New test for"}, {"sha": "b8c4f60f1a4cb48ec7ad459909e37f0325bccc3a", "filename": "gcc/testsuite/gnat.dg/tagged1.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged1.adb?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Tagged1 is\n+   procedure Dummy is null;\n+end Tagged1;"}, {"sha": "83c652bcb9a8b89c1bf7f388f59c56a8a191fab3", "filename": "gcc/testsuite/gnat.dg/tagged1.ads", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f7c7167a75bdb3992f2c7fb3b358124aea8404/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged1.ads?ref=59f7c7167a75bdb3992f2c7fb3b358124aea8404", "patch": "@@ -0,0 +1,39 @@\n+with Ada.Containers.Vectors;\n+with Ada.Containers;\n+with Ada.Finalization;\n+\n+package Tagged1 is\n+\n+   generic\n+      type Target_Type (<>) is limited private;\n+   package A is\n+      type Smart_Pointer_Type is private;\n+   private\n+      type Smart_Pointer_Type\n+        is new Ada.Finalization.Controlled with null record;\n+   end;\n+\n+   generic\n+      type Target_Type (<>) is limited private;\n+   package SP is\n+      type Smart_Pointer_Type is private;\n+   private\n+      package S is new A (Integer);\n+      type Smart_Pointer_Type is new S.Smart_Pointer_Type;\n+   end;\n+\n+   type Root_Type is tagged record\n+      Orders : Integer;\n+   end record;\n+   package Smarts is new SP\n+     (Target_Type => Root_Type'Class);\n+\n+   type Fat_Reference_Type is new Smarts.Smart_Pointer_Type;\n+   type EST is record\n+      Orders : Fat_Reference_Type;\n+   end record;\n+\n+   package V is new Ada.Containers.Vectors (Positive, EST);\n+\n+   procedure Dummy;\n+end;"}]}