{"sha": "1679da1571b8c6fee93b05aa65716b60ba220f93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3OWRhMTU3MWI4YzZmZWU5M2IwNWFhNjU3MTZiNjBiYTIyMGY5Mw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-12-20T21:53:25Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-12-20T21:53:25Z"}, "message": "re PR libstdc++/82522 (std::map::insert(value_type &&) not selected)\n\n2017-12-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/82522\n\t* include/debug/map.h (map::insert(value_type&&))\n\t(map::insert(const_iterator, value_type&&)): Add overload for rvalues.\n\t* include/debug/multimap.h (multimap::insert(value_type&&))\n\t(multimap::insert(const_iterator, value_type&&)): Likewise.\n\t* include/debug/unordered_map (unordered_map::insert(value_type&&))\n\t(unordered_map::insert(const_iterator, value_type&&))\n\t(unordered_multimap::insert(value_type&&))\n\t(unordered_multimap::insert(const_iterator, value_type&&)): Likewise.\n\t* testsuite/23_containers/map/modifiers/insert/dr2354.cc (test02): New.\n\t* testsuite/23_containers/multimap/modifiers/insert/dr2354.cc (test02):\n\tNew.\n\t* testsuite/23_containers/unordered_map/insert/dr2354.cc (test02): New.\n\t* testsuite/23_containers/unordered_multimap/insert/dr2354.cc (test02):\n\tNew.\n\nFrom-SVN: r255904", "tree": {"sha": "d1806ee37ad219b97aa71b6f8f02acbf1cc36409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1806ee37ad219b97aa71b6f8f02acbf1cc36409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1679da1571b8c6fee93b05aa65716b60ba220f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1679da1571b8c6fee93b05aa65716b60ba220f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1679da1571b8c6fee93b05aa65716b60ba220f93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1679da1571b8c6fee93b05aa65716b60ba220f93/comments", "author": null, "committer": null, "parents": [{"sha": "7dd342222b25a4880d083d8fd013a901fb6f1993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd342222b25a4880d083d8fd013a901fb6f1993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd342222b25a4880d083d8fd013a901fb6f1993"}], "stats": {"total": 139, "additions": 132, "deletions": 7}, "files": [{"sha": "f06edc1c5bc53647adc48698aad3f8404bfe4eef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -1,3 +1,21 @@\n+2017-12-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/82522\n+\t* include/debug/map.h (map::insert(value_type&&))\n+\t(map::insert(const_iterator, value_type&&)): Add overload for rvalues.\n+\t* include/debug/multimap.h (multimap::insert(value_type&&))\n+\t(multimap::insert(const_iterator, value_type&&)): Likewise.\n+\t* include/debug/unordered_map (unordered_map::insert(value_type&&))\n+\t(unordered_map::insert(const_iterator, value_type&&))\n+\t(unordered_multimap::insert(value_type&&))\n+\t(unordered_multimap::insert(const_iterator, value_type&&)): Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert/dr2354.cc (test02): New.\n+\t* testsuite/23_containers/multimap/modifiers/insert/dr2354.cc (test02):\n+\tNew.\n+\t* testsuite/23_containers/unordered_map/insert/dr2354.cc (test02): New.\n+\t* testsuite/23_containers/unordered_multimap/insert/dr2354.cc (test02):\n+\tNew.\n+\n 2017-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/cpu/aarch64/opt/ext/opt_random.h (__VEXT): Check"}, {"sha": "64f2bf8258450e7b1eb178cb3a2923d3aa787ba0", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -260,6 +260,15 @@ namespace __debug\n       }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      std::pair<iterator, bool>\n+      insert(value_type&& __x)\n+      {\n+\tauto __res = _Base::insert(std::move(__x));\n+\treturn { iterator(__res.first, this), __res.second };\n+      }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -291,6 +300,15 @@ namespace __debug\n       }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __position, value_type&& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\treturn { _Base::insert(__position.base(), std::move(__x)), this };\n+      }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>"}, {"sha": "cdbada804bafa117d35b99f230d4eb35d57dcca4", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -244,6 +244,12 @@ namespace __debug\n       { return iterator(_Base::insert(__x), this); }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(value_type&& __x)\n+      { return { _Base::insert(std::move(__x)), this }; }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -270,6 +276,15 @@ namespace __debug\n       }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __position, value_type&& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\treturn { _Base::insert(__position.base(), std::move(__x)), this };\n+      }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>"}, {"sha": "6757339144b2da6d77ab6e669a4b34ec420b3514", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -312,19 +312,20 @@ namespace __debug\n       insert(const value_type& __obj)\n       {\n \tsize_type __bucket_count = this->bucket_count();\n-\tstd::pair<_Base_iterator, bool> __res = _Base::insert(__obj);\n+\tauto __res = _Base::insert(__obj);\n \t_M_check_rehashed(__bucket_count);\n-\treturn std::make_pair(iterator(__res.first, this), __res.second);\n+\treturn { iterator(__res.first, this), __res.second };\n       }\n \n-      iterator\n-      insert(const_iterator __hint, const value_type& __obj)\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      std::pair<iterator, bool>\n+      insert(value_type&& __x)\n       {\n-\t__glibcxx_check_insert(__hint);\n \tsize_type __bucket_count = this->bucket_count();\n-\t_Base_iterator __it = _Base::insert(__hint.base(), __obj);\n+\tauto __res = _Base::insert(std::move(__x));\n \t_M_check_rehashed(__bucket_count);\n-\treturn iterator(__it, this);\n+\treturn { iterator(__res.first, this), __res.second };\n       }\n \n       template<typename _Pair, typename = typename\n@@ -340,6 +341,28 @@ namespace __debug\n \t  return std::make_pair(iterator(__res.first, this), __res.second);\n \t}\n \n+      iterator\n+      insert(const_iterator __hint, const value_type& __obj)\n+      {\n+\t__glibcxx_check_insert(__hint);\n+\tsize_type __bucket_count = this->bucket_count();\n+\t_Base_iterator __it = _Base::insert(__hint.base(), __obj);\n+\t_M_check_rehashed(__bucket_count);\n+\treturn iterator(__it, this);\n+      }\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __hint, value_type&& __x)\n+      {\n+\t__glibcxx_check_insert(__hint);\n+\tsize_type __bucket_count = this->bucket_count();\n+\tauto __it = _Base::insert(__hint.base(), std::move(__x));\n+\t_M_check_rehashed(__bucket_count);\n+\treturn iterator(__it, this);\n+      }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -977,6 +1000,17 @@ namespace __debug\n \treturn iterator(__it, this);\n       }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(value_type&& __x)\n+      {\n+\tsize_type __bucket_count = this->bucket_count();\n+\tauto __it = _Base::insert(std::move(__x));\n+\t_M_check_rehashed(__bucket_count);\n+\treturn { __it, this };\n+      }\n+\n       iterator\n       insert(const_iterator __hint, const value_type& __obj)\n       {\n@@ -987,6 +1021,18 @@ namespace __debug\n \treturn iterator(__it, this);\n       }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __hint, value_type&& __x)\n+      {\n+\t__glibcxx_check_insert(__hint);\n+\tsize_type __bucket_count = this->bucket_count();\n+\tauto __it = _Base::insert(__hint.base(), std::move(__x));\n+\t_M_check_rehashed(__bucket_count);\n+\treturn iterator(__it, this);\n+      }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>"}, {"sha": "cc0fcbb46772c0ec4d5d6585e23f04116ee50abc", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/dr2354.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2Fdr2354.cc?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -30,3 +30,10 @@ test01()\n   std::map<int, MoveOnly> m;\n   m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n }\n+\n+void\n+test02()\n+{\n+  std::map<int, MoveOnly> m;\n+  m.insert(m.begin(), {1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}, {"sha": "73cbf4cf6d468eaca4c228c28b8d3d33f5a0662e", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/insert/dr2354.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2Fdr2354.cc?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -30,3 +30,10 @@ test01()\n   std::multimap<int, MoveOnly> m;\n   m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n }\n+\n+void\n+test02()\n+{\n+  std::multimap<int, MoveOnly> m;\n+  m.insert(m.begin(), {1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}, {"sha": "3507efa34a24b2f43faeaf485dcfb84e827d5590", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/insert/dr2354.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2Fdr2354.cc?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -30,3 +30,10 @@ test01()\n   std::unordered_map<int, MoveOnly> m;\n   m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n }\n+\n+void\n+test02()\n+{\n+  std::unordered_map<int, MoveOnly> m;\n+  m.insert(m.begin(), {1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}, {"sha": "ff661132a09ed0b2bb5389b1ffebe95ee522d05e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/insert/dr2354.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1679da1571b8c6fee93b05aa65716b60ba220f93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2Fdr2354.cc?ref=1679da1571b8c6fee93b05aa65716b60ba220f93", "patch": "@@ -30,3 +30,10 @@ test01()\n   std::unordered_multimap<int, MoveOnly> m;\n   m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n }\n+\n+void\n+test02()\n+{\n+  std::unordered_multimap<int, MoveOnly> m;\n+  m.insert(m.begin(), {1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}]}