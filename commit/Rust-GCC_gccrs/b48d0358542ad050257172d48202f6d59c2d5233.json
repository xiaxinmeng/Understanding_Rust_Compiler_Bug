{"sha": "b48d0358542ad050257172d48202f6d59c2d5233", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZDAzNTg1NDJhZDA1MDI1NzE3MmQ0ODIwMmY2ZDU5YzJkNTIzMw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2007-09-07T16:38:46Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2007-09-07T16:38:46Z"}, "message": "tree-flow.h (const_block_stmt_iterator): Remove.\n\n\n\t* tree-flow.h (const_block_stmt_iterator): Remove.\n\tUpdate all users to use block_stmt_iterator.\n\t* tree-iterator.h (const_tree_stmt_iterator): Remove.\n\tUpdate all users to use tree_stmt_iterator.\n\nFrom-SVN: r128246", "tree": {"sha": "64b3c5dbf6e7dd437d93c22279822b894ac0ccce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b3c5dbf6e7dd437d93c22279822b894ac0ccce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48d0358542ad050257172d48202f6d59c2d5233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48d0358542ad050257172d48202f6d59c2d5233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48d0358542ad050257172d48202f6d59c2d5233", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48d0358542ad050257172d48202f6d59c2d5233/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c45aad5e61c65820606cf8db78bf15d876b2578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c45aad5e61c65820606cf8db78bf15d876b2578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c45aad5e61c65820606cf8db78bf15d876b2578"}], "stats": {"total": 221, "additions": 56, "deletions": 165}, "files": [{"sha": "a76df2a26657f6442ef0f072175271296a03921e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -1,3 +1,10 @@\n+2007-09-07  Diego Novillo  <dnovillo@google.com>\n+\n+\t* tree-flow.h (const_block_stmt_iterator): Remove.\n+\tUpdate all users to use block_stmt_iterator.\n+\t* tree-iterator.h (const_tree_stmt_iterator): Remove.\n+\tUpdate all users to use tree_stmt_iterator.\n+\n 2007-09-07  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/mips/mips.c (mips_set_current_function): Temporarily"}, {"sha": "f5fb18f0875d8155700856bb0221fb9b9c6d4255", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -616,7 +616,7 @@ create_empty_bb (basic_block after)\n /* Checks whether we may merge blocks BB1 and BB2.  */\n \n bool\n-can_merge_blocks_p (const_basic_block bb1, const_basic_block bb2)\n+can_merge_blocks_p (basic_block bb1, basic_block bb2)\n {\n   bool ret;\n \n@@ -938,7 +938,7 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n    instructions that must stay with the call, 0 otherwise.  */\n \n bool\n-block_ends_with_call_p (const_basic_block bb)\n+block_ends_with_call_p (basic_block bb)\n {\n   if (!cfg_hooks->block_ends_with_call_p)\n     internal_error (\"%s does not support block_ends_with_call_p\", cfg_hooks->name);"}, {"sha": "e581d9cd5592696d68a555b9524904accd0c2c1c", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -61,7 +61,7 @@ struct cfg_hooks\n   bool (*move_block_after) (basic_block b, basic_block a);\n \n   /* Return true when blocks A and B can be merged into single basic block.  */\n-  bool (*can_merge_blocks_p) (const_basic_block a, const_basic_block b);\n+  bool (*can_merge_blocks_p) (basic_block a, basic_block b);\n \n   /* Merge blocks A and B.  */\n   void (*merge_blocks) (basic_block a, basic_block b);\n@@ -89,7 +89,7 @@ struct cfg_hooks\n \n   /* Say whether a block ends with a call, possibly followed by some\n      other code that must stay with the call.  */\n-  bool (*block_ends_with_call_p) (const_basic_block);\n+  bool (*block_ends_with_call_p) (basic_block);\n \n   /* Say whether a block ends with a conditional branch.  Switches\n      and unconditional branches do not qualify.  */\n@@ -151,7 +151,7 @@ extern void delete_basic_block (basic_block);\n extern basic_block split_edge (edge);\n extern basic_block create_basic_block (void *, void *, basic_block);\n extern basic_block create_empty_bb (basic_block);\n-extern bool can_merge_blocks_p (const_basic_block, const_basic_block);\n+extern bool can_merge_blocks_p (basic_block, basic_block);\n extern void merge_blocks (basic_block, basic_block);\n extern edge make_forwarder_block (basic_block, bool (*)(edge),\n \t\t\t\t  void (*) (basic_block));\n@@ -161,7 +161,7 @@ extern void predict_edge (edge e, enum br_predictor predictor, int probability);\n extern bool predicted_by_p (const_basic_block bb, enum br_predictor predictor);\n extern bool can_duplicate_block_p (const_basic_block);\n extern basic_block duplicate_block (basic_block, edge, basic_block);\n-extern bool block_ends_with_call_p (const_basic_block bb);\n+extern bool block_ends_with_call_p (basic_block bb);\n extern bool block_ends_with_condjump_p (const_basic_block bb);\n extern int flow_call_edges_add (sbitmap);\n extern void execute_on_growing_pred (edge);"}, {"sha": "9de8d127aef52b81c59d81e88e5aaed9ac876e39", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -627,9 +627,9 @@ rtl_merge_blocks (basic_block a, basic_block b)\n \n \n /* Return true when block A and B can be merged.  */\n-static bool\n \n-rtl_can_merge_blocks (const_basic_block a, const_basic_block b)\n+static bool\n+rtl_can_merge_blocks (basic_block a, basic_block b)\n {\n   /* If we are partitioning hot/cold basic blocks, we don't want to\n      mess up unconditional or indirect jumps that cross between hot\n@@ -2535,8 +2535,9 @@ cfg_layout_delete_block (basic_block bb)\n }\n \n /* Return true when blocks A and B can be safely merged.  */\n+\n static bool\n-cfg_layout_can_merge_blocks_p (const_basic_block a, const_basic_block b)\n+cfg_layout_can_merge_blocks_p (basic_block a, basic_block b)\n {\n   /* If we are partitioning hot/cold basic blocks, we don't want to\n      mess up unconditional or indirect jumps that cross between hot\n@@ -2692,7 +2693,7 @@ rtl_make_forwarder_block (edge fallthru ATTRIBUTE_UNUSED)\n    instructions that must stay with the call, 0 otherwise.  */\n \n static bool\n-rtl_block_ends_with_call_p (const_basic_block bb)\n+rtl_block_ends_with_call_p (basic_block bb)\n {\n   rtx insn = BB_END (bb);\n "}, {"sha": "069d330e74d3fbce244c7dc59aaff224a57f3453", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -105,7 +105,7 @@ static inline void change_bb_for_stmt (tree t, basic_block bb);\n \n /* Flowgraph optimization and cleanup.  */\n static void tree_merge_blocks (basic_block, basic_block);\n-static bool tree_can_merge_blocks_p (const_basic_block, const_basic_block);\n+static bool tree_can_merge_blocks_p (basic_block, basic_block);\n static void remove_bb (basic_block);\n static edge find_taken_edge_computed_goto (basic_block, tree);\n static edge find_taken_edge_cond_expr (basic_block, tree);\n@@ -1136,10 +1136,10 @@ group_case_labels (void)\n /* Checks whether we can merge block B into block A.  */\n \n static bool\n-tree_can_merge_blocks_p (const_basic_block a, const_basic_block b)\n+tree_can_merge_blocks_p (basic_block a, basic_block b)\n {\n   const_tree stmt;\n-  const_block_stmt_iterator bsi;\n+  block_stmt_iterator bsi;\n   tree phi;\n \n   if (!single_succ_p (a))\n@@ -1161,7 +1161,7 @@ tree_can_merge_blocks_p (const_basic_block a, const_basic_block b)\n      cannot merge the blocks.  */\n   /* This CONST_CAST is okay because last_stmt doesn't modify its\n      argument and the return value is assign to a const_tree.  */\n-  stmt = last_stmt (CONST_CAST_BB(a));\n+  stmt = last_stmt (CONST_CAST_BB (a));\n   if (stmt && stmt_ends_bb_p (stmt))\n     return false;\n \n@@ -1187,9 +1187,9 @@ tree_can_merge_blocks_p (const_basic_block a, const_basic_block b)\n     }\n \n   /* Do not remove user labels.  */\n-  for (bsi = cbsi_start (b); !cbsi_end_p (bsi); cbsi_next (&bsi))\n+  for (bsi = bsi_start (b); !bsi_end_p (bsi); bsi_next (&bsi))\n     {\n-      stmt = cbsi_stmt (bsi);\n+      stmt = bsi_stmt (bsi);\n       if (TREE_CODE (stmt) != LABEL_EXPR)\n \tbreak;\n       if (!DECL_ARTIFICIAL (LABEL_EXPR_LABEL (stmt)))\n@@ -6037,10 +6037,10 @@ debug_loop_ir (void)\n    otherwise.  */\n \n static bool\n-tree_block_ends_with_call_p (const_basic_block bb)\n+tree_block_ends_with_call_p (basic_block bb)\n {\n-  const_block_stmt_iterator bsi = cbsi_last (bb);\n-  return const_get_call_expr_in (cbsi_stmt (bsi)) != NULL;\n+  block_stmt_iterator bsi = bsi_last (bb);\n+  return const_get_call_expr_in (bsi_stmt (bsi)) != NULL;\n }\n \n "}, {"sha": "71e607bddce0d4cb2e5bfabfa369939584bddf9a", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -745,21 +745,6 @@ bsi_start (basic_block bb)\n   return bsi;\n }\n \n-static inline const_block_stmt_iterator\n-cbsi_start (const_basic_block bb)\n-{\n-  const_block_stmt_iterator bsi;\n-  if (bb->index < NUM_FIXED_BLOCKS)\n-    {\n-      bsi.tsi.ptr = NULL;\n-      bsi.tsi.container = NULL;\n-    }\n-  else\n-    bsi.tsi = ctsi_start (bb_stmt_list (bb));\n-  bsi.bb = bb;\n-  return bsi;\n-}\n-\n /* Return a block statement iterator that points to the first non-label\n    statement in block BB.  */\n \n@@ -792,22 +777,6 @@ bsi_last (basic_block bb)\n   return bsi;\n }\n \n-static inline const_block_stmt_iterator\n-cbsi_last (const_basic_block bb)\n-{\n-  const_block_stmt_iterator bsi;\n-\n-  if (bb->index < NUM_FIXED_BLOCKS)\n-    {\n-      bsi.tsi.ptr = NULL;\n-      bsi.tsi.container = NULL;\n-    }\n-  else\n-    bsi.tsi = ctsi_last (bb_stmt_list (bb));\n-  bsi.bb = bb;\n-  return bsi;\n-}\n-\n /* Return true if block statement iterator I has reached the end of\n    the basic block.  */\n static inline bool\n@@ -816,12 +785,6 @@ bsi_end_p (block_stmt_iterator i)\n   return tsi_end_p (i.tsi);\n }\n \n-static inline bool\n-cbsi_end_p (const_block_stmt_iterator i)\n-{\n-  return ctsi_end_p (i.tsi);\n-}\n-\n /* Modify block statement iterator I so that it is at the next\n    statement in the basic block.  */\n static inline void\n@@ -830,12 +793,6 @@ bsi_next (block_stmt_iterator *i)\n   tsi_next (&i->tsi);\n }\n \n-static inline void\n-cbsi_next (const_block_stmt_iterator *i)\n-{\n-  ctsi_next (&i->tsi);\n-}\n-\n /* Modify block statement iterator I so that it is at the previous\n    statement in the basic block.  */\n static inline void\n@@ -844,12 +801,6 @@ bsi_prev (block_stmt_iterator *i)\n   tsi_prev (&i->tsi);\n }\n \n-static inline void\n-cbsi_prev (const_block_stmt_iterator *i)\n-{\n-  ctsi_prev (&i->tsi);\n-}\n-\n /* Return the statement that block statement iterator I is currently\n    at.  */\n static inline tree\n@@ -858,12 +809,6 @@ bsi_stmt (block_stmt_iterator i)\n   return tsi_stmt (i.tsi);\n }\n \n-static inline const_tree\n-cbsi_stmt (const_block_stmt_iterator i)\n-{\n-  return ctsi_stmt (i.tsi);\n-}\n-\n /* Return a pointer to the statement that block statement iterator I\n    is currently at.  */\n static inline tree *"}, {"sha": "636a6f0ba55adfc490a36384a418ea7aee77de77", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -624,15 +624,8 @@ typedef struct {\n   basic_block bb;\n } block_stmt_iterator;\n \n-typedef struct {\n-  const_tree_stmt_iterator tsi;\n-  const_basic_block bb;\n-} const_block_stmt_iterator;\n-\n static inline block_stmt_iterator bsi_start (basic_block);\n-static inline const_block_stmt_iterator cbsi_start (const_basic_block);\n static inline block_stmt_iterator bsi_last (basic_block);\n-static inline const_block_stmt_iterator cbsi_last (const_basic_block);\n static inline block_stmt_iterator bsi_after_labels (basic_block);\n block_stmt_iterator bsi_for_stmt (tree);\n static inline bool bsi_end_p (block_stmt_iterator);\n@@ -965,7 +958,7 @@ extern bool vect_can_force_dr_alignment_p (const_tree, unsigned int);\n extern tree get_vectype_for_scalar_type (tree);\n \n /* In tree-ssa-phiopt.c */\n-bool empty_block_p (const_basic_block);\n+bool empty_block_p (basic_block);\n basic_block *blocks_in_phiopt_order (void);\n \n /* In tree-ssa-loop*.c  */"}, {"sha": "98f0cf80c491f51708996fc70727a25ceeedc123", "filename": "gcc/tree-iterator.h", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.h?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -34,11 +34,6 @@ typedef struct {\n   tree container;\n } tree_stmt_iterator;\n \n-typedef struct {\n-  struct tree_statement_list_node *ptr;\n-  const_tree container;\n-} const_tree_stmt_iterator;\n-\n static inline tree_stmt_iterator\n tsi_start (tree t)\n {\n@@ -50,17 +45,6 @@ tsi_start (tree t)\n   return i;\n }\n \n-static inline const_tree_stmt_iterator\n-ctsi_start (const_tree t)\n-{\n-  const_tree_stmt_iterator i;\n-\n-  i.ptr = STATEMENT_LIST_HEAD (t);\n-  i.container = t;\n-\n-  return i;\n-}\n-\n static inline tree_stmt_iterator\n tsi_last (tree t)\n {\n@@ -72,65 +56,30 @@ tsi_last (tree t)\n   return i;\n }\n \n-static inline const_tree_stmt_iterator\n-ctsi_last (tree t)\n-{\n-  const_tree_stmt_iterator i;\n-\n-  i.ptr = STATEMENT_LIST_TAIL (t);\n-  i.container = t;\n-\n-  return i;\n-}\n-\n static inline bool\n tsi_end_p (tree_stmt_iterator i)\n {\n   return i.ptr == NULL;\n }\n \n-static inline bool\n-ctsi_end_p (const_tree_stmt_iterator i)\n-{\n-  return i.ptr == NULL;\n-}\n-\n static inline bool\n tsi_one_before_end_p (tree_stmt_iterator i)\n {\n   return i.ptr != NULL && i.ptr->next == NULL;\n }\n \n-static inline bool\n-ctsi_one_before_end_p (const_tree_stmt_iterator i)\n-{\n-  return i.ptr != NULL && i.ptr->next == NULL;\n-}\n-\n static inline void\n tsi_next (tree_stmt_iterator *i)\n {\n   i->ptr = i->ptr->next;\n }\n \n-static inline void\n-ctsi_next (const_tree_stmt_iterator *i)\n-{\n-  i->ptr = i->ptr->next;\n-}\n-\n static inline void\n tsi_prev (tree_stmt_iterator *i)\n {\n   i->ptr = i->ptr->prev;\n }\n \n-static inline void\n-ctsi_prev (const_tree_stmt_iterator *i)\n-{\n-  i->ptr = i->ptr->prev;\n-}\n-\n static inline tree *\n tsi_stmt_ptr (tree_stmt_iterator i)\n {\n@@ -143,12 +92,6 @@ tsi_stmt (tree_stmt_iterator i)\n   return i.ptr->stmt;\n }\n \n-static inline const_tree\n-ctsi_stmt (const_tree_stmt_iterator i)\n-{\n-  return i.ptr->stmt;\n-}\n-\n enum tsi_iterator_update\n {\n   TSI_NEW_STMT,\t\t/* Only valid when single statement is added, move"}, {"sha": "d001a7a86bf18a75ff4ccda43d591f2ddad4bc6a", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -294,21 +294,23 @@ blocks_in_phiopt_order (void)\n #undef VISITED_P\n }\n \n+\n /* Return TRUE if block BB has no executable statements, otherwise return\n    FALSE.  */\n+\n bool\n-empty_block_p (const_basic_block bb)\n+empty_block_p (basic_block bb)\n {\n-  const_block_stmt_iterator bsi;\n+  block_stmt_iterator bsi;\n \n   /* BB must have no executable statements.  */\n-  bsi = cbsi_start (bb);\n-  while (!cbsi_end_p (bsi)\n-\t  && (TREE_CODE (cbsi_stmt (bsi)) == LABEL_EXPR\n-\t      || IS_EMPTY_STMT (cbsi_stmt (bsi))))\n-    cbsi_next (&bsi);\n+  bsi = bsi_start (bb);\n+  while (!bsi_end_p (bsi)\n+\t  && (TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR\n+\t      || IS_EMPTY_STMT (bsi_stmt (bsi))))\n+    bsi_next (&bsi);\n \n-  if (!cbsi_end_p (bsi))\n+  if (!bsi_end_p (bsi))\n     return false;\n \n   return true;"}, {"sha": "1d5500fe018a3221e9718aa86b11215bf6424272", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -461,26 +461,26 @@ redirect_edges (void **slot, void *data)\n    is one, this is equivalent to a \"forwarder\" block.  */\n \n static bool\n-redirection_block_p (const_basic_block bb)\n+redirection_block_p (basic_block bb)\n {\n-  const_block_stmt_iterator bsi;\n+  block_stmt_iterator bsi;\n \n   /* Advance to the first executable statement.  */\n-  bsi = cbsi_start (bb);\n-  while (!cbsi_end_p (bsi)\n-          && (TREE_CODE (cbsi_stmt (bsi)) == LABEL_EXPR\n-              || IS_EMPTY_STMT (cbsi_stmt (bsi))))\n-    cbsi_next (&bsi);\n+  bsi = bsi_start (bb);\n+  while (!bsi_end_p (bsi)\n+          && (TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR\n+              || IS_EMPTY_STMT (bsi_stmt (bsi))))\n+    bsi_next (&bsi);\n \n   /* Check if this is an empty block.  */\n-  if (cbsi_end_p (bsi))\n+  if (bsi_end_p (bsi))\n     return true;\n \n   /* Test that we've reached the terminating control statement.  */\n-  return cbsi_stmt (bsi)\n-\t && (TREE_CODE (cbsi_stmt (bsi)) == COND_EXPR\n-\t     || TREE_CODE (cbsi_stmt (bsi)) == GOTO_EXPR\n-\t     || TREE_CODE (cbsi_stmt (bsi)) == SWITCH_EXPR);\n+  return bsi_stmt (bsi)\n+\t && (TREE_CODE (bsi_stmt (bsi)) == COND_EXPR\n+\t     || TREE_CODE (bsi_stmt (bsi)) == GOTO_EXPR\n+\t     || TREE_CODE (bsi_stmt (bsi)) == SWITCH_EXPR);\n }\n \n /* BB is a block which ends with a COND_EXPR or SWITCH_EXPR and when BB"}, {"sha": "a3e5829b6d2576c9ca2e3394b8b464d8dc7f1ebe", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -8635,10 +8635,10 @@ walk_tree_without_duplicates_1 (tree *tp, walk_tree_fn func, void *data,\n    empty statements.  */\n \n bool\n-empty_body_p (const_tree stmt)\n+empty_body_p (tree stmt)\n {\n-  const_tree_stmt_iterator i;\n-  const_tree body;\n+  tree_stmt_iterator i;\n+  tree body;\n \n   if (IS_EMPTY_STMT (stmt))\n     return true;\n@@ -8649,8 +8649,8 @@ empty_body_p (const_tree stmt)\n   else\n     return false;\n \n-  for (i = ctsi_start (body); !ctsi_end_p (i); ctsi_next (&i))\n-    if (!empty_body_p (ctsi_stmt (i)))\n+  for (i = tsi_start (body); !tsi_end_p (i); tsi_next (&i))\n+    if (!empty_body_p (tsi_stmt (i)))\n       return false;\n \n   return true;"}, {"sha": "2d2d80aebff6e46eb6fffca32c623f90d8f916e7", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48d0358542ad050257172d48202f6d59c2d5233/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b48d0358542ad050257172d48202f6d59c2d5233", "patch": "@@ -4623,7 +4623,7 @@ extern bool commutative_tree_code (enum tree_code);\n extern tree upper_bound_in_type (tree, tree);\n extern tree lower_bound_in_type (tree, tree);\n extern int operand_equal_for_phi_arg_p (const_tree, const_tree);\n-extern bool empty_body_p (const_tree);\n+extern bool empty_body_p (tree);\n extern tree call_expr_arg (tree, int);\n extern tree *call_expr_argp (tree, int);\n extern tree call_expr_arglist (tree);"}]}