{"sha": "1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjMGUxOTMyODU1NGU4OGZkNTZjZTJiMGMxODE3MzdhMmQ1MGNjZg==", "commit": {"author": {"name": "Joost VandeVondele", "email": "vondele@gcc.gnu.org", "date": "2014-09-20T11:48:00Z"}, "committer": {"name": "Joost VandeVondele", "email": "vondele@gcc.gnu.org", "date": "2014-09-20T11:48:00Z"}, "message": "trans-expr.c (gfc_reset_vptr): Fix comment whitespace.\n\n2014-09-20  Joost VandeVondele  <vondele@gcc.gnu.org>\n\n\t* trans-expr.c (gfc_reset_vptr): Fix comment whitespace.\n\t(gfc_conv_class_to_class): Likewise.\n\t(gfc_conv_procedure_call): Likewise.\n\t(arrayfunc_assign_needs_temporary): Likewise.\n\t(realloc_lhs_loop_for_fcn_call): Likewise.\n\t(gfc_trans_assignment_1): Likewise.\n\t* trans-array.c (gfc_conv_array_ref): Likewise.\n\t(gfc_array_allocate): Likewise.\n\t(gfc_alloc_allocatable_for_assignment): Likewise.\n\t* symbol.c (generate_isocbinding_symbol): Likewise.\n\t* class.c (finalization_scalarizer): Likewise.\n\t(finalizer_insert_packed_call): Likewise.\n\t(generate_finalization_wrapper): Likewise.\n\t(find_intrinsic_vtab): Likewise.\n\t* decl.c (gfc_match_import): Likewise.\n\t(match_procedure_decl): Likewise.\n\t(gfc_match_subroutine): Likewise.\n\t(gfc_match_bind_c): Likewise.\n\t(gfc_match_volatile): Likewise.\n\t* trans-common.c (create_common): Likewise.\n\t* error.c (gfc_diagnostic_starter): Likewise.\n\t* trans-stmt.c (gfc_trans_sync): Likewise.\n\t(gfc_trans_critical): Likewise.\n\t(gfc_trans_simple_do): Likewise.\n\t(gfc_trans_do): Likewise.\n\t(gfc_trans_where_assign): Likewise.\n\t* expr.c (gfc_is_simply_contiguous): Likewise.\n\t* module.c (unquote_string): Likewise.\n\t* trans.c (gfc_add_finalizer_call): Likewise.\n\t* trans-types.c (gfc_init_kinds): Likewise.\n\t* scanner.c (preprocessor_line): Likewise.\n\t* gfortranspec.c (lang_specific_driver): Likewise.\n\t* frontend-passes.c (create_var): Likewise.\n\t(cfe_expr_0): Likewise.\n\t* resolve.c (check_host_association): Likewise.\n\t(gfc_resolve_code): Likewise.\n\t(resolve_fl_derived0): Likewise.\n\t(resolve_symbol): Likewise.\n\t* f95-lang.c (poplevel): Likewise.\n\t* trans-decl.c (create_main_function): Likewise.\n\t* trans-io.c (transfer_expr): Likewise.\n\t* arith.c (gfc_arith_divide): Likewise.\n\t* parse.c (resolve_all_program_units): Likewise.\n\t* check.c (gfc_check_rank): Likewise.\n\t(gfc_check_sizeof): Likewise.\n\t(is_c_interoperable): Likewise.\n\t* dependency.c (gfc_dep_difference): Likewise.\n\t* primary.c (gfc_match_rvalue): Likewise.\n\t* trans-intrinsic.c (conv_intrinsic_system_clock): Likewise.\n\t(conv_isocbinding_subroutine): Likewise.\n\t* options.c (gfc_post_options): Likewise.\n\t(gfc_handle_fpe_option): Likewise.\n\t(gfc_get_option_string): Likewise.\n\t* simplify.c (simplify_transformation_to_scalar): Likewise.\n\t(gfc_simplify_spread): Likewise.\n\nFrom-SVN: r215420", "tree": {"sha": "4fa9d844b23edb1799e726fa4d4fd7d46114c263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fa9d844b23edb1799e726fa4d4fd7d46114c263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/comments", "author": {"login": "vondele", "id": 4202567, "node_id": "MDQ6VXNlcjQyMDI1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/4202567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vondele", "html_url": "https://github.com/vondele", "followers_url": "https://api.github.com/users/vondele/followers", "following_url": "https://api.github.com/users/vondele/following{/other_user}", "gists_url": "https://api.github.com/users/vondele/gists{/gist_id}", "starred_url": "https://api.github.com/users/vondele/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vondele/subscriptions", "organizations_url": "https://api.github.com/users/vondele/orgs", "repos_url": "https://api.github.com/users/vondele/repos", "events_url": "https://api.github.com/users/vondele/events{/privacy}", "received_events_url": "https://api.github.com/users/vondele/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vondele", "id": 4202567, "node_id": "MDQ6VXNlcjQyMDI1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/4202567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vondele", "html_url": "https://github.com/vondele", "followers_url": "https://api.github.com/users/vondele/followers", "following_url": "https://api.github.com/users/vondele/following{/other_user}", "gists_url": "https://api.github.com/users/vondele/gists{/gist_id}", "starred_url": "https://api.github.com/users/vondele/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vondele/subscriptions", "organizations_url": "https://api.github.com/users/vondele/orgs", "repos_url": "https://api.github.com/users/vondele/repos", "events_url": "https://api.github.com/users/vondele/events{/privacy}", "received_events_url": "https://api.github.com/users/vondele/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516e2f1cf0036d02d2af6109ce2aa0a5d3f601dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516e2f1cf0036d02d2af6109ce2aa0a5d3f601dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516e2f1cf0036d02d2af6109ce2aa0a5d3f601dd"}], "stats": {"total": 209, "additions": 134, "deletions": 75}, "files": [{"sha": "a96cf423493825c3bc6ba0deabd883d3831f2087", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -1,3 +1,61 @@\n+2014-09-20  Joost VandeVondele  <vondele@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_reset_vptr): Fix comment whitespace.\n+\t(gfc_conv_class_to_class): Likewise.\n+\t(gfc_conv_procedure_call): Likewise.\n+\t(arrayfunc_assign_needs_temporary): Likewise.\n+\t(realloc_lhs_loop_for_fcn_call): Likewise.\n+\t(gfc_trans_assignment_1): Likewise.\n+\t* trans-array.c (gfc_conv_array_ref): Likewise.\n+\t(gfc_array_allocate): Likewise.\n+\t(gfc_alloc_allocatable_for_assignment): Likewise.\n+\t* symbol.c (generate_isocbinding_symbol): Likewise.\n+\t* class.c (finalization_scalarizer): Likewise.\n+\t(finalizer_insert_packed_call): Likewise.\n+\t(generate_finalization_wrapper): Likewise.\n+\t(find_intrinsic_vtab): Likewise.\n+\t* decl.c (gfc_match_import): Likewise.\n+\t(match_procedure_decl): Likewise.\n+\t(gfc_match_subroutine): Likewise.\n+\t(gfc_match_bind_c): Likewise.\n+\t(gfc_match_volatile): Likewise.\n+\t* trans-common.c (create_common): Likewise.\n+\t* error.c (gfc_diagnostic_starter): Likewise.\n+\t* trans-stmt.c (gfc_trans_sync): Likewise.\n+\t(gfc_trans_critical): Likewise.\n+\t(gfc_trans_simple_do): Likewise.\n+\t(gfc_trans_do): Likewise.\n+\t(gfc_trans_where_assign): Likewise.\n+\t* expr.c (gfc_is_simply_contiguous): Likewise.\n+\t* module.c (unquote_string): Likewise.\n+\t* trans.c (gfc_add_finalizer_call): Likewise.\n+\t* trans-types.c (gfc_init_kinds): Likewise.\n+\t* scanner.c (preprocessor_line): Likewise.\n+\t* gfortranspec.c (lang_specific_driver): Likewise.\n+\t* frontend-passes.c (create_var): Likewise.\n+\t(cfe_expr_0): Likewise.\n+\t* resolve.c (check_host_association): Likewise.\n+\t(gfc_resolve_code): Likewise.\n+\t(resolve_fl_derived0): Likewise.\n+\t(resolve_symbol): Likewise.\n+\t* f95-lang.c (poplevel): Likewise.\n+\t* trans-decl.c (create_main_function): Likewise.\n+\t* trans-io.c (transfer_expr): Likewise.\n+\t* arith.c (gfc_arith_divide): Likewise.\n+\t* parse.c (resolve_all_program_units): Likewise.\n+\t* check.c (gfc_check_rank): Likewise.\n+\t(gfc_check_sizeof): Likewise.\n+\t(is_c_interoperable): Likewise.\n+\t* dependency.c (gfc_dep_difference): Likewise.\n+\t* primary.c (gfc_match_rvalue): Likewise.\n+\t* trans-intrinsic.c (conv_intrinsic_system_clock): Likewise.\n+\t(conv_isocbinding_subroutine): Likewise.\n+\t* options.c (gfc_post_options): Likewise.\n+\t(gfc_handle_fpe_option): Likewise.\n+\t(gfc_get_option_string): Likewise.\n+\t* simplify.c (simplify_transformation_to_scalar): Likewise.\n+\t(gfc_simplify_spread): Likewise.\n+\n 2014-09-19  Joost VandeVondele  <vondele@gcc.gnu.org>\n \n \tPR fortran/63152"}, {"sha": "f8f2ba6af2cf29da9d57b6341c7a2cdefb2d15c9", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -758,7 +758,7 @@ gfc_arith_divide (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n       if (mpc_cmp_si_si (op2->value.complex, 0, 0) == 0)\n       {\n \t/* In Fortran, return (NaN + NaN I) for any zero divisor.  See\n-\t   PR 40318. */\n+\t   PR 40318.  */\n \tmpfr_set_nan (mpc_realref (result->value.complex));\n \tmpfr_set_nan (mpc_imagref (result->value.complex));\n       }\n@@ -2344,7 +2344,7 @@ gfc_hollerith2complex (gfc_expr *src, int kind)\n }\n \n \n-/* Convert Hollerith to character. */\n+/* Convert Hollerith to character.  */\n \n gfc_expr *\n gfc_hollerith2character (gfc_expr *src, int kind)"}, {"sha": "531fe86ba568a8e5789d9e0eef9798948f492f2f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -3357,7 +3357,7 @@ gfc_check_rank (gfc_expr *a ATTRIBUTE_UNUSED)\n \n   bool is_variable = true;\n \n-  /* Functions returning pointers are regarded as variable, cf. F2008, R602. */\n+  /* Functions returning pointers are regarded as variable, cf. F2008, R602.  */\n   if (a->expr_type == EXPR_FUNCTION)\n     is_variable = a->value.function.esym\n \t\t  ? a->value.function.esym->result->attr.pointer\n@@ -3936,7 +3936,7 @@ gfc_check_sizeof (gfc_expr *arg)\n    If c_loc is true, character with len > 1 are allowed (cf. Fortran\n    2003corr5); additionally, assumed-shape/assumed-rank/deferred-shape\n    arrays are permitted. And if c_f_ptr is true, deferred-shape arrays\n-   are permitted. */\n+   are permitted.  */\n \n static bool\n is_c_interoperable (gfc_expr *expr, const char **msg, bool c_loc, bool c_f_ptr)\n@@ -3983,7 +3983,7 @@ is_c_interoperable (gfc_expr *expr, const char **msg, bool c_loc, bool c_f_ptr)\n     if (expr->ts.deferred)\n       {\n \t/* TS 29113 allows deferred-length strings as dummy arguments,\n-\t   but it is not an interoperable type. */\n+\t   but it is not an interoperable type.  */\n \t*msg = \"Expression shall not be a deferred-length string\";\n \treturn false;\n       }"}, {"sha": "0286c9e391b688db3032180c5a88e28590be7cf1", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -975,7 +975,7 @@ finalization_scalarizer (gfc_symbol *array, gfc_symbol *ptr,\n   block->ext.actual->next = gfc_get_actual_arglist ();\n   block->ext.actual->next->expr = gfc_get_int_expr (gfc_index_integer_kind,\n \t\t\t\t\t\t    NULL, 0);\n-  block->ext.actual->next->next = gfc_get_actual_arglist (); /* SIZE. */\n+  block->ext.actual->next->next = gfc_get_actual_arglist (); /* SIZE.  */\n \n   /* The <addr> part: TRANSFER (C_LOC (array), c_intptr_t).  */\n \n@@ -1363,7 +1363,7 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   block2->expr1 = gfc_lval_expr_from_sym (ptr2);\n   block2->expr2 = gfc_lval_expr_from_sym (ptr);\n \n-  /* Call now the user's final subroutine. */\n+  /* Call now the user's final subroutine.  */\n   block->next  = gfc_get_code (EXEC_CALL);\n   block = block->next;\n   block->symtree = fini->proc_tree;\n@@ -1447,7 +1447,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n       return;\n     }\n \n-  /* Search for the ancestor's finalizers. */\n+  /* Search for the ancestor's finalizers.  */\n   if (derived->attr.extension && derived->components\n       && (!derived->components->ts.u.derived->attr.abstract\n \t  || has_finalizer_component (derived)))\n@@ -1504,7 +1504,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n      3. Call the ancestor's finalizer.  */\n \n   /* Declare the wrapper function; it takes an assumed-rank array\n-     and a VALUE logical as arguments. */\n+     and a VALUE logical as arguments.  */\n \n   /* Set up the namespace.  */\n   sub_ns = gfc_get_namespace (ns, 0);\n@@ -1706,7 +1706,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   last_code->ext.iterator = iter;\n   last_code->block = gfc_get_code (EXEC_DO);\n \n-  /* strides(idx) = _F._stride(array,dim=idx). */\n+  /* strides(idx) = _F._stride(array,dim=idx).  */\n   last_code->block->next = gfc_get_code (EXEC_ASSIGN);\n   block = last_code->block->next;\n \n@@ -1724,11 +1724,11 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t\t\t\t\t   gfc_lval_expr_from_sym (array),\n \t\t\t\t\t   gfc_lval_expr_from_sym (idx));\n \n-  /* sizes(idx) = sizes(idx-1) * size(array,dim=idx, kind=index_kind). */\n+  /* sizes(idx) = sizes(idx-1) * size(array,dim=idx, kind=index_kind).  */\n   block->next = gfc_get_code (EXEC_ASSIGN);\n   block = block->next;\n \n-  /* sizes(idx) = ... */\n+  /* sizes(idx) = ...  */\n   block->expr1 = gfc_lval_expr_from_sym (sizes);\n   block->expr1->ref = gfc_get_ref ();\n   block->expr1->ref->type = REF_ARRAY;\n@@ -1742,7 +1742,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   block->expr2->expr_type = EXPR_OP;\n   block->expr2->value.op.op = INTRINSIC_TIMES;\n \n-  /* sizes(idx-1). */\n+  /* sizes(idx-1).  */\n   block->expr2->value.op.op1 = gfc_lval_expr_from_sym (sizes);\n   block->expr2->value.op.op1->ref = gfc_get_ref ();\n   block->expr2->value.op.op1->ref->type = REF_ARRAY;\n@@ -2499,7 +2499,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t      c->attr.access = ACCESS_PRIVATE;\n \n \t      /* Build a minimal expression to make use of\n-\t\t target-memory.c/gfc_element_size for 'size'. */\n+\t\t target-memory.c/gfc_element_size for 'size'.  */\n \t      e = gfc_get_expr ();\n \t      e->ts = *ts;\n \t      e->expr_type = EXPR_VARIABLE;"}, {"sha": "0e0364cb54eb9e00eb4d6bb43afaedcbff1165d5", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -3238,7 +3238,7 @@ gfc_match_import (void)\n \t    {\n \t      /* The actual derived type is stored in a symtree with the first\n \t\t letter of the name capitalized; the symtree with the all\n-\t\t lower-case name contains the associated generic function. */\n+\t\t lower-case name contains the associated generic function.  */\n \t      st = gfc_new_symtree (&gfc_current_ns->sym_root,\n \t\t\tgfc_get_string (\"%c%s\",\n \t\t\t\t(char) TOUPPER ((unsigned char) name[0]),\n@@ -4857,7 +4857,7 @@ match_procedure_decl (void)\n   int num;\n   gfc_expr *initializer = NULL;\n \n-  /* Parse interface (with brackets). */\n+  /* Parse interface (with brackets).  */\n   m = match_procedure_interface (&proc_if);\n   if (m != MATCH_YES)\n     return m;\n@@ -5698,7 +5698,7 @@ gfc_match_subroutine (void)\n     return MATCH_ERROR;\n \n   /* Set declared_at as it might point to, e.g., a PUBLIC statement, if\n-     the symbol existed before. */\n+     the symbol existed before.  */\n   sym->declared_at = gfc_current_locus;\n \n   if (add_hidden_procptr_result (sym))\n@@ -5943,7 +5943,7 @@ gfc_match_bind_c (gfc_symbol *sym, bool allow_binding_name)\n       /* No binding label, but if symbol isn't null, we\n \t can set the label for it here.\n \t If name=\"\" or allow_binding_name is false, no C binding name is\n-\t created. */\n+\t created.  */\n       if (sym != NULL && sym->name != NULL && has_name_equals == 0)\n \tsym->binding_label = IDENTIFIER_POINTER (get_identifier (sym->name));\n     }\n@@ -7233,7 +7233,7 @@ gfc_match_volatile (void)\n   for(;;)\n     {\n       /* VOLATILE is special because it can be added to host-associated\n-\t symbols locally. Except for coarrays. */\n+\t symbols locally.  Except for coarrays.  */\n       m = gfc_match_symbol (&sym, 1);\n       switch (m)\n \t{"}, {"sha": "186414519350edd5dc4a95d86b0bfb48aa983551", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -542,7 +542,7 @@ gfc_dep_difference (gfc_expr *e1, gfc_expr *e2, mpz_t *result)\n \t  return true;\n \t}\n \n-      /* Case 3: (c1 + X) - X = c1. */\n+      /* Case 3: (c1 + X) - X = c1.  */\n       if (e1_op1->expr_type == EXPR_CONSTANT\n \t  && gfc_dep_compare_expr (e1_op2, e2) == 0)\n \t{\n@@ -1555,7 +1555,7 @@ check_section_vs_section (gfc_array_ref *l_ar, gfc_array_ref *r_ar, int n)\n \n #undef IS_CONSTANT_INTEGER\n \n-  /* Check for forward dependencies x:y vs. x+1:z and x:y:z vs. x:y:z+1. */\n+  /* Check for forward dependencies x:y vs. x+1:z and x:y:z vs. x:y:z+1.  */\n \n   if (l_dir == 1 && r_dir == 1 &&\n       (start_comparison == 0 || start_comparison == -1)"}, {"sha": "10df7e56916921f3aa21ba4a7fa1d971a896ca11", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -1031,7 +1031,7 @@ gfc_diagnostic_starter (diagnostic_context *context,\n     {\n       pp_newline (context->printer);\n       /* If the caret line was shown, the prefix does not contain the\n-\t locus. */\n+\t locus.  */\n       pp_set_prefix (context->printer, prefix);\n     }\n   else "}, {"sha": "1bd62fa87f1cf2cca0d9d2fcd33092c427b1e65d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -4560,7 +4560,7 @@ gfc_is_simply_contiguous (gfc_expr *expr, bool strict)\n   for (ref = expr->ref; ref; ref = ref->next)\n     {\n       if (ar)\n-\treturn false; /* Array shall be last part-ref. */\n+\treturn false; /* Array shall be last part-ref.  */\n \n       if (ref->type == REF_COMPONENT)\n \tpart_ref  = ref;"}, {"sha": "8e8591a5333e4b7d0e6d9dc6068a6a71e7e7097f", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -342,7 +342,7 @@ getdecls (void)\n   return current_binding_level->names;\n }\n \n-/* Enter a new binding level. */\n+/* Enter a new binding level.  */\n \n void\n pushlevel (void)\n@@ -410,7 +410,7 @@ poplevel (int keep, int functionbody)\n   current_binding_level = current_binding_level->level_chain;\n \n   if (functionbody)\n-    /* This is the top level block of a function. */\n+    /* This is the top level block of a function.  */\n     DECL_INITIAL (current_function_decl) = block_node;\n   else if (current_binding_level == global_binding_level)\n     /* When using gfc_start_block/gfc_finish_block from middle-end hooks,"}, {"sha": "97a9164b44d0a417c1e1a4c9ebc18860219d012d", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -91,7 +91,7 @@ struct my_struct *evec;\n \n static bool in_assoc_list;\n \n-/* Entry point - run all passes for a namespace. */\n+/* Entry point - run all passes for a namespace.  */\n \n void\n gfc_run_passes (gfc_namespace *ns)\n@@ -500,7 +500,7 @@ create_var (gfc_expr * e)\n       if (e->shape == NULL)\n \t{\n \t  /* We don't know the shape at compile time, so we use an\n-\t     allocatable. */\n+\t     allocatable.  */\n \t  symbol->as->type = AS_DEFERRED;\n \t  symbol->attr.allocatable = 1;\n \t}\n@@ -589,7 +589,7 @@ cfe_expr_0 (gfc_expr **e, int *walk_subtrees,\n   gfc_expr *newvar;\n   gfc_expr **ei, **ej;\n \n-  /* Don't do this optimization within OMP workshare. */\n+  /* Don't do this optimization within OMP workshare.  */\n \n   if (in_omp_workshare)\n     {"}, {"sha": "9d27698a816712b1f028c27cc314ba3449475fd9", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -198,7 +198,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n-  /* Whether we should link a static libgfortran. */\n+  /* Whether we should link a static libgfortran.  */\n   int static_lib = 0; \n \n   /* Whether we need to link statically.  */"}, {"sha": "1c020700ba014bbbfd1347797fa5bfde1644f460", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -1758,7 +1758,7 @@ unquote_string (const char *s)\n       if (p[1] == '\\\\')\n \tp++;\n       else if (p[1] == 'U')\n-\tp += 9; /* That is a \"\\U????????\". */\n+\tp += 9; /* That is a \"\\U????????\".  */\n       else\n \tgfc_internal_error (\"unquote_string(): got bad string\");\n     }\n@@ -6329,7 +6329,7 @@ import_iso_c_binding_module (void)\n \t\tbreak;\n #include \"iso-c-binding.def\"\n \t      default:\n-\t\t; /* Not GFC_STD_* versioned. */\n+\t\t; /* Not GFC_STD_* versioned.  */\n \t    }\n \n \t  switch (i)\n@@ -6891,7 +6891,7 @@ gfc_use_module (gfc_use_list *module)\n }\n \n \n-/* Remove duplicated intrinsic operators from the rename list. */\n+/* Remove duplicated intrinsic operators from the rename list.  */\n \n static void\n rename_list_remove_duplicate (gfc_use_rename *list)"}, {"sha": "6543fbd1ec6382a36402a3734b29029469658fd6", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -72,7 +72,7 @@ gfc_init_options_struct (struct gcc_options *opts)\n }\n \n /* Get ready for options handling. Keep in sync with\n-   libgfortran/runtime/compile_options.c (init_compile_options). */\n+   libgfortran/runtime/compile_options.c (init_compile_options).  */\n \n void\n gfc_init_options (unsigned int decoded_options_count,\n@@ -284,7 +284,7 @@ gfc_post_options (const char **pfilename)\n     gfc_option.flag_stack_arrays = optimize_fast;\n \n   /* By default, disable (re)allocation during assignment for -std=f95,\n-     and enable it for F2003/F2008/GNU/Legacy. */\n+     and enable it for F2003/F2008/GNU/Legacy.  */\n   if (gfc_option.flag_realloc_lhs == -1)\n     {\n       if (gfc_option.allow_std & GFC_STD_F2003)\n@@ -511,7 +511,7 @@ gfc_handle_fpe_option (const char *arg, bool trap)\n \t\t\t\t       GFC_FPE_INEXACT,\n \t\t\t\t       0 };\n \n-  /* As the default for -ffpe-summary= is nonzero, set it to 0. */\n+  /* As the default for -ffpe-summary= is nonzero, set it to 0.  */\n   if (!trap)\n     gfc_option.fpe_summary = 0;\n \n@@ -1189,7 +1189,7 @@ gfc_get_option_string (void)\n           /* Ignore these.  */\n           break;\n \tdefault:\n-\t  /* Ignore file names. */\n+\t  /* Ignore file names.  */\n \t  if (save_decoded_options[j].orig_option_with_args_text[0] == '-')\n \t    len += 1\n \t\t + strlen (save_decoded_options[j].orig_option_with_args_text);\n@@ -1221,7 +1221,7 @@ gfc_get_option_string (void)\n \t  break;\n \n         default:\n-\t  /* Ignore file names. */\n+\t  /* Ignore file names.  */\n \t  if (save_decoded_options[j].orig_option_with_args_text[0] != '-')\n \t    continue;\n "}, {"sha": "91650614adafbfadbc598cc381a5beefab149f04", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -3085,7 +3085,7 @@ parse_spec (gfc_statement st)\n       break;\n     }\n \n-  /* If match_deferred_characteristics failed, then there is an error. */\n+  /* If match_deferred_characteristics failed, then there is an error.  */\n   if (bad_characteristic)\n     {\n       ts = &gfc_current_block ()->result->ts;\n@@ -4869,7 +4869,7 @@ add_global_program (void)\n }\n \n \n-/* Resolve all the program units. */\n+/* Resolve all the program units.  */\n static void\n resolve_all_program_units (gfc_namespace *gfc_global_ns_list)\n {"}, {"sha": "bbaa5171e545d871a4697bc4acc4df966616afd9", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -2839,7 +2839,7 @@ gfc_match_rvalue (gfc_expr **result)\n        procedure, yet it is not sure to be the name of a function.  */\n     case FL_PROCEDURE:\n \n-    /* Procedure Pointer Assignments. */\n+    /* Procedure Pointer Assignments.  */\n     procptr0:\n       if (gfc_matching_procptr_assignment)\n \t{"}, {"sha": "a83e5afaae51f5fdccde49f5d1faf25d06d1a4ae", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -5114,7 +5114,7 @@ check_host_association (gfc_expr *e)\n   \t    {\n \t      /* Original was function so point to the new symbol, since\n \t\t the actual argument list is already attached to the\n-\t\t expression. */\n+\t\t expression.  */\n \t      e->value.function.esym = NULL;\n \t      e->symtree = st;\n \t    }\n@@ -10017,7 +10017,7 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t    break;\n \n \t  /* Remove a GFC_ISYM_CAF_GET inserted for a coindexed variable on\n-\t     the LHS. */\n+\t     the LHS.  */\n \t  if (code->expr1->expr_type == EXPR_FUNCTION\n \t      && code->expr1->value.function.isym\n \t      && code->expr1->value.function.isym->id == GFC_ISYM_CAF_GET)\n@@ -12314,7 +12314,7 @@ resolve_fl_derived0 (gfc_symbol *sym)\n \n   super_type = gfc_get_derived_super_type (sym);\n \n-  /* F2008, C432. */\n+  /* F2008, C432.  */\n   if (super_type && sym->attr.coarray_comp && !super_type->attr.coarray_comp)\n     {\n       gfc_error (\"As extending type '%s' at %L has a coarray component, \"\n@@ -13124,7 +13124,7 @@ resolve_symbol (gfc_symbol *sym)\n       as = sym->as;\n     }\n \n-  /* F2008, C530. */\n+  /* F2008, C530.  */\n   if (sym->attr.contiguous\n       && (!class_attr.dimension\n \t  || (as->type != AS_ASSUMED_SHAPE && as->type != AS_ASSUMED_RANK"}, {"sha": "8d650675560a0291e52bdc6ca1cd0d85afc5ba4d", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -1788,7 +1788,7 @@ preprocessor_line (gfc_char_t *c)\n     {\n        /* FIXME: we leak the old filename because a pointer to it may be stored\n           in the linemap.  Alternative could be using GC or updating linemap to\n-          point to the new name, but there is no API for that currently. */\n+          point to the new name, but there is no API for that currently.  */\n       current_file->filename = xstrdup (filename);\n     }\n "}, {"sha": "278527c58d2dd2528cc67581bda274795a3a43e4", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -391,7 +391,7 @@ compute_dot_product (gfc_expr *matrix_a, int stride_a, int offset_a,\n \n \n /* Build a result expression for transformational intrinsics,\n-   depending on DIM. */\n+   depending on DIM.  */\n \n static gfc_expr *\n transformational_result (gfc_expr *array, gfc_expr *dim, bt type,\n@@ -501,7 +501,8 @@ simplify_transformation_to_scalar (gfc_expr *result, gfc_expr *array, gfc_expr *\n      REAL, PARAMETER :: array(n, m) = ...\n      REAL, PARAMETER :: s(n) = PROD(array, DIM=1)\n \n-  where OP == gfc_multiply(). The result might be post processed using post_op. */\n+   where OP == gfc_multiply().\n+   The result might be post processed using post_op.  */\n \n static gfc_expr *\n simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *dim,\n@@ -6096,7 +6097,7 @@ gfc_simplify_spread (gfc_expr *source, gfc_expr *dim_expr, gfc_expr *ncopies_exp\n   else\n     /* FIXME: Returning here avoids a regression in array_simplify_1.f90.\n        Replace NULL with gcc_unreachable() after implementing\n-       gfc_simplify_cshift(). */\n+       gfc_simplify_cshift().  */\n     return NULL;\n \n   if (source->ts.type == BT_CHARACTER)"}, {"sha": "8e1d8b3b408c69b9ae44d4c2162a4b0e073f6bbf", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -4207,7 +4207,7 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n \t  || tmp_symtree->n.sym->intmod_sym_id != s))\n     tmp_symtree = NULL;\n \n-  /* Already exists in this scope so don't re-add it. */\n+  /* Already exists in this scope so don't re-add it.  */\n   if (tmp_symtree != NULL && (tmp_sym = tmp_symtree->n.sym) != NULL\n       && (!tmp_sym->attr.generic\n \t  || (tmp_sym = gfc_find_dt_in_generic (tmp_sym)) != NULL)"}, {"sha": "9218738d2a96c4f877892a92b9288f8f65e2968b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -3178,7 +3178,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \t      && TREE_CODE (TREE_TYPE (se->expr)) == POINTER_TYPE)\n \t    se->expr = build_fold_indirect_ref_loc (input_location, se->expr);\n \n-\t  /* Use the actual tree type and not the wrapped coarray. */\n+\t  /* Use the actual tree type and not the wrapped coarray.  */\n \t  if (!se->want_pointer)\n \t    se->expr = fold_convert (TYPE_MAIN_VARIANT (TREE_TYPE (se->expr)),\n \t\t\t\t     se->expr);\n@@ -5300,7 +5300,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \n   gfc_add_expr_to_block (&se->pre, tmp);\n \n-  /* Update the array descriptors. */\n+  /* Update the array descriptors.  */\n   if (dimension)\n     gfc_conv_descriptor_offset_set (&set_descriptor_block, se->expr, offset);\n \n@@ -8478,7 +8478,7 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   size2 = gfc_evaluate_now (size2, &fblock);\n \n   /* Realloc expression.  Note that the scalarizer uses desc.data\n-     in the array reference - (*desc.data)[<element>]. */\n+     in the array reference - (*desc.data)[<element>].  */\n   gfc_init_block (&realloc_block);\n \n   if ((expr1->ts.type == BT_DERIVED)"}, {"sha": "06203419608f3e3776edccbc00240e03df4a21db", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -708,7 +708,7 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n \tDECL_IGNORED_P (var_decl) = 1;\n       if (s->sym->attr.target)\n \tTREE_ADDRESSABLE (var_decl) = 1;\n-      /* Fake variables are not visible from other translation units. */\n+      /* Fake variables are not visible from other translation units.  */\n       TREE_PUBLIC (var_decl) = 0;\n       gfc_finish_decl_attrs (var_decl, &s->sym->attr);\n "}, {"sha": "10dfc9f853418f9fb5f0daf6f1ec382a727a5611", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -3651,7 +3651,7 @@ gfc_init_default_dt (gfc_symbol * sym, stmtblock_t * block, bool dealloc)\n \n /* Initialize INTENT(OUT) derived type dummies.  As well as giving\n    them their default initializer, if they do not have allocatable\n-   components, they have their allocatable components deallocated. */\n+   components, they have their allocatable components deallocated.  */\n \n static void\n init_intent_out_dt (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n@@ -5350,7 +5350,7 @@ create_main_function (tree fndecl)\n \n   gfc_init_block (&body);\n \n-  /* Call some libgfortran initialization routines, call then MAIN__(). */\n+  /* Call some libgfortran initialization routines, call then MAIN__().  */\n \n   /* Call _gfortran_caf_init (*argc, ***argv).  */\n   if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n@@ -5413,7 +5413,7 @@ create_main_function (tree fndecl)\n     /* TODO: This is the -frange-check option, which no longer affects\n        library behavior; when bumping the library ABI this slot can be\n        reused for something else. As it is the last element in the\n-       array, we can instead leave it out altogether. */\n+       array, we can instead leave it out altogether.  */\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node, 0));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,"}, {"sha": "6077a32dfacd8ab8f9c042ba45806b518e2b10cd", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -231,7 +231,7 @@ gfc_reset_vptr (stmtblock_t *block, gfc_expr *e)\n   gfc_ref *ref;\n \n   /* If we have a class array, we need go back to the class\n-     container. */\n+     container.  */\n   if (lhs->ref && lhs->ref->next && !lhs->ref->next->next\n       && lhs->ref->next->type == REF_ARRAY\n       && lhs->ref->next->u.ar.type == AR_FULL\n@@ -729,7 +729,7 @@ gfc_conv_class_to_class (gfc_se *parmse, gfc_expr *e, gfc_typespec class_ts,\n   ctree = gfc_class_vptr_get (var);\n \n   /* The vptr is the second field of the actual argument.\n-     First we have to find the corresponding class reference. */\n+     First we have to find the corresponding class reference.  */\n \n   tmp = NULL_TREE;\n   if (class_ref == NULL\n@@ -4953,7 +4953,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t  && CLASS_DATA (fsym)->attr.codimension\n \t\t  && !CLASS_DATA (fsym)->attr.allocatable)))\n \t{\n-\t  /* Token and offset. */\n+\t  /* Token and offset.  */\n \t  vec_safe_push (stringargs, null_pointer_node);\n \t  vec_safe_push (stringargs, build_int_cst (gfc_array_index_type, 0));\n \t  gcc_assert (fsym->attr.optional);\n@@ -7391,7 +7391,7 @@ arrayfunc_assign_needs_temporary (gfc_expr * expr1, gfc_expr * expr2)\n     {\n       /* A temporary is not needed if the function is not contained and\n \t the variable is local or host associated and not a pointer or\n-\t a target. */\n+\t a target.  */\n       if (!expr2->value.function.esym->attr.contained)\n \treturn false;\n \n@@ -7420,7 +7420,7 @@ realloc_lhs_loop_for_fcn_call (gfc_se *se, locus *where, gfc_ss **ss,\n \t\t\t       gfc_loopinfo *loop)\n {\n   /* Signal that the function call should not be made by\n-     gfc_conv_loop_setup. */\n+     gfc_conv_loop_setup.  */\n   se->ss->is_alloc_lhs = 1;\n   gfc_init_loopinfo (loop);\n   gfc_add_ss_to_loop (loop, *ss);\n@@ -8252,7 +8252,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      the function call must happen before the (re)allocation of the lhs -\n      otherwise the character length of the result is not known.\n      NOTE: This relies on having the exact dependence of the length type\n-     parameter available to the caller; gfortran saves it in the .mod files. */\n+     parameter available to the caller; gfortran saves it in the .mod files.  */\n   if (gfc_option.flag_realloc_lhs && expr2->ts.type == BT_CHARACTER\n       && expr1->ts.deferred)\n     gfc_add_block_to_block (&block, &rse.pre);"}, {"sha": "0a83ad0219a90f76e67653040e036a450c0f9ad8", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -2696,7 +2696,7 @@ conv_intrinsic_system_clock (gfc_code *code)\n   else if (count_max)\n     arg3 = count_max_se.expr;\n \n-  /* Make the function call. */\n+  /* Make the function call.  */\n   gfc_init_block (&block);\n   tmp = build_call_expr_loc (input_location,\n \t\t\t     kind == 4 ? gfor_fndecl_system_clock4\n@@ -7134,7 +7134,7 @@ conv_isocbinding_subroutine (gfc_code *code)\n   dim = fold_build2_loc (input_location, MINUS_EXPR, gfc_array_index_type,\n \t\t\t     loop.loopvar[0], loop.from[0]);\n \n-  /* Set bounds and stride. */\n+  /* Set bounds and stride.  */\n   gfc_conv_descriptor_lbound_set (&body, desc, dim, gfc_index_one_node);\n   gfc_conv_descriptor_stride_set (&body, desc, dim, stride);\n \n@@ -7143,7 +7143,7 @@ conv_isocbinding_subroutine (gfc_code *code)\n   gfc_conv_descriptor_ubound_set (&body, desc, dim, shapese.expr);\n   gfc_add_block_to_block (&body, &shapese.post);\n \n-  /* Calculate offset. */\n+  /* Calculate offset.  */\n   gfc_add_modify (&body, offset,\n \t\t  fold_build2_loc (input_location, PLUS_EXPR,\n \t\t\t\t   gfc_array_index_type, offset, stride));"}, {"sha": "fbf791263d31eb72a2ed00660776db28f5980650", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -2135,7 +2135,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n \t  gfc_add_block_to_block (&se->pre, &se->post);\n \t  return;\n \t}\n-      /* Fall through. */\n+      /* Fall through.  */\n     case BT_HOLLERITH:\n       if (se->string_length)\n \targ2 = se->string_length;"}, {"sha": "d17b0758d2c21127e55c9c1c1d4e95f79a00838d", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -773,7 +773,7 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n     }\n \n   /* Check SYNC IMAGES(imageset) for valid image index.\n-     FIXME: Add a check for image-set arrays. */\n+     FIXME: Add a check for image-set arrays.  */\n   if (code->expr1 && (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n       && code->expr1->rank == 0)\n     {\n@@ -1106,7 +1106,7 @@ gfc_trans_arithmetic_if (gfc_code * code)\n }\n \n \n-/* Translate a CRITICAL block. */\n+/* Translate a CRITICAL block.  */\n tree\n gfc_trans_critical (gfc_code *code)\n {\n@@ -1431,7 +1431,7 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n   gfc_add_modify_loc (loc, pblock, dovar,\n \t\t      fold_convert (TREE_TYPE(dovar), from));\n \n-  /* Save value for do-tinkering checking. */\n+  /* Save value for do-tinkering checking.  */\n   if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n     {\n       saved_dovar = gfc_create_var (type, \".saved_dovar\");\n@@ -1460,7 +1460,7 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n-  /* Check whether someone has modified the loop variable. */\n+  /* Check whether someone has modified the loop variable.  */\n   if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n     {\n       tmp = fold_build2_loc (loc, NE_EXPR, boolean_type_node,\n@@ -1634,7 +1634,7 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n   /* Initialize the DO variable: dovar = from.  */\n   gfc_add_modify (&block, dovar, from);\n \n-  /* Save value for do-tinkering checking. */\n+  /* Save value for do-tinkering checking.  */\n   if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n     {\n       saved_dovar = gfc_create_var (type, \".saved_dovar\");\n@@ -1743,7 +1743,7 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n-  /* Check whether someone has modified the loop variable. */\n+  /* Check whether someone has modified the loop variable.  */\n   if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n     {\n       tmp = fold_build2_loc (loc, NE_EXPR, boolean_type_node, dovar,\n@@ -4176,7 +4176,7 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n   stmtblock_t body;\n   tree index, maskexpr;\n \n-  /* A defined assignment. */\n+  /* A defined assignment.  */\n   if (cnext && cnext->resolved_sym)\n     return gfc_trans_call (cnext, true, mask, count1, invert);\n "}, {"sha": "032147deafc4ad8e5a31638098550e6d52813f2e", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -610,7 +610,7 @@ gfc_init_kinds (void)\n \n   /* We only have two character kinds: ASCII and UCS-4.\n      ASCII corresponds to a 8-bit integer type, if one is available.\n-     UCS-4 corresponds to a 32-bit integer type, if one is available. */\n+     UCS-4 corresponds to a 32-bit integer type, if one is available.  */\n   i_index = 0;\n   if ((kind = get_int_kind_from_width (8)) > 0)\n     {"}, {"sha": "dbaa7d7523c3da4ccb3e472cf4a48296ec5ca061", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc0e19328554e88fd56ce2b0c181737a2d50ccf/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "patch": "@@ -1085,7 +1085,7 @@ gfc_add_finalizer_call (stmtblock_t *block, gfc_expr *expr2)\n     }\n \n   /* If we have a class array, we need go back to the class\n-     container. */\n+     container.  */\n   expr = gfc_copy_expr (expr2);\n \n   if (expr->ref && expr->ref->next && !expr->ref->next->next"}]}