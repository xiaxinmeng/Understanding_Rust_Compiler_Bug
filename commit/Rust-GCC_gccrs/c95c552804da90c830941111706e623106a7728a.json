{"sha": "c95c552804da90c830941111706e623106a7728a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1YzU1MjgwNGRhOTBjODMwOTQxMTExNzA2ZTYyMzEwNmE3NzI4YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-11-19T16:42:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-19T16:42:03Z"}, "message": "Fix -fsave-optimization-record ICE (PR tree-optimization/87025)\n\nPR tree-optimization/87025 reports an ICE within\n-fsave-optimization-record's optrecord_json_writer.\n\nThe issue is that dump_context::begin_scope creates an optinfo\nof kind OPTINFO_KIND_SCOPE, but fails to call\ndump_context::end_any_optinfo, so the optinfo for the scope remains\npending.\n\nThe JSON writer would normally push a JSON array for the \"scope\" optinfo\nwhen the latter is emitted.  However, if a dump_* call happens that\ndoesn't flush the \"scope\" optinfo e.g. dump_printf (as opposed to\ndump_printf_loc), that dump_ call is added to the pending optinfo, and\noptinfo::handle_dump_file_kind changes the pending optinfo's m_kind\n(e.g. to OPTINFO_KIND_NOTE).  Hence when the pending optinfo is\neventually emitted, it isn't OPTINFO_KIND_SCOPE anymore, and hence\nthe JSON writer doesn't create and push a JSON array for it, leading\nto dump_context's view of scopes getting out-of-sync with that of\nthe JSON writer's.\n\nLater, dump_context::end_scope unconditionally tries to pop the JSON scope\narray, but no JSON scope array was added, leading to an assertion\nfailure (or crash).\n\nThe fix is to call dump_context::end_any_optinfo immediately after\ncreating the scope optinfo, so that it is emitted immediately, ensuring\nthat the JSON writer stays in-sync with the dump_context.\n\ngcc/ChangeLog:\n\tPR tree-optimization/87025\n\t* dumpfile.c (dump_context::begin_scope): Call end_any_optinfo\n\timmediately after creating the scope optinfo.\n\t(selftest::test_pr87025): New function.\n\t(selftest::dumpfile_c_tests): Call it.\n\t* optinfo-emit-json.cc (optrecord_json_writer::pop_scope): Assert\n\tthat we're not popping the top-level records array.\n\t* optinfo.cc (optinfo::handle_dump_file_kind): Assert that we're\n\tnot changing the kind of a \"scope\" optinfo.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/87025\n\t* gcc.dg/pr87025.c: New test.\n\nFrom-SVN: r266280", "tree": {"sha": "42bd6ec09491b80d40c3f59d6bfbf4458b5abe5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42bd6ec09491b80d40c3f59d6bfbf4458b5abe5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95c552804da90c830941111706e623106a7728a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95c552804da90c830941111706e623106a7728a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95c552804da90c830941111706e623106a7728a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95c552804da90c830941111706e623106a7728a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d1af516844f94784d9a3a7ffc59f9ab3daa1f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1af516844f94784d9a3a7ffc59f9ab3daa1f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1af516844f94784d9a3a7ffc59f9ab3daa1f5d"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "126f168a15d6b4b504a9f9bd6194cb1f6f1fb2f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95c552804da90c830941111706e623106a7728a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95c552804da90c830941111706e623106a7728a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c95c552804da90c830941111706e623106a7728a", "patch": "@@ -1,3 +1,15 @@\n+2018-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/87025\n+\t* dumpfile.c (dump_context::begin_scope): Call end_any_optinfo\n+\timmediately after creating the scope optinfo.\n+\t(selftest::test_pr87025): New function.\n+\t(selftest::dumpfile_c_tests): Call it.\n+\t* optinfo-emit-json.cc (optrecord_json_writer::pop_scope): Assert\n+\tthat we're not popping the top-level records array.\n+\t* optinfo.cc (optinfo::handle_dump_file_kind): Assert that we're\n+\tnot changing the kind of a \"scope\" optinfo.\n+\n 2018-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/87025"}, {"sha": "e125650eed107f5e4bb2dc92771a65c027ed277f", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95c552804da90c830941111706e623106a7728a/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95c552804da90c830941111706e623106a7728a/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=c95c552804da90c830941111706e623106a7728a", "patch": "@@ -1131,6 +1131,7 @@ dump_context::begin_scope (const char *name, const dump_location_t &loc)\n       optinfo &info = begin_next_optinfo (loc);\n       info.m_kind = OPTINFO_KIND_SCOPE;\n       info.add_item (item);\n+      end_any_optinfo ();\n     }\n   else\n     delete item;\n@@ -2575,13 +2576,28 @@ test_capture_of_dump_calls (const line_table_case &case_)\n   }\n }\n \n+static void\n+test_pr87025 ()\n+{\n+  dump_user_location_t loc\n+    = dump_user_location_t::from_location_t (UNKNOWN_LOCATION);\n+\n+  temp_dump_context tmp (true, true,\n+\t\t\t MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n+  {\n+    AUTO_DUMP_SCOPE (\"outer scope\", loc);\n+    dump_printf (MSG_NOTE, \"msg1\\n\");\n+  }\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n dumpfile_c_tests ()\n {\n   test_impl_location ();\n   for_each_line_table_case (test_capture_of_dump_calls);\n+  test_pr87025 ();\n }\n \n } // namespace selftest"}, {"sha": "841a13b4f3bae15d67be545aad8ee3d24d9dde1f", "filename": "gcc/optinfo-emit-json.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95c552804da90c830941111706e623106a7728a/gcc%2Foptinfo-emit-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95c552804da90c830941111706e623106a7728a/gcc%2Foptinfo-emit-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptinfo-emit-json.cc?ref=c95c552804da90c830941111706e623106a7728a", "patch": "@@ -169,6 +169,9 @@ void\n optrecord_json_writer::pop_scope ()\n {\n   m_scopes.pop ();\n+\n+  /* We should never pop the top-level records array.  */\n+  gcc_assert (m_scopes.length () > 0);\n }\n \n /* Create a JSON object representing LOC.  */"}, {"sha": "f76da45fb988ad50ff200e9a65bd565b9620530c", "filename": "gcc/optinfo.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95c552804da90c830941111706e623106a7728a/gcc%2Foptinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95c552804da90c830941111706e623106a7728a/gcc%2Foptinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptinfo.cc?ref=c95c552804da90c830941111706e623106a7728a", "patch": "@@ -133,6 +133,9 @@ optinfo::emit_for_opt_problem () const\n void\n optinfo::handle_dump_file_kind (dump_flags_t dump_kind)\n {\n+  /* Any optinfo for a \"scope\" should have been emitted separately.  */\n+  gcc_assert (m_kind != OPTINFO_KIND_SCOPE);\n+\n   if (dump_kind & MSG_OPTIMIZED_LOCATIONS)\n     m_kind = OPTINFO_KIND_SUCCESS;\n   else if (dump_kind & MSG_MISSED_OPTIMIZATION)"}, {"sha": "cea66a545f1d5527d6ba4c7c6a07d8164f44b824", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95c552804da90c830941111706e623106a7728a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95c552804da90c830941111706e623106a7728a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c95c552804da90c830941111706e623106a7728a", "patch": "@@ -1,3 +1,8 @@\n+2018-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/87025\n+\t* gcc.dg/pr87025.c: New test.\n+\n 2018-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88071"}, {"sha": "059313ccdaaca06b8a31c0c177d69ee3a7eb4387", "filename": "gcc/testsuite/gcc.dg/pr87025.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95c552804da90c830941111706e623106a7728a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87025.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95c552804da90c830941111706e623106a7728a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87025.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87025.c?ref=c95c552804da90c830941111706e623106a7728a", "patch": "@@ -0,0 +1,22 @@\n+/* Ensure we don't ICE when tracking optimization record scopes within\n+   the vectorizer.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fsave-optimization-record -ftree-vectorize -fno-tree-scev-cprop -fno-tree-sink\" } */\n+\n+void\n+fk (unsigned int sf)\n+{\n+  for (;;)\n+    {\n+      if (sf != 0)\n+        {\n+          while (sf != 0)\n+            ++sf;\n+\n+          while (sf < 8)\n+            ++sf;\n+        }\n+\n+      ++sf;\n+    }\n+}"}]}