{"sha": "c6aef8d8009e324c971b892e8fa3c163bfdf6ba1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhZWY4ZDgwMDllMzI0Yzk3MWI4OTJlOGZhM2MxNjNiZmRmNmJhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-25T11:38:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-25T11:38:37Z"}, "message": "tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Add assertion.\n\n2019-11-25  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Add assertion.\n\t(vect_detect_hybrid_slp): Swap lane and instance iteration,\n\tproperly re-building the visited hash-map for each lane.\n\nFrom-SVN: r278679", "tree": {"sha": "5f3d6d1470165dfc27ce4e6138b4afbe58cd3bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f3d6d1470165dfc27ce4e6138b4afbe58cd3bc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6349e4f04ca6ccb060fdfc496bf8cf6366a5a5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6349e4f04ca6ccb060fdfc496bf8cf6366a5a5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6349e4f04ca6ccb060fdfc496bf8cf6366a5a5d1"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "6dee39e682386667ce10714d8bcf88eacafed20b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6aef8d8009e324c971b892e8fa3c163bfdf6ba1", "patch": "@@ -1,3 +1,9 @@\n+2019-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Add assertion.\n+\t(vect_detect_hybrid_slp): Swap lane and instance iteration,\n+\tproperly re-building the visited hash-map for each lane.\n+\n 2019-11-25  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* config/gcn/gcn.c (gcn_expand_scalar_to_vector_address,"}, {"sha": "bedbe9ac978fa0468ba6a3350e655003f2210ae9", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6aef8d8009e324c971b892e8fa3c163bfdf6ba1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c6aef8d8009e324c971b892e8fa3c163bfdf6ba1", "patch": "@@ -2542,7 +2542,9 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype,\n \n   /* We need to union stype over the incoming graph edges but we still\n      want to limit recursion to stay O(N+E).  */\n-  bool only_edge = (++visited.get_or_insert (node) < node->refcnt);\n+  unsigned visited_cnt = ++visited.get_or_insert (node);\n+  gcc_assert (visited_cnt <= node->refcnt);\n+  bool only_edge = (visited_cnt != node->refcnt);\n \n   /* Propagate hybrid down the SLP tree.  */\n   if (stype == hybrid)\n@@ -2680,12 +2682,19 @@ vect_detect_hybrid_slp (loop_vec_info loop_vinfo)\n   /* Then walk the SLP instance trees marking stmts with uses in\n      non-SLP stmts as hybrid, also propagating hybrid down the\n      SLP tree, collecting the above info on-the-fly.  */\n-  hash_map<slp_tree, unsigned> visited;\n-  FOR_EACH_VEC_ELT (slp_instances, i, instance)\n+  for (unsigned j = 0;; ++j)\n     {\n-      for (unsigned i = 0; i < SLP_INSTANCE_GROUP_SIZE (instance); ++i)\n-\tvect_detect_hybrid_slp_stmts (SLP_INSTANCE_TREE (instance),\n-\t\t\t\t      i, pure_slp, visited);\n+      hash_map<slp_tree, unsigned> visited;\n+      bool any = false;\n+      FOR_EACH_VEC_ELT (slp_instances, i, instance)\n+\tif (j < SLP_INSTANCE_GROUP_SIZE (instance))\n+\t  {\n+\t    any = true;\n+\t    vect_detect_hybrid_slp_stmts (SLP_INSTANCE_TREE (instance),\n+\t\t\t\t\t  j, pure_slp, visited);\n+\t  }\n+      if (!any)\n+\tbreak;\n     }\n }\n "}]}