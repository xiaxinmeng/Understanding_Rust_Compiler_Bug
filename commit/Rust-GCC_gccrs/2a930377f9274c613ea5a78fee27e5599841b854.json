{"sha": "2a930377f9274c613ea5a78fee27e5599841b854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5MzAzNzdmOTI3NGM2MTNlYTVhNzhmZWUyN2U1NTk5ODQxYjg1NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-03-20T09:23:39Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-20T09:23:39Z"}, "message": "re PR bootstrap/56656 (Suffix or operands invalid for 'movq')\n\n\tPR bootstrap/56656\n\t* config/i386/i386.md (*movdi_internal): Handle broken assemblers\n\tthat require movd instead of movq.\n\nFrom-SVN: r196813", "tree": {"sha": "ca626e3e5db1aca7b54614e6aee855e0d73317dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca626e3e5db1aca7b54614e6aee855e0d73317dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a930377f9274c613ea5a78fee27e5599841b854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a930377f9274c613ea5a78fee27e5599841b854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a930377f9274c613ea5a78fee27e5599841b854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a930377f9274c613ea5a78fee27e5599841b854/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6d305febc69430ee94dd7eb4c492c7b013232e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d305febc69430ee94dd7eb4c492c7b013232e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d305febc69430ee94dd7eb4c492c7b013232e1"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "ceb5f2875268bbc0a81584b5456c7a4f4f7b6839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a930377f9274c613ea5a78fee27e5599841b854/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a930377f9274c613ea5a78fee27e5599841b854/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a930377f9274c613ea5a78fee27e5599841b854", "patch": "@@ -1,3 +1,9 @@\n+2013-03-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR bootstrap/56656\n+\t* config/i386/i386.md (*movdi_internal): Handle broken assemblers\n+\tthat require movd instead of movq.\n+\n 2013-03-20  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (struct variable_info): Add pointer"}, {"sha": "ff8e36b99c0473d6e24131df553d01b21129be14", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a930377f9274c613ea5a78fee27e5599841b854/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a930377f9274c613ea5a78fee27e5599841b854/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2a930377f9274c613ea5a78fee27e5599841b854", "patch": "@@ -1876,8 +1876,7 @@\n       /* Handle broken assemblers that require movd instead of movq.  */\n       if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n \treturn \"movd\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movq\\t{%1, %0|%0, %1}\";\n+      return \"movq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n       return standard_sse_constant_opcode (insn, operands[1]);\n@@ -1886,14 +1885,19 @@\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_DI:\n-\t   return \"%vmovq\\t{%1, %0|%0, %1}\";\n+\t  /* Handle broken assemblers that require movd instead of movq.  */\n+\t  if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n+\t    return \"%vmovd\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_TI:\n \t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\n \tcase MODE_V4SF:\n \t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2SF:\n \t  gcc_assert (!TARGET_AVX);\n \t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -2771,33 +2775,35 @@\n     case 14:\n     case 15:\n     case 16:\n+    case 17:\n+    case 18:\n       switch (get_attr_mode (insn))\n \t{\n-\tcase MODE_V2DF:\n-\t  return \"%vmovapd\\t{%1, %0|%0, %1}\";\n-\tcase MODE_V4SF:\n-\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\n-\tcase MODE_DI:\n-\t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_DF:\n \t  if (TARGET_AVX && REG_P (operands[0]) && REG_P (operands[1]))\n \t    return \"vmovsd\\t{%1, %0, %0|%0, %0, %1}\";\n \t  return \"%vmovsd\\t{%1, %0|%0, %1}\";\n+\n \tcase MODE_V1DF:\n \t  return \"%vmovlpd\\t{%1, %d0|%d0, %1}\";\n+\tcase MODE_V2DF:\n+\t  return \"%vmovapd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2SF:\n \t  gcc_assert (!TARGET_AVX);\n \t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\n+\tcase MODE_DI:\n+\t  /* Handle broken assemblers that require movd instead of movq.  */\n+\t  if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n+\t    return \"%vmovd\\t{%1, %0|%0, %1}\";\n+ \t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n \n-    case 17:\n-    case 18:\n-      /* Handle broken assemblers that require movd instead of movq.  */\n-      return \"%vmovd\\t{%1, %0|%0, %1}\";\n-\n     default:\n       gcc_unreachable ();\n     }"}]}