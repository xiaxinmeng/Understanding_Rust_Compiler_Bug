{"sha": "ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwZGMwN2Q4YTBiZTc0NWMwMzY2OTk4YzAxNjRkN2UwZGY0YTFiYw==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@aim.com", "date": "2008-06-19T22:08:25Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2008-06-19T22:08:25Z"}, "message": "target-supports.exp (check_effective_target_keeps_null_pointer_checks): New function.\n\n* lib/target-supports.exp(check_effective_target_keeps_null_pointer_checks): New function.\n* gcc.dg/tree-ssa/20030730-1.c: Use keeps_null_pointer_checks to determine correct test response.\n* gcc.dg/tree-ssa/20030730-2.c: Ditto.\n* gcc.dg/tree-ssa/pr20701.c: Ditto.\n* gcc.dg/tree-ssa/pr20702.c: Ditto.\n* gcc.dg/tree-ssa/pr21086.c: Ditto.\n* gcc.dg/tree-ssa/vrp02.c:: Ditto.\n* gcc.dg/tree-ssa/vrp07.c:: Ditto.\n* gcc.dg/tree-ssa/vrp08.c:: Ditto.\n\nFrom-SVN: r136970", "tree": {"sha": "b4bdc31d124b153e6f053a2fc9d5e628af5e296f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4bdc31d124b153e6f053a2fc9d5e628af5e296f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/comments", "author": null, "committer": null, "parents": [{"sha": "15f0f116ce6a94ac93805d9f67fcef9622296303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f0f116ce6a94ac93805d9f67fcef9622296303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f0f116ce6a94ac93805d9f67fcef9622296303"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "f712d104183ba558437e7ac34a389f12321d12ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -1,3 +1,17 @@\n+2008-06-19  Andy Hutchinson  <hutchinsonandy@aim.com>\n+\n+\t* lib/target-supports.exp \n+\t(check_effective_target_keeps_null_pointer_checks) : New function.\n+\t* gcc.dg/tree-ssa/20030730-1.c: Use keeps_null_pointer_checks to \n+\tdetermine correct test response.\n+\t* gcc.dg/tree-ssa/20030730-2.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr20701.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr20702.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr21086.c: Ditto.\n+\t* gcc.dg/tree-ssa/vrp02.c:: Ditto.\n+\t* gcc.dg/tree-ssa/vrp07.c:: Ditto.\n+\t* gcc.dg/tree-ssa/vrp08.c:: Ditto. \n+  \n 2008-06-19  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \t* gcc.dg/pragma-pack-4.c: Skip for AVR target."}, {"sha": "f8ee97c721324eeb2f7c7e7d7fe540d77413dc29", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030730-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -18,7 +18,8 @@ foo (int attr_kind, unsigned long offset)\n     exit (0);\n }\n \n-/* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" } } */\n-                                                                                \n+/* There should be no IF conditionals, unless target has fno-delete-null-pointer-checks  */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump \"if \" \"dom3\" { target { keeps_null_pointer_checks } } } } */\n+     \n /* { dg-final { cleanup-tree-dump \"dom3\" } } */"}, {"sha": "90359ed8cc7dfd472aec91a2145d39ea5deb6dd3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030730-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -18,7 +18,8 @@ foo (int attr_kind, unsigned long offset)\n     exit (0);\n }\n \n-/* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" } } */\n+/* There should be no IF conditionals, unless target has fno-delete-null-pointer-checks  */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump \"if \" \"dom3\" { target { keeps_null_pointer_checks } } } } */\n \n /* { dg-final { cleanup-tree-dump \"dom3\" } } */"}, {"sha": "d20b1022f0b9fa7052223bb125f3978300e78e4d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20701.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -35,5 +35,7 @@ can_combine_p (rtx insn, rtx elt)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 1 \"vrp2\" } } */\n+/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 1 \"vrp2\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 0 \"vrp2\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "ce62fa3f0f930478bd2e3b493563e99776ec3107", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20702.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -25,5 +25,7 @@ foo (int *p, int b)\n   return a;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate\" 1 \"vrp1\"} } */\n+/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "2409608d9daf3a9eba803276fc5cfb70d4b8b043", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21086.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -15,6 +15,9 @@ foo (int *p)\n     return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate \" 1 \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-not \"b_. =\" \"vrp1\" } } */\n+/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate \" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate \" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-not \"b_. =\" \"vrp1\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"b_. =\" \"vrp1\" { target { avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "56fca97116ce04ba2c53bed6d38687b01305ddee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp02.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -19,6 +19,7 @@ foo (struct A *p, struct A *q)\n   if (p)\n     return x + p->b;\n }\n-\n-/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" } } */\n+/* Target with fno-delete-null-pointer-checks should not fold check */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "6584919b560ed285fc26f2f24e2c82bff1851478", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -29,8 +29,11 @@ foo (int i, int *p)\n \n   return i;\n }\n-\n+/* Target with fno-delete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 1 \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"PREDICATE: p_\\[0-9\\]\" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n+\n+/* { dg-final { scan-tree-dump-times \"PREDICATE: p_\\[0-9\\]\" 2 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"PREDICATE: p_\\[0-9\\]\" 1 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "193199fbf70387cc954e5be839cd5b8dbe820567", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp08.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -17,7 +17,8 @@ foo (int a, int *p)\n \n   return a;\n }\n-\n-/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"PREDICATE: p_.* ne_expr 0\" 1 \"vrp1\" } } */\n+/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"PREDICATE: p_.* ne_expr 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "223ee16d9ee9fba15c8ed2c5ea0a7c2d5595977d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0dc07d8a0be745c0366998c0164d7e0df4a1bc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ad0dc07d8a0be745c0366998c0164d7e0df4a1bc", "patch": "@@ -398,6 +398,20 @@ proc check_effective_target_trampolines { } {\n     return 1\n }\n \n+# Return 1 if according to target_info struct and explicit target list\n+# target is supposed to keep null pointer checks. This could be due to \n+# use of option fno-delete-null-pointer-checks or hardwired in target.\n+ \n+proc check_effective_target_keeps_null_pointer_checks { } {\n+    if [target_info exists keeps_null_pointer_checks] {\n+      return 1\n+    }\n+    if { [istarget avr-*-*] } {\n+\treturn 1;   \n+    }\n+    return 0\n+}\n+\n # Return true if profiling is supported on the target.\n \n proc check_profiling_available { test_what } {"}]}