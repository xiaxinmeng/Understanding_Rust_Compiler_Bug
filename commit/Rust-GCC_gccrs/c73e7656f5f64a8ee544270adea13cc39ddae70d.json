{"sha": "c73e7656f5f64a8ee544270adea13cc39ddae70d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczZTc2NTZmNWY2NGE4ZWU1NDQyNzBhZGVhMTNjYzM5ZGRhZTcwZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-01-21T14:49:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-21T14:49:42Z"}, "message": "re PR tree-optimization/88934 (ICE: verify_gimple failed (Error: mismatching comparison operand types))\n\n2019-01-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88934\n\t* tree-vect-slp.c (vect_mask_constant_operand_p): Always look\n\tat the possibly non-constant operand.\n\t(vect_get_constant_vectors): Adjust.\n\n\t* gfortran.dg/pr88934.f90: New testcase.\n\nFrom-SVN: r268115", "tree": {"sha": "917500f89139b8b21732eae139244101adc42d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/917500f89139b8b21732eae139244101adc42d00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73e7656f5f64a8ee544270adea13cc39ddae70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73e7656f5f64a8ee544270adea13cc39ddae70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73e7656f5f64a8ee544270adea13cc39ddae70d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73e7656f5f64a8ee544270adea13cc39ddae70d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c0d746f66cd349be052ca207e2397570f8aa314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0d746f66cd349be052ca207e2397570f8aa314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0d746f66cd349be052ca207e2397570f8aa314"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "f785a4a9d179b2e6f29f282f02cfa3e933462d9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c73e7656f5f64a8ee544270adea13cc39ddae70d", "patch": "@@ -1,3 +1,10 @@\n+2019-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88934\n+\t* tree-vect-slp.c (vect_mask_constant_operand_p): Always look\n+\tat the possibly non-constant operand.\n+\t(vect_get_constant_vectors): Adjust.\n+\n 2019-01-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/71659"}, {"sha": "3518747ee7b41612c2ef2a92d4c2ad53003abdc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c73e7656f5f64a8ee544270adea13cc39ddae70d", "patch": "@@ -1,3 +1,8 @@\n+2019-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88934\n+\t* gfortran.dg/pr88934.f90: New testcase.\n+\n 2019-01-20  Ulrich Drepper  <drepper@redhat.com>\n \n \tFix after C++ P0600 implementation."}, {"sha": "7c76911b01635552aeffe5604f1ca98ffdfb1de1", "filename": "gcc/testsuite/gfortran.dg/pr88934.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88934.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88934.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88934.f90?ref=c73e7656f5f64a8ee544270adea13cc39ddae70d", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-O -ftree-vectorize\" }\n+! { dg-additional-options \"-mvsx\" { target powerpc*-*-* } }\n+integer, parameter :: a=3\n+  integer , dimension(a,a) :: b\n+  logical, dimension(a,a) :: c\n+  do i=0,1\n+     b = ltoi(c)\n+     do j=0,if\n+        if (anymatmul(b) /= 0) then\n+        end if\n+     end do\n+  end do\n+contains\n+  elemental function ltoi(d)\n+    logical, intent(in) :: d\n+    if (d) then\n+       ltoi = 1\n+    else\n+       ltoi = 0\n+    end if\n+  end\n+end"}, {"sha": "40db1a208f114c22964dfb4ebfd27c03cecfbcaa", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e7656f5f64a8ee544270adea13cc39ddae70d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c73e7656f5f64a8ee544270adea13cc39ddae70d", "patch": "@@ -3109,25 +3109,21 @@ vect_slp_bb (basic_block bb)\n }\n \n \n-/* Return 1 if vector type of boolean constant which is OPNUM\n-   operand in statement STMT_VINFO is a boolean vector.  */\n+/* Return 1 if vector type STMT_VINFO is a boolean vector.  */\n \n static bool\n-vect_mask_constant_operand_p (stmt_vec_info stmt_vinfo, int opnum)\n+vect_mask_constant_operand_p (stmt_vec_info stmt_vinfo)\n {\n   enum tree_code code = gimple_expr_code (stmt_vinfo->stmt);\n   tree op, vectype;\n   enum vect_def_type dt;\n \n   /* For comparison and COND_EXPR type is chosen depending\n-     on the other comparison operand.  */\n+     on the non-constant other comparison operand.  */\n   if (TREE_CODE_CLASS (code) == tcc_comparison)\n     {\n       gassign *stmt = as_a <gassign *> (stmt_vinfo->stmt);\n-      if (opnum)\n-\top = gimple_assign_rhs1 (stmt);\n-      else\n-\top = gimple_assign_rhs2 (stmt);\n+      op = gimple_assign_rhs1 (stmt);\n \n       if (!vect_is_simple_use (op, stmt_vinfo->vinfo, &dt, &vectype))\n \tgcc_unreachable ();\n@@ -3142,8 +3138,6 @@ vect_mask_constant_operand_p (stmt_vec_info stmt_vinfo, int opnum)\n \n       if (TREE_CODE (cond) == SSA_NAME)\n \top = cond;\n-      else if (opnum)\n-\top = TREE_OPERAND (cond, 1);\n       else\n \top = TREE_OPERAND (cond, 0);\n \n@@ -3302,7 +3296,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \n   /* Check if vector type is a boolean vector.  */\n   if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n-      && vect_mask_constant_operand_p (stmt_vinfo, op_num))\n+      && vect_mask_constant_operand_p (stmt_vinfo))\n     vector_type\n       = build_same_sized_truth_vector_type (STMT_VINFO_VECTYPE (stmt_vinfo));\n   else"}]}