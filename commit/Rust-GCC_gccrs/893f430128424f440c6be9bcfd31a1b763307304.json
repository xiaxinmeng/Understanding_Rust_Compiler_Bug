{"sha": "893f430128424f440c6be9bcfd31a1b763307304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkzZjQzMDEyODQyNGY0NDBjNmJlOWJjZmQzMWExYjc2MzMwNzMwNA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2012-02-08T21:35:19Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2012-02-08T21:35:19Z"}, "message": "prep_cif.c (ffi_prep_cif): Allow for X86_WIN32 also FFI_THISCALL.\n\n        * src/prep_cif.c (ffi_prep_cif): Allow for X86_WIN32\n        also FFI_THISCALL.\n        * src/x86/ffi.c (ffi_closure_THISCALL): Add prototype.\n        (FFI_INIT_TRAMPOLINE_THISCALL): New trampoline code.\n        (ffi_prep_closure_loc): Add FFI_THISCALL support.\n        * src/x86/ffitarget.h (FFI_TRAMPOLINE_SIZE): Adjust size.\n        * src/x86/win32.S (ffi_closure_THISCALL): New closure code\n        for thiscall-calling convention.\n        * testsuite/libffi.call/closure_thiscall.c: New test.\n\nFrom-SVN: r184021", "tree": {"sha": "04eccef5248b2631ad4b9a46a6f2bc4f49b8cd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04eccef5248b2631ad4b9a46a6f2bc4f49b8cd64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/893f430128424f440c6be9bcfd31a1b763307304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893f430128424f440c6be9bcfd31a1b763307304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893f430128424f440c6be9bcfd31a1b763307304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893f430128424f440c6be9bcfd31a1b763307304/comments", "author": null, "committer": null, "parents": [{"sha": "ca1a91d62595d43ef50c23000caf2fbd21cda30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1a91d62595d43ef50c23000caf2fbd21cda30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1a91d62595d43ef50c23000caf2fbd21cda30b"}], "stats": {"total": 144, "additions": 143, "deletions": 1}, "files": [{"sha": "47d31fa73c1f942287ba2fb1c41d270b1574296f", "filename": "libffi/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893f430128424f440c6be9bcfd31a1b763307304/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893f430128424f440c6be9bcfd31a1b763307304/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=893f430128424f440c6be9bcfd31a1b763307304", "patch": "@@ -1,3 +1,15 @@\n+2012-02-08  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* src/prep_cif.c (ffi_prep_cif): Allow for X86_WIN32\n+\talso FFI_THISCALL.\n+\t* src/x86/ffi.c (ffi_closure_THISCALL): Add prototype.\n+\t(FFI_INIT_TRAMPOLINE_THISCALL): New trampoline code.\n+\t(ffi_prep_closure_loc): Add FFI_THISCALL support.\n+\t* src/x86/ffitarget.h (FFI_TRAMPOLINE_SIZE): Adjust size.\n+\t* src/x86/win32.S (ffi_closure_THISCALL): New closure code\n+\tfor thiscall-calling convention.\n+\t* testsuite/libffi.call/closure_thiscall.c: New test.\n+\n 2012-01-28  Kai Tietz  <ktietz@redhat.com>\n \n \t* src/libffi/src/x86/ffi.c (ffi_call_win32): Add new"}, {"sha": "e0a0c68cac55a19eaa546c4ef71def9f950c5566", "filename": "libffi/src/prep_cif.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fprep_cif.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fprep_cif.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fprep_cif.c?ref=893f430128424f440c6be9bcfd31a1b763307304", "patch": "@@ -93,7 +93,12 @@ ffi_status ffi_prep_cif(ffi_cif *cif, ffi_abi abi, unsigned int nargs,\n   ffi_type **ptr;\n \n   FFI_ASSERT(cif != NULL);\n+#ifndef X86_WIN32\n   FFI_ASSERT((abi > FFI_FIRST_ABI) && (abi <= FFI_DEFAULT_ABI));\n+#else\n+  FFI_ASSERT(abi > FFI_FIRST_ABI && abi <= FFI_DEFAULT_ABI\n+\t     || abi == FFI_THISCALL);\n+#endif\n \n   cif->abi = abi;\n   cif->arg_types = atypes;"}, {"sha": "7c01c57c4db81f3682aec2915b6905ef10fc964d", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=893f430128424f440c6be9bcfd31a1b763307304", "patch": "@@ -449,6 +449,8 @@ void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)\n #ifdef X86_WIN32\n void FFI_HIDDEN ffi_closure_STDCALL (ffi_closure *)\n      __attribute__ ((regparm(1)));\n+void FFI_HIDDEN ffi_closure_THISCALL (ffi_closure *)\n+     __attribute__ ((regparm(1)));\n #endif\n #ifdef X86_WIN64\n void FFI_HIDDEN ffi_closure_win64 (ffi_closure *);\n@@ -608,6 +610,33 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue, void **avalue,\n    *(unsigned int*)  &__tramp[6] = __dis; /* jmp __fun  */ \\\n  }\n \n+#define FFI_INIT_TRAMPOLINE_THISCALL(TRAMP,FUN,CTX,SIZE) \\\n+{ unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n+   unsigned int  __fun = (unsigned int)(FUN); \\\n+   unsigned int  __ctx = (unsigned int)(CTX); \\\n+   unsigned int  __dis = __fun - (__ctx + 22);  \\\n+   unsigned short __size = (unsigned short)(SIZE); \\\n+   *(unsigned int *) &__tramp[0] = 0x8324048b;\t/* mov (%esp), %eax */ \\\n+   *(unsigned int *) &__tramp[4] = 0x4c890cec;\t/* sub $12, %esp */ \\\n+   *(unsigned int *) &__tramp[8] = 0x04890424;\t/* mov %ecx, 4(%esp) */ \\\n+   *(unsigned char*) &__tramp[12] = 0x24;\t/* mov %eax, (%esp) */ \\\n+   *(unsigned char*) &__tramp[13] = 0xb8; \\\n+   *(unsigned int *) &__tramp[14] = __size;\t/* mov __size, %eax */ \\\n+   *(unsigned int *) &__tramp[18] = 0x08244c8d;\t/* lea 8(%esp), %ecx */ \\\n+   *(unsigned int *) &__tramp[22] = 0x4802e8c1; /* shr $2, %eax ; dec %eax */ \\\n+   *(unsigned short*) &__tramp[26] = 0x0b74;\t/* jz 1f */ \\\n+   *(unsigned int *) &__tramp[28] = 0x8908518b;\t/* 2b: mov 8(%ecx), %edx */ \\\n+   *(unsigned int *) &__tramp[32] = 0x04c18311; /* mov %edx, (%ecx) ; add $4, %ecx */ \\\n+   *(unsigned char*) &__tramp[36] = 0x48;\t/* dec %eax */ \\\n+   *(unsigned short*) &__tramp[37] = 0xf575;\t/* jnz 2b ; 1f: */ \\\n+   *(unsigned char*) &__tramp[39] = 0xb8; \\\n+   *(unsigned int*)  &__tramp[40] = __ctx; /* movl __ctx, %eax */ \\\n+   *(unsigned char *)  &__tramp[44] = 0xe8; \\\n+   *(unsigned int*)  &__tramp[45] = __dis; /* call __fun  */ \\\n+   *(unsigned char*)  &__tramp[49] = 0xc2; /* ret  */ \\\n+   *(unsigned short*)  &__tramp[50] = (__size + 8); /* ret (__size + 8)  */ \\\n+ }\n+\n #define FFI_INIT_TRAMPOLINE_STDCALL(TRAMP,FUN,CTX,SIZE)  \\\n { unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n    unsigned int  __fun = (unsigned int)(FUN); \\\n@@ -650,6 +679,13 @@ ffi_prep_closure_loc (ffi_closure* closure,\n                            (void*)codeloc);\n     }\n #ifdef X86_WIN32\n+  else if (cif->abi == FFI_THISCALL)\n+    {\n+      FFI_INIT_TRAMPOLINE_THISCALL (&closure->tramp[0],\n+\t\t\t\t    &ffi_closure_THISCALL,\n+\t\t\t\t    (void*)codeloc,\n+\t\t\t\t    cif->bytes);\n+    }\n   else if (cif->abi == FFI_STDCALL)\n     {\n       FFI_INIT_TRAMPOLINE_STDCALL (&closure->tramp[0],"}, {"sha": "dfecd1b3c6e713d47b5fd042830f55bc5cef9718", "filename": "libffi/src/x86/ffitarget.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fx86%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fx86%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffitarget.h?ref=893f430128424f440c6be9bcfd31a1b763307304", "patch": "@@ -103,7 +103,7 @@ typedef enum ffi_abi {\n #define FFI_NATIVE_RAW_API 0\n #else\n #ifdef X86_WIN32\n-#define FFI_TRAMPOLINE_SIZE 13\n+#define FFI_TRAMPOLINE_SIZE 52\n #else\n #ifdef X86_WIN64\n #define FFI_TRAMPOLINE_SIZE 29"}, {"sha": "e5c93ecf7b95002070aa3dafd79adac9ef0e08b4", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=893f430128424f440c6be9bcfd31a1b763307304", "patch": "@@ -170,13 +170,24 @@ ca_epilogue:\n         ret\n ffi_call_win32 ENDP\n \n+ffi_closure_THISCALL PROC NEAR FORCEFRAME\n+\tpush\tebp\n+\tmov\tebp, esp\n+\tsub\tesp, 40\n+\tlea\tedx, [ebp -24]\n+\tmov\t[ebp - 12], edx\t/* resp */\n+\tlea\tedx, [ebp + 12]  /* account for stub return address on stack */\n+\tjmp\tstub\n+ffi_closure_THISCALL ENDP\n+\n ffi_closure_SYSV PROC NEAR FORCEFRAME\n     ;; the ffi_closure ctx is passed in eax by the trampoline.\n \n         sub  esp, 40\n         lea  edx, [ebp - 24]\n         mov  [ebp - 12], edx         ;; resp\n         lea  edx, [ebp + 8]\n+stub:\n         mov  [esp + 8], edx          ;; args\n         lea  edx, [ebp - 12]\n         mov  [esp + 4], edx          ;; &resp\n@@ -573,6 +584,19 @@ _ffi_call_win32:\n         popl %ebp\n         ret\n .ffi_call_win32_end:\n+        .balign 16\n+\t.globl\t_ffi_closure_THISCALL\n+#ifndef __OS2__\n+\t.def\t_ffi_closure_THISCALL;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n+_ffi_closure_THISCALL:\n+\tpushl\t%ebp\n+\tmovl\t%esp, %ebp\n+\tsubl\t$40, %esp\n+\tleal\t-24(%ebp), %edx\n+\tmovl\t%edx, -12(%ebp)\t/* resp */\n+\tleal\t12(%ebp), %edx  /* account for stub return address on stack */\n+\tjmp\t.stub\n .LFE1:\n \n         # This assumes we are using gas.\n@@ -591,6 +615,7 @@ _ffi_closure_SYSV:\n \tleal\t-24(%ebp), %edx\n \tmovl\t%edx, -12(%ebp)\t/* resp */\n \tleal\t8(%ebp), %edx\n+.stub:\n \tmovl\t%edx, 4(%esp)\t/* args = __builtin_dwarf_cfa () */\n \tleal\t-12(%ebp), %edx\n \tmovl\t%edx, (%esp)\t/* &resp */"}, {"sha": "6c46f353728acdd355e6eac0ba5d9cf8e3638770", "filename": "libffi/testsuite/libffi.call/closure_thiscall.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_thiscall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893f430128424f440c6be9bcfd31a1b763307304/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_thiscall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_thiscall.c?ref=893f430128424f440c6be9bcfd31a1b763307304", "patch": "@@ -0,0 +1,64 @@\n+/* Area:\tclosure_call (thiscall convention)\n+   Purpose:\tCheck handling when caller expects thiscall callee\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<ktietz@redhat.com> */\n+\n+/* { dg-do run { target i?86-*-cygwin* i?86-*-mingw* } } */\n+#include \"ffitest.h\"\n+\n+static void\n+closure_test_thiscall(ffi_cif* cif __UNUSED__, void* resp, void** args,\n+\t\t      void* userdata)\n+{\n+  *(ffi_arg*)resp =\n+    (int)*(int *)args[0] + (int)(*(int *)args[1])\n+    + (int)(*(int *)args[2])  + (int)(*(int *)args[3])\n+    + (int)(intptr_t)userdata;\n+\n+  printf(\"%d %d %d %d: %d\\n\",\n+\t (int)*(int *)args[0], (int)(*(int *)args[1]),\n+\t (int)(*(int *)args[2]), (int)(*(int *)args[3]),\n+         (int)*(ffi_arg *)resp);\n+\n+}\n+\n+typedef int (__thiscall *closure_test_type0)(int, int, int, int);\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+  void *code;\n+  ffi_closure *pcl = ffi_closure_alloc(sizeof(ffi_closure), &code);\n+  ffi_type * cl_arg_types[17];\n+  int res;\n+  void* sp_pre;\n+  void* sp_post;\n+  char buf[1024];\n+\n+  cl_arg_types[0] = &ffi_type_uint;\n+  cl_arg_types[1] = &ffi_type_uint;\n+  cl_arg_types[2] = &ffi_type_uint;\n+  cl_arg_types[3] = &ffi_type_uint;\n+  cl_arg_types[4] = NULL;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_THISCALL, 4,\n+\t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n+\n+  CHECK(ffi_prep_closure_loc(pcl, &cif, closure_test_thiscall,\n+                             (void *) 3 /* userdata */, code) == FFI_OK);\n+\n+  asm volatile (\" movl %%esp,%0\" : \"=g\" (sp_pre));\n+  res = (*(closure_test_type0)code)(0, 1, 2, 3);\n+  asm volatile (\" movl %%esp,%0\" : \"=g\" (sp_post));\n+  /* { dg-output \"0 1 2 3: 9\" } */\n+\n+  printf(\"res: %d\\n\",res);\n+  /* { dg-output \"\\nres: 9\" } */\n+\n+  sprintf(buf, \"mismatch: pre=%p vs post=%p\", sp_pre, sp_post);\n+  printf(\"stack pointer %s\\n\", (sp_pre == sp_post ? \"match\" : buf));\n+  /* { dg-output \"\\nstack pointer match\" } */\n+  exit(0);\n+}"}]}