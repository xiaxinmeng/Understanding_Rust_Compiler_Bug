{"sha": "2fb3112712b5d20cc7a36a18acc69373cc2ef94d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiMzExMjcxMmI1ZDIwY2M3YTM2YTE4YWNjNjkzNzNjYzJlZjk0ZA==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-04-09T23:12:37Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-04-09T23:12:37Z"}, "message": "Add support for protocols, classes, and strings.\n\nAdd support for protocols, classes, and\n\tstrings.  Update the runtime targets for the new GNU runtimes as\n\twell as existing NeXT runtimes.\n\nFrom-SVN: r4069", "tree": {"sha": "a2457aeb9ad5f9137ca7daecd4c54841b9c621de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2457aeb9ad5f9137ca7daecd4c54841b9c621de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fb3112712b5d20cc7a36a18acc69373cc2ef94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb3112712b5d20cc7a36a18acc69373cc2ef94d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb3112712b5d20cc7a36a18acc69373cc2ef94d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb3112712b5d20cc7a36a18acc69373cc2ef94d/comments", "author": null, "committer": null, "parents": [{"sha": "e31c7eec7764fb8038a6ff0dcb1d5e20a9329b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e31c7eec7764fb8038a6ff0dcb1d5e20a9329b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e31c7eec7764fb8038a6ff0dcb1d5e20a9329b91"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "874c0a1e1baeda6fd443f82c7db884c58bfd1c3f", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 63, "deletions": 49, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb3112712b5d20cc7a36a18acc69373cc2ef94d/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb3112712b5d20cc7a36a18acc69373cc2ef94d/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=2fb3112712b5d20cc7a36a18acc69373cc2ef94d", "patch": "@@ -20,53 +20,54 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /*** Public Interface (procedures) ***/\n \n-/* used by compile_file */\n-\n-void init_objc (), finish_objc ();\n-\n /* used by yyparse */\n \n-tree start_class ();\n-tree continue_class ();\n-void finish_class ();\n-void start_method_def ();\n-void continue_method_def ();\n-void finish_method_def ();\n-void add_objc_decls ();\n-\n-tree is_ivar ();\n-int  is_public ();\n-tree add_instance_variable ();\n-tree add_class_method ();\n-tree add_instance_method ();\n-tree get_super_receiver ();\n-tree get_class_ivars ();\n-tree get_class_reference ();\n-tree get_static_reference ();\n-\n-tree build_message_expr ();\n-tree build_selector_expr ();\n-tree build_ivar_reference ();\n-tree build_keyword_decl ();\n-tree build_method_decl ();\n-\n-/* Nonzero enables objc features.  */\n-\n-extern int doing_objc_thang;\n+void objc_finish\t\t\t\tPROTO((void));\n+tree start_class\t\t\t\tPROTO((enum tree_code, tree, tree, tree));\n+tree continue_class\t\t\t\tPROTO((tree));\n+void finish_class\t\t\t\tPROTO((tree));\n+void start_method_def\t\t\t\tPROTO((tree));\n+void continue_method_def\t\t\tPROTO((void));\n+void finish_method_def\t\t\t\tPROTO((void));\n+tree start_protocol\t\t\t\tPROTO((enum tree_code, tree, tree));\n+void finish_protocol\t\t\t\tPROTO((tree));\n+void add_objc_decls\t\t\t\tPROTO((void));\n+\n+tree is_ivar\t\t\t\t\tPROTO((tree, tree));\n+int is_private\t\t\t\t\tPROTO((tree));\n+int is_public\t\t\t\t\tPROTO((tree, tree));\n+tree add_instance_variable\t\t\tPROTO((tree, int, tree, tree, tree));\n+tree add_class_method\t\t\t\tPROTO((tree, tree));\n+tree add_instance_method\t\t\tPROTO((tree, tree));\n+tree get_super_receiver\t\t\t\tPROTO((void));\n+tree get_class_ivars\t\t\t\tPROTO((tree));\n+tree get_class_reference\t\t\tPROTO((tree));\n+tree get_static_reference\t\t\tPROTO((tree, tree));\n+tree get_object_reference\t\t\tPROTO((tree));\n+tree build_message_expr\t\t\t\tPROTO((tree));\n+tree build_selector_expr\t\t\tPROTO((tree));\n+tree build_ivar_reference\t\t\tPROTO((tree));\n+tree build_keyword_decl\t\t\t\tPROTO((tree, tree, tree));\n+tree build_method_decl\t\t\t\tPROTO((enum tree_code, tree, tree, tree));\n+tree build_protocol_expr\t\t\tPROTO((tree));\n+tree build_objc_string_object\t\t\tPROTO((tree));\n+\n+extern tree objc_ivar_chain;\n+extern tree objc_method_context;\n+\n+void objc_declare_alias\t\t\t\tPROTO((tree, tree));\n+void objc_declare_class\t\t\t\tPROTO((tree));\n+\n+extern int objc_receiver_context;\n \n /* the following routines are used to implement statically typed objects */\n \n-tree lookup_interface ();\n-int  objc_comptypes ();\n-void objc_check_decl ();\n+int objc_comptypes\t\t\t\tPROTO((tree, tree, int));\n+void objc_check_decl\t\t\t\tPROTO((tree));\n \n /* NeXT extensions */\n \n-tree build_encode_expr ();\n-\n-/* used by rest_of_compilation.  */\n-\n-void genPrototype ();\n+tree build_encode_expr\t\t\t\tPROTO((tree));\n \n /* Objective-C structures */\n \n@@ -81,21 +82,34 @@ void genPrototype ();\n #define METHOD_DEFINITION(DECL) ((DECL)->decl.initial)\n #define METHOD_ENCODING(DECL) ((DECL)->decl.context)\n \n-/* INTERFACE_TYPE, IMPLEMENTATION_TYPE, CATEGORY_TYPE */\n+/* CLASS_INTERFACE_TYPE, CLASS_IMPLEMENTATION_TYPE,\n+   CATEGORY_INTERFACE_TYPE, CATEGORY_IMPLEMENTATION_TYPE,\n+   PROTOCOL_INTERFACE_TYPE */\n #define CLASS_NAME(CLASS) ((CLASS)->type.name)\n-#define CLASS_SUPER_NAME(CLASS) ((CLASS)->type.binfo)\n-#define CLASS_IVARS(CLASS) ((CLASS)->type.maxval)\n-#define CLASS_RAW_IVARS(CLASS) ((CLASS)->type.noncopied_parts)\n-#define CLASS_NST_METHODS(CLASS) ((CLASS)->type.next_variant)\n-#define CLASS_CLS_METHODS(CLASS) ((CLASS)->type.main_variant)\n-#define CLASS_STATIC_TEMPLATE(CLASS) ((CLASS)->type.context)\n-#define CLASS_CATEGORY_LIST(CLASS) ((CLASS)->type.minval)\n-\n-/* Define the Objective-C language-specific tree codes.  */\n+#define CLASS_SUPER_NAME(CLASS) ((CLASS)->type.context)\n+#define CLASS_IVARS(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 0)\n+#define CLASS_RAW_IVARS(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 1)\n+#define CLASS_NST_METHODS(CLASS) ((CLASS)->type.minval)\n+#define CLASS_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n+#define CLASS_STATIC_TEMPLATE(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 2)\n+#define CLASS_CATEGORY_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 3)\n+#define CLASS_PROTOCOL_LIST(CLASS) ((CLASS)->type.noncopied_parts)\n+#define PROTOCOL_NAME(CLASS) ((CLASS)->type.name)\n+#define PROTOCOL_LIST(CLASS) ((CLASS)->type.binfo)\n+#define PROTOCOL_NST_METHODS(CLASS) ((CLASS)->type.minval)\n+#define PROTOCOL_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n+#define PROTOCOL_FORWARD_DECL(CLASS) ((CLASS)->type.context)\n+#define TYPE_PROTOCOL_LIST(TYPE) ((TYPE)->type.noncopied_parts)\n+\n+/* Define the Objective-C or Objective-C++ language-specific tree codes.  */\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n enum objc_tree_code {\n+#ifdef OBJCPLUS\n+  dummy_tree_code = LAST_CPLUS_TREE_CODE,\n+#else\n   dummy_tree_code = LAST_AND_UNUSED_TREE_CODE,\n+#endif\n #include \"objc-tree.def\"\n   LAST_OBJC_TREE_CODE\n };"}]}