{"sha": "159520acf76cf7159e171370e06c7a6dd51d594d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5NTIwYWNmNzZjZjcxNTllMTcxMzcwZTA2YzdhNmRkNTFkNTk0ZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-11T20:29:11Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-11T20:29:11Z"}, "message": "re PR middle-end/55263 (ICE: pre_and_rev_post_order_compute, at cfganal.c:875 with -O -fgcse-after-reload -fnon-call-exceptions)\n\ngcc/\n\tPR middle-end/55263\n\t* postreload.c (rest_of_handle_postreload): With non-call exceptions,\n\tif edges are purged call cleanup_cfg to remove unreachable blocks.\n\ntestsuite/\n\tPR middle-end/55263\n\t* g++.dg/pr55263.C: New test.\n\nFrom-SVN: r193412", "tree": {"sha": "543961f5fa17d2845bed07701ce91e092266962c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543961f5fa17d2845bed07701ce91e092266962c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/159520acf76cf7159e171370e06c7a6dd51d594d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159520acf76cf7159e171370e06c7a6dd51d594d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159520acf76cf7159e171370e06c7a6dd51d594d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159520acf76cf7159e171370e06c7a6dd51d594d/comments", "author": null, "committer": null, "parents": [{"sha": "18abab9fee744f3e47654b4e7efbaeb6bfbf9574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18abab9fee744f3e47654b4e7efbaeb6bfbf9574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18abab9fee744f3e47654b4e7efbaeb6bfbf9574"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "51b4ed6ae3978645261ba4234aeb7987f6858377", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=159520acf76cf7159e171370e06c7a6dd51d594d", "patch": "@@ -1,3 +1,9 @@\n+2012-11-11  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR middle-end/55263\n+\t* postreload.c (rest_of_handle_postreload): With non-call exceptions,\n+\tif edges are purged call cleanup_cfg to remove unreachable blocks.\n+\n 2012-11-11  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi: Copy-edit to use \"built-in function\" instead"}, {"sha": "32c5b5f207300d55613948d93fbfc6960edd435b", "filename": "gcc/postreload.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=159520acf76cf7159e171370e06c7a6dd51d594d", "patch": "@@ -2289,8 +2289,9 @@ rest_of_handle_postreload (void)\n   reload_cse_regs (get_insns ());\n   /* Reload_cse_regs can eliminate potentially-trapping MEMs.\n      Remove any EH edges associated with them.  */\n-  if (cfun->can_throw_non_call_exceptions)\n-    purge_all_dead_edges ();\n+  if (cfun->can_throw_non_call_exceptions\n+      && purge_all_dead_edges ())\n+    cleanup_cfg (0);\n \n   return 0;\n }"}, {"sha": "deaf75c03a1379cdaf69a1db32b052003b1e3da1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=159520acf76cf7159e171370e06c7a6dd51d594d", "patch": "@@ -1,3 +1,8 @@\n+2012-11-11  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR middle-end/55263\n+\t* g++.dg/pr55263.C: New test.\n+\n 2012-11-11  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55238"}, {"sha": "5ea863f1ae7a4de6439c87cbfd24d6539ed541ce", "filename": "gcc/testsuite/g++.dg/pr55263.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55263.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159520acf76cf7159e171370e06c7a6dd51d594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55263.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55263.C?ref=159520acf76cf7159e171370e06c7a6dd51d594d", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-c -O -fgcse-after-reload -fnon-call-exceptions\" } */\n+template < typename _Tp > class new_allocator\n+{\n+public:\n+  typedef _Tp pointer;\n+  template < typename _Tp1 > struct rebind\n+  {\n+    typedef new_allocator < _Tp1 > other;\n+  };\n+\n+};\n+\n+template < typename > class allocator;\n+\n+template < typename _Alloc > struct __alloc_traits\n+{\n+  typedef typename _Alloc::pointer pointer;\n+    template < typename _Tp > struct rebind\n+  {\n+    typedef typename _Alloc::template rebind < _Tp >::other other;\n+  };\n+\n+};\n+\n+template < typename _Tp, typename _Alloc > struct _Vector_base\n+{\n+  typedef\n+    typename\n+    __alloc_traits < _Alloc >::template rebind < _Tp >::other _Tp_alloc_type;\n+  typedef typename __alloc_traits < _Tp_alloc_type >::pointer pointer;\n+  struct _Vector_impl\n+  {\n+    pointer _M_start;\n+    pointer _M_end_of_storage;\n+  };\n+\n+   ~_Vector_base ();\n+  _Vector_impl _M_impl;\n+};\n+\n+template < typename _Tp, typename _Alloc = allocator < _Tp > >class vector:\n+_Vector_base < _Tp, _Alloc >\n+{\n+  typedef _Vector_base < _Tp, _Alloc > _Base;\n+public:\n+  typedef typename _Base::pointer pointer;\n+vector ():\n+  _Base ()\n+  {\n+    _M_erase_at_end (this->_M_impl._M_start);\n+  }\n+  void _M_erase_at_end (pointer)\n+  {\n+  }\n+};\n+\n+template < typename T > class clear_alloc:\n+public new_allocator < T >\n+{\n+};\n+\n+void\n+foo ()\n+{\n+  new vector < int, clear_alloc < int > >;\n+}\n+"}]}