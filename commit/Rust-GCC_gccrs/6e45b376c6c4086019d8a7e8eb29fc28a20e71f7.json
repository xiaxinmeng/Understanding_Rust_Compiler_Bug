{"sha": "6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0NWIzNzZjNmM0MDg2MDE5ZDhhN2U4ZWIyOWZjMjhhMjBlNzFmNw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-19T15:13:54Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-19T15:13:54Z"}, "message": "In gcc/testsuite/: 2010-12-19 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/gnu-api-2-objc.m: Fixed test to test objc_lookUpClass,\n\tnot objc_lookupClass.\n\t* obj-c++.dg/gnu-api-2-objc.mm: Same change.\n\t\nIn libobjc/:\n2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* class.c (objc_lookupClass): Renamed to objc_lookUpClass.\n\t* protocols.c: Updated all calls to objc_lookupClass to call\n\tobjc_lookUpClass instead.\n\t* sendmsg.c (objc_lookupClass): Do not declare.\n\t(get_imp): Update call to objc_lookupClass to call\n\tobjc_lookUpClass instead.\n\t* objc/runtime.h (objc_lookupClass): Renamed to objc_lookUpClass.\n\nFrom-SVN: r168059", "tree": {"sha": "289ab317f67587dd90b5d4486afe3791a6146b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/289ab317f67587dd90b5d4486afe3791a6146b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fea782052db609f2a1bdf35bccf7ceb74c711494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea782052db609f2a1bdf35bccf7ceb74c711494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea782052db609f2a1bdf35bccf7ceb74c711494"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "762d86d8422937594c192ad605403a02b069bec0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -1,3 +1,9 @@\n+2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-objc.m: Fixed test to test objc_lookUpClass,\n+\tnot objc_lookupClass.\n+\t* obj-c++.dg/gnu-api-2-objc.mm: Same change.\n+\t\n 2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/gnu-api-2-objc_msg_lookup.m: New."}, {"sha": "4761278c955cdeb6e030728948481629edeb76c6", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-objc.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -204,9 +204,9 @@ int main ()\n       abort ();\n   }\n \n-  std::cout << \"Testing objc_lookupClass ()...\\n\";\n+  std::cout << \"Testing objc_lookUpClass ()...\\n\";\n   {\n-    if (std::strcmp (class_getName (objc_lookupClass (\"MyRootClass\")),\n+    if (std::strcmp (class_getName (objc_lookUpClass (\"MyRootClass\")),\n \t\t\t\"MyRootClass\") != 0)\n       abort ();\n   }"}, {"sha": "c7f3946e596f66f8cf4891e4f30290e606439067", "filename": "gcc/testsuite/objc.dg/gnu-api-2-objc.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -204,9 +204,9 @@ int main(int argc, void **args)\n       abort ();\n   }\n \n-  printf (\"Testing objc_lookupClass ()...\\n\");\n+  printf (\"Testing objc_lookUpClass ()...\\n\");\n   {\n-    if (strcmp (class_getName (objc_lookupClass (\"MyRootClass\")),\n+    if (strcmp (class_getName (objc_lookUpClass (\"MyRootClass\")),\n \t\t\"MyRootClass\") != 0)\n       abort ();\n   }"}, {"sha": "7dc29b8f952b8634400bfb6a36e529954f5ea50a", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -1,3 +1,13 @@\n+2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* class.c (objc_lookupClass): Renamed to objc_lookUpClass.\n+\t* protocols.c: Updated all calls to objc_lookupClass to call\n+\tobjc_lookUpClass instead.\n+\t* sendmsg.c (objc_lookupClass): Do not declare.\n+\t(get_imp): Update call to objc_lookupClass to call\n+\tobjc_lookUpClass instead.\n+\t* objc/runtime.h (objc_lookupClass): Renamed to objc_lookUpClass.\n+\n 2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/runtime.h (class_ivar_set_gcinvisible): Declare."}, {"sha": "cf8e4c42728276d9135e841d9749f971d179d5fa", "filename": "libobjc/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -501,7 +501,7 @@ objc_getClass (const char *name)\n }\n \n Class\n-objc_lookupClass (const char *name)\n+objc_lookUpClass (const char *name)\n {\n   if (name == NULL)\n     return Nil;"}, {"sha": "758d2d07f012a5b000f4ed6cde7abc9293acdd4b", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -427,7 +427,7 @@ objc_EXPORT Class objc_getClass (const char *name);\n    the runtime.  Return Nil if not.  This function does not call the\n    objc_get_unknown_class_handler function if the class is not\n    found.  */\n-objc_EXPORT Class objc_lookupClass (const char *name);\n+objc_EXPORT Class objc_lookUpClass (const char *name);\n \n /* Return the meta class associated to the class with name 'name', if\n    it is already registered with the runtime.  First, it finds the"}, {"sha": "3ff6fbaa1cade3b4f08d9b2862ea11d5f6284799", "filename": "libobjc/protocols.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fprotocols.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fprotocols.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fprotocols.c?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -145,7 +145,7 @@ class_addProtocol (Class class_, Protocol *protocol)\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return NO;\n \n   objc_mutex_lock (__objc_runtime_mutex);\n@@ -174,7 +174,7 @@ class_conformsToProtocol (Class class_, Protocol *protocol)\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return NO;\n \n   /* Acquire the runtime lock because the list of protocols for a\n@@ -278,7 +278,7 @@ protocol_conformsToProtocol (Protocol *protocol, Protocol *anotherProtocol)\n   if (protocol->class_pointer != anotherProtocol->class_pointer)\n     return NO;\n   \n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return NO;\n \n   if (strcmp (((struct objc_protocol *)protocol)->protocol_name,\n@@ -317,7 +317,7 @@ protocol_isEqual (Protocol *protocol, Protocol *anotherProtocol)\n   if (protocol->class_pointer != anotherProtocol->class_pointer)\n     return NO;\n   \n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return NO;\n \n   /* Equality between formal protocols is only formal (nothing to do\n@@ -346,7 +346,7 @@ protocol_getName (Protocol *protocol)\n {\n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return NULL;\n \n   return ((struct objc_protocol *)protocol)->protocol_name;\n@@ -368,7 +368,7 @@ struct objc_method_description protocol_getMethodDescription (Protocol *protocol\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return no_result;\n \n   if (instanceMethod)\n@@ -413,7 +413,7 @@ struct objc_method_description *protocol_copyMethodDescriptionList (Protocol *pr\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol == NULL  ||  protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol == NULL  ||  protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     {\n       if (numberOfReturnedMethods)\n \t*numberOfReturnedMethods = 0;\n@@ -464,7 +464,7 @@ Property protocol_getProperty (Protocol *protocol, const char *propertyName,\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     return NULL;\n \n   /* TODO: New ABI.  */\n@@ -479,7 +479,7 @@ Property *protocol_copyPropertyList (Protocol *protocol, unsigned int *numberOfR\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol == NULL  ||  protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol == NULL  ||  protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     {\n       if (numberOfReturnedProperties)\n \t*numberOfReturnedProperties = 0;\n@@ -506,7 +506,7 @@ Protocol **protocol_copyProtocolList (Protocol *protocol, unsigned int *numberOf\n \n   /* Check that it is a Protocol object before casting it to (struct\n      objc_protocol *).  */\n-  if (protocol == NULL  ||  protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n+  if (protocol == NULL  ||  protocol->class_pointer != objc_lookUpClass (\"Protocol\"))\n     {\n       if (numberOfReturnedProtocols)\n \t*numberOfReturnedProtocols = 0;"}, {"sha": "2fb716c2e78caec644f9435793b4bade3738a74f", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e45b376c6c4086019d8a7e8eb29fc28a20e71f7/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=6e45b376c6c4086019d8a7e8eb29fc28a20e71f7", "patch": "@@ -228,9 +228,6 @@ __objc_resolve_instance_method (Class class, SEL sel)\n   return NULL;\n }\n \n-/* Temporary definition until we include objc/runtime.h.  */\n-objc_EXPORT Class objc_lookupClass (const char *name);\n-\n /* Given a class and selector, return the selector's\n    implementation.  */\n inline\n@@ -292,7 +289,7 @@ get_imp (Class class, SEL sel)\n \t\t     need to obtain the class from the meta class,\n \t\t     which we do using the fact that both the class\n \t\t     and the meta-class have the same name.  */\n-\t\t  Class realClass = objc_lookupClass (class->name);\n+\t\t  Class realClass = objc_lookUpClass (class->name);\n \t\t  if (realClass)\n \t\t    res = __objc_resolve_class_method (realClass, sel);\n \t\t}"}]}