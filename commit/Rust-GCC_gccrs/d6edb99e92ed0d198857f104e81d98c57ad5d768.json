{"sha": "d6edb99e92ed0d198857f104e81d98c57ad5d768", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlZGI5OWU5MmVkMGQxOTg4NTdmMTA0ZTgxZDk4YzU3YWQ1ZDc2OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-02T01:51:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-02T01:51:02Z"}, "message": "xm-lynx.h, [...]: Do not define TRUE or FALSE.\n\n\t* config/xm-lynx.h, config/xm-std32.h, config/a29k/xm-a29k.h,\n\tconfig/a29k/xm-unix.h, config/alpha/xm-alpha.h,\n\tconfig/arc/xm-arc.h, config/arm/xm-arm.h, config/c4x/xm-c4x.h,\n\tconfig/clipper/xm-clix.h, config/convex/xm-convex.h,\n\tconfig/d30v/xm-d30v.h, config/dsp16xx/xm-dsp16xx.h,\n\tconfig/elxsi/xm-elxsi.h, config/fr30/xm-fr30.h,\n\tconfig/h8300/xm-h8300.h, config/i370/xm-i370.h,\n\tconfig/i370/xm-linux.h, config/i370/xm-mvs.h,\n\tconfig/i370/xm-oe.h, config/i386/xm-aix.h,\n\tconfig/i386/xm-i386.h, config/i386/xm-osf.h,\n\tconfig/i860/xm-i860.h, config/i960/xm-i960.h,\n\tconfig/ia64/xm-ia64.h, config/m32r/xm-m32r.h,\n\tconfig/m68k/xm-m68k.h, config/m88k/xm-m88k.h,\n\tconfig/mcore/xm-mcore.h, config/mips/xm-mips.h,\n\tconfig/mn10200/xm-mn10200.h, config/mn10300/xm-mn10300.h,\n\tconfig/ns32k/xm-ns32k.h, config/pa/xm-linux.h,\n\tconfig/pa/xm-pa.h, config/pa/xm-pa64hpux.h,\n\tconfig/pa/xm-pahpux.h, config/pa/xm-papro.h,\n\tconfig/pj/xm-pj.h, config/romp/xm-romp.h,\n\tconfig/rs6000/xm-beos.h, config/rs6000/xm-rs6000.h,\n\tconfig/rs6000/xm-sysv4.h, config/sh/xm-sh.h,\n\tconfig/sparc/xm-sparc.h, config/sparc/xm-sysv4.h,\n\tconfig/v850/xm-v850.h, config/vax/xm-vax.h,\n\tconfig/vax/xm-vms.h, config/we32k/xm-we32k.h:\n\tDo not define TRUE or FALSE.\n\n\t* config/i386/xm-aix.h, config/i386/xm-osf.h: Delete; made\n\tempty by above change.\n\t* config.gcc: Remove references to these files.\n\n\t* configure.in: Detect stdbool.h.\n\t* configure, config.in: Regenerate.\n\t* system.h: Include stddef.h here if available.  Set\n\tHAVE__BOOL based on GCC_VERSION and __STDC_VERSION__.  Then\n\tset up a sensible boolean type at the very end.\n\n\t* combine.c, cse.c, expr.c, fold-const.c, gensupport.c,\n\tf/com.c, config/mcore/mcore.c:\n\tRename variables named 'true' and/or 'false'.\n\n\t* hash.h: Delete 'boolean' typedef and related #undefs.\n\t* f/proj.h: Delete 'bool' type.  Don't include stddef.h here.\n\n\t* function.c, ggc-common.c, hash.h, hash.c, tlink.c, cp/decl.c,\n\tjava/class.c, java/decl.c, java/java-tree.h:\n\tReplace all uses of 'boolean' with 'bool'.\n\nFrom-SVN: r40176", "tree": {"sha": "b5e3688be247ecd147e1cdef28cb5a5f40a44b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e3688be247ecd147e1cdef28cb5a5f40a44b8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6edb99e92ed0d198857f104e81d98c57ad5d768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6edb99e92ed0d198857f104e81d98c57ad5d768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6edb99e92ed0d198857f104e81d98c57ad5d768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6edb99e92ed0d198857f104e81d98c57ad5d768/comments", "author": null, "committer": null, "parents": [{"sha": "9bb9ef28342c5995ea9460b31bca707de200506e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb9ef28342c5995ea9460b31bca707de200506e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb9ef28342c5995ea9460b31bca707de200506e"}], "stats": {"total": 799, "additions": 321, "deletions": 478}, "files": [{"sha": "7a7d1a932818902c69ee09dd223bbe2d142cc254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,3 +1,49 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* config/xm-lynx.h, config/xm-std32.h, config/a29k/xm-a29k.h,\n+\tconfig/a29k/xm-unix.h, config/alpha/xm-alpha.h,\n+\tconfig/arc/xm-arc.h, config/arm/xm-arm.h, config/c4x/xm-c4x.h,\n+\tconfig/clipper/xm-clix.h, config/convex/xm-convex.h,\n+\tconfig/d30v/xm-d30v.h, config/dsp16xx/xm-dsp16xx.h,\n+\tconfig/elxsi/xm-elxsi.h, config/fr30/xm-fr30.h,\n+\tconfig/h8300/xm-h8300.h, config/i370/xm-i370.h,\n+\tconfig/i370/xm-linux.h, config/i370/xm-mvs.h,\n+\tconfig/i370/xm-oe.h, config/i386/xm-aix.h,\n+\tconfig/i386/xm-i386.h, config/i386/xm-osf.h,\n+\tconfig/i860/xm-i860.h, config/i960/xm-i960.h,\n+\tconfig/ia64/xm-ia64.h, config/m32r/xm-m32r.h,\n+\tconfig/m68k/xm-m68k.h, config/m88k/xm-m88k.h,\n+\tconfig/mcore/xm-mcore.h, config/mips/xm-mips.h,\n+\tconfig/mn10200/xm-mn10200.h, config/mn10300/xm-mn10300.h,\n+\tconfig/ns32k/xm-ns32k.h, config/pa/xm-linux.h,\n+\tconfig/pa/xm-pa.h, config/pa/xm-pa64hpux.h,\n+\tconfig/pa/xm-pahpux.h, config/pa/xm-papro.h,\n+\tconfig/pj/xm-pj.h, config/romp/xm-romp.h,\n+\tconfig/rs6000/xm-beos.h, config/rs6000/xm-rs6000.h,\n+\tconfig/rs6000/xm-sysv4.h, config/sh/xm-sh.h,\n+\tconfig/sparc/xm-sparc.h, config/sparc/xm-sysv4.h,\n+\tconfig/v850/xm-v850.h, config/vax/xm-vax.h,\n+\tconfig/vax/xm-vms.h, config/we32k/xm-we32k.h:\n+\tDo not define TRUE or FALSE.\n+\n+\t* config/i386/xm-aix.h, config/i386/xm-osf.h: Delete; made\n+\tempty by above change.\n+\t* config.gcc: Remove references to these files.\n+\n+\t* configure.in: Detect stdbool.h.\n+\t* configure, config.in: Regenerate.\n+\t* system.h: Include stddef.h here if available.  \n+\tSet HAVE__BOOL based on GCC_VERSION and __STDC_VERSION__.\n+\tThen set up a sensible boolean type at the very end.\n+\n+\t* combine.c, cse.c, expr.c, fold-const.c, gensupport.c,\n+\tconfig/mcore/mcore.c: Rename variables named 'true' and/or 'false'.\n+\n+\t* hash.h: Delete 'boolean' typedef and related #undefs.\n+\n+\t* function.c, ggc-common.c, hash.h, hash.c, tlink.c: Replace\n+\tall uses of 'boolean' with 'bool'.\n+\n 2001-03-01  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* cpplib.c (_cpp_init_stacks): Cast enum for comparison.\n@@ -221,7 +267,7 @@ Tue Feb 27 16:01:13 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t\t\t      Fergus Henderson\n \n \t* md.texi (min, max): Document\n-\t\n+\n Tue Feb 27 15:51:35 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (movsf, movdf): Use movaps for reg-reg moves if\n@@ -239,7 +285,7 @@ Tue Feb 27 15:36:48 CET 2001  Jan Hubicka  <jh@suse.cz>\n 2001-02-26  Jason Eckhardt  <jle@redhat.com>\n \n \t* combine.c (known_cond): Do not reverse the condition when\n-\tSMAX/UMAX is being considered and the condition is for equality \n+\tSMAX/UMAX is being considered and the condition is for equality\n \tor inequality.\n \n \t* testsuite/gcc.c-torture/execute/20010221-1.c: New test."}, {"sha": "a3b96400f7abb3f2527ce493f0b341864e4f381f", "filename": "gcc/combine.c", "status": "modified", "additions": 92, "deletions": 85, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -3609,15 +3609,15 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t\t     && (GET_RTX_CLASS (GET_CODE (SUBREG_REG (XEXP (x, 0))))\n \t\t\t == 'o'))))))\n     {\n-      rtx cond, true, false;\n+      rtx cond, true_rtx, false_rtx;\n \n-      cond = if_then_else_cond (x, &true, &false);\n+      cond = if_then_else_cond (x, &true_rtx, &false_rtx);\n       if (cond != 0\n \t  /* If everything is a comparison, what we have is highly unlikely\n \t     to be simpler, so don't use it.  */\n \t  && ! (GET_RTX_CLASS (code) == '<'\n-\t\t&& (GET_RTX_CLASS (GET_CODE (true)) == '<'\n-\t\t    || GET_RTX_CLASS (GET_CODE (false)) == '<')))\n+\t\t&& (GET_RTX_CLASS (GET_CODE (true_rtx)) == '<'\n+\t\t    || GET_RTX_CLASS (GET_CODE (false_rtx)) == '<')))\n \t{\n \t  rtx cop1 = const0_rtx;\n \t  enum rtx_code cond_code = simplify_comparison (NE, &cond, &cop1);\n@@ -3627,43 +3627,43 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \n \t  /* Simplify the alternative arms; this may collapse the true and\n \t     false arms to store-flag values.  */\n-\t  true = subst (true, pc_rtx, pc_rtx, 0, 0);\n-\t  false = subst (false, pc_rtx, pc_rtx, 0, 0);\n+\t  true_rtx = subst (true_rtx, pc_rtx, pc_rtx, 0, 0);\n+\t  false_rtx = subst (false_rtx, pc_rtx, pc_rtx, 0, 0);\n \n-\t  /* If true and false are not general_operands, an if_then_else\n+\t  /* If true_rtx and false_rtx are not general_operands, an if_then_else\n \t     is unlikely to be simpler.  */\n-\t  if (general_operand (true, VOIDmode)\n-\t      && general_operand (false, VOIDmode))\n+\t  if (general_operand (true_rtx, VOIDmode)\n+\t      && general_operand (false_rtx, VOIDmode))\n \t    {\n \t      /* Restarting if we generate a store-flag expression will cause\n \t\t us to loop.  Just drop through in this case.  */\n \n \t      /* If the result values are STORE_FLAG_VALUE and zero, we can\n \t\t just make the comparison operation.  */\n-\t      if (true == const_true_rtx && false == const0_rtx)\n+\t      if (true_rtx == const_true_rtx && false_rtx == const0_rtx)\n \t\tx = gen_binary (cond_code, mode, cond, cop1);\n-\t      else if (true == const0_rtx && false == const_true_rtx)\n+\t      else if (true_rtx == const0_rtx && false_rtx == const_true_rtx)\n \t\tx = gen_binary (reverse_condition (cond_code),\n \t\t\t\tmode, cond, cop1);\n \n \t      /* Likewise, we can make the negate of a comparison operation\n \t\t if the result values are - STORE_FLAG_VALUE and zero.  */\n-\t      else if (GET_CODE (true) == CONST_INT\n-\t\t       && INTVAL (true) == - STORE_FLAG_VALUE\n-\t\t       && false == const0_rtx)\n+\t      else if (GET_CODE (true_rtx) == CONST_INT\n+\t\t       && INTVAL (true_rtx) == - STORE_FLAG_VALUE\n+\t\t       && false_rtx == const0_rtx)\n \t\tx = gen_unary (NEG, mode, mode,\n \t\t\t       gen_binary (cond_code, mode, cond, cop1));\n-\t      else if (GET_CODE (false) == CONST_INT\n-\t\t       && INTVAL (false) == - STORE_FLAG_VALUE\n-\t\t       && true == const0_rtx)\n+\t      else if (GET_CODE (false_rtx) == CONST_INT\n+\t\t       && INTVAL (false_rtx) == - STORE_FLAG_VALUE\n+\t\t       && true_rtx == const0_rtx)\n \t\tx = gen_unary (NEG, mode, mode,\n \t\t\t       gen_binary (reverse_condition (cond_code),\n \t\t\t\t\t   mode, cond, cop1));\n \t      else\n \t\treturn gen_rtx_IF_THEN_ELSE (mode,\n \t\t\t\t\t     gen_binary (cond_code, VOIDmode,\n \t\t\t\t\t\t\t cond, cop1),\n-\t\t\t\t\t     true, false);\n+\t\t\t\t\t     true_rtx, false_rtx);\n \n \t      code = GET_CODE (x);\n \t      op0_mode = VOIDmode;\n@@ -4649,8 +4649,8 @@ simplify_if_then_else (x)\n {\n   enum machine_mode mode = GET_MODE (x);\n   rtx cond = XEXP (x, 0);\n-  rtx true = XEXP (x, 1);\n-  rtx false = XEXP (x, 2);\n+  rtx true_rtx = XEXP (x, 1);\n+  rtx false_rtx = XEXP (x, 2);\n   enum rtx_code true_code = GET_CODE (cond);\n   int comparison_p = GET_RTX_CLASS (true_code) == '<';\n   rtx temp;\n@@ -4659,12 +4659,12 @@ simplify_if_then_else (x)\n   rtx reversed;\n \n   /* Simplify storing of the truth value.  */\n-  if (comparison_p && true == const_true_rtx && false == const0_rtx)\n+  if (comparison_p && true_rtx == const_true_rtx && false_rtx == const0_rtx)\n     return gen_binary (true_code, mode, XEXP (cond, 0), XEXP (cond, 1));\n \n   /* Also when the truth value has to be reversed.  */\n   if (comparison_p\n-      && true == const0_rtx && false == const_true_rtx\n+      && true_rtx == const0_rtx && false_rtx == const_true_rtx\n       && (reversed = reversed_comparison (cond, mode, XEXP (cond, 0),\n \t\t\t\t\t  XEXP (cond, 1))))\n     return reversed;\n@@ -4689,7 +4689,7 @@ simplify_if_then_else (x)\n       if (false_code == EQ)\n \t{\n \t  swapped = 1, true_code = EQ, false_code = NE;\n-\t  temp = true, true = false, false = temp;\n+\t  temp = true_rtx, true_rtx = false_rtx, false_rtx = temp;\n \t}\n \n       /* If we are comparing against zero and the expression being tested has\n@@ -4708,18 +4708,21 @@ simplify_if_then_else (x)\n \t branch and it is used in the arm.  Be careful due to the potential\n \t of locally-shared RTL.  */\n \n-      if (reg_mentioned_p (from, true))\n-\ttrue = subst (known_cond (copy_rtx (true), true_code, from, true_val),\n+      if (reg_mentioned_p (from, true_rtx))\n+\ttrue_rtx = subst (known_cond (copy_rtx (true_rtx), true_code,\n+\t\t\t\t      from, true_val),\n \t\t      pc_rtx, pc_rtx, 0, 0);\n-      if (reg_mentioned_p (from, false))\n-\tfalse = subst (known_cond (copy_rtx (false), false_code,\n+      if (reg_mentioned_p (from, false_rtx))\n+\tfalse_rtx = subst (known_cond (copy_rtx (false_rtx), false_code,\n \t\t\t\t   from, false_val),\n \t\t       pc_rtx, pc_rtx, 0, 0);\n \n-      SUBST (XEXP (x, 1), swapped ? false : true);\n-      SUBST (XEXP (x, 2), swapped ? true : false);\n+      SUBST (XEXP (x, 1), swapped ? false_rtx : true_rtx);\n+      SUBST (XEXP (x, 2), swapped ? true_rtx : false_rtx);\n \n-      true = XEXP (x, 1), false = XEXP (x, 2), true_code = GET_CODE (cond);\n+      true_rtx = XEXP (x, 1);\n+      false_rtx = XEXP (x, 2);\n+      true_code = GET_CODE (cond);\n     }\n \n   /* If we have (if_then_else FOO (pc) (label_ref BAR)) and FOO can be\n@@ -4730,27 +4733,28 @@ simplify_if_then_else (x)\n \n   if (comparison_p\n       && combine_reversed_comparison_code (cond) != UNKNOWN\n-      && (true == pc_rtx\n-\t  || (CONSTANT_P (true)\n-\t      && GET_CODE (false) != CONST_INT && false != pc_rtx)\n-\t  || true == const0_rtx\n-\t  || (GET_RTX_CLASS (GET_CODE (true)) == 'o'\n-\t      && GET_RTX_CLASS (GET_CODE (false)) != 'o')\n-\t  || (GET_CODE (true) == SUBREG\n-\t      && GET_RTX_CLASS (GET_CODE (SUBREG_REG (true))) == 'o'\n-\t      && GET_RTX_CLASS (GET_CODE (false)) != 'o')\n-\t  || reg_mentioned_p (true, false)\n-\t  || rtx_equal_p (false, XEXP (cond, 0))))\n+      && (true_rtx == pc_rtx\n+\t  || (CONSTANT_P (true_rtx)\n+\t      && GET_CODE (false_rtx) != CONST_INT && false_rtx != pc_rtx)\n+\t  || true_rtx == const0_rtx\n+\t  || (GET_RTX_CLASS (GET_CODE (true_rtx)) == 'o'\n+\t      && GET_RTX_CLASS (GET_CODE (false_rtx)) != 'o')\n+\t  || (GET_CODE (true_rtx) == SUBREG\n+\t      && GET_RTX_CLASS (GET_CODE (SUBREG_REG (true_rtx))) == 'o'\n+\t      && GET_RTX_CLASS (GET_CODE (false_rtx)) != 'o')\n+\t  || reg_mentioned_p (true_rtx, false_rtx)\n+\t  || rtx_equal_p (false_rtx, XEXP (cond, 0))))\n     {\n       true_code = reversed_comparison_code (cond, NULL);\n       SUBST (XEXP (x, 0),\n \t     reversed_comparison (cond, GET_MODE (cond), XEXP (cond, 0),\n \t\t\t\t  XEXP (cond, 1)));\n \n-      SUBST (XEXP (x, 1), false);\n-      SUBST (XEXP (x, 2), true);\n+      SUBST (XEXP (x, 1), false_rtx);\n+      SUBST (XEXP (x, 2), true_rtx);\n \n-      temp = true, true = false, false = temp, cond = XEXP (x, 0);\n+      temp = true_rtx, true_rtx = false_rtx, false_rtx = temp;\n+      cond = XEXP (x, 0);\n \n       /* It is possible that the conditional has been simplified out.  */\n       true_code = GET_CODE (cond);\n@@ -4759,37 +4763,38 @@ simplify_if_then_else (x)\n \n   /* If the two arms are identical, we don't need the comparison.  */\n \n-  if (rtx_equal_p (true, false) && ! side_effects_p (cond))\n-    return true;\n+  if (rtx_equal_p (true_rtx, false_rtx) && ! side_effects_p (cond))\n+    return true_rtx;\n \n   /* Convert a == b ? b : a to \"a\".  */\n   if (true_code == EQ && ! side_effects_p (cond)\n       && (! FLOAT_MODE_P (mode) || flag_fast_math)\n-      && rtx_equal_p (XEXP (cond, 0), false)\n-      && rtx_equal_p (XEXP (cond, 1), true))\n-    return false;\n+      && rtx_equal_p (XEXP (cond, 0), false_rtx)\n+      && rtx_equal_p (XEXP (cond, 1), true_rtx))\n+    return false_rtx;\n   else if (true_code == NE && ! side_effects_p (cond)\n \t   && (! FLOAT_MODE_P (mode) || flag_fast_math)\n-\t   && rtx_equal_p (XEXP (cond, 0), true)\n-\t   && rtx_equal_p (XEXP (cond, 1), false))\n-    return true;\n+\t   && rtx_equal_p (XEXP (cond, 0), true_rtx)\n+\t   && rtx_equal_p (XEXP (cond, 1), false_rtx))\n+    return true_rtx;\n \n   /* Look for cases where we have (abs x) or (neg (abs X)).  */\n \n   if (GET_MODE_CLASS (mode) == MODE_INT\n-      && GET_CODE (false) == NEG\n-      && rtx_equal_p (true, XEXP (false, 0))\n+      && GET_CODE (false_rtx) == NEG\n+      && rtx_equal_p (true_rtx, XEXP (false_rtx, 0))\n       && comparison_p\n-      && rtx_equal_p (true, XEXP (cond, 0))\n-      && ! side_effects_p (true))\n+      && rtx_equal_p (true_rtx, XEXP (cond, 0))\n+      && ! side_effects_p (true_rtx))\n     switch (true_code)\n       {\n       case GT:\n       case GE:\n-\treturn gen_unary (ABS, mode, mode, true);\n+\treturn gen_unary (ABS, mode, mode, true_rtx);\n       case LT:\n       case LE:\n-\treturn gen_unary (NEG, mode, mode, gen_unary (ABS, mode, mode, true));\n+\treturn gen_unary (NEG, mode, mode,\n+\t\t\t  gen_unary (ABS, mode, mode, true_rtx));\n     default:\n       break;\n       }\n@@ -4798,23 +4803,23 @@ simplify_if_then_else (x)\n \n   if ((! FLOAT_MODE_P (mode) || flag_fast_math)\n       && comparison_p\n-      && rtx_equal_p (XEXP (cond, 0), true)\n-      && rtx_equal_p (XEXP (cond, 1), false)\n+      && rtx_equal_p (XEXP (cond, 0), true_rtx)\n+      && rtx_equal_p (XEXP (cond, 1), false_rtx)\n       && ! side_effects_p (cond))\n     switch (true_code)\n       {\n       case GE:\n       case GT:\n-\treturn gen_binary (SMAX, mode, true, false);\n+\treturn gen_binary (SMAX, mode, true_rtx, false_rtx);\n       case LE:\n       case LT:\n-\treturn gen_binary (SMIN, mode, true, false);\n+\treturn gen_binary (SMIN, mode, true_rtx, false_rtx);\n       case GEU:\n       case GTU:\n-\treturn gen_binary (UMAX, mode, true, false);\n+\treturn gen_binary (UMAX, mode, true_rtx, false_rtx);\n       case LEU:\n       case LTU:\n-\treturn gen_binary (UMIN, mode, true, false);\n+\treturn gen_binary (UMIN, mode, true_rtx, false_rtx);\n       default:\n \tbreak;\n       }\n@@ -4829,8 +4834,8 @@ simplify_if_then_else (x)\n   if ((STORE_FLAG_VALUE == 1 || STORE_FLAG_VALUE == -1)\n       && comparison_p && mode != VOIDmode && ! side_effects_p (x))\n     {\n-      rtx t = make_compound_operation (true, SET);\n-      rtx f = make_compound_operation (false, SET);\n+      rtx t = make_compound_operation (true_rtx, SET);\n+      rtx f = make_compound_operation (false_rtx, SET);\n       rtx cond_op0 = XEXP (cond, 0);\n       rtx cond_op1 = XEXP (cond, 1);\n       enum rtx_code op = NIL, extend_op = NIL;\n@@ -4943,12 +4948,12 @@ simplify_if_then_else (x)\n      can actually do this more generally, but it doesn't seem worth it.  */\n \n   if (true_code == NE && XEXP (cond, 1) == const0_rtx\n-      && false == const0_rtx && GET_CODE (true) == CONST_INT\n+      && false_rtx == const0_rtx && GET_CODE (true_rtx) == CONST_INT\n       && ((1 == nonzero_bits (XEXP (cond, 0), mode)\n-\t   && (i = exact_log2 (INTVAL (true))) >= 0)\n+\t   && (i = exact_log2 (INTVAL (true_rtx))) >= 0)\n \t  || ((num_sign_bit_copies (XEXP (cond, 0), mode)\n \t       == GET_MODE_BITSIZE (mode))\n-\t      && (i = exact_log2 (-INTVAL (true))) >= 0)))\n+\t      && (i = exact_log2 (-INTVAL (true_rtx))) >= 0)))\n     return\n       simplify_shift_const (NULL_RTX, ASHIFT, mode,\n \t\t\t    gen_lowpart_for_combine (mode, XEXP (cond, 0)), i);\n@@ -5197,29 +5202,31 @@ simplify_set (x)\n \t  == GET_MODE_BITSIZE (GET_MODE (XEXP (XEXP (src, 0), 0))))\n       && ! side_effects_p (src))\n     {\n-      rtx true = (GET_CODE (XEXP (src, 0)) == NE\n+      rtx true_rtx = (GET_CODE (XEXP (src, 0)) == NE\n \t\t      ? XEXP (src, 1) : XEXP (src, 2));\n-      rtx false = (GET_CODE (XEXP (src, 0)) == NE\n+      rtx false_rtx = (GET_CODE (XEXP (src, 0)) == NE\n \t\t   ? XEXP (src, 2) : XEXP (src, 1));\n       rtx term1 = const0_rtx, term2, term3;\n \n-      if (GET_CODE (true) == IOR && rtx_equal_p (XEXP (true, 0), false))\n-\tterm1 = false, true = XEXP (true, 1), false = const0_rtx;\n-      else if (GET_CODE (true) == IOR\n-\t       && rtx_equal_p (XEXP (true, 1), false))\n-\tterm1 = false, true = XEXP (true, 0), false = const0_rtx;\n-      else if (GET_CODE (false) == IOR\n-\t       && rtx_equal_p (XEXP (false, 0), true))\n-\tterm1 = true, false = XEXP (false, 1), true = const0_rtx;\n-      else if (GET_CODE (false) == IOR\n-\t       && rtx_equal_p (XEXP (false, 1), true))\n-\tterm1 = true, false = XEXP (false, 0), true = const0_rtx;\n-\n-      term2 = gen_binary (AND, GET_MODE (src), XEXP (XEXP (src, 0), 0), true);\n+      if (GET_CODE (true_rtx) == IOR\n+\t  && rtx_equal_p (XEXP (true_rtx, 0), false_rtx))\n+\tterm1 = false_rtx, true_rtx = XEXP(true_rtx, 1), false_rtx = const0_rtx;\n+      else if (GET_CODE (true_rtx) == IOR\n+\t       && rtx_equal_p (XEXP (true_rtx, 1), false_rtx))\n+\tterm1 = false_rtx, true_rtx = XEXP(true_rtx, 0), false_rtx = const0_rtx;\n+      else if (GET_CODE (false_rtx) == IOR\n+\t       && rtx_equal_p (XEXP (false_rtx, 0), true_rtx))\n+\tterm1 = true_rtx, false_rtx = XEXP(false_rtx, 1), true_rtx = const0_rtx;\n+      else if (GET_CODE (false_rtx) == IOR\n+\t       && rtx_equal_p (XEXP (false_rtx, 1), true_rtx))\n+\tterm1 = true_rtx, false_rtx = XEXP(false_rtx, 0), true_rtx = const0_rtx;\n+\n+      term2 = gen_binary (AND, GET_MODE (src),\n+\t\t\t  XEXP (XEXP (src, 0), 0), true_rtx);\n       term3 = gen_binary (AND, GET_MODE (src),\n \t\t\t  gen_unary (NOT, GET_MODE (src), GET_MODE (src),\n \t\t\t\t     XEXP (XEXP (src, 0), 0)),\n-\t\t\t  false);\n+\t\t\t  false_rtx);\n \n       SUBST (SET_SRC (x),\n \t     gen_binary (IOR, GET_MODE (src),"}, {"sha": "a1282572c85071d804e9c0d0e3f577b7bf4b0a60", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -971,7 +971,7 @@ i[34567]86-ibm-aix*)\t\t# IBM PS/2 running AIX\n \t\ttm_file=i386/aix386ng.h\n \t\tuse_collect2=yes\n \tfi\n-\txm_file=\"xm-alloca.h i386/xm-aix.h ${xm_file}\"\n+\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \txmake_file=i386/x-aix\n \t;;\n@@ -1220,7 +1220,6 @@ i[34567]86-*-osfrose*)\t\t# 386 using OSF/rose\n \t\ttm_file=i386/osfrose.h\n \t\tuse_collect2=yes\n \tfi\n-\txm_file=\"i386/xm-osf.h ${xm_file}\"\n \txmake_file=i386/x-osfrose\n \ttmake_file=i386/t-osf\n \textra_objs=halfpic.o"}, {"sha": "6ada859a2342a188767dce37e3d466f51ca3a188", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -240,6 +240,9 @@\n /* Define if you have the <stab.h> header file.  */\n #undef HAVE_STAB_H\n \n+/* Define if you have the <stdbool.h> header file.  */\n+#undef HAVE_STDBOOL_H\n+\n /* Define if you have the <stddef.h> header file.  */\n #undef HAVE_STDDEF_H\n "}, {"sha": "63b9acc128a673a49e1f7d2affebd62152ac821a", "filename": "gcc/config/a29k/xm-a29k.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fa29k%2Fxm-a29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fa29k%2Fxm-a29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fxm-a29k.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for AMD Am29000 processor. \n-   Copyright (C) 1987, 1988, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,11 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "4dd6c325125257cd0cfa293aa22ab4e86a7773e5", "filename": "gcc/config/a29k/xm-unix.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fa29k%2Fxm-unix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fa29k%2Fxm-unix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fxm-unix.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for AMD Am29000 processor. \n-   Copyright (C) 1987, 1988, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "25a9d0f59d8774fde90f5e24d4c5caa35dad5f54", "filename": "gcc/config/alpha/xm-alpha.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-alpha.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -20,11 +20,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define\tFALSE\t0\n-#define\tTRUE\t1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define\tHOST_BITS_PER_CHAR\t8\n #define\tHOST_BITS_PER_SHORT\t16"}, {"sha": "f0fadbacf5e47b35eda18f29ba86ce8cc1e71c4b", "filename": "gcc/config/arc/xm-arc.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Farc%2Fxm-arc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Farc%2Fxm-arc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fxm-arc.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for the ARC processor.\n-   Copyright (C) 1994, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1997, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "2a1686286d7450e5763b79b321b21da6b496f53d", "filename": "gcc/config/arm/xm-arm.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Farm%2Fxm-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Farm%2Fxm-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fxm-arm.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -21,10 +21,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n@@ -60,5 +56,3 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* EOF xm-arm.h */\n-\n-"}, {"sha": "491032477d155dffb52744aff87edea23f7ea877", "filename": "gcc/config/c4x/xm-c4x.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fc4x%2Fxm-c4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fc4x%2Fxm-c4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fxm-c4x.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,7 +1,3 @@\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 32\n #define HOST_BITS_PER_SHORT 32\n@@ -18,4 +14,3 @@\n /* Arguments to use with `exit'.  */\n #define SUCCESS_EXIT_CODE 0\n #define FATAL_EXIT_CODE 33\n-"}, {"sha": "adb84117c3ac49064e71a35a3defa967278a288b", "filename": "gcc/config/clipper/xm-clix.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fclipper%2Fxm-clix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fclipper%2Fxm-clix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fxm-clix.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,9 +1,5 @@\n /* Config file for Clipper running Clix, system V. 3.2 clone  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.   */\n "}, {"sha": "8a905df4251ca5b4b7aaed9812933415c17da6d5", "filename": "gcc/config/convex/xm-convex.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fconvex%2Fxm-convex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fconvex%2Fxm-convex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fxm-convex.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.   */\n #include \"tm.h\""}, {"sha": "549ecbe0236124ee96c7a8013f48a1a89eb9bb58", "filename": "gcc/config/d30v/xm-d30v.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -19,10 +19,6 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define\tFALSE\t0\n-#define\tTRUE\t1\n-\n /* A C expression for the status code to be returned when the compiler exits\n    after serious errors.  */\n #define FATAL_EXIT_CODE 33"}, {"sha": "ac40dac66780fe8f38b50ab7e46cf66c36634521", "filename": "gcc/config/dsp16xx/xm-dsp16xx.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration file for GNU CC for AT&T DSP1600.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@world.std.com).\n \n This file is part of GNU CC.\n@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "ed47bdeb0a00dbfe9bd628b92fb1bc4e8f24a438", "filename": "gcc/config/elxsi/xm-elxsi.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Felxsi%2Fxm-elxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Felxsi%2Fxm-elxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Fxm-elxsi.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Elxsi.\n-   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.   */\n #include \"tm.h\"\n@@ -35,4 +31,3 @@ Boston, MA 02111-1307, USA.  */\n /* Arguments to use with `exit'.  */\n #define SUCCESS_EXIT_CODE 0\n #define FATAL_EXIT_CODE 33\n-"}, {"sha": "82030f5c0b123580fb4eac84cbf023ef84978fe7", "filename": "gcc/config/fr30/xm-fr30.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Ffr30%2Fxm-fr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Ffr30%2Fxm-fr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Fxm-fr30.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define\tFALSE\t0\n-#define\tTRUE\t1\n-\n /* A C expression for the status code to be returned when the compiler exits\n    after serious errors.  */\n #define FATAL_EXIT_CODE 33"}, {"sha": "88592098ae254611763a98917334cee97d8d3cd8", "filename": "gcc/config/h8300/xm-h8300.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for H8/300.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n@@ -43,4 +39,3 @@ Boston, MA 02111-1307, USA.  */\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.   */\n #include \"tm.h\"\n-"}, {"sha": "bb6634287988f8c0448640b935c6cab7d1200d39", "filename": "gcc/config/i370/xm-i370.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-i370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-i370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-i370.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -20,11 +20,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n \n #define HOST_BITS_PER_CHAR\t8"}, {"sha": "ccdf64f3cf4bf485ba8da423c898245efce4ea9c", "filename": "gcc/config/i370/xm-linux.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-linux.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -21,13 +21,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n-\n #define HOST_BITS_PER_CHAR\t8\n #define HOST_BITS_PER_SHORT\t16\n #define HOST_BITS_PER_INT\t32\n@@ -54,6 +48,5 @@ extern char *alloca ();\n #include \"tm.h\"\n \n /* Arguments to use with `exit'.  */\n-\n #define SUCCESS_EXIT_CODE\t0\n #define FATAL_EXIT_CODE\t\t12"}, {"sha": "0535662c0410583856c9d9c0f922324fabfaa711", "filename": "gcc/config/i370/xm-mvs.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-mvs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-mvs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-mvs.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -20,11 +20,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n \n #define HOST_BITS_PER_CHAR\t8"}, {"sha": "baacdf2b1ea2c6a13e6b564aeb10680d7a7b3d4f", "filename": "gcc/config/i370/xm-oe.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-oe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi370%2Fxm-oe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-oe.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -20,11 +20,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n \n #define HOST_BITS_PER_CHAR\t8"}, {"sha": "4cbd36ef518f60a4378249c314304f562ed9a13b", "filename": "gcc/config/i386/xm-aix.h", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb9ef28342c5995ea9460b31bca707de200506e/gcc%2Fconfig%2Fi386%2Fxm-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb9ef28342c5995ea9460b31bca707de200506e/gcc%2Fconfig%2Fi386%2Fxm-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-aix.h?ref=9bb9ef28342c5995ea9460b31bca707de200506e", "patch": "@@ -1,2 +0,0 @@\n-#undef TRUE\n-#undef FALSE"}, {"sha": "5eaf8e431a05d7ed207979a05430418387f7c7f1", "filename": "gcc/config/i386/xm-i386.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi386%2Fxm-i386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi386%2Fxm-i386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-i386.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Intel 80386.\n-   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -22,10 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #define __i386__ 1\n #endif\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "4cbd36ef518f60a4378249c314304f562ed9a13b", "filename": "gcc/config/i386/xm-osf.h", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb9ef28342c5995ea9460b31bca707de200506e/gcc%2Fconfig%2Fi386%2Fxm-osf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb9ef28342c5995ea9460b31bca707de200506e/gcc%2Fconfig%2Fi386%2Fxm-osf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-osf.h?ref=9bb9ef28342c5995ea9460b31bca707de200506e", "patch": "@@ -1,2 +0,0 @@\n-#undef TRUE\n-#undef FALSE"}, {"sha": "ad5f0ed6b5c4604dc8fc1b19fb33949c2f23b7eb", "filename": "gcc/config/i860/xm-i860.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi860%2Fxm-i860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi860%2Fxm-i860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fxm-i860.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "06df5b19e165e27281ef862763e09f87ad4d67a5", "filename": "gcc/config/i960/xm-i960.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi960%2Fxm-i960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fi960%2Fxm-i960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fxm-i960.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Intel 960 family\n-   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "f3ca011dffcda0f31d5655da68242ca0389760de", "filename": "gcc/config/ia64/xm-ia64.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fia64%2Fxm-ia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fia64%2Fxm-ia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fxm-ia64.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for IA-64.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define\tFALSE\t0\n-#define\tTRUE\t1\n-\n /* A C expression for the status code to be returned when the compiler exits\n    after serious errors.  */\n #define FATAL_EXIT_CODE 33"}, {"sha": "82c2b84204623f2916455195ffb7a94b2a0d27ac", "filename": "gcc/config/m32r/xm-m32r.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for the M32R processor.\n-   Copyright (C) 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "f3b337b6e738188aba1cd6770efe8fe078e4ca74", "filename": "gcc/config/m68k/xm-m68k.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fm68k%2Fxm-m68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fm68k%2Fxm-m68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-m68k.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Motorola 68000 family.\n-   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,11 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "1ddcca93af85544ae0f1adb0f942b291ad01743b", "filename": "gcc/config/m88k/xm-m88k.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,6 +1,6 @@\n /* Configuration for GNU compiler.\n    Motorola m88100 in an 88open OCS/BCS environment.\n-   Copyright (C) 1988, 1989, 1990, 1991, 1993, 1997\n+   Copyright (C) 1988, 1989, 1990, 1991, 1993, 1997, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -20,11 +20,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "42cb57848360374bbf5ec2d5ab01a516536d7a1d", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for Motorola MCore processor\n-   Copyright (C) 1993, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2634,8 +2634,8 @@ mcore_dependent_simplify_rtx (x, int_op0_mode, last, in_dest, general_simplify)\n     {\n       int i;\n       rtx cond = XEXP(x, 0);\n-      rtx true = XEXP(x, 1);\n-      rtx false = XEXP(x, 2);\n+      rtx true_rtx = XEXP(x, 1);\n+      rtx false_rtx = XEXP(x, 2);\n       enum rtx_code true_code = GET_CODE (cond);\n \n       /* On the mcore, when doing -mcmov-one, we don't want to simplify:\n@@ -2648,12 +2648,12 @@ mcore_dependent_simplify_rtx (x, int_op0_mode, last, in_dest, general_simplify)\n          not typically help.  see combine.c, line 4217.  BRC  */\n \n       if (true_code == NE && XEXP (cond, 1) == const0_rtx\n-\t  && false == const0_rtx && GET_CODE (true) == CONST_INT\n+\t  && false_rtx == const0_rtx && GET_CODE (true_rtx) == CONST_INT\n \t  && ((1 == nonzero_bits (XEXP (cond, 0), mode)\n-\t       && (i = exact_log2 (INTVAL (true))) >= 0)\n+\t       && (i = exact_log2 (INTVAL (true_rtx))) >= 0)\n \t      || ((num_sign_bit_copies (XEXP (cond, 0), mode)\n \t           == GET_MODE_BITSIZE (mode))\n-\t\t  && (i = exact_log2 (- INTVAL (true))) >= 0)))\n+\t\t  && (i = exact_log2 (- INTVAL (true_rtx))) >= 0)))\n \t{\n \t  *general_simplify = 0; \n \t  return x;"}, {"sha": "ac729159fad4d9103f77f8133175468ef2998ac9", "filename": "gcc/config/mcore/xm-mcore.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for the Motorola M*Core.\n-   Copyright (C) 1993, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -17,10 +17,6 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR   8\n #define HOST_BITS_PER_SHORT 16\n@@ -39,4 +35,3 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Arguments to use with `exit'.  */\n #define SUCCESS_EXIT_CODE 0\n #define FATAL_EXIT_CODE 33\n-"}, {"sha": "3c52ac0fec862f4faeec68792650034fabf1e6d4", "filename": "gcc/config/mips/xm-mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmips%2Fxm-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmips%2Fxm-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-mips.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -19,11 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "c8b3130ef1317ab6e5f2d4db4cd46b22f3b1ffd1", "filename": "gcc/config/mn10200/xm-mn10200.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmn10200%2Fxm-mn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmn10200%2Fxm-mn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fxm-mn10200.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for Matsushita MN10200. \n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n This file is part of GNU CC.\n@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "59b625b4b2653798ec4865e45deeaa713484d59b", "filename": "gcc/config/mn10300/xm-mn10300.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for Matsushita MN10300. \n-   Copyright (C) 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1998, 1999, 2001 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n This file is part of GNU CC.\n@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "46d373fdcdee1451eef8c93072df7d8aaf3acb87", "filename": "gcc/config/ns32k/xm-ns32k.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Vax.\n-   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.   */\n #include \"tm.h\""}, {"sha": "d5cb80bb5506759d7831a03dfead8be65ebd7751", "filename": "gcc/config/pa/xm-linux.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-linux.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for PA-RISC.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "7c992ff7d274b5610ca64ceb44b02b6d1412a90c", "filename": "gcc/config/pa/xm-pa.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-pa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-pa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pa.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for PA-RISC.\n-   Copyright (C) 1988, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1995, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n \n This file is part of GNU CC.\n@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "157abe0d4fb4beb011ea453e03f677f957f204bb", "filename": "gcc/config/pa/xm-pa64hpux.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for PA-RISC.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -22,11 +22,6 @@ Boston, MA 02111-1307, USA.  */\n /* HP-UX is a flavor of System V */\n #define USG\n \n-/* Use System V memory functions.  */\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "e7a4f75c33c04a5acff702eb95e7a9b3a1ff061c", "filename": "gcc/config/pa/xm-pahpux.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for PA-RISC.\n-   Copyright (C) 1988, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1995, 1997, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n \n This file is part of GNU CC.\n@@ -19,15 +19,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n /* HP-UX is a flavor of System V */\n #define USG\n \n-/* Use System V memory functions.  */\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "f987a56a1400a610647d4daacda3277c92f5c4f7", "filename": "gcc/config/pa/xm-papro.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-papro.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for PA-RISC.\n-   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n \n This file is part of GNU CC.\n@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "694ef3ac17a7b7f889d64c70c7923d48c8579a55", "filename": "gcc/config/pj/xm-pj.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpj%2Fxm-pj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fpj%2Fxm-pj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fxm-pj.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for picoJava.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "237982517b0e57e9c8931834fc3bbc05249eec5e", "filename": "gcc/config/romp/xm-romp.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fromp%2Fxm-romp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fromp%2Fxm-romp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fxm-romp.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for IBM RT PC.\n-   Copyright (C) 1989, 1991, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,11 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "c5ee876560c11f192e4aa05cbf211945b7adec4a", "filename": "gcc/config/rs6000/xm-beos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-beos.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -21,12 +21,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-\n-#define\tFALSE\t0\n-#define\tTRUE\t1\n-\n /* This describes the machine the compiler is hosted on.  */\n \n #define\tHOST_BITS_PER_CHAR\t8\n@@ -81,4 +75,3 @@ extern void *alloca ();\n /* SYSTEM_INCLUDE_DIR is the location for system specific, non-POSIX headers. */\n \n #define SYSTEM_INCLUDE_DIR\t\"/boot/develop/headers/be\"\n-"}, {"sha": "d68965b3bcdd4fc09871c649a29f6cdba948e02e", "filename": "gcc/config/rs6000/xm-rs6000.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for IBM RS/6000 running AIX in 32-bit mode.\n-   Copyright (C) 1990, 1993, 1995, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1993, 1995, 1998, 2001 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu).\n \n This file is part of GNU CC.\n@@ -19,11 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define\tFALSE\t0\n-#define\tTRUE\t1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define\tHOST_BITS_PER_CHAR\t8\n #define\tHOST_BITS_PER_SHORT\t16"}, {"sha": "6e7b1270f5d9b3ae12e7743b481992becbb324ff", "filename": "gcc/config/rs6000/xm-sysv4.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for PowerPC running System V.4.\n-   Copyright (C) 1995, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1998, 1999, 2001 Free Software Foundation, Inc.\n    Cloned from sparc/xm-sysv4.h by Michael Meissner (meissner@cygnus.com).\n \n This file is part of GNU CC.\n@@ -19,11 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "e6e183b3ca49ef3ea26c47c5d4d49f4e10436cd9", "filename": "gcc/config/sh/xm-sh.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fsh%2Fxm-sh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fsh%2Fxm-sh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fxm-sh.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Hitachi SH.\n-   Copyright (C) 1993, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1997, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "096fad6797cb3d3d4aea3cd71dc4dcca1701c552", "filename": "gcc/config/sparc/xm-sparc.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Sun Sparc.\n-   Copyright (C) 1988, 1993, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993, 1995, 1997, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n \n This file is part of GNU CC.\n@@ -19,11 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "5e0d15d2dc7ac8978c5ee85e534b3ccb504513b6", "filename": "gcc/config/sparc/xm-sysv4.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fsparc%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fsparc%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-sysv4.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Sun Sparc running System V.4.\n-   Copyright (C) 1992, 1993, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1998, 2001 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@netcom.com).\n \n This file is part of GNU CC.\n@@ -19,11 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "e7257e4c363f7981f7f4e3159fc8edf417c9f810", "filename": "gcc/config/v850/xm-v850.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fv850%2Fxm-v850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fv850%2Fxm-v850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fxm-v850.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for NEC V850. \n-   Copyright (C) 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1998, 1999, 2001 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n This file is part of GNU CC.\n@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "d19157fb552e22d86f48d23f5dfc732e2a404bd2", "filename": "gcc/config/vax/xm-vax.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fvax%2Fxm-vax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fvax%2Fxm-vax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vax.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Vax.\n-   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.   */\n #include \"tm.h\"\n@@ -42,4 +38,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* isinf isn't there, but finite is. */\n #define isinf(x) (!finite(x))\n-"}, {"sha": "2fc644746f29af0fb36f679a08e39cfefe15ea28", "filename": "gcc/config/vax/xm-vms.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -19,10 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* Other configurations get these via autoconfig.  */\n #define STDC_HEADERS 1\n #define HAVE_STDLIB_H 1"}, {"sha": "0bc5514d6ef10e232d3fd95d570aff2fef3ebea8", "filename": "gcc/config/we32k/xm-we32k.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fwe32k%2Fxm-we32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fwe32k%2Fxm-we32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fxm-we32k.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for AT&T we32000 Family.\n-   Copyright (C) 1991, 1992, 1993, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992, 1993, 1996, 2001 Free Software Foundation, Inc.\n    Contributed by John Wehle (john@feith1.uucp)\n \n This file is part of GNU CC.\n@@ -19,11 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "edc5ca96a8d5ab8bc71887e3845bec4477d6a299", "filename": "gcc/config/xm-lynx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fxm-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fxm-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-lynx.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -22,10 +22,6 @@ Boston, MA 02111-1307, USA.  */\n    running Lynx.  This file should not be specified as $xm_file itself;\n    instead $xm_file should be CPU/xm-lynx.h, which should include this one.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* Arguments to use with `exit'.  */\n #define SUCCESS_EXIT_CODE 0\n #define FATAL_EXIT_CODE 33"}, {"sha": "cad11efc0bd9bd59994d2c05f0d0c602be051d79", "filename": "gcc/config/xm-std32.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fxm-std32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfig%2Fxm-std32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-std32.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for standard 32-bit host machine.\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* #defines that need visibility everywhere.  */\n-#define FALSE 0\n-#define TRUE 1\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "f3fc8b65cb027006a71c7a2560f9ee98b12bbec4", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -2091,7 +2091,7 @@ fi\n for ac_hdr in limits.h stddef.h string.h strings.h stdlib.h time.h \\\n \t\t fcntl.h unistd.h stab.h sys/file.h sys/time.h \\\n \t\t sys/resource.h sys/param.h sys/times.h sys/stat.h \\\n-\t\t direct.h malloc.h langinfo.h iconv.h\n+\t\t direct.h malloc.h langinfo.h iconv.h stdbool.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6"}, {"sha": "3a9b5dee388828883821d70010c59e6dbcac050f", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -426,7 +426,7 @@ AC_HEADER_SYS_WAIT\n AC_CHECK_HEADERS(limits.h stddef.h string.h strings.h stdlib.h time.h \\\n \t\t fcntl.h unistd.h stab.h sys/file.h sys/time.h \\\n \t\t sys/resource.h sys/param.h sys/times.h sys/stat.h \\\n-\t\t direct.h malloc.h langinfo.h iconv.h)\n+\t\t direct.h malloc.h langinfo.h iconv.h stdbool.h)\n \n # Check for thread headers.\n AC_CHECK_HEADER(thread.h, [have_thread_h=yes], [have_thread_h=])"}, {"sha": "41a7a0681efc1543a2827a3dd2803206aa467245", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,3 +1,7 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* decl.c: Replace all uses of 'boolean' with 'bool'.\n+\n 2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n \n \t* lang-specs.h: Add zero initializer for cpp_spec field to"}, {"sha": "d3cb6a48f44cda51cd2adc8a4fb17952b08ba660", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -93,7 +93,7 @@ static void bad_specifiers PARAMS ((tree, const char *, int, int, int, int,\n static tree maybe_process_template_type_declaration PARAMS ((tree, int, struct binding_level*));\n static void check_for_uninitialized_const_var PARAMS ((tree));\n static unsigned long typename_hash PARAMS ((hash_table_key));\n-static boolean typename_compare PARAMS ((hash_table_key, hash_table_key));\n+static bool typename_compare PARAMS ((hash_table_key, hash_table_key));\n static void push_binding PARAMS ((tree, tree, struct binding_level*));\n static int add_binding PARAMS ((tree, tree));\n static void pop_binding PARAMS ((tree, tree));\n@@ -5495,7 +5495,7 @@ typename_hash (k)\n \n /* Compare two TYPENAME_TYPEs.  K1 and K2 are really of type `tree'.  */\n \n-static boolean\n+static bool\n typename_compare (k1, k2)\n      hash_table_key k1;\n      hash_table_key k2;"}, {"sha": "bf6d57529266de71d7df97ebb825bcdf72bc76c0", "filename": "gcc/cse.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -3913,15 +3913,15 @@ fold_rtx (x, insn)\n       if (const_arg0 == 0 || const_arg1 == 0)\n \t{\n \t  struct table_elt *p0, *p1;\n-\t  rtx true = const_true_rtx, false = const0_rtx;\n+\t  rtx true_rtx = const_true_rtx, false_rtx = const0_rtx;\n \t  enum machine_mode mode_arg1;\n \n #ifdef FLOAT_STORE_FLAG_VALUE\n \t  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t    {\n-\t      true = (CONST_DOUBLE_FROM_REAL_VALUE\n+\t      true_rtx = (CONST_DOUBLE_FROM_REAL_VALUE\n \t\t      (FLOAT_STORE_FLAG_VALUE (mode), mode));\n-\t      false = CONST0_RTX (mode);\n+\t      false_rtx = CONST0_RTX (mode);\n \t    }\n #endif\n \n@@ -3955,9 +3955,9 @@ fold_rtx (x, insn)\n \t\t      || GET_CODE (folded_arg0) == CONST))\n \t\t{\n \t\t  if (code == EQ)\n-\t\t    return false;\n+\t\t    return false_rtx;\n \t\t  else if (code == NE)\n-\t\t    return true;\n+\t\t    return true_rtx;\n \t\t}\n \n \t      /* See if the two operands are the same.  */\n@@ -3981,12 +3981,12 @@ fold_rtx (x, insn)\n \t\t      return ((code == EQ || code == LE || code == GE\n \t\t\t       || code == LEU || code == GEU || code == UNEQ\n \t\t\t       || code == UNLE || code == UNGE || code == ORDERED)\n-\t\t\t      ? true : false);\n+\t\t\t      ? true_rtx : false_rtx);\n \t\t   /* Take care for the FP compares we can resolve.  */\n \t\t   if (code == UNEQ || code == UNLE || code == UNGE)\n-\t\t     return true;\n+\t\t     return true_rtx;\n \t\t   if (code == LTGT || code == LT || code == GT)\n-\t\t     return false;\n+\t\t     return false_rtx;\n \t\t}\n \n \t      /* If FOLDED_ARG0 is a register, see if the comparison we are\n@@ -4011,7 +4011,7 @@ fold_rtx (x, insn)\n \t\t\t      || (GET_CODE (folded_arg1) == REG\n \t\t\t\t  && (REG_QTY (REGNO (folded_arg1)) == ent->comparison_qty))))\n \t\t\treturn (comparison_dominates_p (ent->comparison_code, code)\n-\t\t\t\t? true : false);\n+\t\t\t\t? true_rtx : false_rtx);\n \t\t    }\n \t\t}\n \t    }\n@@ -4035,30 +4035,30 @@ fold_rtx (x, insn)\n \t      int has_sign = (HOST_BITS_PER_WIDE_INT >= sign_bitnum\n \t\t\t      && (INTVAL (inner_const)\n \t\t\t\t  & ((HOST_WIDE_INT) 1 << sign_bitnum)));\n-\t      rtx true = const_true_rtx, false = const0_rtx;\n+\t      rtx true_rtx = const_true_rtx, false_rtx = const0_rtx;\n \n #ifdef FLOAT_STORE_FLAG_VALUE\n \t      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t\t{\n-\t\t  true = (CONST_DOUBLE_FROM_REAL_VALUE\n+\t\t  true_rtx = (CONST_DOUBLE_FROM_REAL_VALUE\n \t\t\t  (FLOAT_STORE_FLAG_VALUE (mode), mode));\n-\t\t  false = CONST0_RTX (mode);\n+\t\t  false_rtx = CONST0_RTX (mode);\n \t\t}\n #endif\n \n \t      switch (code)\n \t\t{\n \t\tcase EQ:\n-\t\t  return false;\n+\t\t  return false_rtx;\n \t\tcase NE:\n-\t\t  return true;\n+\t\t  return true_rtx;\n \t\tcase LT:  case LE:\n \t\t  if (has_sign)\n-\t\t    return true;\n+\t\t    return true_rtx;\n \t\t  break;\n \t\tcase GT:  case GE:\n \t\t  if (has_sign)\n-\t\t    return false;\n+\t\t    return false_rtx;\n \t\t  break;\n \t\tdefault:\n \t\t  break;"}, {"sha": "2446d19621d5a2303e84cca1235754c06dfd6e54", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -7956,21 +7956,21 @@ expand_expr (exp, target, tmode, modifier)\n \t  && (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 1), 0))\n \t      == TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 2), 0))))\n \t{\n-\t  tree true = TREE_OPERAND (TREE_OPERAND (exp, 1), 0);\n-\t  tree false = TREE_OPERAND (TREE_OPERAND (exp, 2), 0);\n-\n-\t  if ((TREE_CODE_CLASS (TREE_CODE (true)) == '2'\n-\t       && operand_equal_p (false, TREE_OPERAND (true, 0), 0))\n-\t      || (TREE_CODE_CLASS (TREE_CODE (false)) == '2'\n-\t\t  && operand_equal_p (true, TREE_OPERAND (false, 0), 0))\n-\t      || (TREE_CODE_CLASS (TREE_CODE (true)) == '1'\n-\t\t  && operand_equal_p (false, TREE_OPERAND (true, 0), 0))\n-\t      || (TREE_CODE_CLASS (TREE_CODE (false)) == '1'\n-\t\t  && operand_equal_p (true, TREE_OPERAND (false, 0), 0)))\n+\t  tree iftrue = TREE_OPERAND (TREE_OPERAND (exp, 1), 0);\n+\t  tree iffalse = TREE_OPERAND (TREE_OPERAND (exp, 2), 0);\n+\n+\t  if ((TREE_CODE_CLASS (TREE_CODE (iftrue)) == '2'\n+\t       && operand_equal_p (iffalse, TREE_OPERAND (iftrue, 0), 0))\n+\t      || (TREE_CODE_CLASS (TREE_CODE (iffalse)) == '2'\n+\t\t  && operand_equal_p (iftrue, TREE_OPERAND (iffalse, 0), 0))\n+\t      || (TREE_CODE_CLASS (TREE_CODE (iftrue)) == '1'\n+\t\t  && operand_equal_p (iffalse, TREE_OPERAND (iftrue, 0), 0))\n+\t      || (TREE_CODE_CLASS (TREE_CODE (iffalse)) == '1'\n+\t\t  && operand_equal_p (iftrue, TREE_OPERAND (iffalse, 0), 0)))\n \t    return expand_expr (build1 (NOP_EXPR, type,\n-\t\t\t\t\tbuild (COND_EXPR, TREE_TYPE (true),\n+\t\t\t\t\tbuild (COND_EXPR, TREE_TYPE (iftrue),\n \t\t\t\t\t       TREE_OPERAND (exp, 0),\n-\t\t\t\t\t       true, false)),\n+\t\t\t\t\t       iftrue, iffalse)),\n \t\t\t\ttarget, tmode, modifier);\n \t}\n "}, {"sha": "5da49e52e5614c911d972ba5ff491cec70213676", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,3 +1,9 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* f/proj.h: Delete 'bool' type.  Don't include stddef.h here.\n+\t* f/com.c: Rename variables named 'true' and/or 'false'.\n+\t* f/intdoc.c: Delete 'bool' type.\n+\n 2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n \n \t* lang-specs.h: Add zero initializer for cpp_spec field to all"}, {"sha": "88baa180eb3432511c65df83e61697ded285ee12", "filename": "gcc/f/com.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -4515,21 +4515,21 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \n     case FFEINTRIN_impBTEST:\n       {\n-\tffetargetLogical1 true;\n-\tffetargetLogical1 false;\n+\tffetargetLogical1 target_true;\n+\tffetargetLogical1 target_false;\n \ttree true_tree;\n \ttree false_tree;\n \n-\tffetarget_logical1 (&true, TRUE);\n-\tffetarget_logical1 (&false, FALSE);\n-\tif (true == 1)\n+\tffetarget_logical1 (&target_true, TRUE);\n+\tffetarget_logical1 (&target_false, FALSE);\n+\tif (target_true == 1)\n \t  true_tree = convert (tree_type, integer_one_node);\n \telse\n-\t  true_tree = convert (tree_type, build_int_2 (true, 0));\n-\tif (false == 0)\n+\t  true_tree = convert (tree_type, build_int_2 (target_true, 0));\n+\tif (target_false == 0)\n \t  false_tree = convert (tree_type, integer_zero_node);\n \telse\n-\t  false_tree = convert (tree_type, build_int_2 (false, 0));\n+\t  false_tree = convert (tree_type, build_int_2 (target_false, 0));\n \n \treturn\n \t  ffecom_3 (COND_EXPR, tree_type,"}, {"sha": "63cfbadcec030f28cebdb9962d3c3ac3a009aeb5", "filename": "gcc/f/intdoc.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2Fintdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2Fintdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* intdoc.c\n-   Copyright (C) 1997, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n This file is part of GNU Fortran.\n@@ -26,17 +26,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"assert.h\"\n \n-typedef enum\n-  {\n-#if !defined(false) || !defined(true)\n-    false = 0, true = 1,\n-#endif\n-#if !defined(FALSE) || !defined(TRUE)\n-    FALSE = 0, TRUE = 1,\n-#endif\n-    Doggone_Trailing_Comma_Dont_Work = 1\n-  } bool;\n-\n /* Pull in the intrinsics info, but only the doc parts.  */\n #define FFEINTRIN_DOC 1\n #include \"intrin.h\""}, {"sha": "4e6a06e5592e2aa737e0f8968932fe9ab9175662", "filename": "gcc/f/proj.h", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2Fproj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ff%2Fproj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fproj.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* proj.h file for Gnu Fortran\n-   Copyright (C) 1995, 1996, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n This file is part of GNU Fortran.\n@@ -35,29 +35,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n  #error \"You have to use gcc 2.x to build g77 (might be fixed in g77-0.6).\"\n #endif\n \n-/* Include files everyone gets.  <assert.h> is needed for assert().\n-   <stddef.h> is needed for offsetof, but technically also NULL,\n-   size_t, ptrdiff_t, and so on.  */\n+/* Include files everyone gets.  <assert.h> is needed for assert().  */\n \n #include \"assert.h\"\n \n-#if HAVE_STDDEF_H\n-#include <stddef.h>\n-#endif\n-\n-/* Generally useful definitions. */\n-\n-typedef enum\n-  {\n-#if !defined(false) || !defined(true)\n-    false = 0, true = 1,\n-#endif\n-#if !defined(FALSE) || !defined(TRUE)\n-    FALSE = 0, TRUE = 1,\n-#endif\n-    Doggone_Trailing_Comma_Dont_Work = 1\n-  } bool;\n-\n #ifndef UNUSED\t/* Compile with -DUNUSED= if cc doesn't support this. */\n #define UNUSED ATTRIBUTE_UNUSED\n #endif  /* !defined (UNUSED) */"}, {"sha": "e7cee978bfe820ce17fab2d0ff986d4fbb8a456a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -4695,16 +4695,16 @@ count_cond (expr, lim)\n      tree expr;\n      int lim;\n {\n-  int true, false;\n+  int ctrue, cfalse;\n \n   if (TREE_CODE (expr) != COND_EXPR)\n     return 0;\n   else if (lim <= 0)\n     return 0;\n \n-  true = count_cond (TREE_OPERAND (expr, 1), lim - 1);\n-  false = count_cond (TREE_OPERAND (expr, 2), lim - 1 - true);\n-  return MIN (lim, 1 + true + false);\n+  ctrue = count_cond (TREE_OPERAND (expr, 1), lim - 1);\n+  cfalse = count_cond (TREE_OPERAND (expr, 2), lim - 1 - ctrue);\n+  return MIN (lim, 1 + ctrue + cfalse);\n }\n \n /* Transform `a + (b ? x : y)' into `x ? (a + b) : (a + y)'."}, {"sha": "63aa5b5ee7f90e6482430daa4cd1beb472808a96", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -294,7 +294,7 @@ static int contains\t\tPARAMS ((rtx, varray_type));\n static void emit_return_into_block PARAMS ((basic_block, rtx));\n #endif\n static void put_addressof_into_stack PARAMS ((rtx, struct hash_table *));\n-static boolean purge_addressof_1 PARAMS ((rtx *, rtx, int, int,\n+static bool purge_addressof_1 PARAMS ((rtx *, rtx, int, int,\n \t\t\t\t\t  struct hash_table *));\n static void purge_single_hard_subreg_set PARAMS ((rtx));\n #ifdef HAVE_epilogue\n@@ -305,7 +305,7 @@ static struct hash_entry *insns_for_mem_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\t struct hash_table *,\n \t\t\t\t\t\t\t hash_table_key));\n static unsigned long insns_for_mem_hash PARAMS ((hash_table_key));\n-static boolean insns_for_mem_comp PARAMS ((hash_table_key, hash_table_key));\n+static bool insns_for_mem_comp PARAMS ((hash_table_key, hash_table_key));\n static int insns_for_mem_walk   PARAMS ((rtx *, void *));\n static void compute_insns_for_mem PARAMS ((rtx, rtx, struct hash_table *));\n static void mark_temp_slot PARAMS ((struct temp_slot *));\n@@ -2969,7 +2969,7 @@ static rtx purge_addressof_replacements;\n    the stack.  If the function returns FALSE then the replacement could not\n    be made.  */\n \n-static boolean\n+static bool\n purge_addressof_1 (loc, insn, force, store, ht)\n      rtx *loc;\n      rtx insn;\n@@ -2980,7 +2980,7 @@ purge_addressof_1 (loc, insn, force, store, ht)\n   RTX_CODE code;\n   int i, j;\n   const char *fmt;\n-  boolean result = true;\n+  bool result = true;\n \n   /* Re-start here to avoid recursion in common cases.  */\n  restart:\n@@ -3280,7 +3280,7 @@ insns_for_mem_hash (k)\n \n /* Return non-zero if K1 and K2 (two REGs) are the same.  */\n \n-static boolean\n+static bool\n insns_for_mem_comp (k1, k2)\n      hash_table_key k1;\n      hash_table_key k2;"}, {"sha": "4d7c25870e8582380506a4452c6e4df885aaf356", "filename": "gcc/gensupport.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,5 +1,5 @@\n /* Support routines for the various generation passes.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -321,7 +321,7 @@ static void\n identify_predicable_attribute ()\n {\n   struct queue_elem *elem;\n-  char *true, *false;\n+  char *p_true, *p_false;\n   const char *value;\n   size_t len;\n \n@@ -338,21 +338,21 @@ identify_predicable_attribute ()\n  found:\n   value = XSTR (elem->data, 1);\n   len = strlen (value);\n-  false = (char *) xmalloc (len + 1);\n-  memcpy (false, value, len + 1);\n+  p_false = (char *) xmalloc (len + 1);\n+  memcpy (p_false, value, len + 1);\n \n-  true = strchr (false, ',');\n-  if (true == NULL || strchr (++true, ',') != NULL)\n+  p_true = strchr (p_false, ',');\n+  if (p_true == NULL || strchr (++p_true, ',') != NULL)\n     {\n       message_with_line (elem->lineno,\n \t\t\t \"Attribute `predicable' is not a boolean\");\n       errors = 1;\n       return;\n     }\n-  true[-1] = '\\0';\n+  p_true[-1] = '\\0';\n \n-  predicable_true = true;\n-  predicable_false = false;\n+  predicable_true = p_true;\n+  predicable_false = p_false;\n \n   switch (GET_CODE (XEXP (elem->data, 2)))\n     {\n@@ -373,9 +373,9 @@ identify_predicable_attribute ()\n       return;\n     }\n \n-  if (strcmp (value, true) == 0)\n+  if (strcmp (value, p_true) == 0)\n     predicable_default = 1;\n-  else if (strcmp (value, false) == 0)\n+  else if (strcmp (value, p_false) == 0)\n     predicable_default = 0;\n   else\n     {"}, {"sha": "fff5614b94c9b23a2f23fb1b3a2852180a1120e2", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -48,7 +48,7 @@ static void ggc_mark_rtx_varray_ptr PARAMS ((void *));\n static void ggc_mark_tree_varray_ptr PARAMS ((void *));\n static void ggc_mark_tree_hash_table_ptr PARAMS ((void *));\n static void ggc_mark_trees PARAMS ((void));\n-static boolean ggc_mark_tree_hash_table_entry PARAMS ((struct hash_entry *,\n+static bool ggc_mark_tree_hash_table_entry PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t       hash_table_key));\n \n /* Maintain global roots that are preserved during GC.  */\n@@ -462,7 +462,7 @@ ggc_mark_tree_varray (v)\n \n /* Mark the hash table-entry HE.  It's key field is really a tree.  */\n \n-static boolean\n+static bool\n ggc_mark_tree_hash_table_entry (he, k)\n      struct hash_entry *he;\n      hash_table_key k ATTRIBUTE_UNUSED;"}, {"sha": "1b2cc7c78cf961d104ad6aa697dce80182aead29", "filename": "gcc/hash.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -41,7 +41,7 @@ hash_table_init_n (table, newfunc, hash, comp, size)\n \t\t\t\t\t    struct hash_table *,\n \t\t\t\t\t    hash_table_key));\n      unsigned long (*hash) PARAMS ((hash_table_key));\n-     boolean (*comp) PARAMS ((hash_table_key, hash_table_key));\n+     bool (*comp) PARAMS ((hash_table_key, hash_table_key));\n      unsigned int size;\n {\n   unsigned int alloc;\n@@ -66,7 +66,7 @@ hash_table_init (table, newfunc, hash, comp)\n \t\t\t\t\t    struct hash_table *,\n \t\t\t\t\t    hash_table_key));\n      unsigned long (*hash) PARAMS ((hash_table_key));\n-     boolean (*comp) PARAMS ((hash_table_key, hash_table_key));\n+     bool (*comp) PARAMS ((hash_table_key, hash_table_key));\n {\n   hash_table_init_n (table, newfunc, hash, comp, DEFAULT_SIZE);\n }\n@@ -87,7 +87,7 @@ struct hash_entry *\n hash_lookup (table, key, create, copy)\n      struct hash_table *table;\n      hash_table_key key;\n-     boolean create;\n+     bool create;\n      hash_table_key (*copy) PARAMS ((struct obstack* memory, \n \t\t\t\t     hash_table_key key));\n {\n@@ -150,7 +150,7 @@ hash_allocate (table, size)\n void\n hash_traverse (table, func, info)\n      struct hash_table *table;\n-     boolean (*func) PARAMS ((struct hash_entry *, hash_table_key));\n+     bool (*func) PARAMS ((struct hash_entry *, hash_table_key));\n      PTR info;\n {\n   unsigned int i;\n@@ -193,7 +193,7 @@ string_hash (k)\n /* Compare two strings.  Return non-zero iff the two strings are\n    the same.  */\n \n-boolean\n+bool\n string_compare (k1, k2)\n      hash_table_key k1;\n      hash_table_key k2;"}, {"sha": "52bee12f2af76bfaa69811dafc509716003231dd", "filename": "gcc/hash.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -25,12 +25,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"obstack.h\"\n \n-#undef false\n-#undef true\n-#undef boolean\n-\n-typedef enum {false, true} boolean;\n-\n typedef PTR hash_table_key;\n \n /* Hash table routines.  There is no way to free up a hash table.  */\n@@ -70,7 +64,7 @@ struct hash_table\n   /* A function to compute the hash code for a key in the hash table.  */\n   unsigned long (*hash) PARAMS ((hash_table_key));\n   /* A function to compare two keys.  */\n-  boolean (*comp) PARAMS ((hash_table_key, hash_table_key));\n+  bool (*comp) PARAMS ((hash_table_key, hash_table_key));\n   /* An obstack for this hash table.  */\n   struct obstack memory;\n };\n@@ -82,7 +76,7 @@ extern void hash_table_init\n \t\t\t\t   struct hash_table *,\n \t\t\t\t   hash_table_key),\n \t   unsigned long (*hash) (hash_table_key),\n-\t   boolean (*comp) (hash_table_key, hash_table_key)));\n+\t   bool (*comp) (hash_table_key, hash_table_key)));\n \n /* Initialize a hash table specifying a size.  */\n extern void hash_table_init_n\n@@ -91,7 +85,7 @@ extern void hash_table_init_n\n \t\t\t\t   struct hash_table *,\n \t\t\t\t   hash_table_key),\n \t   unsigned long (*hash) (hash_table_key),\n-\t   boolean (*comp) (hash_table_key, hash_table_key),\n+\t   bool (*comp) (hash_table_key, hash_table_key),\n \t   unsigned int size));\n \n /* Free up a hash table.  */\n@@ -102,7 +96,7 @@ extern void hash_table_free PARAMS ((struct hash_table *));\n    COPY is non-NULL, it is used to copy the KEY before storing it in\n    the hash table.  */\n extern struct hash_entry *hash_lookup\n-  PARAMS ((struct hash_table *, hash_table_key key, boolean create,\n+  PARAMS ((struct hash_table *, hash_table_key key, bool create,\n \t   hash_table_key (*copy)(struct obstack*, hash_table_key)));\n \n /* Base method for creating a hash table entry.  */\n@@ -118,15 +112,15 @@ extern PTR hash_allocate PARAMS ((struct hash_table *,\n    element.  If the function returns false, the traversal stops.  The\n    INFO argument is passed to the function.  */\n extern void hash_traverse PARAMS ((struct hash_table *,\n-\t\t\t\t   boolean (*) (struct hash_entry *,\n+\t\t\t\t   bool (*) (struct hash_entry *,\n \t\t\t\t\t\thash_table_key),\n \t\t\t\t   hash_table_key info));\n \n /* Hash a string K, which is really of type `char*'.  */\n extern unsigned long string_hash PARAMS ((hash_table_key k));\n \n /* Compare two strings K1, K2 which are really of type `char*'.  */\n-extern boolean string_compare PARAMS ((hash_table_key k1, \n+extern bool string_compare PARAMS ((hash_table_key k1, \n \t\t\t\t       hash_table_key k2));\n \n /* Copy a string K, which is really of type `char*'.  */"}, {"sha": "48ce71547562b36a4e78637473344cfc426780f5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,3 +1,8 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* java/class.c, java/decl.c, java/java-tree.h: Replace all\n+\tuses of 'boolean' with 'bool'.\n+\n 2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n \n \t* lang-specs.h: Add zero initializer for cpp_spec field to all"}, {"sha": "be2e5a4c23eb777651fe908fbbb4ab07cce2ee2f", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -627,7 +627,7 @@ java_hash_hash_tree_node (k)\n   return (long) k;\n }\n \n-boolean\n+bool\n java_hash_compare_tree_node (k1, k2)\n      hash_table_key k1;\n      hash_table_key k2;"}, {"sha": "afb6bacc3a019ffa132f08553a7157414f187d62", "filename": "gcc/java/config-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconfig-lang.in?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,6 +1,6 @@\n # Top level configure fragment for the GNU compiler for the Java(TM)\n # language.\n-#  Copyright (C) 1994, 1995, 2000 Free Software Foundation, Inc.\n+#  Copyright (C) 1994, 1995, 2000, 2001 Free Software Foundation, Inc.\n \n #This file is part of GNU CC.\n \n@@ -39,4 +39,4 @@ stagestuff=\"jc1\\$(exeext) gcj\\$(exeext) jvgenmain\\$(exeext) gcjh\\$(exeext) jv-sc\n \n target_libs=${libgcj}\n lang_dirs=fastjar\n-build_by_default=no\n+#build_by_default=no"}, {"sha": "739ddee285dedf233d7c469762fe3818a70da25a", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -47,7 +47,7 @@ static tree push_jvm_slot PARAMS ((int, tree));\n static tree lookup_name_current_level PARAMS ((tree));\n static tree push_promoted_type PARAMS ((const char *, tree));\n static struct binding_level *make_binding_level PARAMS ((void));\n-static boolean emit_init_test_initialization PARAMS ((struct hash_entry *,\n+static bool emit_init_test_initialization PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t      hash_table_key));\n static tree create_primitive_vtable PARAMS ((const char *));\n static tree check_local_named_variable PARAMS ((tree, tree, int, int *));\n@@ -1690,7 +1690,7 @@ build_result_decl (fndecl)\n /* Called for every element in DECL_FUNCTION_INIT_TEST_TABLE in order\n    to emit initialization code for each test flag.  */\n \n-static boolean\n+static bool\n emit_init_test_initialization (entry, key)\n   struct hash_entry *entry;\n   hash_table_key key ATTRIBUTE_UNUSED;"}, {"sha": "9273ca4ec6f1f05b83c001e9e1b6fcea5e3342c5", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1109,7 +1109,7 @@ extern void safe_layout_class PARAMS ((tree));\n \n extern tree get_boehm_type_descriptor PARAMS ((tree));\n extern unsigned long java_hash_hash_tree_node PARAMS ((hash_table_key));\n-extern boolean java_hash_compare_tree_node PARAMS ((hash_table_key, \n+extern bool java_hash_compare_tree_node PARAMS ((hash_table_key, \n \t\t\t\t\t\t    hash_table_key));\n extern void java_check_methods PARAMS ((tree));\n extern void init_jcf_parse PARAMS((void));"}, {"sha": "e73524e56dab38768a598981de7504bcf5877327", "filename": "gcc/system.h", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,6 +1,6 @@\n /* Get common system includes and various definitions and declarations based\n    on autoconf macros.\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -43,6 +43,10 @@ Boston, MA 02111-1307, USA.  */\n # endif\n #endif\n \n+#ifdef HAVE_STDDEF_H\n+# include <stddef.h>\n+#endif\n+\n #include <stdio.h>\n \n /* Define a generic NULL if one hasn't already been defined.  */\n@@ -355,6 +359,14 @@ extern void abort PARAMS ((void));\n   ((GCC_VERSION >= 2007) || (__STDC_VERSION__ >= 199901L))\n #endif\n \n+/* 1 if we have _Bool.  */\n+#ifndef HAVE__BOOL\n+# define HAVE__BOOL \\\n+   ((GCC_VERSION >= 3000) || (__STDC_VERSION__ >= 199901L))\n+#endif\n+\n+\n+\n /* Define a STRINGIFY macro that's right for ANSI or traditional C.\n    Note: if the argument passed to STRINGIFY is itself a macro, eg\n    #define foo bar, STRINGIFY(foo) will produce \"foo\", not \"bar\".\n@@ -533,4 +545,27 @@ extern void *alloca (__SIZE_TYPE__);\n #endif /* ! __FUNCTION__ */\n #endif\n \n+/* Provide some sort of boolean type.  We use stdbool.h if it's\n+  available.  This is dead last because various system headers might\n+  mess us up.  */\n+#undef bool\n+#undef true\n+#undef false\n+#undef TRUE\n+#undef FALSE\n+\n+#ifdef HAVE_STDBOOL_H\n+# include <stdbool.h>\n+#else\n+# if !HAVE__BOOL\n+typedef char _Bool;\n+# endif\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+#define TRUE true\n+#define FALSE false\n+\n #endif /* __GCC_SYSTEM_H__ */"}, {"sha": "1b797e104a434766d94906eeedfd627028eeb749", "filename": "gcc/tlink.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6edb99e92ed0d198857f104e81d98c57ad5d768/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=d6edb99e92ed0d198857f104e81d98c57ad5d768", "patch": "@@ -1,7 +1,7 @@\n /* Scan linker error messages for missing template instantiations and provide\n    them.\n \n-   Copyright (C) 1995, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Jason Merrill (jason@cygnus.com).\n \n This file is part of GNU CC.\n@@ -72,7 +72,7 @@ static struct hash_entry * symbol_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\tstruct hash_table *,\n \t\t\t\t\t\t\thash_table_key));\n static struct symbol_hash_entry * symbol_hash_lookup PARAMS ((const char *,\n-\t\t\t\t\t\t\t      boolean));\n+\t\t\t\t\t\t\t      bool));\n static struct hash_entry * file_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t      struct hash_table *,\n \t\t\t\t\t\t      hash_table_key));\n@@ -81,7 +81,7 @@ static struct hash_entry * demangled_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\t   struct hash_table *,\n \t\t\t\t\t\t\t   hash_table_key));\n static struct demangled_hash_entry *\n-  demangled_hash_lookup PARAMS ((const char *, boolean));\n+  demangled_hash_lookup PARAMS ((const char *, bool));\n static void symbol_push PARAMS ((symbol *));\n static symbol * symbol_pop PARAMS ((void));\n static void file_push PARAMS ((file *));\n@@ -129,7 +129,7 @@ symbol_hash_newfunc (entry, table, string)\n static struct symbol_hash_entry *\n symbol_hash_lookup (string, create)\n      const char *string;\n-     boolean create;\n+     bool create;\n {\n   return ((struct symbol_hash_entry *)\n \t  hash_lookup (&symbol_table, (const hash_table_key) string, \n@@ -201,7 +201,7 @@ demangled_hash_newfunc (entry, table, string)\n static struct demangled_hash_entry *\n demangled_hash_lookup (string, create)\n      const char *string;\n-     boolean create;\n+     bool create;\n {\n   return ((struct demangled_hash_entry *)\n \t  hash_lookup (&demangled_table, (const hash_table_key) string, "}]}