{"sha": "b4f9786b9a691f2c8d24a16d9bfe26c37f747d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmOTc4NmI5YTY5MWYyYzhkMjRhMTZkOWJmZTI2YzM3Zjc0N2Q1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-03-05T09:38:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-03-05T09:38:48Z"}, "message": "re PR middle-end/56461 (GCC is leaking lots of memory)\n\n\tPR middle-end/56461\n\t* tree-ssa-loop-niter.c (bb_queue): Remove typedef.\n\t(discover_iteration_bound_by_body_walk): Change queues to\n\tvec<vec<basic_block> > and queue to vec<basic_block>.  Fix up\n\tspelling in comment.  Call safe_push on queues[bound_index] directly.\n\tRelease queues[queue_index] in every iteration unconditionally.\n\tRelease bounds vector.\n\nFrom-SVN: r196454", "tree": {"sha": "834e019a6c075db2d3f4c7133db8863fbc312071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/834e019a6c075db2d3f4c7133db8863fbc312071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93675444333665dd3f22e6d19c914e3247d19312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93675444333665dd3f22e6d19c914e3247d19312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93675444333665dd3f22e6d19c914e3247d19312"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "3a1b71bf7bdfef3eda3916035097791c2c4d6f3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4f9786b9a691f2c8d24a16d9bfe26c37f747d57", "patch": "@@ -1,5 +1,13 @@\n 2013-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/56461\n+\t* tree-ssa-loop-niter.c (bb_queue): Remove typedef.\n+\t(discover_iteration_bound_by_body_walk): Change queues to\n+\tvec<vec<basic_block> > and queue to vec<basic_block>.  Fix up\n+\tspelling in comment.  Call safe_push on queues[bound_index] directly.\n+\tRelease queues[queue_index] in every iteration unconditionally.\n+\tRelease bounds vector.\n+\n \tPR middle-end/56461\n \t* tree-vect-stmts.c (free_stmt_vec_info_vec): Call\n \tfree_stmt_vec_info on any left-over stmt_vec_info in the vector."}, {"sha": "ba06b0c693670cec7218e6b9f1ff59bb4fa94f9a", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f9786b9a691f2c8d24a16d9bfe26c37f747d57/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=b4f9786b9a691f2c8d24a16d9bfe26c37f747d57", "patch": "@@ -3007,9 +3007,6 @@ bound_index (vec<double_int> bounds, double_int bound)\n   gcc_unreachable ();\n }\n \n-/* Used to hold vector of queues of basic blocks bellow.  */\n-typedef vec<basic_block> bb_queue;\n-\n /* We recorded loop bounds only for statements dominating loop latch (and thus\n    executed each loop iteration).  If there are any bounds on statements not\n    dominating the loop latch we can improve the estimate by walking the loop\n@@ -3022,8 +3019,8 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n   pointer_map_t *bb_bounds;\n   struct nb_iter_bound *elt;\n   vec<double_int> bounds = vNULL;\n-  vec<bb_queue> queues = vNULL;\n-  bb_queue queue = bb_queue();\n+  vec<vec<basic_block> > queues = vNULL;\n+  vec<basic_block> queue = vNULL;\n   ptrdiff_t queue_index;\n   ptrdiff_t latch_index = 0;\n   pointer_map_t *block_priority;\n@@ -3096,7 +3093,7 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n      present in the path and we look for path with largest smallest bound\n      on it.\n \n-     To avoid the need for fibonaci heap on double ints we simply compress\n+     To avoid the need for fibonacci heap on double ints we simply compress\n      double ints into indexes to BOUNDS array and then represent the queue\n      as arrays of queues for every index.\n      Index of BOUNDS.length() means that the execution of given BB has\n@@ -3162,16 +3159,11 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n \t\t    }\n \t\t    \n \t\t  if (insert)\n-\t\t    {\n-\t\t      bb_queue queue2 = queues[bound_index];\n-\t\t      queue2.safe_push (e->dest);\n-\t\t      queues[bound_index] = queue2;\n-\t\t    }\n+\t\t    queues[bound_index].safe_push (e->dest);\n \t\t}\n \t    }\n \t}\n-      else\n-\tqueues[queue_index].release ();\n+      queues[queue_index].release ();\n     }\n \n   gcc_assert (latch_index >= 0);\n@@ -3187,6 +3179,7 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n     }\n \n   queues.release ();\n+  bounds.release ();\n   pointer_map_destroy (bb_bounds);\n   pointer_map_destroy (block_priority);\n }"}]}