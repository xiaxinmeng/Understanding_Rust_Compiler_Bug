{"sha": "77923c29383974626f7eb30cb69abb20db3cb2bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5MjNjMjkzODM5NzQ2MjZmN2ViMzBjYjY5YWJiMjBkYjNjYjJiYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-09-15T19:09:27Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-09-15T19:09:27Z"}, "message": "re PR target/23139 (-pedantic -ffast-math breaks working code)\n\nfixincludes:\n\tPR c++/23139\n\t* inclhack.def (huge_val_hex, huge_valf_hex, huge_vall_hex): New\n\tfixes.\n\t* fixincl.x: Regenerate.\n\t* tests/base/bits/huge_val.h: New file.\n\ngcc/testsuite:\n\t* g++.dg/warn/huge-val1.C: New test.\n\nFrom-SVN: r104315", "tree": {"sha": "09c7d56df5e7852774bb3a461cda54ed55c02121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09c7d56df5e7852774bb3a461cda54ed55c02121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77923c29383974626f7eb30cb69abb20db3cb2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77923c29383974626f7eb30cb69abb20db3cb2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77923c29383974626f7eb30cb69abb20db3cb2bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77923c29383974626f7eb30cb69abb20db3cb2bc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451e92db80435a2f60aa2483b29647ba4931d7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451e92db80435a2f60aa2483b29647ba4931d7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451e92db80435a2f60aa2483b29647ba4931d7f4"}], "stats": {"total": 277, "additions": 270, "deletions": 7}, "files": [{"sha": "a01267debe16ab816438b86af5031a26c1539f09", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=77923c29383974626f7eb30cb69abb20db3cb2bc", "patch": "@@ -1,3 +1,11 @@\n+2005-09-15  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/23139\n+\t* inclhack.def (huge_val_hex, huge_valf_hex, huge_vall_hex): New\n+\tfixes.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/bits/huge_val.h: New file.\n+\n 2005-08-14  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* All files: Update with new FSF address."}, {"sha": "ae1cda2e823cc184590ab018353458a742daff13", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 151, "deletions": 7, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=77923c29383974626f7eb30cb69abb20db3cb2bc", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Friday June 24, 2005 at 01:40:52 PM EDT\n+ * It has been AutoGen-ed  Thursday September 15, 2005 at 06:55:23 PM UTC\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Fri Jun 24 13:40:52 EDT 2005\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Sep 15 18:55:24 UTC 2005\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 190 fixup descriptions.\n+ * This file contains 193 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -36,8 +36,8 @@\n  *  You should have received a copy of the GNU General Public License\n  *  along with inclhack.  See the file \"COPYING\".  If not,\n  *  write to:  The Free Software Foundation, Inc.,\n- *             51 Franklin Street, Fifth Floor,\n- *             Boston,  MA  02110-1301, USA.\n+ *             59 Temple Place - Suite 330,\n+ *             Boston,  MA  02111-1307, USA.\n  */\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -2911,6 +2911,132 @@ static const char* apzHpux_SystimePatch[] = {\n     \"struct sigevent;\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Huge_Val_Hex fix\n+ */\n+tSCC zHuge_Val_HexName[] =\n+     \"huge_val_hex\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHuge_Val_HexList[] =\n+  \"|bits/huge_val.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHuge_Val_HexMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHuge_Val_HexSelect0[] =\n+       \"^#[ \\t]*define[ \\t]*HUGE_VAL[ \\t].*0x1\\\\.0p.*\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zHuge_Val_HexBypass0[] =\n+       \"__builtin_huge_val\";\n+\n+#define    HUGE_VAL_HEX_TEST_CT  2\n+static tTestDesc aHuge_Val_HexTests[] = {\n+  { TT_NEGREP,   zHuge_Val_HexBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zHuge_Val_HexSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Huge_Val_Hex\n+ */\n+static const char* apzHuge_Val_HexPatch[] = {\n+    \"format\",\n+    \"#define HUGE_VAL (__builtin_huge_val())\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Huge_Valf_Hex fix\n+ */\n+tSCC zHuge_Valf_HexName[] =\n+     \"huge_valf_hex\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHuge_Valf_HexList[] =\n+  \"|bits/huge_val.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHuge_Valf_HexMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHuge_Valf_HexSelect0[] =\n+       \"^#[ \\t]*define[ \\t]*HUGE_VALF[ \\t].*0x1\\\\.0p.*\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zHuge_Valf_HexBypass0[] =\n+       \"__builtin_huge_valf\";\n+\n+#define    HUGE_VALF_HEX_TEST_CT  2\n+static tTestDesc aHuge_Valf_HexTests[] = {\n+  { TT_NEGREP,   zHuge_Valf_HexBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zHuge_Valf_HexSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Huge_Valf_Hex\n+ */\n+static const char* apzHuge_Valf_HexPatch[] = {\n+    \"format\",\n+    \"#define HUGE_VALF (__builtin_huge_valf())\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Huge_Vall_Hex fix\n+ */\n+tSCC zHuge_Vall_HexName[] =\n+     \"huge_vall_hex\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHuge_Vall_HexList[] =\n+  \"|bits/huge_val.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHuge_Vall_HexMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHuge_Vall_HexSelect0[] =\n+       \"^#[ \\t]*define[ \\t]*HUGE_VALL[ \\t].*0x1\\\\.0p.*\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zHuge_Vall_HexBypass0[] =\n+       \"__builtin_huge_vall\";\n+\n+#define    HUGE_VALL_HEX_TEST_CT  2\n+static tTestDesc aHuge_Vall_HexTests[] = {\n+  { TT_NEGREP,   zHuge_Vall_HexBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zHuge_Vall_HexSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Huge_Vall_Hex\n+ */\n+static const char* apzHuge_Vall_HexPatch[] = {\n+    \"format\",\n+    \"#define HUGE_VALL (__builtin_huge_vall())\\n\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Int_Abort_Free_And_Exit fix\n@@ -7722,9 +7848,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          229\n+#define REGEX_COUNT          235\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            190\n+#define FIX_COUNT            193\n \n /*\n  *  Enumerate the fixes\n@@ -7798,6 +7924,9 @@ typedef enum {\n     HPUX_HTONL_FIXIDX,\n     HPUX_LONG_DOUBLE_FIXIDX,\n     HPUX_SYSTIME_FIXIDX,\n+    HUGE_VAL_HEX_FIXIDX,\n+    HUGE_VALF_HEX_FIXIDX,\n+    HUGE_VALL_HEX_FIXIDX,\n     INT_ABORT_FREE_AND_EXIT_FIXIDX,\n     IO_QUOTES_DEF_FIXIDX,\n     IO_QUOTES_USE_FIXIDX,\n@@ -8263,6 +8392,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      HPUX_SYSTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aHpux_SystimeTests,   apzHpux_SystimePatch, 0 },\n \n+  {  zHuge_Val_HexName,    zHuge_Val_HexList,\n+     apzHuge_Val_HexMachs,\n+     HUGE_VAL_HEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHuge_Val_HexTests,   apzHuge_Val_HexPatch, 0 },\n+\n+  {  zHuge_Valf_HexName,    zHuge_Valf_HexList,\n+     apzHuge_Valf_HexMachs,\n+     HUGE_VALF_HEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHuge_Valf_HexTests,   apzHuge_Valf_HexPatch, 0 },\n+\n+  {  zHuge_Vall_HexName,    zHuge_Vall_HexList,\n+     apzHuge_Vall_HexMachs,\n+     HUGE_VALL_HEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHuge_Vall_HexTests,   apzHuge_Vall_HexPatch, 0 },\n+\n   {  zInt_Abort_Free_And_ExitName,    zInt_Abort_Free_And_ExitList,\n      apzInt_Abort_Free_And_ExitMachs,\n      INT_ABORT_FREE_AND_EXIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "3cfb3e099e30c8a4cdb71365039fe8c5b884f04a", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=77923c29383974626f7eb30cb69abb20db3cb2bc", "patch": "@@ -1680,6 +1680,54 @@ fix = {\n };\n \n \n+/*\n+ *  Fix glibc definition of HUGE_VAL in terms of hex floating point constant\n+ */\n+fix = {\n+    hackname  = huge_val_hex;\n+    files     = bits/huge_val.h;\n+    select    = \"^#[ \\t]*define[ \\t]*HUGE_VAL[ \\t].*0x1\\\\.0p.*\";\n+    bypass    = \"__builtin_huge_val\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"#define HUGE_VAL (__builtin_huge_val())\\n\";\n+\n+    test_text = \"# define HUGE_VAL\\t(__extension__ 0x1.0p2047)\";\n+};\n+\n+\n+/*\n+ *  Fix glibc definition of HUGE_VALF in terms of hex floating point constant\n+ */\n+fix = {\n+    hackname  = huge_valf_hex;\n+    files     = bits/huge_val.h;\n+    select    = \"^#[ \\t]*define[ \\t]*HUGE_VALF[ \\t].*0x1\\\\.0p.*\";\n+    bypass    = \"__builtin_huge_valf\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"#define HUGE_VALF (__builtin_huge_valf())\\n\";\n+\n+    test_text = \"#  define HUGE_VALF (__extension__ 0x1.0p255f)\";\n+};\n+\n+\n+/*\n+ *  Fix glibc definition of HUGE_VALL in terms of hex floating point constant\n+ */\n+fix = {\n+    hackname  = huge_vall_hex;\n+    files     = bits/huge_val.h;\n+    select    = \"^#[ \\t]*define[ \\t]*HUGE_VALL[ \\t].*0x1\\\\.0p.*\";\n+    bypass    = \"__builtin_huge_vall\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"#define HUGE_VALL (__builtin_huge_vall())\\n\";\n+\n+    test_text = \"#  define HUGE_VALL (__extension__ 0x1.0p32767L)\";\n+};\n+\n+\n /*\n  *  Fix return type of abort and free\n  */"}, {"sha": "f8bb0495b9d81e84b67ea32e5cc6265a2e467f9d", "filename": "fixincludes/tests/base/bits/huge_val.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2Ftests%2Fbase%2Fbits%2Fhuge_val.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77923c29383974626f7eb30cb69abb20db3cb2bc/fixincludes%2Ftests%2Fbase%2Fbits%2Fhuge_val.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fbits%2Fhuge_val.h?ref=77923c29383974626f7eb30cb69abb20db3cb2bc", "patch": "@@ -0,0 +1,27 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/bits/huge_val.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( HUGE_VAL_HEX_CHECK )\n+#define HUGE_VAL (__builtin_huge_val())\n+\n+#endif  /* HUGE_VAL_HEX_CHECK */\n+\n+\n+#if defined( HUGE_VALF_HEX_CHECK )\n+#define HUGE_VALF (__builtin_huge_valf())\n+\n+#endif  /* HUGE_VALF_HEX_CHECK */\n+\n+\n+#if defined( HUGE_VALL_HEX_CHECK )\n+#define HUGE_VALL (__builtin_huge_vall())\n+\n+#endif  /* HUGE_VALL_HEX_CHECK */"}, {"sha": "39fc06a81d7818cfea30a79a9273aba72330dabc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77923c29383974626f7eb30cb69abb20db3cb2bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77923c29383974626f7eb30cb69abb20db3cb2bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77923c29383974626f7eb30cb69abb20db3cb2bc", "patch": "@@ -1,3 +1,8 @@\n+2005-09-15  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/23139\n+\t* g++.dg/warn/huge-val1.C: New test.\n+\n 2005-09-15  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13140"}, {"sha": "dfa89a660a54cc6cd29d888b29c4fad5fc9e9f72", "filename": "gcc/testsuite/g++.dg/warn/huge-val1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77923c29383974626f7eb30cb69abb20db3cb2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fhuge-val1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77923c29383974626f7eb30cb69abb20db3cb2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fhuge-val1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fhuge-val1.C?ref=77923c29383974626f7eb30cb69abb20db3cb2bc", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/23139: HUGE_VAL definition should be accepted with -pedantic.\n+// Origin: Joseph Myers <joseph@codesourcery.com>\n+// { dg-do link }\n+// { dg-options \"-pedantic-errors\" }\n+\n+#include <math.h>\n+\n+double d = HUGE_VAL;\n+#ifdef HUGE_VALF\n+float f = HUGE_VALF;\n+#endif\n+#ifdef HUGE_VALL\n+long double l = HUGE_VALL;\n+#endif\n+\n+extern void link_failure ();\n+\n+int\n+main ()\n+{\n+  if (HUGE_VAL != __builtin_huge_val ())\n+    link_failure ();\n+#ifdef HUGE_VALF\n+  if (HUGE_VALF != __builtin_huge_valf ())\n+    link_failure ();\n+#endif\n+#ifdef HUGE_VALL\n+  if (HUGE_VALL != __builtin_huge_vall ())\n+    link_failure ();\n+#endif\n+}"}]}