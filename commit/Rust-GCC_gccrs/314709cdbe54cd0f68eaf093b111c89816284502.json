{"sha": "314709cdbe54cd0f68eaf093b111c89816284502", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0NzA5Y2RiZTU0Y2QwZjY4ZWFmMDkzYjExMWM4OTgxNjI4NDUwMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:45:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:45:20Z"}, "message": "Use combined_fn in tree-ssa-reassoc.c\n\nAnother patch to extend uses of built_in_function to combined_fn, this time\nin tree-ssa-reassoc.c.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* tree-ssa-reassoc.c: Include case-cfn-macros.h.\n\t(stmt_is_power_of_op): Use combined_fn instead of built-in codes.\n\t(decrement_power, acceptable_pow_call): Likewise.\n\t(attempt_builtin_copysign): Likewise.\n\nFrom-SVN: r230480", "tree": {"sha": "33f1acf473eb37db730d3aa201a74bf7a2f7dce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33f1acf473eb37db730d3aa201a74bf7a2f7dce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314709cdbe54cd0f68eaf093b111c89816284502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314709cdbe54cd0f68eaf093b111c89816284502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314709cdbe54cd0f68eaf093b111c89816284502", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314709cdbe54cd0f68eaf093b111c89816284502/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c0a9e1277571a16e711d5a60ed11713d9109b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0a9e1277571a16e711d5a60ed11713d9109b98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0a9e1277571a16e711d5a60ed11713d9109b98"}], "stats": {"total": 93, "additions": 43, "deletions": 50}, "files": [{"sha": "323450d4c8dad16b867e6d95d5d23c696f3780bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314709cdbe54cd0f68eaf093b111c89816284502/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314709cdbe54cd0f68eaf093b111c89816284502/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=314709cdbe54cd0f68eaf093b111c89816284502", "patch": "@@ -1,3 +1,10 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-ssa-reassoc.c: Include case-cfn-macros.h.\n+\t(stmt_is_power_of_op): Use combined_fn instead of built-in codes.\n+\t(decrement_power, acceptable_pow_call): Likewise.\n+\t(attempt_builtin_copysign): Likewise.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vrp.c: Include case-cfn-macros.h."}, {"sha": "7be934d9dde2fc2969e623b4f6d628c8a75f0372", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314709cdbe54cd0f68eaf093b111c89816284502/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314709cdbe54cd0f68eaf093b111c89816284502/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=314709cdbe54cd0f68eaf093b111c89816284502", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"builtins.h\"\n #include \"gimplify.h\"\n+#include \"case-cfn-macros.h\"\n \n /*  This is a simple global reassociation pass.  It is, in part, based\n     on the LLVM pass of the same name (They do some things more/less\n@@ -1038,21 +1039,13 @@ oecount_cmp (const void *p1, const void *p2)\n static bool\n stmt_is_power_of_op (gimple *stmt, tree op)\n {\n-  tree fndecl;\n-\n   if (!is_gimple_call (stmt))\n     return false;\n \n-  fndecl = gimple_call_fndecl (stmt);\n-\n-  if (!fndecl\n-      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n-    return false;\n-\n-  switch (DECL_FUNCTION_CODE (gimple_call_fndecl (stmt)))\n+  switch (gimple_call_combined_fn (stmt))\n     {\n-    CASE_FLT_FN (BUILT_IN_POW):\n-    CASE_FLT_FN (BUILT_IN_POWI):\n+    CASE_CFN_POW:\n+    CASE_CFN_POWI:\n       return (operand_equal_p (gimple_call_arg (stmt, 0), op, 0));\n       \n     default:\n@@ -1071,17 +1064,17 @@ decrement_power (gimple *stmt)\n   HOST_WIDE_INT power;\n   tree arg1;\n \n-  switch (DECL_FUNCTION_CODE (gimple_call_fndecl (stmt)))\n+  switch (gimple_call_combined_fn (stmt))\n     {\n-    CASE_FLT_FN (BUILT_IN_POW):\n+    CASE_CFN_POW:\n       arg1 = gimple_call_arg (stmt, 1);\n       c = TREE_REAL_CST (arg1);\n       power = real_to_integer (&c) - 1;\n       real_from_integer (&cint, VOIDmode, power, SIGNED);\n       gimple_call_set_arg (stmt, 1, build_real (TREE_TYPE (arg1), cint));\n       return power;\n \n-    CASE_FLT_FN (BUILT_IN_POWI):\n+    CASE_CFN_POWI:\n       arg1 = gimple_call_arg (stmt, 1);\n       power = TREE_INT_CST_LOW (arg1) - 1;\n       gimple_call_set_arg (stmt, 1, build_int_cst (TREE_TYPE (arg1), power));\n@@ -3940,7 +3933,7 @@ break_up_subtract (gimple *stmt, gimple_stmt_iterator *gsip)\n static bool\n acceptable_pow_call (gimple *stmt, tree *base, HOST_WIDE_INT *exponent)\n {\n-  tree fndecl, arg1;\n+  tree arg1;\n   REAL_VALUE_TYPE c, cint;\n \n   if (!reassoc_insert_powi_p\n@@ -3949,15 +3942,9 @@ acceptable_pow_call (gimple *stmt, tree *base, HOST_WIDE_INT *exponent)\n       || !has_single_use (gimple_call_lhs (stmt)))\n     return false;\n \n-  fndecl = gimple_call_fndecl (stmt);\n-\n-  if (!fndecl\n-      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n-    return false;\n-\n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  switch (gimple_call_combined_fn (stmt))\n     {\n-    CASE_FLT_FN (BUILT_IN_POW):\n+    CASE_CFN_POW:\n       if (flag_errno_math)\n \treturn false;\n \n@@ -3979,7 +3966,7 @@ acceptable_pow_call (gimple *stmt, tree *base, HOST_WIDE_INT *exponent)\n \n       break;\n \n-    CASE_FLT_FN (BUILT_IN_POWI):\n+    CASE_CFN_POWI:\n       *base = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n \n@@ -4639,35 +4626,40 @@ attempt_builtin_copysign (vec<operand_entry *> *ops)\n \t  && has_single_use (oe->op))\n \t{\n \t  gimple *def_stmt = SSA_NAME_DEF_STMT (oe->op);\n-\t  if (gimple_call_builtin_p (def_stmt, BUILT_IN_NORMAL))\n+\t  if (gcall *old_call = dyn_cast <gcall *> (def_stmt))\n \t    {\n-\t      tree fndecl = gimple_call_fndecl (def_stmt);\n \t      tree arg0, arg1;\n-\t      switch (DECL_FUNCTION_CODE (fndecl))\n+\t      switch (gimple_call_combined_fn (old_call))\n \t\t{\n-\t\tCASE_FLT_FN (BUILT_IN_COPYSIGN):\n-\t\t  arg0 = gimple_call_arg (def_stmt, 0);\n-\t\t  arg1 = gimple_call_arg (def_stmt, 1);\n+\t\tCASE_CFN_COPYSIGN:\n+\t\t  arg0 = gimple_call_arg (old_call, 0);\n+\t\t  arg1 = gimple_call_arg (old_call, 1);\n \t\t  /* The first argument of copysign must be a constant,\n \t\t     otherwise there's nothing to do.  */\n \t\t  if (TREE_CODE (arg0) == REAL_CST)\n \t\t    {\n-\t\t      tree mul = const_binop (MULT_EXPR, TREE_TYPE (cst),\n-\t\t\t\t\t      cst, arg0);\n+\t\t      tree type = TREE_TYPE (arg0);\n+\t\t      tree mul = const_binop (MULT_EXPR, type, cst, arg0);\n \t\t      /* If we couldn't fold to a single constant, skip it.\n \t\t\t That happens e.g. for inexact multiplication when\n \t\t\t -frounding-math.  */\n \t\t      if (mul == NULL_TREE)\n \t\t\tbreak;\n-\t\t      /* Instead of adjusting the old DEF_STMT, let's build\n-\t\t\t a new call to not leak the LHS and prevent keeping\n-\t\t\t bogus debug statements.  DCE will clean up the old\n-\t\t\t call.  */\n-\t\t      gcall *call = gimple_build_call (fndecl, 2, mul, arg1);\n-\t\t      tree lhs = make_ssa_name (TREE_TYPE (arg0));\n-\t\t      gimple_call_set_lhs (call, lhs);\n-\t\t      gimple_set_location (call, gimple_location (def_stmt));\n-\t\t      insert_stmt_after (call, def_stmt);\n+\t\t      /* Instead of adjusting OLD_CALL, let's build a new\n+\t\t\t call to not leak the LHS and prevent keeping bogus\n+\t\t\t debug statements.  DCE will clean up the old call.  */\n+\t\t      gcall *new_call;\n+\t\t      if (gimple_call_internal_p (old_call))\n+\t\t\tnew_call = gimple_build_call_internal\n+\t\t\t  (IFN_COPYSIGN, 2, mul, arg1);\n+\t\t      else\n+\t\t\tnew_call = gimple_build_call\n+\t\t\t  (gimple_call_fndecl (old_call), 2, mul, arg1);\n+\t\t      tree lhs = make_ssa_name (type);\n+\t\t      gimple_call_set_lhs (new_call, lhs);\n+\t\t      gimple_set_location (new_call,\n+\t\t\t\t\t   gimple_location (old_call));\n+\t\t      insert_stmt_after (new_call, old_call);\n \t\t      /* We've used the constant, get rid of it.  */\n \t\t      ops->pop ();\n \t\t      bool cst1_neg = real_isneg (TREE_REAL_CST_PTR (cst));\n@@ -4677,7 +4669,7 @@ attempt_builtin_copysign (vec<operand_entry *> *ops)\n \t\t\t  tree negrhs = make_ssa_name (TREE_TYPE (lhs));\n \t\t\t  gimple *negate_stmt\n \t\t\t    = gimple_build_assign (negrhs, NEGATE_EXPR, lhs);\n-\t\t\t  insert_stmt_after (negate_stmt, call);\n+\t\t\t  insert_stmt_after (negate_stmt, new_call);\n \t\t\t  oe->op = negrhs;\n \t\t\t}\n \t\t      else\n@@ -4686,18 +4678,12 @@ attempt_builtin_copysign (vec<operand_entry *> *ops)\n \t\t\t{\n \t\t\t  fprintf (dump_file, \"Optimizing copysign: \");\n \t\t\t  print_generic_expr (dump_file, cst, 0);\n-\t\t\t  fprintf (dump_file, \" * \");\n-\t\t\t  print_generic_expr (dump_file,\n-\t\t\t\t\t      gimple_call_fn (def_stmt), 0);\n-\t\t\t  fprintf (dump_file, \" (\");\n+\t\t\t  fprintf (dump_file, \" * COPYSIGN (\");\n \t\t\t  print_generic_expr (dump_file, arg0, 0);\n \t\t\t  fprintf (dump_file, \", \");\n \t\t\t  print_generic_expr (dump_file, arg1, 0);\n-\t\t\t  fprintf (dump_file, \") into %s\",\n+\t\t\t  fprintf (dump_file, \") into %sCOPYSIGN (\",\n \t\t\t\t   cst1_neg ? \"-\" : \"\");\n-\t\t\t  print_generic_expr (dump_file,\n-\t\t\t\t\t      gimple_call_fn (def_stmt), 0);\n-\t\t\t  fprintf (dump_file, \" (\");\n \t\t\t  print_generic_expr (dump_file, mul, 0);\n \t\t\t  fprintf (dump_file, \", \");\n \t\t\t  print_generic_expr (dump_file, arg1, 0);"}]}