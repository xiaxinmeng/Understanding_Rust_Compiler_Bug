{"sha": "56a6f1d33f7259fde0efc9c37a1308c306590e8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhNmYxZDMzZjcyNTlmZGUwZWZjOWMzN2ExMzA4YzMwNjU5MGU4Yg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-27T10:39:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-27T10:39:31Z"}, "message": "call.c (set_up_extended_ref_temp): Use VAR_P.\n\n\t* call.c (set_up_extended_ref_temp): Use VAR_P.\n\t* class.c: Use VAR_P throughout.\n\t* constexpr.c (cxx_eval_constant_expression): Use VAR_P.\n\t* cp-array-notation.c (make_triplet_val_inv): Likewise.\n\t* decl.c: Use VAR_OR_FUNCTION_DECL_P or VAR_P\n\tthroughout.\n\t* decl2.c: Likewise.\n\t* error.c (dump_decl): Use VAR_P.\n\t* mangle.c (decl_implicit_alias_p): Likewise.\n\t* parser.c: Use VAR_P throughout.\n\t* pt.c: Likewise.\n\t* semantics.c: Likewise.\n\t* vtable-class-hierarchy.c: Likewise.\n\t* tree.c (handle_abi_tag_attribute): Use VAR_OR_FUNCTION_DECL_P.\n\nFrom-SVN: r225098", "tree": {"sha": "9b8f8950e8b14ba068d68929c14b53ae3b8d5efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b8f8950e8b14ba068d68929c14b53ae3b8d5efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a6f1d33f7259fde0efc9c37a1308c306590e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a6f1d33f7259fde0efc9c37a1308c306590e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a6f1d33f7259fde0efc9c37a1308c306590e8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a6f1d33f7259fde0efc9c37a1308c306590e8b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1cc235523d628789a026065a8b6970c8eb6014e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cc235523d628789a026065a8b6970c8eb6014e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1cc235523d628789a026065a8b6970c8eb6014e"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "c93ef3a338e6d584f1f1277e3c8043122957a7a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -1,3 +1,20 @@\n+2015-06-27  Marek Polacek  <polacek@redhat.com>\n+\n+\t* call.c (set_up_extended_ref_temp): Use VAR_P.\n+\t* class.c: Use VAR_P throughout.\n+\t* constexpr.c (cxx_eval_constant_expression): Use VAR_P.\n+\t* cp-array-notation.c (make_triplet_val_inv): Likewise.\n+\t* decl.c: Use VAR_OR_FUNCTION_DECL_P or VAR_P\n+\tthroughout.\n+\t* decl2.c: Likewise.\n+\t* error.c (dump_decl): Use VAR_P.\n+\t* mangle.c (decl_implicit_alias_p): Likewise.\n+\t* parser.c: Use VAR_P throughout.\n+\t* pt.c: Likewise.\n+\t* semantics.c: Likewise.\n+\t* vtable-class-hierarchy.c: Likewise.\n+\t* tree.c (handle_abi_tag_attribute): Use VAR_OR_FUNCTION_DECL_P.\n+\n 2015-06-27  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* pt.c (check_unstripped_args): Mark parameter as unused."}, {"sha": "e5ed53b8959c179ff7d4451898ccfc67d95bbdb9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -9697,7 +9697,7 @@ set_up_extended_ref_temp (tree decl, tree expr, vec<tree, va_gc> **cleanups,\n     }\n   /* Avoid -Wunused-variable warning (c++/38958).  */\n   if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)\n-      && TREE_CODE (decl) == VAR_DECL)\n+      && VAR_P (decl))\n     TREE_USED (decl) = DECL_READ_P (decl) = true;\n \n   *initp = init;"}, {"sha": "2547b91e0d9ff944f7f55058ea7210c816d2206b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -1399,7 +1399,7 @@ check_tag (tree tag, tree id, tree *tp, abi_tag_data *p)\n \t\t       p->t, tag, *tp))\n \t    inform (location_of (*tp), \"%qT declared here\", *tp);\n \t}\n-      else if (TREE_CODE (p->t) == VAR_DECL)\n+      else if (VAR_P (p->t))\n \t{\n \t  if (warning (OPT_Wabi_tag, \"%qD inherits the %E ABI tag \"\n \t\t       \"that %qT (used in its type) has\", p->t, tag, *tp))\n@@ -1588,7 +1588,7 @@ check_abi_tags (tree t, tree subob)\n void\n check_abi_tags (tree decl)\n {\n-  if (TREE_CODE (decl) == VAR_DECL)\n+  if (VAR_P (decl))\n     check_abi_tags (decl, TREE_TYPE (decl));\n   else if (TREE_CODE (decl) == FUNCTION_DECL\n \t   && !mangle_return_type_p (decl))\n@@ -3040,7 +3040,7 @@ finish_struct_anon_r (tree field, bool complain)\n \t{\n \t  /* We already complained about static data members in\n \t     finish_static_data_member_decl.  */\n-\t  if (complain && TREE_CODE (elt) != VAR_DECL)\n+\t  if (complain && !VAR_P (elt))\n \t    {\n \t      if (is_union)\n \t\tpermerror (input_location,"}, {"sha": "4fce5e0506e74cede8702765762b02a2103bd7c4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -3033,7 +3033,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (TREE_CODE (r) == TARGET_EXPR\n \t  && TREE_CODE (TARGET_EXPR_INITIAL (r)) == CONSTRUCTOR)\n \tr = TARGET_EXPR_INITIAL (r);\n-      if (TREE_CODE (r) == VAR_DECL)\n+      if (VAR_P (r))\n \tif (tree *p = ctx->values->get (r))\n \t  r = *p;\n       if (DECL_P (r))"}, {"sha": "a84efd5b1516dea5ca5d9d7947ac6e95f8a9ec0d", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -87,7 +87,7 @@ make_triplet_val_inv (tree *value)\n {\n   if (TREE_CODE (*value) != INTEGER_CST\n       && TREE_CODE (*value) != PARM_DECL\n-      && TREE_CODE (*value) != VAR_DECL)\n+      && !VAR_P (*value))\n     *value = get_temp_regvar (ptrdiff_type_node, *value);\n }\n "}, {"sha": "959422341b2ef70a7f90463a6d15e0138960f0ce", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -2476,14 +2476,15 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  {\n             struct symtab_node *snode = NULL;\n \n-            if (TREE_CODE (newdecl) == VAR_DECL\n-\t\t&& (TREE_STATIC (olddecl) || TREE_PUBLIC (olddecl) || DECL_EXTERNAL (olddecl)))\n+\t    if (VAR_P (newdecl)\n+\t\t&& (TREE_STATIC (olddecl) || TREE_PUBLIC (olddecl)\n+\t\t    || DECL_EXTERNAL (olddecl)))\n \t      snode = symtab_node::get (olddecl);\n \t    memcpy ((char *) olddecl + sizeof (struct tree_decl_common),\n \t\t    (char *) newdecl + sizeof (struct tree_decl_common),\n \t\t    size - sizeof (struct tree_decl_common)\n \t\t    + TREE_CODE_LENGTH (TREE_CODE (newdecl)) * sizeof (char *));\n-            if (TREE_CODE (newdecl) == VAR_DECL)\n+\t    if (VAR_P (newdecl))\n \t      olddecl->decl_with_vis.symtab_node = snode;\n \t  }\n \t  break;\n@@ -2496,8 +2497,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t}\n     }\n \n-  if (TREE_CODE (newdecl) == FUNCTION_DECL\n-      || TREE_CODE (newdecl) == VAR_DECL)\n+  if (VAR_OR_FUNCTION_DECL_P (newdecl))\n     {\n       if (DECL_EXTERNAL (olddecl)\n \t  || TREE_PUBLIC (olddecl)\n@@ -2522,7 +2522,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    }\n \t}\n \n-      if (TREE_CODE (newdecl) == VAR_DECL\n+      if (VAR_P (newdecl)\n \t  && DECL_THREAD_LOCAL_P (newdecl))\n \tset_decl_tls_model (olddecl, DECL_TLS_MODEL (newdecl));\n     }\n@@ -2559,8 +2559,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n      structure is shared in between newdecl and oldecl.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     DECL_STRUCT_FUNCTION (newdecl) = NULL;\n-  if (TREE_CODE (newdecl) == FUNCTION_DECL\n-      || TREE_CODE (newdecl) == VAR_DECL)\n+  if (VAR_OR_FUNCTION_DECL_P (newdecl))\n     {\n       struct symtab_node *snode = symtab_node::get (newdecl);\n       if (snode)\n@@ -4828,7 +4827,7 @@ start_decl (const cp_declarator *declarator,\n   /* Enter this declaration into the symbol table.  Don't push the plain\n      VAR_DECL for a variable template.  */\n   if (!template_parm_scope_p ()\n-      || TREE_CODE (decl) != VAR_DECL)\n+      || !VAR_P (decl))\n     decl = maybe_push_decl (decl);\n \n   if (processing_template_decl)"}, {"sha": "da531fa12923b9c353c3731eb1122cc70952ff58", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -1005,7 +1005,7 @@ grokfield (const cp_declarator *declarator,\n     return value;\n \n   /* Need to set this before push_template_decl.  */\n-  if (TREE_CODE (value) == VAR_DECL)\n+  if (VAR_P (value))\n     DECL_CONTEXT (value) = current_class_type;\n \n   if (processing_template_decl && VAR_OR_FUNCTION_DECL_P (value))\n@@ -1417,7 +1417,7 @@ cp_omp_mappable_type (tree type)\n     {\n       tree field;\n       for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n-\tif (TREE_CODE (field) == VAR_DECL)\n+\tif (VAR_P (field))\n \t  return false;\n \t/* All fields must have mappable types.  */\n \telse if (TREE_CODE (field) == FIELD_DECL\n@@ -1438,21 +1438,21 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n \n   /* Add implicit \"omp declare target\" attribute if requested.  */\n   if (scope_chain->omp_declare_target_attribute\n-      && ((TREE_CODE (*decl) == VAR_DECL\n+      && ((VAR_P (*decl)\n \t   && (TREE_STATIC (*decl) || DECL_EXTERNAL (*decl)))\n \t  || TREE_CODE (*decl) == FUNCTION_DECL))\n     {\n-      if (TREE_CODE (*decl) == VAR_DECL\n+      if (VAR_P (*decl)\n \t  && DECL_CLASS_SCOPE_P (*decl))\n \terror (\"%q+D static data member inside of declare target directive\",\n \t       *decl);\n-      else if (TREE_CODE (*decl) == VAR_DECL\n+      else if (VAR_P (*decl)\n \t       && (DECL_FUNCTION_SCOPE_P (*decl)\n \t\t   || (current_function_decl && !DECL_EXTERNAL (*decl))))\n \terror (\"%q+D in block scope inside of declare target directive\",\n \t       *decl);\n       else if (!processing_template_decl\n-\t       && TREE_CODE (*decl) == VAR_DECL\n+\t       && VAR_P (*decl)\n \t       && !cp_omp_mappable_type (TREE_TYPE (*decl)))\n \terror (\"%q+D in declare target directive does not have mappable type\",\n \t       *decl);\n@@ -1980,7 +1980,7 @@ mark_needed (tree decl)\n       FOR_EACH_CLONE (clone, decl)\n \tmark_needed (clone);\n     }\n-  else if (TREE_CODE (decl) == VAR_DECL)\n+  else if (VAR_P (decl))\n     {\n       varpool_node *node = varpool_node::get_create (decl);\n       /* C++ frontend use mark_decl_references to force COMDAT variables\n@@ -2179,8 +2179,7 @@ constrain_visibility (tree decl, int visibility, bool tmpl)\n \t  DECL_WEAK (decl) = 0;\n \t  DECL_COMMON (decl) = 0;\n \t  DECL_COMDAT (decl) = false;\n-\t  if (TREE_CODE (decl) == FUNCTION_DECL\n-\t      || TREE_CODE (decl) == VAR_DECL)\n+\t  if (VAR_OR_FUNCTION_DECL_P (decl))\n \t    {\n \t      struct symtab_node *snode = symtab_node::get (decl);\n \n@@ -2643,7 +2642,7 @@ reset_type_linkage_2 (tree type)\n \t  reset_decl_linkage (ti);\n \t}\n       for (tree m = TYPE_FIELDS (type); m; m = DECL_CHAIN (m))\n-\tif (TREE_CODE (m) == VAR_DECL)\n+\tif (VAR_P (m))\n \t  reset_decl_linkage (m);\n       for (tree m = TYPE_METHODS (type); m; m = DECL_CHAIN (m))\n \t{\n@@ -2701,7 +2700,7 @@ tentative_decl_linkage (tree decl)\n \t      DECL_INTERFACE_KNOWN (decl) = 1;\n \t    }\n \t}\n-      else if (TREE_CODE (decl) == VAR_DECL)\n+      else if (VAR_P (decl))\n \tmaybe_commonize_var (decl);\n     }\n }\n@@ -4208,7 +4207,7 @@ no_linkage_error (tree decl)\n \t\t       \"anonymous type, is used but never defined\", decl);\n       else if (DECL_EXTERN_C_P (decl))\n \t/* Allow this; it's pretty common in C.  */;\n-      else if (TREE_CODE (decl) == VAR_DECL)\n+      else if (VAR_P (decl))\n \t/* DRs 132, 319 and 389 seem to indicate types with\n \t   no linkage can only be used to declare extern \"C\"\n \t   entities.  Since it's not always an error in the\n@@ -4227,12 +4226,12 @@ no_linkage_error (tree decl)\n     }\n   else if (cxx_dialect >= cxx11)\n     {\n-      if (TREE_CODE (decl) == VAR_DECL || !DECL_PURE_VIRTUAL_P (decl))\n+      if (VAR_P (decl) || !DECL_PURE_VIRTUAL_P (decl))\n \tpermerror (DECL_SOURCE_LOCATION (decl),\n \t\t   \"%q#D, declared using local type \"\n \t\t   \"%qT, is used but never defined\", decl, t);\n     }\n-  else if (TREE_CODE (decl) == VAR_DECL)\n+  else if (VAR_P (decl))\n     warning_at (DECL_SOURCE_LOCATION (decl), 0, \"type %qT with no linkage \"\n \t\t\"used to declare variable %q#D with linkage\", t, decl);\n   else"}, {"sha": "3710046bbef13d170708a035e09cec67d1e96bcc", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -1065,7 +1065,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n       dump_simple_decl (pp, t, TREE_TYPE (t), flags);\n \n       /* Handle variable template specializations.  */\n-      if (TREE_CODE (t) == VAR_DECL\n+      if (VAR_P (t)\n \t  && DECL_LANG_SPECIFIC (t)\n \t  && DECL_TEMPLATE_INFO (t)\n \t  && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (t)))"}, {"sha": "6246632710f3e065349378a1d9bc4f2eb2f9af12", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -3530,8 +3530,7 @@ decl_implicit_alias_p (tree decl)\n   if (DECL_P (decl) && DECL_ARTIFICIAL (decl)\n       && DECL_IGNORED_P (decl)\n       && (TREE_CODE (decl) == FUNCTION_DECL\n-\t  || (TREE_CODE (decl) == VAR_DECL\n-\t      && TREE_STATIC (decl))))\n+\t  || (VAR_P (decl) && TREE_STATIC (decl))))\n     {\n       symtab_node *n = symtab_node::get (decl);\n       if (n && n->cpp_implicit_alias)"}, {"sha": "acf147c0e5cac35294eb193ed044d3c281ae1f6e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -10571,7 +10571,7 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n     {\n       tree range_temp;\n \n-      if (TREE_CODE (range_expr) == VAR_DECL\n+      if (VAR_P (range_expr)\n \t  && array_of_runtime_bound_p (TREE_TYPE (range_expr)))\n \t/* Can't bind a reference to an array of runtime bound.  */\n \trange_temp = range_expr;\n@@ -28091,7 +28091,7 @@ cp_parser_oacc_data_clause_deviceptr (cp_parser *parser, tree list)\n \t c_parser_omp_var_list_parens should construct a list of\n \t locations to go along with the var list.  */\n \n-      if (TREE_CODE (v) != VAR_DECL)\n+      if (!VAR_P (v))\n \terror_at (loc, \"%qD is not a variable\", v);\n       else if (TREE_TYPE (v) == error_mark_node)\n \t;"}, {"sha": "874f29f02c66fa721b543159c6dc8df3090ca1a9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -2455,7 +2455,7 @@ check_explicit_specialization (tree declarator,\n   switch (tsk)\n     {\n     case tsk_none:\n-      if (processing_specialization && TREE_CODE (decl) != VAR_DECL)\n+      if (processing_specialization && !VAR_P (decl))\n \t{\n \t  specialization = 1;\n \t  SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n@@ -2888,7 +2888,7 @@ check_explicit_specialization (tree declarator,\n \t    /* A specialization is not necessarily COMDAT.  */\n \t    DECL_COMDAT (decl) = (TREE_PUBLIC (decl)\n \t\t\t\t  && DECL_DECLARED_INLINE_P (decl));\n-\t  else if (TREE_CODE (decl) == VAR_DECL)\n+\t  else if (VAR_P (decl))\n \t    DECL_COMDAT (decl) = false;\n \n \t  /* Register this specialization so that we can find it\n@@ -4771,7 +4771,7 @@ push_template_decl_real (tree decl, bool is_friend)\n   is_partial = ((DECL_IMPLICIT_TYPEDEF_P (decl)\n \t\t && TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE\n \t\t && CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (decl)))\n-\t\t|| (TREE_CODE (decl) == VAR_DECL\n+\t\t|| (VAR_P (decl)\n \t\t    && DECL_LANG_SPECIFIC (decl)\n \t\t    && DECL_TEMPLATE_SPECIALIZATION (decl)\n \t\t    && TINFO_USED_TEMPLATE_ID (DECL_TEMPLATE_INFO (decl))));\n@@ -10792,7 +10792,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tif (PRIMARY_TEMPLATE_P (t))\n \t  DECL_PRIMARY_TEMPLATE (r) = r;\n \n-\tif (TREE_CODE (decl) != TYPE_DECL && TREE_CODE (decl) != VAR_DECL)\n+\tif (TREE_CODE (decl) != TYPE_DECL && !VAR_P (decl))\n \t  /* Record this non-type partial instantiation.  */\n \t  register_specialization (r, t,\n \t\t\t\t   DECL_TI_ARGS (DECL_TEMPLATE_RESULT (r)),"}, {"sha": "6a74648321131a09fd5c3ef0d1e052c812169b43", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -3161,7 +3161,7 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n \t  = decl_function_context (containing_function);\n       }\n \n-  if (lambda_expr && TREE_CODE (decl) == VAR_DECL\n+  if (lambda_expr && VAR_P (decl)\n       && DECL_ANON_UNION_VAR_P (decl))\n     {\n       if (complain & tf_error)\n@@ -4281,7 +4281,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \treturn error_mark_node;\n       if (type_dependent_expression_p (t))\n \treturn NULL_TREE;\n-      if (TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != PARM_DECL)\n+      if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n \t{\n \t  if (processing_template_decl)\n \t    return NULL_TREE;\n@@ -4296,7 +4296,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t  return error_mark_node;\n \t}\n       else if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_DEPEND\n-\t       && TREE_CODE (t) == VAR_DECL && DECL_THREAD_LOCAL_P (t))\n+\t       && VAR_P (t) && DECL_THREAD_LOCAL_P (t))\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t    \"%qD is threadprivate variable in %qs clause\", t,\n@@ -5662,7 +5662,7 @@ finish_omp_clauses (tree clauses)\n \n \tcase OMP_CLAUSE_ALIGNED:\n \t  t = OMP_CLAUSE_DECL (c);\n-\t  if (TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != PARM_DECL)\n+\t  if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n \t    {\n \t      if (processing_template_decl)\n \t\tbreak;\n@@ -5732,7 +5732,7 @@ finish_omp_clauses (tree clauses)\n \t    }\n \t  if (t == error_mark_node)\n \t    remove = true;\n-\t  else if (TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != PARM_DECL)\n+\t  else if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n \t    {\n \t      if (processing_template_decl)\n \t\tbreak;\n@@ -5774,7 +5774,7 @@ finish_omp_clauses (tree clauses)\n \t    }\n \t  if (t == error_mark_node)\n \t    remove = true;\n-\t  else if (TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != PARM_DECL)\n+\t  else if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n \t    {\n \t      if (processing_template_decl)\n \t\tbreak;\n@@ -5789,7 +5789,7 @@ finish_omp_clauses (tree clauses)\n \t\t       omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n-\t  else if (TREE_CODE (t) == VAR_DECL && DECL_THREAD_LOCAL_P (t))\n+\t  else if (VAR_P (t) && DECL_THREAD_LOCAL_P (t))\n \t    {\n \t      error (\"%qD is threadprivate variable in %qs clause\", t,\n \t\t     omp_clause_code_name[OMP_CLAUSE_CODE (c)]);"}, {"sha": "272fb2c99b2e4658593b2e55b2b3c8e229bdb49b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -3683,8 +3683,7 @@ handle_abi_tag_attribute (tree* node, tree name, tree args,\n     }\n   else\n     {\n-      if (TREE_CODE (*node) != FUNCTION_DECL\n-\t  && TREE_CODE (*node) != VAR_DECL)\n+      if (!VAR_OR_FUNCTION_DECL_P (*node))\n \t{\n \t  error (\"%qE attribute applied to non-function, non-variable %qD\",\n \t\t name, *node);"}, {"sha": "2c59f14f38970142a752810199770aad8d35936d", "filename": "gcc/cp/vtable-class-hierarchy.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fvtable-class-hierarchy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a6f1d33f7259fde0efc9c37a1308c306590e8b/gcc%2Fcp%2Fvtable-class-hierarchy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.c?ref=56a6f1d33f7259fde0efc9c37a1308c306590e8b", "patch": "@@ -557,11 +557,11 @@ register_construction_vtables (tree base_class, tree record_type,\n                   if (TREE_OPERAND (value, 0))\n                     val_vtbl_decl = TREE_OPERAND (value, 0);\n \n-                  while (TREE_CODE (val_vtbl_decl) != VAR_DECL\n+                  while (!VAR_P (val_vtbl_decl)\n                          && TREE_OPERAND (val_vtbl_decl, 0))\n                     val_vtbl_decl = TREE_OPERAND (val_vtbl_decl, 0);\n \n-                  gcc_assert (TREE_CODE (val_vtbl_decl) == VAR_DECL);\n+\t\t  gcc_assert (VAR_P (val_vtbl_decl));\n \n                   /* Check to see if we already have this vtable pointer in\n                      our valid set for this base class.  */\n@@ -876,7 +876,7 @@ output_set_info (tree record_type, vec<tree> vtbl_ptr_array)\n           if (TREE_CODE (arg0) == ADDR_EXPR)\n             arg0 = TREE_OPERAND (arg0, 0);\n \n-          if (TREE_CODE (arg0) == VAR_DECL)\n+\t  if (VAR_P (arg0))\n             vptr_name = IDENTIFIER_POINTER (DECL_NAME (arg0));\n \n           if (TREE_CODE (arg1) == INTEGER_CST)"}]}