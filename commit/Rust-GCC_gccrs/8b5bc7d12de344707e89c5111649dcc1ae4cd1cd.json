{"sha": "8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1YmM3ZDEyZGUzNDQ3MDdlODljNTExMTY0OWRjYzFhZTRjZDFjZA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-09T14:01:22Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-09T14:17:48Z"}, "message": "[testsuite][arm] Fix cmse-15.c expected output\n\nThe cmse-15.c testcase fails at -Os because ICF means that we\ngenerate\nnonsecure2:\n        b       nonsecure0\n\nwhich is OK, but does not match the currently expected\nnonsecure2:\n...\n        bl      __gnu_cmse_nonsecure_call\n\n(see https://gcc.gnu.org/pipermail/gcc-patches/2020-April/543190.html)\n\nThe test has already different expectations for v8-M and v8.1-M.\n\nThis patch uses check-function-bodies to account for the\ndifferent possibilities:\n- v8-M vs v8.1-M via different target selectors where needed\n- code generation variants (-0?) via multiple regexps\n\nI've tested that the test now passes with --target-board=-march=armv8-m.main\nand --target-board=-march=armv8.1-m.main.", "tree": {"sha": "3bfa41e5463aaac262f6f3e37a97eb1b7b3a6fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bfa41e5463aaac262f6f3e37a97eb1b7b3a6fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/comments", "author": null, "committer": null, "parents": [{"sha": "93674a72309f986c9ace2d6060916053a00da2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93674a72309f986c9ace2d6060916053a00da2a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93674a72309f986c9ace2d6060916053a00da2a1"}], "stats": {"total": 156, "additions": 150, "deletions": 6}, "files": [{"sha": "5e56c38ffff8585d1026b84c67929c51065a9483", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "patch": "@@ -1,3 +1,7 @@\n+2020-04-09  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/cmse/cmse-15.c: Use check-function-bodies.\n+\n 2020-04-09  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/scanasm.exp (check-function-bodies): Use non-greedy regexp"}, {"sha": "b0fefe561a13a26f78dcb39dfdec7550519ccac7", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-15.c", "status": "modified", "additions": 146, "deletions": 6, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc7d12de344707e89c5111649dcc1ae4cd1cd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-15.c?ref=8b5bc7d12de344707e89c5111649dcc1ae4cd1cd", "patch": "@@ -1,5 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n+/* ARMv8-M expectation with target { ! arm_cmse_clear_ok }.  */\n+/* ARMv8.1-M expectation with target arm_cmse_clear_ok.  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n \n int __attribute__ ((cmse_nonsecure_call)) (*ns_foo) (void);\n int (*s_bar) (void);\n@@ -11,67 +14,204 @@ typedef int s_bar_t (void);\n typedef int __attribute__ ((cmse_nonsecure_call)) (* ns_foo_ptr) (void);\n typedef int (*s_bar_ptr) (void);\n \n+/*\n+** nonsecure0:  { target arm_cmse_clear_ok }\n+**\t...\n+**\tblxns\tr[0-3]\n+**\t...\n+*/\n+/*\n+** nonsecure0: { target { ! arm_cmse_clear_ok } }\n+**\t...\n+**\tbl\t__gnu_cmse_nonsecure_call\n+**\t...\n+*/\n int nonsecure0 (ns_foo_t * ns_foo_p)\n {\n   return ns_foo_p ();\n }\n \n+/*\n+** nonsecure1:  { target arm_cmse_clear_ok }\n+**\t...\n+**\tblxns\tr[0-3]\n+**\t...\n+*/\n+/*\n+** nonsecure1: { target { ! arm_cmse_clear_ok } }\n+**\t...\n+**\tbl\t__gnu_cmse_nonsecure_call\n+**\t...\n+*/\n int nonsecure1 (ns_foo_t ** ns_foo_p)\n {\n   return (*ns_foo_p) ();\n }\n \n+/*\n+** nonsecure2:  { target arm_cmse_clear_ok }\n+**\t...\n+** (\n+**\tblxns\tr[0-3]\n+** |\n+**\tb\tnonsecure0\n+** )\n+**\t...\n+*/\n+/*\n+** nonsecure2: { target { ! arm_cmse_clear_ok } }\n+**\t...\n+** (\n+**\tbl\t__gnu_cmse_nonsecure_call\n+** |\n+**\tb\tnonsecure0\n+** )\n+**\t...\n+*/\n int nonsecure2 (ns_foo_ptr ns_foo_p)\n {\n   return ns_foo_p ();\n }\n+\n+/*\n+** nonsecure3:  { target arm_cmse_clear_ok }\n+**\t...\n+**\tblxns\tr[0-3]\n+**\t...\n+*/\n+/*\n+** nonsecure3: { target { ! arm_cmse_clear_ok } }\n+**\t...\n+**\tbl\t__gnu_cmse_nonsecure_call\n+**\t...\n+*/\n int nonsecure3 (ns_foo_ptr * ns_foo_p)\n {\n   return (*ns_foo_p) ();\n }\n \n+/*\n+** secure0:\n+**\t...\n+** (\n+**\tbx\tr[0-3]\n+** |\n+**\tblx\tr[0-3]\n+** )\n+**\t...\n+*/\n int secure0 (s_bar_t * s_bar_p)\n {\n   return s_bar_p ();\n }\n \n+/*\n+** secure1:\n+**\t...\n+** (\n+**\tbx\tr[0-3]\n+** |\n+**\tblx\tr[0-3]\n+** )\n+**\t...\n+*/\n int secure1 (s_bar_t ** s_bar_p)\n {\n   return (*s_bar_p) ();\n }\n \n+/*\n+** secure2:\n+**\t...\n+** (\n+**\tbx\tr[0-3]\n+** |\n+**\tblx\tr[0-3]\n+** |\n+**\tb\tsecure0\n+** )\n+**\t...\n+*/\n int secure2 (s_bar_ptr s_bar_p)\n {\n   return s_bar_p ();\n }\n \n+/*\n+** secure3:\n+**\t...\n+** (\n+**\tbx\tr[0-3]\n+** |\n+**\tblx\tr[0-3]\n+** )\n+**\t...\n+*/\n int secure3 (s_bar_ptr * s_bar_p)\n {\n   return (*s_bar_p) ();\n }\n \n+/*\n+** nonsecure4:  { target arm_cmse_clear_ok }\n+**\t...\n+**\tblxns\tr[0-3]\n+**\t...\n+*/\n+/*\n+** nonsecure4: { target { ! arm_cmse_clear_ok } }\n+**\t...\n+**\tbl\t__gnu_cmse_nonsecure_call\n+**\t...\n+*/\n int nonsecure4 (void)\n {\n   return ns_foo ();\n }\n \n+/*\n+** nonsecure5:  { target arm_cmse_clear_ok }\n+**\t...\n+**\tblxns\tr[0-3]\n+**\t...\n+*/\n+/*\n+** nonsecure5: { target { ! arm_cmse_clear_ok } }\n+**\t...\n+**\tbl\t__gnu_cmse_nonsecure_call\n+**\t...\n+*/\n int nonsecure5 (void)\n {\n   return (*ns_foo2) ();\n }\n \n+/*\n+** secure4:\n+**\t...\n+** (\n+**\tbx\tr[0-3]\n+** |\n+**\tblx\tr[0-3]\n+** )\n+**\t...\n+*/\n int secure4 (void)\n {\n   return s_bar ();\n }\n \n+/*\n+** secure5:\n+**\t...\n+** (\n+**\tbx\tr[0-3]\n+** |\n+**\tblx\tr[0-3]\n+** )\n+**\t...\n+*/\n int secure5 (void)\n {\n   return (*s_bar2) ();\n }\n-\n-/* ARMv8-M expectation.  */\n-/* { dg-final { scan-assembler-times \"bl\\\\s+__gnu_cmse_nonsecure_call\" 6 { target { ! arm_cmse_clear_ok } } } } */\n-\n-/* ARMv8.1-M expectation.  */\n-/* { dg-final { scan-assembler-times \"blxns\" 6 { target arm_cmse_clear_ok } } } */"}]}