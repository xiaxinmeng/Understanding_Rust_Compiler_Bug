{"sha": "3c900cb55bca213ed80b4f58d598332fcdecc533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5MDBjYjU1YmNhMjEzZWQ4MGI0ZjU4ZDU5ODMzMmZjZGVjYzUzMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-11T20:23:02Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-11T20:23:02Z"}, "message": "Make-lang.in: Update to handle command-line options.\n\nada:\n\t* Make-lang.in: Update to handle command-line options.\n\t* lang.opt: New file.\n\t* misc.c: Include aoptions.h.\n\t(cl_options_count, cl_options): Remove.\n\t(gnat_handle_option): New.\n\t(gnat_decode_option): Remove.\n\t(LANG_HOOKS_DECODE_OPTION): Remove.\n\t(LANG_HOOKS_HANDLE_OPTION): Override.\n\nFrom-SVN: r67795", "tree": {"sha": "185085a84a8926c1d86951747c3a1b2a838576b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185085a84a8926c1d86951747c3a1b2a838576b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c900cb55bca213ed80b4f58d598332fcdecc533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c900cb55bca213ed80b4f58d598332fcdecc533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c900cb55bca213ed80b4f58d598332fcdecc533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c900cb55bca213ed80b4f58d598332fcdecc533/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e53cfb20d78c12a0efa8fce3e8a841b4ce8b808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e53cfb20d78c12a0efa8fce3e8a841b4ce8b808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e53cfb20d78c12a0efa8fce3e8a841b4ce8b808"}], "stats": {"total": 179, "additions": 115, "deletions": 64}, "files": [{"sha": "d3bd7d28e840fe03269426ba868b1885a39b04c3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c900cb55bca213ed80b4f58d598332fcdecc533", "patch": "@@ -1,3 +1,14 @@\n+2003-06-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update to handle command-line options.\n+\t* lang.opt: New file.\n+\t* misc.c: Include aoptions.h.\n+\t(cl_options_count, cl_options): Remove.\n+\t(gnat_handle_option): New.\n+\t(gnat_decode_option): Remove.\n+\t(LANG_HOOKS_DECODE_OPTION): Remove.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\n 2003-06-10  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* init.c, misc.c, trans.c, utils.c: Remove dead code."}, {"sha": "ed668b58ff7bf26496d2cc4b57122c001ee89b52", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=3c900cb55bca213ed80b4f58d598332fcdecc533", "patch": "@@ -116,7 +116,8 @@ ADA_TOOLS_FLAGS_TO_PASS=\\\n # Object files for gnat1 from C sources.\n GNAT1_C_OBJS = ada/b_gnat1.o ada/adadecode.o ada/adaint.o ada/cstreams.o \\\n  ada/cio.o ada/targtyps.o ada/decl.o ada/misc.o ada/utils.o ada/utils2.o \\\n- ada/trans.o ada/cuintp.o ada/argv.o ada/raise.o ada/init.o ada/tracebak.o\n+ ada/trans.o ada/cuintp.o ada/argv.o ada/raise.o ada/init.o ada/tracebak.o \\\n+ ada/aoptions.o\n \n # Object files from Ada sources that are used by gnat1\n \n@@ -760,6 +761,7 @@ ada.mostlyclean:\n \t-$(RM) ada/*$(objext) ada/*.ali ada/b_*.c\n \t-$(RM) ada/*$(coverageexts)\n \t-$(RM) ada/sdefault.adb ada/stamp-sdefault\n+\t-$(RM) ada/aoptions.c ada/aoptions.h\n \t-$(RMDIR) ada/tools\n ada.clean:\n ada.distclean:\n@@ -1014,7 +1016,7 @@ ada/misc.o : ada/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    diagnostic.h output.h except.h $(TM_P_H) langhooks.h debug.h $(LANGHOOKS_DEF_H) \\\n    libfuncs.h $(OPTABS_H) ada/ada.h ada/types.h ada/atree.h ada/nlists.h \\\n    ada/elists.h ada/sinfo.h ada/einfo.h ada/namet.h ada/stringt.h ada/uintp.h \\\n-   ada/fe.h $(ADA_TREE_H) ada/gigi.h ada/adadecode.h opts.h\n+   ada/fe.h $(ADA_TREE_H) ada/gigi.h ada/adadecode.h opts.h ada/aoptions.h\n \n ada/targtyps.o : ada/targtyps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    ada/ada.h ada/types.h ada/atree.h ada/nlists.h ada/elists.h ada/uintp.h \\\n@@ -2523,4 +2525,10 @@ ada/widechar.o : ada/ada.ads ada/a-except.ads ada/hostparm.ads \\\n    ada/types.ads ada/unchconv.ads ada/unchdeal.ads ada/widechar.ads \\\n    ada/widechar.adb \n \n+ada/aoptions.c: ada/lang.opt opts.sh ada/aoptions.h\n+\n+ada/aoptions.h: ada/lang.opt opts.sh\n+\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh ada/aoptions.c \\\n+\t\tada/aoptions.h $(srcdir)/ada/lang.opt\n+\n # end of regular dependencies"}, {"sha": "a5400426e3458603d3a45889ff2c88b18396d18e", "filename": "gcc/ada/lang.opt", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flang.opt?ref=3c900cb55bca213ed80b4f58d598332fcdecc533", "patch": "@@ -0,0 +1,56 @@\n+; Options for the Java front end.\n+; Copyright (C) 2003 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+; \n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+; \n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+\n+; This file is processed by the script opts.sh.  It is a database of\n+; command line options, with each record separated by a blank line,\n+; and each field appearing on its own line.  The first field is the\n+; command-line switch with the leading \"-\" removed.  All options\n+; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n+; form; this form should not be listed.  If you do not want this\n+; negative form and you want it to be automatically rejected, add\n+; RejectNegative to the second field.\n+\n+; The second field should contain \"Ada\".  If the switch takes an\n+; argument, then you should also specify \"Joined\" and/or \"Separate\" to\n+; indicate where the argument can appear.\n+\n+; Comments can appear on their own line anwhere in the file, preceded\n+; by a semicolon.  Whitespace is permitted before the semicolon.\n+\n+; For each switch XXX below, an enumeration constant is created by the\n+; script opts.sh spelt OPT_XXX, but with all non-alphanumeric\n+; characters replaced with an underscore.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+I\n+Ada Joined Separate\n+\n+fRTS\n+Ada RejectNegative\n+\n+gant\n+Ada Joined\n+\n+gnat\n+Ada Joined\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "0919ae1dd0e19cd9d15621b0c577cfba23f61673", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 38, "deletions": 62, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c900cb55bca213ed80b4f58d598332fcdecc533/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=3c900cb55bca213ed80b4f58d598332fcdecc533", "patch": "@@ -75,17 +75,16 @@\n #include \"gigi.h\"\n #include \"adadecode.h\"\n #include \"opts.h\"\n+#include \"aoptions.h\"\n \n extern FILE *asm_out_file;\n extern int save_argc;\n extern char **save_argv;\n-const unsigned int cl_options_count;\n-const struct cl_option cl_options[1];\n \n static size_t gnat_tree_size\t\tPARAMS ((enum tree_code));\n static bool gnat_init\t\t\tPARAMS ((void));\n static int gnat_init_options\t\tPARAMS ((void));\n-static int gnat_decode_option\t\tPARAMS ((int, char **));\n+static int gnat_handle_option (size_t scode, const char *arg, int value);\n static HOST_WIDE_INT gnat_get_alias_set\tPARAMS ((tree));\n static void gnat_print_decl\t\tPARAMS ((FILE *, tree, int));\n static void gnat_print_type\t\tPARAMS ((FILE *, tree, int));\n@@ -108,8 +107,8 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_INIT\t\t\tgnat_init\n #undef  LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS\t\tgnat_init_options\n-#undef  LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION\tgnat_decode_option\n+#undef  LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION\tgnat_handle_option\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE\t\tgnat_parse_file\n #undef LANG_HOOKS_HONOR_READONLY\n@@ -219,58 +218,50 @@ gnat_parse_file (set_yydebug)\n    from ARGV that it successfully decoded; 0 indicates failure.  */\n \n static int\n-gnat_decode_option (argc, argv)\n-     int argc ATTRIBUTE_UNUSED;\n-     char **argv;\n+gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n {\n-  char *p = argv[0];\n+  const struct cl_option *option = &cl_options[scode];\n+  enum opt_code code = (enum opt_code) scode;\n+  char *q;\n   int i;\n \n-  if (!strncmp (p, \"-I\", 2))\n+  /* Ignore file names.  */\n+  if (code == N_OPTS)\n+      return 1;\n+\n+  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n     {\n-      /* We might get -I foo or -Ifoo.  Canonicalize to the latter.  */\n-      if (p[2] == '\\0')\n-\t{\n-\t  char *q;\n-\n-\t  if (argv[1] == 0)\n-\t    return 0;\n-\n-\t  q = xmalloc (sizeof(\"-I\") + strlen (argv[1]));\n-\t  strcpy (q, \"-I\");\n-\t  strcat (q, argv[1]);\n-\n-\t  gnat_argv[gnat_argc] = q;\n-\t  gnat_argc ++;\n-\t  return 2;  /* consumed argument */\n-\t}\n-      else\n-\t{\n-\t  gnat_argv[gnat_argc] = p;\n-\t  gnat_argc ++;\n-\t  return 1;\n-\t}\n+      error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n+      return 1;\n     }\n \n-  else if (!strncmp (p, \"-gant\", 5))\n+  switch (code)\n     {\n-      char *q = xstrdup (p);\n+    case OPT_I:\n+      q = xmalloc (sizeof(\"-I\") + strlen (arg));\n+      strcpy (q, \"-I\");\n+      strcat (q, arg);\n+      gnat_argv[gnat_argc] = q;\n+      gnat_argc++;\n+      break;\n \n+    case OPT_fRTS:\n+      gnat_argv[gnat_argc] = \"-fRTS\";\n+      gnat_argc++;\n+      break;\n+\n+    case OPT_gant:\n       warning (\"`-gnat' misspelled as `-gant'\");\n-      q[2] = 'n', q[3] = 'a';\n-      p = q;\n-      return 1;\n-    }\n+      break;\n \n-  else if (!strncmp (p, \"-gnat\", 5))\n-    {\n+    case OPT_gnat:\n       /* Recopy the switches without the 'gnat' prefix */\n-\n-      gnat_argv[gnat_argc] =  (char *) xmalloc (strlen (p) - 3);\n+      gnat_argv[gnat_argc] = xmalloc (strlen (arg) + 2);\n       gnat_argv[gnat_argc][0] = '-';\n-      strcpy (gnat_argv[gnat_argc] + 1, p + 5);\n-      gnat_argc ++;\n-      if (p[5] == 'O')\n+      strcpy (gnat_argv[gnat_argc] + 1, arg);\n+      gnat_argc++;\n+\n+      if (arg[0] == 'O')\n \tfor (i = 1; i < save_argc - 1; i++) \n \t  if (!strncmp (save_argv[i], \"-gnatO\", 6))\n \t    if (save_argv[++i][0] != '-')\n@@ -280,25 +271,10 @@ gnat_decode_option (argc, argv)\n \t\tgnat_argc++;\n \t\tbreak;\n \t      }\n-\n-      return 1;\n-    }\n-\n-  /* Handle the --RTS switch.  The real option we get is -fRTS. This\n-     modification is done by the driver program.  */\n-  if (!strncmp (p, \"-fRTS\", 5))\n-    {\n-      gnat_argv[gnat_argc] = p;\n-      gnat_argc ++;\n-      return 1;\n+      break;\n     }\n \n-  /* Ignore -W flags since people may want to use the same flags for all\n-     languages.  */\n-  else if (p[0] == '-' && p[1] == 'W' && p[2] != 0)\n-    return 1;\n-\n-  return 0;\n+  return 1;\n }\n \n /* Initialize for option processing.  */"}]}