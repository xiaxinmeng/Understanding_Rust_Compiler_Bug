{"sha": "6845790106547205986fc58987d5bd4662d03e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0NTc5MDEwNjU0NzIwNTk4NmZjNTg5ODdkNWJkNDY2MmQwM2UxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-19T19:58:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-19T19:58:37Z"}, "message": "ipa-split.c (find_return_bb): Use single_pred_p/single_pred_edge, simplify.\n\n\t* ipa-split.c (find_return_bb): Use single_pred_p/single_pred_edge,\n\tsimplify.\n\nFrom-SVN: r169020", "tree": {"sha": "a6b7079dc0c7cf2bfa1ad869ea121d438e54d9eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6b7079dc0c7cf2bfa1ad869ea121d438e54d9eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6845790106547205986fc58987d5bd4662d03e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6845790106547205986fc58987d5bd4662d03e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6845790106547205986fc58987d5bd4662d03e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6845790106547205986fc58987d5bd4662d03e1c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed7656f693dfbf3e69bf1d05a8c69dca31908200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7656f693dfbf3e69bf1d05a8c69dca31908200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7656f693dfbf3e69bf1d05a8c69dca31908200"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "8020abe86805321995482bf223f4487f135158ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6845790106547205986fc58987d5bd4662d03e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6845790106547205986fc58987d5bd4662d03e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6845790106547205986fc58987d5bd4662d03e1c", "patch": "@@ -1,5 +1,8 @@\n 2011-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* ipa-split.c (find_return_bb): Use single_pred_p/single_pred_edge,\n+\tsimplify.\n+\n \t* ipa-split.c: Spelling fixes.\n \n 2011-01-19  Richard Henderson  <rth@redhat.com>"}, {"sha": "c72a36d67ee872febfc2a9afd1c62db250010b5a", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6845790106547205986fc58987d5bd4662d03e1c/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6845790106547205986fc58987d5bd4662d03e1c/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=6845790106547205986fc58987d5bd4662d03e1c", "patch": "@@ -496,47 +496,39 @@ static basic_block\n find_return_bb (void)\n {\n   edge e;\n-  edge_iterator ei;\n   basic_block return_bb = EXIT_BLOCK_PTR;\n+  gimple_stmt_iterator bsi;\n+  bool found_return = false;\n+  tree retval = NULL_TREE;\n \n-  if (EDGE_COUNT (EXIT_BLOCK_PTR->preds) == 1)\n-    FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR->preds)\n-      {\n-\tgimple_stmt_iterator bsi;\n-\tbool found_return = false;\n-\ttree retval = NULL_TREE;\n+  if (!single_pred_p (EXIT_BLOCK_PTR))\n+    return return_bb;\n+\n+  e = single_pred_edge (EXIT_BLOCK_PTR);\n+  for (bsi = gsi_last_bb (e->src); !gsi_end_p (bsi); gsi_prev (&bsi))\n+    {\n+      gimple stmt = gsi_stmt (bsi);\n+      if (gimple_code (stmt) == GIMPLE_LABEL || is_gimple_debug (stmt))\n+\t;\n+      else if (gimple_code (stmt) == GIMPLE_ASSIGN\n+\t       && found_return\n+\t       && gimple_assign_single_p (stmt)\n+\t       && (auto_var_in_fn_p (gimple_assign_rhs1 (stmt),\n+\t\t\t\t     current_function_decl)\n+\t\t   || is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n+\t       && retval == gimple_assign_lhs (stmt))\n+\t;\n+      else if (gimple_code (stmt) == GIMPLE_RETURN)\n+\t{\n+\t  found_return = true;\n+\t  retval = gimple_return_retval (stmt);\n+\t}\n+      else\n+\tbreak;\n+    }\n+  if (gsi_end_p (bsi) && found_return)\n+    return_bb = e->src;\n \n-\tfor (bsi = gsi_last_bb (e->src); !gsi_end_p (bsi); gsi_prev (&bsi))\n-\t  {\n-\t    gimple stmt = gsi_stmt (bsi);\n-\t    if (gimple_code (stmt) == GIMPLE_LABEL\n-\t\t|| is_gimple_debug (stmt))\n-\t      ;\n-\t    else if (gimple_code (stmt) == GIMPLE_ASSIGN\n-\t\t     && found_return\n-\t\t     && gimple_assign_single_p (stmt)\n-\t\t     && (auto_var_in_fn_p (gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t   current_function_decl)\n-\t\t\t || is_gimple_min_invariant\n-\t\t\t      (gimple_assign_rhs1 (stmt)))\n-\t\t     && retval == gimple_assign_lhs (stmt))\n-\t      ;\n-\t    else if (gimple_code (stmt) == GIMPLE_RETURN)\n-\t      {\n-\t\tfound_return = true;\n-\t\tretval = gimple_return_retval (stmt);\n-\t      }\n-\t    else\n-\t      break;\n-\t  }\n-\tif (gsi_end_p (bsi) && found_return)\n-\t  {\n-\t    if (retval)\n-\t      return e->src;\n-\t    else\n-\t      return_bb = e->src;\n-\t  }\n-      }\n   return return_bb;\n }\n "}]}