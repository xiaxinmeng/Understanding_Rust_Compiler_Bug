{"sha": "53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "node_id": "C_kwDOANBUbNoAKDUzZWY3YzFkOWE0NGEyYzY4MWQ0YjM0MzNhODUzY2Q0NDYxYmU4YzU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-06T00:17:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-06T00:17:35Z"}, "message": "Daily bump.", "tree": {"sha": "2385e31fbc0034d3092a9be26cba1c8bd0c98016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2385e31fbc0034d3092a9be26cba1c8bd0c98016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/comments", "author": null, "committer": null, "parents": [{"sha": "9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07"}], "stats": {"total": 381, "additions": 380, "deletions": 1}, "files": [{"sha": "967e3395c1e7e28f5b66076f7c2c20c4ef76975d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,26 @@\n+2023-01-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tRevert:\n+\t2023-01-03  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Rewrite\n+\tRTL expansion to allow condition (mask) to be shared/reused,\n+\tby avoiding overwriting pseudos and adding REG_EQUAL notes.\n+\n+2023-01-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* common.opt: Add -static-libgm2.\n+\t* config/darwin.h (LINK_SPEC): Handle static-libgm2.\n+\t* doc/gm2.texi: Document static-libgm2.\n+\t* gcc.cc (driver_handle_option): Allow static-libgm2.\n+\n+2023-01-05  Tejas Joshi  <TejasSanjay.Joshi@amd.com>\n+\n+\t* common/config/i386/i386-common.cc (processor_alias_table):\n+\tUse CPU_ZNVER4 for znver4.\n+\t* config/i386/i386.md: Add znver4.md.\n+\t* config/i386/znver4.md: New.\n+\n 2023-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/108253"}, {"sha": "5cf4a37854956d395cf813e4cc8009531d895c9d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1 +1 @@\n-20230105\n+20230106"}, {"sha": "b51a0ef0aa0c27ede4e7bad61e00ce2e99510db3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,227 @@\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Make_CW_Equivalent_Type) <Has_Tag_Of_Type>: Tweak.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Rewrite the end of the\n+\thandling of objects with (class-wide) interface type by using the\n+\tsame idiom as the other cases generating a renaming.\n+\t* exp_util.adb (Is_Displacement_Of_Object_Or_Function_Result): Tweak\n+\tpattern matching code and exclude special return objects.\n+\t(Requires_Cleanup_Actions): Adjust comment.\n+\t* exp_ch7.adb (Build_Finalizer): Likewise.\n+\n+2023-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* freeze.adb (Build_Renamed_Body): Rewrite subprogram renaming to\n+\tsubprogram declaration early and then set the Body_To_Inling flag.\n+\n+2023-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* freeze.adb (Build_Renamed_Body): Revert a special case for\n+\tGNATprove; remove unnecessary initialization of a local variable.\n+\n+2023-01-05  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Better filtering when\n+\tinstalling parent on the scope stack.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.ads (The JSON output format): Document change.\n+\t* urealp.adb (UR_Write_To_JSON): Output a fraction instead of a\n+\tdecimal approximation.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): New local variable\n+\tFunc_Id holding the function for a special return object.\n+\tUse a direct renaming in the class-wide case when the initializing\n+\texpression is a captured function call, except for a special return\n+\tobject when the two functions do not return on the same stack.\n+\tApply the accessibility check for class-wide special return objects.\n+\t* exp_util.adb (Make_CW_Equivalent_Type) <Has_Tag_Of_Type>: New.\n+\tDo not force a dispatching call to the primitive operation _Size if\n+\tthe expression is known to statically have the tag of its type.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Fix pasto in comment.\n+\n+2023-01-05  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Tweak conditions for\n+\twarning about use of parentheses for array aggregates.\n+\n+2023-01-05  Javier Miranda  <miranda@adacore.com>\n+\n+\t* scans.ads (Tok_Left_Curly_Bracket, Tok_Right_Curly_Bracket)\n+\t(Tok_Left_Interpolated_String): Placed in no category since they\n+\tdon't fit well in the existing categories. Fix typo in comment.\n+\t(Inside_Interpolated_String_Literal): New scan state variable.\n+\t* scng.adb (Slit): Scan interpolated string literals,\n+\tcontinuations of interpolated string literals and escaped\n+\tcharacters found in interpolated string literals.\n+\t(Scan): Handle consecutive interpolated expressions. Handle ending\n+\tdelimiter placed immediately after an interpolated expression.\n+\tHandle string literal placed after interpolated expression. Handle\n+\tleft and right curly brackets; when extensions are not allowed\n+\tthey are treated as left and right paren; when extensions are\n+\tallowed they are handled as delimiters of interpolated string\n+\tliterals.\n+\t* sinfo.ads (N_Interpolated_String_Literal): New node.\n+\t* gen_il-gen-gen_nodes.adb (N_Interpolated_String_Literal): Define\n+\tN_String_Literal node.\n+\t* gen_il-types.ads (Opt_Type_Enum): Define N_String_Literal as\n+\tconcrete node type.\n+\t* par-ch2.adb (P_Interpolated_String_Literal): New subprogram.\n+\t* par-ch4.adb (P_Simple_Expression): Handle '}' as expression\n+\tterminator when scanning an interpolated expression; disable error\n+\trecovery machinery for binary operator when we are processing an\n+\tinterpolated string literal and reach the expression terminator\n+\t'}'.\n+\t(P_Primary): Call P_Interpolated_String_Literal when the opening\n+\tinterpolated-string-literal delimiter is found (that is, the left\n+\tcurly bracket '{').\n+\t* par-tchk.adb (T_Right_Curly_Bracket): New subprogram.\n+\t* par.adb (P_Interpolated_String_Literal): New declaration.\n+\t(T_Right_Curly_Bracket): New declaration.\n+\t* sem.adb (Analyze): Call Analyze_Interpolated_String_Literal.\n+\t* sem_ch2.ads (Analyze_Interpolated_String_Literal): New\n+\tsubprogram\n+\t* sem_ch2.adb (Analyze_Interpolated_String_Literal): Likewise.\n+\t* sem_util.adb (Is_User_Defined_Literal): Complete mapping of\n+\tliteral aspects adding that interpolated string literals have no\n+\tcorrespondence with any aspect.\n+\t* sem_res.adb (Resolve_Interpolated_String_Literal): New\n+\tsubprogram.\n+\t(Has_Applicable_User_Defined_Literal): Complete mapping of literal\n+\taspects adding that interpolated string literals have no\n+\tcorrespondency with any aspect.\n+\t* expander.adb (Expand): Add call to\n+\tExpand_N_Interpolated_String_Literal.\n+\t* exp_util.adb (Insert_Actions): Handle\n+\tN_Interpolated_String_Literal nodes; that is, continue climbing.\n+\t* exp_ch2.ads (Expand_N_Interpolated_String_Literal): New\n+\tsubprogram.\n+\t* exp_ch2.adb (Expand_N_Interpolated_String_Literal): Likewise.\n+\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): Add missing\n+\tconversion to force dispatching call. Required to handle calls to\n+\tdescendants.\n+\t(Build_String_Put_Image_Call): Do not output string delimiters\n+\twhen the put_image call is part of an interpolated string literal.\n+\t* rtsfind.ads (RTU_Id): Add RE_Set_Trim_Leading_Spaces.\n+\t* sprint.adb (Sprint_Node): Output interpolated string contents.\n+\t* libgnat/a-stbubo.adb (Get_UTF_8): Add default value for\n+\tTrim_Leading_White_Spaces component in aggregate.\n+\t(Buffer_Type_Implementation): Update Trim_Leading_White_Spaces.\n+\t* libgnat/a-stbuun.adb (Get_UTF_8): Likewise.\n+\t(Buffer_Type_Implementation): Likewise.\n+\t* libgnat/a-sttebu.ads (Set_Trim_Leading_Spaces): New subprogram.\n+\t(Trim_Leading_Spaces): New subprogram.\n+\t(Root_Buffer_Type): Adding Trim_Leading_While_Spaces component.\n+\t* libgnat/a-sttebu.adb (procedure Set_Trim_Leading_Spaces): New\n+\tsubprogram.\n+\t(Trim_Leading_Space): New subprogram.\n+\t(Put_UTF_8): Handle Trim_Leading_White_Spaces.\n+\t(New_Line): Likewise.\n+\t* libgnat/s-putima.ads (Put_Image_String): Adding formal\n+\t(with_delimiters).\n+\t(Put_Image_Wide_String): Likewise.\n+\t(Put_Image_Wide_Wide_String): Likewise.\n+\t* libgnat/s-putima.adb (Put_Image_String): Adding support for new\n+\tformal.\n+\t(Put_Image_Wide_String): Likewise.\n+\t(Put_Image_Wide_Wide_String): Likewise.\n+\n+2023-01-05  Joao Azevedo  <azevedo@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: add gnatpp --layout\n+\tswitch and update legacy switches.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): For the purpose of deciding whether to\n+\tfreeze an entity coming from an outer scope in an inner scope, treat\n+\tthe internal subprogram generated because of post-conditions as also\n+\tcoming from source if the original subprogram itself does.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* contracts.adb (Build_Subprogram_Contract_Wrapper): Generate an\n+\textended return statement in all cases.\n+\t(Expand_Subprogram_Contract): Adjust comment.\n+\n+2023-01-05  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (F_Kind): Rename enumeration literal.\n+\t(P_Flt_Format): Adjust handling of \"%g\".\n+\t(Determine_Notation_And_Aft): New procedure.\n+\t(Decimal_Exponent): New function.\n+\t(Increment_Integral_Part): New procedure.\n+\t(Remove_Extraneous_Decimal_Digit): New procedure.\n+\t(Trim_Fractional_Part): New procedure.\n+\t* libgnat/g-forstr.ads: Change description of \"%g\" specifier.\n+\n+2023-01-05  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Correctly find the\n+\tparent instance to place on the scope stack.\n+\n+2023-01-05  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb (Set_Entity_Or_Discriminal): Verify we are actually\n+\tresetting the entity field of a non-prefixed discriminant\n+\treference.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): New local variable used\n+\tthroughout instead of testing Is_Special_Return_Object every time.\n+\tDo not rename an OK_To_Rename object for a special return object.\n+\t* exp_ch4.adb (Expand_Concatenate): Revert to constrained allocation\n+\tif the result is allocated on the secondary stack.\n+\n+2023-01-05  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Fix Is_Configuration_Pragma\n+\tfunction to handle case where the pragma's parent is an\n+\tN_Aspect_Specification node. In analyzing a Discard_Names pragma,\n+\tdo not assume that a nonzero number of arguments implies that the\n+\tpragma is not a configuration pragma; that assumption only holds\n+\tfor legal programs.\n+\n+2023-01-05  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tAdd RM references.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2023-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): For a special return\n+\tobject of an interface type that is not inherently limited, make\n+\ta call to the Adjust primitive after doing the copy.  For a special\n+\treturn object of a non-class-wide type initialized by a function\n+\tcall, use a direct renaming only if the object doing the capture\n+\tis flagged by Is_Related_To_Func_Return.  For a special return\n+\tobject using a direct renaming, reassign the tag, if need be.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Fix comment.\n+\t* exp_util.adb (Is_Related_To_Func_Return): Accept both regular and\n+\trenaming object declarations for return objects.\n+\n+2023-01-05  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Fix the bug by checking\n+\tOriginal_Node. The renaming might be elsewhere, but the (original)\n+\treference is right here.\n+\t* errout.adb: Remove pragma Unreferenced which was added because\n+\tof the above bug.\n+\t* einfo.ads: Misc cleanup.\n+\t* lib.adb: Likewise.\n+\t* lib.ads: Likewise.\n+\n 2023-01-03  Ghjuvan Lacambre  <lacambre@adacore.com>\n \n \t* errout.adb (Write_JSON_Span): Escape subprogram name."}, {"sha": "df833a77351cffc2b79c1df5a8ad87631df33e45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,15 @@\n+2023-01-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108275\n+\t* parser.cc (cp_parser_class_head): Use dk_deferred instead of\n+\tdk_no_check when parsing the class name.\n+\n+2023-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108286\n+\t* semantics.cc (finish_omp_target_clauses): Ignore clauses other than\n+\tOMP_CLAUSE_MAP.\n+\n 2023-01-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/108282"}, {"sha": "2d38a607c9159d77bcccf96fcfcd8255d0700ba8", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,35 @@\n+2023-01-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/107631\n+\t* gm2-gcc/m2builtins.cc: Remove scalb, scalbf, scalbl,\n+\tsignificand, significandf, significandl.\n+\t* gm2-libs/Builtins.def (significand): Likewise.\n+\t* gm2-libs/Builtins.mod: Likewise.\n+\t* target-independent/Builtins.texi: Likewise.\n+\t* gm2-libs-iso/LowLong.mod: Implement fraction with scalbn*() and\n+\tilogb*().\n+\t* gm2-libs-iso/LowReal.mod: Likewise.\n+\t* gm2-libs-iso/LowShort.mod: Likewise.\n+\n+2023-01-05  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2-libs-min/M2RTS.def (ConstructModules): New procedure\n+\tdeclaration.\n+\t(DeconstructModules): New procedure declaration.\n+\t* gm2-libs-min/M2RTS.mod (ConstructModules): New procedure\n+\tdummy implementation.\n+\t(DeconstructModules): New procedure dummy implementation.\n+\n+2023-01-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gm2spec.cc (lang_specific_driver): Handle static-libgm2.\n+\t* lang.opt: Add static-libgm2.\n+\n+2023-01-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gm2spec.cc (lang_specific_driver): Pass -static-libstdc++ on to\n+\tthe target driver if the linker does not support Bstatic/dynamic.\n+\n 2023-01-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR modula2/108183"}, {"sha": "23ff6caa74c309f9be641cfb681a46958fc5ca48", "filename": "gcc/rust/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Frust%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Frust%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,13 @@\n+2023-01-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* resolve/rust-ast-resolve-item.cc (selftest::rust_flatten_list):\n+\tRemove output to stderr.\n+\n+2023-01-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Make-lang.in (selftest-rust-gdb): New.\n+\t(selftest-rust-valgrind): New.\n+\n 2022-12-20  Marc Poulhi\u00e8s  <dkm@kataplop.net>\n \n \tPR rust/108113"}, {"sha": "fbd43fd5c44de349190e5dd5cbdfd8824ee9c7a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,23 @@\n+2023-01-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tRevert:\n+\t2023-01-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/cmov10.c: New test case.\n+\n+2023-01-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108275\n+\t* g++.dg/parse/access14.C: New test.\n+\n+2023-01-05  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* lib/gm2.exp (gm2_init_minx): New procedure.\n+\t(gm2_init_min): New procedure calls gm2_init_min with\n+\tdialect flags.\n+\t* gm2/link/min/pass/tiny.mod: New test case.\n+\t* gm2/link/min/pass/link-min-pass.exp: New file.\n+\n 2023-01-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/108282"}, {"sha": "fa1976d6fdb30882ed4a44bfb890e424e0181707", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,8 @@\n+2023-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108286\n+\t* testsuite/libgomp.c++/pr108286.C: New test.\n+\n 2023-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi: Bump @copying's copyright year."}, {"sha": "9ace9f0da749d67eeca15fcaa11b6230af982d68", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef7c1d9a44a2c681d4b3433a853cd4461be8c5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=53ef7c1d9a44a2c681d4b3433a853cd4461be8c5", "patch": "@@ -1,3 +1,56 @@\n+2023-01-05  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/cpu/hppa/atomicity.h (_PA_LDCW_INSN): Define.\n+\t(__exchange_and_add): Use _PA_LDCW_INSN.  Use ordered store for\n+\tlock release.  Revise loop.\n+\t(__atomic_add): Likewise.\n+\n+2023-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108212\n+\t* python/libstdcxx/v6/printers.py (_utc_timezone): New global\n+\tvariable.\n+\t(StdChronoTimePointPrinter::to_string): Use it.\n+\n+2023-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108290\n+\t* include/std/functional (_Bind_front): Add no_unique_address\n+\tattribute to data members.\n+\t* testsuite/20_util/function_objects/bind_front/107784.cc: Check\n+\tsize of call wrappers with empty types for targets and bound\n+\targuments.\n+\n+2023-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108211\n+\t* src/c++20/tzdb.cc (chrono::current_zone()): Check for zone\n+\tusing only last component of the name.\n+\n+2023-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108228\n+\tPR libstdc++/108235\n+\t* config/abi/pre/gnu.ver: Move zoneinfo_dir_override export to\n+\tthe latest symbol version.\n+\t* src/c++20/tzdb.cc (USE_ATOMIC_SHARED_PTR): Define to 0 if\n+\tatomic<_Node*> is not always lock free.\n+\t(USE_ATOMIC_LIST_HEAD): New macro.\n+\t[__hpux__] (__gnu_cxx::zoneinfo_dir_override()): Provide\n+\tdefinition of weak symbol.\n+\t(tzdb_list::_Node::_S_head): Rename to _S_head_cache.\n+\t(tzdb_list::_Node::_S_list_head): New function for accessing\n+\tlist head efficiently.\n+\t(tzdb_list::_Node::_S_cache_list_head): New function for\n+\tupdating _S_list_head.\n+\n+2023-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108265\n+\t* include/std/chrono (hh_mm_ss): Do not use chrono::abs if\n+\tduration rep is unsigned.\n+\t* testsuite/std/time/hh_mm_ss/1.cc: Check unsigned rep.\n+\n 2023-01-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR libstdc++/108228"}]}