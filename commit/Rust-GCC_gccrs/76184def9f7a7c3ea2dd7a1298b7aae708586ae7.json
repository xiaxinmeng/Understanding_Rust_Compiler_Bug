{"sha": "76184def9f7a7c3ea2dd7a1298b7aae708586ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxODRkZWY5ZjdhN2MzZWEyZGQ3YTEyOThiN2FhZTcwODU4NmFlNw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-17T21:54:11Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-17T21:54:11Z"}, "message": "(find_split_point): Handle NULL return from make_extraction.\n\n(make_field_assignment): Likewise.\n\nFrom-SVN: r11552", "tree": {"sha": "bd59b29978075828eb9ae4556845036aee2405e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd59b29978075828eb9ae4556845036aee2405e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76184def9f7a7c3ea2dd7a1298b7aae708586ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76184def9f7a7c3ea2dd7a1298b7aae708586ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76184def9f7a7c3ea2dd7a1298b7aae708586ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76184def9f7a7c3ea2dd7a1298b7aae708586ae7/comments", "author": null, "committer": null, "parents": [{"sha": "0d4ae18aae4047e956c4bc8b23a59436daa537d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4ae18aae4047e956c4bc8b23a59436daa537d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4ae18aae4047e956c4bc8b23a59436daa537d5"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "33ce6e68b6af8fc708780806d25783dda7a514b3", "filename": "gcc/combine.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76184def9f7a7c3ea2dd7a1298b7aae708586ae7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76184def9f7a7c3ea2dd7a1298b7aae708586ae7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=76184def9f7a7c3ea2dd7a1298b7aae708586ae7", "patch": "@@ -2610,11 +2610,14 @@ find_split_point (loc, insn)\n \t      && XEXP (*split, 0) == SET_DEST (x)\n \t      && XEXP (*split, 1) == const0_rtx)\n \t    {\n-\t      SUBST (SET_SRC (x),\n-\t\t     make_extraction (GET_MODE (SET_DEST (x)),\n-\t\t\t\t      XEXP (SET_SRC (x), 0),\n-\t\t\t\t      pos, NULL_RTX, 1, 1, 0, 0));\n-\t      return find_split_point (loc, insn);\n+\t      rtx extraction = make_extraction (GET_MODE (SET_DEST (x)),\n+\t\t\t\t\t\tXEXP (SET_SRC (x), 0),\n+\t\t\t\t\t\tpos, NULL_RTX, 1, 1, 0, 0);\n+\t      if (extraction != 0)\n+\t\t{\n+\t\t  SUBST (SET_SRC (x), extraction);\n+\t\t  return find_split_point (loc, insn);\n+\t\t}\n \t    }\n \t  break;\n \n@@ -5050,7 +5053,10 @@ expand_field_assignment (x)\n    IN_COMPARE is non-zero if we are in a COMPARE.  This means that a\n    ZERO_EXTRACT should be built even for bits starting at bit 0.\n \n-   MODE is the desired mode of the result (if IN_DEST == 0).  */\n+   MODE is the desired mode of the result (if IN_DEST == 0).\n+\n+   The result is an RTX for the extraction or NULL_RTX if the target\n+   can't handle it.  */\n \n static rtx\n make_extraction (mode, inner, pos, pos_rtx, len,\n@@ -6553,7 +6559,9 @@ make_field_assignment (x)\n     {\n       assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),\n \t\t\t\t1, 1, 1, 0);\n-      return gen_rtx (SET, VOIDmode, assign, const0_rtx);\n+      if (assign != 0)\n+\treturn gen_rtx (SET, VOIDmode, assign, const0_rtx);\n+      return x;\n     }\n \n   else if (GET_CODE (src) == AND && GET_CODE (XEXP (src, 0)) == SUBREG\n@@ -6567,7 +6575,9 @@ make_field_assignment (x)\n       assign = make_extraction (VOIDmode, dest, 0,\n \t\t\t\tXEXP (SUBREG_REG (XEXP (src, 0)), 1),\n \t\t\t\t1, 1, 1, 0);\n-      return gen_rtx (SET, VOIDmode, assign, const0_rtx);\n+      if (assign != 0)\n+\treturn gen_rtx (SET, VOIDmode, assign, const0_rtx);\n+      return x;\n     }\n \n   /* If SRC is (ior (ashift (const_int 1) POS DEST)), this is a set of a\n@@ -6578,7 +6588,9 @@ make_field_assignment (x)\n     {\n       assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),\n \t\t\t\t1, 1, 1, 0);\n-      return gen_rtx (SET, VOIDmode, assign, const1_rtx);\n+      if (assign != 0)\n+\treturn gen_rtx (SET, VOIDmode, assign, const1_rtx);\n+      return x;\n     }\n \n   /* The other case we handle is assignments into a constant-position\n@@ -6613,6 +6625,8 @@ make_field_assignment (x)\n     return x;\n \n   assign = make_extraction (VOIDmode, dest, pos, NULL_RTX, len, 1, 1, 0);\n+  if (assign == 0)\n+    return x;\n \n   /* The mode to use for the source is the mode of the assignment, or of\n      what is inside a possible STRICT_LOW_PART.  */"}]}