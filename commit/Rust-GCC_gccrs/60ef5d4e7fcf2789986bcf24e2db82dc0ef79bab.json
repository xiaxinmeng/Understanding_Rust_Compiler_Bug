{"sha": "60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlZjVkNGU3ZmNmMjc4OTk4NmJjZjI0ZTJkYjgyZGMwZWY3OWJhYg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-12-09T18:12:45Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-12-09T18:12:45Z"}, "message": "PR c++/51289 - ICE with alias template for bound template template parm\n\ngcc/cp/\n\n\tPR c++/51289\n\t* cp-tree.h (TYPE_TEMPLATE_INFO): Rewrite this accessor macro to\n\tbetter support aliased types.\n\t(TYPE_ALIAS_P): Don't crash on TYPE_NAME nodes that are not\n\tTYPE_DECL.\n\t* pt.c (find_parameter_packs_r): Handle types aliases.\n\t(push_template_decl_real): Check for bare parameter packs in the\n\tunderlying type of an alias template.\n\ngcc/PR51289/gcc/testsuite/\n\n\tPR c++/51289\n\t* g++.dg/cpp0x/alias-decl-17.C: New test.\n\nFrom-SVN: r182170", "tree": {"sha": "c93242d247ad65c273360bbd6a3e8c3ee1cac04e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93242d247ad65c273360bbd6a3e8c3ee1cac04e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/comments", "author": null, "committer": null, "parents": [{"sha": "15ce64af29141facd203687d000e21fe6f877234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ce64af29141facd203687d000e21fe6f877234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ce64af29141facd203687d000e21fe6f877234"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "3698349c1dd90fe041f1837efe02bd9a9bfd546f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "patch": "@@ -1,3 +1,14 @@\n+2011-12-09  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51289\n+\t* cp-tree.h (TYPE_TEMPLATE_INFO): Rewrite this accessor macro to\n+\tbetter support aliased types.\n+\t(TYPE_ALIAS_P): Don't crash on TYPE_NAME nodes that are not\n+\tTYPE_DECL.\n+\t* pt.c (find_parameter_packs_r): Handle types aliases.\n+\t(push_template_decl_real): Check for bare parameter packs in the\n+\tunderlying type of an alias template.\n+\n 2011-12-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51318"}, {"sha": "955d0eb366816da8a0f52337331645a6003c0ed3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "patch": "@@ -2555,6 +2555,7 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define TYPE_ALIAS_P(NODE)\t\t\t\\\n   (TYPE_P (NODE)\t\t\t\t\\\n    && TYPE_NAME (NODE)\t\t\t\t\\\n+   && TREE_CODE (TYPE_NAME (NODE)) == TYPE_DECL\t\\\n    && TYPE_DECL_ALIAS_P (TYPE_NAME (NODE)))\n \n /* For a class type: if this structure has many fields, we'll sort them\n@@ -2607,17 +2608,24 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n   (LANG_TYPE_CLASS_CHECK (BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK (NODE)) \\\n    ->template_info)\n \n-/* Template information for an ENUMERAL_, RECORD_, or UNION_TYPE.  */\n+/* Template information for an ENUMERAL_, RECORD_, UNION_TYPE, or\n+   BOUND_TEMPLATE_TEMPLATE_PARM type.  Note that if NODE is a\n+   specialization of an alias template, this accessor returns the\n+   template info for the alias template, not the one (if any) for the\n+   template of the underlying type.  */\n #define TYPE_TEMPLATE_INFO(NODE)\t\t\t\t\t\\\n-  (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\t\t\\\n-   ? ENUM_TEMPLATE_INFO (NODE) :\t\t\t\t\t\\\n-   (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n-    ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE) :\t\t\t\\\n-    ((CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))\t\t\t\\\n-     ? CLASSTYPE_TEMPLATE_INFO (NODE)\t\t\t\t\t\\\n-     : ((TYPE_NAME (NODE) && DECL_LANG_SPECIFIC (TYPE_NAME (NODE)))\t\\\n-\t? (DECL_TEMPLATE_INFO (TYPE_NAME (NODE)))\t\t\t\\\n-\t: NULL_TREE))))\n+  (TYPE_ALIAS_P (NODE)\t\t\t\t\t\t\t\\\n+   ? ((TYPE_NAME (NODE) && DECL_LANG_SPECIFIC (TYPE_NAME (NODE)))\t\\\n+      ? DECL_TEMPLATE_INFO (TYPE_NAME (NODE))\t\t\t\t\\\n+      : NULL_TREE)\t\t\t\t\t\t\t\\\n+   : ((TREE_CODE (NODE) == ENUMERAL_TYPE)\t\t\t\t\\\n+      ? ENUM_TEMPLATE_INFO (NODE)\t\t\t\t\t\\\n+      : ((TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM)\t\t\\\n+\t ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE)\t\t\t\\\n+\t : (CLASS_TYPE_P (NODE)\t\t\t\t\t\t\\\n+\t    ? CLASSTYPE_TEMPLATE_INFO (NODE)\t\t\t\t\\\n+\t    : NULL_TREE))))\n+\n \n /* Set the template information for an ENUMERAL_, RECORD_, or\n    UNION_TYPE to VAL.  */"}, {"sha": "bb5aa0c1484edc04e165f0f6e741838f7960cda5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "patch": "@@ -2976,6 +2976,20 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     (struct find_parameter_pack_data*)data;\n   bool parameter_pack_p = false;\n \n+  /* Handle type aliases/typedefs.  */\n+  if (TYPE_P (t)\n+      && TYPE_NAME (t)\n+      && TREE_CODE (TYPE_NAME (t)) == TYPE_DECL\n+      && TYPE_DECL_ALIAS_P (TYPE_NAME (t)))\n+    {\n+      if (TYPE_TEMPLATE_INFO (t))\n+\tcp_walk_tree (&TYPE_TI_ARGS (t),\n+\t\t      &find_parameter_packs_r,\n+\t\t      ppd, ppd->visited);\n+      *walk_subtrees = 0;\n+      return NULL_TREE;\n+    }\n+\n   /* Identify whether this is a parameter pack or not.  */\n   switch (TREE_CODE (t))\n     {\n@@ -4905,7 +4919,10 @@ push_template_decl_real (tree decl, bool is_friend)\n       if (check_for_bare_parameter_packs (TYPE_RAISES_EXCEPTIONS (type)))\n \tTYPE_RAISES_EXCEPTIONS (type) = NULL_TREE;\n     }\n-  else if (check_for_bare_parameter_packs (TREE_TYPE (decl)))\n+  else if (check_for_bare_parameter_packs ((TREE_CODE (decl) == TYPE_DECL\n+\t\t\t\t\t    && TYPE_DECL_ALIAS_P (decl))\n+\t\t\t\t\t   ? DECL_ORIGINAL_TYPE (decl)\n+\t\t\t\t\t   : TREE_TYPE (decl)))\n     {\n       TREE_TYPE (decl) = error_mark_node;\n       return error_mark_node;"}, {"sha": "2430c7f273d4b602f1455c310633b2fa7751893a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "patch": "@@ -1,3 +1,8 @@\n+2011-12-09  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51289\n+\t* g++.dg/cpp0x/alias-decl-17.C: New test.\n+\n 2011-12-09  Michael Meissner  <meissner@the-meissners.org>\n \n \t* gcc.target/powerpc/recip-5.c: Disable running on any system that"}, {"sha": "41b1c950fcda4fae83b3eb1333cac1509f08b57a", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-17.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-17.C?ref=60ef5d4e7fcf2789986bcf24e2db82dc0ef79bab", "patch": "@@ -0,0 +1,21 @@\n+// Origin PR c++/51289\n+// { dg-options \"-std=c++11\" }\n+\n+template<typename a, template <typename, typename> class b>\n+struct foo {\n+  template <typename t>\n+  using type = b<a, t>;\n+  template <typename t>\n+  b<a, t> funca() {}\n+\n+  template <typename t>\n+  type<t> funcb() {}\n+};\n+\n+// This is an additional test, to emit an error message when using\n+// unexpanded parameter packs in an alias declaration.\n+template <class ... T>\n+struct S {};\n+\n+template<class ... T>\n+using A = S<T>; // { dg-error \"parameter packs not expanded\" }"}]}