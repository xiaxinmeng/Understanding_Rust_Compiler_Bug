{"sha": "fce7e199d55908fa9fcaf9613b8f08da0fdcdece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlN2UxOTlkNTU5MDhmYTlmY2FmOTYxM2I4ZjA4ZGEwZmRjZGVjZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-14T10:19:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-14T10:19:01Z"}, "message": "rtlanal.c (computed_jump_p_1): Rename from jmp_uses_reg_or_mem; update all call sites.\n\n        * rtlanal.c (computed_jump_p_1): Rename from jmp_uses_reg_or_mem;\n        update all call sites.  Return true for all non-label constants.\n\nFrom-SVN: r39006", "tree": {"sha": "88500c4e21175446badc4914280cc78b3e963030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88500c4e21175446badc4914280cc78b3e963030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fce7e199d55908fa9fcaf9613b8f08da0fdcdece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce7e199d55908fa9fcaf9613b8f08da0fdcdece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce7e199d55908fa9fcaf9613b8f08da0fdcdece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce7e199d55908fa9fcaf9613b8f08da0fdcdece/comments", "author": null, "committer": null, "parents": [{"sha": "a1b8572cac7c96128e10c2e93f8c7ef71d3d6d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b8572cac7c96128e10c2e93f8c7ef71d3d6d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b8572cac7c96128e10c2e93f8c7ef71d3d6d5d"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "8e7d40ddc2c5fa28452054408e6357d059fab467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce7e199d55908fa9fcaf9613b8f08da0fdcdece/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce7e199d55908fa9fcaf9613b8f08da0fdcdece/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fce7e199d55908fa9fcaf9613b8f08da0fdcdece", "patch": "@@ -1,3 +1,8 @@\n+2001-01-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* rtlanal.c (computed_jump_p_1): Rename from jmp_uses_reg_or_mem;\n+\tupdate all call sites.  Return true for all non-label constants.\n+\n Sun Jan 14 10:09:48 MET 2001  Jan hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_expand_compare): Add bypass_test and second_test"}, {"sha": "8bdd23cdfc285b9c795a0d091db6bad62b781104", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce7e199d55908fa9fcaf9613b8f08da0fdcdece/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce7e199d55908fa9fcaf9613b8f08da0fdcdece/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=fce7e199d55908fa9fcaf9613b8f08da0fdcdece", "patch": "@@ -29,7 +29,7 @@ static void set_of_1\t\tPARAMS ((rtx, rtx, void *));\n static void insn_dependent_p_1\tPARAMS ((rtx, rtx, void *));\n \n /* Forward declarations */\n-static int jmp_uses_reg_or_mem\t\tPARAMS ((rtx));\n+static int computed_jump_p_1\tPARAMS ((rtx));\n \n /* Bit flags that specify the machine subtype we are compiling for.\n    Bits are tested using macros TARGET_... defined in the tm.h file\n@@ -2181,11 +2181,12 @@ replace_regs (x, reg_map, nregs, replace_dest)\n   return x;\n }\n \n-/* Return 1 if X, the SRC_SRC of  SET of (pc) contain a REG or MEM that is\n-   not in the constant pool and not in the condition of an IF_THEN_ELSE.  */\n+/* A subroutine of computed_jump_p, return 1 if X contains a REG or MEM or\n+   constant that is not in the constant pool and not in the condition\n+   of an IF_THEN_ELSE.  */\n \n static int\n-jmp_uses_reg_or_mem (x)\n+computed_jump_p_1 (x)\n      rtx x;\n {\n   enum rtx_code code = GET_CODE (x);\n@@ -2194,11 +2195,14 @@ jmp_uses_reg_or_mem (x)\n \n   switch (code)\n     {\n-    case CONST:\n     case LABEL_REF:\n     case PC:\n       return 0;\n \n+    case CONST:\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+    case SYMBOL_REF:\n     case REG:\n       return 1;\n \n@@ -2207,12 +2211,8 @@ jmp_uses_reg_or_mem (x)\n \t\t&& CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)));\n \n     case IF_THEN_ELSE:\n-      return (jmp_uses_reg_or_mem (XEXP (x, 1))\n-\t      || jmp_uses_reg_or_mem (XEXP (x, 2)));\n-\n-    case PLUS:  case MINUS:  case MULT:\n-      return (jmp_uses_reg_or_mem (XEXP (x, 0))\n-\t      || jmp_uses_reg_or_mem (XEXP (x, 1)));\n+      return (computed_jump_p_1 (XEXP (x, 1))\n+\t      || computed_jump_p_1 (XEXP (x, 2)));\n \n     default:\n       break;\n@@ -2222,12 +2222,12 @@ jmp_uses_reg_or_mem (x)\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e'\n-\t  && jmp_uses_reg_or_mem (XEXP (x, i)))\n+\t  && computed_jump_p_1 (XEXP (x, i)))\n \treturn 1;\n \n       else if (fmt[i] == 'E')\n \tfor (j = 0; j < XVECLEN (x, i); j++)\n-\t  if (jmp_uses_reg_or_mem (XVECEXP (x, i, j)))\n+\t  if (computed_jump_p_1 (XVECEXP (x, i, j)))\n \t    return 1;\n     }\n \n@@ -2265,12 +2265,12 @@ computed_jump_p (insn)\n \t    for (i = len - 1; i >= 0; i--)\n \t      if (GET_CODE (XVECEXP (pat, 0, i)) == SET\n \t\t  && SET_DEST (XVECEXP (pat, 0, i)) == pc_rtx\n-\t\t  && jmp_uses_reg_or_mem (SET_SRC (XVECEXP (pat, 0, i))))\n+\t\t  && computed_jump_p_1 (SET_SRC (XVECEXP (pat, 0, i))))\n \t\treturn 1;\n \t}\n       else if (GET_CODE (pat) == SET\n \t       && SET_DEST (pat) == pc_rtx\n-\t       && jmp_uses_reg_or_mem (SET_SRC (pat)))\n+\t       && computed_jump_p_1 (SET_SRC (pat)))\n \treturn 1;\n     }\n   return 0;"}]}