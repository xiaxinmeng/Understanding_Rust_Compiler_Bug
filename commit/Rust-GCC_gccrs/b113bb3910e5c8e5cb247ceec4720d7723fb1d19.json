{"sha": "b113bb3910e5c8e5cb247ceec4720d7723fb1d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExM2JiMzkxMGU1YzhlNWNiMjQ3Y2VlYzQ3MjBkNzcyM2ZiMWQxOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-16T23:42:27Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-16T23:42:27Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r750", "tree": {"sha": "cd27bba32e165b66435e553709392902b9b2e316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd27bba32e165b66435e553709392902b9b2e316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b113bb3910e5c8e5cb247ceec4720d7723fb1d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b113bb3910e5c8e5cb247ceec4720d7723fb1d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b113bb3910e5c8e5cb247ceec4720d7723fb1d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b113bb3910e5c8e5cb247ceec4720d7723fb1d19/comments", "author": null, "committer": null, "parents": [{"sha": "8983a18c1d77e944596efd2b897dfd45704f8264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8983a18c1d77e944596efd2b897dfd45704f8264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8983a18c1d77e944596efd2b897dfd45704f8264"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "558fb5930f0d2ffb22e4a8a549ef6bfb81bf49e5", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b113bb3910e5c8e5cb247ceec4720d7723fb1d19/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b113bb3910e5c8e5cb247ceec4720d7723fb1d19/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=b113bb3910e5c8e5cb247ceec4720d7723fb1d19", "patch": "@@ -1572,7 +1572,8 @@ dbxout_symbol (decl, local)\n \t  /* Effectively do build_pointer_type, but don't cache this type,\n \t     since it might be temporary whereas the type it points to\n \t     might have been saved for inlining.  */\n-\t  type = make_node (REFERENCE_TYPE);\n+\t  /* Don't use REFERENCE_TYPE because dbx can't handle that.  */\n+\t  type = make_node (POINTER_TYPE);\n \t  TREE_TYPE (type) = TREE_TYPE (decl);\n \t}\n       else if (GET_CODE (DECL_RTL (decl)) == MEM"}]}