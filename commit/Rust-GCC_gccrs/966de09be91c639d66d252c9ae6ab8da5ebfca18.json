{"sha": "966de09be91c639d66d252c9ae6ab8da5ebfca18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2ZGUwOWJlOTFjNjM5ZDY2ZDI1MmM5YWU2YWI4ZGE1ZWJmY2ExOA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-04-20T14:25:31Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-04-23T14:05:23Z"}, "message": "amdgcn: Check HSA return codes [PR94629]\n\nEnsure that the returned status values are not ignored.  The old code was\nnot broken, but this is both safer and satisfies static analysis.\n\n2020-04-23  Andrew Stubbs  <ams@codesourcery.com>\n\n\tPR other/94629\n\n\tlibgomp/\n\t* plugin/plugin-gcn.c (init_hsa_context): Check return value from\n\thsa_iterate_agents.\n\t(GOMP_OFFLOAD_init_device): Check return values from both calls to\n\thsa_agent_iterate_regions.", "tree": {"sha": "ce0d4fc53f0913505e6212d3570deea88d854c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0d4fc53f0913505e6212d3570deea88d854c81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966de09be91c639d66d252c9ae6ab8da5ebfca18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966de09be91c639d66d252c9ae6ab8da5ebfca18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966de09be91c639d66d252c9ae6ab8da5ebfca18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966de09be91c639d66d252c9ae6ab8da5ebfca18/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744b3e4478df83f54543964b8eb7250eb9bb6d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744b3e4478df83f54543964b8eb7250eb9bb6d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744b3e4478df83f54543964b8eb7250eb9bb6d40"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "ee1764d4ae31d618e20f863646f0a4044db46bdd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966de09be91c639d66d252c9ae6ab8da5ebfca18/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966de09be91c639d66d252c9ae6ab8da5ebfca18/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=966de09be91c639d66d252c9ae6ab8da5ebfca18", "patch": "@@ -1,3 +1,12 @@\n+2020-04-23  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR other/94629\n+\n+\t* plugin/plugin-gcn.c (init_hsa_context): Check return value from\n+\thsa_iterate_agents.\n+\t(GOMP_OFFLOAD_init_device): Check return values from both calls to\n+\thsa_agent_iterate_regions.\n+\n 2020-04-20  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR middle-end/94635"}, {"sha": "4c6a4c03b6e5df55331322cd5002619f77b4af65", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966de09be91c639d66d252c9ae6ab8da5ebfca18/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966de09be91c639d66d252c9ae6ab8da5ebfca18/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=966de09be91c639d66d252c9ae6ab8da5ebfca18", "patch": "@@ -1508,6 +1508,8 @@ init_hsa_context (void)\n     = GOMP_PLUGIN_malloc_cleared (hsa_context.agent_count\n \t\t\t\t  * sizeof (struct agent_info));\n   status = hsa_fns.hsa_iterate_agents_fn (assign_agent_ids, &agent_index);\n+  if (status != HSA_STATUS_SUCCESS)\n+    return hsa_error (\"Scanning compute agents failed\", status);\n   if (agent_index != hsa_context.agent_count)\n     {\n       GOMP_PLUGIN_error (\"Failed to assign IDs to all GCN agents\");\n@@ -3473,6 +3475,9 @@ GOMP_OFFLOAD_init_device (int n)\n   status = hsa_fns.hsa_agent_iterate_regions_fn (agent->id,\n \t\t\t\t\t\t get_kernarg_memory_region,\n \t\t\t\t\t\t &agent->kernarg_region);\n+  if (status != HSA_STATUS_SUCCESS\n+      && status != HSA_STATUS_INFO_BREAK)\n+    hsa_error (\"Scanning memory regions failed\", status);\n   if (agent->kernarg_region.handle == (uint64_t) -1)\n     {\n       GOMP_PLUGIN_error (\"Could not find suitable memory region for kernel \"\n@@ -3486,6 +3491,9 @@ GOMP_OFFLOAD_init_device (int n)\n   status = hsa_fns.hsa_agent_iterate_regions_fn (agent->id,\n \t\t\t\t\t\t get_data_memory_region,\n \t\t\t\t\t\t &agent->data_region);\n+  if (status != HSA_STATUS_SUCCESS\n+      && status != HSA_STATUS_INFO_BREAK)\n+    hsa_error (\"Scanning memory regions failed\", status);\n   if (agent->data_region.handle == (uint64_t) -1)\n     {\n       GOMP_PLUGIN_error (\"Could not find suitable memory region for device \""}]}