{"sha": "5005fe220a46685544e05626fc5528fd072bacd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwNWZlMjIwYTQ2Njg1NTQ0ZTA1NjI2ZmM1NTI4ZmQwNzJiYWNkOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-12-04T13:49:09Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-12-04T13:49:09Z"}, "message": "config.host: (arm*-*-freebsd*): Remove.\n\n\t* config.host: (arm*-*-freebsd*): Remove.\n\t(arm*-*-linux*, arm*-*-uclinux*): Simplify logic.\n\t(arm*-*-elf*): Remove.\n\t(arm*-*-wince-pe*): Remove.\n\t* arm/unwind-arm.c (struct fpa_reg): Delete.\n\t(struct fpa_regs): Delete.\n\t(phase1_vrs): Remove fpa element.\n\t(_Unwind_VRS_Get): Remove _UVRSC_FPA.\n\t(_Unwind_VRS_Set, _Unwind_VRS_Pop): Likewise.\n\t* arm/pr-support.c (__gnu_unwind_execute): Remove FPA support.\n\t* ieee754-sf.S (floatundisf): Remove FPA support.\n\t(floatdisf): Likewise.\n\t* ieee75f-df.S (floatundidf): Likewise.\n\t(floatdidf): Likewise.\n\nFrom-SVN: r194138", "tree": {"sha": "c4b6cb64622c01903295d7089fffae1685422938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b6cb64622c01903295d7089fffae1685422938"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5005fe220a46685544e05626fc5528fd072bacd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5005fe220a46685544e05626fc5528fd072bacd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5005fe220a46685544e05626fc5528fd072bacd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5005fe220a46685544e05626fc5528fd072bacd9/comments", "author": null, "committer": null, "parents": [{"sha": "37e33ecb8539a032b132b957c34bad2aeaf3f3e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e33ecb8539a032b132b957c34bad2aeaf3f3e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e33ecb8539a032b132b957c34bad2aeaf3f3e3"}], "stats": {"total": 174, "additions": 34, "deletions": 140}, "files": [{"sha": "884ee6e7183db7500670abacf11612a3e8cb0927", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5005fe220a46685544e05626fc5528fd072bacd9", "patch": "@@ -1,3 +1,20 @@\n+2012-12-04  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config.host: (arm*-*-freebsd*): Remove.\n+\t(arm*-*-linux*, arm*-*-uclinux*): Simplify logic.\n+\t(arm*-*-elf*): Remove.\n+\t(arm*-*-wince-pe*): Remove.\n+\t* arm/unwind-arm.c (struct fpa_reg): Delete.\n+\t(struct fpa_regs): Delete.\n+\t(phase1_vrs): Remove fpa element.\n+\t(_Unwind_VRS_Get): Remove _UVRSC_FPA.\n+\t(_Unwind_VRS_Set, _Unwind_VRS_Pop): Likewise.\n+\t* arm/pr-support.c (__gnu_unwind_execute): Remove FPA support.\n+\t* ieee754-sf.S (floatundisf): Remove FPA support.\n+\t(floatdisf): Likewise.\n+\t* ieee75f-df.S (floatundidf): Likewise.\n+\t(floatdidf): Likewise.\n+\n 2012-11-29  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/55445"}, {"sha": "0f19d4431790ba1ed198ea68280b6bb90235f743", "filename": "libgcc/config.host", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=5005fe220a46685544e05626fc5528fd072bacd9", "patch": "@@ -320,39 +320,21 @@ arm-wrs-vxworks)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-vxworks t-fdpbit\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n-arm*-*-freebsd*)\n-\ttmake_file=\"$tmake_file arm/t-arm arm/t-strongarm-elf t-fdpbit\"\n-\t;;\n arm*-*-netbsdelf*)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-netbsd t-slibgcc-gld-nover\"\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttmake_file=\"${tmake_file} arm/t-arm t-fixedpoint-gnu-prefix\"\n-\tcase ${host} in\n-\tarm*-*-linux-*)\n-\t  tmake_file=\"${tmake_file} arm/t-elf arm/t-bpabi arm/t-linux-eabi t-slibgcc-libgcc\"\n-\t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n-\t  unwind_header=config/arm/unwind-arm.h\n-\t  ;;\n-\t*)\n-\t  tmake_file=\"$tmake_file arm/t-linux\"\n- \t  ;;\n-\tesac\n+\ttmake_file=\"${tmake_file} arm/t-elf arm/t-bpabi arm/t-linux-eabi t-slibgcc-libgcc\"\n+\ttm_file=\"$tm_file arm/bpabi-lib.h\"\n+\tunwind_header=config/arm/unwind-arm.h\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \t;;\n arm*-*-uclinux*)\t\t# ARM ucLinux\n \ttmake_file=\"${tmake_file} t-fixedpoint-gnu-prefix\"\n-\tcase ${host} in\n-\tarm*-*-uclinux*eabi)\n-\t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n-\t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n-\t  unwind_header=config/arm/unwind-arm.h\n-\t  ;;\n-\tesac\n-\ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n-\textra_parts=\"$extra_parts crti.o crtn.o\"\n-\t;;\n-arm*-*-ecos-elf)\n+\ttmake_file=\"${tmake_file} arm/t-bpabi\"\n+\ttm_file=\"$tm_file arm/bpabi-lib.h\"\n+\tunwind_header=config/arm/unwind-arm.h\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n@@ -373,13 +355,6 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems*)\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \tunwind_header=config/arm/unwind-arm.h\n \t;;\n-arm*-*-elf)\n-\ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n-\textra_parts=\"$extra_parts crti.o crtn.o\"\n-\t;;\n-arm*-wince-pe*)\n-\ttmake_file=\"$tmake_file arm/t-arm arm/t-wince-pe\"\n-\t;;\n avr-*-rtems*)\n \ttmake_file=\"$tmake_file avr/t-avr avr/t-rtems t-fpbit\"\n \ttm_file=\"$tm_file avr/avr-lib.h\""}, {"sha": "676f7c9d4ce0a4cc5e38625a5c426e1784836aa7", "filename": "libgcc/config/arm/ieee754-df.S", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-df.S?ref=5005fe220a46685544e05626fc5528fd072bacd9", "patch": "@@ -1,6 +1,7 @@\n /* ieee754-df.S double-precision floating point support for ARM\n \n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2012\n+   Free Software Foundation, Inc.\n    Contributed by Nicolas Pitre (nico@cam.org)\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -36,9 +37,7 @@\n  */\n \n \n-@ For FPA, float words are always big-endian.\n-@ For VFP, floats words follow the memory system mode.\n-#if defined(__VFP_FP__) && !defined(__ARMEB__)\n+#ifndef __ARMEB__\n #define xl r0\n #define xh r1\n #define yl r2\n@@ -494,24 +493,10 @@ ARM_FUNC_START floatundidf\n ARM_FUNC_ALIAS aeabi_ul2d floatundidf\n \n \torrs\tr2, r0, r1\n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\tdo_it\teq, t\n-\tmvfeqd\tf0, #0.0\n-#else\n \tdo_it\teq\n-#endif\n \tRETc(eq)\n \n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\t@ For hard FPA code we want to return via the tail below so that\n-\t@ we can return the result in f0 as well as in r0/r1 for backwards\n-\t@ compatibility.\n-\tadr\tip, LSYM(f0_ret)\n-\t@ Push pc as well so that RETLDM works correctly.\n-\tdo_push\t{r4, r5, ip, lr, pc}\n-#else\n \tdo_push\t{r4, r5, lr}\n-#endif\n \n \tmov\tr5, #0\n \tb\t2f\n@@ -520,24 +505,10 @@ ARM_FUNC_START floatdidf\n ARM_FUNC_ALIAS aeabi_l2d floatdidf\n \n \torrs\tr2, r0, r1\n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\tdo_it\teq, t\n-\tmvfeqd\tf0, #0.0\n-#else\n \tdo_it\teq\n-#endif\n \tRETc(eq)\n \n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\t@ For hard FPA code we want to return via the tail below so that\n-\t@ we can return the result in f0 as well as in r0/r1 for backwards\n-\t@ compatibility.\n-\tadr\tip, LSYM(f0_ret)\n-\t@ Push pc as well so that RETLDM works correctly.\n-\tdo_push\t{r4, r5, ip, lr, pc}\n-#else\n \tdo_push\t{r4, r5, lr}\n-#endif\n \n \tands\tr5, ah, #0x80000000\t@ sign bit in r5\n \tbpl\t2f\n@@ -552,7 +523,7 @@ ARM_FUNC_ALIAS aeabi_l2d floatdidf\n \tmov\tr4, #0x400\t\t@ initial exponent\n \tadd\tr4, r4, #(52-1 - 1)\n \n-\t@ FPA little-endian: must swap the word order.\n+\t@ If FP word order does not match integer word order, swap the words.\n \t.ifnc\txh, ah\n \tmov\tip, al\n \tmov\txh, ah\n@@ -580,17 +551,6 @@ ARM_FUNC_ALIAS aeabi_l2d floatdidf\n \tadd\tr4, r4, r2\n \tb\tLSYM(Lad_p)\n \n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\n-\t@ Legacy code expects the result to be returned in f0.  Copy it\n-\t@ there as well.\n-LSYM(f0_ret):\n-\tdo_push\t{r0, r1}\n-\tldfd\tf0, [sp], #8\n-\tRETLDM\n-\n-#endif\n-\n \tFUNC_END floatdidf\n \tFUNC_END aeabi_l2d\n \tFUNC_END floatundidf"}, {"sha": "397a4c16b7b79e20f84606214a6e178e508da404", "filename": "libgcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=5005fe220a46685544e05626fc5528fd072bacd9", "patch": "@@ -1,6 +1,7 @@\n /* ieee754-sf.S single-precision floating point support for ARM\n \n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2012\n+   Free Software Foundation, Inc.\n    Contributed by Nicolas Pitre (nico@cam.org)\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -325,12 +326,7 @@ ARM_FUNC_START floatundisf\n ARM_FUNC_ALIAS aeabi_ul2f floatundisf\n \n \torrs\tr2, r0, r1\n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\tdo_it\teq, t\n-\tmvfeqs\tf0, #0.0\n-#else\n \tdo_it\teq\n-#endif\n \tRETc(eq)\n \n \tmov\tr3, #0\n@@ -340,12 +336,7 @@ ARM_FUNC_START floatdisf\n ARM_FUNC_ALIAS aeabi_l2f floatdisf\n \n \torrs\tr2, r0, r1\n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\tdo_it\teq, t\n-\tmvfeqs\tf0, #0.0\n-#else\n \tdo_it\teq\n-#endif\n \tRETc(eq)\n \n \tands\tr3, ah, #0x80000000\t@ sign bit in r3\n@@ -358,14 +349,6 @@ ARM_FUNC_ALIAS aeabi_l2f floatdisf\n \trsc\tah, ah, #0\n #endif\n 1:\n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\t@ For hard FPA code we want to return via the tail below so that\n-\t@ we can return the result in f0 as well as in r0 for backwards\n-\t@ compatibility.\n-\tstr\tlr, [sp, #-8]!\n-\tadr\tlr, LSYM(f0_ret)\n-#endif\n-\n \tmovs\tip, ah\n \tdo_it\teq, tt\n \tmoveq\tip, al\n@@ -427,15 +410,6 @@ ARM_FUNC_ALIAS aeabi_l2f floatdisf\n \tbiceq\tr0, r0, ip, lsr #31\n \tRET\n \n-#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n-\n-LSYM(f0_ret):\n-\tstr\tr0, [sp, #-4]!\n-\tldfs\tf0, [sp], #4\n-\tRETLDM\n-\n-#endif\n-\n \tFUNC_END floatdisf\n \tFUNC_END aeabi_l2f\n \tFUNC_END floatundisf"}, {"sha": "e0973b51971cb9c6e7a7e1f94798aad835a6b064", "filename": "libgcc/config/arm/pr-support.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Fpr-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Fpr-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fpr-support.c?ref=5005fe220a46685544e05626fc5528fd072bacd9", "patch": "@@ -1,5 +1,5 @@\n /* ARM EABI compliant unwinding routines\n-   Copyright (C) 2004, 2005, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2009, 2012 Free Software Foundation, Inc.\n    Contributed by Paul Brook\n  \n    This file is free software; you can redistribute it and/or modify it\n@@ -226,15 +226,9 @@ __gnu_unwind_execute (_Unwind_Context * context, __gnu_unwind_state * uws)\n \t\treturn _URC_FAILURE;\n \t      continue;\n \t    }\n-\t  if ((op & 0xfc) == 0xb4)\n-\t    {\n-\t      /* Pop FPA E[4]-E[4+nn].  */\n-\t      op = 0x40000 | ((op & 3) + 1);\n-\t      if (_Unwind_VRS_Pop (context, _UVRSC_FPA, op, _UVRSD_FPAX)\n-\t\t  != _UVRSR_OK)\n-\t\treturn _URC_FAILURE;\n-\t      continue;\n-\t    }\n+\t  if ((op & 0xfc) == 0xb4)  /* Obsolete FPA.  */\n+\t    return _URC_FAILURE;\n+\n \t  /* op & 0xf8 == 0xb8.  */\n \t  /* Pop VFP D[8]-D[8+nnn] with fldmx.  */\n \t  op = 0x80000 | ((op & 7) + 1);\n@@ -278,23 +272,13 @@ __gnu_unwind_execute (_Unwind_Context * context, __gnu_unwind_state * uws)\n \t    }\n \t  if (op == 0xc8)\n \t    {\n-#ifndef __VFP_FP__\n- \t      /* Pop FPA registers.  */\n- \t      op = next_unwind_byte (uws);\n-\t      op = ((op & 0xf0) << 12) | ((op & 0xf) + 1);\n- \t      if (_Unwind_VRS_Pop (context, _UVRSC_FPA, op, _UVRSD_FPAX)\n- \t\t  != _UVRSR_OK)\n- \t\treturn _URC_FAILURE;\n- \t      continue;\n-#else\n               /* Pop VFPv3 registers D[16+ssss]-D[16+ssss+cccc] with vldm.  */\n               op = next_unwind_byte (uws);\n               op = (((op & 0xf0) + 16) << 12) | ((op & 0xf) + 1);\n               if (_Unwind_VRS_Pop (context, _UVRSC_VFP, op, _UVRSD_DOUBLE)\n                   != _UVRSR_OK)\n                 return _URC_FAILURE;\n               continue;\n-#endif\n \t    }\n \t  if (op == 0xc9)\n \t    {"}, {"sha": "27d68f992baae6af4c079b5a190fed82c3d456fc", "filename": "libgcc/config/arm/unwind-arm.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5005fe220a46685544e05626fc5528fd072bacd9/libgcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm.c?ref=5005fe220a46685544e05626fc5528fd072bacd9", "patch": "@@ -1,5 +1,5 @@\n /* ARM EABI compliant unwinding routines.\n-   Copyright (C) 2004, 2005, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2009, 2012 Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -53,16 +53,6 @@ struct vfpv3_regs\n   _uw64 d[16];\n };\n \n-struct fpa_reg\n-{\n-  _uw w[3];\n-};\n-\n-struct fpa_regs\n-{\n-  struct fpa_reg f[8];\n-};\n-\n struct wmmxd_regs\n {\n   _uw64 wd[16];\n@@ -90,7 +80,6 @@ typedef struct\n   _uw prev_sp; /* Only valid during forced unwinding.  */\n   struct vfp_regs vfp;\n   struct vfpv3_regs vfp_regs_16_to_31;\n-  struct fpa_regs fpa;\n   struct wmmxd_regs wmmxd;\n   struct wmmxc_regs wmmxc;\n } phase1_vrs;\n@@ -181,7 +170,6 @@ _Unwind_VRS_Result _Unwind_VRS_Get (_Unwind_Context *context,\n       return _UVRSR_OK;\n \n     case _UVRSC_VFP:\n-    case _UVRSC_FPA:\n     case _UVRSC_WMMXD:\n     case _UVRSC_WMMXC:\n       return _UVRSR_NOT_IMPLEMENTED;\n@@ -213,7 +201,6 @@ _Unwind_VRS_Result _Unwind_VRS_Set (_Unwind_Context *context,\n       return _UVRSR_OK;\n \n     case _UVRSC_VFP:\n-    case _UVRSC_FPA:\n     case _UVRSC_WMMXD:\n     case _UVRSC_WMMXC:\n       return _UVRSR_NOT_IMPLEMENTED;\n@@ -380,9 +367,6 @@ _Unwind_VRS_Result _Unwind_VRS_Pop (_Unwind_Context *context,\n       }\n       return _UVRSR_OK;\n \n-    case _UVRSC_FPA:\n-      return _UVRSR_NOT_IMPLEMENTED;\n-\n     case _UVRSC_WMMXD:\n       {\n \t_uw start = discriminator >> 16;"}]}