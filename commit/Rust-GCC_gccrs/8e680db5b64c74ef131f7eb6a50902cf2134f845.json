{"sha": "8e680db5b64c74ef131f7eb6a50902cf2134f845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2ODBkYjViNjRjNzRlZjEzMWY3ZWI2YTUwOTAyY2YyMTM0Zjg0NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-06-11T18:37:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-06-11T18:37:34Z"}, "message": "cpplib.h (struct cpp_callbacks): Add user_builtin_macro callback.\n\n\t* include/cpplib.h (struct cpp_callbacks): Add user_builtin_macro\n\tcallback.\n\t(enum cpp_builtin_type): Add BT_FIRST_USER and BT_LAST_USER.\n\t(cpp_macro_definition): Remove const qual from second argument.\n\t* macro.c (enter_macro_context): Call user_builtin_macro callback for\n\tNODE_BUILTIN !NODE_USED macros.\n\t(warn_of_redefinition): Likewise.  Remove const qual from second\n\targument.\n\t(cpp_macro_definition): Likewise.\n\t* pch.c (write_macdef, save_macros): Call user_builtin_macro callback\n\tfor NODE_BUILTIN !NODE_USED macros.\n\n\t* c-family/c-cppbuiltin.c: Include cpp-id-data.h.\n\t(lazy_hex_fp_values, lazy_hex_fp_value_count): New variables.\n\t(lazy_hex_fp_value): New function.\n\t(builtin_define_with_hex_fp_value): Provide definitions lazily.\n\t* Makefile.in (c-family/c-cppbuiltin.o): Depend on $(CPP_ID_DATA_H).\n\nFrom-SVN: r160626", "tree": {"sha": "202ae75e58b19cf2da840d299ec67598a6eef33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202ae75e58b19cf2da840d299ec67598a6eef33b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e680db5b64c74ef131f7eb6a50902cf2134f845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e680db5b64c74ef131f7eb6a50902cf2134f845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e680db5b64c74ef131f7eb6a50902cf2134f845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e680db5b64c74ef131f7eb6a50902cf2134f845/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b14477e384de8841d377e3c3254f9f3bcc9aecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14477e384de8841d377e3c3254f9f3bcc9aecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b14477e384de8841d377e3c3254f9f3bcc9aecb"}], "stats": {"total": 144, "additions": 130, "deletions": 14}, "files": [{"sha": "c52a81bbc22651ee1a1d12ecbb4922ad1b453b79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -1,3 +1,11 @@\n+2010-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-family/c-cppbuiltin.c: Include cpp-id-data.h.\n+\t(lazy_hex_fp_values, lazy_hex_fp_value_count): New variables.\n+\t(lazy_hex_fp_value): New function.\n+\t(builtin_define_with_hex_fp_value): Provide definitions lazily.\n+\t* Makefile.in (c-family/c-cppbuiltin.o): Depend on $(CPP_ID_DATA_H).\n+\n 2010-06-11  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/44483"}, {"sha": "0d4f746a95ad8525c34c98a2f2fd1eec199e2695", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -2081,7 +2081,7 @@ c-family/c-common.o : c-family/c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n c-family/c-cppbuiltin.o : c-family/c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TM_H) $(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n \t$(FLAGS_H) $(TOPLEV_H) output.h $(EXCEPT_H) $(TREE_H) $(TARGET_H) \\\n-\t$(TM_P_H) $(BASEVER) debug.h\n+\t$(TM_P_H) $(BASEVER) debug.h $(CPP_ID_DATA_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t-DBASEVER=$(BASEVER_s) $< $(OUTPUT_OPTION)\n "}, {"sha": "4ed6975e45b00bd2ed618543a5255e18f3aa3f9b", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -1,5 +1,5 @@\n /* Define builtin-in macros for the C family front ends.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"tm_p.h\"\t\t/* For TARGET_CPU_CPP_BUILTINS & friends.  */\n #include \"target.h\"\n+#include \"cpp-id-data.h\"\n \n #ifndef TARGET_OS_CPP_BUILTINS\n # define TARGET_OS_CPP_BUILTINS()\n@@ -946,6 +947,50 @@ builtin_define_with_int_value (const char *macro, HOST_WIDE_INT value)\n   cpp_define (parse_in, buf);\n }\n \n+/* builtin_define_with_hex_fp_value is very expensive, so the following\n+   array and function allows it to be done lazily when __DBL_MAX__\n+   etc. is first used.  */\n+\n+static struct\n+{\n+  const char *hex_str;\n+  cpp_macro *macro;\n+  enum machine_mode mode;\n+  int digits;\n+  const char *fp_suffix;\n+} lazy_hex_fp_values[12];\n+static int lazy_hex_fp_value_count;\n+\n+static bool\n+lazy_hex_fp_value (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+\t\t   cpp_hashnode *node)\n+{\n+  REAL_VALUE_TYPE real;\n+  char dec_str[64], buf1[256];\n+  unsigned int idx;\n+  if (node->value.builtin < BT_FIRST_USER\n+      || (int) node->value.builtin >= BT_FIRST_USER + lazy_hex_fp_value_count)\n+    return false;\n+\n+  idx = node->value.builtin - BT_FIRST_USER;\n+  real_from_string (&real, lazy_hex_fp_values[idx].hex_str);\n+  real_to_decimal_for_mode (dec_str, &real, sizeof (dec_str),\n+\t\t\t    lazy_hex_fp_values[idx].digits, 0,\n+\t\t\t    lazy_hex_fp_values[idx].mode);\n+\n+  sprintf (buf1, \"%s%s\", dec_str, lazy_hex_fp_values[idx].fp_suffix);\n+  node->flags &= ~(NODE_BUILTIN | NODE_USED);\n+  node->value.macro = lazy_hex_fp_values[idx].macro;\n+  for (idx = 0; idx < node->value.macro->count; idx++)\n+    if (node->value.macro->exp.tokens[idx].type == CPP_NUMBER)\n+      break;\n+  gcc_assert (idx < node->value.macro->count);\n+  node->value.macro->exp.tokens[idx].val.str.len = strlen (buf1);\n+  node->value.macro->exp.tokens[idx].val.str.text\n+    = (const unsigned char *) xstrdup (buf1);\n+  return true;\n+}\n+\n /* Pass an object-like macro a hexadecimal floating-point value.  */\n static void\n builtin_define_with_hex_fp_value (const char *macro,\n@@ -957,6 +1002,29 @@ builtin_define_with_hex_fp_value (const char *macro,\n   REAL_VALUE_TYPE real;\n   char dec_str[64], buf1[256], buf2[256];\n \n+  /* This is very expensive, so if possible expand them lazily.  */\n+  if (lazy_hex_fp_value_count < 12\n+      && flag_dump_macros == 0\n+      && !cpp_get_options (parse_in)->traditional)\n+    {\n+      struct cpp_hashnode *node;\n+      if (lazy_hex_fp_value_count == 0)\n+\tcpp_get_callbacks (parse_in)->user_builtin_macro = lazy_hex_fp_value;\n+      sprintf (buf2, fp_cast, \"1.1\");\n+      sprintf (buf1, \"%s=%s\", macro, buf2);\n+      cpp_define (parse_in, buf1);\n+      node = C_CPP_HASHNODE (get_identifier (macro));\n+      lazy_hex_fp_values[lazy_hex_fp_value_count].hex_str = xstrdup (hex_str);\n+      lazy_hex_fp_values[lazy_hex_fp_value_count].mode = TYPE_MODE (type);\n+      lazy_hex_fp_values[lazy_hex_fp_value_count].digits = digits;\n+      lazy_hex_fp_values[lazy_hex_fp_value_count].fp_suffix = fp_suffix;\n+      lazy_hex_fp_values[lazy_hex_fp_value_count].macro = node->value.macro;\n+      node->flags |= NODE_BUILTIN;\n+      node->value.builtin = BT_FIRST_USER + lazy_hex_fp_value_count;\n+      lazy_hex_fp_value_count++;\n+      return;\n+    }\n+\n   /* Hex values are really cool and convenient, except that they're\n      not supported in strict ISO C90 mode.  First, the \"p-\" sequence\n      is not valid as part of a preprocessor number.  Second, we get a"}, {"sha": "2b3d224913f37c22d078aa9f08bbaa86680286ed", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -1,3 +1,17 @@\n+2010-06-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/cpplib.h (struct cpp_callbacks): Add user_builtin_macro\n+\tcallback.\n+\t(enum cpp_builtin_type): Add BT_FIRST_USER and BT_LAST_USER.\n+\t(cpp_macro_definition): Remove const qual from second argument.\n+\t* macro.c (enter_macro_context): Call user_builtin_macro callback for\n+\tNODE_BUILTIN !NODE_USED macros.\n+\t(warn_of_redefinition): Likewise.  Remove const qual from second\n+\targument.\n+\t(cpp_macro_definition): Likewise.\n+\t* pch.c (write_macdef, save_macros): Call user_builtin_macro callback\n+\tfor NODE_BUILTIN !NODE_USED macros.\n+\n 2010-06-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (struct cpp_options): Remove show_column."}, {"sha": "87d368e292541d4242f2c2b43d9b60b84d2ca7de", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -509,6 +509,9 @@ struct cpp_callbacks\n   /* Called whenever a macro is expanded or tested.\n      Second argument is the location of the start of the current expansion.  */\n   void (*used) (cpp_reader *, source_location, cpp_hashnode *);\n+\n+  /* Callback that can change a user builtin into normal macro.  */\n+  bool (*user_builtin_macro) (cpp_reader *, cpp_hashnode *);\n };\n \n #ifdef VMS\n@@ -599,7 +602,9 @@ enum cpp_builtin_type\n   BT_STDC,\t\t\t/* `__STDC__' */\n   BT_PRAGMA,\t\t\t/* `_Pragma' operator */\n   BT_TIMESTAMP,\t\t\t/* `__TIMESTAMP__' */\n-  BT_COUNTER\t\t\t/* `__COUNTER__' */\n+  BT_COUNTER,\t\t\t/* `__COUNTER__' */\n+  BT_FIRST_USER,\t\t/* User defined builtin macros.  */\n+  BT_LAST_USER = BT_FIRST_USER + 31\n };\n \n #define CPP_HASHNODE(HNODE)\t((cpp_hashnode *) (HNODE))\n@@ -726,7 +731,7 @@ extern const cpp_token *cpp_get_token (cpp_reader *);\n extern const cpp_token *cpp_get_token_with_location (cpp_reader *,\n \t\t\t\t\t\t     source_location *);\n extern const unsigned char *cpp_macro_definition (cpp_reader *,\n-\t\t\t\t\t\t  const cpp_hashnode *);\n+\t\t\t\t\t\t  cpp_hashnode *);\n extern void _cpp_backup_tokens (cpp_reader *, unsigned int);\n extern const cpp_token *cpp_peek_token (cpp_reader *, int);\n "}, {"sha": "31de4156c6420fa04399f4921ada0b297a836b6f", "filename": "libcpp/macro.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -65,7 +65,7 @@ static bool create_iso_definition (cpp_reader *, cpp_macro *);\n \n static cpp_token *alloc_expansion_token (cpp_reader *, cpp_macro *);\n static cpp_token *lex_expansion_token (cpp_reader *, cpp_macro *);\n-static bool warn_of_redefinition (cpp_reader *, const cpp_hashnode *,\n+static bool warn_of_redefinition (cpp_reader *, cpp_hashnode *,\n \t\t\t\t  const cpp_macro *);\n static bool parse_params (cpp_reader *, cpp_macro *);\n static void check_trad_stringification (cpp_reader *, const cpp_macro *,\n@@ -835,7 +835,9 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n   if ((node->flags & NODE_BUILTIN) && !(node->flags & NODE_USED))\n     {\n       node->flags |= NODE_USED;\n-      if (pfile->cb.used_define)\n+      if ((!pfile->cb.user_builtin_macro\n+\t   || !pfile->cb.user_builtin_macro (pfile, node))\n+\t  && pfile->cb.used_define)\n \tpfile->cb.used_define (pfile, pfile->directive_line, node);\n     }\n \n@@ -1430,7 +1432,7 @@ _cpp_backup_tokens (cpp_reader *pfile, unsigned int count)\n \n /* Returns nonzero if a macro redefinition warning is required.  */\n static bool\n-warn_of_redefinition (cpp_reader *pfile, const cpp_hashnode *node,\n+warn_of_redefinition (cpp_reader *pfile, cpp_hashnode *node,\n \t\t      const cpp_macro *macro2)\n {\n   const cpp_macro *macro1;\n@@ -1442,7 +1444,11 @@ warn_of_redefinition (cpp_reader *pfile, const cpp_hashnode *node,\n \n   /* Suppress warnings for builtins that lack the NODE_WARN flag.  */\n   if (node->flags & NODE_BUILTIN)\n-    return false;\n+    {\n+      if (!pfile->cb.user_builtin_macro\n+\t  || !pfile->cb.user_builtin_macro (pfile, node))\n+\treturn false;\n+    }\n \n   /* Redefinitions of conditional (context-sensitive) macros, on\n      the other hand, must be allowed silently.  */\n@@ -1982,19 +1988,26 @@ check_trad_stringification (cpp_reader *pfile, const cpp_macro *macro,\n    Caller is expected to generate the \"#define\" bit if needed.  The\n    returned text is temporary, and automatically freed later.  */\n const unsigned char *\n-cpp_macro_definition (cpp_reader *pfile, const cpp_hashnode *node)\n+cpp_macro_definition (cpp_reader *pfile, cpp_hashnode *node)\n {\n   unsigned int i, len;\n-  const cpp_macro *macro = node->value.macro;\n+  const cpp_macro *macro;\n   unsigned char *buffer;\n \n   if (node->type != NT_MACRO || (node->flags & NODE_BUILTIN))\n     {\n-      cpp_error (pfile, CPP_DL_ICE,\n-\t\t \"invalid hash type %d in cpp_macro_definition\", node->type);\n-      return 0;\n+      if (node->type != NT_MACRO\n+\t  || !pfile->cb.user_builtin_macro\n+          || !pfile->cb.user_builtin_macro (pfile, node))\n+\t{\n+\t  cpp_error (pfile, CPP_DL_ICE,\n+\t\t     \"invalid hash type %d in cpp_macro_definition\",\n+\t\t     node->type);\n+\t  return 0;\n+\t}\n     }\n \n+  macro = node->value.macro;\n   /* Calculate length.  */\n   len = NODE_LEN (node) + 2;\t\t\t/* ' ' and NUL.  */\n   if (macro->fun_like)"}, {"sha": "a6d8cea38d3c5df56b96f0d8e434bce52095cf52", "filename": "libcpp/pch.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e680db5b64c74ef131f7eb6a50902cf2134f845/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=8e680db5b64c74ef131f7eb6a50902cf2134f845", "patch": "@@ -58,7 +58,9 @@ write_macdef (cpp_reader *pfile, cpp_hashnode *hn, void *file_p)\n \treturn 1;\n \n     case NT_MACRO:\n-      if ((hn->flags & NODE_BUILTIN))\n+      if ((hn->flags & NODE_BUILTIN)\n+\t  && (!pfile->cb.user_builtin_macro\n+\t      || !pfile->cb.user_builtin_macro (pfile, hn)))\n \treturn 1;\n \n       {\n@@ -759,6 +761,12 @@ static int\n save_macros (cpp_reader *r, cpp_hashnode *h, void *data_p)\n {\n   struct save_macro_data *data = (struct save_macro_data *)data_p;\n+\n+  if ((h->flags & NODE_BUILTIN)\n+      && h->type == NT_MACRO\n+      && r->cb.user_builtin_macro)\n+    r->cb.user_builtin_macro (r, h);\n+\n   if (h->type != NT_VOID\n       && (h->flags & NODE_BUILTIN) == 0)\n     {"}]}