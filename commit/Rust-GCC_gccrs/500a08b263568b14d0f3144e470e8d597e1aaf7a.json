{"sha": "500a08b263568b14d0f3144e470e8d597e1aaf7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwYTA4YjI2MzU2OGIxNGQwZjMxNDRlNDcwZThkNTk3ZTFhYWY3YQ==", "commit": {"author": {"name": "Venkataramanan Kumar", "email": "venkataramanan.kumar@amd.com", "date": "2015-06-12T10:02:25Z"}, "committer": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2015-06-12T10:02:25Z"}, "message": "gcc/\n2015-06-12  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n\n        * common/config/i386/i386-common.c\n        (OPTION_MASK_ISA_MWAITX_SET): New.\n        (ix86_handle_option): Handle mwaitx.\n        * config.gcc (i[34567]86-*-*): Add mwaitxintrin.h,\n        (x86_64-*-*): Likewise.\n        * config/i386/mwaitxintrin.h: New header.\n        * config/i386/cpuid.h (bit_MWAITX):  Define.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect\n        MWAITX support.\n        * config/i386/i386.opt (mwaitx): New.\n        * config/i386/i386-builtin-types.def\n        (VOID_FTYPE_UNSIGNED_ UNSIGNED_UNSIGNED): New function type.\n        * config/i386/i386-c.c: Define __MWAITX__ if needed.\n        * config/i386/i386.c (ix86_target_string): Define -mmwaitx option.\n        (PTA_MWAITX): New.\n        (ix86_option_override_internal): Handle new option.\n        (processor_alias_table): Added PTA_MWAITX.\n        (ix86_valid_target_attribute_inner_p): Add OPT_mmwaitx.\n        (ix86_builtins): Add IX86_BUILTIN_MWAITX, IX86_BUILTIN_MONITORX.\n        (ix86_expand_builtin): Handle IX86_BUILTIN_MWAITX and\n        IX86_BUILTIN_MONITORX  built-ins.\n        * config/i386/i386.h (TARGET_MWAITX): New.\n        * config/i386/i386.md (unspecv): Add UNSPEC_MWAITX and\n        UNSPEC_MONITORX.\n        (mwaitx):  New pattern.\n        (monitorx_<mode>): New pattern.\n        * config/i386/x86intrin.h: Include mwaitxintrin.h.\n        * doc/extend.texi: Document monitorx and mwaitx builtins.\n        * doc/invoke.texi: Document -mmwaitx option.\n\ngcc/testsuite\n\n2015-06-12  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n\n        * gcc.target/i386/monitorx.c: New.\n        * gcc.target/i386/sse-12.c: Add -mmwaitx.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * gcc.target/i386/sse-22.c: Ditto.\n        * gcc.target/i386/sse-23.c: Ditto.\n        * g++.dg/other/i386-2.C: Ditto.\n        * g++.dg/other/i386-3.C: Ditto.\n\nFrom-SVN: r224414", "tree": {"sha": "0a9a339e76852c5d970db49f392de41b5e33ffdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9a339e76852c5d970db49f392de41b5e33ffdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500a08b263568b14d0f3144e470e8d597e1aaf7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500a08b263568b14d0f3144e470e8d597e1aaf7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500a08b263568b14d0f3144e470e8d597e1aaf7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500a08b263568b14d0f3144e470e8d597e1aaf7a/comments", "author": null, "committer": null, "parents": [{"sha": "1c6682fa9f927829bbe635f7b1d52152dea1cf51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6682fa9f927829bbe635f7b1d52152dea1cf51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6682fa9f927829bbe635f7b1d52152dea1cf51"}], "stats": {"total": 256, "additions": 242, "deletions": 14}, "files": [{"sha": "74df9aa295bfb4130a2e29a84022b0fe6d06c9eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1,3 +1,35 @@\n+2015-06-12  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n+\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_MWAITX_SET): New.\n+\t(ix86_handle_option): Handle mwaitx.\n+\t* config.gcc (i[34567]86-*-*): Add mwaitxintrin.h,\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/mwaitxintrin.h: New header.\n+\t* config/i386/cpuid.h (bit_MWAITX):  Define.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tMWAITX support.\n+\t* config/i386/i386.opt (mwaitx): New.\n+\t* config/i386/i386-builtin-types.def\n+\t(VOID_FTYPE_UNSIGNED_ UNSIGNED_UNSIGNED): New function type.\n+\t* config/i386/i386-c.c: Define __MWAITX__ if needed.\n+\t* config/i386/i386.c (ix86_target_string): Define -mmwaitx option.\n+\t(PTA_MWAITX): New.\n+\t(ix86_option_override_internal): Handle new option.\n+\t(processor_alias_table): Added PTA_MWAITX.\n+\t(ix86_valid_target_attribute_inner_p): Add OPT_mmwaitx.\n+\t(ix86_builtins): Add IX86_BUILTIN_MWAITX, IX86_BUILTIN_MONITORX.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_MWAITX and\n+\tIX86_BUILTIN_MONITORX  built-ins.\n+\t* config/i386/i386.h (TARGET_MWAITX): New.\n+\t* config/i386/i386.md (unspecv): Add UNSPEC_MWAITX and\n+\tUNSPEC_MONITORX.\n+\t(mwaitx):  New pattern.\n+\t(monitorx_<mode>): New pattern.\n+\t* config/i386/x86intrin.h: Include mwaitxintrin.h.\n+\t* doc/extend.texi: Document monitorx and mwaitx builtins.\n+\t* doc/invoke.texi: Document -mmwaitx option.\n+\n 2015-06-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* emit-rtl.c (need_atomic_barrier_p): Mask model with"}, {"sha": "0f8c3e1df04c9274640dfefd849f6fad9b9822c6", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -127,6 +127,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RDRND_SET OPTION_MASK_ISA_RDRND\n #define OPTION_MASK_ISA_F16C_SET \\\n   (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n+#define OPTION_MASK_ISA_MWAITX_SET OPTION_MASK_ISA_MWAITX\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -186,6 +187,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_XSAVES_UNSET OPTION_MASK_ISA_XSAVES\n #define OPTION_MASK_ISA_PCOMMIT_UNSET OPTION_MASK_ISA_PCOMMIT\n #define OPTION_MASK_ISA_CLWB_UNSET OPTION_MASK_ISA_CLWB\n+#define OPTION_MASK_ISA_MWAITX_UNSET OPTION_MASK_ISA_MWAITX\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -932,6 +934,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mmwaitx:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MWAITX_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MWAITX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_MWAITX_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MWAITX_UNSET;\n+\t}\n+      return true;\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "805638d726139a77543fdf89935263238ceab91b", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -370,7 +370,7 @@ i[34567]86-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -391,7 +391,7 @@ x86_64-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "f3ad4dbb8f68377f3fc275f3fe91c52ce6559eed", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -57,6 +57,7 @@\n #define bit_LWP \t(1 << 15)\n #define bit_FMA4        (1 << 16)\n #define bit_TBM         (1 << 21)\n+#define bit_MWAITX      (1 << 29)\n \n /* %edx */\n #define bit_MMXEXT\t(1 << 22)"}, {"sha": "1c6c22172d49724761c9d0c700c3211fa905ddbb", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -413,7 +413,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_clflushopt = 0, has_xsavec = 0, has_xsaves = 0;\n   unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n   unsigned int has_avx512vbmi = 0, has_avx512ifma = 0, has_clwb = 0;\n-  unsigned int has_pcommit = 0;\n+  unsigned int has_pcommit = 0, has_mwaitx = 0;\n \n   bool arch;\n \n@@ -532,6 +532,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_longmode = edx & bit_LM;\n       has_3dnowp = edx & bit_3DNOWP;\n       has_3dnow = edx & bit_3DNOW;\n+      has_mwaitx = ecx & bit_MWAITX;\n     }\n \n   /* Get XCR_XFEATURE_ENABLED_MASK register with xgetbv.  */\n@@ -953,6 +954,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512vbmi = has_avx512vbmi ? \" -mavx512vbmi\" : \" -mno-avx512vbmi\";\n       const char *clwb = has_clwb ? \" -mclwb\" : \" -mno-clwb\";\n       const char *pcommit = has_pcommit ? \" -mpcommit\" : \" -mno-pcommit\";\n+      const char *mwaitx  = has_mwaitx  ? \" -mmwaitx\"  : \" -mno-mwaitx\"; \n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n@@ -962,7 +964,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n-\t\t\tavx512ifma, avx512vbmi, clwb, pcommit, NULL);\n+\t\t\tavx512ifma, avx512vbmi, clwb, pcommit, mwaitx, NULL);\n     }\n \n done:"}, {"sha": "2459c440ba5d76e4a4a9e1bc9ed4db1bee3b1779", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -595,6 +595,7 @@ DEF_FUNCTION_TYPE (VOID, PV4DI, V4DI)\n DEF_FUNCTION_TYPE (VOID, PV4SF, V4SF)\n DEF_FUNCTION_TYPE (VOID, PV8SF, V8SF)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED, UNSIGNED)\n+DEF_FUNCTION_TYPE (VOID, UNSIGNED, UNSIGNED, UNSIGNED)\n DEF_FUNCTION_TYPE (VOID, PV8DI, V8DI)\n \n # Instructions returning mask"}, {"sha": "68fdfe0afcfe49740945a5eb1ed209cc42001cf7", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -425,6 +425,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PCOMMIT__\");\n   if (isa_flag & OPTION_MASK_ISA_CLWB)\n     def_or_undef (parse_in, \"__CLWB__\");\n+  if (isa_flag & OPTION_MASK_ISA_MWAITX)\n+    def_or_undef (parse_in, \"__MWAITX__\");\n }\n \n \f"}, {"sha": "1d2784d40a00714479bd6cfda62d72cb9d4732c5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -2361,6 +2361,7 @@ static rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n static rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n static rtx (*ix86_gen_one_cmpl2) (rtx, rtx);\n static rtx (*ix86_gen_monitor) (rtx, rtx, rtx);\n+static rtx (*ix86_gen_monitorx) (rtx, rtx, rtx);\n static rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n static rtx (*ix86_gen_allocate_stack_worker) (rtx, rtx);\n static rtx (*ix86_gen_adjust_stack_and_probe) (rtx, rtx, rtx);\n@@ -2664,6 +2665,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mmpx\",          OPTION_MASK_ISA_MPX },\n     { \"-mclwb\",\t\tOPTION_MASK_ISA_CLWB },\n     { \"-mpcommit\",\tOPTION_MASK_ISA_PCOMMIT },\n+    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX  },\n   };\n \n   /* Flag options.  */\n@@ -3206,6 +3208,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512VBMI\t\t(HOST_WIDE_INT_1 << 54)\n #define PTA_CLWB\t\t(HOST_WIDE_INT_1 << 55)\n #define PTA_PCOMMIT\t\t(HOST_WIDE_INT_1 << 56)\n+#define PTA_MWAITX\t\t(HOST_WIDE_INT_1 << 57)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3359,7 +3362,7 @@ ix86_option_override_internal (bool main_args_p,\n \t| PTA_FMA4 | PTA_XOP | PTA_LWP | PTA_BMI | PTA_BMI2 \n \t| PTA_TBM | PTA_F16C | PTA_FMA | PTA_PRFCHW | PTA_FXSR \n \t| PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE | PTA_RDRND\n-\t| PTA_MOVBE},\n+\t| PTA_MOVBE | PTA_MWAITX},\n       {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n@@ -3803,6 +3806,9 @@ ix86_option_override_internal (bool main_args_p,\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512IFMA;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n+\tif (processor_alias_table[i].flags & PTA_MWAITX\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MWAITX))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MWAITX;\n \n \tbreak;\n       }\n@@ -4221,6 +4227,7 @@ ix86_option_override_internal (bool main_args_p,\n       ix86_gen_adjust_stack_and_probe = gen_adjust_stack_and_probedi;\n       ix86_gen_probe_stack_range = gen_probe_stack_rangedi;\n       ix86_gen_monitor = gen_sse3_monitor_di;\n+      ix86_gen_monitorx = gen_monitorx_di;\n     }\n   else\n     {\n@@ -4233,6 +4240,7 @@ ix86_option_override_internal (bool main_args_p,\n       ix86_gen_adjust_stack_and_probe = gen_adjust_stack_and_probesi;\n       ix86_gen_probe_stack_range = gen_probe_stack_rangesi;\n       ix86_gen_monitor = gen_sse3_monitor_si;\n+      ix86_gen_monitorx = gen_monitorx_si;\n     }\n \n #ifdef USE_IX86_CLD\n@@ -4757,6 +4765,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx512ifma\",\tOPT_mavx512ifma),\n     IX86_ATTR_ISA (\"clwb\",\tOPT_mclwb),\n     IX86_ATTR_ISA (\"pcommit\",\tOPT_mpcommit),\n+    IX86_ATTR_ISA (\"mwaitx\",\tOPT_mmwaitx),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30570,6 +30579,10 @@ enum ix86_builtins\n   IX86_BUILTIN_CVTPS2PH,\n   IX86_BUILTIN_CVTPS2PH256,\n \n+  /* MONITORX and MWAITX instrucions.   */\n+  IX86_BUILTIN_MONITORX,\n+  IX86_BUILTIN_MWAITX,\n+\n   /* CFString built-in for darwin */\n   IX86_BUILTIN_CFSTRING,\n \n@@ -34188,6 +34201,12 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_CLWB, \"__builtin_ia32_clwb\",\n \t       VOID_FTYPE_PCVOID, IX86_BUILTIN_CLWB);\n \n+  /* MONITORX and MWAITX.  */\n+  def_builtin (OPTION_MASK_ISA_MWAITX, \"__builtin_ia32_monitorx\",\n+\t       VOID_FTYPE_PCVOID_UNSIGNED_UNSIGNED, IX86_BUILTIN_MONITORX);\n+  def_builtin (OPTION_MASK_ISA_MWAITX, \"__builtin_ia32_mwaitx\",\n+\t       VOID_FTYPE_UNSIGNED_UNSIGNED_UNSIGNED, IX86_BUILTIN_MWAITX);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -38956,6 +38975,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \treturn 0;\n \n     case IX86_BUILTIN_MONITOR:\n+    case IX86_BUILTIN_MONITORX:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       arg2 = CALL_EXPR_ARG (exp, 2);\n@@ -38968,7 +38988,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \top1 = copy_to_mode_reg (SImode, op1);\n       if (!REG_P (op2))\n \top2 = copy_to_mode_reg (SImode, op2);\n-      emit_insn (ix86_gen_monitor (op0, op1, op2));\n+\n+      emit_insn (fcode == IX86_BUILTIN_MONITOR \n+\t\t ? ix86_gen_monitor (op0, op1, op2)\n+\t\t : ix86_gen_monitorx (op0, op1, op2));\n       return 0;\n \n     case IX86_BUILTIN_MWAIT:\n@@ -38983,6 +39006,22 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_sse3_mwait (op0, op1));\n       return 0;\n \n+    case IX86_BUILTIN_MWAITX:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      arg2 = CALL_EXPR_ARG (exp, 2);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n+      if (!REG_P (op0))\n+\top0 = copy_to_mode_reg (SImode, op0);\n+      if (!REG_P (op1))\n+\top1 = copy_to_mode_reg (SImode, op1);\n+      if (!REG_P (op2))\n+\top2 = copy_to_mode_reg (SImode, op2);\n+      emit_insn (gen_mwaitx (op0, op1, op2));\n+      return 0;\n+\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}, {"sha": "e0af36cec34dafd3c3066afe494e2da292cb4f5d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -154,6 +154,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_PCOMMIT_P(x)\tTARGET_ISA_PCOMMIT_P(x)\n #define TARGET_CLWB\tTARGET_ISA_CLWB\n #define TARGET_CLWB_P(x)\tTARGET_ISA_CLWB_P(x)\n+#define TARGET_MWAITX\tTARGET_ISA_MWAITX\n+#define TARGET_MWAITX_P(x)\tTARGET_ISA_MWAITX_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "b409c17266d21810db12554705fa1dece8a36faa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -261,6 +261,11 @@\n \n   ;; For CLFLUSHOPT support\n   UNSPECV_CLFLUSHOPT\n+\n+  ;; For MONITORX and MWAITX support \n+  UNSPECV_MONITORX\n+  UNSPECV_MWAITX\n+\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -18848,6 +18853,32 @@\n    (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n+;; MONITORX and MWAITX\n+(define_insn \"mwaitx\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"c\")\n+\t\t     (match_operand:SI 1 \"register_operand\" \"a\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \"b\")]\n+\t\t   UNSPECV_MWAITX)]\n+  \"TARGET_MWAITX\"\n+;; 64bit version is \"mwaitx %rax,%rcx,%rbx\". But only lower 32bits are used.\n+;; Since 32bit register operands are implicitly zero extended to 64bit,\n+;; we only need to set up 32bit registers.\n+  \"mwaitx\"\n+  [(set_attr \"length\" \"3\")])\n+\n+(define_insn \"monitorx_<mode>\"\n+  [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"a\")\n+\t\t     (match_operand:SI 1 \"register_operand\" \"c\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t\t   UNSPECV_MONITORX)]\n+  \"TARGET_MWAITX\"\n+;; 64bit version is \"monitorx %rax,%rcx,%rdx\". But only lower 32bits in\n+;; RCX and RDX are used.  Since 32bit register operands are implicitly\n+;; zero extended to 64bit, we only need to set up 32bit registers.\n+  \"%^monitorx\"\n+  [(set (attr \"length\")\n+     (symbol_ref (\"(Pmode != word_mode) + 3\")))])\n+\n ;; MPX instructions\n \n (define_expand \"<mode>_mk\""}, {"sha": "dd46e26de39493c0977a593745a4713f720055f2", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -859,6 +859,10 @@ mmpx\n Target Report Mask(ISA_MPX) Var(ix86_isa_flags) Save\n Support MPX code generation\n \n+mmwaitx\n+Target Report Mask(ISA_MWAITX) Var(ix86_isa_flags) Save\n+Support MWAITX and MONITORX built-in functions and code generation\n+\n mstack-protector-guard=\n Target RejectNegative Joined Enum(stack_protector_guard) Var(ix86_stack_protector_guard) Init(SSP_TLS)\n Use given stack-protector guard"}, {"sha": "d7112dad205bc6ff47d3ed50896758c7021da2d2", "filename": "gcc/config/i386/mwaitxintrin.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fmwaitxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fmwaitxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmwaitxintrin.h?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2012-2015 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _MWAITXINTRIN_H_INCLUDED\n+#define _MWAITXINTRIN_H_INCLUDED\n+\n+#ifndef __MWAITX__\n+#pragma GCC push_options\n+#pragma GCC target(\"mwaitx\")\n+#define __DISABLE_MWAITX__\n+#endif /* __MWAITX__ */\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_monitorx (void const * __P, unsigned int __E, unsigned int __H)\n+{\n+  __builtin_ia32_monitorx (__P, __E, __H);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mwaitx (unsigned int __E, unsigned int __H, unsigned int __C)\n+{\n+  __builtin_ia32_mwaitx (__E, __H, __C);\n+}\n+\n+#ifdef __DISABLE_MWAITX__\n+#undef __DISABLE_MWAITX__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_MWAITX__ */\n+\n+#endif /* _MWAITXINTRIN_H_INCLUDED */"}, {"sha": "6f7b1f66a6d322c5b850d9f0321b66d28aac06ff", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -85,4 +85,5 @@\n \n #include <xsavecintrin.h>\n \n+#include <mwaitxintrin.h>\n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "8258000510ec37d9b027e945b311a7dcd82571bf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -17919,6 +17919,13 @@ void __builtin_ia32_xabort (status)\n int __builtin_ia32_xtest ()\n @end smallexample\n \n+The following built-in functions are available when @option{-mmwaitx} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+void __builtin_ia32_monitorx (void *, unsigned int, unsigned int)\n+void __builtin_ia32_mwaitx (unsigned int, unsigned int, unsigned int)\n+@end smallexample\n+\n @node x86 transactional memory intrinsics\n @subsection x86 Transactional Memory Intrinsics\n "}, {"sha": "431ca57ff5f4a10d3c6419769916d0594d304763", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1085,7 +1085,7 @@ See RS/6000 and PowerPC Options.\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma -mprefetchwt1 @gol\n -mclflushopt -mxsavec -mxsaves @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n--mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mthreads @gol\n+-mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mmwaitx -mthreads @gol\n -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy} -mmemset-strategy=@var{strategy} @gol\n@@ -22876,10 +22876,13 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mmpx\n @opindex mmpx\n+@need 200\n+@itemx -mmwaitx\n+@opindex mmwaitx\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n-BMI, BMI2, FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX or 3DNow!@:\n+BMI, BMI2, FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX or 3DNow!@:\n extended instruction sets.  Each has a corresponding @option{-mno-} option\n to disable use of these instructions.\n "}, {"sha": "1865bedf93231132d750516b06d21092dd994441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1,3 +1,14 @@\n+2015-06-12  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n+\n+\t* gcc.target/i386/monitorx.c: New.\n+\t* gcc.target/i386/sse-12.c: Add -mmwaitx.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2015-06-11  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* gcc.dg/tree-prof/stringop-2.c: Fix ifdef __mips."}, {"sha": "887eb18acdc255913227cd3a17bfe4891917a52d", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "9555ccb34de82e7443edfe3f93880549236714a4", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "e4ca18d33761ffec5e391b643a3e6294dddcf0ae", "filename": "gcc/testsuite/gcc.target/i386/monitorx.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmonitorx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmonitorx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmonitorx.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmwaitx\" } */\n+\n+/* Verify that they work in both 32bit and 64bit.  */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (char *p, int x, int y, int z, int c)\n+{\n+   _mm_monitorx (p, y, x);\n+   _mm_mwaitx (z, y, c);\n+}\n+\n+void\n+bar (char *p, long x, long y, long z, long c)\n+{\n+   _mm_monitorx (p, y, x);\n+   _mm_mwaitx (z, y, c);\n+}\n+\n+void\n+foo1 (char *p)\n+{\n+   _mm_monitorx (p, 0, 0);\n+   _mm_mwaitx (0, 0, 0);\n+}"}, {"sha": "1db0d8bddd02d90286652600006e4c65f0860856", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb -mpcommit\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "13d9eb878ef39593aea3f7d4761ac5aaf0530254", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb -mpcommit\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "52f78025d64fefc08c96878057c3f32aff483448", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "a3660f8b2cb289e6d3722122a9b7295d85d85f56", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500a08b263568b14d0f3144e470e8d597e1aaf7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=500a08b263568b14d0f3144e470e8d597e1aaf7a", "patch": "@@ -594,6 +594,6 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb,pcommit\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb,pcommit,mwaitx\")\n \n #include <x86intrin.h>"}]}