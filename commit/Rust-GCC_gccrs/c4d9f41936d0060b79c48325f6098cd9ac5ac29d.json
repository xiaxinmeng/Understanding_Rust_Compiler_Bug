{"sha": "c4d9f41936d0060b79c48325f6098cd9ac5ac29d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkOWY0MTkzNmQwMDYwYjc5YzQ4MzI1ZjYwOThjZDlhYzVhYzI5ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-08T01:23:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-08T01:23:53Z"}, "message": "future (__future_base::_Ptr): Use alias-declaration.\n\n\t* include/std/future (__future_base::_Ptr): Use alias-declaration.\n\t(__is_same_pkgdtask): Rename to __constrain_pkgdtask and use decay\n\tinstead of remove_reference so that cv-quals are removed.\n\nFrom-SVN: r181145", "tree": {"sha": "3540e8ffe4706845a187a9fb3c1ce0e1aeb8305c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3540e8ffe4706845a187a9fb3c1ce0e1aeb8305c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d9f41936d0060b79c48325f6098cd9ac5ac29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d9f41936d0060b79c48325f6098cd9ac5ac29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d9f41936d0060b79c48325f6098cd9ac5ac29d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d9f41936d0060b79c48325f6098cd9ac5ac29d/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e72c65d183305bf9986be8404e01047a0a3d07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e72c65d183305bf9986be8404e01047a0a3d07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e72c65d183305bf9986be8404e01047a0a3d07b"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "978a507693956d3e7c98c8cb895211519e3baf0f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d9f41936d0060b79c48325f6098cd9ac5ac29d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d9f41936d0060b79c48325f6098cd9ac5ac29d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4d9f41936d0060b79c48325f6098cd9ac5ac29d", "patch": "@@ -1,3 +1,9 @@\n+2011-11-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future (__future_base::_Ptr): Use alias-declaration.\n+\t(__is_same_pkgdtask): Rename to __constrain_pkgdtask and use decay\n+\tinstead of remove_reference so that cv-quals are removed.\n+\n 2011-11-08  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/precompiled/stdc++.h: Add cstdalign."}, {"sha": "4591eb67c98f4dae9f821e9f382ede8c378d681e", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d9f41936d0060b79c48325f6098cd9ac5ac29d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d9f41936d0060b79c48325f6098cd9ac5ac29d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=c4d9f41936d0060b79c48325f6098cd9ac5ac29d", "patch": "@@ -258,17 +258,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid* _M_addr() noexcept { return static_cast<void*>(&_M_storage); }\n     };\n \n-    // TODO: use template alias when available\n-    /*\n-      template<typename _Res>\n-      using _Ptr = unique_ptr<_Res, _Result_base::_Deleter>;\n-    */\n     /// A unique_ptr based on the instantiating type.\n     template<typename _Res>\n-      struct _Ptr\n-      {\n-\ttypedef unique_ptr<_Res, _Result_base::_Deleter> type;\n-      };\n+      using _Ptr = unique_ptr<_Res, _Result_base::_Deleter>;\n \n     /// Result_alloc.\n     template<typename _Res, typename _Alloc>\n@@ -291,7 +283,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _Res, typename _Allocator>\n-      static typename _Ptr<_Result_alloc<_Res, _Allocator>>::type\n+      static _Ptr<_Result_alloc<_Res, _Allocator>>\n       _S_allocate_result(const _Allocator& __a)\n       {\n         typedef _Result_alloc<_Res, _Allocator>\t__result_type;\n@@ -306,15 +298,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           __a2.deallocate(__p, 1);\n           __throw_exception_again;\n         }\n-        return typename _Ptr<__result_type>::type(__p);\n+        return _Ptr<__result_type>(__p);\n       }\n \n \n     /// Base class for state between a promise and one or more\n     /// associated futures.\n     class _State_base\n     {\n-      typedef _Ptr<_Result_base>::type _Ptr_type;\n+      typedef _Ptr<_Result_base> _Ptr_type;\n \n       _Ptr_type\t\t\t_M_result;\n       mutex               \t_M_mutex;\n@@ -930,9 +922,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     class promise\n     {\n-      typedef __future_base::_State_base \t\t\t_State;\n-      typedef __future_base::_Result<_Res>\t\t\t_Res_type;\n-      typedef typename __future_base::_Ptr<_Res_type>::type\t_Ptr_type;\n+      typedef __future_base::_State_base \t_State;\n+      typedef __future_base::_Result<_Res>\t_Res_type;\n+      typedef __future_base::_Ptr<_Res_type>\t_Ptr_type;\n       template<typename, typename> friend class _State::_Setter;\n \n       shared_ptr<_State>                        _M_future;\n@@ -1028,9 +1020,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     class promise<_Res&>\n     {\n-      typedef __future_base::_State_base\t\t\t_State;\n-      typedef __future_base::_Result<_Res&>\t\t\t_Res_type;\n-      typedef typename __future_base::_Ptr<_Res_type>::type \t_Ptr_type;\n+      typedef __future_base::_State_base\t_State;\n+      typedef __future_base::_Result<_Res&>\t_Res_type;\n+      typedef __future_base::_Ptr<_Res_type> \t_Ptr_type;\n       template<typename, typename> friend class _State::_Setter;\n \n       shared_ptr<_State>                        _M_future;\n@@ -1109,9 +1101,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     class promise<void>\n     {\n-      typedef __future_base::_State_base\t\t\t_State;\n-      typedef __future_base::_Result<void>\t\t\t_Res_type;\n-      typedef typename __future_base::_Ptr<_Res_type>::type \t_Ptr_type;\n+      typedef __future_base::_State_base\t_State;\n+      typedef __future_base::_Result<void>\t_Res_type;\n+      typedef __future_base::_Ptr<_Res_type> \t_Ptr_type;\n       template<typename, typename> friend class _State::_Setter;\n \n       shared_ptr<_State>                        _M_future;\n@@ -1272,7 +1264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _M_set_result(std::move(__setter));\n       }\n \n-      typedef typename __future_base::_Ptr<_Result<_Res>>::type _Ptr_type;\n+      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;\n       _Ptr_type _M_result;\n       std::function<_Res(_Args...)> _M_task;\n \n@@ -1289,12 +1281,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Task, typename _Fn, bool\n-           = is_same<_Task, typename remove_reference<_Fn>::type>::value>\n-    struct __is_same_pkgdtask\n+           = is_same<_Task, typename decay<_Fn>::type>::value>\n+    struct __constrain_pkgdtask\n     { typedef void __type; };\n \n   template<typename _Task, typename _Fn>\n-    struct __is_same_pkgdtask<_Task, _Fn, true>\n+    struct __constrain_pkgdtask<_Task, _Fn, true>\n     { };\n \n   /// packaged_task\n@@ -1314,14 +1306,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { }\n \n       template<typename _Fn, typename = typename\n-               __is_same_pkgdtask<packaged_task, _Fn>::__type>\n+               __constrain_pkgdtask<packaged_task, _Fn>::__type>\n         explicit\n         packaged_task(_Fn&& __fn)\n         : _M_state(std::make_shared<_State_type>(std::forward<_Fn>(__fn)))\n         { }\n \n       template<typename _Fn, typename _Allocator, typename = typename\n-               __is_same_pkgdtask<packaged_task, _Fn>::__type>\n+               __constrain_pkgdtask<packaged_task, _Fn>::__type>\n         explicit\n         packaged_task(allocator_arg_t, const _Allocator& __a, _Fn&& __fn)\n         : _M_state(std::allocate_shared<_State_type>(__a,\n@@ -1410,7 +1402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { }\n \n     private:\n-      typedef typename __future_base::_Ptr<_Result<_Res>>::type _Ptr_type;\n+      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;\n       _Ptr_type _M_result;\n       _BoundFn _M_fn;\n \n@@ -1440,7 +1432,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _M_set_result(_S_task_setter(_M_result, _M_fn));\n       }\n \n-      typedef typename __future_base::_Ptr<_Result<_Res>>::type _Ptr_type;\n+      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;\n       _Ptr_type _M_result;\n       _BoundFn _M_fn;\n       thread _M_thread;"}]}