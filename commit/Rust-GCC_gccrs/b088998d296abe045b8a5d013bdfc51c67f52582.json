{"sha": "b088998d296abe045b8a5d013bdfc51c67f52582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA4ODk5OGQyOTZhYmUwNDViOGE1ZDAxM2JkZmM1MWM2N2Y1MjU4Mg==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2000-12-19T18:19:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-12-19T18:19:56Z"}, "message": "From Jeff Law.\n\n        * pa.c (basereg_operand): Simplify.\n\nFrom-SVN: r38382", "tree": {"sha": "57de79ff3cabdf3e1f4a3e1e2793659697ecf245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57de79ff3cabdf3e1f4a3e1e2793659697ecf245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b088998d296abe045b8a5d013bdfc51c67f52582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b088998d296abe045b8a5d013bdfc51c67f52582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b088998d296abe045b8a5d013bdfc51c67f52582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b088998d296abe045b8a5d013bdfc51c67f52582/comments", "author": null, "committer": null, "parents": [{"sha": "79c2ffde686279bf867bc890584da1990a42899e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c2ffde686279bf867bc890584da1990a42899e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c2ffde686279bf867bc890584da1990a42899e"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "38b8b13ca4ec03579beaecebc388a830e7e20c6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b088998d296abe045b8a5d013bdfc51c67f52582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b088998d296abe045b8a5d013bdfc51c67f52582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b088998d296abe045b8a5d013bdfc51c67f52582", "patch": "@@ -1,3 +1,8 @@\n+2000-12-19  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\tFrom Jeff Law.\n+\t* pa.c (basereg_operand): Simplify.\n+\n 2000-12-19  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* haifa-sched.c (rm_line_notes): Arguments are now head and tail,"}, {"sha": "0aeb10d378d2bfd6bab03bd32c65a37744118f76", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b088998d296abe045b8a5d013bdfc51c67f52582/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b088998d296abe045b8a5d013bdfc51c67f52582/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b088998d296abe045b8a5d013bdfc51c67f52582", "patch": "@@ -6152,29 +6152,15 @@ basereg_operand (op, mode)\n   if (TARGET_NO_SPACE_REGS)\n     return (GET_CODE (op) == REG);\n \n-  /* Once reload has started any register with REG_POINTER set\n-     is considered valid.  Reload should only create indexed addresses\n-     using the stack/frame pointer.  All others are checked for\n-     validity when they are created by the combine pass.  */\n-  if (reload_in_progress || reload_completed)\n-    return (GET_CODE (op) == REG && REG_POINTER (op));\n-\n-  /* Stack is always OK for indexing.  */\n-  if (op == stack_pointer_rtx)\n-    return 1;\n-\n   /* While it's always safe to index off the frame pointer, it's not\n      always profitable, particularly when the frame pointer is being\n      eliminated.  */\n   if (! flag_omit_frame_pointer && op == frame_pointer_rtx)\n     return 1;\n \n-  /* The only other valid OPs are pseudo registers with\n-     REG_POINTER set.  */\n   return (GET_CODE (op) == REG\n-          && REGNO (op) >= FIRST_PSEUDO_REGISTER\n-          && register_operand (op, mode)\n-          && REG_POINTER (op));\n+          && REG_POINTER (op)\n+          && register_operand (op, mode));\n }\n \n /* Return 1 if this operand is anything other than a hard register.  */"}]}