{"sha": "e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiOWU1ZjllM2M5MGE1NWU2NDNlYTg1MGNmODI4ZTNlNjQ4MGZiNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-09-14T20:40:55Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-09-14T20:40:55Z"}, "message": "re PR fortran/91557 (Bogus warning about unused dummy argument _formal_*)\n\n2019-09-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91557\n\tPR fortran/91556\n\t* frontend-passes.c (check_externals_procedure): Reformat argument\n\tlist. Use gfc_compare_actual_formal instead of gfc_procedure_use.\n\t* gfortran.h (gfc_symbol): Add flag error.\n\t* interface.c (gfc_compare_interfaces): Reformat.\n\t(argument_rank_mismatch): Add where_formal argument. If it is\n\tpresent, note that the error is between different calls.\n\t(compare_parameter): Change warnings that previously dependended\n\ton -Wargument-mismatch to unconditional.  Issue an error / warning\n\ton type mismatch only once.  Pass where_formal to\n\targument_rank_mismatch for artificial variables.\n\t(compare_actual_formal): Change warnings that previously\n\tdependeded on -Wargument-mismatch to unconditional.\n\t(gfc_check_typebound_override): Likewise.\n\t(gfc_get_formal_from_actual_arglist): Set declared_at for\n\tartificial symbol.\n\t* invoke.texi: Extend description of -fallow-argument-mismatch.\n\tDelete -Wargument-mismatch.\n\t* lang.opt: Change -Wargument-mismatch to do-nothing option.\n\t* resolve.c (resolve_structure_cons): Change warnings that\n\tpreviously depended on -Wargument-mismatch to unconditional.\n\t* trans-decl.c (generate_local_decl): Do not warn if the symbol is\n\tartificial.\n\n2019-09-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91557\n\tPR fortran/91556\n\t* gfortran.dg/argument_checking_20.f90: New test.\n\t* gfortran.dg/argument_checking_21.f90: New test.\n\t* gfortran.dg/argument_checking_22.f90: New test.\n\t* gfortran.dg/argument_checking_23.f90: New test.\n\t* gfortran.dg/warn_unused_dummy_argument_5.f90: New test.\n\t* gfortran.dg/bessel_3.f90: Add pattern for type mismatch.\n\t* gfortran.dg/g77/20010519-1.f: Adjust dg-warning messages to new\n\thandling.\n\t* gfortran.dg/pr24823.f: Likewise.\n\t* gfortran.dg/pr39937.f: Likewise.\n\nFrom-SVN: r275719", "tree": {"sha": "c4fc497adf886895316602a7aceb79dea87dd956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4fc497adf886895316602a7aceb79dea87dd956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/comments", "author": null, "committer": null, "parents": [{"sha": "df19f4717db02943c2ddee1e9f632581537f6c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df19f4717db02943c2ddee1e9f632581537f6c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df19f4717db02943c2ddee1e9f632581537f6c78"}], "stats": {"total": 304, "additions": 232, "deletions": 72}, "files": [{"sha": "56a107dae0aa6b642416d8ce1394b439c6ecf050", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -1,3 +1,30 @@\n+2019-09-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91557\n+\tPR fortran/91556\n+\t* frontend-passes.c (check_externals_procedure): Reformat argument\n+\tlist. Use gfc_compare_actual_formal instead of gfc_procedure_use.\n+\t* gfortran.h (gfc_symbol): Add flag error.\n+\t* interface.c (gfc_compare_interfaces): Reformat.\n+\t(argument_rank_mismatch): Add where_formal argument. If it is\n+\tpresent, note that the error is between different calls.\n+\t(compare_parameter): Change warnings that previously dependended\n+\ton -Wargument-mismatch to unconditional.  Issue an error / warning\n+\ton type mismatch only once.  Pass where_formal to\n+\targument_rank_mismatch for artificial variables.\n+\t(compare_actual_formal): Change warnings that previously\n+\tdependeded on -Wargument-mismatch to unconditional.\n+\t(gfc_check_typebound_override): Likewise.\n+\t(gfc_get_formal_from_actual_arglist): Set declared_at for\n+\tartificial symbol.\n+\t* invoke.texi: Extend description of -fallow-argument-mismatch.\n+\tDelete -Wargument-mismatch.\n+\t* lang.opt: Change -Wargument-mismatch to do-nothing option.\n+\t* resolve.c (resolve_structure_cons): Change warnings that\n+\tpreviously depended on -Wargument-mismatch to unconditional.\n+\t* trans-decl.c (generate_local_decl): Do not warn if the symbol is\n+\tartificial.\n+\n 2019-09-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91566"}, {"sha": "b095d5f3420c14501d49d4a5656c95004c8c04e6", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -5373,7 +5373,8 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n /* Common tests for argument checking for both functions and subroutines.  */\n \n static int\n-check_externals_procedure (gfc_symbol *sym, locus *loc, gfc_actual_arglist *actual)\n+check_externals_procedure (gfc_symbol *sym, locus *loc,\n+\t\t\t   gfc_actual_arglist *actual)\n {\n   gfc_gsymbol *gsym;\n   gfc_symbol *def_sym = NULL;\n@@ -5396,7 +5397,7 @@ check_externals_procedure (gfc_symbol *sym, locus *loc, gfc_actual_arglist *actu\n \n   if (def_sym)\n     {\n-      gfc_procedure_use (def_sym, &actual, loc);\n+      gfc_compare_actual_formal (&actual, def_sym->formal, 0, 0, 0, loc);\n       return 0;\n     }\n "}, {"sha": "6f7717d11340a7f2aff815d69c82d7b3123eb19c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -1610,6 +1610,9 @@ typedef struct gfc_symbol\n   /* Set if this is a module function or subroutine with the\n      abreviated declaration in a submodule.  */\n   unsigned abr_modproc_decl:1;\n+  /* Set if a previous error or warning has occurred and no other\n+     should be reported.  */\n+  unsigned error:1;\n \n   int refs;\n   struct gfc_namespace *ns;\t/* namespace containing this symbol */"}, {"sha": "08e4f063a6781d9cbc602a3fae336b73e81288c3", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 83, "deletions": 37, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -1807,9 +1807,9 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \t    if (!compare_rank (f2->sym, f1->sym))\n \t      {\n \t\tif (errmsg != NULL)\n-\t\t  snprintf (errmsg, err_len, \"Rank mismatch in argument '%s' \"\n-\t\t\t    \"(%i/%i)\", f1->sym->name, symbol_rank (f1->sym),\n-\t\t\t    symbol_rank (f2->sym));\n+\t\t  snprintf (errmsg, err_len, \"Rank mismatch in argument \"\n+\t\t\t    \"'%s' (%i/%i)\", f1->sym->name,\n+\t\t\t    symbol_rank (f1->sym), symbol_rank (f2->sym));\n \t\treturn false;\n \t      }\n \t    if ((gfc_option.allow_std & GFC_STD_F2008)\n@@ -2189,22 +2189,42 @@ compare_pointer (gfc_symbol *formal, gfc_expr *actual)\n \n static void\n argument_rank_mismatch (const char *name, locus *where,\n-\t\t\tint rank1, int rank2)\n+\t\t\tint rank1, int rank2, locus *where_formal)\n {\n \n   /* TS 29113, C407b.  */\n-  if (rank2 == -1)\n-    gfc_error (\"The assumed-rank array at %L requires that the dummy argument\"\n-\t       \" %qs has assumed-rank\", where, name);\n-  else if (rank1 == 0)\n-    gfc_error_opt (OPT_Wargument_mismatch, \"Rank mismatch in argument %qs \"\n-\t\t   \"at %L (scalar and rank-%d)\", name, where, rank2);\n-  else if (rank2 == 0)\n-    gfc_error_opt (OPT_Wargument_mismatch, \"Rank mismatch in argument %qs \"\n-\t\t   \"at %L (rank-%d and scalar)\", name, where, rank1);\n+  if (where_formal == NULL)\n+    {\n+      if (rank2 == -1)\n+\tgfc_error (\"The assumed-rank array at %L requires that the dummy \"\n+\t\t   \"argument %qs has assumed-rank\", where, name);\n+      else if (rank1 == 0)\n+\tgfc_error_opt (0, \"Rank mismatch in argument %qs \"\n+\t\t       \"at %L (scalar and rank-%d)\", name, where, rank2);\n+      else if (rank2 == 0)\n+\tgfc_error_opt (0, \"Rank mismatch in argument %qs \"\n+\t\t       \"at %L (rank-%d and scalar)\", name, where, rank1);\n+      else\n+\tgfc_error_opt (0, \"Rank mismatch in argument %qs \"\n+\t\t       \"at %L (rank-%d and rank-%d)\", name, where, rank1,\n+\t\t       rank2);\n+    }\n   else\n-    gfc_error_opt (OPT_Wargument_mismatch, \"Rank mismatch in argument %qs \"\n-\t\t   \"at %L (rank-%d and rank-%d)\", name, where, rank1, rank2);\n+    {\n+      gcc_assert (rank2 != -1);\n+      if (rank1 == 0)\n+\tgfc_error_opt (0, \"Rank mismatch between actual argument at %L \"\n+\t\t       \"and actual argument at %L (scalar and rank-%d)\",\n+\t\t       where, where_formal, rank2);\n+      else if (rank2 == 0)\n+\tgfc_error_opt (0, \"Rank mismatch between actual argument at %L \"\n+\t\t       \"and actual argument at %L (rank-%d and scalar)\",\n+\t\t       where, where_formal, rank1);\n+      else\n+\tgfc_error_opt (0, \"Rank mismatch between actual argument at %L \"\n+\t\t       \"and actual argument at %L (rank-%d and rank-%d\", where,\n+\t\t       where_formal, rank1, rank2);\n+    }\n }\n \n \n@@ -2253,8 +2273,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t\t\t   sizeof(err), NULL, NULL))\n \t{\n \t  if (where)\n-\t    gfc_error_opt (OPT_Wargument_mismatch,\n-\t\t\t   \"Interface mismatch in dummy procedure %qs at %L:\"\n+\t    gfc_error_opt (0, \"Interface mismatch in dummy procedure %qs at %L:\"\n \t\t\t   \" %s\", formal->name, &actual->where, err);\n \t  return false;\n \t}\n@@ -2281,8 +2300,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t\t\t   err, sizeof(err), NULL, NULL))\n \t{\n \t  if (where)\n-\t    gfc_error_opt (OPT_Wargument_mismatch,\n-\t\t\t   \"Interface mismatch in dummy procedure %qs at %L:\"\n+\t    gfc_error_opt (0, \"Interface mismatch in dummy procedure %qs at %L:\"\n \t\t\t   \" %s\", formal->name, &actual->where, err);\n \t  return false;\n \t}\n@@ -2312,10 +2330,24 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t\t\t\t CLASS_DATA (actual)->ts.u.derived)))\n     {\n       if (where)\n-\tgfc_error_opt (OPT_Wargument_mismatch,\n-\t\t       \"Type mismatch in argument %qs at %L; passed %s to %s\",\n-\t\t       formal->name, where, gfc_typename (&actual->ts),\n-\t\t       gfc_typename (&formal->ts));\n+\t{\n+\t  if (formal->attr.artificial)\n+\t    {\n+\t      if (!flag_allow_argument_mismatch || !formal->error)\n+\t\tgfc_error_opt (0, \"Type mismatch between actual argument at %L \"\n+\t\t\t       \"and actual argument at %L (%s/%s).\",\n+\t\t\t       &actual->where,\n+\t\t\t       &formal->declared_at,\n+\t\t\t       gfc_typename (&actual->ts),\n+\t\t\t       gfc_typename (&formal->ts));\n+\n+\t      formal->error = 1;\n+\t    }\n+\t  else\n+\t    gfc_error_opt (0, \"Type mismatch in argument %qs at %L; passed %s \"\n+\t\t\t   \"to %s\", formal->name, where, gfc_typename (&actual->ts),\n+\t\t\t   gfc_typename (&formal->ts));\n+\t}\n       return false;\n     }\n \n@@ -2512,8 +2544,17 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t  && gfc_is_coindexed (actual)))\n     {\n       if (where)\n-\targument_rank_mismatch (formal->name, &actual->where,\n-\t\t\t\tsymbol_rank (formal), actual->rank);\n+\t{\n+\t  locus *where_formal;\n+\t  if (formal->attr.artificial)\n+\t    where_formal = &formal->declared_at;\n+\t  else\n+\t    where_formal = NULL;\n+\n+\t  argument_rank_mismatch (formal->name, &actual->where,\n+\t\t\t\t  symbol_rank (formal), actual->rank,\n+\t\t\t\t  where_formal);\n+\t}\n       return false;\n     }\n   else if (actual->rank != 0 && (is_elemental || formal->attr.dimension))\n@@ -2584,8 +2625,17 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n   if (ref == NULL && actual->expr_type != EXPR_NULL)\n     {\n       if (where)\n-\targument_rank_mismatch (formal->name, &actual->where,\n-\t\t\t\tsymbol_rank (formal), actual->rank);\n+\t{\n+\t  locus *where_formal;\n+\t  if (formal->attr.artificial)\n+\t    where_formal = &formal->declared_at;\n+\t  else\n+\t    where_formal = NULL;\n+\n+\t  argument_rank_mismatch (formal->name, &actual->where,\n+\t\t\t\t  symbol_rank (formal), actual->rank,\n+\t\t\t\t  where_formal);\n+\t}\n       return false;\n     }\n \n@@ -3062,16 +3112,14 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       f->sym->ts.u.cl->length->value.integer) != 0))\n \t{\n \t  if (where && (f->sym->attr.pointer || f->sym->attr.allocatable))\n-\t    gfc_warning (OPT_Wargument_mismatch,\n-\t\t\t \"Character length mismatch (%ld/%ld) between actual \"\n+\t    gfc_warning (0, \"Character length mismatch (%ld/%ld) between actual \"\n \t\t\t \"argument and pointer or allocatable dummy argument \"\n \t\t\t \"%qs at %L\",\n \t\t\t mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n \t\t\t mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n \t\t\t f->sym->name, &a->expr->where);\n \t  else if (where)\n-\t    gfc_warning (OPT_Wargument_mismatch,\n-\t\t\t \"Character length mismatch (%ld/%ld) between actual \"\n+\t    gfc_warning (0, \"Character length mismatch (%ld/%ld) between actual \"\n \t\t\t \"argument and assumed-shape dummy argument %qs \"\n \t\t\t \"at %L\",\n \t\t\t mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n@@ -3102,17 +3150,15 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  && f->sym->attr.flavor != FL_PROCEDURE)\n \t{\n \t  if (a->expr->ts.type == BT_CHARACTER && !f->sym->as && where)\n-\t    gfc_warning (OPT_Wargument_mismatch,\n-\t\t\t \"Character length of actual argument shorter \"\n+\t    gfc_warning (0, \"Character length of actual argument shorter \"\n \t\t\t \"than of dummy argument %qs (%lu/%lu) at %L\",\n \t\t\t f->sym->name, actual_size, formal_size,\n \t\t\t &a->expr->where);\n           else if (where)\n \t    {\n \t      /* Emit a warning for -std=legacy and an error otherwise. */\n \t      if (gfc_option.warn_std == 0)\n-\t        gfc_warning (OPT_Wargument_mismatch,\n-\t\t\t     \"Actual argument contains too few \"\n+\t        gfc_warning (0, \"Actual argument contains too few \"\n \t\t\t     \"elements for dummy argument %qs (%lu/%lu) \"\n \t\t\t     \"at %L\", f->sym->name, actual_size,\n \t\t\t     formal_size, &a->expr->where);\n@@ -4706,8 +4752,7 @@ gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n       if (!gfc_check_dummy_characteristics (proc_formal->sym, old_formal->sym,\n \t\t\t\t\tcheck_type, err, sizeof(err)))\n \t{\n-\t  gfc_error_opt (OPT_Wargument_mismatch,\n-\t\t\t \"Argument mismatch for the overriding procedure \"\n+\t  gfc_error_opt (0, \"Argument mismatch for the overriding procedure \"\n \t\t\t \"%qs at %L: %s\", proc->name, &where, err);\n \t  return false;\n \t}\n@@ -5184,6 +5229,7 @@ gfc_get_formal_from_actual_arglist (gfc_symbol *sym,\n \t\t}\n \t    }\n \t  s->attr.dummy = 1;\n+\t  s->declared_at = a->expr->where;\n \t  s->attr.intent = INTENT_UNKNOWN;\n \t  (*f)->sym = s;\n \t}"}, {"sha": "fa60effdbfe0d83ac5b4c227f166e4c1fcb134f0", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -145,7 +145,7 @@ by type.  Explanations are in the following sections.\n @item Error and Warning Options\n @xref{Error and Warning Options,,Options to request or suppress errors\n and warnings}.\n-@gccoptlist{-Waliasing -Wall -Wampersand -Wargument-mismatch -Warray-bounds @gol\n+@gccoptlist{-Waliasing -Wall -Wampersand -Warray-bounds @gol\n -Wc-binding-type -Wcharacter-truncation -Wconversion @gol\n -Wdo-subscript -Wfunction-elimination -Wimplicit-interface @gol\n -Wimplicit-procedure -Wintrinsic-shadow -Wuse-without-only @gol\n@@ -236,8 +236,15 @@ intrinsic will be called except when it is explicitly declared @code{EXTERNAL}.\n Some code contains calls to external procedures whith mismatches\n between the calls and the procedure definition, or with mismatches\n between different calls. Such code is non-conforming, and will usually\n-be flagged with an error.  This options degrades the error to a\n-warning.  This option is implied by @option{-std=legacy}.\n+be flagged wi1th an error.  This options degrades the error to a\n+warning, which can only be disabled by disabling all warnings vial\n+@option{-w}.  Only a single occurrence per argument is flagged by this\n+warning.  @option{-fallow-argument-mismatch} is implied by\n+@option{-std=legacy}.\n+\n+Using this option is @emph{strongly} discouraged.  It is possible to\n+provide standard-conforming code which allows different types of\n+arguments by using an explicit interface and @code{TYPE(*)}.\n \n @item -fallow-invalid-boz\n @opindex @code{allow-invalid-boz}\n@@ -907,15 +914,6 @@ character constant, GNU Fortran assumes continuation at the first\n non-comment, non-whitespace character after the ampersand that\n initiated the continuation.\n \n-@item -Wargument-mismatch\n-@opindex @code{Wargument-mismatch}\n-@cindex warnings, argument mismatch\n-@cindex warnings, parameter mismatch\n-@cindex warnings, interface mismatch\n-Warn about type, rank, and other mismatches between formal parameters and actual\n-arguments to functions and subroutines.  These warnings are recommended and\n-thus enabled by default.\n-\n @item -Warray-temporaries\n @opindex @code{Warray-temporaries}\n @cindex warnings, array temporaries"}, {"sha": "2cfc76df2ab325f2a60889d2a613f2be3d1d1826", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -210,8 +210,8 @@ Fortran Warning Var(warn_array_temporaries)\n Warn about creation of array temporaries.\n \n Wargument-mismatch\n-Fortran Warning Var(warn_argument_mismatch) Init(1)\n-Warn about type and rank mismatches between arguments and parameters.\n+Fortran WarnRemoved\n+Does nothing. Preserved for backward compatibility.\n \n Wc-binding-type\n Fortran Var(warn_c_binding_type) Warning LangEnabledBy(Fortran,Wall)"}, {"sha": "c4260bbb09ce1bef5f9095cdadddfaec112d2e06", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -1429,8 +1429,7 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t  if (s2 && !gfc_compare_interfaces (comp->ts.interface, s2, name, 0, 1,\n \t\t\t\t\t     err, sizeof (err), NULL, NULL))\n \t    {\n-\t      gfc_error_opt (OPT_Wargument_mismatch,\n-\t\t\t     \"Interface mismatch for procedure-pointer \"\n+\t      gfc_error_opt (0, \"Interface mismatch for procedure-pointer \"\n \t\t\t     \"component %qs in structure constructor at %L:\"\n \t\t\t     \" %s\", comp->name, &cons->expr->where, err);\n \t      return false;\n@@ -2609,8 +2608,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n       if (!gfc_compare_interfaces (sym, def_sym, sym->name, 0, 1,\n \t\t\t\t   reason, sizeof(reason), NULL, NULL))\n \t{\n-\t  gfc_error_opt (OPT_Wargument_mismatch,\n-\t\t\t \"Interface mismatch in global procedure %qs at %L:\"\n+\t  gfc_error_opt (0, \"Interface mismatch in global procedure %qs at %L:\"\n \t\t\t \" %s\", sym->name, &sym->declared_at, reason);\n \t  goto done;\n \t}"}, {"sha": "c2c5d9d1b6a9d54eb0c8a0e1ae3d32fc18a64c40", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -5881,9 +5881,11 @@ generate_local_decl (gfc_symbol * sym)\n \t    }\n \t  else if (warn_unused_dummy_argument)\n \t    {\n-\t      gfc_warning (OPT_Wunused_dummy_argument,\n-\t\t\t   \"Unused dummy argument %qs at %L\", sym->name,\n-\t\t\t   &sym->declared_at);\n+\t      if (!sym->attr.artificial)\n+\t\tgfc_warning (OPT_Wunused_dummy_argument,\n+\t\t\t     \"Unused dummy argument %qs at %L\", sym->name,\n+\t\t\t     &sym->declared_at);\n+\n \t      if (sym->backend_decl != NULL_TREE)\n \t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n \t    }"}, {"sha": "bfc9e8a35a16f630588c95b36c181032e07fcbb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -1,3 +1,18 @@\n+2019-09-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91557\n+\tPR fortran/91556\n+\t* gfortran.dg/argument_checking_20.f90: New test.\n+\t* gfortran.dg/argument_checking_21.f90: New test.\n+\t* gfortran.dg/argument_checking_22.f90: New test.\n+\t* gfortran.dg/argument_checking_23.f90: New test.\n+\t* gfortran.dg/warn_unused_dummy_argument_5.f90: New test.\n+\t* gfortran.dg/bessel_3.f90: Add pattern for type mismatch.\n+\t* gfortran.dg/g77/20010519-1.f: Adjust dg-warning messages to new\n+\thandling.\n+\t* gfortran.dg/pr24823.f: Likewise.\n+\t* gfortran.dg/pr39937.f: Likewise.\n+\n 2019-09-14  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR testsuite/83889"}, {"sha": "12788cc868c586ef1c91a372b7555dbf694a0e13", "filename": "gcc/testsuite/gfortran.dg/argument_checking_20.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_20.f90?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+program main\n+  real :: a(10), b(10,10)\n+! This should be caugt\n+  call foo(1.0) ! { dg-error \"Rank mismatch\" }\n+  call foo(b)   ! { dg-error \"Rank mismatch\" }\n+! This is OK\n+  call bar(a)\n+  call bar(b)\n+\n+end program main"}, {"sha": "d4f2ddf67f37dc1b7178d38b86889403ca235d91", "filename": "gcc/testsuite/gfortran.dg/argument_checking_21.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_21.f90?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-fallow-argument-mismatch\" }\n+program main\n+  real :: a(10), b(10,10)\n+! This should be caugt\n+  call foo(1.0) ! { dg-warning \"Rank mismatch\" }\n+  call foo(b)   ! { dg-warning \"Rank mismatch\" }\n+! This is OK\n+  call bar(a)\n+  call bar(b)\n+\n+end program main"}, {"sha": "783b53ffef435cd053cb3ff37982235e5ad9ad82", "filename": "gcc/testsuite/gfortran.dg/argument_checking_22.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_22.f90?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! PR 91556 - check that multiple errors are emitted for type mismatch\n+! (and that the check is also done in contained procedures).\n+\n+program main\n+  real :: a\n+  call foo(a) ! { dg-error \"Type mismatch\" }\n+contains\n+  subroutine bar\n+    integer :: b\n+    complex :: c\n+    call foo(b) ! { dg-error \"Type mismatch\" }\n+    call foo(c) ! { dg-error \"Type mismatch\" }\n+  end subroutine bar\n+end program main"}, {"sha": "74f72e364d78f1ee2c6506c47c70717e85aa4251", "filename": "gcc/testsuite/gfortran.dg/argument_checking_23.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_23.f90?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-fallow-argument-mismatch\" }\n+! PR 91556 - check that only a single warning iw emitted for type\n+! mismatch (and that the check is also done in contained procedures).\n+\n+program main\n+  real :: a\n+  call foo(a) ! { dg-warning \"Type mismatch\" }\n+contains\n+  subroutine bar\n+    integer :: b\n+    complex :: c\n+    call foo(b) ! { dg-warning \"Type mismatch\" }\n+    call foo(c)\n+  end subroutine bar\n+end program main"}, {"sha": "88177258c0de2c3f1cdf5676749fa650a51f6c80", "filename": "gcc/testsuite/gfortran.dg/bessel_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_3.f90?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -8,11 +8,11 @@\n print *, SIN (1.0)\n print *, BESSEL_J0(1.0) ! { dg-error \"has no IMPLICIT type\" })\n print *, BESSEL_J1(1.0) ! { dg-error \"has no IMPLICIT type\" }\n-print *, BESSEL_JN(1,1.0) ! { dg-error \"has no IMPLICIT type\" }\n+print *, BESSEL_JN(1,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n print *, BESSEL_JN(1,2,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n \n print *, BESSEL_Y0(1.0) ! { dg-error \"has no IMPLICIT type\" }\n print *, BESSEL_Y1(1.0) ! { dg-error \"has no IMPLICIT type\" }\n-print *, BESSEL_YN(1,1.0) ! { dg-error \"has no IMPLICIT type\" }\n+print *, BESSEL_YN(1,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n print *, BESSEL_YN(1,2,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n end"}, {"sha": "8a59906194d5d93827f8aa0c24e8674b342b4306", "filename": "gcc/testsuite/gfortran.dg/g77/20010519-1.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010519-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010519-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010519-1.f?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -773,7 +773,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       NTR=6\n       OLDPRN=PRNLEV\n       PRNLEV=1\n-      CALL ORTHNM(1,6,NTR,HEAP(TRAROT),NAT3,.FALSE.,TOLER)\n+      CALL ORTHNM(1,6,NTR,HEAP(TRAROT),NAT3,.FALSE.,TOLER) ! { dg-warning \"Type mismatch\" }\n       PRNLEV=OLDPRN\n       IF(IUNRMD .LT. 0) THEN\n C\n@@ -1126,7 +1126,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n          NFCUT=NFRET\n          OLDPRN=PRNLEV\n          PRNLEV=1\n-         CALL ORTHNM(1,NFRET,NFCUT,DDV,NAT3,LPURG,TOLER) ! { dg-warning \"Type mismatch\" }\n+         CALL ORTHNM(1,NFRET,NFCUT,DDV,NAT3,LPURG,TOLER)\n          PRNLEV=OLDPRN\n          NFRET=NFCUT\n          IF(PRNLEV.GE.2) WRITE(OUTU,568) NFRET\n@@ -1174,7 +1174,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n          NFSAV=NFCUT1\n          OLDPRN=PRNLEV\n          PRNLEV=1\n-         CALL ORTHNM(1,NFCUT1,NFCUT,DDV,NAT3,LPURG,TOLER) ! { dg-warning \"Type mismatch\" }\n+         CALL ORTHNM(1,NFCUT1,NFCUT,DDV,NAT3,LPURG,TOLER)\n          PRNLEV=OLDPRN\n          CALL CPARAY(HEAP(DDVBAS),DDV,NAT3,1,NFCUT,1)\n          NFRET=NDIM+NFCUT\n@@ -1224,7 +1224,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       CALL ADZERD(DDV,1,NFCUT1,NAT3,IS1,IS2,IS3,IS4)\n       OLDPRN=PRNLEV\n       PRNLEV=1\n-      CALL ORTHNM(1,NFCUT1,NFCUT,DDV,NAT3,LPURG,TOLER) ! { dg-warning \"Type mismatch\" }\n+      CALL ORTHNM(1,NFCUT1,NFCUT,DDV,NAT3,LPURG,TOLER)\n       PRNLEV=OLDPRN\n       CALL CPARAY(HEAP(DDVBAS),DDV,NAT3,1,NFCUT,1)\n C"}, {"sha": "c6f638fbd0c1be1f804ec74bd4ef43ed13206179", "filename": "gcc/testsuite/gfortran.dg/pr24823.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr24823.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr24823.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr24823.f?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -50,9 +50,9 @@ SUBROUTINE ZLATMR( M, N, DIST, ISEED, SYM, D, MODE, COND, DMAX,\n             IF( I.LT.1 ) THEN\n                IF( ISYM.EQ.0 ) THEN\n                   A( J-I+1, I ) = DCONJG( ZLATM2( M, N, I, J, KL,\n-     $                 DR, IPVTNG, IWORK, SPARSE ) )\n+     $                 DR, IPVTNG, IWORK, SPARSE ) )  ! { dg-warning \"Type mismatch\" }\n                ELSE\n-                  A( J-I+1, I ) = ZLATM2( M, N, I, J, KL, KU, ! { dg-warning \"Type mismatch\" }\n+                  A( J-I+1, I ) = ZLATM2( M, N, I, J, KL, KU,  ! { dg-warning \"Type mismatch\" }\n      $                 IPVTNG, IWORK, SPARSE )\n                END IF\n             END IF\n@@ -61,7 +61,7 @@ SUBROUTINE ZLATMR( M, N, DIST, ISEED, SYM, D, MODE, COND, DMAX,\n                   IF( ISYM.EQ.0 ) THEN\n                   END IF\n                END IF\n-               A( I-J+KUU+1, J ) = ZLATM2( M, N, I, J, KL, KU, ! { dg-warning \"Type mismatch\" }\n+               A( I-J+KUU+1, J ) = ZLATM2( M, N, I, J, KL, KU,\n      $              DR, IPVTNG, IWORK, SPARSE )\n             END IF\n          END IF"}, {"sha": "17d3eb46a21336e002cee3c4752290da5cbd86cd", "filename": "gcc/testsuite/gfortran.dg/pr39937.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39937.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39937.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39937.f?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -6,7 +6,7 @@ SUBROUTINE DTREVC( SIDE, HOWMNY, SELECT, N, T, LDT, VL, LDVL, VR,\n      $                   WORK( * )\n       DOUBLE PRECISION   X( 2, 2 )\n       CALL DLALN2( .FALSE., 1, 1, SMIN, ONE, T( J, J ),\n-     $                            ZERO, X, 2, SCALE, XNORM, IERR )\n+     $                            ZERO, X, 2, SCALE, XNORM, IERR ) ! { dg-warning \"Type mismatch\" }\n       CALL DSCAL( KI, SCALE, WORK( 1+N ), 1 )\n       DO 90 J = KI - 2, 1, -1\n       IF( J.GT.JNXT )\n@@ -19,8 +19,8 @@ SUBROUTINE DTREVC( SIDE, HOWMNY, SELECT, N, T, LDT, VL, LDVL, VR,\n               END IF\n           END IF\n           CALL DLALN2( .FALSE., 2, 2, SMIN, ONE,\n-     $                            T( J-1, J-1 ), LDT, ONE, ONE,\n-     $                            XNORM, IERR ) ! { dg-warning \"Type mismatch\" }\n+     $                            T( J-1, J-1 ), LDT, ONE, ONE,  ! { dg-warning \"Type mismatch\" }\n+     $                            XNORM, IERR )\n           CALL DAXPY( J-2, -X( 1, 1 ), T( 1, J-1 ), 1,\n      $                           WORK( 1+N ), 1 )\n           CALL DAXPY( J-2, -X( 2, 2 ), T( 1, J ), 1,"}, {"sha": "fa93f1d7ff2729952d7bb14dd33981968a7c35e3", "filename": "gcc/testsuite/gfortran.dg/warn_unused_dummy_argument_5.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_5.f90?ref=e0b9e5f9e3c90a55e643ea850cf828e3e6480fb5", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Wunused-dummy-argument\" }\n+! PR 91557 - this used to generate a bogus warning\n+! Test case by Gerhard Steinmetz\n+program p\n+   integer :: a, b\n+   a = 1\n+   call g\n+contains\n+   subroutine g\n+      integer :: x, y\n+      call h (x, y)\n+      if ( a > 0 )   y = y - 1\n+      b = y - x + 1\n+   end\n+end"}]}