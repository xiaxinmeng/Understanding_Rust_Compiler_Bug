{"sha": "ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "node_id": "C_kwDOANBUbNoAKGRkZDBjNDUwYmM2NGU4ZDQ0YTRjNDgxZjNjZWEwZTIzOGQ5NWUwOGM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-15T14:45:17Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:29Z"}, "message": "libproc_macro: Add Span rust implementation\n\nAdd a rust implementation for the Span rust type. Since this type is a\ncompiler internal and unstable even in the reference compiler, the\nbridge internal structure is left empty.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add bridge module.\n\t* librust/proc_macro/rust/span.rs: Add reference to internal\n\tSpan module.\n\t* librust/proc_macro/rust/bridge.rs: Add internal bridge module.\n\t* librust/proc_macro/rust/bridge/span.rs: Add internal Span\n\tmodule.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "c807b77002e33a15d322ddb80754eabd98d5fc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c807b77002e33a15d322ddb80754eabd98d5fc3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e39012125d65cf22f53215c1aab70bbf8e3fd44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e39012125d65cf22f53215c1aab70bbf8e3fd44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e39012125d65cf22f53215c1aab70bbf8e3fd44"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "e066cd483cdcdf6ca0cecb30de6b17ecb56c3e18", "filename": "librust/proc_macro/rust/bridge.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Fbridge.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Fbridge.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge.rs?ref=ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "patch": "@@ -0,0 +1 @@\n+pub mod span;"}, {"sha": "5bbdd5a34ea26a2aae832c7cf4324f67f296929c", "filename": "librust/proc_macro/rust/bridge/span.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Fbridge%2Fspan.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Fbridge%2Fspan.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fspan.rs?ref=ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "patch": "@@ -0,0 +1,32 @@\n+//! Bridge internal span representation and functions\n+//!\n+//! # Note\n+//!\n+//! All methods accessing source location in rust are unstable, hence this\n+//! implementation with an empty structure.\n+\n+#[derive(Copy, Clone, Debug)]\n+#[repr(C)]\n+pub struct Span {}\n+\n+impl Span {\n+    pub fn call_site() -> Self {\n+        Span {}\n+    }\n+\n+    pub fn mixed_site() -> Self {\n+        Span {}\n+    }\n+\n+    pub fn resolved_at(&self, _other: Span) -> Self {\n+        Span {}\n+    }\n+\n+    pub fn located_at(&self, _other: Span) -> Self {\n+        Span {}\n+    }\n+\n+    pub fn source_text(&self) -> Option<String> {\n+        None\n+    }\n+}"}, {"sha": "f74953024b45db2cb066abbb20d939ec18dd1663", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "patch": "@@ -6,6 +6,7 @@ pub use span::Span;\n use std::error;\n use std::{fmt, iter, str::FromStr};\n \n+mod bridge;\n mod group;\n mod ident;\n mod literal;"}, {"sha": "0ea60eca0ca2905081ceb4449caaf94771ecc15c", "filename": "librust/proc_macro/rust/span.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Fspan.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c/librust%2Fproc_macro%2Frust%2Fspan.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fspan.rs?ref=ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "patch": "@@ -1,23 +1,22 @@\n+use bridge;\n use std::fmt;\n \n /// A region of source code along with macro expansion information.\n #[derive(Copy, Clone)]\n-pub struct Span {\n-    // Internal implementation details\n-}\n+pub struct Span(bridge::span::Span);\n \n impl Span {\n     // TODO: Add experimental API functions for this type\n \n     /// Creates a new span that resolves at the macro call location.\n     pub fn call_site() -> Self {\n-        todo!(\"Implement this function\")\n+        Span(bridge::span::Span::call_site())\n     }\n \n     /// Creates a new span that resolved sometimes at macro call site, and\n     /// sometimes at macro definition site.\n     pub fn mixed_site() -> Self {\n-        todo!(\"Implement this function\")\n+        Span(bridge::span::Span::mixed_site())\n     }\n \n     /// Creates a new span with the same line/column informations but that\n@@ -26,8 +25,8 @@ impl Span {\n     /// # Arguments\n     ///\n     /// * `other` - Other span to resolve at.\n-    pub fn resolved_at(&self, _other: Span) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn resolved_at(&self, other: Span) -> Self {\n+        Span(self.0.resolved_at(other.0))\n     }\n \n     /// Creates a new span with the same name resolution behavior as self, but\n@@ -36,18 +35,18 @@ impl Span {\n     /// # Arguments\n     ///\n     /// * `other` - Other span containing the line/column informations to use.\n-    pub fn located_at(&self, _other: Span) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn located_at(&self, other: Span) -> Self {\n+        Span(self.0.located_at(other.0))\n     }\n \n     /// Return the source text behind a span.\n     pub fn source_text(&self) -> Option<String> {\n-        todo!(\"Implement this function\")\n+        self.0.source_text()\n     }\n }\n \n impl fmt::Debug for Span {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        todo!(\"Implement this function\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n     }\n }"}]}