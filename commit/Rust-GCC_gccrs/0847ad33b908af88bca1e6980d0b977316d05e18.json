{"sha": "0847ad33b908af88bca1e6980d0b977316d05e18", "node_id": "C_kwDOANBUbNoAKDA4NDdhZDMzYjkwOGFmODhiY2ExZTY5ODBkMGI5NzczMTZkMDVlMTg", "commit": {"author": {"name": "Benno Evers", "email": "benno.evers@tenzir.com", "date": "2022-04-02T16:22:33Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-03T09:10:13Z"}, "message": "c++: Fix ICE due to shared BLOCK node in coroutine generation [PR103328]\n\nWhen finishing a function that is a coroutine, the function is\ntransformed into a \"ramp\" function, and the original user-provided\nfunction body gets moved into a newly created \"actor\" function.\n\nIn this case `current_function_decl` points to the ramp function,\nbut `current_binding_level->blocks` would still point to the\nscope block of the user-provided function body in the actor function,\nso when the ramp function was finished during `poplevel()` in decl.cc,\nwe could end up with that block being reused as the `DECL_INITIAL()` of\nthe ramp function:\n\n   subblocks = functionbody >= 0 ? current_binding_level->blocks : 0;\n   // [...]\n   DECL_INITIAL (current_function_decl) = block ? block : subblocks;\n\nThis block would then be independently modified by subsequent passes\ntouching either the ramp or the actor function, potentially causing\nan ICE depending on the order and function of these passes.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/103328\n\t* coroutines.cc (morph_fn_to_coro): Reset\n\tcurrent_binding_level->blocks.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/103328\n\t* g++.dg/coroutines/pr103328.C: New test.\n\nCo-Authored-By: Iain Sandoe <iain@sandoe.co.uk>", "tree": {"sha": "9b793745e615e8dcbd26f137f49e7706957a4efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b793745e615e8dcbd26f137f49e7706957a4efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0847ad33b908af88bca1e6980d0b977316d05e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0847ad33b908af88bca1e6980d0b977316d05e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0847ad33b908af88bca1e6980d0b977316d05e18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0847ad33b908af88bca1e6980d0b977316d05e18/comments", "author": {"login": "lava", "id": 51410, "node_id": "MDQ6VXNlcjUxNDEw", "avatar_url": "https://avatars.githubusercontent.com/u/51410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lava", "html_url": "https://github.com/lava", "followers_url": "https://api.github.com/users/lava/followers", "following_url": "https://api.github.com/users/lava/following{/other_user}", "gists_url": "https://api.github.com/users/lava/gists{/gist_id}", "starred_url": "https://api.github.com/users/lava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lava/subscriptions", "organizations_url": "https://api.github.com/users/lava/orgs", "repos_url": "https://api.github.com/users/lava/repos", "events_url": "https://api.github.com/users/lava/events{/privacy}", "received_events_url": "https://api.github.com/users/lava/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235d5a96cb8dad0b4c427602346fcf966a4ec914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235d5a96cb8dad0b4c427602346fcf966a4ec914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235d5a96cb8dad0b4c427602346fcf966a4ec914"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "cdf6503c4d30df86c74adf89d787c938471ae231", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0847ad33b908af88bca1e6980d0b977316d05e18/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0847ad33b908af88bca1e6980d0b977316d05e18/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=0847ad33b908af88bca1e6980d0b977316d05e18", "patch": "@@ -4540,6 +4540,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   BIND_EXPR_BLOCK (ramp_bind) = top_block;\n   BLOCK_VARS (top_block) = BIND_EXPR_VARS (ramp_bind);\n   BLOCK_SUBBLOCKS (top_block) = NULL_TREE;\n+  current_binding_level->blocks = top_block;\n \n   /* The decl_expr for the coro frame pointer, initialize to zero so that we\n      can pass it to the IFN_CO_FRAME (since there's no way to pass a type,"}, {"sha": "56fb54ab316086aa9664b37f7a6fca423f591a23", "filename": "gcc/testsuite/g++.dg/coroutines/pr103328.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0847ad33b908af88bca1e6980d0b977316d05e18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr103328.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0847ad33b908af88bca1e6980d0b977316d05e18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr103328.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr103328.C?ref=0847ad33b908af88bca1e6980d0b977316d05e18", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-g\" }\n+\n+#include <coroutine>\n+\n+struct task {\n+  struct promise_type {\n+    task get_return_object() { return {}; }\n+    std::suspend_never initial_suspend() { return {}; }\n+    std::suspend_never final_suspend() noexcept { return {}; }\n+    void unhandled_exception() {}\n+  };\n+  bool await_ready() { return false; }\n+  void await_suspend(std::coroutine_handle<> h) {}\n+  void await_resume() {}\n+};\n+\n+template <typename Func>\n+void call(Func func) { func(); }\n+\n+class foo {\n+  void f();\n+  task g();\n+};\n+\n+void foo::f() {\n+  auto lambda = [this]() noexcept -> task {\n+      co_await g();\n+  };\n+  (void)call<decltype(lambda)>;\n+}\n+\n+int main() {}"}]}