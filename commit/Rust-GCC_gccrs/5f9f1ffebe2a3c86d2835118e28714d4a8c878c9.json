{"sha": "5f9f1ffebe2a3c86d2835118e28714d4a8c878c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY5ZjFmZmViZTJhM2M4NmQyODM1MTE4ZTI4NzE0ZDRhOGM4NzhjOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-08-23T19:26:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-08-23T19:26:04Z"}, "message": "[C++ PATCH] vfunc overrider simplification\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-08/msg01674.html\n\t* class.c (check_for_override): Checking IDENTIFIER_VIRTUAL_P is\n\tsufficient, reorder DECL_OVERRIDE_P check.\n\nFrom-SVN: r274867", "tree": {"sha": "bd6fa4ce6d6076c561105f9833b7b21f8d727bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd6fa4ce6d6076c561105f9833b7b21f8d727bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d35d2bf5a15e38122083ddd198d1d20548d0ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d35d2bf5a15e38122083ddd198d1d20548d0ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d35d2bf5a15e38122083ddd198d1d20548d0ffa"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "c4160820feeef734e6a1055b6c35ee151b41241b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f9f1ffebe2a3c86d2835118e28714d4a8c878c9", "patch": "@@ -1,3 +1,8 @@\n+2019-08-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (check_for_override): Checking IDENTIFIER_VIRTUAL_P is\n+\tsufficient, reorder DECL_OVERRIDE_P check.\n+\n 2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR pch/61250"}, {"sha": "99332f456e2d73e8d2763eedaeac00869e313bb8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9f1ffebe2a3c86d2835118e28714d4a8c878c9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5f9f1ffebe2a3c86d2835118e28714d4a8c878c9", "patch": "@@ -2802,51 +2802,58 @@ get_basefndecls (tree name, tree t, vec<tree> *base_fndecls)\n     }\n }\n \n-/* If this declaration supersedes the declaration of\n-   a method declared virtual in the base class, then\n-   mark this field as being virtual as well.  */\n+/* If this method overrides a virtual method from a base, then mark\n+   this member function as being virtual as well.  Do 'final' and\n+   'override' checks too.  */\n \n void\n check_for_override (tree decl, tree ctype)\n {\n-  bool overrides_found = false;\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n     /* In [temp.mem] we have:\n \n \t A specialization of a member function template does not\n \t override a virtual function from a base class.  */\n     return;\n-  if ((DECL_DESTRUCTOR_P (decl)\n-       || IDENTIFIER_VIRTUAL_P (DECL_NAME (decl))\n-       || DECL_CONV_FN_P (decl))\n+\n+  /* IDENTIFIER_VIRTUAL_P indicates whether the name has ever been\n+     used for a vfunc.  That avoids the expensive\n+     look_for_overrides call that when we know there's nothing to\n+     find.  */\n+  if (IDENTIFIER_VIRTUAL_P (DECL_NAME (decl))\n       && look_for_overrides (ctype, decl)\n+      /* Check staticness after we've checked if we 'override'.  */\n       && !DECL_STATIC_FUNCTION_P (decl))\n-    /* Set DECL_VINDEX to a value that is neither an INTEGER_CST nor\n-       the error_mark_node so that we know it is an overriding\n-       function.  */\n     {\n+      /* Set DECL_VINDEX to a value that is neither an INTEGER_CST nor\n+\t the error_mark_node so that we know it is an overriding\n+\t function.  */\n       DECL_VINDEX (decl) = decl;\n-      overrides_found = true;\n+\n       if (warn_override\n \t  && !DECL_OVERRIDE_P (decl)\n \t  && !DECL_FINAL_P (decl)\n \t  && !DECL_DESTRUCTOR_P (decl))\n \twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wsuggest_override,\n \t\t    \"%qD can be marked override\", decl);\n     }\n+  else if (DECL_OVERRIDE_P (decl))\n+    error (\"%q+#D marked %<override%>, but does not override\", decl);\n \n   if (DECL_VIRTUAL_P (decl))\n     {\n+      /* Remember this identifier is virtual name.  */\n+      IDENTIFIER_VIRTUAL_P (DECL_NAME (decl)) = true;\n+\n       if (!DECL_VINDEX (decl))\n+\t/* It's a new vfunc.  */\n \tDECL_VINDEX (decl) = error_mark_node;\n-      IDENTIFIER_VIRTUAL_P (DECL_NAME (decl)) = 1;\n+\n       if (DECL_DESTRUCTOR_P (decl))\n \tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (ctype) = true;\n     }\n   else if (DECL_FINAL_P (decl))\n     error (\"%q+#D marked %<final%>, but is not virtual\", decl);\n-  if (DECL_OVERRIDE_P (decl) && !overrides_found)\n-    error (\"%q+#D marked %<override%>, but does not override\", decl);\n }\n \n /* Warn about hidden virtual functions that are not overridden in t."}]}