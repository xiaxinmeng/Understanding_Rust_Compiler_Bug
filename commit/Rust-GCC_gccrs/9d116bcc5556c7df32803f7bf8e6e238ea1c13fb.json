{"sha": "9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "node_id": "C_kwDOANBUbNoAKDlkMTE2YmNjNTU1NmM3ZGYzMjgwM2Y3YmY4ZTZlMjM4ZWExYzEzZmI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-02T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-02T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "d993f68dec8eea6e45b31ca50055e2c7cf25ab4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d993f68dec8eea6e45b31ca50055e2c7cf25ab4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/comments", "author": null, "committer": null, "parents": [{"sha": "5f9ccf17de7f7581412c6bffd4a37beca9a79836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9ccf17de7f7581412c6bffd4a37beca9a79836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9ccf17de7f7581412c6bffd4a37beca9a79836"}], "stats": {"total": 1013, "additions": 1012, "deletions": 1}, "files": [{"sha": "e33c378309e1dedafb94b1244789b0b4879e7f90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,105 @@\n+2021-10-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102546\n+\t* range-op.cc (operator_lshift::op1_range): Teach range-ops that\n+\tX << Y is non-zero implies X is also non-zero.\n+\n+2021-10-01  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New\n+\tCortex-X2 core.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-10-01  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New\n+\tCortex-A710 core.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-10-01  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New\n+\tCortex-A510 core.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/102103\n+\t* doc/invoke.texi (-Waddress): Update.\n+\t* gengtype.c (write_types): Avoid -Waddress.\n+\t* poly-int.h (POLY_SET_COEFF): Avoid using null.\n+\n+2021-10-01  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR debug/102373\n+\t* config/pa/pa.c (pa_option_override): Default to dwarf version 4\n+\ton hppa64-hpux.\n+\n+2021-10-01  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V9): Update value.\n+\n+2021-10-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::compute_ranges): Use\n+\tget_path_oracle.\n+\t* gimple-range-path.h (class path_range_query): Remove shadowed\n+\tm_oracle field.\n+\t(path_range_query::get_path_oracle): New.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR sanitizer/102515\n+\t* doc/invoke.texi (-fsanitize=integer-divide-by-zero): Remove\n+\tINT_MIN / -1 division detection from here ...\n+\t(-fsanitize=signed-integer-overflow): ... and add it here.\n+\n+2021-10-01  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def (AARCH64_ARCH): Added\n+\tarmv9-a.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V9): New.\n+\t(AARCH64_FL_FOR_ARCH9): New flags for Armv9-A.\n+\t(AARCH64_ISA_V9): New ISA flag.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-10-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* toplev.c (toplev::main): Save decoded optimization options.\n+\t* toplev.h (save_opt_decoded_options): New.\n+\t* doc/extend.texi: Be more clear about optimize and target\n+\tattributes.\n+\n+2021-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* explow.c: Include langhooks.h.\n+\t(set_stack_check_libfunc): Build a proper function type.\n+\n+2021-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c++/64697\n+\t* config/i386/i386.c (legitimate_pic_address_disp_p): For PE-COFF do\n+\tnot return true for external weak function symbols in medium model.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_ORDER_REPRODUCIBLE): Define.\n+\t* tree-pretty-print.c (dump_omp_clause) <case OMP_CLAUSE_ORDER>: Print\n+\treproducible: for OMP_CLAUSE_ORDER_REPRODUCIBLE.\n+\t* omp-general.c (omp_extract_for_data): If OMP_CLAUSE_ORDER is seen\n+\twithout OMP_CLAUSE_ORDER_UNCONSTRAINED, overwrite sched_kind to\n+\tOMP_CLAUSE_SCHEDULE_STATIC.\n+\n+2021-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102518\n+\t* tree-inline.c (setup_one_parameter): Avoid substituting\n+\tan invariant into contexts where a GIMPLE register is not valid.\n+\n 2021-09-30  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* config/arm/arm-cpus.in: Add Cortex-R52+ CPU."}, {"sha": "e3d20267f8f069eca965bbd8ac377a56a2a8f660", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1 +1 @@\n-20211001\n+20211002"}, {"sha": "5cf2c48c5ccab3529b5504673cb6bd92cbd9842e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 405, "deletions": 0, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,408 @@\n+2021-10-01  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Do not call\n+\tCheck_Subprogram_Variant if the subprogram is an ignored ghost\n+\tentity. Otherwise the compiler crashes (in debug builds) or\n+\tgives strange error messages (in production builds).\n+\n+2021-10-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* gnat_cuda.adb (Empty_CUDA_Global_Subprograms): New procedure.\n+\t(Expand_CUDA_Package): Call Empty_CUDA_Global_Subprograms.\n+\n+2021-10-01  Steve Baird  <baird@adacore.com>\n+\n+\t* checks.ads: Define a type Dimension_Set. Add an out-mode\n+\tparameter of this new type to Generate_Index_Checks so that\n+\tcallers can know for which dimensions a check was generated. Add\n+\tan in-mode parameter of this new type to\n+\tApply_Subscript_Validity_Checks so that callers can indicate\n+\tthat no check is needed for certain dimensions.\n+\t* checks.adb (Generate_Index_Checks): Implement new\n+\tChecks_Generated parameter.\n+\t(Apply_Subscript_Validity_Checks): Implement new No_Check_Needed\n+\tparameter.\n+\t* exp_ch4.adb (Expand_N_Indexed_Component): Call\n+\tApply_Subscript_Validity_Checks in more cases than before. This\n+\tincludes declaring two new local functions,\n+\t(Is_Renamed_Variable_Name,\n+\tType_Requires_Subscript_Validity_Checks_For_Reads): To help in\n+\tdeciding whether to call Apply_Subscript_Validity_Checks.\n+\tAdjust to parameter profile changes in Generate_Index_Checks and\n+\tApply_Subscript_Validity_Checks.\n+\n+2021-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Document\n+\tthe rounding mode assumed for dynamic computations as per 3.5.7(16).\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-10-01  Bob Duff  <duff@adacore.com>\n+\n+\t* table.ads (Table_Type): Remove \"aliased\"; no longer needed by\n+\tAtree.  Besides it contradicted the comment a few lines above,\n+\t\"--  Note: We do not make the table components aliased...\".\n+\t* types.ads: Move type Slot to Atree.\n+\t* atree.ads: Move type Slot fromt Types to here.  Move type\n+\tNode_Header from Seinfo to here.\n+\t* atree.adb: Avoid the need for aliased components of the Slots\n+\ttable.  Instead of 'Access, use a getter and setter.  Misc\n+\tcleanups.\n+\t(Print_Statistics): Print statistics about node and entity kind\n+\tfrequencies. Give 3 digit fractions instead of percentages.\n+\t* (Get_Original_Node_Count, Set_Original_Node_Count): Statistics\n+\tfor calls to Original_Node and Set_Original_Node.\n+\t(Original_Node, Set_Original_Node): Gather statistics by calling\n+\tthe above.\n+\t(Print_Field_Statistics): Print Original_Node statistics.\n+\t(Update_Kind_Statistics): Remove, and put all statistics\n+\tgathering under \"if Atree_Statistics_Enabled\", which is a flag\n+\tgenerated in Seinfo by Gen_IL.\n+\t* gen_il-gen.adb (Compute_Field_Offsets): Choose offsets of\n+\tNkind, Ekind, and Homonym first. This causes a slight efficiency\n+\timprovement.  Misc cleanups.  Do not generate Node_Header; it is\n+\tnow hand-written in Atree.  When choosing the order in which to\n+\tassign offsets, weight by the frequency of the node type, so the\n+\tmore common nodes get their field offsets assigned earlier.  Add\n+\tmore special cases.\n+\t(Compute_Type_Sizes): Remove this and related things.\n+\tThere was a comment: \"At some point we can instrument Atree to\n+\tprint out accurate size statistics, and remove this code.\" We\n+\thave Atree statistics, so we now remove this code.\n+\t(Put_Seinfo): Generate Atree_Statistics_Enabled, which is equal\n+\tto Statistics_Enabled. This allows Atree to say \"if\n+\tAtree_Statistics_Enabled then <gather statistics>\" for\n+\tefficiency. When Atree_Statistics_Enabled is False, the \"if ...\"\n+\twill be optimized away.\n+\t* gen_il-internals.ads (Type_Frequency): New table of kind\n+\tfrequencies.\n+\t* gen_il-internals.adb: Minor comment improvement.\n+\t* gen_il-fields.ads: Remove unused subtypes.  Suppress style\n+\tchecks in the Type_Frequency table.  If we regenerate this\n+\ttable (see -gnatd.A) we don't want to have to fiddle with\n+\tcasing.\n+\t* impunit.adb: Minor.\n+\t* sinfo-utils.adb: Minor.\n+\t* debug.adb: Minor comment improvement.\n+\n+2021-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_type.adb (Specific_Type): Check that the type is tagged\n+\tbefore calling Interface_Present_In_Ancestor on it.\n+\n+2021-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* debug.adb (d.8): Document usage.\n+\t* fe.h (Debug_Flag_Dot_8): Declare.\n+\n+2021-10-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.adb (Enter_Name): Suppress hiding warning when in an\n+\tinstance.\n+\n+2021-10-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case Type_Key): Attribute can\n+\tbe applied to a formal type.\n+\t* sem_ch5.adb (Analyze_Case_Statement): If Extensions_Allowed is\n+\tnot enabled, verify that the type of the expression is discrete.\n+\n+2021-10-01  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_dbug.adb (Debug_Renaming_Declaration): Add check for\n+\tEntity present for Ren to prevent looking at unanalyzed nodes\n+\n+2021-10-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* atree.adb (Print_Statistics): Help CodePeer see Total as\n+\tgreater than zero.\n+\t* gen_il-gen.adb (One_Comp): Annotate Field_Table as Modified.\n+\n+2021-10-01  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-gen-gen_entities.adb (Evaluable_Kind,\n+\tGlobal_Name_Kind): Add.\n+\t* gen_il-types.ads (Evaluable_Kind, Global_Name_Kind): Likewise.\n+\n+2021-10-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* aspects.ads: Add CUDA_Device aspect.\n+\t* gnat_cuda.ads (Add_CUDA_Device_Entity): New subprogram.\n+\t* gnat_cuda.adb:\n+\t(Add_CUDA_Device_Entity): New subprogram.\n+\t(CUDA_Device_Entities_Table): New hashmap for CUDA_Device\n+\tentities.\n+\t(Get_CUDA_Device_Entities): New internal subprogram.\n+\t(Set_CUDA_Device_Entities): New internal subprogram.\n+\t* par-prag.adb (Prag): Handle pragma id Pragma_CUDA_Device.\n+\t* sem_prag.ads (Aspect_Specifying_Pragma): Mark CUDA_Device as\n+\tbeing both aspect and pragma.\n+\t* sem_prag.adb (Analyze_Pragma): Add CUDA_Device entities to\n+\tlist of CUDA_Entities belonging to package N.\n+\t(Sig_Flags): Signal CUDA_Device entities as referenced.\n+\t* snames.ads-tmpl: Create CUDA_Device names and pragmas.\n+\n+2021-10-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Build_DIC_Procedure_Body): Remove inappropriate\n+\tAssert pragma.  Remove unneeded and dead code related to derived\n+\tprivate types.\n+\n+2021-10-01  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-gen-gen_nodes.adb (N_Alternative, N_Is_Case_Choice):\n+\tAdd.\n+\t(N_Is_Exception_Choice, N_Is_Range): Likewise.\n+\t* gen_il-types.ads: Add above names.\n+\t* gen_il-gen.adb (Put_Union_Membership): Write both declarations\n+\tand definitions of union functions.\n+\n+2021-10-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate,\n+\tTwo_Pass_Aggregate_Expansion): Increment index for element\n+\tinsertion within the loop, only if upper bound has not been\n+\treached.\n+\n+2021-10-01  Javier Miranda  <miranda@adacore.com>\n+\n+\t* contracts.ads (Make_Class_Precondition_Subps): New subprogram.\n+\t(Merge_Class_Conditions): New subprogram.\n+\t(Process_Class_Conditions_At_Freeze_Point): New subprogram.\n+\t* contracts.adb (Check_Class_Condition): New subprogram.\n+\t(Set_Class_Condition): New subprogram.\n+\t(Analyze_Contracts): Remove code analyzing class-wide-clone\n+\tsubprogram since it is no longer built.\n+\t(Process_Spec_Postconditions): Avoid processing twice seen\n+\tsubprograms.\n+\t(Process_Preconditions): Simplify its functionality to\n+\tnon-class-wide preconditions.\n+\t(Process_Preconditions_For): No action needed for wrappers and\n+\thelpers.\n+\t(Make_Class_Precondition_Subps): New subprogram.\n+\t(Process_Class_Conditions_At_Freeze_Point): New subprogram.\n+\t(Merge_Class_Conditions): New subprogram.\n+\t* exp_ch6.ads (Install_Class_Preconditions_Check): New\n+\tsubprogram.\n+\t* exp_ch6.adb (Expand_Call_Helper): Install class-wide\n+\tpreconditions check on dispatching primitives that have or\n+\tinherit class-wide preconditions.\n+\t(Freeze_Subprogram): Remove code for null procedures with\n+\tpreconditions.\n+\t(Install_Class_Preconditions_Check): New subprogram.\n+\t* exp_util.ads (Build_Class_Wide_Expression): Lower the\n+\tcomplexity of this subprogram; out-mode formal Needs_Wrapper\n+\tsince this functionality is now provided by a new subprogram.\n+\t(Get_Mapped_Entity): New subprogram.\n+\t(Map_Formals): New subprogram.\n+\t* exp_util.adb (Build_Class_Wide_Expression): Lower the\n+\tcomplexity of this subprogram. Its previous functionality is now\n+\tprovided by subprograms Needs_Wrapper and Check_Class_Condition.\n+\t(Add_Parent_DICs): Map the overridden primitive to the\n+\toverriding one.\n+\t(Get_Mapped_Entity): New subprogram.\n+\t(Map_Formals): New subprogram.\n+\t(Update_Primitives_Mapping): Adding assertion.\n+\t* freeze.ads (Check_Inherited_Conditions): Subprogram made\n+\tpublic with added formal to support late overriding.\n+\t* freeze.adb (Check_Inherited_Conditions): New implementation;\n+\tbuilds the dispatch table wrapper required for class-wide\n+\tpre/postconditions; added support for late overriding.\n+\t(Needs_Wrapper): New subprogram.\n+\t* sem.ads (Inside_Class_Condition_Preanalysis): New global\n+\tvariable.\n+\t* sem_disp.ads (Covered_Interface_Primitives): New subprogram.\n+\t* sem_disp.adb (Covered_Interface_Primitives): New subprogram.\n+\t(Check_Dispatching_Context): Skip checking context of\n+\tdispatching calls during preanalysis of class-wide conditions\n+\tsince at that stage the expression is not installed yet on its\n+\tdefinite context.\n+\t(Check_Dispatching_Call): Skip checking 6.1.1(18.2/5) by\n+\tAI12-0412 on helpers and wrappers internally built for\n+\tsupporting class-wide conditions; for late-overriding\n+\tsubprograms call Check_Inherited_Conditions to build the\n+\tdispatch-table wrapper (if required).\n+\t(Propagate_Tag): Adding call to\n+\tInstall_Class_Preconditions_Check.\n+\t* sem_util.ads (Build_Class_Wide_Clone_Body): Removed.\n+\t(Build_Class_Wide_Clone_Call): Removed.\n+\t(Build_Class_Wide_Clone_Decl): Removed.\n+\t(Class_Condition): New subprogram.\n+\t(Nearest_Class_Condition_Subprogram): New subprogram.\n+\t* sem_util.adb (Build_Class_Wide_Clone_Body): Removed.\n+\t(Build_Class_Wide_Clone_Call): Removed.\n+\t(Build_Class_Wide_Clone_Decl): Removed.\n+\t(Class_Condition): New subprogram.\n+\t(Nearest_Class_Condition_Subprogram): New subprogram.\n+\t(Eligible_For_Conditional_Evaluation): No need to evaluate\n+\tclass-wide conditions during preanalysis since the expression is\n+\tnot installed on its definite context.\n+\t* einfo.ads (Class_Wide_Clone): Removed.\n+\t(Class_Postconditions): New attribute.\n+\t(Class_Preconditions): New attribute.\n+\t(Class_Preconditions_Subprogram): New attribute.\n+\t(Dynamic_Call_Helper): New attribute.\n+\t(Ignored_Class_Postconditions): New attribute.\n+\t(Ignored_Class_Preconditions): New attribute.\n+\t(Indirect_Call_Wrapper): New attribute.\n+\t(Is_Dispatch_Table_Wrapper): New attribute.\n+\t(Static_Call_Helper): New attribute.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): When the prefix\n+\tis of an access-to-subprogram type that has class-wide\n+\tpreconditions and an indirect-call wrapper of such subprogram is\n+\tavailable, replace the prefix by the wrapper.\n+\t* exp_ch3.adb (Build_Class_Condition_Subprograms): New\n+\tsubprogram.\n+\t(Register_Dispatch_Table_Wrappers): New subprogram.\n+\t* exp_disp.adb (Build_Class_Wide_Check): Removed; class-wide\n+\tprecondition checks now rely on internally built helpers.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Set initial\n+\tvalue of attributes Class_Preconditions, Class_Postconditions,\n+\tIgnored_Class_Preconditions and Ignored_Class_Postconditions.\n+\tThese values are later updated with the full pre/postcondition\n+\tby Merge_Class_Conditions.\n+\t(Freeze_Entity_Checks): Call\n+\tProcess_Class_Conditions_At_Freeze_Point.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove code\n+\tbuilding the body of the class-wide clone subprogram since it is\n+\tno longer required.\n+\t(Install_Entity): Adding assertion.\n+\t* sem_prag.adb (Analyze_Pre_Post_Condition_In_Decl_Part): Remove\n+\tcode building and analyzing the class-wide clone subprogram; no\n+\tlonger required.\n+\t(Build_Pragma_Check_Equivalent): Adjust call to\n+\tBuild_Class_Wide_Expression since the formal named Needs_Wrapper\n+\thas been removed.\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Skip processing\n+\tthese attributes during preanalysis of class-wide conditions\n+\tsince at that stage the expression is not installed yet on its\n+\tdefinite context.\n+\t* sem_res.adb (Resolve_Actuals): Skip applying RM 3.9.2(9/1) and\n+\tSPARK RM 6.1.7(3) on actuals of internal helpers and wrappers\n+\tbuilt to support class-wide preconditions.\n+\t* sem_ch5.adb (Process_Bounds): Do not generate a constant\n+\tdeclaration for the bounds when we are preanalyzing a class-wide\n+\tcondition.\n+\t(Analyze_Loop_Parameter_Specification): Handle preanalysis of\n+\tquantified expression placed in the outermost expression of a\n+\tclass-wide condition.\n+\t* ghost.adb (Check_Ghost_Context): No check required during\n+\tpreanalysis of class-wide conditions.\n+\t* gen_il-fields.ads (Opt_Field_Enum): Adding\n+\tClass_Postconditions, Class_Preconditions,\n+\tClass_Preconditions_Subprogram, Dynamic_Call_Helper,\n+\tIgnored_Class_Postconditions, Ignored_Class_Preconditions,\n+\tIndirect_Call_Wrapper, Is_Dispatch_Table_Wrapper,\n+\tStatic_Call_Helper.\n+\t* gen_il-gen-gen_entities.adb (Is_Dispatch_Table_Wrapper):\n+\tAdding semantic flag Is_Dispatch_Table_Wrapper; removing\n+\tsemantic field Class_Wide_Clone; adding semantic fields for\n+\tClass_Postconditions, Class_Preconditions,\n+\tClass_Preconditions_Subprogram, Dynamic_Call_Helper,\n+\tIgnored_Class_Postconditions, Indirect_Call_Wrapper,\n+\tIgnored_Class_Preconditions, and Static_Call_Helper.\n+\n+2021-10-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* comperr.adb (Delete_SCIL_Files): Handle generic subprogram\n+\tdeclarations and renaming just like generic package declarations\n+\tand renamings, respectively; handle\n+\tN_Subprogram_Renaming_Declaration.\n+\n+2021-10-01  Steve Baird  <baird@adacore.com>\n+\n+\t* bcheck.adb (Check_Versions): Add support for the case where\n+\tthe .ali file contains both a primary and a secondary version\n+\tnumber, as in \"GNAT Lib v22.20210809\".\n+\n+2021-10-01  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Two separate fixes. In the case where\n+\tFind_Aspect for a literal aspect returns the aspect for a\n+\tdifferent (ancestor) type, call Corresponding_Primitive_Op to\n+\tget the right callee. In the case where a downward tagged type\n+\tconversion appears to be needed, generate a null extension\n+\taggregate instead, as per Ada RM 3.4(27).\n+\t* sem_util.ads, sem_util.adb: Add new Corresponding_Primitive_Op\n+\tfunction. It maps a primitive op of a tagged type and a\n+\tdescendant type of that tagged type to the corresponding\n+\tprimitive op of the descendant type. The body of this function\n+\twas written by Javier Miranda.\n+\n+2021-10-01  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.adb: Gather and print statistics about frequency of\n+\tgetter and setter calls.\n+\t* atree.ads (Print_Statistics): New procedure for printing\n+\tstatistics.\n+\t* debug.adb: Document -gnatd.A switch.\n+\t* gen_il-gen.adb: Generate code for statistics gathering.\n+\tChoose the offset of Homonym early.  Misc cleanup.  Put more\n+\tcomments in the generated code.\n+\t* gen_il-internals.ads (Unknown_Offset): New value to indicate\n+\tthat the offset has not yet been chosen.\n+\t* gnat1drv.adb: Call Print_Statistics.\n+\t* libgnat/s-imglli.ads: Minor comment fix.\n+\t* output.ads (Write_Int_64): New procedure to write a 64-bit\n+\tvalue.  Needed for new statistics, and could come in handy\n+\telsewhere.\n+\t* output.adb (Write_Int_64): Likewise.\n+\t* sinfo.ads: Remove obsolete comment. The xtreeprs program no\n+\tlonger exists.\n+\t* types.ads: New 64-bit types needed for new statistics.\n+\n+2021-10-01  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/memtrack.adb (Putc): New routine wrapped around fputc\n+\twith error check.\n+\t(Write): New routine wrapped around fwrite with error check.\n+\tRemove bound functions fopen, fwrite, fputs, fclose, OS_Exit.\n+\tUse the similar routines from System.CRTL and System.OS_Lib.\n+\n+2021-10-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Must_Slide): If the aggregate only contains an\n+\tothers_clause no sliding id involved. Otherwise sliding is\n+\trequired if any bound of the aggregate or the context subtype is\n+\tnon-static.\n+\n+2021-10-01  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-gen-gen_nodes.adb (N_Is_Decl): Add.\n+\t* gen_il-types.ads (N_Is_Decl): Likewise.\n+\n+2021-10-01  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-gen-gen_nodes.adb (N_Entity_Name): Add.\n+\t* gen_il-types.ads (N_Entity_Name): Likewise.\n+\n+2021-10-01  Steve Baird  <baird@adacore.com>\n+\n+\t* bcheck.adb (Check_Versions): In the case of an ali file\n+\tversion mismatch, if distinct integer values can be extracted\n+\tfrom the two version strings then include those values in the\n+\tgenerated error message.\n+\n+2021-10-01  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_elab.adb (Is_Safe_Call): Return True in the case of a\n+\t(possibly rewritten) call to an expression function.\n+\n+2021-10-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association):\n+\tInitialize Id_Typ to Any_Type by default.\n+\n+2021-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst (gnatmem): Document\n+\tthat it works only with fixed-position executables.\n+\n+2021-10-01  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-parame__vxworks.ads (time_t_bits): Change to\n+\tLong_Long_Integer'Size.\n+\n 2021-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Fix comment."}, {"sha": "fed7a2b6c1e1ee0d0c20416070cf5951a95d2b51", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,40 @@\n+2021-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/102103\n+\t* c-common.c (decl_with_nonnull_addr_p): Handle members.\n+\tCheck and perform warning suppression.\n+\t(c_common_truthvalue_conversion): Enhance warning suppression.\n+\n+2021-10-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102552\n+\t* c-common.c (parse_optimize_options): decoded_options[0] is\n+\t  used for program name, so merged_decoded_options should also\n+\t  respect that.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR sanitizer/102515\n+\t* c-ubsan.c (ubsan_instrument_division): Check the right\n+\tflag_sanitize_recover bit, depending on which sanitization\n+\tis done.  Sanitize INT_MIN / -1 under SANITIZE_SI_OVERFLOW\n+\trather than SANITIZE_DIVIDE.  If both SANITIZE_SI_OVERFLOW\n+\tand SANITIZE_DIVIDE is enabled, neither check is known\n+\tto be false and flag_sanitize_recover bits for those two\n+\taren't the same, emit both __ubsan_handle_divrem_overflow\n+\tand __ubsan_handle_divrem_overflow_abort calls.\n+\n+2021-10-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.c (parse_optimize_options): Combine optimize\n+\toptions with what was provided on the command line.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_omp_split_clauses): Also copy\n+\tOMP_CLAUSE_ORDER_REPRODUCIBLE.\n+\n 2021-09-27  Martin Liska  <mliska@suse.cz>\n \n \t* c-opts.c (c_common_init_options_struct): Set also"}, {"sha": "73f6168c460628ba8be56751fa5a7c859c114594", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,21 @@\n+2021-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/102103\n+\t* c-typeck.c (maybe_warn_for_null_address): New function.\n+\t(build_binary_op): Call it.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR sanitizer/102515\n+\t* c-typeck.c (build_binary_op): Call ubsan_instrument_division\n+\tfor division even for SANITIZE_SI_OVERFLOW.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_order): Set\n+\tOMP_CLAUSE_ORDER_REPRODUCIBLE for explicit reproducible: modifier.\n+\n 2021-09-28  Andrew Pinski  <apinski@marvell.com>\n \n \tPR c/32122"}, {"sha": "b71b84a3105c97dc8c259fa3eab2a7e293d34f88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,34 @@\n+2021-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/102103\n+\t* typeck.c (warn_for_null_address): Enhance.\n+\t(cp_build_binary_op): Call it also for member pointers.\n+\n+2021-10-01  qingzhe huang  <nickhuang99@hotmail.com>\n+\n+\tPR c++/101783\n+\t* tree.c (cp_build_qualified_type_real): Exclude typedef from\n+\terror.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR sanitizer/102515\n+\t* typeck.c (cp_build_binary_op): Call ubsan_instrument_division\n+\tfor division even for SANITIZE_SI_OVERFLOW.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_order): Set\n+\tOMP_CLAUSE_ORDER_REPRODUCIBLE for explicit reproducible: modifier.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102496\n+\t* name-lookup.c (push_local_extern_decl_alias): Return early even for\n+\ttls vars with non-dependent type when processing_template_decl.  For\n+\tCP_DECL_THREAD_LOCAL_P vars call set_decl_tls_model on alias.\n+\n 2021-09-30  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/102535"}, {"sha": "c9a129301466a815d9279b3838a30729633ebf32", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,19 @@\n+2021-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/102103\n+\t* array.c: Remove an unnecessary test.\n+\t* trans-array.c: Same.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.h (gfc_omp_clauses): Add order_reproducible bitfield.\n+\t* dump-parse-tree.c (show_omp_clauses): Print REPRODUCIBLE: for it.\n+\t* openmp.c (gfc_match_omp_clauses): Set order_reproducible for\n+\texplicit reproducible: modifier.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Set\n+\tOMP_CLAUSE_ORDER_REPRODUCIBLE for order_reproducible.\n+\t(gfc_split_omp_clauses): Also copy order_reproducible.\n+\n 2021-09-30  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102458"}, {"sha": "cbc1ebbdd719539e82bfbf4244363d8608556d19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,76 @@\n+2021-10-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102546\n+\t* gcc.dg/tree-ssa/pr102546.c: New file.\n+\n+2021-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/102103\n+\t* g++.dg/cpp0x/constexpr-array-ptr10.C: Suppress a valid warning.\n+\t* g++.dg/warn/Wreturn-local-addr-6.C: Correct a cast.\n+\t* gcc.dg/Waddress.c: Expect a warning.\n+\t* c-c++-common/Waddress-3.c: New test.\n+\t* c-c++-common/Waddress-4.c: New test.\n+\t* g++.dg/warn/Waddress-5.C: New test.\n+\t* g++.dg/warn/Waddress-6.C: New test.\n+\t* g++.dg/warn/pr101219.C: Expect a warning.\n+\t* gcc.dg/Waddress-3.c: New test.\n+\n+2021-10-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* c-c++-common/tsan/atomic_stack.c: Don't expect print out from\n+\t__tsan_atomic32_fetch_add.\n+\n+2021-10-01  qingzhe huang  <nickhuang99@hotmail.com>\n+\n+\tPR c++/101783\n+\t* g++.dg/parse/pr101783.C: New test.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR sanitizer/102515\n+\t* c-c++-common/ubsan/div-by-zero-3.c: Use\n+\t-fsanitize=signed-integer-overflow instead of\n+\t-fsanitize=integer-divide-by-zero.\n+\t* c-c++-common/ubsan/div-by-zero-5.c: Likewise.\n+\t* c-c++-common/ubsan/div-by-zero-4.c: Likewise.  Add\n+\t-fsanitize-undefined-trap-on-error.\n+\t* c-c++-common/ubsan/float-div-by-zero-2.c: New test.\n+\t* c-c++-common/ubsan/overflow-div-1.c: New test.\n+\t* c-c++-common/ubsan/overflow-div-2.c: New test.\n+\t* c-c++-common/ubsan/overflow-div-3.c: New test.\n+\n+2021-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/cpymem-size.c: Adjust scan for ilp32.\n+\n+2021-10-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/vect/bb-slp-pr97709.c: Fix for computed goto\n+\tpointers.\n+\n+2021-10-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/i386/avx512er-vrsqrt28ps-3.c: Disable fast math.\n+\t* gcc.target/i386/avx512er-vrsqrt28ps-5.c: Likewise.\n+\t* gcc.target/i386/attr-optimize.c: New test.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.dg/gomp/order-5.f90: Adjust scan-tree-dump-times regexps.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102496\n+\t* g++.dg/tls/pr102496-1.C: New test.\n+\t* g++.dg/tls/pr102496-2.C: New test.\n+\n+2021-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102518\n+\t* gcc.dg/torture/pr102518.c: New testcase.\n+\n 2021-09-30  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gfortran.dg/c-interop/cf-descriptor-5-c.c: Include alloca.h."}, {"sha": "2086925da3d563794d2b363372548fe965df2fae", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,32 @@\n+2021-10-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/alloc-10.f90: Fix alignment check.\n+\t* testsuite/libgomp.fortran/alloc-7.f90: Fix array access.\n+\t* testsuite/libgomp.fortran/alloc-8.f90: Likewise.\n+\t* testsuite/libgomp.fortran/alloc-11.f90: New test for omp_realloc,\n+\tbased on libgomp.c-c++-common/alloc-9.c.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/order-reproducible-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/order-reproducible-2.c: New test.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* affinity-fmt.c (omp_get_team_num, omp_get_num_teams): Add\n+\tialias_redirect.\n+\t* env.c (handle_omp_display_env): Use ialias_call.\n+\t* icv-device.c: Move ialias right below each function.\n+\t(omp_get_device_num): Use ialias_call.\n+\t* fortran.c (omp_fulfill_event): Add ialias_redirect.\n+\t* icv.c (omp_get_active_level): Add ialias_redirect.\n+\n+2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp.h.in (omp_aligned_alloc, omp_aligned_calloc): Add\n+\t__alloc_align__ (1) attribute.\n+\t* testsuite/libgomp.c-c++-common/alloc-9.c: New test.\n+\n 2021-09-30  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/alloc-7.f90: Add dg-prune-output"}, {"sha": "ff9c5d7ed341c01f1117321551db851ac40ef144", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,7 @@\n+2021-10-01  Lu\u00eds Ferreira  <contact@lsferreira.net>\n+\n+\t* testsuite/d-demangle-expected: Add missing format for new test\n+\n 2021-09-23  Lu\u00eds Ferreira  <contact@lsferreira.net>\n \n \t* d-demangle.c (dlang_Type): Validate MANGLED is nonnull."}, {"sha": "64d0194ac13b1a31e9c0ed2e53fee246803f6a97", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,7 @@\n+2021-10-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: Update to the corresponding revision.\n+\n 2021-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* sanitizer_common/sanitizer_common_interceptors.inc: Cherry-pick"}, {"sha": "a03bec825abc5308ceed9ff67b6c822dfd3b8aef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d116bcc5556c7df32803f7bf8e6e238ea1c13fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d116bcc5556c7df32803f7bf8e6e238ea1c13fb", "patch": "@@ -1,3 +1,295 @@\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102100\n+\t* include/Makefile.am (c++config.h): Define\n+\t_GLIBCXX_VERBOSE_ASSERT based on configure output.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/c++config: Fix condition for verbose assertions.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92546\n+\t* include/bits/erase_if.h (__erase_nodes_if): Use __niter_base to\n+\tunwrap debug iterators.\n+\t* include/bits/refwrap.h: Do not error if included in C++03.\n+\t* include/bits/stl_algo.h (__remove_if): Move to ...\n+\t* include/bits/stl_algobase.h (__remove_if): ... here.\n+\t* include/std/deque (erase, erase_if): Use __remove_if instead of\n+\tremove and remove_if.\n+\t* include/std/string (erase, erase_if): Likewise.\n+\t* include/std/vector (erase, erase_if): Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/66742\n+\t* include/bits/list.tcc (list::sort()): Use _Scratch_list\n+\tobjects for splicing and merging.\n+\t(list::sort(StrictWeakOrdering)): Likewise.\n+\t* include/bits/stl_list.h (__detail::_Scratch_list): New type.\n+\t* src/c++98/list.cc (_List_node_base::_M_transfer): Add\n+\tassertion for --enable-libstdcxx-debug library.\n+\t* testsuite/23_containers/list/operations/66742.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100612\n+\t* include/std/thread (__pmf_expects_stop_token): New variable\n+\ttemplate to detect a pointer to member function that needs a\n+\tstop_token to be added to the arguments.\n+\t(jthread::__S_create): Use __pmf_expects_stop_token.\n+\t(jthread::__S_create_pmf): New function.\n+\t* testsuite/30_threads/jthread/100612.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_queue.h\n+\t(__cpp_lib_adaptor_iterator_pair_constructor): Define for C++23, as\n+\tper P1425R4.\n+\t(queue(InputIterator, InputIterator)): Likewise.\n+\t(queue(InputIterator, InputIterator, const Alloc&)): Likewise.\n+\t* include/bits/stl_stack.h\n+\t(__cpp_lib_adaptor_iterator_pair_constructor): Likewise.\n+\t(stack(InputIterator, InputIterator)): Likewise.\n+\t(stack(InputIterator, InputIterator, const Alloc&)): Likewise.\n+\t* include/std/version (__cpp_lib_adaptor_iterator_pair_constructor):\n+\tDefine.\n+\t* testsuite/23_containers/queue/cons_from_iters.cc: New test.\n+\t* testsuite/23_containers/stack/cons_from_iters.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_queue.h (priority_queue): Add\n+\tallocator-extended overloads for constructors taking iterator.\n+\t* testsuite/23_containers/priority_queue/lwg3506.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_queue.h (priority_queue): Construct sequence\n+\tfrom iterators when no sequence argument is present (LWG 3529).\n+\t* testsuite/23_containers/priority_queue/lwg3529.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_queue.h (priority_queue): Constrain\n+\tconstructors with InputIterator parameters (LWG 3522).\n+\t* testsuite/23_containers/priority_queue/lwg3522.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_base.h (ranges::distance): Split overload\n+\tinto two (LWG 3392).\n+\t* testsuite/24_iterators/range_operations/lwg3392.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/thread/cons/3.cc: Remove derivation from\n+\tstd::unary_function.\n+\t* testsuite/30_threads/thread/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/5.cc: Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/ext/pb_ds/example/basic_multimap.cc: Remove\n+\tunnecesary derivation from std::unary_function.\n+\t* testsuite/ext/pb_ds/example/erase_if.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_illegal_resize.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_initial_size.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_load_set_change.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_mod.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_resize.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_shift_mask.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc:\n+\tLikewise.\n+\t* testsuite/ext/pb_ds/example/ranged_hash.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/store_hash.cc: Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/functexcept.cc (__throw_out_of_range_fmt): Do not\n+\texpand the format string for freestanding, or non-vebose, or if\n+\twe're just going to abort anyway.\n+\t* src/c++11/snprintf_lite.cc: Remove unused header and\n+\tdeclaration.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__do_visit): Use variant_npos instead of\n+\tliteral -1 that requires a narrowing conversion.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99327\n+\t* src/filesystem/ops-common.h (__unsupported): New function to\n+\treturn a suitable error code for missing functionality.\n+\t(posix::off_t): New typedef.\n+\t(posix::*): Set errno to ENOSYS instead of ENOTSUP for no-op\n+\tfallback implementations.\n+\t(do_copy_file): Replace uses of errc::not_supported.\n+\t* src/c++17/fs_ops.cc (fs::copy, fs::copy_file, create_dir)\n+\t(fs::create_directory, fs::create_directory_symlink)\n+\t(fs::create_hard_link, fs::create_symlink, fs::current_path)\n+\t(fs::equivalent, do_stat, fs::file_size, fs::hard_link_count)\n+\t(fs::last_write_time, fs::permissions, fs::read_symlink):\n+\tReplace uses of errc::not_supported.\n+\t(fs::resize_file): Qualify off_t.\n+\t* src/filesystem/ops.cc (fs::copy, fs::copy_file, create_dir)\n+\t(fs::create_directory, fs::create_directory_symlink)\n+\t(fs::create_hard_link, fs::create_symlink, fs::current_path)\n+\t(fs::equivalent, do_stat, fs::file_size, fs::last_write_time)\n+\t(fs::permissions, fs::read_symlink, fs::system_complete):\n+\tReplace uses of errc::not_supported.\n+\t(fs::resize_file): Qualify off_t and enable unconditionally.\n+\t* testsuite/19_diagnostics/system_error/cons-1.cc: Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/ops-common.h (last_error): New helper function.\n+\t(filesystem::do_space): Use last_error().\n+\t* src/c++17/fs_ops.cc (fs::absolute, fs::create_hard_link)\n+\t(fs::equivalent, fs::remove, fs::temp_directory_path): Use\n+\tlast_error().\n+\t* src/filesystem/ops.cc (fs::create_hard_link)\n+\t(fs::remove, fs::temp_directory_path): Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__conditional): New class template\n+\tfor internal uses of std::conditional.\n+\t(__conditional_t): New alias template to replace conditional_t.\n+\t(__and_, __or_, __result_of_memfun, __result_of_memobj): Use\n+\t__conditional_t instead of conditional::type.\n+\t* include/bits/atomic_base.h (__atomic_impl::_Diff): Likewise.\n+\t* include/bits/hashtable.h (_Hashtable): Likewise.\n+\t* include/bits/hashtable_policy.h (_Node_iterator, _Insert_base)\n+\t(_Local_iterator): Likewise. Replace typedefs with\n+\tusing-declarations.\n+\t* include/bits/move.h (move_if_noexcept): Use __conditional_t.\n+\t* include/bits/parse_numbers.h (_Select_int_base): Likewise.\n+\t* include/bits/ptr_traits.h (__make_not_void): Likewise.\n+\t* include/bits/ranges_algobase.h (__copy_or_move_backward)\n+\t(__copy_or_move): Likewise.\n+\t* include/bits/ranges_base.h (borrowed_iterator_t): Likewise.\n+\t* include/bits/ranges_util.h (borrowed_subrange_t): Likewise.\n+\t* include/bits/regex_compiler.h (_BracketMatcher): Use\n+\t__conditional_t. Replace typedefs with using-declarations.\n+\t* include/bits/shared_ptr_base.h (__shared_count): Use\n+\t__conditional_t.\n+\t* include/bits/stl_algobase.h (__copy_move, __copy_move_backward):\n+\tLikewise.\n+\t* include/bits/stl_iterator.h (__detail::__clamp_iter_cat)\n+\t(reverse_iterator::iterator_concept)\n+\t(__make_move_if_noexcept_iterator)\n+\t(iterator_traits<common_iterator<_It, _Sent>>)\n+\t(iterator_traits<counted_iterator<_It>>): Likewise.\n+\t* include/bits/stl_pair.h (_PCC, pair::operator=): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree::insert_return_type)\n+\t(_Rb_tree::_M_clone_node): Likewise.\n+\t* include/bits/unique_ptr.h (unique_ptr(unique_ptr<U,E>&&)):\n+\tLikewise.\n+\t* include/bits/uses_allocator.h (__uses_alloc): Likewise.\n+\t(__is_uses_allocator_predicate): Likewise.\n+\t* include/debug/functions.h (__foreign_iterator_aux2): Likewise.\n+\t* include/experimental/any (any::_Manager, __any_caster):\n+\tLikewise.\n+\t* include/experimental/executor (async_completion): Likewise.\n+\t* include/experimental/functional (__boyer_moore_base_t):\n+\tLikewise.\n+\t* include/std/any (any::_Manager): Likewise.\n+\t* include/std/functional (__boyer_moore_base_t): Likewise.\n+\t* include/std/ranges (borrowed_iterator_t)\n+\t(borrowed_subrange_t, __detail::__maybe_present_t)\n+\t(__detail::__maybe_const_t, split_view): Likewise.\n+\t* include/std/tuple (__empty_not_final, tuple::operator=):\n+\tLikewise.\n+\t* include/std/variant (__detail::__variant::__get_t): Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/78113\n+\t* include/std/variant (__do_visit): Use a switch when we have a\n+\tsingle variant with a small number of alternatives.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90943\n+\t* include/std/variant (__cpp_lib_variant): Update value.\n+\t(__detail::__variant::__as): New helpers implementing the\n+\tas-variant exposition-only function templates.\n+\t(visit, visit<R>): Use __as to upcast the variant parameters.\n+\t* include/std/version (__cpp_lib_variant): Update value.\n+\t* testsuite/20_util/variant/visit_inherited.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (__normal_iterator): Simplify\n+\tconverting constructor and do not require _Container::pointer.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h [_GLIBCXX_FULLY_DYNAMIC_STRING]\n+\t(basic_string(basic_string&&)): Add noexcept and avoid\n+\tallocation, by sharing rep with the rvalue string.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (common_iterator::__arrow_proxy)\n+\t(common_iterator::__postfix_proxy): Add noexcept.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94418\n+\t* include/bits/stl_iterator.h (reverse_iterator): Use\n+\tconditional noexcept on constructors and assignment operators.\n+\t* testsuite/24_iterators/reverse_iterator/noexcept.cc: New test.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100153\n+\t* include/bits/vector.tcc (vector<bool>::_M_shrink_to_fit()):\n+\tWhen size() is zero just deallocate and reset.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96733\n+\t* include/bits/stl_algo.h (clamp): Use std::min and std::max.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (basic_regex::multiline): Define for\n+\tnon-strict C++11 and C++14 modes.\n+\t* include/bits/regex_constants.h (regex_constants::multiline):\n+\tAdd _GLIBCXX_RESOLVE_LIB_DEFECTS comment.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/25_algorithms/is_permutation/2.cc: Include <iterator>.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stream_iterator.h (istream_iterator): Add\n+\tnoexcept to constructors and non-throwing member functions and\n+\tfriend functions.\n+\t(ostream_iterator): Likewise.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/boost_concept_check.h (_Is_vector_bool_iterator):\n+\tNew trait to identify vector<bool> iterators, including debug\n+\tones.\n+\t(_ForwardIteratorReferenceConcept): Add default template\n+\targument using _Is_vector_bool_iterator and use it in partial\n+\tspecialization for the vector<bool> cases.\n+\t(_Mutable_ForwardIteratorReferenceConcept): Likewise.\n+\t* testsuite/24_iterators/operations/prev_neg.cc: Adjust dg-error\n+\tline number.\n+\n+2021-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/list.tcc (list::merge): Remove call to size() and\n+\ttry-catch block. Use _Finalize_merge instead.\n+\t* include/bits/stl_list.h (list::_Finalize_merge): New\n+\tscope guard type to update _M_size members after a merge.\n+\n 2021-09-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/regex.h (basic_regex::multiline): Fix #if"}]}