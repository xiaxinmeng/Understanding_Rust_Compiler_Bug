{"sha": "f7854e2faf7640230062dec3596e71773ca500ed", "node_id": "C_kwDOANBUbNoAKGY3ODU0ZTJmYWY3NjQwMjMwMDYyZGVjMzU5NmU3MTc3M2NhNTAwZWQ", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-07-08T07:30:22Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-07-08T07:30:22Z"}, "message": "middle-end: don't lower past veclower [PR106063]\n\nHi All,\n\nMy previous patch can cause a problem if the pattern matches after veclower\nas it may replace the construct with a vector sequence which the target may not\ndirectly support.\n\nAs such don't perform the rewriting if after veclower unless the target supports\nthe operation.  If before veclower do the rewriting as well if the target didn't\nsupport the original operation either.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/106063\n\t* match.pd: Do not apply pattern after veclower is not supported.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/106063\n\t* gcc.dg/pr106063.c: New test.", "tree": {"sha": "9338fba6d21bf6bbf76071179f6474964c9d220a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9338fba6d21bf6bbf76071179f6474964c9d220a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7854e2faf7640230062dec3596e71773ca500ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7854e2faf7640230062dec3596e71773ca500ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7854e2faf7640230062dec3596e71773ca500ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7854e2faf7640230062dec3596e71773ca500ed/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faa0c328ee65f0d6d65d6e20181d26e336071919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa0c328ee65f0d6d65d6e20181d26e336071919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa0c328ee65f0d6d65d6e20181d26e336071919"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "6603f29f58ab2176c2a032ad9afd0fef81a10959", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7854e2faf7640230062dec3596e71773ca500ed/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7854e2faf7640230062dec3596e71773ca500ed/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f7854e2faf7640230062dec3596e71773ca500ed", "patch": "@@ -6008,10 +6008,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n     (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n      (if (csts && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n-      (if (TYPE_UNSIGNED (TREE_TYPE (@1)))\n-       (icmp @0 { csts; })\n-       (with { tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n-\t (icmp (view_convert:utype @0) { csts; }))))))))\n+      (with { auto optab = VECTOR_TYPE_P (TREE_TYPE (@1))\n+\t\t\t ? optab_vector : optab_default;\n+\t      tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n+       (if (target_supports_op_p (utype, icmp, optab)\n+\t    || (optimize_vectors_before_lowering_p ()\n+\t\t&& (!target_supports_op_p (type, cmp, optab)\n+\t\t    || !target_supports_op_p (type, BIT_AND_EXPR, optab))))\n+\t(if (TYPE_UNSIGNED (TREE_TYPE (@1)))\n+\t (icmp @0 { csts; })\n+\t (icmp (view_convert:utype @0) { csts; })))))))))\n \n /* When one argument is a constant, overflow detection can be simplified.\n    Currently restricted to single use so as not to interfere too much with"}, {"sha": "b23596724f6bb98c53af2dce77d31509bab10378", "filename": "gcc/testsuite/gcc.dg/pr106063.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7854e2faf7640230062dec3596e71773ca500ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106063.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7854e2faf7640230062dec3596e71773ca500ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106063.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106063.c?ref=f7854e2faf7640230062dec3596e71773ca500ed", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-forwprop --disable-tree-evrp\" } */\n+typedef __int128 __attribute__((__vector_size__ (16))) V;\n+\n+V\n+foo (V v)\n+{\n+  return (v & (V){15}) == v;\n+}"}]}