{"sha": "3278804e59a76e7f140a522286d7ac88c2cdb916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3ODgwNGU1OWE3NmU3ZjE0MGE1MjIyODZkN2FjODhjMmNkYjkxNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T11:02:22Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T11:02:22Z"}, "message": "S/390: arch13: vec_reve element order reversal builtins\n\ngcc/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390-builtin-types.def: Add new builtin function type.\n\t* config/s390/s390-builtins.def: Add overloaded builtin\n\ts390_vec_reve and low-level builtins for s390_vler and s390_vster.\n\t* config/s390/s390.md (UNSPEC_VEC_ELTSWAP): New constant definition.\n\t* config/s390/vecintrin.h (vec_reve): New builtin name definition.\n\t* config/s390/vx-builtins.md (V_HW_HSD): New mode iterator.\n\t(\"eltswap<mode>\"): New expander.\n\t(\"*eltswapv16qi\", \"*eltswap<mode>\", \"*eltswap<mode>_emu\"): New\n\tinsn definitions.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/zvector/vec-reve-load-byte-z14.c: New test.\n\t* gcc.target/s390/zvector/vec-reve-load-byte.c: New test.\n\t* gcc.target/s390/zvector/vec-reve-load-halfword-z14.c: New test.\n\t* gcc.target/s390/zvector/vec-reve-load-halfword.c: New test.\n\t* gcc.target/s390/zvector/vec-reve-store-byte-z14.c: New test.\n\t* gcc.target/s390/zvector/vec-reve-store-byte.c: New test.\n\nFrom-SVN: r270085", "tree": {"sha": "408303ffcb4b326fab5259d39939d9ad2c41abb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408303ffcb4b326fab5259d39939d9ad2c41abb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3278804e59a76e7f140a522286d7ac88c2cdb916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3278804e59a76e7f140a522286d7ac88c2cdb916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3278804e59a76e7f140a522286d7ac88c2cdb916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3278804e59a76e7f140a522286d7ac88c2cdb916/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3bbaf6475b2605192dc9c2f9cd61dfa4649f7e"}], "stats": {"total": 298, "additions": 297, "deletions": 1}, "files": [{"sha": "9cb3b9843d3e580b0bf698d9265c34b5f661b2b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -1,3 +1,15 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390-builtin-types.def: Add new builtin function type.\n+\t* config/s390/s390-builtins.def: Add overloaded builtin\n+\ts390_vec_reve and low-level builtins for s390_vler and s390_vster.\n+\t* config/s390/s390.md (UNSPEC_VEC_ELTSWAP): New constant definition.\n+\t* config/s390/vecintrin.h (vec_reve): New builtin name definition.\n+\t* config/s390/vx-builtins.md (V_HW_HSD): New mode iterator.\n+\t(\"eltswap<mode>\"): New expander.\n+\t(\"*eltswapv16qi\", \"*eltswap<mode>\", \"*eltswap<mode>_emu\"): New\n+\tinsn definitions.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390-builtin-types.def: Add new builtin function types."}, {"sha": "ff53ec541f8db914c572fc1d1a9eaea15c9e8849", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -382,6 +382,7 @@ DEF_OV_TYPE (BT_OV_BV16QI_UV16QI_UV16QI_UV16QI, BT_BV16QI, BT_UV16QI, BT_UV16QI,\n DEF_OV_TYPE (BT_OV_BV16QI_UV16QI_UV16QI_UV16QI_INTPTR, BT_BV16QI, BT_UV16QI, BT_UV16QI, BT_UV16QI, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_BV16QI_V16QI_V16QI, BT_BV16QI, BT_V16QI, BT_V16QI)\n DEF_OV_TYPE (BT_OV_BV16QI_V16QI_V16QI_INTPTR, BT_BV16QI, BT_V16QI, BT_V16QI, BT_INTPTR)\n+DEF_OV_TYPE (BT_OV_BV2DI_BV2DI, BT_BV2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_BV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_INT, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_INT)"}, {"sha": "e4cfa80adaa691017d3689a5f6053762b60e497f", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -2892,3 +2892,34 @@ B_DEF      (s390_vstbrg,                bswapv2di,          0,\n B_DEF      (s390_vstbrq,                bswapv1ti,          0,                  B_VX,               0,                   BT_FN_V1TI_V1TI)\n B_DEF      (s390_vstbrf_flt,            bswapv4sf,          0,                  B_VXE,              0,                   BT_FN_V4SF_V4SF)\n B_DEF      (s390_vstbrg_dbl,            bswapv2df,          0,                  B_VX,               0,                   BT_FN_V2DF_V2DF)\n+\n+/* Returns a vector with the elements of the input vector OP0 in reversed order.  */\n+OB_DEF     (s390_vec_reve,              s390_vec_reve_b8,   s390_vec_reve_dbl,  B_VX,               BT_FN_OV4SI_OV4SI)\n+OB_DEF_VAR (s390_vec_reve_b8,           s390_vlerb,         0,                  0,                  BT_OV_BV16QI_BV16QI)\n+OB_DEF_VAR (s390_vec_reve_s8,           s390_vlerb,         0,                  0,                  BT_OV_V16QI_V16QI)\n+OB_DEF_VAR (s390_vec_reve_u8,           s390_vlerb,         0,                  0,                  BT_OV_UV16QI_UV16QI)\n+OB_DEF_VAR (s390_vec_reve_b16,          s390_vlerh,         0,                  0,                  BT_OV_BV8HI_BV8HI)\n+OB_DEF_VAR (s390_vec_reve_s16,          s390_vlerh,         0,                  0,                  BT_OV_V8HI_V8HI)\n+OB_DEF_VAR (s390_vec_reve_u16,          s390_vlerh,         0,                  0,                  BT_OV_UV8HI_UV8HI)\n+OB_DEF_VAR (s390_vec_reve_b32,          s390_vlerf,         0,                  0,                  BT_OV_BV4SI_BV4SI)\n+OB_DEF_VAR (s390_vec_reve_s32,          s390_vlerf,         0,                  0,                  BT_OV_V4SI_V4SI)\n+OB_DEF_VAR (s390_vec_reve_u32,          s390_vlerf,         0,                  0,                  BT_OV_UV4SI_UV4SI)\n+OB_DEF_VAR (s390_vec_reve_b64,          s390_vlerg,         0,                  0,                  BT_OV_BV2DI_BV2DI)\n+OB_DEF_VAR (s390_vec_reve_s64,          s390_vlerg,         0,                  0,                  BT_OV_V2DI_V2DI)\n+OB_DEF_VAR (s390_vec_reve_u64,          s390_vlerg,         0,                  0,                  BT_OV_UV2DI_UV2DI)\n+OB_DEF_VAR (s390_vec_reve_flt,          s390_vlerf_flt,     0,                  B_VXE,              BT_OV_V4SF_V4SF)\n+OB_DEF_VAR (s390_vec_reve_dbl,          s390_vlerg_dbl,     0,                  0,                  BT_OV_V2DF_V2DF)\n+\n+B_DEF      (s390_vlerb,                 eltswapv16qi,       0,                  B_VX,               0,                   BT_FN_V16QI_V16QI)\n+B_DEF      (s390_vlerh,                 eltswapv8hi,        0,                  B_VX,               0,                   BT_FN_V8HI_V8HI)\n+B_DEF      (s390_vlerf,                 eltswapv4si,        0,                  B_VX,               0,                   BT_FN_V4SI_V4SI)\n+B_DEF      (s390_vlerg,                 eltswapv2di,        0,                  B_VX,               0,                   BT_FN_V2DI_V2DI)\n+B_DEF      (s390_vlerf_flt,             eltswapv4sf,        0,                  B_VXE,              0,                   BT_FN_V4SF_V4SF)\n+B_DEF      (s390_vlerg_dbl,             eltswapv2df,        0,                  B_VX,               0,                   BT_FN_V2DF_V2DF)\n+\n+B_DEF      (s390_vsterb,                eltswapv16qi,       0,                  B_VX,               0,                   BT_FN_V16QI_V16QI)\n+B_DEF      (s390_vsterh,                eltswapv8hi,        0,                  B_VX,               0,                   BT_FN_V8HI_V8HI)\n+B_DEF      (s390_vsterf,                eltswapv4si,        0,                  B_VX,               0,                   BT_FN_V4SI_V4SI)\n+B_DEF      (s390_vsterg,                eltswapv2di,        0,                  B_VX,               0,                   BT_FN_V2DI_V2DI)\n+B_DEF      (s390_vsterf_flt,            eltswapv4sf,        0,                  B_VXE,              0,                   BT_FN_V4SF_V4SF)\n+B_DEF      (s390_vsterg_dbl,            eltswapv2df,        0,                  B_VX,               0,                   BT_FN_V2DF_V2DF)"}, {"sha": "bdc7385cfe4e7b04275d464bbfe4dba431a4f059", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -238,6 +238,8 @@\n \n    UNSPEC_VEC_VFMIN\n    UNSPEC_VEC_VFMAX\n+\n+   UNSPEC_VEC_ELTSWAP\n ])\n \n ;;"}, {"sha": "1220bf6c41e75ddba9d012cbfe9d757f9635d932", "filename": "gcc/config/s390/vecintrin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvecintrin.h?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -312,4 +312,5 @@ __lcbb(const void *ptr, int bndry)\n #define vec_sqrt __builtin_s390_vec_sqrt\n #define vec_fp_test_data_class __builtin_s390_vec_fp_test_data_class\n #define vec_revb __builtin_s390_vec_revb\n+#define vec_reve __builtin_s390_vec_reve\n #endif /* _VECINTRIN_H */"}, {"sha": "55b49f456dfa9260681c3cb116052fad22ea5371", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -22,7 +22,7 @@\n \n (define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n (define_mode_iterator VI_HW_SD [V4SI V2DI])\n-(define_mode_iterator V_HW_HSD [V8HI V4SI V2DI V2DF])\n+(define_mode_iterator V_HW_HSD [V8HI V4SI (V4SF \"TARGET_VXE\") V2DI V2DF])\n (define_mode_iterator V_HW_4 [V4SI V4SF])\n ; Full size vector modes with more than one element which are directly supported in vector registers by the hardware.\n (define_mode_iterator VEC_HW  [V16QI V8HI V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n@@ -2058,3 +2058,84 @@\n   \"TARGET_VXE\"\n   \"<vw>fmax<sdx>b\\t%v0,%v1,%v2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n+\n+; The element reversal builtins introduced with arch13 have been made\n+; available also for older CPUs down to z13.\n+(define_expand \"eltswap<mode>\"\n+  [(set (match_operand:VEC_HW                 0 \"nonimmediate_operand\" \"\")\n+\t(unspec:VEC_HW [(match_operand:VEC_HW 1 \"nonimmediate_operand\" \"\")]\n+\t\t       UNSPEC_VEC_ELTSWAP))]\n+  \"TARGET_VX\")\n+\n+; The byte element reversal is implemented as 128 bit byte swap.\n+; Alternatively this could be emitted as bswap:V1TI but the required\n+; subregs appear to confuse combine.\n+(define_insn \"*eltswapv16qi\"\n+  [(set (match_operand:V16QI                0 \"nonimmediate_operand\" \"=v,v,R\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"nonimmediate_operand\"  \"v,R,v\")]\n+\t\t      UNSPEC_VEC_ELTSWAP))]\n+  \"TARGET_VXE2\"\n+  \"@\n+   #\n+   vlbrq\\t%v0,%v1\n+   vstbrq\\t%v1,%v0\"\n+  [(set_attr \"op_type\" \"*,VRX,VRX\")])\n+\n+; vlerh, vlerf, vlerg, vsterh, vsterf, vsterg\n+(define_insn \"*eltswap<mode>\"\n+  [(set (match_operand:V_HW_HSD                   0 \"nonimmediate_operand\" \"=v,v,R\")\n+\t(unspec:V_HW_HSD [(match_operand:V_HW_HSD 1 \"nonimmediate_operand\"  \"v,R,v\")]\n+\t\t\t UNSPEC_VEC_ELTSWAP))]\n+  \"TARGET_VXE2\"\n+  \"@\n+   #\n+   vler<bhfgq>\\t%v0,%v1\n+   vster<bhfgq>\\t%v1,%v0\"\n+  [(set_attr \"op_type\" \"*,VRX,VRX\")])\n+\n+; arch13 has instructions for doing element reversal from mem to reg\n+; or the other way around.  For reg to reg or on pre arch13 machines\n+; we have to emulate it with vector permute.\n+(define_insn_and_split \"*eltswap<mode>_emu\"\n+  [(set (match_operand:VEC_HW                 0 \"nonimmediate_operand\" \"=vR\")\n+\t(unspec:VEC_HW [(match_operand:VEC_HW 1 \"nonimmediate_operand\" \"vR\")]\n+\t\t       UNSPEC_VEC_ELTSWAP))]\n+  \"TARGET_VX && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& ((!memory_operand (operands[0], <MODE>mode)\n+        && !memory_operand (operands[1], <MODE>mode))\n+       || !TARGET_VXE2)\"\n+  [(set (match_dup 3)\n+\t(unspec:V16QI [(match_dup 4)\n+\t\t       (match_dup 4)\n+\t\t       (match_dup 2)]\n+\t\t      UNSPEC_VEC_PERM))\n+   (set (match_dup 0) (subreg:VEC_HW (match_dup 3) 0))]\n+{\n+  static char p[4][16] =\n+    { { 15, 14, 13, 12, 11, 10, 9,  8,  7,  6,  5,  4,  3,  2,  1,  0 },   /* Q */\n+      { 14, 15, 12, 13, 10, 11, 8,  9,  6,  7,  4,  5,  2,  3,  0,  1 },   /* H */\n+      { 12, 13, 14, 15, 8,  9,  10, 11, 4,  5,  6,  7,  0,  1,  2,  3 },   /* S */\n+      { 8,  9,  10, 11, 12, 13, 14, 15, 0,  1,  2,  3,  4,  5,  6,  7 } }; /* D */\n+  char *perm;\n+  rtx perm_rtx[16], constv;\n+\n+  switch (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)))\n+    {\n+    case 1: perm = p[0]; break;\n+    case 2: perm = p[1]; break;\n+    case 4: perm = p[2]; break;\n+    case 8: perm = p[3]; break;\n+    default: gcc_unreachable ();\n+    }\n+\n+  for (int i = 0; i < 16; i++)\n+    perm_rtx[i] = GEN_INT (perm[i]);\n+\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n+  operands[2] = gen_reg_rtx (V16QImode);\n+  operands[3] = gen_reg_rtx (V16QImode);\n+  operands[4] = simplify_gen_subreg (V16QImode, operands[1], <MODE>mode, 0);\n+  constv = force_const_mem (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm_rtx)));\n+  emit_move_insn (operands[2], constv);\n+})"}, {"sha": "22eecb25aca2ed69ae123a4d7db626dd3369504b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -1,3 +1,12 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-reve-load-byte-z14.c: New test.\n+\t* gcc.target/s390/zvector/vec-reve-load-byte.c: New test.\n+\t* gcc.target/s390/zvector/vec-reve-load-halfword-z14.c: New test.\n+\t* gcc.target/s390/zvector/vec-reve-load-halfword.c: New test.\n+\t* gcc.target/s390/zvector/vec-reve-store-byte-z14.c: New test.\n+\t* gcc.target/s390/zvector/vec-reve-store-byte.c: New test.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/zvector/vec-revb-load-double-z14.c: New test."}, {"sha": "e5d2c30bac3282abbd2f43bacb694f38c992a6e3", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-load-byte-z14.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-byte-z14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-byte-z14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-byte-z14.c?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed char\n+test (vector signed char x)\n+{\n+  return vec_reve (x);\n+}\n+\n+vector signed char\n+test2 (vector signed char *x)\n+{\n+  return vec_reve (*x);\n+}\n+\n+vector signed char\n+test3 (signed char *x)\n+{\n+  return vec_reve (vec_xl (0, x));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 3 } } */"}, {"sha": "813b2518df01c169d55ed63a099a1ed5f79ffd0d", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-load-byte.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-byte.c?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector\" } */\n+\n+/* The vector byte element reversal is actually implemented with a 128\n+   bit bswap.  */\n+\n+#include <vecintrin.h>\n+\n+vector signed char\n+test (vector signed char x)\n+{\n+  return vec_reve (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 1 } } */\n+\n+\n+vector signed char\n+test2 (vector signed char *x)\n+{\n+  return vec_reve (*x);\n+}\n+\n+vector signed char\n+test3 (signed char *x)\n+{\n+  return vec_reve (vec_xl (0, x));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrq\\t\" 2 } } */"}, {"sha": "4938ac20613aed5c1d4323dec39d2b1e4c3d4004", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-load-halfword-z14.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-halfword-z14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-halfword-z14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-halfword-z14.c?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+foo (vector signed short x)\n+{\n+  return vec_reve (x);\n+}\n+\n+vector signed short\n+bar (vector signed short *x)\n+{\n+  return vec_reve (*x);\n+}\n+\n+vector signed short\n+baz (signed short *x)\n+{\n+  return vec_reve (vec_xl (0, x));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 3 } } */"}, {"sha": "3c9229922ecb29d1591195e85a741cb2f39cc019", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-load-halfword.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-halfword.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-halfword.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-load-halfword.c?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+foo (vector signed short x)\n+{\n+  return vec_reve (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 1 } } */\n+\n+\n+vector signed short\n+bar (vector signed short *x)\n+{\n+  return vec_reve (*x);\n+}\n+\n+vector signed short\n+baz (signed short *x)\n+{\n+  return vec_reve (vec_xl (0, x));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlerh\\t\" 2 } } */"}, {"sha": "f07889273a36d6006a20a5daf880683dbf9bd642", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-store-byte-z14.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-store-byte-z14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-store-byte-z14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-store-byte-z14.c?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+/* reg -> mem */\n+void\n+foo (vector signed char *target, vector signed char x)\n+{\n+  *target = vec_reve (x);\n+}\n+\n+void\n+bar (signed char *target, vector signed char x)\n+{\n+  vec_xst (vec_reve (x), 0, target);\n+}\n+\n+/* mem -> mem */\n+void\n+baz (vector signed char *target, vector signed char *x)\n+{\n+  *target = vec_reve (*x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\t\" 3 } } */"}, {"sha": "db8284b1f8ffc70757b4ff911e8e06c9bc3b412b", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-store-byte.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-store-byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3278804e59a76e7f140a522286d7ac88c2cdb916/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-store-byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-store-byte.c?ref=3278804e59a76e7f140a522286d7ac88c2cdb916", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+/* reg -> mem */\n+void\n+foo (vector signed char *target, vector signed char x)\n+{\n+  *target = vec_reve (x);\n+}\n+\n+void\n+bar (signed char *target, vector signed char x)\n+{\n+  vec_xst (vec_reve (x), 0, target);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstbrq\\t\" 2 } } */\n+\n+/* mem -> mem: This becomes vlbrq + vst */\n+void\n+baz (vector signed char *target, vector signed char *x)\n+{\n+  *target = vec_reve (*x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrq\\t\" 1 } } */"}]}