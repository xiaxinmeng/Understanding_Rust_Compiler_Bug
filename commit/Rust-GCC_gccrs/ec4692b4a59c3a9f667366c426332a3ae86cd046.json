{"sha": "ec4692b4a59c3a9f667366c426332a3ae86cd046", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0NjkyYjRhNTljM2E5ZjY2NzM2NmM0MjYzMzJhM2FlODZjZDA0Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-07-04T01:03:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-07-04T01:03:52Z"}, "message": "h8300.md (ors code_iterator): New.\n\n\t* config/h8300/h8300.md (ors code_iterator): New.\n\t(bsetqi_msx, bnotqi_msx patterns and splitters): Consolidate into\n\ta single pattern and single splitter.\n\t(bsethi_msx, bnothi_msx patterns): Consolidate into a single pattern.\n\t(iorqi3_1, xorqi3_1): Likewise.\n\t(iorqi3, xorqi3 expanders): Similarly.\n\nFrom-SVN: r262366", "tree": {"sha": "6adc4b4aba8c8978a15a2ed3514f6770ccfd7ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6adc4b4aba8c8978a15a2ed3514f6770ccfd7ee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4692b4a59c3a9f667366c426332a3ae86cd046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4692b4a59c3a9f667366c426332a3ae86cd046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4692b4a59c3a9f667366c426332a3ae86cd046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4692b4a59c3a9f667366c426332a3ae86cd046/comments", "author": null, "committer": null, "parents": [{"sha": "fae7e83445b4547f98b83e101b4e74fbfbb4d915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae7e83445b4547f98b83e101b4e74fbfbb4d915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae7e83445b4547f98b83e101b4e74fbfbb4d915"}], "stats": {"total": 124, "additions": 26, "deletions": 98}, "files": [{"sha": "c123469fed9659193bb87e39d66ba4da07d9dd1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4692b4a59c3a9f667366c426332a3ae86cd046/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4692b4a59c3a9f667366c426332a3ae86cd046/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec4692b4a59c3a9f667366c426332a3ae86cd046", "patch": "@@ -1,4 +1,12 @@\n 2018-07-03  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/h8300.md (ors code_iterator): New.\n+\t(bsetqi_msx, bnotqi_msx patterns and splitters): Consolidate into\n+\ta single pattern and single splitter.\n+\t(bsethi_msx, bnothi_msx patterns): Consolidate into a single pattern.\n+\t(iorqi3_1, xorqi3_1): Likewise.\n+\t(iorqi3, xorqi3 expanders): Similarly.\n+\n \t* config/h8300/h8300.md (movmd_internal_normal): Consolidated with\n \t(movmd_internal) into a single pattern using the P mode iterator.\n \t(movmd splitters): Similarly."}, {"sha": "f3cf42161d086b0139b4dda640737673d93395f2", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 18, "deletions": 98, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4692b4a59c3a9f667366c426332a3ae86cd046/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4692b4a59c3a9f667366c426332a3ae86cd046/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=ec4692b4a59c3a9f667366c426332a3ae86cd046", "patch": "@@ -193,6 +193,8 @@\n (define_mode_iterator QHSIF [QI HI SI SF])\n \n (define_code_iterator shifts [ashift ashiftrt lshiftrt])\n+\n+(define_code_iterator ors [ior xor])\n \f\n ;; ----------------------------------------------------------------------\n ;; MOVE INSTRUCTIONS\n@@ -1597,126 +1599,44 @@\n   [(set_attr \"length\" \"2\")])\n \n ;; ----------------------------------------------------------------------\n-;; OR INSTRUCTIONS\n+;; OR/XOR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"bsetqi_msx\"\n+(define_insn \"b<code>qi_msx\"\n   [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n-\t(ior:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t(ors:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n   \"TARGET_H8300SX && rtx_equal_p (operands[0], operands[1])\"\n-  \"bset\\\\t%V2,%0\"\n+  { return <CODE> == IOR ? \"bset\\\\t%V2,%0\" : \"bnot\\\\t%V2,%0\"; }\n   [(set_attr \"length\" \"8\")])\n \n-(define_split\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\")\n-\t(ior:HI (match_operand:HI 1 \"bit_register_indirect_operand\")\n-\t\t(match_operand:HI 2 \"single_one_operand\")))]\n-  \"TARGET_H8300SX\"\n-  [(set (match_dup 0)\n-\t(ior:QI (match_dup 1)\n-\t\t(match_dup 2)))]\n-  {\n-    if (abs (INTVAL (operands[2])) > 0xFF)\n-      {\n-\toperands[0] = adjust_address (operands[0], QImode, 0);\n-\toperands[1] = adjust_address (operands[1], QImode, 0);\n-\toperands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n-      }\n-    else\n-      {\n-\toperands[0] = adjust_address (operands[0], QImode, 1);\n-\toperands[1] = adjust_address (operands[1], QImode, 1);\n-      }\n-  })\n-\n-(define_insn \"bsethi_msx\"\n+(define_insn \"b<code>hi_msx\"\n   [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n-\t(ior:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t(ors:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n \t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n   \"TARGET_H8300SX\"\n-  \"bset\\\\t%V2,%0\"\n+  { return <CODE> == IOR ? \"bset\\\\t%V2,%0\" : \"bnot\\\\t%V2,%0\"; }\n   [(set_attr \"length\" \"8\")])\n \n-(define_insn \"iorqi3_1\"\n+(define_insn \"<code>qi3_1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ\")\n-\t(ior:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n+\t(ors:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y2,rQi\")))]\n   \"TARGET_H8300SX || register_operand (operands[0], QImode)\n    || single_one_operand (operands[2], QImode)\"\n-  \"@\n-   bset\\\\t%V2,%R0\n-   or\\\\t%X2,%X0\"\n-  [(set_attr \"length\" \"8,*\")\n-   (set_attr \"length_table\" \"*,logicb\")\n-   (set_attr \"cc\" \"none_0hit,set_znv\")])\n-\n-(define_expand \"ior<mode>3\"\n-  [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n-\t(ior:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-;; ----------------------------------------------------------------------\n-;; XOR INSTRUCTIONS\n-;; ----------------------------------------------------------------------\n-\n-(define_insn \"bnotqi_msx\"\n-  [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n-\t(xor:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n-  \"TARGET_H8300SX\n-   && rtx_equal_p (operands[0], operands[1])\"\n-  \"bnot\\\\t%V2,%0\"\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\")\n-\t(xor:HI (match_operand:HI 1 \"bit_register_indirect_operand\")\n-\t\t(match_operand:HI 2 \"single_one_operand\")))]\n-  \"TARGET_H8300SX\"\n-  [(set (match_dup 0)\n-\t(xor:QI (match_dup 1)\n-\t\t(match_dup 2)))]\n   {\n-    if (abs (INTVAL (operands[2])) > 0xFF)\n-      {\n-\toperands[0] = adjust_address (operands[0], QImode, 0);\n-\toperands[1] = adjust_address (operands[1], QImode, 0);\n-\toperands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n-      }\n-    else\n-      {\n-\toperands[0] = adjust_address (operands[0], QImode, 1);\n-\toperands[1] = adjust_address (operands[1], QImode, 1);\n-      }\n-  })\n-\n-(define_insn \"bnothi_msx\"\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n-\t(xor:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n-  \"TARGET_H8300SX\"\n-  \"bnot\\\\t%V2,%0\"\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"xorqi3_1\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=U,r\")\n-\t(xor:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n-\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y2,rQi\")))]\n-  \"TARGET_H8300SX || register_operand (operands[0], QImode)\n-   || single_one_operand (operands[2], QImode)\"\n-  \"@\n-   bnot\\\\t%V2,%R0\n-   xor\\\\t%X2,%X0\"\n+    if (which_alternative == 0)\n+      return <CODE> == IOR ? \"bset\\\\t%V2,%R0\" : \"bnot\\\\t%V2,%R0\"; \n+    else if (which_alternative == 1)\n+      return <CODE> == IOR ? \"or\\\\t%X2,%X0\" : \"xor\\\\t%X2,%X0\";\n+  }\n   [(set_attr \"length\" \"8,*\")\n    (set_attr \"length_table\" \"*,logicb\")\n    (set_attr \"cc\" \"none_0hit,set_znv\")])\n \n-(define_expand \"xor<mode>3\"\n+(define_expand \"<code><mode>3\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n-\t(xor:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n+\t(ors:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n \t\t  (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n   \"\"\n   \"\")"}]}