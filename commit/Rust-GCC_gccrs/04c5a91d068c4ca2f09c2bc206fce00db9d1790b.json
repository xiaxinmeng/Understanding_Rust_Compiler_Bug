{"sha": "04c5a91d068c4ca2f09c2bc206fce00db9d1790b", "node_id": "C_kwDOANBUbNoAKDA0YzVhOTFkMDY4YzRjYTJmMDljMmJjMjA2ZmNlMDBkYjlkMTc5MGI", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2021-11-09T13:40:04Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2021-11-13T18:32:25Z"}, "message": "fixincludes: simplify handling for access() failure [PR21283, PR80047]\n\nPOSIX says:\n\n    On some implementations, if buf is a null pointer, getcwd() may obtain\n    size bytes of memory using malloc(). In this case, the pointer returned\n    by getcwd() may be used as the argument in a subsequent call to free().\n    Invoking getcwd() with buf as a null pointer is not recommended in\n    conforming applications.\n\nThis produces an error building GCC with --enable-werror-always:\n\n    ../../../fixincludes/fixincl.c: In function \u2018process\u2019:\n    ../../../fixincludes/fixincl.c:1356:7: error: argument 1 is null but\n    the corresponding size argument 2 value is 4096 [-Werror=nonnull]\n\nIt's suggested by POSIX to call getcwd() with progressively larger\nbuffers until it does not give an [ERANGE] error. However, it's highly\nunlikely that this error-handling route is ever used.\n\nSo we can simplify it instead of writting too much code.  We give up to\nuse getcwd(), because `make` will output a `Leaving directory ...` message\ncontaining the path to cwd when we call abort().\n\nfixincludes/ChangeLog:\n\n\tPR other/21823\n\tPR bootstrap/80047\n\t* fixincl.c (process): Simplify the handling for highly\n\t  unlikely access() failure, to avoid using non-standard\n\t  extensions.", "tree": {"sha": "5c23604ebac352afb7ad13e079ba9d7ec65704f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c23604ebac352afb7ad13e079ba9d7ec65704f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04c5a91d068c4ca2f09c2bc206fce00db9d1790b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEunTLnZqV9wGnXaw2V5HFsy7NNwFAmGQBLkACgkQ2V5HFsy7\nNNx1PA//RDEP813B8xFqTsGH8a+p1sF7XNsOBXrSMrY46PdGUVyGh3x9fMAVZz38\nt9JUc8VlIX3jq58ndyKO8CE5fCPGwzOjEQ1ei9zO+omrzFeZ1i0wK69wmQEBYXL0\nttx63y2xC0ByG62TGW/ZY7BHjhV1X3+dmR0EsDbn4EZPocoXcvuTxWMcT0PBfHGy\niKrdF0bW+TTgEiIQ35Zru9Sj0xCTTMpVrVlTx/YMdLi+jEa+lU+xJwTxatq78FRa\nxi/EU7IIXus98cSqy2G1XdpQ7ceCSX6L/VEOnnTBaHrNN5SOCGkFEJyMzWvBnt3h\nBuiSn52tZRHc9P65DJ+WMG7mLFwY5PgndVvoVw61tTrhDx6zutMDUR2DqhgOvJje\n4PegdLzSoVVGP+8XWno8KtKHJVOsPzw603bdHPLv0VEVRSXxn8cPkfqLdjf/MbzK\n8DvyAwfDmSjt0lh64MZD6Ox9oCXcLGJrSJ7gcFceCBoezkL6aIOBldmmp/p+TYx6\nICpr525aUCneen8RXfN3xyhuJTMSwfaTRng5dBMGRGId3Jc9sFyaGjsYGKsClYCk\n5IDkW0qomtJ7rUPCRZXbz135t+gEG7dKV4ORKPpiIFV5Ae/cnp2umnRFw+U3y5tr\nDzzmEVwInoLJgtpoyb4JCzkoroeMTKAnAvfsdo6pWTWFcjGueys=\n=iLiw\n-----END PGP SIGNATURE-----", "payload": "tree 5c23604ebac352afb7ad13e079ba9d7ec65704f5\nparent a246d7230b8f8b059b21a073e8a91c213dee9cf4\nauthor Xi Ruoyao <xry111@mengyan1223.wang> 1636465204 +0800\ncommitter Xi Ruoyao <xry111@mengyan1223.wang> 1636828345 +0800\n\nfixincludes: simplify handling for access() failure [PR21283, PR80047]\n\nPOSIX says:\n\n    On some implementations, if buf is a null pointer, getcwd() may obtain\n    size bytes of memory using malloc(). In this case, the pointer returned\n    by getcwd() may be used as the argument in a subsequent call to free().\n    Invoking getcwd() with buf as a null pointer is not recommended in\n    conforming applications.\n\nThis produces an error building GCC with --enable-werror-always:\n\n    ../../../fixincludes/fixincl.c: In function \u2018process\u2019:\n    ../../../fixincludes/fixincl.c:1356:7: error: argument 1 is null but\n    the corresponding size argument 2 value is 4096 [-Werror=nonnull]\n\nIt's suggested by POSIX to call getcwd() with progressively larger\nbuffers until it does not give an [ERANGE] error. However, it's highly\nunlikely that this error-handling route is ever used.\n\nSo we can simplify it instead of writting too much code.  We give up to\nuse getcwd(), because `make` will output a `Leaving directory ...` message\ncontaining the path to cwd when we call abort().\n\nfixincludes/ChangeLog:\n\n\tPR other/21823\n\tPR bootstrap/80047\n\t* fixincl.c (process): Simplify the handling for highly\n\t  unlikely access() failure, to avoid using non-standard\n\t  extensions.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c5a91d068c4ca2f09c2bc206fce00db9d1790b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c5a91d068c4ca2f09c2bc206fce00db9d1790b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c5a91d068c4ca2f09c2bc206fce00db9d1790b/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a246d7230b8f8b059b21a073e8a91c213dee9cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a246d7230b8f8b059b21a073e8a91c213dee9cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a246d7230b8f8b059b21a073e8a91c213dee9cf4"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "a17b65866c332b6412c789d995b1803b2483659b", "filename": "fixincludes/fixincl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04c5a91d068c4ca2f09c2bc206fce00db9d1790b/fixincludes%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04c5a91d068c4ca2f09c2bc206fce00db9d1790b/fixincludes%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.c?ref=04c5a91d068c4ca2f09c2bc206fce00db9d1790b", "patch": "@@ -1352,11 +1352,10 @@ process (void)\n \n   if (access (pz_curr_file, R_OK) != 0)\n     {\n-      int erno = errno;\n-      fprintf (stderr, \"Cannot access %s from %s\\n\\terror %d (%s)\\n\",\n-               pz_curr_file, getcwd ((char *) NULL, MAXPATHLEN),\n-               erno, xstrerror (erno));\n-      return;\n+      /* Some really strange error happened.  */\n+      fprintf (stderr, \"Cannot access %s: %s\\n\", pz_curr_file,\n+\t       xstrerror (errno));\n+      abort ();\n     }\n \n   pz_curr_data = load_file (pz_curr_file);"}]}