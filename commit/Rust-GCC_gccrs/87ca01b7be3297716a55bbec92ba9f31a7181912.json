{"sha": "87ca01b7be3297716a55bbec92ba9f31a7181912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjYTAxYjdiZTMyOTc3MTZhNTViYmVjOTJiYTlmMzFhNzE4MTkxMg==", "commit": {"author": {"name": "Quentin Neill", "email": "quentin.neill@amd.com", "date": "2011-11-05T02:31:29Z"}, "committer": {"name": "Harsha Jagasia", "email": "hjagasia@gcc.gnu.org", "date": "2011-11-05T02:31:29Z"}, "message": "Piledriver f16cintrin.h fix.\n\n2011-11-04  Quentin Neill  <quentin.neill@amd.com>\n\n\tPiledriver f16cintrin.h fix.\n\t* config/i386/f16cintrin.h: Contents moved from immintrin.h.\n\t* config/config.gcc: Add f16cintrin.h.\n\nFrom-SVN: r180999", "tree": {"sha": "0af794118b8a861f7988e67283ae7603887fbe6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af794118b8a861f7988e67283ae7603887fbe6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87ca01b7be3297716a55bbec92ba9f31a7181912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca01b7be3297716a55bbec92ba9f31a7181912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ca01b7be3297716a55bbec92ba9f31a7181912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca01b7be3297716a55bbec92ba9f31a7181912/comments", "author": null, "committer": null, "parents": [{"sha": "a73c1a724d3bfa9e64840437bd1d95e019ff4017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73c1a724d3bfa9e64840437bd1d95e019ff4017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73c1a724d3bfa9e64840437bd1d95e019ff4017"}], "stats": {"total": 163, "additions": 104, "deletions": 59}, "files": [{"sha": "fbe76068449394273b771b509e79fdc4d21fef7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca01b7be3297716a55bbec92ba9f31a7181912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca01b7be3297716a55bbec92ba9f31a7181912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87ca01b7be3297716a55bbec92ba9f31a7181912", "patch": "@@ -1,3 +1,9 @@\n+2011-11-05  Quentin Neill  <quentin.neill@amd.com>\n+\n+\tPiledriver f16cintrin.h fix.\n+\t* config/i386/f16cintrin.h: Contents moved from immintrin.h.\n+\t* config/config.gcc: Add f16cintrin.h.\n+\n 2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c++/50608"}, {"sha": "5ff836b4a2df3c3f592ac1989db3cc7a7ca599e8", "filename": "gcc/config/i386/f16cintrin.h", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca01b7be3297716a55bbec92ba9f31a7181912/gcc%2Fconfig%2Fi386%2Ff16cintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca01b7be3297716a55bbec92ba9f31a7181912/gcc%2Fconfig%2Fi386%2Ff16cintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ff16cintrin.h?ref=87ca01b7be3297716a55bbec92ba9f31a7181912", "patch": "@@ -0,0 +1,94 @@\n+/* Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+#if (!defined(_X86INTRIN_H_INCLUDED) && !defined(_IMMINTRIN_H_INCLUDED))\n+# error \"Never use <f16intrin.h> directly; include <x86intrin.h> or <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef __F16C__\n+# error \"F16C instruction set not enabled\"\n+#else\n+\n+#ifndef _F16CINTRIN_H_INCLUDED\n+#define _F16CINTRIN_H_INCLUDED\n+\n+extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtsh_ss (unsigned short __S)\n+{\n+  __v8hi __H = __extension__ (__v8hi){ __S, 0, 0, 0, 0, 0, 0, 0 };\n+  __v4sf __A = __builtin_ia32_vcvtph2ps (__H);\n+  return __builtin_ia32_vec_ext_v4sf (__A, 0);\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtph_ps (__m128i __A)\n+{\n+  return (__m128) __builtin_ia32_vcvtph2ps ((__v8hi) __A);\n+}\n+\n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtph_ps (__m128i __A)\n+{\n+  return (__m256) __builtin_ia32_vcvtph2ps256 ((__v8hi) __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtss_sh (float __F, const int __I)\n+{\n+  __v4sf __A =  __extension__ (__v4sf){ __F, 0, 0, 0 };\n+  __v8hi __H = __builtin_ia32_vcvtps2ph (__A, __I);\n+  return (unsigned short) __builtin_ia32_vec_ext_v8hi (__H, 0);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtps_ph (__m128 __A, const int __I)\n+{\n+  return (__m128i) __builtin_ia32_vcvtps2ph ((__v4sf) __A, __I);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtps_ph (__m256 __A, const int __I)\n+{\n+  return (__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf) __A, __I);\n+}\n+#else\n+#define _cvtss_sh(__F, __I)\t\t\t\t\t\t\\\n+  (__extension__ \t\t\t\t\t\t\t\\\n+   ({\t\t\t\t\t\t\t\t\t\\\n+      __v4sf __A =  __extension__ (__v4sf){ __F, 0, 0, 0 };\t\t\\\n+      __v8hi __H = __builtin_ia32_vcvtps2ph (__A, __I);\t\t\t\\\n+      (unsigned short) __builtin_ia32_vec_ext_v8hi (__H, 0);\t\t\\\n+    }))\n+\n+#define _mm_cvtps_ph(A, I) \\\n+  ((__m128i) __builtin_ia32_vcvtps2ph ((__v4sf)(__m128) A, (int) (I)))\n+\n+#define _mm256_cvtps_ph(A, I) \\\n+  ((__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf)(__m256) A, (int) (I)))\n+#endif\n+\n+#endif /* __F16C__ */\n+#endif"}, {"sha": "986a573dbea86cd6bde46044073129a13713c32d", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca01b7be3297716a55bbec92ba9f31a7181912/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca01b7be3297716a55bbec92ba9f31a7181912/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=87ca01b7be3297716a55bbec92ba9f31a7181912", "patch": "@@ -76,6 +76,10 @@\n #include <fmaintrin.h>\n #endif\n \n+#ifdef __F16C__\n+#include <f16cintrin.h>\n+#endif\n+\n #ifdef __RDRND__\n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -161,63 +165,4 @@ _rdrand64_step (unsigned long long *__P)\n #endif /* __RDRND__ */\n #endif /* __x86_64__  */\n \n-#ifdef __F16C__\n-extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_cvtsh_ss (unsigned short __S)\n-{\n-  __v8hi __H = __extension__ (__v8hi){ __S, 0, 0, 0, 0, 0, 0, 0 };\n-  __v4sf __A = __builtin_ia32_vcvtph2ps (__H);\n-  return __builtin_ia32_vec_ext_v4sf (__A, 0);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cvtph_ps (__m128i __A)\n-{\n-  return (__m128) __builtin_ia32_vcvtph2ps ((__v8hi) __A);\n-}\n-\n-extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_cvtph_ps (__m128i __A)\n-{\n-  return (__m256) __builtin_ia32_vcvtph2ps256 ((__v8hi) __A);\n-}\n-\n-#ifdef __OPTIMIZE__\n-extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_cvtss_sh (float __F, const int __I)\n-{\n-  __v4sf __A =  __extension__ (__v4sf){ __F, 0, 0, 0 };\n-  __v8hi __H = __builtin_ia32_vcvtps2ph (__A, __I);\n-  return (unsigned short) __builtin_ia32_vec_ext_v8hi (__H, 0);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cvtps_ph (__m128 __A, const int __I)\n-{\n-  return (__m128i) __builtin_ia32_vcvtps2ph ((__v4sf) __A, __I);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_cvtps_ph (__m256 __A, const int __I)\n-{\n-  return (__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf) __A, __I);\n-}\n-#else\n-#define _cvtss_sh(__F, __I)\t\t\t\t\t\t\\\n-  (__extension__ \t\t\t\t\t\t\t\\\n-   ({\t\t\t\t\t\t\t\t\t\\\n-      __v4sf __A =  __extension__ (__v4sf){ __F, 0, 0, 0 };\t\t\\\n-      __v8hi __H = __builtin_ia32_vcvtps2ph (__A, __I);\t\t\t\\\n-      (unsigned short) __builtin_ia32_vec_ext_v8hi (__H, 0);\t\t\\\n-    }))\n-\n-#define _mm_cvtps_ph(A, I) \\\n-  ((__m128i) __builtin_ia32_vcvtps2ph ((__v4sf)(__m128) A, (int) (I)))\n-\n-#define _mm256_cvtps_ph(A, I) \\\n-  ((__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf)(__m256) A, (int) (I)))\n-#endif\n-\n-#endif /* __F16C__ */\n-\n #endif /* _IMMINTRIN_H_INCLUDED */"}]}