{"sha": "7879b81e6cedc9090e72804014ab1927832fe8e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3OWI4MWU2Y2VkYzkwOTBlNzI4MDQwMTRhYjE5Mjc4MzJmZThlMA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-03-01T01:19:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-01T01:19:52Z"}, "message": "rtl.texi (SUBREG_PROMOTED_UNSIGNED_P): Change definition to take ptr_extend into account as third type of extension.\n\n        * doc/rtl.texi (SUBREG_PROMOTED_UNSIGNED_P): Change definition\n        to take ptr_extend into account as third type of extension.\n        (SUBREG_PROMOTED_UNSIGNED_SET): Definition of new macro to set bit\n        fields used by SUBREG_PROMOTED_UNSIGNED_P.\n        * rtl.h (SUBREG_PROMOTED_UNSIGNED_SET): New macro.\n        (SUBREG_PROMOTED_UNSIGNED_P): Change to return -1 as well as 0 or 1.\n        * calls.c (precompute_arguments): Use new macro.\n        (expand_call): Ditto.\n        * combine.c (nonzero_bits): Ditto.\n        (record_promoted_value): Ditto.\n        * expr.c (store_expr): Ditto.\n        (expand_expr): Ditto.\n        * function.c (assign_parms): Ditto.\n\nFrom-SVN: r50174", "tree": {"sha": "7b548c0ab1fb1a218191d2b6c99b0f25d0d7bf12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b548c0ab1fb1a218191d2b6c99b0f25d0d7bf12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7879b81e6cedc9090e72804014ab1927832fe8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7879b81e6cedc9090e72804014ab1927832fe8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7879b81e6cedc9090e72804014ab1927832fe8e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7879b81e6cedc9090e72804014ab1927832fe8e0/comments", "author": null, "committer": null, "parents": [{"sha": "42d579d8796eca2c8c184c52194ea8659d59c20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d579d8796eca2c8c184c52194ea8659d59c20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d579d8796eca2c8c184c52194ea8659d59c20b"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "5aa2209e581d5f63eb351cb25b915f787f59ee7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -1,3 +1,19 @@\n+2002-02-28  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* doc/rtl.texi (SUBREG_PROMOTED_UNSIGNED_P): Change definition\n+\tto take ptr_extend into account as third type of extension.\n+\t(SUBREG_PROMOTED_UNSIGNED_SET): Definition of new macro to set bit\n+\tfields used by SUBREG_PROMOTED_UNSIGNED_P.\n+\t* rtl.h (SUBREG_PROMOTED_UNSIGNED_SET): New macro.\n+\t(SUBREG_PROMOTED_UNSIGNED_P): Change to return -1 as well as 0 or 1.\n+\t* calls.c (precompute_arguments): Use new macro.\n+\t(expand_call): Ditto.\n+\t* combine.c (nonzero_bits): Ditto.\n+\t(record_promoted_value): Ditto.\n+\t* expr.c (store_expr): Ditto.\n+\t(expand_expr): Ditto.\n+\t* function.c (assign_parms): Ditto.\n+\n 2002-02-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.c (init_gcc_specs): Get -static and -static-libgcc to"}, {"sha": "bbcc108332b5351412158b7dd09d0b184d69bb79", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -1542,8 +1542,8 @@ precompute_arguments (flags, num_actuals, args)\n \t\targs[i].initial_value\n \t\t  = gen_lowpart_SUBREG (mode, args[i].value);\n \t\tSUBREG_PROMOTED_VAR_P (args[i].initial_value) = 1;\n-\t\tSUBREG_PROMOTED_UNSIGNED_P (args[i].initial_value)\n-\t\t  = args[i].unsignedp;\n+\t\tSUBREG_PROMOTED_UNSIGNED_SET (args[i].initial_value,\n+\t\t  args[i].unsignedp);\n \t      }\n #endif\n \t  }\n@@ -3279,7 +3279,7 @@ expand_call (exp, target, ignore)\n \t  }\n \t  target = gen_rtx_SUBREG (TYPE_MODE (type), target, offset);\n \t  SUBREG_PROMOTED_VAR_P (target) = 1;\n-\t  SUBREG_PROMOTED_UNSIGNED_P (target) = unsignedp;\n+\t  SUBREG_PROMOTED_UNSIGNED_SET (target, unsignedp);\n \t}\n #endif\n "}, {"sha": "733ce27ee2f8180f10982d4ee8c1d3f37b33683b", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -8270,7 +8270,7 @@ nonzero_bits (x, mode)\n \t been zero-extended, we know that at least the high-order bits\n \t are zero, though others might be too.  */\n \n-      if (SUBREG_PROMOTED_VAR_P (x) && SUBREG_PROMOTED_UNSIGNED_P (x))\n+      if (SUBREG_PROMOTED_VAR_P (x) && SUBREG_PROMOTED_UNSIGNED_P (x) > 0)\n \tnonzero = (GET_MODE_MASK (GET_MODE (x))\n \t\t   & nonzero_bits (SUBREG_REG (x), GET_MODE (x)));\n \n@@ -11325,7 +11325,7 @@ record_promoted_value (insn, subreg)\n \n       if (reg_last_set[regno] == insn)\n \t{\n-\t  if (SUBREG_PROMOTED_UNSIGNED_P (subreg))\n+\t  if (SUBREG_PROMOTED_UNSIGNED_P (subreg) > 0)\n \t    reg_last_set_nonzero_bits[regno] &= GET_MODE_MASK (mode);\n \t}\n "}, {"sha": "58faea99f78e7ac16948ef6d412e45fb4fe67d72", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -631,13 +631,29 @@ string constant pool.\n Stored in the @code{frame_related} field and printed as @samp{/f}.\n \n @findex SUBREG_PROMOTED_UNSIGNED_P\n-@cindex @code{subreg} and @samp{/u}\n+@cindex @code{subreg} and @samp{/u} and @samp{/v}\n @cindex @code{unchanging}, in @code{subreg}\n+@cindex @code{volatil}, in @code{subreg}\n @item SUBREG_PROMOTED_UNSIGNED_P (@var{x})\n-Nonzero in a @code{subreg} that has @code{SUBREG_PROMOTED_VAR_P} nonzero\n-if the object being referenced is kept zero-extended and zero if it\n-is kept sign-extended.  Stored in the @code{unchanging} field and\n-printed as @samp{/u}.\n+Returns a value greater then zero for a @code{subreg} that has\n+@code{SUBREG_PROMOTED_VAR_P} nonzero if the object being referenced is kept\n+zero-extended, zero if it is kept sign-extended, and less then zero if it is\n+extended some other way via the @code{ptr_extend} instruction.\n+Stored in the @code{unchanging}\n+field and @code{volatil} field, printed as @samp{/u} and @samp{/v}.\n+This macro may only be used to get the value it may not be used to change\n+the value.  Use @code{SUBREG_PROMOTED_UNSIGNED_SET} to change the value.\n+\n+@findex SUBREG_PROMOTED_UNSIGNED_SET\n+@cindex @code{subreg} and @samp{/u}\n+@cindex @code{unchanging}, in @code{subreg}\n+@cindex @code{volatil}, in @code{subreg}\n+@item SUBREG_PROMOTED_UNSIGNED_SET (@var{x})\n+Set the @code{unchanging} and @code{volatil} fields in a @code{subreg}\n+to reflect zero, sign, or other extension.  If @code{volatil} is\n+zero, then @code{unchanging} as nonzero means zero extension and as\n+zero means sign extension. If @code{volatil} is nonzero then some\n+other type of extension was done via the @code{ptr_extend} instruction.\n \n @findex SUBREG_PROMOTED_VAR_P\n @cindex @code{subreg} and @samp{/s}"}, {"sha": "1cc1d161d2244402d4b3fb16e901be03da6afab3", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -4049,8 +4049,8 @@ store_expr (exp, target, want_value)\n \t    {\n \t      temp = gen_lowpart_SUBREG (GET_MODE (target), temp);\n \t      SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t      SUBREG_PROMOTED_UNSIGNED_P (temp)\n-\t\t= SUBREG_PROMOTED_UNSIGNED_P (target);\n+\t      SUBREG_PROMOTED_UNSIGNED_SET (temp, \n+\t\tSUBREG_PROMOTED_UNSIGNED_P (target));\n \t    }\n \t  else\n \t    temp = convert_modes (GET_MODE (target),\n@@ -6289,7 +6289,7 @@ expand_expr (exp, target, tmode, modifier)\n \n \t  temp = gen_lowpart_SUBREG (mode, DECL_RTL (exp));\n \t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t  SUBREG_PROMOTED_UNSIGNED_P (temp) = unsignedp;\n+\t  SUBREG_PROMOTED_UNSIGNED_SET (temp, unsignedp);\n \t  return temp;\n \t}\n \n@@ -6409,7 +6409,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    {\n \t      temp = gen_lowpart_SUBREG (mode, SAVE_EXPR_RTL (exp));\n \t      SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t      SUBREG_PROMOTED_UNSIGNED_P (temp) = unsignedp;\n+\t      SUBREG_PROMOTED_UNSIGNED_SET (temp, unsignedp);\n \t    }\n \n \t  if (temp == const0_rtx)\n@@ -6431,7 +6431,7 @@ expand_expr (exp, target, tmode, modifier)\n \t  promote_mode (type, mode, &unsignedp, 0);\n \t  temp = gen_lowpart_SUBREG (mode, SAVE_EXPR_RTL (exp));\n \t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t  SUBREG_PROMOTED_UNSIGNED_P (temp) = unsignedp;\n+\t  SUBREG_PROMOTED_UNSIGNED_SET (temp, unsignedp);\n \t  return temp;\n \t}\n "}, {"sha": "0d708ca92fa11ca10190e54b2b361f59b726ee61", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -4733,7 +4733,7 @@ assign_parms (fndecl)\n \t\t  /* The argument is already sign/zero extended, so note it\n \t\t     into the subreg.  */\n \t\t  SUBREG_PROMOTED_VAR_P (tempreg) = 1;\n-\t\t  SUBREG_PROMOTED_UNSIGNED_P (tempreg) = unsignedp;\n+\t\t  SUBREG_PROMOTED_UNSIGNED_SET (tempreg, unsignedp);\n \t\t}\n \n \t      /* TREE_USED gets set erroneously during expand_assignment.  */"}, {"sha": "e679c5483be5d6df6df220260cd3cd92d3bc6db6", "filename": "gcc/rtl.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7879b81e6cedc9090e72804014ab1927832fe8e0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7879b81e6cedc9090e72804014ab1927832fe8e0", "patch": "@@ -853,7 +853,16 @@ extern unsigned int subreg_regno \tPARAMS ((rtx));\n    when assigning to SUBREG_REG.  */\n \n #define SUBREG_PROMOTED_VAR_P(RTX) ((RTX)->in_struct)\n-#define SUBREG_PROMOTED_UNSIGNED_P(RTX) ((RTX)->unchanging)\n+#define SUBREG_PROMOTED_UNSIGNED_SET(RTX, VAL)\t\\\n+do {\t\t\t\t\t\t\\\n+  if ((VAL) < 0)\t\t\t\t\\\n+    (RTX)->volatil = 1;\t\t\t\t\\\n+  else {\t\t\t\t\t\\\n+    (RTX)->volatil = 0;\t\t\t\t\\\n+    (RTX)->unchanging = (VAL);\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+} while (0)\n+#define SUBREG_PROMOTED_UNSIGNED_P(RTX) ((RTX)->volatil ? -1 : (RTX)->unchanging)\n \n /* Access various components of an ASM_OPERANDS rtx.  */\n "}]}