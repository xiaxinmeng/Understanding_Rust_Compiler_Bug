{"sha": "c0b09c1296d5334d1d264ba4d39ca932f9572330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiMDljMTI5NmQ1MzM0ZDFkMjY0YmE0ZDM5Y2E5MzJmOTU3MjMzMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-10-27T14:31:53Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-10-27T14:31:53Z"}, "message": "Add tests for PR92942 - missing -Wstringop-overflow for allocations with a negative lower bound size.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/92942\n\t* gcc.dg/Wstringop-overflow-56.c: New test.\n\t* gcc.dg/Wstringop-overflow-57.c: Same.", "tree": {"sha": "82f348a4bd28b8eb636595cfa164a4f3f1935c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f348a4bd28b8eb636595cfa164a4f3f1935c2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0b09c1296d5334d1d264ba4d39ca932f9572330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b09c1296d5334d1d264ba4d39ca932f9572330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b09c1296d5334d1d264ba4d39ca932f9572330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b09c1296d5334d1d264ba4d39ca932f9572330/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea126639125b77d6c46b8c8c3192a9a039d45809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea126639125b77d6c46b8c8c3192a9a039d45809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea126639125b77d6c46b8c8c3192a9a039d45809"}], "stats": {"total": 254, "additions": 254, "deletions": 0}, "files": [{"sha": "b3e598ca30e4ab34790271b544be7dffb485651d", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-56.c", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b09c1296d5334d1d264ba4d39ca932f9572330/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b09c1296d5334d1d264ba4d39ca932f9572330/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-56.c?ref=c0b09c1296d5334d1d264ba4d39ca932f9572330", "patch": "@@ -0,0 +1,163 @@\n+/* PR middle-end/92942 - missing -Wstringop-overflow for allocations with\n+   a negative lower bound size\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define SIZE_MAX        __SIZE_MAX__\n+#define UINT8_MAX       __UINT8_MAX__\n+#define UINT16_MAX      __UINT16_MAX__\n+\n+typedef __SIZE_TYPE__   size_t;\n+typedef __UINT8_TYPE__  uint8_t;\n+typedef __UINT16_TYPE__ uint16_t;\n+\n+void* usr_alloc1 (size_t) __attribute__ ((alloc_size (1)));\n+void* usr_alloc2 (size_t, size_t)  __attribute__ ((alloc_size (1, 2)));\n+\n+void* malloc (size_t);\n+void* memcpy (void*, const void*, size_t);\n+void* memset (void*, int, size_t);\n+char* strcpy (char*, const char*);\n+\n+void sink (void*);\n+\n+void malloc_uint_range_strcpy (unsigned n)\n+{\n+  void *p = malloc (5 < n ? 5 : n);\n+\n+  strcpy (p, \"01234\");              // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (p);\n+\n+  strcpy (p, \"0123\");\n+  sink (p);\n+}\n+\n+void malloc_uint16_anti_range_memset (uint16_t n)\n+{\n+  if (5 <= n && n <= 9) return;\n+  void *p = malloc (n);\n+\n+  if (UINT16_MAX < SIZE_MAX)\n+    {\n+      size_t sz = (uint16_t)-1 + (size_t)1;\n+      memset (p, 0, sz);            // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+      sink (p);\n+    }\n+\n+  memset (p, 0, 1);\n+  sink (p);\n+  memset (p, 0, 5);\n+  sink (p);\n+  memset (p, 0, 6);\n+  sink (p);\n+  memset (p, 0, UINT16_MAX - 1);\n+  sink (p);\n+  memset (p, 0, UINT16_MAX);\n+  sink (p);\n+}\n+\n+void malloc_int_strcpy (int n)\n+{\n+  void *p = malloc (7 < n ? 7 : n);\n+\n+  strcpy (p, \"0123456\");            // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (p);\n+\n+  strcpy (p, \"012345\");\n+  sink (p);\n+}\n+\n+void vla_int_strcpy (int n)\n+{\n+  char a[9 < n ? 9 : n];\n+\n+  strcpy (a, \"012345678\");          // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (a);\n+\n+  strcpy (a, \"01234567\");\n+  sink (a);\n+}\n+\n+void usr_alloc1_int_strcpy (int n)\n+{\n+  void *p = usr_alloc1 (7 < n ? 7 : n);\n+\n+  strcpy (p, \"0123456\");            // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (p);\n+\n+  strcpy (p, \"012345\");\n+  sink (p);\n+}\n+\n+void usr_alloc2_cst_ir_strcpy (int n)\n+{\n+  void *p = usr_alloc2 (1, 5 < n ? 5 : n);\n+\n+  strcpy (p, \"01234\");              // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (p);\n+\n+  strcpy (p, \"0123\");\n+  sink (p);\n+}\n+\n+void usr_alloc2_ir_ir_strcpy (int m, int n)\n+{\n+  void *p = usr_alloc2 (3 < n ? 3 : n, 5 < n ? 5 : n);\n+\n+  strcpy (p, \"0123456789abcde\");    // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (p);\n+\n+  strcpy (p, \"0123456789abcd\");\n+  sink (p);\n+}\n+\n+void usr_alloc2_uint8_memset (uint8_t m, uint8_t n)\n+{\n+  if (3 <= m && m <= 7) return;\n+  if (5 <= n && n <= 9) return;\n+  void *p = usr_alloc2 (m, n);\n+\n+  size_t sz = UINT8_MAX * UINT8_MAX + 1;\n+  memset (p, 0, sz);               // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"\" { xfail *-*-* } }\n+                                   // { dg-warning \"\\\\\\[-Warray-bounds\" \"pr?????\" { target *-*-* } .-1 }\n+  sink (p);\n+\n+  memset (p, 0, sz - 1);\n+  sink (p);\n+  memset (p, 0, 64);\n+  sink (p);\n+  memset (p, 0, 63);\n+  sink (p);\n+  memset (p, 0, 16);\n+  sink (p);\n+  memset (p, 0, 15);\n+  sink (p);\n+  memset (p, 0, 14);\n+  sink (p);\n+  memset (p, 0, 3);\n+  sink (p);\n+}\n+\n+\n+\n+void malloc_int_memset (int n)\n+{\n+  void *p = malloc (11 < n ? 11 : n);\n+\n+  memset (p, 0, 12);                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (p);\n+\n+  memset (p, 0, 11);\n+  sink (p);\n+}\n+\n+void vla_int_memset (int n)\n+{\n+  char a[13 < n ? 13 : n];\n+\n+  memset (a, 0, 14);                // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  sink (a);\n+\n+  memset (a, 0, 13);\n+  sink (a);\n+}"}, {"sha": "173aa164646042158f5b7247135c5e5ed946bef3", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-57.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b09c1296d5334d1d264ba4d39ca932f9572330/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b09c1296d5334d1d264ba4d39ca932f9572330/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-57.c?ref=c0b09c1296d5334d1d264ba4d39ca932f9572330", "patch": "@@ -0,0 +1,91 @@\n+/* Verify that an anti-range ~[A, B] with small positive A and B\n+   is handled correctly and doesn't trigger warnings.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+typedef __typeof__ (sizeof 0) size_t;\n+\n+int f (void*, size_t);\n+int g (void*);\n+\n+// Test case distilled from gcc/cp/semantics.c\n+\n+int omp_reduction_id (int i, int j, const char *mm)\n+{\n+  const char *p = 0;\n+  const char *m = 0;\n+\n+  switch (i)\n+    {\n+    case 1:\n+      p = \"min\";\n+      break;\n+    case 2:\n+      p = \"max\";\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  if (j)\n+    m = mm;\n+\n+  const char prefix[] = \"omp declare reduction \";\n+  size_t lenp = sizeof (prefix);\n+\n+  if (__builtin_strncmp (p, prefix, lenp - 1) == 0)\n+    lenp = 1;\n+\n+  size_t len = __builtin_strlen (p);\n+  size_t lenm = m ? __builtin_strlen (m) + 1 : 0;\n+  char *name = ((char *) __builtin_alloca(lenp + len + lenm));\n+\n+  if (lenp > 1)\n+    __builtin_memcpy (name, prefix, lenp - 1);\n+\n+  __builtin_memcpy (name + lenp - 1, p, len + 1);\n+  if (m)\n+    {\n+      name[lenp + len - 1] = '~';\n+      __builtin_memcpy (name + lenp + len, m, lenm);\n+    }\n+  return (__builtin_constant_p (name)\n+\t  ? f (name, __builtin_strlen (name)) : g (name));\n+}\n+\n+// Test case derived from gcc/d/dmd/root/filename.c.\n+\n+const char *ext (const char *str)\n+{\n+  size_t len = __builtin_strlen(str);\n+\n+  const char *e = str + len;\n+  for (;;)\n+    {\n+      switch (*e)\n+        {\n+\tcase '.': return e + 1;\n+\tcase '/': break;\n+\tdefault:\n+\t  if (e == str)\n+\t    break;\n+\t  e--;\n+\t  continue;\n+        }\n+      return 0;\n+    }\n+}\n+\n+const char *removeExt (const char *str)\n+{\n+  const char *e = ext (str);\n+  if (e)\n+    {\n+      size_t len = (e - str) - 1;\n+      char *n = (char *)__builtin_malloc (len + 1);\n+      __builtin_memcpy(n, str, len);\n+      n[len] = 0;\n+      return n;\n+    }\n+  return 0;\n+}"}]}