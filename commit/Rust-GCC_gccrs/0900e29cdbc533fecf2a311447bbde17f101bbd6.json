{"sha": "0900e29cdbc533fecf2a311447bbde17f101bbd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwMGUyOWNkYmM1MzNmZWNmMmEzMTE0NDdiYmRlMTdmMTAxYmJkNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-26T21:43:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-26T21:43:51Z"}, "message": "charset.c (UCS_LIMIT): New macro.\n\n\t* charset.c (UCS_LIMIT): New macro.\n\t(ucn_valid_in_identifier): Use it instead of a hardcoded constant.\n\t(_cpp_valid_ucn): Issue a pedantic warning for UCNs larger than\n\tUCS_LIMIT outside of identifiers in C and in C++2a or later.\n\nFrom-SVN: r276167", "tree": {"sha": "99d96116ec1656e4b86de00444ee3569f3d46ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99d96116ec1656e4b86de00444ee3569f3d46ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0900e29cdbc533fecf2a311447bbde17f101bbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0900e29cdbc533fecf2a311447bbde17f101bbd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0900e29cdbc533fecf2a311447bbde17f101bbd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0900e29cdbc533fecf2a311447bbde17f101bbd6/comments", "author": null, "committer": null, "parents": [{"sha": "d7326aaf20871a81feb39673d78922c1bc83efec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7326aaf20871a81feb39673d78922c1bc83efec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7326aaf20871a81feb39673d78922c1bc83efec"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "82607de67febae79fbfbec923d864d4b92aa3b08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -1,3 +1,11 @@\n+2019-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/cpp/ucs.c: Add test for new warning and adjust.\n+\t* gcc.dg/cpp/utf8-5byte-1.c: Add -w to the options.\n+\t* gcc.dg/attr-alias-5.c: Likewise.\n+\t* g++.dg/cpp/ucn-1.C: Add test for new warning.\n+\t* g++.dg/cpp2a/ucn1.C: New test.\n+\n 2019-09-26  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* gcc.target/xtensa/pr91880.c: New test case."}, {"sha": "9596a429650577d1e4e1c1af72f42353a0fdcea9", "filename": "gcc/testsuite/g++.dg/cpp/ucn-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucn-1.C?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -12,4 +12,6 @@ int main()\n   int c\\u0024c;\t// { dg-error \"not valid in an identifier\" \"\" { target { powerpc-ibm-aix* } } }\n \n   U\"\\uD800\";\t\t  // { dg-error \"not a valid universal character\" }\n+\n+  U'\\U00110000'; // { dg-warning \"outside\" \"110000 outside UCS\" { target c++2a } }\n }"}, {"sha": "e73c77db12e34a6ea1e5a3344beac1092d43566b", "filename": "gcc/testsuite/g++.dg/cpp2a/ucn1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fucn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fucn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fucn1.C?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+int main()\n+{\n+  U'\\U00110000'; // { dg-warning \"outside\" \"110000 outside UCS\" }\n+}"}, {"sha": "a65fe0b9cda85a4885f280400bc97df13018403e", "filename": "gcc/testsuite/gcc.dg/attr-alias-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-5.c?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -1,7 +1,7 @@\n /* Verify diagnostics for aliases to strings containing extended\n    identifiers or bad characters.  */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99 -w\" } */\n /* { dg-require-alias \"\" } */\n /* { dg-require-ascii-locale \"\" } */\n /* { dg-skip-if \"\" { powerpc*-*-aix* } } */"}, {"sha": "cac83f3cf1492a82af44cf7f83e9f5881bfabe89", "filename": "gcc/testsuite/gcc.dg/cpp/ucs.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucs.c?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -39,7 +39,7 @@\n #endif\n \n #if WCHAR_MAX >= 0x7ffffff\n-# if L'\\U1234abcd' != 0x1234abcd\n+# if L'\\U1234abcd' != 0x1234abcd /* { dg-warning \"outside\" \"\" } */\n #  error bad long ucs\t/* { dg-bogus \"bad\" \"bad U1234abcd evaluation\" } */\n # endif\n #endif\n@@ -49,7 +49,7 @@ void foo ()\n   int c;\n \n   c = L'\\ubad';\t\t/* { dg-error \"incomplete\" \"incomplete UCN 1\" } */\n-  c = L\"\\U1234\"[0];\t/* { dg-error \"incomplete\" \"incompete UCN 2\" } */\n+  c = L\"\\U1234\"[0];\t/* { dg-error \"incomplete\" \"incomplete UCN 2\" } */\n \n   c = L'\\u000x';\t/* { dg-error \"incomplete\" \"non-hex digit in UCN\" } */\n   /* If sizeof(HOST_WIDE_INT) > sizeof(wchar_t), we can get a multi-character\n@@ -64,4 +64,6 @@ void foo ()\n   c = '\\u0025';\t\t/* { dg-error \"not a valid\" \"0025 invalid UCN\" } */\n   c = L\"\\uD800\"[0];\t/* { dg-error \"not a valid\" \"D800 invalid UCN\" } */\n   c = L'\\U0000DFFF';\t/* { dg-error \"not a valid\" \"DFFF invalid UCN\" } */\n+\n+  c = L'\\U00110000';\t/* { dg-warning \"outside\" \"110000 outside UCS\" } */\n }"}, {"sha": "50e6c05575c7a3f79161aca95a9177f8b02a32f7", "filename": "gcc/testsuite/gcc.dg/cpp/utf8-5byte-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Futf8-5byte-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Futf8-5byte-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Futf8-5byte-1.c?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -1,7 +1,7 @@\n /* Test for bug in conversions from 5-byte UTF-8 sequences in\n    cpplib.  */\n /* { dg-do run { target { 4byte_wchar_t } } } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99 -w\" } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "1ca622df6fda1a7f30a3ef7b41f125651d740f1f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -1,3 +1,10 @@\n+2019-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* charset.c (UCS_LIMIT): New macro.\n+\t(ucn_valid_in_identifier): Use it instead of a hardcoded constant.\n+\t(_cpp_valid_ucn): Issue a pedantic warning for UCNs larger than\n+\tUCS_LIMIT outside of identifiers in C and in C++2a or later.\n+\n 2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR c/67224"}, {"sha": "39af77a554a96c2cf28493787c6cbe285c9f4159", "filename": "libcpp/charset.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0900e29cdbc533fecf2a311447bbde17f101bbd6/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0900e29cdbc533fecf2a311447bbde17f101bbd6/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=0900e29cdbc533fecf2a311447bbde17f101bbd6", "patch": "@@ -901,6 +901,9 @@ struct ucnrange {\n };\n #include \"ucnid.h\"\n \n+/* ISO 10646 defines the UCS codespace as the range 0-0x10FFFF inclusive.  */\n+#define UCS_LIMIT 0x10FFFF\n+\n /* Returns 1 if C is valid in an identifier, 2 if C is valid except at\n    the start of an identifier, and 0 if C is not valid in an\n    identifier.  We assume C has already gone through the checks of\n@@ -915,7 +918,7 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n   int mn, mx, md;\n   unsigned short valid_flags, invalid_start_flags;\n \n-  if (c > 0x10FFFF)\n+  if (c > UCS_LIMIT)\n     return 0;\n \n   mn = 0;\n@@ -1016,6 +1019,10 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n    whose short identifier is less than 00A0 other than 0024 ($), 0040 (@),\n    or 0060 (`), nor one in the range D800 through DFFF inclusive.\n \n+   If the hexadecimal value is larger than the upper bound of the UCS\n+   codespace specified in ISO/IEC 10646, a pedantic warning is issued\n+   in all versions of C and in the C++2a or later versions of C++.\n+\n    *PSTR must be preceded by \"\\u\" or \"\\U\"; it is assumed that the\n    buffer end is delimited by a non-hex digit.  Returns false if the\n    UCN has not been consumed, true otherwise.\n@@ -1135,6 +1142,12 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n    \"universal character %.*s is not valid at the start of an identifier\",\n \t\t   (int) (str - base), base);\n     }\n+  else if (result > UCS_LIMIT\n+\t   && (!CPP_OPTION (pfile, cplusplus)\n+\t       || CPP_OPTION (pfile, lang) > CLK_CXX17))\n+    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t       \"%.*s is outside the UCS codespace\",\n+\t       (int) (str - base), base);\n \n   *cp = result;\n   return true;"}]}