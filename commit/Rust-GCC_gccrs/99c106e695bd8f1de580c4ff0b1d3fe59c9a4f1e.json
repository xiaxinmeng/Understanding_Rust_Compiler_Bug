{"sha": "99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e", "node_id": "C_kwDOANBUbNoAKDk5YzEwNmU2OTViZDhmMWRlNTgwYzRmZjBiMWQzZmU1OWM5YTRmMWU", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-09-14T18:41:18Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-09-28T12:10:13Z"}, "message": "reassoc: Do not bias loop-carried PHIs early\n\nBiasing loop-carried PHIs during the 1st reassociation pass interferes\nwith reduction chains and does not bring measurable benefits, so do it\nonly during the 2nd reassociation pass.\n\ngcc/ChangeLog:\n\n\t* passes.def (pass_reassoc): Rename parameter to early_p.\n\t* tree-ssa-reassoc.c (reassoc_bias_loop_carried_phi_ranks_p):\n\tNew variable.\n\t(phi_rank): Don't bias loop-carried phi ranks\n\tbefore vectorization pass.\n\t(execute_reassoc): Add bias_loop_carried_phi_ranks_p parameter.\n\t(pass_reassoc::pass_reassoc): Add bias_loop_carried_phi_ranks_p\n\tinitializer.\n\t(pass_reassoc::set_param): Set bias_loop_carried_phi_ranks_p\n\tvalue.\n\t(pass_reassoc::execute): Pass bias_loop_carried_phi_ranks_p to\n\texecute_reassoc.\n\t(pass_reassoc::bias_loop_carried_phi_ranks_p): New member.", "tree": {"sha": "0d23c96694feb753a909aed32fea3edacc559766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d23c96694feb753a909aed32fea3edacc559766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7041e8345c2f1030e58620f28e22d64b2c196b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7041e8345c2f1030e58620f28e22d64b2c196b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7041e8345c2f1030e58620f28e22d64b2c196b"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "c11c237f6d2046e6fde56d2ae517c2a93253a54d", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e", "patch": "@@ -243,7 +243,7 @@ along with GCC; see the file COPYING3.  If not see\n       /* Identify paths that should never be executed in a conforming\n \t program and isolate those paths.  */\n       NEXT_PASS (pass_isolate_erroneous_paths);\n-      NEXT_PASS (pass_reassoc, true /* insert_powi_p */);\n+      NEXT_PASS (pass_reassoc, true /* early_p */);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt, false /* early_p */);\n@@ -326,7 +326,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_lower_vector_ssa);\n       NEXT_PASS (pass_lower_switch);\n       NEXT_PASS (pass_cse_reciprocals);\n-      NEXT_PASS (pass_reassoc, false /* insert_powi_p */);\n+      NEXT_PASS (pass_reassoc, false /* early_p */);\n       NEXT_PASS (pass_strength_reduction);\n       NEXT_PASS (pass_split_paths);\n       NEXT_PASS (pass_tracer);"}, {"sha": "420c14e8cf59891bfba9fbf16961f97ad4afcac3", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e", "patch": "@@ -180,6 +180,10 @@ along with GCC; see the file COPYING3.  If not see\n    point 3a in the pass header comment.  */\n static bool reassoc_insert_powi_p;\n \n+/* Enable biasing ranks of loop accumulators.  We don't want this before\n+   vectorization, since it interferes with reduction chains.  */\n+static bool reassoc_bias_loop_carried_phi_ranks_p;\n+\n /* Statistics */\n static struct\n {\n@@ -269,6 +273,9 @@ phi_rank (gimple *stmt)\n   use_operand_p use;\n   gimple *use_stmt;\n \n+  if (!reassoc_bias_loop_carried_phi_ranks_p)\n+    return bb_rank[bb->index];\n+\n   /* We only care about real loops (those with a latch).  */\n   if (!father->latch)\n     return bb_rank[bb->index];\n@@ -6940,9 +6947,10 @@ fini_reassoc (void)\n    optimization of a gimple conditional.  Otherwise returns zero.  */\n \n static unsigned int\n-execute_reassoc (bool insert_powi_p)\n+execute_reassoc (bool insert_powi_p, bool bias_loop_carried_phi_ranks_p)\n {\n   reassoc_insert_powi_p = insert_powi_p;\n+  reassoc_bias_loop_carried_phi_ranks_p = bias_loop_carried_phi_ranks_p;\n \n   init_reassoc ();\n \n@@ -6983,15 +6991,19 @@ class pass_reassoc : public gimple_opt_pass\n     {\n       gcc_assert (n == 0);\n       insert_powi_p = param;\n+      bias_loop_carried_phi_ranks_p = !param;\n     }\n   virtual bool gate (function *) { return flag_tree_reassoc != 0; }\n   virtual unsigned int execute (function *)\n-    { return execute_reassoc (insert_powi_p); }\n+  {\n+    return execute_reassoc (insert_powi_p, bias_loop_carried_phi_ranks_p);\n+  }\n \n  private:\n   /* Enable insertion of __builtin_powi calls during execute_reassoc.  See\n      point 3a in the pass header comment.  */\n   bool insert_powi_p;\n+  bool bias_loop_carried_phi_ranks_p;\n }; // class pass_reassoc\n \n } // anon namespace"}]}