{"sha": "785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1Yjg4N2VlOGVmNWM0OGZmZTk5ZjJhOWM1YmI5NjEyZjk4NDIzZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-09T03:58:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-09T03:58:07Z"}, "message": "except.c (is_admissible_throw_operand_or_catch_parameter): Check variably_modified_type_p.\n\n\t* except.c (is_admissible_throw_operand_or_catch_parameter): Check\n\tvariably_modified_type_p.\n\t(expand_start_catch_block): Mark the typeinfo used here.\n\t* semantics.c (finish_handler_parms): Not here.\n\n\t* error.c (dump_type_suffix): Try harder on VLA length.\n\nFrom-SVN: r198732", "tree": {"sha": "06c055f14e319afdc2ae32be2e5769e4ba286913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06c055f14e319afdc2ae32be2e5769e4ba286913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "7a1484fa43f253b04ae507de1b67d7c64c3944fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "patch": "@@ -1,5 +1,12 @@\n 2013-05-08  Jason Merrill  <jason@redhat.com>\n \n+\t* except.c (is_admissible_throw_operand_or_catch_parameter): Check\n+\tvariably_modified_type_p.\n+\t(expand_start_catch_block): Mark the typeinfo used here.\n+\t* semantics.c (finish_handler_parms): Not here.\n+\n+\t* error.c (dump_type_suffix): Try harder on VLA length.\n+\n \tCore 624/N2932\n \t* init.c (throw_bad_array_new_length): New.\n \t(build_new_1): Use it.  Don't warn about braced-init-list."}, {"sha": "a75fc4e7b33b9dd20aa6e0ab97f2e188235e94c0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "patch": "@@ -848,14 +848,24 @@ dump_type_suffix (tree t, int flags)\n \t    pp_character (cxx_pp, '0');\n \t  else if (host_integerp (max, 0))\n \t    pp_wide_integer (cxx_pp, tree_low_cst (max, 0) + 1);\n-\t  else if (TREE_CODE (max) == MINUS_EXPR)\n-\t    dump_expr (TREE_OPERAND (max, 0),\n-\t\t       flags & ~TFF_EXPR_IN_PARENS);\n \t  else\n-\t    dump_expr (fold_build2_loc (input_location,\n-\t\t\t\t    PLUS_EXPR, dtype, max,\n-\t\t\t\t    build_int_cst (dtype, 1)),\n-\t\t       flags & ~TFF_EXPR_IN_PARENS);\n+\t    {\n+\t      STRIP_NOPS (max);\n+\t      if (TREE_CODE (max) == SAVE_EXPR)\n+\t\tmax = TREE_OPERAND (max, 0);\n+\t      if (TREE_CODE (max) == MINUS_EXPR\n+\t\t  || TREE_CODE (max) == PLUS_EXPR)\n+\t\t{\n+\t\t  max = TREE_OPERAND (max, 0);\n+\t\t  while (CONVERT_EXPR_P (max))\n+\t\t    max = TREE_OPERAND (max, 0);\n+\t\t}\n+\t      else\n+\t\tmax = fold_build2_loc (input_location,\n+\t\t\t\t       PLUS_EXPR, dtype, max,\n+\t\t\t\t       build_int_cst (dtype, 1));\n+\t      dump_expr (max, flags & ~TFF_EXPR_IN_PARENS);\n+\t    }\n \t}\n       pp_cxx_right_bracket (cxx_pp);\n       dump_type_suffix (TREE_TYPE (t), flags);"}, {"sha": "be003d2994bf0af23c14ef0104dc48be558a23ba", "filename": "gcc/cp/except.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "patch": "@@ -490,6 +490,7 @@ expand_start_catch_block (tree decl)\n \tdecl = error_mark_node;\n \n       type = prepare_eh_type (TREE_TYPE (decl));\n+      mark_used (eh_type_info (type));\n     }\n   else\n     type = NULL_TREE;\n@@ -982,6 +983,16 @@ is_admissible_throw_operand_or_catch_parameter (tree t, bool is_throw)\n \t     \"reference type %qT\", type);\n       return false;\n     }\n+  else if (variably_modified_type_p (type, NULL_TREE))\n+    {\n+      if (is_throw)\n+\terror (\"cannot throw expression of type %qT because it involves \"\n+\t       \"types of variable size\", type);\n+      else\n+\terror (\"cannot catch type %qT because it involves types of \"\n+\t       \"variable size\", type);\n+      return false;\n+    }\n \n   return true;\n }"}, {"sha": "2165649313d4f6c143a8e390a7dbf3790f2dee5a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "patch": "@@ -1199,8 +1199,6 @@ finish_handler_parms (tree decl, tree handler)\n   else\n     type = expand_start_catch_block (decl);\n   HANDLER_TYPE (handler) = type;\n-  if (!processing_template_decl && type)\n-    mark_used (eh_type_info (type));\n }\n \n /* Finish a handler, which may be given by HANDLER.  The BLOCKs are"}, {"sha": "90e4160679a9cd102efe27aaa567bec9a92952fb", "filename": "gcc/testsuite/g++.dg/ext/vla4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b887ee8ef5c48ffe99f2a9c5bb9612f98423f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla4.C?ref=785b887ee8ef5c48ffe99f2a9c5bb9612f98423f", "patch": "@@ -6,7 +6,7 @@\n void f(int i) {\n   try {\n     int a[i];\n-    throw &a; // { dg-error \"variable size\" }\n+    throw &a; // { dg-error \"int \\\\(\\\\*\\\\)\\\\\\[i\\\\\\]\" }\n   } catch (int (*)[i]) { // { dg-error \"variable size\" }\n   }\n }"}]}