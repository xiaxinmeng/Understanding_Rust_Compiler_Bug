{"sha": "4409de247c778276c0445f3d9f8817562f152b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwOWRlMjQ3Yzc3ODI3NmMwNDQ1ZjNkOWY4ODE3NTYyZjE1MmI3OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-19T20:53:33Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-19T20:53:33Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-06-19  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * trans-types.c (gfc_get_element_type): Handle scalar coarrays.\n        (gfc_get_nodesc_array_type): Make a variant-type copy for scalar\n        coarrays.\n        * trans.c (gfc_build_array_ref): Return original type not\n        * variant\n        copy for scalar coarrays.\n        * trans-array.c (gfc_conv_array_ref): Ditto.\n\n2011-06-19  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray_21.f90: New.\n\nFrom-SVN: r173920", "tree": {"sha": "ca76ae70170c060df3f7975deb2b3d441d0d1798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca76ae70170c060df3f7975deb2b3d441d0d1798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4409de247c778276c0445f3d9f8817562f152b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4409de247c778276c0445f3d9f8817562f152b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4409de247c778276c0445f3d9f8817562f152b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4409de247c778276c0445f3d9f8817562f152b78/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "664e12c1265280786f83d8fd1ec1ebbf50c153c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e12c1265280786f83d8fd1ec1ebbf50c153c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664e12c1265280786f83d8fd1ec1ebbf50c153c0"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "a6fffdfd4d0a0655ac1ec190d00fd8731d514a09", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4409de247c778276c0445f3d9f8817562f152b78", "patch": "@@ -1,3 +1,13 @@\n+2011-06-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* trans-types.c (gfc_get_element_type): Handle scalar coarrays.\n+\t(gfc_get_nodesc_array_type): Make a variant-type copy for scalar\n+\tcoarrays.\n+\t* trans.c (gfc_build_array_ref): Return original type not variant\n+\tcopy for scalar coarrays.\n+\t* trans-array.c (gfc_conv_array_ref): Ditto.\n+\n 2011-05-16  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.texi (_gfortran_set_options): Add GFC_STD_F2008_TR."}, {"sha": "78d65a65aa1dc6e2e9d48c8c8b3d849e6f72253f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4409de247c778276c0445f3d9f8817562f152b78", "patch": "@@ -2621,7 +2621,12 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n   gfc_se tmpse;\n \n   if (ar->dimen == 0)\n-    return;\n+    {\n+      gcc_assert (ar->codimen);\n+      /* Use the actual tree type and not the wrapped coarray. */\n+      se->expr = fold_convert (TREE_TYPE (TREE_TYPE (se->expr)), se->expr);\n+      return;\n+    }\n \n   /* Handle scalarized references separately.  */\n   if (ar->type != AR_ELEMENT)"}, {"sha": "11659266a37495625828fcb769325efd89d39c53", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=4409de247c778276c0445f3d9f8817562f152b78", "patch": "@@ -1100,8 +1100,16 @@ gfc_get_element_type (tree type)\n     {\n       if (TREE_CODE (type) == POINTER_TYPE)\n         type = TREE_TYPE (type);\n-      gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n-      element = TREE_TYPE (type);\n+      if (GFC_TYPE_ARRAY_RANK (type) == 0)\n+\t{\n+\t  gcc_assert (GFC_TYPE_ARRAY_CORANK (type) > 0);\n+\t  element = type;\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n+\t  element = TREE_TYPE (type);\n+\t}\n     }\n   else\n     {\n@@ -1412,7 +1420,13 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, gfc_packed packed,\n   /* We don't use build_array_type because this does not include include\n      lang-specific information (i.e. the bounds of the array) when checking\n      for duplicates.  */\n-  type = make_node (ARRAY_TYPE);\n+  if (as->rank)\n+    type = make_node (ARRAY_TYPE);\n+  else\n+    {\n+      type = build_variant_type_copy (etype);\n+      TREE_TYPE (type) = etype;\n+    }\n \n   GFC_ARRAY_TYPE_P (type) = 1;\n   TYPE_LANG_SPECIFIC (type)\n@@ -1526,6 +1540,23 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, gfc_packed packed,\n       build_qualified_type (GFC_TYPE_ARRAY_DATAPTR_TYPE (type),\n \t\t\t    TYPE_QUAL_RESTRICT);\n \n+  if (as->rank == 0)\n+    {\n+      if (packed != PACKED_STATIC)\n+\ttype = build_pointer_type (type);\n+\n+      if (restricted)\n+        type = build_qualified_type (type, TYPE_QUAL_RESTRICT);\t\n+\n+      if (packed != PACKED_STATIC)\n+\t{\n+\t  GFC_ARRAY_TYPE_P (type) = 1;\n+\t  TYPE_LANG_SPECIFIC (type) = TYPE_LANG_SPECIFIC (TREE_TYPE (type)); \n+\t}\n+\n+      return type;\n+    }\n+\n   if (known_stride)\n     {\n       mpz_sub_ui (stride, stride, 1);"}, {"sha": "fcbb8505fd0b47d46dc63796386745cac5b6926d", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=4409de247c778276c0445f3d9f8817562f152b78", "patch": "@@ -316,6 +316,13 @@ gfc_build_array_ref (tree base, tree offset, tree decl)\n   tree type = TREE_TYPE (base);\n   tree tmp;\n \n+  if (GFC_ARRAY_TYPE_P (type) && GFC_TYPE_ARRAY_RANK (type) == 0)\n+    {\n+      gcc_assert (GFC_TYPE_ARRAY_CORANK (type) > 0);\n+\n+      return fold_convert (TREE_TYPE (type), base);\n+    }\n+\n   gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n   type = TREE_TYPE (type);\n "}, {"sha": "c3a1f83e2ae7fa51fc1c290174da8d3bfe818bff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4409de247c778276c0445f3d9f8817562f152b78", "patch": "@@ -1,3 +1,8 @@\n+2011-06-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray_21.f90: New.\n+\n 2011-05-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lib/prune.exe (prune_gcc_output): Expect \"error:\" in collect2"}, {"sha": "8aa0aa6c5a664185b46ba1bc46328fd9c9678821", "filename": "gcc/testsuite/gfortran.dg/coarray_21.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4409de247c778276c0445f3d9f8817562f152b78/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_21.f90?ref=4409de247c778276c0445f3d9f8817562f152b78", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/18918\n+!\n+! Before scalar coarrays weren't regarded as scalar in the ME.\n+!\n+module mod_reduction\n+  real :: g[*]\n+contains\n+  subroutine caf_reduce(x)\n+    real, intent(in) :: x\n+       g = x  ! << used to ICE\n+  end\n+end module\n+\n+program test\n+  integer, parameter :: size = 4000\n+  type :: pct\n+    integer, allocatable :: data(:,:)\n+  end type\n+  type(pct) :: picture[*]\n+     allocate(picture%data(size, size))\n+end program test\n+\n+\n+! { dg-final { cleanup-modules \"mod_reduction\" } }"}]}