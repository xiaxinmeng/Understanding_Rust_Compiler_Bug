{"sha": "3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmYTM1MDAwNjFhZWRlMDFmMmQxYmNmN2RiMGM4YWU3NTMxMDg3YQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-11-02T14:17:39Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-11-02T14:17:39Z"}, "message": "re PR c++/9810 (Using-declaration for template functions does not work)\n\n\tPR c++/9810\n\t* call.c (build_over_call): Check access using primary template\n\tif FN is a member function template.\n\n\t* g++.dg/template/using8.C: New test.\n\t* g++.old-deja/g++.other/access11.C: Adjust expected error location.\n\nFrom-SVN: r73201", "tree": {"sha": "74134e65eeb6ce504beaddbdbc3450fdd44b8071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74134e65eeb6ce504beaddbdbc3450fdd44b8071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/comments", "author": null, "committer": null, "parents": [{"sha": "31f0f571e61d1d7f8ff67a4f6a741173dfc4161c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f0f571e61d1d7f8ff67a4f6a741173dfc4161c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f0f571e61d1d7f8ff67a4f6a741173dfc4161c"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "677deca72446ae4f134e7fcd886c8569ec0c4096", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "patch": "@@ -1,3 +1,9 @@\n+2003-11-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/9810\n+\t* call.c (build_over_call): Check access using primary template\n+\tif FN is a member function template.\n+\n 2003-11-01  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/12796"}, {"sha": "07622ab37cd7f350c967c75281ed133c3514f502", "filename": "gcc/cp/call.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "patch": "@@ -4387,7 +4387,39 @@ build_over_call (struct z_candidate *cand, int flags)\n       joust (cand, WRAPPER_ZC (TREE_VALUE (val)), 1);\n \n   if (DECL_FUNCTION_MEMBER_P (fn))\n-    perform_or_defer_access_check (cand->access_path, fn);\n+    {\n+      /* If FN is a template function, two cases must be considered.\n+\t For example:\n+\n+\t   struct A {\n+\t     protected:\n+\t       template <class T> void f();\n+\t   };\n+\t   template <class T> struct B {\n+\t     protected:\n+\t       void g();\n+\t   };\n+\t   struct C : A, B<int> {\n+\t     using A::f;\t// #1\n+\t     using B<int>::g;\t// #2\n+\t   };\n+\n+\t In case #1 where `A::f' is a member template, DECL_ACCESS is\n+\t recorded in the primary template but not in its specialization.\n+\t We check access of FN using its primary template.\n+\n+\t In case #2, where `B<int>::g' has a DECL_TEMPLATE_INFO simply\n+\t because it is a member of class template B, DECL_ACCESS is\n+\t recorded in the specialization `B<int>::g'.  We cannot use its\n+\t primary template because `B<T>::g' and `B<int>::g' may have\n+\t different access.  */\n+      if (DECL_TEMPLATE_INFO (fn)\n+\t  && is_member_template (DECL_TI_TEMPLATE (fn)))\n+\tperform_or_defer_access_check (cand->access_path,\n+\t\t\t\t       DECL_TI_TEMPLATE (fn));\n+      else\n+\tperform_or_defer_access_check (cand->access_path, fn);\n+    }\n \n   if (args && TREE_CODE (args) != TREE_LIST)\n     args = build_tree_list (NULL_TREE, args);"}, {"sha": "4c138151f52e618289665743ac4e3ca6d40c32fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "patch": "@@ -1,3 +1,9 @@\n+2003-11-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/9810\n+\t* g++.dg/template/using8.C: New test.\n+\t* g++.old-deja/g++.other/access11.C: Adjust expected error location.\n+\n 2003-11-02  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/10817"}, {"sha": "a79158710f52c3aa75b712e58a7f0780ff060932", "filename": "gcc/testsuite/g++.dg/template/using8.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing8.C?ref=3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Origin: Sergey Shandar <comer@pisem.net>\n+\n+// PR c++/9810: Access checking for member function template\n+// appeared in using declaration.\n+\n+struct A\n+{\n+  template<class R> void F(R) {}\n+};\n+\n+struct B: private A\n+{\n+  using A::F;\n+};\n+\n+int main()\n+{\n+  B b;\n+  b.F(3);\n+}"}, {"sha": "fb9782405bc6d7fda7a45dbededf5bd55882ed62", "filename": "gcc/testsuite/g++.old-deja/g++.other/access11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa3500061aede01f2d1bcf7db0c8ae7531087a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess11.C?ref=3dfa3500061aede01f2d1bcf7db0c8ae7531087a", "patch": "@@ -5,12 +5,12 @@\n class A\n {\n private:\n-  template <class T> void g(T t)  {}\n+  template <class T> void g(T t)  {} // { dg-error \"\" } private\n   int i;\n };\n \n template <>\n-void A::g<int>(int t) { i = 1; } // { dg-error \"\" } private\n+void A::g<int>(int t) { i = 1; }\n \n int main()\n {"}]}