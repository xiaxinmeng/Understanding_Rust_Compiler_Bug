{"sha": "2aaf816dad783f6cfccae11e356a5213a2455adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhZjgxNmRhZDc4M2Y2Y2ZjY2FlMTFlMzU2YTUyMTNhMjQ1NWFkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-08-19T21:19:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-19T21:19:37Z"}, "message": "cp-tree.h: Declare flag_use_repository.\n\n\t* cp-tree.h: Declare flag_use_repository.\n\t* pt.c (do_decl_instantiation): Don't complain about duplicate\n\tinstantiation with -frepo.\n\t(do_type_instantiation): Likewise.\n\n\t* pt.c (push_template_decl_real): Complain about everything\n\tthat isn't a valid template.\n\n\t* decl2.c (import_export_decl): If -fnew-abi, class linkage doesn't\n\taffect inlines.\n\nFrom-SVN: r28767", "tree": {"sha": "d3d47f38708d7d504af6d6c23db5457fef169134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3d47f38708d7d504af6d6c23db5457fef169134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aaf816dad783f6cfccae11e356a5213a2455adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aaf816dad783f6cfccae11e356a5213a2455adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aaf816dad783f6cfccae11e356a5213a2455adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aaf816dad783f6cfccae11e356a5213a2455adf/comments", "author": null, "committer": null, "parents": [{"sha": "607eef6e92d2fcd08870fc7e6cc8addcef967841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607eef6e92d2fcd08870fc7e6cc8addcef967841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607eef6e92d2fcd08870fc7e6cc8addcef967841"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "f595a7c0c3a51e3a3356bc29b518ff39b0a478cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2aaf816dad783f6cfccae11e356a5213a2455adf", "patch": "@@ -1,3 +1,16 @@\n+1999-08-19  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.h: Declare flag_use_repository.\n+\t* pt.c (do_decl_instantiation): Don't complain about duplicate\n+\tinstantiation with -frepo.\n+\t(do_type_instantiation): Likewise.\n+\n+\t* pt.c (push_template_decl_real): Complain about everything\n+\tthat isn't a valid template.\n+\n+\t* decl2.c (import_export_decl): If -fnew-abi, class linkage doesn't\n+\taffect inlines.\n+\n 1999-08-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.def (PSEUDO_DTOR_EXPR): New tree code."}, {"sha": "8242639799e004d4559a6917e85dd5a571e0fd04", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2aaf816dad783f6cfccae11e356a5213a2455adf", "patch": "@@ -594,6 +594,10 @@ extern int flag_guiding_decls;\n    and class qualifiers.       */\n extern int flag_do_squangling;\n \n+/* Nonzero means generate separate instantiation control files and juggle\n+   them at link time.  */\n+extern int flag_use_repository;\n+\n /* Nonzero if we want to issue diagnostics that the standard says are not\n    required.  */\n extern int flag_optional_diags;"}, {"sha": "ea4dd36bfee071df83d8953bf452fc2a48225674", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2aaf816dad783f6cfccae11e356a5213a2455adf", "patch": "@@ -232,7 +232,8 @@ int warn_ctor_dtor_privacy = 1;\n #endif\n int flag_vtable_thunks = DEFAULT_VTABLE_THUNKS;\n \n-/* True if we want to deal with repository information.  */\n+/* Nonzero means generate separate instantiation control files and juggle\n+   them at link time.  */\n \n int flag_use_repository;\n \n@@ -2722,7 +2723,9 @@ import_export_decl (decl)\n       tree ctype = DECL_CLASS_CONTEXT (decl);\n       import_export_class (ctype);\n       if (CLASSTYPE_INTERFACE_KNOWN (ctype)\n-\t  && (! DECL_ARTIFICIAL (decl) || DECL_VINDEX (decl)))\n+\t  && (flag_new_abi\n+\t      ? (! DECL_THIS_INLINE (decl))\n+\t      : (! DECL_ARTIFICIAL (decl) || DECL_VINDEX (decl))))\n \t{\n \t  DECL_NOT_REALLY_EXTERN (decl)\n \t    = ! (CLASSTYPE_INTERFACE_ONLY (ctype)"}, {"sha": "5560beb8f12a5c0d2a5b29a21e67f880d4274854", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aaf816dad783f6cfccae11e356a5213a2455adf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2aaf816dad783f6cfccae11e356a5213a2455adf", "patch": "@@ -2424,11 +2424,12 @@ push_template_decl_real (decl, is_friend)\n       else if (TREE_CODE (decl) == TYPE_DECL \n \t       && ANON_AGGRNAME_P (DECL_NAME (decl))) \n \tcp_error (\"template class without a name\");\n-      else if (TREE_CODE (decl) == TYPE_DECL \n-\t  && TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n-\tcp_error (\"template declaration of `%#T'\", TREE_TYPE (decl));\n-      else if (TREE_CODE (decl) == VAR_DECL\n-\t       && !CLASS_TYPE_P (CP_DECL_CONTEXT (decl)))\n+      else if ((DECL_IMPLICIT_TYPEDEF_P (decl)\n+\t\t&& CLASS_TYPE_P (TREE_TYPE (decl)))\n+\t       || (TREE_CODE (decl) == VAR_DECL && ctx && CLASS_TYPE_P (ctx))\n+\t       || TREE_CODE (decl) == FUNCTION_DECL)\n+\t/* OK */;\n+      else\n \tcp_error (\"template declaration of `%#D'\", decl);\n     }\n \n@@ -2582,9 +2583,7 @@ push_template_decl_real (decl, is_friend)\n \t  && TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE)\n \tDECL_NAME (decl) = classtype_mangled_name (TREE_TYPE (decl));\n     }\n-  else if (! DECL_LANG_SPECIFIC (decl))\n-    cp_error (\"template declaration of `%#D'\", decl);\n-  else\n+  else if (DECL_LANG_SPECIFIC (decl))\n     DECL_TEMPLATE_INFO (decl) = info;\n \n   return DECL_TEMPLATE_RESULT (tmpl);\n@@ -9166,10 +9165,11 @@ do_decl_instantiation (declspecs, declarator, storage)\n \t No program shall explicitly instantiate any template more\n \t than once.  \n \n-\t We check DECL_INTERFACE_KNOWN so as not to complain when the\n-\t first instantiation was `extern' and the second is not, and\n-\t EXTERN_P for the opposite case.  */\n-      if (DECL_INTERFACE_KNOWN (result) && !extern_p)\n+\t We check DECL_INTERFACE_KNOWN so as not to complain when the first\n+\t instantiation was `extern' and the second is not, and EXTERN_P for\n+\t the opposite case.  If -frepo, chances are we already got marked\n+\t as an explicit instantion because of the repo file.  */\n+      if (DECL_INTERFACE_KNOWN (result) && !extern_p && !flag_use_repository)\n \tcp_pedwarn (\"duplicate explicit instantiation of `%#D'\", result);\n \n       /* If we've already instantiated the template, just return now.  */\n@@ -9294,11 +9294,12 @@ do_type_instantiation (t, storage)\n \t No program shall explicitly instantiate any template more\n \t than once.  \n \n-         If CLASSTYPE_INTERFACE_ONLY, then the first explicit\n-\t instantiation was `extern', and if EXTERN_P then the second\n-\t is.  Both cases are OK.  */\n-      if (!CLASSTYPE_INTERFACE_ONLY (t) && !extern_p)\n-\tcp_error (\"duplicate explicit instantiation of `%#T'\", t);\n+         If CLASSTYPE_INTERFACE_ONLY, then the first explicit instantiation\n+\t was `extern'.  If EXTERN_P then the second is.  If -frepo, chances\n+\t are we already got marked as an explicit instantion because of the\n+\t repo file.  All these cases are OK.  */\n+      if (!CLASSTYPE_INTERFACE_ONLY (t) && !extern_p && !flag_use_repository)\n+\tcp_pedwarn (\"duplicate explicit instantiation of `%#T'\", t);\n       \n       /* If we've already instantiated the template, just return now.  */\n       if (!CLASSTYPE_INTERFACE_ONLY (t))"}]}