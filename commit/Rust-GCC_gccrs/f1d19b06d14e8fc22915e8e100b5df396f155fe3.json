{"sha": "f1d19b06d14e8fc22915e8e100b5df396f155fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFkMTliMDZkMTRlOGZjMjI5MTVlOGUxMDBiNWRmMzk2ZjE1NWZlMw==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-06-17T06:26:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:16Z"}, "message": "Added CR16 target hook (or provisional one at least)", "tree": {"sha": "162ffd4d6da0a71313e5aaa160081b9f4a6696f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162ffd4d6da0a71313e5aaa160081b9f4a6696f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1d19b06d14e8fc22915e8e100b5df396f155fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d19b06d14e8fc22915e8e100b5df396f155fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d19b06d14e8fc22915e8e100b5df396f155fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d19b06d14e8fc22915e8e100b5df396f155fe3/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fad970a5ecf82f7af0c3d75c7524dc887e31be65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad970a5ecf82f7af0c3d75c7524dc887e31be65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad970a5ecf82f7af0c3d75c7524dc887e31be65"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "f5643206dd8863295d43c4d306d76619cb4c9c1a", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f1d19b06d14e8fc22915e8e100b5df396f155fe3", "patch": "@@ -1529,6 +1529,7 @@ cr16-*-elf)\n         tm_file=\"elfos.h ${tm_file} newlib-stdint.h\"\n         tmake_file=\"${tmake_file} cr16/t-cr16 \"\n         use_collect2=no\n+\t\trust_target_objs=\"cr16-rust.o\"\n         ;;\n cris-*-elf | cris-*-none)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\""}, {"sha": "00fa0aa6b5742a24fa30553fa29f6a781a3abff2", "filename": "gcc/config/cr16/cr16-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h?ref=f1d19b06d14e8fc22915e8e100b5df396f155fe3", "patch": "@@ -45,6 +45,9 @@ enum data_model_type\n   ILLEGAL_DM\t\t/* Illegal data model.  */\n };\n \n+/* Defined in cr16-rust.c  */\n+extern void cr16_rust_target_cpu_info (void);\n+\n #ifdef RTX_CODE\n \n /* Addressing Modes.  */"}, {"sha": "3b9efe3475d7464ce6fb0359ab251992a39d229a", "filename": "gcc/config/cr16/cr16-rust.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Fcr16-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Fcr16-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16-rust.c?ref=f1d19b06d14e8fc22915e8e100b5df396f155fe3", "patch": "@@ -0,0 +1,54 @@\n+/* Subroutines for the Rust front end on the CR16 architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for CR16 targets.  */\n+\n+void cr16_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"cr16\");\n+\n+    // llvm seems to have no support for cr16 (nor historical support), so names are made up by me\n+    // TODO: very subject to change\n+    // TODO maybe put in sub-arches as features? idk\n+    if (TARGET_BIT_OPS)\n+        rust_add_target_info(\"target_feature\", \"bit-ops\");\n+    if (TARGET_MAC)\n+        rust_add_target_info(\"target_feature\", \"mac\");\n+    if (TARGET_DEBUG_ADDR)\n+        rust_add_target_info(\"target_feature\", \"debug-addr\");\n+    if (TARGET_INT32)\n+        rust_add_target_info(\"target_feature\", \"int32\");\n+\n+    if (CR16_TARGET_DATA_NEAR)             \n+        rust_add_target_info(\"target_feature\", \"data-model-near\");\n+    if (CR16_TARGET_DATA_MEDIUM)           \n+        rust_add_target_info(\"target_feature\", \"data-model-medium\");\n+    if (CR16_TARGET_DATA_FAR)              \n+        rust_add_target_info(\"target_feature\", \"data-model-far\");  \n+    \n+    if (TARGET_CR16C)\n+        rust_add_target_info(\"target_feature\", \"cr16c\");\n+    if (TARGET_CR16CP)\n+        rust_add_target_info(\"target_feature\", \"cr16cplus\");\n+}"}, {"sha": "b90cce1ff2741a8274eb70f96f38d6772ee9470c", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=f1d19b06d14e8fc22915e8e100b5df396f155fe3", "patch": "@@ -67,6 +67,8 @@ do                                         \\\n while (0)\n #endif\n \n+#define TARGET_RUST_CPU_INFO cr16_rust_target_cpu_info\n+\n /* Force the generation of dwarf .debug_frame sections even if not\n    compiling -g.  This guarantees that we can unwind the stack.  */\n #define DWARF2_FRAME_INFO 1"}, {"sha": "eccff6dd985f3f9590d430d69d36a973d5497ccd", "filename": "gcc/config/cr16/t-cr16", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Ft-cr16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d19b06d14e8fc22915e8e100b5df396f155fe3/gcc%2Fconfig%2Fcr16%2Ft-cr16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Ft-cr16?ref=f1d19b06d14e8fc22915e8e100b5df396f155fe3", "patch": "@@ -23,3 +23,6 @@ MULTILIB_DIRNAMES    = far-pic int32\n MULTILIB_MATCHES     =\n MULTILIB_EXTRA_OPTS  = mcr16cplus mdata-model=far\n \n+cr16-rust.o: $(srcdir)/config/cr16/cr16-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}