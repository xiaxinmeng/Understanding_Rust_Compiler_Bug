{"sha": "113c69ff2d41091359ec37789974cc47f1169e05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzYzY5ZmYyZDQxMDkxMzU5ZWMzNzc4OTk3NGNjNDdmMTE2OWUwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-04-08T09:08:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-04-08T09:08:12Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not make a function returning an unconstrained type 'const' for the middle-end.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Function>: Do not make\n\ta function returning an unconstrained type 'const' for the middle-end.\n\n\t* gcc-interface/trans.c (Pragma_to_gnu) <case Pragma_Warning>: Use\n\texact condition to detect Reason => \"...\" pattern.\n\nFrom-SVN: r221916", "tree": {"sha": "baa5f85fcaf8970ce98360f75251932428ea8095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa5f85fcaf8970ce98360f75251932428ea8095"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113c69ff2d41091359ec37789974cc47f1169e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113c69ff2d41091359ec37789974cc47f1169e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113c69ff2d41091359ec37789974cc47f1169e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113c69ff2d41091359ec37789974cc47f1169e05/comments", "author": null, "committer": null, "parents": [{"sha": "43941fa55c5246c51a31c86df1006819ec67d8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43941fa55c5246c51a31c86df1006819ec67d8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43941fa55c5246c51a31c86df1006819ec67d8e0"}], "stats": {"total": 92, "additions": 83, "deletions": 9}, "files": [{"sha": "d93e5ac9c88c2a9b200cc0980a8f01be0c676490", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -1,3 +1,11 @@\n+2015-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Function>: Do not make\n+\ta function returning an unconstrained type 'const' for the middle-end.\n+\n+\t* gcc-interface/trans.c (Pragma_to_gnu) <case Pragma_Warning>: Use\n+\texact condition to detect Reason => \"...\" pattern.\n+\n 2015-03-31  Tom de Vries  <tom@codesourcery.com>\n \n \tPR ada/65490"}, {"sha": "d908a1b750d7357228c8433a6f2ce8839b6db779", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -4266,17 +4266,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\treturn_by_direct_ref_p = true;\n \t      }\n \n-\t    /* If we are supposed to return an unconstrained array type, make\n-\t       the actual return type the fat pointer type.  */\n+\t    /* If the return type is an unconstrained array type, the return\n+\t       value will be allocated on the secondary stack so the actual\n+\t       return type is the fat pointer type.  */\n \t    else if (TREE_CODE (gnu_return_type) == UNCONSTRAINED_ARRAY_TYPE)\n \t      {\n \t\tgnu_return_type = TREE_TYPE (gnu_return_type);\n \t\treturn_unconstrained_p = true;\n \t      }\n \n \t    /* Likewise, if the return type requires a transient scope, the\n-\t       return value will be allocated on the secondary stack so the\n-\t       actual return type is the pointer type.  */\n+\t       return value will also be allocated on the secondary stack so\n+\t       the actual return type is the pointer type.  */\n \t    else if (Requires_Transient_Scope (gnat_return_type))\n \t      {\n \t\tgnu_return_type = build_pointer_type (gnu_return_type);\n@@ -4591,11 +4592,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t return_by_direct_ref_p,\n \t\t\t\t return_by_invisi_ref_p);\n \n-\t/* A subprogram (something that doesn't return anything) shouldn't\n-\t   be considered const since there would be no reason for such a\n+\t/* A procedure (something that doesn't return anything) shouldn't be\n+\t   considered const since there would be no reason for calling such a\n \t   subprogram.  Note that procedures with Out (or In Out) parameters\n-\t   have already been converted into a function with a return type.  */\n-\tif (TREE_CODE (gnu_return_type) == VOID_TYPE)\n+\t   have already been converted into a function with a return type.\n+\t   Similarly, if the function returns an unconstrained type, then the\n+\t   function will allocate the return value on the secondary stack and\n+\t   thus calls to it cannot be CSE'ed, lest the stack be reclaimed.  */\n+\tif (TREE_CODE (gnu_return_type) == VOID_TYPE || return_unconstrained_p)\n \t  const_flag = false;\n \n \tif (const_flag || volatile_flag)"}, {"sha": "6ffee062a04a872f2c86a97d87026f4b0a827518", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -1444,7 +1444,8 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t      }\n \n \t    /* Deal with optional pattern (but ignore Reason => \"...\").  */\n-\t    if (Present (Next (gnat_temp)) && No (Chars (Next (gnat_temp))))\n+\t    if (Present (Next (gnat_temp))\n+\t\t&& Chars (Next (gnat_temp)) != Name_Reason)\n \t      {\n \t\t/* pragma Warnings (On | Off, Name) is handled differently.  */\n \t\tif (Nkind (Expression (Next (gnat_temp))) != N_String_Literal)"}, {"sha": "a6a7be318beaa0c71ff0726cd6d4cfc86dbb172a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -1,3 +1,9 @@\n+2015-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt48.adb: New test.\n+\t* gnat.dg/opt48_pkg1.ad[sb]: New helper.\n+\t* gnat.dg/opt48_pkg2.ad[sb]: Likewise.\n+\n 2015-04-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65540"}, {"sha": "3f611cd1d6a656cf7b4f08af474958f83f43d70f", "filename": "gcc/testsuite/gnat.dg/opt48.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48.adb?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Opt48_Pkg1; use Opt48_Pkg1;\n+with Opt48_Pkg2; use Opt48_Pkg2;\n+\n+procedure Opt48 is\n+begin\n+   if Get_Z /= (12, \"Hello world!\") then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "306551cea5f701c5cd76b8aec1abf99c08586825", "filename": "gcc/testsuite/gnat.dg/opt48_pkg1.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg1.adb?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -0,0 +1,17 @@\n+package body Opt48_Pkg1 is\n+\n+   function G return Rec is\n+   begin\n+      return (32, \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n+   end G;\n+\n+   X : Rec := F;\n+   Y : Rec := G;\n+   Z : Rec := F;\n+\n+   function Get_Z return Rec is\n+   begin\n+      return Z;\n+   end;\n+\n+end Opt48_Pkg1;"}, {"sha": "50154c20c03117b7535968c8079bb87a36d0b93a", "filename": "gcc/testsuite/gnat.dg/opt48_pkg1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg1.ads?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -0,0 +1,7 @@\n+with Opt48_Pkg2; use Opt48_Pkg2;\n+\n+package Opt48_Pkg1 is\n+\n+   function Get_Z return Rec;\n+\n+end Opt48_Pkg1;"}, {"sha": "41836e7be711770f2e82962c45fbb781153209ad", "filename": "gcc/testsuite/gnat.dg/opt48_pkg2.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg2.adb?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -0,0 +1,8 @@\n+package body Opt48_Pkg2 is\n+\n+   function F return Rec is\n+   begin\n+      return (12, \"Hello world!\");\n+   end F;\n+\n+end Opt48_Pkg2;"}, {"sha": "d3edbeadb68a95d7e266fabf679df5984c1c0605", "filename": "gcc/testsuite/gnat.dg/opt48_pkg2.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113c69ff2d41091359ec37789974cc47f1169e05/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt48_pkg2.ads?ref=113c69ff2d41091359ec37789974cc47f1169e05", "patch": "@@ -0,0 +1,11 @@\n+package Opt48_Pkg2 is\n+\n+   pragma Pure;\n+\n+   type Rec (L : Natural) is record\n+      S : String (1 .. L);\n+   end record;\n+\n+   function F return Rec;\n+\n+end Opt48_Pkg2;"}]}