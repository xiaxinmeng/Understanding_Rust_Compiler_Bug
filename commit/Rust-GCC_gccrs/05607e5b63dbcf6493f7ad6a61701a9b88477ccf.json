{"sha": "05607e5b63dbcf6493f7ad6a61701a9b88477ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2MDdlNWI2M2RiY2Y2NDkzZjdhZDZhNjE3MDFhOWI4ODQ3N2NjZg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2012-05-20T16:32:50Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-05-20T16:32:50Z"}, "message": "re PR rtl-optimization/53373 (ICE on valid code with -mavx)\n\n\tPR rtl-optimzation/53373\n\t* config/pa/pa.md (call_symref_pic): Don't expose PIC register save in\n\tcall pattern.  Update split patterns.\n\t(call_symref_64bit, call_reg_pic, call_reg_64bit, call_val_symref_pic,\n\tcall_val_symref_64bit, call_val_reg_pic, call_val_reg_64bit): Likewise.\n\nFrom-SVN: r187695", "tree": {"sha": "a093ffd1adfcc05be45f1e7e31814f20a349b770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a093ffd1adfcc05be45f1e7e31814f20a349b770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05607e5b63dbcf6493f7ad6a61701a9b88477ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05607e5b63dbcf6493f7ad6a61701a9b88477ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05607e5b63dbcf6493f7ad6a61701a9b88477ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05607e5b63dbcf6493f7ad6a61701a9b88477ccf/comments", "author": null, "committer": null, "parents": [{"sha": "768da0da28b451fc642198087b4d0d44dc85e2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768da0da28b451fc642198087b4d0d44dc85e2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768da0da28b451fc642198087b4d0d44dc85e2a3"}], "stats": {"total": 128, "additions": 56, "deletions": 72}, "files": [{"sha": "471c39ae657f470cc938c37da85ce8283d3d9081", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05607e5b63dbcf6493f7ad6a61701a9b88477ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05607e5b63dbcf6493f7ad6a61701a9b88477ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05607e5b63dbcf6493f7ad6a61701a9b88477ccf", "patch": "@@ -1,3 +1,11 @@\n+2012-05-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR rtl-optimzation/53373\n+\t* config/pa/pa.md (call_symref_pic): Don't expose PIC register save in\n+\tcall pattern.  Update split patterns.\n+\t(call_symref_64bit, call_reg_pic, call_reg_64bit, call_val_symref_pic,\n+\tcall_val_symref_64bit, call_val_reg_pic, call_val_reg_64bit): Likewise.\n+\n 2012-05-20  Razya Ladelsky  <razya@il.ibm.com>\n \t\n \t* tree-parloops.c (gen_parallel_loop): Change many_iterations_cond for outer loops."}, {"sha": "8a7e6858c119657867676117253450dd3641c41c", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 48, "deletions": 72, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05607e5b63dbcf6493f7ad6a61701a9b88477ccf/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05607e5b63dbcf6493f7ad6a61701a9b88477ccf/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=05607e5b63dbcf6493f7ad6a61701a9b88477ccf", "patch": "@@ -7190,12 +7190,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n    (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n \n (define_insn \"call_symref_pic\"\n-  [(set (match_operand:SI 2 \"register_operand\" \"=&r\") (reg:SI 19))\n-   (call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n+  [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n-   (use (match_dup 2))\n+   (clobber (match_operand 2))\n    (use (reg:SI 19))\n    (use (const_int 0))]\n   \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT\"\n@@ -7211,12 +7210,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:SI 2 \"register_operand\" \"\") (reg:SI 19))\n-\t      (call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:SI 19))\n \t      (use (const_int 0))])]\n   \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT && reload_completed\n@@ -7231,12 +7229,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:SI 2 \"register_operand\" \"\") (reg:SI 19))\n-\t      (call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:SI 19))\n \t      (use (const_int 0))])]\n   \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT && reload_completed\"\n@@ -7269,12 +7266,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n (define_insn \"call_symref_64bit\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"=&r\") (reg:DI 27))\n-   (call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n+  [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (reg:DI 1))\n    (clobber (reg:DI 2))\n-   (use (match_dup 2))\n+   (clobber (match_operand 2))\n    (use (reg:DI 27))\n    (use (reg:DI 29))\n    (use (const_int 0))]\n@@ -7291,12 +7287,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:DI 2 \"register_operand\" \"\") (reg:DI 27))\n-\t      (call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 0))])]\n@@ -7313,12 +7308,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:DI 2 \"register_operand\" \"\") (reg:DI 27))\n-\t      (call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 0))])]\n@@ -7368,12 +7362,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n (define_insn \"call_reg_pic\"\n-  [(set (match_operand:SI 1 \"register_operand\" \"=&r\") (reg:SI 19))\n-   (call (mem:SI (reg:SI 22))\n+  [(call (mem:SI (reg:SI 22))\n \t (match_operand 0 \"\" \"i\"))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n-   (use (match_dup 1))\n+   (clobber (match_operand 1))\n    (use (reg:SI 19))\n    (use (const_int 1))]\n   \"!TARGET_64BIT\"\n@@ -7389,12 +7382,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:SI 1 \"register_operand\" \"\") (reg:SI 19))\n-\t      (call (mem:SI (reg:SI 22))\n+  [(parallel [(call (mem:SI (reg:SI 22))\n \t\t    (match_operand 0 \"\" \"\"))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 1))\n+\t      (clobber (match_operand 1))\n \t      (use (reg:SI 19))\n \t      (use (const_int 1))])]\n   \"!TARGET_64BIT && reload_completed\n@@ -7409,12 +7401,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:SI 1 \"register_operand\" \"\") (reg:SI 19))\n-\t      (call (mem:SI (reg:SI 22))\n+  [(parallel [(call (mem:SI (reg:SI 22))\n \t\t    (match_operand 0 \"\" \"\"))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 1))\n+\t      (clobber (match_operand 1))\n \t      (use (reg:SI 19))\n \t      (use (const_int 1))])]\n   \"!TARGET_64BIT && reload_completed\"\n@@ -7446,12 +7437,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n (define_insn \"call_reg_64bit\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"=&r\") (reg:DI 27))\n-   (call (mem:SI (match_operand:DI 0 \"register_operand\" \"r\"))\n+  [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (reg:DI 1))\n    (clobber (reg:DI 2))\n-   (use (match_dup 2))\n+   (clobber (match_operand 2))\n    (use (reg:DI 27))\n    (use (reg:DI 29))\n    (use (const_int 1))]\n@@ -7468,12 +7458,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:DI 2 \"register_operand\" \"\") (reg:DI 27))\n-\t      (call (mem:SI (match_operand 0 \"register_operand\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"register_operand\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 1))])]\n@@ -7490,12 +7479,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:DI 2 \"register_operand\" \"\") (reg:DI 27))\n-\t      (call (mem:SI (match_operand 0 \"register_operand\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"register_operand\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 1))])]\n@@ -7654,13 +7642,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n    (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n \n (define_insn \"call_val_symref_pic\"\n-  [(set (match_operand:SI 3 \"register_operand\" \"=&r\") (reg:SI 19))\n-   (set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n-   (use (match_dup 3))\n+   (clobber (match_operand 3))\n    (use (reg:SI 19))\n    (use (const_int 0))]\n   \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT\"\n@@ -7676,13 +7663,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:SI 3 \"register_operand\" \"\") (reg:SI 19))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t      (call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t\t    (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 3))\n+\t      (clobber (match_operand 3))\n \t      (use (reg:SI 19))\n \t      (use (const_int 0))])]\n   \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT && reload_completed\n@@ -7698,13 +7684,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:SI 3 \"register_operand\" \"\") (reg:SI 19))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t      (call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t\t    (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 3))\n+\t      (clobber (match_operand 3))\n \t      (use (reg:SI 19))\n \t      (use (const_int 0))])]\n   \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT && reload_completed\"\n@@ -7739,13 +7724,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n (define_insn \"call_val_symref_64bit\"\n-  [(set (match_operand:DI 3 \"register_operand\" \"=&r\") (reg:DI 27))\n-   (set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (reg:DI 1))\n    (clobber (reg:DI 2))\n-   (use (match_dup 3))\n+   (clobber (match_operand 3))\n    (use (reg:DI 27))\n    (use (reg:DI 29))\n    (use (const_int 0))]\n@@ -7762,13 +7746,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:DI 3 \"register_operand\" \"\") (reg:DI 27))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t      (call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t\t    (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 3))\n+\t      (clobber (match_operand 3))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 0))])]\n@@ -7786,13 +7769,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:DI 3 \"register_operand\" \"\") (reg:DI 27))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t      (call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t\t    (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 3))\n+\t      (clobber (match_operand 3))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 0))])]\n@@ -7845,13 +7827,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n (define_insn \"call_val_reg_pic\"\n-  [(set (match_operand:SI 2 \"register_operand\" \"=&r\") (reg:SI 19))\n-   (set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (reg:SI 22))\n \t      (match_operand 1 \"\" \"i\")))\n    (clobber (reg:SI 1))\n    (clobber (reg:SI 2))\n-   (use (match_dup 2))\n+   (clobber (match_operand 2))\n    (use (reg:SI 19))\n    (use (const_int 1))]\n   \"!TARGET_64BIT\"\n@@ -7867,13 +7848,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:SI 2 \"register_operand\" \"\") (reg:SI 19))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (reg:SI 22))\n \t\t\t (match_operand 1 \"\" \"\")))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:SI 19))\n \t      (use (const_int 1))])]\n   \"!TARGET_64BIT && reload_completed\n@@ -7889,13 +7869,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:SI 2 \"register_operand\" \"\") (reg:SI 19))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (reg:SI 22))\n \t\t\t (match_operand 1 \"\" \"\")))\n \t      (clobber (reg:SI 1))\n \t      (clobber (reg:SI 2))\n-\t      (use (match_dup 2))\n+\t      (clobber (match_operand 2))\n \t      (use (reg:SI 19))\n \t      (use (const_int 1))])]\n   \"!TARGET_64BIT && reload_completed\"\n@@ -7929,13 +7908,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n (define_insn \"call_val_reg_64bit\"\n-  [(set (match_operand:DI 3 \"register_operand\" \"=&r\") (reg:DI 27))\n-   (set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (reg:DI 1))\n    (clobber (reg:DI 2))\n-   (use (match_dup 3))\n+   (clobber (match_operand 3))\n    (use (reg:DI 27))\n    (use (reg:DI 29))\n    (use (const_int 1))]\n@@ -7952,13 +7930,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n ;; terminate the basic block.  The split has to contain more than one\n ;; insn.\n (define_split\n-  [(parallel [(set (match_operand:DI 3 \"register_operand\" \"\") (reg:DI 27))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (match_operand:DI 1 \"register_operand\" \"\"))\n \t\t\t (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 3))\n+\t      (clobber (match_operand 3))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 1))])]\n@@ -7976,13 +7953,12 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   \"\")\n \n (define_split\n-  [(parallel [(set (match_operand:DI 3 \"register_operand\" \"\") (reg:DI 27))\n-\t      (set (match_operand 0 \"\" \"\")\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (match_operand:DI 1 \"register_operand\" \"\"))\n \t\t\t (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:DI 1))\n \t      (clobber (reg:DI 2))\n-\t      (use (match_dup 3))\n+\t      (clobber (match_operand 3))\n \t      (use (reg:DI 27))\n \t      (use (reg:DI 29))\n \t      (use (const_int 1))])]"}]}