{"sha": "b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "node_id": "C_kwDOANBUbNoAKGI4NWM3N2UxOWFkOWM0MDIzMWM0MDUwZTZhZDM3M2IzMGRlN2IyYjk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-15T15:07:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-16T14:38:38Z"}, "message": "libstdc++: Implement <experimental/synchronized_value> (P0290)\n\nThis was approved for the Concurrency TS v2 in Issaquah.\n\nAlthough the TS is based on C++20, this enables the new header for C++17\nas well. This will make it available to more users, and I hope that will\nget more feedback on the feature.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/synchronized_value: New file.\n\t* testsuite/experimental/synchronized_value.cc: New test.", "tree": {"sha": "696214b1d09c1bdd15f2c17b2693728991ee7630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/696214b1d09c1bdd15f2c17b2693728991ee7630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38f321793ae18d25399f0396ac1371caa7cc7043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f321793ae18d25399f0396ac1371caa7cc7043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f321793ae18d25399f0396ac1371caa7cc7043"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "a880e8ee2275681cd1f82154c39e50db30b88c2e", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "patch": "@@ -798,6 +798,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/source_location \\\n \t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\\n+\t${experimental_srcdir}/synchronized_value \\\n \t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/timer \\\n \t${experimental_srcdir}/tuple \\"}, {"sha": "0ff875b280bea1c02eb29aafabad3d050c3844c1", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "patch": "@@ -1144,6 +1144,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/source_location \\\n \t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\\n+\t${experimental_srcdir}/synchronized_value \\\n \t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/timer \\\n \t${experimental_srcdir}/tuple \\"}, {"sha": "9a91da912ca128857f2d3f1bd319187d3b7bbc7e", "filename": "libstdc++-v3/include/experimental/synchronized_value", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsynchronized_value", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsynchronized_value", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsynchronized_value?ref=b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "patch": "@@ -0,0 +1,100 @@\n+// <experimental/synchronized_value> -*- C++ -*-\n+\n+// Copyright The GNU Toolchain Authors.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/experimental/synchronized_value\n+ *  This is a TS C++ Library header.\n+ *  @ingroup libfund-ts\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_SYNCVAL\n+#define _GLIBCXX_EXPERIMENTAL_SYNCVAL 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/requires_hosted.h> // for std::mutex\n+\n+#if __cplusplus >= 201703L\n+#include <mutex>\n+#include <bits/invoke.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+namespace experimental::inline concurrency_v2\n+{\n+#define __cpp_lib_concurrency_v2_synchronized_value 202302\n+\n+  template<typename _Tp>\n+    class synchronized_value\n+    {\n+      // TODO: Use partial specialization after PR c++/71954 is fixed.\n+      template<typename... _Args>\n+\tstatic inline constexpr bool __is_self\n+\t  = sizeof...(_Args) == 1\n+\t      && (is_same_v<__remove_cvref_t<_Args>, synchronized_value> && ...);\n+\n+#if ! __cpp_concepts\n+      template<typename... _Args>\n+\tusing __not_self = bool_constant<!__is_self<_Args...>>;\n+#endif\n+\n+    public:\n+      synchronized_value(const synchronized_value&) = delete;\n+      synchronized_value& operator=(const synchronized_value&) = delete;\n+\n+#if __cpp_concepts\n+      template<typename... _Args>\n+\trequires (!__is_self<_Args...>) && is_constructible_v<_Tp, _Args...>\n+#else\n+      template<typename... _Args, typename = _Require<__not_self<_Args...>>,\n+\t       typename = _Require<is_constructible<_Tp, _Args...>>>\n+#endif\n+\tsynchronized_value(_Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n+\t: _M_val(std::forward<_Args>(__args)...)\n+\t{ }\n+\n+      template<typename _Fn, typename _Up, typename ... _Types>\n+\tfriend invoke_result_t<_Fn, _Up&, _Types&...>\n+\tapply(_Fn&&, synchronized_value<_Up>&, synchronized_value<_Types>&...);\n+\n+    private:\n+      mutex _M_mut;\n+      _Tp _M_val;\n+    };\n+\n+  template<typename _Fn, typename _Tp, typename... _Types>\n+    inline invoke_result_t<_Fn, _Tp&, _Types&...>\n+    apply(_Fn&& __f, synchronized_value<_Tp>& __val,\n+\t  synchronized_value<_Types>&... __vals)\n+    {\n+      scoped_lock __l(__val._M_mut, __vals._M_mut...);\n+      return std::__invoke(std::forward<_Fn>(__f), __val._M_val,\n+\t\t\t   __vals._M_val...);\n+    }\n+} // namespace experimental::concurrency_v2\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+#endif // _GLIBCXX_EXPERIMENTAL_SYNCVAL"}, {"sha": "8e8134699a2f3f82b0248b940869ff319e8fcb07", "filename": "libstdc++-v3/testsuite/experimental/synchronized_value.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85c77e19ad9c40231c4050e6ad373b30de7b2b9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc?ref=b85c77e19ad9c40231c4050e6ad373b30de7b2b9", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do run { target c++17 } }\n+\n+#include <experimental/synchronized_value>\n+#include <testsuite_hooks.h>\n+#include <string>\n+\n+using std::experimental::synchronized_value;\n+\n+synchronized_value<std::string> s;\n+\n+std::string read_value(){\n+  return apply([](auto& x){return x;},s);\n+}\n+\n+void set_value(std::string const& new_val){\n+  apply([&](auto& x){ x = new_val; }, s);\n+}\n+\n+void\n+test_single()\n+{\n+  set_value(\"new value\");\n+  VERIFY( read_value() == \"new value\" );\n+}\n+\n+void\n+test_multi()\n+{\n+  synchronized_value<int> a(1), b(2), c(3);\n+  int sum = apply([](auto&... ints) { return (ints++ + ...); }, a, b, c);\n+  VERIFY( sum == 6 );\n+  auto get = [](int& i) { return i; };\n+  VERIFY( apply(get, a) == 2 );\n+  VERIFY( apply(get, b) == 3 );\n+  VERIFY( apply(get, c) == 4 );\n+}\n+\n+int main()\n+{\n+  test_single();\n+  test_multi();\n+}"}]}