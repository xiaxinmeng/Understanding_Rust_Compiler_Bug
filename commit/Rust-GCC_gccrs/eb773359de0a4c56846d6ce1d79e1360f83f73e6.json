{"sha": "eb773359de0a4c56846d6ce1d79e1360f83f73e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3NzMzNTlkZTBhNGM1Njg0NmQ2Y2UxZDc5ZTEzNjBmODNmNzNlNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-27T07:31:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-27T07:31:02Z"}, "message": "decl2.c (import_export_vtable): If we support one_only but not weak symbols...\n\n\t* decl2.c (import_export_vtable): If we support one_only but not\n\tweak symbols, mark instantiated template vtables one_only.\n\t(import_export_decl): Likewise for tinfo functions.\n\t(finish_vtable_vardecl): Also write out vtables from explicitly\n\tinstantiated template classes.\n\t* pt.c (mark_class_instantiated): Revert last change.\n\nFrom-SVN: r16779", "tree": {"sha": "2984517149959da9efd4e87022fe7281a419b243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2984517149959da9efd4e87022fe7281a419b243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb773359de0a4c56846d6ce1d79e1360f83f73e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb773359de0a4c56846d6ce1d79e1360f83f73e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb773359de0a4c56846d6ce1d79e1360f83f73e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb773359de0a4c56846d6ce1d79e1360f83f73e6/comments", "author": null, "committer": null, "parents": [{"sha": "e872bb7a78485ad19507115d289abe61954438ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e872bb7a78485ad19507115d289abe61954438ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e872bb7a78485ad19507115d289abe61954438ca"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "02eeb27f78ccab38404b64580e2128caa5670c1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb773359de0a4c56846d6ce1d79e1360f83f73e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb773359de0a4c56846d6ce1d79e1360f83f73e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb773359de0a4c56846d6ce1d79e1360f83f73e6", "patch": "@@ -1,5 +1,12 @@\n Wed Nov 26 20:28:49 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl2.c (import_export_vtable): If we support one_only but not\n+\tweak symbols, mark instantiated template vtables one_only.\n+\t(import_export_decl): Likewise for tinfo functions.\n+\t(finish_vtable_vardecl): Also write out vtables from explicitly \n+\tinstantiated template classes.\n+\t* pt.c (mark_class_instantiated): Revert last change.\n+\n \t* except.c (expand_throw): Call mark_used on the destructor.\n \n 1997-11-26  Mark Mitchell  <mmitchell@usa.net>"}, {"sha": "a2821eeb375ef46603b6ee120f6537a5a2bad297", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb773359de0a4c56846d6ce1d79e1360f83f73e6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb773359de0a4c56846d6ce1d79e1360f83f73e6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eb773359de0a4c56846d6ce1d79e1360f83f73e6", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"expr.h\"\n+#include \"defaults.h\"\n \n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n@@ -2527,6 +2528,12 @@ import_export_vtable (decl, type, final)\n       TREE_PUBLIC (decl) = 1;\n       DECL_EXTERNAL (decl) = ! CLASSTYPE_VTABLE_NEEDS_WRITING (type);\n       DECL_INTERFACE_KNOWN (decl) = 1;\n+\n+      /* For WIN32 we also want to put explicit instantiations in\n+\t linkonce sections.  */\n+      if (CLASSTYPE_EXPLICIT_INSTANTIATION (type)\n+\t  && supports_one_only () && ! SUPPORTS_WEAK)\n+\tcomdat_linkage (decl);\n     }\n   else\n     {\n@@ -2618,6 +2625,7 @@ finish_vtable_vardecl (prev, vars)\n   if (write_virtuals >= 0\n       && ! DECL_EXTERNAL (vars)\n       && ((TREE_PUBLIC (vars) && ! DECL_WEAK (vars) && ! DECL_ONE_ONLY (vars))\n+\t  || CLASSTYPE_EXPLICIT_INSTANTIATION (DECL_CONTEXT (vars))\n \t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars))\n \t  || (hack_decl_function_context (vars) && TREE_USED (vars)))\n       && ! TREE_ASM_WRITTEN (vars))\n@@ -2815,6 +2823,12 @@ import_export_decl (decl)\n \t  DECL_NOT_REALLY_EXTERN (decl)\n \t    = ! (CLASSTYPE_INTERFACE_ONLY (ctype)\n \t\t || (DECL_THIS_INLINE (decl) && ! flag_implement_inlines));\n+\n+\t  /* For WIN32 we also want to put explicit instantiations in\n+\t     linkonce sections.  */\n+\t  if (CLASSTYPE_EXPLICIT_INSTANTIATION (ctype)\n+\t      && supports_one_only () && ! SUPPORTS_WEAK)\n+\t    comdat_linkage (decl);\n \t}\n       else if (TYPE_BUILT_IN (ctype) && ctype == TYPE_MAIN_VARIANT (ctype))\n \tDECL_NOT_REALLY_EXTERN (decl) = 0;"}, {"sha": "370c9e2a5279dbc8918140be745cdb9f5098e69f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb773359de0a4c56846d6ce1d79e1360f83f73e6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb773359de0a4c56846d6ce1d79e1360f83f73e6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eb773359de0a4c56846d6ce1d79e1360f83f73e6", "patch": "@@ -4327,16 +4327,8 @@ mark_class_instantiated (t, extern_p)\n      int extern_p;\n {\n   SET_CLASSTYPE_EXPLICIT_INSTANTIATION (t);\n-\n-  if (supports_one_only () && ! SUPPORTS_WEAK)\n-    /* For WIN32 we also want to put explicit instantiations in\n-       linkonce sections.  */;\n-  else\n-    {\n-      SET_CLASSTYPE_INTERFACE_KNOWN (t);\n-      CLASSTYPE_INTERFACE_ONLY (t) = extern_p;\n-    }\n-\n+  SET_CLASSTYPE_INTERFACE_KNOWN (t);\n+  CLASSTYPE_INTERFACE_ONLY (t) = extern_p;\n   CLASSTYPE_VTABLE_NEEDS_WRITING (t) = ! extern_p;\n   TYPE_DECL_SUPPRESS_DEBUG (TYPE_NAME (t)) = extern_p;\n   if (! extern_p)"}]}