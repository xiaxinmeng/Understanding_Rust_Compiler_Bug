{"sha": "68188fff88d0c302e6002a8b7450b17e4a26950b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxODhmZmY4OGQwYzMwMmU2MDAyYThiNzQ1MGIxN2U0YTI2OTUwYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-11-29T13:29:35Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-11-29T13:29:35Z"}, "message": "ipa-cp: Avoid ICEs when looking at expanded thunks and unoptimized functions\n\n2019-11-29  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/92476\n\t* ipa-cp.c (set_single_call_flag): Set node_calling_single_call in\n\tthe summary only if the summary exists.\n\t(find_more_scalar_values_for_callers_subset): Check node_dead in\n\tthe summary only if the summary exists.\n\t(ipcp_store_bits_results): Ignore nodes without lattices.\n\t(ipcp_store_vr_results): Likewise.\n\t* cgraphclones.c: Include ipa-fnsummary.h and ipa-prop.h and the\n\theader files required by them.\n\t(cgraph_node::expand_all_artificial_thunks): Analyze expanded thunks.\n\nFrom-SVN: r278841", "tree": {"sha": "b83ee676f2064ca521dc2c76ede5a06872fdd895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83ee676f2064ca521dc2c76ede5a06872fdd895"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68188fff88d0c302e6002a8b7450b17e4a26950b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68188fff88d0c302e6002a8b7450b17e4a26950b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68188fff88d0c302e6002a8b7450b17e4a26950b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68188fff88d0c302e6002a8b7450b17e4a26950b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3edaed39583aeb49cfda7093ed4c0f9fed3fbea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3edaed39583aeb49cfda7093ed4c0f9fed3fbea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3edaed39583aeb49cfda7093ed4c0f9fed3fbea0"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "c06d450c0743e1e70570a7e8c7e3eab5228c8c13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68188fff88d0c302e6002a8b7450b17e4a26950b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68188fff88d0c302e6002a8b7450b17e4a26950b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68188fff88d0c302e6002a8b7450b17e4a26950b", "patch": "@@ -1,3 +1,16 @@\n+2019-11-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/92476\n+\t* ipa-cp.c (set_single_call_flag): Set node_calling_single_call in\n+\tthe summary only if the summary exists.\n+\t(find_more_scalar_values_for_callers_subset): Check node_dead in\n+\tthe summary only if the summary exists.\n+\t(ipcp_store_bits_results): Ignore nodes without lattices.\n+\t(ipcp_store_vr_results): Likewise.\n+\t* cgraphclones.c: Include ipa-fnsummary.h and ipa-prop.h and the\n+\theader files required by them.\n+\t(cgraph_node::expand_all_artificial_thunks): Analyze expanded thunks.\n+\n 2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/92710"}, {"sha": "9aacb0b196cc03473b4ef3d0915b55620426cc19", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68188fff88d0c302e6002a8b7450b17e4a26950b/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68188fff88d0c302e6002a8b7450b17e4a26950b/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=68188fff88d0c302e6002a8b7450b17e4a26950b", "patch": "@@ -80,6 +80,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"dumpfile.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n+#include \"ipa-prop.h\"\n+#include \"ipa-fnsummary.h\"\n \n /* Create clone of edge in the node N represented by CALL_EXPR\n    the callgraph.  */\n@@ -268,6 +273,8 @@ cgraph_node::expand_all_artificial_thunks ()\n \t  {\n \t    thunk->thunk.thunk_p = false;\n \t    thunk->analyze ();\n+\t    ipa_analyze_node (thunk);\n+\t    inline_analyze_function (thunk);\n \t  }\n \tthunk->expand_all_artificial_thunks ();\n       }"}, {"sha": "d0c6e91edd4c177b2455edd6d2945ef5569e3c8b", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68188fff88d0c302e6002a8b7450b17e4a26950b/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68188fff88d0c302e6002a8b7450b17e4a26950b/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=68188fff88d0c302e6002a8b7450b17e4a26950b", "patch": "@@ -1165,7 +1165,7 @@ set_single_call_flag (cgraph_node *node, void *)\n   /* Local thunks can be handled transparently, skip them.  */\n   while (cs && cs->caller->thunk.thunk_p && cs->caller->local)\n     cs = cs->next_caller;\n-  if (cs)\n+  if (cs && IPA_NODE_REF (cs->caller))\n     {\n       IPA_NODE_REF (cs->caller)->node_calling_single_call = true;\n       return true;\n@@ -4417,7 +4417,7 @@ find_more_scalar_values_for_callers_subset (struct cgraph_node *node,\n \t  struct ipa_jump_func *jump_func;\n \t  tree t;\n \n-\t  if (IPA_NODE_REF (cs->caller)->node_dead)\n+\t  if (IPA_NODE_REF (cs->caller) && IPA_NODE_REF (cs->caller)->node_dead)\n \t    continue;\n \n \t  if (!IPA_EDGE_REF (cs)\n@@ -5422,6 +5422,9 @@ ipcp_store_bits_results (void)\n \n       if (info->ipcp_orig_node)\n \tinfo = IPA_NODE_REF (info->ipcp_orig_node);\n+      if (!info->lattices)\n+\t/* Newly expanded artificial thunks do not have lattices.  */\n+\tcontinue;\n \n       unsigned count = ipa_get_param_count (info);\n       for (unsigned i = 0; i < count; i++)\n@@ -5495,6 +5498,9 @@ ipcp_store_vr_results (void)\n \n       if (info->ipcp_orig_node)\n \tinfo = IPA_NODE_REF (info->ipcp_orig_node);\n+      if (!info->lattices)\n+\t/* Newly expanded artificial thunks do not have lattices.  */\n+\tcontinue;\n \n       unsigned count = ipa_get_param_count (info);\n       for (unsigned i = 0; i < count; i++)"}]}