{"sha": "1141fbd71ea1782c6eac750cfed809f0706aaafc", "node_id": "C_kwDOANBUbNoAKDExNDFmYmQ3MWVhMTc4MmM2ZWFjNzUwY2ZlZDgwOWYwNzA2YWFhZmM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-07T19:46:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-06T13:29:49Z"}, "message": "[Ada] Improve code generated for aggregates of VFA type\n\nThis avoids using a full access for constants internally generated from\nassignments of aggregates with a Volatile_Full_Access type.\n\ngcc/ada/\n\n\t* gcc-interface/gigi.h (simple_constant_p): Declare.\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Variable>: Strip\n\tthe qualifiers from the type of a simple constant.\n\t(simple_constant_p): New predicate.\n\t* gcc-interface/trans.cc (node_is_atomic): Return true for objects\n\twith atomic type except for simple constants.\n\t(node_is_volatile_full_access): Return false for simple constants\n\twith VFA type.", "tree": {"sha": "45caefd943d0502d4ab25014c1459a99b77d19cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45caefd943d0502d4ab25014c1459a99b77d19cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1141fbd71ea1782c6eac750cfed809f0706aaafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1141fbd71ea1782c6eac750cfed809f0706aaafc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1141fbd71ea1782c6eac750cfed809f0706aaafc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1141fbd71ea1782c6eac750cfed809f0706aaafc/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40242ebb71ed7a03ab23349a893afe6140c512d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40242ebb71ed7a03ab23349a893afe6140c512d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40242ebb71ed7a03ab23349a893afe6140c512d1"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "99277f0730617dcf17a522383e2590d781a168b4", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1141fbd71ea1782c6eac750cfed809f0706aaafc/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1141fbd71ea1782c6eac750cfed809f0706aaafc/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=1141fbd71ea1782c6eac750cfed809f0706aaafc", "patch": "@@ -660,8 +660,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t like variables.  */\n       if (definition\n \t  && !gnu_expr\n-\t  && No (Address_Clause (gnat_entity))\n \t  && !No_Initialization (gnat_decl)\n+\t  && No (Address_Clause (gnat_entity))\n \t  && No (gnat_renamed_obj))\n \t{\n \t  gnu_decl = error_mark_node;\n@@ -781,6 +781,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tif (kind == E_Loop_Parameter)\n \t  gnu_type = get_base_type (gnu_type);\n \n+\t/* If this is a simple constant, strip the qualifiers from its type,\n+\t   since the constant represents only its value.  */\n+\telse if (simple_constant_p (gnat_entity))\n+\t  gnu_type = TYPE_MAIN_VARIANT (gnu_type);\n+\n \t/* Reject non-renamed objects whose type is an unconstrained array or\n \t   any object whose type is a dummy type or void.  */\n \tif ((TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE\n@@ -9541,6 +9546,19 @@ promote_object_alignment (tree gnu_type, tree gnu_size, Entity_Id gnat_entity)\n   return align;\n }\n \n+/* Return whether GNAT_ENTITY is a simple constant, i.e. it represents only\n+   its value and reading it has no side effects.  */\n+\n+bool\n+simple_constant_p (Entity_Id gnat_entity)\n+{\n+  return Ekind (gnat_entity) == E_Constant\n+\t && Present (Constant_Value (gnat_entity))\n+\t && !No_Initialization (gnat_entity)\n+\t && No (Address_Clause (gnat_entity))\n+\t && No (Renamed_Object (gnat_entity));\n+}\n+\n /* Verify that TYPE is something we can implement atomically.  If not, issue\n    an error for GNAT_ENTITY.  COMPONENT_P is true if we are being called to\n    process a component type.  */"}, {"sha": "1c1397a2d4fdfcc0e94b1cabf851f2e6e1975e9f", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1141fbd71ea1782c6eac750cfed809f0706aaafc/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1141fbd71ea1782c6eac750cfed809f0706aaafc/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=1141fbd71ea1782c6eac750cfed809f0706aaafc", "patch": "@@ -998,6 +998,10 @@ extern Entity_Id get_debug_scope (Node_Id gnat_node, bool *is_subprogram);\n    should be synchronized with Exp_Dbug.Debug_Renaming_Declaration.  */\n extern bool can_materialize_object_renaming_p (Node_Id expr);\n \n+/* Return whether GNAT_ENTITY is a simple constant, i.e. it represents only\n+   its value and reading it has no side effects.  */\n+extern bool simple_constant_p (Entity_Id gnat_entity);\n+\n /* Return the size of TYPE, which must be a positive power of 2.  */\n extern unsigned int resolve_atomic_size (tree type);\n "}, {"sha": "aec27e16569ac15637b134bf116b3f37a76d0357", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1141fbd71ea1782c6eac750cfed809f0706aaafc/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1141fbd71ea1782c6eac750cfed809f0706aaafc/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=1141fbd71ea1782c6eac750cfed809f0706aaafc", "patch": "@@ -4111,9 +4111,11 @@ node_is_atomic (Node_Id gnat_node)\n     case N_Identifier:\n     case N_Expanded_Name:\n       gnat_entity = Entity (gnat_node);\n-      if (Ekind (gnat_entity) != E_Variable)\n+      if (!Is_Object (gnat_entity))\n \tbreak;\n-      return Is_Atomic (gnat_entity) || Is_Atomic (Etype (gnat_entity));\n+      return Is_Atomic (gnat_entity)\n+\t     || (Is_Atomic (Etype (gnat_entity))\n+\t\t && !simple_constant_p (gnat_entity));\n \n     case N_Selected_Component:\n       return Is_Atomic (Etype (gnat_node))\n@@ -4152,7 +4154,8 @@ node_is_volatile_full_access (Node_Id gnat_node)\n       if (!Is_Object (gnat_entity))\n \tbreak;\n       return Is_Volatile_Full_Access (gnat_entity)\n-\t     || Is_Volatile_Full_Access (Etype (gnat_entity));\n+\t     || (Is_Volatile_Full_Access (Etype (gnat_entity))\n+\t\t && !simple_constant_p (gnat_entity));\n \n     case N_Selected_Component:\n       return Is_Volatile_Full_Access (Etype (gnat_node))"}]}