{"sha": "f17178cfe8771c6aed07946877f91f26a863fd11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3MTc4Y2ZlODc3MWM2YWVkMDc5NDY4NzdmOTFmMjZhODYzZmQxMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-04T13:45:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-04T13:45:53Z"}, "message": "fr30-protos.h: Remove the prototypes for stack_add_operand...\n\n\t* config/fr30/fr30-protos.h: Remove the prototypes for\n\tstack_add_operand, add_immediate_operand,\n\thigh_register_operand, low_register_operand, call_operand,\n\tdi_operand, and nonimmediate_di_operand.\n\t* config/fr30/fr30.c (stack_add_operand,\n\tadd_immediate_operand, high_register_operand,\n\tlow_register_operand, call_operand, di_operand,\n\tnonimmediate_di_operand): Move to predicates.md.\n\t* config/fr30/fr30.h (PREDICATE_CODES): Remove.\n\t* config/fr30/fr30.md: Include predicates.md.\n\t* config/fr30/predicates.md: New.\n\nFrom-SVN: r97540", "tree": {"sha": "cc9bb30f184f1c185eaac8c5b6108fde24c5c057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc9bb30f184f1c185eaac8c5b6108fde24c5c057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17178cfe8771c6aed07946877f91f26a863fd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17178cfe8771c6aed07946877f91f26a863fd11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17178cfe8771c6aed07946877f91f26a863fd11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17178cfe8771c6aed07946877f91f26a863fd11/comments", "author": null, "committer": null, "parents": [{"sha": "c6db4d01cb4525127afdaf309954b18d25cef528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6db4d01cb4525127afdaf309954b18d25cef528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6db4d01cb4525127afdaf309954b18d25cef528"}], "stats": {"total": 260, "additions": 142, "deletions": 118}, "files": [{"sha": "e224af256c0c32110c893bb0b6c18c5076933f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17178cfe8771c6aed07946877f91f26a863fd11", "patch": "@@ -1,3 +1,17 @@\n+2005-04-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/fr30/fr30-protos.h: Remove the prototypes for\n+\tstack_add_operand, add_immediate_operand,\n+\thigh_register_operand, low_register_operand, call_operand,\n+\tdi_operand, and nonimmediate_di_operand.\n+\t* config/fr30/fr30.c (stack_add_operand,\n+\tadd_immediate_operand, high_register_operand,\n+\tlow_register_operand, call_operand, di_operand,\n+\tnonimmediate_di_operand): Move to predicates.md.\n+\t* config/fr30/fr30.h (PREDICATE_CODES): Remove.\n+\t* config/fr30/fr30.md: Include predicates.md.\n+\t* config/fr30/predicates.md: New.\n+\n 2005-04-04  Alan Modra  <amodra@bigpond.net.au>\n \n \t* passes.c (rest_of_handle_final): NULL unlikely_text_section_name"}, {"sha": "db9895a411f8b16d4ad758db7129c161f7c9ce3b", "filename": "gcc/config/fr30/fr30-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h?ref=f17178cfe8771c6aed07946877f91f26a863fd11", "patch": "@@ -32,13 +32,6 @@ extern int   fr30_num_arg_regs (enum machine_mode, tree);\n #endif /* TREE_CODE */\n #ifdef HAVE_MACHINE_MODES\n #define Mmode enum machine_mode\n-extern int   stack_add_operand (rtx, Mmode);\n-extern int   add_immediate_operand (rtx, Mmode);\n-extern int   high_register_operand (rtx, Mmode);\n-extern int   low_register_operand (rtx, Mmode);\n-extern int   call_operand (rtx, Mmode);\n-extern int   di_operand (rtx, Mmode);\n-extern int   nonimmediate_di_operand (rtx, Mmode);\n extern int   fr30_const_double_is_zero (rtx);\n #undef Mmode\n #endif /* HAVE_MACHINE_MODES */"}, {"sha": "e796406ac737d9e94b89afa8c6395cdf08f2f196", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=f17178cfe8771c6aed07946877f91f26a863fd11", "patch": "@@ -738,104 +738,6 @@ fr30_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n #define Mmode enum machine_mode\n #endif\n \n-/* Returns true if OPERAND is an integer value suitable for use in\n-   an ADDSP instruction.  */\n-int\n-stack_add_operand (rtx operand, Mmode mode ATTRIBUTE_UNUSED)\n-{\n-  return\n-    (GET_CODE (operand) == CONST_INT\n-     && INTVAL (operand) >= -512\n-     && INTVAL (operand) <=  508\n-     && ((INTVAL (operand) & 3) == 0));\n-}\n-\n-/* Returns true if OPERAND is an integer value suitable for use in\n-   an ADD por ADD2 instruction, or if it is a register.  */\n-int\n-add_immediate_operand (rtx operand, Mmode mode ATTRIBUTE_UNUSED)\n-{\n-  return\n-    (GET_CODE (operand) == REG\n-     || (GET_CODE (operand) == CONST_INT\n-\t && INTVAL (operand) >= -16\n-\t && INTVAL (operand) <=  15));\n-}\n-\n-/* Returns true if OPERAND is hard register in the range 8 - 15.  */\n-int\n-high_register_operand (rtx operand, Mmode mode ATTRIBUTE_UNUSED)\n-{\n-  return\n-    (GET_CODE (operand) == REG\n-     && REGNO (operand) <= 15\n-     && REGNO (operand) >= 8);\n-}\n-\n-/* Returns true if OPERAND is hard register in the range 0 - 7.  */\n-int\n-low_register_operand (rtx operand, Mmode mode ATTRIBUTE_UNUSED)\n-{\n-  return\n-    (GET_CODE (operand) == REG\n-     && REGNO (operand) <= 7);\n-}\n-\n-/* Returns true if OPERAND is suitable for use in a CALL insn.  */\n-int\n-call_operand (rtx operand, Mmode mode ATTRIBUTE_UNUSED)\n-{\n-  return (GET_CODE (operand) == MEM\n-\t  && (GET_CODE (XEXP (operand, 0)) == SYMBOL_REF\n-\t      || GET_CODE (XEXP (operand, 0)) == REG));\n-}\n-\n-/* Returns TRUE if OP is a valid operand of a DImode operation.  */\n-int\n-di_operand (rtx op, Mmode mode)\n-{\n-  if (register_operand (op, mode))\n-    return TRUE;\n-\n-  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && GET_MODE (op) != DImode)\n-    return FALSE;\n-\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  switch (GET_CODE (op))\n-    {\n-    case CONST_DOUBLE:\n-    case CONST_INT:\n-      return TRUE;\n-\n-    case MEM:\n-      return memory_address_p (DImode, XEXP (op, 0));\n-\n-    default:\n-      return FALSE;\n-    }\n-}\n-\n-/* Returns TRUE if OP is a DImode register or MEM.  */\n-int\n-nonimmediate_di_operand (rtx op, Mmode mode)\n-{\n-  if (register_operand (op, mode))\n-    return TRUE;\n-\n-  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && GET_MODE (op) != DImode)\n-    return FALSE;\n-\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  if (GET_CODE (op) == MEM)\n-    return memory_address_p (DImode, XEXP (op, 0));\n-\n-  return FALSE;\n-}\n-\n /* Returns true iff all the registers in the operands array\n    are in descending or ascending order.  */\n int"}, {"sha": "96596e11e063df9406267c8f30f0028861096aa8", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=f17178cfe8771c6aed07946877f91f26a863fd11", "patch": "@@ -1121,18 +1121,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n extern struct rtx_def * fr30_compare_op0;\n extern struct rtx_def * fr30_compare_op1;\n \n-/*}}}*/ \f\n-/*{{{  PREDICATE_CODES.  */ \n-\n-#define PREDICATE_CODES\t\t\t\t\t\\\n-  { \"stack_add_operand\",\t{ CONST_INT }},\t\t\\\n-  { \"high_register_operand\",\t{ REG }},\t\t\\\n-  { \"low_register_operand\",\t{ REG }},\t\t\\\n-  { \"call_operand\",\t\t{ MEM }},\t\t\\\n-  { \"di_operand\",\t\t{ CONST_INT, CONST_DOUBLE, REG, MEM }},\t\\\n-  { \"nonimmediate_di_operand\",\t{ REG, MEM }},\t\t\\\n-  { \"add_immediate_operand\",\t{ REG, CONST_INT }},\n-\n /*}}}*/ \f\n \n /* Local Variables: */"}, {"sha": "18064ccf44f29235b853de45c93a88e00e8c2ccf", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=f17178cfe8771c6aed07946877f91f26a863fd11", "patch": "@@ -1,5 +1,6 @@\n ;; FR30 machine description.\n-;; Copyright (C) 1998, 1999, 2000, 2002, 2004 Free Software Foundation, Inc.\n+;; Copyright (C) 1998, 1999, 2000, 2002, 2004, 2005\n+;; Free Software Foundation, Inc.\n ;; Contributed by Cygnus Solutions.\n \n ;; This file is part of GCC.\n@@ -53,6 +54,8 @@\n    (nil)]\n )\n \n+(include \"predicates.md\")\n+\n ;;}}}\n ;;{{{ Moves \n "}, {"sha": "8926a1939b6ba1dac442785168cb59a932d356fb", "filename": "gcc/config/fr30/predicates.md", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17178cfe8771c6aed07946877f91f26a863fd11/gcc%2Fconfig%2Ffr30%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Fpredicates.md?ref=f17178cfe8771c6aed07946877f91f26a863fd11", "patch": "@@ -0,0 +1,124 @@\n+;; Predicate definitions for FR30.\n+;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+;; Returns true if OP is an integer value suitable for use in an\n+;; ADDSP instruction.\n+\n+(define_predicate \"stack_add_operand\"\n+  (match_code \"const_int\")\n+{\n+  return\n+    (GET_CODE (op) == CONST_INT\n+     && INTVAL (op) >= -512\n+     && INTVAL (op) <=  508\n+     && ((INTVAL (op) & 3) == 0));\n+})\n+\n+;; Returns true if OP is hard register in the range 8 - 15.\n+\n+(define_predicate \"high_register_operand\"\n+  (match_code \"reg\")\n+{\n+  return\n+    (GET_CODE (op) == REG\n+     && REGNO (op) <= 15\n+     && REGNO (op) >= 8);\n+})\n+\n+;; Returns true if OP is hard register in the range 0 - 7.\n+\n+(define_predicate \"low_register_operand\"\n+  (match_code \"reg\")\n+{\n+  return\n+    (GET_CODE (op) == REG\n+     && REGNO (op) <= 7);\n+})\n+\n+;; Returns true if OP is suitable for use in a CALL insn.\n+\n+(define_predicate \"call_operand\"\n+  (match_code \"mem\")\n+{\n+  return (GET_CODE (op) == MEM\n+\t  && (GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n+\t      || GET_CODE (XEXP (op, 0)) == REG));\n+})\n+\n+;; Returns TRUE if OP is a valid operand of a DImode operation.\n+\n+(define_predicate \"di_operand\"\n+  (match_code \"const_int,const_double,reg,mem\")\n+{\n+  if (register_operand (op, mode))\n+    return TRUE;\n+\n+  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && GET_MODE (op) != DImode)\n+    return FALSE;\n+\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+\n+  switch (GET_CODE (op))\n+    {\n+    case CONST_DOUBLE:\n+    case CONST_INT:\n+      return TRUE;\n+\n+    case MEM:\n+      return memory_address_p (DImode, XEXP (op, 0));\n+\n+    default:\n+      return FALSE;\n+    }\n+})\n+\n+;; Returns TRUE if OP is a DImode register or MEM.\n+\n+(define_predicate \"nonimmediate_di_operand\"\n+  (match_code \"reg,mem\")\n+{\n+  if (register_operand (op, mode))\n+    return TRUE;\n+\n+  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && GET_MODE (op) != DImode)\n+    return FALSE;\n+\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+\n+  if (GET_CODE (op) == MEM)\n+    return memory_address_p (DImode, XEXP (op, 0));\n+\n+  return FALSE;\n+})\n+\n+;; Returns true if OP is an integer value suitable for use in an ADD\n+;; or ADD2 instruction, or if it is a register.\n+\n+(define_predicate \"add_immediate_operand\"\n+  (match_code \"reg,const_int\")\n+{\n+  return\n+    (GET_CODE (op) == REG\n+     || (GET_CODE (op) == CONST_INT\n+\t && INTVAL (op) >= -16\n+\t && INTVAL (op) <=  15));\n+})"}]}