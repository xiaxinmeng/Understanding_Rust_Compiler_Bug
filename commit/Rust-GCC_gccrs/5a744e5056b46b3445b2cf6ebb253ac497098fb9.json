{"sha": "5a744e5056b46b3445b2cf6ebb253ac497098fb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3NDRlNTA1NmI0NmIzNDQ1YjJjZjZlYmIyNTNhYzQ5NzA5OGZiOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-21T02:24:09Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:29Z"}, "message": "AVX512FP16: Add vcvtph2pd/vcvtph2psx/vcvtpd2ph/vcvtps2phx.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_cvtph_pd):\n\tNew intrinsic.\n\t(_mm512_mask_cvtph_pd): Likewise.\n\t(_mm512_maskz_cvtph_pd): Likewise.\n\t(_mm512_cvt_roundph_pd): Likewise.\n\t(_mm512_mask_cvt_roundph_pd): Likewise.\n\t(_mm512_maskz_cvt_roundph_pd): Likewise.\n\t(_mm512_cvtxph_ps): Likewise.\n\t(_mm512_mask_cvtxph_ps): Likewise.\n\t(_mm512_maskz_cvtxph_ps): Likewise.\n\t(_mm512_cvtx_roundph_ps): Likewise.\n\t(_mm512_mask_cvtx_roundph_ps): Likewise.\n\t(_mm512_maskz_cvtx_roundph_ps): Likewise.\n\t(_mm512_cvtxps_ph): Likewise.\n\t(_mm512_mask_cvtxps_ph): Likewise.\n\t(_mm512_maskz_cvtxps_ph): Likewise.\n\t(_mm512_cvtx_roundps_ph): Likewise.\n\t(_mm512_mask_cvtx_roundps_ph): Likewise.\n\t(_mm512_maskz_cvtx_roundps_ph): Likewise.\n\t(_mm512_cvtpd_ph): Likewise.\n\t(_mm512_mask_cvtpd_ph): Likewise.\n\t(_mm512_maskz_cvtpd_ph): Likewise.\n\t(_mm512_cvt_roundpd_ph): Likewise.\n\t(_mm512_mask_cvt_roundpd_ph): Likewise.\n\t(_mm512_maskz_cvt_roundpd_ph): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_cvtph_pd):\n\tNew intrinsic.\n\t(_mm_mask_cvtph_pd): Likewise.\n\t(_mm_maskz_cvtph_pd): Likewise.\n\t(_mm256_cvtph_pd): Likewise.\n\t(_mm256_mask_cvtph_pd): Likewise.\n\t(_mm256_maskz_cvtph_pd): Likewise.\n\t(_mm_cvtxph_ps): Likewise.\n\t(_mm_mask_cvtxph_ps): Likewise.\n\t(_mm_maskz_cvtxph_ps): Likewise.\n\t(_mm256_cvtxph_ps): Likewise.\n\t(_mm256_mask_cvtxph_ps): Likewise.\n\t(_mm256_maskz_cvtxph_ps): Likewise.\n\t(_mm_cvtxps_ph): Likewise.\n\t(_mm_mask_cvtxps_ph): Likewise.\n\t(_mm_maskz_cvtxps_ph): Likewise.\n\t(_mm256_cvtxps_ph): Likewise.\n\t(_mm256_mask_cvtxps_ph): Likewise.\n\t(_mm256_maskz_cvtxps_ph): Likewise.\n\t(_mm_cvtpd_ph): Likewise.\n\t(_mm_mask_cvtpd_ph): Likewise.\n\t(_mm_maskz_cvtpd_ph): Likewise.\n\t(_mm256_cvtpd_ph): Likewise.\n\t(_mm256_mask_cvtpd_ph): Likewise.\n\t(_mm256_maskz_cvtpd_ph): Likewise.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-expand.c: Handle new builtin types.\n\t* config/i386/sse.md\n\t(VF4_128_8_256): New.\n\t(VF48H_AVX512VL): Ditto.\n\t(ssePHmode): Add HF vector modes.\n\t(castmode): Add new convertable modes.\n\t(qq2phsuff): Ditto.\n\t(ph2pssuffix): New.\n\t(avx512fp16_vcvt<castmode>2ph_<mode><mask_name><round_name>): Ditto.\n\t(avx512fp16_vcvt<castmode>2ph_<mode>): Ditto.\n\t(*avx512fp16_vcvt<castmode>2ph_<mode>): Ditto.\n\t(avx512fp16_vcvt<castmode>2ph_<mode>_mask): Ditto.\n\t(*avx512fp16_vcvt<castmode>2ph_<mode>_mask): Ditto.\n\t(*avx512fp16_vcvt<castmode>2ph_<mode>_mask_1): Ditto.\n\t(avx512fp16_float_extend_ph<mode>2<mask_name><round_saeonly_name>):\n\tDitto.\n\t(avx512fp16_float_extend_ph<mode>2<mask_name>): Ditto.\n\t(*avx512fp16_float_extend_ph<mode>2_load<mask_name>): Ditto.\n\t(avx512fp16_float_extend_phv2df2<mask_name>): Ditto.\n\t(*avx512fp16_float_extend_phv2df2_load<mask_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "0548f158a3cebff9779c38e6de751b7e138f4dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0548f158a3cebff9779c38e6de751b7e138f4dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a744e5056b46b3445b2cf6ebb253ac497098fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a744e5056b46b3445b2cf6ebb253ac497098fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a744e5056b46b3445b2cf6ebb253ac497098fb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a744e5056b46b3445b2cf6ebb253ac497098fb9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6babedbbaee5a6e6acaf148f7b963bb813fe0041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6babedbbaee5a6e6acaf148f7b963bb813fe0041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6babedbbaee5a6e6acaf148f7b963bb813fe0041"}], "stats": {"total": 800, "additions": 791, "deletions": 9}, "files": [{"sha": "57c264ed9f3b940ae836bc151249325ae4acdc2d", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -4312,6 +4312,303 @@ _mm_cvt_roundu64_sh (__m128h __A, unsigned long long __B, const int __R)\n #endif /* __OPTIMIZE__ */\n #endif /* __x86_64__ */\n \n+/* Intrinsics vcvtph2pd.  */\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtph_pd (__m128h __A)\n+{\n+  return __builtin_ia32_vcvtph2pd512_mask_round (__A,\n+\t\t\t\t\t\t _mm512_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtph_pd (__m512d __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvtph2pd512_mask_round (__C, __A, __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtph_pd (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtph2pd512_mask_round (__B,\n+\t\t\t\t\t\t _mm512_setzero_pd (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundph_pd (__m128h __A, int __B)\n+{\n+  return __builtin_ia32_vcvtph2pd512_mask_round (__A,\n+\t\t\t\t\t\t _mm512_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundph_pd (__m512d __A, __mmask8 __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vcvtph2pd512_mask_round (__C, __A, __B, __D);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundph_pd (__mmask8 __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vcvtph2pd512_mask_round (__B,\n+\t\t\t\t\t\t _mm512_setzero_pd (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundph_pd(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvtph2pd512_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t   _mm512_setzero_pd (),\t\\\n+\t\t\t\t\t   (__mmask8)-1,\t\t\\\n+\t\t\t\t\t   (B)))\n+\n+#define _mm512_mask_cvt_roundph_pd(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vcvtph2pd512_mask_round ((C), (A), (B), (D)))\n+\n+#define _mm512_maskz_cvt_roundph_pd(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vcvtph2pd512_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t   _mm512_setzero_pd (),\t\\\n+\t\t\t\t\t   (A),\t\t\t\\\n+\t\t\t\t\t   (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtph2psx.  */\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtxph_ps (__m256h __A)\n+{\n+  return __builtin_ia32_vcvtph2psx512_mask_round (__A,\n+\t\t\t\t\t\t  _mm512_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask16) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtxph_ps (__m512 __A, __mmask16 __B, __m256h __C)\n+{\n+  return __builtin_ia32_vcvtph2psx512_mask_round (__C, __A, __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtxph_ps (__mmask16 __A, __m256h __B)\n+{\n+  return __builtin_ia32_vcvtph2psx512_mask_round (__B,\n+\t\t\t\t\t\t  _mm512_setzero_ps (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtx_roundph_ps (__m256h __A, int __B)\n+{\n+  return __builtin_ia32_vcvtph2psx512_mask_round (__A,\n+\t\t\t\t\t\t  _mm512_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask16) -1,\n+\t\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtx_roundph_ps (__m512 __A, __mmask16 __B, __m256h __C, int __D)\n+{\n+  return __builtin_ia32_vcvtph2psx512_mask_round (__C, __A, __B, __D);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtx_roundph_ps (__mmask16 __A, __m256h __B, int __C)\n+{\n+  return __builtin_ia32_vcvtph2psx512_mask_round (__B,\n+\t\t\t\t\t\t  _mm512_setzero_ps (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __C);\n+}\n+\n+#else\n+#define _mm512_cvtx_roundph_ps(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvtph2psx512_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_ps (),\t\\\n+\t\t\t\t\t    (__mmask16)-1,\t\t\\\n+\t\t\t\t\t    (B)))\n+\n+#define _mm512_mask_cvtx_roundph_ps(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vcvtph2psx512_mask_round ((C), (A), (B), (D)))\n+\n+#define _mm512_maskz_cvtx_roundph_ps(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vcvtph2psx512_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_ps (),\t\\\n+\t\t\t\t\t    (A),\t\t\t\\\n+\t\t\t\t\t    (C)))\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtps2ph.  */\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtxps_ph (__m512 __A)\n+{\n+  return __builtin_ia32_vcvtps2phx512_mask_round ((__v16sf) __A,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  (__mmask16) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtxps_ph (__m256h __A, __mmask16 __B, __m512 __C)\n+{\n+  return __builtin_ia32_vcvtps2phx512_mask_round ((__v16sf) __C,\n+\t\t\t\t\t\t  __A, __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtxps_ph (__mmask16 __A, __m512 __B)\n+{\n+  return __builtin_ia32_vcvtps2phx512_mask_round ((__v16sf) __B,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtx_roundps_ph (__m512 __A, int __B)\n+{\n+  return __builtin_ia32_vcvtps2phx512_mask_round ((__v16sf) __A,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  (__mmask16) -1,\n+\t\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtx_roundps_ph (__m256h __A, __mmask16 __B, __m512 __C, int __D)\n+{\n+  return __builtin_ia32_vcvtps2phx512_mask_round ((__v16sf) __C,\n+\t\t\t\t\t\t  __A, __B, __D);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtx_roundps_ph (__mmask16 __A, __m512 __B, int __C)\n+{\n+  return __builtin_ia32_vcvtps2phx512_mask_round ((__v16sf) __B,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  __A, __C);\n+}\n+\n+#else\n+#define _mm512_cvtx_roundps_ph(A, B)\t\t\t\t\\\n+  (__builtin_ia32_vcvtps2phx512_mask_round ((__v16sf)(A),\t\\\n+\t\t\t\t\t    _mm256_setzero_ph (),\\\n+\t\t\t\t\t    (__mmask16)-1, (B)))\n+\n+#define _mm512_mask_cvtx_roundps_ph(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vcvtps2phx512_mask_round ((__v16sf)(C),\t\\\n+\t\t\t\t\t    (A), (B), (D)))\n+\n+#define _mm512_maskz_cvtx_roundps_ph(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvtps2phx512_mask_round ((__v16sf)(B),\t\\\n+\t\t\t\t\t    _mm256_setzero_ph (),\\\n+\t\t\t\t\t    (A), (C)))\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtpd2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtpd_ph (__m512d __A)\n+{\n+  return __builtin_ia32_vcvtpd2ph512_mask_round ((__v8df) __A,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtpd_ph (__m128h __A, __mmask8 __B, __m512d __C)\n+{\n+  return __builtin_ia32_vcvtpd2ph512_mask_round ((__v8df) __C,\n+\t\t\t\t\t\t __A, __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtpd_ph (__mmask8 __A, __m512d __B)\n+{\n+  return __builtin_ia32_vcvtpd2ph512_mask_round ((__v8df) __B,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundpd_ph (__m512d __A, int __B)\n+{\n+  return __builtin_ia32_vcvtpd2ph512_mask_round ((__v8df) __A,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundpd_ph (__m128h __A, __mmask8 __B, __m512d __C, int __D)\n+{\n+  return __builtin_ia32_vcvtpd2ph512_mask_round ((__v8df) __C,\n+\t\t\t\t\t\t __A, __B, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundpd_ph (__mmask8 __A, __m512d __B, int __C)\n+{\n+  return __builtin_ia32_vcvtpd2ph512_mask_round ((__v8df) __B,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t __A, __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundpd_ph(A, B)\t\t\t\t\\\n+  (__builtin_ia32_vcvtpd2ph512_mask_round ((__v8df)(A),\t\t\\\n+\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask8)-1, (B)))\n+\n+#define _mm512_mask_cvt_roundpd_ph(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vcvtpd2ph512_mask_round ((__v8df)(C),\t\t\\\n+\t\t\t\t\t   (A), (B), (D)))\n+\n+#define _mm512_maskz_cvt_roundpd_ph(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvtpd2ph512_mask_round ((__v8df)(B),\t\t\\\n+\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t   (A), (C)))\n+\n+#endif /* __OPTIMIZE__ */\n \n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__"}, {"sha": "59128fdffb8b3a988d1126576e3550e66b9c7ee7", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -1952,6 +1952,206 @@ _mm256_maskz_cvtepu16_ph (__mmask16 __A, __m256i __B)\n \t\t\t\t\t   __A);\n }\n \n+/* Intrinsics vcvtph2pd.  */\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtph_pd (__m128h __A)\n+{\n+  return __builtin_ia32_vcvtph2pd128_mask (__A,\n+\t\t\t\t\t   _mm_setzero_pd (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtph_pd (__m128d __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvtph2pd128_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtph_pd (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtph2pd128_mask (__B, _mm_setzero_pd (), __A);\n+}\n+\n+extern __inline __m256d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtph_pd (__m128h __A)\n+{\n+  return __builtin_ia32_vcvtph2pd256_mask (__A,\n+\t\t\t\t\t   _mm256_setzero_pd (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m256d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtph_pd (__m256d __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvtph2pd256_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m256d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtph_pd (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtph2pd256_mask (__B,\n+\t\t\t\t\t   _mm256_setzero_pd (),\n+\t\t\t\t\t   __A);\n+}\n+\n+/* Intrinsics vcvtph2ps.  */\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtxph_ps (__m128h __A)\n+{\n+  return __builtin_ia32_vcvtph2psx128_mask (__A,\n+\t\t\t\t\t   _mm_setzero_ps (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtxph_ps (__m128 __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvtph2psx128_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtxph_ps (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtph2psx128_mask (__B, _mm_setzero_ps (), __A);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtxph_ps (__m128h __A)\n+{\n+  return __builtin_ia32_vcvtph2psx256_mask (__A,\n+\t\t\t\t\t    _mm256_setzero_ps (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtxph_ps (__m256 __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvtph2psx256_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtxph_ps (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtph2psx256_mask (__B,\n+\t\t\t\t\t    _mm256_setzero_ps (),\n+\t\t\t\t\t    __A);\n+}\n+\n+/* Intrinsics vcvtxps2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtxps_ph (__m128 __A)\n+{\n+  return __builtin_ia32_vcvtps2phx128_mask ((__v4sf) __A,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtxps_ph (__m128h __A, __mmask8 __B, __m128 __C)\n+{\n+  return __builtin_ia32_vcvtps2phx128_mask ((__v4sf) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtxps_ph (__mmask8 __A, __m128 __B)\n+{\n+  return __builtin_ia32_vcvtps2phx128_mask ((__v4sf) __B,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtxps_ph (__m256 __A)\n+{\n+  return __builtin_ia32_vcvtps2phx256_mask ((__v8sf) __A,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtxps_ph (__m128h __A, __mmask8 __B, __m256 __C)\n+{\n+  return __builtin_ia32_vcvtps2phx256_mask ((__v8sf) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtxps_ph (__mmask8 __A, __m256 __B)\n+{\n+  return __builtin_ia32_vcvtps2phx256_mask ((__v8sf) __B,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n+/* Intrinsics vcvtpd2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtpd_ph (__m128d __A)\n+{\n+  return __builtin_ia32_vcvtpd2ph128_mask ((__v2df) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtpd_ph (__m128h __A, __mmask8 __B, __m128d __C)\n+{\n+  return __builtin_ia32_vcvtpd2ph128_mask ((__v2df) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtpd_ph (__mmask8 __A, __m128d __B)\n+{\n+  return __builtin_ia32_vcvtpd2ph128_mask ((__v2df) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtpd_ph (__m256d __A)\n+{\n+  return __builtin_ia32_vcvtpd2ph256_mask ((__v4df) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtpd_ph (__m128h __A, __mmask8 __B, __m256d __C)\n+{\n+  return __builtin_ia32_vcvtpd2ph256_mask ((__v4df) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtpd_ph (__mmask8 __A, __m256d __B)\n+{\n+  return __builtin_ia32_vcvtpd2ph256_mask ((__v4df) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "3a4974f6dcdab212df08ef0b82f42b1be430e71e", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -1321,13 +1321,21 @@ DEF_FUNCTION_TYPE (V8HF, V8HF, UINT, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, UINT64, INT)\n DEF_FUNCTION_TYPE (V2DI, V8HF, V2DI, UQI)\n DEF_FUNCTION_TYPE (V4DI, V8HF, V4DI, UQI)\n+DEF_FUNCTION_TYPE (V2DF, V8HF, V2DF, UQI)\n+DEF_FUNCTION_TYPE (V4DF, V8HF, V4DF, UQI)\n DEF_FUNCTION_TYPE (V4SI, V8HF, V4SI, UQI)\n+DEF_FUNCTION_TYPE (V4SF, V8HF, V4SF, UQI)\n DEF_FUNCTION_TYPE (V8SI, V8HF, V8SI, UQI)\n+DEF_FUNCTION_TYPE (V8SF, V8HF, V8SF, UQI)\n DEF_FUNCTION_TYPE (V8HI, V8HF, V8HI, UQI)\n DEF_FUNCTION_TYPE (V8HF, V4SI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V4SF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8SI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V8SF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V2DI, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V4DI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V2DF, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V4DF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HI, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n@@ -1336,17 +1344,21 @@ DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI, INT)\n DEF_FUNCTION_TYPE (V8DI, V8HF, V8DI, UQI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8HF, V8DF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8DI, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8DF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16HI, V16HF, V16HI, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HI, V16HF, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V16SI, V16HF, V16SI, UHI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16HF, V16SF, UHI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, INT, V16HF, UHI)\n DEF_FUNCTION_TYPE (UHI, V16HF, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16SI, V16HF, UHI, INT)\n+DEF_FUNCTION_TYPE (V16HF, V16SF, V16HF, UHI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)"}, {"sha": "f2af774eb8c2847f98181f68698ebfb1e2621ec4", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -2867,6 +2867,14 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp1\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtqq2ph_v4di_mask, \"__builtin_ia32_vcvtqq2ph256_mask\", IX86_BUILTIN_VCVTQQ2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V4DI_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuqq2ph_v2di_mask, \"__builtin_ia32_vcvtuqq2ph128_mask\", IX86_BUILTIN_VCVTUQQ2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V2DI_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuqq2ph_v4di_mask, \"__builtin_ia32_vcvtuqq2ph256_mask\", IX86_BUILTIN_VCVTUQQ2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V4DI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv2df2_mask, \"__builtin_ia32_vcvtph2pd128_mask\", IX86_BUILTIN_VCVTPH2PD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V8HF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv4df2_mask, \"__builtin_ia32_vcvtph2pd256_mask\", IX86_BUILTIN_VCVTPH2PD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V8HF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv4sf2_mask, \"__builtin_ia32_vcvtph2psx128_mask\", IX86_BUILTIN_VCVTPH2PSX128_MASK, UNKNOWN, (int) V4SF_FTYPE_V8HF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv8sf2_mask, \"__builtin_ia32_vcvtph2psx256_mask\", IX86_BUILTIN_VCVTPH2PSX256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8HF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtps2ph_v4sf_mask, \"__builtin_ia32_vcvtps2phx128_mask\", IX86_BUILTIN_VCVTPS2PHX128_MASK, UNKNOWN, (int) V8HF_FTYPE_V4SF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtps2ph_v8sf_mask, \"__builtin_ia32_vcvtps2phx256_mask\", IX86_BUILTIN_VCVTPS2PHX256_MASK, UNKNOWN, (int) V8HF_FTYPE_V8SF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtpd2ph_v2df_mask, \"__builtin_ia32_vcvtpd2ph128_mask\", IX86_BUILTIN_VCVTPD2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V2DF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtpd2ph_v4df_mask, \"__builtin_ia32_vcvtpd2ph256_mask\", IX86_BUILTIN_VCVTPD2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V4DF_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3124,6 +3132,11 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsi2sh_round, \"__b\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsi2shq_round, \"__builtin_ia32_vcvtsi2sh64_round\", IX86_BUILTIN_VCVTSI2SH64_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT64_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtusi2sh_round, \"__builtin_ia32_vcvtusi2sh32_round\", IX86_BUILTIN_VCVTUSI2SH32_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_UINT_INT)\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtusi2shq_round, \"__builtin_ia32_vcvtusi2sh64_round\", IX86_BUILTIN_VCVTUSI2SH64_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_UINT64_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv8df2_mask_round, \"__builtin_ia32_vcvtph2pd512_mask_round\", IX86_BUILTIN_VCVTPH2PD512_MASK_ROUND, UNKNOWN, (int) V8DF_FTYPE_V8HF_V8DF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv16sf2_mask_round, \"__builtin_ia32_vcvtph2psx512_mask_round\", IX86_BUILTIN_VCVTPH2PSX512_MASK_ROUND, UNKNOWN, (int) V16SF_FTYPE_V16HF_V16SF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtpd2ph_v8df_mask_round, \"__builtin_ia32_vcvtpd2ph512_mask_round\", IX86_BUILTIN_VCVTPD2PH512_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8DF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtps2ph_v16sf_mask_round, \"__builtin_ia32_vcvtps2phx512_mask_round\", IX86_BUILTIN_VCVTPS2PHX512_MASK_ROUND, UNKNOWN, (int) V16HF_FTYPE_V16SF_V16HF_UHI_INT)\n+\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "5581975547d2ad98d9c85e0ad5cf022317ea7a7c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -9744,22 +9744,30 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8SF_FTYPE_V8HI_V8SF_UQI:\n     case V4SF_FTYPE_V8HI_V4SF_UQI:\n     case V8SI_FTYPE_V8HF_V8SI_UQI:\n+    case V8SF_FTYPE_V8HF_V8SF_UQI:\n     case V8SI_FTYPE_V8SF_V8SI_UQI:\n     case V4SI_FTYPE_V4SF_V4SI_UQI:\n     case V4SI_FTYPE_V8HF_V4SI_UQI:\n+    case V4SF_FTYPE_V8HF_V4SF_UQI:\n     case V4DI_FTYPE_V8HF_V4DI_UQI:\n     case V4DI_FTYPE_V4SF_V4DI_UQI:\n     case V2DI_FTYPE_V8HF_V2DI_UQI:\n     case V2DI_FTYPE_V4SF_V2DI_UQI:\n     case V8HF_FTYPE_V8HF_V8HF_UQI:\n     case V8HF_FTYPE_V8HI_V8HF_UQI:\n     case V8HF_FTYPE_V8SI_V8HF_UQI:\n+    case V8HF_FTYPE_V8SF_V8HF_UQI:\n     case V8HF_FTYPE_V4SI_V8HF_UQI:\n+    case V8HF_FTYPE_V4SF_V8HF_UQI:\n     case V8HF_FTYPE_V4DI_V8HF_UQI:\n+    case V8HF_FTYPE_V4DF_V8HF_UQI:\n     case V8HF_FTYPE_V2DI_V8HF_UQI:\n+    case V8HF_FTYPE_V2DF_V8HF_UQI:\n     case V4SF_FTYPE_V4DI_V4SF_UQI:\n     case V4SF_FTYPE_V2DI_V4SF_UQI:\n     case V4DF_FTYPE_V4DI_V4DF_UQI:\n+    case V4DF_FTYPE_V8HF_V4DF_UQI:\n+    case V2DF_FTYPE_V8HF_V2DF_UQI:\n     case V2DF_FTYPE_V2DI_V2DF_UQI:\n     case V16QI_FTYPE_V8HI_V16QI_UQI:\n     case V16QI_FTYPE_V16HI_V16QI_UHI:\n@@ -10705,6 +10713,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8DI_FTYPE_V8DF_V8DI_QI_INT:\n     case V8SF_FTYPE_V8DI_V8SF_QI_INT:\n     case V8DF_FTYPE_V8DI_V8DF_QI_INT:\n+    case V8DF_FTYPE_V8HF_V8DF_UQI_INT:\n+    case V16SF_FTYPE_V16HF_V16SF_UHI_INT:\n     case V32HF_FTYPE_V32HI_V32HF_USI_INT:\n     case V32HF_FTYPE_V32HF_V32HF_USI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_HI_INT:\n@@ -10718,6 +10728,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_INT:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_INT:\n     case V8HF_FTYPE_V8DI_V8HF_UQI_INT:\n+    case V8HF_FTYPE_V8DF_V8HF_UQI_INT:\n+    case V16HF_FTYPE_V16SF_V16HF_UHI_INT:\n       nargs = 4;\n       break;\n     case V4SF_FTYPE_V4SF_V4SF_INT_INT:"}, {"sha": "1ef9e12b07e3379a06a495c91387b3d639d2c7f1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 215, "deletions": 3, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -637,6 +637,9 @@\n    (V4SI \"TARGET_AVX2\") (V2DI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")])\n \n+(define_mode_iterator VF4_128_8_256\n+  [V4DF V4SF])\n+\n (define_mode_iterator VI1_AVX512VLBW\n   [(V64QI \"TARGET_AVX512BW\") (V32QI  \"TARGET_AVX512VL\")\n \t(V16QI  \"TARGET_AVX512VL\")])\n@@ -804,6 +807,8 @@\n   (V4DI  \"TARGET_AVX512VL\") (V4DF  \"TARGET_AVX512VL\")])\n (define_mode_iterator VF48_I1248\n   [V16SI V16SF V8DI V8DF V32HI V64QI])\n+(define_mode_iterator VF48H_AVX512VL\n+  [V8DF V16SF (V8SF \"TARGET_AVX512VL\")])\n (define_mode_iterator VI48F\n   [V16SI V16SF V8DI V8DF\n    (V8SI \"TARGET_AVX512VL\") (V8SF \"TARGET_AVX512VL\")\n@@ -998,7 +1003,8 @@\n (define_mode_attr ssePHmode\n   [(V32HI \"V32HF\") (V16HI \"V16HF\") (V8HI \"V8HF\")\n    (V16SI \"V16HF\") (V8SI \"V8HF\") (V4SI \"V8HF\")\n-   (V8DI \"V8HF\") (V4DI \"V8HF\") (V2DI \"V8HF\")])\n+   (V8DI \"V8HF\") (V4DI \"V8HF\") (V2DI \"V8HF\")\n+   (V8DF \"V8HF\") (V16SF \"V16HF\") (V8SF \"V8HF\")])\n \n ;; Mapping of vector modes to packed single mode of the same size\n (define_mode_attr ssePSmode\n@@ -1145,7 +1151,8 @@\n \n ;; Mapping of mode to cast intrinsic name\n (define_mode_attr castmode\n- [(V8SI \"si\") (V8SF \"ps\") (V4DF \"pd\")\n+ [(V4SF \"ps\") (V2DF \"pd\")\n+  (V8SI \"si\") (V8SF \"ps\") (V4DF \"pd\")\n   (V16SI \"si\") (V16SF \"ps\") (V8DF \"pd\")])\n \n ;; i128 for integer vectors and TARGET_AVX2, f128 otherwise.\n@@ -5745,7 +5752,9 @@\n (define_mode_attr qq2phsuff\n   [(V32HI \"\") (V16HI \"\") (V8HI \"\")\n    (V16SI \"\") (V8SI \"{y}\") (V4SI \"{x}\")\n-   (V8DI \"{z}\") (V4DI \"{y}\") (V2DI \"{x}\")])\n+   (V8DI \"{z}\") (V4DI \"{y}\") (V2DI \"{x}\")\n+   (V16SF \"\") (V8SF \"{y}\") (V4SF \"{x}\")\n+   (V8DF \"{z}\") (V4DF \"{y}\") (V2DF \"{x}\")])\n \n (define_insn \"avx512fp16_vcvtph2<sseintconvertsignprefix><sseintconvert>_<mode><mask_name><round_name>\"\n   [(set (match_operand:VI248_AVX512VL 0 \"register_operand\" \"=v\")\n@@ -6010,6 +6019,209 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_mode_attr ph2pssuffix\n+  [(V16SF \"x\") (V8SF \"x\") (V4SF \"x\")\n+   (V8DF \"\") (V4DF \"\") (V2DF \"\")])\n+\n+(define_insn \"avx512fp16_float_extend_ph<mode>2<mask_name><round_saeonly_name>\"\n+  [(set (match_operand:VF48H_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(float_extend:VF48H_AVX512VL\n+\t  (match_operand:<ssePHmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvtph2<castmode><ph2pssuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512fp16_float_extend_ph<mode>2<mask_name>\"\n+  [(set (match_operand:VF4_128_8_256 0 \"register_operand\" \"=v\")\n+\t(float_extend:VF4_128_8_256\n+\t  (vec_select:V4HF\n+\t    (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtph2<castmode><ph2pssuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512fp16_float_extend_ph<mode>2_load<mask_name>\"\n+  [(set (match_operand:VF4_128_8_256 0 \"register_operand\" \"=v\")\n+\t(float_extend:VF4_128_8_256\n+\t  (match_operand:V4HF 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtph2<castmode><ph2pssuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512fp16_float_extend_phv2df2<mask_name>\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n+\t(float_extend:V2DF\n+\t  (vec_select:V2HF\n+\t    (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtph2pd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*avx512fp16_float_extend_phv2df2_load<mask_name>\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n+\t(float_extend:V2DF\n+\t  (match_operand:V2HF 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtph2pd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"avx512fp16_vcvt<castmode>2ph_<mode><mask_name><round_name>\"\n+  [(set (match_operand:<ssePHmode> 0 \"register_operand\" \"=v\")\n+\t(float_truncate:<ssePHmode>\n+\t  (match_operand:VF48H_AVX512VL 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<castmode>2ph<ph2pssuffix><round_qq2phsuff>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512fp16_vcvt<castmode>2ph_<mode>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t    (float_truncate:V4HF\n+\t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (match_dup 2)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[2] = CONST0_RTX (V4HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvt<castmode>2ph_<mode>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t    (float_truncate:V4HF\n+\t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (match_operand:V4HF 2 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<castmode>2ph<ph2pssuffix><qq2phsuff>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512fp16_vcvt<castmode>2ph_<mode>_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (vec_merge:V4HF\n+\t    (float_truncate:V4HF\n+\t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (vec_select:V4HF\n+\t      (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+\t      (parallel [(const_int 0) (const_int 1)\n+\t\t\t (const_int 2) (const_int 3)]))\n+\t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t  (match_dup 4)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[4] = CONST0_RTX (V4HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvt<castmode>2ph_<mode>_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (vec_merge:V4HF\n+\t    (float_truncate:V4HF\n+\t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (vec_select:V4HF\n+\t      (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+\t      (parallel [(const_int 0) (const_int 1)\n+\t\t\t (const_int 2) (const_int 3)]))\n+\t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t  (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<castmode>2ph<ph2pssuffix><qq2phsuff>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512fp16_vcvt<castmode>2ph_<mode>_mask_1\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (vec_merge:V4HF\n+\t    (float_truncate:V4HF\n+\t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (match_operand:V4HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n+\t  (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<castmode>2ph<ph2pssuffix><qq2phsuff>\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512fp16_vcvtpd2ph_v2df\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (float_truncate:V2HF\n+\t    (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n+\t  (match_dup 2)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[2] = CONST0_RTX (V6HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvtpd2ph_v2df\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (float_truncate:V2HF\n+\t    (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n+\t  (match_operand:V6HF 2 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtpd2ph{x}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"avx512fp16_vcvtpd2ph_v2df_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (vec_merge:V2HF\n+\t    (float_truncate:V2HF\n+\t      (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n+\t    (vec_select:V2HF\n+\t      (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+\t      (parallel [(const_int 0) (const_int 1)]))\n+\t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t  (match_dup 4)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[4] = CONST0_RTX (V6HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvtpd2ph_v2df_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (vec_merge:V2HF\n+\t    (float_truncate:V2HF (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n+\t    (vec_select:V2HF\n+\t      (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+\t      (parallel [(const_int 0) (const_int 1)]))\n+\t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t  (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtpd2ph{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*avx512fp16_vcvtpd2ph_v2df_mask_1\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t  (vec_merge:V2HF\n+\t    (float_truncate:V2HF\n+\t      (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n+\t    (match_operand:V2HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n+\t  (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvtpd2ph{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "cce3409db4aa869d01d07534a5041efc31b9a2ec", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -749,6 +749,10 @@\n #define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh64_round(A, B, C) __builtin_ia32_vcvtusi2sh64_round(A, B, 8)\n+#define __builtin_ia32_vcvtph2pd512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2pd512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, D) __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "7e5bf406006407e9ced84ccd0216f59bf6da87a7", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -766,6 +766,10 @@\n #define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh64_round(A, B, C) __builtin_ia32_vcvtusi2sh64_round(A, B, 8)\n+#define __builtin_ia32_vcvtph2pd512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2pd512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, D) __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "5c3e370d4a786dddbd83c9d5fc943e2b3532301a", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -687,6 +687,8 @@ test_1 (_mm512_cvt_roundph_epu32, __m512i, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epi32, __m512i, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epu32, __m512i, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epi64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvt_roundph_pd, __m512d, __m128h, 8)\n+test_1 (_mm512_cvtx_roundph_ps, __m512, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epu64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epi64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epu64, __m512i, __m128h, 8)\n@@ -696,6 +698,8 @@ test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n+test_1 (_mm512_cvtx_roundps_ph, __m256h, __m512, 8)\n+test_1 (_mm512_cvt_roundpd_ph, __m128h, __m512d, 8)\n test_1 (_mm_cvt_roundsh_i32, int, __m128h, 8)\n test_1 (_mm_cvt_roundsh_u32, unsigned, __m128h, 8)\n test_1 (_mm_cvtt_roundsh_i32, int, __m128h, 8)\n@@ -751,13 +755,17 @@ test_2 (_mm512_maskz_cvt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvt_roundph_pd, __m512d, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvtx_roundph_ps, __m512, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundepi16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n+test_2 (_mm512_maskz_cvtx_roundps_ph, __m256h, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_cvt_roundpd_ph, __m128h, __mmask8, __m512d, 8)\n test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n@@ -809,13 +817,17 @@ test_3 (_mm512_mask_cvt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvt_roundph_pd, __m512d, __m512d, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvtx_roundph_ps, __m512, __m512, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundepi16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepi32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepi64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n+test_3 (_mm512_mask_cvtx_roundps_ph, __m256h, __m256h, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_cvt_roundpd_ph, __m128h, __m128h, __mmask8, __m512d, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)"}, {"sha": "5bf94d56ce36cdcd4b16404e3f8bd17937040437", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -794,13 +794,17 @@ test_1 (_mm512_cvt_roundph_epu64, __m512i, __m128h, 8)\n test_1 (_mm512_cvtt_roundph_epi32, __m512i, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epu32, __m512i, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epi64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvt_roundph_pd, __m512d, __m128h, 8)\n+test_1 (_mm512_cvtx_roundph_ps, __m512, __m256h, 8)\n test_1 (_mm512_cvtt_roundph_epu64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundepi16_ph, __m512h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu16_ph, __m512h, __m512i, 8)\n test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n+test_1 (_mm512_cvtx_roundps_ph, __m256h, __m512, 8)\n+test_1 (_mm512_cvt_roundpd_ph, __m128h, __m512d, 8)\n test_1 (_mm_cvt_roundsh_i32, int, __m128h, 8)\n test_1 (_mm_cvt_roundsh_u32, unsigned, __m128h, 8)\n test_1 (_mm_cvtt_roundsh_i32, int, __m128h, 8)\n@@ -855,13 +859,17 @@ test_2 (_mm512_maskz_cvt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvt_roundph_pd, __m512d, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvtx_roundph_ps, __m512, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvtt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundepi16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n+test_2 (_mm512_maskz_cvtx_roundps_ph, __m256h, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_cvt_roundpd_ph, __m128h, __mmask8, __m512d, 8)\n test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n@@ -912,13 +920,17 @@ test_3 (_mm512_mask_cvt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvt_roundph_pd, __m512d, __m512d, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvtx_roundph_ps, __m512, __m512, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvtt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundepi16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepi32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepi64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n+test_3 (_mm512_mask_cvtx_roundps_ph, __m256h, __m256h, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_cvt_roundpd_ph, __m128h, __m128h, __mmask8, __m512d, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)"}, {"sha": "947cf74c136eca105bc288b55199257add2ee16e", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a744e5056b46b3445b2cf6ebb253ac497098fb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=5a744e5056b46b3445b2cf6ebb253ac497098fb9", "patch": "@@ -741,14 +741,14 @@\n #define __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n-#define __builtin_ia32_vcvttph2dq_v16si_mask_round(A, B, C, D) __builtin_ia32_vcvttph2dq_v16si_mask_round(A, B, C, 8)\n-#define __builtin_ia32_vcvttph2udq_v16si_mask_round(A, B, C, D) __builtin_ia32_vcvttph2udq_v16si_mask_round(A, B, C, 8)\n-#define __builtin_ia32_vcvttph2qq_v8di_mask_round(A, B, C, D) __builtin_ia32_vcvttph2qq_v8di_mask_round(A, B, C, 8)\n-#define __builtin_ia32_vcvttph2uqq_v8di_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uqq_v8di_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2dq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2dq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2udq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2qq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uqq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n-#define __builtin_ia32_vcvttph2w_v32hi_mask_round(A, B, C, D) __builtin_ia32_vcvttph2w_v32hi_mask_round(A, B, C, 8)\n-#define __builtin_ia32_vcvttph2uw_v32hi_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uw_v32hi_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2w512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uw512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)\n@@ -767,6 +767,10 @@\n #define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh64_round(A, B, C) __builtin_ia32_vcvtusi2sh64_round(A, B, 8)\n+#define __builtin_ia32_vcvtph2pd512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2pd512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, D) __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}