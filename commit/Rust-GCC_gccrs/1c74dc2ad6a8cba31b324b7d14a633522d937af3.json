{"sha": "1c74dc2ad6a8cba31b324b7d14a633522d937af3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3NGRjMmFkNmE4Y2JhMzFiMzI0YjdkMTRhNjMzNTIyZDkzN2FmMw==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2014-03-08T09:33:12Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2014-03-08T09:33:12Z"}, "message": "re PR c++/60033 ([c++1y] ICE in retrieve_specialization while compiling recursive generic lambda)\n\nFix PR c++/60033\n\n\tPR c++/60033\n\t* pt.c (tsubst_copy): When retrieving a capture pack from a generic\n\tlambda, remove the lambda's own template argument list prior to fetching\n\tthe specialization.\n\n\tPR c++/60033\n\t* g++.dg/cpp1y/pr60033.C: New testcase.\n\nFrom-SVN: r208427", "tree": {"sha": "edb82abed9f31cace264b685979a11a71ea5cbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb82abed9f31cace264b685979a11a71ea5cbeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c74dc2ad6a8cba31b324b7d14a633522d937af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c74dc2ad6a8cba31b324b7d14a633522d937af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c74dc2ad6a8cba31b324b7d14a633522d937af3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c74dc2ad6a8cba31b324b7d14a633522d937af3/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14e62702520cd5fc0907e1d777ee1ae6dfabd582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e62702520cd5fc0907e1d777ee1ae6dfabd582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e62702520cd5fc0907e1d777ee1ae6dfabd582"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "b48bb47d0bd0ff18d7aee7d250fae69a47ba133c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c74dc2ad6a8cba31b324b7d14a633522d937af3", "patch": "@@ -1,5 +1,10 @@\n 2014-03-08  Adam Butcher  <adam@jessamine.co.uk>\n \n+\tPR c++/60033\n+\t* pt.c (tsubst_copy): When retrieving a capture pack from a generic\n+\tlambda, remove the lambda's own template argument list prior to fetching\n+\tthe specialization.\n+\n \tPR c++/60393\n \t* parser.c (cp_parser_parameter_declaration_clause): Move generic\n \tfunction template unwinding on error into a more general location, ..."}, {"sha": "5afe0fdabc7e511a3594dca9e2e34bc94069abe3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1c74dc2ad6a8cba31b324b7d14a633522d937af3", "patch": "@@ -12565,14 +12565,22 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t{\n \t  /* Check for a local specialization set up by\n \t     tsubst_pack_expansion.  */\n-\t  tree r = retrieve_local_specialization (t);\n-\t  if (r)\n+\t  if (tree r = retrieve_local_specialization (t))\n \t    {\n \t      if (TREE_CODE (r) == ARGUMENT_PACK_SELECT)\n \t\tr = ARGUMENT_PACK_SELECT_ARG (r);\n \t      return r;\n \t    }\n \n+\t  /* When retrieving a capture pack from a generic lambda, remove the\n+\t     lambda call op's own template argument list from ARGS.  Only the\n+\t     template arguments active for the closure type should be used to\n+\t     retrieve the pack specialization.  */\n+\t  if (LAMBDA_FUNCTION_P (current_function_decl)\n+\t      && (template_class_depth (DECL_CONTEXT (t))\n+\t\t  != TMPL_ARGS_DEPTH (args)))\n+\t    args = strip_innermost_template_args (args, 1);\n+\n \t  /* Otherwise return the full NONTYPE_ARGUMENT_PACK that\n \t     tsubst_decl put in the hash table.  */\n \t  return retrieve_specialization (t, args, 0);"}, {"sha": "f29b5a427d06493b739b39b79dfcb77108677be6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c74dc2ad6a8cba31b324b7d14a633522d937af3", "patch": "@@ -1,5 +1,8 @@\n 2014-03-08  Adam Butcher  <adam@jessamine.co.uk>\n \n+\tPR c++/60033\n+\t* g++.dg/cpp1y/pr60033.C: New testcase.\n+\n \tPR c++/60393\n \t* g++.dg/cpp1y/pr60393.C: New testcase.\n "}, {"sha": "8194bec24dbca8a2223a02581ea08c5430c9903a", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60033.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60033.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c74dc2ad6a8cba31b324b7d14a633522d937af3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60033.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60033.C?ref=1c74dc2ad6a8cba31b324b7d14a633522d937af3", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/60033\n+// { dg-options -std=c++1y }\n+\n+template <typename... T>\n+auto f(T&&... ts)\n+{\n+   return sizeof...(ts);\n+}\n+\n+template <typename... T>\n+auto g(T&&... ts) {\n+  return [&] (auto v) {\n+    return f(ts...);\n+  };\n+}\n+\n+int main()\n+{\n+   return g(1,2,3,4)(5) == 4 ? 0 : 1;\n+}"}]}