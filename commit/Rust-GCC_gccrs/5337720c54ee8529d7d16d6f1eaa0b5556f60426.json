{"sha": "5337720c54ee8529d7d16d6f1eaa0b5556f60426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMzNzcyMGM1NGVlODUyOWQ3ZDE2ZDZmMWVhYTBiNTU1NmY2MDQyNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-07-17T11:54:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-17T11:54:03Z"}, "message": "semantics.c (classtype_has_nothrow_assign_or_copy_p): Clarify semantics, simplify implementation.\n\n\t* semantics.c (classtype_has_nothrow_assign_or_copy_p): Clarify\n\tsemantics, simplify implementation.\n\nFrom-SVN: r250272", "tree": {"sha": "e2a83001fe2ef31c116c0f4877a9169a885f5a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a83001fe2ef31c116c0f4877a9169a885f5a92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5337720c54ee8529d7d16d6f1eaa0b5556f60426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5337720c54ee8529d7d16d6f1eaa0b5556f60426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5337720c54ee8529d7d16d6f1eaa0b5556f60426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5337720c54ee8529d7d16d6f1eaa0b5556f60426/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26c5b549cf954899e4c383e4f23e0b1c305449b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c5b549cf954899e4c383e4f23e0b1c305449b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c5b549cf954899e4c383e4f23e0b1c305449b2"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "ecffbcdde56bff60108ab83a8aa3051c809fdead", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5337720c54ee8529d7d16d6f1eaa0b5556f60426/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5337720c54ee8529d7d16d6f1eaa0b5556f60426/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5337720c54ee8529d7d16d6f1eaa0b5556f60426", "patch": "@@ -1,3 +1,8 @@\n+2017-07-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* semantics.c (classtype_has_nothrow_assign_or_copy_p): Clarify\n+\tsemantics, simplify implementation.\n+\n 2017-07-16  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* parser.c (cp_parser_cast_expression): Use %q#T instead of %qT"}, {"sha": "cf19e5fd96a79f0283190c4afe171f6d07e1d0e1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5337720c54ee8529d7d16d6f1eaa0b5556f60426/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5337720c54ee8529d7d16d6f1eaa0b5556f60426/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5337720c54ee8529d7d16d6f1eaa0b5556f60426", "patch": "@@ -9072,19 +9072,16 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n }\n \n /* Called from trait_expr_value to evaluate either __has_nothrow_assign or \n-   __has_nothrow_copy, depending on assign_p.  */\n+   __has_nothrow_copy, depending on assign_p.  Returns true iff all\n+   the copy {ctor,assign} fns are nothrow.  */\n \n static bool\n classtype_has_nothrow_assign_or_copy_p (tree type, bool assign_p)\n {\n-  tree fns;\n+  tree fns = NULL_TREE;\n \n   if (assign_p)\n-    {\n-      fns = lookup_fnfields_slot (type, cp_assignment_operator_id (NOP_EXPR));\n-      if (!fns)\n-\treturn false;\n-    } \n+    fns = lookup_fnfields_slot (type, cp_assignment_operator_id (NOP_EXPR));\n   else if (TYPE_HAS_COPY_CTOR (type))\n     {\n       /* If construction of the copy constructor was postponed, create\n@@ -9095,27 +9092,22 @@ classtype_has_nothrow_assign_or_copy_p (tree type, bool assign_p)\n \tlazily_declare_fn (sfk_move_constructor, type);\n       fns = CLASSTYPE_CONSTRUCTORS (type);\n     }\n-  else\n-    return false;\n \n+  bool saw_copy = false;\n   for (ovl_iterator iter (fns); iter; ++iter)\n     {\n       tree fn = *iter;\n- \n-      if (assign_p)\n+\n+      if (copy_fn_p (fn) > 0)\n \t{\n-\t  if (copy_fn_p (fn) == 0)\n-\t    continue;\n+\t  saw_copy = true;\n+\t  maybe_instantiate_noexcept (fn);\n+\t  if (!TYPE_NOTHROW_P (TREE_TYPE (fn)))\n+\t    return false;\n \t}\n-      else if (copy_fn_p (fn) <= 0)\n-\tcontinue;\n-\n-      maybe_instantiate_noexcept (fn);\n-      if (!TYPE_NOTHROW_P (TREE_TYPE (fn)))\n-\treturn false;\n     }\n \n-  return true;\n+  return saw_copy;\n }\n \n /* Actually evaluates the trait.  */"}]}