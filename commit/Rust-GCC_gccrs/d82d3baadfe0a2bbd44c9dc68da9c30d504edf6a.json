{"sha": "d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyZDNiYWFkZmUwYTJiYmQ0NGM5ZGM2OGRhOWMzMGQ1MDRlZGY2YQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-12-13T10:33:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:33:25Z"}, "message": "sinput-l.adb (Load_File): Disable style checks when preprocessing.\n\n2007-12-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* sinput-l.adb (Load_File): Disable style checks when preprocessing.\n\nFrom-SVN: r130861", "tree": {"sha": "366f623986e408ccdd23497b8656e9ab70760dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366f623986e408ccdd23497b8656e9ab70760dc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a/comments", "author": null, "committer": null, "parents": [{"sha": "968d9db361c8ab89f77a12fdedff6b93cbbe4d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968d9db361c8ab89f77a12fdedff6b93cbbe4d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968d9db361c8ab89f77a12fdedff6b93cbbe4d85"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "79ad7f4043c6403f3dc7bf6f6ba74a02d1b58e64", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=d82d3baadfe0a2bbd44c9dc68da9c30d504edf6a", "patch": "@@ -73,8 +73,7 @@ package body Sinput.L is\n    --  Used to initialize the preprocessor.\n \n    procedure New_EOL_In_Prep_Buffer;\n-   --  Add an LF to Prep_Buffer.\n-   --  Used to initialize the preprocessor.\n+   --  Add an LF to Prep_Buffer (used to initialize the preprocessor)\n \n    function Load_File\n      (N : File_Name_Type;\n@@ -90,10 +89,10 @@ package body Sinput.L is\n       Loc : constant Source_Ptr := Sloc (N);\n \n    begin\n-      --  We only do the adjustment if the value is between the appropriate\n-      --  low and high values. It is not clear that this should ever not be\n-      --  the case, but in practice there seem to be some nodes that get\n-      --  copied twice, and this is a defence against that happening.\n+      --  We only do the adjustment if the value is between the appropriate low\n+      --  and high values. It is not clear that this should ever not be the\n+      --  case, but in practice there seem to be some nodes that get copied\n+      --  twice, and this is a defence against that happening.\n \n       if A.Lo <= Loc and then Loc <= A.Hi then\n          Set_Sloc (N, Loc + A.Adjust);\n@@ -232,19 +231,19 @@ package body Sinput.L is\n          Write_Eol;\n       end if;\n \n-      --  For a given character in the source, a higher subscript will be\n-      --  used to access the instantiation, which means that the virtual\n-      --  origin must have a corresponding lower value. We compute this\n-      --  new origin by taking the address of the appropriate adjusted\n-      --  element in the old array. Since this adjusted element will be\n-      --  at a negative subscript, we must suppress checks.\n+      --  For a given character in the source, a higher subscript will be used\n+      --  to access the instantiation, which means that the virtual origin must\n+      --  have a corresponding lower value. We compute this new origin by\n+      --  taking the address of the appropriate adjusted element in the old\n+      --  array. Since this adjusted element will be at a negative subscript,\n+      --  we must suppress checks.\n \n       declare\n          pragma Suppress (All_Checks);\n \n          pragma Warnings (Off);\n-         --  This unchecked conversion is aliasing safe, since it is never\n-         --  used to create improperly aliased pointer values.\n+         --  This unchecked conversion is aliasing safe, since it is never used\n+         --  to create improperly aliased pointer values.\n \n          function To_Source_Buffer_Ptr is new\n            Unchecked_Conversion (Address, Source_Buffer_Ptr);\n@@ -472,6 +471,10 @@ package body Sinput.L is\n                T : constant Nat := Total_Errors_Detected;\n                --  Used to check if there were errors during preprocessing\n \n+               Save_Style_Check : Boolean;\n+               --  Saved state of the Style_Check flag (which needs to be\n+               --  temporarily set to False during preprocessing, see below).\n+\n             begin\n                --  If this is the first time we preprocess a source, allocate\n                --  the preprocessing buffer.\n@@ -494,25 +497,33 @@ package body Sinput.L is\n                   Put_Char          => Put_Char_In_Prep_Buffer'Access,\n                   New_EOL           => New_EOL_In_Prep_Buffer'Access);\n \n-               --  Initialize the scanner and set its behavior for\n-               --  preprocessing, then preprocess.\n+               --  Initialize scanner and set its behavior for preprocessing,\n+               --  then preprocess. Also disable style checks, since some of\n+               --  them are done in the scanner (specifically, those dealing\n+               --  with line length and line termination), and cannot be done\n+               --  during preprocessing (because the source file index table\n+               --  has not been set yet).\n \n                Scn.Scanner.Initialize_Scanner (X);\n \n                Scn.Scanner.Set_Special_Character ('#');\n                Scn.Scanner.Set_Special_Character ('$');\n                Scn.Scanner.Set_End_Of_Line_As_Token (True);\n+               Save_Style_Check := Opt.Style_Check;\n+               Opt.Style_Check := False;\n \n                Preprocess;\n \n-               --  Reset the scanner to its standard behavior\n+               --  Reset the scanner to its standard behavior, and restore the\n+               --  Style_Checks flag.\n \n                Scn.Scanner.Reset_Special_Characters;\n                Scn.Scanner.Set_End_Of_Line_As_Token (False);\n+               Opt.Style_Check := Save_Style_Check;\n \n-               --  If there were errors during preprocessing, record an\n-               --  error at the start of the file, and do not change the\n-               --  source buffer.\n+               --  If there were errors during preprocessing, record an error\n+               --  at the start of the file, and do not change the source\n+               --  buffer.\n \n                if T /= Total_Errors_Detected then\n                   Errout.Error_Msg\n@@ -531,22 +542,21 @@ package body Sinput.L is\n                      --  Physical buffer allocated\n \n                      type Actual_Source_Ptr is access Actual_Source_Buffer;\n-                     --  This is the pointer type for the physical buffer\n-                     --  allocated.\n+                     --  Pointer type for the physical buffer allocated\n \n                      Actual_Ptr : constant Actual_Source_Ptr :=\n                                     new Actual_Source_Buffer;\n-                     --  And this is the actual physical buffer\n+                     --  Actual physical buffer\n \n                   begin\n                      Actual_Ptr (Lo .. Hi - 1) :=\n                        Prep_Buffer (1 .. Prep_Buffer_Last);\n                      Actual_Ptr (Hi) := EOF;\n \n                      --  Now we need to work out the proper virtual origin\n-                     --  pointer to return. This is exactly\n-                     --  Actual_Ptr (0)'Address, but we have to be careful to\n-                     --  suppress checks to compute this address.\n+                     --  pointer to return. This is Actual_Ptr (0)'Address, but\n+                     --  we have to be careful to suppress checks to compute\n+                     --  this address.\n \n                      declare\n                         pragma Suppress (All_Checks);\n@@ -679,11 +689,10 @@ package body Sinput.L is\n    begin\n       Initialize_Scanner (No_Unit, X);\n \n-      --  We scan past junk to the first interesting compilation unit\n-      --  token, to see if it is SEPARATE. We ignore WITH keywords during\n-      --  this and also PRIVATE. The reason for ignoring PRIVATE is that\n-      --  it handles some error situations, and also to handle PRIVATE WITH\n-      --  in Ada 2005 mode.\n+      --  We scan past junk to the first interesting compilation unit token, to\n+      --  see if it is SEPARATE. We ignore WITH keywords during this and also\n+      --  PRIVATE. The reason for ignoring PRIVATE is that it handles some\n+      --  error situations, and also to handle PRIVATE WITH in Ada 2005 mode.\n \n       while Token = Tok_With\n         or else Token = Tok_Private"}]}