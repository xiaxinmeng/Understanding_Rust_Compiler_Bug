{"sha": "b16656f641e75a46649700136aa462b3579be690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2NjU2ZjY0MWU3NWE0NjY0OTcwMDEzNmFhNDYyYjM1NzliZTY5MA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-05-31T23:17:21Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-05-31T23:17:21Z"}, "message": "(movsi matcher): Use ldi for moving of 0 to a reg.\n\n(movhi matcher): Likewise.\n(movqi matcher): Likewise.\n(many patterns): Prefer addl to add, and shNaddl to shNadd.\n(define_split for (plus (reg) (large_constant))): Cleanup.\n(divsi3): Use match_dup for operand 3, not match_operand.\n(udivsi3): Likewise.\n(modsi3): Likewise.\n(umodsi3): Likewise.\n\nFrom-SVN: r7399", "tree": {"sha": "e32357538c1afc3ff61b5d8390db10a379381611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32357538c1afc3ff61b5d8390db10a379381611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b16656f641e75a46649700136aa462b3579be690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16656f641e75a46649700136aa462b3579be690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16656f641e75a46649700136aa462b3579be690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16656f641e75a46649700136aa462b3579be690/comments", "author": null, "committer": null, "parents": [{"sha": "22d7456253280138d3fae2753cf8d862e1442809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d7456253280138d3fae2753cf8d862e1442809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d7456253280138d3fae2753cf8d862e1442809"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "f9d0d8fb0e86a6a998a1a76317dd6face79627bf", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16656f641e75a46649700136aa462b3579be690/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16656f641e75a46649700136aa462b3579be690/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=b16656f641e75a46649700136aa462b3579be690", "patch": "@@ -992,11 +992,11 @@\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t\t\"=r,r,r,r,r,Q,*q,!fx,fx,*T\")\n \t(match_operand:SI 1 \"move_operand\"\n-\t\t\t\t\"rM,J,N,K,Q,rM,rM,!fxM,*T,fx\"))]\n+\t\t\t\t\"r,J,N,K,Q,rM,rM,!fxM,*T,fx\"))]\n   \"register_operand (operands[0], SImode)\n    || reg_or_0_operand (operands[1], SImode)\"\n   \"@\n-   copy %r1,%0\n+   copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n    zdepi %Z1,%0\n@@ -1043,9 +1043,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh2add %1,%2,%0\\;ldw %3(0,%0),%0\\\";\n+    return \\\"sh2addl %1,%2,%0\\;ldw %3(0,%0),%0\\\";\n   else\n-    return \\\"sh2add %1,%2,%0\\;ldwx %3(0,%0),%0\\\";\n+    return \\\"sh2addl %1,%2,%0\\;ldwx %3(0,%0),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n@@ -1166,7 +1166,7 @@\n   \"reload_completed\"\n   \"@\n    addil L'%G2,%1\n-   ldil L'%G2,%0\\;add %0,%1,%0\"\n+   ldil L'%G2,%0\\;addl %0,%1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1236,7 +1236,7 @@\n ;; was not a common subexpression.)\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand 1 \"symbolic_operand\" \"\"))\n+\t(match_operand:SI 1 \"symbolic_operand\" \"\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"\"\n   [(set (match_dup 2) (high:SI (match_dup 1)))\n@@ -1255,11 +1255,11 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!fx\")\n-\t(match_operand:HI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fxM\"))]\n+\t(match_operand:HI 1 \"move_operand\" \"r,J,N,K,Q,rM,rM,!fxM\"))]\n   \"register_operand (operands[0], HImode)\n    || reg_or_0_operand (operands[1], HImode)\"\n   \"@\n-   copy %r1,%0\n+   copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n    zdepi %Z1,%0\n@@ -1299,9 +1299,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh1add %2,%1,%0\\;ldh %3(0,%0),%0\\\";\n+    return \\\"sh1addl %2,%1,%0\\;ldh %3(0,%0),%0\\\";\n   else\n-    return \\\"sh1add %2,%1,%0\\;ldhx %3(0,%0),%0\\\";\n+    return \\\"sh1addl %2,%1,%0\\;ldhx %3(0,%0),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n@@ -1356,11 +1356,11 @@\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!fx\")\n-\t(match_operand:QI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fxM\"))]\n+\t(match_operand:QI 1 \"move_operand\" \"r,J,N,K,Q,rM,rM,!fxM\"))]\n   \"register_operand (operands[0], QImode)\n    || reg_or_0_operand (operands[1], QImode)\"\n   \"@\n-   copy %r1,%0\n+   copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n    zdepi %Z1,%0\n@@ -1522,9 +1522,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh3add %1,%2,%1\\;fldds %3(0,%1),%0\\\";\n+    return \\\"sh3addl %1,%2,%1\\;fldds %3(0,%1),%0\\\";\n   else\n-    return \\\"sh3add %1,%2,%1\\;flddx %3(0,%1),%0\\\";\n+    return \\\"sh3addl %1,%2,%1\\;flddx %3(0,%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"8\")])\n@@ -1561,9 +1561,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh3add %1,%2,%1\\;fstds %0,%3(0,%1)\\\";\n+    return \\\"sh3addl %1,%2,%1\\;fstds %0,%3(0,%1)\\\";\n   else\n-    return \\\"sh3add %1,%2,%1\\;fstdx %0,%3(0,%1)\\\";\n+    return \\\"sh3addl %1,%2,%1\\;fstdx %0,%3(0,%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"8\")])\n@@ -1762,9 +1762,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh2add %1,%2,%1\\;fldws %3(0,%1),%0\\\";\n+    return \\\"sh2addl %1,%2,%1\\;fldws %3(0,%1),%0\\\";\n   else\n-    return \\\"sh2add %1,%2,%1\\;fldwx %3(0,%1),%0\\\";\n+    return \\\"sh2addl %1,%2,%1\\;fldwx %3(0,%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"8\")])\n@@ -1801,9 +1801,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh2add %1,%2,%1\\;fstws %0,%3(0,%1)\\\";\n+    return \\\"sh2addl %1,%2,%1\\;fstws %0,%3(0,%1)\\\";\n   else\n-    return \\\"sh2add %1,%2,%1\\;fstwx %0,%3(0,%1)\\\";\n+    return \\\"sh2addl %1,%2,%1\\;fstwx %0,%3(0,%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"8\")])\n@@ -2050,24 +2050,24 @@\n \t\t\t       (match_dup 1)))]\n   \"\n {\n-  int intval = INTVAL (operands[2]);\n+  unsigned HOST_WIDE_INT intval = INTVAL (operands[2]);\n \n-  /* Try diving the constant by 2, then 4, and finally 8 to see\n+  /* Try dividing the constant by 2, then 4, and finally 8 to see\n      if we can get a constant which can be loaded into a register\n      in a single instruction (cint_ok_for_move).  */\n   if (intval % 2 == 0 && cint_ok_for_move (intval / 2))\n     {\n-      operands[2] = GEN_INT (INTVAL (operands[2]) / 2);\n+      operands[2] = GEN_INT (intval / 2);\n       operands[3] = GEN_INT (2);\n     }\n   else if (intval % 4 == 0 && cint_ok_for_move (intval / 4))\n     {\n-      operands[2] = GEN_INT (INTVAL (operands[2]) / 4);\n+      operands[2] = GEN_INT (intval / 4);\n       operands[3] = GEN_INT (4);\n     }\n   else if (intval % 8 == 0 && cint_ok_for_move (intval / 8))\n     {\n-      operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n+      operands[2] = GEN_INT (intval / 8);\n       operands[3] = GEN_INT (8);\n     }\n   else\n@@ -2080,7 +2080,7 @@\n \t\t (match_operand:SI 2 \"arith_operand\" \"r,J\")))]\n   \"\"\n   \"@\n-   add %1,%2,%0\n+   addl %1,%2,%0\n    ldo %2(%1),%0\")\n \n (define_insn \"subdi3\"\n@@ -2162,7 +2162,7 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"move_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (div:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n@@ -2207,7 +2207,7 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"move_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (udiv:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n@@ -2252,7 +2252,7 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"move_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (mod:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n@@ -2293,7 +2293,7 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"move_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (umod:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n@@ -2634,7 +2634,7 @@\n \t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sh%O3add %2,%1,%0\")\n+  \"sh%O3addl %2,%1,%0\")\n \n ;; This variant of the above insn can occur if the first operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n@@ -2646,13 +2646,15 @@\n ;; (this was stolen from alpha.md, I'm not going to try and change it.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(plus:SI (plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r,r\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n \t\t\t\t   (match_operand:SI 4 \"shadd_operand\" \"\"))\n-\t\t\t  (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t (match_operand:SI 3 \"const_int_operand\" \"rI\")))]\n+\t\t\t  (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t (match_operand:SI 3 \"const_int_operand\" \"r,J\")))]\n   \"reload_in_progress\"\n-  \"sh%O4add %2,%1,%0\\;add%I3 %3,%0,%0\"\n+  \"@\n+   sh%O4addl %2,%1,%0\\;addl %3,%0,%0\n+   sh%O4addl %2,%1,%0\\;ldo %3(%0),%0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n "}]}