{"sha": "256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2ZjI3ZjEzY2JkZmRmYzUxNDNiNDIyYzJiNGExMWYyMzRhNTZlOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-07-09T20:03:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-07-09T20:03:40Z"}, "message": "re PR target/35802 (MIPS64: Unable to find a register to spill in class &#8216;V1_REG&#8217;)\n\ngcc/\n\tPR target/35802\n\t* config/mips/mips.h (reg_class): Remove V1_REG.\n\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Update accordingly.\n\t* config/mips/mips.c (mips_regno_to_class): Map $3 to M16_NA_REGS\n\tinstead of V1_REGS.\n\t(mips_get_tp): New function.\n\t(mips_legitimize_tls_address): Use it.\n\t* config/mips/constraints.md (v): Delete.\n\t* config/mips/mips.md (TLS_GET_TP_REGNUM): New constant.\n\t(tls_get_tp_<mode>): Allow any GPR destination and clobber $3.\n\tAfter reload, split into a move and ...\n\t(*tls_get_tp_<mode>_split): ...this new instruction.\n\ngcc/testsuite/\n\tPR target/35802\n\t* gcc.target/mips/pr35802.c: New test.\n\nFrom-SVN: r137670", "tree": {"sha": "7b1768666be5ddf7287b017b4d52a085181bcca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1768666be5ddf7287b017b4d52a085181bcca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "432b5555207c59c1c9be108d62700aca8f9baa1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432b5555207c59c1c9be108d62700aca8f9baa1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432b5555207c59c1c9be108d62700aca8f9baa1f"}], "stats": {"total": 137, "additions": 97, "deletions": 40}, "files": [{"sha": "c0e874be197bf235b0f5ce576506d3db23fc0a40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -1,3 +1,18 @@\n+2008-07-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/35802\n+\t* config/mips/mips.h (reg_class): Remove V1_REG.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Update accordingly.\n+\t* config/mips/mips.c (mips_regno_to_class): Map $3 to M16_NA_REGS\n+\tinstead of V1_REGS.\n+\t(mips_get_tp): New function.\n+\t(mips_legitimize_tls_address): Use it.\n+\t* config/mips/constraints.md (v): Delete.\n+\t* config/mips/mips.md (TLS_GET_TP_REGNUM): New constant.\n+\t(tls_get_tp_<mode>): Allow any GPR destination and clobber $3.\n+\tAfter reload, split into a move and ...\n+\t(*tls_get_tp_<mode>_split): ...this new instruction.\n+\n 2008-07-09  David Daney  <ddaney@avtrex.com>\n \n \t* config/mips/driver-native.c: Include coretypes.h and tm.h."}, {"sha": "ee44783f35b4c3cf53686461072959739ac1a21f", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -55,9 +55,6 @@\n (define_register_constraint \"j\" \"PIC_FN_ADDR_REG\"\n   \"@internal\")\n \n-(define_register_constraint \"v\" \"V1_REG\"\n-  \"@internal\")\n-\n (define_register_constraint \"y\" \"GR_REGS\"\n   \"Equivalent to @code{r}; retained for backwards compatibility.\")\n "}, {"sha": "3bbae44a2f137e89c366ee8c1989dd8902d42908", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -479,7 +479,7 @@ static const char *mips_hi_relocs[NUM_SYMBOL_TYPES];\n \n /* Index R is the smallest register class that contains register R.  */\n const enum reg_class mips_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n-  LEA_REGS,\tLEA_REGS,\tM16_NA_REGS,\tV1_REG,\n+  LEA_REGS,\tLEA_REGS,\tM16_NA_REGS,\tM16_NA_REGS,\n   M16_REGS,\tM16_REGS,\tM16_REGS,\tM16_REGS,\n   LEA_REGS,\tLEA_REGS,\tLEA_REGS,\tLEA_REGS,\n   LEA_REGS,\tLEA_REGS,\tLEA_REGS,\tLEA_REGS,\n@@ -2465,14 +2465,29 @@ mips_call_tls_get_addr (rtx sym, enum mips_symbol_type type, rtx v0)\n   return insn;\n }\n \n+/* Return a pseudo register that contains the current thread pointer.  */\n+\n+static rtx\n+mips_get_tp (void)\n+{\n+  rtx tp;\n+\n+  tp = gen_reg_rtx (Pmode);\n+  if (Pmode == DImode)\n+    emit_insn (gen_tls_get_tp_di (tp));\n+  else\n+    emit_insn (gen_tls_get_tp_si (tp));\n+  return tp;\n+}\n+\n /* Generate the code to access LOC, a thread-local SYMBOL_REF, and return\n    its address.  The return value will be both a valid address and a valid\n    SET_SRC (either a REG or a LO_SUM).  */\n \n static rtx\n mips_legitimize_tls_address (rtx loc)\n {\n-  rtx dest, insn, v0, v1, tmp1, tmp2, eqv;\n+  rtx dest, insn, v0, tp, tmp1, tmp2, eqv;\n   enum tls_model model;\n \n   if (TARGET_MIPS16)\n@@ -2514,31 +2529,20 @@ mips_legitimize_tls_address (rtx loc)\n       break;\n \n     case TLS_MODEL_INITIAL_EXEC:\n-      v1 = gen_rtx_REG (Pmode, GP_RETURN + 1);\n+      tp = mips_get_tp ();\n       tmp1 = gen_reg_rtx (Pmode);\n       tmp2 = mips_unspec_address (loc, SYMBOL_GOTTPREL);\n       if (Pmode == DImode)\n-\t{\n-\t  emit_insn (gen_tls_get_tp_di (v1));\n-\t  emit_insn (gen_load_gotdi (tmp1, pic_offset_table_rtx, tmp2));\n-\t}\n+\temit_insn (gen_load_gotdi (tmp1, pic_offset_table_rtx, tmp2));\n       else\n-\t{\n-\t  emit_insn (gen_tls_get_tp_si (v1));\n-\t  emit_insn (gen_load_gotsi (tmp1, pic_offset_table_rtx, tmp2));\n-\t}\n+\temit_insn (gen_load_gotsi (tmp1, pic_offset_table_rtx, tmp2));\n       dest = gen_reg_rtx (Pmode);\n-      emit_insn (gen_add3_insn (dest, tmp1, v1));\n+      emit_insn (gen_add3_insn (dest, tmp1, tp));\n       break;\n \n     case TLS_MODEL_LOCAL_EXEC:\n-      v1 = gen_rtx_REG (Pmode, GP_RETURN + 1);\n-      if (Pmode == DImode)\n-\temit_insn (gen_tls_get_tp_di (v1));\n-      else\n-\temit_insn (gen_tls_get_tp_si (v1));\n-\n-      tmp1 = mips_unspec_offset_high (NULL, v1, loc, SYMBOL_TPREL);\n+      tp = mips_get_tp ();\n+      tmp1 = mips_unspec_offset_high (NULL, tp, loc, SYMBOL_TPREL);\n       dest = gen_rtx_LO_SUM (Pmode, tmp1,\n \t\t\t     mips_unspec_address (loc, SYMBOL_TPREL));\n       break;"}, {"sha": "c29a5e88188e1501c811b0e57032a905c10c7a34", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -1690,7 +1690,6 @@ enum reg_class\n   T_REG,\t\t\t/* mips16 T register ($24) */\n   M16_T_REGS,\t\t\t/* mips16 registers plus T register */\n   PIC_FN_ADDR_REG,\t\t/* SVR4 PIC function address register */\n-  V1_REG,\t\t\t/* Register $v1 ($3) used for TLS access.  */\n   LEA_REGS,\t\t\t/* Every GPR except $25 */\n   GR_REGS,\t\t\t/* integer registers */\n   FP_REGS,\t\t\t/* floating point registers */\n@@ -1731,7 +1730,6 @@ enum reg_class\n   \"T_REG\",\t\t\t\t\t\t\t\t\\\n   \"M16_T_REGS\",\t\t\t\t\t\t\t\t\\\n   \"PIC_FN_ADDR_REG\",\t\t\t\t\t\t\t\\\n-  \"V1_REG\",\t\t\t\t\t\t\t\t\\\n   \"LEA_REGS\",\t\t\t\t\t\t\t\t\\\n   \"GR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"FP_REGS\",\t\t\t\t\t\t\t\t\\\n@@ -1775,7 +1773,6 @@ enum reg_class\n   { 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* mips16 T register */\t\\\n   { 0x010300fc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* mips16 and T regs */ \\\n   { 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* SVR4 PIC function address register */ \\\n-  { 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* only $v1 */ \\\n   { 0xfdffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* Every other GPR except $25 */   \\\n   { 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* integer registers */\t\\\n   { 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* floating registers*/\t\\"}, {"sha": "43c47e5883c1c56cfe4fb2ce986184c8a7c7a52c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -69,6 +69,7 @@\n    \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n+   (TLS_GET_TP_REGNUM\t\t3)\n    (GOT_VERSION_REGNUM\t\t79)\n \n    ;; For MIPS Paired-Singled Floating Point Instructions.\n@@ -6499,26 +6500,47 @@\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"extended_mips16\" \"yes\")])\n \n-; Thread-Local Storage\n-\n-; The TLS base pointer is accessed via \"rdhwr $v1, $29\".  No current\n-; MIPS architecture defines this register, and no current\n-; implementation provides it; instead, any OS which supports TLS is\n-; expected to trap and emulate this instruction.  rdhwr is part of the\n-; MIPS 32r2 specification, but we use it on any architecture because\n-; we expect it to be emulated.  Use .set to force the assembler to\n-; accept it.\n-\n-(define_insn \"tls_get_tp_<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=v\")\n-\t(unspec:P [(const_int 0)]\n-\t\t  UNSPEC_TLS_GET_TP))]\n+;; Thread-Local Storage\n+\n+;; The TLS base pointer is accessed via \"rdhwr $3, $29\".  No current\n+;; MIPS architecture defines this register, and no current\n+;; implementation provides it; instead, any OS which supports TLS is\n+;; expected to trap and emulate this instruction.  rdhwr is part of the\n+;; MIPS 32r2 specification, but we use it on any architecture because\n+;; we expect it to be emulated.  Use .set to force the assembler to\n+;; accept it.\n+;;\n+;; We do not use a constraint to force the destination to be $3\n+;; because $3 can appear explicitly as a function return value.\n+;; If we leave the use of $3 implicit in the constraints until\n+;; reload, we may end up making a $3 return value live across\n+;; the instruction, leading to a spill failure when reloading it.\n+(define_insn_and_split \"tls_get_tp_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec:P [(const_int 0)] UNSPEC_TLS_GET_TP))\n+   (clobber (reg:P TLS_GET_TP_REGNUM))]\n   \"HAVE_AS_TLS && !TARGET_MIPS16\"\n-  \".set\\tpush\\;.set\\tmips32r2\\t\\;rdhwr\\t%0,$29\\;.set\\tpop\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:P TLS_GET_TP_REGNUM)\n+\t(unspec:P [(const_int 0)] UNSPEC_TLS_GET_TP))\n+   (set (match_dup 0) (reg:P TLS_GET_TP_REGNUM))]\n+  \"\"\n   [(set_attr \"type\" \"unknown\")\n    ; Since rdhwr always generates a trap for now, putting it in a delay\n    ; slot would make the kernel's emulation of it much slower.\n    (set_attr \"can_delay\" \"no\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"*tls_get_tp_<mode>_split\"\n+  [(set (reg:P TLS_GET_TP_REGNUM)\n+\t(unspec:P [(const_int 0)] UNSPEC_TLS_GET_TP))]\n+  \"HAVE_AS_TLS && !TARGET_MIPS16\"\n+  \".set\\tpush\\;.set\\tmips32r2\\t\\;rdhwr\\t$3,$29\\;.set\\tpop\"\n+  [(set_attr \"type\" \"unknown\")\n+   ; See tls_get_tp_<mode>\n+   (set_attr \"can_delay\" \"no\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ; The MIPS Paired-Single Floating Point and MIPS-3D Instructions."}, {"sha": "a71c1ccf2c1334d959d1496a57879ebabcb73f0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -1,3 +1,8 @@\n+2008-07-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/35802\n+\t* gcc.target/mips/pr35802.c: New test.\n+\n 2008-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/36760"}, {"sha": "34300980695f8eb4aa0b1c8edc05fbe014c831c4", "filename": "gcc/testsuite/gcc.target/mips/pr35802.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr35802.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256f27f13cbdfdfc5143b422c2b4a11f234a56e8/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr35802.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr35802.c?ref=256f27f13cbdfdfc5143b422c2b4a11f234a56e8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-mips-options \"-O2 -march=74kc -mgp32\" } */\n+__thread int x __attribute__((tls_model(\"initial-exec\")));\n+__thread int y __attribute__((tls_model(\"initial-exec\")));\n+\n+int bar (void);\n+\n+NOMIPS16 void\n+foo (int n)\n+{\n+  if (n > 5)\n+    {\n+      y = 0;\n+      do\n+\tx += bar ();\n+      while (n--);\n+    }\n+}"}]}