{"sha": "daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhYTZmY2M3MGZmZTY2YmQ1NmY1ODE5YWQ0ZWU3OGZlY2Q1NGJiNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-07-19T07:29:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-07-19T07:29:15Z"}, "message": "PR c++/90101 - dependent class non-type parameter.\n\nWe shouldn't complain that a dependent type is incomplete.\n\n\t* pt.c (invalid_nontype_parm_type_p): Check for dependent class type.\n\nFrom-SVN: r273592", "tree": {"sha": "6e8fee3e1761ba5c948cb1a175671dd417c46ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e8fee3e1761ba5c948cb1a175671dd417c46ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59febe0ece37bedab7f42ae51b9f2b7a372d2950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59febe0ece37bedab7f42ae51b9f2b7a372d2950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59febe0ece37bedab7f42ae51b9f2b7a372d2950"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "c1fc980e287a1d61a63f7bb04f854dab54292d36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "patch": "@@ -1,3 +1,8 @@\n+2019-07-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90101 - dependent class non-type parameter.\n+\t* pt.c (invalid_nontype_parm_type_p): Check for dependent class type.\n+\n 2019-07-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90098 - partial specialization and class non-type parms."}, {"sha": "e433413827a341497800502bc49c35622df93d41", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "patch": "@@ -25228,6 +25228,8 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n \t\t \"with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  return true;\n \t}\n+      if (dependent_type_p (type))\n+\treturn false;\n       if (!complete_type_or_else (type, NULL_TREE))\n \treturn true;\n       if (!literal_type_p (type))"}, {"sha": "c58fe05b9dd9596f9890a3131f436d01d53e4937", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class21.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class21.C?ref=daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/90101\n+// { dg-do compile { target c++2a } }\n+\n+template<int N>\n+struct A{};\n+\n+template<int N, A<N>>\n+struct B {};\n+\n+B<2,A<2>{}> b;"}, {"sha": "026855f0bc65e08850b538f94da47faca7e1eec7", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class22.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class22.C?ref=daaa6fcc70ffe66bd56f5819ad4ee78fecd54bb6", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/90100\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T>\n+inline constexpr bool is_nontype_list = false;\n+\n+template<template<auto...> typename T, auto... NonTypes>\n+inline constexpr bool is_nontype_list<T<NonTypes...>> = true;\n+\n+// works\n+template<auto...>\n+struct A {};\n+\n+static_assert(is_nontype_list<A<1, 2, 3>>);\n+\n+// fails\n+struct X {\n+    int v;\n+};\n+\n+static_assert(is_nontype_list<A<X{1}, X{2}, X{3}>>);"}]}