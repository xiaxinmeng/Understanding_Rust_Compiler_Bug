{"sha": "9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NWMxYTVlYTlkZjNlODJkYjMzODcxOWJmMGExNWQ5Yjg3MTNjYg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-11-17T22:18:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-11-17T22:18:23Z"}, "message": "Add avx5124vnniw/avx5124fmaps to target attributes\n\ngcc/\n\n2016-11-17  Andrew Senkevich <andrew.senkevich@intel.com>\n\n\t* config/i386/i386.c (processor_features): Add F_AVX5124VNNIW,\n\tF_AVX5124FMAPS.\n\t(isa_names_table): Handle new features.\n\ngcc/testsuite/\n\n2016-11-17  Andrew Senkevich <andrew.senkevich@intel.com>\n\n\t* gcc.target/i386/builtin_target.c: Handle new \"avx5124vnniw\",\n\t\"avx5124fmaps\".\n\t* gcc.target/i386/funcspec-56.inc: Test new attributes.\n\nlibgcc/\n\n2016-11-17  Andrew Senkevich <andrew.senkevich@intel.com>\n\n\t* config/i386/cpuinfo.c (processor_features): Add\n\tFEATURE_AVX5124VNNIW, FEATURE_AVX5124FMAPS.\n\nFrom-SVN: r242570", "tree": {"sha": "2c15d71f646a3ad3bbf13fe2d300962f813c77f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c15d71f646a3ad3bbf13fe2d300962f813c77f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/comments", "author": null, "committer": null, "parents": [{"sha": "5fbb13a72003ee9543d8e97c61df60c7cad3bb09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbb13a72003ee9543d8e97c61df60c7cad3bb09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbb13a72003ee9543d8e97c61df60c7cad3bb09"}], "stats": {"total": 150, "additions": 149, "deletions": 1}, "files": [{"sha": "6132cdcf17714f6edfcb155dc9f6f37c5dceb647", "filename": "gcc/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -1,3 +1,90 @@\n+2016-11-17  Andrew Senkevich <andrew.senkevich@intel.com>\n+\n+\t* config/i386/i386.c (processor_features): Add F_AVX5124VNNIW,\n+\tF_AVX5124FMAPS.\n+\t(isa_names_table): Handle new features.\n+\n+2016-11-17  Kirill Yukhin  <kirill.yukhin@gmail.com>\n+\t    Andrew Senkevich <andrew.senkevich@intel.com>\n+\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_AVX5124FMAPS_SET,\n+\tOPTION_MASK_ISA_AVX5124FMAPS_UNSET,\n+\tOPTION_MASK_ISA_AVX5124VNNIW_SET,\n+\tOPTION_MASK_ISA_AVX5124VNNIW_UNSET): New.\n+\t(ix86_handle_option): Handle OPT_mavx5124fmaps,\n+\tOPT_mavx5124vnniw.\n+\t* config.gcc: Add avx5124fmapsintrin.h, avx5124vnniwintrin.h.\n+\t* config/i386/avx5124fmapsintrin.h: New file.\n+\t* config/i386/avx5124vnniwintrin.h: Ditto.\n+\t* config/i386/constraints.md (h): New constraint.\n+\t* config/i386/cpuid.h: (bit_AVX5124VNNIW,\n+\tbit_AVX5124FMAPS): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu):\n+\tDetect avx5124fmaps, avx5124vnniw.\n+\t* config/i386/i386-builtin-types.def: Add types\n+\tV16SF_FTYPE_V16SF_V16SF_V16SF_V16SF_V16SF_PCV4SF_V16SF_UHI,\n+\tV16SF_FTYPE_V16SF_V16SF_V16SF_V16SF_V16SF_PCV4SF,\n+\tV4SF_FTYPE_V4SF_V4SF_V4SF_V4SF_V4SF_PCV4SF,\n+\tV4SF_FTYPE_V4SF_V4SF_V4SF_V4SF_V4SF_PCV4SF_V4SF_UQI,\n+\tV16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI,\n+\tV16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI_V16SI_UHI.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_4fmaddps_mask,\n+\t__builtin_ia32_4fmaddps, __builtin_ia32_4fmaddss,\n+\t__builtin_ia32_4fmaddss_mask, __builtin_ia32_4fnmaddps_mask,\n+\t__builtin_ia32_4fnmaddps, __builtin_ia32_4fnmaddss,\n+\t__builtin_ia32_4fnmaddss_mask, __builtin_ia32_vp4dpwssd,\n+\t__builtin_ia32_vp4dpwssd_mask, __builtin_ia32_vp4dpwssds,\n+\t__builtin_ia32_vp4dpwssds_mask): New.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal):\n+\tDefine __AVX5124FMAPS__, __AVX5124VNNIW__.\n+\t* config/i386/i386-modes.def: Fixed comment typos, added new\n+\tmodes (VECTOR_MODES (FLOAT, 256), VECTOR_MODE (INT, SI, 64)).\n+\t* config/i386/i386.c (ix86_target_string): Add -mavx5124fmaps,\n+\t-mavx5124vnniw.\n+\t(PTA_AVX5124FMAPS, PTA_AVX5124VNNIW): Define.\n+\t(ix86_option_override_internal): Handle new options.\n+\t(ix86_valid_target_attribute_inner_p): Add avx5124fmaps,\n+\tavx5124vnniw.\n+\t(ix86_expand_builtin): Handle new builtins.\n+\t(ix86_additional_allocno_class_p): New.\n+\t* config/i386/i386.h (TARGET_AVX5124FMAPS,\n+\tTARGET_AVX5124FMAPS_P,\n+\tTARGET_AVX5124VNNIW,\n+\tTARGET_AVX5124VNNIW_P): Define.\n+\t(reg_class): Add MOD4_SSE_REGS.\n+\t(MOD4_SSE_REG_P, MOD4_SSE_REGNO_P): New.\n+\t* config/i386/i386.opt: Add mavx5124fmaps, mavx5124vnniw.\n+\t* config/i386/immintrin.h: Include avx5124fmapsintrin.h,\n+\tavx5124vnniwintrin.h.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_VP4FMADD,\n+\tUNSPEC_VP4FNMADD,\n+\tUNSPEC_VP4DPWSSD, UNSPEC_VP4DPWSSDS.\n+\t(define_mode_iterator IMOD4): New.\n+\t(define_mode_attr imod4_narrow): Ditto.\n+\t(define_insn \"mov<mode>\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fmaddps\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fmaddps_mask\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fmaddps_maskz\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fmaddss\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fmaddss_mask\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fmaddss_maskz\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fnmaddps\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fnmaddps_mask\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fnmaddps_maskz\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fnmaddss\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fnmaddss_mask\"): Ditto.\n+\t(define_insn \"avx5124fmaddps_4fnmaddss_maskz\"): Ditto.\n+\t(define_insn \"avx5124vnniw_vp4dpwssd\"): Ditto.\n+\t(define_insn \"avx5124vnniw_vp4dpwssd_mask\"): Ditto.\n+\t(define_insn \"avx5124vnniw_vp4dpwssd_maskz\"): Ditto.\n+\t(define_insn \"avx5124vnniw_vp4dpwssds\"): Ditto.\n+\t(define_insn \"avx5124vnniw_vp4dpwssds_mask\"): Ditto.\n+\t(define_insn \"avx5124vnniw_vp4dpwssds_maskz\"): Ditto.\n+\t* init-regs.c (initialize_uninitialized_regs): Add emit_clobber call.\n+\t* genmodes.c (mode_size_inline): Extend return type.\n+\t* machmode.h (mode_size, mode_base_align): Extend type.\n+\n 2016-11-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78101"}, {"sha": "823930d07f961a5e2a2d7397ad7669c077a4c956", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -33205,6 +33205,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     F_AVX512PF,\n     F_AVX512VBMI,\n     F_AVX512IFMA,\n+    F_AVX5124VNNIW,\n+    F_AVX5124FMAPS,\n     F_MAX\n   };\n \n@@ -33317,6 +33319,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"avx512pf\",F_AVX512PF},\n       {\"avx512vbmi\",F_AVX512VBMI},\n       {\"avx512ifma\",F_AVX512IFMA},\n+      {\"avx5124vnniw\",F_AVX5124VNNIW},\n+      {\"avx5124fmaps\",F_AVX5124FMAPS},\n     };\n \n   tree __processor_model_type = build_processor_model_struct ();"}, {"sha": "e84613fe5f744ce71accd48602b35e498109ab89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -1,3 +1,37 @@\n+2016-11-17  Andrew Senkevich <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/builtin_target.c: Handle new \"avx5124vnniw\",\n+\t\"avx5124fmaps\".\n+\t* gcc.target/i386/funcspec-56.inc: Test new attributes.\n+\n+2016-11-17  Kirill Yukhin  <kirill.yukhin@gmail.com>\n+\t    Andrew Senkevich <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/avx5124fmadd-v4fmaddps-1.c: New test.\n+\t* gcc.target/i386/avx5124fmadd-v4fmaddps-2.c: Ditto.\n+\t* gcc.target/i386/avx5124fmadd-v4fmaddss-1.c: Ditto.\n+\t* gcc.target/i386/avx5124fmadd-v4fnmaddps-1.c: Ditto.\n+\t* gcc.target/i386/avx5124fmadd-v4fnmaddps-2.c: Ditto.\n+\t* gcc.target/i386/avx5124fmadd-v4fnmaddss-1.c: Ditto.\n+\t* gcc.target/i386/avx5124fmaps-check.h: Ditto.\n+\t* gcc.target/i386/avx5124vnniw-check.h: Ditto.\n+\t* gcc.target/i386/avx5124vnniw-vp4dpwssd-1.c: Ditto.\n+\t* gcc.target/i386/avx5124vnniw-vp4dpwssd-2.c: Ditto.\n+\t* gcc.target/i386/avx5124vnniw-vp4dpwssds-1.c: Ditto.\n+\t* gcc.target/i386/avx5124vnniw-vp4dpwssds-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-helper.h: Add avx5124fmaps-check.h,\n+\tavx5124vnniw-check.h.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx5124fmaps,\n+\tcheck_effective_target_avx5124vnniw): New.\n+\t* gcc.target/i386/m128-check.h (ESP_FLOAT, ESP_DOUBLE):\n+\tSet under ifndef.\n+\t* gcc.target/i386/sse-12.c: Add -mavx5124fmaps, -mavx5124vnniw.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2016-11-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55080"}, {"sha": "c620a7415ac65ff7672dcd058b520adf1796ad0f", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -213,6 +213,10 @@ check_features (unsigned int ecx, unsigned int edx,\n \tassert (__builtin_cpu_supports (\"avx512ifma\"));\n       if (ecx & bit_AVX512VBMI)\n \tassert (__builtin_cpu_supports (\"avx512vbmi\"));\n+      if (edx & bit_AVX5124VNNIW)\n+\tassert (__builtin_cpu_supports (\"avx5124vnniw\"));\n+      if (edx & bit_AVX5124FMAPS)\n+\tassert (__builtin_cpu_supports (\"avx5124fmaps\"));\n     }\n }\n \n@@ -311,6 +315,10 @@ quick_check ()\n \n   assert (__builtin_cpu_supports (\"avx512f\") >= 0);\n \n+  assert (__builtin_cpu_supports (\"avx5124vnniw\") >= 0);\n+\n+  assert (__builtin_cpu_supports (\"avx5124fmaps\") >= 0);\n+\n   /* Check CPU type.  */\n   assert (__builtin_cpu_is (\"amd\") >= 0);\n "}, {"sha": "9334e9e3a274c096ed258749bf10844758694025", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -28,6 +28,8 @@ extern void test_avx512dq(void)\t\t\t__attribute__((__target__(\"avx512dq\")));\n extern void test_avx512er(void)\t\t\t__attribute__((__target__(\"avx512er\")));\n extern void test_avx512pf(void)\t\t\t__attribute__((__target__(\"avx512pf\")));\n extern void test_avx512cd(void)\t\t\t__attribute__((__target__(\"avx512cd\")));\n+extern void test_avx5124fmaps(void)             __attribute__((__target__(\"avx5124fmaps\")));\n+extern void test_avx5124vnniw(void)             __attribute__((__target__(\"avx5124vnniw\")));\n extern void test_bmi (void)\t\t\t__attribute__((__target__(\"bmi\")));\n extern void test_bmi2 (void)\t\t\t__attribute__((__target__(\"bmi2\")));\n \n@@ -59,6 +61,8 @@ extern void test_no_avx512dq(void)\t\t__attribute__((__target__(\"no-avx512dq\")));\n extern void test_no_avx512er(void)\t\t__attribute__((__target__(\"no-avx512er\")));\n extern void test_bo_avx512pf(void)\t\t__attribute__((__target__(\"no-avx512pf\")));\n extern void test_no_avx512cd(void)\t\t__attribute__((__target__(\"no-avx512cd\")));\n+extern void test_no_avx5124fmaps(void)          __attribute__((__target__(\"no-avx5124fmaps\")));\n+extern void test_no_avx5124vnniw(void)          __attribute__((__target__(\"no-avx5124vnniw\")));\n extern void test_no_bmi (void)\t\t\t__attribute__((__target__(\"no-bmi\")));\n extern void test_no_bmi2 (void)\t\t\t__attribute__((__target__(\"no-bmi2\")));\n "}, {"sha": "aff110d79165b864707bdd3da5692129aa50da13", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -1,3 +1,8 @@\n+2016-11-17  Andrew Senkevich <andrew.senkevich@intel.com>\n+\n+\t* config/i386/cpuinfo.c (processor_features): Add\n+\tFEATURE_AVX5124VNNIW, FEATURE_AVX5124FMAPS.\n+\n 2016-11-17  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/dp-hack.h (ARC_OPTFPE): Define."}, {"sha": "4a0ad254cd9a9248bdea381c223a3462655d6a26", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9775c1a5ea9df3e82db338719bf0a15d9b8713cb/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=9775c1a5ea9df3e82db338719bf0a15d9b8713cb", "patch": "@@ -115,7 +115,9 @@ enum processor_features\n   FEATURE_AVX512ER,\n   FEATURE_AVX512PF,\n   FEATURE_AVX512VBMI,\n-  FEATURE_AVX512IFMA\n+  FEATURE_AVX512IFMA,\n+  FEATURE_AVX5124VNNIW,\n+  FEATURE_AVX5124FMAPS\n };\n \n struct __processor_model\n@@ -359,6 +361,10 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \tfeatures |= (1 << FEATURE_AVX512IFMA);\n       if (ecx & bit_AVX512VBMI)\n \tfeatures |= (1 << FEATURE_AVX512VBMI);\n+      if (edx & bit_AVX5124VNNIW)\n+\tfeatures |= (1 << FEATURE_AVX5124VNNIW);\n+      if (edx & bit_AVX5124FMAPS)\n+\tfeatures |= (1 << FEATURE_AVX5124FMAPS);\n     }\n \n   unsigned int ext_level;"}]}