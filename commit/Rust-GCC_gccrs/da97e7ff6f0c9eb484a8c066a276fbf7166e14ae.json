{"sha": "da97e7ff6f0c9eb484a8c066a276fbf7166e14ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5N2U3ZmY2ZjBjOWViNDg0YThjMDY2YTI3NmZiZjcxNjZlMTRhZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-04-13T11:26:09Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-04-13T11:26:09Z"}, "message": "re PR fortran/31562 (FAIL: gfortran.dg/value_4.f90  -O0  execution test)\n\n2007-04-13  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/31562\n       * gfortran.dg/f2c_4.c: Use GNU extensions for complex\n       instead of a struct.\n\nFrom-SVN: r123784", "tree": {"sha": "172207645fb43ac1cc1dd6ffa9e956cf1b3e54b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/172207645fb43ac1cc1dd6ffa9e956cf1b3e54b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ecacafc9bf1ca57fd002385e7cf8bbb9eff0078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ecacafc9bf1ca57fd002385e7cf8bbb9eff0078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ecacafc9bf1ca57fd002385e7cf8bbb9eff0078"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "215518516ccab4cfac42dd1d6a8dd641a1ef5c67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da97e7ff6f0c9eb484a8c066a276fbf7166e14ae", "patch": "@@ -1,3 +1,9 @@\n+2007-04-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/31562\n+\t* gfortran.dg/f2c_4.c: Use GNU extensions for complex\n+\tinstead of a struct.\n+\n 2007-04-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31562"}, {"sha": "7fb1debf31dbdc8483f72efce900464957d82e22", "filename": "gcc/testsuite/gfortran.dg/f2c_4.c", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97e7ff6f0c9eb484a8c066a276fbf7166e14ae/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.c?ref=da97e7ff6f0c9eb484a8c066a276fbf7166e14ae", "patch": "@@ -5,16 +5,19 @@\n   \n    Simplified from f2c output and tested with g77 */\n \n+/* We used to #include <complex.h>, but this fails for some platforms\n+   (like cygwin) who don't have it yet.  */\n+#define complex __complex__\n+#define _Complex_I (1.0iF)\n+\n typedef float real;\n typedef double doublereal;\n-typedef struct { real r, i; } complex;\n-typedef struct { doublereal r, i; } doublecomplex;\n \n extern double f2c_4b__(double *);\n-extern void f2c_4d__( complex *, complex *);\n-extern void f2c_4f__( complex *, int *,complex *);\n-extern void f2c_4h__( doublecomplex *, doublecomplex *);\n-extern void f2c_4j__( doublecomplex *, int *, doublecomplex *);\n+extern void f2c_4d__( complex float *, complex float *);\n+extern void f2c_4f__( complex float *, int *,complex float *);\n+extern void f2c_4h__( complex double *, complex double *);\n+extern void f2c_4j__( complex double *, int *, complex double *);\n extern void abort (void);\n \n void f2c_4a__(void) {\n@@ -25,55 +28,47 @@ void f2c_4a__(void) {\n }\n \n void f2c_4c__(void) {\n-  complex x,ret_val;\n-  x.r = 1234;\n-  x.i = 5678;\n+  complex float x,ret_val;\n+  x = 1234 + 5678 * _Complex_I;\n   f2c_4d__(&ret_val,&x);\n-  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+  if ( x != ret_val ) abort();\n }\n \n void f2c_4e__(void) {\n-  complex x,ret_val;\n+  complex float x,ret_val;\n   int i=0;\n-  x.r = 1234;\n-  x.i = 5678;\n+  x = 1234 + 5678 * _Complex_I;\n   f2c_4f__(&ret_val,&i,&x);\n-  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+  if ( x != ret_val ) abort();\n }\n \n void f2c_4g__(void) {\n-  doublecomplex x,ret_val;\n-  x.r = 1234;\n-  x.i = 5678.0f;\n+  complex double x,ret_val;\n+  x = 1234 + 5678.0f * _Complex_I;\n   f2c_4h__(&ret_val,&x);\n-  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+  if ( x != ret_val ) abort();\n }\n \n void f2c_4i__(void) {\n-  doublecomplex x,ret_val;\n+  complex double x,ret_val;\n   int i=0;\n-  x.r = 1234.0f;\n-  x.i = 5678.0f;\n+  x = 1234.0f + 5678.0f * _Complex_I;\n   f2c_4j__(&ret_val,&i,&x);\n-  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+  if ( x != ret_val ) abort();\n }\n \n-void f2c_4k__(complex *ret_val, complex *x) {\n-  ret_val->r = x->r;\n-  ret_val->i = x->i;\n+void f2c_4k__(complex float *ret_val, complex float *x) {\n+  *ret_val = *x;\n }\n \n-void f2c_4l__(complex *ret_val, int *i, complex *x) {\n-  ret_val->r = x->r;\n-  ret_val->i = x->i;\n+void f2c_4l__(complex float *ret_val, int *i, complex float *x) {\n+  *ret_val = *x;\n }\n \n-void f2c_4m__(doublecomplex *ret_val, doublecomplex *x) {\n-  ret_val->r = x->r;\n-  ret_val->i = x->i;\n+void f2c_4m__(complex double *ret_val, complex double *x) {\n+  *ret_val = *x;\n }\n \n-void f2c_4n__(doublecomplex *ret_val, int *i, doublecomplex *x) {\n-  ret_val->r = x->r;\n-  ret_val->i = x->i;\n+void f2c_4n__(complex double *ret_val, int *i, complex double *x) {\n+  *ret_val = *x;\n }"}]}