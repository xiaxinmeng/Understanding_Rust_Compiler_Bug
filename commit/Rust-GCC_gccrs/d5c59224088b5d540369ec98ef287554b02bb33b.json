{"sha": "d5c59224088b5d540369ec98ef287554b02bb33b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjNTkyMjQwODhiNWQ1NDAzNjllYzk4ZWYyODc1NTRiMDJiYjMzYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-15T16:55:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-15T16:55:20Z"}, "message": "stl_algo.h (__median): Move...\n\n2010-02-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (__median): Move...\n\t* include/ext/algorithm: ... here, being an SGI extension.\n\nFrom-SVN: r156776", "tree": {"sha": "6b88007acd663e721ab79e23334a2988273d50c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b88007acd663e721ab79e23334a2988273d50c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c59224088b5d540369ec98ef287554b02bb33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c59224088b5d540369ec98ef287554b02bb33b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c59224088b5d540369ec98ef287554b02bb33b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c59224088b5d540369ec98ef287554b02bb33b/comments", "author": null, "committer": null, "parents": [{"sha": "ac447f256bc7c31c7f9b034048b5fb62183fca52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac447f256bc7c31c7f9b034048b5fb62183fca52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac447f256bc7c31c7f9b034048b5fb62183fca52"}], "stats": {"total": 141, "additions": 73, "deletions": 68}, "files": [{"sha": "3334c13e13d914f743be37737ed0262a4571ade4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c59224088b5d540369ec98ef287554b02bb33b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c59224088b5d540369ec98ef287554b02bb33b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d5c59224088b5d540369ec98ef287554b02bb33b", "patch": "@@ -1,3 +1,8 @@\n+2010-02-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (__median): Move...\n+\t* include/ext/algorithm: ... here, being an SGI extension.\n+\n 2010-02-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "6da898b35489dd13ded5b38fcba9171993bdd667", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c59224088b5d540369ec98ef287554b02bb33b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c59224088b5d540369ec98ef287554b02bb33b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=d5c59224088b5d540369ec98ef287554b02bb33b", "patch": "@@ -66,74 +66,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  /**\n-   *  @brief Find the median of three values.\n-   *  @param  a  A value.\n-   *  @param  b  A value.\n-   *  @param  c  A value.\n-   *  @return One of @p a, @p b or @p c.\n-   *\n-   *  If @c {l,m,n} is some convolution of @p {a,b,c} such that @c l<=m<=n\n-   *  then the value returned will be @c m.\n-   *  This is an SGI extension.\n-   *  @ingroup SGIextensions\n-  */\n-  template<typename _Tp>\n-    inline const _Tp&\n-    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)\n-    {\n-      // concept requirements\n-      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n-      if (__a < __b)\n-\tif (__b < __c)\n-\t  return __b;\n-\telse if (__a < __c)\n-\t  return __c;\n-\telse\n-\t  return __a;\n-      else if (__a < __c)\n-\treturn __a;\n-      else if (__b < __c)\n-\treturn __c;\n-      else\n-\treturn __b;\n-    }\n-\n-  /**\n-   *  @brief Find the median of three values using a predicate for comparison.\n-   *  @param  a     A value.\n-   *  @param  b     A value.\n-   *  @param  c     A value.\n-   *  @param  comp  A binary predicate.\n-   *  @return One of @p a, @p b or @p c.\n-   *\n-   *  If @c {l,m,n} is some convolution of @p {a,b,c} such that @p comp(l,m)\n-   *  and @p comp(m,n) are both true then the value returned will be @c m.\n-   *  This is an SGI extension.\n-   *  @ingroup SGIextensions\n-  */\n-  template<typename _Tp, typename _Compare>\n-    inline const _Tp&\n-    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)\n-    {\n-      // concept requirements\n-      __glibcxx_function_requires(_BinaryFunctionConcept<_Compare, bool,\n-\t\t\t\t                         _Tp, _Tp>)\n-      if (__comp(__a, __b))\n-\tif (__comp(__b, __c))\n-\t  return __b;\n-\telse if (__comp(__a, __c))\n-\t  return __c;\n-\telse\n-\t  return __a;\n-      else if (__comp(__a, __c))\n-\treturn __a;\n-      else if (__comp(__b, __c))\n-\treturn __c;\n-      else\n-\treturn __b;\n-    }\n-\n   /// Swaps the median value of *__a, *__b and *__c to *__a\n   template<typename _Iterator>\n     void"}, {"sha": "5956e24bcd0dd1be0d83a8821802a11e8a813794", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c59224088b5d540369ec98ef287554b02bb33b/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c59224088b5d540369ec98ef287554b02bb33b/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=d5c59224088b5d540369ec98ef287554b02bb33b", "patch": "@@ -520,6 +520,74 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return true;\n     }\n \n+  /**\n+   *  @brief Find the median of three values.\n+   *  @param  a  A value.\n+   *  @param  b  A value.\n+   *  @param  c  A value.\n+   *  @return One of @p a, @p b or @p c.\n+   *\n+   *  If @c {l,m,n} is some convolution of @p {a,b,c} such that @c l<=m<=n\n+   *  then the value returned will be @c m.\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+  */\n+  template<typename _Tp>\n+    const _Tp&\n+    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n+      if (__a < __b)\n+\tif (__b < __c)\n+\t  return __b;\n+\telse if (__a < __c)\n+\t  return __c;\n+\telse\n+\t  return __a;\n+      else if (__a < __c)\n+\treturn __a;\n+      else if (__b < __c)\n+\treturn __c;\n+      else\n+\treturn __b;\n+    }\n+\n+  /**\n+   *  @brief Find the median of three values using a predicate for comparison.\n+   *  @param  a     A value.\n+   *  @param  b     A value.\n+   *  @param  c     A value.\n+   *  @param  comp  A binary predicate.\n+   *  @return One of @p a, @p b or @p c.\n+   *\n+   *  If @c {l,m,n} is some convolution of @p {a,b,c} such that @p comp(l,m)\n+   *  and @p comp(m,n) are both true then the value returned will be @c m.\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+  */\n+  template<typename _Tp, typename _Compare>\n+    const _Tp&\n+    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_BinaryFunctionConcept<_Compare, bool,\n+\t\t\t\t                         _Tp, _Tp>)\n+      if (__comp(__a, __b))\n+\tif (__comp(__b, __c))\n+\t  return __b;\n+\telse if (__comp(__a, __c))\n+\t  return __c;\n+\telse\n+\t  return __a;\n+      else if (__comp(__a, __c))\n+\treturn __a;\n+      else if (__comp(__b, __c))\n+\treturn __c;\n+      else\n+\treturn __b;\n+    }\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _EXT_ALGORITHM */"}]}