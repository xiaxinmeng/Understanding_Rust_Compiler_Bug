{"sha": "9c81750c5bedd7883182ee2684a012c6210ebe1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4MTc1MGM1YmVkZDc4ODMxODJlZTI2ODRhMDEyYzYyMTBlYmUxZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2019-12-07T11:07:07Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-07T11:07:07Z"}, "message": "Fortran] PR 92793 - fix column used for error diagnostic\n\n        PR fortran/92793\n        * trans.c (gfc_get_location): Declare.\n        * trans.c (gfc_get_location): Define; returns column-corrected location.\n        (trans_runtime_error_vararg, gfc_trans_runtime_check,\n        gfc_generate_module_code): Use new function.\n        * trans-array.c (gfc_trans_auto_array_allocation): Likewise.\n        * trans-common.c (build_field, get_init_field, create_common): Likewise.\n        * trans-decl.c (gfc_build_label_decl, gfc_get_symbol_decl): Likewise.\n        * trans-openmp.c (gfc_trans_omp_reduction_list, gfc_trans_omp_clauses):\n        Likewise.\n        * trans-stmt.c (gfc_trans_if_1): Likewise.\n\nFrom-SVN: r279075", "tree": {"sha": "a3355f687262d05caae19a9ab28b2fba2c9745ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3355f687262d05caae19a9ab28b2fba2c9745ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c81750c5bedd7883182ee2684a012c6210ebe1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c81750c5bedd7883182ee2684a012c6210ebe1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c81750c5bedd7883182ee2684a012c6210ebe1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c81750c5bedd7883182ee2684a012c6210ebe1d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b01d215df18ba753746a170125b883befe100d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01d215df18ba753746a170125b883befe100d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01d215df18ba753746a170125b883befe100d67"}], "stats": {"total": 176, "additions": 105, "deletions": 71}, "files": [{"sha": "080f92e70c9376ae384ab282579341aaaca6c692", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -1,3 +1,17 @@\n+2019-12-07  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92793\n+\t* trans.c (gfc_get_location): Declare.\n+\t* trans.c (gfc_get_location): Define; returns column-corrected location.\n+\t(trans_runtime_error_vararg, gfc_trans_runtime_check,\n+\tgfc_generate_module_code): Use new function.\n+\t* trans-array.c (gfc_trans_auto_array_allocation): Likewise.\n+\t* trans-common.c (build_field, get_init_field, create_common): Likewise.\n+\t* trans-decl.c (gfc_build_label_decl, gfc_get_symbol_decl): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_reduction_list, gfc_trans_omp_clauses):\n+\tLikewise.\n+\t* trans-stmt.c (gfc_trans_if_1): Likewise.\n+\n 2019-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92775"}, {"sha": "5c27c065ff02959cdbc7dcbf49fcefa41d13cc22", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -6367,7 +6367,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n   if (flag_stack_arrays)\n     {\n       gcc_assert (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE);\n-      space = build_decl (sym->declared_at.lb->location,\n+      space = build_decl (gfc_get_location (&sym->declared_at),\n \t\t\t  VAR_DECL, create_tmp_var_name (\"A\"),\n \t\t\t  TREE_TYPE (TREE_TYPE (decl)));\n       gfc_trans_vla_type_sizes (sym, &init);\n@@ -6409,7 +6409,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n       tmp = fold_build1_loc (input_location, DECL_EXPR,\n \t\t\t     TREE_TYPE (space), space);\n       gfc_add_expr_to_block (&init, tmp);\n-      addr = fold_build1_loc (sym->declared_at.lb->location,\n+      addr = fold_build1_loc (gfc_get_location (&sym->declared_at),\n \t\t\t      ADDR_EXPR, TREE_TYPE (decl), space);\n       gfc_add_modify (&init, decl, addr);\n       gfc_add_init_cleanup (block, gfc_finish_block (&init), NULL_TREE);"}, {"sha": "95d6395470c79d7424dde02caab297f3c23f7f1a", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -282,7 +282,7 @@ build_field (segment_info *h, tree union_type, record_layout_info rli)\n   unsigned HOST_WIDE_INT desired_align, known_align;\n \n   name = get_identifier (h->sym->name);\n-  field = build_decl (h->sym->declared_at.lb->location,\n+  field = build_decl (gfc_get_location (&h->sym->declared_at),\n \t\t      FIELD_DECL, name, h->field);\n   known_align = (offset & -offset) * BITS_PER_UNIT;\n   if (known_align == 0 || known_align > BIGGEST_ALIGNMENT)\n@@ -559,7 +559,7 @@ get_init_field (segment_info *head, tree union_type, tree *field_init,\n   tmp = build_range_type (gfc_array_index_type,\n \t\t\t  gfc_index_zero_node, tmp);\n   tmp = build_array_type (type, tmp);\n-  field = build_decl (gfc_current_locus.lb->location,\n+  field = build_decl (gfc_get_location (&gfc_current_locus),\n \t\t      FIELD_DECL, NULL_TREE, tmp);\n \n   known_align = BIGGEST_ALIGNMENT;\n@@ -711,7 +711,7 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n     {\n       tree var_decl;\n \n-      var_decl = build_decl (s->sym->declared_at.lb->location,\n+      var_decl = build_decl (gfc_get_location (&s->sym->declared_at),\n \t\t\t     VAR_DECL, DECL_NAME (s->field),\n \t\t\t     TREE_TYPE (s->field));\n       TREE_STATIC (var_decl) = TREE_STATIC (decl);"}, {"sha": "d0fc5d38e20df28b96e86a7aea038ea2e5f67165", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -307,7 +307,7 @@ gfc_build_label_decl (tree label_id)\n void\n gfc_set_decl_location (tree decl, locus * loc)\n {\n-  DECL_SOURCE_LOCATION (decl) = loc->lb->location;\n+  DECL_SOURCE_LOCATION (decl) = gfc_get_location (loc);\n }\n \n \n@@ -1760,7 +1760,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     }\n \n   /* Create the decl for the variable.  */\n-  decl = build_decl (sym->declared_at.lb->location,\n+  decl = build_decl (gfc_get_location (&sym->declared_at),\n \t\t     VAR_DECL, gfc_sym_identifier (sym), gfc_sym_type (sym));\n \n   /* Add attributes to variables.  Functions are handled elsewhere.  */"}, {"sha": "d07ff86fc0b877e03cd7efdaf2ada52170806003", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -1982,7 +1982,7 @@ gfc_trans_omp_reduction_list (gfc_omp_namelist *namelist, tree list,\n \ttree t = gfc_trans_omp_variable (namelist->sym, false);\n \tif (t != error_mark_node)\n \t  {\n-\t    tree node = build_omp_clause (where.lb->location,\n+\t    tree node = build_omp_clause (gfc_get_location (&where),\n \t\t\t\t\t  OMP_CLAUSE_REDUCTION);\n \t    OMP_CLAUSE_DECL (node) = t;\n \t    if (mark_addressable)\n@@ -2789,7 +2789,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       if_var = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_IF);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_IF);\n       OMP_CLAUSE_IF_MODIFIER (c) = ERROR_MARK;\n       OMP_CLAUSE_IF_EXPR (c) = if_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n@@ -2805,7 +2805,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \tif_var = gfc_evaluate_now (se.expr, block);\n \tgfc_add_block_to_block (block, &se.post);\n \n-\tc = build_omp_clause (where.lb->location, OMP_CLAUSE_IF);\n+\tc = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_IF);\n \tswitch (ifc)\n \t  {\n \t  case OMP_IF_PARALLEL:\n@@ -2849,7 +2849,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       final_var = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_FINAL);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_FINAL);\n       OMP_CLAUSE_FINAL_EXPR (c) = final_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -2864,7 +2864,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       num_threads = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NUM_THREADS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_THREADS);\n       OMP_CLAUSE_NUM_THREADS_EXPR (c) = num_threads;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -2881,7 +2881,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n   if (clauses->sched_kind != OMP_SCHED_NONE)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_SCHEDULE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SCHEDULE);\n       OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (c) = chunk_size;\n       switch (clauses->sched_kind)\n \t{\n@@ -2918,7 +2918,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n   if (clauses->default_sharing != OMP_DEFAULT_UNKNOWN)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_DEFAULT);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_DEFAULT);\n       switch (clauses->default_sharing)\n \t{\n \tcase OMP_DEFAULT_NONE:\n@@ -2944,13 +2944,13 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n   if (clauses->nowait)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NOWAIT);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NOWAIT);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->ordered)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_ORDERED);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_ORDERED);\n       OMP_CLAUSE_ORDERED_EXPR (c)\n \t= clauses->orderedc ? build_int_cst (integer_type_node,\n \t\t\t\t\t     clauses->orderedc) : NULL_TREE;\n@@ -2959,33 +2959,33 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n   if (clauses->untied)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_UNTIED);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_UNTIED);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->mergeable)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_MERGEABLE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_MERGEABLE);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->collapse)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_COLLAPSE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_COLLAPSE);\n       OMP_CLAUSE_COLLAPSE_EXPR (c)\n \t= build_int_cst (integer_type_node, clauses->collapse);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->inbranch)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_INBRANCH);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_INBRANCH);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->notinbranch)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NOTINBRANCH);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NOTINBRANCH);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n@@ -2994,26 +2994,26 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     case OMP_CANCEL_UNKNOWN:\n       break;\n     case OMP_CANCEL_PARALLEL:\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_PARALLEL);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_PARALLEL);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n       break;\n     case OMP_CANCEL_SECTIONS:\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_SECTIONS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SECTIONS);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n       break;\n     case OMP_CANCEL_DO:\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_FOR);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_FOR);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n       break;\n     case OMP_CANCEL_TASKGROUP:\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_TASKGROUP);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_TASKGROUP);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n       break;\n     }\n \n   if (clauses->proc_bind != OMP_PROC_BIND_UNKNOWN)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_PROC_BIND);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_PROC_BIND);\n       switch (clauses->proc_bind)\n \t{\n \tcase OMP_PROC_BIND_MASTER:\n@@ -3041,7 +3041,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       safelen_var = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_SAFELEN);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SAFELEN);\n       OMP_CLAUSE_SAFELEN_EXPR (c) = safelen_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3050,7 +3050,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     {\n       if (declare_simd)\n \t{\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_SIMDLEN);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SIMDLEN);\n \t  OMP_CLAUSE_SIMDLEN_EXPR (c)\n \t    = gfc_conv_constant_to_tree (clauses->simdlen_expr);\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n@@ -3065,7 +3065,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t  simdlen_var = gfc_evaluate_now (se.expr, block);\n \t  gfc_add_block_to_block (block, &se.post);\n \n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_SIMDLEN);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SIMDLEN);\n \t  OMP_CLAUSE_SIMDLEN_EXPR (c) = simdlen_var;\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n \t}\n@@ -3081,7 +3081,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       num_teams = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NUM_TEAMS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_TEAMS);\n       OMP_CLAUSE_NUM_TEAMS_EXPR (c) = num_teams;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3096,7 +3096,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       device = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_DEVICE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_DEVICE);\n       OMP_CLAUSE_DEVICE_ID (c) = device;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3111,7 +3111,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       thread_limit = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_THREAD_LIMIT);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_THREAD_LIMIT);\n       OMP_CLAUSE_THREAD_LIMIT_EXPR (c) = thread_limit;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3128,7 +3128,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n   if (clauses->dist_sched_kind != OMP_SCHED_NONE)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_DIST_SCHEDULE);\n+      c = build_omp_clause (gfc_get_location (&where),\n+\t\t\t    OMP_CLAUSE_DIST_SCHEDULE);\n       OMP_CLAUSE_DIST_SCHEDULE_CHUNK_EXPR (c) = chunk_size;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3143,7 +3144,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       grainsize = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_GRAINSIZE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_GRAINSIZE);\n       OMP_CLAUSE_GRAINSIZE_EXPR (c) = grainsize;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3158,7 +3159,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       num_tasks = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NUM_TASKS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_TASKS);\n       OMP_CLAUSE_NUM_TASKS_EXPR (c) = num_tasks;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3173,7 +3174,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       priority = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_PRIORITY);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_PRIORITY);\n       OMP_CLAUSE_PRIORITY_EXPR (c) = priority;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3188,43 +3189,43 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       hint = gfc_evaluate_now (se.expr, block);\n       gfc_add_block_to_block (block, &se.post);\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_HINT);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_HINT);\n       OMP_CLAUSE_HINT_EXPR (c) = hint;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->simd)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_SIMD);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SIMD);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->threads)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_THREADS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_THREADS);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->nogroup)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NOGROUP);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NOGROUP);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->defaultmap)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_DEFAULTMAP);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_DEFAULTMAP);\n       OMP_CLAUSE_DEFAULTMAP_SET_KIND (c, OMP_CLAUSE_DEFAULTMAP_TOFROM,\n \t\t\t\t      OMP_CLAUSE_DEFAULTMAP_CATEGORY_SCALAR);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->depend_source)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_DEPEND);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_DEPEND);\n       OMP_CLAUSE_DEPEND_KIND (c) = OMP_CLAUSE_DEPEND_SOURCE;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n   if (clauses->async)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_ASYNC);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_ASYNC);\n       if (clauses->async_expr)\n \tOMP_CLAUSE_ASYNC_EXPR (c)\n \t  = gfc_convert_expr_to_tree (block, clauses->async_expr);\n@@ -3234,27 +3235,27 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     }\n   if (clauses->seq)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_SEQ);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_SEQ);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->par_auto)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_AUTO);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_AUTO);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->if_present)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_IF_PRESENT);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_IF_PRESENT);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->finalize)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_FINALIZE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_FINALIZE);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->independent)\n     {\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_INDEPENDENT);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_INDEPENDENT);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->wait_list)\n@@ -3263,7 +3264,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n       for (el = clauses->wait_list; el; el = el->next)\n \t{\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_WAIT);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_WAIT);\n \t  OMP_CLAUSE_DECL (c) = gfc_convert_expr_to_tree (block, el->expr);\n \t  OMP_CLAUSE_CHAIN (c) = omp_clauses;\n \t  omp_clauses = c;\n@@ -3273,23 +3274,23 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n     {\n       tree num_gangs_var\n \t= gfc_convert_expr_to_tree (block, clauses->num_gangs_expr);\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NUM_GANGS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_GANGS);\n       OMP_CLAUSE_NUM_GANGS_EXPR (c) = num_gangs_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->num_workers_expr)\n     {\n       tree num_workers_var\n \t= gfc_convert_expr_to_tree (block, clauses->num_workers_expr);\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_NUM_WORKERS);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_WORKERS);\n       OMP_CLAUSE_NUM_WORKERS_EXPR (c) = num_workers_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n   if (clauses->vector_length_expr)\n     {\n       tree vector_length_var\n \t= gfc_convert_expr_to_tree (block, clauses->vector_length_expr);\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_VECTOR_LENGTH);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_VECTOR_LENGTH);\n       OMP_CLAUSE_VECTOR_LENGTH_EXPR (c) = vector_length_var;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n@@ -3303,7 +3304,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       for (el = clauses->tile_list; el; el = el->next)\n \tvec_safe_push (tvec, gfc_convert_expr_to_tree (block, el->expr));\n \n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_TILE);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_TILE);\n       OMP_CLAUSE_TILE_LIST (c) = build_tree_list_vec (tvec);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n       tvec->truncate (0);\n@@ -3314,13 +3315,13 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t{\n \t  tree vector_var\n \t    = gfc_convert_expr_to_tree (block, clauses->vector_expr);\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_VECTOR);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_VECTOR);\n \t  OMP_CLAUSE_VECTOR_EXPR (c) = vector_var;\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n \t}\n       else\n \t{\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_VECTOR);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_VECTOR);\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n \t}\n     }\n@@ -3330,20 +3331,20 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t{\n \t  tree worker_var\n \t    = gfc_convert_expr_to_tree (block, clauses->worker_expr);\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_WORKER);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_WORKER);\n \t  OMP_CLAUSE_WORKER_EXPR (c) = worker_var;\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n \t}\n       else\n \t{\n-\t  c = build_omp_clause (where.lb->location, OMP_CLAUSE_WORKER);\n+\t  c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_WORKER);\n \t  omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n \t}\n     }\n   if (clauses->gang)\n     {\n       tree arg;\n-      c = build_omp_clause (where.lb->location, OMP_CLAUSE_GANG);\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_GANG);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n       if (clauses->gang_num_expr)\n \t{"}, {"sha": "3275cb4858c821afab3b352aa49476b0ffcea21f", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -1454,7 +1454,8 @@ gfc_trans_if_1 (gfc_code * code)\n     elsestmt = build_empty_stmt (input_location);\n \n   /* Build the condition expression and add it to the condition block.  */\n-  loc = code->expr1->where.lb ? code->expr1->where.lb->location : input_location;\n+  loc = code->expr1->where.lb ? gfc_get_location (&code->expr1->where)\n+\t\t\t      : input_location;\n   stmt = fold_build3_loc (loc, COND_EXPR, void_type_node, if_se.expr, stmt,\n \t\t\t  elsestmt);\n \n@@ -2328,7 +2329,7 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n   type = TREE_TYPE (dovar);\n   bool is_step_positive = tree_int_cst_sgn (step) > 0;\n \n-  loc = code->ext.iterator->start->where.lb->location;\n+  loc = gfc_get_location (&code->ext.iterator->start->where);\n \n   /* Initialize the DO variable: dovar = from.  */\n   gfc_add_modify_loc (loc, pblock, dovar,\n@@ -2507,7 +2508,7 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n \n   gfc_start_block (&block);\n \n-  loc = code->ext.iterator->start->where.lb->location;\n+  loc = gfc_get_location (&code->ext.iterator->start->where);\n \n   /* Evaluate all the expressions in the iterator.  */\n   gfc_init_se (&se, NULL);\n@@ -2801,15 +2802,17 @@ gfc_trans_do_while (gfc_code * code)\n   gfc_init_se (&cond, NULL);\n   gfc_conv_expr_val (&cond, code->expr1);\n   gfc_add_block_to_block (&block, &cond.pre);\n-  cond.expr = fold_build1_loc (code->expr1->where.lb->location,\n-\t\t\t       TRUTH_NOT_EXPR, TREE_TYPE (cond.expr), cond.expr);\n+  cond.expr = fold_build1_loc (gfc_get_location (&code->expr1->where),\n+\t\t\t       TRUTH_NOT_EXPR, TREE_TYPE (cond.expr),\n+\t\t\t       cond.expr);\n \n   /* Build \"IF (! cond) GOTO exit_label\".  */\n   tmp = build1_v (GOTO_EXPR, exit_label);\n   TREE_USED (exit_label) = 1;\n-  tmp = fold_build3_loc (code->expr1->where.lb->location, COND_EXPR,\n+  tmp = fold_build3_loc (gfc_get_location (&code->expr1->where), COND_EXPR,\n \t\t\t void_type_node, cond.expr, tmp,\n-\t\t\t build_empty_stmt (code->expr1->where.lb->location));\n+\t\t\t build_empty_stmt (gfc_get_location (\n+\t\t\t\t\t     &code->expr1->where)));\n   gfc_add_expr_to_block (&block, tmp);\n \n   /* The main body of the loop.  */\n@@ -2828,7 +2831,7 @@ gfc_trans_do_while (gfc_code * code)\n \n   gfc_init_block (&block);\n   /* Build the loop.  */\n-  tmp = fold_build1_loc (code->expr1->where.lb->location, LOOP_EXPR,\n+  tmp = fold_build1_loc (gfc_get_location (&code->expr1->where), LOOP_EXPR,\n \t\t\t void_type_node, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n "}, {"sha": "70c7e2d7ecdedb6907ec921a14b2a275fccdbeb7", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -48,6 +48,18 @@ const char gfc_msg_fault[] = N_(\"Array reference out of bounds\");\n const char gfc_msg_wrong_return[] = N_(\"Incorrect function return value\");\n \n \n+/* Return a location_t suitable for 'tree' for a gfortran locus.  The way the\n+   parser works in gfortran, loc->lb->location contains only the line number\n+   and LOCATION_COLUMN is 0; hence, the column has to be added when generating\n+   locations for 'tree'.  Cf. error.c's gfc_format_decoder.  */\n+\n+location_t\n+gfc_get_location (locus *loc)\n+{\n+  return linemap_position_for_loc_and_offset (line_table, loc->lb->location,\n+\t\t\t\t\t      loc->nextc - loc->lb->line);\n+}\n+\n /* Advance along TREE_CHAIN n times.  */\n \n tree\n@@ -503,7 +515,7 @@ trans_runtime_error_vararg (tree errorfunc, locus* where, const char* msgid,\n      irectly.  */\n   fntype = TREE_TYPE (errorfunc);\n \n-  loc = where ? where->lb->location : input_location;\n+  loc = where ? gfc_get_location (where) : input_location;\n   tmp = fold_build_call_array_loc (loc, TREE_TYPE (fntype),\n \t\t\t\t   fold_build1_loc (loc, ADDR_EXPR,\n \t\t\t\t\t     build_pointer_type (fntype),\n@@ -582,14 +594,14 @@ gfc_trans_runtime_check (bool error, bool once, tree cond, stmtblock_t * pblock,\n   else\n     {\n       if (once)\n-\tcond = fold_build2_loc (where->lb->location, TRUTH_AND_EXPR,\n+\tcond = fold_build2_loc (gfc_get_location (where), TRUTH_AND_EXPR,\n \t\t\t\tlong_integer_type_node, tmpvar, cond);\n       else\n \tcond = fold_convert (long_integer_type_node, cond);\n \n-      tmp = fold_build3_loc (where->lb->location, COND_EXPR, void_type_node,\n+      tmp = fold_build3_loc (gfc_get_location (where), COND_EXPR, void_type_node,\n \t\t\t     cond, body,\n-\t\t\t     build_empty_stmt (where->lb->location));\n+\t\t\t     build_empty_stmt (gfc_get_location (where)));\n       gfc_add_expr_to_block (pblock, tmp);\n     }\n }\n@@ -2214,7 +2226,7 @@ gfc_generate_module_code (gfc_namespace * ns)\n \n   gcc_assert (ns->proc_name->backend_decl == NULL);\n   ns->proc_name->backend_decl\n-    = build_decl (ns->proc_name->declared_at.lb->location,\n+    = build_decl (gfc_get_location (&ns->proc_name->declared_at),\n \t\t  NAMESPACE_DECL, get_identifier (ns->proc_name->name),\n \t\t  void_type_node);\n   entry = gfc_find_module (ns->proc_name->name);"}, {"sha": "d3c057278f3f34451623143e0e35bafadf6dfec7", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c81750c5bedd7883182ee2684a012c6210ebe1d/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=9c81750c5bedd7883182ee2684a012c6210ebe1d", "patch": "@@ -658,6 +658,10 @@ void gfc_finish_decl_attrs (tree, symbol_attribute *);\n /* Allocate the lang-specific part of a decl node.  */\n void gfc_allocate_lang_decl (tree);\n \n+/* Get the location suitable for the ME from a gfortran locus; required to get\n+   the column number right.  */\n+location_t gfc_get_location (locus *);\n+\n /* Advance along a TREE_CHAIN.  */\n tree gfc_advance_chain (tree, int);\n "}]}