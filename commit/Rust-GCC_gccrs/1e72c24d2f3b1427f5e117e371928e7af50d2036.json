{"sha": "1e72c24d2f3b1427f5e117e371928e7af50d2036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3MmMyNGQyZjNiMTQyN2Y1ZTExN2UzNzE5MjhlN2FmNTBkMjAzNg==", "commit": {"author": {"name": "prathamesh.kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2021-07-12T07:53:06Z"}, "committer": {"name": "prathamesh.kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2021-07-12T07:53:41Z"}, "message": "arm/98435: Missed optimization in expanding vector constructor.\n\nThe patch moves vec_init pattern from neon.md to vec-common.md,\nand adjusts the mode to VDQX to accomodate binary floats. Also,\nthe pattern is additionally gated on VALID_MVE_MODE.\n\ngcc/ChangeLog:\n\tPR target/98435\n\t* config/arm/neon.md (vec_init): Move to ...\n\t* config/arm/vec-common.md (vec_init): ... here.\n\tChange the pattern's mode to VDQX and gate it on VALID_MVE_MODE.\n\ngcc/testsuite/ChangeLog:\n\tPR target/98435\n\t* gcc.target/arm/simd/pr98435.c: New test.", "tree": {"sha": "cb8d62515e6a53ea48823d7ba29d5edefd7c727c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8d62515e6a53ea48823d7ba29d5edefd7c727c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e72c24d2f3b1427f5e117e371928e7af50d2036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e72c24d2f3b1427f5e117e371928e7af50d2036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e72c24d2f3b1427f5e117e371928e7af50d2036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e72c24d2f3b1427f5e117e371928e7af50d2036/comments", "author": null, "committer": null, "parents": [{"sha": "5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "64365e0a909faf3cc726e01bf33db26f82c869d8", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e72c24d2f3b1427f5e117e371928e7af50d2036/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e72c24d2f3b1427f5e117e371928e7af50d2036/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=1e72c24d2f3b1427f5e117e371928e7af50d2036", "patch": "@@ -458,15 +458,6 @@\n   [(set_attr \"type\" \"neon_store1_one_lane_q,neon_to_gp_q\")]\n )\n \n-(define_expand \"vec_init<mode><V_elem_l>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\")\n-   (match_operand 1 \"\" \"\")]\n-  \"TARGET_NEON || TARGET_HAVE_MVE\"\n-{\n-  neon_expand_vector_init (operands[0], operands[1]);\n-  DONE;\n-})\n-\n ;; Doubleword and quadword arithmetic.\n \n ;; NOTE: some other instructions also support 64-bit integer"}, {"sha": "68de4f0f943a066ee4e9b2f4f0f5be55346e794a", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e72c24d2f3b1427f5e117e371928e7af50d2036/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e72c24d2f3b1427f5e117e371928e7af50d2036/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=1e72c24d2f3b1427f5e117e371928e7af50d2036", "patch": "@@ -702,3 +702,12 @@\n    DONE;\n  }\n )\n+\n+(define_expand \"vec_init<mode><V_elem_l>\"\n+  [(match_operand:VDQX 0 \"s_register_operand\")\n+   (match_operand 1 \"\" \"\")]\n+  \"TARGET_NEON || (TARGET_HAVE_MVE && VALID_MVE_MODE (<MODE>mode))\"\n+{\n+  neon_expand_vector_init (operands[0], operands[1]);\n+  DONE;\n+})"}, {"sha": "0af8633fd5650013679b1d58889f3735867a54e5", "filename": "gcc/testsuite/gcc.target/arm/simd/pr98435.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e72c24d2f3b1427f5e117e371928e7af50d2036/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr98435.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e72c24d2f3b1427f5e117e371928e7af50d2036/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr98435.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr98435.c?ref=1e72c24d2f3b1427f5e117e371928e7af50d2036", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-mfloat-abi=softfp -march=armv8.2-a+bf16+fp16\" } */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x4_t f (bfloat16_t a)\n+{\n+  return (bfloat16x4_t) {a, a, a, a};\n+}\n+\n+/* { dg-final { scan-assembler {\\tvdup.16\\td[0-9]+, r0} } } */\n+/* { dg-final { scan-assembler {\\tvmov\\tr0, r1, d[0-9]+} } } */"}]}