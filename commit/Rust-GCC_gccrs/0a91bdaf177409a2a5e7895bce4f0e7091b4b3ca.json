{"sha": "0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "node_id": "C_kwDOANBUbNoAKDBhOTFiZGFmMTc3NDA5YTJhNWU3ODk1YmNlNGYwZTcwOTFiNGIzY2E", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-07T13:56:25Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-07T13:56:46Z"}, "message": "c: New C2x keywords\n\nC2x follows C++ in making alignas, alignof, bool, false,\nstatic_assert, thread_local and true keywords; implement this\naccordingly.  This implementation makes them normal keywords in C2x\nmode just like any other keyword (C2x leaves open the possibility of\nimplementation using predefined macros instead - thus, there aren't\nany testcases asserting that they aren't macros).  As in C++ and\nprevious versions of C, true and false are handled like signed 1 and 0\nin #if (there was an intermediate state in some C2x drafts where they\nhad different macro expansions that were unsigned in #if).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\nAs with the removal of unprototyped functions, this change has a high\nrisk of breaking some old code and people doing GNU/Linux distribution\nbuilds may wish to see how much is broken in a build with a -std=gnu2x\ndefault.\n\ngcc/\n\t* ginclude/stdalign.h [defined __STDC_VERSION__ &&\n\t__STDC_VERSION__ > 201710L]: Disable all content.\n\t* ginclude/stdbool.h [defined __STDC_VERSION__ && __STDC_VERSION__\n\t> 201710L] (bool, true, false): Do not define.\n\ngcc/c-family/\n\t* c-common.cc (c_common_reswords): Use D_C2X instead of D_CXXONLY\n\tfor alignas, alignof, bool, false, static_assert, thread_local and\n\ttrue.\n\ngcc/c/\n\t* c-parser.cc (c_parser_static_assert_declaration_no_semi)\n\t(c_parser_alignas_specifier, c_parser_alignof_expression): Allow\n\tfor C2x spellings of keywords.\n\t(c_parser_postfix_expression): Handle RID_TRUE and RID_FALSE.\n\ngcc/testsuite/\n\t* gcc.dg/c11-keywords-1.c, gcc.dg/c2x-align-1.c,\n\tgcc.dg/c2x-align-6.c, gcc.dg/c2x-bool-2.c,\n\tgcc.dg/c2x-static-assert-3.c, gcc.dg/c2x-static-assert-4.c,\n\tgcc.dg/c2x-thread-local-1.c: New tests.\n\t* gcc.dg/c2x-bool-1.c: Update expectations.\n\nlibcpp/\n\t* include/cpplib.h (struct cpp_options): Add true_false.\n\t* expr.cc (eval_token): Check true_false not cplusplus to\n\tdetermine whether to handle true and false keywords.\n\t* init.cc (struct lang_flags): Add true_false.\n\t(lang_defaults): Update.\n\t(cpp_set_lang): Set true_false.", "tree": {"sha": "403ae03d079179e0a3cf9fc3096c4c3b8e763e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/403ae03d079179e0a3cf9fc3096c4c3b8e763e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3"}], "stats": {"total": 243, "additions": 188, "deletions": 55}, "files": [{"sha": "0a5b7e120c9777aef827d2bf960b151940c362f9", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -459,11 +459,11 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__GIMPLE\",\t\tRID_GIMPLE,\tD_CONLY },\n   { \"__PHI\",\t\tRID_PHI,\tD_CONLY },\n   { \"__RTL\",\t\tRID_RTL,\tD_CONLY },\n-  { \"alignas\",\t\tRID_ALIGNAS,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n-  { \"alignof\",\t\tRID_ALIGNOF,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n+  { \"alignas\",\t\tRID_ALIGNAS,\tD_C2X | D_CXX11 | D_CXXWARN },\n+  { \"alignof\",\t\tRID_ALIGNOF,\tD_C2X | D_CXX11 | D_CXXWARN },\n   { \"asm\",\t\tRID_ASM,\tD_ASM },\n   { \"auto\",\t\tRID_AUTO,\t0 },\n-  { \"bool\",\t\tRID_BOOL,\tD_CXXONLY | D_CXXWARN },\n+  { \"bool\",\t\tRID_BOOL,\tD_C2X | D_CXXWARN },\n   { \"break\",\t\tRID_BREAK,\t0 },\n   { \"case\",\t\tRID_CASE,\t0 },\n   { \"catch\",\t\tRID_CATCH,\tD_CXX_OBJC | D_CXXWARN },\n@@ -489,7 +489,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"explicit\",\t\tRID_EXPLICIT,\tD_CXXONLY | D_CXXWARN },\n   { \"export\",\t\tRID_EXPORT,\tD_CXXONLY | D_CXXWARN },\n   { \"extern\",\t\tRID_EXTERN,\t0 },\n-  { \"false\",\t\tRID_FALSE,\tD_CXXONLY | D_CXXWARN },\n+  { \"false\",\t\tRID_FALSE,\tD_C2X | D_CXXWARN },\n   { \"float\",\t\tRID_FLOAT,\t0 },\n   { \"for\",\t\tRID_FOR,\t0 },\n   { \"friend\",\t\tRID_FRIEND,\tD_CXXONLY | D_CXXWARN },\n@@ -515,15 +515,15 @@ const struct c_common_resword c_common_reswords[] =\n   { \"signed\",\t\tRID_SIGNED,\t0 },\n   { \"sizeof\",\t\tRID_SIZEOF,\t0 },\n   { \"static\",\t\tRID_STATIC,\t0 },\n-  { \"static_assert\",    RID_STATIC_ASSERT, D_CXXONLY | D_CXX11 | D_CXXWARN },\n+  { \"static_assert\",    RID_STATIC_ASSERT, D_C2X | D_CXX11 | D_CXXWARN },\n   { \"static_cast\",\tRID_STATCAST,\tD_CXXONLY | D_CXXWARN },\n   { \"struct\",\t\tRID_STRUCT,\t0 },\n   { \"switch\",\t\tRID_SWITCH,\t0 },\n   { \"template\",\t\tRID_TEMPLATE,\tD_CXXONLY | D_CXXWARN },\n   { \"this\",\t\tRID_THIS,\tD_CXXONLY | D_CXXWARN },\n-  { \"thread_local\",\tRID_THREAD,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n+  { \"thread_local\",\tRID_THREAD,\tD_C2X | D_CXX11 | D_CXXWARN },\n   { \"throw\",\t\tRID_THROW,\tD_CXX_OBJC | D_CXXWARN },\n-  { \"true\",\t\tRID_TRUE,\tD_CXXONLY | D_CXXWARN },\n+  { \"true\",\t\tRID_TRUE,\tD_C2X | D_CXXWARN },\n   { \"try\",\t\tRID_TRY,\tD_CXX_OBJC | D_CXXWARN },\n   { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n   { \"typename\",\t\tRID_TYPENAME,\tD_CXXONLY | D_CXXWARN },"}, {"sha": "d134448196ed9f594a9fb3258e82789fcb4da855", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -2630,13 +2630,14 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n   tree string = NULL_TREE;\n \n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT));\n+  tree spelling = c_parser_peek_token (parser)->value;\n   assert_loc = c_parser_peek_token (parser)->location;\n   if (flag_isoc99)\n     pedwarn_c99 (assert_loc, OPT_Wpedantic,\n-\t\t \"ISO C99 does not support %<_Static_assert%>\");\n+\t\t \"ISO C99 does not support %qE\", spelling);\n   else\n     pedwarn_c99 (assert_loc, OPT_Wpedantic,\n-\t\t \"ISO C90 does not support %<_Static_assert%>\");\n+\t\t \"ISO C90 does not support %qE\", spelling);\n   c_parser_consume_token (parser);\n   matching_parens parens;\n   if (!parens.require_open (parser))\n@@ -2667,7 +2668,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n        new C2X feature of _Static_assert.  */\n     pedwarn_c11 (assert_loc, OPT_Wpedantic,\n \t\t \"ISO C11 does not support omitting the string in \"\n-\t\t \"%<_Static_assert%>\");\n+\t\t \"%qE\", spelling);\n   parens.require_close (parser);\n \n   if (!INTEGRAL_TYPE_P (TREE_TYPE (value)))\n@@ -3774,13 +3775,14 @@ c_parser_alignas_specifier (c_parser * parser)\n   tree ret = error_mark_node;\n   location_t loc = c_parser_peek_token (parser)->location;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNAS));\n+  tree spelling = c_parser_peek_token (parser)->value;\n   c_parser_consume_token (parser);\n   if (flag_isoc99)\n     pedwarn_c99 (loc, OPT_Wpedantic,\n-\t\t \"ISO C99 does not support %<_Alignas%>\");\n+\t\t \"ISO C99 does not support %qE\", spelling);\n   else\n     pedwarn_c99 (loc, OPT_Wpedantic,\n-\t\t \"ISO C90 does not support %<_Alignas%>\");\n+\t\t \"ISO C90 does not support %qE\", spelling);\n   matching_parens parens;\n   if (!parens.require_open (parser))\n     return ret;\n@@ -8399,10 +8401,12 @@ c_parser_alignof_expression (c_parser *parser)\n   location_t end_loc;\n   tree alignof_spelling = c_parser_peek_token (parser)->value;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNOF));\n-  bool is_c11_alignof = strcmp (IDENTIFIER_POINTER (alignof_spelling),\n-\t\t\t\t\"_Alignof\") == 0;\n+  bool is_c11_alignof = (strcmp (IDENTIFIER_POINTER (alignof_spelling),\n+\t\t\t\t\"_Alignof\") == 0\n+\t\t\t || strcmp (IDENTIFIER_POINTER (alignof_spelling),\n+\t\t\t\t    \"alignof\") == 0);\n   /* A diagnostic is not required for the use of this identifier in\n-     the implementation namespace; only diagnose it for the C11\n+     the implementation namespace; only diagnose it for the C11 or C2X\n      spelling because of existing code using the other spellings.  */\n   if (is_c11_alignof)\n     {\n@@ -10272,6 +10276,16 @@ c_parser_postfix_expression (c_parser *parser)\n \t  pedwarn_c11 (loc, OPT_Wpedantic,\n \t\t       \"ISO C does not support %qs before C2X\", \"nullptr\");\n \t  break;\n+\tcase RID_TRUE:\n+\t  c_parser_consume_token (parser);\n+\t  expr.value = boolean_true_node;\n+\t  set_c_expr_source_range (&expr, tok_range);\n+\t  break;\n+\tcase RID_FALSE:\n+\t  c_parser_consume_token (parser);\n+\t  expr.value = boolean_false_node;\n+\t  set_c_expr_source_range (&expr, tok_range);\n+\t  break;\n \tdefault:\n \t  c_parser_error (parser, \"expected expression\");\n \t  expr.set_error ();"}, {"sha": "6ed424343b442fe3693283607285a8c885efadfb", "filename": "gcc/ginclude/stdalign.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fginclude%2Fstdalign.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fginclude%2Fstdalign.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdalign.h?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -26,7 +26,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef _STDALIGN_H\n #define _STDALIGN_H\n \n-#ifndef __cplusplus\n+#if (!defined __cplusplus\t\t\t\t\t\t\\\n+     && !(defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L))\n \n #define alignas _Alignas\n #define alignof _Alignof"}, {"sha": "bcf78395941578ff6f27d679dcc338efa3697367", "filename": "gcc/ginclude/stdbool.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fginclude%2Fstdbool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Fginclude%2Fstdbool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdbool.h?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -30,11 +30,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #ifndef __cplusplus\n \n-#define bool\t_Bool\n #if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n-#define true\t((_Bool)+1u)\n-#define false\t((_Bool)+0u)\n+/* bool, true and false are keywords.  */\n #else\n+#define bool\t_Bool\n #define true\t1\n #define false\t0\n #endif"}, {"sha": "974ccfc75ca5e882f81ba09b3fd12822f4eb9a0c", "filename": "gcc/testsuite/gcc.dg/c11-keywords-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-keywords-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-keywords-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-keywords-1.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,11 @@\n+/* Test new C2x keywords not keywords in C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int alignas;\n+int alignof;\n+int bool;\n+int false;\n+int true;\n+int static_assert;\n+int thread_local;"}, {"sha": "25dbd62c5509bd1d55b94f8fe9abfb9ce66113d4", "filename": "gcc/testsuite/gcc.dg/c2x-align-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-align-1.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,41 @@\n+/* Test C2x alignment support.  Test valid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <stddef.h>\n+\n+alignas (alignof (max_align_t)) char c;\n+extern alignas (max_align_t) char c;\n+extern char c;\n+\n+extern alignas (max_align_t) short s;\n+alignas (max_align_t) short s;\n+\n+alignas (int) int i;\n+extern int i;\n+\n+alignas (max_align_t) long l;\n+\n+alignas (max_align_t) long long ll;\n+\n+alignas (max_align_t) float f;\n+\n+alignas (max_align_t) double d;\n+\n+alignas (max_align_t) _Complex long double cld;\n+\n+alignas (0) alignas (int) alignas (char) char ca[10];\n+\n+alignas ((int) alignof (max_align_t) + 0) int x;\n+\n+enum e { E = alignof (max_align_t) };\n+alignas (E) int y;\n+\n+void\n+func (void)\n+{\n+  alignas (max_align_t) long long auto_ll;\n+}\n+\n+/* Valid, but useless.  */\n+alignas (0) struct s; /* { dg-warning \"useless\" } */"}, {"sha": "8559a58d96f8beac8d6b0edfc2d0867f5271142b", "filename": "gcc/testsuite/gcc.dg/c2x-align-6.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-align-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-align-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-align-6.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,8 @@\n+/* Test C2x alignof returning minimum alignment for a type.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#define _Alignas alignas\n+#define _Alignof alignof\n+\n+#include \"c11-align-6.c\""}, {"sha": "992fb3180874dc10e1f0a8abdc1fe10d4d4b44f5", "filename": "gcc/testsuite/gcc.dg/c2x-bool-1.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-1.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -11,16 +11,16 @@ extern void abort (void);\n extern void exit (int);\n extern int strcmp (const char *, const char *);\n \n-#if false - 1 < 0\n-#error \"false signed in #if\"\n+#if false - 1 >= 0\n+#error \"false unsigned in #if\"\n #endif\n \n #if false != 0\n #error \"false not 0 in #if\"\n #endif\n \n-#if true - 2 < 0\n-#error \"true signed in #if\"\n+#if true - 2 >= 0\n+#error \"true unsigned in #if\"\n #endif\n \n #if true != 1\n@@ -30,20 +30,14 @@ extern int strcmp (const char *, const char *);\n int\n main (void)\n {\n-  if (strcmp (str (bool), \"_Bool\") != 0)\n-    abort ();\n   if (_Generic (true, _Bool : 1) != 1)\n     abort ();\n   if (true != 1)\n     abort ();\n-  if (strcmp (str (true), \"((_Bool)+1u)\") != 0)\n-    abort ();\n   if (_Generic (false, _Bool : 1) != 1)\n     abort ();\n   if (false != 0)\n     abort ();\n-  if (strcmp (str (false), \"((_Bool)+0u)\") != 0)\n-    abort ();\n   if (strcmp (str (__bool_true_false_are_defined), \"1\") != 0)\n     abort ();\n   exit (0);"}, {"sha": "4edb34e4de9273f1f2148b038bfab2a43d537980", "filename": "gcc/testsuite/gcc.dg/c2x-bool-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-2.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,42 @@\n+/* Test bool, true and false keywords in C2x.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#if false - 1 >= 0\n+#error \"false unsigned in #if\"\n+#endif\n+\n+#if false != 0\n+#error \"false not 0 in #if\"\n+#endif\n+\n+#if true - 2 >= 0\n+#error \"true unsigned in #if\"\n+#endif\n+\n+#if true != 1\n+#error \"true not 1 in #if\"\n+#endif\n+\n+extern bool b;\n+extern _Bool b;\n+\n+_Static_assert (false == 0);\n+_Static_assert (true == 1);\n+\n+int\n+main (void)\n+{\n+  if (_Generic (true, bool : 1) != 1)\n+    abort ();\n+  if (true != 1)\n+    abort ();\n+  if (_Generic (false, bool : 1) != 1)\n+    abort ();\n+  if (false != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "5d84a6a239fc94475c6c5d8448e22a6c13b5d343", "filename": "gcc/testsuite/gcc.dg/c2x-static-assert-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-3.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,6 @@\n+/* Test C2x static assertions.  static_assert keyword.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic\" } */\n+\n+static_assert (1);\n+static_assert (1, \"message\");"}, {"sha": "b3bcfb4ae22d5b05c61908e51bf3e21ac30c041c", "filename": "gcc/testsuite/gcc.dg/c2x-static-assert-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-4.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,6 @@\n+/* Test C2x static assertions.  static_assert keyword.  Failed assertions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic\" } */\n+\n+static_assert (0); /* { dg-error \"static assertion failed\" } */\n+static_assert (0, \"message\"); /* { dg-error \"message\" } */"}, {"sha": "e1917bd99dc932b017c6a12f41e64dc726600398", "filename": "gcc/testsuite/gcc.dg/c2x-thread-local-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-thread-local-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-thread-local-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-thread-local-1.c?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -0,0 +1,6 @@\n+/* Test C2x thread_local keyword.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+thread_local int a;\n+thread_local void f (void); /* { dg-error \"storage class\" } */"}, {"sha": "4bb02c418d05ebcdd832418e9348bc1750f51d2d", "filename": "libcpp/expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/libcpp%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/libcpp%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.cc?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -1183,7 +1183,7 @@ eval_token (cpp_reader *pfile, const cpp_token *token,\n     case CPP_NAME:\n       if (token->val.node.node == pfile->spec_nodes.n_defined)\n \treturn parse_defined (pfile);\n-      else if (CPP_OPTION (pfile, cplusplus)\n+      else if (CPP_OPTION (pfile, true_false)\n \t       && (token->val.node.node == pfile->spec_nodes.n_true\n \t\t   || token->val.node.node == pfile->spec_nodes.n_false))\n \t{"}, {"sha": "2db1e9cbdfbfc2873102df144c90669c8543b348", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -526,6 +526,9 @@ struct cpp_options\n   /* Nonzero for C++23 delimited escape sequences.  */\n   unsigned char delimited_escape_seqs;\n \n+  /* Nonzero for 'true' and 'false' in #if expressions.  */\n+  unsigned char true_false;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n "}, {"sha": "d3b4f00994b5877ef5c230e4a7cf7b2b3cd15936", "filename": "libcpp/init.cc", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=0a91bdaf177409a2a5e7895bce4f0e7091b4b3ca", "patch": "@@ -98,34 +98,35 @@ struct lang_flags\n   char elifdef;\n   char warning_directive;\n   char delimited_escape_seqs;\n+  char true_false;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef warndir delim */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1,      0 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     0,   1,      0,   1,     1,   0,   1,      1,      0 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0,      0,      0 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0,      0,      0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0,      0,      0 },\n-  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0 },\n-  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0 },\n-  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1 },\n-  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0,      0,      0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef warndir delim trufal */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1,      0,    1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     0,   1,      0,   1,     1,   0,   1,      1,      0,    1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1,    1 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1,    1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0,      0,      0,    0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -157,6 +158,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, elifdef)\t\t\t = l->elifdef;\n   CPP_OPTION (pfile, warning_directive)\t\t = l->warning_directive;\n   CPP_OPTION (pfile, delimited_escape_seqs)\t = l->delimited_escape_seqs;\n+  CPP_OPTION (pfile, true_false)\t\t = l->true_false;\n }\n \n /* Initialize library global state.  */"}]}