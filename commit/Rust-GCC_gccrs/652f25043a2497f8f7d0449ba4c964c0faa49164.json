{"sha": "652f25043a2497f8f7d0449ba4c964c0faa49164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyZjI1MDQzYTI0OTdmOGY3ZDA0NDliYTRjOTY0YzBmYWE0OTE2NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-05T04:23:23Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-05T04:23:23Z"}, "message": "boehm.c (mark_reference_fields): Don't mark RawData fields.\n\n\t* boehm.c (mark_reference_fields): Don't mark RawData fields.\n\tKeep track of when we've seen a reference field after a\n\tnon-reference field.\n\t(get_boehm_type_descriptor): Handle case where we see\n\tnon-reference fields but no trailing reference field.\n\t* decl.c (rawdata_ptr_type_node): Define.\n\t(init_decl_processing): Initialize rawdata_ptr_type_node.\n\t* java-tree.h (rawdata_ptr_type_node): Declare.\n\nFrom-SVN: r33701", "tree": {"sha": "f1bd585b01b4c2c7eec1fe5601041d15a95b79ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1bd585b01b4c2c7eec1fe5601041d15a95b79ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/652f25043a2497f8f7d0449ba4c964c0faa49164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652f25043a2497f8f7d0449ba4c964c0faa49164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652f25043a2497f8f7d0449ba4c964c0faa49164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652f25043a2497f8f7d0449ba4c964c0faa49164/comments", "author": null, "committer": null, "parents": [{"sha": "0db7ad3a431bf5900026d1f970b576b89dbe066b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db7ad3a431bf5900026d1f970b576b89dbe066b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db7ad3a431bf5900026d1f970b576b89dbe066b"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "d922aa11d79ed6994dddd90e6fed72433651ee30", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=652f25043a2497f8f7d0449ba4c964c0faa49164", "patch": "@@ -1,3 +1,14 @@\n+2000-05-04  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* boehm.c (mark_reference_fields): Don't mark RawData fields.\n+\tKeep track of when we've seen a reference field after a\n+\tnon-reference field.\n+\t(get_boehm_type_descriptor): Handle case where we see\n+\tnon-reference fields but no trailing reference field.\n+\t* decl.c (rawdata_ptr_type_node): Define.\n+\t(init_decl_processing): Initialize rawdata_ptr_type_node.\n+\t* java-tree.h (rawdata_ptr_type_node): Declare.\n+\n 2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* jcf-dump.c (SPECIAL_IINC): Ensure arguments match format\n@@ -14,11 +25,6 @@\n \t* gjavah.c (decode_signature_piece): Don't treat `$' as namespace\n \tseparator.\n \n-2000-05-02  Tom Tromey  <tromey@cygnus.com>\n-\n-\t* expr.c (build_jni_stub): Cache the result of\n-\t_Jv_LookupJNIMethod.\n-\n 2000-04-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* class.c (add_method_1): Set both DECL_EXTERNAL and METHOD_NATIVE"}, {"sha": "63d6d7c3dcf50e0787f6212956dc893e06d564e3", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=652f25043a2497f8f7d0449ba4c964c0faa49164", "patch": "@@ -100,7 +100,10 @@ mark_reference_fields (field, low, high, ubit,\n \tcontinue;\n \n       offset = int_byte_position (field);\n-      if (JREFERENCE_TYPE_P (TREE_TYPE (field)))\n+      if (JREFERENCE_TYPE_P (TREE_TYPE (field))\n+\t  /* An `object' of type gnu.gcj.RawData is actually non-Java\n+\t     data.  */\n+\t  && TREE_TYPE (field) != rawdata_ptr_type_node)\n \t{\n \t  unsigned int count;\n \n@@ -117,8 +120,14 @@ mark_reference_fields (field, low, high, ubit,\n \t  set_bit (low, high, ubit - count - 1);\n \t  if (count > ubit - 2)\n \t    *pointer_after_end = 1;\n+\n+\t  /* If we saw a non-reference field earlier, then we can't\n+\t     use the count representation.  We keep track of that in\n+\t     *ALL_BITS_SET.  */\n+\t  if (! *all_bits_set)\n+\t    *all_bits_set = -1;\n \t}\n-      else\n+      else if (*all_bits_set > 0)\n \t*all_bits_set = 0;\n \n       *last_view_index = offset;\n@@ -172,9 +181,13 @@ get_boehm_type_descriptor (tree type)\n   /* If the object is all pointers, or if the part with pointers fits\n      in our bitmap, then we are ok.  Otherwise we have to allocate it\n      a different way.  */\n-  if (all_bits_set)\n+  if (all_bits_set != -1)\n     {\n-      /* In the GC the computation looks something like this:\n+      /* In this case the initial part of the object is all reference\n+\t fields, and the end of the object is all non-reference\n+\t fields.  We represent the mark as a count of the fields,\n+\t shifted.  In the GC the computation looks something like\n+\t this:\n \t value = DS_LENGTH | WORDS_TO_BYTES (last_set_index + 1);\n \t DS_LENGTH is 0.\n \t WORDS_TO_BYTES shifts by log2(bytes-per-pointer).  */"}, {"sha": "2ccde68145c994b5226f9ccecfd011496ebb9dd1", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=652f25043a2497f8f7d0449ba4c964c0faa49164", "patch": "@@ -295,6 +295,7 @@ tree string_ptr_type_node;\n tree throwable_type_node;\n tree runtime_exception_type_node;\n tree error_exception_type_node;\n+tree rawdata_ptr_type_node;\n tree *predef_filenames;\n int  predef_filenames_size;\n \n@@ -586,6 +587,8 @@ init_decl_processing ()\n     lookup_class (get_identifier (\"java.lang.RuntimeException\"));\n   error_exception_type_node = \n     lookup_class (get_identifier (\"java.lang.Error\"));\n+  rawdata_ptr_type_node\n+    = promote_type (lookup_class (get_identifier (\"gnu.gcj.RawData\")));\n \n   /* This section has to be updated as items are added to the previous\n      section. */"}, {"sha": "2820f5d3c4e7a77cbbf5c3a2ced41511bc6c9ae3", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652f25043a2497f8f7d0449ba4c964c0faa49164/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=652f25043a2497f8f7d0449ba4c964c0faa49164", "patch": "@@ -225,6 +225,7 @@ extern tree string_ptr_type_node;\n extern tree throwable_type_node;\n extern tree runtime_exception_type_node;\n extern tree error_exception_type_node;\n+extern tree rawdata_ptr_type_node;\n \n extern tree *predef_filenames;\n extern int predef_filenames_size;"}]}