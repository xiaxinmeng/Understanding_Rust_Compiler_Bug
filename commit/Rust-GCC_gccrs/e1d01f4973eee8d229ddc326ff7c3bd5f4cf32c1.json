{"sha": "e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "node_id": "C_kwDOANBUbNoAKGUxZDAxZjQ5NzNlZWU4ZDIyOWRkYzMyNmZmN2MzYmQ1ZjRjZjMyYzE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-25T11:02:21Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-27T09:43:19Z"}, "message": "Convert some evrp uses in DOM to the range_query API.\n\nDOM is the last remaining user of the evrp engine.  This patch converts\na few uses of the engine and vr-values into the new API.\n\nThere is one subtle change.  The call to vr_value's\nop_with_constant_singleton_value_range can theoretically return\nnon-constants, unlike the range_query API which only returns constants.\nIn this particular case it doesn't matter because the symbolic stuff will\nhave been handled by the const_and_copies/avail_exprs read in the\nSSA_NAME_VALUE copy immediately before.  I have verified this is the case\nby asserting that all calls to op_with_constant_singleton_value_range at\nthis point return either NULL or an INTEGER_CST.\n\nTested on x86-64 Linux with a regstrap, as well as the aforementioned\nassert.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-evrp-analyze.h (class evrp_range_analyzer): Remove\n\tvrp_visit_cond_stmt.\n\t* tree-ssa-dom.c (cprop_operand): Convert to range_query API.\n\t(cprop_into_stmt): Same.\n\t(dom_opt_dom_walker::optimize_stmt): Same.", "tree": {"sha": "99f4153689b443117912c1904133000de63d8122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99f4153689b443117912c1904133000de63d8122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6390c5047adb75960f86d56582e6322aaa4d9281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6390c5047adb75960f86d56582e6322aaa4d9281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6390c5047adb75960f86d56582e6322aaa4d9281"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "4cf82e69c3a395a8ebd66e38ffb2a56452c5f95f", "filename": "gcc/gimple-ssa-evrp-analyze.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1/gcc%2Fgimple-ssa-evrp-analyze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1/gcc%2Fgimple-ssa-evrp-analyze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.h?ref=e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "patch": "@@ -38,13 +38,6 @@ class evrp_range_analyzer : public vr_values\n   /* Record a new unwindable range.  */\n   void push_value_range (tree var, value_range_equiv *vr);\n \n-  /* A bit of a wart.  This should ideally go away.  */\n-  void vrp_visit_cond_stmt (gcond *cond, edge *e)\n-  {\n-    simplify_using_ranges simpl (this);\n-    simpl.vrp_visit_cond_stmt (cond, e);\n-  }\n-\n  private:\n   DISABLE_COPY_AND_ASSIGN (evrp_range_analyzer);\n "}, {"sha": "a8a5b34f725cbe984c5e141861bbd7dbb440198f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "patch": "@@ -1810,7 +1810,7 @@ record_equivalences_from_stmt (gimple *stmt, int may_optimize_p,\n    CONST_AND_COPIES.  */\n \n static void\n-cprop_operand (gimple *stmt, use_operand_p op_p, vr_values *vr_values)\n+cprop_operand (gimple *stmt, use_operand_p op_p, range_query *query)\n {\n   tree val;\n   tree op = USE_FROM_PTR (op_p);\n@@ -1820,7 +1820,12 @@ cprop_operand (gimple *stmt, use_operand_p op_p, vr_values *vr_values)\n      CONST_AND_COPIES.  */\n   val = SSA_NAME_VALUE (op);\n   if (!val)\n-    val = vr_values->op_with_constant_singleton_value_range (op);\n+    {\n+      value_range r;\n+      tree single;\n+      if (query->range_of_expr (r, op, stmt) && r.singleton_p (&single))\n+\tval = single;\n+    }\n \n   if (val && val != op)\n     {\n@@ -1878,7 +1883,7 @@ cprop_operand (gimple *stmt, use_operand_p op_p, vr_values *vr_values)\n    vdef_ops of STMT.  */\n \n static void\n-cprop_into_stmt (gimple *stmt, vr_values *vr_values)\n+cprop_into_stmt (gimple *stmt, range_query *query)\n {\n   use_operand_p op_p;\n   ssa_op_iter iter;\n@@ -1895,7 +1900,7 @@ cprop_into_stmt (gimple *stmt, vr_values *vr_values)\n \t operands.  */\n       if (old_op != last_copy_propagated_op)\n \t{\n-\t  cprop_operand (stmt, op_p, vr_values);\n+\t  cprop_operand (stmt, op_p, query);\n \n \t  tree new_op = USE_FROM_PTR (op_p);\n \t  if (new_op != old_op && TREE_CODE (new_op) == SSA_NAME)\n@@ -2203,8 +2208,8 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator *si,\n \t\t SSA_NAMES.  */\n \t      update_stmt_if_modified (stmt);\n \t      edge taken_edge = NULL;\n-\t      m_evrp_range_analyzer->vrp_visit_cond_stmt\n-\t\t(as_a <gcond *> (stmt), &taken_edge);\n+\t      simplify_using_ranges simpl (m_evrp_range_analyzer);\n+\t      simpl.vrp_visit_cond_stmt (as_a <gcond *> (stmt), &taken_edge);\n \t      if (taken_edge)\n \t\t{\n \t\t  if (taken_edge->flags & EDGE_TRUE_VALUE)"}]}