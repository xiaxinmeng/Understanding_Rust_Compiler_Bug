{"sha": "2282a0e6d49a6ad125c39340bf404bfddfa72fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4MmEwZTZkNDlhNmFkMTI1YzM5MzQwYmY0MDRiZmRkZmE3MmZjZQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-09-20T07:09:20Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-09-20T07:09:20Z"}, "message": "re PR tree-optimization/18463 (suboptimal use of fancy x86 addressing modes)\n\n\tPR tree-optimization/18463\n\t* tree-chrec.c (chrec_convert): Return fold_converted chrec if\n\tconverting it directly is not possible.\n\t(chrec_convert_aggressive): New function.\n\t* tree-chrec.h (chrec_convert_aggressive): Declare.\n\t* tree-scalar-evolution.c (instantiate_parameters_1, resolve_mixers):\n\tFold chrec conversions aggressively if asked to.\n\t(instantiate_parameters): Modified because of changes in\n\tinstantiate_parameters_1.\n\nFrom-SVN: r104443", "tree": {"sha": "ee911e5a5331d4a03e36339c0a1164fe6ef47658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee911e5a5331d4a03e36339c0a1164fe6ef47658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2282a0e6d49a6ad125c39340bf404bfddfa72fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2282a0e6d49a6ad125c39340bf404bfddfa72fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2282a0e6d49a6ad125c39340bf404bfddfa72fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2282a0e6d49a6ad125c39340bf404bfddfa72fce/comments", "author": null, "committer": null, "parents": [{"sha": "3a3c28db2425a15fe9b24635f0aa99249e4b64c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3c28db2425a15fe9b24635f0aa99249e4b64c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3c28db2425a15fe9b24635f0aa99249e4b64c6"}], "stats": {"total": 119, "additions": 87, "deletions": 32}, "files": [{"sha": "802e7a631df6d87aa4f47711b9d52e332ed80953", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2282a0e6d49a6ad125c39340bf404bfddfa72fce", "patch": "@@ -1,3 +1,15 @@\n+2005-09-20  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/18463\n+\t* tree-chrec.c (chrec_convert): Return fold_converted chrec if\n+\tconverting it directly is not possible.\n+\t(chrec_convert_aggressive): New function.\n+\t* tree-chrec.h (chrec_convert_aggressive): Declare.\n+\t* tree-scalar-evolution.c (instantiate_parameters_1, resolve_mixers):\n+\tFold chrec conversions aggressively if asked to.\n+\t(instantiate_parameters): Modified because of changes in\n+\tinstantiate_parameters_1.\n+\n 2005-09-19  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/sse.md (reduc_splus_v4sf): Rename from reduc_plus_v4sf."}, {"sha": "0bf1d38459229cca98f0e8a54ad01eb234a730b1", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=2282a0e6d49a6ad125c39340bf404bfddfa72fce", "patch": "@@ -1164,9 +1164,7 @@ chrec_convert (tree type, tree chrec, tree at_stmt)\n \t      fprintf (dump_file, \"\\n)\\n\");\n \t    }\n \n-\t  /* Directly convert to \"don't know\": no worth dealing with\n-\t     difficult cases.  */\n-\t  return chrec_dont_know;\n+\t  return fold_convert (type, chrec);\n \t}\n \n       return build_polynomial_chrec (CHREC_VARIABLE (chrec),\n@@ -1201,6 +1199,35 @@ chrec_convert (tree type, tree chrec, tree at_stmt)\n   return res;\n }\n \n+/* Convert CHREC to TYPE, without regard to signed overflows.  Returns the new\n+   chrec if something else than what chrec_convert would do happens, NULL_TREE\n+   otherwise.  */\n+\n+tree\n+chrec_convert_aggressive (tree type, tree chrec)\n+{\n+  tree inner_type, left, right, lc, rc;\n+\n+  if (automatically_generated_chrec_p (chrec)\n+      || TREE_CODE (chrec) != POLYNOMIAL_CHREC)\n+    return NULL_TREE;\n+\n+  inner_type = TREE_TYPE (chrec);\n+  if (TYPE_PRECISION (type) > TYPE_PRECISION (inner_type))\n+    return NULL_TREE;\n+\n+  left = CHREC_LEFT (chrec);\n+  right = CHREC_RIGHT (chrec);\n+  lc = chrec_convert_aggressive (type, left);\n+  if (!lc)\n+    lc = chrec_convert (type, left, NULL_TREE);\n+  rc = chrec_convert_aggressive (type, right);\n+  if (!rc)\n+    rc = chrec_convert (type, right, NULL_TREE);\n+\n+  return build_polynomial_chrec (CHREC_VARIABLE (chrec), lc, rc);\n+}\n+\n /* Returns the type of the chrec.  */\n \n tree "}, {"sha": "19719a65be835abdfc3576d6d3c78a9c2e2e7b6a", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=2282a0e6d49a6ad125c39340bf404bfddfa72fce", "patch": "@@ -68,6 +68,7 @@ extern tree chrec_fold_plus (tree, tree, tree);\n extern tree chrec_fold_minus (tree, tree, tree);\n extern tree chrec_fold_multiply (tree, tree, tree);\n extern tree chrec_convert (tree, tree, tree);\n+extern tree chrec_convert_aggressive (tree, tree);\n extern tree chrec_type (tree);\n \n /* Operations.  */"}, {"sha": "82f814e40ffee991816ee7aebc6f0f8ad764907d", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2282a0e6d49a6ad125c39340bf404bfddfa72fce/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=2282a0e6d49a6ad125c39340bf404bfddfa72fce", "patch": "@@ -1955,20 +1955,27 @@ loop_closed_phi_def (tree var)\n }\n \n /* Analyze all the parameters of the chrec that were left under a symbolic form,\n-   with respect to LOOP.  CHREC is the chrec to instantiate.  If\n-   ALLOW_SUPERLOOP_CHRECS is true, replacing loop invariants with\n-   outer loop chrecs is done.  CACHE is the cache of already instantiated\n-   values.  */\n+   with respect to LOOP.  CHREC is the chrec to instantiate.  CACHE is the cache\n+   of already instantiated values.  FLAGS modify the way chrecs are\n+   instantiated.  */\n \n+/* Values for FLAGS.  */\n+enum\n+{\n+  INSERT_SUPERLOOP_CHRECS = 1,  /* Loop invariants are replaced with chrecs\n+\t\t\t\t   in outer loops.  */\n+  FOLD_CONVERSIONS = 2\t\t/* The conversions that may wrap in\n+\t\t\t\t   signed/pointer type are folded, as long as the\n+\t\t\t\t   value of the chrec is preserved.  */\n+};\n+  \n static tree\n-instantiate_parameters_1 (struct loop *loop, tree chrec,\n-\t\t\t  bool allow_superloop_chrecs,\n-\t\t\t  htab_t cache)\n+instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache)\n {\n   tree res, op0, op1, op2;\n   basic_block def_bb;\n   struct loop *def_loop;\n- \n+\n   if (automatically_generated_chrec_p (chrec)\n       || is_gimple_min_invariant (chrec))\n     return chrec;\n@@ -1981,7 +1988,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n       /* A parameter (or loop invariant and we do not want to include\n \t evolutions in outer loops), nothing to do.  */\n       if (!def_bb\n-\t  || (!allow_superloop_chrecs\n+\t  || (!(flags & INSERT_SUPERLOOP_CHRECS)\n \t      && !flow_bb_inside_loop_p (loop, def_bb)))\n \treturn chrec;\n \n@@ -2036,8 +2043,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \t}\n \n       else if (res != chrec_dont_know)\n-\tres = instantiate_parameters_1 (loop, res, allow_superloop_chrecs,\n-\t\t\t\t\tcache);\n+\tres = instantiate_parameters_1 (loop, res, flags, cache);\n \n       bitmap_clear_bit (already_instantiated, SSA_NAME_VERSION (chrec));\n \n@@ -2047,12 +2053,12 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \n     case POLYNOMIAL_CHREC:\n       op0 = instantiate_parameters_1 (loop, CHREC_LEFT (chrec),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op1 = instantiate_parameters_1 (loop, CHREC_RIGHT (chrec),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op1 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n@@ -2063,12 +2069,12 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \n     case PLUS_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op1 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n@@ -2079,12 +2085,12 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \n     case MINUS_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op1 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n@@ -2095,12 +2101,12 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \n     case MULT_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op1 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n@@ -2113,10 +2119,17 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n     case CONVERT_EXPR:\n     case NON_LVALUE_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n         return chrec_dont_know;\n \n+      if (flags & FOLD_CONVERSIONS)\n+\t{\n+\t  tree tmp = chrec_convert_aggressive (TREE_TYPE (chrec), op0);\n+\t  if (tmp)\n+\t    return tmp;\n+\t}\n+\n       if (op0 == TREE_OPERAND (chrec, 0))\n \treturn chrec;\n \n@@ -2136,17 +2149,17 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n     {\n     case 3:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op1 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op2 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 2),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op2 == chrec_dont_know)\n         return chrec_dont_know;\n \n@@ -2160,12 +2173,12 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \n     case 2:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n \treturn chrec_dont_know;\n \n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op1 == chrec_dont_know)\n         return chrec_dont_know;\n \n@@ -2176,7 +2189,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \t    \n     case 1:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs, cache);\n+\t\t\t\t      flags, cache);\n       if (op0 == chrec_dont_know)\n         return chrec_dont_know;\n       if (op0 == TREE_OPERAND (chrec, 0))\n@@ -2214,7 +2227,7 @@ instantiate_parameters (struct loop *loop,\n       fprintf (dump_file, \")\\n\");\n     }\n  \n-  res = instantiate_parameters_1 (loop, chrec, true, cache);\n+  res = instantiate_parameters_1 (loop, chrec, INSERT_SUPERLOOP_CHRECS, cache);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2229,13 +2242,15 @@ instantiate_parameters (struct loop *loop,\n }\n \n /* Similar to instantiate_parameters, but does not introduce the\n-   evolutions in outer loops for LOOP invariants in CHREC.  */\n+   evolutions in outer loops for LOOP invariants in CHREC, and does not\n+   care about causing overflows, as long as they do not affect value\n+   of an expression.  */\n \n static tree\n resolve_mixers (struct loop *loop, tree chrec)\n {\n   htab_t cache = htab_create (10, hash_scev_info, eq_scev_info, del_scev_info);\n-  tree ret = instantiate_parameters_1 (loop, chrec, false, cache);\n+  tree ret = instantiate_parameters_1 (loop, chrec, FOLD_CONVERSIONS, cache);\n   htab_delete (cache);\n   return ret;\n }"}]}