{"sha": "6b4428ecb642c5ed065e3b5b11799630753cb5db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0NDI4ZWNiNjQyYzVlZDA2NWUzYjViMTE3OTk2MzA3NTNjYjVkYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-12-08T18:38:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-12-08T18:38:23Z"}, "message": "configure.host (sparc*-sun-solaris2.*): New case.\n\n\t* configure.host (sparc*-sun-solaris2.*): New case.\n\t* include/dwarf2-signal.h (MAKE_THROW_FRAME, SPARC case): Make dummy.\n\t* include/sparc-signal.h: Do not include ucontext.h.\n\t(SIGNAL_HANDLER): Rename symbol.\n\t(FLUSH_REGISTER_WINDOWS): Delete.\n\t(MAKE_THROW_FRAME): Make dummy.\n\t(INIT_SEGV): Adjust for above renaming.\n\t(INIT_FPE): Likewise.\n\nFrom-SVN: r155092", "tree": {"sha": "c5e1e5b7b8e2661973f0b1ea0292a938d9e5415d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e1e5b7b8e2661973f0b1ea0292a938d9e5415d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b4428ecb642c5ed065e3b5b11799630753cb5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4428ecb642c5ed065e3b5b11799630753cb5db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b4428ecb642c5ed065e3b5b11799630753cb5db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4428ecb642c5ed065e3b5b11799630753cb5db/comments", "author": null, "committer": null, "parents": [{"sha": "17314cd9eb95fd1d2390cf6bceed6c329194ddf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17314cd9eb95fd1d2390cf6bceed6c329194ddf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17314cd9eb95fd1d2390cf6bceed6c329194ddf8"}], "stats": {"total": 110, "additions": 25, "deletions": 85}, "files": [{"sha": "22e2bf58442e4d3d8808edbc879add6de6fff6ed", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6b4428ecb642c5ed065e3b5b11799630753cb5db", "patch": "@@ -1,3 +1,14 @@\n+2009-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.host (sparc*-sun-solaris2.*): New case.\n+\t* include/dwarf2-signal.h (MAKE_THROW_FRAME, SPARC case): Make dummy.\n+\t* include/sparc-signal.h: Do not include ucontext.h.\n+\t(SIGNAL_HANDLER): Rename symbol.\n+\t(FLUSH_REGISTER_WINDOWS): Delete.\n+\t(MAKE_THROW_FRAME): Make dummy.\n+\t(INIT_SEGV): Adjust for above renaming.\n+\t(INIT_FPE): Likewise.\n+\n 2009-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac (net/if.h check): Include sys/socket.h if present."}, {"sha": "3baaf274a0f34734ae144d07503e93716060ffea", "filename": "libjava/configure.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=6b4428ecb642c5ed065e3b5b11799630753cb5db", "patch": "@@ -340,6 +340,10 @@ EOF\n \tcan_unwind_signal=yes\n \tDIVIDESPEC=-fuse-divide-subroutine\n \t;;\n+  sparc*-sun-solaris2.*)\n+\tslow_pthread_self=\n+\tcan_unwind_signal=yes\n+\t;;\n esac\n \n case \"${host}\" in"}, {"sha": "949bcc0ae390c28d9441de87ae406918b807bff5", "filename": "libjava/include/dwarf2-signal.h", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2Finclude%2Fdwarf2-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2Finclude%2Fdwarf2-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdwarf2-signal.h?ref=6b4428ecb642c5ed065e3b5b11799630753cb5db", "patch": "@@ -1,6 +1,6 @@\n // dwarf2-signal.h - Catch runtime signals and turn them into exceptions.\n \n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Copyright (C) 2000, 2001, 2009  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -58,61 +58,7 @@ do\t\t\t\t\t\t\t\t\t\\\n   _sc->sc_ip++;\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n while (0)\n-#elif defined(__sparc__)\n-/* We could do the unwind of the signal frame quickly by hand here like\n-   sparc-signal.h does under Solaris, but that makes debugging unwind\n-   failures almost impossible.  */\n-#if !defined(__arch64__)\n-#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  /* Sparc-32 leaves PC pointing at a faulting instruction\t\t\\\n-   always.\t\t\t\t\t\t\t\t\\\n-   We advance the PC one instruction past the exception causing PC.\t\\\n-   This is done because FDEs are found with \"context->ra - 1\" in the\t\\\n-   unwinder.\t\t\t\t\t\t\t\t\\\n-   Also, the dwarf2 unwind machinery is going to add 8 to the\t\t\\\n-   PC it uses on Sparc.  So we adjust the PC here.  We do it here\t\\\n-   because we run once for such an exception, however the Sparc specific\\\n-   unwind can run multiple times for the same exception and it would\t\\\n-   adjust the PC more than once resulting in a bogus value.  */\t\t\\\n-  struct sig_regs {\t\t\t\t\t\t\t\\\n-    unsigned int psr, pc, npc, y, u_regs[16];\t\t\t\t\\\n-  } *regp;\t\t\t\t\t\t\t\t\\\n-  unsigned int insn;\t\t\t\t\t\t\t\\\n-  __asm__ __volatile__(\"ld [%%i7 + 8], %0\" : \"=r\" (insn));\t\t\\\n-  /* mov __NR_sigaction, %g1; Old signal stack layout */\t\t\\\n-  if (insn == 0x821020d8)\t\t\t\t\t\t\\\n-    regp = (struct sig_regs *) _sip;\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    /* mov __NR_rt_sigaction, %g1; New signal stack layout */\t\t\\\n-    regp = (struct sig_regs *) (_sip + 1);\t\t\t\t\\\n-  regp->pc = ((regp->pc + 4) - 8);\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-#else\n-#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  /* Sparc-64 leaves PC pointing at a faulting instruction\t\t\\\n-   always.\t\t\t\t\t\t\t\t\\\n-   We advance the PC one instruction past the exception causing PC.\t\\\n-   This is done because FDEs are found with \"context->ra - 1\" in the\t\\\n-   unwinder.\t\t\t\t\t\t\t\t\\\n-   Also, the dwarf2 unwind machinery is going to add 8 to the\t\t\\\n-   PC it uses on Sparc.  So we adjust the PC here.  We do it here\t\\\n-   because we run once for such an exception, however the Sparc specific\\\n-   unwind can run multiple times for the same exception and it would\t\\\n-   adjust the PC more than once resulting in a bogus value.  */\t\t\\\n-  struct pt_regs {\t\t\t\t\t\t\t\\\n-    unsigned long u_regs[16];\t\t\t\t\t\t\\\n-    unsigned long tstate, tpc, tnpc;\t\t\t\t\t\\\n-    unsigned int y, fprs;\t\t\t\t\t\t\\\n-  } *regp = (struct pt_regs *) (_sip + 1);\t\t\t\t\\\n-  regp->tpc = ((regp->tpc + 4) - 8);\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-#endif\n+\n #else\n #define MAKE_THROW_FRAME(_exception)\t\t\\\n do\t\t\t\t\t\t\\"}, {"sha": "a936afe067f50104ca9b6bb711f8797746998b55", "filename": "libjava/include/sparc-signal.h", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2Finclude%2Fsparc-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4428ecb642c5ed065e3b5b11799630753cb5db/libjava%2Finclude%2Fsparc-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fsparc-signal.h?ref=6b4428ecb642c5ed065e3b5b11799630753cb5db", "patch": "@@ -1,6 +1,6 @@\n // sparc-signal.h - Catch runtime signals and turn them into exceptions.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2009  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -12,43 +12,22 @@ details.  */\n #define JAVA_SIGNAL_H 1\n \n #include <signal.h>\n-#include <ucontext.h>\n \n #define HANDLE_SEGV 1\n #define HANDLE_FPE 1\n \n-#define SIGNAL_HANDLER(_name) \t\t\t\t\t\t\\\n-static void _name (int _dummy __attribute__ ((__unused__)), \\\n-\t\t   siginfo_t *_info __attribute__ ((__unused__)), \\\n-\t\t   void *arg __attribute__ ((__unused__)))\n+#define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n+static void _Jv_##_name (int,\t\t\t\t\t\t\\\n+\t\t\t siginfo_t *_si __attribute__ ((__unused__)),\t\\\n+\t\t\t void *_uc __attribute__ ((__unused__)))\n \n-#ifdef __arch64__\n-#define FLUSH_REGISTER_WINDOWS\t\t\t\t\t\\\n-  asm volatile (\"flushw\");\n-#else\n-#define FLUSH_REGISTER_WINDOWS\t\t\t\t\t\\\n-  asm volatile (\"ta 3\");\n-#endif\n-\n-#define MAKE_THROW_FRAME(_exception)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  ucontext_t *_context = (ucontext_t *) arg;                    \\\n-  (void)_dummy;\t\t\t\t\t\t\t\\\n-  (void)_info;\t\t\t\t\t\t\t\\\n-  register long sp = _context->uc_mcontext.gregs[REG_SP];\t\\\n-  register long retaddr = _context->uc_mcontext.gregs[REG_O7];\t\\\n-  FLUSH_REGISTER_WINDOWS;\t\t\t\t\t\\\n-  asm volatile (\"mov %0, %%i6; mov %1, %%i7\"\t\t\t\\\n-\t\t: : \"r\"(sp), \"r\"(retaddr));\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-while (0)\n+#define MAKE_THROW_FRAME(_exception)\n \n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n-    act.sa_sigaction = catch_segv;\t\t\t\t\\\n+    act.sa_sigaction = _Jv_catch_segv;\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO | SA_NODEFER;\t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n     sigaction (SIGSEGV, &act, NULL);\t\t\t\t\\\n@@ -59,8 +38,8 @@ while (0)\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n+    act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO | SA_NODEFER;\t\t\t\\\n-    act.sa_sigaction = catch_fpe;\t\t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n     sigaction (SIGFPE, &act, NULL);\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\"}]}