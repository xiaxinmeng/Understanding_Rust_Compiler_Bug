{"sha": "c5a2375241372f3c2106878a91843c3285fb72be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVhMjM3NTI0MTM3MmYzYzIxMDY4NzhhOTE4NDNjMzI4NWZiNzJiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-12-24T14:54:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-12-24T14:54:33Z"}, "message": "functional (bind): Avoid invalid instantiations for bind<void>.\n\n2009-12-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/functional (bind): Avoid invalid instantiations\n\tfor bind<void>.\n\t* testsuite/20_util/bind/conv_result.cc: New.\n\nFrom-SVN: r155457", "tree": {"sha": "464a2b027085edd5b47708d7e6fa1be0ccf6c819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/464a2b027085edd5b47708d7e6fa1be0ccf6c819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5a2375241372f3c2106878a91843c3285fb72be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a2375241372f3c2106878a91843c3285fb72be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a2375241372f3c2106878a91843c3285fb72be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a2375241372f3c2106878a91843c3285fb72be/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0800b8ea794cfb5e7066a3b5128efb40b98a0ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0800b8ea794cfb5e7066a3b5128efb40b98a0ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0800b8ea794cfb5e7066a3b5128efb40b98a0ff6"}], "stats": {"total": 142, "additions": 128, "deletions": 14}, "files": [{"sha": "ad2d892c83aba37414822aa217cfd6d623e262ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a2375241372f3c2106878a91843c3285fb72be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a2375241372f3c2106878a91843c3285fb72be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5a2375241372f3c2106878a91843c3285fb72be", "patch": "@@ -1,3 +1,9 @@\n+2009-12-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/functional (bind): Avoid invalid instantiations\n+\tfor bind<void>.\n+\t* testsuite/20_util/bind/conv_result.cc: New.\n+\n 2009-12-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_deque.h (copy_backward(_Deque_iterator,"}, {"sha": "3be8ed76c3ecd79e445b7c5f6f98753e68050f85", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a2375241372f3c2106878a91843c3285fb72be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a2375241372f3c2106878a91843c3285fb72be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=c5a2375241372f3c2106878a91843c3285fb72be", "patch": "@@ -1130,6 +1130,16 @@ namespace std\n       { return type(__pm); }\n     };\n \n+  // Specialization needed to prevent \"forming reference to void\" errors when\n+  // bind<void>() is called, because argument deduction instantiates\n+  // _Maybe_wrap_member_pointer<void> outside the immediate context where\n+  // SFINAE applies.\n+  template<>\n+    struct _Maybe_wrap_member_pointer<void>\n+    {\n+      typedef void type;\n+    };\n+\n   /// Type of the function object returned from bind().\n   template<typename _Signature>\n     struct _Bind;\n@@ -1262,44 +1272,93 @@ namespace std\n       _Functor _M_f;\n       tuple<_Bound_args...> _M_bound_args;\n \n+      // sfinae types\n+      template<typename _Res>\n+        struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };\n+      template<typename _Res>\n+        struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };\n+\n       // Call unqualified\n-      template<typename... _Args, int... _Indexes>\n+      template<typename _Res, typename... _Args, int... _Indexes>\n         _Result\n-        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>)\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __disable_if_void<_Res>::type = 0)\n         {\n           return _M_f(_Mu<_Bound_args>()\n                       (get<_Indexes>(_M_bound_args), __args)...);\n         }\n \n+      // Call unqualified, return void\n+      template<typename _Res, typename... _Args, int... _Indexes>\n+        void\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __enable_if_void<_Res>::type = 0)\n+        {\n+          _M_f(_Mu<_Bound_args>()\n+                      (get<_Indexes>(_M_bound_args), __args)...);\n+        }\n+\n       // Call as const\n-      template<typename... _Args, int... _Indexes>\n+      template<typename _Res, typename... _Args, int... _Indexes>\n         _Result\n-        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>) const\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __disable_if_void<_Res>::type = 0) const\n         {\n           return _M_f(_Mu<_Bound_args>()\n                       (get<_Indexes>(_M_bound_args), __args)...);\n         }\n \n+      // Call as const, return void\n+      template<typename _Res, typename... _Args, int... _Indexes>\n+        void\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __enable_if_void<_Res>::type = 0) const\n+        {\n+          _M_f(_Mu<_Bound_args>()\n+                      (get<_Indexes>(_M_bound_args), __args)...);\n+        }\n+\n       // Call as volatile\n-      template<typename... _Args, int... _Indexes>\n+      template<typename _Res, typename... _Args, int... _Indexes>\n         _Result\n-        __call(const tuple<_Args...>& __args, \n-               _Index_tuple<_Indexes...>) volatile\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __disable_if_void<_Res>::type = 0) volatile\n         {\n           return _M_f(_Mu<_Bound_args>()\n                       (get<_Indexes>(_M_bound_args), __args)...);\n         }\n \n+      // Call as volatile, return void\n+      template<typename _Res, typename... _Args, int... _Indexes>\n+        void\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __enable_if_void<_Res>::type = 0) volatile\n+        {\n+          _M_f(_Mu<_Bound_args>()\n+                      (get<_Indexes>(_M_bound_args), __args)...);\n+        }\n+\n       // Call as const volatile\n-      template<typename... _Args, int... _Indexes>\n+      template<typename _Res, typename... _Args, int... _Indexes>\n         _Result\n-        __call(const tuple<_Args...>& __args, \n-               _Index_tuple<_Indexes...>) const volatile\n+        __call(const tuple<_Args...>& __args, _Index_tuple<_Indexes...>,\n+            typename __disable_if_void<_Res>::type = 0) const volatile\n         {\n           return _M_f(_Mu<_Bound_args>()\n                       (get<_Indexes>(_M_bound_args), __args)...);\n         }\n \n+      // Call as const volatile, return void\n+      template<typename _Res, typename... _Args, int... _Indexes>\n+        void\n+        __call(const tuple<_Args...>& __args, \n+               _Index_tuple<_Indexes...>,\n+            typename __enable_if_void<_Res>::type = 0) const volatile\n+        {\n+          _M_f(_Mu<_Bound_args>()\n+                      (get<_Indexes>(_M_bound_args), __args)...);\n+        }\n+\n     public:\n       typedef _Result result_type;\n \n@@ -1312,31 +1371,31 @@ namespace std\n         result_type\n         operator()(_Args&... __args)\n         {\n-          return this->__call(tie(__args...), _Bound_indexes());\n+          return this->__call<_Result>(tie(__args...), _Bound_indexes());\n         }\n \n       // Call as const\n       template<typename... _Args>\n         result_type\n         operator()(_Args&... __args) const\n         {\n-          return this->__call(tie(__args...), _Bound_indexes());\n+          return this->__call<_Result>(tie(__args...), _Bound_indexes());\n         }\n \n       // Call as volatile\n       template<typename... _Args>\n         result_type\n         operator()(_Args&... __args) volatile\n         {\n-          return this->__call(tie(__args...), _Bound_indexes());\n+          return this->__call<_Result>(tie(__args...), _Bound_indexes());\n         }\n \n       // Call as const volatile\n       template<typename... _Args>\n         result_type\n         operator()(_Args&... __args) const volatile\n         {\n-          return this->__call(tie(__args...), _Bound_indexes());\n+          return this->__call<_Result>(tie(__args...), _Bound_indexes());\n         }\n     };\n "}, {"sha": "440a5276bdfcb2764f395a3a632f77bec0beeeb1", "filename": "libstdc++-v3/testsuite/20_util/bind/conv_result.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a2375241372f3c2106878a91843c3285fb72be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fconv_result.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a2375241372f3c2106878a91843c3285fb72be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fconv_result.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fconv_result.cc?ref=c5a2375241372f3c2106878a91843c3285fb72be", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.11 Function template bind\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+struct X\n+{\n+  typedef int result_type;\n+  int operator()(int i) const { return i+1; }\n+  bool b;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::bind;\n+  using std::ref;\n+  ::X x = { true };\n+\n+  // test bind<R> form\n+  bind<void>(ref(x), 1)();\n+  VERIFY( bind<long>(ref(x), 1)() == 2 );\n+  bind<void>(&::X::b, ref(x))();\n+  VERIFY( bind<int>(&::X::b, ref(x))() == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}