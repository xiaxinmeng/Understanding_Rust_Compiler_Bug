{"sha": "019c0e5dc17205c2a7f302ff83943cb1c3444237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5YzBlNWRjMTcyMDVjMmE3ZjMwMmZmODM5NDNjYjFjMzQ0NDIzNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-12-08T21:34:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-12-08T21:34:18Z"}, "message": "re PR fortran/58099 ([F03] over-zealous procedure-pointer error checking)\n\n2013-12-08  Tobias Burnus  <burnus@net-b.de>\n            Janus Weil  <janus@gcc.gnu.org>\n\n        PR fortran/58099\n        PR fortran/58676\n        PR fortran/41724\n        * resolve.c (gfc_resolve_intrinsic): Set elemental/pure.\n        (resolve_fl_procedure): Reject pure dummy procedures/procedure\n        pointers.\n        (gfc_explicit_interface_required): Don't require a\n        match of ELEMENTAL for intrinsics.\n\n2013-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/58099\n        PR fortran/58676\n        PR fortran/41724\n        * gfortran.dg/elemental_subroutine_8.f90: New.\n        * gfortran.dg/proc_decl_9.f90: Add ELEMENTAL to make valid.\n        * gfortran.dg/proc_ptr_11.f90: Ditto.\n        * gfortran.dg/proc_ptr_result_8.f90: Ditto.\n        * gfortran.dg/proc_ptr_32.f90: Update dg-error.\n        * gfortran.dg/proc_ptr_33.f90: Ditto.\n        * gfortran.dg/proc_ptr_result_1.f90: Add abstract interface\n        which is not elemental.\n        * gfortran.dg/proc_ptr_result_7.f90: Ditto.\n\n\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r205791", "tree": {"sha": "c24718e86ac3e1f8ea95e40a465df924edf2cfb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c24718e86ac3e1f8ea95e40a465df924edf2cfb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019c0e5dc17205c2a7f302ff83943cb1c3444237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019c0e5dc17205c2a7f302ff83943cb1c3444237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019c0e5dc17205c2a7f302ff83943cb1c3444237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019c0e5dc17205c2a7f302ff83943cb1c3444237/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae29d0253f8333b228e24c6202f567ee9dca8da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae29d0253f8333b228e24c6202f567ee9dca8da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae29d0253f8333b228e24c6202f567ee9dca8da9"}], "stats": {"total": 158, "additions": 141, "deletions": 17}, "files": [{"sha": "1f4e2aa5e4f63236940383e4f6f0e37d071d069a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -1,3 +1,15 @@\n+2013-12-08  Tobias Burnus  <burnus@net-b.de>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58099\n+\tPR fortran/58676\n+\tPR fortran/41724\n+\t* resolve.c (gfc_resolve_intrinsic): Set elemental/pure.\n+\t(resolve_fl_procedure): Reject pure dummy procedures/procedure\n+\tpointers.\n+\t(gfc_explicit_interface_required): Don't require a\n+\tmatch of ELEMENTAL for intrinsics.\n+\n 2013-12-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59414"}, {"sha": "ea4632473fc4b546e126b780b48b8f2dfe9c9687", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -1679,6 +1679,9 @@ gfc_resolve_intrinsic (gfc_symbol *sym, locus *loc)\n \n   gfc_copy_formal_args_intr (sym, isym);\n \n+  sym->attr.pure = isym->pure;\n+  sym->attr.elemental = isym->elemental;\n+\n   /* Check it is actually available in the standard settings.  */\n   if (!gfc_check_intrinsic_standard (isym, &symstd, false, sym->declared_at))\n     {\n@@ -2314,7 +2317,7 @@ gfc_explicit_interface_required (gfc_symbol *sym, char *errmsg, int err_len)\n \t}\n     }\n \n-  if (sym->attr.elemental)  /* (4)  */\n+  if (sym->attr.elemental && !sym->attr.intrinsic)  /* (4)  */\n     {\n       strncpy (errmsg, _(\"elemental procedure\"), err_len);\n       return true;\n@@ -11094,6 +11097,23 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t\t\tsym->name, &sym->declared_at);\n     }\n \n+  /* F2008, C1218.  */\n+  if (sym->attr.elemental)\n+    {\n+      if (sym->attr.proc_pointer)\n+\t{\n+\t  gfc_error (\"Procedure pointer '%s' at %L shall not be elemental\",\n+\t\t     sym->name, &sym->declared_at);\n+\t  return false;\n+\t}\n+      if (sym->attr.dummy)\n+\t{\n+\t  gfc_error (\"Dummy procedure '%s' at %L shall not be elemental\",\n+\t\t     sym->name, &sym->declared_at);\n+\t  return false;\n+\t}\n+    }\n+\n   if (sym->attr.is_bind_c && sym->attr.is_c_interop != 1)\n     {\n       gfc_formal_arglist *curr_arg;"}, {"sha": "b6317053b71c1fb8ff80239d0c6794467ea5f6dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -1,3 +1,18 @@\n+2013-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58099\n+\tPR fortran/58676\n+\tPR fortran/41724\n+\t* gfortran.dg/elemental_subroutine_8.f90: New.\n+\t* gfortran.dg/proc_decl_9.f90: Add ELEMENTAL to make valid.\n+\t* gfortran.dg/proc_ptr_11.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_result_8.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_32.f90: Update dg-error.\n+\t* gfortran.dg/proc_ptr_33.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_result_1.f90: Add abstract interface\n+\twhich is not elemental.\n+\t* gfortran.dg/proc_ptr_result_7.f90: Ditto.\n+\n 2013-12-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59414"}, {"sha": "c557d3a9d952fbb5ec41ab7995f2d07766c65c5d", "filename": "gcc/testsuite/gfortran.dg/elemental_subroutine_8.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_8.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+!\n+! PR fortran/58099\n+!\n+! See also interpretation request F03-0130 in 09-217 and 10-006T5r1.\n+!\n+! - ELEMENTAL is only permitted for external names with PROCEDURE/INTERFACE\n+!   but not for dummy arguments or proc-pointers\n+! - Using PROCEDURE with an elemental intrinsic as interface name a is valid,\n+! but doesn't make the proc-pointer/dummy argument elemental\n+!\n+\n+  interface\n+    elemental real function x(y)\n+      real, intent(in) :: y\n+    end function x\n+  end interface\n+  intrinsic :: sin\n+  procedure(x) :: xx1 ! OK\n+  procedure(x), pointer :: xx2 ! { dg-error \"Procedure pointer 'xx2' at .1. shall not be elemental\" }\n+  procedure(real), pointer :: pp \n+  procedure(sin) :: bar ! OK\n+  procedure(sin), pointer :: foo ! { dg-error \"Procedure pointer 'foo' at .1. shall not be elemental\" }\n+  pp => sin !OK\n+contains\n+  subroutine sub1(z) ! { dg-error \"Dummy procedure 'z' at .1. shall not be elemental\" }\n+    procedure(x) :: z\n+  end subroutine sub1\n+  subroutine sub2(z) ! { dg-error \"Procedure pointer 'z' at .1. shall not be elemental\" }\n+    procedure(x), pointer :: z\n+  end subroutine sub2\n+  subroutine sub3(z)\n+    interface\n+      elemental real function z(y) ! { dg-error \"Dummy procedure 'z' at .1. shall not be elemental\" }\n+        real, intent(in) :: y\n+      end function z\n+    end interface\n+  end subroutine sub3\n+  subroutine sub4(z)\n+    interface\n+      elemental real function z(y) ! { dg-error \"Procedure pointer 'z' at .1. shall not be elemental\" }\n+        real, intent(in) :: y\n+      end function z\n+    end interface\n+    pointer :: z\n+  end subroutine sub4\n+  subroutine sub5(z) ! { dg-error \"Dummy procedure 'z' at .1. shall not be elemental\" }\n+    procedure(sin) :: z\n+  end subroutine sub5\n+end"}, {"sha": "455c27ce9860a5538551ea09272d9f682b15c3df", "filename": "gcc/testsuite/gfortran.dg/proc_decl_9.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_9.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -1,14 +1,14 @@\n ! { dg-do run }\n ! PR33162 INTRINSIC functions as ACTUAL argument\n ! Test case adapted from PR by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n-real function t(x)\n+elemental real function t(x)\n   real, intent(in) ::x\n   t = x\n end function\n \n program p\n   implicit none\n   intrinsic sin\n-  procedure(sin):: t\n+  procedure(sin) :: t\n   if (t(1.0) /= 1.0) call abort\n end program"}, {"sha": "61921e78ad01fa55e7bfb6a0bdd988402758d1df", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -7,16 +7,23 @@\n \n program bsp\n   implicit none   \n-\n+  intrinsic :: isign, iabs\n   abstract interface\n     subroutine up()\n     end subroutine up\n+    ! As intrinsics but not elemental\n+    pure integer function isign_interf(a, b)\n+       integer, intent(in) :: a, b\n+    end function isign_interf\n+    pure integer function iabs_interf(x)\n+       integer, intent(in) :: x\n+    end function iabs_interf\n   end interface\n \n   procedure( up ) , pointer :: pptr\n-  procedure(isign), pointer :: q\n+  procedure(isign_interf), pointer :: q\n \n-  procedure(iabs),pointer :: p1\n+  procedure(iabs_interf),pointer :: p1\n   procedure(f), pointer :: p2\n \n   pointer :: p3\n@@ -48,13 +55,13 @@ end function p3\n \n   contains\n \n-    function add( a, b )\n+    pure function add( a, b )\n       integer               :: add\n       integer, intent( in ) :: a, b\n       add = a + b\n     end function add\n \n-    integer function f(x)\n+    pure integer function f(x)\n       integer,intent(in) :: x\n       f = 317 + x\n     end function"}, {"sha": "9b1ed582bd16544910be42bc375d7527f07e5f35", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_32.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_32.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -5,8 +5,8 @@\n ! Contributed by James Van Buskirk\n \n   implicit none\n-  procedure(my_dcos), pointer :: f\n-  f => my_dcos           ! { dg-error \"invalid in procedure pointer assignment\" }\n+  procedure(my_dcos), pointer :: f ! { dg-error \"Procedure pointer 'f' at .1. shall not be elemental\" }\n+  f => my_dcos           ! { dg-error \"Nonintrinsic elemental procedure 'my_dcos' is invalid in procedure pointer assignment\" }\n contains\n   real elemental function my_dcos(x)\n     real, intent(in) :: x"}, {"sha": "30014610a01eb10a8cf9023842970a2002101e26", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_33.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_33.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -22,7 +22,7 @@ function my_dcos(x)\n program start\n    use funcs\n    implicit none\n-   procedure(fun), pointer :: f\n+   procedure(fun), pointer :: f ! { dg-error \"Procedure pointer 'f' at .1. shall not be elemental\" }\n    real x(3)\n    x = [1,2,3]\n    f => my_dcos     ! { dg-error \"Mismatch in PURE attribute\" }"}, {"sha": "4a8020e35b8726018cace5a236a8d2e0423a84a0", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_1.f90", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -171,7 +171,13 @@ function k(arg)\n   end function\n \n   function l()\n-    procedure(iabs),pointer :: l\n+    ! we cannot use iabs directly as it is elemental\n+    abstract interface\n+      pure function interf_iabs(x)\n+        integer, intent(in) :: x\n+      end function interf_iabs\n+    end interface\n+    procedure(interf_iabs),pointer :: l\n     integer :: i\n     l => iabs\n     if (l(-11)/=11) call abort()"}, {"sha": "b77e40b7b692e33b80261e5af3b2854c73e3865b", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_7.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -9,7 +9,14 @@\n end type\n \n type(t) :: x\n-procedure(iabs), pointer :: pp\n+\n+! We cannot use \"iabs\" directly as it is elemental.\n+abstract interface\n+  pure integer function interf_iabs(x)\n+    integer, intent(in) :: x\n+  end function interf_iabs\n+end interface\n+procedure(interf_iabs), pointer :: pp\n \n x%p => a\n \n@@ -20,7 +27,7 @@\n contains\n \n   function a() result (b)\n-    procedure(iabs), pointer :: b\n+    procedure(interf_iabs), pointer :: b\n     b => iabs\n   end function\n "}, {"sha": "be23f5196cd8142adf334893514f898a19c11159", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_8.f90", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c0e5dc17205c2a7f302ff83943cb1c3444237/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_8.f90?ref=019c0e5dc17205c2a7f302ff83943cb1c3444237", "patch": "@@ -26,7 +26,14 @@ end module m\n end type\n type(t) :: x\n \n-procedure(iabs), pointer :: pp\n+! We cannot use iabs directly as it is elemental\n+abstract interface\n+  integer pure function interf_iabs(x)\n+    integer, intent(in) :: x\n+  end function interf_iabs\n+end interface\n+\n+procedure(interf_iabs), pointer :: pp\n procedure(foo), pointer :: pp1\n \n x%p => a     ! ok\n@@ -47,15 +54,15 @@ end module m\n \n   function a (c) result (b)\n     integer, intent(in) :: c\n-    procedure(iabs), pointer :: b\n+    procedure(interf_iabs), pointer :: b\n     if (c .eq. 1) then\n       b => iabs\n     else\n       b => foo\n     end if\n   end function\n \n-  integer function foo (arg)\n+  pure integer function foo (arg)\n     integer, intent (in) :: arg\n     foo = -iabs(arg)\n   end function"}]}