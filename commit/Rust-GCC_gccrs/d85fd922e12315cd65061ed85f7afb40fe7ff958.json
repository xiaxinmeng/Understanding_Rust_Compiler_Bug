{"sha": "d85fd922e12315cd65061ed85f7afb40fe7ff958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg1ZmQ5MjJlMTIzMTVjZDY1MDYxZWQ4NWY3YWZiNDBmZTdmZjk1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:25:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:25:19Z"}, "message": "[multiple changes]\n\n2011-08-29  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cdlili.ads, a-coinve.ads, a-coorma.adb, a-coorma.ads, s-tassta.adb,\n\ta-cborma.adb, a-cborma.ads, a-cohama.ads, a-coorse.ads, a-cbhama.ads,\n\ta-cborse.ads, a-cobove.adb, a-cobove.ads, a-cbhase.ads: Minor\n\treformatting.\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch7.adb, exp_ch7.ads (Build_Exception_Handler): Move its spec to\n\tpackage spec.\n\t* exp_intr.adb (Expand_Unc_Deallocation): Use Build_Exception_Handler.\n\t* a-except.adb, a-except-2005.adb (Rcheck_22): Do not defer aborts\n\twhile raising PE.\n\nFrom-SVN: r178245", "tree": {"sha": "1a7fbadf4793fca844818142d46165e676ff37cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a7fbadf4793fca844818142d46165e676ff37cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d85fd922e12315cd65061ed85f7afb40fe7ff958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85fd922e12315cd65061ed85f7afb40fe7ff958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d85fd922e12315cd65061ed85f7afb40fe7ff958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85fd922e12315cd65061ed85f7afb40fe7ff958/comments", "author": null, "committer": null, "parents": [{"sha": "fd3d2680c8c025f29cb349a9af6292cf8bea50f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3d2680c8c025f29cb349a9af6292cf8bea50f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd3d2680c8c025f29cb349a9af6292cf8bea50f5"}], "stats": {"total": 430, "additions": 238, "deletions": 192}, "files": [{"sha": "a9ae7fc44f34bb8358be599bf174d19233bb361e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -1,3 +1,18 @@\n+2011-08-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cdlili.ads, a-coinve.ads, a-coorma.adb, a-coorma.ads, s-tassta.adb,\n+\ta-cborma.adb, a-cborma.ads, a-cohama.ads, a-coorse.ads, a-cbhama.ads,\n+\ta-cborse.ads, a-cobove.adb, a-cobove.ads, a-cbhase.ads: Minor\n+\treformatting.\n+\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch7.adb, exp_ch7.ads (Build_Exception_Handler): Move its spec to\n+\tpackage spec.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Use Build_Exception_Handler.\n+\t* a-except.adb, a-except-2005.adb (Rcheck_22): Do not defer aborts\n+\twhile raising PE.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cbhama.adb, a-cbhama.ads: Minor reformatting."}, {"sha": "4d7cfa2225bff27eccbc9d200b04290e861c8c5b", "filename": "gcc/ada/a-cbhama.ads", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -33,7 +33,7 @@\n \n private with Ada.Containers.Hash_Tables;\n \n-with Ada.Streams;             use Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n generic\n@@ -321,11 +321,11 @@ package Ada.Containers.Bounded_Hashed_Maps is\n    for Reference_Type'Read use Read;\n \n    function Constant_Reference\n-     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n-   return Constant_Reference_Type;\n+     (Container : Map;\n+      Key       : Key_Type)    --  SHOULD BE ALIASED???\n+      return Constant_Reference_Type;\n \n-   function Reference (Container : Map; Key : Key_Type)\n-   return Reference_Type;\n+   function Reference (Container : Map; Key : Key_Type) return Reference_Type;\n \n private\n    pragma Inline (Length);\n@@ -369,6 +369,12 @@ private\n    type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n \n+   --  Note: If a Cursor object has no explicit initialization expression,\n+   --  it must default initialize to the same value as constant No_Element.\n+   --  The Node component of type Cursor has scalar type Count_Type, so it\n+   --  requires an explicit initialization expression of its own declaration,\n+   --  in order for objects of record type Cursor to properly initialize.\n+\n    type Cursor is record\n       Container : Map_Access;\n       Node      : Count_Type := 0;"}, {"sha": "711c01169634dac3df89c86687ccf63375dc635e", "filename": "gcc/ada/a-cbhase.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -429,6 +429,12 @@ private\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n+   --  Note: If a Cursor object has no explicit initialization expression,\n+   --  it must default initialize to the same value as constant No_Element.\n+   --  The Node component of type Cursor has scalar type Count_Type, so it\n+   --  requires an explicit initialization expression of its own declaration,\n+   --  in order for objects of record type Cursor to properly initialize.\n+\n    type Cursor is record\n       Container : Set_Access;\n       Node      : Count_Type := 0;"}, {"sha": "89ec13104055b64d159e92d08301643d39beab3e", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -46,7 +46,8 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n      end record;\n \n    overriding function First (Object : Iterator) return Cursor;\n-   overriding function Last  (Object : Iterator) return Cursor;\n+\n+   overriding function Last (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -255,7 +256,6 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       declare\n          LN : Node_Type renames Left.Container.Nodes (Left.Node);\n-\n       begin\n          return Right < LN.Key;\n       end;\n@@ -514,13 +514,12 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n    function Element (Container : Map; Key : Key_Type) return Element_Type is\n       Node : constant Count_Type := Key_Ops.Find (Container, Key);\n-\n    begin\n       if Node = 0 then\n          raise Constraint_Error with \"key not in map\";\n+      else\n+         return Container.Nodes (Node).Element;\n       end if;\n-\n-      return Container.Nodes (Node).Element;\n    end Element;\n \n    ---------------------\n@@ -558,13 +557,12 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n    function Find (Container : Map; Key : Key_Type) return Cursor is\n       Node : constant Count_Type := Key_Ops.Find (Container, Key);\n-\n    begin\n       if Node = 0 then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, Node);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, Node);\n    end Find;\n \n    -----------\n@@ -575,20 +573,19 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    begin\n       if Container.First = 0 then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, Container.First);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, Container.First);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n       F : constant Count_Type := Object.Container.First;\n    begin\n       if F = 0 then\n          return No_Element;\n+      else\n+         return Cursor'(Object.Container.all'Unchecked_Access, F);\n       end if;\n-\n-      return\n-        Cursor'(Object.Container.all'Unchecked_Access, F);\n    end First;\n \n    -------------------\n@@ -599,9 +596,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    begin\n       if Container.First = 0 then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return Container.Nodes (Container.First).Element;\n       end if;\n-\n-      return Container.Nodes (Container.First).Element;\n    end First_Element;\n \n    ---------------\n@@ -612,9 +609,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    begin\n       if Container.First = 0 then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return Container.Nodes (Container.First).Key;\n       end if;\n-\n-      return Container.Nodes (Container.First).Key;\n    end First_Key;\n \n    -----------\n@@ -623,13 +620,12 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n    function Floor (Container : Map; Key : Key_Type) return Cursor is\n       Node : constant Count_Type := Key_Ops.Floor (Container, Key);\n-\n    begin\n       if Node = 0 then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, Node);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, Node);\n    end Floor;\n \n    -----------------\n@@ -664,7 +660,6 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n          declare\n             N : Node_Type renames Container.Nodes (Position.Node);\n-\n          begin\n             N.Key := Key;\n             N.Element := New_Item;\n@@ -714,7 +709,6 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       function New_Node return Count_Type is\n          Result : Count_Type;\n-\n       begin\n          Allocate (Container, Result);\n          return Result;\n@@ -778,6 +772,8 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       procedure Assign (Node : in out Node_Type) is\n       begin\n          Node.Key := Key;\n+\n+         --  Why is the following commented out ???\n          --  Node.Element := New_Item;\n       end Assign;\n \n@@ -787,7 +783,6 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       function New_Node return Count_Type is\n          Result : Count_Type;\n-\n       begin\n          Allocate (Container, Result);\n          return Result;\n@@ -823,7 +818,7 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       Right : Node_Type) return Boolean\n    is\n    begin\n-      --  k > node same as node < k\n+      --  Left > Right same as Right < Left\n \n       return Right.Key < Left;\n    end Is_Greater_Key_Node;\n@@ -885,12 +880,14 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n      (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n    is\n       It : constant Iterator :=\n-                      (Container'Unrestricted_Access, Container.First);\n+             (Container'Unrestricted_Access, Container.First);\n    begin\n       return It;\n    end Iterate;\n \n-   function Iterate (Container : Map; Start : Cursor)\n+   function Iterate\n+     (Container : Map;\n+      Start     : Cursor)\n       return Map_Iterator_Interfaces.Reversible_Iterator'class\n    is\n       It : constant Iterator := (Container'Unrestricted_Access, Start.Node);\n@@ -923,20 +920,19 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    begin\n       if Container.Last = 0 then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, Container.Last);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n       F : constant Count_Type := Object.Container.Last;\n    begin\n       if F = 0 then\n          return No_Element;\n+      else\n+         return Cursor'(Object.Container.all'Unchecked_Access, F);\n       end if;\n-\n-      return\n-        Cursor'(Object.Container.all'Unchecked_Access, F);\n    end Last;\n \n    ------------------\n@@ -947,9 +943,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    begin\n       if Container.Last = 0 then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return Container.Nodes (Container.Last).Element;\n       end if;\n-\n-      return Container.Nodes (Container.Last).Element;\n    end Last_Element;\n \n    --------------\n@@ -960,9 +956,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    begin\n       if Container.Last = 0 then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return Container.Nodes (Container.Last).Key;\n       end if;\n-\n-      return Container.Nodes (Container.Last).Key;\n    end Last_Key;\n \n    ----------\n@@ -1199,15 +1195,17 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n    -- Reference --\n    ---------------\n \n-   function Constant_Reference (Container : Map; Key : Key_Type)\n-     return Constant_Reference_Type\n+   function Constant_Reference\n+     (Container : Map;\n+      Key       : Key_Type) return Constant_Reference_Type\n    is\n    begin\n       return (Element => Container.Element (Key)'Unrestricted_Access);\n    end Constant_Reference;\n \n-   function Reference (Container : Map; Key : Key_Type)\n-     return Reference_Type\n+   function Reference\n+     (Container : Map;\n+      Key       : Key_Type) return Reference_Type\n    is\n    begin\n       return (Element => Container.Element (Key)'Unrestricted_Access);\n@@ -1299,7 +1297,7 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       B : Natural renames Container'Unrestricted_Access.all.Busy;\n \n-      --  Start of processing for Reverse_Iterate\n+   --  Start of processing for Reverse_Iterate\n \n    begin\n       B := B + 1;"}, {"sha": "e1f9f08f37921fc84931513c81a38ca3b49c62d3", "filename": "gcc/ada/a-cborma.ads", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Containers.Red_Black_Trees;\n+\n with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n@@ -48,8 +49,7 @@ package Ada.Containers.Bounded_Ordered_Maps is\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n \n-   type Map (Capacity : Count_Type) is tagged private\n-   with\n+   type Map (Capacity : Count_Type) is tagged private with\n       constant_Indexing => Constant_Reference,\n       Variable_Indexing => Reference,\n       Default_Iterator  => Iterate,\n@@ -63,6 +63,7 @@ package Ada.Containers.Bounded_Ordered_Maps is\n    Empty_Map : constant Map;\n \n    No_Element : constant Cursor;\n+\n    function Has_Element (Position : Cursor) return Boolean;\n \n    package Map_Iterator_Interfaces is new\n@@ -94,7 +95,7 @@ package Ada.Containers.Bounded_Ordered_Maps is\n      (Container : in out Map;\n       Position  : Cursor;\n       Process   : not null access\n-                   procedure (Key : Key_Type; Element : in out Element_Type));\n+                    procedure (Key : Key_Type; Element : in out Element_Type));\n \n    procedure Assign (Target : in out Map; Source : Map);\n \n@@ -216,20 +217,22 @@ package Ada.Containers.Bounded_Ordered_Maps is\n    for Reference_Type'Write use Write;\n \n    function Constant_Reference\n-     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n-   return Constant_Reference_Type;\n+     (Container : Map;\n+      Key       : Key_Type)    --  SHOULD BE ALIASED ???\n+      return Constant_Reference_Type;\n \n-   function Reference (Container : Map; Key : Key_Type)\n-   return Reference_Type;\n+   function Reference (Container : Map; Key : Key_Type) return Reference_Type;\n \n    procedure Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n \n-   function Iterate (Container : Map)\n-      return Map_Iterator_Interfaces.Forward_Iterator'class;\n+   function Iterate\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class;\n \n-   function Iterate (Container : Map; Start : Cursor)\n+   function Iterate\n+     (Container : Map;\n+      Start     : Cursor)\n       return Map_Iterator_Interfaces.Reversible_Iterator'class;\n \n    procedure Reverse_Iterate"}, {"sha": "e56b71b4c61e090413f4cec93ae970c18ed18294", "filename": "gcc/ada/a-cborse.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -255,6 +255,12 @@ private\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n+   --  Note: If a Cursor object has no explicit initialization expression,\n+   --  it must default initialize to the same value as constant No_Element.\n+   --  The Node component of type Cursor has scalar type Count_Type, so it\n+   --  requires an explicit initialization expression of its own declaration,\n+   --  in order for objects of record type Cursor to properly initialize.\n+\n    type Cursor is record\n       Container : Set_Access;\n       Node      : Count_Type := 0;"}, {"sha": "d38b0d08ba36f6a9ddc7d5ab54d66cdeea705420", "filename": "gcc/ada/a-cdlili.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -33,7 +33,7 @@\n \n private with Ada.Finalization;\n \n-with Ada.Streams;              use Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n generic"}, {"sha": "3d46ba7cf411d08f29e9a37e4d64fd29ec1cd358", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -28,15 +28,16 @@\n ------------------------------------------------------------------------------\n \n with Ada.Containers.Generic_Array_Sort;\n+\n with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Vectors is\n \n    type Iterator is new\n      Vector_Iterator_Interfaces.Reversible_Iterator with record\n-      Container : Vector_Access;\n-      Index     : Index_Type;\n-   end record;\n+        Container : Vector_Access;\n+        Index     : Index_Type;\n+     end record;\n \n    overriding function First (Object : Iterator) return Cursor;\n    overriding function Last  (Object : Iterator) return Cursor;\n@@ -643,18 +644,18 @@ package body Ada.Containers.Bounded_Vectors is\n    begin\n       if Index > Container.Last then\n          raise Constraint_Error with \"Index is out of range\";\n+      else\n+         return Container.Elements (To_Array_Index (Index));\n       end if;\n-\n-      return Container.Elements (To_Array_Index (Index));\n    end Element;\n \n    function Element (Position : Cursor) return Element_Type is\n    begin\n       if Position.Container = null then\n          raise Constraint_Error with \"Position cursor has no element\";\n+      else\n+         return Position.Container.Element (Position.Index);\n       end if;\n-\n-      return Position.Container.Element (Position.Index);\n    end Element;\n \n    ----------\n@@ -713,18 +714,18 @@ package body Ada.Containers.Bounded_Vectors is\n    begin\n       if Is_Empty (Container) then\n          return No_Element;\n+      else\n+         return (Container'Unrestricted_Access, Index_Type'First);\n       end if;\n-\n-      return (Container'Unrestricted_Access, Index_Type'First);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n    begin\n       if Is_Empty (Object.Container.all) then\n          return No_Element;\n+      else\n+         return  Cursor'(Object.Container, Index_Type'First);\n       end if;\n-\n-      return  Cursor'(Object.Container, Index_Type'First);\n    end First;\n \n    -------------------\n@@ -735,9 +736,9 @@ package body Ada.Containers.Bounded_Vectors is\n    begin\n       if Container.Last = No_Index then\n          raise Constraint_Error with \"Container is empty\";\n+      else\n+         return Container.Elements (To_Array_Index (Index_Type'First));\n       end if;\n-\n-      return Container.Elements (To_Array_Index (Index_Type'First));\n    end First_Element;\n \n    -----------------\n@@ -1615,14 +1616,17 @@ package body Ada.Containers.Bounded_Vectors is\n       B := B - 1;\n    end Iterate;\n \n-   function Iterate (Container : Vector)\n+   function Iterate\n+     (Container : Vector)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n    begin\n       return Iterator'(Container'Unrestricted_Access, Index_Type'First);\n    end Iterate;\n \n-   function Iterate (Container : Vector; Start : Cursor)\n+   function Iterate\n+     (Container : Vector;\n+      Start     : Cursor)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'class\n    is\n    begin\n@@ -1637,18 +1641,18 @@ package body Ada.Containers.Bounded_Vectors is\n    begin\n       if Is_Empty (Container) then\n          return No_Element;\n+      else\n+         return (Container'Unrestricted_Access, Container.Last);\n       end if;\n-\n-      return (Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n    begin\n       if Is_Empty (Object.Container.all) then\n          return No_Element;\n+      else\n+         return Cursor'(Object.Container, Object.Container.Last);\n       end if;\n-\n-      return Cursor'(Object.Container, Object.Container.Last);\n    end Last;\n \n    ------------------\n@@ -1659,9 +1663,9 @@ package body Ada.Containers.Bounded_Vectors is\n    begin\n       if Container.Last = No_Index then\n          raise Constraint_Error with \"Container is empty\";\n+      else\n+         return Container.Elements (Container.Length);\n       end if;\n-\n-      return Container.Elements (Container.Length);\n    end Last_Element;\n \n    ----------------\n@@ -1972,7 +1976,7 @@ package body Ada.Containers.Bounded_Vectors is\n       end if;\n \n       return (Element =>\n-        Container.Elements (To_Array_Index (Position))'Access);\n+                Container.Elements (To_Array_Index (Position))'Access);\n    end Constant_Reference;\n \n    function Reference (Container : Vector; Position : Cursor)\n@@ -1990,7 +1994,7 @@ package body Ada.Containers.Bounded_Vectors is\n \n       return\n         (Element =>\n-            Position.Container.Elements\n+           Position.Container.Elements\n              (To_Array_Index (Position.Index))'Access);\n    end Reference;\n \n@@ -1999,10 +2003,10 @@ package body Ada.Containers.Bounded_Vectors is\n    begin\n       if Position > Container.Last then\n          raise Constraint_Error with \"Index is out of range\";\n+      else\n+         return (Element =>\n+           Container.Elements (To_Array_Index (Position))'Unrestricted_Access);\n       end if;\n-\n-      return (Element =>\n-        Container.Elements (To_Array_Index (Position))'Unrestricted_Access);\n    end Reference;\n \n    ---------------------\n@@ -2274,7 +2278,7 @@ package body Ada.Containers.Bounded_Vectors is\n       --    Index >= Index_Type'First\n       --  hence we also know that\n       --    Index - Index_Type'First >= 0\n-      --\n+\n       --  The issue is that even though 0 is guaranteed to be a value\n       --  in the type Index_Type'Base, there's no guarantee that the\n       --  difference is a value in that type. To prevent overflow we\n@@ -2377,6 +2381,7 @@ package body Ada.Containers.Bounded_Vectors is\n          end if;\n \n       elsif Index_Type'First <= 0 then\n+\n          --  Here we can compute Last directly, in the normal way. We know that\n          --  No_Index is less than 0, so there is no danger of overflow when\n          --  adding the (positive) value of Length.\n@@ -2436,6 +2441,7 @@ package body Ada.Containers.Bounded_Vectors is\n       --  create a Last index value greater than Index_Type'Last.\n \n       if Index_Type'Base'Last >= Count_Type'Pos (Count_Type'Last) then\n+\n          --  We perform a two-part test. First we determine whether the\n          --  computed Last value lies in the base range of the type, and then\n          --  determine whether it lies in the range of the index (sub)type.\n@@ -2464,6 +2470,7 @@ package body Ada.Containers.Bounded_Vectors is\n          end if;\n \n       elsif Index_Type'First <= 0 then\n+\n          --  Here we can compute Last directly, in the normal way. We know that\n          --  No_Index is less than 0, so there is no danger of overflow when\n          --  adding the (positive) value of Length."}, {"sha": "7c009c0352c15c90ea873f9515171863be9e1a5d", "filename": "gcc/ada/a-cobove.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -50,8 +50,7 @@ package Ada.Containers.Bounded_Vectors is\n \n    No_Index : constant Extended_Index := Extended_Index'First;\n \n-   type Vector (Capacity : Count_Type) is tagged private\n-   with\n+   type Vector (Capacity : Count_Type) is tagged private with\n       Constant_Indexing => Constant_Reference,\n       Variable_Indexing => Reference,\n       Default_Iterator  => Iterate,\n@@ -300,10 +299,13 @@ package Ada.Containers.Bounded_Vectors is\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n \n-   function Iterate (Container : Vector)\n+   function Iterate\n+     (Container : Vector)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'Class;\n \n-   function Iterate (Container : Vector; Start : Cursor)\n+   function Iterate\n+     (Container : Vector;\n+      Start     : Cursor)\n       return Vector_Iterator_Interfaces.Reversible_Iterator'class;\n \n    type Constant_Reference_Type"}, {"sha": "0d614bd4f8fb723bd284f715b0b6d1bbabddb713", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -34,7 +34,7 @@\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n \n-with Ada.Streams;             use Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n generic"}, {"sha": "a13003819b09456f0d695a20f8b5f8a42900b59e", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -33,7 +33,7 @@\n \n private with Ada.Finalization;\n \n-with Ada.Streams;             use Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n generic"}, {"sha": "c1ae68297b3d15cf2c5214f410897b3913230430", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,8 @@ package body Ada.Containers.Ordered_Maps is\n      end record;\n \n    overriding function First (Object : Iterator) return Cursor;\n-   overriding function Last  (Object : Iterator) return Cursor;\n+\n+   overriding function Last (Object : Iterator) return Cursor;\n \n    overriding function Next\n      (Object   : Iterator;\n@@ -266,8 +267,7 @@ package body Ada.Containers.Ordered_Maps is\n    -- Clear --\n    -----------\n \n-   procedure Clear is\n-      new Tree_Operations.Generic_Clear (Delete_Tree);\n+   procedure Clear is new Tree_Operations.Generic_Clear (Delete_Tree);\n \n    procedure Clear (Container : in out Map) is\n    begin\n@@ -283,6 +283,18 @@ package body Ada.Containers.Ordered_Maps is\n       return Node.Color;\n    end Color;\n \n+   ------------------------\n+   -- Constant_Reference --\n+   ------------------------\n+\n+   function Constant_Reference\n+     (Container : Map;\n+      Key       : Key_Type) return Constant_Reference_Type\n+   is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n    --------------\n    -- Contains --\n    --------------\n@@ -453,25 +465,23 @@ package body Ada.Containers.Ordered_Maps is\n \n    function First (Container : Map) return Cursor is\n       T : Tree_Type renames Container.Tree;\n-\n    begin\n       if T.First = null then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, T.First);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, T.First);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n       M : constant Map_Access  := Object.Container;\n       N : constant Node_Access := M.Tree.First;\n-\n    begin\n       if N = null then\n          return No_Element;\n+      else\n+         return Cursor'(Object.Container.all'Unchecked_Access, N);\n       end if;\n-\n-      return Cursor'(Object.Container.all'Unchecked_Access, N);\n    end First;\n \n    -------------------\n@@ -484,9 +494,9 @@ package body Ada.Containers.Ordered_Maps is\n    begin\n       if T.First = null then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return T.First.Element;\n       end if;\n-\n-      return T.First.Element;\n    end First_Element;\n \n    ---------------\n@@ -495,13 +505,12 @@ package body Ada.Containers.Ordered_Maps is\n \n    function First_Key (Container : Map) return Key_Type is\n       T : Tree_Type renames Container.Tree;\n-\n    begin\n       if T.First = null then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return T.First.Key;\n       end if;\n-\n-      return T.First.Key;\n    end First_Key;\n \n    -----------\n@@ -510,13 +519,12 @@ package body Ada.Containers.Ordered_Maps is\n \n    function Floor (Container : Map; Key : Key_Type) return Cursor is\n       Node : constant Node_Access := Key_Ops.Floor (Container.Tree, Key);\n-\n    begin\n       if Node = null then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, Node);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, Node);\n    end Floor;\n \n    ----------\n@@ -693,7 +701,8 @@ package body Ada.Containers.Ordered_Maps is\n    ------------------------\n \n    function Is_Equal_Node_Node\n-     (L, R : Node_Access) return Boolean is\n+     (L, R : Node_Access) return Boolean\n+   is\n    begin\n       if L.Key < R.Key then\n          return False;\n@@ -715,7 +724,7 @@ package body Ada.Containers.Ordered_Maps is\n       Right : Node_Access) return Boolean\n    is\n    begin\n-      --  k > node same as node < k\n+      --  Left > Right same as Right < Left\n \n       return Right.Key < Left;\n    end Is_Greater_Key_Node;\n@@ -814,25 +823,23 @@ package body Ada.Containers.Ordered_Maps is\n \n    function Last (Container : Map) return Cursor is\n       T : Tree_Type renames Container.Tree;\n-\n    begin\n       if T.Last = null then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, T.Last);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, T.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n       M : constant Map_Access  := Object.Container;\n       N : constant Node_Access := M.Tree.Last;\n-\n    begin\n       if N = null then\n          return No_Element;\n+      else\n+         return Cursor'(Object.Container.all'Unchecked_Access, N);\n       end if;\n-\n-      return Cursor'(Object.Container.all'Unchecked_Access, N);\n    end Last;\n \n    ------------------\n@@ -841,13 +848,12 @@ package body Ada.Containers.Ordered_Maps is\n \n    function Last_Element (Container : Map) return Element_Type is\n       T : Tree_Type renames Container.Tree;\n-\n    begin\n       if T.Last = null then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return T.Last.Element;\n       end if;\n-\n-      return T.Last.Element;\n    end Last_Element;\n \n    --------------\n@@ -856,13 +862,12 @@ package body Ada.Containers.Ordered_Maps is\n \n    function Last_Key (Container : Map) return Key_Type is\n       T : Tree_Type renames Container.Tree;\n-\n    begin\n       if T.Last = null then\n          raise Constraint_Error with \"map is empty\";\n+      else\n+         return T.Last.Key;\n       end if;\n-\n-      return T.Last.Key;\n    end Last_Key;\n \n    ----------\n@@ -1102,14 +1107,11 @@ package body Ada.Containers.Ordered_Maps is\n    -- Reference --\n    ---------------\n \n-   function Constant_Reference (Container : Map; Key : Key_Type)\n-   return Constant_Reference_Type is\n-   begin\n-      return (Element => Container.Element (Key)'Unrestricted_Access);\n-   end Constant_Reference;\n-\n-   function Reference (Container : Map; Key : Key_Type)\n-   return Reference_Type is\n+   function Reference\n+     (Container : Map;\n+      Key       : Key_Type)\n+      return Reference_Type\n+   is\n    begin\n       return (Element => Container.Element (Key)'Unrestricted_Access);\n    end Reference;\n@@ -1195,7 +1197,7 @@ package body Ada.Containers.Ordered_Maps is\n \n       B : Natural renames Container.Tree'Unrestricted_Access.all.Busy;\n \n-      --  Start of processing for Reverse_Iterate\n+   --  Start of processing for Reverse_Iterate\n \n    begin\n       B := B + 1;"}, {"sha": "1beea7bbff511e227ad88350b9fe1503516d45ca", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -33,6 +33,7 @@\n \n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n+\n with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n@@ -49,8 +50,7 @@ package Ada.Containers.Ordered_Maps is\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n \n-   type Map is tagged private\n-   with\n+   type Map is tagged private with\n       constant_Indexing => Constant_Reference,\n       Variable_Indexing => Reference,\n       Default_Iterator  => Iterate,\n@@ -62,6 +62,7 @@ package Ada.Containers.Ordered_Maps is\n    Empty_Map : constant Map;\n \n    No_Element : constant Cursor;\n+\n    function Has_Element (Position : Cursor) return Boolean;\n \n    package Map_Iterator_Interfaces is new\n@@ -211,8 +212,9 @@ package Ada.Containers.Ordered_Maps is\n    for Reference_Type'Write use Write;\n \n    function Constant_Reference\n-     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n-   return Constant_Reference_Type;\n+     (Container : Map;\n+      Key       : Key_Type)    --  SHOULD BE ALIASED???\n+      return Constant_Reference_Type;\n \n    function Reference (Container : Map; Key : Key_Type)\n    return Reference_Type;\n@@ -221,10 +223,13 @@ package Ada.Containers.Ordered_Maps is\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n \n-   function Iterate (Container : Map)\n+   function Iterate\n+     (Container : Map)\n       return Map_Iterator_Interfaces.Forward_Iterator'class;\n \n-   function Iterate (Container : Map; Start : Cursor)\n+   function Iterate\n+     (Container : Map;\n+      Start     : Cursor)\n       return Map_Iterator_Interfaces.Reversible_Iterator'class;\n \n    procedure Reverse_Iterate"}, {"sha": "21eb71977790a196d125c618781b06935673f10f", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -34,7 +34,7 @@\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n \n-with Ada.Streams;             use Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n generic"}, {"sha": "8315a9d23f8932f68c7d3b898801a964093f731f", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -1152,8 +1152,16 @@ package body Ada.Exceptions is\n    end Rcheck_21;\n \n    procedure Rcheck_22 (File : System.Address; Line : Integer) is\n+      E : constant Exception_Id := Program_Error_Def'Access;\n    begin\n-      Raise_Program_Error_Msg (File, Line, Rmsg_22'Address);\n+      --  This is \"finalize/adjust raised exception\".\n+      --  As this exception is only raised with aborts defered, it must\n+      --  call Raise_Exception_No_Defer, contrary to all other Rcheck\n+      --  subprograms (which defer aborts).\n+      --  This is coherent with Raise_From_Controlled_Operation.\n+\n+      Exception_Data.Set_Exception_C_Msg (E, File, Line, 0, Rmsg_22'Address);\n+      Raise_Current_Excep (E);\n    end Rcheck_22;\n \n    procedure Rcheck_23 (File : System.Address; Line : Integer) is"}, {"sha": "6805bf401693467b2a00dd66ba803afbe06b2858", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -1083,8 +1083,16 @@ package body Ada.Exceptions is\n    end Rcheck_21;\n \n    procedure Rcheck_22 (File : System.Address; Line : Integer) is\n+      E : constant Exception_Id := Program_Error_Def'Access;\n    begin\n-      Raise_Program_Error_Msg (File, Line, Rmsg_22'Address);\n+      --  This is \"finalize/adjust raised exception\".\n+      --  As this exception is only raised with aborts defered, it must\n+      --  call Raise_Exception_No_Defer, contrary to all other Rcheck\n+      --  subprograms (which defer aborts).\n+      --  This is coherent with Raise_From_Controlled_Operation.\n+\n+      Exception_Data.Set_Exception_C_Msg (E, File, Line, 0, Rmsg_22'Address);\n+      Raise_Current_Excep (E);\n    end Rcheck_22;\n \n    procedure Rcheck_23 (File : System.Address; Line : Integer) is"}, {"sha": "730ac6b86dc478fe3d59d34d87c5f98a97f93598", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -301,33 +301,6 @@ package body Exp_Ch7 is\n    --  context does not contain the above constructs, the routine returns an\n    --  empty list.\n \n-   function Build_Exception_Handler\n-     (Loc         : Source_Ptr;\n-      E_Id        : Entity_Id;\n-      Raised_Id   : Entity_Id;\n-      For_Library : Boolean := False) return Node_Id;\n-   --  Subsidiary to Build_Finalizer, Make_Deep_Array_Body and Make_Deep_Record\n-   --  _Body. Create an exception handler of the following form:\n-   --\n-   --    when others =>\n-   --       if not Raised_Id then\n-   --          Raised_Id := True;\n-   --          Save_Occurrence (E_Id, Get_Current_Excep.all.all);\n-   --       end if;\n-   --\n-   --  If flag For_Library is set (and not in restricted profile):\n-   --\n-   --    when others =>\n-   --       if not Raised_Id then\n-   --          Raised_Id := True;\n-   --          Save_Library_Occurrence (Get_Current_Excep.all.all);\n-   --       end if;\n-   --\n-   --  E_Id denotes the defining identifier of a local exception occurrence.\n-   --  Raised_Id is the entity of a local boolean flag. Flag For_Library is\n-   --  used when operating at the library level, when enabled the current\n-   --  exception will be saved to a global location.\n-\n    procedure Build_Finalizer\n      (N           : Node_Id;\n       Clean_Stmts : List_Id;"}, {"sha": "dbebd8ae52a4c5851553a611ec9b75f4d4ebc825", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -40,6 +40,33 @@ package Exp_Ch7 is\n    --  Create the procedures Deep_Initialize, Deep_Adjust and Deep_Finalize\n    --  that take care of finalization management at run-time.\n \n+   function Build_Exception_Handler\n+     (Loc         : Source_Ptr;\n+      E_Id        : Entity_Id;\n+      Raised_Id   : Entity_Id;\n+      For_Library : Boolean := False) return Node_Id;\n+   --  Subsidiary to Build_Finalizer, Make_Deep_Array_Body and Make_Deep_Record\n+   --  _Body. Create an exception handler of the following form:\n+   --\n+   --    when others =>\n+   --       if not Raised_Id then\n+   --          Raised_Id := True;\n+   --          Save_Occurrence (E_Id, Get_Current_Excep.all.all);\n+   --       end if;\n+   --\n+   --  If flag For_Library is set (and not in restricted profile):\n+   --\n+   --    when others =>\n+   --       if not Raised_Id then\n+   --          Raised_Id := True;\n+   --          Save_Library_Occurrence (Get_Current_Excep.all.all);\n+   --       end if;\n+   --\n+   --  E_Id denotes the defining identifier of a local exception occurrence.\n+   --  Raised_Id is the entity of a local boolean flag. Flag For_Library is\n+   --  used when operating at the library level, when enabled the current\n+   --  exception will be saved to a global location.\n+\n    procedure Build_Finalization_Master\n      (Typ        : Entity_Id;\n       Ins_Node   : Node_Id := Empty;"}, {"sha": "07035478bfff4ac3cbe2c1558069c2290ef62911", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -974,29 +974,7 @@ package body Exp_Intr is\n                      Obj_Ref => Deref,\n                      Typ     => Desig_T)),\n                  Exception_Handlers => New_List (\n-                   Make_Exception_Handler (Loc,\n-                     Exception_Choices => New_List (\n-                       Make_Others_Choice (Loc)),\n-                     Statements => New_List (\n-                       Make_Assignment_Statement (Loc,\n-                         Name =>\n-                           New_Reference_To (Raised_Id, Loc),\n-                         Expression =>\n-                           New_Reference_To (Standard_True, Loc)),\n-                       Make_Procedure_Call_Statement (Loc,\n-                         Name =>\n-                           New_Reference_To (RTE (RE_Save_Occurrence), Loc),\n-                         Parameter_Associations => New_List (\n-                           New_Reference_To (E_Id, Loc),\n-                           Make_Explicit_Dereference (Loc,\n-                             Prefix =>\n-                               Make_Function_Call (Loc,\n-                                 Name =>\n-                                   Make_Explicit_Dereference (Loc,\n-                                     Prefix =>\n-                                       New_Reference_To\n-                                         (RTE (RE_Get_Current_Excep),\n-                                          Loc))))))))))));\n+                   Build_Exception_Handler (Loc, E_Id, Raised_Id)))));\n \n          --  For .NET/JVM, detach the object from the containing finalization\n          --  collection before finalizing it."}, {"sha": "61f0c16c63e70fe2e0482dc3e14841e3ba4df1ca", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85fd922e12315cd65061ed85f7afb40fe7ff958/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=d85fd922e12315cd65061ed85f7afb40fe7ff958", "patch": "@@ -1328,8 +1328,10 @@ package body System.Tasking.Stages is\n             TH.all (Cause, Self_ID, EO);\n \n          exception\n+\n+            --  RM-C.7.3 requires all exceptions raised here to be ignored\n+\n             when others =>\n-               --  RM-C.7.3 requires these exceptions to be ignored\n                null;\n          end;\n       end if;"}]}