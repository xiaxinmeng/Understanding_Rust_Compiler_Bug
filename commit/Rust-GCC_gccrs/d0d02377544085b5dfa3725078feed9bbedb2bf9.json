{"sha": "d0d02377544085b5dfa3725078feed9bbedb2bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkMDIzNzc1NDQwODViNWRmYTM3MjUwNzhmZWVkOWJiZWRiMmJmOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-01T03:52:42Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-01T03:52:42Z"}, "message": "(untyped_call, blockage): New patterns, basically copied from m68k.md.\n\nFrom-SVN: r4617", "tree": {"sha": "df16bf09f89dd6d4d6cd8b6a85c05d51529e918a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df16bf09f89dd6d4d6cd8b6a85c05d51529e918a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0d02377544085b5dfa3725078feed9bbedb2bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d02377544085b5dfa3725078feed9bbedb2bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d02377544085b5dfa3725078feed9bbedb2bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d02377544085b5dfa3725078feed9bbedb2bf9/comments", "author": null, "committer": null, "parents": [{"sha": "9cd1e1aab43868233bac51f99a5091cec3ba0724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd1e1aab43868233bac51f99a5091cec3ba0724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd1e1aab43868233bac51f99a5091cec3ba0724"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "5b3dec63bc3755f4a6c9649534f92cd89cfa6ad2", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d02377544085b5dfa3725078feed9bbedb2bf9/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d02377544085b5dfa3725078feed9bbedb2bf9/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=d0d02377544085b5dfa3725078feed9bbedb2bf9", "patch": "@@ -1854,6 +1854,43 @@\n   return \\\"calls %2,%1\\\";\n \")\n \n+;; Call subroutine returning any type.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+                  (const_int 0))\n+            (match_operand 1 \"\" \"\")\n+            (match_operand 2 \"\" \"\")])]\n+  \"\"\n+  \"\n+{\n+  int i;\n+\n+  emit_call_insn (gen_call_pop (operands[0], const0_rtx, NULL, const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+\n+  DONE;\n+}\")\n+\n+;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n+;; all of memory.  This blocks insns from being moved across this point.\n+\n+(define_insn \"blockage\"\n+  [(unspec_volatile [(const_int 0)] 0)]\n+  \"\"\n+  \"\")\n+\n (define_insn \"return\"\n   [(return)]\n   \"\""}]}