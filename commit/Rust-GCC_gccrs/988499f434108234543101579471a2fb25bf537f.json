{"sha": "988499f434108234543101579471a2fb25bf537f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4NDk5ZjQzNDEwODIzNDU0MzEwMTU3OTQ3MWEyZmIyNWJmNTM3Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-07-21T19:40:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-07-21T19:40:39Z"}, "message": "Add initializer_list support as per N2679.\n\n        * include/debug/unordered_map: Add initializer_list support.\n        * include/debug/safe_association.h: Likewise.\n        * include/debug/unordered_set: Likewise.\n        * include/debug/vector: Likewise.\n        * include/debug/deque: Likewise.\n        * include/debug/map.h: Likewise.\n        * include/debug/set.h: Likewise.\n        * include/debug/string: Likewise.\n        * include/debug/list: Likewise.\n        * include/debug/multimap.h: Likewise.\n        * include/tr1_impl/unordered_map: Likewise.\n        * include/tr1_impl/hashtable: Likewise.\n        * include/tr1_impl/unordered_set: Likewise.\n        * include/tr1_impl/regex: Likewise.\n        * include/std/valarray: Likewise.\n        * include/std/unordered_map: Likewise.\n        * include/std/unordered_set: Likewise.\n        * include/bits/stl_list.h: Likewise.\n        * include/bits/stl_map.h: Likewise.\n        * include/bits/stl_set.h: Likewise.\n        * include/bits/basic_string.h: Likewise.\n        * include/bits/basic_string.tcc: Likewise.\n        * include/bits/stl_multimap.h: Likewise.\n        * include/bits/stl_vector.h: Likewise.\n        * include/bits/stl_deque.h: Likewise.\n        * include/bits/stl_multiset.h: Likewise.\n        * include/bits/stl_bvector.h: Likewise.\n        * include/ext/vstring.h: Likewise.\n        * include/ext/rc_string_base.h: Likewise.\n        * include/ext/sso_string_base.h: Likewise.\n        * src/Makefile.am (w?string-inst): Build with -std=gnu++0x.\n        * src/Makefile.in: Likewise.\n        * config/abi/pre/gnu.ver: Add new w?string exports.\n...\n\nFrom-SVN: r138043", "tree": {"sha": "efdfd86136a070108ac69fda382332c5475473a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efdfd86136a070108ac69fda382332c5475473a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/988499f434108234543101579471a2fb25bf537f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988499f434108234543101579471a2fb25bf537f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988499f434108234543101579471a2fb25bf537f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988499f434108234543101579471a2fb25bf537f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39a13be5cbfe0e9623782de3733cd8265e6230d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a13be5cbfe0e9623782de3733cd8265e6230d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a13be5cbfe0e9623782de3733cd8265e6230d4"}], "stats": {"total": 2211, "additions": 2189, "deletions": 22}, "files": [{"sha": "7c9da490f45d3884d57b059967b2c054c7ff264b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -1,3 +1,79 @@\n+2008-07-21  Jason Merrill  <jason@redhat.com>\n+\n+\tAdd initializer_list support as per N2679.\n+\t* include/debug/unordered_map: Add initializer_list support.\n+\t* include/debug/safe_association.h: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/set.h: Likewise.\n+\t* include/debug/string: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/tr1_impl/unordered_map: Likewise.\n+\t* include/tr1_impl/hashtable: Likewise.\n+\t* include/tr1_impl/unordered_set: Likewise.\n+\t* include/tr1_impl/regex: Likewise.\n+\t* include/std/valarray: Likewise.\n+\t* include/std/unordered_map: Likewise.\n+\t* include/std/unordered_set: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/basic_string.h: Likewise.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/ext/vstring.h: Likewise.\n+\t* include/ext/rc_string_base.h: Likewise.\n+\t* include/ext/sso_string_base.h: Likewise.\n+\t* src/Makefile.am (w?string-inst): Build with -std=gnu++0x.\n+\t* src/Makefile.in: Likewise.\n+\t* config/abi/pre/gnu.ver: Add new w?string exports.\n+\t* testsuite/21_strings/basic_string/init-list.cc: New test.\n+\t* testsuite/23_containers/vector/init-list.cc: New test.\n+\t* testsuite/23_containers/deque/init-list.cc: New test.\n+\t* testsuite/23_containers/list/init-list.cc: New test.\n+\t* testsuite/23_containers/map/init-list.cc: New test.\n+\t* testsuite/23_containers/multimap/init-list.cc: New test.\n+\t* testsuite/23_containers/set/init-list.cc: New test.\n+\t* testsuite/23_containers/multiset/init-list.cc: New test.\n+\t* testsuite/23_containers/unordered_map/init-list.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/init-list.cc: New test.\n+\t* testsuite/23_containers/unordered_set/init-list.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/init-list.cc: New test.\n+\t* testsuite/26_numerics/valarray/init-list.cc: New test.\n+\t* testsuite/28_regex/init-list.cc: New test.\n+\t* testsuite/ext/vstring/init-list.cc: New test.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n+\tUpdate error lineno.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n+\tUpdate error lineno.\n+\t\n 2008-07-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/os/gnu-linux/arm-eabi-extra.ver: New file."}, {"sha": "7b31a1cfa472755fa649ce7dc953cbbc43559853", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -147,9 +147,12 @@ GLIBCXX_3.4 {\n     # Names not in an 'extern' block are mangled names.\n \n     # std::string\n-    _ZNSsC*;\n+    _ZNSsC[12][EI][PRjmvN]*;\n     _ZNSsD*;\n-    _ZNSs[0-9][a-z]*;\n+    _ZNSs[0-58-9][a-z]*;\n+    _ZNSs[67][a-z]*E[PRcjmv]*;\n+    _ZNSs7[a-z]*EES2_[NPRjm]*;\n+    _ZNSs7[a-z]*EES2_S[12]*;\n     _ZNSs12_Alloc_hiderC*;\n     _ZNSs12_M_leak_hardEv;\n     _ZNSs12_S_constructE[jm]cRKSaIcE;\n@@ -172,9 +175,9 @@ GLIBCXX_3.4 {\n     _ZNSs4_Rep20_S_empty_rep_storageE;\n     _ZNSs4_Rep11_S_max_sizeE;\n     _ZNSs4_Rep11_S_terminalE;\n-    _ZNSsaSE*;\n+    _ZNSsaSE[PRc]*;\n     _ZNSsixE*;\n-    _ZNSspLE*;\n+    _ZNSspLE[PRc]*;\n     _ZNKSs[0-9][a-z]*;\n     _ZNKSs[0-9][0-9][a-z]*;\n     _ZNKSs[a-z]*;\n@@ -189,9 +192,12 @@ GLIBCXX_3.4 {\n     _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_E*;\n \n     # std::wstring\n-    _ZNSbIwSt11char_traitsIwESaIwEEC*;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12][EI][PRjmvN]*;\n     _ZNSbIwSt11char_traitsIwESaIwEED*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][a-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9][a-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[67][a-z]*E[PRwjmv]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE7[a-z]*EES6_[NPRjm]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE7[a-z]*EES6_S[56]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE12_Alloc_hiderC*;\n     _ZNSbIwSt11char_traitsIwESaIwEE12_M_leak_hardEv;\n     _ZNSbIwSt11char_traitsIwESaIwEE12_S_constructE[jm]wRKS1_;\n@@ -214,9 +220,9 @@ GLIBCXX_3.4 {\n     _ZNSbIwSt11char_traitsIwESaIwEE4_Rep20_S_empty_rep_storageE;\n     _ZNSbIwSt11char_traitsIwESaIwEE4_Rep11_S_max_sizeE;\n     _ZNSbIwSt11char_traitsIwESaIwEE4_Rep11_S_terminalE;\n-    _ZNSbIwSt11char_traitsIwESaIwEEaSE*;\n+    _ZNSbIwSt11char_traitsIwESaIwEEaSE[PRw]*;\n     _ZNSbIwSt11char_traitsIwESaIwEEixE*;\n-    _ZNSbIwSt11char_traitsIwESaIwEEpLE*;\n+    _ZNSbIwSt11char_traitsIwESaIwEEpLE[PRw]*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][a-z]*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][0-9][a-z]*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE[a-z]*;\n@@ -889,6 +895,24 @@ GLIBCXX_3.4.11 {\n     _ZNSt6chrono12system_clock12is_monotonicE;\n     _ZNSt6chrono12system_clock3nowEv;\n \n+    # string/wstring initializer_list overloads\n+    _ZNSs6appendESt16initializer_listIcE;\n+    _ZNSs6assignESt16initializer_listIcE;\n+    _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEESt16initializer_listIcE;\n+    _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_St16initializer_listIcE;\n+    _ZNSsC1ESt16initializer_listIcERKSaIcE;\n+    _ZNSsC2ESt16initializer_listIcERKSaIcE;\n+    _ZNSsaSESt16initializer_listIcE;\n+    _ZNSspLESt16initializer_listIcE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE6appendESt16initializer_listIwE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE6assignESt16initializer_listIwE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE6insertEN9__gnu_cxx17__normal_iteratorIPwS2_EESt16initializer_listIwE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPwS2_EES6_St16initializer_listIwE;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC1ESt16initializer_listIwERKS1_;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC2ESt16initializer_listIwERKS1_;\n+    _ZNSbIwSt11char_traitsIwESaIwEEaSESt16initializer_listIwE;\n+    _ZNSbIwSt11char_traitsIwESaIwEEpLESt16initializer_listIwE;\n+\n } GLIBCXX_3.4.10;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "de4cf80234dfbdd0945deedb448303228dfebae7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -45,6 +45,7 @@\n \n #include <ext/atomicity.h>\n #include <debug/debug.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -477,6 +478,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Construct string from an initializer list.\n+       *  @param  l  std::initializer_list of characters.\n+       *  @param  a  Allocator to use (default is default allocator).\n+       */\n+      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Construct string as copy of a range.\n        *  @param  beg  Start of range.\n@@ -523,6 +533,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Set value to string constructed from initializer list.\n+       *  @param  l  std::initializer_list.\n+       */\n+      basic_string&\n+      operator=(initializer_list<_CharT> __l)\n+      {\n+\tthis->assign (__l.begin(), __l.end());\n+\treturn *this;\n+      }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       // Iterators:\n       /**\n        *  Returns a read/write iterator that points to the first character in\n@@ -794,6 +817,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Append an initializer_list of characters.\n+       *  @param l  The initializer_list of characters to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(initializer_list<_CharT> __l)\n+      { return this->append(__l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Append a string to this string.\n        *  @param str  The string to append.\n@@ -849,6 +883,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       basic_string&\n       append(size_type __n, _CharT __c);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Append an initializer_list of characters.\n+       *  @param l  The initializer_list of characters to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      append(initializer_list<_CharT> __l)\n+      { return this->append(__l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Append a range of characters.\n        *  @param first  Iterator referencing the first character to append.\n@@ -957,6 +1002,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         assign(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Set value to an initializer_list of characters.\n+       *  @param l  The initializer_list of characters to assign.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      assign(initializer_list<_CharT> __l)\n+      { return this->assign(__l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Insert multiple characters.\n        *  @param p  Iterator referencing location in string to insert at.\n@@ -989,6 +1045,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Insert an initializer_list of characters.\n+       *  @param p  Iterator referencing location in string to insert at.\n+       *  @param l  The initializer_list of characters to insert.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       */\n+      void\n+      insert(iterator __p, initializer_list<_CharT> __l)\n+      { this->insert(__p, __l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Insert value of a string.\n        *  @param pos1  Iterator referencing location in string to insert at.\n@@ -1434,6 +1502,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t     __k1.base(), __k2 - __k1);\n       }\n       \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Replace range of characters with initializer_list.\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param l  The initializer_list of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, characters\n+       *  in the range [k1,k2) are inserted.  If the length of result exceeds\n+       *  max_size(), length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      basic_string& replace(iterator __i1, iterator __i2,\n+\t\t\t    initializer_list<_CharT> __l)\n+      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     private:\n       template<class _Integer>\n \tbasic_string&"}, {"sha": "3201e361830b10fc0cb70339ad7eacd902ff1d74", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -235,6 +235,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n     { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)\n+    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)\n+    { }\n+#endif\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::"}, {"sha": "ad0ed87a1158a5c81be49150c570fe7ee737807c", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -62,6 +62,8 @@\n #ifndef _STL_BVECTOR_H\n #define _STL_BVECTOR_H 1\n \n+#include <initializer_list>\n+\n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n   typedef unsigned long _Bit_type;\n@@ -529,6 +531,14 @@ template<typename _Alloc>\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     vector(vector&& __x)\n     : _Base(std::forward<_Base>(__x)) { }\n+\n+    vector(initializer_list<bool> __l,\n+\t   const allocator_type& __a = allocator_type())\n+      : _Base(__a)\n+    {\n+      _M_initialize_range(__l.begin(), __l.end(),\n+\t\t\t  random_access_iterator_tag());\n+    }\n #endif\n \n     template<typename _InputIterator>\n@@ -566,6 +576,13 @@ template<typename _Alloc>\n       this->swap(__x); \n       return *this;\n     }\n+\n+    vector&\n+    operator=(initializer_list<bool> __l)\n+    {\n+      this->assign (__l.begin(), __l.end());\n+      return *this;\n+    }\n #endif\n \n     // assign(), a generalized assignment member function.  Two\n@@ -584,6 +601,12 @@ template<typename _Alloc>\n \t_M_assign_dispatch(__first, __last, _Integral());\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    void\n+    assign(initializer_list<bool> __l)\n+    { this->assign(__l.begin(), __l.end()); }\n+#endif\n+    \n     iterator\n     begin()\n     { return this->_M_impl._M_start; }\n@@ -777,6 +800,11 @@ template<typename _Alloc>\n     insert(iterator __position, size_type __n, const bool& __x)\n     { _M_fill_insert(__position, __n, __x); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    void insert(iterator __p, initializer_list<bool> __l)\n+    { this->insert(__p, __l.begin(), __l.end()); }\n+#endif\n+\n     void\n     pop_back()\n     { --this->_M_impl._M_finish; }"}, {"sha": "070fc07890994e65a005760c52abc0b98761cb9e", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -65,6 +65,7 @@\n #include <bits/concept_check.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n@@ -740,6 +741,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       deque(deque&&  __x)\n       : _Base(std::forward<_Base>(__x)) { }\n+\n+      /**\n+       *  @brief  Builds a %deque from an initializer list.\n+       *  @param  l  An initializer_list.\n+       *  @param  a  An allocator object.\n+       *\n+       *  Create a %deque consisting of copies of the elements in the\n+       *  initializer_list @a l.\n+       *\n+       *  This will call the element type's copy constructor N times\n+       *  (where N is l.size()) and do no memory reallocation.\n+       */\n+      deque(initializer_list<value_type> __l,\n+\t    const allocator_type& __a = allocator_type())\n+\t: _Base(__a)\n+        {\n+\t  _M_range_initialize(__l.begin(), __l.end(),\n+\t\t\t      random_access_iterator_tag());\n+\t}\n #endif\n \n       /**\n@@ -801,6 +821,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  Assigns an initializer list to a %deque.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %deque with copies of the elements in the\n+       *  initializer_list @a l.\n+       *\n+       *  Note that the assignment completely changes the %deque and that the\n+       *  resulting %deque's size is the same as the number of elements\n+       *  assigned.  Old data may be lost.\n+       */\n+      deque&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->assign(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       /**\n@@ -837,6 +875,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Assigns an initializer list to a %deque.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %deque with copies of the elements in the\n+       *  initializer_list @a l.\n+       *\n+       *  Note that the assignment completely changes the %deque and that the\n+       *  resulting %deque's size is the same as the number of elements\n+       *  assigned.  Old data may be lost.\n+       */\n+      void\n+      assign(initializer_list<value_type> __l)\n+      { this->assign(__l.begin(), __l.end()); }\n+#endif\n+\n       /// Get a copy of the memory allocation object.\n       allocator_type\n       get_allocator() const\n@@ -1253,6 +1308,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       iterator\n       insert(iterator __position, value_type&& __x)\n       { return emplace(__position, std::move(__x)); }\n+\n+      /**\n+       *  @brief  Inserts an initializer list into the %deque.\n+       *  @param  p  An iterator into the %deque.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function will insert copies of the data in the\n+       *  initializer_list @a l into the %deque before the location\n+       *  specified by @a p.  This is known as \"list insert.\"\n+       */\n+      void\n+      insert(iterator __p, initializer_list<value_type> __l)\n+      { this->insert(__p, __l.begin(), __l.end()); }\n #endif\n \n       /**"}, {"sha": "b38fa55cf794818b066e9293395d43eb0d953807", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -63,6 +63,7 @@\n #define _STL_LIST_H 1\n \n #include <bits/concept_check.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n@@ -541,6 +542,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       list(list&& __x)\n       : _Base(std::forward<_Base>(__x)) { }\n+\n+      /**\n+       *  @brief  Builds a %list from an initializer_list\n+       *  @param  l  An initializer_list of value_type.\n+       *  @param  a  An allocator object.\n+       *\n+       *  Create a %list consisting of copies of the elements in the\n+       *  initializer_list @a l.  This is linear in l.size().\n+       */\n+      list(initializer_list<value_type> __l,\n+           const allocator_type& __a = allocator_type())\n+        : _Base(__a)\n+      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }\n #endif\n \n       /**\n@@ -597,6 +611,20 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  %List initializer list assignment operator.\n+       *  @param  l  An initializer_list of value_type.\n+       *\n+       *  Replace the contents of the %list with copies of the elements\n+       *  in the initializer_list @a l.  This is linear in l.size().\n+       */\n+      list&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->assign(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       /**\n@@ -634,6 +662,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Assigns an initializer_list to a %list.\n+       *  @param  l  An initializer_list of value_type.\n+       *\n+       *  Replace the contents of the %list with copies of the elements\n+       *  in the initializer_list @a l.  This is linear in l.size().\n+       */\n+      void\n+      assign(initializer_list<value_type> __l)\n+      { this->assign(__l.begin(), __l.end()); }\n+#endif\n+\n       /// Get a copy of the memory allocation object.\n       allocator_type\n       get_allocator() const\n@@ -951,6 +992,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       iterator\n       insert(iterator __position, value_type&& __x)\n       { return emplace(__position, std::move(__x)); }\n+\n+      /**\n+       *  @brief  Inserts the contents of an initializer_list into %list\n+       *          before specified iterator.\n+       *  @param  p  An iterator into the %list.\n+       *  @param  l  An initializer_list of value_type.\n+       *\n+       *  This function will insert copies of the data in the\n+       *  initializer_list @a l into the %list before the location\n+       *  specified by @a p.\n+       *\n+       *  This operation is linear in the number of elements inserted and\n+       *  does not invalidate iterators and references.\n+       */\n+      void\n+      insert(iterator __p, initializer_list<value_type> __l)\n+      { this->insert(__p, __l.begin(), __l.end()); }\n #endif\n \n       /**"}, {"sha": "b402b8292c51e1d7466f6a2df8e5b2a8962b0c51", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -186,6 +186,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       map(map&& __x)\n       : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+\n+      /**\n+       *  @brief  Builds a %map from an initializer_list.\n+       *  @param  l  An initializer_list.\n+       *  @param  comp  A comparison object.\n+       *  @param  a  An allocator object.\n+       *\n+       *  Create a %map consisting of copies of the elements in the\n+       *  initializer_list @a l.\n+       *  This is linear in N if the range is already sorted, and NlogN\n+       *  otherwise (where N is @a l.size()).\n+       */\n+      map(initializer_list<value_type> __l,\n+\t  const _Compare& __c = _Compare(),\n+\t  const allocator_type& __a = allocator_type())\n+\t: _M_t(__c, __a)\n+      { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n #endif\n \n       /**\n@@ -259,6 +276,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  %Map list assignment operator.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %map with copies of the elements in the\n+       *  initializer list @a l.\n+       *\n+       *  Note that the assignment completely changes the %map and\n+       *  that the resulting %map's size is the same as the number\n+       *  of elements assigned.  Old data may be lost.\n+       */\n+      map&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       /// Get a copy of the memory allocation object.\n@@ -476,7 +512,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *                inserted.\n        *\n        *  Complexity similar to that of the range constructor.\n-       *\n        */\n       void\n       insert(std::initializer_list<value_type> __list)"}, {"sha": "0834c95cfd6c247693ec7e9c491f48f6191550e4", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -63,6 +63,7 @@\n #define _STL_MULTIMAP_H 1\n \n #include <bits/concept_check.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n@@ -183,6 +184,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       multimap(multimap&& __x)\n       : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+\n+      /**\n+       *  @brief  Builds a %multimap from an initializer_list.\n+       *  @param  l  An initializer_list.\n+       *  @param  comp  A comparison functor.\n+       *  @param  a  An allocator object.\n+       *\n+       *  Create a %multimap consisting of copies of the elements from\n+       *  the initializer_list.  This is linear in N if the list is already\n+       *  sorted, and NlogN otherwise (where N is @a __l.size()).\n+       */\n+      multimap(initializer_list<value_type> __l,\n+\t       const _Compare& __comp = _Compare(),\n+\t       const allocator_type& __a = allocator_type())\n+        : _M_t(__comp, __a)\n+      { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n #endif\n \n       /**\n@@ -256,6 +273,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  %Multimap list assignment operator.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %multimap with copies of the elements\n+       *  in the initializer list @a l.\n+       *\n+       *  Note that the assignment completely changes the %multimap and\n+       *  that the resulting %multimap's size is the same as the number\n+       *  of elements assigned.  Old data may be lost.\n+       */\n+      multimap&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       /// Get a copy of the memory allocation object.\n@@ -444,6 +480,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         insert(_InputIterator __first, _InputIterator __last)\n         { _M_t._M_insert_equal(__first, __last); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief Attempts to insert a list of std::pairs into the %multimap.\n+       *  @param  list  A std::initializer_list<value_type> of pairs to be\n+       *                inserted.\n+       *\n+       *  Complexity similar to that of the range constructor.\n+       */\n+      void\n+      insert(initializer_list<value_type> __l)\n+      { this->insert(__l.begin(), __l.end()); }\n+#endif\n+\n       /**\n        *  @brief Erases an element from a %multimap.\n        *  @param  position  An iterator pointing to the element to be erased."}, {"sha": "2fea83f847c756738e05f6da506f21b513c6dae5", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -63,6 +63,7 @@\n #define _STL_MULTISET_H 1\n \n #include <bits/concept_check.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n@@ -196,6 +197,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       multiset(multiset&& __x)\n       : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+\n+      /**\n+       *  @brief  Builds a %multiset from an initializer_list.\n+       *  @param  l  An initializer_list.\n+       *  @param  comp  A comparison functor.\n+       *  @param  a  An allocator object.\n+       *\n+       *  Create a %multiset consisting of copies of the elements from\n+       *  the list.  This is linear in N if the list is already sorted,\n+       *  and NlogN otherwise (where N is @a l.size()).\n+       */\n+      multiset(initializer_list<value_type> __l,\n+\t       const _Compare& __comp = _Compare(),\n+\t       const allocator_type& __a = allocator_type())\n+\t: _M_t(__comp, __a)\n+      { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n #endif\n \n       /**\n@@ -228,6 +245,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  %Multiset list assignment operator.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %multiset with copies of the elements in the\n+       *  initializer list @a l.\n+       *\n+       *  Note that the assignment completely changes the %multiset and\n+       *  that the resulting %multiset's size is the same as the number\n+       *  of elements assigned.  Old data may be lost.\n+       */\n+      multiset&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       // accessors:\n@@ -406,6 +442,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         insert(_InputIterator __first, _InputIterator __last)\n         { _M_t._M_insert_equal(__first, __last); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief Attempts to insert a list of elements into the %multiset.\n+       *  @param  list  A std::initializer_list<value_type> of elements\n+       *                to be inserted.\n+       *\n+       *  Complexity similar to that of the range constructor.\n+       */\n+      void\n+      insert(initializer_list<value_type> __l)\n+      { this->insert(__l.begin(), __l.end()); }\n+#endif\n+\n       /**\n        *  @brief Erases an element from a %multiset.\n        *  @param  position  An iterator pointing to the element to be erased."}, {"sha": "98c74e9a27ccb39f0d07b99792fc43a7decd891b", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -63,6 +63,7 @@\n #define _STL_SET_H 1\n \n #include <bits/concept_check.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n@@ -203,6 +204,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       set(set&& __x)\n       : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+\n+      /**\n+       *  @brief  Builds a %set from an initializer_list.\n+       *  @param  l  An initializer_list.\n+       *  @param  comp  A comparison functor.\n+       *  @param  a  An allocator object.\n+       *\n+       *  Create a %set consisting of copies of the elements in the list.\n+       *  This is linear in N if the list is already sorted, and NlogN\n+       *  otherwise (where N is @a l.size()).\n+       */\n+     set(initializer_list<value_type> __l,\n+\t const _Compare& __comp = _Compare(),\n+\t const allocator_type& __a = allocator_type())\n+\t: _M_t(__comp, __a)\n+      { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n #endif\n \n       /**\n@@ -235,6 +252,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  %Set list assignment operator.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %set with copies of the elements in the\n+       *  initializer list @a l.\n+       *\n+       *  Note that the assignment completely changes the %set and\n+       *  that the resulting %set's size is the same as the number\n+       *  of elements assigned.  Old data may be lost.\n+       */\n+      set&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       // accessors:\n@@ -418,6 +454,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         insert(_InputIterator __first, _InputIterator __last)\n         { _M_t._M_insert_unique(__first, __last); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief Attempts to insert a list of elements into the %set.\n+       *  @param  list  A std::initializer_list<value_type> of elements\n+       *                to be inserted.\n+       *\n+       *  Complexity similar to that of the range constructor.\n+       */\n+      void\n+      insert(initializer_list<value_type> __l)\n+      { this->insert(__l.begin(), __l.end()); }\n+#endif\n+\n       /**\n        *  @brief Erases an element from a %set.\n        *  @param  position  An iterator pointing to the element to be erased."}, {"sha": "9ccd9b8ca23aabc53b1199b194deb87f63e090d2", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -65,6 +65,7 @@\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/functexcept.h>\n #include <bits/concept_check.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n@@ -262,6 +263,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       vector(vector&& __x)\n       : _Base(std::forward<_Base>(__x)) { }\n+\n+      /**\n+       *  @brief  Builds a %vector from an initializer list.\n+       *  @param  l  An initializer_list.\n+       *  @param  a  An allocator.\n+       *\n+       *  Create a %vector consisting of copies of the elements in the\n+       *  initializer_list @a l.\n+       *\n+       *  This will call the element type's copy constructor N times\n+       *  (where N is @a l.size()) and do no memory reallocation.\n+       */\n+      vector(initializer_list<value_type> __l,\n+\t     const allocator_type& __a = allocator_type())\n+\t: _Base(__a)\n+        {\n+\t  _M_range_initialize(__l.begin(), __l.end(),\n+\t\t\t      random_access_iterator_tag());\n+\t}\n #endif\n \n       /**\n@@ -327,6 +347,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->swap(__x); \n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  %Vector list assignment operator.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %vector with copies of the elements in the\n+       *  initializer list @a l.\n+       *\n+       *  Note that the assignment completely changes the %vector and\n+       *  that the resulting %vector's size is the same as the number\n+       *  of elements assigned.  Old data may be lost.\n+       */\n+      vector&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->assign(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       /**\n@@ -364,6 +402,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Assigns an initializer list to a %vector.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function fills a %vector with copies of the elements in the\n+       *  initializer list @a l.\n+       *\n+       *  Note that the assignment completely changes the %vector and\n+       *  that the resulting %vector's size is the same as the number\n+       *  of elements assigned.  Old data may be lost.\n+       */\n+      void\n+      assign(initializer_list<value_type> __l)\n+      { this->assign(__l.begin(), __l.end()); }\n+#endif\n+\n       /// Get a copy of the memory allocation object.\n       using _Base::get_allocator;\n \n@@ -766,6 +821,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       iterator\n       insert(iterator __position, value_type&& __x)\n       { return emplace(__position, std::move(__x)); }\n+\n+      /**\n+       *  @brief  Inserts an initializer_list into the %vector.\n+       *  @param  position  An iterator into the %vector.\n+       *  @param  l  An initializer_list.\n+       *\n+       *  This function will insert copies of the data in the \n+       *  initializer_list @a l into the %vector before the location\n+       *  specified by @a position.\n+       *\n+       *  Note that this kind of operation could be expensive for a\n+       *  %vector and if it is frequently used the user should\n+       *  consider using std::list.\n+       */\n+      void\n+      insert(iterator __position, initializer_list<value_type> __l)\n+      { this->insert(__position, __l.begin(), __l.end()); }\n #endif\n \n       /**"}, {"sha": "845e0dcaaf24ca5bba8f82aa63bd85841eaec474", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -94,6 +94,10 @@ namespace __debug\n       deque(deque&& __x)\n       : _Base(std::forward<deque>(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n+\n+      deque(initializer_list<value_type> __l,\n+\t    const allocator_type& __a = allocator_type())\n+      : _Base(__l, __a), _Safe_base() { }\n #endif\n \n       ~deque() { }\n@@ -115,6 +119,14 @@ namespace __debug\n \tswap(__x);\t  \n \treturn *this;\n       }\n+\n+      deque&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\t*static_cast<_Base*>(this) = __l;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n #endif\n \n       template<class _InputIterator>\n@@ -133,6 +145,15 @@ namespace __debug\n \tthis->_M_invalidate_all();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      assign(initializer_list<value_type> __l)\n+      {\n+\t_Base::assign(__l);\n+\tthis->_M_invalidate_all();\n+      }\n+#endif\n+\n       using _Base::get_allocator;\n \n       // iterators:\n@@ -318,6 +339,13 @@ namespace __debug\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n+\n+      void\n+      insert(iterator __p, initializer_list<value_type> __l)\n+      {\n+\t_Base::insert(__p, __l);\n+\tthis->_M_invalidate_all();\n+      }\n #endif\n \n       void"}, {"sha": "312aeebef92d9a671dca55ac9e285f442221904e", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -123,6 +123,10 @@ namespace __debug\n       list(list&& __x)\n       : _Base(std::forward<list>(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n+\n+      list(initializer_list<value_type> __l,\n+           const allocator_type& __a = allocator_type())\n+        : _Base(__l, __a), _Safe_base() { }\n #endif\n \n       ~list() { }\n@@ -144,6 +148,21 @@ namespace __debug\n \tswap(__x);\n \treturn *this;\n       }\n+\n+      list&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tstatic_cast<_Base&>(*this) = __l;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n+\n+      void\n+      assign(initializer_list<value_type> __l)\n+      {\n+\t_Base::assign(__l);\n+\tthis->_M_invalidate_all();\n+      }\n #endif\n \n       template<class _InputIterator>\n@@ -331,6 +350,13 @@ namespace __debug\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n+\n+      void\n+      insert(iterator __p, initializer_list<value_type> __l)\n+      {\n+\t__glibcxx_check_insert(__p);\n+\t_Base::insert(__p, __l);\n+      }\n #endif\n \n       void"}, {"sha": "8232c742a635b44ade6eba7ed87755f9c06e1533", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -98,6 +98,11 @@ namespace __debug\n       map(map&& __x)\n       : _Base(std::forward<map>(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n+\n+      map(initializer_list<value_type> __l,\n+\t  const _Compare& __c = _Compare(),\n+\t  const allocator_type& __a = allocator_type())\n+\t: _Base(__l, __c, __a), _Safe_base() { }\n #endif\n \n       ~map() { }\n@@ -119,6 +124,14 @@ namespace __debug\n \tswap(__x);\n \treturn *this;\n       }\n+\n+      map&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -198,6 +211,12 @@ namespace __debug\n \t\t\t\t\t __res.second);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      insert(std::initializer_list<value_type> __list)\n+      { _Base::insert(__list); }\n+#endif\n+\n       iterator\n       insert(iterator __position, const value_type& __x)\n       {"}, {"sha": "b7c5ee7181c7a006381ea178283c0734515aed73", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -99,6 +99,11 @@ namespace __debug\n       multimap(multimap&& __x)\n       : _Base(std::forward<multimap>(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n+\n+      multimap(initializer_list<value_type> __l,\n+\t       const _Compare& __c = _Compare(),\n+\t       const allocator_type& __a = allocator_type())\n+\t: _Base(__l, __c, __a), _Safe_base() { }\n #endif\n \n       ~multimap() { }\n@@ -120,6 +125,14 @@ namespace __debug\n \tswap(__x);\n \treturn *this;\n       }\n+\n+      multimap&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n #endif\n \n       using _Base::get_allocator;\n@@ -185,6 +198,12 @@ namespace __debug\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x), this); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      insert(std::initializer_list<value_type> __list)\n+      { _Base::insert(__list); }\n+#endif\n+\n       iterator\n       insert(iterator __position, const value_type& __x)\n       {"}, {"sha": "f108531638ef4a2a1eb3619ba6dbed15b9c0d95e", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -96,6 +96,11 @@ namespace __debug\n       multiset(multiset&& __x)\n       : _Base(std::forward<multiset>(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n+\n+      multiset(initializer_list<value_type> __l,\n+\t       const _Compare& __comp = _Compare(),\n+\t       const allocator_type& __a = allocator_type())\n+\t: _Base(__l, __comp, __a), _Safe_base() { }\n #endif\n \n       ~multiset() { }\n@@ -117,6 +122,14 @@ namespace __debug\n \tswap(__x);\n \treturn *this;\n       }\n+\n+      multiset&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n #endif\n \n       using _Base::get_allocator;\n@@ -197,6 +210,12 @@ namespace __debug\n \t_Base::insert(__first, __last);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      insert(initializer_list<value_type> __l)\n+      { _Base::insert(__l); }\n+#endif\n+\n       void\n       erase(iterator __position)\n       {"}, {"sha": "a413b01f872db10a03c6bcea179a31361c7fa86e", "filename": "libstdc++-v3/include/debug/safe_association.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_association.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_association.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_association.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -105,6 +105,14 @@ namespace __gnu_debug\n \t\t__l, __n, __hf, __eql, __a) \n         { }\n \n+      _Safe_association(std::initializer_list<value_type> __l,\n+\t\t\tsize_type __n,\n+\t\t\tconst hasher& __hf,\n+\t\t\tconst key_equal& __eql,\n+\t\t\tconst allocator_type& __a = allocator_type())\n+\t: _Base(__l, __n, __hf, __eql, __a)\n+      { }\n+\n       _Safe_association(const _Base& __x) : _Base(__x) { }\n \n       _Safe_association(_Safe_association&& __x)\n@@ -152,6 +160,10 @@ namespace __gnu_debug\n \t  _Base::insert(__first.base(), __last.base());\n \t}\n \n+      void\n+      insert(std::initializer_list<value_type> __l)\n+      { _Base::insert(__l); }\n+\n       const_iterator\n       find(const key_type& __key) const\n       { return const_iterator(_Base::find(__key), this); }"}, {"sha": "00711cd321d0c93e12fd0f102954d68c292788af", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -96,6 +96,11 @@ namespace __debug\n       set(set&& __x)\n       : _Base(std::forward<set>(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n+\n+      set(initializer_list<value_type> __l,\n+\t  const _Compare& __comp = _Compare(),\n+\t  const allocator_type& __a = allocator_type())\n+\t: _Base(__l, __comp, __a), _Safe_base() { }\n #endif\n \n       ~set() { }\n@@ -117,6 +122,14 @@ namespace __debug\n \tswap(__x);\n \treturn *this;\n       }\n+\n+      set&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n #endif\n \n       using _Base::get_allocator;\n@@ -202,6 +215,12 @@ namespace __debug\n \t  _Base::insert(__first, __last);\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      insert(initializer_list<value_type> __l)\n+      { _Base::insert(__l); }\n+#endif\n+\n       void\n       erase(iterator __position)\n       {"}, {"sha": "68882fed581f1679543cb98a4eade46aea8c25e7", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -115,6 +115,12 @@ namespace __gnu_debug\n       : _Base(__gnu_debug::__check_valid_range(__begin, __end), __end, __a)\n       { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n+      : _Base(__l, __a)\n+      { }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     ~basic_string() { }\n \n     basic_string&\n@@ -142,6 +148,16 @@ namespace __gnu_debug\n       return *this;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    basic_string&\n+    operator=(initializer_list<_CharT> __l)\n+    {\n+      *static_cast<_Base*>(this) = __l;\n+      this->_M_invalidate_all();\n+      return *this;\n+    }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     // 21.3.2 iterators:\n     iterator\n     begin()\n@@ -259,6 +275,16 @@ namespace __gnu_debug\n       return *this;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    basic_string&\n+    operator+=(initializer_list<_CharT> __l)\n+    {\n+      _M_base() += __l;\n+      this->_M_invalidate_all();\n+      return *this;\n+    }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     basic_string&\n     append(const basic_string& __str)\n     {\n@@ -372,6 +398,16 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    basic_string&\n+    assign(initializer_list<_CharT> __l)\n+    {\n+      _Base::assign(__l);\n+      this->_M_invalidate_all();\n+      return *this;\n+    }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     basic_string&\n     insert(size_type __pos1, const basic_string& __str)\n     {\n@@ -441,6 +477,15 @@ namespace __gnu_debug\n \tthis->_M_invalidate_all();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    void\n+    insert(iterator __p, initializer_list<_CharT> __l)\n+    {\n+      _Base::insert(__p, __l);\n+      this->_M_invalidate_all();\n+    }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     basic_string&\n     erase(size_type __pos = 0, size_type __n = _Base::npos)\n     {\n@@ -564,6 +609,17 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      basic_string& replace(iterator __i1, iterator __i2,\n+\t\t\t    initializer_list<_CharT> __l)\n+      {\n+\t__glibcxx_check_erase_range(__i1, __i2);\n+\t_Base::replace(__i1.base(), __i2.base(), __l);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     size_type\n     copy(_CharT* __s, size_type __n, size_type __pos = 0) const\n     {"}, {"sha": "79590f56755e0bd49d6d03a5d9fba9ef6589a8d4", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -40,6 +40,7 @@\n #else\n # include <c++0x_warning.h>\n #endif\n+#include <initializer_list>\n #include <debug/safe_association.h>\n #include <debug/safe_iterator.h>\n \n@@ -64,6 +65,7 @@ namespace __debug\n \n     public:\n       typedef typename _Safe_assoc::size_type       size_type;\n+      typedef typename _Safe_assoc::value_type      value_type;\n       typedef typename _Safe_assoc::hasher          hasher;\n       typedef typename _Safe_assoc::key_equal       key_equal;\n       typedef typename _Safe_assoc::allocator_type allocator_type;\n@@ -91,6 +93,13 @@ namespace __debug\n       unordered_map(unordered_map&& __x) \n       : _Safe_assoc(std::forward<_Safe_assoc>(__x)), _Safe_base() { }\n \n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n = 10,\n+\t\t    const hasher& __hf = hasher(),\n+\t\t    const key_equal& __eql = key_equal(),\n+\t\t    const allocator_type& __a = allocator_type())\n+\t: _Safe_assoc(__l, __n, __hf, __eql, __a) { }\n+\n       unordered_map&\n       operator=(unordered_map&& __x)\n       {\n@@ -100,6 +109,14 @@ namespace __debug\n \treturn *this;\n       }\n \n+      unordered_map&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n+\n       void\n       swap(unordered_map&& __x)\n       {\n@@ -164,6 +181,7 @@ namespace __debug\n \n     public:\n       typedef typename _Safe_assoc::size_type       size_type;\n+      typedef typename _Safe_assoc::value_type      value_type;\n       typedef typename _Safe_assoc::hasher          hasher;\n       typedef typename _Safe_assoc::key_equal       key_equal;\n       typedef typename _Safe_assoc::allocator_type allocator_type;\n@@ -185,6 +203,13 @@ namespace __debug\n \t: _Safe_assoc(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n = 10,\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n+\t: _Safe_assoc(__l, __n, __hf, __eql, __a) { }\n+\n       unordered_multimap(const _Safe_assoc& __x) \n       : _Safe_assoc(__x), _Safe_base() { }\n \n@@ -200,6 +225,14 @@ namespace __debug\n \treturn *this;\n       }\n \n+      unordered_multimap&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n+\n       void\n       swap(unordered_multimap&& __x)\n       {"}, {"sha": "4c5d4d5ce342960ae67f0fa372ca49baac01dbb2", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -41,6 +41,7 @@\n # include <c++0x_warning.h>\n #endif\n \n+#include <initializer_list>\n #include <debug/safe_association.h>\n #include <debug/safe_iterator.h>\n \n@@ -65,6 +66,7 @@ namespace __debug\n \n     public:\n       typedef typename _Safe_assoc::size_type       size_type;\n+      typedef typename _Safe_assoc::value_type      value_type;\n       typedef typename _Safe_assoc::hasher          hasher;\n       typedef typename _Safe_assoc::key_equal       key_equal;\n       typedef typename _Safe_assoc::allocator_type allocator_type;\n@@ -86,6 +88,13 @@ namespace __debug\n \t: _Safe_assoc(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n = 10,\n+\t\t    const hasher& __hf = hasher(),\n+\t\t    const key_equal& __eql = key_equal(),\n+\t\t    const allocator_type& __a = allocator_type())\n+\t: _Safe_assoc(__l, __n, __hf, __eql, __a) { }\n+\n       unordered_set(const _Safe_assoc& __x) \n       : _Safe_assoc(__x), _Safe_base() { }\n \n@@ -101,6 +110,14 @@ namespace __debug\n \treturn *this;\n       }\n \n+      unordered_set&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n+\n       void\n       swap(unordered_set&& __x)\n       {\n@@ -162,6 +179,7 @@ namespace __debug\n \n     public:\n       typedef typename _Safe_assoc::size_type       size_type;\n+      typedef typename _Safe_assoc::value_type      value_type;\n       typedef typename _Safe_assoc::hasher          hasher;\n       typedef typename _Safe_assoc::key_equal       key_equal;\n       typedef typename _Safe_assoc::allocator_type allocator_type;\n@@ -183,6 +201,13 @@ namespace __debug\n \t: _Safe_assoc(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n = 10,\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n+\t: _Safe_assoc(__l, __n, __hf, __eql, __a) { }\n+\n       unordered_multiset(const _Safe_assoc& __x) \n       : _Safe_assoc(__x), _Safe_base() { }\n \n@@ -198,6 +223,14 @@ namespace __debug\n \treturn *this;\n       }\n \n+      unordered_multiset&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l);\n+\treturn *this;\n+      }\n+\n       void\n       swap(unordered_multiset&& __x)\n       {"}, {"sha": "a00419200d0043fb09227ca74df702e51328bd92", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -106,6 +106,11 @@ namespace __debug\n \tthis->_M_swap(__x);\n \t__x._M_guaranteed_capacity = 0;\n       }\n+\n+      vector(initializer_list<value_type> __l,\n+\t     const allocator_type& __a = allocator_type())\n+\t: _Base(__l, __a), _Safe_base(),\n+\t  _M_guaranteed_capacity(__l.size()) { }\n #endif\n \n       ~vector() { }\n@@ -128,6 +133,15 @@ namespace __debug\n \tswap(__x);\n \treturn *this;\n       }\n+\n+      vector&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tstatic_cast<_Base&>(*this) = __l;\n+\tthis->_M_invalidate_all();\n+\t_M_update_guaranteed_capacity();\n+\treturn *this;\n+      }\n #endif\n \n       template<typename _InputIterator>\n@@ -148,6 +162,16 @@ namespace __debug\n \t_M_update_guaranteed_capacity();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      assign(initializer_list<value_type> __l)\n+      {\n+\t_Base::assign(__l);\n+\tthis->_M_invalidate_all();\n+\t_M_update_guaranteed_capacity();\n+      }\n+#endif\n+\n       using _Base::get_allocator;\n \n       // iterators:\n@@ -367,6 +391,10 @@ namespace __debug\n \t\t\t\t\titerator>::__type\n         insert(iterator __position, _Tp&& __x)\n         { return emplace(__position, std::move(__x)); }\n+\n+      void\n+      insert(iterator __position, initializer_list<value_type> __l)\n+      { this->insert(__position, __l.begin(), __l.end()); }\n #endif\n \n       void"}, {"sha": "82c614c431adec5717fde714dfeefe7747bd1b9d", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -308,7 +308,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       __rc_string_base(__rc_string_base&& __rcs)\n       : _M_dataplus(__rcs._M_get_allocator(), __rcs._M_data())\n-      { __rcs._M_data(_S_empty_rep._M_refcopy()); }      \n+      { __rcs._M_data(_S_empty_rep._M_refcopy()); }\n+\n+      __rc_string_base(std::initializer_list<_CharT> __l, const _Alloc& __a)\n+      : _M_dataplus(__a, _S_construct(__l.begin(), __l.end(), __a)) { }\n #endif\n \n       __rc_string_base(size_type __n, _CharT __c, const _Alloc& __a);"}, {"sha": "33358189478d926da5a260038d8d314e1e69b78f", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -184,6 +184,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       __sso_string_base(__sso_string_base&& __rcs);\n+\n+      __sso_string_base(std::initializer_list<_CharT> __l, const _Alloc& __a)\n+      : _M_dataplus(__a, _M_local_data)\n+      { _M_construct(__l.begin(), __l.end()); }\n #endif\n \n       __sso_string_base(size_type __n, _CharT __c, const _Alloc& __a);"}, {"sha": "6002b197d7404b8c9325b98b126dc41dc9742049", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -36,6 +36,7 @@\n \n #pragma GCC system_header\n \n+#include <initializer_list>\n #include <ext/vstring_util.h>\n #include <ext/rc_string_base.h>\n #include <ext/sso_string_base.h>\n@@ -156,6 +157,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n        */\n       __versa_string(__versa_string&& __str)\n       : __vstring_base(std::forward<__vstring_base>(__str)) { }\n+\n+      /**\n+       *  @brief  Construct string from an initializer list.\n+       *  @param  l  std::initializer_list of characters.\n+       *  @param  a  Allocator to use (default is default allocator).\n+       */\n+      __versa_string(std::initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n+\t: __vstring_base(__l, __a) { }\n #endif\n \n       /**\n@@ -257,6 +266,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  this->swap(__str);\n \treturn *this;\n       }\n+\n+      /**\n+       *  @brief  Set value to string constructed from initializer list.\n+       *  @param  l  std::initializer_list.\n+       */\n+      __versa_string&\n+      operator=(std::initializer_list<_CharT> __l)\n+      {\n+\tthis->assign (__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n \n       /**\n@@ -623,6 +643,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Append an initializer_list of characters.\n+       *  @param l  The initializer_list of characters to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      operator+=(std::initializer_list<_CharT> __l)\n+      { return this->append(__l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Append a string to this string.\n        *  @param str  The string to append.\n@@ -690,6 +721,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       append(size_type __n, _CharT __c)\n       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Append an initializer_list of characters.\n+       *  @param l  The initializer_list of characters to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      append(std::initializer_list<_CharT> __l)\n+      { return this->append(__l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Append a range of characters.\n        *  @param first  Iterator referencing the first character to append.\n@@ -807,6 +849,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         assign(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Set value to an initializer_list of characters.\n+       *  @param l  The initializer_list of characters to assign.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      assign(std::initializer_list<_CharT> __l)\n+      { return this->assign(__l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Insert multiple characters.\n        *  @param p  Iterator referencing location in string to insert at.\n@@ -839,6 +892,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Insert an initializer_list of characters.\n+       *  @param p  Iterator referencing location in string to insert at.\n+       *  @param l  The initializer_list of characters to insert.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       */\n+      void\n+      insert(iterator __p, std::initializer_list<_CharT> __l)\n+      { this->insert(__p, __l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n       /**\n        *  @brief  Insert value of a string.\n        *  @param pos1  Iterator referencing location in string to insert at.\n@@ -1295,6 +1360,25 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t     __k1.base(), __k2 - __k1);\n       }\n       \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Replace range of characters with initializer_list.\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param l  The initializer_list of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, characters\n+       *  in the range [k1,k2) are inserted.  If the length of result exceeds\n+       *  max_size(), length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      __versa_string& replace(iterator __i1, iterator __i2,\n+\t\t\t      std::initializer_list<_CharT> __l)\n+      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     private:\n       template<class _Integer>\n \t__versa_string&"}, {"sha": "2b7d328f3873d3d180267735ffcd3b01d2577da7", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -46,6 +46,7 @@\n \n #include <utility>\n #include <type_traits>\n+#include <initializer_list>\n #include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st"}, {"sha": "1cabae987cc15bcafc290b2443f6126fdd444a3a", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -46,6 +46,7 @@\n \n #include <utility>\n #include <type_traits>\n+#include <initializer_list>\n #include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st"}, {"sha": "b0fa512480518bdcb4ddded4d255ac90cdda5fd0", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -45,6 +45,7 @@\n #include <cmath>\n #include <algorithm>\n #include <debug/debug.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -144,6 +145,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ///  Construct an array with the same size and values in @a ia.\n       valarray(const indirect_array<_Tp>&);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      ///  Construct an array with an initializer_list of values.\n+      valarray(initializer_list<_Tp>);\n+#endif\n+\n       template<class _Dom>\n \tvalarray(const _Expr<_Dom, _Tp>& __e);\n \n@@ -209,6 +215,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       valarray<_Tp>& operator=(const indirect_array<_Tp>&);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Assign elements to an initializer_list.\n+       *\n+       *  Assign elements of array to values in @a l.  Results are undefined\n+       *  if @a l does not have the same size as this array.\n+       *\n+       *  @param  l  initializer_list to get values from.\n+       */\n+      valarray& operator=(initializer_list<_Tp>);\n+#endif\n+\n       template<class _Dom> valarray<_Tp>&\n \toperator= (const _Expr<_Dom, _Tp>&);\n \n@@ -615,6 +633,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t(__ia._M_array, __ia._M_index, _Array<_Tp>(_M_data), _M_size);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    inline\n+    valarray<_Tp>::valarray(initializer_list<_Tp> __l)\n+      : _M_size(__l.size()), _M_data(__valarray_get_storage<_Tp>(__l.size()))\n+    { std::__valarray_copy_construct (__l.begin(), __l.end(), _M_data); }\n+#endif\n+\n   template<typename _Tp> template<class _Dom>\n     inline\n     valarray<_Tp>::valarray(const _Expr<_Dom, _Tp>& __e)\n@@ -638,6 +664,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return *this;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    inline valarray<_Tp>&\n+    valarray<_Tp>::operator=(initializer_list<_Tp> __l)\n+    {\n+      _GLIBCXX_DEBUG_ASSERT(_M_size == __l.size());\n+      std::__valarray_copy(__l.begin(), __l.size(), _M_data);\n+    }\n+#endif\n+\n   template<typename _Tp>\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(const _Tp& __t)"}, {"sha": "33857a43ab35fe0162c5b9effb3e97736482ae63", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -434,6 +434,12 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n         void\n         insert(_InputIterator __first, _InputIterator __last);\n \n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      void\n+      insert(initializer_list<value_type> __l)\n+      { this->insert(__l.begin(), __l.end()); }\n+#endif\n+\n       iterator\n       erase(iterator);\n "}, {"sha": "d5e80b1b06517f24148782d8884d2f5a0f07241e", "filename": "libstdc++-v3/include/tr1_impl/regex", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -730,6 +730,13 @@ namespace regex_constants\n \t: _M_flags(__f), _M_pattern(__first, __last), _M_mark_count(0)\n         { _M_compile(); }\n \n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      basic_regex(initializer_list<_Ch_type> __l,\n+\t\t  flag_type __f = regex_constants::ECMAScript)\n+\t: _M_flags(__f), _M_pattern(__l.begin(), __l.end()), _M_mark_count(0)\n+        { _M_compile(); }\n+#endif\n+\n       /**\n        * @brief Destroys a basic regular expression.\n        */\n@@ -854,6 +861,13 @@ namespace regex_constants\n \t       flag_type __flags = regex_constants::ECMAScript)\n         { return this->assign(string_type(__first, __last), __flags); }\n \n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      basic_regex&\n+      assign(initializer_list<_Ch_type> __l,\n+\t     flag_type __f = regex_constants::ECMAScript)\n+      { return this->assign(__l.begin(), __l.end(), __f); }\n+#endif\n+\n       // [7.8.4] const operations\n       /**\n        * @brief Gets the number of marked subexpressions within the regular"}, {"sha": "4f914495ddb7aa5d6588bf7237be3c161332b366", "filename": "libstdc++-v3/include/tr1_impl/unordered_map", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -179,6 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       typedef __unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>  _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -205,6 +206,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       unordered_map(unordered_map&& __x)\n       : _Base(std::forward<_Base>(__x)) { }\n \n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n = 10,\n+\t\t    const hasher& __hf = hasher(),\n+\t\t    const key_equal& __eql = key_equal(),\n+\t\t    const allocator_type& __a = allocator_type())\n+\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      { }\n+\n       unordered_map&\n       operator=(unordered_map&& __x)\n       {\n@@ -213,6 +222,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \tthis->swap(__x); \n \treturn *this;\t\n       }\n+\n+      unordered_map&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n     };\n   \n@@ -227,6 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       typedef __unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>  _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -254,6 +272,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       unordered_multimap(unordered_multimap&& __x)\n       : _Base(std::forward<_Base>(__x)) { }\n \n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n = 10,\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n+\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      { }\n+\n       unordered_multimap&\n       operator=(unordered_multimap&& __x)\n       {\n@@ -262,6 +288,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \tthis->swap(__x); \n \treturn *this;\t\n       }\n+\n+      unordered_multimap&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n     };\n "}, {"sha": "5640ebe1f77ec9e4f59858c072fc2a3e13173588", "filename": "libstdc++-v3/include/tr1_impl/unordered_set", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -175,6 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       typedef __unordered_set<_Value, _Hash, _Pred, _Alloc>  _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -201,6 +202,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       unordered_set(unordered_set&& __x)\n       : _Base(std::forward<_Base>(__x)) { }\n \n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n = 10,\n+\t\t    const hasher& __hf = hasher(),\n+\t\t    const key_equal& __eql = key_equal(),\n+\t\t    const allocator_type& __a = allocator_type())\n+\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      { }\n+\n       unordered_set&\n       operator=(unordered_set&& __x)\n       {\n@@ -209,6 +218,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \tthis->swap(__x); \n \treturn *this;\t\n       }\n+\n+      unordered_set&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n     };\n \n@@ -223,6 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       typedef __unordered_multiset<_Value, _Hash, _Pred, _Alloc>  _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -250,6 +268,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       unordered_multiset(unordered_multiset&& __x)\n       : _Base(std::forward<_Base>(__x)) { }\n \n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n = 10,\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n+\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      { }\n+\n       unordered_multiset&\n       operator=(unordered_multiset&& __x)\n       {\n@@ -258,6 +284,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \tthis->swap(__x); \n \treturn *this;\t\n       }\n+\n+      unordered_multiset&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n #endif\n     };\n "}, {"sha": "6ea357f2ce90faeef9e6a2c5d15e6c84a62e0892", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -273,6 +273,16 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n+string-inst.lo: string-inst.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+string-inst.o: string-inst.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+wstring-inst.lo: wstring-inst.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+wstring-inst.o: wstring-inst.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n chrono.lo: chrono.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n chrono.o: chrono.cc"}, {"sha": "b674061d3a89db2f89c4c8851472fc2a33201ff9", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -867,6 +867,16 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n+string-inst.lo: string-inst.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+string-inst.o: string-inst.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+wstring-inst.lo: wstring-inst.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+wstring-inst.o: wstring-inst.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n chrono.lo: chrono.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n chrono.o: chrono.cc"}, {"sha": "71e03f1d6269284371e94b5f64ea3744da398273", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/init-list.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01(void)\n+{\n+  bool test = true;\n+\n+  string s1 = { 'a', 'b', 'c' };\n+  VERIFY(s1 == \"abc\");\n+\n+  s1 = { 'd', 'e', 'f' };\n+  VERIFY(s1 == \"def\");\n+\n+  s1 += { 'g', 'h', 'i' };\n+  VERIFY(s1 == \"defghi\");\n+\n+  s1.append({ 'j', 'k', 'l' });\n+  VERIFY(s1 == \"defghijkl\");\n+\n+  s1.assign({ 'm', 'n', 'o' });\n+  VERIFY(s1 == \"mno\");\n+\n+  // There aren't actually overloads of insert and replace taking size_type\n+  // and initializer_list, but test the usage anyway.\n+  s1.insert(2, { 'p', 'q', 'r' });\n+  VERIFY(s1 == \"mnpqro\");\n+\n+  s1.replace(2, 3, { 's', 't', 'u' });\n+  VERIFY(s1 == \"mnstuo\");\n+\n+  string::iterator i1, i2;\n+\n+  i1 = s1.begin()+2;\n+  s1.insert(i1, { 'v', 'w', 'x' });\n+  VERIFY(s1 == \"mnvwxstuo\");\n+\n+  i1 = s1.begin()+2;\n+  i2 = i1+6;\n+  s1.replace(i1, i2, { 'y', 'z' });\n+  VERIFY(s1 == \"mnyzo\");\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+  return 0;\n+}"}, {"sha": "715ff9487323329be47bfd05a9595bd2fb661792", "filename": "libstdc++-v3/testsuite/23_containers/deque/init-list.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <deque>\n+#include <testsuite_allocator.h>\n+\n+using namespace __gnu_test;\n+\n+int main()\n+{\n+  typedef std::deque<int, tracker_allocator<int> > Container;\n+  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n+  bool ok = true;\n+\n+  tracker_allocator_counter::reset();\n+  {\n+    Container c({ 2, 4, 1 });\n+    ok = check_construct_destroy(\"Construct from init-list\", 3, 0) && ok;\n+    ok &= (c[0] == 2);\n+    ok &= (c[1] == 4);\n+  }\n+  ok = check_construct_destroy(\"Construct from init-list\", 3, 3) && ok;\n+\n+  {\n+    Container c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    c.insert(c.begin() + 7, { 234, 42, 1 });\n+    ok = check_construct_destroy(\"Insert init-list\", 3, 0) && ok;\n+    ok &= (c[7] == 234);\n+  }\n+  ok = check_construct_destroy(\"Insert init-list\", 3, 13) && ok;\n+\n+  {\n+    Container c;\n+    tracker_allocator_counter::reset();\n+    c = { 13, 0, 42 };\n+    ok = check_construct_destroy(\"Assign init-list\", 3, 0) && ok;\n+    ok &= (c[0] == 13);\n+  }\n+  ok = check_construct_destroy(\"Assign init-list\", 3, 3) && ok;\n+\n+  return ok ? 0 : 1;;\n+}"}, {"sha": "242fc98a030f1ccda0bca26b0931e1edc6a9b7e7", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1436 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1504 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "2664aac468d189b43e91e9046f2685c69cce3f98", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1375 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1443 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "66b76b79a4985ebd1d0d0fdb4a2121a7df3b5812", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1375 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1443 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "cff5332deb57d64301c8cf8755e6d7f19e25a509", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1520 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1588 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "0dd5ac919cd1f54c5401b10daf9b771a4e5b84ac", "filename": "libstdc++-v3/testsuite/23_containers/list/init-list.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <list>\n+#include <testsuite_allocator.h>\n+\n+using namespace __gnu_test;\n+\n+int main()\n+{\n+  typedef std::list<int, tracker_allocator<int> > Container;\n+  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n+  bool ok = true;\n+\n+  tracker_allocator_counter::reset();\n+  {\n+    Container c({ 2, 4, 1 });\n+    ok = check_construct_destroy(\"Construct from init-list\", 3, 0) && ok;\n+    Container::iterator i = c.begin();\n+    ok &= (*i++ == 2);\n+    ok &= (*i++ == 4);\n+  }\n+  ok = check_construct_destroy(\"Construct from init-list\", 3, 3) && ok;\n+\n+  {\n+    Container c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    Container::iterator i = c.begin();\n+    ++i; ++i; ++i; ++i; ++i; ++i; ++i;\n+    c.insert(i, { 234, 42, 1 });\n+    ok = check_construct_destroy(\"Insert init-list\", 3, 0) && ok;\n+    ok &= (*--i == 1);\n+    ok &= (*--i == 42);\n+  }\n+  ok = check_construct_destroy(\"Insert init-list\", 3, 13) && ok;\n+\n+  {\n+    Container c;\n+    tracker_allocator_counter::reset();\n+    c = { 13, 0, 42 };\n+    ok = check_construct_destroy(\"Assign init-list\", 3, 0) && ok;\n+    Container::iterator i = c.begin();\n+    ok &= (*i++ == 13);\n+  }\n+  ok = check_construct_destroy(\"Assign init-list\", 3, 3) && ok;\n+\n+  return ok ? 0 : 1;;\n+}"}, {"sha": "23c541a8d2971a637643efa7168b46d63feb880e", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1325 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1383 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "479c416590f055c482ab5ae2a3ee9dd1208b24c9", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1294 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1352 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "3fd79856a5e58157d0b999f2783727bab6abbcb0", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1294 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1352 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "9b5e13a6e25fb491e9b4048d0487a8f35be8ce05", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1294 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1352 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "637303e1ac90745a190324b58badd3a912911790", "filename": "libstdc++-v3/testsuite/23_containers/map/init-list.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  map<int,double> m({ { 1, 1.0 }, { 2, 2.0 }, { 42, 237.0 } });\n+  VERIFY(m.size() == 3);\n+  VERIFY(m[1] == 1.0);\n+  VERIFY(m[2] == 2.0);\n+  VERIFY(m[42] == 237.0);\n+\n+  m = { {5, 55.0}, { 6, 66.0 } };\n+  VERIFY(m.size() == 2);\n+  VERIFY(m[5] == 55.0);\n+  VERIFY(m[6] == 66.0);\n+\n+  m.insert({ { 7, 77.0 }, { 8, 88.0 } });\n+  VERIFY(m.size() == 4);\n+  VERIFY(m[5] == 55.0);\n+  VERIFY(m[6] == 66.0);\n+  VERIFY(m[7] == 77.0);\n+  VERIFY(m[8] == 88.0);\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "6043cc1790599397c4c45595202f91752fcc9e1a", "filename": "libstdc++-v3/testsuite/23_containers/multimap/init-list.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef multimap<int,double> Container;\n+  typedef Container::iterator iterator;\n+  typedef pair<iterator,iterator> itpair;\n+  Container m({ { 1, 1.0 }, { 1, 2.0 }, { 1, 237.0 } });\n+  VERIFY(m.size() == 3);\n+  itpair ip = m.equal_range(1);\n+  VERIFY(distance(ip.first, ip.second) == 3);\n+  iterator i = ip.first;\n+  VERIFY((*i++).second == 1.0);\n+  VERIFY((*i++).second == 2.0);\n+  VERIFY((*i++).second == 237.0);\n+\n+  m = { {5, 55.0}, { 5, 66.0 }, { 42, 4242.0 } };\n+  VERIFY(m.size() == 3);\n+  ip = m.equal_range(5);\n+  VERIFY(distance(ip.first, ip.second) == 2);\n+  i = ip.first;\n+  VERIFY((*i++).second == 55.0);\n+  VERIFY((*i++).second == 66.0);\n+\n+  m.insert({ { 7, 77.0 }, { 7, 88.0 } });\n+  VERIFY(m.size() == 5);\n+  VERIFY(m.count(5) == 2);\n+  VERIFY(m.count(42) == 1);\n+  VERIFY(m.count(7) == 2);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "9b34f227286a933be60b13e312f9a30a684d4f9b", "filename": "libstdc++-v3/testsuite/23_containers/multiset/init-list.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  multiset<int> m({ 1, 5, 5, 37 });\n+  VERIFY(m.size() == 4);\n+  VERIFY(m.count(1) == 1);\n+  VERIFY(m.count(5) == 2);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(42) == 0);\n+\n+  m = { 28, 37, 37, 37, 102 };\n+  VERIFY(m.size() == 5);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 3);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(1) == 0);\n+\n+  m.insert({ 42, 42 });\n+  VERIFY(m.size() == 7);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 3);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(42) == 2);\n+  VERIFY(m.count(1) == 0);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "256ecb38aba24cd5afce8e97ae08846a15b2d492", "filename": "libstdc++-v3/testsuite/23_containers/set/init-list.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  set<int> m({ 1, 5, 37 });\n+  VERIFY(m.size() == 3);\n+  VERIFY(m.count(1) == 1);\n+  VERIFY(m.count(5) == 1);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(42) == 0);\n+\n+  m = { 28, 37, 102 };\n+  VERIFY(m.size() == 3);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(1) == 0);\n+\n+  m.insert({ 42 });\n+  VERIFY(m.size() == 4);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(42) == 1);\n+  VERIFY(m.count(1) == 0);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "983bf2da3b7df033336c950824645189d94c974e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/init-list.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  unordered_map<int,double> m({ { 1, 1.0 }, { 2, 2.0 }, { 42, 237.0 } });\n+  VERIFY(m.size() == 3);\n+  VERIFY(m[1] == 1.0);\n+  VERIFY(m[2] == 2.0);\n+  VERIFY(m[42] == 237.0);\n+\n+  m = { {5, 55.0}, { 6, 66.0 } };\n+  VERIFY(m.size() == 2);\n+  VERIFY(m[5] == 55.0);\n+  VERIFY(m[6] == 66.0);\n+\n+  m.insert({ { 7, 77.0 }, { 8, 88.0 } });\n+  VERIFY(m.size() == 4);\n+  VERIFY(m[5] == 55.0);\n+  VERIFY(m[6] == 66.0);\n+  VERIFY(m[7] == 77.0);\n+  VERIFY(m[8] == 88.0);\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "ba35b38d85b562a3d1e00e6d7e9741d995275a1a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/init-list.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+// XFAIL this test until debug mode container is fixed.\n+// { dg-excess-errors \"\" }\n+\n+#include <set>\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef unordered_multimap<int,double> Container;\n+  typedef Container::const_iterator iterator;\n+  typedef pair<iterator,iterator> itpair;\n+\n+  Container m({ { 1, 1.0 }, { 1, 2.0 }, { 1, 237.0 } });\n+  VERIFY(m.size() == 3);\n+  itpair ip = m.equal_range(1);\n+  VERIFY(distance(ip.first, ip.second) == 3);\n+  set<double> s = { 1.0, 2.0, 237.0 };\n+  for (iterator i = ip.first; i != ip.second; ++i)\n+    s.erase (i->second);\n+  VERIFY(s.empty());\n+\n+  m = { {5, 55.0}, { 5, 66.0 }, { 42, 4242.0 } };\n+  VERIFY(m.size() == 3);\n+  ip = m.equal_range(5);\n+  VERIFY(distance(ip.first, ip.second) == 2);\n+  s = { 55.0, 66.0 };\n+  for (iterator i = ip.first; i != ip.second; ++i)\n+    s.erase (i->second);\n+  VERIFY(s.empty());\n+\n+  m.insert({ { 7, 77.0 }, { 7, 88.0 } });\n+  VERIFY(m.size() == 5);\n+  VERIFY(m.count(5) == 2);\n+  VERIFY(m.count(42) == 1);\n+  VERIFY(m.count(7) == 2);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "22d9a49b59f8b90ff8092cd888b4d4e25b339519", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/init-list.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  unordered_multiset<int> m({ 1, 5, 5, 37 });\n+  VERIFY(m.size() == 4);\n+  VERIFY(m.count(1) == 1);\n+  VERIFY(m.count(5) == 2);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(42) == 0);\n+\n+  m = { 28, 37, 37, 37, 102 };\n+  VERIFY(m.size() == 5);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 3);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(1) == 0);\n+\n+  m.insert({ 42, 42 });\n+  VERIFY(m.size() == 7);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 3);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(42) == 2);\n+  VERIFY(m.count(1) == 0);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "8a4b05deebd44626d222b64697ada4181d528b97", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/init-list.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  unordered_set<int> m({ 1, 5, 37 });\n+  VERIFY(m.size() == 3);\n+  VERIFY(m.count(1) == 1);\n+  VERIFY(m.count(5) == 1);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(42) == 0);\n+\n+  m = { 28, 37, 102 };\n+  VERIFY(m.size() == 3);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(1) == 0);\n+\n+  m.insert({ 42 });\n+  VERIFY(m.size() == 4);\n+  VERIFY(m.count(28) == 1);\n+  VERIFY(m.count(37) == 1);\n+  VERIFY(m.count(102) == 1);\n+  VERIFY(m.count(42) == 1);\n+  VERIFY(m.count(1) == 0);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "9a3b52c27dad6ca2e62093dc78b5d2b394798d7c", "filename": "libstdc++-v3/testsuite/23_containers/vector/init-list.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <vector>\n+#include <testsuite_allocator.h>\n+\n+using namespace __gnu_test;\n+\n+int main()\n+{\n+  typedef std::vector<int, tracker_allocator<int> > Container;\n+  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n+  bool ok = true;\n+\n+  tracker_allocator_counter::reset();\n+  {\n+    Container c({ 2, 4, 1 });\n+    ok = check_construct_destroy(\"Construct from init-list\", 3, 0) && ok;\n+    ok &= (c[0] == 2);\n+    ok &= (c[1] == 4);\n+  }\n+  ok = check_construct_destroy(\"Construct from init-list\", 3, 3) && ok;\n+\n+  {\n+    Container c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    c.insert(c.begin() + 7, { 234, 42, 1 });\n+    ok = check_construct_destroy(\"Insert init-list\", 13, 10) && ok;\n+    ok &= (c[7] == 234);\n+  }\n+  ok = check_construct_destroy(\"Insert init-list\", 13, 23) && ok;\n+\n+  {\n+    Container c;\n+    tracker_allocator_counter::reset();\n+    c = { 13, 0, 42 };\n+    ok = check_construct_destroy(\"Assign init-list\", 3, 0) && ok;\n+    ok &= (c[0] == 13);\n+  }\n+  ok = check_construct_destroy(\"Assign init-list\", 3, 3) && ok;\n+\n+  return ok ? 0 : 1;;\n+}"}, {"sha": "c5e445fa6db4bacdb60bca21051ea1913a92ad91", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 986 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1058 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "dd115afd520fd0bdf50d1e1213ca73c57b900c3c", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 926 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 998 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "50e51cb8f3f4391256814dbf5a8dbce0f6d07926", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 926 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 998 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "31642d75c5dc42d04d1e135d032ca7c1f14576bf", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1027 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1099 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "3f4ed5bab3a956545a63128cf38532ca2f2f7da5", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/init-list.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  valarray<int> m({ 1, 5, 37 });\n+  VERIFY(m.size() == 3);\n+  VERIFY(m[0] == 1);\n+  VERIFY(m[1] == 5);\n+  VERIFY(m[2] == 37);\n+\n+  m = { 28, 37, 102 };\n+  VERIFY(m.size() == 3);\n+  VERIFY(m[0] == 28);\n+  VERIFY(m[1] == 37);\n+  VERIFY(m[2] == 102);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+}"}, {"sha": "6852507ee0e577d90effec8d332f7ea0d112f888", "filename": "libstdc++-v3/testsuite/28_regex/init-list.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+int test01(void)\n+{\n+  bool test = true;\n+\n+  regex r = { 'a', 'b', 'c' };\n+  cmatch res;\n+  // Enable when regex class actually implemented.\n+  // VERIFY(regex_match (\"abc\", res, r));\n+  VERIFY(!regex_match (\"ab\", res, r));\n+\n+  r = { 'd', 'e', 'f' };\n+  // Enable when regex class actually implemented.\n+  // VERIFY(regex_match (\"def\", res, r));\n+  VERIFY(!regex_match (\"abc\", res, r));\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+  return 0;\n+}"}, {"sha": "27da682819372911d2a0d0473f4bd0f1bff5d0a5", "filename": "libstdc++-v3/testsuite/ext/vstring/init-list.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988499f434108234543101579471a2fb25bf537f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finit-list.cc?ref=988499f434108234543101579471a2fb25bf537f", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <ext/vstring.h>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test = true;\n+\n+  __gnu_cxx::__vstring s1 = { 'a', 'b', 'c' };\n+  VERIFY(s1 == \"abc\");\n+\n+  s1 = { 'd', 'e', 'f' };\n+  VERIFY(s1 == \"def\");\n+\n+  s1 += { 'g', 'h', 'i' };\n+  VERIFY(s1 == \"defghi\");\n+\n+  s1.append({ 'j', 'k', 'l' });\n+  VERIFY(s1 == \"defghijkl\");\n+\n+  s1.assign({ 'm', 'n', 'o' });\n+  VERIFY(s1 == \"mno\");\n+\n+  // There aren't actually overloads of insert and replace taking size_type\n+  // and initializer_list, but test the usage anyway.\n+  s1.insert(2, { 'p', 'q', 'r' });\n+  VERIFY(s1 == \"mnpqro\");\n+\n+  s1.replace(2, 3, { 's', 't', 'u' });\n+  VERIFY(s1 == \"mnstuo\");\n+\n+  __gnu_cxx::__vstring::iterator i1, i2;\n+\n+  i1 = s1.begin()+2;\n+  s1.insert(i1, { 'v', 'w', 'x' });\n+  VERIFY(s1 == \"mnvwxstuo\");\n+\n+  i1 = s1.begin()+2;\n+  i2 = i1+6;\n+  s1.replace(i1, i2, { 'y', 'z' });\n+  VERIFY(s1 == \"mnyzo\");\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  __gnu_test::set_memory_limits();\n+  test01();\n+  return 0;\n+}"}]}