{"sha": "3f393fc679e504e451bbe07cbc15bc013a5700f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzOTNmYzY3OWU1MDRlNDUxYmJlMDdjYmMxNWJjMDEzYTU3MDBmNQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-22T01:03:59Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-22T01:03:59Z"}, "message": "don't compare ARG_FRAME_POINTER_REGNUM and FRAME_POINTER_REGNUM with the preprocessor\n\ngcc/ChangeLog:\n\n2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* combine.c, df-problems.c, df-scan.c, emit-rtl.c, reginfo.c,\n\treload.c, rtlanal.c: Remove comparison of ARG_FRAME_POINTER_REGNUM\n\tand FRAME_POINTER_REGNUM with the preprocessor.\n\nFrom-SVN: r223516", "tree": {"sha": "eeffb3dfef0cb771b4761d7ae5cd0cbbbf91998d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeffb3dfef0cb771b4761d7ae5cd0cbbbf91998d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f393fc679e504e451bbe07cbc15bc013a5700f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f393fc679e504e451bbe07cbc15bc013a5700f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f393fc679e504e451bbe07cbc15bc013a5700f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f393fc679e504e451bbe07cbc15bc013a5700f5/comments", "author": null, "committer": null, "parents": [{"sha": "dfed69615791ca818d1286ea3e8fe3758c59d7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfed69615791ca818d1286ea3e8fe3758c59d7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfed69615791ca818d1286ea3e8fe3758c59d7bb"}], "stats": {"total": 69, "additions": 32, "deletions": 37}, "files": [{"sha": "f09699904055f3c798f9dbd18beb00df2d747516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -1,3 +1,9 @@\n+2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* combine.c, df-problems.c, df-scan.c, emit-rtl.c, reginfo.c,\n+\treload.c, rtlanal.c: Remove comparison of ARG_FRAME_POINTER_REGNUM\n+\tand FRAME_POINTER_REGNUM with the preprocessor.\n+\n 2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h: Add default for STACK_PUSH_CODE."}, {"sha": "ff7bced7516c179cbfc8e126b104e8408e0f77cf", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -1028,10 +1028,8 @@ can_combine_def_p (df_ref def)\n       || (regno == HARD_FRAME_POINTER_REGNUM\n \t  && (!reload_completed || frame_pointer_needed))\n #endif\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-      || (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n-#endif\n-      )\n+      || (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && regno == ARG_POINTER_REGNUM && fixed_regs[regno]))\n     return false;\n \n   return true;\n@@ -2247,10 +2245,9 @@ combinable_i3pat (rtx_insn *i3, rtx *loc, rtx i2dest, rtx i1dest, rtx i0dest,\n #if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t  && REGNO (subdest) != HARD_FRAME_POINTER_REGNUM\n #endif\n-#if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t  && (REGNO (subdest) != ARG_POINTER_REGNUM\n-\t      || ! fixed_regs [REGNO (subdest)])\n-#endif\n+\t  && (FRAME_POINTER_REGNUM == ARG_POINTER_REGNUM\n+\t      || (REGNO (subdest) != ARG_POINTER_REGNUM\n+\t\t  || ! fixed_regs [REGNO (subdest)]))\n \t  && REGNO (subdest) != STACK_POINTER_REGNUM)\n \t{\n \t  if (*pi3dest_killed)\n@@ -13340,9 +13337,8 @@ mark_used_regs_combine (rtx x)\n #if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t      || regno == HARD_FRAME_POINTER_REGNUM\n #endif\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t      || (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n-#endif\n+\t      || (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t\t  && regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n \t      || regno == FRAME_POINTER_REGNUM)\n \t    return;\n "}, {"sha": "ff08abd6daa468f68ca1e4f7b5bee886bc0e434f", "filename": "gcc/df-problems.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -933,12 +933,11 @@ df_lr_local_compute (bitmap all_blocks ATTRIBUTE_UNUSED)\n \t reference of the frame pointer.  */\n       bitmap_set_bit (&df->hardware_regs_used, FRAME_POINTER_REGNUM);\n \n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       /* Pseudos with argument area equivalences may require\n \t reloading via the argument pointer.  */\n-      if (fixed_regs[ARG_POINTER_REGNUM])\n+      if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && fixed_regs[ARG_POINTER_REGNUM])\n \tbitmap_set_bit (&df->hardware_regs_used, ARG_POINTER_REGNUM);\n-#endif\n \n       /* Any constant, or pseudo with constant equivalences, may\n \t require reloading from memory using the pic register.  */"}, {"sha": "e32eaf5f0b15d75dce28ba06682a09e4d571f46e", "filename": "gcc/df-scan.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -3446,12 +3446,11 @@ df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n \tbitmap_set_bit (regular_block_artificial_uses,\n \t\t\tHARD_FRAME_POINTER_REGNUM);\n \n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       /* Pseudos with argument area equivalences may require\n \t reloading via the argument pointer.  */\n-      if (fixed_regs[ARG_POINTER_REGNUM])\n+      if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && fixed_regs[ARG_POINTER_REGNUM])\n \tbitmap_set_bit (regular_block_artificial_uses, ARG_POINTER_REGNUM);\n-#endif\n \n       /* Any constant, or pseudo with constant equivalences, may\n \t require reloading from memory using the pic register.  */\n@@ -3498,10 +3497,9 @@ df_get_eh_block_artificial_uses (bitmap eh_block_artificial_uses)\n \t    bitmap_set_bit (eh_block_artificial_uses,\n \t\t\t    HARD_FRAME_POINTER_REGNUM);\n \t}\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-      if (fixed_regs[ARG_POINTER_REGNUM])\n+      if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && fixed_regs[ARG_POINTER_REGNUM])\n \tbitmap_set_bit (eh_block_artificial_uses, ARG_POINTER_REGNUM);\n-#endif\n     }\n }\n \n@@ -3579,12 +3577,11 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n   /* These registers are live everywhere.  */\n   if (!reload_completed)\n     {\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       /* Pseudos with argument area equivalences may require\n \t reloading via the argument pointer.  */\n-      if (fixed_regs[ARG_POINTER_REGNUM])\n+      if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && fixed_regs[ARG_POINTER_REGNUM])\n \tbitmap_set_bit (entry_block_defs, ARG_POINTER_REGNUM);\n-#endif\n \n       /* Any constant, or pseudo with constant equivalences, may\n \t require reloading from memory using the pic register.  */\n@@ -3781,16 +3778,15 @@ df_exit_block_uses_collect (struct df_collection_rec *collection_rec, bitmap exi\n     df_ref_record (DF_REF_ARTIFICIAL, collection_rec, regno_reg_rtx[i], NULL,\n \t\t   EXIT_BLOCK_PTR_FOR_FN (cfun), NULL, DF_REF_REG_USE, 0);\n \n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n   /* It is deliberate that this is not put in the exit block uses but\n      I do not know why.  */\n-  if (reload_completed\n+  if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+      && reload_completed\n       && !bitmap_bit_p (exit_block_uses, ARG_POINTER_REGNUM)\n       && bb_has_eh_pred (EXIT_BLOCK_PTR_FOR_FN (cfun))\n       && fixed_regs[ARG_POINTER_REGNUM])\n     df_ref_record (DF_REF_ARTIFICIAL, collection_rec, regno_reg_rtx[ARG_POINTER_REGNUM], NULL,\n \t\t   EXIT_BLOCK_PTR_FOR_FN (cfun), NULL, DF_REF_REG_USE, 0);\n-#endif\n \n   df_canonize_collection_rec (collection_rec);\n }"}, {"sha": "360f37d3793a84ed0e398c2e157def8c26678a59", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -739,8 +739,9 @@ gen_rtx_REG (machine_mode mode, unsigned int regno)\n \t  && regno == HARD_FRAME_POINTER_REGNUM\n \t  && (!reload_completed || frame_pointer_needed))\n \treturn hard_frame_pointer_rtx;\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM && !HARD_FRAME_POINTER_IS_ARG_POINTER\n-      if (regno == ARG_POINTER_REGNUM)\n+#if !HARD_FRAME_POINTER_IS_ARG_POINTER\n+      if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && regno == ARG_POINTER_REGNUM)\n \treturn arg_pointer_rtx;\n #endif\n #ifdef RETURN_ADDRESS_POINTER_REGNUM"}, {"sha": "e26520b92438fd4144d892145da11e55afb7f4cd", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -464,10 +464,9 @@ init_reg_sets_1 (void)\n       else if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t       && i == HARD_FRAME_POINTER_REGNUM)\n \t;\n-#if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-      else if (i == ARG_POINTER_REGNUM && fixed_regs[i])\n+      else if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t       && i == ARG_POINTER_REGNUM && fixed_regs[i])\n \t;\n-#endif\n       else if (!PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n \t       && i == (unsigned) PIC_OFFSET_TABLE_REGNUM && fixed_regs[i])\n \t;"}, {"sha": "fe2ffe6ee5e1a1adf3f1f73d459b256c76943a7b", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -5184,9 +5184,8 @@ find_reloads_address (machine_mode mode, rtx *memrefloc, rtx ad,\n #if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t   || operand == hard_frame_pointer_rtx\n #endif\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t   || operand == arg_pointer_rtx\n-#endif\n+\t   || (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t       && operand == arg_pointer_rtx)\n \t   || operand == stack_pointer_rtx)\n \t  && ! maybe_memory_address_addr_space_p\n \t\t(mode, ad, as, &XEXP (XEXP (ad, 0), 1 - op_index)))"}, {"sha": "fce93abff82c49279b9350f013e8bfe5a9c01972", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f393fc679e504e451bbe07cbc15bc013a5700f5/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=3f393fc679e504e451bbe07cbc15bc013a5700f5", "patch": "@@ -1445,9 +1445,8 @@ refers_to_regno_p (unsigned int regno, unsigned int endregno, const_rtx x,\n \t clobber a virtual register.  In fact, we could be more precise,\n \t but it isn't worth it.  */\n       if ((x_regno == STACK_POINTER_REGNUM\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t   || x_regno == ARG_POINTER_REGNUM\n-#endif\n+\t   || (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t       && x_regno == ARG_POINTER_REGNUM)\n \t   || x_regno == FRAME_POINTER_REGNUM)\n \t  && regno >= FIRST_VIRTUAL_REGISTER && regno <= LAST_VIRTUAL_REGISTER)\n \treturn true;"}]}