{"sha": "ff94c747653bba7f146f1f8304286d82f17d8ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY5NGM3NDc2NTNiYmE3ZjE0NmYxZjgzMDQyODZkODJmMTdkOGFlOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-09-15T05:55:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-09-15T05:55:36Z"}, "message": "cpplex.c (ON_REST_ARG): Correct the test.\n\n\t* cpplex.c (ON_REST_ARG): Correct the test.\n\t(maybe_paste_with_next): Duplicate a token that fail pasting,\n\tand clear its PASTE_LEFT flag, so that nested pasting attempts\n\tdo not occur.\n\t* gcc.dg/cpp/paste10.c: Testcase.\n\nFrom-SVN: r36424", "tree": {"sha": "46b2b60f181bbf21ca0786fa960ec2f8d89df671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46b2b60f181bbf21ca0786fa960ec2f8d89df671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff94c747653bba7f146f1f8304286d82f17d8ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff94c747653bba7f146f1f8304286d82f17d8ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff94c747653bba7f146f1f8304286d82f17d8ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff94c747653bba7f146f1f8304286d82f17d8ae9/comments", "author": null, "committer": null, "parents": [{"sha": "b437f1a754649a06bd783fc707b5bff14c9c5eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b437f1a754649a06bd783fc707b5bff14c9c5eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b437f1a754649a06bd783fc707b5bff14c9c5eed"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "455422411244865b0acb105309fbd38a229912e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff94c747653bba7f146f1f8304286d82f17d8ae9", "patch": "@@ -1,3 +1,10 @@\n+Fri 15-Sep-2000 06:49:07 BST  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpplex.c (ON_REST_ARG): Correct the test.\n+\t(maybe_paste_with_next): Duplicate a token that fail pasting,\n+\tand clear its PASTE_LEFT flag, so that nested pasting attempts\n+\tdo not occur.\n+\n 2000-09-14  Richard Henderson  <rth@cygnus.com>\n \n \t* calls.c (precompute_register_parameters): Use COSTS_N_INSNS, not 2."}, {"sha": "56b8543f995dee9cb8f1e8fddf56a5459dc43b1d", "filename": "gcc/cpplex.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=ff94c747653bba7f146f1f8304286d82f17d8ae9", "patch": "@@ -201,9 +201,9 @@ TOKEN_LEN (token)\n #define IS_ARG_CONTEXT(c) ((c)->flags & CONTEXT_ARG)\n #define CURRENT_CONTEXT(pfile) ((pfile)->contexts + (pfile)->cur_context)\n #define ON_REST_ARG(c) \\\n- (((c)->flags & VAR_ARGS) \\\n-  && ((c)-1)->u.list->tokens[((c)-1)->posn - 1].val.aux \\\n-      == (unsigned int) (((c)-1)->u.list->paramc - 1))\n+ (((c)->u.list->flags & VAR_ARGS) \\\n+  && (c)->u.list->tokens[(c)->posn - 1].val.aux \\\n+      == (unsigned int) ((c)->u.list->paramc - 1))\n \n #define ASSIGN_FLAGS_AND_POS(d, s) \\\n   do {(d)->flags = (s)->flags & (PREV_WHITE | BOL | PASTE_LEFT); \\\n@@ -2787,14 +2787,17 @@ maybe_paste_with_next (pfile, token)\n \t\t     the special extended semantics (see above).  */\n \t\t  if (token->type == CPP_COMMA\n \t\t      && IS_ARG_CONTEXT (CURRENT_CONTEXT (pfile))\n-\t\t      && ON_REST_ARG (CURRENT_CONTEXT (pfile)))\n+\t\t      && ON_REST_ARG (CURRENT_CONTEXT (pfile) - 1))\n \t\t    /* no warning */;\n \t\t  else\n \t\t    cpp_warning (pfile,\n \t\t\t\"pasting would not give a valid preprocessing token\");\n \t\t}\n \t      _cpp_push_token (pfile, second);\n-\t      return token;\n+\t      /* A short term hack to safely clear the PASTE_LEFT flag.  */\n+\t      pasted = duplicate_token (pfile, token);\n+\t      pasted->flags &= ~PASTE_LEFT;\n+\t      return pasted;\n \t    }\n \n \t  if (type == CPP_NAME || type == CPP_NUMBER)"}, {"sha": "54d0fa9297b33263eaab1913e06364f8b3804e86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff94c747653bba7f146f1f8304286d82f17d8ae9", "patch": "@@ -1,3 +1,7 @@\n+Fri 15-Sep-2000 06:50:11 BST  Neil Booth  <NeilB@earthling.net>\n+\n+\t* gcc.dg/cpp/paste10.c: Testcase for PASTE_LEFT buglet.\n+\n Thu Sep 14 16:48:49 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/execute/20000914-1.c: New test."}, {"sha": "ab3cb9050bee8a3b678987e06042946aba664163", "filename": "gcc/testsuite/gcc.dg/cpp/paste10.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff94c747653bba7f146f1f8304286d82f17d8ae9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste10.c?ref=ff94c747653bba7f146f1f8304286d82f17d8ae9", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"\" } */\n+\n+/* This testcase used to produce a bogus \"invalid paste\" warning, owing\n+   to not clearing a PASTE_LEFT flag.  */\n+\n+#define strcpy(src) __strcpy_small (src)\n+\n+#define __strcpy_small(src) src\n+\n+#define tprintf(format, args...) sprintf(format, ## args)\n+\n+strcpy(tprintf(\"<%s>\", test))"}]}