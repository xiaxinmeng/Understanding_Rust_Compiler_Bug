{"sha": "98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhY2JiMzExMWZjYjVlNTdkNWU2M2Q0NmMwZDkyZjRlNTNlM2MyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-11T07:07:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-11T07:07:47Z"}, "message": "openmp: Fix up taskloop reduction ICE if taskloop has no iterations [PR100471]\n\nWhen a taskloop doesn't have any iterations, GOMP_taskloop* takes an early\nreturn, doesn't create any tasks and more importantly, doesn't create\na taskgroup and doesn't register task reductions.  But, the code emitted\nin the callers assumes task reductions have been registered and performs\nthe reduction handling and task reduction unregistration.  The pointer\nto the task reduction private variables is reused, on input it is the alignment\nand only on output it is the pointer, so in the case taskloop with no iterations\nthe caller attempts to dereference the alignment value as if it was a pointer\nand crashes.  We could in the early returns register the task reductions\nonly to have them looped over and unregistered in the caller, but I think\nit is better to tell the caller there is nothing to task reduce and bypass\nall that.\n\n2021-05-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/100471\n\t* omp-low.c (lower_omp_task_reductions): For OMP_TASKLOOP, if data\n\tis 0, bypass the reduction loop including\n\tGOMP_taskgroup_reduction_unregister call.\n\n\t* taskloop.c (GOMP_taskloop): If GOMP_TASK_FLAG_REDUCTION and not\n\tGOMP_TASK_FLAG_NOGROUP, when doing early return clear the task\n\treduction pointer.\n\t* testsuite/libgomp.c/task-reduction-4.c: New test.", "tree": {"sha": "d1203880287bb5726e87729b40c09fe2946a4967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1203880287bb5726e87729b40c09fe2946a4967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1866182f6cf338880c68225d9de571b787b6abcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1866182f6cf338880c68225d9de571b787b6abcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1866182f6cf338880c68225d9de571b787b6abcd"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "c0ce1a4990eaaf01f59fe80f485bfbf65f87101b", "filename": "gcc/omp-low.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "patch": "@@ -8781,7 +8781,7 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n   tree num_thr_sz = create_tmp_var (size_type_node);\n   tree lab1 = create_artificial_label (UNKNOWN_LOCATION);\n   tree lab2 = create_artificial_label (UNKNOWN_LOCATION);\n-  tree lab3 = NULL_TREE;\n+  tree lab3 = NULL_TREE, lab7 = NULL_TREE;\n   gimple *g;\n   if (code == OMP_FOR || code == OMP_SECTIONS)\n     {\n@@ -8846,6 +8846,14 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t      NULL_TREE, NULL_TREE);\n   tree data = create_tmp_var (pointer_sized_int_node);\n   gimple_seq_add_stmt (end, gimple_build_assign (data, t));\n+  if (code == OMP_TASKLOOP)\n+    {\n+      lab7 = create_artificial_label (UNKNOWN_LOCATION);\n+      g = gimple_build_cond (NE_EXPR, data,\n+\t\t\t     build_zero_cst (pointer_sized_int_node),\n+\t\t\t     lab1, lab7);\n+      gimple_seq_add_stmt (end, g);\n+    }\n   gimple_seq_add_stmt (end, gimple_build_label (lab1));\n   tree ptr;\n   if (TREE_CODE (TYPE_SIZE_UNIT (record_type)) == INTEGER_CST)\n@@ -9209,6 +9217,8 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n       g = gimple_build_call (t, 1, build_fold_addr_expr (avar));\n     }\n   gimple_seq_add_stmt (end, g);\n+  if (lab7)\n+    gimple_seq_add_stmt (end, gimple_build_label (lab7));\n   t = build_constructor (atype, NULL);\n   TREE_THIS_VOLATILE (t) = 1;\n   gimple_seq_add_stmt (end, gimple_build_assign (avar, t));"}, {"sha": "791178a1fd74e998413643cfb8d30890405c6c17", "filename": "libgomp/taskloop.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/libgomp%2Ftaskloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/libgomp%2Ftaskloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftaskloop.c?ref=98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "patch": "@@ -51,20 +51,32 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \n   /* If parallel or taskgroup has been cancelled, don't start new tasks.  */\n   if (team && gomp_team_barrier_cancelled (&team->barrier))\n-    return;\n+    {\n+    early_return:\n+      if ((flags & (GOMP_TASK_FLAG_NOGROUP | GOMP_TASK_FLAG_REDUCTION))\n+\t  == GOMP_TASK_FLAG_REDUCTION)\n+\t{\n+\t  struct gomp_data_head { TYPE t1, t2; uintptr_t *ptr; };\n+\t  uintptr_t *ptr = ((struct gomp_data_head *) data)->ptr;\n+\t  /* Tell callers GOMP_taskgroup_reduction_register has not been\n+\t     called.  */\n+\t  ptr[2] = 0;\n+\t}\n+      return;\n+    }\n \n #ifdef TYPE_is_long\n   TYPE s = step;\n   if (step > 0)\n     {\n       if (start >= end)\n-\treturn;\n+\tgoto early_return;\n       s--;\n     }\n   else\n     {\n       if (start <= end)\n-\treturn;\n+\tgoto early_return;\n       s++;\n     }\n   UTYPE n = (end - start + s) / step;\n@@ -73,13 +85,13 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n   if (flags & GOMP_TASK_FLAG_UP)\n     {\n       if (start >= end)\n-\treturn;\n+\tgoto early_return;\n       n = (end - start + step - 1) / step;\n     }\n   else\n     {\n       if (start <= end)\n-\treturn;\n+\tgoto early_return;\n       n = (start - end - step - 1) / -step;\n     }\n #endif"}, {"sha": "7ca1d02fa19e7388a712fbb098edc207139c4e55", "filename": "libgomp/testsuite/libgomp.c/task-reduction-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-reduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-reduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-reduction-4.c?ref=98acbb3111fcb5e57d5e63d46c0d92f4e53e3c2a", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/100471 */\n+\n+extern void abort (void);\n+\n+int c;\n+\n+int\n+main ()\n+{\n+#pragma omp parallel\n+#pragma omp single\n+  {\n+    int r = 0, i;\n+    #pragma omp taskloop reduction(+:r)\n+    for (i = 0; i < c; i++)\n+      r++;\n+    if (r != 0)\n+      abort ();\n+  }\n+  return 0;\n+}"}]}