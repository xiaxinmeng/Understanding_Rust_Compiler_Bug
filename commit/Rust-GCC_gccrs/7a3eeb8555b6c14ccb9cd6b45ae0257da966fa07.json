{"sha": "7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzZWViODU1NWI2YzE0Y2NiOWNkNmI0NWFlMDI1N2RhOTY2ZmEwNw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-08-29T21:55:10Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-08-29T21:55:10Z"}, "message": "re PR fortran/50225 ([OOP] The allocation status for polymorphic allocatable function results is not set properly)\n\n2011-08-29  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/50225\n\t* trans-decl.c (gfc_generate_function_code): Nullify polymorphic\n\tallocatable function results.\n\n2011-08-29  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/50225\n\t* gfortran.dg/class_result_1.f03: New.\n\nFrom-SVN: r178262", "tree": {"sha": "e859dc72ff3060178030357a0a345be57c979755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e859dc72ff3060178030357a0a345be57c979755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3167ec4a0bbfb94cab010af6c1c34f267e571cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3167ec4a0bbfb94cab010af6c1c34f267e571cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3167ec4a0bbfb94cab010af6c1c34f267e571cac"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "d47e4115582f2885cebdb066d7c03ea367b6af17", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "patch": "@@ -1,3 +1,9 @@\n+2011-08-29  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/50225\n+\t* trans-decl.c (gfc_generate_function_code): Nullify polymorphic\n+\tallocatable function results.\n+\n 2011-08-29  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-decl.c (generate_coarray_sym_init): Use"}, {"sha": "44363c298ae083e5ddbf3b79e77d52be1ede4739", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "patch": "@@ -5215,17 +5215,25 @@ gfc_generate_function_code (gfc_namespace * ns)\n     {\n       tree result = get_proc_result (sym);\n \n-      if (result != NULL_TREE\n-\t    && sym->attr.function\n-\t    && !sym->attr.pointer)\n+      if (result != NULL_TREE && sym->attr.function && !sym->attr.pointer)\n \t{\n \t  if (sym->attr.allocatable && sym->attr.dimension == 0\n \t      && sym->result == sym)\n \t    gfc_add_modify (&init, result, fold_convert (TREE_TYPE (result),\n \t\t\t\t\t\t\t null_pointer_node));\n+\t  else if (sym->ts.type == BT_CLASS\n+\t\t   && CLASS_DATA (sym)->attr.allocatable\n+\t\t   && sym->attr.dimension == 0 && sym->result == sym)\n+\t    {\n+\t      tmp = CLASS_DATA (sym)->backend_decl;\n+\t      tmp = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\t     TREE_TYPE (tmp), result, tmp, NULL_TREE);\n+\t      gfc_add_modify (&init, tmp, fold_convert (TREE_TYPE (tmp),\n+\t\t\t\t\t\t\tnull_pointer_node));\n+\t    }\n \t  else if (sym->ts.type == BT_DERIVED\n-\t      && sym->ts.u.derived->attr.alloc_comp\n-\t      && !sym->attr.allocatable)\n+\t\t   && sym->ts.u.derived->attr.alloc_comp\n+\t\t   && !sym->attr.allocatable)\n \t    {\n \t      rank = sym->as ? sym->as->rank : 0;\n \t      tmp = gfc_nullify_alloc_comp (sym->ts.u.derived, result, rank);"}, {"sha": "18b19adc581484ca21b561042ab65dc6b554837c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "patch": "@@ -1,3 +1,8 @@\n+2011-08-29  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/50225\n+\t* gfortran.dg/class_result_1.f03: New.\n+\n 2011-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/48722"}, {"sha": "f1f542bb1219615af3d586ec008654534474e0fc", "filename": "gcc/testsuite/gfortran.dg/class_result_1.f03", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_1.f03?ref=7a3eeb8555b6c14ccb9cd6b45ae0257da966fa07", "patch": "@@ -0,0 +1,62 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=all\" }\n+!\n+! PR 50225: [OOP] The allocation status for polymorphic allocatable function results is not set properly\n+!\n+! Contributed by Arjen Markus <arjen.markus895@gmail.com>\n+\n+module points2d\n+\n+  implicit none\n+\n+  type point2d\n+      real :: x, y\n+  end type\n+\n+contains\n+\n+ subroutine print( point )\n+   class(point2d) :: point\n+   write(*,'(2f10.4)') point%x, point%y\n+ end subroutine\n+\n+ subroutine random_vector( point )\n+   class(point2d) :: point\n+   call random_number( point%x )\n+   call random_number( point%y )\n+   point%x = 2.0 * (point%x - 0.5)\n+   point%y = 2.0 * (point%y - 0.5)\n+ end subroutine\n+\n+ function add_vector( point, vector )\n+   class(point2d), intent(in)  :: point, vector\n+   class(point2d), allocatable :: add_vector\n+   allocate( add_vector )\n+   add_vector%x = point%x + vector%x\n+   add_vector%y = point%y + vector%y\n+ end function\n+\n+end module points2d\n+\n+\n+program random_walk\n+\n+  use points2d\n+  implicit none\n+\n+  type(point2d), target   :: point_2d, vector_2d\n+  class(point2d), pointer :: point, vector\n+  integer :: i\n+\n+  point  => point_2d\n+  vector => vector_2d\n+\n+  do i=1,2\n+    call random_vector(point)\n+    call random_vector(vector)\n+    call print(add_vector(point, vector))\n+  end do\n+\n+end program random_walk\n+\n+! { dg-final { cleanup-modules \"points2d\" } }"}]}