{"sha": "833bf445b05c6b15b8d3af23ba965c85e5d7f56a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzYmY0NDViMDVjNmIxNWI4ZDNhZjIzYmE5NjVjODVlNWQ3ZjU2YQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2006-11-14T02:29:46Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2006-11-14T02:29:46Z"}, "message": "m32c.c (m32c_prepare_shift): Use a separate temporary for intermediates.\n\n* config/m32c/m32c.c (m32c_prepare_shift): Use a separate\ntemporary for intermediates.\n\nFrom-SVN: r118798", "tree": {"sha": "e9d1abd98ef15ba860773347f178d3441df3daf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d1abd98ef15ba860773347f178d3441df3daf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833bf445b05c6b15b8d3af23ba965c85e5d7f56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833bf445b05c6b15b8d3af23ba965c85e5d7f56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833bf445b05c6b15b8d3af23ba965c85e5d7f56a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833bf445b05c6b15b8d3af23ba965c85e5d7f56a/comments", "author": null, "committer": null, "parents": [{"sha": "8b3c6c5a91301fc5fb7e1d2246e2882f2d061847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b3c6c5a91301fc5fb7e1d2246e2882f2d061847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b3c6c5a91301fc5fb7e1d2246e2882f2d061847"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "a1830a7c9f854fb3129f87e3ad404d3f8d6174d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833bf445b05c6b15b8d3af23ba965c85e5d7f56a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833bf445b05c6b15b8d3af23ba965c85e5d7f56a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=833bf445b05c6b15b8d3af23ba965c85e5d7f56a", "patch": "@@ -1,3 +1,8 @@\n+2006-11-13  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/m32c.c (m32c_prepare_shift): Use a separate\n+\ttemporary for intermediates.\n+\n 2006-11-13  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (expand_cbranchdi4): Initialize skip_label."}, {"sha": "dcfbe6ebafc0d08ad2bd91f1516dc041d88b2019", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833bf445b05c6b15b8d3af23ba965c85e5d7f56a/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833bf445b05c6b15b8d3af23ba965c85e5d7f56a/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=833bf445b05c6b15b8d3af23ba965c85e5d7f56a", "patch": "@@ -3423,7 +3423,7 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t undefined to skip one of the comparisons.  */\n \n       rtx count;\n-      rtx label, lref, insn;\n+      rtx label, lref, insn, tempvar;\n \n       emit_move_insn (operands[0], operands[1]);\n \n@@ -3432,13 +3432,15 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n       lref = gen_rtx_LABEL_REF (VOIDmode, label);\n       LABEL_NUSES (label) ++;\n \n+      tempvar = gen_reg_rtx (mode);\n+\n       if (shift_code == ASHIFT)\n \t{\n \t  /* This is a left shift.  We only need check positive counts.  */\n \t  emit_jump_insn (gen_cbranchqi4 (gen_rtx_LE (VOIDmode, 0, 0),\n \t\t\t\t\t  count, GEN_INT (16), label));\n-\t  emit_insn (func (operands[0], operands[0], GEN_INT (8)));\n-\t  emit_insn (func (operands[0], operands[0], GEN_INT (8)));\n+\t  emit_insn (func (tempvar, operands[0], GEN_INT (8)));\n+\t  emit_insn (func (operands[0], tempvar, GEN_INT (8)));\n \t  insn = emit_insn (gen_addqi3 (count, count, GEN_INT (-16)));\n \t  emit_label_after (label, insn);\n \t}\n@@ -3447,8 +3449,8 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t  /* This is a right shift.  We only need check negative counts.  */\n \t  emit_jump_insn (gen_cbranchqi4 (gen_rtx_GE (VOIDmode, 0, 0),\n \t\t\t\t\t  count, GEN_INT (-16), label));\n-\t  emit_insn (func (operands[0], operands[0], GEN_INT (-8)));\n-\t  emit_insn (func (operands[0], operands[0], GEN_INT (-8)));\n+\t  emit_insn (func (tempvar, operands[0], GEN_INT (-8)));\n+\t  emit_insn (func (operands[0], tempvar, GEN_INT (-8)));\n \t  insn = emit_insn (gen_addqi3 (count, count, GEN_INT (16)));\n \t  emit_label_after (label, insn);\n \t}"}]}