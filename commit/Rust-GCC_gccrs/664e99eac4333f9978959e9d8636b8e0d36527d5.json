{"sha": "664e99eac4333f9978959e9d8636b8e0d36527d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0ZTk5ZWFjNDMzM2Y5OTc4OTU5ZTlkODYzNmI4ZTBkMzY1MjdkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-03-06T12:31:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-03-06T12:31:43Z"}, "message": "future (future_error(error_code)): Construct base class with error_code's message.\n\n\t* include/std/future (future_error(error_code)): Construct base\n\tclass with error_code's message.\n\t* src/c++11/future.cc (future_error::what()): Do not call c_str() on\n\ttemporary string.\n\nFrom-SVN: r221236", "tree": {"sha": "9e1ce010a07dcdc5cf52d74e2ee088701c375876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1ce010a07dcdc5cf52d74e2ee088701c375876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664e99eac4333f9978959e9d8636b8e0d36527d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e99eac4333f9978959e9d8636b8e0d36527d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664e99eac4333f9978959e9d8636b8e0d36527d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e99eac4333f9978959e9d8636b8e0d36527d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfa4bc51e0ac7feb23fec0345bd85a2caf2d547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfa4bc51e0ac7feb23fec0345bd85a2caf2d547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfa4bc51e0ac7feb23fec0345bd85a2caf2d547"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "4880391798f260163a57f2eeec1e6c966417cc5b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e99eac4333f9978959e9d8636b8e0d36527d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e99eac4333f9978959e9d8636b8e0d36527d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=664e99eac4333f9978959e9d8636b8e0d36527d5", "patch": "@@ -1,3 +1,10 @@\n+2015-03-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (future_error(error_code)): Construct base\n+\tclass with error_code's message.\n+\t* src/c++11/future.cc (future_error::what()): Do not call c_str() on\n+\ttemporary string.\n+\n 2015-03-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/locale_conv.h (wstring_convert::_M_conv): Handle"}, {"sha": "fc3f8162ae6da42817b0b7dd3f1943c9eab25f4e", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e99eac4333f9978959e9d8636b8e0d36527d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e99eac4333f9978959e9d8636b8e0d36527d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=664e99eac4333f9978959e9d8636b8e0d36527d5", "patch": "@@ -98,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   public:\n     explicit future_error(error_code __ec)\n-    : logic_error(\"std::future_error\"), _M_code(__ec)\n+    : logic_error(\"std::future_error: \" + __ec.message()), _M_code(__ec)\n     { }\n \n     virtual ~future_error() noexcept;"}, {"sha": "3cf503b6b34f288ebc68ec7b50548e9140640b52", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e99eac4333f9978959e9d8636b8e0d36527d5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e99eac4333f9978959e9d8636b8e0d36527d5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=664e99eac4333f9978959e9d8636b8e0d36527d5", "patch": "@@ -75,7 +75,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   future_error::~future_error() noexcept { }\n \n   const char*\n-  future_error::what() const noexcept { return _M_code.message().c_str(); }\n+  future_error::what() const noexcept { return logic_error::what(); }\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n   && (ATOMIC_INT_LOCK_FREE > 1)"}]}