{"sha": "d40a19da1370ab4930788ede0a5c9e9171a16656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwYTE5ZGExMzcwYWI0OTMwNzg4ZWRlMGE1YzllOTE3MWExNjY1Ng==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-09-22T20:20:03Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-09-22T20:20:03Z"}, "message": "re PR debug/41266 (Emit DW_TAG_template_parameter_pack and DW_TAG_formal_parameter_pack)\n\nFix for PR debug/41266\n\nChangeLog:\n\n\t* include/dwarf2.h (enum dwarf_tag): Add\n\tDW_TAG_template_parameter_pack and DW_TAG_formal_parameter_pack.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (template_parameter_pack_die,\n\tgen_formal_parameter_pack_die ): New functions.\n\t(make_ith_pack_parameter_name): Remove this function.\n\t(dwarf_tag_name): Support printing DW_TAG_template_parameter_pack and\n\tDW_TAG_formal_parameter_pack.\n\t(gen_generic_params_dies): Represent each template parameter pack\n\tby a DW_TAG_template_parameter_pack DIE. Argument pack elements are\n\trepresented by usual DW_TAG_template_*_parameter DIEs that are\n\tchildren of the DW_TAG_template_parameter_pack element DIE.\n\t(generic_parameter_die): This doesn't deal with parameter pack\n\tnames anymore. Don't generate DW_AT_name for some DIEs, e.g. children of\n\tparameter pack DIEs.\n\t(gen_formal_parameter_die): Add a flag to not emit DW_AT_name\n\tin certain cases, e.g. for pack elements.\n\t(gen_formal_types_die, gen_decl_die): Adjust usage of\n\tgen_formal_parameter_die.\n\t(gen_subprogram_die): Represent each function parameter pack by a\n\tDW_TAG_formal_parameter_pack DIE. Arguments of of the pack are\n\trepresented by usual DW_TAG_formal_parameter DIEs that are children\n\tof the DW_TAG_formal_parameter_pack DIE. Remove references to\n\t____builtin_va_alist decls as no part of the compiler uses those\n\tanymore.\n\t* langhooks.h (struct lang_hooks_for_decls): Add\n\tfunction_parm_expanded_from_pack_p, get_generic_function_decl\n\tand function_parameter_pack_p hooks.  Fix comment for\n\tget_innermost_generic_parms hook.\n\t* langhooks-def.h (LANG_HOOKS_FUNCTION_PARAMETER_PACK_P,\n\tLANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P ): Declare new hook\n\tmacros and use them to initialize lang_hook.\n\ngcc/cp/ChangeLog:\n\n\t* cp-lang.c (LANG_HOOKS_FUNCTION_PARAMETER_PACK_P,\n\tLANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P,\n\tLANG_HOOKS_GET_GENERIC_FUNCTION_DECL): Initialize these\n\thooks for the c++ FE.\n\t* cp-tree.h (function_parameter_pack_p, get_function_template_decl,\n\tfunction_parameter_expanded_from_pack_p): Declare ...\n\t* pt.c (function_parameter_pack_p, get_function_template_decl,\n\tfunction_parameter_expanded_from_pack_p): ... new hooks.\n\t(get_template_info): Make this more robust.\n\t(template_args_variadic_p, make_ith_pack_parameter_name): Add a new\n\tline between comment and function.\n\t(get_template_argument_pack_elems): Fix comment.\n\t(tsubst_decl): Arguments of function parameter packs are not\n\tparameter packs themselves.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/debug/dwarf2/template-func-params-4.C: Adjust.\n\t* g++.dg/debug/dwarf2/template-func-params-7.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-params-4.C: Likewise.\n\nFrom-SVN: r152043", "tree": {"sha": "395254d28bc788cef4cbaf2e87a895cb34b3ee35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/395254d28bc788cef4cbaf2e87a895cb34b3ee35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40a19da1370ab4930788ede0a5c9e9171a16656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40a19da1370ab4930788ede0a5c9e9171a16656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40a19da1370ab4930788ede0a5c9e9171a16656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40a19da1370ab4930788ede0a5c9e9171a16656/comments", "author": null, "committer": null, "parents": [{"sha": "8249770055caeb6c1a061b03f58fb6f38f06cb0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8249770055caeb6c1a061b03f58fb6f38f06cb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8249770055caeb6c1a061b03f58fb6f38f06cb0c"}], "stats": {"total": 442, "additions": 340, "deletions": 102}, "files": [{"sha": "5a3554cf26d9f86074e78c119292637954771f20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -1,3 +1,35 @@\n+2009-09-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* dwarf2out.c (template_parameter_pack_die,\n+\tgen_formal_parameter_pack_die ): New functions.\n+\t(make_ith_pack_parameter_name): Remove this function.\n+\t(dwarf_tag_name): Support printing DW_TAG_template_parameter_pack and\n+\tDW_TAG_formal_parameter_pack.\n+\t(gen_generic_params_dies): Represent each template parameter pack\n+\tby a DW_TAG_template_parameter_pack DIE. Argument pack elements are\n+\trepresented by usual DW_TAG_template_*_parameter DIEs that are\n+\tchildren of the DW_TAG_template_parameter_pack element DIE.\n+\t(generic_parameter_die): This doesn't deal with parameter pack\n+\tnames anymore. Don't generate DW_AT_name for some DIEs, e.g. children of\n+\tparameter pack DIEs.\n+\t(gen_formal_parameter_die): Add a flag to not emit DW_AT_name\n+\tin certain cases, e.g. for pack elements.\n+\t(gen_formal_types_die, gen_decl_die): Adjust usage of\n+\tgen_formal_parameter_die.\n+\t(gen_subprogram_die): Represent each function parameter pack by a\n+\tDW_TAG_formal_parameter_pack DIE. Arguments of of the pack are\n+\trepresented by usual DW_TAG_formal_parameter DIEs that are children\n+\tof the DW_TAG_formal_parameter_pack DIE. Remove references to\n+\t____builtin_va_alist decls as no part of the compiler uses those\n+\tanymore.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add\n+\tfunction_parm_expanded_from_pack_p, get_generic_function_decl\n+\tand function_parameter_pack_p hooks.  Fix comment for\n+\tget_innermost_generic_parms hook.\n+\t* langhooks-def.h (LANG_HOOKS_FUNCTION_PARAMETER_PACK_P,\n+\tLANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P ): Declare new hook\n+\tmacros and use them to initialize lang_hook.\n+\n 2009-09-22  Richard Henderson  <rth@redhat.com>\n \n \t* system.h (TRAMPOLINE_TEMPLATE, INITIALIZE_TRAMPOLINE): Poison."}, {"sha": "ae3045eee1445db8af5a7a3e419709a9a4bc07b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -1,3 +1,20 @@\n+2009-09-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* cp-lang.c (LANG_HOOKS_FUNCTION_PARAMETER_PACK_P,\n+\tLANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P,\n+\tLANG_HOOKS_GET_GENERIC_FUNCTION_DECL): Initialize these\n+\thooks for the c++ FE.\n+\t* cp-tree.h (function_parameter_pack_p, get_function_template_decl,\n+\tfunction_parameter_expanded_from_pack_p): Declare ...\n+\t* pt.c (function_parameter_pack_p, get_function_template_decl,\n+\tfunction_parameter_expanded_from_pack_p): ... new hooks.\n+\t(get_template_info): Make this more robust.\n+\t(template_args_variadic_p, make_ith_pack_parameter_name): Add a new\n+\tline between comment and function.\n+\t(get_template_argument_pack_elems): Fix comment.\n+\t(tsubst_decl): Arguments of function parameter packs are not\n+\tparameter packs themselves.\n+\n 2009-09-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41421"}, {"sha": "d84325d291bea0a54db4f9036aac668ddbb32b52", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -59,13 +59,20 @@ static tree cp_eh_personality (void);\n #undef LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS\n #define LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS \\\n \tget_template_innermost_arguments\n+#undef LANG_HOOKS_FUNCTION_PARAMETER_PACK_P\n+#define LANG_HOOKS_FUNCTION_PARAMETER_PACK_P \\\n+\tfunction_parameter_pack_p\n #undef LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS\n #define LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS \\\n \tget_template_argument_pack_elems\n #undef LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P\n #define LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P \\\n \ttemplate_template_parameter_p\n-\n+#undef LANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P\n+#define LANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P \\\n+\tfunction_parameter_expanded_from_pack_p\n+#undef LANG_HOOKS_GET_GENERIC_FUNCTION_DECL\n+#define LANG_HOOKS_GET_GENERIC_FUNCTION_DECL get_function_template_decl\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_DWARF_NAME"}, {"sha": "c089bb75f27196220aee73acefd7094f9dc9ef10", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -4643,6 +4643,8 @@ extern tree instantiate_decl\t\t\t(tree, int, bool);\n extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n+extern bool function_parameter_pack_p\t\t(const_tree);\n+extern bool function_parameter_expanded_from_pack_p (tree, tree);\n extern tree make_pack_expansion                 (tree);\n extern bool check_for_bare_parameter_packs      (tree);\n extern tree get_template_info\t\t\t(const_tree);\n@@ -4692,7 +4694,7 @@ bool template_template_parameter_p\t\t(const_tree);\n extern tree get_primary_template_innermost_parameters\t(const_tree);\n extern tree get_template_innermost_arguments\t(const_tree);\n extern tree get_template_argument_pack_elems\t(const_tree);\n-\n+extern tree get_function_template_decl (const_tree);\n /* in repo.c */\n extern void init_repo\t\t\t\t(void);\n extern int repo_emit_p\t\t\t\t(tree);"}, {"sha": "08964dab27131b98ad8e0af50c386d8fe2af2991", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -294,6 +294,9 @@ get_template_info (const_tree t)\n {\n   tree tinfo = NULL_TREE;\n \n+  if (!t || t == error_mark_node)\n+    return NULL;\n+\n   if (DECL_P (t) && DECL_LANG_SPECIFIC (t))\n     tinfo = DECL_TEMPLATE_INFO (t);\n \n@@ -2617,6 +2620,7 @@ comp_template_parms (const_tree parms1, const_tree parms2)\n }\n \n /* Determine whether PARM is a parameter pack.  */\n+\n bool \n template_parameter_pack_p (const_tree parm)\n {\n@@ -2635,8 +2639,49 @@ template_parameter_pack_p (const_tree parm)\n \t  && TEMPLATE_TYPE_PARAMETER_PACK (parm));\n }\n \n+/* Determine if T is a function parameter pack.  */\n+\n+bool\n+function_parameter_pack_p (const_tree t)\n+{\n+  if (t && TREE_CODE (t) == PARM_DECL)\n+    return FUNCTION_PARAMETER_PACK_P (t);\n+  return false;\n+}\n+\n+/* Return the function template declaration of PRIMARY_FUNC_TMPL_INST.\n+   PRIMARY_FUNC_TMPL_INST is a primary function template instantiation.  */\n+\n+tree\n+get_function_template_decl (const_tree primary_func_tmpl_inst)\n+{\n+  if (! primary_func_tmpl_inst\n+      || TREE_CODE (primary_func_tmpl_inst) != FUNCTION_DECL\n+      || ! primary_template_instantiation_p (primary_func_tmpl_inst))\n+    return NULL;\n+\n+  return DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (primary_func_tmpl_inst));\n+}\n+\n+/* Return true iff the function parameter PARAM_DECL was expanded\n+   from the function parameter pack PACK.  */\n+\n+bool\n+function_parameter_expanded_from_pack_p (tree param_decl, tree pack)\n+{\n+    if (! function_parameter_pack_p (pack))\n+      return false;\n+\n+    gcc_assert (DECL_NAME (param_decl) && DECL_NAME (pack));\n+\n+    /* The parameter pack and its pack arguments have the same\n+       DECL_PARM_INDEX.  */\n+    return DECL_PARM_INDEX (pack) == DECL_PARM_INDEX (param_decl);\n+}\n+\n /* Determine whether ARGS describes a variadic template args list,\n    i.e., one that is terminated by a template argument pack.  */\n+\n static bool \n template_args_variadic_p (tree args)\n {\n@@ -2659,6 +2704,7 @@ template_args_variadic_p (tree args)\n \n /* Generate a new name for the parameter pack name NAME (an\n    IDENTIFIER_NODE) that incorporates its */\n+\n static tree\n make_ith_pack_parameter_name (tree name, int i)\n {\n@@ -2735,7 +2781,8 @@ get_template_innermost_arguments (const_tree t)\n   return args;\n }\n \n-/* Return the arguments pack of T if T is a template, NULL otherwise.  */\n+/* Return the argument pack elements of T if T is a template argument pack,\n+   NULL otherwise.  */\n \n tree\n get_template_argument_pack_elems (const_tree t)\n@@ -8825,6 +8872,10 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n             if (DECL_TEMPLATE_PARM_P (t))\n               SET_DECL_TEMPLATE_PARM_P (r);\n \n+\t    /* An argument of a function parameter pack is not a parameter\n+\t       pack.  */\n+\t    FUNCTION_PARAMETER_PACK_P (r) = false;\n+\n             if (expanded_types)\n               /* We're on the Ith parameter of the function parameter\n                  pack.  */"}, {"sha": "f25b18b037a2068dcfb6be0fbe499aadc26f624c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 164, "deletions": 81, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -5932,7 +5932,8 @@ static dw_die_ref base_type_die (tree);\n static int is_base_type (tree);\n static dw_die_ref subrange_type_die (tree, tree, tree, dw_die_ref);\n static dw_die_ref modified_type_die (tree, int, int, dw_die_ref);\n-static dw_die_ref generic_parameter_die (tree, tree, dw_die_ref, int);\n+static dw_die_ref generic_parameter_die (tree, tree, bool, dw_die_ref);\n+static dw_die_ref template_parameter_pack_die (tree, tree, dw_die_ref);\n static int type_is_enum (const_tree);\n static unsigned int dbx_reg_number (const_rtx);\n static void add_loc_descr_op_piece (dw_loc_descr_ref *, int);\n@@ -6000,7 +6001,8 @@ static void gen_descr_array_type_die (tree, struct array_descr_info *, dw_die_re\n static void gen_entry_point_die (tree, dw_die_ref);\n #endif\n static dw_die_ref gen_enumeration_type_die (tree, dw_die_ref);\n-static dw_die_ref gen_formal_parameter_die (tree, tree, dw_die_ref);\n+static dw_die_ref gen_formal_parameter_die (tree, tree, bool, dw_die_ref);\n+static dw_die_ref gen_formal_parameter_pack_die  (tree, tree, dw_die_ref, tree*);\n static void gen_unspecified_parameters_die (tree, dw_die_ref);\n static void gen_formal_types_die (tree, dw_die_ref);\n static void gen_subprogram_die (tree, dw_die_ref);\n@@ -6032,7 +6034,6 @@ static dw_die_ref declare_in_namespace (tree, dw_die_ref);\n static struct dwarf_file_data * lookup_filename (const char *);\n static void retry_incomplete_types (void);\n static void gen_type_die_for_member (tree, tree, dw_die_ref);\n-static tree make_ith_pack_parameter_name (tree, int);\n static void gen_generic_params_dies (tree);\n static void splice_child_die (dw_die_ref, dw_die_ref);\n static int file_info_cmp (const void *, const void *);\n@@ -6337,6 +6338,10 @@ dwarf_tag_name (unsigned int tag)\n       return \"DW_TAG_condition\";\n     case DW_TAG_shared_type:\n       return \"DW_TAG_shared_type\";\n+    case DW_TAG_template_parameter_pack:\n+      return \"DW_TAG_template_parameter_pack\";\n+    case DW_TAG_formal_parameter_pack:\n+      return \"DW_TAG_formal_parameter_pack\";\n     case DW_TAG_MIPS_loop:\n       return \"DW_TAG_MIPS_loop\";\n     case DW_TAG_format_label:\n@@ -10512,27 +10517,6 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n   return mod_type_die;\n }\n \n-/* Generate a new name for the parameter pack name NAME (an\n-   IDENTIFIER_NODE) that incorporates its */\n-\n-static tree\n-make_ith_pack_parameter_name (tree name, int i)\n-{\n-  /* Munge the name to include the parameter index.  */\n-#define NUMBUF_LEN 128\n-  char numbuf[NUMBUF_LEN];\n-  char* newname;\n-  int newname_len;\n-\n-  snprintf (numbuf, NUMBUF_LEN, \"%i\", i);\n-  newname_len = IDENTIFIER_LENGTH (name)\n-\t        + strlen (numbuf) + 2;\n-  newname = (char*) alloca (newname_len);\n-  snprintf (newname, newname_len,\n-\t    \"%s#%i\", IDENTIFIER_POINTER (name), i);\n-  return get_identifier (newname);\n-}\n-\n /* Generate DIEs for the generic parameters of T.\n    T must be either a generic type or a generic function.\n    See http://gcc.gnu.org/wiki/TemplateParmsDwarf for more.  */\n@@ -10564,30 +10548,27 @@ gen_generic_params_dies (tree t)\n   args = lang_hooks.get_innermost_generic_args (t);\n   for (i = 0; i < parms_num; i++)\n     {\n-      tree parm, arg;\n+      tree parm, arg, arg_pack_elems;\n \n       parm = TREE_VEC_ELT (parms, i);\n       arg = TREE_VEC_ELT (args, i);\n+      arg_pack_elems = lang_hooks.types.get_argument_pack_elems (arg);\n+      gcc_assert (parm && TREE_VALUE (parm) && arg);\n+\n       if (parm && TREE_VALUE (parm) && arg)\n \t{\n-\t  tree pack_elems =\n-\t    lang_hooks.types.get_argument_pack_elems (arg);\n-\t  if (pack_elems)\n-\t    {\n-\t      /* So ARG is an argument pack and the elements of that pack\n-\t         are stored in PACK_ELEMS.  */\n-\t      int i, len;\n-\n-\t      len = TREE_VEC_LENGTH (pack_elems);\n-\t      for (i = 0; i < len; i++)\n-\t\tgeneric_parameter_die (TREE_VALUE (parm),\n-\t\t\t\t       TREE_VEC_ELT (pack_elems, i),\n-\t\t\t\t       die, i);\n-\t    }\n-\t  else /* Arg is not an argument pack.  */\n-\t    generic_parameter_die (TREE_VALUE (parm),\n-\t\t\t\t   arg, die,\n-\t\t\t\t   -1/* Not a param pack.  */);\n+\t  /* If PARM represents a template parameter pack,\n+\t     emit a DW_TAG_template_parameter_pack DIE, followed\n+\t     by DW_TAG_template_*_parameter DIEs for the argument\n+\t     pack elements of ARG. Note that ARG would then be\n+\t     an argument pack.  */\n+\t  if (arg_pack_elems)\n+\t    template_parameter_pack_die (TREE_VALUE (parm),\n+\t\t\t\t\t arg_pack_elems,\n+\t\t\t\t\t die);\n+\t  else\n+\t    generic_parameter_die (TREE_VALUE (parm), arg,\n+\t\t\t\t   true /* Emit DW_AT_name */, die);\n \t}\n     }\n }\n@@ -10596,15 +10577,15 @@ gen_generic_params_dies (tree t)\n    the representation of a generic type parameter.\n    For instance, in the C++ front end, PARM would be a template parameter.\n    ARG is the argument to PARM.\n+   EMIT_NAME_P if tree, the DIE will have DW_AT_name attribute set to the\n+   name of the PARM.\n    PARENT_DIE is the parent DIE which the new created DIE should be added to,\n-   as a child node.\n-   PACK_ELEM_INDEX is >= 0 if PARM is a generic parameter pack, and if ARG\n-   is one of the unpacked elements of the parameter PACK. In that case,\n-   PACK_ELEM_INDEX is the index of ARG in the parameter pack.  */\n+   as a child node.  */\n \n static dw_die_ref\n-generic_parameter_die (tree parm, tree arg, dw_die_ref parent_die,\n-\t\t       int pack_elem_index)\n+generic_parameter_die (tree parm, tree arg,\n+\t\t       bool emit_name_p,\n+\t\t       dw_die_ref parent_die)\n {\n   dw_die_ref tmpl_die = NULL;\n   const char *name = NULL;\n@@ -10637,20 +10618,17 @@ generic_parameter_die (tree parm, tree arg, dw_die_ref parent_die,\n     {\n       tree tmpl_type;\n \n-      if (pack_elem_index >= 0)\n+      /* If PARM is a generic parameter pack, it means we are\n+         emitting debug info for a template argument pack element.\n+\t In other terms, ARG is a template argument pack element.\n+\t In that case, we don't emit any DW_AT_name attribute for\n+\t the die.  */\n+      if (emit_name_p)\n \t{\n-\t  /* PARM is an element of a parameter pack.\n-\t     Generate a name for it.  */\n-\t  tree identifier = make_ith_pack_parameter_name (DECL_NAME (parm),\n-\t\t\t\t\t\t\t  pack_elem_index);\n-\t  if (identifier)\n-\t    name = IDENTIFIER_POINTER (identifier);\n+\t  name = IDENTIFIER_POINTER (DECL_NAME (parm));\n+\t  gcc_assert (name);\n+\t  add_AT_string (tmpl_die, DW_AT_name, name);\n \t}\n-      else\n-\tname = IDENTIFIER_POINTER (DECL_NAME (parm));\n-\n-      gcc_assert (name);\n-      add_AT_string (tmpl_die, DW_AT_name, name);\n \n       if (!lang_hooks.decls.generic_generic_parameter_decl_p (parm))\n \t{\n@@ -10695,6 +10673,33 @@ generic_parameter_die (tree parm, tree arg, dw_die_ref parent_die,\n   return tmpl_die;\n }\n \n+/* Generate and return a  DW_TAG_template_parameter_pack DIE representing.\n+   PARM_PACK must be a template parameter pack. The returned DIE\n+   will be child DIE of PARENT_DIE.  */\n+\n+static dw_die_ref\n+template_parameter_pack_die (tree parm_pack,\n+\t\t\t     tree parm_pack_args,\n+\t\t\t     dw_die_ref parent_die)\n+{\n+  dw_die_ref die;\n+  int j;\n+\n+  gcc_assert (parent_die\n+\t      && parm_pack\n+\t      && DECL_NAME (parm_pack));\n+\n+  die = new_die (DW_TAG_template_parameter_pack, parent_die, parm_pack);\n+  add_AT_string (die, DW_AT_name, IDENTIFIER_POINTER (DECL_NAME (parm_pack)));\n+\n+  for (j = 0; j < TREE_VEC_LENGTH (parm_pack_args); j++)\n+    generic_parameter_die (parm_pack,\n+\t\t\t   TREE_VEC_ELT (parm_pack_args, j),\n+\t\t\t   false /* Don't emit DW_AT_name */,\n+\t\t\t   die);\n+  return die;\n+}\n+\n /* Given a pointer to an arbitrary ..._TYPE tree node, return true if it is\n    an enumerated type.  */\n \n@@ -15380,10 +15385,13 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n    DIE to represent a formal parameter object (or some inlining thereof).  If\n    it's the latter, then this function is only being called to output a\n    DW_TAG_formal_parameter DIE to stand as a placeholder for some formal\n-   argument type of some subprogram type.  */\n+   argument type of some subprogram type.\n+   If EMIT_NAME_P is true, name and source coordinate attributes\n+   are emitted.  */\n \n static dw_die_ref\n-gen_formal_parameter_die (tree node, tree origin, dw_die_ref context_die)\n+gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n+\t\t\t  dw_die_ref context_die)\n {\n   tree node_or_origin = node ? node : origin;\n   dw_die_ref parm_die\n@@ -15399,7 +15407,8 @@ gen_formal_parameter_die (tree node, tree origin, dw_die_ref context_die)\n       else\n \t{\n \t  tree type = TREE_TYPE (node);\n-\t  add_name_and_src_coords_attributes (parm_die, node);\n+\t  if (emit_name_p)\n+\t    add_name_and_src_coords_attributes (parm_die, node);\n \t  if (decl_by_reference_p (node))\n \t    add_type_attribute (parm_die, TREE_TYPE (type), 0, 0,\n \t\t\t\tcontext_die);\n@@ -15432,6 +15441,49 @@ gen_formal_parameter_die (tree node, tree origin, dw_die_ref context_die)\n   return parm_die;\n }\n \n+/* Generate and return a DW_TAG_formal_parameter_pack. Also generate\n+   children DW_TAG_formal_parameter DIEs representing the arguments of the\n+   parameter pack.\n+\n+   PARM_PACK must be a function parameter pack.\n+   PACK_ARG is the first argument of the parameter pack. Its TREE_CHAIN\n+   must point to the subsequent arguments of the function PACK_ARG belongs to.\n+   SUBR_DIE is the DIE of the function PACK_ARG belongs to.\n+   If NEXT_ARG is non NULL, *NEXT_ARG is set to the function argument\n+   following the last one for which a DIE was generated.  */\n+\n+static dw_die_ref\n+gen_formal_parameter_pack_die  (tree parm_pack,\n+\t\t\t\ttree pack_arg,\n+\t\t\t\tdw_die_ref subr_die,\n+\t\t\t\ttree *next_arg)\n+{\n+  tree arg;\n+  dw_die_ref parm_pack_die;\n+\n+  gcc_assert (parm_pack\n+\t      && lang_hooks.function_parameter_pack_p (parm_pack)\n+\t      && DECL_NAME (parm_pack)\n+\t      && subr_die);\n+\n+  parm_pack_die = new_die (DW_TAG_formal_parameter_pack, subr_die, parm_pack);\n+  add_AT_string (parm_pack_die, DW_AT_name,\n+\t\t IDENTIFIER_POINTER (DECL_NAME (parm_pack)));\n+\n+  for (arg = pack_arg; arg; arg = TREE_CHAIN (arg))\n+    {\n+      if (! lang_hooks.decls.function_parm_expanded_from_pack_p (arg,\n+\t\t\t\t\t\t\t\t parm_pack))\n+\tbreak;\n+      gen_formal_parameter_die (arg, NULL,\n+\t\t\t\tfalse /* Don't emit name attribute.  */,\n+\t\t\t\tparm_pack_die);\n+    }\n+  if (next_arg)\n+    *next_arg = arg;\n+  return parm_pack_die;\n+}\n+\n /* Generate a special type of DIE used as a stand-in for a trailing ellipsis\n    at the end of an (ANSI prototyped) formal parameters list.  */\n \n@@ -15475,7 +15527,9 @@ gen_formal_types_die (tree function_or_method_type, dw_die_ref context_die)\n \tbreak;\n \n       /* Output a (nameless) DIE to represent the formal parameter itself.  */\n-      parm_die = gen_formal_parameter_die (formal_type, NULL, context_die);\n+      parm_die = gen_formal_parameter_die (formal_type, NULL,\n+\t\t\t\t\t   true /* Emit name attribute.  */,\n+\t\t\t\t\t   context_die);\n       if ((TREE_CODE (function_or_method_type) == METHOD_TYPE\n \t   && link == first_parm_type)\n \t  || (arg && DECL_ARTIFICIAL (arg)))\n@@ -15887,21 +15941,46 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   else\n     {\n       /* Generate DIEs to represent all known formal parameters.  */\n-      tree arg_decls = DECL_ARGUMENTS (decl);\n-      tree parm;\n-\n-      /* When generating DIEs, generate the unspecified_parameters DIE\n-\t instead if we come across the arg \"__builtin_va_alist\" */\n-      for (parm = arg_decls; parm; parm = TREE_CHAIN (parm))\n-\tif (TREE_CODE (parm) == PARM_DECL)\n-\t  {\n-\t    if (DECL_NAME (parm)\n-\t\t&& !strcmp (IDENTIFIER_POINTER (DECL_NAME (parm)),\n-\t\t\t    \"__builtin_va_alist\"))\n-\t      gen_unspecified_parameters_die (parm, subr_die);\n-\t    else\n+      tree parm = DECL_ARGUMENTS (decl);\n+      tree generic_decl = lang_hooks.decls.get_generic_function_decl (decl);\n+      tree generic_decl_parm = generic_decl\n+\t\t\t\t? DECL_ARGUMENTS (generic_decl)\n+\t\t\t\t: NULL;\n+\n+      /* Now we want to walk the list of parameters of the function and\n+\t emit their relevant DIEs.\n+\n+\t We consider the case of DECL being an instance of a generic function\n+\t as well as it being a normal function.\n+\n+\t If DECL is an instance of a generic function we walk the\n+\t parameters of the generic function declaration _and_ the parameters of\n+\t DECL itself. This is useful because we want to emit specific DIEs for\n+\t function parameter packs and those are declared as part of the\n+\t generic function declaration. In that particular case,\n+\t the parameter pack yields a DW_TAG_formal_parameter_pack DIE.\n+\t That DIE has children DIEs representing the set of arguments\n+\t of the pack. Note that the set of pack arguments can be empty.\n+\t In that case, the DW_TAG_formal_parameter_pack DIE will not have any\n+\t children DIE.\n+\t\n+\t Otherwise, we just consider the parameters of DECL.  */\n+      while (generic_decl_parm || parm)\n+\t{\n+\t  if (generic_decl_parm\n+\t      && lang_hooks.function_parameter_pack_p (generic_decl_parm))\n+\t    gen_formal_parameter_pack_die (generic_decl_parm,\n+\t\t\t\t\t   parm, subr_die,\n+\t\t\t\t\t   &parm);\n+\t  else if (parm)\n+\t    {\n \t      gen_decl_die (parm, NULL, subr_die);\n-\t  }\n+\t      parm = TREE_CHAIN (parm);\n+\t    }\n+\n+\t  if (generic_decl_parm)\n+\t    generic_decl_parm = TREE_CHAIN (generic_decl_parm);\n+\t}\n \n       /* Decide whether we need an unspecified_parameters DIE at the end.\n \t There are 2 more cases to do this for: 1) the ansi ... declaration -\n@@ -17489,7 +17568,9 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n       if (!origin)\n         origin = decl_ultimate_origin (decl);\n       if (origin != NULL_TREE && TREE_CODE (origin) == PARM_DECL)\n-\tgen_formal_parameter_die (decl, origin, context_die);\n+\tgen_formal_parameter_die (decl, origin,\n+\t\t\t\t  true /* Emit name attribute.  */,\n+\t\t\t\t  context_die);\n       else\n \tgen_variable_die (decl, origin, context_die);\n       break;\n@@ -17511,7 +17592,9 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n \tgen_type_die (TREE_TYPE (TREE_TYPE (decl_or_origin)), context_die);\n       else\n \tgen_type_die (TREE_TYPE (decl_or_origin), context_die);\n-      gen_formal_parameter_die (decl, origin, context_die);\n+      gen_formal_parameter_die (decl, origin,\n+\t\t\t\ttrue /* Emit name attribute.  */,\n+\t\t\t\tcontext_die);\n       break;\n \n     case NAMESPACE_DECL:"}, {"sha": "fa078adaa9a862ae294db7e87682f0ecd83ac62a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -157,8 +157,12 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_const_tree_false\n #define LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS hook_tree_const_tree_null\n #define LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS hook_tree_const_tree_null\n+#define LANG_HOOKS_FUNCTION_PARAMETER_PACK_P hook_bool_const_tree_false\n #define LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS hook_tree_const_tree_null\n #define LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P hook_bool_const_tree_false\n+#define LANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P \\\n+\t\t\t\t\thook_bool_tree_tree_false\n+#define LANG_HOOKS_GET_GENERIC_FUNCTION_DECL hook_tree_const_tree_null\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type\n #define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_const_tree\n@@ -214,6 +218,8 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GETDECLS, \\\n   LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P, \\\n   LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P, \\\n+  LANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P, \\\n+  LANG_HOOKS_GET_GENERIC_FUNCTION_DECL, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_DECL_OK_FOR_SIBCALL, \\\n@@ -268,6 +274,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_FOR_TYPES_INITIALIZER, \\\n   LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS, \\\n   LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS, \\\n+  LANG_HOOKS_FUNCTION_PARAMETER_PACK_P, \\\n   LANG_HOOKS_GIMPLIFY_EXPR, \\\n   LANG_HOOKS_FOLD_OBJ_TYPE_REF, \\\n   LANG_HOOKS_BUILTIN_FUNCTION, \\"}, {"sha": "ab640403df7185754e32b60214a9c4e2ad483a82", "filename": "gcc/langhooks.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -172,6 +172,13 @@ struct lang_hooks_for_decls\n      of a generic type, e.g a template template parameter for the C++ FE.  */\n   bool (*generic_generic_parameter_decl_p) (const_tree);\n \n+  /* Determine if a function parameter got expanded from a\n+     function parameter pack.  */\n+  bool (*function_parm_expanded_from_pack_p) (tree, tree);\n+\n+  /* Returns the generic declaration of a generic function instantiations.  */\n+  tree (*get_generic_function_decl) (const_tree);\n+\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) (const_tree);\n@@ -379,14 +386,17 @@ struct lang_hooks\n \n   struct lang_hooks_for_types types;\n \n-  /* Retuns the generic parameters of an instantiation of\n+  /* Returns the generic parameters of an instantiation of\n      a generic type or decl, e.g. C++ template instantiation.  */\n   tree (*get_innermost_generic_parms) (const_tree);\n \n   /* Returns the TREE_VEC of arguments of an instantiation\n      of a generic type of decl, e.g. C++ template instantiation.  */\n   tree (*get_innermost_generic_args) (const_tree);\n \n+  /* Determine if a tree is a function parameter pack.  */\n+  bool (*function_parameter_pack_p) (const_tree);\n+\n   /* Perform language-specific gimplification on the argument.  Returns an\n      enum gimplify_status, though we can't see that type here.  */\n   int (*gimplify_expr) (tree *, gimple_seq *, gimple_seq *);"}, {"sha": "efd31a705a9942987a623ba0f33d4b0f4ef1cdec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -1,3 +1,9 @@\n+2009-09-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/template-func-params-4.C: Adjust.\n+\t* g++.dg/debug/dwarf2/template-func-params-7.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-params-4.C: Likewise.\n+\n 2009-09-22  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/41295"}, {"sha": "f75d0e669998cd80483cf37d6f893eb76010bfc3", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-4.C", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-4.C?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -1,10 +1,16 @@\n // Contributed by Dodji Seketeli <dodji@redhat.com>\n // Origin PR debug/30161\n // { dg-options \"-std=c++0x -g -dA\" }\n-// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n-// { dg-final { scan-assembler \"DW_AT_name.*P#0\" } }\n-// { dg-final { scan-assembler \"DW_AT_name.*P#1\" } }\n-// { dg-final { scan-assembler \"DW_AT_name.*P#2\" } }\n+//\n+// In theory the compiler instantiates count<int, char, long>,\n+// count<char, long> and count<long>. In practice, only\n+// count<int, char, long> is emitted, thanks to constant folding.\n+// So in theory, each of the 3 instances of count yields a\n+// DW_TAG_tempalate_parameter_pack DIE, but in practise, there is only one\n+// DW_TAG_template_parameter_pack as there is only count<int, char, long>\n+// is emitted.\n+// { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_template_parameter_pack\" 1} }\n+// { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_template_type_param\" 3} }\n \n \n template <typename... Args> struct count;"}, {"sha": "8a883f832ff099a9b5bfd20059baefc567633673", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-7.C", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-7.C?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -16,17 +16,15 @@\n // { dg-final {scan-assembler-times \"\\\"printf.0\\\".*?DW_AT_name\" 1 } }\n \n // printf<int, char, int> and printf<char, int> have a pack expansion as\n-// function parameters. In the former, the elements of the parameter pack\n-// expansion are PackTypes#0, PackTypes#1 and the arguments are args#0 and\n-// args#1. In the later, the element of the parameter pack expansion\n-// is PackTypes#0 and the argument is args#0.\n-// { dg-final {scan-assembler-times \"DW_AT_name: \\\"PackTypes#0\\\"\" 2 } }\n-// { dg-final {scan-assembler-times \"\\\"args#0.0\\\".*?DW_AT_name\" 2 } }\n-// { dg-final {scan-assembler-times \"\\\"PackTypes#1.0\\\".*?DW_AT_name\" 1 } }\n-// { dg-final {scan-assembler-times \"\\\"args#1.0\\\".*?DW_AT_name\" 1 } }\n-\n+// function parameters. There should then be 3\n+// DW_TAG_template_parameter_pack and 3 DW_TAG_formal_parameter_pack DIEs\n+// { dg-final {scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_template_parameter_pack\" 3 } }\n+// { dg-final {scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_formal_parameter_pack\" 3 } }\n+// These 3 function template instantiations has a total of 3 template\n+// parameters named T.\n // { dg_final {scan-assembler-times \"\\.ascii \\\"T.0\\\"\\[\\t \\]+.*?DW_AT_name\" 3 } }\n \n+\n void\n printf(const char* s)\n {"}, {"sha": "e83ef61e060edd15af5130b4dada3d0d2f16c5cd", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-4.C", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-4.C?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -1,10 +1,16 @@\n // Contributed by Dodji Seketeli <dodji@redhat.com>\n // Origin PR debug/30161\n // { dg-options \"-std=c++0x -g -dA\" }\n-// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n-// { dg-final { scan-assembler \"DW_AT_name.*Args#0\" } }\n-// { dg-final { scan-assembler \"DW_AT_name.*Args#1\" } }\n-// { dg-final { scan-assembler \"DW_AT_name.*Args#2\" } }\n+//\n+// In theory the compiler instantiates count<int, char, long>,\n+// count<char, long> and count<long>. In practice, only\n+// count<int, char, long> is emitted, thanks to constant folding.\n+// So in theory, each of the 3 instances of count yields a\n+// DW_TAG_tempalate_parameter_pack DIE, but in practise, there is only one\n+// DW_TAG_template_parameter_pack as there is only count<int, char, long>\n+// is emitted.\n+// { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_template_parameter_pack\" 1} }\n+// { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_template_type_param\" 3} }\n \n template <typename... Args> struct count;\n "}, {"sha": "3ba01d2a8ce0b35935e1cd8d1bf76c61a870e071", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -1,3 +1,8 @@\n+2009-09-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* dwarf2.h (enum dwarf_tag): Add\n+\tDW_TAG_template_parameter_pack and DW_TAG_formal_parameter_pack.\n+\n 2009-07-24  Ian Lance Taylor  <iant@google.com>\n \n \tPR bootstrap/40854"}, {"sha": "608f7b5d84943df4a65f71418ce424d65d415f13", "filename": "include/dwarf2.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40a19da1370ab4930788ede0a5c9e9171a16656/include%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40a19da1370ab4930788ede0a5c9e9171a16656/include%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.h?ref=d40a19da1370ab4930788ede0a5c9e9171a16656", "patch": "@@ -200,6 +200,14 @@ enum dwarf_tag\n     DW_TAG_lo_user = 0x4080,\n     DW_TAG_hi_user = 0xffff,\n \n+    /* DWARF 5?  */\n+\n+    /* Template parameter pack extension, specified at\n+       http://wiki.dwarfstd.org/index.php?title=C%2B%2B0x:_Variadic_templates\n+       .  */\n+    DW_TAG_template_parameter_pack = 0x43,\n+    DW_TAG_formal_parameter_pack = 0x44,\n+\n     /* SGI/MIPS Extensions.  */\n     DW_TAG_MIPS_loop = 0x4081,\n     /* HP extensions.  See: ftp://ftp.hp.com/pub/lang/tools/WDB/wdb-4.0.tar.gz .  */"}]}