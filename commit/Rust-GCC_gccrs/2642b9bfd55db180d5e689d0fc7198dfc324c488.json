{"sha": "2642b9bfd55db180d5e689d0fc7198dfc324c488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0MmI5YmZkNTVkYjE4MGQ1ZTY4OWQwZmM3MTk4ZGZjMzI0YzQ4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-12-07T12:27:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-12-07T12:27:47Z"}, "message": "decl.c (build_typename_type): Set DECL_ARTIFICIAL.\n\n\t* decl.c (build_typename_type): Set DECL_ARTIFICIAL.\n\t* error.c (dump_simple_decl): Also print namespace context.\n\t(dump_function_decl): Likewise.\n\t* decl2.c (ambiguous_decl): Don't print old value if it's\n\terror_mark_node.\n\t* decl.c (lookup_name_real): Fix handling of local types shadowed\n\tby a non-type decl.  Remove obsolete code.\n\t* cp-tree.h (DECL_FUNCTION_SCOPE_P): New macro.\nFixes g++.other/lookup6.C\n\t* lang-options.h: Add -fpermissive.\n\t* decl2.c: Likewise.\n\t* cp-tree.h: Add flag_permissive.\n\t* decl.c (init_decl_processing): If neither -fpermissive or -pedantic\n\twere specified, set flag_pedantic_errors.\n\t* call.c (build_over_call): Turn dropped qualifier messages\n\tback into pedwarns.\n\t* cvt.c (convert_to_reference): Likewise.\n\t* typeck.c (convert_for_assignment): Likewise.\n\nFrom-SVN: r24150", "tree": {"sha": "61a5095972adc3591e1963f1c5ff3aaa2ece1564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61a5095972adc3591e1963f1c5ff3aaa2ece1564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2642b9bfd55db180d5e689d0fc7198dfc324c488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2642b9bfd55db180d5e689d0fc7198dfc324c488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2642b9bfd55db180d5e689d0fc7198dfc324c488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2642b9bfd55db180d5e689d0fc7198dfc324c488/comments", "author": null, "committer": null, "parents": [{"sha": "1db9f6ceae87ca6417ef1d64a66d27d4c9355a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db9f6ceae87ca6417ef1d64a66d27d4c9355a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db9f6ceae87ca6417ef1d64a66d27d4c9355a06"}], "stats": {"total": 139, "additions": 101, "deletions": 38}, "files": [{"sha": "25e53036020f75c2e7d433372c07f74d559dce25", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -1,3 +1,27 @@\n+1998-12-07  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (build_typename_type): Set DECL_ARTIFICIAL.\n+\n+\t* error.c (dump_simple_decl): Also print namespace context.\n+\t(dump_function_decl): Likewise.\n+\n+\t* decl2.c (ambiguous_decl): Don't print old value if it's\n+\terror_mark_node.\n+\n+\t* decl.c (lookup_name_real): Fix handling of local types shadowed\n+\tby a non-type decl.  Remove obsolete code.\n+\t* cp-tree.h (DECL_FUNCTION_SCOPE_P): New macro.\n+\n+\t* lang-options.h: Add -fpermissive.\n+\t* decl2.c: Likewise.\n+\t* cp-tree.h: Add flag_permissive.\n+\t* decl.c (init_decl_processing): If neither -fpermissive or -pedantic\n+\twere specified, set flag_pedantic_errors.\n+\t* call.c (build_over_call): Turn dropped qualifier messages\n+\tback into pedwarns.\n+\t* cvt.c (convert_to_reference): Likewise.\n+\t* typeck.c (convert_for_assignment): Likewise.\n+\n 1998-12-05  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (coerce_new_type): Use same_type_p."}, {"sha": "0cdcc229a4e1263789ab3cc46947221c2e02de6d", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -1,3 +1,9 @@\n+*** Changes since EGCS 1.1:\n+\n+* Messages about non-conformant code that we can still handle (\"pedwarns\")\n+  are now errors by default, rather than warnings.  This can be reverted\n+  with -fpermissive, and is overridden by -pedantic or -pedantic-errors.\n+\n *** Changes in EGCS 1.1:\n \n * Namespaces are fully supported.  The library has not yet been converted "}, {"sha": "dd1f33b7e66a307d09ede558ddc74f714f0ed726", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -3258,8 +3258,8 @@ build_over_call (cand, args, flags)\n       tree argtype = TREE_TYPE (TREE_VALUE (arg));\n       tree t;\n       if (ICS_BAD_FLAG (TREE_VEC_ELT (convs, i)))\n-\tcp_error (\"passing `%T' as `this' argument of `%#D' discards qualifiers\",\n-\t\t  TREE_TYPE (argtype), fn);\n+\tcp_pedwarn (\"passing `%T' as `this' argument of `%#D' discards qualifiers\",\n+\t\t    TREE_TYPE (argtype), fn);\n \n       /* [class.mfct.nonstatic]: If a nonstatic member function of a class\n \t X is called for an object that is not of type X, or of a type"}, {"sha": "a515d66a79a7fb412b866f5dc794ce2d104d1d8a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -498,11 +498,14 @@ extern int flag_optional_diags;\n \n /* Nonzero means do not consider empty argument prototype to mean function\n    takes no arguments.  */\n-\n extern int flag_strict_prototype;\n \n /* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n extern int flag_vtable_gc;\n+\n+/* Nonzero means make the default pedwarns warnings instead of errors.\n+   The value of this flag is ignored if -pedantic is specified.  */\n+int flag_permissive;\n \f\n /* C++ language-specific tree codes.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n@@ -1286,6 +1289,11 @@ struct lang_decl\n   (DECL_CONTEXT (NODE) \\\n    && TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (NODE))) == 't')\n \n+/* 1 iff NODE is function-local.  */\n+#define DECL_FUNCTION_SCOPE_P(NODE) \\\n+  (DECL_CONTEXT (NODE) \\\n+   && TREE_CODE (DECL_CONTEXT (NODE)) == FUNCTION_DECL)\n+     \n /* For a NAMESPACE_DECL: the list of using namespace directives\n    The PURPOSE is the used namespace, the value is the namespace\n    that is the common ancestor. */"}, {"sha": "17363b6fccccdd2132a16dd1c0aab123ca35dfb9", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -468,13 +468,13 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n \t      else\n \t\tmsg = \"conversion to non-const reference type `%#T'\";\n \n-\t      cp_error (msg, reftype);\n-\t      cp_error (\"from rvalue of type `%T'\", intype);\n+\t      cp_pedwarn (msg, reftype);\n+\t      cp_pedwarn (\"from rvalue of type `%T'\", intype);\n \t    }\n \t  else if (! (convtype & CONV_CONST)\n \t\t   && !at_least_as_qualified_p (ttl, ttr))\n-\t    cp_error (\"conversion from `%T' to `%T' discards qualifiers\",\n-\t\t      ttr, reftype);\n+\t    cp_pedwarn (\"conversion from `%T' to `%T' discards qualifiers\",\n+\t\t\tttr, reftype);\n \t}\n \n       return build_up_reference (reftype, expr, flags);"}, {"sha": "260053b3bc4a2cc560d0d5af065a7eef4395d9a0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -4834,6 +4834,7 @@ build_typename_type (context, name, fullname, base_type)\n   TYPE_NAME (TREE_TYPE (d)) = d;\n   TYPE_STUB_DECL (TREE_TYPE (d)) = d;\n   DECL_CONTEXT (d) = FROB_CONTEXT (context);\n+  DECL_ARTIFICIAL (d) = 1;\n \n   /* See if we already have this type.  */\n   e = hash_lookup (&ht, t, /*create=*/false, /*copy=*/0);\n@@ -5166,8 +5167,22 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \n   locval = classval = NULL_TREE;\n \n-  if (! namespace_bindings_p ())\n-    locval = qualify_lookup (IDENTIFIER_LOCAL_VALUE (name), flags);\n+  if (! namespace_bindings_p () && IDENTIFIER_LOCAL_VALUE (name))\n+    {\n+      locval = qualify_lookup (IDENTIFIER_LOCAL_VALUE (name), flags);\n+\n+      /* Kludge kludge kludge */\n+      if (locval == NULL_TREE && prefer_type)\n+\t{\n+\t  locval = REAL_IDENTIFIER_TYPE_VALUE (name);\n+\t  if (locval && locval != global_type_node\n+\t      && TYPE_NAME (locval)\n+\t      && DECL_FUNCTION_SCOPE_P (TYPE_NAME (locval)))\n+\t    locval = TYPE_NAME (locval);\n+\t  else\n+\t    locval = NULL_TREE;\n+\t}\n+    }\n \n   /* In C++ class fields are between local and global scope,\n      just before the global scope.  */\n@@ -5308,17 +5323,6 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t    val = from_obj;\n \t}\n \n-      if ((TREE_CODE (val) == TEMPLATE_DECL && looking_for_template)\n-\t  || TREE_CODE (val) == TYPE_DECL || prefer_type <= 0)\n-\t;\n-      /* Caller wants a class-or-namespace-name. */\n-      else if (prefer_type == 1 && TREE_CODE (val) == NAMESPACE_DECL)\n-\t;\n-      else if (IDENTIFIER_HAS_TYPE_VALUE (name))\n-\tval = TYPE_MAIN_DECL (IDENTIFIER_TYPE_VALUE (name));\n-      else if (TREE_TYPE (val) == error_mark_node)\n-\tval = error_mark_node;\n-\n       /* If we have a single function from a using decl, pull it out.  */\n       if (TREE_CODE (val) == OVERLOAD && ! really_overloaded_fn (val))\n \tval = OVL_FUNCTION (val);\n@@ -5620,6 +5624,8 @@ init_decl_processing ()\n \n   if (flag_strict_prototype == 2)\n     flag_strict_prototype = pedantic;\n+  if (! flag_permissive && ! pedantic)\n+    flag_pedantic_errors = 1;\n \n   strict_prototypes_lang_c = flag_strict_prototype;\n "}, {"sha": "7f32cf8ba80c72910f0c6391858853458c575994", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -445,6 +445,11 @@ int flag_do_squangling;\n \n int flag_vtable_gc;\n \n+/* Nonzero means make the default pedwarns warnings instead of errors.\n+   The value of this flag is ignored if -pedantic is specified.  */\n+\n+int flag_permissive;\n+\n /* Table of language-dependent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n@@ -488,6 +493,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n   {\"operator-names\", &flag_operator_names, 1},\n   {\"optional-diags\", &flag_optional_diags, 1},\n+  {\"permissive\", &flag_permissive, 1},\n   {\"repo\", &flag_use_repository, 1},\n   {\"rtti\", &flag_rtti, 1},\n   {\"squangle\", &flag_do_squangling, 1},\n@@ -4115,9 +4121,15 @@ ambiguous_decl (name, old, new, flags)\n \t  /* Some declarations are functions, some are not. */\n           if (flags & LOOKUP_COMPLAIN)\n             {\n-              cp_error (\"use of `%D' is ambiguous\", name);\n-              cp_error_at (\"  first declared as `%#D' here\",\n-                           BINDING_VALUE (old));\n+\t      /* If we've already given this error for this lookup,\n+\t\t BINDING_VALUE (old) is error_mark_node, so let's not\n+\t\t repeat ourselves.  */\n+\t      if (BINDING_VALUE (old) != error_mark_node)\n+\t\t{\n+\t\t  cp_error (\"use of `%D' is ambiguous\", name);\n+\t\t  cp_error_at (\"  first declared as `%#D' here\",\n+\t\t\t       BINDING_VALUE (old));\n+\t\t}\n               cp_error_at (\"  also declared as `%#D' here\", val);\n             }\n \t  return error_mark_node;"}, {"sha": "fba5005b5df56799c7129c0bb35310695bb5d2a3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -679,10 +679,10 @@ dump_simple_decl (t, type, v)\n       dump_type_prefix (type, v, 0);\n       OB_PUTC (' ');\n     }\n-  if (DECL_CLASS_SCOPE_P (t))\n+  if (CP_DECL_CONTEXT (t) != global_namespace)\n     {\n-      dump_type (DECL_CONTEXT (t), 0);\n-      OB_PUTC2 (':', ':');\n+      dump_decl (DECL_CONTEXT (t), 0);\n+      OB_PUTC2 (':',':');\n     }\n   if (DECL_NAME (t))\n     dump_decl (DECL_NAME (t), v);\n@@ -965,7 +965,7 @@ dump_function_decl (t, v)\n   parmtypes = TYPE_ARG_TYPES (fntype);\n \n   /* Friends have DECL_CLASS_CONTEXT set, but not DECL_CONTEXT.  */\n-  if (DECL_CONTEXT (t))\n+  if (DECL_CLASS_SCOPE_P (t))\n     cname = DECL_CLASS_CONTEXT (t);\n   /* this is for partially instantiated template methods */\n   else if (TREE_CODE (fntype) == METHOD_TYPE)\n@@ -997,6 +997,11 @@ dump_function_decl (t, v)\n \t/* Skip past \"in_charge\" identifier.  */\n \tparmtypes = TREE_CHAIN (parmtypes);\n     }\n+  else if (CP_DECL_CONTEXT (t) != global_namespace)\n+    {\n+      dump_decl (DECL_CONTEXT (t), 0);\n+      OB_PUTC2 (':',':');\n+    }\n \n   if (DESTRUCTOR_NAME_P (name) && DECL_LANGUAGE (t) == lang_cplusplus)\n     parmtypes = TREE_CHAIN (parmtypes);"}, {"sha": "f9cfa8c85d500531043193038f8c38db31300d85", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -82,6 +82,8 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fno-operator-names\", \"\" },\n   { \"-foptional-diags\", \"\" },\n   { \"-fno-optional-diags\", \"Disable optional diagnostics\" },\n+  { \"-fpermissive\", \"Downgrade conformance errors to warnings\" },\n+  { \"-fno-permissive\", \"\" },\n   { \"-frepo\", \"Enable automatic template instantiation\" },\n   { \"-fno-repo\", \"\" },\n   { \"-fsave-memoized\", \"\" },"}, {"sha": "3543cf5ffcf40d6c5b7c1793c034b1a4be6c501f", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -2918,7 +2918,7 @@ do_identifier (token, parsing, args)\n       else\n \t{\n \t  cp_error (\"invalid use of member `%D' from base class `%T'\", field,\n-\t\t      DECL_FIELD_CONTEXT (field));\n+\t\t    DECL_FIELD_CONTEXT (field));\n \t  id = error_mark_node;\n \t  return id;\n \t}"}, {"sha": "58f42d2ffa5838581440a4bfc0df5e19f6ca2d78", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -6618,11 +6618,11 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t  if (!at_least_as_qualified_p (ttl, ttr))\n \t    {\n \t      if (fndecl)\n-\t\tcp_error (\"passing `%T' as argument %P of `%D' discards qualifiers\",\n-\t\t\t  rhstype, parmnum, fndecl);\n+\t\tcp_pedwarn (\"passing `%T' as argument %P of `%D' discards qualifiers\",\n+\t\t\t    rhstype, parmnum, fndecl);\n \t      else\n-\t\tcp_error (\"%s to `%T' from `%T' discards qualifiers\",\n-\t\t\t  errtype, type, rhstype);\n+\t\tcp_pedwarn (\"%s to `%T' from `%T' discards qualifiers\",\n+\t\t\t    errtype, type, rhstype);\n \t    }\n \t}\n \n@@ -6675,10 +6675,10 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t\t  if (string_conv_p (type, rhs, 1))\n \t\t    /* converting from string constant to char *, OK.  */;\n \t\t  else if (fndecl)\n-\t\t    cp_error (\"passing `%T' as argument %P of `%D' discards qualifiers\",\n-\t\t\t      rhstype, parmnum, fndecl);\n+\t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards qualifiers\",\n+\t\t\t\trhstype, parmnum, fndecl);\n \t\t  else\n-\t\t    cp_error (\"%s to `%T' from `%T' discards qualifiers\",\n+\t\t    cp_pedwarn (\"%s to `%T' from `%T' discards qualifiers\",\n \t\t\t\terrtype, type, rhstype);\n \t\t}\n \t      else if (TREE_CODE (ttl) == TREE_CODE (ttr)\n@@ -6739,10 +6739,10 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t      if (drops_quals)\n \t\t{\n \t\t  if (fndecl)\n-\t\t    cp_error (\"passing `%T' as argument %P of `%D' discards qualifiers\",\n-\t\t\t      rhstype, parmnum, fndecl);\n+\t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards qualifiers\",\n+\t\t\t\trhstype, parmnum, fndecl);\n \t\t  else\n-\t\t    cp_error (\"%s to `%T' from `%T' discards qualifiers\",\n+\t\t    cp_pedwarn (\"%s to `%T' from `%T' discards qualifiers\",\n \t\t\t\terrtype, type, rhstype);\n \t\t}\n \t      if (unsigned_parity > 0)"}]}