{"sha": "18dae0162f33745cb9a100029b124c5c14f402e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThkYWUwMTYyZjMzNzQ1Y2I5YTEwMDAyOWIxMjRjNWMxNGY0MDJlNA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-20T08:47:27Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-20T08:47:27Z"}, "message": "tree.h (enum size_type_kind): Add stk_ prefix to constants, convert in lowercase.\n\n2012-03-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* tree.h (enum size_type_kind): Add stk_ prefix to constants,\n\tconvert in lowercase.\n\t(sizetype_tab, sizetype, bitsizetype, ssizetype, sbitsizetype)\n\t(size_int, ssize_int, bitsize_int, sbitsize_int): Adjust.\n\t* stor-layout.c (sizetype_tab): Adjust.\n\t(initialize_sizetypes): Use SIZETYPE instead of SIZE_TYPE.\n\t* tree-streamer.c (preload_common_nodes): Use stk_type_kind_last\n\tinstead of type_kind_last.\n\t* tree-scalar-evolution.c (interpret_rhs_expr): Use size_int\n\tinstead of size_int_kind.\n\t* doc/tm.texi.in (Type Layout): Document SIZETYPE.\n\t* doc/tm.texi: Regenerate.\n\t* defaults.h (SIZETYPE): Provide a default value.\n\t* config/vms/vms.h (SIZE_TYPE): Define as \"unsigned int\".\n\t(SIZETYPE): Define.\n\nFrom-SVN: r185561", "tree": {"sha": "15e5a2cdf90de1c7598303847d54dcbe95549488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15e5a2cdf90de1c7598303847d54dcbe95549488"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18dae0162f33745cb9a100029b124c5c14f402e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18dae0162f33745cb9a100029b124c5c14f402e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18dae0162f33745cb9a100029b124c5c14f402e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18dae0162f33745cb9a100029b124c5c14f402e4/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d924186175c76c6183f03fbabdd09748aac43208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d924186175c76c6183f03fbabdd09748aac43208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d924186175c76c6183f03fbabdd09748aac43208"}], "stats": {"total": 98, "additions": 74, "deletions": 24}, "files": [{"sha": "bf9d56f6a8d86b8777a7bddf895a1ea88932d1cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -1,3 +1,21 @@\n+2012-03-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* tree.h (enum size_type_kind): Add stk_ prefix to constants,\n+\tconvert in lowercase.\n+\t(sizetype_tab, sizetype, bitsizetype, ssizetype, sbitsizetype)\n+\t(size_int, ssize_int, bitsize_int, sbitsize_int): Adjust.\n+\t* stor-layout.c (sizetype_tab): Adjust.\n+\t(initialize_sizetypes): Use SIZETYPE instead of SIZE_TYPE.\n+\t* tree-streamer.c (preload_common_nodes): Use stk_type_kind_last\n+\tinstead of type_kind_last.\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): Use size_int\n+\tinstead of size_int_kind.\n+\t* doc/tm.texi.in (Type Layout): Document SIZETYPE.\n+\t* doc/tm.texi: Regenerate.\n+\t* defaults.h (SIZETYPE): Provide a default value.\n+\t* config/vms/vms.h (SIZE_TYPE): Define as \"unsigned int\".\n+\t(SIZETYPE): Define.\n+\n 2012-03-20  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md: Use braced string notation where applicable."}, {"sha": "47028c8a03c277eb65cd4d522746de84a50fb62e", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -60,15 +60,18 @@ extern void vms_c_register_includes (const char *, const char *, int);\n #define POINTER_SIZE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? 32 : 64)\n #define POINTERS_EXTEND_UNSIGNED 0\n \n-/* FIXME: It should always be a 32 bit type.  */\n+/* Always a 32 bit type.  */\n #undef SIZE_TYPE\n-#define SIZE_TYPE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? \\\n-\t\t   \"unsigned int\" : \"long long unsigned int\")\n+#define SIZE_TYPE  \"unsigned int\"\n+\n /* ???: Defined as a 'int' by dec-c, but obstack.h doesn't like it.  */\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? \\\n                       \"int\" : \"long long int\")\n \n+#define SIZETYPE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? \\\n+\t\t  \"unsigned int\" : \"long long unsigned int\")\n+\n #define C_COMMON_OVERRIDE_OPTIONS vms_c_common_override_options ()\n \n /* VMS doesn't support other sections than .text for code.  */"}, {"sha": "296bb6a9ce6b57d56082c5159666bc51470db883", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -582,6 +582,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define SIZE_TYPE \"long unsigned int\"\n #endif\n \n+#ifndef SIZETYPE\n+#define SIZETYPE SIZE_TYPE\n+#endif\n+\n #ifndef PID_TYPE\n #define PID_TYPE \"int\"\n #endif"}, {"sha": "2891bb662318e2b72a6348073e065af30aadb2ad", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -1642,6 +1642,18 @@ If you don't define this macro, the default is @code{\"long unsigned\n int\"}.\n @end defmac\n \n+@defmac SIZETYPE\n+GCC defines internal types (@code{sizetype}, @code{ssizetype},\n+@code{bitsizetype} and @code{sbitsizetype}) for expressions\n+dealing with size.  This macro is a C expression for a string describing\n+the name of the data type from which the precision of @code{sizetype}\n+is extracted.\n+\n+The string has the same restrictions as @code{SIZE_TYPE} string.\n+\n+If you don't define this macro, the default is @code{SIZE_TYPE}.\n+@end defmac\n+\n @defmac PTRDIFF_TYPE\n A C expression for a string describing the name of the data type to use\n for the result of subtracting two pointers.  The typedef name"}, {"sha": "a222654ac1fec92f943c7fd8e5d24acb00e27c10", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -1630,6 +1630,18 @@ If you don't define this macro, the default is @code{\"long unsigned\n int\"}.\n @end defmac\n \n+@defmac SIZETYPE\n+GCC defines internal types (@code{sizetype}, @code{ssizetype},\n+@code{bitsizetype} and @code{sbitsizetype}) for expressions\n+dealing with size.  This macro is a C expression for a string describing\n+the name of the data type from which the precision of @code{sizetype}\n+is extracted.\n+\n+The string has the same restrictions as @code{SIZE_TYPE} string.\n+\n+If you don't define this macro, the default is @code{SIZE_TYPE}.\n+@end defmac\n+\n @defmac PTRDIFF_TYPE\n A C expression for a string describing the name of the data type to use\n for the result of subtracting two pointers.  The typedef name"}, {"sha": "2d3f92e202f9cc909b378805b61c34244a92bf47", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -44,7 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Data type for the expressions representing sizes of data types.\n    It is the first integer type laid out.  */\n-tree sizetype_tab[(int) TYPE_KIND_LAST];\n+tree sizetype_tab[(int) stk_type_kind_last];\n \n /* If nonzero, this is an upper limit on alignment of structure fields.\n    The value is measured in bits.  */\n@@ -2389,13 +2389,13 @@ initialize_sizetypes (void)\n   int precision, bprecision;\n \n   /* Get sizetypes precision from the SIZE_TYPE target macro.  */\n-  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n+  if (strcmp (SIZETYPE, \"unsigned int\") == 0)\n     precision = INT_TYPE_SIZE;\n-  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n+  else if (strcmp (SIZETYPE, \"long unsigned int\") == 0)\n     precision = LONG_TYPE_SIZE;\n-  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n+  else if (strcmp (SIZETYPE, \"long long unsigned int\") == 0)\n     precision = LONG_LONG_TYPE_SIZE;\n-  else if (strcmp (SIZE_TYPE, \"short unsigned int\") == 0)\n+  else if (strcmp (SIZETYPE, \"short unsigned int\") == 0)\n     precision = SHORT_TYPE_SIZE;\n   else\n     gcc_unreachable ();"}, {"sha": "c6631b856b89f61494e8d6774da35b8c320833ab", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -1758,7 +1758,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n \t    {\n \t      gcc_assert ((bitpos % BITS_PER_UNIT) == 0);\n \n-\t      unitpos = size_int_kind (bitpos / BITS_PER_UNIT, SIZETYPE);\n+\t      unitpos = size_int (bitpos / BITS_PER_UNIT);\n \t      chrec3 = analyze_scalar_evolution (loop, unitpos);\n \t      chrec3 = chrec_convert (TREE_TYPE (unitpos), chrec3, at_stmt);\n \t      res = chrec_fold_plus (type, res, chrec3);"}, {"sha": "f7c15178e67c09706f047a2fbf55e5fc9f00a6b0", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -293,7 +293,7 @@ preload_common_nodes (struct streamer_tree_cache_d *cache)\n     if (i != itk_char)\n       record_common_node (cache, integer_types[i]);\n \n-  for (i = 0; i < TYPE_KIND_LAST; i++)\n+  for (i = 0; i < stk_type_kind_last; i++)\n     record_common_node (cache, sizetype_tab[i]);\n \n   for (i = 0; i < TI_MAX; i++)"}, {"sha": "da6be99805406869d5492ec2e3f3f8a4053723b1", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18dae0162f33745cb9a100029b124c5c14f402e4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=18dae0162f33745cb9a100029b124c5c14f402e4", "patch": "@@ -4787,18 +4787,19 @@ extern HOST_WIDE_INT int_byte_position (const_tree);\n \n enum size_type_kind\n {\n-  SIZETYPE,\t\t/* Normal representation of sizes in bytes.  */\n-  SSIZETYPE,\t\t/* Signed representation of sizes in bytes.  */\n-  BITSIZETYPE,\t\t/* Normal representation of sizes in bits.  */\n-  SBITSIZETYPE,\t\t/* Signed representation of sizes in bits.  */\n-  TYPE_KIND_LAST};\n+  stk_sizetype,\t\t/* Normal representation of sizes in bytes.  */\n+  stk_ssizetype,\t/* Signed representation of sizes in bytes.  */\n+  stk_bitsizetype,\t/* Normal representation of sizes in bits.  */\n+  stk_sbitsizetype,\t/* Signed representation of sizes in bits.  */\n+  stk_type_kind_last\n+};\n \n-extern GTY(()) tree sizetype_tab[(int) TYPE_KIND_LAST];\n+extern GTY(()) tree sizetype_tab[(int) stk_type_kind_last];\n \n-#define sizetype sizetype_tab[(int) SIZETYPE]\n-#define bitsizetype sizetype_tab[(int) BITSIZETYPE]\n-#define ssizetype sizetype_tab[(int) SSIZETYPE]\n-#define sbitsizetype sizetype_tab[(int) SBITSIZETYPE]\n+#define sizetype sizetype_tab[(int) stk_sizetype]\n+#define bitsizetype sizetype_tab[(int) stk_bitsizetype]\n+#define ssizetype sizetype_tab[(int) stk_ssizetype]\n+#define sbitsizetype sizetype_tab[(int) stk_sbitsizetype]\n \n extern tree size_int_kind (HOST_WIDE_INT, enum size_type_kind);\n #define size_binop(CODE,T1,T2)\\\n@@ -4808,10 +4809,10 @@ extern tree size_binop_loc (location_t, enum tree_code, tree, tree);\n    size_diffop_loc (UNKNOWN_LOCATION, T1, T2)\n extern tree size_diffop_loc (location_t, tree, tree);\n \n-#define size_int(L) size_int_kind (L, SIZETYPE)\n-#define ssize_int(L) size_int_kind (L, SSIZETYPE)\n-#define bitsize_int(L) size_int_kind (L, BITSIZETYPE)\n-#define sbitsize_int(L) size_int_kind (L, SBITSIZETYPE)\n+#define size_int(L) size_int_kind (L, stk_sizetype)\n+#define ssize_int(L) size_int_kind (L, stk_ssizetype)\n+#define bitsize_int(L) size_int_kind (L, stk_bitsizetype)\n+#define sbitsize_int(L) size_int_kind (L, stk_sbitsizetype)\n \n #define round_up(T,N) round_up_loc (UNKNOWN_LOCATION, T, N)\n extern tree round_up_loc (location_t, tree, int);"}]}