{"sha": "89851e4c1363247b62cbff5a495317f582931c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4NTFlNGMxMzYzMjQ3YjYyY2JmZjVhNDk1MzE3ZjU4MjkzMWMwYw==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-06-10T08:46:55Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-06-10T08:46:55Z"}, "message": "re PR tree-optimization/71407 (ICE at -O3 in 32-bit and 64-bit modes on x86_64-linux-gnu (verify_gimple: integral result type precision does not match field size of BIT_FIELD_REF))\n\n2016-06-10  Alan Hayward  <alan.hayward@arm.com>\n\ngcc/\n\tPR tree-optimization/71407\n\tPR tree-optimization/71416\n\t* tree-vect-loop.c (vectorizable_live_operation): Use vectype for\n\tBIT_FIELD_REF type.\n\ntestsuite/\n\tPR tree-optimization/71407\n\tPR tree-optimization/71416\n\t* gcc.dg/vect/pr71407.c: New\n\t* gcc.dg/vect/pr71416-1.c: New\n\t* gcc.dg/vect/pr71416-2.c: New\n\nFrom-SVN: r237288", "tree": {"sha": "0bde144b4e342adbcb5c77fd9d6cca5d48e066c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bde144b4e342adbcb5c77fd9d6cca5d48e066c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89851e4c1363247b62cbff5a495317f582931c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89851e4c1363247b62cbff5a495317f582931c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89851e4c1363247b62cbff5a495317f582931c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89851e4c1363247b62cbff5a495317f582931c0c/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "200eafbfaeb8e4f9a14efa50c8427ab9004b6400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200eafbfaeb8e4f9a14efa50c8427ab9004b6400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200eafbfaeb8e4f9a14efa50c8427ab9004b6400"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "3f7240cf92fc024f48700c6cd10015753e528c6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89851e4c1363247b62cbff5a495317f582931c0c", "patch": "@@ -1,3 +1,10 @@\n+2016-06-10  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71407\n+\tPR tree-optimization/71416\n+\t* tree-vect-loop.c (vectorizable_live_operation): Use vectype for\n+\tBIT_FIELD_REF type.\n+\n 2016-06-10  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71477"}, {"sha": "ae3f462cbb0b1eea72da605aadafa3ef240bf8d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89851e4c1363247b62cbff5a495317f582931c0c", "patch": "@@ -1,3 +1,11 @@\n+2016-06-10  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71407\n+\tPR tree-optimization/71416\n+\t* gcc.dg/vect/pr71407.c: New\n+\t* gcc.dg/vect/pr71416-1.c: New\n+\t* gcc.dg/vect/pr71416-2.c: New\n+\n 2016-06-10  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71477"}, {"sha": "761990de9f3fe17cf929f4797317025ea353492c", "filename": "gcc/testsuite/gcc.dg/vect/pr71407.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71407.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71407.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71407.c?ref=89851e4c1363247b62cbff5a495317f582931c0c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+int a, c, d;\n+short b;\n+\n+void\n+fn1 ()\n+{\n+  int e;\n+  for (; c; c++)\n+    {\n+      for (; a; a++)\n+        b = (short) a || e;\n+      e = d;\n+    }\n+}"}, {"sha": "8a2854889f9757e03cd3e8dd1954a4e5cba17a5e", "filename": "gcc/testsuite/gcc.dg/vect/pr71416-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71416-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71416-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71416-1.c?ref=89851e4c1363247b62cbff5a495317f582931c0c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+\n+short a;\n+char b, e;\n+static short c;\n+int d, f;\n+int main() {\n+  short g;\n+  for (; e; ++e) {\n+    d = a;\n+    f = 0;\n+    if (b)\n+      d = f = g >= c;\n+  }\n+  return 0;\n+}\n+"}, {"sha": "d846ef17ef16f31ee2f5c93df23e8616e93f9d0c", "filename": "gcc/testsuite/gcc.dg/vect/pr71416-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71416-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71416-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71416-2.c?ref=89851e4c1363247b62cbff5a495317f582931c0c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+int a, b, d, e, f, g;\n+int *c;\n+void fn2 (int *);\n+void fn1() { fn2(&e); }\n+\n+void fn2(int *p1) {\n+  for (;;) {\n+    for (; a; a++)\n+      if (*p1 = g || --f, b)\n+        if (*c)\n+          d = *p1;\n+    if (*p1)\n+      break;\n+  }\n+}"}, {"sha": "1231b95f6a71337833e8c4b24884da9f96a7b5bf", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89851e4c1363247b62cbff5a495317f582931c0c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=89851e4c1363247b62cbff5a495317f582931c0c", "patch": "@@ -6353,7 +6353,7 @@ vectorizable_live_operation (gimple *stmt,\n \tworklist.safe_push (use_stmt);\n   gcc_assert (worklist.length () == 1);\n \n-  bitsize = TYPE_SIZE (lhs_type);\n+  bitsize = TYPE_SIZE (TREE_TYPE (vectype));\n   vec_bitsize = TYPE_SIZE (vectype);\n \n   /* Get the vectorized lhs of STMT and the lane to use (counted in bits).  */\n@@ -6399,15 +6399,18 @@ vectorizable_live_operation (gimple *stmt,\n \n   /* Create a new vectorized stmt for the uses of STMT and insert outside the\n      loop.  */\n-  tree new_name = make_ssa_name (lhs_type);\n-  tree new_tree = build3 (BIT_FIELD_REF, lhs_type, vec_lhs, bitsize, bitstart);\n-  gimple *new_stmt = gimple_build_assign (new_name, new_tree);\n-  gsi_insert_on_edge_immediate (single_exit (loop), new_stmt);\n+  gimple_seq stmts = NULL;\n+  tree new_tree = build3 (BIT_FIELD_REF, TREE_TYPE (vectype), vec_lhs, bitsize,\n+\t\t\t  bitstart);\n+  new_tree = force_gimple_operand (fold_convert (lhs_type, new_tree), &stmts,\n+\t\t\t\t   true, NULL_TREE);\n+  if (stmts)\n+    gsi_insert_seq_on_edge_immediate (single_exit (loop), stmts);\n \n   /* Replace all uses of the USE_STMT in the worklist with the newly inserted\n      statement.  */\n   use_stmt = worklist.pop ();\n-  replace_uses_by (gimple_phi_result (use_stmt), new_name);\n+  replace_uses_by (gimple_phi_result (use_stmt), new_tree);\n   update_stmt (use_stmt);\n \n   return true;"}]}