{"sha": "7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5MDdkZWVlYjBiMTdlZDMzMmViNmUzYTE4MWEzNWIxODczZGFmNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-06-19T14:38:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-19T14:38:58Z"}, "message": "i386.md (cmpstrnsi): Remove dead code.\n\n\t* config/i386/i386.md (cmpstrnsi): Remove dead code.\n\nFrom-SVN: r272474", "tree": {"sha": "047fbeb44b327bfb0e2a2cd5565adbaca248b9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/047fbeb44b327bfb0e2a2cd5565adbaca248b9e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a907deeeb0b17ed332eb6e3a181a35b1873daf5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25403c416e5f12d681d1fc45a8789d19ab40297f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25403c416e5f12d681d1fc45a8789d19ab40297f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25403c416e5f12d681d1fc45a8789d19ab40297f"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "aa92a3e57d52f2f798139cd30255344f964038cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a907deeeb0b17ed332eb6e3a181a35b1873daf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a907deeeb0b17ed332eb6e3a181a35b1873daf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "patch": "@@ -1,3 +1,7 @@\n+2019-06-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (cmpstrnsi): Remove dead code.\n+\n 2019-06-19  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR middle-end/84521"}, {"sha": "6c14a37ea5110826299d24ecfc0c867ba9c5cfb3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a907deeeb0b17ed332eb6e3a181a35b1873daf5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a907deeeb0b17ed332eb6e3a181a35b1873daf5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "patch": "@@ -17004,7 +17004,7 @@\n    (use (match_operand 4 \"immediate_operand\"))]\n   \"\"\n {\n-  rtx addr1, addr2, out, outlow, count, countreg, align;\n+  rtx addr1, addr2, countreg, align, out;\n \n   if (optimize_insn_for_size_p () && !TARGET_INLINE_ALL_STRINGOPS)\n     FAIL;\n@@ -17028,28 +17028,23 @@\n           && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t2, 0), 0)) == STRING_CST)))\n     FAIL;\n \n-  out = operands[0];\n-  if (!REG_P (out))\n-    out = gen_reg_rtx (SImode);\n-\n   addr1 = copy_addr_to_reg (XEXP (operands[1], 0));\n   addr2 = copy_addr_to_reg (XEXP (operands[2], 0));\n   if (addr1 != XEXP (operands[1], 0))\n     operands[1] = replace_equiv_address_nv (operands[1], addr1);\n   if (addr2 != XEXP (operands[2], 0))\n     operands[2] = replace_equiv_address_nv (operands[2], addr2);\n \n-  count = operands[3];\n-  countreg = ix86_zero_extend_to_Pmode (count);\n+  countreg = ix86_zero_extend_to_Pmode (operands[3]);\n \n   /* %%% Iff we are testing strict equality, we can use known alignment\n      to good advantage.  This may be possible with combine, particularly\n      once cc0 is dead.  */\n   align = operands[4];\n \n-  if (CONST_INT_P (count))\n+  if (CONST_INT_P (operands[3]))\n     {\n-      if (INTVAL (count) == 0)\n+      if (operands[3] == const0_rtx)\n \t{\n \t  emit_move_insn (operands[0], const0_rtx);\n \t  DONE;\n@@ -17064,12 +17059,9 @@\n \t\t\t\t  operands[1], operands[2]));\n     }\n \n-  outlow = gen_lowpart (QImode, out);\n-  emit_insn (gen_cmpintqi (outlow));\n-  emit_move_insn (out, gen_rtx_SIGN_EXTEND (SImode, outlow));\n-\n-  if (operands[0] != out)\n-    emit_move_insn (operands[0], out);\n+  out = gen_lowpart (QImode, operands[0]);\n+  emit_insn (gen_cmpintqi (out));\n+  emit_move_insn (operands[0], gen_rtx_SIGN_EXTEND (SImode, out));\n \n   DONE;\n })\n@@ -19320,7 +19312,7 @@\n \t     (match_operand:SI 2 \"const_int_operand\"))]\n   \"TARGET_3DNOW || TARGET_PREFETCH_SSE || TARGET_PRFCHW || TARGET_PREFETCHWT1\"\n {\n-  bool write = INTVAL (operands[1]) != 0;\n+  bool write = operands[1] != const0_rtx;\n   int locality = INTVAL (operands[2]);\n \n   gcc_assert (IN_RANGE (locality, 0, 3));\n@@ -19385,7 +19377,7 @@\n \t     (const_int 3))]\n   \"TARGET_3DNOW || TARGET_PRFCHW || TARGET_PREFETCHWT1\"\n {\n-  if (INTVAL (operands[1]) == 0)\n+  if (operands[1] == const0_rtx)\n     return \"prefetch\\t%a0\";\n   else\n     return \"prefetchw\\t%a0\";"}]}