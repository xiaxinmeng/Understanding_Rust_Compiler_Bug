{"sha": "c4519773ca573ca457b32014bd40c2cb9a1e7257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1MTk3NzNjYTU3M2NhNDU3YjMyMDE0YmQ0MGMyY2I5YTFlNzI1Nw==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-04-25T16:48:13Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-04-25T16:48:13Z"}, "message": "jvm.h: (_Jv_GetNbArgs) added (_Jv_GetSafeArg) added (_Jv_SetArgs) added\n\n2003-03-29  Mohan Embar  <gnustuff@thisiscool.com>\n\n        * include/jvm.h: (_Jv_GetNbArgs) added\n        (_Jv_GetSafeArg) added\n        (_Jv_SetArgs) added\n        * prims.cc: (_Jv_GetNbArgs) implemented\n        (_Jv_GetSafeArg) implemented\n        (_Jv_SetArgs) implemented\n        (_Jv_RunMain) use _Jv_SetArgs() instead of explicitly\n        setting _Jv_argc and _Jv_argv\n        * posix.cc: (_Jv_ThisExecutable) use _Jv_GetSafeArg()\n        instead of _Jv_argv\n        * java/lang/natRuntime.cc: (insertSystemProperties) use\n        _Jv_GetSafeArg() instead of _Jv_argv\n\nFrom-SVN: r66067", "tree": {"sha": "b756be04b807ea99859e4791e60af7573fdc8f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b756be04b807ea99859e4791e60af7573fdc8f73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4519773ca573ca457b32014bd40c2cb9a1e7257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4519773ca573ca457b32014bd40c2cb9a1e7257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4519773ca573ca457b32014bd40c2cb9a1e7257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4519773ca573ca457b32014bd40c2cb9a1e7257/comments", "author": null, "committer": null, "parents": [{"sha": "ad4a34f0b9413e9c397e88029df781e3ac116693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4a34f0b9413e9c397e88029df781e3ac116693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4a34f0b9413e9c397e88029df781e3ac116693"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "6765b0e4cd4b4197dc9ed11cff6eb6a8871efb71", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c4519773ca573ca457b32014bd40c2cb9a1e7257", "patch": "@@ -1,3 +1,18 @@\n+2003-03-29  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* include/jvm.h: (_Jv_GetNbArgs) added\n+\t(_Jv_GetSafeArg) added\n+\t(_Jv_SetArgs) added\n+\t* prims.cc: (_Jv_GetNbArgs) implemented\n+\t(_Jv_GetSafeArg) implemented\n+\t(_Jv_SetArgs) implemented\n+\t(_Jv_RunMain) use _Jv_SetArgs() instead of explicitly\n+\tsetting _Jv_argc and _Jv_argv\n+\t* posix.cc: (_Jv_ThisExecutable) use _Jv_GetSafeArg()\n+\tinstead of _Jv_argv\n+\t* java/lang/natRuntime.cc: (insertSystemProperties) use\n+\t_Jv_GetSafeArg() instead of _Jv_argv\n+\n 2003-04-23  Tom Tromey  <tromey@redhat.com>\n \n \t* resolve.cc (_Jv_PrepareClass): Round size up to alignment"}, {"sha": "9395feb09c446ce22fb70e1953243be229a2c262", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=c4519773ca573ca457b32014bd40c2cb9a1e7257", "patch": "@@ -352,7 +352,20 @@ extern \"C\"\n   jlong _Jv_remJ (jlong, jlong);\n }\n \n-/* Get the name of the running executable. */\n+/* Get the number of arguments (cf. argc) or 0 if our argument\n+   list was never initialized.  */\n+extern int _Jv_GetNbArgs (void);\n+\n+/* Get the specified argument (cf. argv[index]) or \"\" if either\n+   our argument list was never initialized or the specified index\n+   is out of bounds.  */\n+extern const char * _Jv_GetSafeArg (int index);\n+\n+/* Sets our argument list. Can be used by programs with non-standard\n+   entry points.  */\n+extern void _Jv_SetArgs (int argc, const char **argv);\n+\n+/* Get the name of the running executable.  */\n extern const char *_Jv_ThisExecutable (void);\n \n /* Return a pointer to a symbol in executable or loaded library.  */"}, {"sha": "69f78f64491417fb05db4b83df2fbe7b3226fd99", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=c4519773ca573ca457b32014bd40c2cb9a1e7257", "patch": "@@ -108,10 +108,6 @@ _Jv_SetDLLSearchPath (const char *)\n \n \f\n \n-extern int _Jv_argc;\n-extern const char **_Jv_argv;\n-  // our process' command line arguments\n-\n void\n java::lang::Runtime::exitInternal (jint status)\n {\n@@ -590,7 +586,7 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n     }\n \n   // The name used to invoke this process (argv[0] in C).\n-  SET (\"gnu.gcj.progname\", _Jv_argv[0]);\n+  SET (\"gnu.gcj.progname\", _Jv_GetSafeArg (0));\n \n   // Allow platform specific settings and overrides.\n   _Jv_platform_initProperties (newprops);"}, {"sha": "de58ab025c083a600fd7e4a778530c22929881c8", "filename": "libjava/posix.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=c4519773ca573ca457b32014bd40c2cb9a1e7257", "patch": "@@ -25,9 +25,6 @@ details.  */\n extern \"C\" unsigned long long _clock (void);\n #endif\n \n-// platform-specific executable name\n-extern const char **_Jv_argv;\n-\n #if defined(HAVE_PROC_SELF_EXE)\n static char exec_name[20];\n   // initialized in _Jv_platform_initialize()\n@@ -41,7 +38,7 @@ const char *_Jv_ThisExecutable (void)\n   return exec_name;\n     // initialized in _Jv_platform_initialize()\n #else\n-  return _Jv_argv[0];\n+  return _Jv_GetSafeArg (0);\n #endif\n }\n "}, {"sha": "9ddd1d2c2af9654bbbc64329ba007d8fc392a190", "filename": "libjava/prims.cc", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4519773ca573ca457b32014bd40c2cb9a1e7257/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=c4519773ca573ca457b32014bd40c2cb9a1e7257", "patch": "@@ -90,6 +90,30 @@ property_pair *_Jv_Environment_Properties;\n const char **_Jv_argv;\n int _Jv_argc;\n \n+// Argument support.\n+int\n+_Jv_GetNbArgs (void)\n+{\n+  // _Jv_argc is 0 if not explicitly initialized.\n+  return _Jv_argc;\n+}\n+\n+const char *\n+_Jv_GetSafeArg (int index)\n+{\n+  if (index >=0 && index < _Jv_GetNbArgs ())\n+    return _Jv_argv[index];\n+  else\n+    return \"\";\n+}\n+\n+void\n+_Jv_SetArgs (int argc, const char **argv)\n+{\n+  _Jv_argc = argc;\n+  _Jv_argv = argv;\n+}\n+\n #ifdef ENABLE_JVMPI\n // Pointer to JVMPI notification functions.\n void (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (JVMPI_Event *event);\n@@ -936,8 +960,7 @@ void\n _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, \n \t     bool is_jar)\n {\n-  _Jv_argv = argv;\n-  _Jv_argc = argc;\n+  _Jv_SetArgs (argc, argv);\n \n   java::lang::Runtime *runtime = NULL;\n "}]}