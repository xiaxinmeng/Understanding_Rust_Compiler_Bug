{"sha": "05c219bb4943a1ebfc30df747e1d97897b3494a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjMjE5YmI0OTQzYTFlYmZjMzBkZjc0N2UxZDk3ODk3YjM0OTRhMQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-12-14T17:40:46Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-12-14T17:40:46Z"}, "message": "df-core.c: Update comments referring to removed features.\n\n2007-12-14  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* df-core.c: Update comments referring to removed features.\n\t* df-problems.c: Likewise.\n\t* df-scan.c: Likewise.\n\t* df.h: Likewise.\n\nFrom-SVN: r130937", "tree": {"sha": "a0bfa427f7b8eddddeb56a76dc1d3684d9e702c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0bfa427f7b8eddddeb56a76dc1d3684d9e702c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c219bb4943a1ebfc30df747e1d97897b3494a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c219bb4943a1ebfc30df747e1d97897b3494a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c219bb4943a1ebfc30df747e1d97897b3494a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c219bb4943a1ebfc30df747e1d97897b3494a1/comments", "author": null, "committer": null, "parents": [{"sha": "627eb745771b85751cbc9dd4ab842871cf22007f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627eb745771b85751cbc9dd4ab842871cf22007f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627eb745771b85751cbc9dd4ab842871cf22007f"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "9692dbbb7dc7185bbdd3d4b1c46e54a5f6c21bd0", "filename": "gcc/df-core.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=05c219bb4943a1ebfc30df747e1d97897b3494a1", "patch": "@@ -71,7 +71,7 @@ control changes or if one of the transfer function changes.\n \n Here is an example of using the dataflow routines.\n \n-      df_[ru,rd,urec,ri,chain]_add_problem (flags);\n+      df_[chain,live,note,rd]_add_problem (flags);\n \n       df_set_blocks (blocks);\n \n@@ -81,7 +81,7 @@ Here is an example of using the dataflow routines.\n \n       df_finish_pass (false);\n \n-DF_[ru,rd,urec,ri,chain]_ADD_PROBLEM adds a problem, defined by an\n+DF_[chain,live,note,rd]_ADD_PROBLEM adds a problem, defined by an\n instance to struct df_problem, to the set of problems solved in this\n instance of df.  All calls to add a problem for a given instance of df\n must occur before the first call to DF_ANALYZE.\n@@ -628,9 +628,9 @@ df_remove_problem (struct dataflow *dflow)\n }\n \n \n-/* Remove all of the problems that are not permanent.  Scanning, lr,\n-   ur and live are permanent, the rest are removable.  Also clear all\n-   of the changeable_flags.  */\n+/* Remove all of the problems that are not permanent.  Scanning, LR\n+   and (at -O2 or higher) LIVE are permanent, the rest are removable.\n+   Also clear all of the changeable_flags.  */\n \n void\n df_finish_pass (bool verify ATTRIBUTE_UNUSED)"}, {"sha": "ed56c7feec51717916ba19dc80280f1353a43d9b", "filename": "gcc/df-problems.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=05c219bb4943a1ebfc30df747e1d97897b3494a1", "patch": "@@ -1304,16 +1304,22 @@ df_lr_verify_transfer_functions (void)\n \n \f\n /*----------------------------------------------------------------------------\n-   COMBINED LIVE REGISTERS AND UNINITIALIZED REGISTERS.\n-\n-   First find the set of uses for registers that are reachable from\n-   the entry block without passing thru a definition.  In and out\n-   bitvectors are built for each basic block.  The regnum is used to\n-   index into these sets.  See df.h for details.\n-\n-   Then the in and out sets here are the anded results of the in and\n-   out sets from the lr and ur\n-   problems. \n+   LIVE AND MUST-INITIALIZED REGISTERS.\n+\n+   This problem first computes the IN and OUT bitvectors for the\n+   must-initialized registers problems, which is a forward problem.\n+   It gives the set of registers for which we MUST have an available\n+   definition on any path from the entry block to the entry/exit of\n+   a basic block.  Sets generate a definition, while clobbers kill\n+   a definition.\n+\n+   In and out bitvectors are built for each basic block and are indexed by\n+   regnum (see df.h for details).  In and out bitvectors in struct\n+   df_live_bb_info actually refers to the must-initialized problem;\n+\n+   Then, the in and out sets for the LIVE problem itself are computed.\n+   These are the logical AND of the IN and OUT sets from the LR problem\n+   and the must-initialized problem. \n ----------------------------------------------------------------------------*/\n \n /* Private data used to verify the solution for this problem.  */\n@@ -1510,7 +1516,7 @@ df_live_init (bitmap all_blocks)\n     }\n }\n \n-/* Confluence function that ignores fake edges.  */\n+/* Forward confluence function that ignores fake edges.  */\n \n static void\n df_live_confluence_n (edge e)\n@@ -1525,7 +1531,7 @@ df_live_confluence_n (edge e)\n } \n \n \n-/* Transfer function.  */\n+/* Transfer function for the forwards must-initialized problem.  */\n \n static bool\n df_live_transfer_function (int bb_index)\n@@ -1540,7 +1546,7 @@ df_live_transfer_function (int bb_index)\n }\n \n \n-/* And the LR and UR info to produce the LIVE info.  */\n+/* And the LR info with the must-initialized registers, to produce the LIVE info.  */\n \n static void\n df_live_local_finalize (bitmap all_blocks)\n@@ -2916,10 +2922,6 @@ static struct df_problem problem_NOTE =\n   NULL,                       /* Debugging end block.  */\n   NULL,                       /* Incremental solution verify start.  */\n   NULL,                       /* Incremental solution verify end.  */\n-\n-  /* Technically this is only dependent on the live registers problem\n-     but it will produce information if built one of uninitialized\n-     register problems (UR, UREC) is also run.  */\n   &problem_LR,                /* Dependent problem.  */\n   TV_DF_NOTE,                 /* Timing variable.  */\n   false                       /* Reset blocks on dropping out of blocks_to_analyze.  */"}, {"sha": "f3a90262f99b1f54932625f583fa4af8a46d5576", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=05c219bb4943a1ebfc30df747e1d97897b3494a1", "patch": "@@ -3381,7 +3381,7 @@ df_bb_refs_record (int bb_index, bool scan_insns)\n   df_refs_add_to_chains (&collection_rec, bb, NULL);\n \n   /* Now that the block has been processed, set the block as dirty so\n-     lr and ur will get it processed.  */\n+     LR and LIVE will get it processed.  */\n   df_set_bb_dirty (bb);\n }\n "}, {"sha": "ba5f9b9e9b0247da1f1cccd3752fd79d62767e9d", "filename": "gcc/df.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c219bb4943a1ebfc30df747e1d97897b3494a1/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=05c219bb4943a1ebfc30df747e1d97897b3494a1", "patch": "@@ -36,10 +36,12 @@ struct df_problem;\n struct df_link;\n \n /* Data flow problems.  All problems must have a unique id here.  */ \n+\n /* Scanning is not really a dataflow problem, but it is useful to have\n    the basic block functions in the vector so that things get done in\n-   a uniform manner.  The first four problems are always defined.  The\n-   last 5 are optional and can be added or deleted at any time.  */\n+   a uniform manner.  The last four problems can be added or deleted\n+   at any time are always defined (though LIVE is always there at -O2\n+   or higher); the others are always there.  */\n #define DF_SCAN  0 \n #define DF_LR    1      /* Live Registers backward. */\n #define DF_LIVE  2      /* Live Registers & Uninitialized Registers */"}]}