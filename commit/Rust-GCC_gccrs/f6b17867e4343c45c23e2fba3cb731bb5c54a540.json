{"sha": "f6b17867e4343c45c23e2fba3cb731bb5c54a540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiMTc4NjdlNDM0M2M0NWMyM2UyZmJhM2NiNzMxYmI1YzU0YTU0MA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@mckinlay.net.nz", "date": "2003-09-28T03:57:05Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2003-09-28T03:57:05Z"}, "message": "SimpleDateFormat (parse): Revert patch of 2003-09-25.\n\n\t* java/text/SimpleDateFormat (parse): Revert patch of 2003-09-25.\n\tDon't call setTimeZone on calendar.\n\nFrom-SVN: r71870", "tree": {"sha": "1f190a9670bb00f14812ffcf46e0fd58cd25a85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f190a9670bb00f14812ffcf46e0fd58cd25a85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b17867e4343c45c23e2fba3cb731bb5c54a540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b17867e4343c45c23e2fba3cb731bb5c54a540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b17867e4343c45c23e2fba3cb731bb5c54a540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b17867e4343c45c23e2fba3cb731bb5c54a540/comments", "author": null, "committer": null, "parents": [{"sha": "5a36731a8d3ab08ccfbb2e3693f5585f50f74bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a36731a8d3ab08ccfbb2e3693f5585f50f74bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a36731a8d3ab08ccfbb2e3693f5585f50f74bfd"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "1aa4f49b200a45d1d9ab4395ae3110edeccc9a84", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b17867e4343c45c23e2fba3cb731bb5c54a540/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b17867e4343c45c23e2fba3cb731bb5c54a540/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f6b17867e4343c45c23e2fba3cb731bb5c54a540", "patch": "@@ -1,3 +1,8 @@\n+2003-09-28  Bryce McKinlay  <bryce@mckinlay.net.nz>\n+\n+\t* java/text/SimpleDateFormat (parse): Revert patch of 2003-09-25.\n+\tDon't call setTimeZone on calendar.\n+\n 2003-09-27  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/URL.java (getURLStreamHandler): Compile fixes."}, {"sha": "84bc49be298873f0fe7e860d380b14dddc56069d", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b17867e4343c45c23e2fba3cb731bb5c54a540/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b17867e4343c45c23e2fba3cb731bb5c54a540/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=f6b17867e4343c45c23e2fba3cb731bb5c54a540", "patch": "@@ -547,9 +547,8 @@ public Date parse (String dateStr, ParsePosition pos)\n   {\n     int fmt_index = 0;\n     int fmt_max = pattern.length();\n-    Calendar loc_calendar = (Calendar)calendar.clone();\n \n-    loc_calendar.clear();\n+    calendar.clear();\n     boolean saw_timezone = false;\n     int quote_start = -1;\n     boolean is2DigitYear = false;\n@@ -697,8 +696,7 @@ public Date parse (String dateStr, ParsePosition pos)\n \t\t    found_zone = true;\n \t\t    saw_timezone = true;\n \t\t    TimeZone tz = TimeZone.getTimeZone (strings[0]);\n-\t\t    loc_calendar.setTimeZone (tz);\n-\t\t    loc_calendar.set (Calendar.ZONE_OFFSET, tz.getRawOffset ());\n+\t\t    calendar.set (Calendar.ZONE_OFFSET, tz.getRawOffset ());\n \t\t    offset = 0;\n \t\t    if (k > 2 && tz instanceof SimpleTimeZone)\n \t\t      {\n@@ -765,17 +763,17 @@ else if (match != null)\n \t  }\n \n \t// Assign the value and move on.\n-\tloc_calendar.set(calendar_field, value);\n+\tcalendar.set(calendar_field, value);\n       }\n     \n     if (is2DigitYear)\n       {\n \t// Apply the 80-20 heuristic to dermine the full year based on \n \t// defaultCenturyStart. \n-\tint year = defaultCentury + loc_calendar.get(Calendar.YEAR);\n-\tloc_calendar.set(Calendar.YEAR, year);\n-\tif (loc_calendar.getTime().compareTo(defaultCenturyStart) < 0)\n-\t  loc_calendar.set(Calendar.YEAR, year + 100);      \n+\tint year = defaultCentury + calendar.get(Calendar.YEAR);\n+\tcalendar.set(Calendar.YEAR, year);\n+\tif (calendar.getTime().compareTo(defaultCenturyStart) < 0)\n+\t  calendar.set(Calendar.YEAR, year + 100);      \n       }\n \n     try\n@@ -784,10 +782,10 @@ else if (match != null)\n \t  {\n \t    // Use the real rules to determine whether or not this\n \t    // particular time is in daylight savings.\n-\t    loc_calendar.clear (Calendar.DST_OFFSET);\n-\t    loc_calendar.clear (Calendar.ZONE_OFFSET);\n+\t    calendar.clear (Calendar.DST_OFFSET);\n+\t    calendar.clear (Calendar.ZONE_OFFSET);\n \t  }\n-        return loc_calendar.getTime();\n+        return calendar.getTime();\n       }\n     catch (IllegalArgumentException x)\n       {"}]}