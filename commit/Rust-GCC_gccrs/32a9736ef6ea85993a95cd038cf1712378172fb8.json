{"sha": "32a9736ef6ea85993a95cd038cf1712378172fb8", "node_id": "C_kwDOANBUbNoAKDMyYTk3MzZlZjZlYTg1OTkzYTk1Y2QwMzhjZjE3MTIzNzgxNzJmYjg", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-01T12:43:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-02T16:35:59Z"}, "message": "gccrs: add uninit intrinsic\n\nFollowing an investigation from rustc and discussions on zulip the\nrecommendation was that for uninit we memset to 0x01 which is less likely\nto be a null ptr but still an invalid reference.\n\nFixes #1899\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-builtins.cc (BuiltinsContext::setup): add memset builtin to the map\n\t* backend/rust-compile-intrinsic.cc (uninit_handler): implement uninit intrinsic\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/torture/uninit-intrinsic-1.rs: New test.", "tree": {"sha": "181990151427bae94f128d8e3be51bfd12121ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/181990151427bae94f128d8e3be51bfd12121ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32a9736ef6ea85993a95cd038cf1712378172fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a9736ef6ea85993a95cd038cf1712378172fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a9736ef6ea85993a95cd038cf1712378172fb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a9736ef6ea85993a95cd038cf1712378172fb8/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf5c546b59058fcc5aac430e8fbe6e99d355634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf5c546b59058fcc5aac430e8fbe6e99d355634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf5c546b59058fcc5aac430e8fbe6e99d355634"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "c96553b8c5951f809cb0ddb8a9e174651eb3aae8", "filename": "gcc/rust/backend/rust-builtins.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a9736ef6ea85993a95cd038cf1712378172fb8/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a9736ef6ea85993a95cd038cf1712378172fb8/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-builtins.cc?ref=32a9736ef6ea85993a95cd038cf1712378172fb8", "patch": "@@ -249,6 +249,12 @@ BuiltinsContext::setup ()\n \t\t\t\t\t    size_type_node, NULL_TREE),\n \t\t  0);\n \n+  define_builtin (\"memset\", BUILT_IN_MEMSET, \"__builtin_memset\", \"memset\",\n+\t\t  build_function_type_list (void_type_node, ptr_type_node,\n+\t\t\t\t\t    integer_type_node, size_type_node,\n+\t\t\t\t\t    NULL_TREE),\n+\t\t  0);\n+\n   define_builtin (\"prefetch\", BUILT_IN_PREFETCH, \"__builtin_prefetch\",\n \t\t  \"prefetch\",\n \t\t  build_varargs_function_type_list ("}, {"sha": "85f6e1c63d2120a52a752fa6c91a5054bc852b25", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a9736ef6ea85993a95cd038cf1712378172fb8/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a9736ef6ea85993a95cd038cf1712378172fb8/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=32a9736ef6ea85993a95cd038cf1712378172fb8", "patch": "@@ -81,6 +81,8 @@ static tree\n copy_nonoverlapping_handler (Context *ctx, TyTy::FnType *fntype);\n static tree\n op_with_overflow_inner (Context *ctx, TyTy::FnType *fntype, tree_code op);\n+static tree\n+uninit_handler (Context *ctx, TyTy::FnType *fntype);\n \n enum class Prefetch\n {\n@@ -202,6 +204,7 @@ static const std::map<std::string,\n     {\"unchecked_rem\", unchecked_op_handler (TRUNC_MOD_EXPR)},\n     {\"unchecked_shl\", unchecked_op_handler (LSHIFT_EXPR)},\n     {\"unchecked_shr\", unchecked_op_handler (RSHIFT_EXPR)},\n+    {\"uninit\", uninit_handler},\n };\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n@@ -986,5 +989,58 @@ unchecked_op_inner (Context *ctx, TyTy::FnType *fntype, tree_code op)\n   return fndecl;\n }\n \n+static tree\n+uninit_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  // uninit has _zero_ parameters its parameter is the generic one\n+  rust_assert (fntype->get_params ().size () == 0);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // get the template parameter type tree fn size_of<T>();\n+  rust_assert (fntype->get_num_substitutions () == 1);\n+  auto &param_mapping = fntype->get_substs ().at (0);\n+  const TyTy::ParamType *param_tyty = param_mapping.get_param_ty ();\n+  TyTy::BaseType *resolved_tyty = param_tyty->resolve ();\n+  tree template_parameter_type\n+    = TyTyResolveCompile::compile (ctx, resolved_tyty);\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  // BUILTIN size_of FN BODY BEGIN\n+\n+  tree memset_builtin = error_mark_node;\n+  BuiltinsContext::get ().lookup_simple_builtin (\"memset\", &memset_builtin);\n+  rust_assert (memset_builtin != error_mark_node);\n+\n+  // call memset with 0x01 and size of the thing see\n+  // https://github.com/Rust-GCC/gccrs/issues/1899\n+\n+  tree dst = DECL_RESULT (fndecl);\n+  tree constant_byte = build_int_cst (integer_type_node, 0x01);\n+  tree size_expr = TYPE_SIZE_UNIT (template_parameter_type);\n+\n+  tree memset_call = build_call_expr_loc (BUILTINS_LOCATION, memset_builtin, 3,\n+\t\t\t\t\t  dst, constant_byte, size_expr);\n+  TREE_READONLY (memset_call) = 0;\n+  TREE_SIDE_EFFECTS (memset_call) = 1;\n+\n+  ctx->add_statement (memset_call);\n+\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {DECL_RESULT (fndecl)},\n+\t\t\t\t\t     Location ());\n+  ctx->add_statement (return_statement);\n+  // BUILTIN size_of FN BODY END\n+\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "0c6772b5f383c69c94abe1d5343acdc5348c180f", "filename": "gcc/testsuite/rust/compile/torture/uninit-intrinsic-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a9736ef6ea85993a95cd038cf1712378172fb8/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funinit-intrinsic-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a9736ef6ea85993a95cd038cf1712378172fb8/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funinit-intrinsic-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funinit-intrinsic-1.rs?ref=32a9736ef6ea85993a95cd038cf1712378172fb8", "patch": "@@ -0,0 +1,21 @@\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn uninit<T>() -> T;\n+    }\n+}\n+\n+mod mem {\n+    pub unsafe fn uninitialized<T>() -> T {\n+        intrinsics::uninit()\n+    }\n+}\n+\n+struct Foo(i32, i32);\n+// { dg-warning \"struct is never constructed: .Foo.\" \"\" { target *-*-* } .-1 }\n+// FIXME ^^ above is a bad-warning\n+\n+impl Foo {\n+    pub fn new() -> Self {\n+        unsafe { mem::uninitialized::<Foo>() }\n+    }\n+}"}]}