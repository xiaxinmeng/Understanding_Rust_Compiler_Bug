{"sha": "0460023ee24e681de8ca5df2353065bcfc2bec84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2MDAyM2VlMjRlNjgxZGU4Y2E1ZGYyMzUzMDY1YmNmYzJiZWM4NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-22T17:14:29Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-22T17:14:29Z"}, "message": "2004-10-22  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/Math.java\n\t* java/lang/StackTraceElement.java\n\t* java/nio/Buffer.java\n\t* java/nio/ByteBuffer.java\n\t* java/nio/CharBuffer.java\n\t* java/nio/DoubleBuffer.java\n\t* java/nio/FloatBuffer.java\n\t* java/nio/IntBuffer.java\n\t* java/nio/LongBuffer.java\n\t* java/nio/ShortBuffer.java\n\t* java/nio/charset/Charset.java\n\t* java/rmi/server/RMIClassLoader.java\n\t* java/rmi/server/RMISocketFactory.java\n\t* java/security/Policy.java\n\t* java/text/ChoiceFormat.java\n\t* java/text/CollationElementIterator.java\n\t* java/text/DateFormat.java\n\t* java/text/DecimalFormat.java\n\t* java/text/DecimalFormatSymbols.java\n\t* java/text/MessageFormat.java\n\t* java/text/NumberFormat.java\n\t* java/text/RuleBasedCollator.java\n\t* java/text/SimpleDateFormat.java\n\t* java/util/BitSet.java\n\t* java/util/Calendar.java\n\t* java/util/Collections.java\n\t* java/util/IdentityHashMap.java\n\t* java/util/Locale.java\n\t* java/util/TreeMap.java\n\t* java/util/logging/LogRecord.java\n\t* java/util/logging/XMLFormatter.java\n\t* java/util/prefs/AbstractPreferences.java\n\t* java/util/prefs/Preferences.java\n\t* javax/crypto/interfaces/DHPrivateKey.java\n\t* javax/crypto/interfaces/DHPublicKey.java\n\t* javax/crypto/interfaces/PBEKey.java\n\t* javax/net/ssl/HandshakeCompletedEvent.java\n\t* javax/security/auth/Subject.java\n\nFrom-SVN: r89454", "tree": {"sha": "81b31b0486891970a421212090c68947039d0701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81b31b0486891970a421212090c68947039d0701"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0460023ee24e681de8ca5df2353065bcfc2bec84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0460023ee24e681de8ca5df2353065bcfc2bec84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0460023ee24e681de8ca5df2353065bcfc2bec84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0460023ee24e681de8ca5df2353065bcfc2bec84/comments", "author": null, "committer": null, "parents": [{"sha": "471854f82a8ac6adc65c32232877b1f1fb0e82d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471854f82a8ac6adc65c32232877b1f1fb0e82d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471854f82a8ac6adc65c32232877b1f1fb0e82d0"}], "stats": {"total": 381, "additions": 201, "deletions": 180}, "files": [{"sha": "efad45dc702ea40aba339a8aceadea8a47b13da7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,3 +1,44 @@\n+2004-10-22  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/Math.java\n+\t* java/lang/StackTraceElement.java\n+\t* java/nio/Buffer.java\n+\t* java/nio/ByteBuffer.java\n+\t* java/nio/CharBuffer.java\n+\t* java/nio/DoubleBuffer.java\n+\t* java/nio/FloatBuffer.java\n+\t* java/nio/IntBuffer.java\n+\t* java/nio/LongBuffer.java\n+\t* java/nio/ShortBuffer.java\n+\t* java/nio/charset/Charset.java\n+\t* java/rmi/server/RMIClassLoader.java\n+\t* java/rmi/server/RMISocketFactory.java\n+\t* java/security/Policy.java\n+\t* java/text/ChoiceFormat.java\n+\t* java/text/CollationElementIterator.java\n+\t* java/text/DateFormat.java\n+\t* java/text/DecimalFormat.java\n+\t* java/text/DecimalFormatSymbols.java\n+\t* java/text/MessageFormat.java\n+\t* java/text/NumberFormat.java\n+\t* java/text/RuleBasedCollator.java\n+\t* java/text/SimpleDateFormat.java\n+\t* java/util/BitSet.java\n+\t* java/util/Calendar.java\n+\t* java/util/Collections.java\n+\t* java/util/IdentityHashMap.java\n+\t* java/util/Locale.java\n+\t* java/util/TreeMap.java\n+\t* java/util/logging/LogRecord.java\n+\t* java/util/logging/XMLFormatter.java\n+\t* java/util/prefs/AbstractPreferences.java\n+\t* java/util/prefs/Preferences.java\n+\t* javax/crypto/interfaces/DHPrivateKey.java\n+\t* javax/crypto/interfaces/DHPublicKey.java\n+\t* javax/crypto/interfaces/PBEKey.java\n+\t* javax/net/ssl/HandshakeCompletedEvent.java\n+\t* javax/security/auth/Subject.java\n+\n 2004-10-22  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gnu/java/net/natPlainSocketImplPosix.cc"}, {"sha": "f1f68c4832b1dd56d4dda0c8bc7f4df9b9cc0c91", "filename": "libjava/java/lang/Math.java", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Flang%2FMath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Flang%2FMath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FMath.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -298,7 +298,7 @@ public static double max(double a, double b)\n    * @param a the angle (in radians)\n    * @return sin(a)\n    */\n-  public native static double sin(double a);\n+  public static native double sin(double a);\n \n   /**\n    * The trigonometric function <em>cos</em>. The cosine of NaN or infinity is\n@@ -307,7 +307,7 @@ public static double max(double a, double b)\n    * @param a the angle (in radians)\n    * @return cos(a)\n    */\n-  public native static double cos(double a);\n+  public static native double cos(double a);\n \n   /**\n    * The trigonometric function <em>tan</em>. The tangent of NaN or infinity\n@@ -317,7 +317,7 @@ public static double max(double a, double b)\n    * @param a the angle (in radians)\n    * @return tan(a)\n    */\n-  public native static double tan(double a);\n+  public static native double tan(double a);\n \n   /**\n    * The trigonometric function <em>arcsin</em>. The range of angles returned\n@@ -328,7 +328,7 @@ public static double max(double a, double b)\n    * @param a the sin to turn back into an angle\n    * @return arcsin(a)\n    */\n-  public native static double asin(double a);\n+  public static native double asin(double a);\n \n   /**\n    * The trigonometric function <em>arccos</em>. The range of angles returned\n@@ -339,7 +339,7 @@ public static double max(double a, double b)\n    * @param a the cos to turn back into an angle\n    * @return arccos(a)\n    */\n-  public native static double acos(double a);\n+  public static native double acos(double a);\n \n   /**\n    * The trigonometric function <em>arcsin</em>. The range of angles returned\n@@ -351,7 +351,7 @@ public static double max(double a, double b)\n    * @return arcsin(a)\n    * @see #atan2(double, double)\n    */\n-  public native static double atan(double a);\n+  public static native double atan(double a);\n \n   /**\n    * A special version of the trigonometric function <em>arctan</em>, for\n@@ -400,7 +400,7 @@ public static double max(double a, double b)\n    * @return <em>theta</em> in the conversion of (x, y) to (r, theta)\n    * @see #atan(double)\n    */\n-  public native static double atan2(double y, double x);\n+  public static native double atan2(double y, double x);\n \n   /**\n    * Take <em>e</em><sup>a</sup>.  The opposite of <code>log()</code>. If the\n@@ -414,7 +414,7 @@ public static double max(double a, double b)\n    * @see #log(double)\n    * @see #pow(double, double)\n    */\n-  public native static double exp(double a);\n+  public static native double exp(double a);\n \n   /**\n    * Take ln(a) (the natural log).  The opposite of <code>exp()</code>. If the\n@@ -430,7 +430,7 @@ public static double max(double a, double b)\n    * @return the natural log of <code>a</code>\n    * @see #exp(double)\n    */\n-  public native static double log(double a);\n+  public static native double log(double a);\n \n   /**\n    * Take a square root. If the argument is NaN or negative, the result is\n@@ -444,7 +444,7 @@ public static double max(double a, double b)\n    * @return the square root of the argument\n    * @see #pow(double, double)\n    */\n-  public native static double sqrt(double a);\n+  public static native double sqrt(double a);\n \n   /**\n    * Raise a number to a power. Special cases:<ul>\n@@ -514,7 +514,7 @@ public static double max(double a, double b)\n    * @param b the power to raise it to\n    * @return a<sup>b</sup>\n    */\n-  public native static double pow(double a, double b);\n+  public static native double pow(double a, double b);\n \n   /**\n    * Get the IEEE 754 floating point remainder on two numbers. This is the\n@@ -530,7 +530,7 @@ public static double max(double a, double b)\n    * @return the IEEE 754-defined floating point remainder of x/y\n    * @see #rint(double)\n    */\n-  public native static double IEEEremainder(double x, double y);\n+  public static native double IEEEremainder(double x, double y);\n \n   /**\n    * Take the nearest integer that is that is greater than or equal to the\n@@ -541,7 +541,7 @@ public static double max(double a, double b)\n    * @param a the value to act upon\n    * @return the nearest integer &gt;= <code>a</code>\n    */\n-  public native static double ceil(double a);\n+  public static native double ceil(double a);\n \n   /**\n    * Take the nearest integer that is that is less than or equal to the\n@@ -551,7 +551,7 @@ public static double max(double a, double b)\n    * @param a the value to act upon\n    * @return the nearest integer &lt;= <code>a</code>\n    */\n-  public native static double floor(double a);\n+  public static native double floor(double a);\n \n   /**\n    * Take the nearest integer to the argument.  If it is exactly between\n@@ -561,7 +561,7 @@ public static double max(double a, double b)\n    * @param a the value to act upon\n    * @return the nearest integer to <code>a</code>\n    */\n-  public native static double rint(double a);\n+  public static native double rint(double a);\n \n   /**\n    * Take the nearest integer to the argument.  This is equivalent to"}, {"sha": "02500d80a8fe80dc1204c2a7680ba0eb2b988008", "filename": "libjava/java/lang/StackTraceElement.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Flang%2FStackTraceElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Flang%2FStackTraceElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStackTraceElement.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* StackTraceElement.java -- One function call or call stack element\n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -241,7 +241,7 @@ public int hashCode()\n    * @param o2 the second object\n    * @return o1 == null ? o2 == null : o1.equals(o2)\n    */\n-  private static final boolean equals(Object o1, Object o2)\n+  private static boolean equals(Object o1, Object o2)\n   {\n     return o1 == null ? o2 == null : o1.equals(o2);\n   }\n@@ -252,7 +252,7 @@ private static final boolean equals(Object o1, Object o2)\n    * @param o the object to hash\n    * @return o1 == null ? 0 : o1.hashCode()\n    */\n-  private static final int hashCode(Object o)\n+  private static int hashCode(Object o)\n   {\n     return o == null ? 0 : o.hashCode();\n   }"}, {"sha": "f86829bf36251aeec91fbbb09b0897184383f473", "filename": "libjava/java/nio/Buffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* Buffer.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -345,7 +345,7 @@ final void checkIfReadOnly()\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final static void checkArraySize(int arraylength, int offset, int length)\n+  static final void checkArraySize(int arraylength, int offset, int length)\n   {\n     if ((offset < 0) ||\n         (length < 0) ||"}, {"sha": "4d3b1dc7d736c2d5c4aa0e0d491fc9dd159768e8", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -77,7 +77,7 @@ public static ByteBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static ByteBuffer wrap (byte[] array, int offset, int length)\n+  public static final ByteBuffer wrap (byte[] array, int offset, int length)\n   {\n     // FIXME: In GCJ and other implementations where arrays may not\n     // move we might consider, at least when offset==0:\n@@ -94,7 +94,7 @@ final public static ByteBuffer wrap (byte[] array, int offset, int length)\n    * Wraps a <code>byte</code> array into a <code>ByteBuffer</code>\n    * object.\n    */\n-  final public static ByteBuffer wrap (byte[] array)\n+  public static final ByteBuffer wrap (byte[] array)\n   {\n     return wrap (array, 0, array.length);\n   }"}, {"sha": "096b736ca49d9fbf56548ea31275d81739f8ab0d", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -74,7 +74,7 @@ public static CharBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static CharBuffer wrap(char[] array, int offset, int length)\n+  public static final CharBuffer wrap(char[] array, int offset, int length)\n   {\n     return new CharBufferImpl(array, 0, array.length, offset + length, offset, -1, false);\n   }\n@@ -86,7 +86,7 @@ final public static CharBuffer wrap(char[] array, int offset, int length)\n    *\n    * @return a new <code>CharBuffer</code> object\n    */\n-  final public static CharBuffer wrap(CharSequence seq)\n+  public static final CharBuffer wrap(CharSequence seq)\n   {\n     return wrap(seq, 0, seq.length());\n   }\n@@ -103,7 +103,7 @@ final public static CharBuffer wrap(CharSequence seq)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static CharBuffer wrap(CharSequence seq, int start, int end)\n+  public static final CharBuffer wrap(CharSequence seq, int start, int end)\n   {\n     // FIXME: implement better handling of java.lang.String.\n     // Probably share data with String via reflection.\n@@ -131,7 +131,7 @@ final public static CharBuffer wrap(CharSequence seq, int start, int end)\n    *\n    * @return a new <code>CharBuffer</code> object\n    */\n-  final public static CharBuffer wrap(char[] array)\n+  public static final CharBuffer wrap(char[] array)\n   {\n     return wrap(array, 0, array.length);\n   }"}, {"sha": "70010508e896e5287d37b387c79b649f3f9d09fd", "filename": "libjava/java/nio/DoubleBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -68,7 +68,7 @@ public static DoubleBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static DoubleBuffer wrap (double[] array, int offset, int length)\n+  public static final DoubleBuffer wrap (double[] array, int offset, int length)\n   {\n     return new DoubleBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n   }\n@@ -77,7 +77,7 @@ final public static DoubleBuffer wrap (double[] array, int offset, int length)\n    * Wraps a <code>double</code> array into a <code>DoubleBuffer</code>\n    * object.\n    */\n-  final public static DoubleBuffer wrap (double[] array)\n+  public static final DoubleBuffer wrap (double[] array)\n   {\n     return wrap (array, 0, array.length);\n   }"}, {"sha": "6ff80f1bfaa0836edf6f37ea5d8e4cb89e682c88", "filename": "libjava/java/nio/FloatBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -68,7 +68,7 @@ public static FloatBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static FloatBuffer wrap (float[] array, int offset, int length)\n+  public static final FloatBuffer wrap (float[] array, int offset, int length)\n   {\n     return new FloatBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n   }\n@@ -77,7 +77,7 @@ final public static FloatBuffer wrap (float[] array, int offset, int length)\n    * Wraps a <code>float</code> array into a <code>FloatBuffer</code>\n    * object.\n    */\n-  final public static FloatBuffer wrap (float[] array)\n+  public static final FloatBuffer wrap (float[] array)\n   {\n     return wrap (array, 0, array.length);\n   }"}, {"sha": "e1833367d5d4fea8fb3cae279bb4d486334b927d", "filename": "libjava/java/nio/IntBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FIntBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FIntBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -68,7 +68,7 @@ public static IntBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static IntBuffer wrap (int[] array, int offset, int length)\n+  public static final IntBuffer wrap (int[] array, int offset, int length)\n   {\n     return new IntBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n   }\n@@ -77,7 +77,7 @@ final public static IntBuffer wrap (int[] array, int offset, int length)\n    * Wraps a <code>int</code> array into a <code>IntBuffer</code>\n    * object.\n    */\n-  final public static IntBuffer wrap (int[] array)\n+  public static final IntBuffer wrap (int[] array)\n   {\n     return wrap (array, 0, array.length);\n   }"}, {"sha": "6f393d1629d6d020c0901edaafd0ae4ff41508cc", "filename": "libjava/java/nio/LongBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FLongBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FLongBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -68,7 +68,7 @@ public static LongBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static LongBuffer wrap (long[] array, int offset, int length)\n+  public static final LongBuffer wrap (long[] array, int offset, int length)\n   {\n     return new LongBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n   }\n@@ -77,7 +77,7 @@ final public static LongBuffer wrap (long[] array, int offset, int length)\n    * Wraps a <code>long</code> array into a <code>LongBuffer</code>\n    * object.\n    */\n-  final public static LongBuffer wrap (long[] array)\n+  public static final LongBuffer wrap (long[] array)\n   {\n     return wrap (array, 0, array.length);\n   }"}, {"sha": "7b34d70ed82d1d051d6e5abfbfb508bbd1333ce2", "filename": "libjava/java/nio/ShortBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FShortBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2FShortBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBuffer.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -68,7 +68,7 @@ public static ShortBuffer allocate (int capacity)\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static ShortBuffer wrap (short[] array, int offset, int length)\n+  public static final ShortBuffer wrap (short[] array, int offset, int length)\n   {\n     return new ShortBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n   }\n@@ -77,7 +77,7 @@ final public static ShortBuffer wrap (short[] array, int offset, int length)\n    * Wraps a <code>short</code> array into a <code>ShortBuffer</code>\n    * object.\n    */\n-  final public static ShortBuffer wrap (short[] array)\n+  public static final ShortBuffer wrap (short[] array)\n   {\n     return wrap (array, 0, array.length);\n   }"}, {"sha": "5bb78f63ca9a733ef53b4d276ae5a7926059ed81", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* Charset.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -158,7 +158,7 @@ public static SortedMap availableCharsets ()\n   // XXX: we need to support multiple providers, reading them from\n   // java.nio.charset.spi.CharsetProvider in the resource directory\n   // META-INF/services\n-  private static final CharsetProvider provider ()\n+  private static CharsetProvider provider ()\n   {\n     return Provider.provider ();\n   }"}, {"sha": "f33ee80501c3f2ba74b2e650e32b4d4f51de74ea", "filename": "libjava/java/rmi/server/RMIClassLoader.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* RMIClassLoader.java --\n-   Copyright (c) 1996, 1997, 1998, 1999, 2002, 2003\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -55,7 +55,7 @@\n  */\n public class RMIClassLoader\n {\n-  static private class MyClassLoader extends URLClassLoader\n+  private static class MyClassLoader extends URLClassLoader\n   {\n     private MyClassLoader (URL[] urls, ClassLoader parent, String annotation)\n     {"}, {"sha": "60ada6add446dbfacb4b3b13c048459ad266249a", "filename": "libjava/java/rmi/server/RMISocketFactory.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Frmi%2Fserver%2FRMISocketFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Frmi%2Fserver%2FRMISocketFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMISocketFactory.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -47,9 +47,9 @@\n public abstract class RMISocketFactory\n   implements RMIClientSocketFactory, RMIServerSocketFactory\n {\n-  static private RMISocketFactory defaultFactory;\n-  static private RMISocketFactory currentFactory;\n-  static private RMIFailureHandler currentHandler;\n+  private static RMISocketFactory defaultFactory;\n+  private static RMISocketFactory currentFactory;\n+  private static RMIFailureHandler currentHandler;\n \n   static\n     {"}, {"sha": "25765db95d973de2cbfbbfc004aa704ec1c23718", "filename": "libjava/java/security/Policy.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fsecurity%2FPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Fsecurity%2FPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPolicy.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* Policy.java --- Policy Manager Class\n-   Copyright (C) 1999, 2003, Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -95,7 +95,7 @@\n  */\n public abstract class Policy\n {\n-  static private Policy currentPolicy;\n+  private static Policy currentPolicy;\n \n   /** Map of ProtectionDomains to PermissionCollections for this instance. */\n   private Map pd2pc = null;"}, {"sha": "ff3c9f667d9e9a9f6a2ac502ac36fd301e3a15e6", "filename": "libjava/java/text/ChoiceFormat.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FChoiceFormat.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,6 @@\n /* ChoiceFormat.java -- Format over a range of numbers\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -440,7 +441,7 @@ public void setChoices (double[] choiceLimits, String[] choiceFormats)\n     this.choiceLimits = (double[]) choiceLimits.clone();\n   }\n \n-  private final void quoteString (StringBuffer dest, String text)\n+  private void quoteString (StringBuffer dest, String text)\n   {\n     int max = text.length();\n     for (int i = 0; i < max; ++i)"}, {"sha": "91f341f55b23497f539a5e23142889ef4798bdd3", "filename": "libjava/java/text/CollationElementIterator.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationElementIterator.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -181,7 +181,7 @@ public int previous()\n    *\n    * @return The primary order value of the specified collation value.  This is the high 16 bits.\n    */\n-  public static final int primaryOrder(int order)\n+  public static int primaryOrder(int order)\n   {\n     // From the JDK 1.2 spec.\n     return order >>> 16;\n@@ -205,7 +205,7 @@ public void reset()\n    *\n    * @return The secondary order value of the specified collation value.  This is the bits 8-15.\n    */\n-  public static final short secondaryOrder(int order)\n+  public static short secondaryOrder(int order)\n   {\n     // From the JDK 1.2 spec.\n     return (short) ((order >>> 8) & 255);\n@@ -219,7 +219,7 @@ public static final short secondaryOrder(int order)\n    *\n    * @return The tertiary order value of the specified collation value.  This is the low eight bits.\n    */\n-  public static final short tertiaryOrder(int order)\n+  public static short tertiaryOrder(int order)\n   {\n     // From the JDK 1.2 spec.\n     return (short) (order & 255);"}, {"sha": "8b705663d68d7f049da9b4e3c8f35991f89f1008", "filename": "libjava/java/text/DateFormat.java", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDateFormat.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -309,18 +309,15 @@ public Calendar getCalendar ()\n     return calendar;\n   }\n \n-  private static final DateFormat computeInstance (int style, Locale loc,\n-\t\t\t\t\t\t   boolean use_date,\n-\t\t\t\t\t\t   boolean use_time)\n+  private static DateFormat computeInstance (int style, Locale loc,\n+                                             boolean use_date, boolean use_time)\n   {\n     return computeInstance (style, style, loc, use_date, use_time);\n   }\n \n-  private static final DateFormat computeInstance (int dateStyle, \n-\t\t\t\t\t\t   int timeStyle,\n-\t\t\t\t\t\t   Locale loc,\n-\t\t\t\t\t\t   boolean use_date,\n-\t\t\t\t\t\t   boolean use_time)\n+  private static DateFormat computeInstance (int dateStyle, int timeStyle,\n+                                             Locale loc, boolean use_date,\n+                                             boolean use_time)\n   {\n     ResourceBundle res;\n     try"}, {"sha": "94487c8020470df3fd6c8fffbf1182cc98304c99", "filename": "libjava/java/text/DecimalFormat.java", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FDecimalFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FDecimalFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDecimalFormat.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* DecimalFormat.java -- Formats and parses numbers\n-   Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -62,9 +62,9 @@ public class DecimalFormat extends NumberFormat\n {\n   // This is a helper for applyPatternWithSymbols.  It reads a prefix\n   // or a suffix.  It can cause some side-effects.\n-  private final int scanFix (String pattern, int index, FormatBuffer buf,\n-\t\t\t     String patChars, DecimalFormatSymbols syms,\n-\t\t\t     boolean is_suffix)\n+  private int scanFix (String pattern, int index, FormatBuffer buf,\n+                       String patChars, DecimalFormatSymbols syms,\n+                       boolean is_suffix)\n   {\n     int len = pattern.length();\n     boolean quoteStarted = false;\n@@ -140,9 +140,8 @@ else if (patChars.indexOf(c) != -1)\n   }\n \n   // A helper which reads a number format.\n-  private final int scanFormat (String pattern, int index,\n-\t\t\t\tString patChars, DecimalFormatSymbols syms,\n-\t\t\t\tboolean is_positive)\n+  private int scanFormat (String pattern, int index, String patChars,\n+                          DecimalFormatSymbols syms, boolean is_positive)\n   {\n     int max = pattern.length();\n \n@@ -294,7 +293,7 @@ else if (patChars.indexOf(c) != -1)\n \n   // This helper function creates a string consisting of all the\n   // characters which can appear in a pattern and must be quoted.\n-  private final String patternChars (DecimalFormatSymbols syms)\n+  private String patternChars (DecimalFormatSymbols syms)\n   {\n     StringBuffer buf = new StringBuffer ();\n     buf.append(syms.getDecimalSeparator());\n@@ -313,8 +312,7 @@ private final String patternChars (DecimalFormatSymbols syms)\n     return buf.toString();\n   }\n \n-  private final void applyPatternWithSymbols (String pattern,\n-\t\t\t\t\t      DecimalFormatSymbols syms)\n+  private void applyPatternWithSymbols(String pattern, DecimalFormatSymbols syms)\n   {\n     // Initialize to the state the parser expects.\n     negativePrefix = \"\";\n@@ -425,7 +423,7 @@ public DecimalFormat (String pattern, DecimalFormatSymbols symbols)\n     applyPattern (pattern);\n   }\n \n-  private final boolean equals (String s1, String s2)\n+  private boolean equals(String s1, String s2)\n   {\n     if (s1 == null || s2 == null)\n       return s1 == s2;\n@@ -1149,7 +1147,7 @@ public void setPositiveSuffix (String newValue)\n     positiveSuffix = newValue;\n   }\n \n-  private final void quoteFix (StringBuffer buf, String text, String patChars)\n+  private void quoteFix(StringBuffer buf, String text, String patChars)\n   {\n     int len = text.length();\n     for (int index = 0; index < len; ++index)\n@@ -1166,7 +1164,7 @@ private final void quoteFix (StringBuffer buf, String text, String patChars)\n       }\n   }\n \n-  private final String computePattern (DecimalFormatSymbols syms)\n+  private String computePattern(DecimalFormatSymbols syms)\n   {\n     StringBuffer mainPattern = new StringBuffer ();\n     // We have to at least emit a zero for the minimum number of"}, {"sha": "7a4e56e9a4210a463f019ac1dc535790ca32872b", "filename": "libjava/java/text/DecimalFormatSymbols.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -83,8 +83,8 @@ public DecimalFormatSymbols ()\n     this (Locale.getDefault());\n   }\n \n-  private final String safeGetString (ResourceBundle bundle,\n-\t\t\t\t      String name, String def)\n+  private String safeGetString(ResourceBundle bundle,\n+                               String name, String def)\n   {\n     if (bundle != null)\n       {\n@@ -99,8 +99,8 @@ private final String safeGetString (ResourceBundle bundle,\n     return def;\n   }\n \n-  private final char safeGetChar (ResourceBundle bundle,\n-\t\t\t\t  String name, char def)\n+  private char safeGetChar(ResourceBundle bundle,\n+                           String name, char def)\n   {\n     String r = null;\n     if (bundle != null)"}, {"sha": "0d68941348082ece2eb500068072633edeadd8bb", "filename": "libjava/java/text/MessageFormat.java", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FMessageFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FMessageFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FMessageFormat.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -189,8 +189,7 @@ protected Object readResolve() throws InvalidObjectException\n   // Helper that returns the text up to the next format opener.  The\n   // text is put into BUFFER.  Returns index of character after end of\n   // string.  Throws IllegalArgumentException on error.\n-  private static final int scanString (String pat, int index,\n-\t\t\t\t       StringBuffer buffer)\n+  private static int scanString(String pat, int index, StringBuffer buffer)\n   {\n     int max = pat.length();\n     buffer.setLength(0);\n@@ -220,9 +219,8 @@ else if (c == '}')\n \n   // This helper retrieves a single part of a format element.  Returns\n   // the index of the terminating character.\n-  private static final int scanFormatElement (String pat, int index,\n-\t\t\t\t\t      StringBuffer buffer,\n-\t\t\t\t\t      char term)\n+  private static int scanFormatElement(String pat, int index,\n+                                       StringBuffer buffer, char term)\n   {\n     int max = pat.length();\n     buffer.setLength(0);\n@@ -266,9 +264,8 @@ else if (c == term)\n \n   // This is used to parse a format element and whatever non-format\n   // text might trail it.\n-  private static final int scanFormat (String pat, int index,\n-\t\t\t\t       StringBuffer buffer, Vector elts,\n-\t\t\t\t       Locale locale)\n+  private static int scanFormat(String pat, int index, StringBuffer buffer,\n+                                Vector elts, Locale locale)\n   {\n     MessageFormatElement mfe = new MessageFormatElement ();\n     elts.addElement(mfe);"}, {"sha": "368292686bca0cf90c78730c55ffa2cd0db7886c", "filename": "libjava/java/text/NumberFormat.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FNumberFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FNumberFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FNumberFormat.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -302,9 +302,8 @@ public static Locale[] getAvailableLocales ()\n     return list;\n   }\n \n-  private static final NumberFormat computeInstance (Locale loc,\n-\t\t\t\t\t\t     String resource,\n-\t\t\t\t\t\t     String def)\n+  private static NumberFormat computeInstance(Locale loc, String resource,\n+                                              String def)\n   {\n     ResourceBundle res;\n     try"}, {"sha": "c2cff5a0c8c27164c828ffe727f33e197e111bce", "filename": "libjava/java/text/RuleBasedCollator.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -147,7 +147,7 @@ public class RuleBasedCollator extends Collator\n    * This class describes what rank has a character (or a sequence of characters) \n    * in the lexicographic order. Each element in a rule has a collation element.\n    */\n-  final static class CollationElement\n+  static final class CollationElement\n   {\n     String key;\n     int primary;\n@@ -169,7 +169,7 @@ public class RuleBasedCollator extends Collator\n       this.expansion = expansion;\n     }\n \n-    final int getValue()\n+    int getValue()\n     {\n       return (primary << 16) + (secondary << 8) + tertiary;\n     }\n@@ -183,7 +183,7 @@ final int getValue()\n    * {@link #mergeRules(int,java.lang.String,java.util.ArrayList,java.util.ArrayList)})\n    * as a temporary state while merging two sets of instructions.\n    */\n-  final static class CollationSorter\n+  static final class CollationSorter\n   {\n     static final int GREATERP = 0;\n     static final int GREATERS = 1;"}, {"sha": "35083eb887e0d82b78218de582dfb7274fa9491c", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,6 +1,7 @@\n /* SimpleDateFormat.java -- A class for parsing/formating simple \n    date constructs\n-   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -419,7 +420,7 @@ public int hashCode()\n    * appending to the specified StringBuffer.  The input StringBuffer\n    * is returned as output for convenience.\n    */\n-  final private void formatWithAttribute(Date date, FormatBuffer buffer, FieldPosition pos)\n+  private void formatWithAttribute(Date date, FormatBuffer buffer, FieldPosition pos)\n   {\n     String temp;\n     AttributedCharacterIterator.Attribute attribute;\n@@ -584,7 +585,7 @@ private void withLeadingZeros(int value, int length, FormatBuffer buffer)\n     buffer.append(valStr);\n   }\n \n-  private final boolean expect (String source, ParsePosition pos, char ch)\n+  private boolean expect(String source, ParsePosition pos, char ch)\n   {\n     int x = pos.getIndex();\n     boolean r = x < source.length() && source.charAt(x) == ch;"}, {"sha": "d152ba1d96b43f8bd355fbd84c0c3e4a8e2f0147", "filename": "libjava/java/util/BitSet.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FBitSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FBitSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FBitSet.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n /* BitSet.java -- A vector of bits.\n-   Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -732,7 +732,7 @@ public void xor(BitSet bs)\n    *\n    * @param lastElt the size needed for the bits array\n    */\n-  private final void ensure(int lastElt)\n+  private void ensure(int lastElt)\n   {\n     if (lastElt >= bits.length)\n       {"}, {"sha": "1f0b27a56e8c0404d303e6396dadaffe788c2ae9", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,4 +1,4 @@\n-/* java.util.Calendar\n+/* Calendar.java --\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -1057,7 +1057,7 @@ public Object clone()\n       }\n   }\n \n-  private final static String[] fieldNames = {\n+  private static final String[] fieldNames = {\n     \",ERA=\", \",YEAR=\", \",MONTH=\",\n     \",WEEK_OF_YEAR=\", \",WEEK_OF_MONTH=\",\n     \",DAY_OF_MONTH=\", \",DAY_OF_YEAR=\", \",DAY_OF_WEEK=\","}, {"sha": "5ae4b40389a37225af65565a57eeb9080277ec1a", "filename": "libjava/java/util/Collections.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FCollections.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FCollections.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollections.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,6 @@\n /* Collections.java -- Utility class with methods to operate on collections\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -1053,7 +1054,7 @@ public static Comparator reverseOrder()\n   /**\n    * The object for {@link #reverseOrder()}.\n    */\n-  static private final ReverseComparator rcInstance = new ReverseComparator();\n+  private static final ReverseComparator rcInstance = new ReverseComparator();\n \n   /**\n    * The implementation of {@link #reverseOrder()}. This class name\n@@ -1067,7 +1068,7 @@ public static Comparator reverseOrder()\n     /**\n      * Compatible with JDK 1.4.\n      */\n-    static private final long serialVersionUID = 7207038068494060240L;\n+    private static final long serialVersionUID = 7207038068494060240L;\n \n     /**\n      * A private constructor adds overhead."}, {"sha": "5d15786307f0766b51ff42bf72f6ce51d8f747f0", "filename": "libjava/java/util/IdentityHashMap.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FIdentityHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FIdentityHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FIdentityHashMap.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,6 +1,6 @@\n /* IdentityHashMap.java -- a class providing a hashtable data structure,\n    mapping Object --> Object, which uses object identity for hashing.\n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -679,7 +679,7 @@ int hash(Object key)\n    * @author Tom Tromey <tromey@redhat.com>\n    * @author Eric Blake <ebb9@email.byu.edu>\n    */\n-  private final class IdentityIterator implements Iterator\n+  private class IdentityIterator implements Iterator\n   {\n     /**\n      * The type of this Iterator: {@link #KEYS}, {@link #VALUES},\n@@ -878,7 +878,7 @@ public Object setValue(Object value)\n      * @throws ConcurrentModificationException if the entry was invalidated\n      *         by modifying the Map or calling Iterator.remove()\n      */\n-    public final String toString()\n+    public String toString()\n     {\n       if (knownMod != modCount || table[loc] == tombstone)\n         throw new ConcurrentModificationException();"}, {"sha": "54fd097a0ef8cd04a6f8bd92ca48766a2798fbc9", "filename": "libjava/java/util/Locale.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FLocale.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FLocale.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLocale.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -416,7 +416,7 @@ public String getVariant()\n    * @return the string representation of this Locale\n    * @see #getDisplayName()\n    */\n-  public final String toString()\n+  public String toString()\n   {\n     if (language.length() == 0 && country.length() == 0)\n       return \"\";\n@@ -522,7 +522,7 @@ public String getISO3Country()\n    * @return the language name of this locale localized to the default locale,\n    *         with the ISO code as backup\n    */\n-  public final String getDisplayLanguage()\n+  public String getDisplayLanguage()\n   {\n     return getDisplayLanguage(defaultLocale);\n   }\n@@ -560,7 +560,7 @@ public String getDisplayLanguage(Locale locale)\n    * @return the country name of this locale localized to the given locale,\n    *         with the ISO code as backup\n    */\n-  public final String getDisplayCountry()\n+  public String getDisplayCountry()\n   {\n     return getDisplayCountry(defaultLocale);\n   }\n@@ -598,7 +598,7 @@ public String getDisplayCountry(Locale locale)\n    * @return the variant code of this locale localized to the given locale,\n    *         with the ISO code as backup\n    */\n-  public final String getDisplayVariant()\n+  public String getDisplayVariant()\n   {\n     return getDisplayVariant(defaultLocale);\n   }\n@@ -637,7 +637,7 @@ public String getDisplayVariant(Locale locale)\n    *\n    * @return String version of this locale, suitable for display to the user\n    */\n-  public final String getDisplayName()\n+  public String getDisplayName()\n   {\n     return getDisplayName(defaultLocale);\n   }"}, {"sha": "440536845d73a4936ae40c54cb2879da94fb6204", "filename": "libjava/java/util/TreeMap.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FTreeMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2FTreeMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FTreeMap.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1536,7 +1536,7 @@ private final class SubMap extends AbstractMap implements SortedMap\n      * @param key the key to check\n      * @return true if the key is in range\n      */\n-    final boolean keyInRange(Object key)\n+    boolean keyInRange(Object key)\n     {\n       return ((minKey == nil || compare(key, minKey) >= 0)\n               && (maxKey == nil || compare(key, maxKey) < 0));"}, {"sha": "f976033a0df94693683d76f51b6d3e4da077f5b7", "filename": "libjava/java/util/logging/LogRecord.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Flogging%2FLogRecord.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Flogging%2FLogRecord.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FLogRecord.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,6 +1,6 @@\n /* LogRecord.java --\n    A class for the state associated with individual logging events\n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -388,7 +388,7 @@ public void setLevel(Level level)\n    * Allocates a sequence number for a new LogRecord.  This class\n    * method is only called by the LogRecord constructor.\n    */\n-  private synchronized static long allocateSeqNum()\n+  private static synchronized long allocateSeqNum()\n   {\n     lastSeqNum += 1;\n     return lastSeqNum;"}, {"sha": "71fad3ad11f0323cf1b9553bd8ae8c3747fc8687", "filename": "libjava/java/util/logging/XMLFormatter.java", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Flogging%2FXMLFormatter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Flogging%2FXMLFormatter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FXMLFormatter.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -98,10 +98,8 @@ public XMLFormatter()\n    * @param content the element content, or <code>null</code> to\n    *        have no output whatsoever appended to <code>buf</code>.\n    */\n-  private static final void appendTag(StringBuffer buf,\n-\t\t\t\t      int indent,\n-\t\t\t\t      String tag,\n-\t\t\t\t      String content)\n+  private static void appendTag(StringBuffer buf, int indent,\n+                                String tag, String content)\n   {\n     int i;\n \n@@ -175,10 +173,8 @@ private static final void appendTag(StringBuffer buf,\n    *\n    * @param content the element content.\n    */\n-  private static final void appendTag(StringBuffer buf,\n-\t\t\t\t      int indent,\n-\t\t\t\t      String tag,\n-\t\t\t\t      long content)\n+  private static void appendTag(StringBuffer buf, int indent,\n+                                String tag, long content)\n   {\n     appendTag(buf, indent, tag, Long.toString(content));\n   }"}, {"sha": "69f4426e6d3439bdfad16bbead940f3b217a9281", "filename": "libjava/java/util/prefs/AbstractPreferences.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Fprefs%2FAbstractPreferences.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Fprefs%2FAbstractPreferences.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fprefs%2FAbstractPreferences.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n-/* AbstractPreferences - Partial implementation of a Preference node\n-   Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+/* AbstractPreferences -- Partial implementation of a Preference node\n+   Copyright (C) 2001, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -1197,7 +1197,7 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * @exception BackingStoreException when the backing store cannot be     \n      *            reached\n      */\n-    abstract protected String[] keysSpi() throws BackingStoreException;\n+    protected abstract String[] keysSpi() throws BackingStoreException;\n      \n     /**\n      * Returns the value associated with the key in this preferences node or\n@@ -1207,7 +1207,7 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * key is valid, not null and that the node has not been removed.\n      * <code>key()</code> will catch any exceptions that this method throws.\n      */\n-    abstract protected String getSpi(String key);\n+    protected abstract String getSpi(String key);\n \n     /**\n      * Sets the value of the given preferences entry for this node.\n@@ -1220,7 +1220,7 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * Called by <code>put()</code> with this node locked after checking that\n      * key and value are valid and non-null.\n      */\n-    abstract protected void putSpi(String key, String value);\n+    protected abstract void putSpi(String key, String value);\n \n     /**\n      * Removes the given key entry from this preferences node.\n@@ -1233,7 +1233,7 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * Called by <code>remove()</code> with this node locked after checking\n      * that the key is valid and non-null.\n      */\n-    abstract protected void removeSpi(String key);\n+    protected abstract void removeSpi(String key);\n \n     /**\n      * Writes all entries of this preferences node that have not yet been\n@@ -1245,7 +1245,7 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * <p>\n      * Called (indirectly) by <code>flush()</code> with this node locked.\n      */\n-    abstract protected void flushSpi() throws BackingStoreException;\n+    protected abstract void flushSpi() throws BackingStoreException;\n \n     /**\n      * Writes all entries of this preferences node that have not yet been\n@@ -1257,7 +1257,7 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * <p>\n      * Called (indirectly) by <code>sync()</code> with this node locked.\n      */\n-    abstract protected void syncSpi() throws BackingStoreException;\n+    protected abstract void syncSpi() throws BackingStoreException;\n \n     /**\n      * Clears this node from this VM and removes it from the backing store.\n@@ -1266,5 +1266,5 @@ public void removeNodeChangeListener(NodeChangeListener listener) {\n      * Called (indirectly) by <code>removeNode()</code> with this node locked\n      * after all the sub nodes of this node have already been removed.\n      */\n-    abstract protected void removeNodeSpi() throws BackingStoreException;\n+    protected abstract void removeNodeSpi() throws BackingStoreException;\n }"}, {"sha": "c0f0231951f2fcc18e987151349c29d1bd9e6d75", "filename": "libjava/java/util/prefs/Preferences.java", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Fprefs%2FPreferences.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjava%2Futil%2Fprefs%2FPreferences.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fprefs%2FPreferences.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -1,5 +1,5 @@\n-/* Preferences - Preference node containing key value entries and subnodes\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+/* Preferences -- Preference node containing key value entries and subnodes\n+   Copyright (C) 2001, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -307,28 +307,28 @@ public static void importPreferences(InputStream is)\n      * plus a '/' plus its own name. If the node is the root node and has no\n      * parent then its name is \"\" and its absolute path name is \"/\".\n      */\n-    abstract public String absolutePath();\n+    public abstract String absolutePath();\n \n     /**\n      * Returns true if this node comes from the user preferences tree, false\n      * if it comes from the system preferences tree.\n      */\n-    abstract public boolean isUserNode();\n+    public abstract boolean isUserNode();\n \n     /**\n      * Returns the name of this preferences node. The name of the node cannot\n      * be null, can be mostly 80 characters and cannot contain any '/'\n      * characters. The root node has as name \"\".\n      */\n-    abstract public String name();\n+    public abstract String name();\n \n     /**\n      * Returns the String given by\n      * <code>\n      * (isUserNode() ? \"User\":\"System\") + \" Preference Node: \" + absolutePath()\n      * </code>\n      */\n-    abstract public String toString();\n+    public abstract String toString();\n \n     // abstract methods (navigation)\n \n@@ -340,7 +340,7 @@ public static void importPreferences(InputStream is)\n      *            reached\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public String[] childrenNames() throws BackingStoreException;\n+    public abstract String[] childrenNames() throws BackingStoreException;\n \n     /**\n      * Returns a sub node of this preferences node if the given path is\n@@ -353,7 +353,7 @@ public static void importPreferences(InputStream is)\n      * string \"/\" (indicating the root node) or any name on the path is more\n      * then 80 characters long\n      */\n-    abstract public Preferences node(String path);\n+    public abstract Preferences node(String path);\n \n     /**\n      * Returns true if the node that the path points to exists in memory or\n@@ -371,7 +371,7 @@ public static void importPreferences(InputStream is)\n      * string \"/\" (indicating the root node) or any name on the path is more\n      * then 80 characters long\n      */\n-    abstract public boolean nodeExists(String path)\n+    public abstract boolean nodeExists(String path)\n                                 throws BackingStoreException;\n \n     /**\n@@ -380,21 +380,21 @@ abstract public boolean nodeExists(String path)\n      *\n      * @exception IllegalStateException if this node has been removed\n      */\n-    abstract public Preferences parent();\n+    public abstract Preferences parent();\n \n     // abstract methods (export)\n \n     /**\n      * XXX\n      */\n-    abstract public void exportNode(OutputStream os)\n+    public abstract void exportNode(OutputStream os)\n                                 throws BackingStoreException,\n                                        IOException;\n \n     /**\n      * XXX\n      */\n-    abstract public void exportSubtree(OutputStream os)\n+    public abstract void exportSubtree(OutputStream os)\n                                 throws BackingStoreException,\n                                        IOException;\n \n@@ -408,7 +408,7 @@ abstract public void exportSubtree(OutputStream os)\n      *            reached\n      * @exception IllegalStateException if this node has been removed\n      */\n-    abstract public String[] keys() throws BackingStoreException;\n+    public abstract String[] keys() throws BackingStoreException;\n \n     /**\n      * Returns the value associated with the key in this preferences node. If\n@@ -420,7 +420,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public String get(String key, String defaultVal);\n+    public abstract String get(String key, String defaultVal);\n \n     /**\n      * Convenience method for getting the given entry as a boolean.\n@@ -432,7 +432,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public boolean getBoolean(String key, boolean defaultVal);\n+    public abstract boolean getBoolean(String key, boolean defaultVal);\n \n     /**\n      * Convenience method for getting the given entry as a byte array.\n@@ -445,7 +445,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public byte[] getByteArray(String key, byte[] defaultVal);\n+    public abstract byte[] getByteArray(String key, byte[] defaultVal);\n \n     /**\n      * Convenience method for getting the given entry as a double.\n@@ -457,7 +457,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public double getDouble(String key, double defaultVal);\n+    public abstract double getDouble(String key, double defaultVal);\n \n     /**\n      * Convenience method for getting the given entry as a float.\n@@ -469,7 +469,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public float getFloat(String key, float defaultVal);\n+    public abstract float getFloat(String key, float defaultVal);\n \n     /**\n      * Convenience method for getting the given entry as an integer.\n@@ -481,7 +481,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public int getInt(String key, int defaultVal);\n+    public abstract int getInt(String key, int defaultVal);\n \n     /**\n      * Convenience method for getting the given entry as a long.\n@@ -493,7 +493,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has been removed\n      * @exception NullPointerException if key is null\n      */\n-    abstract public long getLong(String key, long defaultVal);\n+    public abstract long getLong(String key, long defaultVal);\n \n     /**\n      * Sets the value of the given preferences entry for this node.\n@@ -507,7 +507,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if either key or value are to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void put(String key, String value);\n+    public abstract void put(String key, String value);\n \n     /**\n      * Convenience method for setting the given entry as a boolean.\n@@ -518,7 +518,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if the key length is to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void putBoolean(String key, boolean value);\n+    public abstract void putBoolean(String key, boolean value);\n \n     /**\n      * Convenience method for setting the given entry as an array of bytes.\n@@ -533,7 +533,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if either key or value are to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void putByteArray(String key, byte[] value);\n+    public abstract void putByteArray(String key, byte[] value);\n \n     /**\n      * Convenience method for setting the given entry as a double.\n@@ -544,7 +544,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if the key length is to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void putDouble(String key, double value);\n+    public abstract void putDouble(String key, double value);\n \n     /**\n      * Convenience method for setting the given entry as a float.\n@@ -555,7 +555,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if the key length is to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void putFloat(String key, float value);\n+    public abstract void putFloat(String key, float value);\n \n     /**\n      * Convenience method for setting the given entry as an integer.\n@@ -566,7 +566,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if the key length is to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void putInt(String key, int value);\n+    public abstract void putInt(String key, int value);\n \n     /**\n      * Convenience method for setting the given entry as a long.\n@@ -577,7 +577,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if the key length is to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void putLong(String key, long value);\n+    public abstract void putLong(String key, long value);\n \n     /**\n      * Removes the preferences entry from this preferences node.\n@@ -589,7 +589,7 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalArgumentException if the key length is to large\n      * @exception IllegalStateException when this node has been removed\n      */\n-    abstract public void remove(String key);\n+    public abstract void remove(String key);\n \n     // abstract methods (preference node manipulation)\n \n@@ -604,7 +604,7 @@ abstract public void exportSubtree(OutputStream os)\n      *            reached\n      * @exception IllegalStateException if this node has been removed\n      */\n-    abstract public void clear() throws BackingStoreException;\n+    public abstract void clear() throws BackingStoreException;\n \n     /**\n      * Writes all preference changes on this and any subnode that have not\n@@ -618,7 +618,7 @@ abstract public void exportSubtree(OutputStream os)\n      *            reached\n      * @exception IllegalStateException if this node has been removed\n      */\n-    abstract public void flush() throws BackingStoreException;\n+    public abstract void flush() throws BackingStoreException;\n \n     /**\n      * Writes and reads all preference changes to and from this and any\n@@ -630,7 +630,7 @@ abstract public void exportSubtree(OutputStream os)\n      *            reached\n      * @exception IllegalStateException if this node has been removed\n      */\n-    abstract public void sync() throws BackingStoreException;\n+    public abstract void sync() throws BackingStoreException;\n \n     /**\n      * Removes this and all subnodes from the backing store and clears all\n@@ -651,19 +651,18 @@ abstract public void exportSubtree(OutputStream os)\n      * @exception IllegalStateException if this node has already been removed\n      * @exception UnsupportedOperationException if this is a root node\n      */\n-    abstract public void removeNode() throws BackingStoreException;\n+    public abstract void removeNode() throws BackingStoreException;\n \n     // abstract methods (listeners)\n \n-    abstract public void addNodeChangeListener(NodeChangeListener listener);\n+    public abstract void addNodeChangeListener(NodeChangeListener listener);\n \n-    abstract public void addPreferenceChangeListener\n+    public abstract void addPreferenceChangeListener\n                             (PreferenceChangeListener listener);\n \n-    abstract public void removeNodeChangeListener(NodeChangeListener listener);\n+    public abstract void removeNodeChangeListener(NodeChangeListener listener);\n \n-    abstract public void removePreferenceChangeListener\n+    public abstract void removePreferenceChangeListener\n                             (PreferenceChangeListener listener);\n-\n }\n "}, {"sha": "7f9ea391f2e13228f382805282bf20b01e17985e", "filename": "libjava/javax/crypto/interfaces/DHPrivateKey.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FDHPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FDHPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FDHPrivateKey.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -57,9 +57,8 @@\n  */\n public interface DHPrivateKey extends DHKey, PrivateKey\n {\n-\n   /** Compatible with JDK1.4. */\n-  static final long serialVersionUID = 2211791113380396553L;\n+  long serialVersionUID = 2211791113380396553L;\n \n   /**\n    * Returns the private value <i>x</i>."}, {"sha": "1fcb8144a3afc64bd0b55672653f9aefbdff8c0f", "filename": "libjava/javax/crypto/interfaces/DHPublicKey.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FDHPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FDHPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FDHPublicKey.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -56,9 +56,8 @@\n  */\n public interface DHPublicKey extends DHKey, PublicKey\n {\n-\n   /** Compatible with JDK1.4. */\n-  static final long serialVersionUID = -6628103563352519193L;\n+  long serialVersionUID = -6628103563352519193L;\n \n   /**\n    * Get the public value <i>y</i>."}, {"sha": "30d25323f376f2195790a68470bb96e3c71001b1", "filename": "libjava/javax/crypto/interfaces/PBEKey.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FPBEKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FPBEKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2Finterfaces%2FPBEKey.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -51,9 +51,8 @@\n  */\n public interface PBEKey extends SecretKey\n {\n-\n   /** Compatible with JDK1.4. */\n-  static final long serialVersionUID = -1430015993304333921L;\n+  long serialVersionUID = -1430015993304333921L;\n \n   /**\n    * Retruns the iteration count, or 0 if not specified."}, {"sha": "ecb0ac9294a2b4c5493428c931dfd82bfa6e877e", "filename": "libjava/javax/net/ssl/HandshakeCompletedEvent.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fnet%2Fssl%2FHandshakeCompletedEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fnet%2Fssl%2FHandshakeCompletedEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnet%2Fssl%2FHandshakeCompletedEvent.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -52,15 +52,14 @@\n  */\n public class HandshakeCompletedEvent extends java.util.EventObject\n {\n-\n   // Fields.\n   // -------------------------------------------------------------------\n \n   /** Serialization constant. */\n   private static final long serialVersionUID = 7914963744257769778L;\n \n   /** The session. */\n-  private transient final SSLSession session;\n+  private final transient SSLSession session;\n \n   // Constructor.\n   // -------------------------------------------------------------------"}, {"sha": "5391acec825194ae7ba6e193064f2ee8cbb6e88a", "filename": "libjava/javax/security/auth/Subject.java", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fsecurity%2Fauth%2FSubject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0460023ee24e681de8ca5df2353065bcfc2bec84/libjava%2Fjavax%2Fsecurity%2Fauth%2FSubject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsecurity%2Fauth%2FSubject.java?ref=0460023ee24e681de8ca5df2353065bcfc2bec84", "patch": "@@ -59,12 +59,8 @@\n import java.util.LinkedList;\n import java.util.Set;\n \n-/**\n- *\n- */\n public final class Subject implements Serializable\n {\n-\n   // Fields.\n   // -------------------------------------------------------------------------\n \n@@ -81,8 +77,8 @@ public final class Subject implements Serializable\n    */\n   private boolean readOnly;\n \n-  private transient final SecureSet pubCred;\n-  private transient final SecureSet privCred;\n+  private final transient SecureSet pubCred;\n+  private final transient SecureSet privCred;\n \n   // Constructors.\n   // -------------------------------------------------------------------------\n@@ -371,7 +367,6 @@ public String toString()\n    */\n   private static class SecureSet extends AbstractSet implements Serializable\n   {\n-\n     // Fields.\n     // -----------------------------------------------------------------------\n \n@@ -383,7 +378,7 @@ private static class SecureSet extends AbstractSet implements Serializable\n \n     private final Subject subject;\n     private final LinkedList elements;\n-    private transient final int type;\n+    private final transient int type;\n \n     // Constructors.\n     // -----------------------------------------------------------------------"}]}