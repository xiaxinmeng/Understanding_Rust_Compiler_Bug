{"sha": "643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "node_id": "C_kwDOANBUbNoAKDY0M2U4ZjRlZTNhMmE1OWE5Yjk2ZmJjZDFmZmE4YmFjYmRhNWIzODM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-30T17:08:25Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-30T17:08:25Z"}, "message": "Fortran: Fix same_type_as\n\nA test for CLASS(*) + assumed rank was missing; adding a test to\nunlimited_polymorphic_1.f03 showed an ICE as backend_decl wasn't\nset. While gfc_get_symbol_decl would fix it, the code also assumed\nthat the class(*) was a variable and could not be a subobject of\na derived type.\n\n\tPR fortran/71703\n\tPR fortran/84007\n\ngcc/fortran/ChangeLog:\n\n\t* trans-intrinsic.c (gfc_conv_same_type_as): Fix handling\n\tof UNLIMITED_POLY.\n\t* trans.h (gfc_vtpr_hash_get): Renamed prototype to ...\n\t(gfc_vptr_hash_get): ... this to match function name.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/c-interop/c535b-1.f90: Remove wrong comment.\n\t* gfortran.dg/unlimited_polymorphic_1.f03: Extend.\n\t* gfortran.dg/unlimited_polymorphic_32.f90: New test.", "tree": {"sha": "916bf1b74f4268ebf136c97877bf064724b3d6ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/916bf1b74f4268ebf136c97877bf064724b3d6ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8088a33df5f62fd6416fb8cb158b791e639aa707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8088a33df5f62fd6416fb8cb158b791e639aa707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8088a33df5f62fd6416fb8cb158b791e639aa707"}], "stats": {"total": 317, "additions": 296, "deletions": 21}, "files": [{"sha": "2a2829c9f0438ff1dbb25a21fe6ffbdc8f424ae7", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "patch": "@@ -9126,21 +9126,14 @@ gfc_conv_same_type_as (gfc_se *se, gfc_expr *expr)\n   a = expr->value.function.actual->expr;\n   b = expr->value.function.actual->next->expr;\n \n-  if (UNLIMITED_POLY (a))\n+  bool unlimited_poly_a = UNLIMITED_POLY (a);\n+  bool unlimited_poly_b = UNLIMITED_POLY (b);\n+  if (unlimited_poly_a)\n     {\n-      tmp = gfc_class_vptr_get (a->symtree->n.sym->backend_decl);\n-      conda = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n-\t\t\t       tmp, build_int_cst (TREE_TYPE (tmp), 0));\n-    }\n-\n-  if (UNLIMITED_POLY (b))\n-    {\n-      tmp = gfc_class_vptr_get (b->symtree->n.sym->backend_decl);\n-      condb = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n-\t\t\t       tmp, build_int_cst (TREE_TYPE (tmp), 0));\n+      se1.want_pointer = 1;\n+      gfc_add_vptr_component (a);\n     }\n-\n-  if (a->ts.type == BT_CLASS)\n+  else if (a->ts.type == BT_CLASS)\n     {\n       gfc_add_vptr_component (a);\n       gfc_add_hash_component (a);\n@@ -9149,7 +9142,12 @@ gfc_conv_same_type_as (gfc_se *se, gfc_expr *expr)\n     a = gfc_get_int_expr (gfc_default_integer_kind, NULL,\n \t\t\t  a->ts.u.derived->hash_value);\n \n-  if (b->ts.type == BT_CLASS)\n+  if (unlimited_poly_b)\n+    {\n+      se2.want_pointer = 1;\n+      gfc_add_vptr_component (b);\n+    }\n+  else if (b->ts.type == BT_CLASS)\n     {\n       gfc_add_vptr_component (b);\n       gfc_add_hash_component (b);\n@@ -9161,6 +9159,22 @@ gfc_conv_same_type_as (gfc_se *se, gfc_expr *expr)\n   gfc_conv_expr (&se1, a);\n   gfc_conv_expr (&se2, b);\n \n+  if (unlimited_poly_a)\n+    {\n+      conda = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n+\t\t\t       se1.expr,\n+\t\t\t       build_int_cst (TREE_TYPE (se1.expr), 0));\n+      se1.expr = gfc_vptr_hash_get (se1.expr);\n+    }\n+\n+  if (unlimited_poly_b)\n+    {\n+      condb = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n+\t\t\t       se2.expr,\n+\t\t\t       build_int_cst (TREE_TYPE (se2.expr), 0));\n+      se2.expr = gfc_vptr_hash_get (se2.expr);\n+    }\n+\n   tmp = fold_build2_loc (input_location, EQ_EXPR,\n \t\t\t logical_type_node, se1.expr,\n \t\t\t fold_convert (TREE_TYPE (se1.expr), se2.expr));"}, {"sha": "fa3e8651b4403951607d289697020035f273af4e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "patch": "@@ -438,7 +438,7 @@ tree gfc_class_vtab_def_init_get (tree);\n tree gfc_class_vtab_copy_get (tree);\n tree gfc_class_vtab_final_get (tree);\n /* Get an accessor to the vtab's * field, when a vptr handle is present.  */\n-tree gfc_vtpr_hash_get (tree);\n+tree gfc_vptr_hash_get (tree);\n tree gfc_vptr_size_get (tree);\n tree gfc_vptr_extends_get (tree);\n tree gfc_vptr_def_init_get (tree);"}, {"sha": "748e027f8978daaa5335296b373c57de37a64044", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-1.f90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90?ref=643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "patch": "@@ -297,8 +297,6 @@ function test_ubound (a)\n ! coshape, lcobound, ucobound: requires CODIMENSION attribute, which is\n !   not permitted on an assumed-rank variable.\n !\n-! extends_type_of, same_type_as: require a class argument.\n-\n \n ! F2018 additionally permits the first arg to C_SIZEOF to be\n ! assumed-rank (C838)."}, {"sha": "8634031ad818449d4a72cb3f98e27a5e7aca8887", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_1.f03", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_1.f03?ref=643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "patch": "@@ -196,16 +196,25 @@ subroutine foo (arg, res)\n \r\n \r\n ! Check assumed rank calls\r\n-  call foobar (u3, 0)\r\n-  call foobar (u4, 1)\r\n+  call foobar (u3, 0, is_u3=.true.)\r\n+  call foobar (u4, 1, is_u3=.false.)\r\n contains\r\n \r\n-  subroutine foobar (arg, ranki)\r\n+  subroutine foobar (arg, ranki, is_u3)\r\n     class(*) :: arg (..)\r\n     integer :: ranki\r\n+    logical, value :: is_u3\r\n     integer i\r\n     i = rank (arg)\r\n-    if (i .ne. ranki) STOP 1\n+    if (i .ne. ranki) STOP 1\r\n+    if (is_u3) then\r\n+      if (EXTENDS_TYPE_OF (arg, obj1) .neqv. .FALSE.) STOP 1\r\n+    else\r\n+      ! arg == u4\r\n+      if (EXTENDS_TYPE_OF (arg, obj1) .neqv. .FALSE.) STOP 1\r\n+    end if\r\n+  !  if (.NOT. SAME_TYPE_AS (arg, u3)) STOP 1\r\n+  !  if (.NOT. SAME_TYPE_AS (arg, u4)) STOP 1\r\n   end subroutine\r\n \r\n END\r"}, {"sha": "df57bcd41cbb92a5933071f12e96184fa3e6f42f", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_32.f90", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_32.f90?ref=643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "patch": "@@ -0,0 +1,254 @@\n+implicit none\n+type t2\n+  integer :: x\n+end type t2\n+\n+type, extends(t2) :: t2e\n+  integer :: y\n+end type t2e\n+\n+type t\n+  class(*), allocatable :: au, au2(:,:)\n+  class(t2), allocatable :: at, at2(:,:)\n+end type t\n+\n+type(t), target :: var, var0, var2(4), var2a(4)\n+class(*), allocatable :: au, au2(:,:)\n+class(t2), allocatable :: at, at2(:,:)\n+\n+\n+if (same_type_as (var%au, var%at)) error stop 1\n+if (same_type_as (var%au2, var%at)) error stop 2\n+if (same_type_as (var%au, var%at)) error stop 3\n+! Note: class(*) has no declared type, hence .false.\n+if (same_type_as (var%au, var0%au)) error stop 4\n+if (same_type_as (var%au2, var0%au2)) error stop 5\n+if (same_type_as (var%au, var0%au2)) error stop 6\n+call c1(var%au, var%au, var%au2)\n+\n+if (.not.same_type_as (var%at, var%at)) error stop 7\n+if (.not.same_type_as (var%at2, var%at)) error stop 8\n+if (.not.same_type_as (var%at, var%at2)) error stop 9\n+if (.not.extends_type_of (var%at, var%at)) error stop 10\n+if (.not.extends_type_of (var%at2, var%at)) error stop 11\n+if (.not.extends_type_of (var%at, var%at2)) error stop 12\n+if (same_type_as (var%at, var0%au)) error stop 13\n+if (same_type_as (var%at2, var0%au2)) error stop 14\n+if (same_type_as (var%at, var0%au2)) error stop 15\n+call c2(var%at, var%at, var%at2)\n+\n+if (same_type_as (au, var%at)) error stop 16\n+if (same_type_as (au2, var%at)) error stop 17\n+if (same_type_as (au, var%at)) error stop 18\n+! Note: class(*) has no declared type, hence .false.\n+if (same_type_as (au, var0%au)) error stop 19\n+if (same_type_as (au2, var0%au2)) error stop 20\n+if (same_type_as (au, var0%au2)) error stop 21\n+call c1(au, var%au, var%au2)\n+\n+if (.not.same_type_as (at, var%at)) error stop 22\n+if (.not.same_type_as (at2, var%at)) error stop 23\n+if (.not.same_type_as (at, var%at2)) error stop 24\n+if (.not.extends_type_of (at, var%at)) error stop 25\n+if (.not.extends_type_of (at2, var%at)) error stop 26\n+if (.not.extends_type_of (at, var%at2)) error stop 27\n+if (same_type_as (at, var0%au)) error stop 28\n+if (same_type_as (at2, var0%au2)) error stop 29\n+if (same_type_as (at, var0%au2)) error stop 30\n+call c2(var%at, var%at, var%at2)\n+\n+if (same_type_as (var%au, at)) error stop 31\n+if (same_type_as (var%au2, at)) error stop 32\n+if (same_type_as (var%au, at)) error stop 33\n+! Note: class(*) has no declared type, hence .false.\n+if (same_type_as (var%au, au)) error stop 34\n+if (same_type_as (var%au2, au2)) error stop 35\n+if (same_type_as (var%au, au2)) error stop 36\n+call c1(var%au, var%au, au2)\n+\n+if (.not.same_type_as (var%at, at)) error stop 37\n+if (.not.same_type_as (var%at2, at)) error stop 38\n+if (.not.same_type_as (var%at, at2)) error stop 39\n+if (.not.extends_type_of (var%at, at)) error stop 40\n+if (.not.extends_type_of (var%at2, at)) error stop 41\n+if (.not.extends_type_of (var%at, at2)) error stop 42\n+if (same_type_as (var%at, au)) error stop 43\n+if (same_type_as (var%at2, au2)) error stop 44\n+if (same_type_as (var%at, au2)) error stop 45\n+call c2(var%at, var%at, at2)\n+\n+allocate(t2e :: var0%at, var0%at2(4,4))\n+allocate(t2 :: var0%au, var0%au2(4,4))\n+\n+if (.not.same_type_as (var0%au, var%at)) error stop 46\n+if (.not.same_type_as (var0%au2, var%at)) error stop 47\n+if (.not.same_type_as (var0%au, var%at)) error stop 48\n+if (.not.same_type_as (var0%au, var0%au2)) error stop 49\n+if (.not.same_type_as (var0%au2, var0%au2)) error stop 50\n+if (.not.same_type_as (var0%au, var0%au2)) error stop 51\n+if (.not.extends_type_of (var0%au, var%at)) error stop 52\n+if (.not.extends_type_of (var0%au2, var%at)) error stop 53\n+if (.not.extends_type_of (var0%au, var%at)) error stop 54\n+if (.not.extends_type_of (var0%au, var0%au2)) error stop 55\n+if (.not.extends_type_of (var0%au2, var0%au2)) error stop 56\n+if (.not.extends_type_of (var0%au, var0%au2)) error stop 57\n+\n+if (.not.same_type_as (var0%au, at)) error stop 58\n+if (.not.same_type_as (var0%au2, at)) error stop 59\n+if (.not.same_type_as (var0%au, at2)) error stop 60\n+if (.not.extends_type_of (var0%au, at)) error stop 61\n+if (.not.extends_type_of (var0%au2, at)) error stop 62\n+if (.not.extends_type_of (var0%au, at2)) error stop 63\n+\n+if (same_type_as (var0%at, var%at)) error stop 64\n+if (same_type_as (var0%at2, var%at)) error stop 65\n+if (same_type_as (var0%at, var%at)) error stop 66\n+if (same_type_as (var0%at, var0%au2)) error stop 67\n+if (same_type_as (var0%at2, var0%au2)) error stop 68\n+if (same_type_as (var0%at, var0%au2)) error stop 69\n+if (.not.extends_type_of (var0%at, var%at)) error stop 70\n+if (.not.extends_type_of (var0%at2, var%at)) error stop 71\n+if (.not.extends_type_of (var0%at, var%at)) error stop 72\n+if (.not.extends_type_of (var0%at, var0%au2)) error stop 73\n+if (.not.extends_type_of (var0%at2, var0%au2)) error stop 74\n+if (.not.extends_type_of (var0%at, var0%au2)) error stop 75\n+\n+if (same_type_as (var0%at, at)) error stop 76\n+if (same_type_as (var0%at2, at)) error stop 77\n+if (same_type_as (var0%at, at2)) error stop 78\n+if (.not.extends_type_of (var0%at, at)) error stop 79\n+if (.not.extends_type_of (var0%at2, at)) error stop 80\n+if (.not.extends_type_of (var0%at, at2)) error stop 81\n+\n+call c3(var0%au, var0%au2, var0%at, var0%at2)\n+call c4(var0%au, var0%au2, var0%at, var0%at2)\n+\n+contains\n+  subroutine c1(x, y, z)\n+    class(*) :: x, y(..), z(..)\n+    if (same_type_as (x, var0%at)) error stop 82\n+    if (same_type_as (y, var0%at)) error stop 83\n+    if (same_type_as (z, var0%at)) error stop 84\n+    if (same_type_as (x, var%au)) error stop 85\n+    if (same_type_as (y, var%au2)) error stop 86\n+    if (same_type_as (z, var%au2)) error stop 87\n+\n+    if (same_type_as (x, at)) error stop 88\n+    if (same_type_as (y, at)) error stop 89\n+    if (same_type_as (z, at)) error stop 90\n+    if (same_type_as (x, au)) error stop 91\n+    if (same_type_as (y, au2)) error stop 92\n+    if (same_type_as (z, au2)) error stop 93\n+  end\n+\n+  subroutine c2(x, y, z)\n+    class(*) :: x, y(..), z(..)\n+    if (.not.same_type_as (x, var0%at)) error stop 94\n+    if (.not.same_type_as (y, var0%at)) error stop 95\n+    if (.not.same_type_as (z, var0%at)) error stop 96\n+    if (.not.extends_type_of (x, var0%at)) error stop 97\n+    if (.not.extends_type_of (y, var0%at)) error stop 98\n+    if (.not.extends_type_of (z, var0%at)) error stop 99\n+    if (same_type_as (x, var%au)) error stop 100\n+    if (same_type_as (y, var%au2)) error stop 101\n+    if (same_type_as (z, var%au2)) error stop 102\n+\n+    if (.not.same_type_as (x, at)) error stop 103\n+    if (.not.same_type_as (y, at)) error stop 104\n+    if (.not.same_type_as (z, at)) error stop 105\n+    if (.not.extends_type_of (x, at)) error stop 106\n+    if (.not.extends_type_of (y, at)) error stop 107\n+    if (.not.extends_type_of (z, at)) error stop 108\n+    if (same_type_as (x, au)) error stop 109\n+    if (same_type_as (y, au2)) error stop 110\n+    if (same_type_as (z, au2)) error stop 111\n+  end\n+\n+  subroutine c3(mau, mau2, mat, mat2)\n+    class(*) :: mau, mau2(:,:), mat, mat2(:,:)\n+\n+    if (.not.same_type_as (mau, var%at)) error stop 112\n+    if (.not.same_type_as (mau2, var%at)) error stop 113\n+    if (.not.same_type_as (mau, var%at)) error stop 114\n+    if (.not.same_type_as (mau, var0%au2)) error stop 115\n+    if (.not.same_type_as (mau2, var0%au2)) error stop 116\n+    if (.not.same_type_as (mau, var0%au2)) error stop 117\n+    if (.not.extends_type_of (mau, var%at)) error stop 118\n+    if (.not.extends_type_of (mau2, var%at)) error stop 119\n+    if (.not.extends_type_of (mau, var%at)) error stop 120\n+    if (.not.extends_type_of (mau, var0%au2)) error stop 121\n+    if (.not.extends_type_of (mau2, var0%au2)) error stop 122\n+    if (.not.extends_type_of (mau, var0%au2)) error stop 123\n+\n+    if (.not.same_type_as (mau, at)) error stop 124\n+    if (.not.same_type_as (mau2, at)) error stop 125\n+    if (.not.same_type_as (mau, at2)) error stop 126\n+    if (.not.extends_type_of (mau, at)) error stop 127\n+    if (.not.extends_type_of (mau2, at)) error stop 128\n+    if (.not.extends_type_of (mau, at2)) error stop 129\n+\n+    if (same_type_as (mat, var%at)) error stop 130\n+    if (same_type_as (mat2, var%at)) error stop 131\n+    if (same_type_as (mat, var%at)) error stop 132\n+    if (same_type_as (mat, var0%au2)) error stop 133\n+    if (same_type_as (mat2, var0%au2)) error stop 134\n+    if (same_type_as (mat, var0%au2)) error stop 135\n+    if (.not.extends_type_of (mat, var%at)) error stop 136\n+    if (.not.extends_type_of (mat2, var%at)) error stop 137\n+    if (.not.extends_type_of (mat, var%at)) error stop 138\n+    if (.not.extends_type_of (mat, var0%au2)) error stop 139\n+    if (.not.extends_type_of (mat2, var0%au2)) error stop 140\n+    if (.not.extends_type_of (mat, var0%au2)) error stop 141\n+\n+    if (same_type_as (mat, at)) error stop 142\n+    if (same_type_as (mat2, at)) error stop 143\n+    if (same_type_as (mat, at2)) error stop 144\n+    if (.not.extends_type_of (mat, at)) error stop 145\n+    if (.not.extends_type_of (mat2, at)) error stop 147\n+    if (.not.extends_type_of (mat, at2)) error stop 148\n+  end\n+\n+  subroutine c4(mau, mau2, mat, mat2)\n+    class(*) :: mau(..), mau2(..), mat(..), mat2(..)\n+\n+    if (.not.same_type_as (mau, var%at)) error stop 149\n+    if (.not.same_type_as (mau2, var%at)) error stop 150\n+    if (.not.same_type_as (mau, var%at)) error stop 151\n+    if (.not.same_type_as (mau, var0%au2)) error stop 152\n+    if (.not.same_type_as (mau2, var0%au2)) error stop 153\n+    if (.not.same_type_as (mau, var0%au2)) error stop 154\n+    if (.not.extends_type_of (mau, var%at)) error stop 155\n+    if (.not.extends_type_of (mau2, var%at)) error stop 156\n+    if (.not.extends_type_of (mau, var%at)) error stop 157\n+    if (.not.extends_type_of (mau, var0%au2)) error stop 158\n+    if (.not.extends_type_of (mau2, var0%au2)) error stop 159\n+    if (.not.extends_type_of (mau, var0%au2)) error stop 160\n+\n+    if (.not.same_type_as (mau, at)) error stop 161\n+    if (.not.same_type_as (mau2, at)) error stop 162\n+    if (.not.same_type_as (mau, at2)) error stop 163\n+    if (.not.extends_type_of (mau, at)) error stop 164\n+    if (.not.extends_type_of (mau2, at)) error stop 165\n+    if (.not.extends_type_of (mau, at2)) error stop 166\n+\n+    if (same_type_as (mat, var%at)) error stop 167\n+    if (same_type_as (mat2, var%at)) error stop 168\n+    if (same_type_as (mat, var%at)) error stop 169\n+    if (same_type_as (mat, var0%au2)) error stop 170\n+    if (same_type_as (mat2, var0%au2)) error stop 171\n+    if (same_type_as (mat, var0%au2)) error stop 172\n+    if (.not.extends_type_of (mat, var%at)) error stop 173\n+    if (.not.extends_type_of (mat2, var%at)) error stop 174\n+    if (.not.extends_type_of (mat, var%at)) error stop 175\n+    if (.not.extends_type_of (mat, var0%au2)) error stop 176\n+    if (.not.extends_type_of (mat2, var0%au2)) error stop 178\n+    if (.not.extends_type_of (mat, var0%au2)) error stop 179\n+\n+    if (same_type_as (mat, at)) error stop 180\n+    if (same_type_as (mat2, at)) error stop 181\n+    if (same_type_as (mat, at2)) error stop 182\n+    if (.not.extends_type_of (mat, at)) error stop 183\n+    if (.not.extends_type_of (mat2, at)) error stop 184\n+    if (.not.extends_type_of (mat, at2)) error stop 185\n+  end\n+end"}]}