{"sha": "aa0e90e7bff935856212b64236cd540acccc66a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEwZTkwZTdiZmY5MzU4NTYyMTJiNjQyMzZjZDU0MGFjY2NjNjZhMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-19T15:01:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-12-19T15:01:49Z"}, "message": "hash-map-tests.c: add a selftest involving int_hash\n\ngcc/ChangeLog:\n\t* hash-map-tests.c (selftest::test_map_of_int_to_strings): New\n\tselftest.\n\t(selftest::hash_map_tests_c_tests): Call it.\n\nFrom-SVN: r279582", "tree": {"sha": "801ab8174fc8ac7da6326dc361cf2b41c93f0ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/801ab8174fc8ac7da6326dc361cf2b41c93f0ab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa0e90e7bff935856212b64236cd540acccc66a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0e90e7bff935856212b64236cd540acccc66a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa0e90e7bff935856212b64236cd540acccc66a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0e90e7bff935856212b64236cd540acccc66a0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7b6a51df1f5ffa81bebbe492ce1418c9fdceab"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "299f3368d08b0343b34bd5bb07eea37fdf821474", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0e90e7bff935856212b64236cd540acccc66a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0e90e7bff935856212b64236cd540acccc66a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa0e90e7bff935856212b64236cd540acccc66a0", "patch": "@@ -1,3 +1,9 @@\n+2019-12-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* hash-map-tests.c (selftest::test_map_of_int_to_strings): New\n+\tselftest.\n+\t(selftest::hash_map_tests_c_tests): Call it.\n+\n 2019-12-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gimple-predict.h (gimple_predict_predictor): Make \"gs\" param"}, {"sha": "9a13a80442c81281170813288d6d55c9bbea97df", "filename": "gcc/hash-map-tests.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0e90e7bff935856212b64236cd540acccc66a0/gcc%2Fhash-map-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0e90e7bff935856212b64236cd540acccc66a0/gcc%2Fhash-map-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-tests.c?ref=aa0e90e7bff935856212b64236cd540acccc66a0", "patch": "@@ -103,6 +103,46 @@ test_map_of_strings_to_int ()\n   ASSERT_EQ (1, string_map.elements ());\n }\n \n+/* Construct a hash_map using int_hash and verify that\n+   various operations work correctly.  */\n+\n+static void\n+test_map_of_int_to_strings ()\n+{\n+  const int EMPTY = -1;\n+  const int DELETED = -2;\n+  typedef int_hash <int, EMPTY, DELETED> int_hash_t;\n+  hash_map <int_hash_t, const char *> m;\n+\n+  const char *ostrich = \"ostrich\";\n+  const char *elephant = \"elephant\";\n+  const char *ant = \"ant\";\n+  const char *spider = \"spider\";\n+  const char *millipede = \"Illacme plenipes\";\n+  const char *eric = \"half a bee\";\n+\n+  /* A fresh hash_map should be empty.  */\n+  ASSERT_EQ (0, m.elements ());\n+  ASSERT_EQ (NULL, m.get (2));\n+\n+  /* Populate the hash_map.  */\n+  ASSERT_EQ (false, m.put (2, ostrich));\n+  ASSERT_EQ (false, m.put (4, elephant));\n+  ASSERT_EQ (false, m.put (6, ant));\n+  ASSERT_EQ (false, m.put (8, spider));\n+  ASSERT_EQ (false, m.put (750, millipede));\n+  ASSERT_EQ (false, m.put (3, eric));\n+\n+  /* Verify that we can recover the stored values.  */\n+  ASSERT_EQ (6, m.elements ());\n+  ASSERT_EQ (*m.get (2), ostrich);\n+  ASSERT_EQ (*m.get (4), elephant);\n+  ASSERT_EQ (*m.get (6), ant);\n+  ASSERT_EQ (*m.get (8), spider);\n+  ASSERT_EQ (*m.get (750), millipede);\n+  ASSERT_EQ (*m.get (3), eric);\n+}\n+\n typedef class hash_map_test_val_t\n {\n public:\n@@ -244,6 +284,7 @@ void\n hash_map_tests_c_tests ()\n {\n   test_map_of_strings_to_int ();\n+  test_map_of_int_to_strings ();\n   test_map_of_type_with_ctor_and_dtor ();\n }\n "}]}