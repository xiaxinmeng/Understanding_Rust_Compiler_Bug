{"sha": "868df7f7f9a31877be4e4acbc1095072f1e6d362", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4ZGY3ZjdmOWEzMTg3N2JlNGU0YWNiYzEwOTUwNzJmMWU2ZDM2Mg==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-12-01T04:56:47Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-12-01T04:56:47Z"}, "message": "entered into RCS\n\nFrom-SVN: r85", "tree": {"sha": "b93f13da7546a3d53b77d1ae2ba086b18d9b679d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b93f13da7546a3d53b77d1ae2ba086b18d9b679d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868df7f7f9a31877be4e4acbc1095072f1e6d362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868df7f7f9a31877be4e4acbc1095072f1e6d362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868df7f7f9a31877be4e4acbc1095072f1e6d362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868df7f7f9a31877be4e4acbc1095072f1e6d362/comments", "author": null, "committer": null, "parents": [{"sha": "d946e26fa5081e2c779ed16b12a69e43434e58dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d946e26fa5081e2c779ed16b12a69e43434e58dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d946e26fa5081e2c779ed16b12a69e43434e58dc"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "0dc68b6e53ece533b103d1188edec12237dc76d1", "filename": "gcc/config/tahoe/harris.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868df7f7f9a31877be4e4acbc1095072f1e6d362/gcc%2Fconfig%2Ftahoe%2Fharris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868df7f7f9a31877be4e4acbc1095072f1e6d362/gcc%2Fconfig%2Ftahoe%2Fharris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Fharris.h?ref=868df7f7f9a31877be4e4acbc1095072f1e6d362", "patch": "@@ -0,0 +1,86 @@\n+/* Definitions of target machine for GNU compiler.  Harris tahoe version.\n+   Copyright (C) 1989 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#include \"tahoe.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dtahoe -Dunix -Dhcx\"\n+\n+#undef DBX_DEBUGGING_INFO\n+#define SDB_DEBUGGING_INFO\n+\n+#undef LIB_SPEC\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 1\n+\n+/* urem and udiv don't exist on this system.  */\n+#undef UDIVSI3_LIBCALL\n+#undef UMODSI3_LIBCALL\n+\n+/* Operand of .align is not logarithmic.  */\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)  \\\n+  LOG ? fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)) : 0\n+\n+/* For the same reason, we need .align 2 after casesi.  */\n+#undef PRINT_OPERAND\n+#define PRINT_OPERAND(FILE, X, CODE)  \\\n+{ if (CODE == '@')\t\t\t\t\t\t\t\\\n+    putc ('2', FILE);\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n+    fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n+  else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+    output_address (XEXP (X, 0));\t\t\t\t\t\\\n+  else { putc ('$', FILE); output_addr_const (FILE, X); }}\n+\n+#undef ASM_OUTPUT_LOCAL\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".bss \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u,4\\n\", (ROUNDED)))\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE)\t\t\t\\\n+  output_file_directive ((FILE), main_input_filename);\n+\n+#define ASM_OUTPUT_ASCII(FILE, PTR, SIZE)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  unsigned char *_p = (PTR);\t\t\t\t\\\n+  int _thissize = (SIZE);\t\t\t\t\\\n+  fprintf ((FILE), \"\\t.ascii \\\"\");\t\t\t\\\n+  for (i = 0; i < _thissize; i++)\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      register int c = _p[i];\t\t\t\t\\\n+      if (c >= ' ' && c < 0177 && c != '\\\"' && c != '\\\\') \\\n+\tputc (c, (FILE));\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  fprintf ((FILE), \"\\\\%o\", c);\t\t\t\\\n+\t  if (i < _thissize - 1\t\t\t\t\\\n+\t      && _p[i + 1] >= '0' && _p[i + 1] <= '9')\t\\\n+\t    fprintf ((FILE), \"\\\"\\n\\t.ascii \\\"\");\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n+}"}]}