{"sha": "6df6bcfa0fde9cc6413088d609f799188444f51b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmNmJjZmEwZmRlOWNjNjQxMzA4OGQ2MDlmNzk5MTg4NDQ0ZjUxYg==", "commit": {"author": {"name": "Michael Meissner", "email": "gnu@the-meissners.org", "date": "2009-01-14T22:40:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2009-01-14T22:40:34Z"}, "message": "Fix PR22599\n\nFrom-SVN: r143386", "tree": {"sha": "e276f7fae07e10ebc5a0ff65c5c7ea2a7df68ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e276f7fae07e10ebc5a0ff65c5c7ea2a7df68ab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df6bcfa0fde9cc6413088d609f799188444f51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df6bcfa0fde9cc6413088d609f799188444f51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df6bcfa0fde9cc6413088d609f799188444f51b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df6bcfa0fde9cc6413088d609f799188444f51b/comments", "author": null, "committer": null, "parents": [{"sha": "3e55cc6f7c4e97f38555873046f6b3880f102a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e55cc6f7c4e97f38555873046f6b3880f102a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e55cc6f7c4e97f38555873046f6b3880f102a25"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "dff3716851a8690400fea3b7a7c40c31f02e8f8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df6bcfa0fde9cc6413088d609f799188444f51b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df6bcfa0fde9cc6413088d609f799188444f51b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6df6bcfa0fde9cc6413088d609f799188444f51b", "patch": "@@ -1,3 +1,10 @@\n+2009-01-14  Michael Meissner  <gnu@the-meissners.org>\n+\n+\tPR target/22599\n+\t* i386.c (print_operand): Add tests for 'D', 'C', 'F', 'f' to make\n+\tsure the insn is a conditional test (bug 22599).  Reformat a few long\n+\tlines.\n+\n 2009-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/38431"}, {"sha": "d02f5c16fae3ed8010e7d878b478d5ff16e5bf57", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df6bcfa0fde9cc6413088d609f799188444f51b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df6bcfa0fde9cc6413088d609f799188444f51b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6df6bcfa0fde9cc6413088d609f799188444f51b", "patch": "@@ -10834,7 +10834,8 @@ print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"ord\", file);\n \t\t  break;\n \t\tdefault:\n-\t\t  gcc_unreachable ();\n+\t\t  output_operand_lossage (\"operand is not a condition code, invalid operand code 'D'\");\n+\t\t  return;\n \t\t}\n \t    }\n \t  else\n@@ -10872,7 +10873,8 @@ print_operand (FILE *file, rtx x, int code)\n \t\t  fputs (\"ord\", file);\n \t\t  break;\n \t\tdefault:\n-\t\t  gcc_unreachable ();\n+\t\t  output_operand_lossage (\"operand is not a condition code, invalid operand code 'D'\");\n+\t\t  return;\n \t\t}\n \t    }\n \t  return;\n@@ -10894,9 +10896,23 @@ print_operand (FILE *file, rtx x, int code)\n #endif\n \t  return;\n \tcase 'C':\n+\t  if (!COMPARISON_P (x))\n+\t    {\n+\t      output_operand_lossage (\"operand is neither a constant nor a \"\n+\t\t\t\t      \"condition code, invalid operand code \"\n+\t\t\t\t      \"'C'\");\n+\t      return;\n+\t    }\n \t  put_condition_code (GET_CODE (x), GET_MODE (XEXP (x, 0)), 0, 0, file);\n \t  return;\n \tcase 'F':\n+\t  if (!COMPARISON_P (x))\n+\t    {\n+\t      output_operand_lossage (\"operand is neither a constant nor a \"\n+\t\t\t\t      \"condition code, invalid operand code \"\n+\t\t\t\t      \"'F'\");\n+\t      return;\n+\t    }\n #ifdef HAVE_AS_IX86_CMOV_SUN_SYNTAX\n \t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('.', file);\n@@ -10909,13 +10925,22 @@ print_operand (FILE *file, rtx x, int code)\n \t  /* Check to see if argument to %c is really a constant\n \t     and not a condition code which needs to be reversed.  */\n \t  if (!COMPARISON_P (x))\n-\t  {\n-\t    output_operand_lossage (\"operand is neither a constant nor a condition code, invalid operand code 'c'\");\n-\t     return;\n-\t  }\n+\t    {\n+\t      output_operand_lossage (\"operand is neither a constant nor a \"\n+\t\t\t\t      \"condition code, invalid operand \"\n+\t\t\t\t      \"code 'c'\");\n+\t      return;\n+\t    }\n \t  put_condition_code (GET_CODE (x), GET_MODE (XEXP (x, 0)), 1, 0, file);\n \t  return;\n \tcase 'f':\n+\t  if (!COMPARISON_P (x))\n+\t    {\n+\t      output_operand_lossage (\"operand is neither a constant nor a \"\n+\t\t\t\t      \"condition code, invalid operand \"\n+\t\t\t\t      \"code 'f'\");\n+\t      return;\n+\t    }\n #ifdef HAVE_AS_IX86_CMOV_SUN_SYNTAX\n \t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('.', file);\n@@ -11022,7 +11047,8 @@ print_operand (FILE *file, rtx x, int code)\n \t      fputs (\"une\", file);\n \t      break;\n \t    default:\n-\t      gcc_unreachable ();\n+\t      output_operand_lossage (\"operand is not a condition code, invalid operand code 'D'\");\n+\t      return;\n \t    }\n \t  return;\n "}]}