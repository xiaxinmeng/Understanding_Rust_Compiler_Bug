{"sha": "b73a47045560ac7b2b808736383e8b5f8a97f55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczYTQ3MDQ1NTYwYWM3YjJiODA4NzM2MzgzZThiNWY4YTk3ZjU1YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-02T22:00:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-02T22:00:07Z"}, "message": "revert: re PR c++/40975 (ICE in copy_tree_r on array new)\n\n\tRevert:\n\tPR c++/40975\n\t* cp-tree.def (VEC_INIT_EXPR): Add third operand.\n\t* cp-tree.h (VEC_INIT_EXPR_NELTS): New.\n\t* cp-gimplify.c (cp_gimplify_expr) [VEC_INIT_EXPR]: Handle it.\n\t* tree.c (build_vec_init_expr): Handle getting pointer/nelts.\n\t(build_vec_init_elt): Don't expect an array type.\n\t(build_array_copy): Adjust.\n\t* init.c (perform_member_init): Adjust.\n\t(build_new_1): Use build_vec_init_expr.\n\nFrom-SVN: r173274", "tree": {"sha": "b12080d3b449b44ff26a30a933c60a85a3b7b7ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b12080d3b449b44ff26a30a933c60a85a3b7b7ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b73a47045560ac7b2b808736383e8b5f8a97f55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73a47045560ac7b2b808736383e8b5f8a97f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73a47045560ac7b2b808736383e8b5f8a97f55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73a47045560ac7b2b808736383e8b5f8a97f55a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3533b943d1c7a7afec4f85750e2a463e277aa0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3533b943d1c7a7afec4f85750e2a463e277aa0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3533b943d1c7a7afec4f85750e2a463e277aa0d8"}], "stats": {"total": 161, "additions": 56, "deletions": 105}, "files": [{"sha": "f36182f226933703104ea8e684e5306ae2c85d57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -1,5 +1,16 @@\n 2011-05-02  Jason Merrill  <jason@redhat.com>\n \n+\tRevert:\n+\tPR c++/40975\n+\t* cp-tree.def (VEC_INIT_EXPR): Add third operand.\n+\t* cp-tree.h (VEC_INIT_EXPR_NELTS): New.\n+\t* cp-gimplify.c (cp_gimplify_expr) [VEC_INIT_EXPR]: Handle it.\n+\t* tree.c (build_vec_init_expr): Handle getting pointer/nelts.\n+\t(build_vec_init_elt): Don't expect an array type.\n+\t(build_array_copy): Adjust.\n+\t* init.c (perform_member_init): Adjust.\n+\t(build_new_1): Use build_vec_init_expr.\n+\n \tPR c++/48834\n \t* tree.c (build_vec_init_expr): Set TREE_SIDE_EFFECTS.\n \tProtect an explicit target."}, {"sha": "ca62df3e5858c7bd96bcd79e74c5142a3716babf", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -530,12 +530,10 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       {\n \tlocation_t loc = input_location;\n \ttree init = VEC_INIT_EXPR_INIT (*expr_p);\n-\tint from_array = (init && TREE_TYPE (init)\n-\t\t\t  && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);\n+\tint from_array = (init && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);\n \tgcc_assert (EXPR_HAS_LOCATION (*expr_p));\n \tinput_location = EXPR_LOCATION (*expr_p);\n-\t*expr_p = build_vec_init (VEC_INIT_EXPR_SLOT (*expr_p),\n-\t\t\t\t  VEC_INIT_EXPR_NELTS (*expr_p),\n+\t*expr_p = build_vec_init (VEC_INIT_EXPR_SLOT (*expr_p), NULL_TREE,\n \t\t\t\t  init, VEC_INIT_EXPR_VALUE_INIT (*expr_p),\n \t\t\t\t  from_array,\n \t\t\t\t  tf_warning_or_error);"}, {"sha": "7bd35e0d6b29a5fa2c1fee98d314c90b9ea0dbed", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -83,8 +83,8 @@ DEFTREECODE (AGGR_INIT_EXPR, \"aggr_init_expr\", tcc_vl_exp, 3)\n \n /* Initialization of an array from another array, expressed at a high level\n    so that it works with TARGET_EXPR.  Operand 0 is the target, operand 1\n-   is the initializer, operand 2 is the number of elements or NULL_TREE.  */\n-DEFTREECODE (VEC_INIT_EXPR, \"vec_init_expr\", tcc_expression, 3)\n+   is the initializer.  */\n+DEFTREECODE (VEC_INIT_EXPR, \"vec_init_expr\", tcc_expression, 2)\n \n /* A throw expression.  operand 0 is the expression, if there was one,\n    else it is NULL_TREE.  */"}, {"sha": "9bad404f2ed7aaa8b86378a1358772000197eb0f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -2896,9 +2896,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n        (arg) = next_aggr_init_expr_arg (&(iter)))\n \n /* VEC_INIT_EXPR accessors.  */\n-#define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 0)\n-#define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 1)\n-#define VEC_INIT_EXPR_NELTS(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 2)\n+#define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (NODE, 0)\n+#define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (NODE, 1)\n \n /* Indicates that a VEC_INIT_EXPR is a potential constant expression.\n    Only set when the current function is constexpr.  */\n@@ -5025,7 +5024,6 @@ extern tree get_copy_ctor\t\t\t(tree);\n extern tree get_copy_assign\t\t\t(tree);\n extern tree get_default_ctor\t\t\t(tree);\n extern tree get_dtor\t\t\t\t(tree);\n-extern tree get_dtor_sfinae\t\t\t(tree, tsubst_flags_t);\n extern tree locate_ctor\t\t\t\t(tree);\n \n /* In optimize.c */\n@@ -5422,7 +5420,7 @@ extern tree get_target_expr_sfinae\t\t(tree, tsubst_flags_t);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern tree build_array_copy\t\t\t(tree);\n-extern tree build_vec_init_expr\t\t\t(tree, tree, tree, tsubst_flags_t);\n+extern tree build_vec_init_expr\t\t\t(tree, tree);\n extern void diagnose_non_constexpr_vec_init\t(tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);"}, {"sha": "50dbcc932fe497f5986fa270249f162e18d0da0b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -506,8 +506,7 @@ perform_member_init (tree member, tree init)\n       /* mem() means value-initialization.  */\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  init = build_vec_init_expr (type, init, NULL_TREE,\n-\t\t\t\t      tf_warning_or_error);\n+\t  init = build_vec_init_expr (type, init);\n \t  init = build2 (INIT_EXPR, type, decl, init);\n \t  finish_expr_stmt (init);\n \t}\n@@ -544,8 +543,7 @@ perform_member_init (tree member, tree init)\n \t      || same_type_ignoring_top_level_qualifiers_p (type,\n \t\t\t\t\t\t\t    TREE_TYPE (init)))\n \t    {\n-\t      init = build_vec_init_expr (type, init, NULL_TREE,\n-\t\t\t\t\t  tf_warning_or_error);\n+\t      init = build_vec_init_expr (type, init);\n \t      init = build2 (INIT_EXPR, type, decl, init);\n \t      finish_expr_stmt (init);\n \t    }\n@@ -2388,14 +2386,15 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t      vecinit = build_tree_list_vec (*init);\n             }\n \t  init_expr\n-\t    = build_vec_init_expr (data_addr,\n-\t\t\t\t   (explicit_value_init_p\n-\t\t\t\t    ? void_type_node: vecinit),\n-\t\t\t\t   cp_build_binary_op (input_location,\n-\t\t\t\t\t\t       MINUS_EXPR, outer_nelts,\n-\t\t\t\t\t\t       integer_one_node,\n-\t\t\t\t\t\t       complain),\n-\t\t\t\t   complain);\n+\t    = build_vec_init (data_addr,\n+\t\t\t      cp_build_binary_op (input_location,\n+\t\t\t\t\t\t  MINUS_EXPR, outer_nelts,\n+\t\t\t\t\t\t  integer_one_node,\n+\t\t\t\t\t\t  complain),\n+\t\t\t      vecinit,\n+\t\t\t      explicit_value_init_p,\n+\t\t\t      /*from_array=*/0,\n+                              complain);\n \n \t  /* An array initialization is stable because the initialization\n \t     of each element is a full-expression, so the temporaries don't"}, {"sha": "6b268067cc028ea0c00e04cd85b21efdf452f555", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -842,17 +842,11 @@ locate_fn_flags (tree type, tree name, tree argtype, int flags,\n \n /* Locate the dtor of TYPE.  */\n \n-tree\n-get_dtor_sfinae (tree type, tsubst_flags_t complain)\n-{\n-  return locate_fn_flags (type, complete_dtor_identifier, NULL_TREE,\n-\t\t\t  LOOKUP_NORMAL, complain);\n-}\n-\n tree\n get_dtor (tree type)\n {\n-  tree fn = get_dtor_sfinae (type, tf_warning_or_error);\n+  tree fn = locate_fn_flags (type, complete_dtor_identifier, NULL_TREE,\n+\t\t\t     LOOKUP_NORMAL, tf_warning_or_error);\n   if (fn == error_mark_node)\n     return NULL_TREE;\n   return fn;"}, {"sha": "dfd11ad9dc49120bc9f54faed804944b65d253a8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 25, "deletions": 74, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73a47045560ac7b2b808736383e8b5f8a97f55a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b73a47045560ac7b2b808736383e8b5f8a97f55a", "patch": "@@ -475,95 +475,54 @@ build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n    another array to copy.  */\n \n static tree\n-build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n+build_vec_init_elt (tree type, tree init)\n {\n-  tree inner_type = strip_array_types (TREE_TYPE (type));\n+  tree inner_type = strip_array_types (type);\n   VEC(tree,gc) *argvec;\n \n-  if (!CLASS_TYPE_P (inner_type))\n+  if (integer_zerop (array_type_nelts_total (type))\n+      || !CLASS_TYPE_P (inner_type))\n     /* No interesting initialization to do.  */\n     return integer_zero_node;\n   else if (init == void_type_node)\n     return build_value_init (inner_type, tf_warning_or_error);\n \n-  if (init == NULL_TREE)\n-    argvec = make_tree_vector ();\n-  else if (TREE_CODE (init) == TREE_LIST)\n-    /* Array init extension, i.e. g++.robertl/eb58.C. */\n-    argvec = make_tree_vector_from_list (init);\n-  else if (same_type_ignoring_top_level_qualifiers_p\n-\t   (inner_type, strip_array_types (TREE_TYPE (init))))\n+  gcc_assert (init == NULL_TREE\n+\t      || (same_type_ignoring_top_level_qualifiers_p\n+\t\t  (type, TREE_TYPE (init))));\n+\n+  argvec = make_tree_vector ();\n+  if (init)\n     {\n-      /* Array copy or list-initialization.  */\n       tree dummy = build_dummy_object (inner_type);\n       if (!real_lvalue_p (init))\n \tdummy = move (dummy);\n-      argvec = make_tree_vector_single (dummy);\n+      VEC_quick_push (tree, argvec, dummy);\n     }\n-  else\n-    gcc_unreachable ();\n-  init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+  return build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    &argvec, inner_type, LOOKUP_NORMAL,\n-\t\t\t\t    complain);\n-  release_tree_vector (argvec);\n-\n-  /* For array new, also mark the destructor as used.  */\n-  if (TREE_CODE (type) == POINTER_TYPE\n-      && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (inner_type))\n-    {\n-      tree dtor = get_dtor_sfinae (inner_type, complain);\n-      if (dtor == error_mark_node)\n-\treturn error_mark_node;\n-      else if (dtor)\n-\tmark_used (dtor);\n-    }\n-  return init;\n+\t\t\t\t    tf_warning_or_error);\n }\n \n-/* Return a TARGET_EXPR which expresses the initialization of an array.  If\n-   TARGET is an array type, the initialization is of an array to be named\n-   later, and the initialization will be wrapped in a TARGET_EXPR.  If\n-   TARGET is an expression, it is the array to be initialized.  INIT is the\n-   initializer, or void_type_node for value-initialization.  If TARGET is\n-   an expression, NELTS is the number of elements to initialize. */\n+/* Return a TARGET_EXPR which expresses the initialization of an array to\n+   be named later, either default-initialization or copy-initialization\n+   from another array of the same type.  */\n \n tree\n-build_vec_init_expr (tree target, tree init, tree nelts,\n-\t\t     tsubst_flags_t complain)\n+build_vec_init_expr (tree type, tree init)\n {\n-  tree slot, type;\n+  tree slot;\n   bool value_init = false;\n-  tree elt_init;\n-  tree real_nelts;\n-\n-  if (TYPE_P (target))\n-    {\n-      gcc_assert (TREE_CODE (target) == ARRAY_TYPE && nelts == NULL_TREE);\n-      type = target;\n-      slot = build_local_temp (type);\n-    }\n-  else\n-    {\n-      gcc_assert (EXPR_P (target));\n-      slot = target;\n-      type = TREE_TYPE (slot);\n-      gcc_assert (TREE_CODE (type) == POINTER_TYPE && nelts != NULL_TREE);\n-    }\n+  tree elt_init = build_vec_init_elt (type, init);\n \n   if (init == void_type_node)\n     {\n       value_init = true;\n       init = NULL_TREE;\n     }\n \n-  real_nelts = nelts ? nelts : array_type_nelts_total (type);\n-  if (integer_zerop (real_nelts))\n-    /* No elements to initialize.  */\n-    elt_init = integer_zero_node;\n-  else\n-    elt_init = build_vec_init_elt (type, init, complain);\n-\n-  init = build3 (VEC_INIT_EXPR, type, slot, init, nelts);\n+  slot = build_local_temp (type);\n+  init = build2 (VEC_INIT_EXPR, type, slot, init);\n   TREE_SIDE_EFFECTS (init) = true;\n   SET_EXPR_LOCATION (init, input_location);\n \n@@ -572,15 +531,8 @@ build_vec_init_expr (tree target, tree init, tree nelts,\n     VEC_INIT_EXPR_IS_CONSTEXPR (init) = true;\n   VEC_INIT_EXPR_VALUE_INIT (init) = value_init;\n \n-  if (slot == target)\n-    /* If we specified what array we're initializing, make sure\n-       we don't override that in cp_gimplify_init_expr.  */\n-    init = cp_build_compound_expr (init, slot, complain);\n-  else\n-    {\n-      init = build_target_expr (slot, init, complain);\n-      TARGET_EXPR_IMPLICIT_P (init) = 1;\n-    }\n+  init = build_target_expr (slot, init, complain);\n+  TARGET_EXPR_IMPLICIT_P (init) = 1;\n \n   return init;\n }\n@@ -598,15 +550,14 @@ diagnose_non_constexpr_vec_init (tree expr)\n   else\n     init = VEC_INIT_EXPR_INIT (expr);\n \n-  elt_init = build_vec_init_elt (type, init, tf_warning_or_error);\n+  elt_init = build_vec_init_elt (type, init);\n   require_potential_constant_expression (elt_init);\n }\n \n tree\n build_array_copy (tree init)\n {\n-  return build_vec_init_expr (TREE_TYPE (init), init, NULL_TREE,\n-\t\t\t      tf_warning_or_error);\n+  return build_vec_init_expr (TREE_TYPE (init), init);\n }\n \n /* Build a TARGET_EXPR using INIT to initialize a new temporary of the"}]}