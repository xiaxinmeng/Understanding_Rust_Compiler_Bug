{"sha": "0273f32645e1c69ccc7a61a5364683dcf4546c62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3M2YzMjY0NWUxYzY5Y2NjN2E2MWE1MzY0NjgzZGNmNDU0NmM2Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-25T19:50:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-25T19:50:09Z"}, "message": "(output_prolog): Correctly compute floating-reg save area offset.\n\nFrom-SVN: r6899", "tree": {"sha": "e9e6a21148e3d82cbfec445f4514d4f88d45aab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e6a21148e3d82cbfec445f4514d4f88d45aab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0273f32645e1c69ccc7a61a5364683dcf4546c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0273f32645e1c69ccc7a61a5364683dcf4546c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0273f32645e1c69ccc7a61a5364683dcf4546c62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0273f32645e1c69ccc7a61a5364683dcf4546c62/comments", "author": null, "committer": null, "parents": [{"sha": "e4e873f1a2a081fd1c1627ac165a560c1ce40365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e873f1a2a081fd1c1627ac165a560c1ce40365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e873f1a2a081fd1c1627ac165a560c1ce40365"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "855e5e563bf371c321e399091656d82f3e619f63", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0273f32645e1c69ccc7a61a5364683dcf4546c62/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0273f32645e1c69ccc7a61a5364683dcf4546c62/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0273f32645e1c69ccc7a61a5364683dcf4546c62", "patch": "@@ -1214,6 +1214,7 @@ output_prolog (file, size)\n   HOST_WIDE_INT reg_offset = vars_size + current_function_outgoing_args_size;\n   HOST_WIDE_INT start_reg_offset = reg_offset;\n   HOST_WIDE_INT actual_start_reg_offset = start_reg_offset;\n+  int int_reg_save_area_size = 0;\n   rtx insn;\n   int reg_offset_base_reg = 30;\n   unsigned reg_mask = 0;\n@@ -1358,6 +1359,7 @@ output_prolog (file, size)\n       reg_mask |= 1 << 26;\n       fprintf (file, \"\\tstq $26,%d($%d)\\n\", reg_offset, reg_offset_base_reg);\n       reg_offset += 8;\n+      int_reg_save_area_size += 8;\n     }\n \n   /* Now save any other used integer registers required to be saved.  */\n@@ -1368,6 +1370,7 @@ output_prolog (file, size)\n \tfprintf (file, \"\\tstq $%d,%d($%d)\\n\",\n \t\t i, reg_offset, reg_offset_base_reg);\n \treg_offset += 8;\n+\tint_reg_save_area_size += 8;\n       }\n \n   /* Print the register mask and do floating-point saves.  */\n@@ -1390,7 +1393,8 @@ output_prolog (file, size)\n \n   /* Print the floating-point mask, if we've saved any fp register.  */\n   if (reg_mask)\n-    fprintf (file, \"\\t.fmask 0x%x,%d\\n\", reg_mask, actual_start_reg_offset);\n+    fprintf (file, \"\\t.fmask 0x%x,%d\\n\", reg_mask,\n+\t     actual_start_reg_offset - frame_size + int_reg_save_area_size);\n \n   /* If we need a frame pointer, set it from the stack pointer.  Note that\n      this must always be the last instruction in the prologue.  */"}]}