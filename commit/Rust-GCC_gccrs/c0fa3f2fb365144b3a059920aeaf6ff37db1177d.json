{"sha": "c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmYTNmMmZiMzY1MTQ0YjNhMDU5OTIwYWVhZjZmZjM3ZGIxMTc3ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-27T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-27T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "c06a4f2ed91db6c35fc7c0e8069f6721c84482d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c06a4f2ed91db6c35fc7c0e8069f6721c84482d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/comments", "author": null, "committer": null, "parents": [{"sha": "0120cd9382728fdc99d4cfdcb72cd0f55aca2ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0120cd9382728fdc99d4cfdcb72cd0f55aca2ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0120cd9382728fdc99d4cfdcb72cd0f55aca2ce3"}], "stats": {"total": 409, "additions": 408, "deletions": 1}, "files": [{"sha": "2c93637b920578525a848598a62703d894e0457e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,174 @@\n+2021-04-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::irange_set_1bit_anti_range): Add assert.\n+\t(irange::set): Call irange_set_1bit_anti_range for handling all\n+\t1-bit ranges.  Fall through on ~[MIN,MAX].\n+\n+2021-04-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::legacy_num_pairs): Remove.\n+\t(irange::invert): Change gcc_assert to gcc_checking_assert.\n+\t* value-range.h (irange::num_pairs): Adjust for a cached\n+\tnum_pairs().  Also, rename all gcc_assert's to\n+\tgcc_checking_assert's.\n+\n+2021-04-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::operator=): Set m_kind.\n+\t(irange::copy_to_legacy): Handle varying and undefined sources\n+\tas a legacy copy since they can be easily copied.\n+\t(irange::irange_set): Set m_kind.\n+\t(irange::irange_set_anti_range): Same.\n+\t(irange::set): Rename normalize_min_max to normalize_kind.\n+\t(irange::verify_range): Adjust for multi-ranges having the\n+\tm_kind field set.\n+\t(irange::irange_union): Set m_kind.\n+\t(irange::irange_intersect): Same.\n+\t(irange::invert): Same.\n+\t* value-range.h (irange::kind): Always return m_kind.\n+\t(irange::varying_p): Rename to...\n+\t(irange::varying_comptaible_p): ...this.\n+\t(irange::undefined_p): Only look at m_kind.\n+\t(irange::irange): Always set VR_UNDEFINED if applicable.\n+\t(irange::set_undefined): Always set VR_UNDEFINED.\n+\t(irange::set_varying): Always set m_kind to VR_VARYING.\n+\t(irange::normalize_min_max): Rename to...\n+\t(irange::normalize_kind): ...this.\n+\n+2021-04-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::set_ssa_range_info):\n+\tAdjust for constant_p including varying_p.\n+\t* tree-vrp.c (vrp_prop::finalize): Same.\n+\t(determine_value_range): Same.\n+\t* vr-values.c (vr_values::range_of_expr): Same.\n+\t* value-range.cc (irange::symbolic_p): Do not check varying_p.\n+\t(irange::constant_p): Same.\n+\n+2021-04-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::legacy_lower_bound): Replace\n+\t  !undefined_p check with num_ranges > 0.\n+\t(irange::legacy_upper_bound): Same.\n+\t* value-range.h (irange::type): Same.\n+\t(irange::lower_bound): Same.\n+\t(irange::upper_bound): Same.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99956\n+\t* gimple-loop-interchange.cc (compute_access_stride):\n+\tTry instantiating the access in a shallower loop nest\n+\tif instantiating failed.\n+\t(compute_access_strides): Pass adjustable loop_nest\n+\tto compute_access_stride.\n+\n+2021-04-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* doc/sourcebuild.texi (arm_cmse_hw): Document.\n+\n+2021-04-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/iterators.md (vwcore): Handle V4BF, V8BF.\n+\n+2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Tom de Vries  <vries@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* omp-offload.c (oacc_validate_dims): Implement\n+\t'-Wopenacc-parallelism'.\n+\t* doc/invoke.texi (-Wopenacc-parallelism): Document.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.h (gimplify_build1): Remove.\n+\t(gimplify_build2): Likewise.\n+\t(gimplify_build3): Likewise.\n+\t* tree-cfg.c (gimplify_build1): Move to tree-vect-generic.c.\n+\t(gimplify_build2): Likewise.\n+\t(gimplify_build3): Likewise.\n+\t* tree-vect-generic.c (gimplify_build1): Move from tree-cfg.c.\n+\tModernize.\n+\t(gimplify_build2): Likewise.\n+\t(gimplify_build3): Likewise.\n+\t(tree_vec_extract): Use resimplify with following SSA edges.\n+\t(expand_vector_parallel): Avoid passing NULL size/bitpos\n+\tto tree_vec_extract.\n+\t* expr.c (store_constructor): Deal with zero-element CTORs.\n+\t* match.pd (bit_field_ref <vector CTOR>): Make sure to\n+\tproduce vector constants when possible.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-complex.c: Include gimple-fold.h.\n+\t(expand_complex_addition): Use gimple_build.\n+\t(expand_complex_multiplication_components): Likewise.\n+\t(expand_complex_multiplication): Likewise.\n+\t(expand_complex_div_straight): Likewise.\n+\t(expand_complex_div_wide): Likewise.\n+\t(expand_complex_division): Likewise.\n+\t(expand_complex_conjugate): Likewise.\n+\t(expand_complex_comparison): Likewise.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-phiopt.c (two_value_replacement): Remove use\n+\tof legacy gimplify_buildN API.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99473\n+\t* tree-ssa-phiopt.c (cond_store_replacement): Handle all\n+\tstores.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_builtin):\n+\tUse replace_call_with_value.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-propagate.h (valid_gimple_rhs_p): Remove.\n+\t(update_gimple_call): Likewise.\n+\t(update_call_from_tree): Likewise.\n+\t* tree-ssa-propagate.c (valid_gimple_rhs_p): Remove.\n+\t(valid_gimple_call_p): Likewise.\n+\t(move_ssa_defining_stmt_for_defs): Likewise.\n+\t(finish_update_gimple_call): Likewise.\n+\t(update_gimple_call): Likewise.\n+\t(update_call_from_tree): Likewise.\n+\t(propagate_tree_value_into_stmt): Use replace_call_with_value.\n+\t* gimple-fold.h (update_gimple_call): Declare.\n+\t* gimple-fold.c (valid_gimple_rhs_p): Move here from\n+\ttree-ssa-propagate.c.\n+\t(update_gimple_call): Likewise.\n+\t(valid_gimple_call_p): Likewise.\n+\t(finish_update_gimple_call): Likewise, and simplify.\n+\t(gimplify_and_update_call_from_tree): Implement\n+\tupdate_call_from_tree functionality, avoid excessive\n+\tpush/pop_gimplify_context.\n+\t(gimple_fold_builtin): Use only gimplify_and_update_call_from_tree.\n+\t(gimple_fold_call): Likewise.\n+\t* gimple-ssa-sprintf.c (try_substitute_return_value): Likewise.\n+\t* tree-ssa-ccp.c (ccp_folder::fold_stmt): Likewise.\n+\t(pass_fold_builtins::execute): Likewise.\n+\t(optimize_stack_restore): Use replace_call_with_value.\n+\t* tree-cfg.c (fold_loop_internal_call): Likewise.\n+\t* tree-ssa-dce.c (maybe_optimize_arith_overflow): Use\n+\tonly gimplify_and_update_call_from_tree.\n+\t* tree-ssa-strlen.c (handle_builtin_strlen): Likewise.\n+\t(handle_builtin_strchr): Likewise.\n+\t* tsan.c: Include gimple-fold.h instead of tree-ssa-propagate.h.\n+\n+2021-04-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/100255\n+\t* vmsdbgout.c (ASM_OUTPUT_DEBUG_STRING, vmsdbgout_begin_block,\n+\tvmsdbgout_end_block, lookup_filename, vmsdbgout_source_line): Remove\n+\tregister keywords.\n+\n 2021-04-25  liuhongt  <hongtao.liu@intel.com>\n \n \tPR target/98911"}, {"sha": "f347a06c33428b0588551523e6cdabe4b1d0d319", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1 +1 @@\n-20210426\n+20210427"}, {"sha": "38855e1d0eb7eaf96b703a3f24bbd4e7e7580b83", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,11 @@\n+2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Tom de Vries  <vries@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* c.opt (Wopenacc-parallelism): New.\n+\n 2021-04-19  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c.opt (fopenacc-kernels=): Remove."}, {"sha": "ec6e1d6636295cdaca9773ecef48c2c3badd6651", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,11 @@\n+2021-04-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100209\n+\t* constexpr.c (cxx_fold_indirect_ref): Try to canonicalize the\n+\tobject/offset pair for a POINTER_PLUS_EXPR of a COMPONENT_REF\n+\twith a negative offset into one whose offset is nonnegative\n+\tbefore calling cxx_fold_indirect_ref_1.\n+\n 2021-04-24  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/89565"}, {"sha": "c36892659aacf4fde536147341c9911612b73e69", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,11 @@\n+2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Tom de Vries  <vries@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* lang.opt (Wopenacc-parallelism): New.\n+\n 2021-04-24  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/100154"}, {"sha": "26c41acf622733a77a29f3c0d659a89fd515b444", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,86 @@\n+2021-04-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100209\n+\t* g++.dg/cpp1y/constexpr-base1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-ptrsub1.C: New test.\n+\n+2021-04-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/classify-serial.f95:\n+\tUse [Ww]arning in dg-bogus as FE diagnostic and default\n+\tdiagnostic differ and the result depends on ENABLE_OFFLOAD.\n+\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n+\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.\n+\n+2021-04-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/classify-serial.f95:\n+\tCorrect spelling in dg-bogus to match -Wopenacc-parallelism.\n+\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n+\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99956\n+\t* gfortran.dg/pr99956.f: New testcase.\n+\n+2021-04-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/cmse/bitfield-1.c: Remove dg-do.\n+\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n+\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse-16.c: Likewise.\n+\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse.exp: Set dg-do-what-default depending\n+\ton arm_cmse_hw.\n+\t* lib/target-supports.exp (check_effective_target_arm_cmse_hw):\n+\tNew.\n+\n+2021-04-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr84877.c: XFAIL on SPARC as well.\n+\n+2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Tom de Vries  <vries@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* c-c++-common/goacc/diag-parallelism-1.c: New.\n+\t* c-c++-common/goacc/acc-icf.c: Specify '-Wopenacc-parallelism',\n+\tand match diagnostics, as appropriate.\n+\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Likewise.\n+\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n+\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n+\t* c-c++-common/goacc/classify-routine.c: Likewise.\n+\t* c-c++-common/goacc/classify-serial.c: Likewise.\n+\t* c-c++-common/goacc/kernels-decompose-1.c: Likewise.\n+\t* c-c++-common/goacc/kernels-decompose-2.c: Likewise.\n+\t* c-c++-common/goacc/parallel-dims-1.c: Likewise.\n+\t* c-c++-common/goacc/parallel-reduction.c: Likewise.\n+\t* c-c++-common/goacc/pr70688.c: Likewise.\n+\t* c-c++-common/goacc/routine-1.c: Likewise.\n+\t* c-c++-common/goacc/routine-level-of-parallelism-2.c: Likewise.\n+\t* c-c++-common/goacc/uninit-dim-clause.c: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-serial.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-decompose-1.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n+\t* gfortran.dg/goacc/parallel-tree.f95: Likewise.\n+\t* gfortran.dg/goacc/routine-4.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-level-of-parallelism-1.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-multiple-directives-1.f90: Likewise.\n+\t* gfortran.dg/goacc/uninit-dim-clause.f95: Likewise.\n+\n+2021-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99473\n+\t* gcc.dg/tree-ssa/pr99473-1.c: New testcase.\n+\n 2021-04-25  liuhongt  <hongtao.liu@intel.com>\n \n \tPR target/98911"}, {"sha": "b8a5ad1424d01187ab151be5b60f85966097b10f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,76 @@\n+2021-04-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f:\n+\tUse [Ww]arning in dg-bogus as FE diagnostic and default\n+\tdiagnostic differ and the result depends on ENABLE_OFFLOAD.\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n+\n+2021-04-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f:\n+\tCorrect spelling in dg-bogus to match -Wopenacc-parallelism.\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n+\n+2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Tom de Vries  <vries@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: Specify\n+\t'-Wopenacc-parallelism', and match diagnostics, as appropriate.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/mode-transitions.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85381-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/private-variables.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-g-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/static-variable-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/optional-private.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/pr84028.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/private-variables.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-5.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Likewise.\n+\n+2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c: Don't\n+\tcompile with '-w'.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-6.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-5.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: Likewise.\n+\n 2021-04-22  Richard Biener  <rguenther@suse.de>\n \n \t* testsuite/libgomp.c-c++-common/reduction-16.c: Use -latomic"}, {"sha": "0a259ce80a3e6dcaa2d1b29de38455a25a459310", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fa3f2fb365144b3a059920aeaf6ff37db1177d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0fa3f2fb365144b3a059920aeaf6ff37db1177d", "patch": "@@ -1,3 +1,59 @@\n+2021-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (tcp::no_delay, v6_only)\n+\t(unicast::hops, multicast::hops, multicast::enable_loopback):\n+\tChange access of base class and static data members. Add\n+\tusing-declaration for __socket_crtp::operator=(_Tp).\n+\t(multicast::__mcastopt): New type.\n+\t(multicast::join_group, multicast::leave_group): Derive from\n+\t__mcastopt for common implementation.\n+\t* include/experimental/socket: Add comment.\n+\t* testsuite/experimental/net/internet/socket/opt.cc: New test.\n+\t* testsuite/experimental/net/socket/socket_base.cc: Check for\n+\tprotected constructor/destructor of socket_base. Check for\n+\texplicit constructors of socket option classes.\n+\n+2021-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/bits/net.h (__socket_base): Add\n+\tbool template parameter to allow BooleanSocketOption and\n+\tIntegerSocketOption to have different __socket_base<int>\n+\tbase classes.\n+\t(__socket_base<bool>): Adjust base class.\n+\t(__socket_base<int>): Add partial specialization.\n+\t(__socket_crtp::operator=(_Tp)): Add noexcept-specifier.\n+\t* include/experimental/socket (socket_base::broadcast)\n+\t(socket_base::debug, socket_base::do_not_route)\n+\t(socket_base::keep_alive, socket_base::linger)\n+\t(socket_base::out_of_band_inline)\n+\t(socket_base::receive_buffer_size)\n+\t(socket_base::receive_low_watermark)\n+\t(socket_base::reuse_address, socket_base::send_buffer_size)\n+\t(socket_base::send_low_watermark): Add using-declaration for\n+\t__socket_crtp::operator=(_Tp).\n+\t* testsuite/experimental/net/socket/socket_base.cc: Check\n+\tproperties of socket option types.\n+\n+2021-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (resolver_base::flags): Remove\n+\tenumerators. Initialize constants directly with desired values.\n+\tMake all operators constexpr and noexcept.\n+\t* testsuite/experimental/net/internet/resolver/base.cc: Use\n+\t__gnu_test::test_bitmask_values for bitmask type. Check\n+\tconstruction and destruction is protected.\n+\n+2021-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/semaphore_base.h: Include <exception> and <errno.h>.\n+\n+2021-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100259\n+\t* include/experimental/internet (net::ip::make_error_code)\n+\t(net::ip::make_error_condition, net::ip::make_network_v4)\n+\t(net::ip::operator==(const udp&, const udp&)): Add 'inline'.\n+\n 2021-04-24  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* testsuite/lib/dg-options.exp (atomic_link_flags): New."}]}