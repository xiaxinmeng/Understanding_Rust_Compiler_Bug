{"sha": "5da49a9d153a00776bba423734630b8d361dc53f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhNDlhOWQxNTNhMDA3NzZiYmE0MjM3MzQ2MzBiOGQzNjFkYzUzZg==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-06-27T13:44:52Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-06-27T13:44:52Z"}, "message": "tree-ssa-math-opts.c (do_shift_rotate): Zero bits out of type precision after operation.\n\n2011-06-27  Kai Tietz  <ktietz@redhat.com>\n\n        * tree-ssa-math-opts.c (do_shift_rotate): Zero bits\n        out of type precision after operation.\n        (find_bswap): Take for limit value the integer auto-\n        promotion into account.\n\nChangeLog\n\n2011-06-27  Kai Tietz  <ktietz@redhat.com>\n\n        * gcc.dg/optimize-bswapdi-2.c: New test.\n\nFrom-SVN: r175528", "tree": {"sha": "365685b86a946b087f030f0470c455cfb6f3f5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/365685b86a946b087f030f0470c455cfb6f3f5ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5da49a9d153a00776bba423734630b8d361dc53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da49a9d153a00776bba423734630b8d361dc53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da49a9d153a00776bba423734630b8d361dc53f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da49a9d153a00776bba423734630b8d361dc53f/comments", "author": null, "committer": null, "parents": [{"sha": "9242213f86f6e3e4703b4fb84065608fb5a03985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9242213f86f6e3e4703b4fb84065608fb5a03985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9242213f86f6e3e4703b4fb84065608fb5a03985"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "c107dfd225d0a0b1b3e8c6e7d1e9062f742cdce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5da49a9d153a00776bba423734630b8d361dc53f", "patch": "@@ -1,3 +1,10 @@\n+2011-06-27  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* tree-ssa-math-opts.c (do_shift_rotate): Zero bits\n+\tout of type precision after operation.\n+\t(find_bswap): Take for limit value the integer auto-\n+\tpromotion into account.\n+\n 2011-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* reorg.c (fill_simple_delay_slots): Use stop_search_p to stop the"}, {"sha": "975409ec860277e3180c382a02c718b6cc673abf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5da49a9d153a00776bba423734630b8d361dc53f", "patch": "@@ -1,3 +1,7 @@\n+2011-06-27  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/optimize-bswapdi-2.c: New test.\n+\n 2011-06-27  Michael Hope  <michael.hope@linaro.org>\n \t    Richard Sandiford  <richard.sandiford@linaro.org>\n "}, {"sha": "6e2821db9904ee03b5db2a6154adb0b3957efcaa", "filename": "gcc/testsuite/gcc.dg/optimize-bswapdi-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-2.c?ref=5da49a9d153a00776bba423734630b8d361dc53f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fdump-tree-bswap\" } */\n+\n+#include <stdint.h>\n+\n+/* A variant via unsigned short.  */\n+\n+uint64_t\n+swap64_c (uint64_t x)\n+{\n+  uint16_t a0 = x >> 48;\n+  uint16_t a1 = x >> 32;\n+  uint16_t a2 = x >> 16;\n+  uint16_t a3 = x;\n+\n+  return ((uint64_t) (((a0 >> 8) & 0xff) | ((a0 << 8) & 0xff00)))\n+\t| ((uint64_t) (((a1 >> 8) & 0xff) | ((a1 << 8) & 0xff00)) << 16)\n+\t| ((uint64_t) (((a2 >> 8) & 0xff) | ((a2 << 8) & 0xff00)) << 32)\n+\t| ((uint64_t) (((a3 >> 8) & 0xff) | ((a3 << 8) & 0xff00)) << 48);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 1 \"bswap\" } } */\n+/* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "4da401827f4f38b0fc6875dd3879218a74dce110", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da49a9d153a00776bba423734630b8d361dc53f/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=5da49a9d153a00776bba423734630b8d361dc53f", "patch": "@@ -1543,6 +1543,9 @@ do_shift_rotate (enum tree_code code,\n     default:\n       return false;\n     }\n+  /* Zero unused bits for size.  */\n+  if (n->size < (int)sizeof (HOST_WIDEST_INT))\n+    n->n &= ((unsigned HOST_WIDEST_INT)1 << (n->size * BITS_PER_UNIT)) - 1;\n   return true;\n }\n \n@@ -1740,15 +1743,16 @@ find_bswap (gimple stmt)\n \n   struct symbolic_number n;\n   tree source_expr;\n+  int limit;\n \n   /* The last parameter determines the depth search limit.  It usually\n      correlates directly to the number of bytes to be touched.  We\n-     increase that number by one here in order to also cover signed ->\n-     unsigned conversions of the src operand as can be seen in\n-     libgcc.  */\n-  source_expr =  find_bswap_1 (stmt, &n,\n-\t\t\t       TREE_INT_CST_LOW (\n-\t\t\t\t TYPE_SIZE_UNIT (gimple_expr_type (stmt))) + 1);\n+     increase that number by three  here in order to also\n+     cover signed -> unsigned converions of the src operand as can be seen\n+     in libgcc, and for initial shift/and operation of the src operand.  */\n+  limit = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (gimple_expr_type (stmt)));\n+  limit += 1 + (int) ceil_log2 ((unsigned HOST_WIDE_INT) limit);\n+  source_expr =  find_bswap_1 (stmt, &n, limit);\n \n   if (!source_expr)\n     return NULL_TREE;"}]}