{"sha": "aa5ea20c2bf5f730acb3d161978d70559705400c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1ZWEyMGMyYmY1ZjczMGFjYjNkMTYxOTc4ZDcwNTU5NzA1NDAwYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-06T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-06T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "ffd77b37286cba5eedfe3fd7cc339b45a784f8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd77b37286cba5eedfe3fd7cc339b45a784f8ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa5ea20c2bf5f730acb3d161978d70559705400c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5ea20c2bf5f730acb3d161978d70559705400c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5ea20c2bf5f730acb3d161978d70559705400c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5ea20c2bf5f730acb3d161978d70559705400c/comments", "author": null, "committer": null, "parents": [{"sha": "b2d4ba65dca05c0f239dcaf5080f88137ce7b54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d4ba65dca05c0f239dcaf5080f88137ce7b54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d4ba65dca05c0f239dcaf5080f88137ce7b54c"}], "stats": {"total": 369, "additions": 368, "deletions": 1}, "files": [{"sha": "e4e4eebfcf6ec89463afe5627b9c8803d03db9b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1,3 +1,218 @@\n+2020-08-05  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/95906\n+\tPR target/70314\n+\t* match.pd ((c ? a : b) op d, (c ? a : b) op (c ? d : e),\n+\t(v ? w : 0) ? a : b, c1 ? c2 ? a : b : b): New transformations.\n+\t(op (c ? a : b)): Update to match the new transformations.\n+\n+2020-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/96191\n+\t* config/aarch64/aarch64.md (stack_protect_test_<mode>): Set the\n+\tCC register directly, instead of a GPR.  Replace the original GPR\n+\tdestination with an extra scratch register.  Zero out operand 3\n+\tafter use.\n+\t(stack_protect_test): Update accordingly.\n+\n+2020-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (load_pair_sw_<SX:mode><SX2:mode>)\n+\t(load_pair_dw_<DX:mode><DX2:mode>, load_pair_dw_tftf)\n+\t(store_pair_sw_<SX:mode><SX2:mode>)\n+\t(store_pair_dw_<DX:mode><DX2:mode>, store_pair_dw_tftf)\n+\t(*load_pair_extendsidi2_aarch64)\n+\t(*load_pair_zero_extendsidi2_aarch64): Use %z for the memory operand.\n+\t* config/aarch64/aarch64-simd.md (load_pair<DREG:mode><DREG2:mode>)\n+\t(vec_store_pair<DREG:mode><DREG2:mode>, load_pair<VQ:mode><VQ2:mode>)\n+\t(vec_store_pair<VQ:mode><VQ2:mode>): Likewise.\n+\n+2020-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (invariantness_dom_walker): Remove.\n+\t(invariantness_dom_walker::before_dom_children): Move to ...\n+\t(compute_invariantness): ... this function.\n+\t(move_computations): Inline ...\n+\t(tree_ssa_lim): ... here, share RPO order and avoid some\n+\tcfun references.\n+\t(analyze_memory_references): Remove sorting of location\n+\tlists, instead assert they are sorted already when checking.\n+\t(prev_flag_edges): Remove.\n+\t(execute_sm_if_changed): Pass down and adjust prev edge state.\n+\t(execute_sm_exit): Likewise.\n+\t(hoist_memory_references): Likewise.  Commit edge insertions\n+\tof each processed exit.\n+\t(store_motion_loop): Do not commit edge insertions on all\n+\tedges in the function.\n+\t(tree_ssa_lim_initialize): Do not call alloc_aux_for_edges.\n+\t(tree_ssa_lim_finalize): Do not call free_aux_for_edges.\n+\n+2020-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (fail_label): New global.\n+\t(expr::gen_transform): Branch to fail_label instead of\n+\treturning.  Fix indent of call argument checking.\n+\t(dt_simplify::gen_1): Compute and emit fail_label, branch\n+\tto it instead of returning early.\n+\n+2020-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_for): Don't disallow combined non-rectangular\n+\tloops.\n+\n+2020-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96459\n+\t* omp-low.c (lower_omp_taskreg): Call lower_reduction_clauses even in\n+\tfor host teams.\n+\n+2020-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_for_init_counts): Remember\n+\tfirst_inner_iterations, factor and n1o from the number of iterations\n+\tcomputation in *fd.\n+\t(expand_omp_for_init_vars): Use more efficient logical iteration number\n+\tto actual iterator values computation even for non-rectangular loops\n+\twhere number of loop iterations could not be computed at compile time.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_blendv, vec_permx): Add define.\n+\t* config/rs6000/altivec.md (UNSPEC_XXBLEND, UNSPEC_XXPERMX.): New\n+\tunspecs.\n+\t(VM3): New define_mode.\n+\t(VM3_char): New define_attr.\n+\t(xxblend_<mode> mode VM3): New define_insn.\n+\t(xxpermx): New define_expand.\n+\t(xxpermx_inst): New define_insn.\n+\t* config/rs6000/rs6000-builtin.def (VXXBLEND_V16QI, VXXBLEND_V8HI,\n+\tVXXBLEND_V4SI, VXXBLEND_V2DI, VXXBLEND_V4SF, VXXBLEND_V2DF): New\n+\tBU_P10V_3 definitions.\n+\t(XXBLEND): New BU_P10_OVERLOAD_3 definition.\n+\t(XXPERMX): New BU_P10_OVERLOAD_4 definition.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\t(P10_BUILTIN_VXXPERMX): Add if statement.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VXXBLEND_V16QI,\n+\tP10_BUILTIN_VXXBLEND_V8HI, P10_BUILTIN_VXXBLEND_V4SI,\n+\tP10_BUILTIN_VXXBLEND_V2DI, P10_BUILTIN_VXXBLEND_V4SF,\n+\tP10_BUILTIN_VXXBLEND_V2DF, P10_BUILTIN_VXXPERMX): Define\n+\toverloaded arguments.\n+\t(rs6000_expand_quaternop_builtin): Add if case for CODE_FOR_xxpermx.\n+\t(builtin_quaternary_function_type): Add v16uqi_type and xxpermx_type\n+\tvariables, add case statement for P10_BUILTIN_VXXPERMX.\n+\t(builtin_function_type): Add case statements for\n+\tP10_BUILTIN_VXXBLEND_V16QI, P10_BUILTIN_VXXBLEND_V8HI,\n+\tP10_BUILTIN_VXXBLEND_V4SI, P10_BUILTIN_VXXBLEND_V2DI.\n+\t* doc/extend.texi: Add documentation for vec_blendv and vec_permx.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_splati, vec_splatid, vec_splati_ins):\n+\tAdd defines.\n+\t* config/rs6000/altivec.md (UNSPEC_XXSPLTIW, UNSPEC_XXSPLTID,\n+\tUNSPEC_XXSPLTI32DX): New.\n+\t(vxxspltiw_v4si, vxxspltiw_v4sf_inst, vxxspltidp_v2df_inst,\n+\tvxxsplti32dx_v4si_inst, vxxsplti32dx_v4sf_inst): New define_insn.\n+\t(vxxspltiw_v4sf, vxxspltidp_v2df, vxxsplti32dx_v4si,\n+\tvxxsplti32dx_v4sf.): New define_expands.\n+\t* config/rs6000/predicates.md (u1bit_cint_operand,\n+\ts32bit_cint_operand, c32bit_cint_operand): New predicates.\n+\t* config/rs6000/rs6000-builtin.def (VXXSPLTIW_V4SI, VXXSPLTIW_V4SF,\n+\tVXXSPLTID): New definitions.\n+\t(VXXSPLTI32DX_V4SI, VXXSPLTI32DX_V4SF): New BU_P10V_3\n+\tdefinitions.\n+\t(XXSPLTIW, XXSPLTID): New definitions.\n+\t(XXSPLTI32DX): Add definitions.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_XXSPLTIW,\n+\tP10_BUILTIN_VEC_XXSPLTID, P10_BUILTIN_VEC_XXSPLTI32DX):\n+\tNew definitions.\n+\t* config/rs6000/rs6000-protos.h (rs6000_constF32toI32): New extern\n+\tdeclaration.\n+\t* config/rs6000/rs6000.c (rs6000_constF32toI32): New function.\n+\t* doc/extend.texi: Add documentation for vec_splati,\n+\tvec_splatid, and vec_splati_ins.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_sldb, vec_srdb): New defines.\n+\t* config/rs6000/altivec.md (UNSPEC_SLDB, UNSPEC_SRDB): New.\n+\t(SLDB_lr): New attribute.\n+\t(VSHIFT_DBL_LR): New iterator.\n+\t(vs<SLDB_lr>db_<mode>): New define_insn.\n+\t* config/rs6000/rs6000-builtin.def (VSLDB_V16QI, VSLDB_V8HI,\n+\tVSLDB_V4SI, VSLDB_V2DI, VSRDB_V16QI, VSRDB_V8HI, VSRDB_V4SI,\n+\tVSRDB_V2DI): New BU_P10V_3 definitions.\n+\t(SLDB, SRDB): New BU_P10_OVERLOAD_3 definitions.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_SLDB,\n+\tP10_BUILTIN_VEC_SRDB): New definitions.\n+\t(rs6000_expand_ternop_builtin) [CODE_FOR_vsldb_v16qi,\n+\tCODE_FOR_vsldb_v8hi, CODE_FOR_vsldb_v4si, CODE_FOR_vsldb_v2di,\n+\tCODE_FOR_vsrdb_v16qi, CODE_FOR_vsrdb_v8hi, CODE_FOR_vsrdb_v4si,\n+\tCODE_FOR_vsrdb_v2di]: Add clauses.\n+\t* doc/extend.texi: Add description for vec_sldb and vec_srdb.\n+\n+2020-08-05  2020-08-04 Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h: Add define for vec_replace_elt and\n+\tvec_replace_unaligned.\n+\t* config/rs6000/vsx.md (UNSPEC_REPLACE_ELT, UNSPEC_REPLACE_UN): New\n+\tunspecs.\n+\t(REPLACE_ELT): New mode iterator.\n+\t(REPLACE_ELT_char, REPLACE_ELT_sh, REPLACE_ELT_max): New mode attributes.\n+\t(vreplace_un_<mode>, vreplace_elt_<mode>_inst): New.\n+\t* config/rs6000/rs6000-builtin.def (VREPLACE_ELT_V4SI,\n+\tVREPLACE_ELT_UV4SI, VREPLACE_ELT_V4SF, VREPLACE_ELT_UV2DI,\n+\tVREPLACE_ELT_V2DF, VREPLACE_UN_V4SI, VREPLACE_UN_UV4SI,\n+\tVREPLACE_UN_V4SF, VREPLACE_UN_V2DI, VREPLACE_UN_UV2DI,\n+\tVREPLACE_UN_V2DF, (REPLACE_ELT, REPLACE_UN, VREPLACE_ELT_V2DI): New builtin\n+\tentries.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_REPLACE_ELT,\n+\tP10_BUILTIN_VEC_REPLACE_UN): New builtin argument definitions.\n+\t(rs6000_expand_quaternop_builtin): Add 3rd argument checks for\n+\tCODE_FOR_vreplace_elt_v4si, CODE_FOR_vreplace_elt_v4sf,\n+\tCODE_FOR_vreplace_un_v4si, CODE_FOR_vreplace_un_v4sf.\n+\t(builtin_function_type) [P10_BUILTIN_VREPLACE_ELT_UV4SI,\n+\tP10_BUILTIN_VREPLACE_ELT_UV2DI, P10_BUILTIN_VREPLACE_UN_UV4SI,\n+\tP10_BUILTIN_VREPLACE_UN_UV2DI]: New cases.\n+\t* doc/extend.texi: Add description for vec_replace_elt and\n+\tvec_replace_unaligned builtins.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_insertl, vec_inserth): New defines.\n+\t* config/rs6000/rs6000-builtin.def (VINSERTGPRBL, VINSERTGPRHL,\n+\tVINSERTGPRWL, VINSERTGPRDL, VINSERTVPRBL, VINSERTVPRHL, VINSERTVPRWL,\n+\tVINSERTGPRBR, VINSERTGPRHR, VINSERTGPRWR, VINSERTGPRDR, VINSERTVPRBR,\n+\tVINSERTVPRHR, VINSERTVPRWR): New builtins.\n+\t(INSERTL, INSERTH): New builtins.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_INSERTL,\n+\tP10_BUILTIN_VEC_INSERTH): New overloaded definitions.\n+\t(P10_BUILTIN_VINSERTGPRBL, P10_BUILTIN_VINSERTGPRHL,\n+\tP10_BUILTIN_VINSERTGPRWL, P10_BUILTIN_VINSERTGPRDL,\n+\tP10_BUILTIN_VINSERTVPRBL, P10_BUILTIN_VINSERTVPRHL,\n+\tP10_BUILTIN_VINSERTVPRWL): Add case entries.\n+\t* config/rs6000/vsx.md (define_c_enum): Add UNSPEC_INSERTL,\n+\tUNSPEC_INSERTR.\n+\t(define_expand): Add vinsertvl_<mode>, vinsertvr_<mode>,\n+\tvinsertgl_<mode>, vinsertgr_<mode>, mode is VI2.\n+\t(define_ins): vinsertvl_internal_<mode>, vinsertvr_internal_<mode>,\n+\tvinsertgl_internal_<mode>, vinsertgr_internal_<mode>, mode VEC_I.\n+\t* doc/extend.texi: Add documentation for vec_insertl, vec_inserth.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.md: (UNSPEC_EXTRACTL, UNSPEC_EXTRACTR)\n+\t(vextractl<mode>, vextractr<mode>)\n+\t(vextractl<mode>_internal, vextractr<mode>_internal for mode VI2)\n+\t(VI2): Move to ...\n+\t* config/rs6000/vsx.md:\t(UNSPEC_EXTRACTL, UNSPEC_EXTRACTR)\n+\t(vextractl<mode>, vextractr<mode>)\n+\t(vextractl<mode>_internal, vextractr<mode>_internal for mode VI2)\n+\t(VI2):  ..here.\n+\t* doc/extend.texi: Update documentation for vec_extractl.\n+\tReplace builtin name vec_extractr with vec_extracth.  Update\n+\tdescription of vec_extracth.\n+\n 2020-08-04  Jim Wilson  <jimw@sifive.com>\n \n \t* doc/invoke.texi (AArch64 Options): Delete duplicate"}, {"sha": "c2e265fc4e9183eddd3e247809a6b49d3022c2fb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1 +1 @@\n-20200805\n+20200806"}, {"sha": "55f846c8c28ad381014f975a0dc7fb5bcbf47903", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1,3 +1,12 @@\n+2020-08-05  Patrick Palka  <ppalka@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96282\n+\t* constexpr.c (cxx_eval_vec_init_1): Truncate ctx->ctor and\n+\tthen clear CONSTRUCTOR_NO_CLEARING on each appended element\n+\tinitializer if we're initializing a previously zero-initialized\n+\tarray object.\n+\n 2020-08-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/96082"}, {"sha": "b4903e71b94154f9d5a1bfe5fb444c79511c4200", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1,3 +1,14 @@\n+2020-08-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/96469\n+\t* frontend-passes.c (doloop_contained_function_call): New\n+\tfunction.\n+\t(doloop_contained_procedure_code): New function.\n+\t(CHECK_INQ): Macro for inquire checks.\n+\t(doloop_code): Invoke doloop_contained_procedure_code and\n+\tdoloop_contained_function_call if appropriate.\n+\t(do_intent): Likewise.\n+\n 2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.c (resolve_omp_do): Detect not perfectly"}, {"sha": "c4b2a3595b5f99e34c57d6710ce0d928b758b0be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1,3 +1,58 @@\n+2020-08-05  Patrick Palka  <ppalka@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96282\n+\t* g++.dg/cpp0x/constexpr-array26.C: New test.\n+\t* g++.dg/cpp0x/constexpr-array27.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init18.C: New test.\n+\n+2020-08-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/96469\n+\t* gfortran.dg/do_check_14.f90: New test.\n+\n+2020-08-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/96469\n+\t* gfortran.dg/do_check_4.f90: Hide change in index variable\n+\tfrom compile-time analysis.\n+\t* gfortran.dg/do_check_13.f90: New test.\n+\n+2020-08-05  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/95906\n+\tPR target/70314\n+\t* gcc.dg/tree-ssa/andnot-2.c: New file.\n+\t* gcc.dg/tree-ssa/pr95906.c: Likewise.\n+\t* gcc.target/i386/pr70314.c: Likewise.\n+\n+2020-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/96191\n+\t* gcc.target/aarch64/stack-protector-1.c: New test.\n+\t* gcc.target/aarch64/stack-protector-2.c: Likewise.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-blend-runnable.c: New test.\n+\t* gcc.target/powerpc/vec-permute-ext-runnable.c: New test.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-splati-runnable.c: New test.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-shift-double-runnable.c:  New test file.\n+\n+2020-08-05  2020-08-04 Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-replace-word-runnable.c: New test.\n+\n+2020-08-05  2020-08-04  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-insert-word-runnable.c: New test case.\n+\n 2020-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* gcc.target/nvptx/mul-hi.c: New test."}, {"sha": "c2708fe3d7c56b812d51ba02da82776c2603aec8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1,3 +1,19 @@\n+2020-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/loop-22.c: New test.\n+\t* testsuite/libgomp.c/loop-23.c: New test.\n+\n+2020-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96459\n+\t* testsuite/libgomp.c/teams-3.c: New test.\n+\t* testsuite/libgomp.c-c++-common/for-2.h (OMPTEAMS): Define to nothing\n+\tif not defined yet.\n+\t(N(test)): Use it before all N(f*) calls.\n+\t* testsuite/libgomp.c-c++-common/for-14.c (DO_PRAGMA, OMPTEAMS): Define.\n+\t(main): Don't call all test_* functions from within\n+\t#pragma omp teams reduction(|:err), call them directly.\n+\n 2020-08-04  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/96428"}, {"sha": "ddd78334460c878cead160d50f0a96f66a513501", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5ea20c2bf5f730acb3d161978d70559705400c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5ea20c2bf5f730acb3d161978d70559705400c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa5ea20c2bf5f730acb3d161978d70559705400c", "patch": "@@ -1,3 +1,64 @@\n+2020-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/atomic (atomic<T>::store): Reformat.\n+\n+2020-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Replace oneAPI DPC++ link\n+\twith LLVM repo for PSTL.\n+\t* doc/html/manual/status.html: Regenerate.\n+\n+2020-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Export new symbols.\n+\t* include/bits/istream.tcc (__istream_extract): New function\n+\ttemplate implementing both of operator>>(istream&, char*) and\n+\toperator>>(istream&, char(&)[N]). Add explicit instantiation\n+\tdeclaration for it. Remove explicit instantiation declarations\n+\tfor old function templates.\n+\t* include/std/istream (__istream_extract): Declare.\n+\t(operator>>(basic_istream<C,T>&, C*)): Define inline and simply\n+\tcall __istream_extract.\n+\t(operator>>(basic_istream<char,T>&, signed char*)): Likewise.\n+\t(operator>>(basic_istream<char,T>&, unsigned char*)): Likewise.\n+\t(operator>>(basic_istream<C,T>&, C(7)[N])): Define for LWG 2499.\n+\t(operator>>(basic_istream<char,T>&, signed char(&)[N])):\n+\tLikewise.\n+\t(operator>>(basic_istream<char,T>&, unsigned char(&)[N])):\n+\tLikewise.\n+\t* include/std/streambuf (basic_streambuf): Declare char overload\n+\tof __istream_extract as a friend.\n+\t* src/c++11/istream-inst.cc: Add explicit instantiation\n+\tdefinition for wchar_t overload of __istream_extract. Remove\n+\texplicit instantiation definitions of old operator>> overloads\n+\tfor versioned-namespace build.\n+\t* src/c++98/istream.cc (operator>>(istream&, char*)): Replace\n+\twith __istream_extract(istream&, char*, streamsize).\n+\t* testsuite/27_io/basic_istream/extractors_character/char/3.cc:\n+\tDo not use variable-length array.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/4.cc:\n+\tDo not run test for C++20.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc:\n+\tDo not test writing to pointers for C++20.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/9826.cc:\n+\tUse array instead of pointer.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/3.cc:\n+\tDo not use variable-length array.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc:\n+\tDo not run test for C++20.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/9555-ic.cc:\n+\tDo not test writing to pointers for C++20.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/lwg2499.cc:\n+\tNew test.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/lwg2499_neg.cc:\n+\tNew test.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/overflow.cc:\n+\tNew test.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499.cc:\n+\tNew test.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499_neg.cc:\n+\tNew test.\n+\n 2020-08-01  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/using_exceptions.xml: Move www.stroustrup.com to"}]}