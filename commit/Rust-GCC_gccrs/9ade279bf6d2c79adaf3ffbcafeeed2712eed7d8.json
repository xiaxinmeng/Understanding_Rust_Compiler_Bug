{"sha": "9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkZTI3OWJmNmQyYzc5YWRhZjNmZmJjYWZlZWVkMjcxMmVlZDdkOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-03-17T18:55:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-03-17T18:55:40Z"}, "message": "re PR target/39482 (ICE in inline_secondary_memory_needed, at config/i386/i386.c:25478)\n\n\tPR target/39482\n\t* config/i386/i386.md (*truncdfsf_mixed): Avoid combining registers\n\tfrom different units in a single alternative.\n\t(*truncdfsf_i387): Ditto.\n\t(*truncxfsf2_mixed): Ditto.\n\t(*truncxfdf2_mixed): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/39482\n\t* gcc.target/i386/pr39482.c: New test.\n\nFrom-SVN: r144915", "tree": {"sha": "a4ce22836faeec9436ac32a333690b2424e3011e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ce22836faeec9436ac32a333690b2424e3011e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/comments", "author": null, "committer": null, "parents": [{"sha": "df5deb18f15b3fad7e8cd7e1af71c9c52fb1cd7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5deb18f15b3fad7e8cd7e1af71c9c52fb1cd7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5deb18f15b3fad7e8cd7e1af71c9c52fb1cd7a"}], "stats": {"total": 101, "additions": 56, "deletions": 45}, "files": [{"sha": "4af4b4f7d456e332f7a61a606352d82ddfd41531", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "patch": "@@ -1,3 +1,12 @@\n+2009-03-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39482\n+\t* config/i386/i386.md (*truncdfsf_mixed): Avoid combining registers\n+\tfrom different units in a single alternative.\n+\t(*truncdfsf_i387): Ditto.\n+\t(*truncxfsf2_mixed): Ditto.\n+\t(*truncxfdf2_mixed): Ditto.\n+\n 2009-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_imported_module_or_decl_1): Allow\n@@ -44,14 +53,12 @@\n 2009-03-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39477\n-\t* doc/extend.texi: Correct register behavior for regparm on\n-\tIntel 386.\n+\t* doc/extend.texi: Correct register behavior for regparm on Intel 386.\n \n 2009-03-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39476\n-\t* config/i386/i386.c (ix86_function_regparm): Rewrite for\n-\t64bit.\n+\t* config/i386/i386.c (ix86_function_regparm): Rewrite for 64bit.\n \n 2009-03-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -105,7 +112,7 @@\n \n 2008-03-13  Catherine Moore  <clm@codesourcery.com>\n \n-\t*  gcc/config/i386/x-mingw32 (host-mingw32.o): Replace\n+\t* gcc/config/i386/x-mingw32 (host-mingw32.o): Replace\n \tdiagnostic.h with $(DIAGNOSTIC_H).\n \n 2008-03-12  Jakub Jelinek  <jakub@redhat.com>\n@@ -124,8 +131,7 @@\n 2009-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39445\n-\t* config/i386/i386.c (ix86_expand_push): Don't set memory\n-\talignment.\n+\t* config/i386/i386.c (ix86_expand_push): Don't set memory alignment.\n \n 2009-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -138,8 +144,7 @@\n 2009-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/38824\n-\t* config/i386/i386.md: Compare REGNO on the new peephole2\n-\tpatterns.\n+\t* config/i386/i386.md: Compare REGNO on the new peephole2 patterns.\n \n 2009-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -162,8 +167,7 @@\n 2009-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/39137\n-\t* cfgexpand.c (get_decl_align_unit): Use LOCAL_DECL_ALIGNMENT\n-\tmacro.\n+\t* cfgexpand.c (get_decl_align_unit): Use LOCAL_DECL_ALIGNMENT macro.\n \t* defaults.h (LOCAL_DECL_ALIGNMENT): Define if not yet defined.\n \t* config/i386/i386.h (LOCAL_DECL_ALIGNMENT): Define.\n \t* config/i386/i386.c (ix86_local_alignment): For\n@@ -205,8 +209,7 @@\n \t    Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR middle-end/37850\n-\t* libgcc2.c (__mulMODE3): Use explicit assignments to form the\n-\tresult.\n+\t* libgcc2.c (__mulMODE3): Use explicit assignments to form the result.\n \t(__divMODE3): Likewise.\n \n 2009-03-09  Jakub Jelinek  <jakub@redhat.com>\n@@ -248,8 +251,7 @@\n \tof referenced_var_check_and_insert.\n \n \tPR debug/39372\n-\t* dwarf2out.c (add_abstract_origin_attribute): Return\n-\torigin_die.\n+\t* dwarf2out.c (add_abstract_origin_attribute): Return origin_die.\n \t(gen_variable_die): Emit DW_AT_location on abstract static variable's\n \tDIE, don't emit it if abstract origin already has it.\n \t* tree-cfg.c (remove_useless_stmts_bind): GIMPLE_BINDs with any\n@@ -480,8 +482,7 @@\n 2009-03-01  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* optc-gen.awk: No need to duplicate option flags twice.\n-\tReuse help texts for duplicate options which do not have\n-\tany.\n+\tReuse help texts for duplicate options which do not have any.\n \n \t* gcc.c (display_help): Document --version.\n "}, {"sha": "39e62fbe6bd44323614aa73d85926298f2c6d29c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "patch": "@@ -4458,50 +4458,46 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncdfsf_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,?fx*r,Y2\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,Y2 ,?f,?x,?*r\")\n \t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,f    ,Y2m\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,m    ,X\"))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,Y2m,f ,f ,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,X  ,m ,m ,m\"))]\n   \"TARGET_MIX_SSE_I387\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n       return output_387_reg_move (insn, operands);\n-\n     case 1:\n-      return \"#\";\n-    case 2:\n       return \"%vcvtsd2ss\\t{%1, %d0|%d0, %1}\";\n+\n     default:\n-      gcc_unreachable ();\n+      return \"#\";\n     }\n }\n-  [(set_attr \"type\" \"fmov,multi,ssecvt\")\n-   (set_attr \"unit\" \"*,i387,*\")\n-   (set_attr \"prefix\" \"orig,orig,maybe_vex\")\n+  [(set_attr \"type\" \"fmov,ssecvt,multi,multi,multi\")\n+   (set_attr \"unit\" \"*,*,i387,i387,i387\")\n+   (set_attr \"prefix\" \"orig,maybe_vex,orig,orig,orig\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncdfsf_i387\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?fx*r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,?f,?x,?*r\")\n \t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m\"))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,f ,f ,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,m ,m ,m\"))]\n   \"TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n       return output_387_reg_move (insn, operands);\n \n-    case 1:\n-      return \"#\";\n     default:\n-      gcc_unreachable ();\n+      return \"#\";\n     }\n }\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"unit\" \"*,i387\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n+   (set_attr \"unit\" \"*,i387,i387,i387\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncdfsf2_i387_1\"\n@@ -4552,31 +4548,31 @@\n })\n \n (define_insn \"*truncxfsf2_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?fx*r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f,?x,?*r\")\n \t(float_truncate:SF\n-\t  (match_operand:XF 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m\"))]\n+\t  (match_operand:XF 1 \"register_operand\"   \"f ,f ,f ,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\"   \"=X,m ,m ,m\"))]\n   \"TARGET_80387\"\n {\n   gcc_assert (!which_alternative);\n   return output_387_reg_move (insn, operands);\n }\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"unit\" \"*,i387\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n+   (set_attr \"unit\" \"*,i387,i387,i387\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncxfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?fY2*r\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f,?Y2,?*r\")\n \t(float_truncate:DF\n-\t  (match_operand:XF 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m\"))]\n+\t  (match_operand:XF 1 \"register_operand\"   \"f ,f ,f  ,f\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\"   \"=X,m ,m  ,m\"))]\n   \"TARGET_80387\"\n {\n   gcc_assert (!which_alternative);\n   return output_387_reg_move (insn, operands);\n }\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"unit\" \"*,i387\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n+   (set_attr \"unit\" \"*,i387,i387,i387\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"truncxf<mode>2_i387_noop\""}, {"sha": "31651843422fd163e0cd06629e27aba8d975e069", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "patch": "@@ -1,3 +1,8 @@\n+2009-03-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39482\n+\t* gcc.target/i386/pr39482.c: New test.\n+\n 2009-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/39471"}, {"sha": "4e2dfa724a97f981562dc54596a735b7f2018d6c", "filename": "gcc/testsuite/gcc.target/i386/pr39482.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39482.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39482.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39482.c?ref=9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-sse2\" } */\n+\n+extern double log (double __x);\n+\n+double foo (unsigned long int m_liOutputBufferLen)\n+{\n+  return log ((double) m_liOutputBufferLen);\n+}"}]}