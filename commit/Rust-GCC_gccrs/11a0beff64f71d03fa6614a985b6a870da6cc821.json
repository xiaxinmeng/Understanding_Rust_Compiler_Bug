{"sha": "11a0beff64f71d03fa6614a985b6a870da6cc821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhMGJlZmY2NGY3MWQwM2ZhNjYxNGE5ODViNmE4NzBkYTZjYzgyMQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-12T20:16:05Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-10T12:13:58Z"}, "message": "arm: Auto-vectorization for MVE: vand\n\nThis patch enables MVE vandq instructions for auto-vectorization.  MVE\nvandq insns in mve.md are modified to use 'and' instead of unspec\nexpression to support and<mode>3.  The and<mode>3 expander is added to\nvec-common.md\n\n2020-12-03  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (supf): Remove VANDQ_S and VANDQ_U.\n\t(VANQ): Remove.\n\t(VDQ): Add TARGET_HAVE_MVE condition where relevant.\n\t* config/arm/mve.md (mve_vandq_u<mode>): New entry for vand\n\tinstruction using expression 'and'.\n\t(mve_vandq_s<mode>): New expander.\n\t(mve_vaddq_n_f<mode>): Use 'and' code instead of unspec.\n\t* config/arm/neon.md (and<mode>3): Rename into and<mode>3_neon.\n\t* config/arm/predicates.md (imm_for_neon_inv_logic_operand):\n\tEnable for MVE.\n\t* config/arm/unspecs.md (VANDQ_S, VANDQ_U, VANDQ_F): Remove.\n\t* config/arm/vec-common.md (and<mode>3): New expander.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vand.c: New test.", "tree": {"sha": "f99c82ff5331da8be93e309f1ba293b8f741afae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99c82ff5331da8be93e309f1ba293b8f741afae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11a0beff64f71d03fa6614a985b6a870da6cc821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a0beff64f71d03fa6614a985b6a870da6cc821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a0beff64f71d03fa6614a985b6a870da6cc821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a0beff64f71d03fa6614a985b6a870da6cc821/comments", "author": null, "committer": null, "parents": [{"sha": "4cf70c20cb10acd6fb1016611d05540728176b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf70c20cb10acd6fb1016611d05540728176b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf70c20cb10acd6fb1016611d05540728176b60"}], "stats": {"total": 119, "additions": 101, "deletions": 18}, "files": [{"sha": "badad2bf2936f7fe403f8e9e12d6328fef501392", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -147,7 +147,12 @@\n (define_mode_iterator VN [V8HI V4SI V2DI])\n \n ;; All supported vector modes (except singleton DImode).\n-(define_mode_iterator VDQ [V8QI V16QI V4HI V8HI V2SI V4SI V4HF V8HF V2SF V4SF V2DI])\n+(define_mode_iterator VDQ [(V8QI \"!TARGET_HAVE_MVE\") V16QI\n+\t\t\t   (V4HI \"!TARGET_HAVE_MVE\") V8HI\n+\t\t\t   (V2SI \"!TARGET_HAVE_MVE\") V4SI\n+\t\t\t   (V4HF \"!TARGET_HAVE_MVE\") V8HF\n+\t\t\t   (V2SF \"!TARGET_HAVE_MVE\") V4SF\n+\t\t\t   (V2DI \"!TARGET_HAVE_MVE\")])\n \n ;; All supported floating-point vector modes (except V2DF).\n (define_mode_iterator VF [(V4HF \"TARGET_NEON_FP16INST\")\n@@ -1232,8 +1237,7 @@\n \t\t       (VADDLVQ_P_U \"u\") (VCMPNEQ_U \"u\") (VCMPNEQ_S \"s\")\n \t\t       (VABDQ_M_S \"s\") (VABDQ_M_U \"u\") (VABDQ_S \"s\")\n \t\t       (VABDQ_U \"u\") (VADDQ_N_S \"s\") (VADDQ_N_U \"u\")\n-\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\") (VANDQ_S \"s\")\n-\t\t       (VANDQ_U \"u\") (VBICQ_S \"s\") (VBICQ_U \"u\")\n+\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\") (VBICQ_S \"s\") (VBICQ_U \"u\")\n \t\t       (VBRSRQ_N_S \"s\") (VBRSRQ_N_U \"u\") (VCADDQ_ROT270_S \"s\")\n \t\t       (VCADDQ_ROT270_U \"u\") (VCADDQ_ROT90_S \"s\")\n \t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\") (VCADDQ_ROT90_U \"u\")\n@@ -1501,7 +1505,6 @@\n (define_int_iterator VADDQ_N [VADDQ_N_S VADDQ_N_U])\n (define_int_iterator VADDVAQ [VADDVAQ_S VADDVAQ_U])\n (define_int_iterator VADDVQ_P [VADDVQ_P_U VADDVQ_P_S])\n-(define_int_iterator VANDQ [VANDQ_U VANDQ_S])\n (define_int_iterator VBICQ [VBICQ_S VBICQ_U])\n (define_int_iterator VBRSRQ_N [VBRSRQ_N_U VBRSRQ_N_S])\n (define_int_iterator VCADDQ_ROT270 [VCADDQ_ROT270_S VCADDQ_ROT270_U])"}, {"sha": "1ec0d1aa323bf8427601bddaadc2d07af9b6cd8f", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -894,17 +894,30 @@\n ;;\n ;; [vandq_u, vandq_s])\n ;;\n-(define_insn \"mve_vandq_<supf><mode>\"\n+;; signed and unsigned versions are the same: define the unsigned\n+;; insn, and use an expander for the signed one as we still reference\n+;; both names from arm_mve.h.\n+;; We use the same code as in neon.md (TODO: avoid this duplication).\n+(define_insn \"mve_vandq_u<mode>\"\n   [\n-   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VANDQ))\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w,w\")\n+\t(and:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w,0\")\n+\t\t   (match_operand:MVE_2 2 \"neon_inv_logic_op2\" \"w,DL\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vand %q0, %q1, %q2\"\n+  \"@\n+   vand\\t%q0, %q1, %q2\n+   * return neon_output_logic_immediate (\\\"vand\\\", &operands[2], <MODE>mode, 1, VALID_NEON_QREG_MODE (<MODE>mode));\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+(define_expand \"mve_vandq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\")\n+\t(and:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\")\n+\t\t   (match_operand:MVE_2 2 \"neon_inv_logic_op2\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+)\n \n ;;\n ;; [vbicq_s, vbicq_u])\n@@ -2019,9 +2032,8 @@\n (define_insn \"mve_vandq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VANDQ_F))\n+\t(and:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t   (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vand %q0, %q1, %q2\""}, {"sha": "dc4707d7447dfd4168d70823307c5c74bed1813f", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -712,7 +712,7 @@\n ;; corresponds to the canonical form the middle-end expects to use for\n ;; immediate bitwise-ANDs.\n \n-(define_insn \"and<mode>3\"\n+(define_insn \"and<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w,w\")\n \t(and:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w,0\")\n \t\t (match_operand:VDQ 2 \"neon_inv_logic_op2\" \"w,DL\")))]"}, {"sha": "5f58f7c837ea75eb5acb8eb5e26bac7f03aa34ae", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -107,7 +107,7 @@\n (define_predicate \"imm_for_neon_inv_logic_operand\"\n   (match_code \"const_vector\")\n {\n-  return (TARGET_NEON\n+  return ((TARGET_NEON || TARGET_HAVE_MVE)\n           && neon_immediate_valid_for_logic (op, mode, 1, NULL, NULL));\n })\n "}, {"sha": "18b304874359057f2f958c68a1292bc014f7add9", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -601,7 +601,6 @@\n   VADDQ_N_S\n   VADDVAQ_S\n   VADDVQ_P_S\n-  VANDQ_S\n   VBICQ_S\n   VBRSRQ_N_S\n   VCADDQ_ROT270_S\n@@ -648,7 +647,6 @@\n   VADDQ_N_U\n   VADDVAQ_U\n   VADDVQ_P_U\n-  VANDQ_U\n   VBICQ_U\n   VBRSRQ_N_U\n   VCADDQ_ROT270_U\n@@ -721,7 +719,6 @@\n   VABDQ_M_U\n   VABDQ_F\n   VADDQ_N_F\n-  VANDQ_F\n   VBICQ_F\n   VCADDQ_ROT270_F\n   VCADDQ_ROT90_F"}, {"sha": "2117e5be5c26cd8e7425c0b0c60dec90367add99", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -172,3 +172,11 @@\n \t\t\t\t\t       GEN_INT (elem), operands[0]));\n   DONE;\n })\n+\n+(define_expand \"and<mode>3\"\n+  [(set (match_operand:VDQ 0 \"s_register_operand\" \"\")\n+\t(and:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"\")\n+\t\t (match_operand:VDQ 2 \"neon_inv_logic_op2\" \"\")))]\n+  \"TARGET_NEON\n+   || TARGET_HAVE_MVE\"\n+)"}, {"sha": "26247dc4105186d42f9a73d454413970c0b33e31", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vand.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a0beff64f71d03fa6614a985b6a870da6cc821/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vand.c?ref=11a0beff64f71d03fa6614a985b6a870da6cc821", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a, TYPE##BITS##_t *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FUNC_IMM(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, &, vand)\n+FUNC(u, uint, 32, 2, &, vand)\n+FUNC(s, int, 16, 4, &, vand)\n+FUNC(u, uint, 16, 4, &, vand)\n+FUNC(s, int, 8, 8, &, vand)\n+FUNC(u, uint, 8, 8, &, vand)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, &, vand)\n+FUNC(u, uint, 32, 4, &, vand)\n+FUNC(s, int, 16, 8, &, vand)\n+FUNC(u, uint, 16, 8, &, vand)\n+FUNC(s, int, 8, 16, &, vand)\n+FUNC(u, uint, 8, 16, &, vand)\n+\n+/* 64-bit vectors.  */\n+FUNC_IMM(s, int, 32, 2, &, vandimm)\n+FUNC_IMM(u, uint, 32, 2, &, vandimm)\n+FUNC_IMM(s, int, 16, 4, &, vandimm)\n+FUNC_IMM(u, uint, 16, 4, &, vandimm)\n+FUNC_IMM(s, int, 8, 8, &, vandimm)\n+FUNC_IMM(u, uint, 8, 8, &, vandimm)\n+\n+/* 128-bit vectors.  */\n+FUNC_IMM(s, int, 32, 4, &, vandimm)\n+FUNC_IMM(u, uint, 32, 4, &, vandimm)\n+FUNC_IMM(s, int, 16, 8, &, vandimm)\n+FUNC_IMM(u, uint, 16, 8, &, vandimm)\n+FUNC_IMM(s, int, 8, 16, &, vandimm)\n+FUNC_IMM(u, uint, 8, 16, &, vandimm)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* Although float16 and float32 types are supported at assembly level,\n+   we cannot test them with the '&' operator, so we check only the\n+   integer variants.  */\n+/* For some reason, we do not generate the immediate version, we still\n+   use vldr to load the vector of immediates.  */\n+/* { dg-final { scan-assembler-times {vand\\tq[0-9]+, q[0-9]+, q[0-9]+} 12 } } */"}]}