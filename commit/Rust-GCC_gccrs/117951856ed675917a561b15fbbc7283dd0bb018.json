{"sha": "117951856ed675917a561b15fbbc7283dd0bb018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3OTUxODU2ZWQ2NzU5MTdhNTYxYjE1ZmJiYzcyODNkZDBiYjAxOA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2009-05-06T09:23:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:23:53Z"}, "message": "sem_aggr.adb (Valid_Ancestor_Type): Add support for C++ constructors.\n\n2009-05-06  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_aggr.adb (Valid_Ancestor_Type): Add support for C++ constructors.\n\t(Resolve_Extension_Aggregate): Do not reject C++ constructors in\n\textension aggregates.\n\t(Resolve_Record_Aggregate): Add support for C++ constructors in\n\textension aggregates.\n\n\t* exp_aggr.adb (Build_Record_Aggr_Code): Add support for C++\n\tconstructors in extension aggregates.\n\nFrom-SVN: r147160", "tree": {"sha": "c5c43a3972d85108677c4d85ac1f17003650ddac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c43a3972d85108677c4d85ac1f17003650ddac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/117951856ed675917a561b15fbbc7283dd0bb018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117951856ed675917a561b15fbbc7283dd0bb018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117951856ed675917a561b15fbbc7283dd0bb018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117951856ed675917a561b15fbbc7283dd0bb018/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "426d271775dd26066baa2e8993c4633336b8e97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426d271775dd26066baa2e8993c4633336b8e97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/426d271775dd26066baa2e8993c4633336b8e97b"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "2376b82bdf82a800f8f38760a3ad3304d6edc61a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117951856ed675917a561b15fbbc7283dd0bb018/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117951856ed675917a561b15fbbc7283dd0bb018/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=117951856ed675917a561b15fbbc7283dd0bb018", "patch": "@@ -1,3 +1,14 @@\n+2009-05-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_aggr.adb (Valid_Ancestor_Type): Add support for C++ constructors.\n+\t(Resolve_Extension_Aggregate): Do not reject C++ constructors in\n+\textension aggregates.\n+\t(Resolve_Record_Aggregate): Add support for C++ constructors in\n+\textension aggregates.\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): Add support for C++\n+\tconstructors in extension aggregates.\n+\n 2009-05-06  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb (Freeze_Record_Type): Improve error msg for bad size"}, {"sha": "90473b77547be380de21547d3f212d9a0c096fd4", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117951856ed675917a561b15fbbc7283dd0bb018/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117951856ed675917a561b15fbbc7283dd0bb018/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=117951856ed675917a561b15fbbc7283dd0bb018", "patch": "@@ -2519,29 +2519,36 @@ package body Exp_Aggr is\n                Ref := Convert_To (Init_Typ, New_Copy_Tree (Target));\n                Set_Assignment_OK (Ref);\n \n-               if Has_Default_Init_Comps (N)\n-                 or else Has_Task (Base_Type (Init_Typ))\n-               then\n-                  Append_List_To (L,\n-                    Build_Initialization_Call (Loc,\n-                      Id_Ref       => Ref,\n-                      Typ          => Init_Typ,\n-                      In_Init_Proc => Within_Init_Proc,\n-                      With_Default_Init => True));\n-               else\n-                  Append_List_To (L,\n-                    Build_Initialization_Call (Loc,\n-                      Id_Ref       => Ref,\n-                      Typ          => Init_Typ,\n-                      In_Init_Proc => Within_Init_Proc));\n-               end if;\n+               Append_List_To (L,\n+                 Build_Initialization_Call (Loc,\n+                   Id_Ref            => Ref,\n+                   Typ               => Init_Typ,\n+                   In_Init_Proc      => Within_Init_Proc,\n+                   With_Default_Init => Has_Default_Init_Comps (N)\n+                                          or else\n+                                        Has_Task (Base_Type (Init_Typ))));\n \n                if Is_Constrained (Entity (A))\n                  and then Has_Discriminants (Entity (A))\n                then\n                   Check_Ancestor_Discriminants (Entity (A));\n                end if;\n \n+            --  Handle calls to C++ constructors\n+\n+            elsif Is_CPP_Constructor_Call (A) then\n+               Init_Typ := Etype (Etype (A));\n+               Ref := Convert_To (Init_Typ, New_Copy_Tree (Target));\n+               Set_Assignment_OK (Ref);\n+\n+               Append_List_To (L,\n+                 Build_Initialization_Call (Loc,\n+                   Id_Ref            => Ref,\n+                   Typ               => Init_Typ,\n+                   In_Init_Proc      => Within_Init_Proc,\n+                   With_Default_Init => Has_Default_Init_Comps (N),\n+                   Constructor_Ref   => A));\n+\n             --  Ada 2005 (AI-287): If the ancestor part is an aggregate of\n             --  limited type, a recursive call expands the ancestor. Note that\n             --  in the limited case, the ancestor part must be either a"}, {"sha": "8837e8c0347cad7ce389cbe40accec68b04c131d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117951856ed675917a561b15fbbc7283dd0bb018/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117951856ed675917a561b15fbbc7283dd0bb018/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=117951856ed675917a561b15fbbc7283dd0bb018", "patch": "@@ -2175,6 +2175,11 @@ package body Sem_Aggr is\n             if Etype (Imm_Type) = Base_Type (A_Type) then\n                return True;\n \n+            elsif Is_CPP_Constructor_Call (A)\n+              and then Etype (Imm_Type) = Base_Type (Etype (A_Type))\n+            then\n+               return True;\n+\n             --  The base type of the parent type may appear as  a private\n             --  extension if it is declared as such in a parent unit of\n             --  the current one. For consistency of the subsequent analysis\n@@ -2290,6 +2295,7 @@ package body Sem_Aggr is\n \n             if Is_Class_Wide_Type (Etype (A))\n               and then Nkind (Original_Node (A)) = N_Function_Call\n+              and then not Is_CPP_Constructor_Call (Original_Node (A))\n             then\n                --  If the ancestor part is a dispatching call, it appears\n                --  statically to be a legal ancestor, but it yields any\n@@ -3070,7 +3076,13 @@ package body Sem_Aggr is\n             --  of all ancestors, starting with the root.\n \n             if Nkind (N) = N_Extension_Aggregate then\n-               Root_Typ := Base_Type (Etype (Ancestor_Part (N)));\n+               if Is_CPP_Constructor_Call (Ancestor_Part (N)) then\n+                  pragma Assert\n+                    (Is_Class_Wide_Type (Etype (Ancestor_Part (N))));\n+                  Root_Typ := Base_Type (Etype (Etype (Ancestor_Part (N))));\n+               else\n+                  Root_Typ := Base_Type (Etype (Ancestor_Part (N)));\n+               end if;\n             else\n                Root_Typ := Root_Type (Typ);\n "}]}