{"sha": "8a1e05b7618fed394b0928bec89e71748295d357", "node_id": "C_kwDOANBUbNoAKDhhMWUwNWI3NjE4ZmVkMzk0YjA5MjhiZWM4OWU3MTc0ODI5NWQzNTc", "commit": {"author": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-21T16:07:23Z"}, "committer": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-26T09:30:47Z"}, "message": "aarch64: Lower vcombine to GIMPLE\n\nThis lowers vcombine intrinsics to a GIMPLE vector constructor, which enables\nbetter optimisation during GIMPLE passes.\n\ngcc/\n\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_general_gimple_fold_builtin): Add combine.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/advsimd-intrinsics/combine.c:\n\tNew test.", "tree": {"sha": "b08f01a9ac9871536df674767cb72fbba78aaeb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b08f01a9ac9871536df674767cb72fbba78aaeb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a1e05b7618fed394b0928bec89e71748295d357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1e05b7618fed394b0928bec89e71748295d357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1e05b7618fed394b0928bec89e71748295d357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1e05b7618fed394b0928bec89e71748295d357/comments", "author": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb04f9f23ac0dee2c003118c85372ece50a52220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb04f9f23ac0dee2c003118c85372ece50a52220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb04f9f23ac0dee2c003118c85372ece50a52220"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "e2a9faa179c78c28b72138234b2fd585728de10b", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1e05b7618fed394b0928bec89e71748295d357/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1e05b7618fed394b0928bec89e71748295d357/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=8a1e05b7618fed394b0928bec89e71748295d357", "patch": "@@ -2808,6 +2808,28 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n \tbreak;\n \n+     BUILTIN_VDC (BINOP, combine, 0, AUTO_FP)\n+     BUILTIN_VD_I (BINOPU, combine, 0, NONE)\n+     BUILTIN_VDC_P (BINOPP, combine, 0, NONE)\n+\t{\n+\t  tree first_part, second_part;\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    {\n+\t      second_part = args[0];\n+\t      first_part = args[1];\n+\t    }\n+\t  else\n+\t    {\n+\t      first_part = args[0];\n+\t      second_part = args[1];\n+\t    }\n+\t  tree ret_type = gimple_call_return_type (stmt);\n+\t  tree ctor = build_constructor_va (ret_type, 2, NULL_TREE, first_part,\n+\t\t\t\t\t    NULL_TREE, second_part);\n+\t  new_stmt = gimple_build_assign (gimple_call_lhs (stmt), ctor);\n+\t}\n+\tbreak;\n+\n      /*lower store and load neon builtins to gimple.  */\n      BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n      BUILTIN_VDQ_I (LOAD1_U, ld1, 0, LOAD)"}, {"sha": "d08faf7a4a160a1e83428ed9b270731bbf7b8c8a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/combine.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1e05b7618fed394b0928bec89e71748295d357/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1e05b7618fed394b0928bec89e71748295d357/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcombine.c?ref=8a1e05b7618fed394b0928bec89e71748295d357", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+** foo:\n+**\tumov\tw0, v1\\.s\\[1\\]\n+**\tret\n+*/\n+\n+int32_t foo (int32x2_t a, int32x2_t b)\n+{\n+  int32x4_t c = vcombine_s32(a, b);\n+  return vgetq_lane_s32(c, 3);\n+}\n+"}]}