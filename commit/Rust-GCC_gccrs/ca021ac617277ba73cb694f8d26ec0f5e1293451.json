{"sha": "ca021ac617277ba73cb694f8d26ec0f5e1293451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwMjFhYzYxNzI3N2JhNzNjYjY5NGY4ZDI2ZWMwZjVlMTI5MzQ1MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-22T23:58:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-23T00:12:00Z"}, "message": "libstdc++: Ensure std::forward_as_tuple is defined\n\nThe recent changes to reduce includes in <memory_resource> went a bit\ntoo far, and it's possible for std::forward_as_tuple to not be defined\nwhen used.\n\nWhile doing this, I noticed the problematic calls to forward_as_tuple\nwere not qualified, so performed unwanted ADL.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/memory_resource: Include <tuple>.\n\t(polymorphic_allocator::construct): Qualify forward_as_tuple.\n\t* include/std/memory_resource: Likewise.", "tree": {"sha": "b04d7cb192c82d21a89dfc13c5c6d8158b27cf53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b04d7cb192c82d21a89dfc13c5c6d8158b27cf53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca021ac617277ba73cb694f8d26ec0f5e1293451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca021ac617277ba73cb694f8d26ec0f5e1293451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca021ac617277ba73cb694f8d26ec0f5e1293451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca021ac617277ba73cb694f8d26ec0f5e1293451/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1506304c52c29497a12c65734caaaa99996f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1506304c52c29497a12c65734caaaa99996f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1506304c52c29497a12c65734caaaa99996f77"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "ca1bad9ecd0149964f9e6cd0e69687d82bef1e47", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca021ac617277ba73cb694f8d26ec0f5e1293451/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca021ac617277ba73cb694f8d26ec0f5e1293451/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=ca021ac617277ba73cb694f8d26ec0f5e1293451", "patch": "@@ -36,6 +36,7 @@\n \n #include <memory>\t\t\t// align, uses_allocator, __uses_alloc\n #include <experimental/utility>\t\t// pair, experimental::erased_type\n+#include <tuple>\t\t\t// tuple, forward_as_tuple\n #include <atomic>\t\t\t// atomic\n #include <new>\t\t\t\t// placement new\n #include <cstddef>\t\t\t// max_align_t\n@@ -196,26 +197,26 @@ namespace pmr {\n \tconstruct(pair<_Tp1,_Tp2>* __p, _Up&& __x, _Vp&& __y)\n \t{\n \t  this->construct(__p, piecewise_construct,\n-\t\t\t  forward_as_tuple(std::forward<_Up>(__x)),\n-\t\t\t  forward_as_tuple(std::forward<_Vp>(__y)));\n+\t      std::forward_as_tuple(std::forward<_Up>(__x)),\n+\t      std::forward_as_tuple(std::forward<_Vp>(__y)));\n \t}\n \n       template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n \tvoid\n \tconstruct(pair<_Tp1,_Tp2>* __p, const std::pair<_Up, _Vp>& __pr)\n \t{\n \t  this->construct(__p, piecewise_construct,\n-\t\t\t  forward_as_tuple(__pr.first),\n-\t\t\t  forward_as_tuple(__pr.second));\n+\t      std::forward_as_tuple(__pr.first),\n+\t      std::forward_as_tuple(__pr.second));\n \t}\n \n       template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n \tvoid\n \tconstruct(pair<_Tp1,_Tp2>* __p, pair<_Up, _Vp>&& __pr)\n \t{\n \t  this->construct(__p, piecewise_construct,\n-\t\t\t  forward_as_tuple(std::forward<_Up>(__pr.first)),\n-\t\t\t  forward_as_tuple(std::forward<_Vp>(__pr.second)));\n+\t      std::forward_as_tuple(std::forward<_Up>(__pr.first)),\n+\t      std::forward_as_tuple(std::forward<_Vp>(__pr.second)));\n \t}\n \n       template <typename _Up>"}, {"sha": "40e23a2f9ce2f1ac7212e90c08573e773b7cd3ee", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca021ac617277ba73cb694f8d26ec0f5e1293451/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca021ac617277ba73cb694f8d26ec0f5e1293451/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=ca021ac617277ba73cb694f8d26ec0f5e1293451", "patch": "@@ -45,6 +45,7 @@\n \n #if ! __cpp_lib_make_obj_using_allocator\n # include <utility>\t\t\t// pair, index_sequence\n+# include <tuple>\t\t\t// tuple, forward_as_tuple\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -286,8 +287,8 @@ namespace pmr\n \tconstruct(pair<_Tp1, _Tp2>* __p, _Up&& __x, _Vp&& __y)\n \t{\n \t  this->construct(__p, piecewise_construct,\n-\t\t\t  forward_as_tuple(std::forward<_Up>(__x)),\n-\t\t\t  forward_as_tuple(std::forward<_Vp>(__y)));\n+\t      std::forward_as_tuple(std::forward<_Up>(__x)),\n+\t      std::forward_as_tuple(std::forward<_Vp>(__y)));\n \t}\n \n       template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n@@ -296,8 +297,8 @@ namespace pmr\n \tconstruct(pair<_Tp1, _Tp2>* __p, const std::pair<_Up, _Vp>& __pr)\n \t{\n \t  this->construct(__p, piecewise_construct,\n-\t\t\t  forward_as_tuple(__pr.first),\n-\t\t\t  forward_as_tuple(__pr.second));\n+\t      std::forward_as_tuple(__pr.first),\n+\t      std::forward_as_tuple(__pr.second));\n \t}\n \n       template<typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n@@ -306,8 +307,8 @@ namespace pmr\n \tconstruct(pair<_Tp1, _Tp2>* __p, pair<_Up, _Vp>&& __pr)\n \t{\n \t  this->construct(__p, piecewise_construct,\n-\t\t\t  forward_as_tuple(std::forward<_Up>(__pr.first)),\n-\t\t\t  forward_as_tuple(std::forward<_Vp>(__pr.second)));\n+\t      std::forward_as_tuple(std::forward<_Up>(__pr.first)),\n+\t      std::forward_as_tuple(std::forward<_Vp>(__pr.second)));\n \t}\n #else // make_obj_using_allocator\n       template<typename _Tp1, typename... _Args>"}]}