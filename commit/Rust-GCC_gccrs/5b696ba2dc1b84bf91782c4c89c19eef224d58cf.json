{"sha": "5b696ba2dc1b84bf91782c4c89c19eef224d58cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2OTZiYTJkYzFiODRiZjkxNzgyYzRjODljMTllZWYyMjRkNThjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-09T15:48:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-09T15:48:42Z"}, "message": "re PR debug/49676 (inefficiency: DW_AT_GNU_call_site_value calculates everything << 32)\n\n\tPR debug/49676\n\t* dwarf2out.c (size_of_int_loc_descriptor): New function.\n\t(address_of_int_loc_descriptor): Use it.\n\t(scompare_loc_descriptor): Optimize EQ/NE comparison with\n\tconstant.\n\nFrom-SVN: r176083", "tree": {"sha": "6525562c36d52a3cb7739fa718e5ec79da115e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6525562c36d52a3cb7739fa718e5ec79da115e96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b696ba2dc1b84bf91782c4c89c19eef224d58cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b696ba2dc1b84bf91782c4c89c19eef224d58cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b696ba2dc1b84bf91782c4c89c19eef224d58cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b696ba2dc1b84bf91782c4c89c19eef224d58cf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8662b2ba92816ad1e1a461ef9fe3b2c3e9d21905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8662b2ba92816ad1e1a461ef9fe3b2c3e9d21905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8662b2ba92816ad1e1a461ef9fe3b2c3e9d21905"}], "stats": {"total": 77, "additions": 58, "deletions": 19}, "files": [{"sha": "addfcd73775cc9069b8e6abd7a4363422ac63d59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b696ba2dc1b84bf91782c4c89c19eef224d58cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b696ba2dc1b84bf91782c4c89c19eef224d58cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b696ba2dc1b84bf91782c4c89c19eef224d58cf", "patch": "@@ -1,3 +1,11 @@\n+2011-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/49676\n+\t* dwarf2out.c (size_of_int_loc_descriptor): New function.\n+\t(address_of_int_loc_descriptor): Use it.\n+\t(scompare_loc_descriptor): Optimize EQ/NE comparison with\n+\tconstant.\n+\n 2011-07-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/pdp11/pdp11.md (define_c_enum \"unspecv\"): New."}, {"sha": "bad0b2d53a1aa95bf866629198184a45b62e3708", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b696ba2dc1b84bf91782c4c89c19eef224d58cf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b696ba2dc1b84bf91782c4c89c19eef224d58cf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5b696ba2dc1b84bf91782c4c89c19eef224d58cf", "patch": "@@ -10848,44 +10848,53 @@ int_loc_descriptor (HOST_WIDE_INT i)\n   return new_loc_descr (op, i, 0);\n }\n \n-/* Return loc description representing \"address\" of integer value.\n-   This can appear only as toplevel expression.  */\n+/* Return size_of_locs (int_loc_descriptor (i)) without\n+   actually allocating it.  */\n \n-static dw_loc_descr_ref\n-address_of_int_loc_descriptor (int size, HOST_WIDE_INT i)\n+static unsigned long\n+size_of_int_loc_descriptor (HOST_WIDE_INT i)\n {\n-  int litsize;\n-  dw_loc_descr_ref loc_result = NULL;\n-\n-  if (!(dwarf_version >= 4 || !dwarf_strict))\n-    return NULL;\n-\n   if (i >= 0)\n     {\n       if (i <= 31)\n-\tlitsize = 1;\n+\treturn 1;\n       else if (i <= 0xff)\n-\tlitsize = 2;\n+\treturn 2;\n       else if (i <= 0xffff)\n-\tlitsize = 3;\n+\treturn 3;\n       else if (HOST_BITS_PER_WIDE_INT == 32\n \t       || i <= 0xffffffff)\n-\tlitsize = 5;\n+\treturn 5;\n       else\n-\tlitsize = 1 + size_of_uleb128 ((unsigned HOST_WIDE_INT) i);\n+\treturn 1 + size_of_uleb128 ((unsigned HOST_WIDE_INT) i);\n     }\n   else\n     {\n       if (i >= -0x80)\n-\tlitsize = 2;\n+\treturn 2;\n       else if (i >= -0x8000)\n-\tlitsize = 3;\n+\treturn 3;\n       else if (HOST_BITS_PER_WIDE_INT == 32\n \t       || i >= -0x80000000)\n-\tlitsize = 5;\n+\treturn 5;\n       else\n-\tlitsize = 1 + size_of_sleb128 (i);\n+\treturn 1 + size_of_sleb128 (i);\n     }\n+}\n+\n+/* Return loc description representing \"address\" of integer value.\n+   This can appear only as toplevel expression.  */\n+\n+static dw_loc_descr_ref\n+address_of_int_loc_descriptor (int size, HOST_WIDE_INT i)\n+{\n+  int litsize;\n+  dw_loc_descr_ref loc_result = NULL;\n+\n+  if (!(dwarf_version >= 4 || !dwarf_strict))\n+    return NULL;\n+\n+  litsize = size_of_int_loc_descriptor (i);\n   /* Determine if DW_OP_stack_value or DW_OP_implicit_value\n      is more compact.  For DW_OP_stack_value we need:\n      litsize + 1 (DW_OP_stack_value)\n@@ -11284,6 +11293,28 @@ scompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n \t\t  && (unsigned HOST_WIDE_INT) INTVAL (XEXP (rtl, 1))\n \t\t     == (INTVAL (XEXP (rtl, 1)) & GET_MODE_MASK (op_mode)))))\n \treturn compare_loc_descriptor (op, op0, op1);\n+\n+      /* EQ/NE comparison against constant in narrower type than\n+\t DWARF2_ADDR_SIZE can be performed either as\n+\t DW_OP_const1u <shift> DW_OP_shl DW_OP_const* <cst << shift>\n+\t DW_OP_{eq,ne}\n+\t or\n+\t DW_OP_const*u <mode_mask> DW_OP_and DW_OP_const* <cst & mode_mask>\n+\t DW_OP_{eq,ne}.  Pick whatever is shorter.  */\n+      if (CONST_INT_P (XEXP (rtl, 1))\n+\t  && GET_MODE_BITSIZE (op_mode) < HOST_BITS_PER_WIDE_INT\n+\t  && (size_of_int_loc_descriptor (shift) + 1\n+\t      + size_of_int_loc_descriptor (INTVAL (XEXP (rtl, 1)) << shift)\n+\t      >= size_of_int_loc_descriptor (GET_MODE_MASK (op_mode)) + 1\n+\t\t + size_of_int_loc_descriptor (INTVAL (XEXP (rtl, 1))\n+\t\t\t\t\t       & GET_MODE_MASK (op_mode))))\n+\t{\n+\t  add_loc_descr (&op0, int_loc_descriptor (GET_MODE_MASK (op_mode)));\n+\t  add_loc_descr (&op0, new_loc_descr (DW_OP_and, 0, 0));\n+\t  op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1))\n+\t\t\t\t    & GET_MODE_MASK (op_mode));\n+\t  return compare_loc_descriptor (op, op0, op1);\n+\t}\n     }\n   add_loc_descr (&op0, int_loc_descriptor (shift));\n   add_loc_descr (&op0, new_loc_descr (DW_OP_shl, 0, 0));"}]}