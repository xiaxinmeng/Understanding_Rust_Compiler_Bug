{"sha": "8537ed688c3994e0fc923f6b34c456ff6ccd2626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzN2VkNjg4YzM5OTRlMGZjOTIzZjZiMzRjNDU2ZmY2Y2NkMjYyNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-08-22T19:17:04Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-08-22T19:17:04Z"}, "message": "ggc-page.c: Avoid division in ggc_set_mark.\n\n\t* ggc-page.c: Avoid division in ggc_set_mark.\n\t(DIV_MULT, DIV_SHIFT, OFFSET_TO_BIT, inverse_table,\n\tcompute_inverse): New.\n\t(ggc_set_mark, ggc_marked_p): Use OFFSET_TO_BIT.\n\t(init_ggc): Initialize inverse_table.\n\nFrom-SVN: r56512", "tree": {"sha": "bd0a076c9450bb1886ff2d1bc5edfa5af79c6cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd0a076c9450bb1886ff2d1bc5edfa5af79c6cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8537ed688c3994e0fc923f6b34c456ff6ccd2626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8537ed688c3994e0fc923f6b34c456ff6ccd2626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8537ed688c3994e0fc923f6b34c456ff6ccd2626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8537ed688c3994e0fc923f6b34c456ff6ccd2626/comments", "author": null, "committer": null, "parents": [{"sha": "8567c70f72df23a2ceb3c26ac7a058a6b6aa4054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8567c70f72df23a2ceb3c26ac7a058a6b6aa4054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8567c70f72df23a2ceb3c26ac7a058a6b6aa4054"}], "stats": {"total": 93, "additions": 76, "deletions": 17}, "files": [{"sha": "b27072afe7930d75892e329c780a2ff9731c15d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8537ed688c3994e0fc923f6b34c456ff6ccd2626/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8537ed688c3994e0fc923f6b34c456ff6ccd2626/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8537ed688c3994e0fc923f6b34c456ff6ccd2626", "patch": "@@ -1,3 +1,11 @@\n+2002-08-22  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* ggc-page.c: Avoid division in ggc_set_mark.\n+\t(DIV_MULT, DIV_SHIFT, OFFSET_TO_BIT, inverse_table,\n+\tcompute_inverse): New.\n+\t(ggc_set_mark, ggc_marked_p): Use OFFSET_TO_BIT.\n+\t(init_ggc): Initialize inverse_table.\n+\n 2002-08-22  Tom Tromey  <tromey@redhat.com>\n \n \t* doc/install.texi (Configuration): Document --datadir.\n@@ -46,7 +54,7 @@\n \t* config/rs6000/rs6000.c: Ditto.\n \t* config/stormy16/stormy16.h: Ditto.\n \t* doc/md.texi: Ditto.\n-\t\n+\n 2002-08-21  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* cppinit.c (remove_dup_nonsys_dirs): Fix warning and return value.\n@@ -59,11 +67,11 @@\n \terrors.\n \n 2002-08-21  Andrew Pinski <pinskia@physics.uc.edu>\n-            Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t    Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* doc/tm.texi (TARGET_ASM_GLOBALIZE_LABEL): Move '@end deftypefn'\n \tto the actual end.  Add '@end table' and '@table @code'.\n-\t\n+\n 2002-08-20  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* doc/tm.texi (Label Output): Add missing '@end deftypefn'.\n@@ -157,7 +165,7 @@\n \n 2002-08-20  Devang Patel  <dpatel@apple.com>\n \t* tree.c (get_qualified_type): Add TYPE_CONTEXT check.\n-\t\n+\n 2002-08-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* arc.c (output_shift): Use stdio instead of asm_fprintf.\n@@ -205,7 +213,7 @@\n \t(mips_use_dfa_pipeline_interface): Use.\n \n 2002-08-15  Eric Christopher  <echristo@redhat.com>\n-            Richard Sandiford <rsandifo@redhat.com>\n+\t    Richard Sandiford <rsandifo@redhat.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>\n \t    Graham Stott    <grahams@redhat.com>\n \t    Michael Meissner  <meissner@redhat.com>\n@@ -249,8 +257,8 @@\n \tquote and bracket include chains when they duplicate equivalent system\n \tdirectories.\n \t* doc/cpp.texi (-I): Update.\n-        * doc/cppopts.texi (-I): Update.\n-        * doc/install.texi (--with-local-prefix): Further document usage of\n+\t* doc/cppopts.texi (-I): Update.\n+\t* doc/install.texi (--with-local-prefix): Further document usage of\n \tthis option.\n \t* doc/invoke.texi (-I): Update.\n \n@@ -558,7 +566,7 @@\n \n 2002-08-14  Dale Johannesen  <dalej@apple.com>\n \n-        * explow.c (emit_stack_restore):  Emit memory clobbers\n+\t* explow.c (emit_stack_restore):  Emit memory clobbers\n \tpreceding the stack pop, to prevent the scheduler from\n \tmoving refs to variable arrays below this pop.\n \t* reload1.c (reload):  Preserve these clobbers for sched2.\n@@ -794,7 +802,7 @@ Tue Aug 13 17:40:25 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n 2002-08-13  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.md: Call CC_STATUS_INIT in all peepnoles\n-        which can change CC0.\n+\twhich can change CC0.\n \n Tue Aug 13 14:49:20 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -1357,10 +1365,10 @@ Sat Aug 10 19:59:43 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-08-06  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * c-decl.c (duplicate_decls): Error out for incompatible TLS\n-        declarations.\n+\t* c-decl.c (duplicate_decls): Error out for incompatible TLS\n+\tdeclarations.\n \n-        * testsuite/gcc.dg/tls/diag-3.c: New.\n+\t* testsuite/gcc.dg/tls/diag-3.c: New.\n \n 2002-08-06  Jason Merrill  <jason@redhat.com>\n \n@@ -1369,7 +1377,7 @@ Sat Aug 10 19:59:43 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-08-06  Dale Johannesen  <dalej@apple.com>\n \t* c-common.c (fname_decl): Use line number 0 for\n-        __func__, to avoid confusing debuggers.\n+\t__func__, to avoid confusing debuggers.\n \n 2002-08-06  Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "af3af1ab0bba0ffe87e079a10ba35c753390640f", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8537ed688c3994e0fc923f6b34c456ff6ccd2626/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8537ed688c3994e0fc923f6b34c456ff6ccd2626/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=8537ed688c3994e0fc923f6b34c456ff6ccd2626", "patch": "@@ -158,6 +158,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* The size of an object on a page of the indicated ORDER.  */\n #define OBJECT_SIZE(ORDER) object_size_table[ORDER]\n \n+/* For speed, we avoid doing a general integer divide to locate the\n+   offset in the allocation bitmap, by precalculating numbers M, S\n+   such that (O * M) >> S == O / Z (modulo 2^32), for any offset O\n+   within the page which is evenly divisible by the object size Z.  */\n+#define DIV_MULT(ORDER) inverse_table[ORDER].mult\n+#define DIV_SHIFT(ORDER) inverse_table[ORDER].shift\n+#define OFFSET_TO_BIT(OFFSET, ORDER) \\\n+  (((OFFSET) * DIV_MULT (ORDER)) >> DIV_SHIFT (ORDER))\n+\n /* The number of extra orders, not corresponding to power-of-two sized\n    objects.  */\n \n@@ -209,6 +218,17 @@ static unsigned objects_per_page_table[NUM_ORDERS];\n \n static size_t object_size_table[NUM_ORDERS];\n \n+/* The Ith entry is a pair of numbers (mult, shift) such that\n+   ((k * mult) >> shift) mod 2^32 == (k / OBJECT_SIZE(I)) mod 2^32,\n+   for all k evenly divisible by OBJECT_SIZE(I).  */\n+\n+static struct\n+{\n+  unsigned int mult;\n+  unsigned int shift;\n+}\n+inverse_table[NUM_ORDERS];\n+\n /* A page_entry records the status of an allocation page.  This\n    structure is dynamically sized to fit the bitmap in_use_p.  */\n typedef struct page_entry\n@@ -377,6 +397,7 @@ static void release_pages PARAMS ((void));\n static void clear_marks PARAMS ((void));\n static void sweep_pages PARAMS ((void));\n static void ggc_recalculate_in_use_p PARAMS ((page_entry *));\n+static void compute_inverse PARAMS ((unsigned));\n \n #ifdef GGC_POISON\n static void poison_pages PARAMS ((void));\n@@ -988,7 +1009,7 @@ ggc_set_mark (p)\n \n   /* Calculate the index of the object on the page; this is its bit\n      position in the in_use_p bitmap.  */\n-  bit = (((const char *) p) - entry->page) / OBJECT_SIZE (entry->order);\n+  bit = OFFSET_TO_BIT (((const char *) p) - entry->page, entry->order);\n   word = bit / HOST_BITS_PER_LONG;\n   mask = (unsigned long) 1 << (bit % HOST_BITS_PER_LONG);\n \n@@ -1028,7 +1049,7 @@ ggc_marked_p (p)\n \n   /* Calculate the index of the object on the page; this is its bit\n      position in the in_use_p bitmap.  */\n-  bit = (((const char *) p) - entry->page) / OBJECT_SIZE (entry->order);\n+  bit = OFFSET_TO_BIT (((const char *) p) - entry->page, entry->order);\n   word = bit / HOST_BITS_PER_LONG;\n   mask = (unsigned long) 1 << (bit % HOST_BITS_PER_LONG);\n \n@@ -1045,8 +1066,37 @@ ggc_get_size (p)\n   return OBJECT_SIZE (pe->order);\n }\n \f\n-/* Initialize the ggc-mmap allocator.  */\n+/* Subroutine of init_ggc which computes the pair of numbers used to\n+   perform division by OBJECT_SIZE (order) and fills in inverse_table[].\n+\n+   This algorithm is taken from Granlund and Montgomery's paper\n+   \"Division by Invariant Integers using Multiplication\"\n+   (Proc. SIGPLAN PLDI, 1994), section 9 (Exact division by\n+   constants).  */\n+\n+static void\n+compute_inverse (order)\n+     unsigned order;\n+{\n+  unsigned size, inv, e;\n+\n+  size = OBJECT_SIZE (order);\n+  e = 0;\n+  while (size % 2 == 0)\n+    {\n+      e++;\n+      size >>= 1;\n+    }\n \n+  inv = size;\n+  while (inv * size != 1)\n+    inv = inv * (2 - inv*size);\n+\n+  DIV_MULT (order) = inv;\n+  DIV_SHIFT (order) = e;\n+}\n+\n+/* Initialize the ggc-mmap allocator.  */\n void\n init_ggc ()\n {\n@@ -1109,12 +1159,13 @@ init_ggc ()\n       object_size_table[order] = s;\n     }\n \n-  /* Initialize the objects-per-page table.  */\n+  /* Initialize the objects-per-page and inverse tables.  */\n   for (order = 0; order < NUM_ORDERS; ++order)\n     {\n       objects_per_page_table[order] = G.pagesize / OBJECT_SIZE (order);\n       if (objects_per_page_table[order] == 0)\n \tobjects_per_page_table[order] = 1;\n+      compute_inverse (order);\n     }\n \n   /* Reset the size_lookup array to put appropriately sized objects in"}]}