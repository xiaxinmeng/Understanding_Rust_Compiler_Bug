{"sha": "0e505d53d5819b2820651261fb3999236d648423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1MDVkNTNkNTgxOWIyODIwNjUxMjYxZmIzOTk5MjM2ZDY0ODQyMw==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-09-25T08:39:09Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-09-25T08:39:09Z"}, "message": "2009-09-25  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/include/parallel/checkers.h \n        (is_sorted_failure, is_sorted_print_failures):  Remove (unused).\n        (__is_sorted):  Remove default parameter for _Compare; remove \n        inappropriate printf.\n\nFrom-SVN: r152162", "tree": {"sha": "2d102eb4242393fc3fe37e55cdfcdc4fb2027b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d102eb4242393fc3fe37e55cdfcdc4fb2027b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e505d53d5819b2820651261fb3999236d648423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e505d53d5819b2820651261fb3999236d648423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e505d53d5819b2820651261fb3999236d648423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e505d53d5819b2820651261fb3999236d648423/comments", "author": null, "committer": null, "parents": [{"sha": "3b06118a0a942f43a31be199e564572e9e362dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b06118a0a942f43a31be199e564572e9e362dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b06118a0a942f43a31be199e564572e9e362dd3"}], "stats": {"total": 94, "additions": 8, "deletions": 86}, "files": [{"sha": "83edeb759156b36063616011fb33fe735a961649", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e505d53d5819b2820651261fb3999236d648423/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e505d53d5819b2820651261fb3999236d648423/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e505d53d5819b2820651261fb3999236d648423", "patch": "@@ -1,3 +1,10 @@\n+2009-09-25  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/include/parallel/checkers.h \n+        (is_sorted_failure, is_sorted_print_failures):  Remove (unused).\n+        (__is_sorted):  Remove default parameter for _Compare; remove \n+        inappropriate printf.\n+\n 2009-09-25  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/base.h:  Comment on presence of min/max duplicates."}, {"sha": "70cc949e3fed58fc119ed80796cca178c5a52798", "filename": "libstdc++-v3/include/parallel/checkers.h", "status": "modified", "additions": 1, "deletions": 86, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e505d53d5819b2820651261fb3999236d648423/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcheckers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e505d53d5819b2820651261fb3999236d648423/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcheckers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcheckers.h?ref=0e505d53d5819b2820651261fb3999236d648423", "patch": "@@ -46,13 +46,9 @@ namespace __gnu_parallel\n    * @param __comp Comparator.\n    * @return @__c true if sorted, @__c false otherwise.\n    */\n-  // XXX Compare default template argument\n   template<typename _IIter, typename _Compare>\n     bool\n-    __is_sorted(_IIter __begin, _IIter __end,\n-              _Compare __comp\n-              = std::less<typename std::iterator_traits<_IIter>::\n-              _ValueType>())\n+    __is_sorted(_IIter __begin, _IIter __end, _Compare __comp)\n     {\n       if (__begin == __end)\n         return true;\n@@ -64,8 +60,6 @@ namespace __gnu_parallel\n         {\n           if (__comp(*__current, *__recent))\n             {\n-              printf(\"__is_sorted: check failed before position %__i.\\n\",\n-                     __position);\n               return false;\n             }\n           __recent = __current;\n@@ -75,83 +69,4 @@ namespace __gnu_parallel\n       return true;\n     }\n \n-  /**\n-   * @brief Check whether @__c [__begin, @__c __end) is sorted according to\n-   * @__c __comp.\n-   * Prints the position in case an unordered pair is found.\n-   * @param __begin Begin iterator of sequence.\n-   * @param __end End iterator of sequence.\n-   * @param __first_failure The first failure is returned in this variable.\n-   * @param __comp Comparator.\n-   * @return @__c true if sorted, @__c false otherwise.\n-   */\n-  // XXX Compare default template argument\n-  template<typename _IIter, typename _Compare>\n-    bool\n-    is_sorted_failure(_IIter __begin, _IIter __end,\n-                      _IIter& __first_failure,\n-                      _Compare __comp\n-                      = std::less<typename std::iterator_traits<_IIter>::\n-                      _ValueType>())\n-    {\n-      if (__begin == __end)\n-        return true;\n-\n-      _IIter __current(__begin), __recent(__begin);\n-\n-      unsigned long long __position = 1;\n-      for (__current++; __current != __end; __current++)\n-        {\n-          if (__comp(*__current, *__recent))\n-            {\n-              __first_failure = __current;\n-              printf(\"__is_sorted: check failed before position %lld.\\n\",\n-                     __position);\n-              return false;\n-            }\n-          __recent = __current;\n-          __position++;\n-        }\n-\n-      __first_failure = __end;\n-      return true;\n-    }\n-\n-  /**\n-   * @brief Check whether @__c [__begin, @__c __end) is sorted according to\n-   * @__c __comp.\n-   * Prints all unordered pair, including the surrounding two elements.\n-   * @param __begin Begin iterator of sequence.\n-   * @param __end End iterator of sequence.\n-   * @param __comp Comparator.\n-   * @return @__c true if sorted, @__c false otherwise.\n-   */\n-  template<typename _IIter, typename _Compare>\n-    bool\n-    // XXX Compare default template argument\n-    is_sorted_print_failures(_IIter __begin, _IIter __end,\n-                             _Compare __comp\n-                             = std::less<typename std::iterator_traits\n-                             <_IIter>::value_type>())\n-    {\n-      if (__begin == __end)\n-        return true;\n-\n-      _IIter __recent(__begin);\n-      bool __ok = true;\n-\n-      for (_IIter __pos(__begin + 1); __pos != __end; __pos++)\n-        {\n-          if (__comp(*__pos, *__recent))\n-            {\n-              printf(\"%ld: %d %d %d %d\\n\", __pos - __begin, *(__pos - 2),\n-                     *(__pos- 1), *__pos, *(__pos + 1));\n-              __ok = false;\n-            }\n-          __recent = __pos;\n-        }\n-      return __ok;\n-    }\n-}\n-\n #endif /* _GLIBCXX_PARALLEL_CHECKERS_H */"}]}