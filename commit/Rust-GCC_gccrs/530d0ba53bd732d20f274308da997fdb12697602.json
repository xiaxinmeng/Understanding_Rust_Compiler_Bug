{"sha": "530d0ba53bd732d20f274308da997fdb12697602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwZDBiYTUzYmQ3MzJkMjBmMjc0MzA4ZGE5OTdmZGIxMjY5NzYwMg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-13T10:12:08Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-13T10:12:08Z"}, "message": "c-common.h (flag_digraphs): New.\n\n\t* c-common.h (flag_digraphs): New.\n\t* c-decl.c (c_decode_option): Set flag_digraphs as appropriate.\n\t* c-lex.c (yylex): Use flag_digraphs to decide whether to\n\thonour digraphs.\n\n\t* testsuite/gcc.dg/cpp/digraph1.c,\n\ttestsuite/gcc.dg/cpp/digraph2.c,\n\ttestsuite/gcc.dg/cpp/digraphs.c: New tests.\n\nFrom-SVN: r35010", "tree": {"sha": "6423ad7e017ab296f5b561a41b556c8d5df89411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6423ad7e017ab296f5b561a41b556c8d5df89411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/530d0ba53bd732d20f274308da997fdb12697602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530d0ba53bd732d20f274308da997fdb12697602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530d0ba53bd732d20f274308da997fdb12697602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530d0ba53bd732d20f274308da997fdb12697602/comments", "author": null, "committer": null, "parents": [{"sha": "1920d8c7ae57b6874b91502bc8f3ba920a85ec50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1920d8c7ae57b6874b91502bc8f3ba920a85ec50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1920d8c7ae57b6874b91502bc8f3ba920a85ec50"}], "stats": {"total": 114, "additions": 106, "deletions": 8}, "files": [{"sha": "ff2140eacad8920291abc9d355d83580c1bf330e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -1,3 +1,10 @@\n+2000-07-13  Neil Booth  <NeilB@earthling.net>\n+\n+\t* c-common.h (flag_digraphs): New.\n+\t* c-decl.c (c_decode_option): Set flag_digraphs as appropriate.\n+\t* c-lex.c (yylex): Use flag_digraphs to decide whether to\n+\thonour digraphs.\n+\t\n 2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.c (do_spec_1): Add new %B operator."}, {"sha": "ba5d0fad6121fbdd87fd467c1386db26c2c604db", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -181,6 +181,10 @@ extern int flag_traditional;\n \n extern int flag_isoc99;\n \n+/* Nonzero means accept digraphs.  */\n+\n+extern int flag_digraphs;\n+\n /* Nonzero means warn about suggesting putting in ()'s.  */\n \n extern int warn_parentheses;"}, {"sha": "b759fd5e3ae47c772c7390db264b7178a63f9283", "filename": "gcc/c-decl.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -330,6 +330,10 @@ int flag_traditional;\n \n int flag_isoc99 = 0;\n \n+/* Nonzero means accept digraphs.  */\n+\n+int flag_digraphs = 1;\n+\n /* Nonzero means that we have builtin functions, and main is an int */\n \n int flag_hosted = 1;\n@@ -491,6 +495,7 @@ c_decode_option (argc, argv)\n     {\n       flag_traditional = 1;\n       flag_writable_strings = 1;\n+      flag_digraphs = 0;\n     }\n   else if (!strcmp (p, \"-fallow-single-precision\"))\n     flag_allow_single_precision = 1;\n@@ -511,6 +516,7 @@ c_decode_option (argc, argv)\n     {\n       flag_traditional = 0;\n       flag_writable_strings = 0;\n+      flag_digraphs = 1;\n     }\n   else if (!strncmp (p, \"-std=\", 5))\n     {\n@@ -530,6 +536,8 @@ c_decode_option (argc, argv)\n \t  || !strcmp (argstart, \"c89\"))\n \t{\n \tiso_1990:\n+\t  flag_digraphs = 0;\n+\tiso_1990_digraphs:\n \t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n@@ -538,8 +546,9 @@ c_decode_option (argc, argv)\n \t}\n       else if (!strcmp (argstart, \"iso9899:199409\"))\n \t{\n-\t  /* ??? The changes since ISO C 1990 are not supported.  */\n-\t  goto iso_1990;\n+\t  flag_digraphs = 1;\n+\t  /* ??? The other changes since ISO C 1990 are not supported.  */\n+\t  goto iso_1990_digraphs;\n \t}\n       else if (!strcmp (argstart, \"iso9899:199x\")\n \t       || !strcmp (argstart, \"iso9899:1999\")\n@@ -551,6 +560,7 @@ c_decode_option (argc, argv)\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n \t  flag_isoc99 = 1;\n+\t  flag_digraphs = 1;\n \t}\n       else if (!strcmp (argstart, \"gnu89\"))\n \t{\n@@ -559,6 +569,7 @@ c_decode_option (argc, argv)\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n \t  flag_isoc99 = 0;\n+\t  flag_digraphs = 1;\n \t}\n       else if (!strcmp (argstart, \"gnu9x\") || !strcmp (argstart, \"gnu99\"))\n \t{\n@@ -567,6 +578,7 @@ c_decode_option (argc, argv)\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n \t  flag_isoc99 = 1;\n+\t  flag_digraphs = 1;\n \t}\n       else\n \terror (\"unknown C standard `%s'\", argstart);"}, {"sha": "f47ddac4440cdb5490e7c42d16e5df14689729eb", "filename": "gcc/c-lex.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -2385,17 +2385,20 @@ yylex ()\n \n \t      /* digraphs */\n \t    case ':':\n-\t      if (c1 == '>')\n+\t      if (c1 == '>' && flag_digraphs)\n \t\t{ value = ']'; goto done; }\n \t      break;\n \t    case '<':\n-\t      if (c1 == '%')\n-\t\t{ value = '{'; indent_level++; goto done; }\n-\t      if (c1 == ':')\n-\t\t{ value = '['; goto done; }\n+\t      if (flag_digraphs)\n+\t\t{\n+\t\t  if (c1 == '%')\n+\t\t    { value = '{'; indent_level++; goto done; }\n+\t\t  if (c1 == ':')\n+\t\t    { value = '['; goto done; }\n+\t\t}\n \t      break;\n \t    case '%':\n-\t      if (c1 == '>')\n+\t      if (c1 == '>' && flag_digraphs)\n \t\t{ value = '}'; indent_level--; goto done; }\n \t      break;\n \t    }"}, {"sha": "05211a85729c94f7fc9892cb30be4dde7018cd26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -1,3 +1,9 @@\n+2000-07-13  Neil Booth  <NeilB@earthling.net>\n+\n+\t* testsuite/gcc.dg/cpp/digraph1.c,\n+\ttestsuite/gcc.dg/cpp/digraph2.c,\n+\ttestsuite/gcc.dg/cpp/digraphs.c: New tests.\n+\n 2000-07-12  David Billinghurst  <David Billinghurst@riotinto.com.au>\n \n \t* g77.f-torture/compile/20000630-2.f:  New test."}, {"sha": "e098d68dacaf49ef2d56c5f9688b348593829e9f", "filename": "gcc/testsuite/gcc.dg/cpp/digraph1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraph1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraph1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraph1.c?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -0,0 +1,17 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:199409\" } */\n+\n+/* Just simple check that digraphs are on under c94, for both\n+   preprocessor and compiler.  digraphs.c is the general test.  */\n+\n+%:define glue\n+#ifndef glue\n+#error glue not defined!\n+#endif\n+\n+int main (int argc, char *argv<::>)\n+<%\n+  return 0;\n+%>"}, {"sha": "e67ec53878b4e7ebdd693de123589758000a8d7e", "filename": "gcc/testsuite/gcc.dg/cpp/digraph2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraph2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraph2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraph2.c?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -0,0 +1,19 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89\" } */\n+\n+/* Just simple check that digraphs are not on in c89, for both\n+   preprocessor and compiler.  digraphs.c is the general test.  */\n+\n+int main (int argc, char *argv[])\n+{\n+  return 0;\n+%>\t\t\t\t/* { dg-error \"parse error\" } */\n+\n+/* Place this after main () so we get to test both the compiler above\n+   and the preprocessor below.  */\n+%:define glue\n+#ifdef glue\n+#error glue is defined!\n+#endif"}, {"sha": "e4ae0e0346087b29bdb3d4cb25098ee7b8d60fb4", "filename": "gcc/testsuite/gcc.dg/cpp/digraphs.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraphs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d0ba53bd732d20f274308da997fdb12697602/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraphs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdigraphs.c?ref=530d0ba53bd732d20f274308da997fdb12697602", "patch": "@@ -0,0 +1,30 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Fully test the 6 digraphs under c99 assumptions.  Four are pasted,\n+   to check that digraph pasting works.  */\n+\n+extern int strcmp (const char *, const char *);\n+extern void abort (void);\n+#define err(str) do { puts(str); abort(); } while (0)\n+\n+%:define glue(x, y) x %:%: y\t/* #define glue(x, y) x ## y. */\n+#ifndef glue\n+#error glue not defined!\n+#endif\n+%:define str(x) %:x\t\t/* #define str(x) #x */\n+\n+int main (int argc, char *argv<::>) /* argv[] */\n+glue (<, %) /* { */\n+             /* di_str[] = */\n+  const char di_str glue(<, :)glue(:, >) = str(%:%:<::><%%>%:);\n+\n+  /* Check the glue macro actually pastes, and that the spelling of\n+     all digraphs is preserved.  */\n+  if (glue(str, cmp) (di_str, \"%:%:<::><%%>%:\"))\n+    err (\"Digraph spelling not preserved!\");\n+\n+  return 0;\n+glue (%, >) /* } */"}]}