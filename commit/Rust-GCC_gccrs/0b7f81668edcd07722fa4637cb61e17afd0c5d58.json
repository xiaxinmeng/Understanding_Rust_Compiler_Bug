{"sha": "0b7f81668edcd07722fa4637cb61e17afd0c5d58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3ZjgxNjY4ZWRjZDA3NzIyZmE0NjM3Y2I2MWUxN2FmZDBjNWQ1OA==", "commit": {"author": {"name": "Marcus Shawcroft", "email": "marcus.shawcroft@arm.com", "date": "2014-03-27T10:13:50Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-03-27T10:13:50Z"}, "message": "[PR 60580, AArch64] Fix __attribute__ ((optimize(\"no-omit-frame-pointer\")))\n\nThe implementation of -m[no-]omit-leaf-frame-pointer and\n-f[no-]omit-frame-pointer in the AArch64 target does not behave\ncorrectly in the presence of __attribute__ optimize.\n\nThis patch adjusts the implementation to work in a similar fashion to\nthe same functionality in the i386 target.\n\nThe problem occurs because the current implementation uses a global\n'faked_omit_frame_pointer' to retain the original value of\nflag_omit_frame_pointer.  The global does not form part of the\noptimization save state.\n\nThis solution removes the global and instead tracks required behaviour\nusing only flag_omit_frame_pointer and flag_omit_leaf_frame_pointer.\nThese two form part of the optimziation save state and target save\nstate respectively.\n\nThe additional complication for AArch64 is that the PCS requires that\ngiven -fno-omit-frame-pointer -momit-leave-frame-pointer, a leaf\nfunction that kills LR must create a frame record.  This is readily\nhandled in aarch64_frame_pointer_required().  I've dropped logic in\naarch64_can_eliminate() that attempts to detect this scenario since it\n\nFrom-SVN: r208862", "tree": {"sha": "b37b071828298af9a484d41c16d102e23e430568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37b071828298af9a484d41c16d102e23e430568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7f81668edcd07722fa4637cb61e17afd0c5d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7f81668edcd07722fa4637cb61e17afd0c5d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7f81668edcd07722fa4637cb61e17afd0c5d58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7f81668edcd07722fa4637cb61e17afd0c5d58/comments", "author": {"login": "mshawcroft", "id": 6357566, "node_id": "MDQ6VXNlcjYzNTc1NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6357566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mshawcroft", "html_url": "https://github.com/mshawcroft", "followers_url": "https://api.github.com/users/mshawcroft/followers", "following_url": "https://api.github.com/users/mshawcroft/following{/other_user}", "gists_url": "https://api.github.com/users/mshawcroft/gists{/gist_id}", "starred_url": "https://api.github.com/users/mshawcroft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mshawcroft/subscriptions", "organizations_url": "https://api.github.com/users/mshawcroft/orgs", "repos_url": "https://api.github.com/users/mshawcroft/repos", "events_url": "https://api.github.com/users/mshawcroft/events{/privacy}", "received_events_url": "https://api.github.com/users/mshawcroft/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f2a7d154350c5bbe2da1ff5b926595860268577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2a7d154350c5bbe2da1ff5b926595860268577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2a7d154350c5bbe2da1ff5b926595860268577"}], "stats": {"total": 168, "additions": 126, "deletions": 42}, "files": [{"sha": "fcec2ad3aab671d74a98043b3301c466d9c55773", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b7f81668edcd07722fa4637cb61e17afd0c5d58", "patch": "@@ -1,3 +1,11 @@\n+2014-03-27  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\tPR target/60580\n+\t* config/aarch64/aarch64.c (faked_omit_frame_pointer): Remove.\n+\t(aarch64_frame_pointer_required): Adjust logic.\n+\t(aarch64_can_eliminate): Adjust logic.\n+\t(aarch64_override_options_after_change): Adjust logic.\n+\n 2014-03-27  Dehao Chen  <dehao@google.com>\n \n \t* ipa-inline.c (early_inliner): Update node's inline info."}, {"sha": "e2812d22ec973818fd7dd8fc0de658e732800ef8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 42, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0b7f81668edcd07722fa4637cb61e17afd0c5d58", "patch": "@@ -315,10 +315,6 @@ static GTY(()) int gty_dummy;\n #define AARCH64_NUM_BITMASKS  5334\n static unsigned HOST_WIDE_INT aarch64_bitmasks[AARCH64_NUM_BITMASKS];\n \n-/* Did we set flag_omit_frame_pointer just so\n-   aarch64_frame_pointer_required would be called? */\n-static bool faked_omit_frame_pointer;\n-\n typedef enum aarch64_cond_code\n {\n   AARCH64_EQ = 0, AARCH64_NE, AARCH64_CS, AARCH64_CC, AARCH64_MI, AARCH64_PL,\n@@ -1694,17 +1690,15 @@ aarch64_frame_pointer_required (void)\n   if (cfun->calls_alloca)\n     return true;\n \n-  /* We may have turned flag_omit_frame_pointer on in order to have this\n-     function called; if we did, we also set the 'faked_omit_frame_pointer' flag\n-     and we'll check it here.\n-     If we really did set flag_omit_frame_pointer normally, then we return false\n-     (no frame pointer required) in all cases.  */\n+  /* In aarch64_override_options_after_change\n+     flag_omit_leaf_frame_pointer turns off the frame pointer by\n+     default.  Turn it back on now if we've not got a leaf\n+     function.  */\n+  if (flag_omit_leaf_frame_pointer\n+      && (!crtl->is_leaf || df_regs_ever_live_p (LR_REGNUM)))\n+    return true;\n \n-  if (flag_omit_frame_pointer && !faked_omit_frame_pointer)\n-    return false;\n-  else if (flag_omit_leaf_frame_pointer)\n-    return !crtl->is_leaf || df_regs_ever_live_p (LR_REGNUM);\n-  return true;\n+  return false;\n }\n \n /* Mark the registers that need to be saved by the callee and calculate\n@@ -4132,23 +4126,8 @@ aarch64_can_eliminate (const int from, const int to)\n \treturn true;\n       if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n \treturn true;\n-    return false;\n-    }\n-  else\n-    {\n-      /* If we decided that we didn't need a leaf frame pointer but then used\n-\t LR in the function, then we'll want a frame pointer after all, so\n-\t prevent this elimination to ensure a frame pointer is used.\n-\n-\t NOTE: the original value of flag_omit_frame_pointer gets trashed\n-\t IFF flag_omit_leaf_frame_pointer is true, so we check the value\n-\t of faked_omit_frame_pointer here (which is true when we always\n-\t wish to keep non-leaf frame pointers but only wish to keep leaf frame\n-\t pointers when LR is clobbered).  */\n-      if (to == STACK_POINTER_REGNUM\n-\t  && df_regs_ever_live_p (LR_REGNUM)\n-\t  && faked_omit_frame_pointer)\n-\treturn false;\n+\n+      return false;\n     }\n \n   return true;\n@@ -5278,17 +5257,10 @@ aarch64_override_options (void)\n static void\n aarch64_override_options_after_change (void)\n {\n-  faked_omit_frame_pointer = false;\n-\n-  /* To omit leaf frame pointers, we need to turn flag_omit_frame_pointer on so\n-     that aarch64_frame_pointer_required will be called.  We need to remember\n-     whether flag_omit_frame_pointer was turned on normally or just faked.  */\n-\n-  if (flag_omit_leaf_frame_pointer && !flag_omit_frame_pointer)\n-    {\n-      flag_omit_frame_pointer = true;\n-      faked_omit_frame_pointer = true;\n-    }\n+  if (flag_omit_frame_pointer)\n+    flag_omit_leaf_frame_pointer = false;\n+  else if (flag_omit_leaf_frame_pointer)\n+    flag_omit_frame_pointer = true;\n }\n \n static struct machine_function *"}, {"sha": "2155af3b741e04fadc1e9e17ee66bd409a71e588", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b7f81668edcd07722fa4637cb61e17afd0c5d58", "patch": "@@ -1,3 +1,10 @@\n+2014-03-27  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\tPR target/60580\n+\t* gcc.target/aarch64/pr60580_1.c: New.\n+\t* gcc.target/aarch64/test_fp_attribute_1.c: New.\n+\t* gcc.target/aarch64/test_fp_attribute_2.c: New.\n+\n 2014-03-26  Dehao Chen  <dehao@google.com>\n \n \t* gcc.dg/predict-8.c: New test."}, {"sha": "1adf508cfc0416bb84b6bd9bf03dc0d3fb94e8ef", "filename": "gcc/testsuite/gcc.target/aarch64/pr60580_1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr60580_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr60580_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr60580_1.c?ref=0b7f81668edcd07722fa4637cb61e17afd0c5d58", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fomit-frame-pointer -fno-inline --save-temps\" } */\n+\n+void\n+func_leaf (void)\n+{\n+  int a = 0;\n+}\n+\n+void\n+func_no_leaf (void)\n+{\n+  int a = 0;\n+  func_leaf ();\n+}\n+\n+void\n+func1 (void)\n+{\n+  int a = 0;\n+  func_no_leaf ();\n+}\n+\n+/*\n+ * This function calls XXX(), which modifies SP. This is incompatible to\n+ * -fomit-frame-pointer generated code as SP is used to access the frame.\n+ */\n+__attribute__ ((optimize(\"no-omit-frame-pointer\")))\n+void\n+func2 (void)\n+{\n+  int a = 0;\n+  func_no_leaf ();\n+}\n+\n+void\n+func3 (void)\n+{\n+  int a = 0;\n+  func_no_leaf ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 1 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7538250c9f304eba62b7fa71b41d76bcf7130127", "filename": "gcc/testsuite/gcc.target/aarch64/test_fp_attribute_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_1.c?ref=0b7f81668edcd07722fa4637cb61e17afd0c5d58", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fno-omit-frame-pointer -fno-inline --save-temps\" } */\n+\n+void\n+leaf (void)\n+{\n+  int a = 0;\n+}\n+\n+__attribute__ ((optimize(\"omit-frame-pointer\")))\n+void\n+non_leaf_1 (void)\n+{\n+  leaf ();\n+}\n+\n+__attribute__ ((optimize(\"omit-frame-pointer\")))\n+void\n+non_leaf_2 (void)\n+{\n+  leaf ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp\\\\\\]\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "675091f841ead5c39141d3887d6a72edaf055a5f", "filename": "gcc/testsuite/gcc.target/aarch64/test_fp_attribute_2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7f81668edcd07722fa4637cb61e17afd0c5d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_fp_attribute_2.c?ref=0b7f81668edcd07722fa4637cb61e17afd0c5d58", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fomit-frame-pointer -fno-inline --save-temps\" } */\n+\n+void\n+leaf (void)\n+{\n+  int a = 0;\n+}\n+\n+__attribute__ ((optimize(\"no-omit-frame-pointer\")))\n+void\n+non_leaf_1 (void)\n+{\n+  leaf ();\n+}\n+\n+__attribute__ ((optimize(\"no-omit-frame-pointer\")))\n+void\n+non_leaf_2 (void)\n+{\n+  leaf ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}