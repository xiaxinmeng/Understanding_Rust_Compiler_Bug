{"sha": "ccae4443c8322d9d82a19a1e7c689413a122a478", "node_id": "C_kwDOANBUbNoAKGNjYWU0NDQzYzgzMjJkOWQ4MmExOWExZTdjNjg5NDEzYTEyMmE0Nzg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-14T17:48:15Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-15T13:59:11Z"}, "message": "c++: wrong error with variadic concept [PR105268]\n\nHere we issue a wrong error for the\n\n  template<typename T = S<C_many<int>>> void g();\n\nline in the testcase.  I surmise that's because we mistakenly parse\nC_many<int> as a placeholder-type-specifier, and things go wrong from\nthere.  We are in a default argument so we should reject parsing C_many<int>\nas a placeholder-type-specifier, which would mean creating a new parameter.\nWe want C_many<int> to be a concept-id instead.\n\nIt's interesting to see why the same problem didn't occur for C_one<int>.\nIn that case, cp_parser_placeholder_type_specifier -> finish_type_constraints\n-> build_type_constraint -> build_concept_check -> build_standard_check ->\ncoerce_template_parms fails the parse here:\n\n 8916   nargs = inner_args ? NUM_TMPL_ARGS (inner_args) : 0;\n 8917   if ((nargs - variadic_args_p > nparms && !variadic_p)\n 8918       || (nargs < nparms - variadic_p\n 8919           && require_all_args\n 8920           && !variadic_args_p\n 8921           && (!use_default_args\n 8922               || (TREE_VEC_ELT (parms, nargs) != error_mark_node\n 8923                   && !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs))))))\n 8924     {\n 8925     bad_nargs:\n ...\n 8943       return error_mark_node;\n\nbecause nargs is 2 (the targs are <WILDCARD_DECL, int>) while nparms is\n1 (for the one 'typename' in the tparam list of C_one).  But for\nC_many<int> variadic_p is true so we don't return error_mark_node but\n<type_argument_pack>.\n\nThis patch does not issue any error for the !tentative case because\nI didn't figure out how to trigger that.  So it adds an assert instead.\n\n\tPR c++/105268\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_placeholder_type_specifier): Return\n\terror_mark_node when trying to build up a constrained parameter in\n\ta default argument.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/variadic6.C: New test.", "tree": {"sha": "6386a8ba124f3532d233d5038bd9667dc8e8f4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6386a8ba124f3532d233d5038bd9667dc8e8f4f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccae4443c8322d9d82a19a1e7c689413a122a478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccae4443c8322d9d82a19a1e7c689413a122a478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccae4443c8322d9d82a19a1e7c689413a122a478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccae4443c8322d9d82a19a1e7c689413a122a478/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a54137c88061c7495728fc6b8dfd0474e812b2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54137c88061c7495728fc6b8dfd0474e812b2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a54137c88061c7495728fc6b8dfd0474e812b2cb"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "169e6a62f5f4234233772d9e8244a635416fa318", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccae4443c8322d9d82a19a1e7c689413a122a478/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccae4443c8322d9d82a19a1e7c689413a122a478/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=ccae4443c8322d9d82a19a1e7c689413a122a478", "patch": "@@ -20041,7 +20041,16 @@ cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n   /* In a template parameter list, a type-parameter can be introduced\n      by type-constraints alone.  */\n   if (processing_template_parmlist && !placeholder)\n-    return build_constrained_parameter (con, proto, args);\n+    {\n+      /* In a default argument we may not be creating new parameters.  */\n+      if (parser->local_variables_forbidden_p & LOCAL_VARS_FORBIDDEN)\n+\t{\n+\t  /* If this assert turns out to be false, do error() instead.  */\n+\t  gcc_assert (tentative);\n+\t  return error_mark_node;\n+\t}\n+      return build_constrained_parameter (con, proto, args);\n+    }\n \n   /* Diagnose issues placeholder issues.  */\n   if (!flag_concepts_ts"}, {"sha": "0b386b0cd6d9da1d097184b4563ce8d6f56706d7", "filename": "gcc/testsuite/g++.dg/concepts/variadic6.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccae4443c8322d9d82a19a1e7c689413a122a478/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccae4443c8322d9d82a19a1e7c689413a122a478/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic6.C?ref=ccae4443c8322d9d82a19a1e7c689413a122a478", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/105268\n+// { dg-do compile { target concepts } }\n+\n+template<typename> concept C_one = true;\n+template<typename...> concept C_many = true;\n+\n+template<bool B> struct S { };\n+\n+template<typename T = S<C_one<int>>> void f();\n+template<typename T = S<C_many<int>>> void g();\n+\n+void\n+fn (auto a = S<C_one<int>>{})\n+{\n+}\n+\n+void\n+fn2 (auto a = S<C_many<int>>{})\n+{\n+}"}]}