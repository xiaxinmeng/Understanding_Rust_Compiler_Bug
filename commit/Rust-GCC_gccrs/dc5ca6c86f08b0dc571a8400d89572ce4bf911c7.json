{"sha": "dc5ca6c86f08b0dc571a8400d89572ce4bf911c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1Y2E2Yzg2ZjA4YjBkYzU3MWE4NDAwZDg5NTcyY2U0YmY5MTFjNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-15T21:56:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-15T21:56:34Z"}, "message": "* constexpr.c (cxx_eval_vec_init_1): Pass tf_none if ctx->quiet.\n\nFrom-SVN: r260273", "tree": {"sha": "52a2c3724196b8ac2721d3c7398cfbc3e3606742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52a2c3724196b8ac2721d3c7398cfbc3e3606742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "912a96cc94d63e23792eafd58d986eacbb4b510f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc5ca6c86f08b0dc571a8400d89572ce4bf911c7", "patch": "@@ -1,5 +1,7 @@\n 2018-05-15  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (cxx_eval_vec_init_1): Pass tf_none if ctx->quiet.\n+\n \tPR c++/64372 - CWG 1560, gratuitous lvalue-rvalue conversion in ?:\n \t* call.c (build_conditional_expr_1): Don't force_rvalue when one arm\n \tis a throw-expression."}, {"sha": "8c6ec555ca9aecda603fd25fd581ca645c843894", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5ca6c86f08b0dc571a8400d89572ce4bf911c7/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=dc5ca6c86f08b0dc571a8400d89572ce4bf911c7", "patch": "@@ -2936,6 +2936,7 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n   bool pre_init = false;\n   unsigned HOST_WIDE_INT i;\n+  tsubst_flags_t complain = ctx->quiet ? tf_none : tf_warning_or_error;\n \n   /* For the default constructor, build up a call to the default\n      constructor of the element type.  We only need to handle class types\n@@ -2946,15 +2947,15 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n     /* We only do this at the lowest level.  */;\n   else if (value_init)\n     {\n-      init = build_value_init (elttype, tf_warning_or_error);\n+      init = build_value_init (elttype, complain);\n       pre_init = true;\n     }\n   else if (!init)\n     {\n       vec<tree, va_gc> *argvec = make_tree_vector ();\n       init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t\t&argvec, elttype, LOOKUP_NORMAL,\n-\t\t\t\t\ttf_warning_or_error);\n+\t\t\t\t\tcomplain);\n       release_tree_vector (argvec);\n       init = build_aggr_init_expr (TREE_TYPE (init), init);\n       pre_init = true;\n@@ -2981,8 +2982,7 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t      reuse = i == 0;\n \t    }\n \t  else\n-\t    eltinit = cp_build_array_ref (input_location, init, idx,\n-\t\t\t\t\t  tf_warning_or_error);\n+\t    eltinit = cp_build_array_ref (input_location, init, idx, complain);\n \t  eltinit = cxx_eval_vec_init_1 (&new_ctx, elttype, eltinit, value_init,\n \t\t\t\t\t lval,\n \t\t\t\t\t non_constant_p, overflow_p);\n@@ -3000,11 +3000,10 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t  /* Copying an element.  */\n \t  gcc_assert (same_type_ignoring_top_level_qualifiers_p\n \t\t      (atype, TREE_TYPE (init)));\n-\t  eltinit = cp_build_array_ref (input_location, init, idx,\n-\t\t\t\t\ttf_warning_or_error);\n+\t  eltinit = cp_build_array_ref (input_location, init, idx, complain);\n \t  if (!lvalue_p (init))\n \t    eltinit = move (eltinit);\n-\t  eltinit = force_rvalue (eltinit, tf_warning_or_error);\n+\t  eltinit = force_rvalue (eltinit, complain);\n \t  eltinit = cxx_eval_constant_expression (&new_ctx, eltinit, lval,\n \t\t\t\t\t\t  non_constant_p, overflow_p);\n \t}"}]}