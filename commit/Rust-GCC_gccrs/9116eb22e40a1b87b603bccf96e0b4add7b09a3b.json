{"sha": "9116eb22e40a1b87b603bccf96e0b4add7b09a3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExNmViMjJlNDBhMWI4N2I2MDNiY2NmOTZlMGI0YWRkN2IwOWEzYg==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-08-27T15:22:10Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-08-27T15:22:10Z"}, "message": "arm_neon.h: Replace all inline asm implementations of vget_low_* with implementations in...\n\n2013-08-27  Tejas Belagod  <tejas.belagod@arm.com>\n\n        * config/aarch64/arm_neon.h: Replace all inline asm implementations\n        of vget_low_* with implementations in terms of other intrinsics.\n\nFrom-SVN: r202023", "tree": {"sha": "b66c7d5e381e6cd8d5c1d51fffa92bf50adf92fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b66c7d5e381e6cd8d5c1d51fffa92bf50adf92fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9116eb22e40a1b87b603bccf96e0b4add7b09a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9116eb22e40a1b87b603bccf96e0b4add7b09a3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9116eb22e40a1b87b603bccf96e0b4add7b09a3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9116eb22e40a1b87b603bccf96e0b4add7b09a3b/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da02a644dd3ac18247dde8d865dc2cd8cf7ebc3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da02a644dd3ac18247dde8d865dc2cd8cf7ebc3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da02a644dd3ac18247dde8d865dc2cd8cf7ebc3c"}], "stats": {"total": 216, "additions": 84, "deletions": 132}, "files": [{"sha": "902293b25f8acbc92e4a36ae74d95da01bb0e252", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9116eb22e40a1b87b603bccf96e0b4add7b09a3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9116eb22e40a1b87b603bccf96e0b4add7b09a3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9116eb22e40a1b87b603bccf96e0b4add7b09a3b", "patch": "@@ -1,3 +1,8 @@\n+2013-08-27  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/arm_neon.h: Replace all inline asm implementations\n+\tof vget_low_* with implementations in terms of other intrinsics.\n+\n 2013-08-27  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR middle-end/57219"}, {"sha": "74a5de9df90ea1135fd96af70e6c632cbceab350", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 79, "deletions": 132, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9116eb22e40a1b87b603bccf96e0b4add7b09a3b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9116eb22e40a1b87b603bccf96e0b4add7b09a3b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9116eb22e40a1b87b603bccf96e0b4add7b09a3b", "patch": "@@ -3865,6 +3865,85 @@ vreinterpretq_u32_p16 (poly16x8_t __a)\n   return (uint32x4_t) __builtin_aarch64_reinterpretv4siv8hi ((int16x8_t) __a);\n }\n \n+#define __GET_LOW(__TYPE) \\\n+  uint64x2_t tmp = vreinterpretq_u64_##__TYPE (__a);  \\\n+  uint64_t lo = vgetq_lane_u64 (tmp, 0);  \\\n+  return vreinterpret_##__TYPE##_u64 (lo);\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vget_low_f32 (float32x4_t __a)\n+{\n+  __GET_LOW (f32);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vget_low_f64 (float64x2_t __a)\n+{\n+  return vgetq_lane_f64 (__a, 0);\n+}\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vget_low_p8 (poly8x16_t __a)\n+{\n+  __GET_LOW (p8);\n+}\n+\n+__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n+vget_low_p16 (poly16x8_t __a)\n+{\n+  __GET_LOW (p16);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vget_low_s8 (int8x16_t __a)\n+{\n+  __GET_LOW (s8);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vget_low_s16 (int16x8_t __a)\n+{\n+  __GET_LOW (s16);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vget_low_s32 (int32x4_t __a)\n+{\n+  __GET_LOW (s32);\n+}\n+\n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vget_low_s64 (int64x2_t __a)\n+{\n+  return vgetq_lane_s64 (__a, 0);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vget_low_u8 (uint8x16_t __a)\n+{\n+  __GET_LOW (u8);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vget_low_u16 (uint16x8_t __a)\n+{\n+  __GET_LOW (u16);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vget_low_u32 (uint32x4_t __a)\n+{\n+  __GET_LOW (u32);\n+}\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vget_low_u64 (uint64x2_t __a)\n+{\n+  return vgetq_lane_u64 (__a, 0);\n+}\n+\n+#undef __GET_LOW\n+\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vcombine_s8 (int8x8_t __a, int8x8_t __b)\n {\n@@ -6784,138 +6863,6 @@ vget_high_u64 (uint64x2_t a)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vget_low_f32 (float32x4_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n-vget_low_f64 (float64x2_t a)\n-{\n-  float64x1_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vget_low_p8 (poly8x16_t a)\n-{\n-  poly8x8_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n-vget_low_p16 (poly16x8_t a)\n-{\n-  poly16x4_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vget_low_s8 (int8x16_t a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vget_low_s16 (int16x8_t a)\n-{\n-  int16x4_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vget_low_s32 (int32x4_t a)\n-{\n-  int32x2_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vget_low_s64 (int64x2_t a)\n-{\n-  int64x1_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vget_low_u8 (uint8x16_t a)\n-{\n-  uint8x8_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-vget_low_u16 (uint16x8_t a)\n-{\n-  uint16x4_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vget_low_u32 (uint32x4_t a)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vget_low_u64 (uint64x2_t a)\n-{\n-  uint64x1_t result;\n-  __asm__ (\"ins %0.d[0], %1.d[0]\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vhsub_s8 (int8x8_t a, int8x8_t b)\n {"}]}