{"sha": "c6ff44935c8293728f660033a1d648caf9cd3770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmZjQ0OTM1YzgyOTM3MjhmNjYwMDMzYTFkNjQ4Y2FmOWNkMzc3MA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2008-11-03T21:47:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-03T21:47:44Z"}, "message": "omp-low.c (expand_omp_for_generic): If iter_type has different precision than type and type is a pointer type...\n\n\t* omp-low.c (expand_omp_for_generic): If iter_type has different\n\tprecision than type and type is a pointer type, cast n1 and n2\n\tfirst to an integer type with the same precision as pointers\n\tand only afterwards to iter_type.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r141563", "tree": {"sha": "1d03e93415ed3811152d3b5d8fc4317b7d1913cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d03e93415ed3811152d3b5d8fc4317b7d1913cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6ff44935c8293728f660033a1d648caf9cd3770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ff44935c8293728f660033a1d648caf9cd3770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ff44935c8293728f660033a1d648caf9cd3770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ff44935c8293728f660033a1d648caf9cd3770/comments", "author": null, "committer": null, "parents": [{"sha": "f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "0d698b9948c3707e9e4335d6fbf2c79dcc7dc86e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ff44935c8293728f660033a1d648caf9cd3770/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ff44935c8293728f660033a1d648caf9cd3770/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6ff44935c8293728f660033a1d648caf9cd3770", "patch": "@@ -1,3 +1,11 @@\n+2008-11-03  Steve Ellcey <sje@cup.hp.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-low.c (expand_omp_for_generic): If iter_type has different\n+\tprecision than type and type is a pointer type, cast n1 and n2\n+\tfirst to an integer type with the same precision as pointers\n+\tand only afterwards to iter_type.\n+\n 2008-11-03  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/arm/arm.md (UNSPEC_PIC_BASE): Update documentation."}, {"sha": "8781418bd82007df4efb6cb9525c1fb2eaab047f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ff44935c8293728f660033a1d648caf9cd3770/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ff44935c8293728f660033a1d648caf9cd3770/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c6ff44935c8293728f660033a1d648caf9cd3770", "patch": "@@ -3681,8 +3681,20 @@ expand_omp_for_generic (struct omp_region *region,\n       t4 = build_fold_addr_expr (iend0);\n       t3 = build_fold_addr_expr (istart0);\n       t2 = fold_convert (fd->iter_type, fd->loop.step);\n-      t1 = fold_convert (fd->iter_type, fd->loop.n2);\n-      t0 = fold_convert (fd->iter_type, fd->loop.n1);\n+      if (POINTER_TYPE_P (type)\n+\t  && TYPE_PRECISION (type) != TYPE_PRECISION (fd->iter_type))\n+\t{\n+\t  /* Avoid casting pointers to integer of a different size.  */\n+\t  tree itype\n+\t    = lang_hooks.types.type_for_size (TYPE_PRECISION (type), 0);\n+\t  t1 = fold_convert (fd->iter_type, fold_convert (itype, fd->loop.n2));\n+\t  t0 = fold_convert (fd->iter_type, fold_convert (itype, fd->loop.n1));\n+\t}\n+      else\n+\t{\n+\t  t1 = fold_convert (fd->iter_type, fd->loop.n2);\n+\t  t0 = fold_convert (fd->iter_type, fd->loop.n1);\n+\t}\n       if (bias)\n \t{\n \t  t1 = fold_build2 (PLUS_EXPR, fd->iter_type, t1, bias);"}]}