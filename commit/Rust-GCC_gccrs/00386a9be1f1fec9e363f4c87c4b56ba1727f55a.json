{"sha": "00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzODZhOWJlMWYxZmVjOWUzNjNmNGM4N2M0YjU2YmExNzI3ZjU1YQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-08-05T02:09:27Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-05T02:09:27Z"}, "message": "slice_array.h (_DEFINE_VALARRAY_OPERATOR): Instantiate with new function objects.\n\n\tPR/7491\n\t* include/bits/slice_array.h(_DEFINE_VALARRAY_OPERATOR):\n\tInstantiate with new function objects.\n\t* include/bits/mask_array.h (_DEFINE_VALARRAY_OPERATOR): Likewise.\n\tReformat.  Uglify.\n\t* include/bits/gslice_array.h: Likewise.\n\t* include/bits/indirect_array.h: Likewise.\n\nFrom-SVN: r56036", "tree": {"sha": "5196426c0fcb60c392aac0e498cc5f5c011b60ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5196426c0fcb60c392aac0e498cc5f5c011b60ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/comments", "author": null, "committer": null, "parents": [{"sha": "6d9f628e059c1999f0469084e1e4e4774495f64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9f628e059c1999f0469084e1e4e4774495f64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9f628e059c1999f0469084e1e4e4774495f64f"}], "stats": {"total": 573, "additions": 294, "deletions": 279}, "files": [{"sha": "badeac4eea91f7177e03d4ad9c80a4ab8901f4f8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "patch": "@@ -1,3 +1,13 @@\n+2002-08-05  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\tPR/7491\n+\t* include/bits/slice_array.h(_DEFINE_VALARRAY_OPERATOR):\n+\tInstantiate with new function objects. \n+\t* include/bits/mask_array.h (_DEFINE_VALARRAY_OPERATOR): Likewise.\n+\tReformat.  Uglify.\n+\t* include/bits/gslice_array.h: Likewise.\n+\t* include/bits/indirect_array.h: Likewise.\n+\n 2002-08-03  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* testsuite/26_numerics/valarray_name_lookup.cc: Rename from"}, {"sha": "1116e9c7e97df3563bcb14200122b9600ef1a4ea", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 99, "deletions": 97, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "patch": "@@ -41,129 +41,131 @@\n \n namespace std {\n \n-    template<typename _Tp> class gslice_array\n+  template<typename _Tp>\n+    class gslice_array\n     {\n     public:\n-        typedef _Tp value_type;\n-\n-        void operator=  (const valarray<_Tp>&) const;\n-        void operator*= (const valarray<_Tp>&) const;\n-        void operator/= (const valarray<_Tp>&) const;\n-        void operator%= (const valarray<_Tp>&) const;\n-        void operator+= (const valarray<_Tp>&) const;\n-        void operator-= (const valarray<_Tp>&) const;\n-        void operator^= (const valarray<_Tp>&) const;\n-        void operator&= (const valarray<_Tp>&) const;\n-        void operator|= (const valarray<_Tp>&) const;\n-        void operator<<=(const valarray<_Tp>&) const;\n-        void operator>>=(const valarray<_Tp>&) const;\n-        void operator=(const _Tp&) const;\n-\n-        template<class _Dom>\n-        void operator= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator*= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator/= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator%= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator+= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator-= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator^= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator&= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator|= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator<<= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator>>= (const _Expr<_Dom,_Tp>&) const;\n+      typedef _Tp value_type;\n+\n+      void operator=(const valarray<_Tp>&) const;\n+      void operator*=(const valarray<_Tp>&) const;\n+      void operator/=(const valarray<_Tp>&) const;\n+      void operator%=(const valarray<_Tp>&) const;\n+      void operator+=(const valarray<_Tp>&) const;\n+      void operator-=(const valarray<_Tp>&) const;\n+      void operator^=(const valarray<_Tp>&) const;\n+      void operator&=(const valarray<_Tp>&) const;\n+      void operator|=(const valarray<_Tp>&) const;\n+      void operator<<=(const valarray<_Tp>&) const;\n+      void operator>>=(const valarray<_Tp>&) const;\n+      void operator=(const _Tp&) const;\n+\n+      template<class _Dom>\n+        void operator=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator*=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator/=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator%=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator+=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator-=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator^=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator&=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator|=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator<<=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator>>=(const _Expr<_Dom,_Tp>&) const;\n         \n     private:\n-        _Array<_Tp>    _M_array;\n-        const valarray<size_t>& _M_index;\n+      _Array<_Tp>    _M_array;\n+      const valarray<size_t>& _M_index;\n         \n-        friend class valarray<_Tp>;\n-        \n-        gslice_array (_Array<_Tp>, const valarray<size_t>&);\n+      friend class valarray<_Tp>;\n+      \n+      gslice_array(_Array<_Tp>, const valarray<size_t>&);\n \n-        // this constructor needs to be implemented.\n-        gslice_array (const gslice_array&);\n+      // this constructor needs to be implemented.\n+      gslice_array(const gslice_array&);\n \n-        // not implemented\n-        gslice_array();\n-        gslice_array& operator= (const gslice_array&);\n+      // not implemented\n+      gslice_array();\n+      gslice_array& operator= (const gslice_array&);\n     };\n \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline\n-    gslice_array<_Tp>::gslice_array (_Array<_Tp> __a,\n-                                     const valarray<size_t>& __i)\n-            : _M_array (__a), _M_index (__i) {}\n+    gslice_array<_Tp>::gslice_array(_Array<_Tp> __a,\n+\t\t\t\t    const valarray<size_t>& __i)\n+      : _M_array(__a), _M_index(__i) {}\n \n \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline\n-    gslice_array<_Tp>::gslice_array (const gslice_array<_Tp>& __a)\n-            : _M_array (__a._M_array), _M_index (__a._M_index) {}\n+    gslice_array<_Tp>::gslice_array(const gslice_array<_Tp>& __a)\n+      : _M_array(__a._M_array), _M_index(__a._M_index) {}\n \n     \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline void\n-    gslice_array<_Tp>::operator= (const _Tp& __t) const\n+    gslice_array<_Tp>::operator=(const _Tp& __t) const\n     { \n-        __valarray_fill (_M_array, _Array<size_t>(_M_index),\n-                         _M_index.size(), __t); \n+      __valarray_fill(_M_array, _Array<size_t>(_M_index),\n+\t\t      _M_index.size(), __t); \n     }\n \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline void\n-    gslice_array<_Tp>::operator= (const valarray<_Tp>& __v) const\n+    gslice_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n     {\n-        __valarray_copy (_Array<_Tp> (__v), __v.size (),\n-                         _M_array, _Array<size_t>(_M_index));\n+      __valarray_copy(_Array<_Tp>(__v), __v.size(),\n+\t\t      _M_array, _Array<size_t>(_M_index));\n     }\n \n-    template<typename _Tp>\n-    template<class E>\n-    inline void\n-    gslice_array<_Tp>::operator= (const _Expr<E, _Tp>& __e) const\n-    {\n-        __valarray_copy (__e, _M_index.size(), _M_array,\n-                         _Array<size_t>(_M_index));\n-    }\n+  template<typename _Tp>\n+    template<class _Dom>\n+      inline void\n+      gslice_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const\n+      {\n+\t__valarray_copy (__e, _M_index.size(), _M_array,\n+\t\t\t _Array<size_t>(_M_index));\n+      }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n-#define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n-template<typename _Tp>\t\t\t\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-gslice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-    _Array_augmented_##name (_M_array, _Array<size_t>(_M_index),\t\\\n-                              _Array<_Tp> (__v), __v.size ());\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n+#define _DEFINE_VALARRAY_OPERATOR(_Op, _Name)\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    inline void\t\t\t\t\t\t\t\t\\\n+    gslice_array<_Tp>::operator _Op##=(const valarray<_Tp>& __v) const\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_M_array, _Array<size_t>(_M_index),\t\\\n+\t\t\t      _Array<_Tp>(__v), __v.size());\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-template<typename _Tp> template<class E>        \t\t\t\\\n-inline void \t\t\t\t\t\t\t\t\\\n-gslice_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-    _Array_augmented_##name (_M_array, _Array<size_t>(_M_index), __e,\t\\\n-                              _M_index.size());\t\t\t\t\\\n-}\n-\n-_DEFINE_VALARRAY_OPERATOR(*, multiplies)\n-_DEFINE_VALARRAY_OPERATOR(/, divides)    \n-_DEFINE_VALARRAY_OPERATOR(%, modulus)\n-_DEFINE_VALARRAY_OPERATOR(+, plus)    \n-_DEFINE_VALARRAY_OPERATOR(-, minus)\n-_DEFINE_VALARRAY_OPERATOR(^, xor)\n-_DEFINE_VALARRAY_OPERATOR(&, and)\n-_DEFINE_VALARRAY_OPERATOR(|, or)\n-_DEFINE_VALARRAY_OPERATOR(<<, shift_left)\n-_DEFINE_VALARRAY_OPERATOR(>>, shift_right)\n+  template<typename _Tp>                                                \\\n+    template<class _Dom>        \t\t\t                \\\n+      inline void \t\t\t\t\t\t\t\\\n+      gslice_array<_Tp>::operator _Op##= (const _Expr<_Dom, _Tp>& __e) const\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t_Array_augmented_##_Name(_M_array, _Array<size_t>(_M_index), __e,\\\n+\t\t\t\t _M_index.size());\t\t\t\\\n+      }\n+\n+_DEFINE_VALARRAY_OPERATOR(*, __multiplies)\n+_DEFINE_VALARRAY_OPERATOR(/, __divides)    \n+_DEFINE_VALARRAY_OPERATOR(%, __modulus)\n+_DEFINE_VALARRAY_OPERATOR(+, __plus)    \n+_DEFINE_VALARRAY_OPERATOR(-, __minus)\n+_DEFINE_VALARRAY_OPERATOR(^, __bitwise_xor)\n+_DEFINE_VALARRAY_OPERATOR(&, __bitwise_and)\n+_DEFINE_VALARRAY_OPERATOR(|, __bitwise_or)\n+_DEFINE_VALARRAY_OPERATOR(<<, __shift_left)\n+_DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n "}, {"sha": "9fc973e2bbca086c0a5dc257626cb962ed076693", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 69, "deletions": 67, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "patch": "@@ -1,6 +1,7 @@\n // The template and inlines for the -*- C++ -*- indirect_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+//  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,70 +49,70 @@ namespace std\n        typedef _Tp value_type;\n \n        // XXX: This is a proposed resolution for DR-253.\n-       indirect_array& operator= (const indirect_array&);\n-\n-       void operator=  (const valarray<_Tp>&) const;\n-       void operator*= (const valarray<_Tp>&) const;\n-       void operator/= (const valarray<_Tp>&) const;\n-       void operator%= (const valarray<_Tp>&) const; \n-       void operator+= (const valarray<_Tp>&) const;\n-       void operator-= (const valarray<_Tp>&) const;  \n-       void operator^= (const valarray<_Tp>&) const;\n-       void operator&= (const valarray<_Tp>&) const;\n-       void operator|= (const valarray<_Tp>&) const;\n-       void operator<<= (const valarray<_Tp>&) const;\n-       void operator>>= (const valarray<_Tp>&) const; \n+       indirect_array& operator=(const indirect_array&);\n+       \n+       void operator=(const valarray<_Tp>&) const;\n+       void operator*=(const valarray<_Tp>&) const;\n+       void operator/=(const valarray<_Tp>&) const;\n+       void operator%=(const valarray<_Tp>&) const; \n+       void operator+=(const valarray<_Tp>&) const;\n+       void operator-=(const valarray<_Tp>&) const;  \n+       void operator^=(const valarray<_Tp>&) const;\n+       void operator&=(const valarray<_Tp>&) const;\n+       void operator|=(const valarray<_Tp>&) const;\n+       void operator<<=(const valarray<_Tp>&) const;\n+       void operator>>=(const valarray<_Tp>&) const; \n        void operator= (const _Tp&) const;\n        //    ~indirect_array();\n-\n+       \n        template<class _Dom>\n-       void operator=  (const _Expr<_Dom, _Tp>&) const;\n+         void operator=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator*= (const _Expr<_Dom, _Tp>&) const;\n+         void operator*=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator/= (const _Expr<_Dom, _Tp>&) const;\n+         void operator/=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator%= (const _Expr<_Dom, _Tp>&) const;\n+         void operator%=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator+= (const _Expr<_Dom, _Tp>&) const;\n+         void operator+=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator-= (const _Expr<_Dom, _Tp>&) const;\n+         void operator-=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator^= (const _Expr<_Dom, _Tp>&) const;\n+         void operator^=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator&= (const _Expr<_Dom, _Tp>&) const;\n+         void operator&=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator|= (const _Expr<_Dom, _Tp>&) const;\n+         void operator|=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator<<= (const _Expr<_Dom, _Tp>&) const;\n+         void operator<<=(const _Expr<_Dom, _Tp>&) const;\n        template<class _Dom>\n-       void operator>>= (const _Expr<_Dom, _Tp>&) const; \n+         void operator>>=(const _Expr<_Dom, _Tp>&) const; \n \n      private:\n-       indirect_array (const indirect_array&);\n-       indirect_array (_Array<_Tp>, size_t, _Array<size_t>);\n+       indirect_array(const indirect_array&);\n+       indirect_array(_Array<_Tp>, size_t, _Array<size_t>);\n \n        friend class valarray<_Tp>;\n        friend class gslice_array<_Tp>;\n-\n+       \n        const size_t \t _M_sz;\n        const _Array<size_t> _M_index;\n        const _Array<_Tp> \t _M_array;\n-\n+       \n        // not implemented\n-       indirect_array ();\n+       indirect_array();\n      };\n \n   template<typename _Tp>\n-  inline indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)\n-          : _M_sz (__a._M_sz), _M_index (__a._M_index),\n-            _M_array (__a._M_array) {}\n+    inline \n+    indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)\n+      : _M_sz(__a._M_sz), _M_index(__a._M_index), _M_array(__a._M_array) {}\n \n   template<typename _Tp>\n      inline\n-     indirect_array<_Tp>::indirect_array (_Array<_Tp> __a, size_t __s, \n-                                          _Array<size_t> __i)\n-             : _M_sz (__s), _M_index (__i), _M_array (__a) {}\n+     indirect_array<_Tp>::indirect_array(_Array<_Tp> __a, size_t __s, \n+\t\t\t\t\t _Array<size_t> __i)\n+       : _M_sz(__s), _M_index(__i), _M_array(__a) {}\n \n   template<typename _Tp>\n      inline indirect_array<_Tp>&\n@@ -124,46 +125,47 @@ namespace std\n \n   template<typename _Tp>\n      inline void\n-     indirect_array<_Tp>::operator= (const _Tp& __t) const\n+     indirect_array<_Tp>::operator=(const _Tp& __t) const\n      { __valarray_fill(_M_array, _M_index, _M_sz, __t); }\n \n   template<typename _Tp>\n      inline void\n-     indirect_array<_Tp>::operator= (const valarray<_Tp>& __v) const\n-     { __valarray_copy (_Array<_Tp> (__v), _M_sz, _M_array, _M_index); }\n+     indirect_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n+     { __valarray_copy(_Array<_Tp>(__v), _M_sz, _M_array, _M_index); }\n \n   template<typename _Tp>\n      template<class _Dom>\n-     inline void\n-     indirect_array<_Tp>::operator= (const _Expr<_Dom,_Tp>& __e) const\n-     { __valarray_copy (__e, _M_sz, _M_array, _M_index); }\n+       inline void\n+       indirect_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const\n+       { __valarray_copy(__e, _M_sz, _M_array, _M_index); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n-#define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n-template<typename _Tp>\t\t\t\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-indirect_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##name (_M_array, _M_index, _Array<_Tp> (__v), _M_sz); \\\n-}\t\t\t\t\t\t\t\t\t\\\n+#define _DEFINE_VALARRAY_OPERATOR(_Op, _Name)\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    inline void\t\t\t\t\t\t\t\t\\\n+    indirect_array<_Tp>::operator _Op##=(const valarray<_Tp>& __v) const\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_M_array, _M_index, _Array<_Tp>(__v), _M_sz); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-template<typename _Tp> template<class _Dom>\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-indirect_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##name (_M_array, _M_index, __e, _M_sz);\t\t\\\n-}\n-\n-_DEFINE_VALARRAY_OPERATOR(*, multiplies)\n-_DEFINE_VALARRAY_OPERATOR(/, divides)\n-_DEFINE_VALARRAY_OPERATOR(%, modulus)\n-_DEFINE_VALARRAY_OPERATOR(+, plus)\n-_DEFINE_VALARRAY_OPERATOR(-, minus)\n-_DEFINE_VALARRAY_OPERATOR(^, xor)\n-_DEFINE_VALARRAY_OPERATOR(&, and)\n-_DEFINE_VALARRAY_OPERATOR(|, or)\n-_DEFINE_VALARRAY_OPERATOR(<<, shift_left)\n-_DEFINE_VALARRAY_OPERATOR(>>, shift_right)\n+  template<typename _Tp>                                                \\\n+    template<class _Dom>\t\t\t\t                \\\n+      inline void\t\t\t\t\t\t\t\\\n+      indirect_array<_Tp>::operator _Op##=(const _Expr<_Dom,_Tp>& __e) const\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t_Array_augmented_##_Name(_M_array, _M_index, __e, _M_sz);\t\\\n+      }\n+\n+_DEFINE_VALARRAY_OPERATOR(*, __multiplies)\n+_DEFINE_VALARRAY_OPERATOR(/, __divides)\n+_DEFINE_VALARRAY_OPERATOR(%, __modulus)\n+_DEFINE_VALARRAY_OPERATOR(+, __plus)\n+_DEFINE_VALARRAY_OPERATOR(-, __minus)\n+_DEFINE_VALARRAY_OPERATOR(^, __bitwise_xor)\n+_DEFINE_VALARRAY_OPERATOR(&, __bitwise_and)\n+_DEFINE_VALARRAY_OPERATOR(|, __bitwise_or)\n+_DEFINE_VALARRAY_OPERATOR(<<, __shift_left)\n+_DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n "}, {"sha": "df23a46ef0bdb6534d96b07f8d25c1ffa0d3f677", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "patch": "@@ -1,6 +1,7 @@\n // The template and inlines for the -*- C++ -*- mask_array class.\n \n-// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+//  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,120 +42,119 @@\n \n namespace std {\n \n-    template <class _Tp> class mask_array\n+  template <class _Tp> \n+    class mask_array\n     { \n     public:\n-        typedef _Tp value_type;\n+      typedef _Tp value_type;\n     \n-        void operator=  (const valarray<_Tp>&) const;\n-        void operator*= (const valarray<_Tp>&) const;\n-        void operator/= (const valarray<_Tp>&) const;\n-        void operator%= (const valarray<_Tp>&) const;\n-        void operator+= (const valarray<_Tp>&) const; \n-        void operator-= (const valarray<_Tp>&) const;\n-        void operator^= (const valarray<_Tp>&) const;  \n-        void operator&= (const valarray<_Tp>&) const;\n-        void operator|= (const valarray<_Tp>&) const;\n-        void operator<<=(const valarray<_Tp>&) const;  \n-        void operator>>=(const valarray<_Tp>&) const; \n-        void operator= (const _Tp&) const;\n+      void operator=(const valarray<_Tp>&) const;\n+      void operator*=(const valarray<_Tp>&) const;\n+      void operator/=(const valarray<_Tp>&) const;\n+      void operator%=(const valarray<_Tp>&) const;\n+      void operator+=(const valarray<_Tp>&) const; \n+      void operator-=(const valarray<_Tp>&) const;\n+      void operator^=(const valarray<_Tp>&) const;  \n+      void operator&=(const valarray<_Tp>&) const;\n+      void operator|=(const valarray<_Tp>&) const;\n+      void operator<<=(const valarray<_Tp>&) const;  \n+      void operator>>=(const valarray<_Tp>&) const; \n+      void operator=(const _Tp&) const;\n     \n         //        ~mask_array ();\n         \n-        template<class _Dom>\n-        void operator=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator*= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator/= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator%= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator+= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator-= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator^= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator&= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator|= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n+      template<class _Dom>\n+        void operator=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator*=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator/=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator%=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator+=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator-=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator^=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator&=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+        void operator|=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n         void operator<<=(const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n+      template<class _Dom>\n         void operator>>=(const _Expr<_Dom,_Tp>&) const; \n \n     private:\n-        mask_array (_Array<_Tp>, size_t, _Array<bool>);\n-        friend class valarray<_Tp>;\n+      mask_array(_Array<_Tp>, size_t, _Array<bool>);\n+      friend class valarray<_Tp>;\n         \n-        const size_t       _M_sz;\n-        const _Array<bool> _M_mask;\n-        const _Array<_Tp>   _M_array;\n-        \n-        mask_array (const mask_array&);\n-        \n-        // not implemented\n-        mask_array ();\n-        mask_array& operator= (const mask_array&);\n+      const size_t       _M_sz;\n+      const _Array<bool> _M_mask;\n+      const _Array<_Tp>   _M_array;\n+      \n+      mask_array (const mask_array&);\n+      \n+      // not implemented\n+      mask_array();\n+      mask_array& operator=(const mask_array&);\n     };\n \n \n-    template<typename _Tp>\n-    inline mask_array<_Tp>::mask_array (const mask_array<_Tp>& a)\n-            : _M_sz (a._M_sz), _M_mask (a._M_mask), _M_array (a._M_array) {}\n+  template<typename _Tp>\n+    inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& a)\n+      : _M_sz(a._M_sz), _M_mask(a._M_mask), _M_array(a._M_array) {}\n \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline \n-    mask_array<_Tp>::mask_array (_Array<_Tp> __a, size_t __s, _Array<bool> __m)\n-            : _M_sz (__s), _M_mask (__m), _M_array (__a) {}\n+    mask_array<_Tp>::mask_array(_Array<_Tp> __a, size_t __s, _Array<bool> __m)\n+      : _M_sz(__s), _M_mask(__m), _M_array(__a) {}\n     \n-    //    template<typename _Tp>\n-    //    inline mask_array<_Tp>::~mask_array () {}\n-    \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline void\n-    mask_array<_Tp>::operator= (const _Tp& __t) const\n-    { __valarray_fill (_M_array, _M_sz, _M_mask, __t); }\n+    mask_array<_Tp>::operator=(const _Tp& __t) const\n+    { __valarray_fill(_M_array, _M_sz, _M_mask, __t); }\n     \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline void\n-    mask_array<_Tp>::operator= (const valarray<_Tp>& __v) const\n-    { __valarray_copy (_Array<_Tp> (__v), __v.size (), _M_array, _M_mask); }\n+    mask_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n+    { __valarray_copy(_Array<_Tp>(__v), __v.size(), _M_array, _M_mask); }\n \n-    template<typename _Tp>\n-    template<class E>\n-    inline void\n-    mask_array<_Tp>::operator= (const _Expr<E, _Tp>& __e) const\n-    { __valarray_copy (__e, __e.size (), _M_array, _M_mask); }\n+  template<typename _Tp>\n+    template<class _Ex>\n+      inline void\n+      mask_array<_Tp>::operator=(const _Expr<_Ex, _Tp>& __e) const\n+      { __valarray_copy(__e, __e.size(), _M_array, _M_mask); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n-#define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n-template<typename _Tp>\t\t\t\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##name (_M_array, _M_mask, \t\t\t\t\\\n-                           _Array<_Tp> (__v), __v.size ());\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n+#define _DEFINE_VALARRAY_OPERATOR(_Op, _Name)\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    inline void\t\t\t\t\t\t\t\t\\\n+    mask_array<_Tp>::operator _Op##=(const valarray<_Tp>& __v) const\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_M_array, _M_mask,\t\t\t\\\n+\t\t\t       _Array<_Tp>(__v), __v.size());\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-template<typename _Tp> template<class E>\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##name (_M_array, _M_mask, __e, __e.size ());\t\\\n-}\n-\n-_DEFINE_VALARRAY_OPERATOR(*, multiplies)\n-_DEFINE_VALARRAY_OPERATOR(/, divides)\n-_DEFINE_VALARRAY_OPERATOR(%, modulus)\n-_DEFINE_VALARRAY_OPERATOR(+, plus)\n-_DEFINE_VALARRAY_OPERATOR(-, minus)\n-_DEFINE_VALARRAY_OPERATOR(^, xor)\n-_DEFINE_VALARRAY_OPERATOR(&, and)\n-_DEFINE_VALARRAY_OPERATOR(|, or)\n-_DEFINE_VALARRAY_OPERATOR(<<, shift_left)\n-_DEFINE_VALARRAY_OPERATOR(>>, shift_right)\n+  template<typename _Tp>                                                \\\n+    template<class _Dom>\t\t\t                        \\\n+      inline void\t\t\t\t\t\t\t\\\n+      mask_array<_Tp>::operator _Op##=(const _Expr<_Dom, _Tp>& __e) const\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t_Array_augmented_##_Name(_M_array, _M_mask, __e, __e.size());   \\\n+      }\n+\n+_DEFINE_VALARRAY_OPERATOR(*, __multiplies)\n+_DEFINE_VALARRAY_OPERATOR(/, __divides)\n+_DEFINE_VALARRAY_OPERATOR(%, __modulus)\n+_DEFINE_VALARRAY_OPERATOR(+, __plus)\n+_DEFINE_VALARRAY_OPERATOR(-, __minus)\n+_DEFINE_VALARRAY_OPERATOR(^, __bitwise_xor)\n+_DEFINE_VALARRAY_OPERATOR(&, __bitwise_and)\n+_DEFINE_VALARRAY_OPERATOR(|, __bitwise_or)\n+_DEFINE_VALARRAY_OPERATOR(<<, __shift_left)\n+_DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR    \n     "}, {"sha": "1ab351b590c1505551fe8d81592b46c6a03d274e", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00386a9be1f1fec9e363f4c87c4b56ba1727f55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=00386a9be1f1fec9e363f4c87c4b56ba1727f55a", "patch": "@@ -169,41 +169,42 @@ namespace std\n   template<typename _Tp>\n     inline void\n     slice_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n-    { __valarray_copy (_Array<_Tp> (__v), _M_array, _M_sz, _M_stride); }\n+    { __valarray_copy(_Array<_Tp>(__v), _M_array, _M_sz, _M_stride); }\n     \n   template<typename _Tp>\n   template<class _Dom>\n     inline void\n     slice_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const\n-    { __valarray_copy (__e, _M_sz, _M_array, _M_stride); }\n+    { __valarray_copy(__e, _M_sz, _M_array, _M_stride); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(_Op,_Name)\t\t\t\t\\\n-template<typename _Tp>\t\t\t\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_Tp>::operator _Op##= (const valarray<_Tp>& __v) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##_Name (_M_array, _M_sz, _M_stride, _Array<_Tp> (__v));\\\n-}\t\t\t\t\t\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    inline void\t\t\t\t\t\t\t\t\\\n+    slice_array<_Tp>::operator _Op##=(const valarray<_Tp>& __v) const\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_M_array, _M_sz, _M_stride, _Array<_Tp>(__v));\\\n+    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-template<typename _Tp> template<class _Dom>\t\t\t\t\\\n-inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp>& __e) const\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-    _Array_augmented_##_Name (_M_array, _M_stride, __e, _M_sz);\t\t\\\n-}\n+  template<typename _Tp>                                                \\\n+    template<class _Dom>\t\t\t\t                \\\n+      inline void\t\t\t\t\t\t\t\\\n+      slice_array<_Tp>::operator _Op##=(const _Expr<_Dom,_Tp>& __e) const\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t  _Array_augmented_##_Name(_M_array, _M_stride, __e, _M_sz);\t\\\n+      }\n         \n \n-_DEFINE_VALARRAY_OPERATOR(*, multiplies)\n-_DEFINE_VALARRAY_OPERATOR(/, divides)\n-_DEFINE_VALARRAY_OPERATOR(%, modulus)\n-_DEFINE_VALARRAY_OPERATOR(+, plus)\n-_DEFINE_VALARRAY_OPERATOR(-, minus)\n-_DEFINE_VALARRAY_OPERATOR(^, xor)\n-_DEFINE_VALARRAY_OPERATOR(&, and)\n-_DEFINE_VALARRAY_OPERATOR(|, or)\n-_DEFINE_VALARRAY_OPERATOR(<<, shift_left)\n-_DEFINE_VALARRAY_OPERATOR(>>, shift_right)\n+_DEFINE_VALARRAY_OPERATOR(*, __multiplies)\n+_DEFINE_VALARRAY_OPERATOR(/, __divides)\n+_DEFINE_VALARRAY_OPERATOR(%, __modulus)\n+_DEFINE_VALARRAY_OPERATOR(+, __plus)\n+_DEFINE_VALARRAY_OPERATOR(-, __minus)\n+_DEFINE_VALARRAY_OPERATOR(^, __bitwise_xor)\n+_DEFINE_VALARRAY_OPERATOR(&, __bitwise_and)\n+_DEFINE_VALARRAY_OPERATOR(|, __bitwise_or)\n+_DEFINE_VALARRAY_OPERATOR(<<, __shift_left)\n+_DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n "}]}