{"sha": "ac6eaa55a5199196ea0a25763114ce05333a14d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2ZWFhNTVhNTE5OTE5NmVhMGEyNTc2MzExNGNlMDUzMzNhMTRkMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-07T19:44:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-07T21:59:09Z"}, "message": "c++: Fix paren init of aggregates in unevaluated context [PR92947]\n\nWhen I implemented C++20 parenthesized initialization of aggregates\nI introduced this bogus cp_unevaluated_operand check, thus disabling\nthis feature in unevaluated context.  Oop.\n\nRemoving the check turned up another bug: I wasn't checking the\nreturn value of digest_init.  So when constructible_expr called\nbuild_new_method_call_1 to see if we can construct one type from\nanother, it got back a bogus INIT_EXPR that looked something like\n*(struct T &) 1 = <<< error >>>.  But that isn't the error_mark_node,\nso constructible_expr thought we had been successful in creating the\nctor call, and it gave the wrong answer.  Covered by paren-init17.C.\n\n\tPR c++/92947 - Paren init of aggregates in unevaluated context.\n\t* call.c (build_new_method_call_1): Don't check\n\tcp_unevaluated_operand.  Check the return value of digest_init.\n\n\t* g++.dg/cpp2a/paren-init21.C: New test.", "tree": {"sha": "26e3cee974415a5d8695ad18be4519f3824a0522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e3cee974415a5d8695ad18be4519f3824a0522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6eaa55a5199196ea0a25763114ce05333a14d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6eaa55a5199196ea0a25763114ce05333a14d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6eaa55a5199196ea0a25763114ce05333a14d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6eaa55a5199196ea0a25763114ce05333a14d3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8496e135b111424e3c84f3f44c74f2cbe48eed90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8496e135b111424e3c84f3f44c74f2cbe48eed90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8496e135b111424e3c84f3f44c74f2cbe48eed90"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "f1fe7747f394646598ebc1d322715fa3f6facaae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac6eaa55a5199196ea0a25763114ce05333a14d3", "patch": "@@ -1,3 +1,9 @@\n+2020-02-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92947 - Paren init of aggregates in unevaluated context.\n+\t* call.c (build_new_method_call_1): Don't check\n+\tcp_unevaluated_operand.  Check the return value of digest_init.\n+\n 2020-02-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92654"}, {"sha": "51621b7dd871fb4c76a09559231f0a8501615ec8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ac6eaa55a5199196ea0a25763114ce05333a14d3", "patch": "@@ -10179,7 +10179,6 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t the two.  */\n       if (DECL_CONSTRUCTOR_P (fn)\n \t  && !(flags & LOOKUP_ONLYCONVERTING)\n-\t  && !cp_unevaluated_operand\n \t  && cxx_dialect >= cxx2a\n \t  && CP_AGGREGATE_TYPE_P (basetype)\n \t  && !user_args->is_empty ())\n@@ -10194,6 +10193,8 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t  else\n \t    {\n \t      ctor = digest_init (basetype, ctor, complain);\n+\t      if (ctor == error_mark_node)\n+\t\treturn error_mark_node;\n \t      ctor = build2 (INIT_EXPR, TREE_TYPE (instance), instance, ctor);\n \t      TREE_SIDE_EFFECTS (ctor) = true;\n \t      return ctor;"}, {"sha": "63836b9a44e93a70831da17f2352520b9799b53b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac6eaa55a5199196ea0a25763114ce05333a14d3", "patch": "@@ -1,3 +1,8 @@\n+2020-02-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92947 - Paren init of aggregates in unevaluated context.\n+\t* g++.dg/cpp2a/paren-init21.C: New test.\n+\n 2020-02-07  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* testsuite/gcc.target/powerpc/pr92923-1.c: Add -mvsx."}, {"sha": "cfd37193f6685ccc4790e561e38118f2086170ea", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init21.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6eaa55a5199196ea0a25763114ce05333a14d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init21.C?ref=ac6eaa55a5199196ea0a25763114ce05333a14d3", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/92947 - Paren init of aggregates in unevaluated context.\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  int a;\n+  int b;\n+};\n+\n+int main()\n+{\n+  static_assert(__is_constructible(A, int, int));\n+  decltype(A(1,2)) foo;\n+  bool b = noexcept(A(1,2));\n+}"}]}