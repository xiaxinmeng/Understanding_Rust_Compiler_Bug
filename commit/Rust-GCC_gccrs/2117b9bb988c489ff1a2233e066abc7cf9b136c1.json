{"sha": "2117b9bb988c489ff1a2233e066abc7cf9b136c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExN2I5YmI5ODhjNDg5ZmYxYTIyMzNlMDY2YWJjN2NmOWIxMzZjMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-25T20:59:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-25T20:59:27Z"}, "message": "decl.c (gnat_to_gnu_entity): Minor tweak.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Minor tweak.\n\t* gcc-interface/trans.c (finalize_nrv_unc_r): Use CONSTRUCTOR_ELT.\n\t* gcc-interface/utils.c (convert): Likewise and simplify.\n\t(remove_conversions): Likewise.\n\t* gcc-interface/utils2.c (compare_fat_pointers): Likewise.\n\t(build_unary_op): Likewise and simplify.\n\nFrom-SVN: r223653", "tree": {"sha": "d811c6f7bac6b6337a78000eea617b1e2544870c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d811c6f7bac6b6337a78000eea617b1e2544870c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2117b9bb988c489ff1a2233e066abc7cf9b136c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2117b9bb988c489ff1a2233e066abc7cf9b136c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2117b9bb988c489ff1a2233e066abc7cf9b136c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2117b9bb988c489ff1a2233e066abc7cf9b136c1/comments", "author": null, "committer": null, "parents": [{"sha": "f797c2b745ec8a1b5750900caf54c96dcbc904ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f797c2b745ec8a1b5750900caf54c96dcbc904ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f797c2b745ec8a1b5750900caf54c96dcbc904ca"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "41af09ac57ab326b0c8266fe65e63897a81cd9b4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2117b9bb988c489ff1a2233e066abc7cf9b136c1", "patch": "@@ -1,3 +1,12 @@\n+2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Minor tweak.\n+\t* gcc-interface/trans.c (finalize_nrv_unc_r): Use CONSTRUCTOR_ELT.\n+\t* gcc-interface/utils.c (convert): Likewise and simplify.\n+\t(remove_conversions): Likewise.\n+\t* gcc-interface/utils2.c (compare_fat_pointers): Likewise.\n+\t(build_unary_op): Likewise and simplify.\n+\n 2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (build_atomic_load): Adjust prototype."}, {"sha": "501b0761c7dcaae9a8764a16a092be5a90457a57", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=2117b9bb988c489ff1a2233e066abc7cf9b136c1", "patch": "@@ -1335,8 +1335,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t      = TREE_TYPE (DECL_CHAIN (TYPE_FIELDS (gnu_alloc_type)));\n \n \t\t    if (TREE_CODE (gnu_expr) == CONSTRUCTOR\n-\t\t\t&& 1 == vec_safe_length (CONSTRUCTOR_ELTS (gnu_expr)))\n-\t\t      gnu_expr = 0;\n+\t\t\t&& vec_safe_length (CONSTRUCTOR_ELTS (gnu_expr)) == 1)\n+\t\t      gnu_expr = NULL_TREE;\n \t\t    else\n \t\t      gnu_expr\n \t\t\t= build_component_ref"}, {"sha": "cb8662c0a87e6d77d5c1eef3398ffe70150d19f4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2117b9bb988c489ff1a2233e066abc7cf9b136c1", "patch": "@@ -3309,12 +3309,12 @@ finalize_nrv_unc_r (tree *tp, int *walk_subtrees, void *data)\n       if (TREE_CODE (ret_val) == COMPOUND_EXPR\n \t  && TREE_CODE (TREE_OPERAND (ret_val, 0)) == INIT_EXPR)\n \t{\n+\t  tree rhs = TREE_OPERAND (TREE_OPERAND (ret_val, 0), 1);\n+\n \t  if (TYPE_IS_FAT_POINTER_P (TREE_TYPE (ret_val)))\n-\t    ret_val\n-\t      = (*CONSTRUCTOR_ELTS (TREE_OPERAND (TREE_OPERAND (ret_val, 0),\n-\t\t\t\t\t\t1)))[1].value;\n+\t    ret_val = CONSTRUCTOR_ELT (rhs, 1)->value;\n \t  else\n-\t    ret_val = TREE_OPERAND (TREE_OPERAND (ret_val, 0), 1);\n+\t    ret_val = rhs;\n \t}\n \n       /* Strip useless conversions around the return value.  */\n@@ -3365,20 +3365,21 @@ finalize_nrv_unc_r (tree *tp, int *walk_subtrees, void *data)\n \n       if (TYPE_IS_FAT_POINTER_P (TREE_TYPE (alloc)))\n \t{\n+\t  tree cst = TREE_OPERAND (alloc, 1);\n+\n \t  /* The new initial value is a COMPOUND_EXPR with the allocation in\n \t     the first arm and the value of P_ARRAY in the second arm.  */\n \t  DECL_INITIAL (new_var)\n \t    = build2 (COMPOUND_EXPR, TREE_TYPE (new_var),\n \t\t      TREE_OPERAND (alloc, 0),\n-\t\t      (*CONSTRUCTOR_ELTS (TREE_OPERAND (alloc, 1)))[0].value);\n+\t\t      CONSTRUCTOR_ELT (cst, 0)->value);\n \n \t  /* Build a modified CONSTRUCTOR that references NEW_VAR.  */\n \t  p_array = TYPE_FIELDS (TREE_TYPE (alloc));\n \t  CONSTRUCTOR_APPEND_ELT (v, p_array,\n \t\t\t\t  fold_convert (TREE_TYPE (p_array), new_var));\n \t  CONSTRUCTOR_APPEND_ELT (v, DECL_CHAIN (p_array),\n-\t\t\t\t  (*CONSTRUCTOR_ELTS (\n-\t\t\t\t      TREE_OPERAND (alloc, 1)))[1].value);\n+\t\t\t\t  CONSTRUCTOR_ELT (cst, 1)->value);\n \t  new_ret = build_constructor (TREE_TYPE (alloc), v);\n \t}\n       else"}, {"sha": "3cefe1128349c0b9ceb5f1d54199ac5ebdbee5d8", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2117b9bb988c489ff1a2233e066abc7cf9b136c1", "patch": "@@ -4067,10 +4067,8 @@ convert (tree type, tree expr)\n \n       /* If we have just converted to this padded type, just get the\n \t inner expression.  */\n-      if (TREE_CODE (expr) == CONSTRUCTOR\n-\t  && !vec_safe_is_empty (CONSTRUCTOR_ELTS (expr))\n-\t  && (*CONSTRUCTOR_ELTS (expr))[0].index == TYPE_FIELDS (etype))\n-\tunpadded = (*CONSTRUCTOR_ELTS (expr))[0].value;\n+      if (TREE_CODE (expr) == CONSTRUCTOR)\n+\tunpadded = CONSTRUCTOR_ELT (expr, 0)->value;\n \n       /* Otherwise, build an explicit component reference.  */\n       else\n@@ -4632,7 +4630,7 @@ remove_conversions (tree exp, bool true_address)\n \t  && TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n \t  && TYPE_JUSTIFIED_MODULAR_P (TREE_TYPE (exp)))\n \treturn\n-\t  remove_conversions ((*CONSTRUCTOR_ELTS (exp))[0].value, true);\n+\t  remove_conversions (CONSTRUCTOR_ELT (exp, 0)->value, true);\n       break;\n \n     case COMPONENT_REF:"}, {"sha": "42587d9a802f492661b65ea7ccc6797876e3a628", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2117b9bb988c489ff1a2233e066abc7cf9b136c1/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=2117b9bb988c489ff1a2233e066abc7cf9b136c1", "patch": "@@ -461,7 +461,7 @@ compare_fat_pointers (location_t loc, tree result_type, tree p1, tree p2)\n \n   /* The constant folder doesn't fold fat pointer types so we do it here.  */\n   if (TREE_CODE (p1) == CONSTRUCTOR)\n-    p1_array = (*CONSTRUCTOR_ELTS (p1))[0].value;\n+    p1_array = CONSTRUCTOR_ELT (p1, 0)->value;\n   else\n     p1_array = build_component_ref (p1, NULL_TREE,\n \t\t\t\t    TYPE_FIELDS (TREE_TYPE (p1)), true);\n@@ -472,7 +472,7 @@ compare_fat_pointers (location_t loc, tree result_type, tree p1, tree p2)\n \t\t\t\t\t null_pointer_node));\n \n   if (TREE_CODE (p2) == CONSTRUCTOR)\n-    p2_array = (*CONSTRUCTOR_ELTS (p2))[0].value;\n+    p2_array = CONSTRUCTOR_ELT (p2, 0)->value;\n   else\n     p2_array = build_component_ref (p2, NULL_TREE,\n \t\t\t\t    TYPE_FIELDS (TREE_TYPE (p2)), true);\n@@ -493,14 +493,14 @@ compare_fat_pointers (location_t loc, tree result_type, tree p1, tree p2)\n     = fold_build2_loc (loc, EQ_EXPR, result_type, p1_array, p2_array);\n \n   if (TREE_CODE (p1) == CONSTRUCTOR)\n-    p1_bounds = (*CONSTRUCTOR_ELTS (p1))[1].value;\n+    p1_bounds = CONSTRUCTOR_ELT (p1, 1)->value;\n   else\n     p1_bounds\n       = build_component_ref (p1, NULL_TREE,\n \t\t\t     DECL_CHAIN (TYPE_FIELDS (TREE_TYPE (p1))), true);\n \n   if (TREE_CODE (p2) == CONSTRUCTOR)\n-    p2_bounds = (*CONSTRUCTOR_ELTS (p2))[1].value;\n+    p2_bounds = CONSTRUCTOR_ELT (p2, 1)->value;\n   else\n     p2_bounds\n       = build_component_ref (p2, NULL_TREE,\n@@ -1445,15 +1445,13 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t      offset = size_binop (PLUS_EXPR, offset,\n \t\t\t\t   size_int (bitpos / BITS_PER_UNIT));\n \n-\t      /* Take the address of INNER, convert the offset to void *, and\n-\t\t add then.  It will later be converted to the desired result\n-\t\t type, if any.  */\n-\t      inner = build_unary_op (ADDR_EXPR, NULL_TREE, inner);\n-\t      inner = convert (ptr_void_type_node, inner);\n-\t      result = build_binary_op (POINTER_PLUS_EXPR, ptr_void_type_node,\n+\t      /* Take the address of INNER, convert it to a pointer to our type\n+\t\t and add the offset.  */\n+\t      inner = build_unary_op (ADDR_EXPR,\n+\t\t\t\t      build_pointer_type (TREE_TYPE (operand)),\n+\t\t\t\t      inner);\n+\t      result = build_binary_op (POINTER_PLUS_EXPR, TREE_TYPE (inner),\n \t\t\t\t\tinner, offset);\n-\t      result = convert (build_pointer_type (TREE_TYPE (operand)),\n-\t\t\t\tresult);\n \t      break;\n \t    }\n \t  goto common;\n@@ -1464,12 +1462,12 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t     a pointer to our type.  */\n \t  if (TYPE_IS_PADDING_P (type))\n \t    {\n-\t      result = (*CONSTRUCTOR_ELTS (operand))[0].value;\n-\t      result = convert (build_pointer_type (TREE_TYPE (operand)),\n-\t\t\t\tbuild_unary_op (ADDR_EXPR, NULL_TREE, result));\n+\t      result\n+\t\t= build_unary_op (ADDR_EXPR,\n+\t\t\t\t  build_pointer_type (TREE_TYPE (operand)),\n+\t\t\t\t  CONSTRUCTOR_ELT (operand, 0)->value);\n \t      break;\n \t    }\n-\n \t  goto common;\n \n \tcase NOP_EXPR:"}]}