{"sha": "4bc92c3bfab065f5984a020aa490bd0dc74157ec", "node_id": "C_kwDOANBUbNoAKDRiYzkyYzNiZmFiMDY1ZjU5ODRhMDIwYWE0OTBiZDBkYzc0MTU3ZWM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-07T00:16:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-07T00:16:46Z"}, "message": "Daily bump.", "tree": {"sha": "8c303b6eaa0917aa6b7711b691749a405c5128e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c303b6eaa0917aa6b7711b691749a405c5128e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bc92c3bfab065f5984a020aa490bd0dc74157ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc92c3bfab065f5984a020aa490bd0dc74157ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc92c3bfab065f5984a020aa490bd0dc74157ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc92c3bfab065f5984a020aa490bd0dc74157ec/comments", "author": null, "committer": null, "parents": [{"sha": "3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f05e03d6cfdf723ca0556318b6a9aa37be438e7"}], "stats": {"total": 316, "additions": 315, "deletions": 1}, "files": [{"sha": "0f291f9f7aa52bf9e34380fd0eec444353abc12a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,13 @@\n+2022-07-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.cc (process_obj): Clarify 'target_data' ->\n+\t'[...]_data'.\n+\t* config/nvptx/mkoffload.cc (process): Likewise.\n+\n+2022-07-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-general.h (enum omp_requires): Use 'GOMP_REQUIRES_[...]'.\n+\n 2022-07-05  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* value-relation.cc (relation_to_code): New vector."}, {"sha": "56ceb7f4c69976b81473c8a034f0bebb1f83ebe8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1 +1 @@\n-20220706\n+20220707"}, {"sha": "02490f0905229db7ec346430bd3da5551acfef79", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,174 @@\n+2022-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in (ada/generated/gnatvsn.ads):\n+\tSimplify regular expression. The \"interval expression\",\n+\ti.e. \\{8\\} is part of the POSIX regular expressions, so it\n+\tshould not be a problem for modern implementations of sed.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_to_gnu): Update comment.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (simple_constant_p): Declare.\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Variable>: Strip\n+\tthe qualifiers from the type of a simple constant.\n+\t(simple_constant_p): New predicate.\n+\t* gcc-interface/trans.cc (node_is_atomic): Return true for objects\n+\twith atomic type except for simple constants.\n+\t(node_is_volatile_full_access): Return false for simple constants\n+\twith VFA type.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Variable>: Create a\n+\tlocal constant holding the underlying GNAT type of the object.  Do\n+\tnot fiddle with the object size for an unconstrained array.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_subprog_type): Constify a\n+\tlocal variable and move a couple of others around.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_gimplify_expr) <SAVE_EXPR>: New case.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Function return mechanisms): New paragraph.\n+\n+2022-07-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Is_Non_Preelaborable_Construct): Fix for\n+\tdeferred constants.\n+\n+2022-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* libgnat/s-regpat.adb, libgnat/s-regpat.ads (Compile): Add a\n+\tnew defaulted parameter Error_When_Too_Small to trigger an\n+\terror, if specified true, when Matcher is too small to hold the\n+\tcompiled regex program.\n+\n+2022-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Add condition to\n+\tavoid interpreting derived type components as candidates for\n+\tselected components in preanalysis of inherited class\n+\tconditions.\n+\n+2022-07-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* ghost.adb (Check_Ghost_Context): Delay checking for generic\n+\tassociations.\n+\t(Check_Ghost_Context_In_Generic_Association): Perform ghost\n+\tchecking in analyzed generic associations.\n+\t(Check_Ghost_Formal_Procedure_Or_Package): Check SPARK RM\n+\t6.9(13-14) for formal procedures and packages.\n+\t(Check_Ghost_Formal_Variable): Check SPARK RM 6.9(13-14) for\n+\tvariables.\n+\t* ghost.ads: Declarations for the above.\n+\t* sem_ch12.adb (Analyze_Associations): Apply delayed checking\n+\tfor generic associations.\n+\t(Analyze_Formal_Object_Declaration): Same.\n+\t(Analyze_Formal_Subprogram_Declaration): Same.\n+\t(Instantiate_Formal_Package): Same.\n+\t(Instantiate_Formal_Subprogram): Same.\n+\t(Instantiate_Object): Same.  Copy ghost aspect to newly declared\n+\tobject for actual for IN formal object. Use new function\n+\tGet_Enclosing_Deep_Object to retrieve root object.\n+\t(Instantiate_Type): Copy ghost aspect to declared subtype for\n+\tactual for formal type.\n+\t* sem_prag.adb (Analyze_Pragma): Recognize new allowed\n+\tdeclarations.\n+\t* sem_util.adb (Copy_Ghost_Aspect): Copy the ghost aspect\n+\tbetween nodes.\n+\t(Get_Enclosing_Deep_Object): New function to return enclosing\n+\tdeep object (or root for reachable part).\n+\t* sem_util.ads (Copy_Ghost_Aspect): Same.\n+\t(Get_Enclosing_Deep_Object): Same.\n+\t* libgnat/s-imageu.ads: Declare formal subprograms as ghost.\n+\t* libgnat/s-valuei.ads: Same.\n+\t* libgnat/s-valuti.ads: Same.\n+\n+2022-07-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): Code cleanup since the\n+\tprevious static check has been moved to Valid_Tagged_Conversion.\n+\t(Valid_Tagged_Conversion): Fix the code checking conversion\n+\tto/from interface types since incorrectly returns True when the\n+\tparent type of the operand type (or the target type) is an\n+\tinterface type; add missing static checks on interface type\n+\tconversions.\n+\n+2022-07-06  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* libgnat/s-secsta.ads (SS_Allocate): Add new Alignment\n+\tparameter.\n+\t(Memory_Alignment): Remove.\n+\t* libgnat/s-secsta.adb (Align_Addr): New.\n+\t(SS_Allocate): Add new Alignment parameter. Realign pointer if\n+\tneeded. Don't allocate anything for 0-sized allocations.\n+\t* gcc-interface/utils2.cc (build_call_alloc_dealloc_proc): Add\n+\tallocated object's alignment as last parameter to allocation\n+\tinvocation.\n+\n+2022-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/g-socket.adb (Get_Address_Info): Reduce scope of the\n+\tFound variable; avoid repeated assignment inside the loop.\n+\n+2022-07-06  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl [arm,aarch64 vxworks7]: Remove rtp and kernel\n+\tbuild macros and set an error variable if needed.\n+\t[x86,x86_vxworks7]: Likewise.\n+\t[ppc,ppc64]: Set an error variable if needed.\n+\t(rts-err): New phony Makefile target.\n+\t(setup-rts): Depend on rts-err.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Allocator_For_BIP_Return): New local function.\n+\t(Expand_N_Object_Declaration): Use it to build the three allocators\n+\tfor a Build-In-Place return with an unconstrained type.  Update the\n+\thead comment after other recent changes.\n+\n+2022-07-06  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-vxworks7-e500-kernel.ads: Remove.\n+\t* libgnat/system-vxworks7-e500-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp.ads: Likewise.\n+\n+2022-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnat_cuda.adb (Empty_CUDA_Global_Subprogram): Set\n+\tSpecification and Corresponding_Spec to match the original\n+\tKernel_Body.\n+\n+2022-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Build_Static_Check_Helper_Call): Replace explicit\n+\tcall to Make_Unchecked_Type_Conversion with a call to\n+\tUnchecked_Convert_To.\n+\t* tbuild.adb (Unchecked_Convert_To): Fix whitespace.\n+\n+2022-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Restore first sentence of a\n+\tcomment.\n+\n+2022-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate): Do not call\n+\tIs_Full_Access_Aggregate here.\n+\t* freeze.ads (Is_Full_Access_Aggregate): Delete.\n+\t* freeze.adb (Is_Full_Access_Aggregate): Move to...\n+\t(Freeze_Entity): Do not call Is_Full_Access_Aggregate here.\n+\t* sem_aggr.adb (Is_Full_Access_Aggregate): ...here\n+\t(Resolve_Aggregate): Call Is_Full_Access_Aggregate here.\n+\n 2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* doc/gnat_ugn/building_executable_programs_with_gnat.rst"}, {"sha": "03918704e9c3a1b4fb872e5992cbc255eceba73a", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,25 @@\n+2022-07-06  Immad Mir  <mirimmad@outlook.com>\n+\n+\tPR analyzer/106184\n+\t* sm-fd.cc (fd_state_machine): Change ordering of initialization\n+\tof state m_invalid so that the order of initializers is same as\n+\tthe ordering of the fields in the class decl.\n+\n+2022-07-06  Immad Mir  <mirimmad@outlook.com>\n+\n+\t* sm-fd.cc (use_after_close): save the \"close\" event and\n+\tshow it where possible.\n+\n+2022-07-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106204\n+\t* region-model.cc (within_short_circuited_stmt_p): Move extraction\n+\tof assign_stmt to caller.\n+\t(due_to_ifn_deferred_init_p): New.\n+\t(region_model::check_for_poison): Move extraction of assign_stmt\n+\tfrom within_short_circuited_stmt_p to here.  Share logic with\n+\tcall to due_to_ifn_deferred_init_p.\n+\n 2022-07-02  Tim Lange  <mail@tim-lange.me>\n \n \tPR analyzer/105900"}, {"sha": "2853661a720951bfbbbbc66ab4b7488ff2bd9291", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,43 @@\n+2022-07-06  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/53920\n+\tPR c++/53431\n+\t* c-common.cc (c_option_is_from_cpp_diagnostics): New function.\n+\t* c-common.h (c_option_is_from_cpp_diagnostics): Declare.\n+\t(c_pp_stream_token): Declare.\n+\t* c-ppoutput.cc (init_pp_output): Refactor logic about skipping\n+\tpragmas to...\n+\t(should_output_pragmas): ...here. New function.\n+\t(token_streamer::stream): Support handling early pragmas.\n+\t(do_line_change): Likewise.\n+\t(c_pp_stream_token): New function.\n+\t* c-pragma.cc (struct pragma_diagnostic_data): New helper class.\n+\t(pragma_diagnostic_lex_normal): New function. Moved logic for\n+\tinterpreting GCC diagnostic pragmas here.\n+\t(pragma_diagnostic_lex_pp): New function for parsing diagnostic pragmas\n+\tdirectly from libcpp.\n+\t(handle_pragma_diagnostic): Refactor into helper function...\n+\t(handle_pragma_diagnostic_impl): ...here.  New function.\n+\t(handle_pragma_diagnostic_early): New function.\n+\t(handle_pragma_diagnostic_early_pp): New function.\n+\t(struct pragma_ns_name): Renamed to...\n+\t(struct pragma_pp_data): ...this.  Add new \"early_handler\" member.\n+\t(c_register_pragma_1): Support early pragmas in the preprocessor.\n+\t(c_register_pragma_with_early_handler): New function.\n+\t(c_register_pragma): Support the new early handlers in struct\n+\tinternal_pragma_handler.\n+\t(c_register_pragma_with_data): Likewise.\n+\t(c_register_pragma_with_expansion): Likewise.\n+\t(c_register_pragma_with_expansion_and_data): Likewise.\n+\t(c_invoke_early_pragma_handler): New function.\n+\t(c_pp_invoke_early_pragma_handler): New function.\n+\t(init_pragma): Add early pragma support for diagnostic pragmas.\n+\t* c-pragma.h (struct internal_pragma_handler): Add new early handler\n+\tmembers.\n+\t(c_register_pragma_with_early_handler): Declare.\n+\t(c_invoke_early_pragma_handler): Declare.\n+\t(c_pp_invoke_early_pragma_handler): Declare.\n+\n 2022-07-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/105626"}, {"sha": "32ff5c07df0e40d2c3c5063072f4a5b3af5be8bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,18 @@\n+2022-07-06  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR c++/53431\n+\t* parser.cc (cp_parser_pragma_kind): Move earlier in the file.\n+\t(cp_lexer_handle_early_pragma): New function.\n+\t(cp_lexer_new_main): Support parsing and handling early pragmas.\n+\t(c_parse_file): Adapt to changes in cp_lexer_new_main.\n+\n+2022-07-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106179\n+\tPR c++/106024\n+\t* parser.cc (cp_parser_lookup_name): Remove :: requirement\n+\tfor using unqualified lookup result.\n+\n 2022-07-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc"}, {"sha": "f1d1f001e4a4c5178fc2723b0b7d15eb03204a46", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,12 @@\n+2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 56589f0f4.\n+\n+2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (NOEXCEPTION_DFLAGS): Define.\n+\t(ALL_DFLAGS): Add NO_EXCEPTION_DFLAGS.\n+\n 2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/106139"}, {"sha": "d5a391e72b68abe769a7cac32afb16c6f96d9b34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,35 @@\n+2022-07-06  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/53920\n+\tPR c++/53431\n+\t* c-c++-common/pragma-diag-11.c: New test.\n+\t* c-c++-common/pragma-diag-12.c: New test.\n+\t* c-c++-common/pragma-diag-13.c: New test.\n+\n+2022-07-06  Immad Mir  <mirimmad@outlook.com>\n+\n+\t* gcc.dg/analyzer/fd-4.c: Add a new testcase to demonstrate\n+\tpasssing of a closed file descriptor to a function that does\n+\tnot emit any warning.\n+\n+2022-07-06  Immad Mir  <mirimmad@outlook.com>\n+\n+\t* gcc.dg/analyzer/fd-4.c (test_3): change the message note to conform to the\n+\tchanges in analyzer/sm-fd.cc\n+\t(test_4): Likewise.\n+\n+2022-07-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106204\n+\t* gcc.dg/analyzer/torture/uninit-pr106204.c: New test.\n+\t* gcc.dg/analyzer/uninit-pr106204.c: New test.\n+\n+2022-07-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106179\n+\tPR c++/106024\n+\t* g++.dg/template/operator16.C: New test.\n+\n 2022-07-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/105626"}, {"sha": "07f2b7c88042c477b20a7be6fe1969649f075a13", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,7 @@\n+2022-07-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gomp-constants.h (OMP_REQUIRES_[...]): Update comment.\n+\n 2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>"}, {"sha": "7d1ee616256d58b66e0dc7d0fcc69a5dee9fa326", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,9 @@\n+2022-07-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* target.c (GOMP_offload_register_ver): Clarify 'target_data' ->\n+\t'data'.\n+\t(GOMP_offload_unregister_ver): Likewise.  Fix up 'target_data'.\n+\n 2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "2d4abbb0d66c997e0e2e0b4e5f06a0b34cf22893", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc92c3bfab065f5984a020aa490bd0dc74157ec/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc92c3bfab065f5984a020aa490bd0dc74157ec/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=4bc92c3bfab065f5984a020aa490bd0dc74157ec", "patch": "@@ -1,3 +1,8 @@\n+2022-07-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 651389b5.\n+\t* src/MERGE: Merge upstream phobos 1516ecad9.\n+\n 2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Add gcc/simd.d."}]}