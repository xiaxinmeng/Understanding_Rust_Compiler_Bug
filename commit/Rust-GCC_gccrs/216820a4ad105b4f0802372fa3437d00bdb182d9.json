{"sha": "216820a4ad105b4f0802372fa3437d00bdb182d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2ODIwYTRhZDEwNWI0ZjA4MDIzNzJmYTM0MzdkMDBiZGIxODJkOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-05T13:38:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-05T13:38:47Z"}, "message": "gimple.c (walk_gimple_op): Compute val_only for the LHS of an assigment in the canonical way...\n\n2012-04-05  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (walk_gimple_op): Compute val_only for the LHS\n\tof an assigment in the canonical way, avoiding is_gimple_mem_rhs.\n\t(is_gimple_mem_rhs, is_gimple_reg_rhs, is_gimple_stmt): Move ...\n\t* gimplify.c (is_gimple_mem_rhs, is_gimple_reg_rhs, is_gimple_stmt):\n\t... here and make static.\n\t* gimple.h (is_gimple_mem_rhs, is_gimple_reg_rhs, is_gimple_stmt):\n\tRemove.\n\nFrom-SVN: r186165", "tree": {"sha": "8683318a9371cb594b545fa16e42b2a11e4bf33a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8683318a9371cb594b545fa16e42b2a11e4bf33a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/216820a4ad105b4f0802372fa3437d00bdb182d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216820a4ad105b4f0802372fa3437d00bdb182d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216820a4ad105b4f0802372fa3437d00bdb182d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216820a4ad105b4f0802372fa3437d00bdb182d9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eaf6ca186f3f165d0b641e02461dcb57d9c0d04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf6ca186f3f165d0b641e02461dcb57d9c0d04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf6ca186f3f165d0b641e02461dcb57d9c0d04d"}], "stats": {"total": 182, "additions": 92, "deletions": 90}, "files": [{"sha": "5ff0682d38dcebca0780480116d3bd931ae6fdc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=216820a4ad105b4f0802372fa3437d00bdb182d9", "patch": "@@ -1,3 +1,13 @@\n+2012-04-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (walk_gimple_op): Compute val_only for the LHS\n+\tof an assigment in the canonical way, avoiding is_gimple_mem_rhs.\n+\t(is_gimple_mem_rhs, is_gimple_reg_rhs, is_gimple_stmt): Move ...\n+\t* gimplify.c (is_gimple_mem_rhs, is_gimple_reg_rhs, is_gimple_stmt):\n+\t... here and make static.\n+\t* gimple.h (is_gimple_mem_rhs, is_gimple_reg_rhs, is_gimple_stmt):\n+\tRemove.\n+\n 2012-04-05  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-dse.c (dse_optimize_stmt): Remember the stmt"}, {"sha": "95d79dc1e025475febb1e5500ab5bb3677973a0b", "filename": "gcc/gimple.c", "status": "modified", "additions": 5, "deletions": 83, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=216820a4ad105b4f0802372fa3437d00bdb182d9", "patch": "@@ -1496,15 +1496,12 @@ walk_gimple_op (gimple stmt, walk_tree_fn callback_op,\n \t may use a COMPONENT_REF on the LHS.  */\n       if (wi)\n \t{\n-          /* If the RHS has more than 1 operand, it is not appropriate\n-             for the memory.\n-\t     ???  A lhs always requires an lvalue, checking the val_only flag\n-\t     does not make any sense, so we should be able to avoid computing\n-\t     it here.  */\n+          /* If the RHS is of a non-renamable type or is a register variable,\n+\t     we may use a COMPONENT_REF on the LHS.  */\n \t  tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t  wi->val_only = !(is_gimple_mem_rhs (rhs1)\n-\t\t\t   || TREE_CODE (rhs1) == CONSTRUCTOR)\n-                         || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n+\t  wi->val_only\n+\t    = (is_gimple_reg_type (TREE_TYPE (rhs1)) && !is_gimple_reg (rhs1))\n+\t      || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n \t  wi->is_lhs = true;\n \t}\n \n@@ -2639,29 +2636,6 @@ const unsigned char gimple_rhs_class_table[] = {\n \n /* Validation of GIMPLE expressions.  */\n \n-/* Returns true iff T is a valid RHS for an assignment to a renamed\n-   user -- or front-end generated artificial -- variable.  */\n-\n-bool\n-is_gimple_reg_rhs (tree t)\n-{\n-  return get_gimple_rhs_class (TREE_CODE (t)) != GIMPLE_INVALID_RHS;\n-}\n-\n-/* Returns true iff T is a valid RHS for an assignment to an un-renamed\n-   LHS, or for a call argument.  */\n-\n-bool\n-is_gimple_mem_rhs (tree t)\n-{\n-  /* If we're dealing with a renamable type, either source or dest must be\n-     a renamed variable.  */\n-  if (is_gimple_reg_type (TREE_TYPE (t)))\n-    return is_gimple_val (t);\n-  else\n-    return is_gimple_val (t) || is_gimple_lvalue (t);\n-}\n-\n /*  Return true if T is a valid LHS for a GIMPLE assignment expression.  */\n \n bool\n@@ -2835,58 +2809,6 @@ is_gimple_ip_invariant (const_tree t)\n   return is_gimple_constant (t);\n }\n \n-/* Return true if T looks like a valid GIMPLE statement.  */\n-\n-bool\n-is_gimple_stmt (tree t)\n-{\n-  const enum tree_code code = TREE_CODE (t);\n-\n-  switch (code)\n-    {\n-    case NOP_EXPR:\n-      /* The only valid NOP_EXPR is the empty statement.  */\n-      return IS_EMPTY_STMT (t);\n-\n-    case BIND_EXPR:\n-    case COND_EXPR:\n-      /* These are only valid if they're void.  */\n-      return TREE_TYPE (t) == NULL || VOID_TYPE_P (TREE_TYPE (t));\n-\n-    case SWITCH_EXPR:\n-    case GOTO_EXPR:\n-    case RETURN_EXPR:\n-    case LABEL_EXPR:\n-    case CASE_LABEL_EXPR:\n-    case TRY_CATCH_EXPR:\n-    case TRY_FINALLY_EXPR:\n-    case EH_FILTER_EXPR:\n-    case CATCH_EXPR:\n-    case ASM_EXPR:\n-    case STATEMENT_LIST:\n-    case OMP_PARALLEL:\n-    case OMP_FOR:\n-    case OMP_SECTIONS:\n-    case OMP_SECTION:\n-    case OMP_SINGLE:\n-    case OMP_MASTER:\n-    case OMP_ORDERED:\n-    case OMP_CRITICAL:\n-    case OMP_TASK:\n-      /* These are always void.  */\n-      return true;\n-\n-    case CALL_EXPR:\n-    case MODIFY_EXPR:\n-    case PREDICT_EXPR:\n-      /* These are valid regardless of their type.  */\n-      return true;\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n /* Return true if T is a variable.  */\n \n bool"}, {"sha": "c3e07983d73b4ee0ecbdffd5f8f3f8a9d0dff0de", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=216820a4ad105b4f0802372fa3437d00bdb182d9", "patch": "@@ -961,8 +961,6 @@ gimple gimple_alloc_stat (enum gimple_code, unsigned MEM_STAT_DECL);\n const char *gimple_decl_printable_name (tree, int);\n tree gimple_get_virt_method_for_binfo (HOST_WIDE_INT, tree);\n tree gimple_extract_devirt_binfo_from_cst (tree);\n-/* Returns true iff T is a valid GIMPLE statement.  */\n-extern bool is_gimple_stmt (tree);\n \n /* Returns true iff T is a scalar register variable.  */\n extern bool is_gimple_reg (tree);\n@@ -996,11 +994,6 @@ extern bool is_gimple_val (tree);\n extern bool is_gimple_asm_val (tree);\n /* Returns true iff T is a valid address operand of a MEM_REF.  */\n bool is_gimple_mem_ref_addr (tree);\n-/* Returns true iff T is a valid rhs for a MODIFY_EXPR where the LHS is a\n-   GIMPLE temporary, a renamed user variable, or something else,\n-   respectively.  */\n-extern bool is_gimple_reg_rhs (tree);\n-extern bool is_gimple_mem_rhs (tree);\n \n /* Returns true iff T is a valid if-statement condition.  */\n extern bool is_gimple_condexpr (tree);"}, {"sha": "43e3518a05d4400c08478b683d60590a52e1db20", "filename": "gcc/gimplify.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216820a4ad105b4f0802372fa3437d00bdb182d9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=216820a4ad105b4f0802372fa3437d00bdb182d9", "patch": "@@ -550,6 +550,29 @@ lookup_tmp_var (tree val, bool is_formal)\n   return ret;\n }\n \n+/* Returns true iff T is a valid RHS for an assignment to a renamed\n+   user -- or front-end generated artificial -- variable.  */\n+\n+static bool\n+is_gimple_reg_rhs (tree t)\n+{\n+  return get_gimple_rhs_class (TREE_CODE (t)) != GIMPLE_INVALID_RHS;\n+}\n+\n+/* Returns true iff T is a valid RHS for an assignment to an un-renamed\n+   LHS, or for a call argument.  */\n+\n+static bool\n+is_gimple_mem_rhs (tree t)\n+{\n+  /* If we're dealing with a renamable type, either source or dest must be\n+     a renamed variable.  */\n+  if (is_gimple_reg_type (TREE_TYPE (t)))\n+    return is_gimple_val (t);\n+  else\n+    return is_gimple_val (t) || is_gimple_lvalue (t);\n+}\n+\n /* Return true if T is a CALL_EXPR or an expression that can be\n    assigned to a temporary.  Note that this predicate should only be\n    used during gimplification.  See the rationale for this in\n@@ -4515,6 +4538,60 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n   return ret;\n }\n \n+\n+/* Return true if T looks like a valid GIMPLE statement.  */\n+\n+static bool\n+is_gimple_stmt (tree t)\n+{\n+  const enum tree_code code = TREE_CODE (t);\n+\n+  switch (code)\n+    {\n+    case NOP_EXPR:\n+      /* The only valid NOP_EXPR is the empty statement.  */\n+      return IS_EMPTY_STMT (t);\n+\n+    case BIND_EXPR:\n+    case COND_EXPR:\n+      /* These are only valid if they're void.  */\n+      return TREE_TYPE (t) == NULL || VOID_TYPE_P (TREE_TYPE (t));\n+\n+    case SWITCH_EXPR:\n+    case GOTO_EXPR:\n+    case RETURN_EXPR:\n+    case LABEL_EXPR:\n+    case CASE_LABEL_EXPR:\n+    case TRY_CATCH_EXPR:\n+    case TRY_FINALLY_EXPR:\n+    case EH_FILTER_EXPR:\n+    case CATCH_EXPR:\n+    case ASM_EXPR:\n+    case STATEMENT_LIST:\n+    case OMP_PARALLEL:\n+    case OMP_FOR:\n+    case OMP_SECTIONS:\n+    case OMP_SECTION:\n+    case OMP_SINGLE:\n+    case OMP_MASTER:\n+    case OMP_ORDERED:\n+    case OMP_CRITICAL:\n+    case OMP_TASK:\n+      /* These are always void.  */\n+      return true;\n+\n+    case CALL_EXPR:\n+    case MODIFY_EXPR:\n+    case PREDICT_EXPR:\n+      /* These are valid regardless of their type.  */\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n+\n /* Promote partial stores to COMPLEX variables to total stores.  *EXPR_P is\n    a MODIFY_EXPR with a lhs of a REAL/IMAGPART_EXPR of a variable with\n    DECL_GIMPLE_REG_P set."}]}