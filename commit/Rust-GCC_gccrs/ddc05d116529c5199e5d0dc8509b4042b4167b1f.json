{"sha": "ddc05d116529c5199e5d0dc8509b4042b4167b1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjMDVkMTE2NTI5YzUxOTllNWQwZGM4NTA5YjQwNDJiNDE2N2IxZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-11-15T11:06:07Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-15T11:06:07Z"}, "message": "error.c (gfc_fatal_error_1): Renamed from gfc_fatal_error.\n\n2014-11-15  Tobias Burnus  <burnus@net-b.de>\n\ngcc/fortran/\n        * error.c (gfc_fatal_error_1): Renamed from gfc_fatal_error.\n        (gfc_fatal_error): Add; uses common diagnostics.\n        * array.c (gfc_match_array_ref, gfc_match_array_spec): Use\n        %< %>.\n        * check.c (check_co_collective, gfc_check_lcobound,\n        gfc_check_image_index, gfc_check_num_images,\n        gfc_check_this_image, gfc_check_ucobound): Ditto.\n        * cpp.c (gfc_cpp_post_options): Ditto.\n        (gfc_cpp_init_0, gfc_cpp_done): Change %s to %qs.\n        * gfc-diagnostic.def (DK_FATAL): Capitalize first letter.\n        * gfortran.h (gfc_fatal_error_1): Add.\n        * match.c (gfc_match_name, gfc_match_critical,\n        lock_unlock_statement, sync_statement): Add %< %>.\n        * module.c (bad_module, gfc_dump_module, gfc_use_module): Change\n        %s to %qs.\n        * options.c (gfc_handle_module_path_options,\n        * gfc_handle_fpe_option,\n        gfc_handle_coarray_option, gfc_handle_runtime_check_option,\n        gfc_handle_option): Add %< %>.\n        * simplify.c (gfc_simplify_num_images): Ditto.\n        * trans-stmt.c (gfc_trans_sync): Use gfc_fatal_error_1.\n        * trans-array.c (gfc_conv_array_initializer): Ditto.\n        * trans-types.c (gfc_init_kinds): Use gfc_fatal_error instead\n        of fatal_error; add %< %> quotations.\n\ngcc/testsuite/\n        * gfortran.dg/binding_label_tests_4.f03: Add dg-excess-errors.\n        * gfortran.dg/coarray_9.f90: Ditto.\n        * gfortran.dg/empty_label.f: Ditto.\n        * gfortran.dg/empty_label.f90: Ditto.\n\nFrom-SVN: r217600", "tree": {"sha": "5c12484f4d872a40405b71fe5fad20a8a15399bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c12484f4d872a40405b71fe5fad20a8a15399bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc05d116529c5199e5d0dc8509b4042b4167b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc05d116529c5199e5d0dc8509b4042b4167b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc05d116529c5199e5d0dc8509b4042b4167b1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc05d116529c5199e5d0dc8509b4042b4167b1f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87d4b3838745a20ecd29802a1b99a058eb068e6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d4b3838745a20ecd29802a1b99a058eb068e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d4b3838745a20ecd29802a1b99a058eb068e6a"}], "stats": {"total": 198, "additions": 135, "deletions": 63}, "files": [{"sha": "b8cf60128b74caaa9d5d8f4f8fb9aac407bdb408", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -1,3 +1,29 @@\n+2014-11-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_fatal_error_1): Renamed from gfc_fatal_error.\n+\t(gfc_fatal_error): Add; uses common diagnostics.\n+\t* array.c (gfc_match_array_ref, gfc_match_array_spec): Use\n+\t%< %>.\n+\t* check.c (check_co_collective, gfc_check_lcobound,\n+\tgfc_check_image_index, gfc_check_num_images,\n+\tgfc_check_this_image, gfc_check_ucobound): Ditto.\n+\t* cpp.c (gfc_cpp_post_options): Ditto.\n+\t(gfc_cpp_init_0, gfc_cpp_done): Change %s to %qs.\n+\t* gfc-diagnostic.def (DK_FATAL): Capitalize first letter.\n+\t* gfortran.h (gfc_fatal_error_1): Add.\n+\t* match.c (gfc_match_name, gfc_match_critical,\n+\tlock_unlock_statement, sync_statement): Add %< %>.\n+\t* module.c (bad_module, gfc_dump_module, gfc_use_module): Change\n+\t%s to %qs.\n+\t* options.c (gfc_handle_module_path_options, gfc_handle_fpe_option,\n+\tgfc_handle_coarray_option, gfc_handle_runtime_check_option,\n+\tgfc_handle_option): Add %< %>.\n+\t* simplify.c (gfc_simplify_num_images): Ditto.\n+\t* trans-stmt.c (gfc_trans_sync): Use gfc_fatal_error_1.\n+\t* trans-array.c (gfc_conv_array_initializer): Ditto.\n+\t* trans-types.c (gfc_init_kinds): Use gfc_fatal_error instead\n+\tof fatal_error; add %< %> quotations.\n+\n 2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n \t    Ilya Verbin  <ilya.verbin@intel.com>"}, {"sha": "159e6263c34529edefd84e062c1e1008e8fac388", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -209,7 +209,7 @@ gfc_match_array_ref (gfc_array_ref *ar, gfc_array_spec *as, int init,\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return MATCH_ERROR;\n     }\n \n@@ -592,7 +592,7 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       goto cleanup;\n     }\n "}, {"sha": "034b329886fa2899a41c05ef1b0af40fd9346d66", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -1482,8 +1482,8 @@ check_co_collective (gfc_expr *a, gfc_expr *image_idx, gfc_expr *stat,\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %L, use -fcoarray= to enable\",\n-\t\t       &a->where);\n+      gfc_fatal_error_1 (\"Coarrays disabled at %L, use -fcoarray= to enable\",\n+\t\t\t &a->where);\n       return false;\n     }\n \n@@ -2569,7 +2569,7 @@ gfc_check_lcobound (gfc_expr *coarray, gfc_expr *dim, gfc_expr *kind)\n {\n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return false;\n     }\n \n@@ -4847,7 +4847,7 @@ gfc_check_image_index (gfc_expr *coarray, gfc_expr *sub)\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return false;\n     }\n \n@@ -4885,7 +4885,7 @@ gfc_check_num_images (gfc_expr *distance, gfc_expr *failed)\n {\n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return false;\n     }\n \n@@ -4927,7 +4927,7 @@ gfc_check_this_image (gfc_expr *coarray, gfc_expr *dim, gfc_expr *distance)\n {\n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return false;\n     }\n \n@@ -5126,7 +5126,7 @@ gfc_check_ucobound (gfc_expr *coarray, gfc_expr *dim, gfc_expr *kind)\n {\n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return false;\n     }\n "}, {"sha": "090e20974963fec6c9ca10decaf3aeb1725c1bd4", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -450,7 +450,7 @@ gfc_cpp_post_options (void)\n \t  || gfc_cpp_option.no_line_commands\n \t  || gfc_cpp_option.dump_macros\n \t  || gfc_cpp_option.dump_includes))\n-    gfc_fatal_error(\"To enable preprocessing, use -cpp\");\n+    gfc_fatal_error (\"To enable preprocessing, use %<-cpp%>\");\n \n   if (!gfc_cpp_enabled ())\n     return;\n@@ -548,7 +548,7 @@ gfc_cpp_init_0 (void)\n \n \t  print.outf = fopen (gfc_cpp_option.output_filename, \"w\");\n \t  if (print.outf == NULL)\n-\t    gfc_fatal_error (\"opening output file %s: %s\",\n+\t    gfc_fatal_error (\"opening output file %qs: %s\",\n \t\t\t     gfc_cpp_option.output_filename,\n \t\t\t     xstrerror (errno));\n \t}\n@@ -559,7 +559,7 @@ gfc_cpp_init_0 (void)\n     {\n       print.outf = fopen (gfc_cpp_option.temporary_filename, \"w\");\n       if (print.outf == NULL)\n-\tgfc_fatal_error (\"opening output file %s: %s\",\n+\tgfc_fatal_error (\"opening output file %qs: %s\",\n \t\t\t gfc_cpp_option.temporary_filename, xstrerror (errno));\n     }\n \n@@ -666,7 +666,7 @@ gfc_cpp_done (void)\n \t      fclose (f);\n \t    }\n \t  else\n-\t    gfc_fatal_error (\"opening output file %s: %s\",\n+\t    gfc_fatal_error (\"opening output file %qs: %s\",\n \t\t\t     gfc_cpp_option.deps_filename,\n \t\t\t     xstrerror (errno));\n \t}"}, {"sha": "3a508fa693e577391e28e4edb2ca12c96f214c69", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -933,6 +933,7 @@ gfc_notify_std (int std, const char *gmsgid, ...)\n \n \n /* Immediate warning (i.e. do not buffer the warning).  */\n+/* Use gfc_warning_now_2 instead, unless gmsgid contains a %L.  */\n \n void\n gfc_warning_now (const char *gmsgid, ...)\n@@ -1086,6 +1087,7 @@ gfc_diagnostic_finalizer (diagnostic_context *context,\n }\n \n /* Immediate warning (i.e. do not buffer the warning).  */\n+/* This function uses the common diagnostics, but does not support %L, yet.  */\n \n bool\n gfc_warning_now_2 (int opt, const char *gmsgid, ...)\n@@ -1104,6 +1106,7 @@ gfc_warning_now_2 (int opt, const char *gmsgid, ...)\n }\n \n /* Immediate warning (i.e. do not buffer the warning).  */\n+/* This function uses the common diagnostics, but does not support %L, yet.  */\n \n bool\n gfc_warning_now_2 (const char *gmsgid, ...)\n@@ -1122,6 +1125,7 @@ gfc_warning_now_2 (const char *gmsgid, ...)\n \n \n /* Immediate error (i.e. do not buffer).  */\n+/* This function uses the common diagnostics, but does not support %L, yet.  */\n \n void\n gfc_error_now_2 (const char *gmsgid, ...)\n@@ -1135,6 +1139,24 @@ gfc_error_now_2 (const char *gmsgid, ...)\n   va_end (argp);\n }\n \n+\n+/* Fatal error, never returns.  */\n+/* This function uses the common diagnostics, but does not support %L, yet.  */\n+\n+void\n+gfc_fatal_error (const char *gmsgid, ...)\n+{\n+  va_list argp;\n+  diagnostic_info diagnostic;\n+\n+  va_start (argp, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &argp, UNKNOWN_LOCATION, DK_FATAL);\n+  report_diagnostic (&diagnostic);\n+  va_end (argp);\n+\n+  gcc_unreachable ();\n+}\n+\n /* Clear the warning flag.  */\n \n void\n@@ -1213,6 +1235,7 @@ gfc_error (const char *gmsgid, ...)\n \n \n /* Immediate error.  */\n+/* Use gfc_error_now_2 instead, unless gmsgid contains a %L.  */\n \n void\n gfc_error_now (const char *gmsgid, ...)\n@@ -1243,9 +1266,10 @@ gfc_error_now (const char *gmsgid, ...)\n \n \n /* Fatal error, never returns.  */\n+/* Use gfc_fatal_error instead, unless gmsgid contains a %L.  */\n \n void\n-gfc_fatal_error (const char *gmsgid, ...)\n+gfc_fatal_error_1 (const char *gmsgid, ...)\n {\n   va_list argp;\n "}, {"sha": "2b3caf1fef686dcc0107b0e87269c08589aef259", "filename": "gcc/fortran/gfc-diagnostic.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fgfc-diagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fgfc-diagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-diagnostic.def?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -30,7 +30,7 @@ DEFINE_DIAGNOSTIC_KIND (DK_UNSPECIFIED, \"\", NULL)\n DEFINE_DIAGNOSTIC_KIND (DK_IGNORED, \"\", NULL)\n \n /* The remainder are real diagnostic types.  */\n-DEFINE_DIAGNOSTIC_KIND (DK_FATAL, \"fatal error\", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_FATAL, \"Fatal Error\", \"error\")\n DEFINE_DIAGNOSTIC_KIND (DK_ICE, \"internal compiler error\", \"error\")\n DEFINE_DIAGNOSTIC_KIND (DK_ERROR, \"Error\", \"error\")\n DEFINE_DIAGNOSTIC_KIND (DK_SORRY, \"sorry, unimplemented\", \"error\")"}, {"sha": "b0f15b4008047a48012d7888070675ccf03483cf", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -2707,6 +2707,7 @@ void gfc_warning_check (void);\n void gfc_error (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n void gfc_error_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n void gfc_error_now_2 (const char *gmsgid, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_fatal_error_1 (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_fatal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_clear_error (void);"}, {"sha": "a03b5f10d850095ad5922307d5074ff31d0f6028", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -557,8 +557,8 @@ gfc_match_name (char *buffer)\n \n   if (c == '$' && !gfc_option.flag_dollar_ok)\n     {\n-      gfc_fatal_error (\"Invalid character '$' at %L. Use -fdollar-ok to allow \"\n-\t\t       \"it as an extension\", &old_loc);\n+      gfc_fatal_error_1 (\"Invalid character '$' at %L. Use -fdollar-ok to allow\"\n+\t\t\t \" it as an extension\", &old_loc);\n       return MATCH_ERROR;\n     }\n \n@@ -1665,7 +1665,8 @@ gfc_match_critical (void)\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-       gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+       gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to \"\n+\t\t\t\"enable\");\n        return MATCH_ERROR;\n     }\n \n@@ -2726,7 +2727,7 @@ lock_unlock_statement (gfc_statement st)\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-       gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+       gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n        return MATCH_ERROR;\n     }\n \n@@ -2922,7 +2923,8 @@ sync_statement (gfc_statement st)\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-       gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+       gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to \"\n+\t\t\t\"enable\");\n        return MATCH_ERROR;\n     }\n "}, {"sha": "b88e669c5b30eabe7cedd874055ec80d7832e0db", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -1054,15 +1054,15 @@ bad_module (const char *msgid)\n   switch (iomode)\n     {\n     case IO_INPUT:\n-      gfc_fatal_error (\"Reading module %s at line %d column %d: %s\",\n+      gfc_fatal_error (\"Reading module %qs at line %d column %d: %s\",\n \t  \t       module_name, module_line, module_column, msgid);\n       break;\n     case IO_OUTPUT:\n-      gfc_fatal_error (\"Writing module %s at line %d column %d: %s\",\n+      gfc_fatal_error (\"Writing module %qs at line %d column %d: %s\",\n \t  \t       module_name, module_line, module_column, msgid);\n       break;\n     default:\n-      gfc_fatal_error (\"Module %s at line %d column %d: %s\",\n+      gfc_fatal_error (\"Module %qs at line %d column %d: %s\",\n \t  \t       module_name, module_line, module_column, msgid);\n       break;\n     }\n@@ -6010,7 +6010,7 @@ gfc_dump_module (const char *name, int dump_flag)\n   /* Write the module to the temporary file.  */\n   module_fp = gzopen (filename_tmp, \"w\");\n   if (module_fp == NULL)\n-    gfc_fatal_error (\"Can't open module file '%s' for writing at %C: %s\",\n+    gfc_fatal_error (\"Can't open module file %qs for writing at %C: %s\",\n \t\t     filename_tmp, xstrerror (errno));\n \n   gzprintf (module_fp, \"GFORTRAN module version '%s' created from %s\\n\",\n@@ -6030,7 +6030,7 @@ gfc_dump_module (const char *name, int dump_flag)\n   write_char ('\\n');\n \n   if (gzclose (module_fp))\n-    gfc_fatal_error (\"Error writing module file '%s' for writing: %s\",\n+    gfc_fatal_error (\"Error writing module file %qs for writing: %s\",\n \t\t     filename_tmp, xstrerror (errno));\n \n   /* Read the CRC32 from the gzip trailers of the module files and\n@@ -6041,10 +6041,10 @@ gfc_dump_module (const char *name, int dump_flag)\n     {\n       /* Module file have changed, replace the old one.  */\n       if (remove (filename) && errno != ENOENT)\n-\tgfc_fatal_error (\"Can't delete module file '%s': %s\", filename,\n+\tgfc_fatal_error (\"Can't delete module file %qs: %s\", filename,\n \t\t\t xstrerror (errno));\n       if (rename (filename_tmp, filename))\n-\tgfc_fatal_error (\"Can't rename module file '%s' to '%s': %s\",\n+\tgfc_fatal_error (\"Can't rename module file %qs to %qs: %s\",\n \t\t\t filename_tmp, filename, xstrerror (errno));\n     }\n   else\n@@ -6789,7 +6789,7 @@ gfc_use_module (gfc_use_list *module)\n       module_fp = gzopen_intrinsic_module (filename);\n \n       if (module_fp == NULL && module->intrinsic)\n-\tgfc_fatal_error (\"Can't find an intrinsic module named '%s' at %C\",\n+\tgfc_fatal_error (\"Can't find an intrinsic module named %qs at %C\",\n \t\t\t module_name);\n \n       /* Check for the IEEE modules, so we can mark their symbols\n@@ -6814,7 +6814,7 @@ gfc_use_module (gfc_use_list *module)\n     }\n \n   if (module_fp == NULL)\n-    gfc_fatal_error (\"Can't open module file '%s' for reading at %C: %s\",\n+    gfc_fatal_error (\"Can't open module file %qs for reading at %C: %s\",\n \t\t     filename, xstrerror (errno));\n \n   /* Check that we haven't already USEd an intrinsic module with the\n@@ -6845,15 +6845,15 @@ gfc_use_module (gfc_use_list *module)\n \tparse_name (c);\n       if ((start == 1 && strcmp (atom_name, \"GFORTRAN\") != 0)\n \t  || (start == 2 && strcmp (atom_name, \" module\") != 0))\n-\tgfc_fatal_error (\"File '%s' opened at %C is not a GNU Fortran\"\n+\tgfc_fatal_error (\"File %qs opened at %C is not a GNU Fortran\"\n \t\t\t \" module file\", filename);\n       if (start == 3)\n \t{\n \t  if (strcmp (atom_name, \" version\") != 0\n \t      || module_char () != ' '\n \t      || parse_atom () != ATOM_STRING\n \t      || strcmp (atom_string, MOD_VERSION))\n-\t    gfc_fatal_error (\"Cannot read module file '%s' opened at %C,\"\n+\t    gfc_fatal_error (\"Cannot read module file %qs opened at %C,\"\n \t\t\t     \" because it was created by a different\"\n \t\t\t     \" version of GNU Fortran\", filename);\n "}, {"sha": "bbbd6abaca1092387bd8ef364dbbf5d83d8ecb8b", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -489,7 +489,7 @@ gfc_handle_module_path_options (const char *arg)\n {\n \n   if (gfc_option.module_dir != NULL)\n-    gfc_fatal_error (\"gfortran: Only one -J option allowed\");\n+    gfc_fatal_error (\"gfortran: Only one %<-J%> option allowed\");\n \n   gfc_option.module_dir = XCNEWVEC (char, strlen (arg) + 2);\n   strcpy (gfc_option.module_dir, arg);\n@@ -561,9 +561,9 @@ gfc_handle_fpe_option (const char *arg, bool trap)\n \t    }\n \t  }\n       if (!result && !trap)\n-\tgfc_fatal_error (\"Argument to -ffpe-trap is not valid: %s\", arg);\n+\tgfc_fatal_error (\"Argument to %<-ffpe-trap%> is not valid: %s\", arg);\n       else if (!result)\n-\tgfc_fatal_error (\"Argument to -ffpe-summary is not valid: %s\", arg);\n+\tgfc_fatal_error (\"Argument to %<-ffpe-summary%> is not valid: %s\", arg);\n \n     }\n }\n@@ -579,7 +579,7 @@ gfc_handle_coarray_option (const char *arg)\n   else if (strcmp (arg, \"lib\") == 0)\n     gfc_option.coarray = GFC_FCOARRAY_LIB;\n   else\n-    gfc_fatal_error (\"Argument to -fcoarray is not valid: %s\", arg);\n+    gfc_fatal_error (\"Argument to %<-fcoarray%> is not valid: %s\", arg);\n }\n \n \n@@ -617,7 +617,7 @@ gfc_handle_runtime_check_option (const char *arg)\n \t    }\n \t}\n       if (!result)\n-\tgfc_fatal_error (\"Argument to -fcheck is not valid: %s\", arg);\n+\tgfc_fatal_error (\"Argument to %<-fcheck%> is not valid: %s\", arg);\n     }\n }\n \n@@ -823,7 +823,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_ffixed_line_length_:\n       if (value != 0 && value < 7)\n-\tgfc_fatal_error (\"Fixed line length must be at least seven.\");\n+\tgfc_fatal_error (\"Fixed line length must be at least seven\");\n       gfc_option.fixed_line_length = value;\n       break;\n \n@@ -845,7 +845,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_ffree_line_length_:\n       if (value != 0 && value < 4)\n-\tgfc_fatal_error (\"Free line length must be at least three.\");\n+\tgfc_fatal_error (\"Free line length must be at least three\");\n       gfc_option.free_line_length = value;\n       break;\n \n@@ -859,7 +859,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_static_libgfortran:\n #ifndef HAVE_LD_STATIC_DYNAMIC\n-      gfc_fatal_error (\"-static-libgfortran is not supported in this \"\n+      gfc_fatal_error (\"%<-static-libgfortran%> is not supported in this \"\n \t\t       \"configuration\");\n #endif\n       break;\n@@ -974,7 +974,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       else if (!strcasecmp (arg, \"true\"))\n \tgfc_option.flag_init_logical = GFC_INIT_LOGICAL_TRUE;\n       else\n-\tgfc_fatal_error (\"Unrecognized option to -finit-logical: %s\",\n+\tgfc_fatal_error (\"Unrecognized option to %<-finit-logical%>: %s\",\n \t\t\t arg);\n       break;\n \n@@ -990,7 +990,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       else if (!strcasecmp (arg, \"-inf\"))\n \tgfc_option.flag_init_real = GFC_INIT_REAL_NEG_INF;\n       else\n-\tgfc_fatal_error (\"Unrecognized option to -finit-real: %s\",\n+\tgfc_fatal_error (\"Unrecognized option to %<-finit-real%>: %s\",\n \t\t\t arg);\n       break;\n \n@@ -1006,7 +1006,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \t  gfc_option.flag_init_character_value = (char)value;\n \t}\n       else\n-\tgfc_fatal_error (\"The value of n in -finit-character=n must be \"\n+\tgfc_fatal_error (\"The value of n in %<-finit-character=n%> must be \"\n \t\t\t \"between 0 and 127\");\n       break;\n "}, {"sha": "3a73867ace04f97a14246a4d2157d96010a0f7e7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -4634,7 +4634,7 @@ gfc_simplify_num_images (gfc_expr *distance ATTRIBUTE_UNUSED, gfc_expr *failed)\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n-      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n+      gfc_fatal_error (\"Coarrays disabled at %C, use %<-fcoarray=%> to enable\");\n       return &gfc_bad_expr;\n     }\n "}, {"sha": "4e5fd68383e085b09b8893f96bd637a0f005fdd9", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -5425,11 +5425,11 @@ gfc_conv_array_initializer (tree type, gfc_expr * expr)\n             {\n               /* Problems occur when we get something like\n                  integer :: a(lots) = (/(i, i=1, lots)/)  */\n-              gfc_fatal_error (\"The number of elements in the array constructor \"\n-\t\t\t       \"at %L requires an increase of the allowed %d \"\n-\t\t\t       \"upper limit.   See -fmax-array-constructor \"\n-\t\t\t       \"option\", &expr->where,\n-\t\t\t       gfc_option.flag_max_array_constructor);\n+              gfc_fatal_error_1 (\"The number of elements in the array \"\n+\t\t\t\t \"constructor at %L requires an increase of \"\n+\t\t\t\t \"the allowed %d upper limit. See \"\n+\t\t\t\t \"-fmax-array-constructor option\", &expr->where,\n+\t\t\t\t gfc_option.flag_max_array_constructor);\n \t      return NULL_TREE;\n \t    }\n           if (mpz_cmp_si (c->offset, 0) != 0)"}, {"sha": "a95809cf0dd4ac23fda8b0d833f5258eeb5556fa", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -865,9 +865,9 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n \t{\n \t  /* FIXME.  */\n \t  if (code->expr1->ts.kind != gfc_c_int_kind)\n-\t    gfc_fatal_error (\"Sorry, only support for integer kind %d \"\n-\t\t\t     \"implemented for image-set at %L\",\n-\t\t\t     gfc_c_int_kind, &code->expr1->where);\n+\t    gfc_fatal_error_1 (\"Sorry, only support for integer kind %d \"\n+\t\t\t       \"implemented for image-set at %L\",\n+\t\t\t       gfc_c_int_kind, &code->expr1->where);\n \n \t  gfc_conv_array_parameter (&se, code->expr1, true, NULL, NULL, &len);\n \t  images = se.expr;"}, {"sha": "12536e9a9ef0aeadb44f89ab039cb80aab8de613", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -496,15 +496,17 @@ gfc_init_kinds (void)\n   if (gfc_option.flag_default_integer)\n     {\n       if (!saw_i8)\n-\tfatal_error (\"INTEGER(KIND=8) is not available for -fdefault-integer-8 option\");\n+\tgfc_fatal_error (\"INTEGER(KIND=8) is not available for \"\n+\t\t\t \"%<-fdefault-integer-8%> option\");\n \n       gfc_default_integer_kind = 8;\n \n     }\n   else if (gfc_option.flag_integer4_kind == 8)\n     {\n       if (!saw_i8)\n-\tfatal_error (\"INTEGER(KIND=8) is not available for -finteger-4-integer-8 option\");\n+\tgfc_fatal_error (\"INTEGER(KIND=8) is not available for \"\n+\t\t\t \"%<-finteger-4-integer-8%> option\");\n \n       gfc_default_integer_kind = 8;\n     }\n@@ -522,28 +524,32 @@ gfc_init_kinds (void)\n   if (gfc_option.flag_default_real)\n     {\n       if (!saw_r8)\n-\tfatal_error (\"REAL(KIND=8) is not available for -fdefault-real-8 option\");\n+\tgfc_fatal_error (\"REAL(KIND=8) is not available for \"\n+\t\t\t \"%<-fdefault-real-8%> option\");\n \n       gfc_default_real_kind = 8;\n     }\n   else if (gfc_option.flag_real4_kind == 8)\n   {\n     if (!saw_r8)\n-      fatal_error (\"REAL(KIND=8) is not available for -freal-4-real-8 option\");\n+      gfc_fatal_error (\"REAL(KIND=8) is not available for %<-freal-4-real-8%> \"\n+\t\t       \"option\");\n \n     gfc_default_real_kind = 8;\n   }\n   else if (gfc_option.flag_real4_kind == 10)\n   {\n     if (!saw_r10)\n-      fatal_error (\"REAL(KIND=10) is not available for -freal-4-real-10 option\");\n+      gfc_fatal_error (\"REAL(KIND=10) is not available for \"\n+\t\t       \"%<-freal-4-real-10%> option\");\n \n     gfc_default_real_kind = 10;\n   }\n   else if (gfc_option.flag_real4_kind == 16)\n   {\n     if (!saw_r16)\n-      fatal_error (\"REAL(KIND=16) is not available for -freal-4-real-16 option\");\n+      gfc_fatal_error (\"REAL(KIND=16) is not available for \"\n+\t\t       \"%<-freal-4-real-16%> option\");\n \n     gfc_default_real_kind = 16;\n   }\n@@ -557,7 +563,8 @@ gfc_init_kinds (void)\n      specified without -fdefault-double, we use kind=16, if it's available.\n      Otherwise we do not change anything.  */\n   if (gfc_option.flag_default_double && !gfc_option.flag_default_real)\n-    fatal_error (\"Use of -fdefault-double-8 requires -fdefault-real-8\");\n+    gfc_fatal_error (\"Use of %<-fdefault-double-8%> requires \"\n+\t\t     \"%<-fdefault-real-8%>\");\n \n   if (gfc_option.flag_default_real && gfc_option.flag_default_double && saw_r8)\n     gfc_default_double_kind = 8;\n@@ -566,21 +573,24 @@ gfc_init_kinds (void)\n   else if (gfc_option.flag_real8_kind == 4)\n     {\n       if (!saw_r4)\n-\tfatal_error (\"REAL(KIND=4) is not available for -freal-8-real-4 option\");\n+\tgfc_fatal_error (\"REAL(KIND=4) is not available for \"\n+\t\t\t \"%<-freal-8-real-4%> option\");\n \n \tgfc_default_double_kind = 4;\n     }\n   else if (gfc_option.flag_real8_kind == 10 )\n     {\n       if (!saw_r10)\n-\tfatal_error (\"REAL(KIND=10) is not available for -freal-8-real-10 option\");\n+\tgfc_fatal_error (\"REAL(KIND=10) is not available for \"\n+\t\t\t \"%<-freal-8-real-10%> option\");\n \n \tgfc_default_double_kind = 10;\n     }\n   else if (gfc_option.flag_real8_kind == 16 )\n     {\n       if (!saw_r16)\n-\tfatal_error (\"REAL(KIND=10) is not available for -freal-8-real-16 option\");\n+\tgfc_fatal_error (\"REAL(KIND=10) is not available for \"\n+\t\t\t \"%<-freal-8-real-16%> option\");\n \n \tgfc_default_double_kind = 16;\n     }"}, {"sha": "33596557ba9f50768ed1364baddeff48740a07a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -1,3 +1,10 @@\n+2014-11-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/binding_label_tests_4.f03: Add dg-excess-errors.\n+\t* gfortran.dg/coarray_9.f90: Ditto.\n+\t* gfortran.dg/empty_label.f: Ditto.\n+\t* gfortran.dg/empty_label.f90: Ditto.\n+\n 2014-11-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fpconv-1.c: Adjust for -mupper-regs-df"}, {"sha": "69db9756f6e2a02d424e97744400e780526c6782", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_4.f03", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -20,5 +20,4 @@ module C\n use A\n use B ! { dg-error \"Can't open module file\" }\n end module C\n-\n-\n+! { dg-excess-errors \"compilation terminated\" }"}, {"sha": "0a4dbeccc506e5e4c5821b8ca789f4e06700fc85", "filename": "gcc/testsuite/gfortran.dg/coarray_9.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_9.f90?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -16,3 +16,4 @@\n end critical ! \"Expecting END PROGRAM statement\"  (but error above is fatal)\n \n end\n+! { dg-excess-errors \"compilation terminated\" }"}, {"sha": "5abf9d9f950b5177a73178c78cbc7f0f42ce7fde", "filename": "gcc/testsuite/gfortran.dg/empty_label.f", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -3,3 +3,4 @@\n 100   ! { dg-warning \"empty statement\" }\n       end\n C { dg-error \"count reached limit\" \"\" { target *-*-* } 0 }\n+C { dg-excess-errors \"compilation terminated\" }"}, {"sha": "d7f4a8f11948ba3f4920f15dbffae8675aad214b", "filename": "gcc/testsuite/gfortran.dg/empty_label.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc05d116529c5199e5d0dc8509b4042b4167b1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f90?ref=ddc05d116529c5199e5d0dc8509b4042b4167b1f", "patch": "@@ -3,3 +3,4 @@\n 100   ! { dg-warning \"empty statement\" }\n end\n ! { dg-error \"count reached limit\" \"\" { target *-*-* } 0 }\n+! { dg-excess-errors \"compilation terminated\" }"}]}