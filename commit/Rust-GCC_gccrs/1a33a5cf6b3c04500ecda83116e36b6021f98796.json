{"sha": "1a33a5cf6b3c04500ecda83116e36b6021f98796", "node_id": "C_kwDOANBUbNoAKDFhMzNhNWNmNmIzYzA0NTAwZWNkYTgzMTE2ZTM2YjYwMjFmOTg3OTY", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-03-07T18:37:08Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-08T10:23:54Z"}, "message": "Add coherence related lang_items\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-lang-item.h\n\t(RustLangItem::ItemType): New enumerators.\n\t(RustLangItem::Parse): Parse new enumerators.\n\t(RustLangItem::ToString): Handle new enumerators.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/lang-impl.rs: New test.", "tree": {"sha": "3b360074187ba93337e06f5d02cba6df00977c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b360074187ba93337e06f5d02cba6df00977c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a33a5cf6b3c04500ecda83116e36b6021f98796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a33a5cf6b3c04500ecda83116e36b6021f98796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a33a5cf6b3c04500ecda83116e36b6021f98796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a33a5cf6b3c04500ecda83116e36b6021f98796/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e"}], "stats": {"total": 233, "additions": 210, "deletions": 23}, "files": [{"sha": "cc069e1a309f9d9b7aede8e58fc8eb5e9f424fdf", "filename": "gcc/rust/util/rust-lang-item.h", "status": "modified", "additions": 208, "deletions": 23, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33a5cf6b3c04500ecda83116e36b6021f98796/gcc%2Frust%2Futil%2Frust-lang-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33a5cf6b3c04500ecda83116e36b6021f98796/gcc%2Frust%2Futil%2Frust-lang-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-lang-item.h?ref=1a33a5cf6b3c04500ecda83116e36b6021f98796", "patch": "@@ -68,11 +68,6 @@ class RustLangItem\n     RANGE_INCLUSIVE,\n     RANGE_TO_INCLUSIVE,\n \n-    // https://github.com/rust-lang/rust/blob/master/library/core/src/ptr/const_ptr.rs\n-    CONST_PTR,\n-    MUT_PTR,\n-    CONST_SLICE_PTR,\n-\n     // https://github.com/rust-lang/rust/blob/master/library/core/src/marker.rs\n     PHANTOM_DATA,\n \n@@ -85,6 +80,40 @@ class RustLangItem\n     CLONE,\n     SIZED,\n \n+    // https://github.com/Rust-GCC/gccrs/issues/1896\n+    // https://github.com/rust-lang/rust/commit/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc\n+    // https://github.com/Rust-GCC/gccrs/issues/1494\n+    // https://github.com/rust-lang/rust/blob/master/library/core/src/ptr/const_ptr.rs\n+    SLICE_ALLOC,\n+    SLICE_U8_ALLOC,\n+    STR_ALLOC,\n+    ARRAY,\n+    BOOL,\n+    CHAR,\n+    F32,\n+    F64,\n+    I8,\n+    I16,\n+    I32,\n+    I64,\n+    I128,\n+    ISIZE,\n+    U8,\n+    U16,\n+    U32,\n+    U64,\n+    U128,\n+    USIZE,\n+    CONST_PTR,\n+    CONST_SLICE_PTR,\n+    MUT_PTR,\n+    MUT_SLICE_PTR,\n+    SLICE_U8,\n+    SLICE,\n+    STR,\n+    F32_RUNTIME,\n+    F64_RUNTIME,\n+\n     // delimiter\n     UNKNOWN,\n   };\n@@ -219,18 +248,6 @@ class RustLangItem\n       {\n \treturn ItemType::RANGE_TO_INCLUSIVE;\n       }\n-    else if (item.compare (\"const_ptr\") == 0)\n-      {\n-\treturn ItemType::CONST_PTR;\n-      }\n-    else if (item.compare (\"mut_ptr\") == 0)\n-      {\n-\treturn ItemType::MUT_PTR;\n-      }\n-    else if (item.compare (\"const_slice_ptr\") == 0)\n-      {\n-\treturn ItemType::CONST_SLICE_PTR;\n-      }\n     else if (item.compare (\"phantom_data\") == 0)\n       {\n \treturn ItemType::PHANTOM_DATA;\n@@ -255,6 +272,122 @@ class RustLangItem\n       {\n \treturn ItemType::SIZED;\n       }\n+    else if (item.compare (\"slice_alloc\") == 0)\n+      {\n+\treturn ItemType::SLICE_ALLOC;\n+      }\n+    else if (item.compare (\"slice_u8_alloc\") == 0)\n+      {\n+\treturn ItemType::SLICE_U8_ALLOC;\n+      }\n+    else if (item.compare (\"str_alloc\") == 0)\n+      {\n+\treturn ItemType::STR_ALLOC;\n+      }\n+    else if (item.compare (\"array\") == 0)\n+      {\n+\treturn ItemType::ARRAY;\n+      }\n+    else if (item.compare (\"bool\") == 0)\n+      {\n+\treturn ItemType::BOOL;\n+      }\n+    else if (item.compare (\"char\") == 0)\n+      {\n+\treturn ItemType::CHAR;\n+      }\n+    else if (item.compare (\"f32\") == 0)\n+      {\n+\treturn ItemType::F32;\n+      }\n+    else if (item.compare (\"f64\") == 0)\n+      {\n+\treturn ItemType::F64;\n+      }\n+    else if (item.compare (\"i8\") == 0)\n+      {\n+\treturn ItemType::I8;\n+      }\n+    else if (item.compare (\"i16\") == 0)\n+      {\n+\treturn ItemType::I16;\n+      }\n+    else if (item.compare (\"i32\") == 0)\n+      {\n+\treturn ItemType::I32;\n+      }\n+    else if (item.compare (\"i64\") == 0)\n+      {\n+\treturn ItemType::I64;\n+      }\n+    else if (item.compare (\"i128\") == 0)\n+      {\n+\treturn ItemType::I128;\n+      }\n+    else if (item.compare (\"isize\") == 0)\n+      {\n+\treturn ItemType::ISIZE;\n+      }\n+    else if (item.compare (\"u8\") == 0)\n+      {\n+\treturn ItemType::U8;\n+      }\n+    else if (item.compare (\"u16\") == 0)\n+      {\n+\treturn ItemType::U16;\n+      }\n+    else if (item.compare (\"u32\") == 0)\n+      {\n+\treturn ItemType::U32;\n+      }\n+    else if (item.compare (\"u64\") == 0)\n+      {\n+\treturn ItemType::U64;\n+      }\n+    else if (item.compare (\"u128\") == 0)\n+      {\n+\treturn ItemType::U128;\n+      }\n+    else if (item.compare (\"usize\") == 0)\n+      {\n+\treturn ItemType::USIZE;\n+      }\n+    else if (item.compare (\"const_ptr\") == 0)\n+      {\n+\treturn ItemType::CONST_PTR;\n+      }\n+    else if (item.compare (\"const_slice_ptr\") == 0)\n+      {\n+\treturn ItemType::CONST_SLICE_PTR;\n+      }\n+    else if (item.compare (\"mut_ptr\") == 0)\n+      {\n+\treturn ItemType::MUT_PTR;\n+      }\n+    else if (item.compare (\"mut_slice_ptr\") == 0)\n+      {\n+\treturn ItemType::MUT_SLICE_PTR;\n+      }\n+    else if (item.compare (\"slice_u8\") == 0)\n+      {\n+\treturn ItemType::SLICE_U8;\n+      }\n+    else if (item.compare (\"slice\") == 0)\n+      {\n+\treturn ItemType::SLICE;\n+      }\n+    else if (item.compare (\"str\") == 0)\n+      {\n+\treturn ItemType::STR;\n+      }\n+    else if (item.compare (\"f32_runtime\") == 0)\n+      {\n+\treturn ItemType::F32_RUNTIME;\n+      }\n+    else if (item.compare (\"f64_runtime\") == 0)\n+      {\n+\treturn ItemType::F64_RUNTIME;\n+      }\n \n     return ItemType::UNKNOWN;\n   }\n@@ -327,12 +460,6 @@ class RustLangItem\n \treturn \"RangeInclusive\";\n       case RANGE_TO_INCLUSIVE:\n \treturn \"RangeToInclusive\";\n-      case CONST_PTR:\n-\treturn \"const_ptr\";\n-      case MUT_PTR:\n-\treturn \"mut_ptr\";\n-      case CONST_SLICE_PTR:\n-\treturn \"const_slice_ptr\";\n       case PHANTOM_DATA:\n \treturn \"phantom_data\";\n       case FN_ONCE:\n@@ -345,6 +472,64 @@ class RustLangItem\n \treturn \"clone\";\n       case SIZED:\n \treturn \"sized\";\n+      case SLICE_ALLOC:\n+\treturn \"slice_alloc\";\n+      case SLICE_U8_ALLOC:\n+\treturn \"slice_u8_alloc\";\n+      case STR_ALLOC:\n+\treturn \"str_alloc\";\n+      case ARRAY:\n+\treturn \"array\";\n+      case BOOL:\n+\treturn \"bool\";\n+      case CHAR:\n+\treturn \"char\";\n+      case F32:\n+\treturn \"f32\";\n+      case F64:\n+\treturn \"f64\";\n+      case I8:\n+\treturn \"i8\";\n+      case I16:\n+\treturn \"i16\";\n+      case I32:\n+\treturn \"i32\";\n+      case I64:\n+\treturn \"i64\";\n+      case I128:\n+\treturn \"i128\";\n+      case ISIZE:\n+\treturn \"isize\";\n+      case U8:\n+\treturn \"u8\";\n+      case U16:\n+\treturn \"u16\";\n+      case U32:\n+\treturn \"u32\";\n+      case U64:\n+\treturn \"u64\";\n+      case U128:\n+\treturn \"u128\";\n+      case USIZE:\n+\treturn \"usize\";\n+      case CONST_PTR:\n+\treturn \"const_ptr\";\n+      case CONST_SLICE_PTR:\n+\treturn \"const_slice_ptr\";\n+      case MUT_PTR:\n+\treturn \"mut_ptr\";\n+      case MUT_SLICE_PTR:\n+\treturn \"mut_slice_ptr\";\n+      case SLICE_U8:\n+\treturn \"slice_u8\";\n+      case SLICE:\n+\treturn \"slice\";\n+      case STR:\n+\treturn \"str\";\n+      case F32_RUNTIME:\n+\treturn \"f32_runtime\";\n+      case F64_RUNTIME:\n+\treturn \"f64_runtime\";\n \n       case UNKNOWN:\n \treturn \"<UNKNOWN>\";"}, {"sha": "cff74c27e0c9ebc2dad42065669039abce617279", "filename": "gcc/testsuite/rust/compile/lang-impl.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33a5cf6b3c04500ecda83116e36b6021f98796/gcc%2Ftestsuite%2Frust%2Fcompile%2Flang-impl.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33a5cf6b3c04500ecda83116e36b6021f98796/gcc%2Ftestsuite%2Frust%2Fcompile%2Flang-impl.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Flang-impl.rs?ref=1a33a5cf6b3c04500ecda83116e36b6021f98796", "patch": "@@ -0,0 +1,2 @@\n+#[lang = \"i8\"]\n+impl i32 {}"}]}