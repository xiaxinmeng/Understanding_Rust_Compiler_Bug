{"sha": "75291c57b91d9a328fbb19dcc01195fb1ddc8468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyOTFjNTdiOTFkOWEzMjhmYmIxOWRjYzAxMTk1ZmIxZGRjODQ2OA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2012-01-03T11:44:34Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2012-01-03T11:44:34Z"}, "message": "system.h: Prior to #define, #undef fopen and freopen unconditionally.\n\ngcc/\n        * system.h: Prior to #define, #undef fopen and freopen unconditionally.\n\nlibcpp/\n        * system.h: Likewise.\n\nFrom-SVN: r182837", "tree": {"sha": "d01ba43fca5c02d7240ec034eebf92403ed711a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01ba43fca5c02d7240ec034eebf92403ed711a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75291c57b91d9a328fbb19dcc01195fb1ddc8468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75291c57b91d9a328fbb19dcc01195fb1ddc8468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75291c57b91d9a328fbb19dcc01195fb1ddc8468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75291c57b91d9a328fbb19dcc01195fb1ddc8468/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6588d71129e681d39f02cf62cf73cc94dce23781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6588d71129e681d39f02cf62cf73cc94dce23781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6588d71129e681d39f02cf62cf73cc94dce23781"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "dd3c6d7a2ff024ec76d110fc06c8a77c3d39af2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75291c57b91d9a328fbb19dcc01195fb1ddc8468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75291c57b91d9a328fbb19dcc01195fb1ddc8468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75291c57b91d9a328fbb19dcc01195fb1ddc8468", "patch": "@@ -1,3 +1,7 @@\n+2012-01-03  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* system.h: Prior to #define, #undef fopen and freopen unconditionally.\n+\n 2012-01-03  Olivier Hainque  <hainque@adacore.com>\n \n \t* collect2.c (main): In AIX specific computations for vector"}, {"sha": "51520e19f51cd1372068cb4dcd9ea351c5a63e9c", "filename": "gcc/system.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75291c57b91d9a328fbb19dcc01195fb1ddc8468/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75291c57b91d9a328fbb19dcc01195fb1ddc8468/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=75291c57b91d9a328fbb19dcc01195fb1ddc8468", "patch": "@@ -47,9 +47,14 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Use the unlocked open routines from libiberty.  */\n-#ifdef fopen /* fopen is a #define on VMS.  */\n-#undef fopen\n-#endif\n+\n+/* Some of these are #define on some systems, e.g. on AIX to redirect\n+   the names to 64bit capable functions for LARGE_FILES support. These\n+   redefs are pointless here so we can override them.  */\n+\n+#undef fopen \n+#undef freopen \n+\n #define fopen(PATH,MODE) fopen_unlocked(PATH,MODE)\n #define fdopen(FILDES,MODE) fdopen_unlocked(FILDES,MODE)\n #define freopen(PATH,MODE,STREAM) freopen_unlocked(PATH,MODE,STREAM)"}, {"sha": "dfe18d08760afd397e736e34ee487235286d8b88", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75291c57b91d9a328fbb19dcc01195fb1ddc8468/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75291c57b91d9a328fbb19dcc01195fb1ddc8468/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=75291c57b91d9a328fbb19dcc01195fb1ddc8468", "patch": "@@ -1,3 +1,7 @@\n+2012-01-03  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* system.h: Prior to #define, #undef fopen and freopen unconditionally.\n+\n 2011-12-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (CLK_GNUC1X): Change to CLK_GNUC11."}, {"sha": "2a1f7096703b904f9ac896c23725f5f23dd2521a", "filename": "libcpp/system.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75291c57b91d9a328fbb19dcc01195fb1ddc8468/libcpp%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75291c57b91d9a328fbb19dcc01195fb1ddc8468/libcpp%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsystem.h?ref=75291c57b91d9a328fbb19dcc01195fb1ddc8468", "patch": "@@ -44,6 +44,14 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Use the unlocked open routines from libiberty.  */\n+\n+/* Some of these are #define on some systems, e.g. on AIX to redirect\n+   the names to 64bit capable functions for LARGE_FILES support. These\n+   redefs are pointless here so we can override them.  */\n+    \n+#undef fopen \n+#undef freopen \n+\n #define fopen(PATH,MODE) fopen_unlocked(PATH,MODE)\n #define fdopen(FILDES,MODE) fdopen_unlocked(FILDES,MODE)\n #define freopen(PATH,MODE,STREAM) freopen_unlocked(PATH,MODE,STREAM)"}]}