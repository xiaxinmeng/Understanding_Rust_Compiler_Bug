{"sha": "3a7a271921e26d4565c0ab689dae428de3009e27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3YTI3MTkyMWUyNmQ0NTY1YzBhYjY4OWRhZTQyOGRlMzAwOWUyNw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-05T20:36:46Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-05T20:36:46Z"}, "message": "(storehi): Use match_operand for operand 0.\n\nUse gen_lowpart to change mode of operand 0.\n(storeinthi): Use match_operand for operand 0.\nChange output code to reassign operand 0.\n(truncsihi2, truncsiqi2, trunchiqi2): Remove these patterns.\n\nFrom-SVN: r2057", "tree": {"sha": "5439a174c7a6debf22927da51897fa53dfd86b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5439a174c7a6debf22927da51897fa53dfd86b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a7a271921e26d4565c0ab689dae428de3009e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7a271921e26d4565c0ab689dae428de3009e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7a271921e26d4565c0ab689dae428de3009e27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7a271921e26d4565c0ab689dae428de3009e27/comments", "author": null, "committer": null, "parents": [{"sha": "b18a7b614f09e400d358981359c324688e3a982c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18a7b614f09e400d358981359c324688e3a982c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b18a7b614f09e400d358981359c324688e3a982c"}], "stats": {"total": 60, "additions": 7, "deletions": 53}, "files": [{"sha": "46d43f068bcc1cf641968b70c669b3d24c5a7968", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 53, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7a271921e26d4565c0ab689dae428de3009e27/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7a271921e26d4565c0ab689dae428de3009e27/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3a7a271921e26d4565c0ab689dae428de3009e27", "patch": "@@ -469,47 +469,8 @@\n   \"*\n   return (arm_output_asm_insn (\\\"fltd\\\\t%0, %1\\\", operands));\n \")\n-\f\n-;; Truncation insns\n-\n-(define_insn \"truncsiqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=mr\")\n-        (truncate:QI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"*\n-  if (GET_CODE (operands[0]) == MEM)\n-    return (arm_output_asm_insn (\\\"strb\\\\t%1, %0\\\\t@ truncsiqi2\\\", operands));\n-  else\n-    return (arm_output_asm_insn (\\\"and\\\\t%0, %1, #255\\\\t@ truncsiqi2\\\", operands));\n-\")\n \n-(define_insn \"trunchiqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=mr\")\n-        (truncate:QI (match_operand:HI 1 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"*\n-  if (GET_CODE(operands[0]) == MEM)\n-    return (arm_output_asm_insn (\\\"strb\\\\t%1, %0\\\\t@ trunchiqi2\\\", operands));\n-  else\n-    return (arm_output_asm_insn (\\\"and\\\\t%0, %1, #255\\\\t@ trunchiqi2\\\", operands));\n-\")\n-\n-;; Mode is changed to SI below\n-\n-(define_expand \"truncsihi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (ashift:SI (match_operand:HI 1 \"register_operand\" \"\")\n-                   (const_int 16)))\n-   (set (match_dup 0)\n-        (ashiftrt:SI (match_dup 0) (const_int 16)))]\n-  \"\"\n-  \"\n-  if (GET_CODE (operands[1]) == SUBREG)\n-      operands[1] = gen_rtx (SUBREG, SImode, SUBREG_REG (operands[1]),\n-                             SUBREG_WORD (operands[1]));\n-  else\n-      operands[1] = gen_rtx(SUBREG, SImode, operands[1], 0);\n-\")\n+;; Truncation insns\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n@@ -751,15 +712,14 @@\n ;; Operand 2 is a temporary (SImode).\n ;; Operand 3 is a temporary (SImode).\n ;; Operand 4 is a temporary (SImode).\n-;; Operand 5 is a local temporary (SImode).\n \n (define_expand \"storehi\"\n   [;; compute the address into a register\n    (set (match_operand:SI 2 \"register_operand\" \"\")\n         (match_operand:SI 1 \"address_operand\" \"\"))\n    ;; get the half word into a full word register\n    (set (match_operand:SI 3 \"register_operand\" \"\")\n-        (match_dup 5))\n+        (match_operand:HI 0 \"register_operand\" \"\"))\n    ;; store the low byte\n    (set (mem:QI (match_dup 2))\n         (truncate:QI (match_dup 3)))\n@@ -771,12 +731,7 @@\n         (truncate:QI (match_dup 4)))]\n   \"\"\n   \"\n-  if (GET_CODE(operands[0]) == SUBREG)\n-    operands[5] = gen_rtx(SUBREG, SImode, SUBREG_REG(operands[0]),\n-              SUBREG_WORD(operands[0]));\n-  else\n-    operands[5] = gen_rtx(SUBREG, SImode, operands[0], 0);\n-  \n+  operands[0] = gen_lowpart (SImode, operands[0]);\n \")\n \n ;; Subroutine to store a half word integer constant into memory.\n@@ -786,21 +741,20 @@\n ;; Operand 3 is a temporary (QImode).\n ;; Operand 4 is a temporary (QImode).\n ;; Operand 5 is a local CONST_INT.\n-;; Operand 6 is a local CONST_INT.\n \n (define_expand \"storeinthi\"\n   [;; compute the address into a register\n    (set (match_operand:SI 2 \"register_operand\" \"\")\n         (match_operand:SI 1 \"address_operand\" \"\"))\n    ;; load the low byte\n    (set (match_operand:QI 3 \"register_operand\" \"\")\n-        (match_dup 5))\n+        (match_operand:SI 0 \"\" \"\"))\n    ;; store the low byte\n    (set (mem:QI (match_dup 2))\n         (match_dup 3))\n    ;; load the high byte\n    (set (match_operand:QI 4 \"register_operand\" \"\")\n-        (match_dup 6))\n+        (match_dup 5))\n    ;; store the high byte\n    (set (mem:QI (plus (match_dup 2) (const_int 1)))\n         (match_dup 4))]\n@@ -809,8 +763,8 @@\n     {\n       int value = INTVAL(operands[0]);\n \n-      operands[5] = gen_rtx(CONST_INT, VOIDmode, value & 255);\n-      operands[6] = gen_rtx(CONST_INT, VOIDmode,(value>>8) & 255);\n+      operands[0] = gen_rtx(CONST_INT, VOIDmode, value & 255);\n+      operands[5] = gen_rtx(CONST_INT, VOIDmode,(value>>8) & 255);\n     }\n \")\n "}]}