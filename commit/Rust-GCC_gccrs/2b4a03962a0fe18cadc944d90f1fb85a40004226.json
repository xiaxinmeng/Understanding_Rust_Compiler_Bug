{"sha": "2b4a03962a0fe18cadc944d90f1fb85a40004226", "node_id": "C_kwDOANBUbNoAKDJiNGEwMzk2MmEwZmUxOGNhZGM5NDRkOTBmMWZiODVhNDAwMDQyMjY", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-11-04T07:50:55Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-04T08:03:45Z"}, "message": "Support Intel AMX-FP16 ISA\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_available_features): Detect\n\tamx-fp16.\n\t* common/config/i386/i386-common.cc (OPTION_MASK_ISA2_AMX_FP16_SET,\n\tOPTION_MASK_ISA2_AMX_FP16_UNSET): New macros.\n\t(ix86_handle_option): Handle -mamx-fp16.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_AMX_FP16.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\tamx-fp16.\n\t* config.gcc: Add amxfp16intrin.h.\n\t* config/i386/cpuid.h (bit_AMX_FP16): New.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__AMX_FP16__.\n\t* config/i386/i386-isa.def: Add DEF_PTA for AMX_FP16.\n\t* config/i386/i386-options.cc (isa2_opts): Add -mamx-fp16.\n\t(ix86_valid_target_attribute_inner_p): Add new ATTR.\n\t(ix86_option_override_internal): Handle AMX-FP16.\n\t* config/i386/i386.opt: Add -mamx-fp16.\n\t* config/i386/immintrin.h: Include amxfp16intrin.h.\n\t* doc/extend.texi: Document -mamx-fp16.\n\t* doc/invoke.texi: Document amx-fp16.\n\t* doc/sourcebuild.texi: Document amx_fp16.\n\t* config/i386/amxfp16intrin.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/i386-2.C: Add -mamx-fp16.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/sse-12.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* lib/target-supports.exp: (check_effective_target_amx_fp16):\n\tNew proc.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/amx-check.h: Add AMX_FP16.\n\t* gcc.target/i386/amx-helper.h: New file to support amx-fp16.\n\t* gcc.target/i386/amxfp16-asmatt-1.c: New test.\n\t* gcc.target/i386/amxfp16-asmintel-1.c: Ditto.\n\t* gcc.target/i386/amxfp16-dpfp16ps-2.c: Ditto.\n\nCo-authored-by: Haochen Jiang <haochen.jiang@intel.com>", "tree": {"sha": "09ae84a2b4629e6f3283401bb9221cc97f7c5d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09ae84a2b4629e6f3283401bb9221cc97f7c5d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b4a03962a0fe18cadc944d90f1fb85a40004226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4a03962a0fe18cadc944d90f1fb85a40004226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4a03962a0fe18cadc944d90f1fb85a40004226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4a03962a0fe18cadc944d90f1fb85a40004226/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d201bd1aab513266eb7f3adabfb3fafc6578228f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d201bd1aab513266eb7f3adabfb3fafc6578228f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d201bd1aab513266eb7f3adabfb3fafc6578228f"}], "stats": {"total": 276, "additions": 262, "deletions": 14}, "files": [{"sha": "a38c1b656021d66cc9f14911a7a7489c59c73479", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -855,6 +855,11 @@ get_available_features (struct __processor_model *cpu_model,\n \t  if (eax & bit_AVX512BF16)\n \t    set_feature (FEATURE_AVX512BF16);\n \t}\n+      if (amx_usable)\n+\t{\n+\t  if (eax & bit_AMX_FP16)\n+\t    set_feature (FEATURE_AMX_FP16);\n+\t}\n     }\n \n   /* Get Advanced Features at level 0xd (eax = 0xd, ecx = 1). */"}, {"sha": "a044e28d25f5e5dd6ba2b0775425f8884b0fbe64", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -111,6 +111,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVXVNNIINT8_SET OPTION_MASK_ISA2_AVXVNNIINT8\n #define OPTION_MASK_ISA2_AVXNECONVERT_SET OPTION_MASK_ISA2_AVXNECONVERT\n #define OPTION_MASK_ISA2_CMPCCXADD_SET OPTION_MASK_ISA2_CMPCCXADD\n+#define OPTION_MASK_ISA2_AMX_FP16_SET OPTION_MASK_ISA2_AMX_FP16\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -285,6 +286,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVXVNNIINT8_UNSET OPTION_MASK_ISA2_AVXVNNIINT8\n #define OPTION_MASK_ISA2_AVXNECONVERT_UNSET OPTION_MASK_ISA2_AVXNECONVERT\n #define OPTION_MASK_ISA2_CMPCCXADD_UNSET OPTION_MASK_ISA2_CMPCCXADD\n+#define OPTION_MASK_ISA2_AMX_FP16_UNSET OPTION_MASK_ISA2_AMX_FP16\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1196,6 +1198,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mamx_fp16:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_FP16_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_FP16_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AMX_FP16_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_FP16_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "014174e1856ab8ca66839be79fed32cd83396fd0", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -248,6 +248,7 @@ enum processor_features\n   FEATURE_AVXVNNIINT8,\n   FEATURE_AVXNECONVERT,\n   FEATURE_CMPCCXADD,\n+  FEATURE_AMX_FP16,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "7c4a71413b5c89e1dc997f05b7fc12532455c56c", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -181,4 +181,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"avxneconvert\", FEATURE_AVXNECONVERT,\n \t\t\tP_NONE, \"-mavxneconvert\")\n   ISA_NAMES_TABLE_ENTRY(\"cmpccxadd\", FEATURE_CMPCCXADD, P_NONE, \"-mcmpccxadd\")\n+  ISA_NAMES_TABLE_ENTRY(\"amx-fp16\", FEATURE_AMX_FP16, P_NONE, \"-mamx-fp16\")\n ISA_NAMES_TABLE_END"}, {"sha": "1191a0df7b0c51fdb7b5b804994255b1fb45cba4", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -423,7 +423,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n \t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\n-\t\t       cmpccxaddintrin.h\"\n+\t\t       cmpccxaddintrin.h amxfp16intrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "6a114741aa9099ebba64051a348e6d828837c214", "filename": "gcc/config/i386/amxfp16intrin.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Famxfp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Famxfp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Famxfp16intrin.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -0,0 +1,46 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <amxfp16intrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AMXFP16INTRIN_H_INCLUDED\n+#define _AMXFP16INTRIN_H_INCLUDED\n+\n+#if defined(__x86_64__)\n+#define _tile_dpfp16ps_internal(dst,src1,src2)\t\t\t\\\n+  __asm__ volatile \\\n+  (\"{tdpfp16ps\\t%%tmm\"#src2\", %%tmm\"#src1\", %%tmm\"#dst\"|tdpfp16ps\\t%%tmm\"#dst\", %%tmm\"#src1\", %%tmm\"#src2\"}\" ::)\n+\n+#define _tile_dpfp16ps(dst,src1,src2)\t\t\t\t\\\n+  _tile_dpfp16ps_internal (dst,src1,src2)\n+\n+#endif\n+\n+#ifdef __DISABLE_AMX_FP16__\n+#undef __DISABLE_AMX_FP16__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AMX_FP16__ */\n+\n+#endif /* _AMXFP16INTRIN_H_INCLUDED */"}, {"sha": "229c15c59503b7fceaeef456a45640e315789b4f", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -28,6 +28,7 @@\n #define bit_AVXVNNI\t(1 << 4)\n #define bit_AVX512BF16\t(1 << 5)\n #define bit_CMPCCXADD\t(1 << 7)\n+#define bit_AMX_FP16\t(1 << 21)\n #define bit_HRESET\t(1 << 22)\n #define bit_AVXIFMA\t(1 << 23)\n "}, {"sha": "ac0087a465327c7a15a9ac08fc093255d0af0db9", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -655,6 +655,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVXNECONVERT__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_CMPCCXADD)\n     def_or_undef (parse_in, \"__CMPCCXADD__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AMX_FP16)\n+    def_or_undef (parse_in, \"__AMX_FP16__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "55b257639573f228a8e35575cf1e9b6871bd2f15", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -113,3 +113,4 @@ DEF_PTA(AVXIFMA)\n DEF_PTA(AVXVNNIINT8)\n DEF_PTA(AVXNECONVERT)\n DEF_PTA(CMPCCXADD)\n+DEF_PTA(AMX_FP16)"}, {"sha": "bbb8307d0b0b39257084ad09e19bdc4f66f8d0fe", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -232,7 +232,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mavxifma\",\tOPTION_MASK_ISA2_AVXIFMA },\n   { \"-mavxvnniint8\",\tOPTION_MASK_ISA2_AVXVNNIINT8 },\n   { \"-mavxneconvert\",   OPTION_MASK_ISA2_AVXNECONVERT },\n-  { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD }\n+  { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD },\n+  { \"-mamx-fp16\",       OPTION_MASK_ISA2_AMX_FP16 }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1084,6 +1085,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avxvnniint8\", OPT_mavxvnniint8),\n     IX86_ATTR_ISA (\"avxneconvert\", OPT_mavxneconvert),\n     IX86_ATTR_ISA (\"cmpccxadd\",   OPT_mcmpccxadd),\n+    IX86_ATTR_ISA (\"amx-fp16\", OPT_mamx_fp16),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "eaa4394634153b6efb1517b33b239a95b56bd62d", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -1234,3 +1234,7 @@ mcmpccxadd\n Target Mask(ISA2_CMPCCXADD) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n CMPCCXADD build-in functions and code generation.\n+\n+mamx-fp16\n+Target Mask(ISA2_AMX_FP16) Var(ix86_isa_flags2) Save\n+Support AMX-FP16 built-in functions and code generation."}, {"sha": "da0f0bc7f6d816aa6b9380cd0b27fe7496cc27a9", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -136,4 +136,6 @@\n \n #include <keylockerintrin.h>\n \n+#include <amxfp16intrin.h>\n+\n #endif /* _IMMINTRIN_H_INCLUDED */"}, {"sha": "8d4475fc61534e903344c1f3d147bbfdc0a488ce", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -7080,6 +7080,11 @@ Enable/disable the generation of the AVXNECONVERT instructions.\n @cindex @code{target(\"cmpccxadd\")} function attribute, x86\n Enable/disable the generation of the CMPccXADD instructions.\n \n+@item amx-fp16\n+@itemx no-amx-fp16\n+@cindex @code{target(\"amx-fp16\")} function attribute, x86\n+Enable/disable the generation of the AMX-FP16 instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "e9207a3a25584f09648e23bd97c4d8a04bcab11f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -1437,7 +1437,7 @@ See RS/6000 and PowerPC Options.\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n--mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd @gol\n+-mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -32981,6 +32981,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mcmpccxadd\n @opindex mcmpccxadd\n+@need 200\n+@itemx -mamx-fp16\n+@opindex mamx-fp16\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -32991,9 +32994,9 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n-AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD or CLDEMOTE extended instruction\n-sets. Each has a corresponding @option{-mno-} option to disable use of these\n-instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16 or CLDEMOTE extended\n+instruction sets. Each has a corresponding @option{-mno-} option to disable\n+use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "5de5e9576d55676cb1ee729773d05ee304507a44", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -2508,6 +2508,9 @@ Target supports the execution of @code{amx-int8} instructions.\n @item amx_bf16\n Target supports the execution of @code{amx-bf16} instructions.\n \n+@item amx_fp16\n+Target supports the execution of @code{amx-fp16} instructions.\n+\n @item cell_hw\n Test system can execute AltiVec and Cell PPU instructions.\n "}, {"sha": "79b84af0a75df97e633979f1ae4a02c4726841fa", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "c811a4454bfef9e032cf1b2acea2f8c0917cd481", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "27dd37bf993396a4e71cc3f80695e0efa2532a55", "filename": "gcc/testsuite/gcc.target/i386/amx-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -213,6 +213,9 @@ main ()\n #ifdef AMX_BF16\n       && __builtin_cpu_supports (\"amx-bf16\")\n #endif\n+#ifdef AMX_FP16\n+      && __builtin_cpu_supports (\"amx-fp16\")\n+#endif\n #ifdef __linux__\n       && request_perm_xtile_data ()\n #endif"}, {"sha": "fe24d7067a522e232de775d336dbe7ef8e8c9779", "filename": "gcc/testsuite/gcc.target/i386/amx-helper.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -0,0 +1,61 @@\n+#ifndef AMX_HELPER_H_INCLUDED\n+#define AMX_HELPER_H_INCLUDED\n+#if defined(AMX_FP16)\n+#include <immintrin.h>\n+#include <xmmintrin.h>\n+#endif\n+#include \"amx-check.h\"\n+\n+typedef union\n+{\n+  _Float16 f16;\n+  uint16_t u;\n+} union16f_uw;\n+\n+#if defined(AMX_FP16)\n+/* Transformation functions between fp16/float */\n+static uint16_t make_f32_fp16 (float f)\n+{\n+  union16f_uw tmp;\n+  __m128 b = _mm_set_ss (f);\n+  __m128h a;\n+  tmp.f16 = _mm_cvtsh_h (_mm_cvtss_sh (a, b));\n+  return tmp.u;\n+}\n+\n+static float make_fp16_f32 (uint16_t fp)\n+{\n+  union16f_uw tmp;\n+  tmp.u = fp;\n+  __m128h b = _mm_set_sh (tmp.f16);\n+  __m128 a;\n+  return _mm_cvtss_f32 (_mm_cvtsh_ss (a, b));\n+}\n+\n+/* Init tile buffer with fp16 pairs */\n+void init_fp16_max_tile_buffer (uint8_t* buf)\n+{\n+  int i, j;\n+  uint16_t* ptr = (uint16_t *) buf;\n+\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 32; j++)\n+    {\n+      float f = 2.5f * i + 1.25f * j;\n+      ptr[i * 32 + j] = make_f32_fp16 (f);\n+    }\n+}\n+\n+/* Init tile fp16 pair buffer with zero */\n+void init_fp16_max_tile_zero_buffer (uint8_t* buf)\n+{\n+  int i, j;\n+  uint16_t* ptr = (uint16_t *) buf;\n+\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 32; j++)\n+      ptr[i * 32 + j] = make_f32_fp16 (0.0f);\n+}\n+#endif\n+\n+#endif"}, {"sha": "09ae6d408f1481bcb69771242302faa6bd158156", "filename": "gcc/testsuite/gcc.target/i386/amxfp16-asmatt-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-asmatt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-asmatt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-asmatt-1.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-fp16\" } */\n+/* { dg-final { scan-assembler \"tdpfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+#include <immintrin.h>\n+\n+#define TMM1 1\n+#define TMM2 2\n+#define TMM3 3\n+\n+void TEST ()\n+{\n+  _tile_dpfp16ps (TMM1, TMM2, TMM3);\n+}"}, {"sha": "a8dff945f23f59446cb502fc87d2aae99024b017", "filename": "gcc/testsuite/gcc.target/i386/amxfp16-asmintel-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-asmintel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-asmintel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-asmintel-1.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-O2 -mamx-fp16 -masm=intel\" } */\n+/* { dg-final { scan-assembler \"tdpfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+#include <immintrin.h>\n+\n+void TEST ()\n+{\n+  _tile_dpfp16ps (1, 2, 3);\n+}"}, {"sha": "2d359a689eac1dc883f2788dc04113289279abf8", "filename": "gcc/testsuite/gcc.target/i386/amxfp16-dpfp16ps-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-dpfp16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-dpfp16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxfp16-dpfp16ps-2.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target amx_tile } */\n+/* { dg-require-effective-target amx_fp16 } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-O2 -mamx-tile -mamx-fp16 -mavx512fp16\" } */\n+#define AMX_FP16\n+#define DO_TEST test_amx_fp16_dpfp16ps\n+void test_amx_fp16_dpfp16ps ();\n+#include \"amx-helper.h\"\n+\n+void calc_matrix_dpfp16ps (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint16_t *src1_buf = (uint16_t *)src1->buf;\n+  uint16_t *src2_buf = (uint16_t *)src2->buf;\n+  float *dst_buf = (float *)dst->buf;\n+  \n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 2; t+=2)\n+\t  {    \n+\t    dst_buf[i * K + k] += \n+\t      (make_fp16_f32 (src1_buf[i * 2 * N + 2 * j + t]) *\n+\t      make_fp16_f32 (src2_buf[j * 2 * K + 2 * k + t])) +\n+\t      (make_fp16_f32 (src1_buf[i * 2 * N + 2 * j + t + 1]) *\n+\t      make_fp16_f32 (src2_buf[j * 2 * K + 2 * k + t + 1]));\n+\t  }\n+\n+}\n+\n+void test_amx_fp16_dpfp16ps ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024], tmp_dst_zero_buf[1024];\n+\n+  init_fp16_max_tile_buffer (tmp_dst_buf);\n+  init_fp16_max_tile_zero_buffer (tmp_dst_zero_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_zero_buf);\n+  init_tile_reg_and_src_with_buffer (2, src1, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (3, src2, tmp_dst_buf);\n+\n+  calc_matrix_dpfp16ps (&dst, &src1, &src2);\n+  \n+  _tile_dpfp16ps (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+\n+  if (!check_float_tile_register (&dst_ref, &dst))\n+    abort ();\n+}"}, {"sha": "710632353747583186d70dbdf2bdbd378025ecf9", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -84,6 +84,7 @@ extern void test_avxifma (void)\t\t\t__attribute__((__target__(\"avxifma\")));\n extern void test_avxvnniint8 (void)\t\t__attribute__((__target__(\"avxvnniint8\")));\n extern void test_avxneconvert (void)\t\t__attribute__((__target__(\"avxneconvert\")));\n extern void test_cmpccxadd (void)\t\t__attribute__((__target__(\"cmpccxadd\")));\n+extern void test_amx_fp16 (void)\t\t__attribute__((__target__(\"amx-fp16\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -169,6 +170,7 @@ extern void test_no_avxifma (void)\t\t__attribute__((__target__(\"no-avxifma\")));\n extern void test_no_avxvnniint8 (void)\t\t__attribute__((__target__(\"no-avxvnniint8\")));\n extern void test_no_avxneconvert (void)\t\t__attribute__((__target__(\"no-avxneconvert\")));\n extern void test_no_cmpccxadd (void)            __attribute__((__target__(\"no-cmpccxadd\")));\n+extern void test_no_amx_fp16 (void)\t\t__attribute__((__target__(\"no-amx-fp16\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "df2684abbb671522e655af83a956cd7181f8cb32", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "ca662f7bd47d1e31b35e0c6944e566dc7689ad61", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "4a47d4093a248a24294bd056e43239ec9df54279", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "178a2fce492b381c56a75679e658b6e0f72aa209", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "ba1310f9f89e5b49a93c56aeae225984c5756bef", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -847,6 +847,6 @@\n #define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16\")\n \n #include <x86intrin.h>"}, {"sha": "30e192f4d46cce29a2f43d195a241c378228dd7f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4a03962a0fe18cadc944d90f1fb85a40004226/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=2b4a03962a0fe18cadc944d90f1fb85a40004226", "patch": "@@ -10122,6 +10122,17 @@ proc check_effective_target_amx_bf16 { } {\n     } \"-mamx-bf16\" ]\n }\n \n+# Return 1 if amx-fp16 instructions can be compiled.\n+proc check_effective_target_amx_fp16 { } {\n+    return [check_no_compiler_messages amx_fp16 object {\n+\tvoid\n+\tfoo ()\n+\t{\n+\t    __asm__ volatile (\"tdpfp16ps\\t%%tmm1, %%tmm2, %%tmm3\" ::);\n+\t}\n+    } \"-mamx-fp16\" ]\n+}\n+\n # Return 1 if vpclmulqdq instructions can be compiled.\n proc check_effective_target_vpclmulqdq { } {\n     return [check_no_compiler_messages vpclmulqdq object {"}]}