{"sha": "e1078cfca6ce48820c55353664830ad13d567ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwNzhjZmNhNmNlNDg4MjBjNTUzNTM2NjQ4MzBhZDEzZDU2N2FlMw==", "commit": {"author": {"name": "Lars Brinkhoff", "email": "lars@nocrew.org", "date": "2001-02-18T20:24:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-18T20:24:10Z"}, "message": "optabs.c (expand_abs): Remove reference to HAVE_contitional_arithmetic.\n\n        * optabs.c (expand_abs): Remove reference to\n        HAVE_contitional_arithmetic.\n        * combine.c (simplify_set): Likewise.\n\nFrom-SVN: r39844", "tree": {"sha": "5d838e7d876763a62364f10f9e0ecd0823a85c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d838e7d876763a62364f10f9e0ecd0823a85c0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1078cfca6ce48820c55353664830ad13d567ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1078cfca6ce48820c55353664830ad13d567ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1078cfca6ce48820c55353664830ad13d567ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1078cfca6ce48820c55353664830ad13d567ae3/comments", "author": {"login": "larsbrinkhoff", "id": 775050, "node_id": "MDQ6VXNlcjc3NTA1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/775050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsbrinkhoff", "html_url": "https://github.com/larsbrinkhoff", "followers_url": "https://api.github.com/users/larsbrinkhoff/followers", "following_url": "https://api.github.com/users/larsbrinkhoff/following{/other_user}", "gists_url": "https://api.github.com/users/larsbrinkhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsbrinkhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsbrinkhoff/subscriptions", "organizations_url": "https://api.github.com/users/larsbrinkhoff/orgs", "repos_url": "https://api.github.com/users/larsbrinkhoff/repos", "events_url": "https://api.github.com/users/larsbrinkhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/larsbrinkhoff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bd241172417b6329baf196858143269c4b362e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd241172417b6329baf196858143269c4b362e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd241172417b6329baf196858143269c4b362e5"}], "stats": {"total": 75, "additions": 7, "deletions": 68}, "files": [{"sha": "63b25d5ce1f4f734ad3f7c784fc5a1935cc820e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1078cfca6ce48820c55353664830ad13d567ae3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1078cfca6ce48820c55353664830ad13d567ae3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1078cfca6ce48820c55353664830ad13d567ae3", "patch": "@@ -1,3 +1,9 @@\n+2001-02-18  Lars Brinkhoff  <lars@nocrew.org>\n+\n+\t* optabs.c (expand_abs): Remove reference to\n+\tHAVE_contitional_arithmetic.\n+\t* combine.c (simplify_set): Likewise.\n+\n 2001-02-18  Richard Henderson  <rth@redhat.com>\n \n \t* ifcvt.c (dead_or_predicable): Don't move code if eh regions"}, {"sha": "b5735be59372974a33caa48e42c990d7b449610f", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1078cfca6ce48820c55353664830ad13d567ae3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1078cfca6ce48820c55353664830ad13d567ae3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e1078cfca6ce48820c55353664830ad13d567ae3", "patch": "@@ -5229,69 +5229,6 @@ simplify_set (x)\n       src = SET_SRC (x);\n     }\n \n-#ifdef HAVE_conditional_arithmetic\n-  /* If we have conditional arithmetic and the operand of a SET is\n-     a conditional expression, replace this with an IF_THEN_ELSE.\n-     We can either have a conditional expression or a MULT of that expression\n-     with a constant.  */\n-  if ((GET_RTX_CLASS (GET_CODE (src)) == '1'\n-       || GET_RTX_CLASS (GET_CODE (src)) == '2'\n-       || GET_RTX_CLASS (GET_CODE (src)) == 'c')\n-      && (GET_RTX_CLASS (GET_CODE (XEXP (src, 0))) == '<'\n-\t  || (GET_CODE (XEXP (src, 0)) == MULT\n-\t      && GET_RTX_CLASS (GET_CODE (XEXP (XEXP (src, 0), 0))) == '<'\n-\t      && GET_CODE (XEXP (XEXP (src, 0), 1)) == CONST_INT)))\n-    {\n-      rtx cond = XEXP (src, 0);\n-      rtx true_val = const1_rtx;\n-      rtx false_arm, true_arm;\n-      rtx reversed;\n-\n-      if (GET_CODE (cond) == MULT)\n-\t{\n-\t  true_val = XEXP (cond, 1);\n-\t  cond = XEXP (cond, 0);\n-\t}\n-\n-      if (GET_RTX_CLASS (GET_CODE (src)) == '1')\n-\t{\n-\t  true_arm = gen_unary (GET_CODE (src), GET_MODE (src),\n-\t\t\t\tGET_MODE (XEXP (src, 0)), true_val);\n-\t  false_arm = gen_unary (GET_CODE (src), GET_MODE (src),\n-\t\t\t\t GET_MODE (XEXP (src, 0)), const0_rtx);\n-\t}\n-      else\n-\t{\n-\t  true_arm = gen_binary (GET_CODE (src), GET_MODE (src),\n-\t\t\t\t true_val, XEXP (src, 1));\n-\t  false_arm = gen_binary (GET_CODE (src), GET_MODE (src),\n-\t\t\t\t  const0_rtx, XEXP (src, 1));\n-\t}\n-\n-      /* Canonicalize if true_arm is the simpler one.  */\n-      if (GET_RTX_CLASS (GET_CODE (true_arm)) == 'o'\n-\t  && GET_RTX_CLASS (GET_CODE (false_arm)) != 'o'\n-\t  && (reversed = reversed_comparison_code (cond, GET_MODE (cond),\n-\t\t\t\t\t\t   XEXP (cond, 0),\n-\t\t\t\t\t\t   XEXP (cond, 1))))\n-\t{\n-\t  rtx temp = true_arm;\n-\n-\t  true_arm = false_arm;\n-\t  false_arm = temp;\n-\n-\t  cond = reversed;\n-\t}\n-\n-      src = gen_rtx_combine (IF_THEN_ELSE, GET_MODE (src),\n-\t\t\t     gen_rtx_combine (GET_CODE (cond), VOIDmode,\n-\t\t\t\t\t      XEXP (cond, 0),\n-\t\t\t\t\t      XEXP (cond, 1)),\n-\t\t\t     true_arm, false_arm);\n-      SUBST (SET_SRC (x), src);\n-    }\n-#endif\n-\n   /* If either SRC or DEST is a CLOBBER of (const_int 0), make this\n      whole thing fail.  */\n   if (GET_CODE (src) == CLOBBER && XEXP (src, 0) == const0_rtx)"}, {"sha": "aa7108add4b58ee0a15a117603b730a6e2955e8b", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1078cfca6ce48820c55353664830ad13d567ae3/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1078cfca6ce48820c55353664830ad13d567ae3/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e1078cfca6ce48820c55353664830ad13d567ae3", "patch": "@@ -2320,11 +2320,8 @@ expand_abs (mode, op0, target, result_unsignedp, safe)\n \n   /* If this machine has expensive jumps, we can do integer absolute\n      value of X as (((signed) x >> (W-1)) ^ x) - ((signed) x >> (W-1)),\n-     where W is the width of MODE.  But don't do this if the machine has\n-     conditional arithmetic since the branches will be converted into\n-     a conditional negation insn.  */\n+     where W is the width of MODE.  */\n \n-#ifndef HAVE_conditional_arithmetic\n   if (GET_MODE_CLASS (mode) == MODE_INT && BRANCH_COST >= 2)\n     {\n       rtx extended = expand_shift (RSHIFT_EXPR, mode, op0,\n@@ -2340,7 +2337,6 @@ expand_abs (mode, op0, target, result_unsignedp, safe)\n       if (temp != 0)\n \treturn temp;\n     }\n-#endif\n \n   /* If that does not win, use conditional jump and negate.  */\n "}]}