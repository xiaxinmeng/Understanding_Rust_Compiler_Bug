{"sha": "7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1YjQwN2ZhMmY3ZGVlN2NmYTY2M2Y3ZDVjNDUyMWZhNGJlMDBjOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-04-16T21:35:34Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-04-16T21:35:34Z"}, "message": "[PR c++/85039] no type definitions in builtin offsetof\n\nTypes defined within a __builtin_offsetof argument don't always get\nproperly recorded as members of their context types, so if they're\nanonymous, we may fail to assign them an anon type index for mangling\nand ICE.\n\nWe shouldn't allow types to be introduced in __builtin_offsetof, I\nthink, and Jason says the std committee agrees, so I've arranged for\nus to reject them.\n\nEven then, we still parse the definitions and attempt to assign\nmangled names to its member functions, so the ICE remains.  Since\nwe've already reported an error, we might as well complete the name\nassignment with an arbitrary index, thus avoiding the ICE.\n\nWe used to have a test that expected to be able to define types in\n__builtin_offsetof; this patch removes that specific test.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/85039\n\t* parser.c (cp_parser_builtin_offset): Reject type definitions.\n\t* mangle.c (nested_anon_class_index): Avoid crash returning -1\n\tif we've seen errors.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/85039\n\t* g++.dg/pr85039-1.C: New.\n\t* g++.dg/pr85039-2.C: New.\n\t* g++.dg/parse/semicolon3.C: Remove test_offsetof.\n\nFrom-SVN: r259423", "tree": {"sha": "67da6c84e9f4c9931dbc864c087f4b01d201ee64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67da6c84e9f4c9931dbc864c087f4b01d201ee64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/comments", "author": null, "committer": null, "parents": [{"sha": "34722c3669ee87bd6754d4346e12e822641b0cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34722c3669ee87bd6754d4346e12e822641b0cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34722c3669ee87bd6754d4346e12e822641b0cd7"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "954127f3c28c5226d075a67029d3d671d73a9a04", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -1,3 +1,10 @@\n+2018-04-16  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/85039\n+\t* parser.c (cp_parser_builtin_offset): Reject type definitions.\n+\t* mangle.c (nested_anon_class_index): Avoid crash returning -1\n+\tif we've seen errors.\n+\n 2018-04-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/85385"}, {"sha": "a7f9d686345d2cff9558e5cd5d77c98f647f2178", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -1623,6 +1623,9 @@ nested_anon_class_index (tree type)\n \t  ++index;\n       }\n \n+  if (seen_error ())\n+    return -1;\n+\n   gcc_unreachable ();\n }\n "}, {"sha": "bf46165f5ae1a4d468e7c77750b4fab2e75f5027", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -9823,7 +9823,13 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   parens.require_open (parser);\n   /* Parse the type-id.  */\n   location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n-  type = cp_parser_type_id (parser);\n+  {\n+    const char *saved_message = parser->type_definition_forbidden_message;\n+    parser->type_definition_forbidden_message\n+      = G_(\"types may not be defined within __builtin_offsetof\");\n+    type = cp_parser_type_id (parser);\n+    parser->type_definition_forbidden_message = saved_message;\n+  }\n   /* Look for the `,'.  */\n   cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n   token = cp_lexer_peek_token (parser->lexer);"}, {"sha": "33258e6f4fc3a7c17f5fd980817d08c3462cbe2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -1,3 +1,10 @@\n+2018-04-16  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/85039\n+\t* g++.dg/pr85039-1.C: New.\n+\t* g++.dg/pr85039-2.C: New.\n+\t* g++.dg/parse/semicolon3.C: Remove test_offsetof.\n+\n 2018-04-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR target/85080"}, {"sha": "0d46be9ed65415588b6f17d3f2a56c5a3c2893a4", "filename": "gcc/testsuite/g++.dg/parse/semicolon3.C", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -20,13 +20,6 @@ struct OK3\n } // no complaints\n   (s7);\n \n-__SIZE_TYPE__\n-test_offsetof (void)\n-{\n-  // no complaints about a missing semicolon\n-  return __builtin_offsetof (struct OK4 { int a; int b; }, b);\n-}\n-\n struct OK5\n {\n   int a;"}, {"sha": "f57c8a261deef306b9edb229e3e6bab9a7c208a0", "filename": "gcc/testsuite/g++.dg/pr85039-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85039-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85039-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85039-1.C?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int a() {\n+ return\n+  __builtin_offsetof(struct { // { dg-error \"types may not be defined\" }\n+    int i;\n+    short b {\n+      __builtin_offsetof(struct { // { dg-error \"types may not be defined\" }\n+\tint j;\n+        struct c { // { dg-error \"types may not be defined\" }\n+          void d() {\n+          }\n+        };\n+      }, j)\n+    };\n+  }, i);\n+}"}, {"sha": "e6d16325105ba2899b8b0271fd1d36ac82429141", "filename": "gcc/testsuite/g++.dg/pr85039-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85039-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85039-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85039-2.C?ref=7c5b407fa2f7dee7cfa663f7d5c4521fa4be00c8", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile }\n+\n+struct d {\n+  static d *b;\n+} * d::b(__builtin_offsetof(struct { // { dg-error \"types may not be defined\" }\n+  int i;\n+  struct a { // { dg-error \"types may not be defined\" }\n+    int c() { return .1f; }\n+  };\n+}, i));"}]}