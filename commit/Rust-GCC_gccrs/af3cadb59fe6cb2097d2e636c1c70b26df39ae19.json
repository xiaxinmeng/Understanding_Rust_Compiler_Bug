{"sha": "af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "node_id": "C_kwDOANBUbNoAKGFmM2NhZGI1OWZlNmNiMjA5N2QyZTYzNmMxYzcwYjI2ZGYzOWFlMTk", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-04-07T15:48:05Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-04-07T15:48:05Z"}, "message": "AArch64: fix ls64 intrinsics expansion [PR104409]\n\nThe LS64 intrinsics used a machinery that's not safe to use unless being\ncalled from a pragma instantiation.\n\nThis moves the initialization code to a new pragma for arm_acle.h.\n\ngcc/ChangeLog:\n\n\tPR target/104409\n\t* config/aarch64/aarch64-builtins.cc (handle_arm_acle_h): New.\n\t(aarch64_general_init_builtins): Move LS64 code.\n\t* config/aarch64/aarch64-c.cc (aarch64_pragma_aarch64): Support\n\tarm_acle.h\n\t* config/aarch64/aarch64-protos.h (handle_arm_acle_h): New.\n\t* config/aarch64/arm_acle.h: Add pragma GCC aarch64 \"arm_acle.h\".", "tree": {"sha": "6fb8121921b1a63b1f81e6774f7591eb9552b26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb8121921b1a63b1f81e6774f7591eb9552b26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0ebaf9f586100920a3c0849fb10e9985d7ae58"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "c21476d7ae963450b12efa24418ce4004a3c74bf", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "patch": "@@ -1664,6 +1664,14 @@ aarch64_init_ls64_builtins (void)\n       = aarch64_general_add_builtin (data[i].name, data[i].type, data[i].code);\n }\n \n+/* Implement #pragma GCC aarch64 \"arm_acle.h\".  */\n+void\n+handle_arm_acle_h (void)\n+{\n+  if (TARGET_LS64)\n+    aarch64_init_ls64_builtins ();\n+}\n+\n /* Initialize fpsr fpcr getters and setters.  */\n \n static void\n@@ -1755,9 +1763,6 @@ aarch64_general_init_builtins (void)\n \n   if (TARGET_MEMTAG)\n     aarch64_init_memtag_builtins ();\n-\n-  if (TARGET_LS64)\n-    aarch64_init_ls64_builtins ();\n }\n \n /* Implement TARGET_BUILTIN_DECL for the AARCH64_BUILTIN_GENERAL group.  */"}, {"sha": "767ee0c763c56a022089a647c7425afb00644644", "filename": "gcc/config/aarch64/aarch64-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc?ref=af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "patch": "@@ -302,6 +302,8 @@ aarch64_pragma_aarch64 (cpp_reader *)\n     aarch64_sve::handle_arm_sve_h ();\n   else if (strcmp (name, \"arm_neon.h\") == 0)\n     handle_arm_neon_h ();\n+  else if (strcmp (name, \"arm_acle.h\") == 0)\n+    handle_arm_acle_h ();\n   else\n     error (\"unknown %<#pragma GCC aarch64%> option %qs\", name);\n }"}, {"sha": "2ac781dff4a93cbe0f0b091147b2521ed1a88750", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "patch": "@@ -995,6 +995,7 @@ rtx aarch64_general_expand_builtin (unsigned int, tree, rtx, int);\n tree aarch64_general_builtin_decl (unsigned, bool);\n tree aarch64_general_builtin_rsqrt (unsigned int);\n tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n+void handle_arm_acle_h (void);\n void handle_arm_neon_h (void);\n \n namespace aarch64_sve {"}, {"sha": "9775a48c65825b424d3eb442384f5ab87b734fd7", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3cadb59fe6cb2097d2e636c1c70b26df39ae19/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=af3cadb59fe6cb2097d2e636c1c70b26df39ae19", "patch": "@@ -29,6 +29,8 @@\n \n #include <stdint.h>\n \n+#pragma GCC aarch64 \"arm_acle.h\"\n+\n #ifdef __cplusplus\n extern \"C\" {\n #endif"}]}