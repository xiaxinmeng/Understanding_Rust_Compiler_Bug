{"sha": "24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5MTFhNTA4OGFhM2U0OGZmNGUwY2YwZjczMTk1N2I5Y2JmYzI4Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-05T15:30:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-05T15:30:07Z"}, "message": "i386.md (*push<mode>2): Use \"o\" constraint instead of \"m\" for operand 0.\n\n\t* config/i386/i386.md (*push<mode>2): Use \"o\" constraint instead\n\tof \"m\" for operand 0.  Add type and mode attribute.\n\t(*pushxf_nointeger\"): Use \"<\" constraint for operand 0.\n\t(*pushdf_rex64): New pattern, split out of *pushdf.  Use \"m\"\n\tconstraint instead of \"o\" for opreand 1.\n\t(*pushdf): Disable for TARGET_64BIT.  Correct mode attribute.\n\n\t* config/i386/predicates.md (lea_address_operand): Rename from\n\tno_seg_address_operand.\n\t* config/i386/i386.md (*lea_1): Update operand 1 predicate for rename.\n\t(*lea_1_zext): Ditto.\n\t(*lea_2): Ditto.\n\t(*lea_2_zext): Ditto.\n\n\t* config/i386/i386.c (ix86_print_operand_address): Handle SUBREGs of\n\tparts.base and parts.index.\n\t* config/i386/predicates.md (aligned_operand): Ditto.\n\t(cmpxchg8b_pic_memory_operand): Ditto.\n\nFrom-SVN: r177456", "tree": {"sha": "c42c020dc1284f9710e2c45fe2f26893925e43da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42c020dc1284f9710e2c45fe2f26893925e43da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/comments", "author": null, "committer": null, "parents": [{"sha": "8f05249cf12d0448270f9b4b5bad982e55c967ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f05249cf12d0448270f9b4b5bad982e55c967ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f05249cf12d0448270f9b4b5bad982e55c967ad"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "0d64ae8afad53e62fbfb27baed93768909d9d758", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "patch": "@@ -1,3 +1,28 @@\n+2011-08-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*push<mode>2): Use \"o\" constraint instead\n+\tof \"m\" for operand 0.  Add type and mode attribute.\n+\t(*pushxf_nointeger\"): Use \"<\" constraint for operand 0.\n+\t(*pushdf_rex64): New pattern, split out of *pushdf.  Use \"m\"\n+\tconstraint instead of \"o\" for opreand 1.\n+\t(*pushdf): Disable for TARGET_64BIT.  Correct mode attribute.\n+\n+2011-08-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (lea_address_operand): Rename from\n+\tno_seg_address_operand.\n+\t* config/i386/i386.md (*lea_1): Update operand 1 predicate for rename.\n+\t(*lea_1_zext): Ditto.\n+\t(*lea_2): Ditto.\n+\t(*lea_2_zext): Ditto.\n+\n+2011-08-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand_address): Handle SUBREGs of\n+\tparts.base and parts.index.\n+\t* config/i386/predicates.md (aligned_operand): Ditto.\n+\t(cmpxchg8b_pic_memory_operand): Ditto.\n+\n 2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/soft-fp: Move to ../libgcc.\n@@ -71,15 +96,13 @@\n \t(i[34567]86-*-linux*, x86_64-*-linux*, i[34567]86-*-kfreebsd*-gnu)\n \t(x86_64-*-kfreebsd*-gnu, i[34567]86-*-gnu*): Likewise.\n \t(i[34567]86-*-solaris2*, x86_64-*-solaris2.1[0-9]*): Likewise.\n-\t(i[34567]86-*-cygwin*, i[34567]86-*-mingw*, x86_64-*-mingw*):\n-\tLikewise.\n+\t(i[34567]86-*-cygwin*, i[34567]86-*-mingw*, x86_64-*-mingw*): Likewise.\n \t(i[34567]86-*-freebsd*, x86_64-*-freebsd*): Likewise.\n \n 2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (FPBIT_FUNCS, DPBIT_FUNCS, TPBIT_FUNCS): Remove.\n-\t(libgcc-support): Remove $(FPBIT), $(DPBIT), $(TPBIT)\n-\tdependencies.\n+\t(libgcc-support): Remove $(FPBIT), $(DPBIT), $(TPBIT) dependencies.\n \t(libgcc.mvars): Remove FPBIT, FPBIT_FUNCS, DPBIT, DPBIT_FUNCS,\n \tTPBIT, TPBIT_FUNCS.\n \t* config/fp-bit.c, config/fp-bit.h: Move to ../libgcc.\n@@ -163,8 +186,7 @@\n \tLIBUNWIND, SHLIBUNWIND_LINK, SHLIBUNWIND_INSTALL.\n \t(stmp-int-hdrs): Remove $(UNWIND_H) dependency.\n \tDon't copy $(UNWIND_H).\n-\t* config.gcc (ia64*-*-linux*): Remove with_system_libunwind\n-\thandling.\n+\t* config.gcc (ia64*-*-linux*): Remove with_system_libunwind handling.\n \t* configure.ac (GCC_CHECK_UNWIND_GETIPINFO): Remove.\n \t* aclocal.m4: Regenerate.\n \t* configure: Regenerate."}, {"sha": "5d995ab1760b3f0ff150173f3b4589c2770e5783", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "patch": "@@ -14098,6 +14098,20 @@ ix86_print_operand_address (FILE *file, rtx addr)\n \n   gcc_assert (ok);\n \n+  if (parts.base && GET_CODE (parts.base) == SUBREG)\n+    {\n+      rtx tmp = SUBREG_REG (parts.base);\n+      parts.base = simplify_subreg (GET_MODE (parts.base),\n+\t\t\t\t    tmp, GET_MODE (tmp), 0);\n+    }\n+\n+  if (parts.index && GET_CODE (parts.index) == SUBREG)\n+    {\n+      rtx tmp = SUBREG_REG (parts.index);\n+      parts.index = simplify_subreg (GET_MODE (parts.index),\n+\t\t\t\t     tmp, GET_MODE (tmp), 0);\n+    }\n+\n   base = parts.base;\n   index = parts.index;\n   disp = parts.disp;"}, {"sha": "c3e74e5bfb1cd073a5b6f859d8c0561230fa3c48", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "patch": "@@ -1648,9 +1648,11 @@\n \n (define_insn \"*push<mode>2\"\n   [(set (match_operand:DWI 0 \"push_operand\" \"=<\")\n-\t(match_operand:DWI 1 \"general_no_elim_operand\" \"riF*m\"))]\n+\t(match_operand:DWI 1 \"general_no_elim_operand\" \"riF*o\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_split\n   [(set (match_operand:TI 0 \"push_operand\" \"\")\n@@ -2704,7 +2706,7 @@\n ;; only once, but this ought to be handled elsewhere).\n \n (define_insn \"*pushxf_nointeger\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=X,X\")\n+  [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,*rFo\"))]\n   \"optimize_function_for_size_p (cfun)\"\n {\n@@ -2724,21 +2726,33 @@\n    (set (mem:XF (reg:P SP_REG)) (match_dup 1))]\n   \"operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\")\n \n+(define_insn \"*pushdf_rex64\"\n+  [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<\")\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*rFm,Y2\"))]\n+  \"TARGET_64BIT\"\n+{\n+  /* This insn should be already split before reg-stack.  */\n+  gcc_unreachable ();\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387,*,*\")\n+   (set_attr \"mode\" \"DF,DI,DF\")])\n+\n ;; Size of pushdf is 3 (for sub) + 2 (for fstp) + memory operand size.\n ;; Size of pushdf using integer instructions is 2+2*memory operand size\n ;; On the average, pushdf using integers can be still shorter.\n \n (define_insn \"*pushdf\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<\")\n \t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*rFo,Y2\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387,*,*\")\n-   (set_attr \"mode\" \"DF,SI,DF\")])\n+   (set_attr \"mode\" \"DF,DI,DF\")])\n \n ;; %%% Kill this when call knows how to work this out.\n (define_split\n@@ -5431,7 +5445,7 @@\n \n (define_insn \"*lea_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(match_operand:SWI48 1 \"no_seg_address_operand\" \"p\"))]\n+\t(match_operand:SWI48 1 \"lea_address_operand\" \"p\"))]\n   \"\"\n   \"lea{<imodesuffix>}\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n@@ -5440,15 +5454,15 @@\n (define_insn \"*lea_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (match_operand:SI 1 \"no_seg_address_operand\" \"p\")))]\n+\t  (match_operand:SI 1 \"lea_address_operand\" \"p\")))]\n   \"TARGET_64BIT\"\n   \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*lea_2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(subreg:SI (match_operand:DI 1 \"no_seg_address_operand\" \"p\") 0))]\n+\t(subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0))]\n   \"TARGET_64BIT\"\n   \"lea{l}\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n@@ -5457,7 +5471,7 @@\n (define_insn \"*lea_2_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (subreg:SI (match_operand:DI 1 \"no_seg_address_operand\" \"p\") 0)))]\n+\t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0)))]\n   \"TARGET_64BIT\"\n   \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n   [(set_attr \"type\" \"lea\")"}, {"sha": "52ea3f3a2da389b418b61e6469f9f84655067477", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24911a5088aa3e48ff4e0cf0f731957b9cbfc28f/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=24911a5088aa3e48ff4e0cf0f731957b9cbfc28f", "patch": "@@ -793,9 +793,9 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const0_operand\")))\n \n-;; Return true if op if a valid address, and does not contain\n+;; Return true if op if a valid address for LEA, and does not contain\n ;; a segment override.\n-(define_predicate \"no_seg_address_operand\"\n+(define_predicate \"lea_address_operand\"\n   (match_operand 0 \"address_operand\")\n {\n   struct ix86_address parts;\n@@ -840,6 +840,11 @@\n   ok = ix86_decompose_address (op, &parts);\n   gcc_assert (ok);\n \n+  if (parts.base && GET_CODE (parts.base) == SUBREG)\n+    parts.base = SUBREG_REG (parts.base);\n+  if (parts.index && GET_CODE (parts.index) == SUBREG)\n+    parts.index = SUBREG_REG (parts.index);\n+\n   /* Look for some component that isn't known to be aligned.  */\n   if (parts.index)\n     {\n@@ -903,6 +908,12 @@\n \n   ok = ix86_decompose_address (XEXP (op, 0), &parts);\n   gcc_assert (ok);\n+\n+  if (parts.base && GET_CODE (parts.base) == SUBREG)\n+    parts.base = SUBREG_REG (parts.base);\n+  if (parts.index && GET_CODE (parts.index) == SUBREG)\n+    parts.index = SUBREG_REG (parts.index);\n+\n   if (parts.base == NULL_RTX\n       || parts.base == arg_pointer_rtx\n       || parts.base == frame_pointer_rtx"}]}