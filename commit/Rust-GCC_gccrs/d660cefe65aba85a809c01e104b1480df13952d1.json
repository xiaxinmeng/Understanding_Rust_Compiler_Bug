{"sha": "d660cefe65aba85a809c01e104b1480df13952d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2MGNlZmU2NWFiYTg1YTgwOWMwMWUxMDRiMTQ4MGRmMTM5NTJkMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-05-13T18:51:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-05-13T18:51:57Z"}, "message": "final.c (final_scan_insn): Apply the effects of frame-related delay slot insns before emitting a delayed...\n\n\t* final.c (final_scan_insn): Apply the effects of frame-related\n\tdelay slot insns before emitting a delayed branch.\n\nFrom-SVN: r66774", "tree": {"sha": "d6bd15f241c968e3ac3a15ebab8d1ffb932214a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6bd15f241c968e3ac3a15ebab8d1ffb932214a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d660cefe65aba85a809c01e104b1480df13952d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660cefe65aba85a809c01e104b1480df13952d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d660cefe65aba85a809c01e104b1480df13952d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660cefe65aba85a809c01e104b1480df13952d1/comments", "author": null, "committer": null, "parents": [{"sha": "c1f1978f30b4fcbe066850db22a6213c4b3bd779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f1978f30b4fcbe066850db22a6213c4b3bd779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f1978f30b4fcbe066850db22a6213c4b3bd779"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "0fac8ca296497d11910f620dd2f63bf2132e8fd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d660cefe65aba85a809c01e104b1480df13952d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d660cefe65aba85a809c01e104b1480df13952d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d660cefe65aba85a809c01e104b1480df13952d1", "patch": "@@ -1,3 +1,8 @@\n+2003-05-13  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* final.c (final_scan_insn): Apply the effects of frame-related\n+\tdelay slot insns before emitting a delayed branch.\n+\n 2003-05-13  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mcore/mcore.md (jump): Use emit_jump_insn."}, {"sha": "0907411efbe2491b8f9799f59ebb1c82a604224f", "filename": "gcc/final.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d660cefe65aba85a809c01e104b1480df13952d1/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d660cefe65aba85a809c01e104b1480df13952d1/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d660cefe65aba85a809c01e104b1480df13952d1", "patch": "@@ -2160,6 +2160,14 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      break;\n \t    final_sequence = body;\n \n+\t    /* Record the delay slots' frame information before the branch.\n+\t       This is needed for delayed calls: see execute_cfa_program().  */\n+#if defined (DWARF2_UNWIND_INFO)\n+\t    if (dwarf2out_do_frame ())\n+\t      for (i = 1; i < XVECLEN (body, 0); i++)\n+\t\tdwarf2out_frame_debug (XVECEXP (body, 0, i));\n+#endif\n+\n \t    /* The first insn in this SEQUENCE might be a JUMP_INSN that will\n \t       force the restoration of a comparison that was previously\n \t       thought unnecessary.  If that happens, cancel this sequence\n@@ -2514,17 +2522,18 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n \toutput_asm_insn (template, recog_data.operand);\n \n+\t/* If necessary, report the effect that the instruction has on\n+\t   the unwind info.   We've already done this for delay slots\n+\t   and call instructions.  */\n #if defined (DWARF2_UNWIND_INFO)\n-#if defined (HAVE_prologue)\n-\tif (GET_CODE (insn) == INSN && dwarf2out_do_frame ())\n-\t  dwarf2out_frame_debug (insn);\n-#else\n-\tif (!ACCUMULATE_OUTGOING_ARGS\n-\t    && GET_CODE (insn) == INSN\n+\tif (GET_CODE (insn) == INSN\n+#if !defined (HAVE_prologue)\n+\t    && !ACCUMULATE_OUTGOING_ARGS\n+#endif\n+\t    && final_sequence == 0\n \t    && dwarf2out_do_frame ())\n \t  dwarf2out_frame_debug (insn);\n #endif\n-#endif\n \n #if 0\n \t/* It's not at all clear why we did this and doing so interferes"}]}