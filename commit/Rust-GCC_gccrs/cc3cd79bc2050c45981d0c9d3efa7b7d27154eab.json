{"sha": "cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MzY2Q3OWJjMjA1MGM0NTk4MWQwYzlkM2VmYTdiN2QyNzE1NGVhYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-09-30T21:35:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-09-30T21:35:47Z"}, "message": "mkoffload.c (process): Change offload data format.\n\n\tgcc/\n\t* config/nvptx/mkoffload.c (process): Change offload data format.\n\n\tlibgomp/\n\t* plugin/plugin-nvptx.c (targ_fn_launch): Use GOMP_DIM_MAX.\n\t(struct targ_ptx_obj): New.\n\t(nvptx_tdata): Move earlier, change data format.\n\t(link_ptx): Take targ_ptx_obj ptr and count.  Allow multiple\n\tobjects.\n\t(GOMP_OFFLOAD_load_image): Adjust.\n\nCo-Authored-By: Bernd Schmidt <bernds@codesourcery.com>\n\nFrom-SVN: r228308", "tree": {"sha": "ba753ab0a28be62f5e292c36f6d08ca0e7094301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba753ab0a28be62f5e292c36f6d08ca0e7094301"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/comments", "author": null, "committer": null, "parents": [{"sha": "c57173b69a617edf59ed2e73edda183e7aebf05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57173b69a617edf59ed2e73edda183e7aebf05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c57173b69a617edf59ed2e73edda183e7aebf05e"}], "stats": {"total": 114, "additions": 81, "deletions": 33}, "files": [{"sha": "6b5304819705dec6ab93e74fd0cb8987570716c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "patch": "@@ -1,3 +1,7 @@\n+2015-09-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/mkoffload.c (process): Change offload data format.\n+\n 2015-09-30  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (optimize_stmt): Collapse control flow statements"}, {"sha": "926c82beea9ec347a96e0a1d02bcd41f08a30ec0", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "patch": "@@ -843,39 +843,53 @@ process (FILE *in, FILE *out)\n   Token *tok = tokenize (input);\n   const char *comma;\n   id_map const *id;\n+  unsigned obj_count = 0;\n+  unsigned ix;\n \n   do\n     tok = parse_file (tok);\n   while (tok->kind);\n \n-  fprintf (out, \"static const char ptx_code[] = \\n\");\n+  fprintf (out, \"static const char ptx_code_%u[] = \\n\", obj_count++);\n   write_stmts (out, rev_stmts (decls));\n   write_stmts (out, rev_stmts (vars));\n   write_stmts (out, rev_stmts (fns));\n   fprintf (out, \";\\n\\n\");\n \n+  /* Dump out array of pointers to ptx object strings.  */\n+  fprintf (out, \"static const struct ptx_obj {\\n\"\n+\t   \"  const char *code;\\n\"\n+\t   \"  __SIZE_TYPE__ size;\\n\"\n+\t   \"} ptx_objs[] = {\");\n+  for (comma = \"\", ix = 0; ix != obj_count; comma = \",\", ix++)\n+    fprintf (out, \"%s\\n\\t{ptx_code_%u, sizeof (ptx_code_%u)}\", comma, ix, ix);\n+  fprintf (out, \"\\n};\\n\\n\");\n+\n+  /* Dump out variable idents.  */\n   fprintf (out, \"static const char *const var_mappings[] = {\");\n   for (comma = \"\", id = var_ids; id; comma = \",\", id = id->next)\n     fprintf (out, \"%s\\n\\t%s\", comma, id->ptx_name);\n   fprintf (out, \"\\n};\\n\\n\");\n \n+  /* Dump out function idents.  */\n   fprintf (out, \"static const struct nvptx_fn {\\n\"\n \t   \"  const char *name;\\n\"\n-\t   \"  unsigned short dim[3];\\n\"\n-\t   \"} func_mappings[] = {\\n\");\n+\t   \"  unsigned short dim[%d];\\n\"\n+\t   \"} func_mappings[] = {\\n\", GOMP_DIM_MAX);\n   for (comma = \"\", id = func_ids; id; comma = \",\", id = id->next)\n     fprintf (out, \"%s\\n\\t{%s}\", comma, id->ptx_name);\n   fprintf (out, \"\\n};\\n\\n\");\n \n   fprintf (out,\n \t   \"static const struct nvptx_tdata {\\n\"\n-\t   \"  const char *ptx_src;\\n\"\n+\t   \"  const struct ptx_obj *ptx_objs;\\n\"\n+\t   \"  unsigned ptx_num;\\n\"\n \t   \"  const char *const *var_names;\\n\"\n-\t   \"  __SIZE_TYPE__ var_num;\\n\"\n+\t   \"  unsigned var_num;\\n\"\n \t   \"  const struct nvptx_fn *fn_names;\\n\"\n-\t   \"  __SIZE_TYPE__ fn_num;\\n\"\n+\t   \"  unsigned fn_num;\\n\"\n \t   \"} target_data = {\\n\"\n-\t   \"  ptx_code,\\n\"\n+\t   \"  ptx_objs, sizeof (ptx_objs) / sizeof (ptx_objs[0]),\\n\"\n \t   \"  var_mappings,\"\n \t   \"  sizeof (var_mappings) / sizeof (var_mappings[0]),\\n\"\n \t   \"  func_mappings,\""}, {"sha": "b38234b878884eacdb2688ce6297ec763cd012b0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "patch": "@@ -1,3 +1,13 @@\n+2015-09-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Bernd Schmidt <bernds@codesourcery.com>\n+\n+\t* plugin/plugin-nvptx.c (targ_fn_launch): Use GOMP_DIM_MAX.\n+\t(struct targ_ptx_obj): New.\n+\t(nvptx_tdata): Move earlier, change data format.\n+\t(link_ptx): Take targ_ptx_obj ptr and count.  Allow multiple\n+\tobjects.\n+\t(GOMP_OFFLOAD_load_image): Adjust.\n+\n 2015-09-30  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/abort-1.c: Add checkpoint."}, {"sha": "cedcc592bf0ae0e9d247c40ea7288c97413592f7", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 46, "deletions": 26, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3cd79bc2050c45981d0c9d3efa7b7d27154eab/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=cc3cd79bc2050c45981d0c9d3efa7b7d27154eab", "patch": "@@ -224,9 +224,31 @@ map_push (struct ptx_stream *s, int async, size_t size, void **h, void **d)\n struct targ_fn_launch\n {\n   const char *fn;\n-  unsigned short dim[3];\n+  unsigned short dim[GOMP_DIM_MAX];\n };\n \n+/* Target PTX object information.  */\n+\n+struct targ_ptx_obj\n+{\n+  const char *code;\n+  size_t size;\n+};\n+\n+/* Target data image information.  */\n+\n+typedef struct nvptx_tdata\n+{\n+  const struct targ_ptx_obj *ptx_objs;\n+  unsigned ptx_num;\n+\n+  const char *const *var_names;\n+  unsigned var_num;\n+\n+  const struct targ_fn_launch *fn_descs;\n+  unsigned fn_num;\n+} nvptx_tdata_t;\n+\n /* Descriptor of a loaded function.  */\n \n struct targ_fn_descriptor\n@@ -688,7 +710,8 @@ nvptx_get_num_devices (void)\n \n \n static void\n-link_ptx (CUmodule *module, const char *ptx_code)\n+link_ptx (CUmodule *module, const struct targ_ptx_obj *ptx_objs,\n+\t  unsigned num_objs)\n {\n   CUjit_option opts[7];\n   void *optvals[7];\n@@ -702,8 +725,6 @@ link_ptx (CUmodule *module, const char *ptx_code)\n   void *linkout;\n   size_t linkoutsize __attribute__ ((unused));\n \n-  GOMP_PLUGIN_debug (0, \"attempting to load:\\n---\\n%s\\n---\\n\", ptx_code);\n-\n   opts[0] = CU_JIT_WALL_TIME;\n   optvals[0] = &elapsed;\n \n@@ -758,25 +779,37 @@ link_ptx (CUmodule *module, const char *ptx_code)\n \t\t\t cuda_error (r));\n     }\n \n-  /* cuLinkAddData's 'data' argument erroneously omits the const qualifier.  */\n-  r = cuLinkAddData (linkstate, CU_JIT_INPUT_PTX, (char *)ptx_code,\n-              strlen (ptx_code) + 1, 0, 0, 0, 0);\n-  if (r != CUDA_SUCCESS)\n+  for (; num_objs--; ptx_objs++)\n     {\n-      GOMP_PLUGIN_error (\"Link error log %s\\n\", &elog[0]);\n-      GOMP_PLUGIN_fatal (\"cuLinkAddData (ptx_code) error: %s\", cuda_error (r));\n+      /* cuLinkAddData's 'data' argument erroneously omits the const\n+\t qualifier.  */\n+      GOMP_PLUGIN_debug (0, \"Loading:\\n---\\n%s\\n---\\n\", ptx_objs->code);\n+      r = cuLinkAddData (linkstate, CU_JIT_INPUT_PTX, (char*)ptx_objs->code,\n+\t\t\t ptx_objs->size, 0, 0, 0, 0);\n+      if (r != CUDA_SUCCESS)\n+\t{\n+\t  GOMP_PLUGIN_error (\"Link error log %s\\n\", &elog[0]);\n+\t  GOMP_PLUGIN_fatal (\"cuLinkAddData (ptx_code) error: %s\",\n+\t\t\t     cuda_error (r));\n+\t}\n     }\n \n+  GOMP_PLUGIN_debug (0, \"Linking\\n\");\n   r = cuLinkComplete (linkstate, &linkout, &linkoutsize);\n-  if (r != CUDA_SUCCESS)\n-    GOMP_PLUGIN_fatal (\"cuLinkComplete error: %s\", cuda_error (r));\n \n   GOMP_PLUGIN_debug (0, \"Link complete: %fms\\n\", elapsed);\n   GOMP_PLUGIN_debug (0, \"Link log %s\\n\", &ilog[0]);\n \n+  if (r != CUDA_SUCCESS)\n+    GOMP_PLUGIN_fatal (\"cuLinkComplete error: %s\", cuda_error (r));\n+\n   r = cuModuleLoadData (module, linkout);\n   if (r != CUDA_SUCCESS)\n     GOMP_PLUGIN_fatal (\"cuModuleLoadData error: %s\", cuda_error (r));\n+\n+  r = cuLinkDestroy (linkstate);\n+  if (r != CUDA_SUCCESS)\n+    GOMP_PLUGIN_fatal (\"cuLinkDestory error: %s\", cuda_error (r));\n }\n \n static void\n@@ -1502,19 +1535,6 @@ GOMP_OFFLOAD_fini_device (int n)\n   pthread_mutex_unlock (&ptx_dev_lock);\n }\n \n-/* Data emitted by mkoffload.  */\n-\n-typedef struct nvptx_tdata\n-{\n-  const char *ptx_src;\n-\n-  const char *const *var_names;\n-  size_t var_num;\n-\n-  const struct targ_fn_launch *fn_descs;\n-  size_t fn_num;\n-} nvptx_tdata_t;\n-\n /* Return the libgomp version number we're compatible with.  There is\n    no requirement for cross-version compatibility.  */\n \n@@ -1553,7 +1573,7 @@ GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n   \n   nvptx_attach_host_thread_to_device (ord);\n \n-  link_ptx (&module, img_header->ptx_src);\n+  link_ptx (&module, img_header->ptx_objs, img_header->ptx_num);\n \n   /* The mkoffload utility emits a struct of pointers/integers at the\n      start of each offload image.  The array of kernel names and the"}]}