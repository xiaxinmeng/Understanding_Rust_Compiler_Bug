{"sha": "7e196f892ae1e8238a36a2adbc210c394c089d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxOTZmODkyYWUxZTgyMzhhMzZhMmFkYmMyMTBjMzk0YzA4OWQyZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-06-24T10:59:56Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-06-24T10:59:56Z"}, "message": "re PR fortran/40427 ([F03] Procedure Pointer Components with OPTIONAL arguments)\n\n2009-06-24  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40427\n\t* gfortran.h (gfc_component): New member 'formal_ns'.\n\t(gfc_copy_formal_args_ppc,void gfc_ppc_use): New.\n\t* interface.c (gfc_ppc_use): New function, analogous to\n\tgfc_procedure_use, but for procedure pointer components.\n\t* module.c (MOD_VERSION): Bump module version.\n\t(mio_component): Treat formal arguments.\n\t(mio_formal_arglist): Changed argument from gfc_symbol to\n\tgfc_formal_arglist.\n\t(mio_symbol): Changed argument of mio_formal_arglist.\n\t* resolve.c (resolve_ppc_call,resolve_expr_ppc): Call gfc_ppc_use,\n\tto check actual arguments and treat formal args correctly.\n\t(resolve_fl_derived): Copy formal args of procedure pointer components\n\tfrom their interface.\n\t* symbol.c (gfc_copy_formal_args_ppc): New function, analogous to\n\tgfc_copy_formal_args, but for procedure pointer components.\n\n\n2009-06-24  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40427\n\t* gfortran.dg/proc_ptr_comp_11.f90: New.\n\nFrom-SVN: r148906", "tree": {"sha": "a8542fe2b693d75e3d9116f00704aa7e5a014c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8542fe2b693d75e3d9116f00704aa7e5a014c21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e196f892ae1e8238a36a2adbc210c394c089d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e196f892ae1e8238a36a2adbc210c394c089d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e196f892ae1e8238a36a2adbc210c394c089d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e196f892ae1e8238a36a2adbc210c394c089d2d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f3cb584d01e98206cea8feeb094ca025534ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f3cb584d01e98206cea8feeb094ca025534ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f3cb584d01e98206cea8feeb094ca025534ff7"}], "stats": {"total": 222, "additions": 207, "deletions": 15}, "files": [{"sha": "d8ea53d587ae014c7e2b507da1281b9b16529e53", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -1,3 +1,22 @@\n+2009-06-24  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40427\n+\t* gfortran.h (gfc_component): New member 'formal_ns'.\n+\t(gfc_copy_formal_args_ppc,void gfc_ppc_use): New.\n+\t* interface.c (gfc_ppc_use): New function, analogous to\n+\tgfc_procedure_use, but for procedure pointer components.\n+\t* module.c (MOD_VERSION): Bump module version.\n+\t(mio_component): Treat formal arguments.\n+\t(mio_formal_arglist): Changed argument from gfc_symbol to\n+\tgfc_formal_arglist.\n+\t(mio_symbol): Changed argument of mio_formal_arglist.\n+\t* resolve.c (resolve_ppc_call,resolve_expr_ppc): Call gfc_ppc_use,\n+\tto check actual arguments and treat formal args correctly.\n+\t(resolve_fl_derived): Copy formal args of procedure pointer components\n+\tfrom their interface.\n+\t* symbol.c (gfc_copy_formal_args_ppc): New function, analogous to\n+\tgfc_copy_formal_args, but for procedure pointer components.\n+\n 2009-06-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/37254"}, {"sha": "de0025b75b72357ddec37a62bdd124a8c4865d7a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -855,6 +855,7 @@ typedef struct gfc_component\n   struct gfc_component *next;\n \n   struct gfc_formal_arglist *formal;\n+  struct gfc_namespace *formal_ns;\n }\n gfc_component;\n \n@@ -2409,6 +2410,7 @@ gfc_symtree* gfc_get_tbp_symtree (gfc_symtree**, const char*);\n \n void gfc_copy_formal_args (gfc_symbol *, gfc_symbol *);\n void gfc_copy_formal_args_intr (gfc_symbol *, gfc_intrinsic_sym *);\n+void gfc_copy_formal_args_ppc (gfc_component *, gfc_symbol *);\n \n void gfc_free_finalizer (gfc_finalizer *el); /* Needed in resolve.c, too  */\n \n@@ -2580,6 +2582,7 @@ int gfc_compare_types (gfc_typespec *, gfc_typespec *);\n int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, int, int, char *, int);\n void gfc_check_interfaces (gfc_namespace *);\n void gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n+void gfc_ppc_use (gfc_component *, gfc_actual_arglist **, locus *);\n gfc_symbol *gfc_search_interface (gfc_interface *, int,\n \t\t\t\t  gfc_actual_arglist **);\n gfc_try gfc_extend_expr (gfc_expr *);"}, {"sha": "c03c06e364c418284eb3a3b97c93631ac24db5eb", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -2397,6 +2397,50 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n }\n \n \n+/* Check how a procedure pointer component is used against its interface.\n+   If all goes well, the actual argument list will also end up being properly\n+   sorted. Completely analogous to gfc_procedure_use.  */\n+\n+void\n+gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)\n+{\n+\n+  /* Warn about calls with an implicit interface.  Special case\n+     for calling a ISO_C_BINDING becase c_loc and c_funloc\n+     are pseudo-unknown.  */\n+  if (gfc_option.warn_implicit_interface\n+      && comp->attr.if_source == IFSRC_UNKNOWN\n+      && !comp->attr.is_iso_c)\n+    gfc_warning (\"Procedure pointer component '%s' called with an implicit \"\n+\t\t \"interface at %L\", comp->name, where);\n+\n+  if (comp->attr.if_source == IFSRC_UNKNOWN)\n+    {\n+      gfc_actual_arglist *a;\n+      for (a = *ap; a; a = a->next)\n+\t{\n+\t  /* Skip g77 keyword extensions like %VAL, %REF, %LOC.  */\n+\t  if (a->name != NULL && a->name[0] != '%')\n+\t    {\n+\t      gfc_error(\"Keyword argument requires explicit interface \"\n+\t\t\t\"for procedure pointer component '%s' at %L\",\n+\t\t\tcomp->name, &a->expr->where);\n+\t      break;\n+\t    }\n+\t}\n+\n+      return;\n+    }\n+\n+  if (!compare_actual_formal (ap, comp->formal, 0, comp->attr.elemental, where))\n+    return;\n+\n+  check_intents (comp->formal, *ap);\n+  if (gfc_option.warn_aliasing)\n+    check_some_aliasing (comp->formal, *ap);\n+}\n+\n+\n /* Try if an actual argument list matches the formal list of a symbol,\n    respecting the symbol's attributes like ELEMENTAL.  This is used for\n    GENERIC resolution.  */"}, {"sha": "15b1b5da6c806b1cf08669809ac862b0fad42d9e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -77,7 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Don't put any single quote (') in MOD_VERSION, \n    if yout want it to be recognized.  */\n-#define MOD_VERSION \"0\"\n+#define MOD_VERSION \"1\"\n \n \n /* Structure that describes a position within a module file.  */\n@@ -2262,11 +2262,16 @@ mio_component_ref (gfc_component **cp, gfc_symbol *sym)\n }\n \n \n+static void mio_namespace_ref (gfc_namespace **nsp);\n+static void mio_formal_arglist (gfc_formal_arglist **formal);\n+\n+\n static void\n mio_component (gfc_component *c)\n {\n   pointer_info *p;\n   int n;\n+  gfc_formal_arglist *formal;\n \n   mio_lparen ();\n \n@@ -2293,6 +2298,30 @@ mio_component (gfc_component *c)\n   c->attr.access = MIO_NAME (gfc_access) (c->attr.access, access_types); \n \n   mio_expr (&c->initializer);\n+\n+  if (iomode == IO_OUTPUT)\n+    {\n+      formal = c->formal;\n+      while (formal && !formal->sym)\n+\tformal = formal->next;\n+\n+      if (formal)\n+\tmio_namespace_ref (&formal->sym->ns);\n+      else\n+\tmio_namespace_ref (&c->formal_ns);\n+    }\n+  else\n+    {\n+      mio_namespace_ref (&c->formal_ns);\n+      /* TODO: if (c->formal_ns)\n+\t{\n+\t  c->formal_ns->proc_name = c;\n+\t  c->refs++;\n+\t}*/\n+    }\n+\n+  mio_formal_arglist (&c->formal);\n+\n   mio_rparen ();\n }\n \n@@ -2386,28 +2415,28 @@ mio_actual_arglist (gfc_actual_arglist **ap)\n /* Read and write formal argument lists.  */\n \n static void\n-mio_formal_arglist (gfc_symbol *sym)\n+mio_formal_arglist (gfc_formal_arglist **formal)\n {\n   gfc_formal_arglist *f, *tail;\n \n   mio_lparen ();\n \n   if (iomode == IO_OUTPUT)\n     {\n-      for (f = sym->formal; f; f = f->next)\n+      for (f = *formal; f; f = f->next)\n \tmio_symbol_ref (&f->sym);\n     }\n   else\n     {\n-      sym->formal = tail = NULL;\n+      *formal = tail = NULL;\n \n       while (peek_atom () != ATOM_RPAREN)\n \t{\n \t  f = gfc_get_formal_arglist ();\n \t  mio_symbol_ref (&f->sym);\n \n-\t  if (sym->formal == NULL)\n-\t    sym->formal = f;\n+\t  if (*formal == NULL)\n+\t    *formal = f;\n \t  else\n \t    tail->next = f;\n \n@@ -3436,7 +3465,7 @@ mio_symbol (gfc_symbol *sym)\n   /* Save/restore common block links.  */\n   mio_symbol_ref (&sym->common_next);\n \n-  mio_formal_arglist (sym);\n+  mio_formal_arglist (&sym->formal);\n \n   if (sym->attr.flavor == FL_PARAMETER)\n     mio_expr (&sym->value);"}, {"sha": "9bb6e226d1c0147785bff8ea750e7ec57a424c83", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -4847,9 +4847,7 @@ resolve_ppc_call (gfc_code* c)\n \t\t\t      comp->formal == NULL) == FAILURE)\n     return FAILURE;\n \n-  /* TODO: Check actual arguments.\n-     gfc_procedure_use (stree->n.sym, &c->expr1->value.compcall.actual,\n-\t\t\t&c->expr1->where);*/\n+  gfc_ppc_use (comp, &c->expr1->value.compcall.actual, &c->expr1->where);\n \n   return SUCCESS;\n }\n@@ -4881,8 +4879,7 @@ resolve_expr_ppc (gfc_expr* e)\n \t\t\t      comp->formal == NULL) == FAILURE)\n     return FAILURE;\n \n-  /* TODO: Check actual arguments.\n-     gfc_procedure_use (stree->n.sym, &e->value.compcall.actual, &e->where);  */\n+  gfc_ppc_use (comp, &e->value.compcall.actual, &e->where);\n \n   return SUCCESS;\n }\n@@ -9040,7 +9037,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t      c->ts.interface = ifc;\n \t      c->attr.function = ifc->attr.function;\n \t      c->attr.subroutine = ifc->attr.subroutine;\n-\t      /* TODO: gfc_copy_formal_args (c, ifc);  */\n+\t      gfc_copy_formal_args_ppc (c, ifc);\n \n \t      c->attr.allocatable = ifc->attr.allocatable;\n \t      c->attr.pointer = ifc->attr.pointer;\n@@ -9051,7 +9048,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t      c->attr.always_explicit = ifc->attr.always_explicit;\n \t      /* Copy array spec.  */\n \t      c->as = gfc_copy_array_spec (ifc->as);\n-\t      /*if (c->as)\n+\t      /* TODO: if (c->as)\n \t\t{\n \t\t  int i;\n \t\t  for (i = 0; i < c->as->rank; i++)\n@@ -9066,7 +9063,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t\t  c->ts.cl = gfc_get_charlen();\n \t          c->ts.cl->resolved = ifc->ts.cl->resolved;\n \t\t  c->ts.cl->length = gfc_copy_expr (ifc->ts.cl->length);\n-\t\t  /*gfc_expr_replace_symbols (c->ts.cl->length, c);*/\n+\t\t  /* TODO: gfc_expr_replace_symbols (c->ts.cl->length, c);*/\n \t\t  /* Add charlen to namespace.  */\n \t\t  /*if (c->formal_ns)\n \t\t    {"}, {"sha": "89cff6567bdca494fc9f4b63e448fce1144b7e21", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -3944,6 +3944,60 @@ gfc_copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n }\n \n \n+void\n+gfc_copy_formal_args_ppc (gfc_component *dest, gfc_symbol *src)\n+{\n+  gfc_formal_arglist *head = NULL;\n+  gfc_formal_arglist *tail = NULL;\n+  gfc_formal_arglist *formal_arg = NULL;\n+  gfc_formal_arglist *curr_arg = NULL;\n+  gfc_formal_arglist *formal_prev = NULL;\n+  /* Save current namespace so we can change it for formal args.  */\n+  gfc_namespace *parent_ns = gfc_current_ns;\n+\n+  /* Create a new namespace, which will be the formal ns (namespace\n+     of the formal args).  */\n+  gfc_current_ns = gfc_get_namespace (parent_ns, 0);\n+  /* TODO: gfc_current_ns->proc_name = dest;*/\n+\n+  for (curr_arg = src->formal; curr_arg; curr_arg = curr_arg->next)\n+    {\n+      formal_arg = gfc_get_formal_arglist ();\n+      gfc_get_symbol (curr_arg->sym->name, gfc_current_ns, &(formal_arg->sym));\n+\n+      /* May need to copy more info for the symbol.  */\n+      formal_arg->sym->attr = curr_arg->sym->attr;\n+      formal_arg->sym->ts = curr_arg->sym->ts;\n+      formal_arg->sym->as = gfc_copy_array_spec (curr_arg->sym->as);\n+      gfc_copy_formal_args (formal_arg->sym, curr_arg->sym);\n+\n+      /* If this isn't the first arg, set up the next ptr.  For the\n+        last arg built, the formal_arg->next will never get set to\n+        anything other than NULL.  */\n+      if (formal_prev != NULL)\n+\tformal_prev->next = formal_arg;\n+      else\n+\tformal_arg->next = NULL;\n+\n+      formal_prev = formal_arg;\n+\n+      /* Add arg to list of formal args.  */\n+      add_formal_arg (&head, &tail, formal_arg, formal_arg->sym);\n+    }\n+\n+  /* Add the interface to the symbol.  */\n+  dest->formal = head;\n+  dest->attr.if_source = IFSRC_DECL;\n+\n+  /* Store the formal namespace information.  */\n+  if (dest->formal != NULL)\n+    /* The current ns should be that for the dest proc.  */\n+    dest->formal_ns = gfc_current_ns;\n+  /* Restore the current namespace to what it was on entry.  */\n+  gfc_current_ns = parent_ns;\n+}\n+\n+\n /* Builds the parameter list for the iso_c_binding procedure\n    c_f_pointer or c_f_procpointer.  The old_sym typically refers to a\n    generic version of either the c_f_pointer or c_f_procpointer"}, {"sha": "ee4e4a1fe850aaae09784b3918f9815a98574866", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -1,3 +1,8 @@\n+2009-06-24  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40427\n+\t* gfortran.dg/proc_ptr_comp_11.f90: New.\n+\n 2009-06-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* gcc.dg/pr40501.c: New testcase."}, {"sha": "7e487fbb23e1df883bf25a356877859e5f1c9f8d", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e196f892ae1e8238a36a2adbc210c394c089d2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_11.f90?ref=7e196f892ae1e8238a36a2adbc210c394c089d2d", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! PR 40427: Procedure Pointer Components with OPTIONAL arguments\n+!\n+! Original test case by John McFarland <john.mcfarland@swri.org>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM prog\n+\n+ ABSTRACT INTERFACE\n+ SUBROUTINE sub_template(i,j,o)\n+   INTEGER, INTENT(in) :: i\n+   INTEGER, INTENT(in), OPTIONAL :: j, o\n+ END SUBROUTINE sub_template\n+ END INTERFACE\n+\n+ TYPE container\n+   PROCEDURE(sub_template), POINTER, NOPASS :: s\n+ END TYPE container\n+\n+ PROCEDURE(sub_template), POINTER :: f\n+ TYPE (container) :: c\n+\n+ c%s => sub\n+ f => sub\n+\n+ CALL f(2,o=4)\n+ CALL c%s(3,o=6)\n+\n+CONTAINS\n+\n+ SUBROUTINE sub(i,arg2,arg3)\n+   INTEGER, INTENT(in) :: i\n+   INTEGER, INTENT(in), OPTIONAL :: arg2, arg3\n+   if (present(arg2)) call abort()\n+   if (.not. present(arg3)) call abort()\n+   if (2*i/=arg3) call abort()\n+ END SUBROUTINE sub\n+\n+END PROGRAM prog\n+"}]}