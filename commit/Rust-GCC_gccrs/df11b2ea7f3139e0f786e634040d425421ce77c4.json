{"sha": "df11b2ea7f3139e0f786e634040d425421ce77c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxMWIyZWE3ZjMxMzllMGY3ODZlNjM0MDQwZDQyNTQyMWNlNzdjNA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-06-26T14:17:35Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-06-26T14:17:35Z"}, "message": "gimple-ssa-strength-reduction.c (uses_consumed_by_stmt): New function.\n\n[gcc]\n\n2016-06-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gimple-ssa-strength-reduction.c (uses_consumed_by_stmt): New\n\tfunction.\n\t(find_basis_for_candidate): Call uses_consumed_by_stmt rather than\n\thas_single_use.\n\t(slsr_process_phi): Likewise.\n\t(replace_uncond_cands_and_profitable_phis): Don't replace a\n\tmultiply candidate with a stride of 1 (copy or cast).\n\t(phi_incr_cost): Call uses_consumed_by_stmt rather than\n\thas_single_use.\n\t(lowest_cost_path): Likewise.\n\t(total_savings): Likewise.\n\n[gcc/testsuite]\n\n2016-06-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/tree-ssa/slsr-35.c: Remove -fno-code-hoisting workaround.\n\t* gcc.dg/tree-ssa/slsr-36.c: Likewise.\n\nFrom-SVN: r249648", "tree": {"sha": "5e9469d7db03b1d54b6da019648f7fddb86f0d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e9469d7db03b1d54b6da019648f7fddb86f0d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df11b2ea7f3139e0f786e634040d425421ce77c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df11b2ea7f3139e0f786e634040d425421ce77c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df11b2ea7f3139e0f786e634040d425421ce77c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df11b2ea7f3139e0f786e634040d425421ce77c4/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa7ccca021a5943040fd4d19d88e626a9736758e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7ccca021a5943040fd4d19d88e626a9736758e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7ccca021a5943040fd4d19d88e626a9736758e"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "fbf52031f5292d53b1f21c8736e7646e54c61821", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df11b2ea7f3139e0f786e634040d425421ce77c4", "patch": "@@ -1,3 +1,17 @@\n+2016-06-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gimple-ssa-strength-reduction.c (uses_consumed_by_stmt): New\n+\tfunction.\n+\t(find_basis_for_candidate): Call uses_consumed_by_stmt rather than\n+\thas_single_use.\n+\t(slsr_process_phi): Likewise.\n+\t(replace_uncond_cands_and_profitable_phis): Don't replace a\n+\tmultiply candidate with a stride of 1 (copy or cast).\n+\t(phi_incr_cost): Call uses_consumed_by_stmt rather than\n+\thas_single_use.\n+\t(lowest_cost_path): Likewise.\n+\t(total_savings): Likewise.\n+\n 2017-06-26  Richard Biener  <rguenther@suse.de>\n \n \tPR target/81175"}, {"sha": "dc2cb469d6c5bd45cfff9c1e1469a9894e58732c", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=df11b2ea7f3139e0f786e634040d425421ce77c4", "patch": "@@ -482,6 +482,36 @@ find_phi_def (tree base)\n   return c->cand_num;\n }\n \n+/* Determine whether all uses of NAME are directly or indirectly\n+   used by STMT.  That is, we want to know whether if STMT goes\n+   dead, the definition of NAME also goes dead.  */\n+static bool\n+uses_consumed_by_stmt (tree name, gimple *stmt, unsigned recurse = 0)\n+{\n+  gimple *use_stmt;\n+  imm_use_iterator iter;\n+  bool retval = true;\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, iter, name)\n+    {\n+      if (use_stmt == stmt || is_gimple_debug (use_stmt))\n+\tcontinue;\n+\n+      if (!is_gimple_assign (use_stmt)\n+\t  || !gimple_get_lhs (use_stmt)\n+\t  || !is_gimple_reg (gimple_get_lhs (use_stmt))\n+\t  || recurse >= 10\n+\t  || !uses_consumed_by_stmt (gimple_get_lhs (use_stmt), stmt,\n+\t\t\t\t     recurse + 1))\n+\t{\n+\t  retval = false;\n+\t  BREAK_FROM_IMM_USE_STMT (iter);\n+\t}\n+    }\n+\n+  return retval;\n+}\n+\n /* Helper routine for find_basis_for_candidate.  May be called twice:\n    once for the candidate's base expr, and optionally again either for\n    the candidate's phi definition or for a CAND_REF's alternative base\n@@ -558,7 +588,8 @@ find_basis_for_candidate (slsr_cand_t c)\n \n \t  /* If we found a hidden basis, estimate additional dead-code\n \t     savings if the phi and its feeding statements can be removed.  */\n-\t  if (basis && has_single_use (gimple_phi_result (phi_cand->cand_stmt)))\n+\t  tree feeding_var = gimple_phi_result (phi_cand->cand_stmt);\n+\t  if (basis && uses_consumed_by_stmt (feeding_var, c->cand_stmt))\n \t    c->dead_savings += phi_cand->dead_savings;\n \t}\n     }\n@@ -789,7 +820,7 @@ slsr_process_phi (gphi *phi, bool speed)\n \n \t  /* Gather potential dead code savings if the phi statement\n \t     can be removed later on.  */\n-\t  if (has_single_use (arg))\n+\t  if (uses_consumed_by_stmt (arg, phi))\n \t    {\n \t      if (gimple_code (arg_stmt) == GIMPLE_PHI)\n \t\tsavings += arg_cand->dead_savings;\n@@ -2479,7 +2510,9 @@ replace_uncond_cands_and_profitable_phis (slsr_cand_t c)\n {\n   if (phi_dependent_cand_p (c))\n     {\n-      if (c->kind == CAND_MULT)\n+      /* A multiply candidate with a stride of 1 is just an artifice\n+\t of a copy or cast; there is no value in replacing it.  */\n+      if (c->kind == CAND_MULT && wi::to_widest (c->stride) != 1)\n \t{\n \t  /* A candidate dependent upon a phi will replace a multiply by \n \t     a constant with an add, and will insert at most one add for\n@@ -2725,8 +2758,9 @@ phi_incr_cost (slsr_cand_t c, const widest_int &incr, gimple *phi,\n \t  if (gimple_code (arg_def) == GIMPLE_PHI)\n \t    {\n \t      int feeding_savings = 0;\n+\t      tree feeding_var = gimple_phi_result (arg_def);\n \t      cost += phi_incr_cost (c, incr, arg_def, &feeding_savings);\n-\t      if (has_single_use (gimple_phi_result (arg_def)))\n+\t      if (uses_consumed_by_stmt (feeding_var, phi))\n \t\t*savings += feeding_savings;\n \t    }\n \t  else\n@@ -2739,7 +2773,7 @@ phi_incr_cost (slsr_cand_t c, const widest_int &incr, gimple *phi,\n \t\t  tree basis_lhs = gimple_assign_lhs (basis->cand_stmt);\n \t\t  tree lhs = gimple_assign_lhs (arg_cand->cand_stmt);\n \t\t  cost += add_cost (true, TYPE_MODE (TREE_TYPE (basis_lhs)));\n-\t\t  if (has_single_use (lhs))\n+\t\t  if (uses_consumed_by_stmt (lhs, phi))\n \t\t    *savings += stmt_cost (arg_cand->cand_stmt, true);\n \t\t}\n \t    }\n@@ -2816,7 +2850,7 @@ lowest_cost_path (int cost_in, int repl_savings, slsr_cand_t c,\n       gimple *phi = lookup_cand (c->def_phi)->cand_stmt;\n       local_cost += phi_incr_cost (c, incr, phi, &savings);\n \n-      if (has_single_use (gimple_phi_result (phi)))\n+      if (uses_consumed_by_stmt (gimple_phi_result (phi), c->cand_stmt))\n \tlocal_cost -= savings;\n     }\n \n@@ -2860,7 +2894,7 @@ total_savings (int repl_savings, slsr_cand_t c, const widest_int &incr,\n       gimple *phi = lookup_cand (c->def_phi)->cand_stmt;\n       savings -= phi_incr_cost (c, incr, phi, &phi_savings);\n \n-      if (has_single_use (gimple_phi_result (phi)))\n+      if (uses_consumed_by_stmt (gimple_phi_result (phi), c->cand_stmt))\n \tsavings += phi_savings;\n     }\n "}, {"sha": "44ff59b5eb951533b349a43366a215dcd88011fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df11b2ea7f3139e0f786e634040d425421ce77c4", "patch": "@@ -1,3 +1,8 @@\n+2016-06-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/slsr-35.c: Remove -fno-code-hoisting workaround.\n+\t* gcc.dg/tree-ssa/slsr-36.c: Likewise.\n+\n 2017-06-26  Renlin Li  <renlin.li@arm.com>\n \t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n "}, {"sha": "0f57ea20b79e8ff0ce31ecd92e0d0e89d900f5b5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-35.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-35.c?ref=df11b2ea7f3139e0f786e634040d425421ce77c4", "patch": "@@ -3,7 +3,7 @@\n    phi has an argument which is a parameter.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fno-code-hoisting -fdump-tree-optimized\" } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n \n int\n f (int c, int i)"}, {"sha": "448d5d2cff1a4cab86c0b2bf038295d3162e15b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-36.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df11b2ea7f3139e0f786e634040d425421ce77c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-36.c?ref=df11b2ea7f3139e0f786e634040d425421ce77c4", "patch": "@@ -3,7 +3,7 @@\n    phi has an argument which is a parameter.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fno-code-hoisting -fdump-tree-optimized\" } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n \n int\n f (int s, int c, int i)"}]}