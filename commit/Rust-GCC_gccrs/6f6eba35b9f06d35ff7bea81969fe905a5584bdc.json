{"sha": "6f6eba35b9f06d35ff7bea81969fe905a5584bdc", "node_id": "C_kwDOANBUbNoAKDZmNmViYTM1YjlmMDZkMzVmZjdiZWE4MTk2OWZlOTA1YTU1ODRiZGM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-10T08:08:57Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-13T16:25:14Z"}, "message": "RISC-V: Fix ICE of RVV compare intrinsic\n\nvfrsub_vf_m.cpp: In function 'int main()':\nvfrsub_vf_m.cpp:5:43: error: invalid argument to built-in function\n   5 |   vbool32_t d = __riscv_vmflt_vf_f32m1_b32(c, b, 8);\n     |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\nduring RTL pass: expand\nvfrsub_vf_m.cpp:5:43: internal compiler error: Segmentation fault\n0x19f1b89 crash_signal\n       ../../../../riscv-gnu-toolchain-trunk/riscv-gcc/gcc/toplev.cc:314\n0x1472e2f store_expr(tree_node*, rtx_def*, int, bool, bool)\n       ../../../../riscv-gnu-toolchain-trunk/riscv-gcc/gcc/expr.cc:6348\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins.cc\n\t(function_expander::use_compare_insn): Add operand predicate check.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/bug-1.c: New test.", "tree": {"sha": "4f75ebef82f3fa723f67270f853744ba06a9cd9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f75ebef82f3fa723f67270f853744ba06a9cd9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f6eba35b9f06d35ff7bea81969fe905a5584bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6eba35b9f06d35ff7bea81969fe905a5584bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f6eba35b9f06d35ff7bea81969fe905a5584bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6eba35b9f06d35ff7bea81969fe905a5584bdc/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff57009bcc728044ba2de339ecd16721d48aba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff57009bcc728044ba2de339ecd16721d48aba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff57009bcc728044ba2de339ecd16721d48aba3"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "75e65091db303b8fde485cf39fbb0620abe80922", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6eba35b9f06d35ff7bea81969fe905a5584bdc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6eba35b9f06d35ff7bea81969fe905a5584bdc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=6f6eba35b9f06d35ff7bea81969fe905a5584bdc", "patch": "@@ -3084,6 +3084,15 @@ function_expander::use_compare_insn (rtx_code rcode, insn_code icode)\n \n   rtx op1 = expand_normal (CALL_EXPR_ARG (exp, arg_offset++));\n   rtx op2 = expand_normal (CALL_EXPR_ARG (exp, arg_offset++));\n+  if (!insn_operand_matches (icode, opno + 1, op1))\n+    op1 = force_reg (mode, op1);\n+  if (!insn_operand_matches (icode, opno + 2, op2))\n+    {\n+      if (VECTOR_MODE_P (GET_MODE (op2)))\n+\top2 = force_reg (mode, op2);\n+      else\n+\top2 = force_reg (GET_MODE_INNER (mode), op2);\n+    }\n   rtx comparison = gen_rtx_fmt_ee (rcode, mask_mode, op1, op2);\n   if (!VECTOR_MODE_P (GET_MODE (op2)))\n     comparison = gen_rtx_fmt_ee (rcode, mask_mode, op1,"}, {"sha": "a8843674e31cded78a6b2f64d49a31d4cab97d60", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/bug-1.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6eba35b9f06d35ff7bea81969fe905a5584bdc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6eba35b9f06d35ff7bea81969fe905a5584bdc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-1.c?ref=6f6eba35b9f06d35ff7bea81969fe905a5584bdc", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O0\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+int\n+f0 ()\n+{\n+  float b;\n+  vfloat32m1_t c;\n+  vbool32_t d = __riscv_vmflt_vf_f32m1_b32 (c, b, 8);\n+  return 0;\n+}\n+\n+int\n+f1 ()\n+{\n+  vfloat32m1_t c;\n+  vbool32_t d = __riscv_vmflt_vf_f32m1_b32 (c, 0, 8);\n+  return 0;\n+}\n+\n+int\n+f2 ()\n+{\n+  vfloat32m1_t c;\n+  vbool32_t d = __riscv_vmflt_vf_f32m1_b32 (c, 55.55, 8);\n+  return 0;\n+}\n+\n+int\n+f3 ()\n+{\n+  int32_t b;\n+  vint32m1_t c;\n+  vbool32_t d = __riscv_vmseq_vx_i32m1_b32 (c, b, 8);\n+  return 0;\n+}\n+\n+int\n+f4 ()\n+{\n+  vint32m1_t c;\n+  vbool32_t d = __riscv_vmseq_vx_i32m1_b32 (c, 11, 8);\n+  return 0;\n+}\n+\n+int\n+f5 ()\n+{\n+  int64_t b;\n+  vint64m1_t c;\n+  vbool64_t d = __riscv_vmseq_vx_i64m1_b64 (c, b, 8);\n+  return 0;\n+}\n+\n+int\n+f6 ()\n+{\n+  vint64m1_t c;\n+  vbool64_t d = __riscv_vmseq_vx_i64m1_b64 (c, 11, 8);\n+  return 0;\n+}\n+\n+int\n+f7 ()\n+{\n+  vint64m1_t c;\n+  vbool64_t d = __riscv_vmseq_vx_i64m1_b64 (c, 0xAAAA, 8);\n+  return 0;\n+}\n+\n+int\n+f8 ()\n+{\n+  vint64m1_t c;\n+  vbool64_t d = __riscv_vmseq_vx_i64m1_b64 (c, 0xAAAAAAAAAAAAAA, 8);\n+  return 0;\n+}"}]}