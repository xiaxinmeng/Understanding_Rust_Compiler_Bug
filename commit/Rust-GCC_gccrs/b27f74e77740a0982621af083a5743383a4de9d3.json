{"sha": "b27f74e77740a0982621af083a5743383a4de9d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3Zjc0ZTc3NzQwYTA5ODI2MjFhZjA4M2E1NzQzMzgzYTRkZTlkMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-31T20:21:11Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-31T20:21:11Z"}, "message": "PR c++/89083, c++/80864 - ICE with list initialization in template.\n\n\t* constexpr.c (adjust_temp_type): Use copy_node and change the type\n\tinstead of using build_constructor.\n\t* decl.c (reshape_init_r): Don't reshape a digested initializer.\n\tReturn the initializer for COMPOUND_LITERAL_P.\n\n\t* g++.dg/cpp0x/initlist107.C: New test.\n\t* g++.dg/cpp0x/initlist108.C: New test.\n\t* g++.dg/cpp0x/initlist109.C: New test.\n\t* g++.dg/cpp0x/initlist110.C: New test.\n\t* g++.dg/cpp0x/initlist111.C: New test.\n\t* g++.dg/cpp0x/initlist112.C: New test.\n\t* g++.dg/init/ptrfn4.C: New test.\n\nFrom-SVN: r268428", "tree": {"sha": "61a150f1a13f1a04a1e07e7f0a4d5b6806b740c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61a150f1a13f1a04a1e07e7f0a4d5b6806b740c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b27f74e77740a0982621af083a5743383a4de9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27f74e77740a0982621af083a5743383a4de9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27f74e77740a0982621af083a5743383a4de9d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27f74e77740a0982621af083a5743383a4de9d3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d4b4f4979171ef0dacc452439e3a317795441db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4b4f4979171ef0dacc452439e3a317795441db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4b4f4979171ef0dacc452439e3a317795441db"}], "stats": {"total": 227, "additions": 215, "deletions": 12}, "files": [{"sha": "a48b14c2091f4ec05017de864b0dcccfd7fa08b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -1,3 +1,11 @@\n+2019-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89083, c++/80864 - ICE with list initialization in template.\n+\t* constexpr.c (adjust_temp_type): Use copy_node and change the type\n+\tinstead of using build_constructor.\n+\t* decl.c (reshape_init_r): Don't reshape a digested initializer.\n+\tReturn the initializer for COMPOUND_LITERAL_P.\n+\n 2019-01-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/88752 - ICE with lambda and constexpr if."}, {"sha": "19eb44fc0c059800461cf483e979aa9a3062cf2b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -1291,7 +1291,12 @@ adjust_temp_type (tree type, tree temp)\n     return temp;\n   /* Avoid wrapping an aggregate value in a NOP_EXPR.  */\n   if (TREE_CODE (temp) == CONSTRUCTOR)\n-    return build_constructor (type, CONSTRUCTOR_ELTS (temp));\n+    {\n+      /* build_constructor wouldn't retain various CONSTRUCTOR flags.  */\n+      tree t = copy_node (temp);\n+      TREE_TYPE (t) = type;\n+      return t;\n+    }\n   if (TREE_CODE (temp) == EMPTY_CLASS_EXPR)\n     return build0 (EMPTY_CLASS_EXPR, type);\n   gcc_assert (scalarish_type_p (type));"}, {"sha": "65ba812deb676383909ffbeadd6e50797a3f4e16", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -6154,20 +6154,29 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p,\n     {\n       if (TREE_CODE (stripped_init) == CONSTRUCTOR)\n \t{\n-\t  if (TREE_TYPE (init) && TYPE_PTRMEMFUNC_P (TREE_TYPE (init)))\n-\t    /* There is no need to reshape pointer-to-member function\n-\t       initializers, as they are always constructed correctly\n-\t       by the front end.  */\n-           ;\n-\t  else if (COMPOUND_LITERAL_P (stripped_init))\n+\t  tree init_type = TREE_TYPE (init);\n+\t  if (init_type && TYPE_PTRMEMFUNC_P (init_type))\n+\t    /* There is no need to call reshape_init for pointer-to-member\n+\t       function initializers, as they are always constructed correctly\n+\t       by the front end.  Here we have e.g. {.__pfn=0B, .__delta=0},\n+\t       which is missing outermost braces.  We should warn below, and\n+\t       one of the routines below will wrap it in additional { }.  */;\n \t  /* For a nested compound literal, there is no need to reshape since\n-\t     brace elision is not allowed. Even if we decided to allow it,\n-\t     we should add a call to reshape_init in finish_compound_literal,\n-\t     before calling digest_init, so changing this code would still\n-\t     not be necessary.  */\n-\t    gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n+\t     we called reshape_init in finish_compound_literal, before calling\n+\t     digest_init.  */\n+\t  else if (COMPOUND_LITERAL_P (stripped_init)\n+\t\t   /* Similarly, a CONSTRUCTOR of the target's type is a\n+\t\t      previously digested initializer.  */\n+\t\t   || same_type_ignoring_top_level_qualifiers_p (type,\n+\t\t\t\t\t\t\t\t init_type))\n+\t    {\n+\t      ++d->cur;\n+\t      gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n+\t      return init;\n+\t    }\n \t  else\n \t    {\n+\t      /* Something that hasn't been reshaped yet.  */\n \t      ++d->cur;\n \t      gcc_assert (BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n \t      return reshape_init (type, init, complain);"}, {"sha": "ce63dad84d0952800865fbbb13eef31bfcd3cb5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -1,3 +1,14 @@\n+2019-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89083, c++/80864 - ICE with list initialization in template.\n+\t* g++.dg/cpp0x/initlist107.C: New test.\n+\t* g++.dg/cpp0x/initlist108.C: New test.\n+\t* g++.dg/cpp0x/initlist109.C: New test.\n+\t* g++.dg/cpp0x/initlist110.C: New test.\n+\t* g++.dg/cpp0x/initlist111.C: New test.\n+\t* g++.dg/cpp0x/initlist112.C: New test.\n+\t* g++.dg/init/ptrfn4.C: New test.\n+\n 2019-01-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/89122"}, {"sha": "9acfe7cb267cef2b8ad6f8c058d8562fe8e8a9f9", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist107.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist107.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/89083\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wmissing-braces\" }\n+\n+struct A { int x[3]; };\n+\n+template<class T>\n+decltype(A{1, 2}, T()) fn1(T t) // { dg-warning \"missing braces\" }\n+{\n+  return t;\n+}\n+\n+template<class T>\n+decltype(A{{1, 2}}, T()) fn2(T t)\n+{\n+  return t;\n+}\n+\n+void\n+f()\n+{\n+  fn1(1);\n+  fn2(1);\n+}"}, {"sha": "e2839787fa5814956dbde2212b2c2c966dcb7277", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist108.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist108.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/80864\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wmissing-braces\" }\n+\n+struct S {\n+  char c[1];\n+};\n+\n+template <typename T>\n+void\n+fn ()\n+{\n+   constexpr S s1 = S{};\n+   constexpr S s2 = S{{}};\n+   constexpr S s3 = S{{{}}};\n+   constexpr S s4 = {};\n+   constexpr S s5 = {{}};\n+   constexpr S s6 = {{{}}};\n+   constexpr S s7{{}};\n+   constexpr S s8{S{}};\n+   constexpr S s9{S{{}}};\n+   constexpr S s10{S{{{}}}};\n+   constexpr S s11 = S();\n+   constexpr S s12 = S({});\n+   constexpr S s13 = S({{}});\n+   constexpr S s14 = {{}};\n+   constexpr S s15 = {{{}}};\n+}\n+\n+void\n+foo ()\n+{\n+  fn<int>();\n+}"}, {"sha": "1351a2d57cedbdc286b531c01254ec622df203d0", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist109.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist109.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist109.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist109.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/80864\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wmissing-braces\" }\n+\n+struct S {};\n+struct A { S s[1]; };\n+\n+template <typename>\n+struct R { static constexpr auto h = A{S{}}; }; // { dg-warning \"missing braces\" }\n+\n+template <typename>\n+struct R2 { static constexpr auto h = A{{S{}}}; };\n+\n+A foo = R<int>::h;\n+A foo2 = R2<int>::h;"}, {"sha": "7bb229cbc7e56f9fe087dfa233cb11641a94c428", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist110.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist110.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist110.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist110.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/89083\n+// { dg-do compile { target c++11 } }\n+\n+struct C { int a[3]; int i; };\n+struct B { C c[3]; };\n+struct A { B b[3]; };\n+\n+template<class T, int N>\n+decltype(A{N, N}, T()) fn1(T t)\n+{\n+  return t;\n+}\n+\n+template<class T, int N>\n+decltype(A{{{N, N, N}, {N + 1}}}, T()) fn2(T t)\n+{\n+  return t;\n+}\n+\n+template<class T, int N, int M>\n+decltype(A{{N + M}}, T()) fn3(T t)\n+{\n+  return t;\n+}\n+\n+void\n+f()\n+{\n+  fn1<int, 10>(1);\n+  fn2<int, 10>(1);\n+  fn3<int, 10, 20>(1);\n+}"}, {"sha": "7f96115e6182e600c1d92775f928aaeda0e41f54", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist111.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist111.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist111.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist111.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/80864\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  int c[3];\n+};\n+\n+template <typename T, int N>\n+void\n+fn ()\n+{\n+   constexpr S s1 = S{N};\n+   constexpr S s2 = S{{N, N}};\n+   constexpr S s3 = S{N, N};\n+   constexpr S s4 = {N};\n+   constexpr S s5 = {{N}};\n+   constexpr S s6 = {N, N};\n+   constexpr S s7{{N}};\n+   constexpr S s8{S{N}};\n+   constexpr S s9{S{{N}}};\n+   constexpr S s10{S{{N}}};\n+   constexpr S s11 = S({N});\n+   constexpr S s12 = S({{N}});\n+   constexpr S s13 = {{N}};\n+   constexpr S s14 = {{N, N, N}};\n+}\n+\n+void\n+foo ()\n+{\n+  fn<int, 10>();\n+}"}, {"sha": "cd97098eec53f43ea8a977aa01c7e73c0fd62a16", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist112.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist112.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist112.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist112.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/80864\n+// { dg-do compile { target c++11 } }\n+\n+struct S {int a[2]; };\n+struct A { S s[1]; };\n+\n+template <typename, int N>\n+struct R { static constexpr auto h = A{S{N}}; };\n+\n+template <typename, int N>\n+struct R2 { static constexpr auto h = A{S{{N, N}}}; };\n+\n+A foo = R<int, 10>::h;\n+A foo2 = R2<int, 10>::h;"}, {"sha": "e1635c86483d521171af738fa47eb009d5ac256d", "filename": "gcc/testsuite/g++.dg/init/ptrfn4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27f74e77740a0982621af083a5743383a4de9d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn4.C?ref=b27f74e77740a0982621af083a5743383a4de9d3", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-Wmissing-braces\" }\n+\n+struct S { };\n+typedef void (S::*fptr1) (int);\n+\n+struct A {\n+  fptr1 f;\n+};\n+\n+A a[] =\n+{\n+ (fptr1) 0,\n+}; // { dg-warning \"missing braces around initializer\" }\n+\n+A a2[] =\n+{\n+ { (fptr1) 0 }\n+};"}]}