{"sha": "a0dabda52b4085f759f495d3e60b6583d7b3668c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBkYWJkYTUyYjQwODVmNzU5ZjQ5NWQzZTYwYjY1ODNkN2IzNjY4Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-03-15T21:48:01Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-03-15T21:48:01Z"}, "message": "Handle compilation of nested functions from another scope.\n\nFrom-SVN: r9185", "tree": {"sha": "de550194d07caa99c7e8e4d1bb77efbed87b201e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de550194d07caa99c7e8e4d1bb77efbed87b201e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0dabda52b4085f759f495d3e60b6583d7b3668c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0dabda52b4085f759f495d3e60b6583d7b3668c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0dabda52b4085f759f495d3e60b6583d7b3668c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0dabda52b4085f759f495d3e60b6583d7b3668c/comments", "author": null, "committer": null, "parents": [{"sha": "ea9be0775811e679b8c32cf11475ff4c432852fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9be0775811e679b8c32cf11475ff4c432852fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9be0775811e679b8c32cf11475ff4c432852fa"}], "stats": {"total": 129, "additions": 95, "deletions": 34}, "files": [{"sha": "442b506b9e23fdc812954ffef9f2352e4041000e", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0dabda52b4085f759f495d3e60b6583d7b3668c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0dabda52b4085f759f495d3e60b6583d7b3668c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a0dabda52b4085f759f495d3e60b6583d7b3668c", "patch": "@@ -462,8 +462,8 @@ find_function_data (decl)\n    since this function knows only about language-independent variables.  */\n \n void\n-push_function_context_to (toplevel)\n-     int toplevel;\n+push_function_context_to (context)\n+     tree context;\n {\n   struct function *p = (struct function *) xmalloc (sizeof (struct function));\n \n@@ -481,6 +481,7 @@ push_function_context_to (toplevel)\n   p->calls_alloca = current_function_calls_alloca;\n   p->has_nonlocal_label = current_function_has_nonlocal_label;\n   p->has_nonlocal_goto = current_function_has_nonlocal_goto;\n+  p->contains_functions = current_function_contains_functions;\n   p->args_size = current_function_args_size;\n   p->pretend_args_size = current_function_pretend_args_size;\n   p->arg_offset_rtx = current_function_arg_offset_rtx;\n@@ -514,7 +515,7 @@ push_function_context_to (toplevel)\n   p->fixup_var_refs_queue = 0;\n   p->epilogue_delay_list = current_function_epilogue_delay_list;\n \n-  save_tree_status (p, toplevel);\n+  save_tree_status (p, context);\n   save_storage_status (p);\n   save_emit_status (p);\n   init_emit ();\n@@ -529,15 +530,15 @@ push_function_context_to (toplevel)\n void\n push_function_context ()\n {\n-  push_function_context_to (0);\n+  push_function_context_to (current_function_decl);\n }\n \n /* Restore the last saved context, at the end of a nested function.\n    This function is called from language-specific code.  */\n \n void\n-pop_function_context_from (toplevel)\n-     int toplevel;\n+pop_function_context_from (context)\n+     tree context;\n {\n   struct function *p = outer_function_chain;\n \n@@ -554,8 +555,9 @@ pop_function_context_from (toplevel)\n   current_function_calls_alloca = p->calls_alloca;\n   current_function_has_nonlocal_label = p->has_nonlocal_label;\n   current_function_has_nonlocal_goto = p->has_nonlocal_goto;\n-  if (! toplevel)\n-    current_function_contains_functions = 1;\n+  current_function_contains_functions\n+    = p->contains_functions || p->inline_obstacks\n+      || context == current_function_decl;\n   current_function_args_size = p->args_size;\n   current_function_pretend_args_size = p->pretend_args_size;\n   current_function_arg_offset_rtx = p->arg_offset_rtx;\n@@ -589,7 +591,7 @@ pop_function_context_from (toplevel)\n   current_function_epilogue_delay_list = p->epilogue_delay_list;\n   reg_renumber = 0;\n \n-  restore_tree_status (p, toplevel);\n+  restore_tree_status (p);\n   restore_storage_status (p);\n   restore_expr_status (p);\n   restore_emit_status (p);\n@@ -616,7 +618,7 @@ pop_function_context_from (toplevel)\n \n void pop_function_context ()\n {\n-  pop_function_context_from (0);\n+  pop_function_context_from (current_function_decl);\n }\n \f\n /* Allocate fixed slots in the stack frame of the current function.  */"}, {"sha": "e8b32e80e41d082729b0afc623e153dd22655025", "filename": "gcc/function.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0dabda52b4085f759f495d3e60b6583d7b3668c/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0dabda52b4085f759f495d3e60b6583d7b3668c/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=a0dabda52b4085f759f495d3e60b6583d7b3668c", "patch": "@@ -47,6 +47,14 @@ struct sequence_stack\n };\n \n extern struct sequence_stack *sequence_stack;\n+\n+/* Stack of single obstacks.  */\n+\n+struct simple_obstack_stack\n+{\n+  struct obstack *obstack;\n+  struct simple_obstack_stack *next;\n+};\n \f\n /* This structure can save all the important global and static variables\n    describing the status of the current function.  */\n@@ -67,6 +75,7 @@ struct function\n   int calls_alloca;\n   int has_nonlocal_label;\n   int has_nonlocal_goto;\n+  int contains_functions;\n   rtx nonlocal_goto_handler_slot;\n   rtx nonlocal_goto_stack_level;\n   tree nonlocal_labels;\n@@ -158,6 +167,7 @@ struct function\n   struct obstack *expression_obstack;\n   struct obstack *saveable_obstack;\n   struct obstack *rtl_obstack;\n+  struct simple_obstack_stack *inline_obstacks;\n \n   /* For integrate.c.  */\n   int uses_const_pool;"}, {"sha": "166ca4bfc367ae657e4ecd92afb37e0cdc954fb8", "filename": "gcc/tree.c", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0dabda52b4085f759f495d3e60b6583d7b3668c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0dabda52b4085f759f495d3e60b6583d7b3668c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a0dabda52b4085f759f495d3e60b6583d7b3668c", "patch": "@@ -66,6 +66,17 @@ struct obstack *function_maybepermanent_obstack;\n \n struct obstack maybepermanent_obstack;\n \n+/* This is a list of function_maybepermanent_obstacks for top-level inline\n+   functions that are compiled in the middle of compiling other functions.  */\n+\n+struct simple_obstack_stack *toplev_inline_obstacks;\n+\n+/* This is a list of function_maybepermanent_obstacks for inline functions\n+   nested in the current function that were compiled in the middle of\n+   compiling other functions.  */\n+\n+struct simple_obstack_stack *inline_obstacks;\n+\n /* The contents of the current function definition are allocated\n    in this obstack, and all are freed at the end of the function.\n    For top-level functions, this is temporary_obstack.\n@@ -315,12 +326,15 @@ gcc_obstack_init (obstack)\n }\n \n /* Save all variables describing the current status into the structure *P.\n-   This is used before starting a nested function.  */\n+   This is used before starting a nested function.\n+\n+   CONTEXT is the decl_function_context for the function we're about to\n+   compile; if it isn't current_function_decl, we have to play some games.  */\n \n void\n-save_tree_status (p, toplevel)\n+save_tree_status (p, context)\n      struct function *p;\n-     int toplevel;\n+     tree context;\n {\n   p->all_types_permanent = all_types_permanent;\n   p->momentary_stack = momentary_stack;\n@@ -333,16 +347,42 @@ save_tree_status (p, toplevel)\n   p->expression_obstack = expression_obstack;\n   p->saveable_obstack = saveable_obstack;\n   p->rtl_obstack = rtl_obstack;\n+  p->inline_obstacks = inline_obstacks;\n \n-  if (! toplevel)\n+  if (context == current_function_decl)\n+    /* Objects that need to be saved in this function can be in the nonsaved\n+       obstack of the enclosing function since they can't possibly be needed\n+       once it has returned.  */\n+    function_maybepermanent_obstack = function_obstack;\n+  else\n     {\n-      /* Objects that need to be saved in this function can be in the nonsaved\n-\t obstack of the enclosing function since they can't possibly be needed\n-\t once it has returned.  */\n-      function_maybepermanent_obstack = function_obstack;\n-      maybepermanent_firstobj\n-\t= (char *) obstack_finish (function_maybepermanent_obstack);\n-    }\n+      /* We're compiling a function which isn't nested in the current\n+         function.  We need to create a new maybepermanent_obstack for this\n+         function, since it can't go onto any of the existing obstacks.  */\n+      struct simple_obstack_stack **head;\n+      struct simple_obstack_stack *current;\n+\n+      if (context == NULL_TREE)\n+\thead = &toplev_inline_obstacks;\n+      else\n+\t{\n+\t  struct function *f = find_function_data (context);\n+\t  head = &f->inline_obstacks;\n+\t}\n+\n+      current = ((struct simple_obstack_stack *)\n+\t\t xmalloc (sizeof (struct simple_obstack_stack)));\n+\n+      current->obstack = (struct obstack *) xmalloc (sizeof (struct obstack));\n+      function_maybepermanent_obstack = current->obstack;\n+      gcc_obstack_init (function_maybepermanent_obstack);\n+\n+      current->next = *head;\n+      *head = current;\n+    }      \n+\n+  maybepermanent_firstobj\n+    = (char *) obstack_finish (function_maybepermanent_obstack);\n \n   function_obstack = (struct obstack *) xmalloc (sizeof (struct obstack));\n   gcc_obstack_init (function_obstack);\n@@ -359,26 +399,22 @@ save_tree_status (p, toplevel)\n    This is used after a nested function.  */\n \n void\n-restore_tree_status (p, toplevel)\n+restore_tree_status (p)\n      struct function *p;\n-     int toplevel;\n {\n   all_types_permanent = p->all_types_permanent;\n   momentary_stack = p->momentary_stack;\n \n   obstack_free (&momentary_obstack, momentary_function_firstobj);\n \n-  if (! toplevel)\n-    {\n-      /* Free saveable storage used by the function just compiled and not\n-\t saved.\n-\n-\t CAUTION: This is in function_obstack of the containing function.\n-\t So we must be sure that we never allocate from that obstack during\n-\t the compilation of a nested function if we expect it to survive\n-\t past the nested function's end.  */\n-      obstack_free (function_maybepermanent_obstack, maybepermanent_firstobj);\n-    }\n+  /* Free saveable storage used by the function just compiled and not\n+     saved.\n+\n+     CAUTION: This is in function_obstack of the containing function.\n+     So we must be sure that we never allocate from that obstack during\n+     the compilation of a nested function if we expect it to survive\n+     past the nested function's end.  */\n+  obstack_free (function_maybepermanent_obstack, maybepermanent_firstobj);\n \n   obstack_free (function_obstack, 0);\n   free (function_obstack);\n@@ -392,6 +428,7 @@ restore_tree_status (p, toplevel)\n   expression_obstack = p->expression_obstack;\n   saveable_obstack = p->saveable_obstack;\n   rtl_obstack = p->rtl_obstack;\n+  inline_obstacks = p->inline_obstacks;\n }\n \f\n /* Start allocating on the temporary (per function) obstack.\n@@ -408,6 +445,7 @@ temporary_allocation ()\n   expression_obstack = function_obstack;\n   rtl_obstack = saveable_obstack = function_maybepermanent_obstack;\n   momentary_stack = 0;\n+  inline_obstacks = 0;\n }\n \n /* Start allocating on the permanent obstack but don't\n@@ -535,6 +573,17 @@ permanent_allocation (function_end)\n   obstack_free (function_maybepermanent_obstack, maybepermanent_firstobj);\n   obstack_free (&temp_decl_obstack, temp_decl_firstobj);\n \n+  /* Free up the maybepermanent_obstacks for any of our nested functions\n+     which were compiled at a lower level.  */\n+  while (inline_obstacks)\n+    {\n+      struct simple_obstack_stack *current = inline_obstacks;\n+      inline_obstacks = current->next;\n+      obstack_free (current->obstack, 0);\n+      free (current->obstack);\n+      free (current);\n+    }\n+\n   current_obstack = &permanent_obstack;\n   expression_obstack = &permanent_obstack;\n   rtl_obstack = saveable_obstack = &permanent_obstack;"}]}