{"sha": "340ddeae6611f6ab524211a009e97a85b4bba549", "node_id": "C_kwDOANBUbNoAKDM0MGRkZWFlNjYxMWY2YWI1MjQyMTFhMDA5ZTk3YTg1YjRiYmE1NDk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-16T08:46:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-16T09:29:02Z"}, "message": "middle-end/108086 - remove PR28238 fix superseeded by PR34018 fix\n\nThere's quite special code in copy_bb that handles inline substitution\nof a non-invariant address in place of an invariant one that's\nnow handled by more generic handling of this case in remap_gimple_op_r\nso this removes the special casing that happens in a hot path, providing\na small speedup.\n\n\tPR middle-end/108086\n\t* tree-inline.cc (copy_bb): Remove handling of (foo *)&this->m\n\tsubstitution which is done in remap_gimple_op_r via\n\tre-gimplifying.", "tree": {"sha": "6a00bb093c95bdf8656b4ab93a91ca6b2aeec328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a00bb093c95bdf8656b4ab93a91ca6b2aeec328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/340ddeae6611f6ab524211a009e97a85b4bba549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340ddeae6611f6ab524211a009e97a85b4bba549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340ddeae6611f6ab524211a009e97a85b4bba549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340ddeae6611f6ab524211a009e97a85b4bba549/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddcaa60983b50378bde1b7e327086fe0ce101795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddcaa60983b50378bde1b7e327086fe0ce101795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddcaa60983b50378bde1b7e327086fe0ce101795"}], "stats": {"total": 15, "additions": 0, "deletions": 15}, "files": [{"sha": "9fd971a034ceab4d26d40099ac224bc16cd0c1c3", "filename": "gcc/tree-inline.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340ddeae6611f6ab524211a009e97a85b4bba549/gcc%2Ftree-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340ddeae6611f6ab524211a009e97a85b4bba549/gcc%2Ftree-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.cc?ref=340ddeae6611f6ab524211a009e97a85b4bba549", "patch": "@@ -2074,21 +2074,6 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t  gimple_duplicate_stmt_histograms (cfun, stmt, id->src_cfun,\n \t\t\t\t\t    orig_stmt);\n \n-\t  /* With return slot optimization we can end up with\n-\t     non-gimple (foo *)&this->m, fix that here.  */\n-\t  if (is_gimple_assign (stmt)\n-\t      && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n-\t      && !is_gimple_val (gimple_assign_rhs1 (stmt)))\n-\t    {\n-\t      tree new_rhs;\n-\t      new_rhs = force_gimple_operand_gsi (&seq_gsi,\n-\t\t\t\t\t\t  gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t\t  true, NULL, false,\n-\t\t\t\t\t\t  GSI_CONTINUE_LINKING);\n-\t      gimple_assign_set_rhs1 (stmt, new_rhs);\n-\t      id->regimplify = false;\n-\t    }\n-\n \t  gsi_insert_after (&seq_gsi, stmt, GSI_NEW_STMT);\n \n \t  if (id->regimplify)"}]}