{"sha": "26f36fc9f65e8bcc265d62996d65616e437fb3fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmMzZmYzlmNjVlOGJjYzI2NWQ2Mjk5NmQ2NTYxNmU0MzdmYjNmYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-04T09:58:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-04T09:58:41Z"}, "message": "[multiple changes]\n\n2015-03-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Check_References): When checking for an unused\n\tin-out parameter of a class- wide type, use its type to determine\n\twhether it is private, in order to avoid a spurious warning when\n\tsubprogram spec and body are in different units.\n\n2015-03-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_attr.adb: Improve warning messages.\n\nFrom-SVN: r221178", "tree": {"sha": "e6cb9198d215ba3759d978fc937960b14a98fb47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6cb9198d215ba3759d978fc937960b14a98fb47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f36fc9f65e8bcc265d62996d65616e437fb3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f36fc9f65e8bcc265d62996d65616e437fb3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f36fc9f65e8bcc265d62996d65616e437fb3fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f36fc9f65e8bcc265d62996d65616e437fb3fa/comments", "author": null, "committer": null, "parents": [{"sha": "488f9623ba0c3762eec2fdd9117c0d8dccb4d797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488f9623ba0c3762eec2fdd9117c0d8dccb4d797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488f9623ba0c3762eec2fdd9117c0d8dccb4d797"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "065a991727a5982970d5d62edce2c31fbb53cf2a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f36fc9f65e8bcc265d62996d65616e437fb3fa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f36fc9f65e8bcc265d62996d65616e437fb3fa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=26f36fc9f65e8bcc265d62996d65616e437fb3fa", "patch": "@@ -1,3 +1,14 @@\n+2015-03-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): When checking for an unused\n+\tin-out parameter of a class- wide type, use its type to determine\n+\twhether it is private, in order to avoid a spurious warning when\n+\tsubprogram spec and body are in different units.\n+\n+2015-03-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb: Improve warning messages.\n+\n 2015-03-04  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch6.adb (Expand_N_Subprogram_Body): Avoid trying to unnest"}, {"sha": "01b0cd8e8851c3b9d9f5875a4bd39aac9937c754", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f36fc9f65e8bcc265d62996d65616e437fb3fa/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f36fc9f65e8bcc265d62996d65616e437fb3fa/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=26f36fc9f65e8bcc265d62996d65616e437fb3fa", "patch": "@@ -1103,6 +1103,10 @@ package body Sem_Attr is\n          --  Subsidiary to Check_Placemenet_In_XXX. Determine whether arbitrary\n          --  node Nod is within enclosing node Encl_Nod.\n \n+         procedure Placement_Error;\n+         --  Emit a general error when the attributes does not appear in a\n+         --  postcondition-like aspect or pragma.\n+\n          ------------------------------\n          -- Check_Placement_In_Check --\n          ------------------------------\n@@ -1124,17 +1128,7 @@ package body Sem_Attr is\n             --  Otherwise the placement of the attribute is illegal\n \n             else\n-               if Aname = Name_Old then\n-                  Error_Attr\n-                    (\"attribute % can only appear in postcondition\", P);\n-\n-               --  Specialize the error message for attribute 'Result\n-\n-               else\n-                  Error_Attr\n-                    (\"attribute % can only appear in postcondition of \"\n-                     & \"function\", P);\n-               end if;\n+               Placement_Error;\n             end if;\n          end Check_Placement_In_Check;\n \n@@ -1236,6 +1230,24 @@ package body Sem_Attr is\n             return False;\n          end Is_Within;\n \n+         ---------------------\n+         -- Placement_Error --\n+         ---------------------\n+\n+         procedure Placement_Error is\n+         begin\n+            if Aname = Name_Old then\n+               Error_Attr (\"attribute % can only appear in postcondition\", P);\n+\n+            --  Specialize the error message for attribute 'Result\n+\n+            else\n+               Error_Attr\n+                 (\"attribute % can only appear in postcondition of function\",\n+                  P);\n+            end if;\n+         end Placement_Error;\n+\n          --  Local variables\n \n          Prag      : Node_Id;\n@@ -1294,14 +1306,14 @@ package body Sem_Attr is\n                Check_Placement_In_Test_Case (Prag);\n \n             else\n-               Error_Attr (\"attribute % can only appear in postcondition\", P);\n+               Placement_Error;\n                return;\n             end if;\n \n          --  Otherwise the placement of the attribute is illegal\n \n          else\n-            Error_Attr (\"attribute % can only appear in postcondition\", P);\n+            Placement_Error;\n             return;\n          end if;\n \n@@ -4797,7 +4809,7 @@ package body Sem_Attr is\n             if Is_Constant_Object (Pref_Id) then\n                Error_Msg_Name_1 := Name_Old;\n                Error_Msg_N\n-                 (\"??atribute % applied to constant has no effect\", P);\n+                 (\"??attribute % applied to constant has no effect\", P);\n             end if;\n \n          --  Otherwise the prefix is not a simple name"}, {"sha": "f3768621399f306d8718db45a11e1415e3d34d6d", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f36fc9f65e8bcc265d62996d65616e437fb3fa/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f36fc9f65e8bcc265d62996d65616e437fb3fa/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=26f36fc9f65e8bcc265d62996d65616e437fb3fa", "patch": "@@ -1080,6 +1080,13 @@ package body Sem_Warn is\n                 (Ekind_In (E1, E_Out_Parameter, E_In_Out_Parameter)\n                   and then not Is_Protected_Type (Current_Scope))\n             then\n+               --  If the formal has a class-wide type, retrieve its type\n+               --  because checks below depend on its private nature.\n+\n+               if Is_Class_Wide_Type (E1T) then\n+                  E1T := Etype (E1T);\n+               end if;\n+\n                --  Case of an unassigned variable\n \n                --  First gather any Unset_Reference indication for E1. In the"}]}