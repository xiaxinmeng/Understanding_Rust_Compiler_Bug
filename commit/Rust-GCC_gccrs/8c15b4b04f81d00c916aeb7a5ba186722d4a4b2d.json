{"sha": "8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxNWI0YjA0ZjgxZDAwYzkxNmFlYjdhNWJhMTg2NzIyZDRhNGIyZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-12T16:18:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-12T16:18:09Z"}, "message": "i386.md (QImode and HImode cmove splitters): Merge QImode and HImode splitters.\n\n\t* config/i386/i386.md (QImode and HImode cmove splitters): Merge\n\tQImode and HImode splitters.  Use ix86_comparison_operator.\n\tExplicitly match FLAGS_REG.\n\t(DFmode cmove splitter): Explicitly match FLAGS_REG.\n\nFrom-SVN: r189440", "tree": {"sha": "de867526b4919698f5a4e36e5f1a28c907a1808c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de867526b4919698f5a4e36e5f1a28c907a1808c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d/comments", "author": null, "committer": null, "parents": [{"sha": "759658521a6e6c4f1b426752ea568ad69806b8a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759658521a6e6c4f1b426752ea568ad69806b8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759658521a6e6c4f1b426752ea568ad69806b8a2"}], "stats": {"total": 77, "additions": 34, "deletions": 43}, "files": [{"sha": "2eb783b44f88eaebea4ab48df027f07d9eda0bda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d", "patch": "@@ -1,3 +1,10 @@\n+2012-07-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (QImode and HImode cmove splitters): Merge\n+\tQImode and HImode splitters.  Use ix86_comparison_operator.\n+\tExplicitly match FLAGS_REG.\n+\t(DFmode cmove splitter): Explicitly match FLAGS_REG.\n+\n 2012-07-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* expr.h (can_move_by_pieces): Move prototype from here ...\n@@ -55,7 +62,7 @@\n \t* gimplify.c (gimplify_bind_expr): Control\n \tclobber generation with new option.\n \t(gimplify_target_expr): Ditto.\n-\tcommon.opt: New option.\n+\t* common.opt: New option.\n \n 2012-07-10  Julian Brown  <julian@codesourcery.com>\n \n@@ -167,8 +174,7 @@\n \t(gimple_phi_arg_has_block): New function.\n \t(redirect_edge_var_map_block): New function.\n \t* tree-flow.h (_edge_var_map): New field.\n-\t* tree-ssa-live.c (remove_unused_locals): Mark phi_arg's block\n-\tas used.\n+\t* tree-ssa-live.c (remove_unused_locals): Mark phi_arg's block as used.\n \t* tree-eh.c (cleanup_empty_eh_merge_phis): Add block debug info for\n \tredirect_edge_var_map_add.\n \t* tree-outof-ssa.c (_elim_graph): New field."}, {"sha": "f1eec7897e3be68318b885f8cd1688dc13227e95", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8c15b4b04f81d00c916aeb7a5ba186722d4a4b2d", "patch": "@@ -16372,25 +16372,34 @@\n   [(set_attr \"type\" \"icmov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*movqicc_noc\"\n+(define_insn \"*movqicc_noc\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:QI (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t   [(match_operand 4 \"flags_reg_operand\")\n-\t\t\t    (const_int 0)])\n+\t\t\t   [(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:QI 2 \"register_operand\" \"r,0\")\n \t\t      (match_operand:QI 3 \"register_operand\" \"0,r\")))]\n   \"TARGET_CMOVE && !TARGET_PARTIAL_REG_STALL\"\n   \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n-\t\t      (match_dup 2)\n-\t\t      (match_dup 3)))]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[2] = gen_lowpart (SImode, operands[2]);\n-   operands[3] = gen_lowpart (SImode, operands[3]);\"\n   [(set_attr \"type\" \"icmov\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_split\n+  [(set (match_operand 0 \"register_operand\")\n+\t(if_then_else (match_operator 1 \"ix86_comparison_operator\"\n+\t\t\t[(reg FLAGS_REG) (const_int 0)])\n+\t\t      (match_operand 2 \"register_operand\")\n+\t\t      (match_operand 3 \"register_operand\")))]\n+  \"TARGET_CMOVE && !TARGET_PARTIAL_REG_STALL\n+   && (GET_MODE (operands[0]) == QImode\n+       || GET_MODE (operands[0]) == HImode)\n+   && reload_completed\"\n+  [(set (match_dup 0)\n+\t(if_then_else:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[3] = gen_lowpart (SImode, operands[3]);\n+})\n \n (define_expand \"mov<mode>cc\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n@@ -16450,21 +16459,16 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_and_not_any_fp_reg_operand\")\n \t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n-\t\t\t\t[(match_operand 4 \"flags_reg_operand\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\")))]\n   \"!TARGET_64BIT && reload_completed\"\n   [(set (match_dup 2)\n-\t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n-\t\t      (match_dup 5)\n-\t\t      (match_dup 6)))\n+\t(if_then_else:SI (match_dup 1) (match_dup 4) (match_dup 5)))\n    (set (match_dup 3)\n-\t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n-\t\t      (match_dup 7)\n-\t\t      (match_dup 8)))]\n+\t(if_then_else:SI (match_dup 1) (match_dup 6) (match_dup 7)))]\n {\n-  split_double_mode (DImode, &operands[2], 2, &operands[5], &operands[7]);\n+  split_double_mode (DImode, &operands[2], 2, &operands[4], &operands[6]);\n   split_double_mode (DImode, &operands[0], 1, &operands[2], &operands[3]);\n })\n \n@@ -16871,25 +16875,6 @@\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = gen_lowpart (SImode, operands[1]);\n })\n-\n-(define_split\n-  [(set (match_operand 0 \"register_operand\")\n-\t(if_then_else (match_operator 1 \"ordered_comparison_operator\"\n-\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand 2 \"register_operand\")\n-\t\t      (match_operand 3 \"register_operand\")))]\n-  \"! TARGET_PARTIAL_REG_STALL && TARGET_CMOVE\n-   && (GET_MODE (operands[0]) == HImode\n-       || (GET_MODE (operands[0]) == QImode\n-\t   && (TARGET_PROMOTE_QImode\n-\t       || optimize_insn_for_size_p ())))\"\n-  [(set (match_dup 0)\n-\t(if_then_else:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-{\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[2] = gen_lowpart (SImode, operands[2]);\n-  operands[3] = gen_lowpart (SImode, operands[3]);\n-})\n \f\n ;; RTL Peephole optimizations, run before sched2.  These primarily look to\n ;; transform a complex memory operation into two memory to register operations."}]}