{"sha": "a23e02091ef789192db85112f2b6b0dd2724d95c", "node_id": "C_kwDOANBUbNoAKGEyM2UwMjA5MWVmNzg5MTkyZGI4NTExMmYyYjZiMGRkMjcyNGQ5NWM", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-09-23T12:46:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-05T08:20:07Z"}, "message": "[Ada] introduce stack scrub (strub) feature\n\ngcc/ada/\n\n\t* doc/gnat_rm.rst: Add...\n\t* doc/gnat_rm/security_hardening_features.rst: New.\n\t* doc/gnat_rm/about_this_guide.rst: Link to new chapter.\n\t* gnat_rm.texi: Regenerate.\n\t* gcc-interface/utils.c (handle_strub_attribute): New.\n\t(gnat_internal_attribute_table): Add strub.\n\t* libgnat/a-except.adb: Make Rcheck_CE_* strub-callable.\n\t* libgnat/a-except.ads (Raise_Exception): Likewise.\n\t(Raise_Exception_Always): Likewise.\n\t* libgnat/s-arit128.ads (Multiply_With_Ovflo_Check128):\n\tLikewise.\n\t* libgnat/s-arit64.ads (Multiply_With_Ovflo_Check64):\n\tLikewise.\n\t* libgnat/s-secsta.ads (SS_Allocate, SS_Mark, SS_Release):\n\tLikewise.", "tree": {"sha": "d707b1d42db105416e0571e0db29a3863ac6b9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d707b1d42db105416e0571e0db29a3863ac6b9ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23e02091ef789192db85112f2b6b0dd2724d95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23e02091ef789192db85112f2b6b0dd2724d95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23e02091ef789192db85112f2b6b0dd2724d95c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23e02091ef789192db85112f2b6b0dd2724d95c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1657ff3a089785542938216e011f454be03ed89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1657ff3a089785542938216e011f454be03ed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1657ff3a089785542938216e011f454be03ed89"}], "stats": {"total": 2029, "additions": 1178, "deletions": 851}, "files": [{"sha": "7743ef8b5f437cbe6858bd1c55cd6af65e979f2f", "filename": "gcc/ada/doc/gnat_rm.rst", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fdoc%2Fgnat_rm.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fdoc%2Fgnat_rm.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm.rst?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -55,6 +55,7 @@ GNAT Reference Manual\n    gnat_rm/specialized_needs_annexes\n    gnat_rm/implementation_of_specific_ada_features\n    gnat_rm/implementation_of_ada_2012_features\n+   gnat_rm/security_hardening_features\n    gnat_rm/obsolescent_features\n    gnat_rm/compatibility_and_porting_guide\n "}, {"sha": "9defee818aca366caeae2bd18348313cd50bdb15", "filename": "gcc/ada/doc/gnat_rm/about_this_guide.rst", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -96,6 +96,9 @@ This reference manual contains the following chapters:\n * :ref:`Implementation_of_Ada_2012_Features`, describes the status of the\n   GNAT implementation of the Ada 2012 language standard.\n \n+* :ref:`Security_Hardening_Features` documents GNAT extensions aimed\n+  at security hardening.\n+\n * :ref:`Obsolescent_Features` documents implementation dependent features,\n   including pragmas and attributes, which are considered obsolescent, since\n   there are other preferred ways of achieving the same results. These"}, {"sha": "1c46e3a4c7b883efb7148785f001748de1b2a6ff", "filename": "gcc/ada/doc/gnat_rm/security_hardening_features.rst", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -0,0 +1,89 @@\n+.. _Security_Hardening_Features:\n+\n+***************************\n+Security Hardening Features\n+***************************\n+\n+This chapter describes Ada extensions aimed at security hardening that\n+are provided by GNAT.\n+\n+.. Register Scrubbing:\n+\n+Register Scrubbing\n+==================\n+\n+GNAT can generate code to zero-out hardware registers before returning\n+from a subprogram.\n+\n+It can be enabled with the *-fzero-call-used-regs* command line\n+option, to affect all subprograms in a compilation, and with a\n+:samp:`Machine_Attribute` pragma, to affect only specific subprograms.\n+\n+.. code-block:: ada\n+\n+     procedure Foo;\n+     pragma Machine_Attribute (Foo, \"zero_call_used_regs\", \"used\");\n+     --  Before returning, Foo scrubs only call-clobbered registers\n+     --  that it uses itself.\n+\n+     function Bar return Integer;\n+     pragma Machine_Attribute (Bar, \"zero_call_used_regs\", \"all\");\n+     --  Before returning, Bar scrubs all call-clobbered registers.\n+\n+\n+For usage and more details on the command line option, and on the\n+``zero_call_used_regs`` attribute, see :title:`Using the GNU Compiler\n+Collection (GCC)`.\n+\n+\n+.. Stack Scrubbing:\n+\n+Stack Scrubbing\n+===============\n+\n+GNAT can generate code to zero-out stack frames used by subprograms.\n+\n+It can be activated with the :samp:`Machine_Attribute` pragma, on\n+specific subprograms and variables.\n+\n+.. code-block:: ada\n+\n+     function Foo returns Integer;\n+     pragma Machine_Attribute (Foo, \"strub\");\n+     --  Foo and its callers are modified so as to scrub the stack\n+     --  space used by Foo after it returns.\n+\n+     procedure Bar;\n+     pragma Machine_Attribute (Bar, \"strub\", \"internal\");\n+     --  Bar is turned into a wrapper for its original body,\n+     --  and they scrub the stack used by the original body.\n+\n+     Var : Integer;\n+     pragma Machine_Attribute (Var, \"strub\");\n+     --  Reading from Var in a subprogram enables stack scrubbing\n+     --  of the stack space used by the subprogram.\n+\n+\n+There are also *-fstrub* command line options to control default\n+settings.  For usage and more details on the command line option, and\n+on the ``strub`` attribute, see :title:`Using the GNU Compiler\n+Collection (GCC)`.\n+\n+Note that Ada secondary stacks are not scrubbed.  The restriction\n+``No_Secondary_Stack`` avoids their use, and thus their accidental\n+preservation of data that should be scrubbed.\n+\n+Also note that the machine attribute is not integrated in the Ada type\n+system.  Though it may modify subprogram and variable interfaces, it\n+is not fully reflected in Ada types, ``Access`` attributes, renaming\n+and overriding.  Every access type, renaming, and overriding and\n+overridden dispatching operations that may refer to an entity with an\n+attribute-modified interface must be annotated with the same\n+interface-modifying attribute, or with an interface-compatible one.\n+\n+Even then, the pragma is currently only functional when applied to\n+subprograms and scalar variables; other uses, such as directly on\n+types and subtypes, may be silently ignored.  Specifically, it is not\n+currently recommended to rely on any effects this pragma might be\n+expected to have when calling subprograms through access-to-subprogram\n+variables."}, {"sha": "ab5ca5b17141f302ea9ff283a562534bf761e784", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -94,6 +94,7 @@ static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_stack_protector_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_strub_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noicf_attribute (tree *, tree, tree, int, bool *);\n@@ -157,6 +158,8 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n   { \"no_stack_protector\",0, 0, true,  false, false, false,\n     handle_no_stack_protector_attribute,\n     attr_stack_protect_exclusions },\n+  { \"strub\",\t    0, 1, false, true, false, true,\n+    handle_strub_attribute, NULL },\n   { \"noinline\",     0, 0,  true,  false, false, false,\n     handle_noinline_attribute, NULL },\n   { \"noclone\",      0, 0,  true,  false, false, false,\n@@ -6602,6 +6605,15 @@ handle_no_stack_protector_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"strub\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_strub_attribute (tree *, tree, tree, int, bool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+  return NULL_TREE;\n+}\n \n /* Handle a \"noinline\" attribute; arguments as in\n    struct attribute_spec.handler.  */"}, {"sha": "0a962ee8bdc26ecd6cc22de016e289e923919cc9", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 955, "deletions": 851, "changes": 1806, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a23e02091ef789192db85112f2b6b0dd2724d95c"}, {"sha": "593392809d92d094f5645b0aa535ca5e26e90ff7", "filename": "gcc/ada/libgnat/a-except.adb", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.adb?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -629,6 +629,96 @@ package body Ada.Exceptions is\n    pragma No_Return (Rcheck_CE_Invalid_Data_Ext);\n    pragma No_Return (Rcheck_CE_Range_Check_Ext);\n \n+   --  Make all of these procedures callable from strub contexts.\n+   --  These attributes are not visible to callers; they are made\n+   --  visible in trans.c:build_raise_check.\n+\n+   pragma Machine_Attribute (Rcheck_CE_Access_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Null_Access_Parameter,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Discriminant_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Divide_By_Zero,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Explicit_Raise,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Index_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Invalid_Data,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Length_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Null_Exception_Id,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Null_Not_Allowed,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Overflow_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Partition_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Range_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Tag_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Access_Before_Elaboration,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Accessibility_Check,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Address_Of_Intrinsic,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Aliased_Parameters,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_All_Guards_Closed,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Bad_Predicated_Generic_Type,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Build_In_Place_Mismatch,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Current_Task_In_Entry_Body,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Duplicated_Entry_Address,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Explicit_Raise,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Implicit_Return,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Misaligned_Address_Value,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Missing_Return,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Non_Transportable_Actual,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Overlaid_Controlled_Object,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Potentially_Blocking_Operation,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Stream_Operation_Not_Allowed,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Stubbed_Subprogram_Called,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Unchecked_Union_Restriction,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_PE_Finalize_Raised_Exception,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_SE_Empty_Storage_Pool,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_SE_Explicit_Raise,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_SE_Infinite_Recursion,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_SE_Object_Too_Large,\n+                             \"strub\", \"callable\");\n+\n+   pragma Machine_Attribute (Rcheck_CE_Access_Check_Ext,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Index_Check_Ext,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Invalid_Data_Ext,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Rcheck_CE_Range_Check_Ext,\n+                             \"strub\", \"callable\");\n+\n    ---------------------------------------------\n    -- Reason Strings for Run-Time Check Calls --\n    ---------------------------------------------"}, {"sha": "1608e79eee42f9134851ea03c563593d4ae3efe6", "filename": "gcc/ada/libgnat/a-except.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.ads?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -184,6 +184,15 @@ private\n    --  Raise_Exception_Always if it can determine this is the case. The Export\n    --  allows this routine to be accessed from Pure units.\n \n+   --  Make these callable from strub contexts.\n+   pragma Machine_Attribute (Raise_Exception_Always,\n+                             \"strub\", \"callable\");\n+   pragma Machine_Attribute (Raise_Exception,\n+                             \"strub\", \"callable\");\n+   --  This property should arguably be visible to callers, but let's\n+   --  keep it private for now.  In practice, it doesn't matter, since\n+   --  it's only checked in the back end.\n+\n    procedure Raise_From_Controlled_Operation (X : Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n    pragma Export"}, {"sha": "fa6fedcbc119e9a665084cf703a6a1723d7319f5", "filename": "gcc/ada/libgnat/s-arit128.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fs-arit128.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fs-arit128.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-arit128.ads?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -81,4 +81,11 @@ package System.Arith_128 is\n    --  then Q is the rounded quotient. The remainder R is not affected by the\n    --  setting of the Round flag.\n \n+private\n+   --  Make it callable from strub contexts.\n+   --  There is a matching setting in trans.c,\n+   --  for calls issued by Gigi.\n+   pragma Machine_Attribute (Multiply_With_Ovflo_Check128,\n+                             \"strub\", \"callable\");\n+\n end System.Arith_128;"}, {"sha": "68d214948091260b59e789fcdd3af490620d4bfc", "filename": "gcc/ada/libgnat/s-arit64.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fs-arit64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fs-arit64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-arit64.ads?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -93,4 +93,11 @@ package System.Arith_64 is\n       Round   : Boolean) renames Double_Divide64;\n    --  Renamed procedure to preserve compatibility with earlier versions\n \n+private\n+   --  Make it callable from strub contexts.\n+   --  There is a matching setting in trans.c,\n+   --  for calls issued by Gigi.\n+   pragma Machine_Attribute (Multiply_With_Ovflo_Check64,\n+                             \"strub\", \"callable\");\n+\n end System.Arith_64;"}, {"sha": "6648c233d4ced4838165216636da9d71574daa04", "filename": "gcc/ada/libgnat/s-secsta.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fs-secsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e02091ef789192db85112f2b6b0dd2724d95c/gcc%2Fada%2Flibgnat%2Fs-secsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-secsta.ads?ref=a23e02091ef789192db85112f2b6b0dd2724d95c", "patch": "@@ -440,4 +440,9 @@ private\n    function Get_Stack_Info (Stack : SS_Stack_Ptr) return Stack_Info;\n    --  Obtain the information attributes of secondary stack Stack\n \n+   pragma Machine_Attribute (SS_Allocate, \"strub\", \"callable\");\n+   pragma Machine_Attribute (SS_Mark, \"strub\", \"callable\");\n+   pragma Machine_Attribute (SS_Release, \"strub\", \"callable\");\n+   --  Enable these to be called from within strub contexts.\n+\n end System.Secondary_Stack;"}]}