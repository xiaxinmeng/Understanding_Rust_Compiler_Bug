{"sha": "1af5cdd77985daf76130f527deac425c43df9f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmNWNkZDc3OTg1ZGFmNzYxMzBmNTI3ZGVhYzQyNWM0M2RmOWY0OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-04T12:10:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-04T13:29:19Z"}, "message": "tree-optimization/88240 - stopgap for floating point code-hoisting issues\n\nThis adds a stopgap measure to avoid performing code-hoisting\non mixed type loads when the load we'd insert in the hoisting\nposition would be a floating point one.  This is because certain\ntargets (hello x87) cannot perform floating point loads without\npossibly altering the bit representation and thus cannot be used\nin place of integral loads.\n\n2020-08-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88240\n\t* tree-ssa-sccvn.h (vn_reference_s::punned): New flag.\n\t* tree-ssa-sccvn.c (vn_reference_insert): Initialize punned.\n\t(vn_reference_insert_pieces): Likewise.\n\t(visit_reference_op_call): Likewise.\n\t(visit_reference_op_load): Track whether a ref was punned.\n\t* tree-ssa-pre.c (do_hoist_insertion): Refuse to perform hoist\n\tinsertion on punned floating point loads.\n\n\t* gcc.target/i386/pr88240.c: New testcase.", "tree": {"sha": "b9f60d270eeda2fded7364104ac18674414d3c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9f60d270eeda2fded7364104ac18674414d3c9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af5cdd77985daf76130f527deac425c43df9f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af5cdd77985daf76130f527deac425c43df9f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af5cdd77985daf76130f527deac425c43df9f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af5cdd77985daf76130f527deac425c43df9f49/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd72dd5a385dfa6d49cfe640cefc9ed187361d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd72dd5a385dfa6d49cfe640cefc9ed187361d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd72dd5a385dfa6d49cfe640cefc9ed187361d3"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "5ee02f3193cfd7c24bb1e4f7cbf1eb2325568e00", "filename": "gcc/testsuite/gcc.target/i386/pr88240.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88240.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88240.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88240.c?ref=1af5cdd77985daf76130f527deac425c43df9f49", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+\n+int flag;\n+union { double f; unsigned long long i; } u;\n+void __attribute__((noinline))\n+init ()\n+{\n+  flag = 1;\n+  u.i = 18442936822990639076ULL;\n+}\n+unsigned long long __attribute__((noinline))\n+test ()\n+{\n+  if (flag)\n+    return u.i;\n+  else\n+    return u.f;\n+}\n+int main()\n+{\n+  init ();\n+  if (test () != 18442936822990639076ULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "7d67305bf4bab499cb159a972e3d2526b1892d64", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=1af5cdd77985daf76130f527deac425c43df9f49", "patch": "@@ -3571,6 +3571,16 @@ do_hoist_insertion (basic_block block)\n \t  continue;\n \t}\n \n+      /* If we end up with a punned expression representation and this\n+\t happens to be a float typed one give up - we can't know for\n+\t sure whether all paths perform the floating-point load we are\n+\t about to insert and on some targets this can cause correctness\n+\t issues.  See PR88240.  */\n+      if (expr->kind == REFERENCE\n+\t  && PRE_EXPR_REFERENCE (expr)->punned\n+\t  && FLOAT_TYPE_P (get_expr_type (expr)))\n+\tcontinue;\n+\n       /* OK, we should hoist this value.  Perform the transformation.  */\n       pre_stats.hoist_insert++;\n       if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "934ae40670d1e286bcc1af0972df2ac3c739557c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1af5cdd77985daf76130f527deac425c43df9f49", "patch": "@@ -3601,6 +3601,7 @@ vn_reference_insert (tree op, tree result, tree vuse, tree vdef)\n   vr1->vuse = vuse_ssa_val (vuse);\n   vr1->operands = valueize_shared_reference_ops_from_ref (op, &tem).copy ();\n   vr1->type = TREE_TYPE (op);\n+  vr1->punned = 0;\n   ao_ref op_ref;\n   ao_ref_init (&op_ref, op);\n   vr1->set = ao_ref_alias_set (&op_ref);\n@@ -3660,6 +3661,7 @@ vn_reference_insert_pieces (tree vuse, alias_set_type set,\n   vr1->vuse = vuse_ssa_val (vuse);\n   vr1->operands = valueize_refs (operands);\n   vr1->type = type;\n+  vr1->punned = 0;\n   vr1->set = set;\n   vr1->base_set = base_set;\n   vr1->hashcode = vn_reference_compute_hash (vr1);\n@@ -4892,6 +4894,7 @@ visit_reference_op_call (tree lhs, gcall *stmt)\n \t them here.  */\n       vr2->operands = vr1.operands.copy ();\n       vr2->type = vr1.type;\n+      vr2->punned = vr1.punned;\n       vr2->set = vr1.set;\n       vr2->base_set = vr1.base_set;\n       vr2->hashcode = vr1.hashcode;\n@@ -4918,10 +4921,11 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n   bool changed = false;\n   tree last_vuse;\n   tree result;\n+  vn_reference_t res;\n \n   last_vuse = gimple_vuse (stmt);\n   result = vn_reference_lookup (op, gimple_vuse (stmt),\n-\t\t\t\tdefault_vn_walk_kind, NULL, true, &last_vuse);\n+\t\t\t\tdefault_vn_walk_kind, &res, true, &last_vuse);\n \n   /* We handle type-punning through unions by value-numbering based\n      on offset and size of the access.  Be prepared to handle a\n@@ -4943,6 +4947,13 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n \t  gimple_match_op res_op (gimple_match_cond::UNCOND,\n \t\t\t\t  VIEW_CONVERT_EXPR, TREE_TYPE (op), result);\n \t  result = vn_nary_build_or_lookup (&res_op);\n+\t  if (result\n+\t      && TREE_CODE (result) == SSA_NAME\n+\t      && VN_INFO (result)->needs_insertion)\n+\t    /* Track whether this is the canonical expression for different\n+\t       typed loads.  We use that as a stopgap measure for code\n+\t       hoisting when dealing with floating point loads.  */\n+\t    res->punned = true;\n \t}\n \n       /* When building the conversion fails avoid inserting the reference"}, {"sha": "48701c325448f76d9288511fdcf3aa535ae22c19", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5cdd77985daf76130f527deac425c43df9f49/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=1af5cdd77985daf76130f527deac425c43df9f49", "patch": "@@ -145,6 +145,7 @@ typedef struct vn_reference_s\n   alias_set_type set;\n   alias_set_type base_set;\n   tree type;\n+  unsigned punned : 1;\n   vec<vn_reference_op_s> operands;\n   tree result;\n   tree result_vdef;"}]}