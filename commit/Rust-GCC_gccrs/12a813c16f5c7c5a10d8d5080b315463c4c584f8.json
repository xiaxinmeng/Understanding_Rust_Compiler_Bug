{"sha": "12a813c16f5c7c5a10d8d5080b315463c4c584f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhODEzYzE2ZjVjN2M1YTEwZDhkNTA4MGIzMTU0NjNjNGM1ODRmOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-09-28T21:29:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-09-28T21:29:47Z"}, "message": "re PR target/77756 (__get_cpuid() returns wrong values for level 7 (extended features))\n\n\tPR target/77756\n\t* config/i386/cpuid.h (__get_cpuid): Handle CPUID level >= 7.\n\ntestsuite/ChangeLog:\n\n\tPR target/77756\n\t* gcc.target/i386/pr77756.c: New test.\n\nFrom-SVN: r240597", "tree": {"sha": "fa9603383035d19722911083c6375c6cfacb5807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa9603383035d19722911083c6375c6cfacb5807"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a813c16f5c7c5a10d8d5080b315463c4c584f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a813c16f5c7c5a10d8d5080b315463c4c584f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a813c16f5c7c5a10d8d5080b315463c4c584f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a813c16f5c7c5a10d8d5080b315463c4c584f8/comments", "author": null, "committer": null, "parents": [{"sha": "88000fd1dcfa85b7909ffa3cc40a18c577f26e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88000fd1dcfa85b7909ffa3cc40a18c577f26e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88000fd1dcfa85b7909ffa3cc40a18c577f26e25"}], "stats": {"total": 148, "additions": 81, "deletions": 67}, "files": [{"sha": "4a531197713060b52a9ff76a7e4d07cb36febef0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12a813c16f5c7c5a10d8d5080b315463c4c584f8", "patch": "@@ -1,3 +1,8 @@\n+2016-09-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/77756\n+\t* config/i386/cpuid.h (__get_cpuid): Handle CPUID level >= 7.\n+\n 2016-09-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple-ssa-sprintf.c: Fix comment formatting.\n@@ -248,8 +253,8 @@\n 2016-09-26  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/77719\n-\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Use gimple_get_lhs to get lhs\n-\tinstead of gimple_assign_lhs as stmt can be builtins too.\n+\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Use gimple_get_lhs\n+\tto get lhs instead of gimple_assign_lhs as stmt can be builtins too.\n \n 2016-09-26  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n@@ -314,7 +319,7 @@\n \t* tsan.c (instrument_memory_accesses): Likewise.\n \n 2016-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-            Alexander Monakov  <amonakov@ispras.ru>\n+\t    Alexander Monakov  <amonakov@ispras.ru>\n \n \t* regrename.c (rename_chains): Check\n \tHARD_FRAME_POINTER_IS_FRAME_POINTER rather than\n@@ -333,10 +338,8 @@\n 2016-09-26  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/23332\n-\t* profile.c (instrument_values): Do not handle\n-\tHIST_TYPE_CONST_DELTA.\n-\t* tree-profile.c (gimple_gen_const_delta_profiler):\n-\tRemove.\n+\t* profile.c (instrument_values): Do not handle HIST_TYPE_CONST_DELTA.\n+\t* tree-profile.c (gimple_gen_const_delta_profiler): Remove.\n \t* value-prof.c (dump_histogram_value): Do not handle\n \tHIST_TYPE_CONST_DELTA.\n \t(stream_in_histogram_value): Likewise.\n@@ -360,8 +363,7 @@\n \n 2016-09-26  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n-\t* target.def(elf_flags_numeric): Change documentation to\n-\tpresent tense.\n+\t* target.def(elf_flags_numeric): Change documentation to present tense.\n \t* doc/tm.texi: Regenerate.\n \n 2016-09-26  Marek Polacek  <polacek@redhat.com>\n@@ -906,13 +908,13 @@\n \n 2016-09-23  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n-\t* config/s390/predicates.md (\"contiguous_bitmask_operand\"): Adapt to new\n-\tinterface of s390_contiguous_bitmask_p.\n+\t* config/s390/predicates.md (\"contiguous_bitmask_operand\"): Adapt to\n+\tnew interface of s390_contiguous_bitmask_p.\n \t(\"contiguous_bitmask_nowrap_operand\"): New predicate.\n-\t* (\"*anddi3_cc\", \"*anddi3_cconly\", \"*anddi3\"): Replace NxxDq with NxxDw.\n+\t(\"*anddi3_cc\", \"*anddi3_cconly\", \"*anddi3\"): Replace NxxDq with NxxDw.\n \t* config/s390/constraints.md (\"NxxDw\", \"NxxSq\"): Adapt to new interface\n \tof s390_contiguous_bitmask_p.\n-\t* (\"NxxDw\"): Rename NxxDq constraint to NxxDw.\n+\t(\"NxxDw\"): Rename NxxDq constraint to NxxDw.\n \t(\"NxxSw\"): New constraint.\n \t* config/s390/s390.md (\"*andsi3_zarch\"): Enable bitmask wraparound.\n \t* config/s390/s390-protos.h (s390_contiguous_bitmask_p): Updated\n@@ -1023,8 +1025,7 @@\n \n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* ipa-cp.c (ipcp_store_vr_results): Avoid static local\n-\tvar zero.\n+\t* ipa-cp.c (ipcp_store_vr_results): Avoid static local var zero.\n \t* sreal.h (sreal::min, sreal::max): Avoid static local vars,\n \tconstruct values without normalization.\n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Don't initialize\n@@ -1051,8 +1052,7 @@\n \t(*arm_movhi_fp16): New.\n \t(*thumb2_movhi_fp16): New.\n \t(*movhf_vfp_fp16): New.\n-\t(*movhf_vfp_neon): Disable when VFP FP16 instructions are\n-\tavailable.\n+\t(*movhf_vfp_neon): Disable when VFP FP16 instructions are available.\n \t(*movhf_vfp): Likewise.\n \t(extendhfsf2): Enable when VFP FP16 instructions are available.\n \t(truncsfhf2):  Enable when VFP FP16 instructions are available.\n@@ -1108,8 +1108,7 @@\n 2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n \t    Matthew Wahab  <matthew.wahab@arm.com>\n \n-\t* config/arm/arm.c (output_move_vfp): Weaken assert to allow\n-\tHImode.\n+\t* config/arm/arm.c (output_move_vfp): Weaken assert to allow HImode.\n \t(arm_hard_regno_mode_ok): Allow HImode values in VFP registers.\n \t* config/arm/arm.md (*movhi_bytes): Disable when VFP registers are\n \tavailable.  Also fix some white-space.\n@@ -1138,8 +1137,7 @@\n \n 2016-09-23  Martin Liska  <mliska@suse.cz>\n \n-\t* ipa-icf.c (sem_variable::merge): Replace adress\n-\twith address.\n+\t* ipa-icf.c (sem_variable::merge): Replace adress with address.\n \n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n@@ -1167,8 +1165,7 @@\n \n 2016-09-23  Martin Liska  <mliska@suse.cz>\n \n-\t* doc/extend.texi: Remove fused-madd from i386 target\n-\toptions.\n+\t* doc/extend.texi: Remove fused-madd from i386 target options.\n \n 2016-09-23  Martin Liska  <mliska@suse.cz>\n \n@@ -1260,8 +1257,7 @@\n \n 2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n-\t* emit-rtl.c (next_active_insn): Change argument type to\n-\trtx_insn *.\n+\t* emit-rtl.c (next_active_insn): Change argument type to rtx_insn *.\n \t(prev_active_insn): Likewise.\n \t(active_insn_p): Likewise.\n \t* rtl.h: Adjust prototypes.\n@@ -1297,17 +1293,15 @@\n \n 2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n-\t* emit-rtl.c (next_nondebug_insn): Change argument type to\n-\trtx_insn *.\n+\t* emit-rtl.c (next_nondebug_insn): Change argument type to rtx_insn *.\n \t(prev_nondebug_insn): Likewise.\n \t* loop-doloop.c (doloop_condition_get): Likewise.\n \t* rtl.h: Adjust prototype.\n \t* cfgloop.h: Likewise.\n \n 2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n-\t* emit-rtl.c (next_nonnote_insn): Change argument type to\n-\trtx_insn *.\n+\t* emit-rtl.c (next_nonnote_insn): Change argument type to rtx_insn *.\n \t(prev_nonnote_insn): Likewise.\n \t* jump.c (reversed_comparison_code_parts): Likewise.\n \t(reversed_comparison): Likewise.\n@@ -1343,8 +1337,7 @@\n \t* config/m32r/m32r.c (m32r_expand_epilogue): Likewise.\n \t* config/nds32/nds32-protos.h (nds32_target_alignment): Likewise.\n \t* config/nds32/nds32.c (nds32_target_alignment): Likewise.\n-\t* config/rl78/rl78.c (rl78_alloc_physical_registers_op2):\n-\t* Likewise.\n+\t* config/rl78/rl78.c (rl78_alloc_physical_registers_op2): Likewise.\n \t(rl78_alloc_physical_registers_cmp): Likewise.\n \t(rl78_alloc_physical_registers_umul): Likewise.\n \t(rl78_calculate_death_notes): Likewise.\n@@ -1527,7 +1520,7 @@\n \t(handle_pure_call): Likewise.\n \n 2016-09-21  Richard Biener  <rguenther@suse.de>\n-\tJakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/77621\n \t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Split\n@@ -1569,8 +1562,7 @@\n \n 2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n-\t * tree-vrp.c (get_value_range): Teach PARM_DECL to use ipa-vrp\n-\t results.\n+\t* tree-vrp.c (get_value_range): Teach PARM_DECL to use ipa-vrp results.\n \n 2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n@@ -1632,8 +1624,7 @@\n \t(evrp_dom_walker::push_value_range): Likewise.\n \t(evrp_dom_walker::pop_value_range): Likewise.\n \t(execute_early_vrp): Likewise.\n-\t(execute_vrp): Call vrp_initialize_lattice and\n-\tvrp_free_lattice.\n+\t(execute_vrp): Call vrp_initialize_lattice and vrp_free_lattice.\n \t(make_pass_early_vrp): New.\n \n 2016-09-20  Uros Bizjak  <ubizjak@gmail.com>"}, {"sha": "a4f658af79772f34cd9fde4a41a686c133e0894f", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=12a813c16f5c7c5a10d8d5080b315463c4c584f8", "patch": "@@ -244,6 +244,16 @@ __get_cpuid (unsigned int __level,\n   if (__get_cpuid_max (__ext, 0) < __level)\n     return 0;\n \n-  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);\n+  if (__ext)\n+    __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);\n+  else\n+    {\n+      if (__level >= 13)\n+\t__cpuid_count (__level, 1, *__eax, *__ebx, *__ecx, *__edx);\n+      else if (__level >= 7)\n+\t__cpuid_count (__level, 0, *__eax, *__ebx, *__ecx, *__edx);\n+      else\n+\t__cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);\n+    }\n   return 1;\n }"}, {"sha": "f3ab8e8bc38063b2c58ff10814808e7c52c528d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12a813c16f5c7c5a10d8d5080b315463c4c584f8", "patch": "@@ -1,3 +1,8 @@\n+2016-09-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/77756\n+\t* gcc.target/i386/pr77756.c: New test.\n+\n 2016-09-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77721\n@@ -115,7 +120,7 @@\n 2016-09-26  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust regex to accept\n-\tsingular form of byte when quantity is unknown. \n+\tsingular form of byte when quantity is unknown.\n \n 2016-09-26  Marek Polacek  <polacek@redhat.com>\n \n@@ -169,7 +174,7 @@\n \n 2016-09-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\tPR fortran/77429 \n+\tPR fortran/77429\n \t* gfortran.dg/pr77429.f90: New test.\n \n 2016-09-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n@@ -339,38 +344,24 @@\n \ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n \tdefined.\n \t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c: Likewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmul_n.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vneg.c:\n-\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmul_n.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vneg.c: Likewise.\n \t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc: Likewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpadd.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmax.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmin.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecpe.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecps.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnd.c:\n-\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpadd.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmax.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmin.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecpe.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecps.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnd.c: Likewise.\n \t* gcc.target/aarch64/advsimd-intrinsics/vrndX.inc: Likewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnda.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndm.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndn.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndp.c:\n-\tLikewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndx.c:\n-\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnda.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndm.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndn.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndp.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndx.c: Likewise.\n \t* gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c: Likewise.\n \t* gcc.target/aarch64/advsimd-intrinsics/vrsqrts.c: Likewise.\n-\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vsub.c:\n-\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vsub.c: Likewise.\n \n 2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n \t    Matthew Wahab  <matthew.wahab@arm.com>"}, {"sha": "cd880381006ec9b70e4d0615efc9042d78f6aec2", "filename": "gcc/testsuite/gcc.target/i386/pr77756.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a813c16f5c7c5a10d8d5080b315463c4c584f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77756.c?ref=12a813c16f5c7c5a10d8d5080b315463c4c584f8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run }  */\n+\n+#include \"cpuid.h\"\n+\n+int\n+main ()\n+{\n+  __builtin_cpu_init ();\n+\n+  if (__builtin_cpu_supports (\"avx2\"))\n+    {\n+      unsigned int eax, ebx, ecx, edx;\n+\n+      if (!__get_cpuid (7, &eax, &ebx, &ecx, &edx))\n+\t__builtin_abort ();\n+\n+      if (!(ebx & bit_AVX2))\n+\t__builtin_abort ();\n+    }\n+\n+  return 0;\n+}"}]}