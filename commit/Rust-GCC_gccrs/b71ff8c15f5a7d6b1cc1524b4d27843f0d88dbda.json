{"sha": "b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcxZmY4YzE1ZjVhN2Q2YjFjYzE1MjRiNGQyNzg0M2YwZDg4ZGJkYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-12T13:13:45Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-12T13:13:45Z"}, "message": "Fortran: improve location data for OpenACC/OpenMP directives [PR97782]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/97782\n\t* trans-openmp.c (gfc_trans_oacc_construct, gfc_trans_omp_parallel_do,\n\tgfc_trans_omp_parallel_do_simd, gfc_trans_omp_parallel_sections,\n\tgfc_trans_omp_parallel_workshare, gfc_trans_omp_sections\n\tgfc_trans_omp_single, gfc_trans_omp_task, gfc_trans_omp_teams\n\tgfc_trans_omp_target, gfc_trans_omp_target_data,\n\tgfc_trans_omp_workshare): Use code->loc instead of input_location\n\twhen building the OMP_/OACC_ construct.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/97782\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Move dg-message\n\tone line up.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.", "tree": {"sha": "65a5e3e052db2b17ef75f1a6b9b92d4aa44e9b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65a5e3e052db2b17ef75f1a6b9b92d4aa44e9b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f851c33411fc39982c62a91fa93ec02981fd956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f851c33411fc39982c62a91fa93ec02981fd956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f851c33411fc39982c62a91fa93ec02981fd956"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "6b4ad6a70503648978c9d0ee9ddad66d403723b3", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "patch": "@@ -3922,8 +3922,8 @@ gfc_trans_oacc_construct (gfc_code *code)\n   oacc_clauses = gfc_trans_omp_clauses (&block, code->ext.omp_clauses,\n \t\t\t\t\tcode->loc, false, true);\n   stmt = gfc_trans_omp_code (code->block->next, true);\n-  stmt = build2_loc (input_location, construct_code, void_type_node, stmt,\n-\t\t     oacc_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), construct_code,\n+\t\t     void_type_node, stmt, oacc_clauses);\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }\n@@ -5351,8 +5351,8 @@ gfc_trans_omp_parallel_do (gfc_code *code, stmtblock_t *pblock,\n     }\n   else if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, NULL_TREE);\n-  stmt = build2_loc (input_location, OMP_PARALLEL, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n+\t\t     void_type_node, stmt, omp_clauses);\n   OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n@@ -5394,8 +5394,8 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n     stmt = build3_v (BIND_EXPR, NULL, stmt, NULL_TREE);\n   if (flag_openmp)\n     {\n-      stmt = build2_loc (input_location, OMP_PARALLEL, void_type_node, stmt,\n-\t\t\t omp_clauses);\n+      stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n+\t\t\t void_type_node, stmt, omp_clauses);\n       OMP_PARALLEL_COMBINED (stmt) = 1;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n@@ -5421,8 +5421,8 @@ gfc_trans_omp_parallel_sections (gfc_code *code)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n   else\n     poplevel (0, 0);\n-  stmt = build2_loc (input_location, OMP_PARALLEL, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n+\t\t     void_type_node, stmt, omp_clauses);\n   OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n@@ -5444,8 +5444,8 @@ gfc_trans_omp_parallel_workshare (gfc_code *code)\n   pushlevel ();\n   stmt = gfc_trans_omp_workshare (code, &workshare_clauses);\n   stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n-  stmt = build2_loc (input_location, OMP_PARALLEL, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n+\t\t     void_type_node, stmt, omp_clauses);\n   OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n@@ -5457,6 +5457,7 @@ gfc_trans_omp_sections (gfc_code *code, gfc_omp_clauses *clauses)\n   stmtblock_t block, body;\n   tree omp_clauses, stmt;\n   bool has_lastprivate = clauses->lists[OMP_LIST_LASTPRIVATE] != NULL;\n+  location_t loc = gfc_get_location (&code->loc);\n \n   gfc_start_block (&block);\n \n@@ -5477,8 +5478,7 @@ gfc_trans_omp_sections (gfc_code *code, gfc_omp_clauses *clauses)\n     }\n   stmt = gfc_finish_block (&body);\n \n-  stmt = build2_loc (input_location, OMP_SECTIONS, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (loc, OMP_SECTIONS, void_type_node, stmt, omp_clauses);\n   gfc_add_expr_to_block (&block, stmt);\n \n   return gfc_finish_block (&block);\n@@ -5489,8 +5489,8 @@ gfc_trans_omp_single (gfc_code *code, gfc_omp_clauses *clauses)\n {\n   tree omp_clauses = gfc_trans_omp_clauses (NULL, clauses, code->loc);\n   tree stmt = gfc_trans_omp_code (code->block->next, true);\n-  stmt = build2_loc (input_location, OMP_SINGLE, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_SINGLE, void_type_node,\n+\t\t     stmt, omp_clauses);\n   return stmt;\n }\n \n@@ -5506,8 +5506,8 @@ gfc_trans_omp_task (gfc_code *code)\n   pushlevel ();\n   stmt = gfc_trans_omp_code (code->block->next, true);\n   stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n-  stmt = build2_loc (input_location, OMP_TASK, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_TASK, void_type_node,\n+\t\t     stmt, omp_clauses);\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }\n@@ -5649,8 +5649,8 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa,\n   if (flag_openmp)\n     {\n       stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n-      stmt = build2_loc (input_location, OMP_TEAMS, void_type_node, stmt,\n-\t\t\t omp_clauses);\n+      stmt = build2_loc (gfc_get_location (&code->loc), OMP_TEAMS,\n+\t\t\t void_type_node, stmt, omp_clauses);\n       if (combined)\n \tOMP_TEAMS_COMBINED (stmt) = 1;\n     }\n@@ -5753,8 +5753,8 @@ gfc_trans_omp_target (gfc_code *code)\n     }\n   if (flag_openmp)\n     {\n-      stmt = build2_loc (input_location, OMP_TARGET, void_type_node, stmt,\n-\t\t\t omp_clauses);\n+      stmt = build2_loc (gfc_get_location (&code->loc), OMP_TARGET,\n+\t\t\t void_type_node, stmt, omp_clauses);\n       if (code->op != EXEC_OMP_TARGET)\n \tOMP_TARGET_COMBINED (stmt) = 1;\n       cfun->has_omp_target = true;\n@@ -5815,8 +5815,8 @@ gfc_trans_omp_target_data (gfc_code *code)\n   omp_clauses = gfc_trans_omp_clauses (&block, code->ext.omp_clauses,\n \t\t\t\t       code->loc);\n   stmt = gfc_trans_omp_code (code->block->next, true);\n-  stmt = build2_loc (input_location, OMP_TARGET_DATA, void_type_node, stmt,\n-\t\t     omp_clauses);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_TARGET_DATA,\n+\t\t     void_type_node, stmt, omp_clauses);\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }\n@@ -5876,6 +5876,7 @@ gfc_trans_omp_workshare (gfc_code *code, gfc_omp_clauses *clauses)\n   bool singleblock_in_progress = false;\n   /* True if previous gfc_code in workshare construct is not workshared.  */\n   bool prev_singleunit;\n+  location_t loc = gfc_get_location (&code->loc);\n \n   code = code->block->next;\n \n@@ -5966,7 +5967,7 @@ gfc_trans_omp_workshare (gfc_code *code, gfc_omp_clauses *clauses)\n \t\t{\n \t\t  /* Finish single block and add it to pblock.  */\n \t\t  tmp = gfc_finish_block (&singleblock);\n-\t\t  tmp = build2_loc (input_location, OMP_SINGLE,\n+\t\t  tmp = build2_loc (loc, OMP_SINGLE,\n \t\t\t\t    void_type_node, tmp, NULL_TREE);\n \t\t  gfc_add_expr_to_block (pblock, tmp);\n \t\t  /* Add current gfc_code to pblock.  */\n@@ -5982,6 +5983,7 @@ gfc_trans_omp_workshare (gfc_code *code, gfc_omp_clauses *clauses)\n \t\t  gfc_init_block (&singleblock);\n \t\t  gfc_add_expr_to_block (&singleblock, res);\n \t\t  singleblock_in_progress = true;\n+\t\t  loc = gfc_get_location (&code->loc);\n \t\t}\n \t      else\n \t\t/* Add the new statement to the block.  */\n@@ -5996,7 +5998,7 @@ gfc_trans_omp_workshare (gfc_code *code, gfc_omp_clauses *clauses)\n     {\n       /* Finish single block and add it to pblock.  */\n       tmp = gfc_finish_block (&singleblock);\n-      tmp = build2_loc (input_location, OMP_SINGLE, void_type_node, tmp,\n+      tmp = build2_loc (loc, OMP_SINGLE, void_type_node, tmp,\n \t\t\tclauses->nowait\n \t\t\t? build_omp_clause (input_location, OMP_CLAUSE_NOWAIT)\n \t\t\t: NULL_TREE);"}, {"sha": "6cca3d6eefb0da9d185b471451ff248bc9f31f64", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "patch": "@@ -19,8 +19,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n-  do i = 0, n - 1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  do i = 0, n - 1\n      c(i) = a(f (i)) + b(f (i))\n   end do\n   !$acc end kernels"}, {"sha": "715a983bb26e876441b0b35851a530cade47f615", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "patch": "@@ -15,8 +15,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n-  do i = 0, n - 1 ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do\n   !$acc end kernels"}]}