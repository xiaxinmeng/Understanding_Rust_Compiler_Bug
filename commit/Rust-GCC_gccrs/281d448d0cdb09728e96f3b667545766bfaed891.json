{"sha": "281d448d0cdb09728e96f3b667545766bfaed891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxZDQ0OGQwY2RiMDk3MjhlOTZmM2I2Njc1NDU3NjZiZmFlZDg5MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-11-14T19:47:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-11-14T19:47:28Z"}, "message": "i386.c (ix86_print_operand_address_as): Simplify printing of the names of segment registers.\n\n\t* config/i386/i386.c (ix86_print_operand_address_as): Simplify\n\tprinting of the names of segment registers.\n\nFrom-SVN: r266161", "tree": {"sha": "38600c5a581dbf519a30a897b951da375ff82740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38600c5a581dbf519a30a897b951da375ff82740"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/281d448d0cdb09728e96f3b667545766bfaed891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281d448d0cdb09728e96f3b667545766bfaed891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281d448d0cdb09728e96f3b667545766bfaed891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281d448d0cdb09728e96f3b667545766bfaed891/comments", "author": null, "committer": null, "parents": [{"sha": "89d9bf44969f8c244b0039d01e6546d9f43e8410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d9bf44969f8c244b0039d01e6546d9f43e8410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d9bf44969f8c244b0039d01e6546d9f43e8410"}], "stats": {"total": 155, "additions": 81, "deletions": 74}, "files": [{"sha": "117e96f0b71b8b684f02ea365ee752d5d55bf218", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 64, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281d448d0cdb09728e96f3b667545766bfaed891/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281d448d0cdb09728e96f3b667545766bfaed891/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=281d448d0cdb09728e96f3b667545766bfaed891", "patch": "@@ -1,3 +1,8 @@\n+2018-11-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand_address_as): Simplify\n+\tprinting of the names of segment registers.\n+\n 2018-11-14  Nathan Sidwell  <nathan@acm.org>\n \n \tPR debug/88006\n@@ -12,8 +17,7 @@\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1236R1 - Signed integers are two's complement\n-\t* doc/invoke.texi (Wshift-overflow): Adjust documentation for\n-\tc++2a.\n+\t* doc/invoke.texi (Wshift-overflow): Adjust documentation for c++2a.\n \n \tPR bootstrap/86739\n \t* hash-map.h (hash_map::iterator::reference_pair): New class.\n@@ -64,7 +68,7 @@\n \t(lambda_vector_mult_const): Likewise.\n \t(lambda_matrix_right_hermite): Use lambda_int temporaries.\n \n-2018-11-14  Wilco Dijkstra  <wdijkstr@arm.com>  \n+2018-11-14  Wilco Dijkstra  <wdijkstr@arm.com>\n \t    Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \tPR 71026/tree-optimization\n@@ -105,10 +109,8 @@\n \t(arc_init_reg_tables): Remove unused register classes.\n \t(arc_register_move_cost): Likewise.\n \t(arc_preferred_reload_class): Likewise.\n-\t(hwloop_optimize): Update rtx patterns involving lp_count\n-\tregister.\n-\t(arc_return_address_register): Rename ILINK1, INLINK2 regnums\n-\tmacros.\n+\t(hwloop_optimize): Update rtx patterns involving lp_count register.\n+\t(arc_return_address_register): Rename ILINK1, INLINK2 regnums macros.\n \t* config/arc/constraints.md (\"c\"): Choose between GENERAL_REGS and\n \tCHEAP_CORE_REGS.  Former one will be used for LRA.\n \t(\"Rac\"): Choose between GENERAL_REGS and ALL_CORE_REGS.  Former\n@@ -216,7 +218,7 @@\n \t* omp-expand.c: Likewise.\n \t* selftest.h: Likewise.\n \t* substring-locations.h (get_source_location_for_substring):\n-\tRename to..\n+\tRename to...\n \t(get_location_within_string): ...this.\n \t* tree-cfg.c: Replace \"source_location\" with \"location_t\".\n \t* tree-cfgcleanup.c: Likewise.\n@@ -548,8 +550,8 @@\n \n \tPR middle-end/86677\n \tPR middle-end/87528\n-\t* tree-scalar-evolution.c (expression_expensive_p): Make BUILTIN POPCOUNT\n-\tas expensive when backend does not define it.\n+\t* tree-scalar-evolution.c (expression_expensive_p): Make\n+\tBUILTIN POPCOUNT as expensive when backend does not define it.\n \n 2018-11-12  Fredrik Noring  <noring@nocrew.org>\n \n@@ -2041,7 +2043,7 @@\n 2018-11-05  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_register_move_cost): Increase costs for\n-        moves involving the CC reg.\n+\tmoves involving the CC reg.\n \n 2018-11-05  Richard Biener  <rguenther@suse.de>\n \n@@ -3103,15 +3105,15 @@\n \t* options.texi (Deprecated): Move list to Var section.\n \n 2018-10-24  Bill Schmidt  <wschmidt@linux.ibm.com>\n-            Jinsong Ji <jji@us.ibm.com>\n+\t    Jinsong Ji <jji@us.ibm.com>\n \n-        * config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Change deprecated\n-        __vector long to __vector long long.\n-        (_mm_cvtpd_ps): Likewise.\n-        (_mm_cvttpd_epi32): Likewise.\n-        (_mm_cvtpi32_pd): Likewise.\n-        (_mm_unpackhi_epi64): Likewise.\n-        (_mm_unpacklo_epi64): Likewise.\n+\t* config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Change deprecated\n+\t__vector long to __vector long long.\n+\t(_mm_cvtpd_ps): Likewise.\n+\t(_mm_cvttpd_epi32): Likewise.\n+\t(_mm_cvtpi32_pd): Likewise.\n+\t(_mm_unpackhi_epi64): Likewise.\n+\t(_mm_unpacklo_epi64): Likewise.\n \n 2018-10-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n@@ -3209,8 +3211,8 @@\n \n 2018-10-12  Jeff Law  <law@redhat.com>\n \n-        * config/h8300/h8300.c (h8300_expand_prologue): Fix stm generation\n-        for H8/S.\n+\t* config/h8300/h8300.c (h8300_expand_prologue): Fix stm generation\n+\tfor H8/S.\n \n 2018-10-23  Richard Biener  <rguenther@suse.de>\n \n@@ -3272,13 +3274,13 @@\n \tthe case we do not find the taken edge.\n \n 2018-10-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n-            Jinsong Ji  <jji@us.ibm.com>\n+\t    Jinsong Ji  <jji@us.ibm.com>\n \n-        * config/rs6000/emmintrin.h (_MM_SHUFFLE2): Comment cleanup.\n-        (_mm_store_pd): Use unaligned vector type for pointer cast.\n-        (_mm_maskmoveu_si128): Likewise.\n-        * config/rs6000/xmmintrin.h (__m128_u): New typedef.\n-        (_mm_store_ps): Use unaligned vector type for pointer cast.\n+\t* config/rs6000/emmintrin.h (_MM_SHUFFLE2): Comment cleanup.\n+\t(_mm_store_pd): Use unaligned vector type for pointer cast.\n+\t(_mm_maskmoveu_si128): Likewise.\n+\t* config/rs6000/xmmintrin.h (__m128_u): New typedef.\n+\t(_mm_store_ps): Use unaligned vector type for pointer cast.\n \n 2018-10-22  Paul Koning  <ni1d@arrl.net>\n \n@@ -3532,23 +3534,23 @@\n \t(*add<mode>3<mask_name>_bcst): Likewise.\n \n 2018-10-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n-            Jinsong Ji  <jji@us.ibm.com>\n-\n-        * config/rs6000/emmintrin.h (_mm_movemask_pd): Replace __vector\n-        __m64 with __vector unsigned long long for compatibility.\n-        (_mm_movemask_epi8): Likewise.\n-        * config/rs6000/xmmintrin.h (_mm_cvtps_pi32): Likewise.\n-        (_mm_cvttps_pi32): Likewise.\n-        (_mm_cvtpi32_ps): Likewise.\n-        (_mm_cvtps_pi16): Likewise.\n-        (_mm_loadh_pi): Likewise.\n-        (_mm_storeh_pi): Likewise.\n-        (_mm_movehl_ps): Likewise.\n-        (_mm_movelh_ps): Likewise.\n-        (_mm_loadl_pi): Likewise.\n-        (_mm_storel_pi): Likewise.\n-        (_mm_movemask_ps): Likewise.\n-        (_mm_shuffle_pi16): Likewise.\n+\t    Jinsong Ji  <jji@us.ibm.com>\n+\n+\t* config/rs6000/emmintrin.h (_mm_movemask_pd): Replace __vector\n+\t__m64 with __vector unsigned long long for compatibility.\n+\t(_mm_movemask_epi8): Likewise.\n+\t* config/rs6000/xmmintrin.h (_mm_cvtps_pi32): Likewise.\n+\t(_mm_cvttps_pi32): Likewise.\n+\t(_mm_cvtpi32_ps): Likewise.\n+\t(_mm_cvtps_pi16): Likewise.\n+\t(_mm_loadh_pi): Likewise.\n+\t(_mm_storeh_pi): Likewise.\n+\t(_mm_movehl_ps): Likewise.\n+\t(_mm_movelh_ps): Likewise.\n+\t(_mm_loadl_pi): Likewise.\n+\t(_mm_storel_pi): Likewise.\n+\t(_mm_movemask_ps): Likewise.\n+\t(_mm_shuffle_pi16): Likewise.\n \n 2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -3906,9 +3908,9 @@\n \tRevert\n \t2018-02-07  Richard Biener  <rguenther@suse.de>\n \n-        PR tree-optimization/84204\n-        * tree-chrec.c (chrec_fold_plus_1): Remove size limiting in\n-        this place.\n+\tPR tree-optimization/84204\n+\t* tree-chrec.c (chrec_fold_plus_1): Remove size limiting in\n+\tthis place.\n \n 2018-10-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -4090,18 +4092,18 @@\n \n 2018-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree-vrp.c (extract_range_from_multiplicative_op): Remove\n+\t* tree-vrp.c (extract_range_from_multiplicative_op): Remove\n \toverflow wraps argument.\n-        (extract_range_from_binary_expr_1): Do not pass overflow wraps to\n+\t(extract_range_from_binary_expr_1): Do not pass overflow wraps to\n \twide_int_range_multiplicative_op.\n-        * wide-int-range.cc (wide_int_range_mult_wrapping): Remove\n+\t* wide-int-range.cc (wide_int_range_mult_wrapping): Remove\n \toverflow wraps argument.\n-        (wide_int_range_multiplicative_op): Same.\n-        (wide_int_range_lshift): Same.\n-        (wide_int_range_div): Same.\n-        * wide-int-range.h (wide_int_range_multiplicative_op): Same.\n-        (wide_int_range_lshift): Same.\n-        (wide_int_range_div): Same.\n+\t(wide_int_range_multiplicative_op): Same.\n+\t(wide_int_range_lshift): Same.\n+\t(wide_int_range_div): Same.\n+\t* wide-int-range.h (wide_int_range_multiplicative_op): Same.\n+\t(wide_int_range_lshift): Same.\n+\t(wide_int_range_div): Same.\n \n 2018-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -4317,7 +4319,7 @@\n \tUse HOST_WIDE_INT_1U for shift.\n \n 2018-10-11  Doug Rupp  <rupp@adacore.com>\n-            Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n \n \t* config/rs6000/vxworks.h (VXWORKS_RELAX_LINK_SPEC): New macro.\n \tPass --relax to the linker for RTPs.\n@@ -4451,7 +4453,7 @@\n \tthe REF_REVERSE_STORAGE_ORDER flag on the value.\n \t(gimple_simplify) <GIMPLE_ASSIGN>: For BIT_FIELD_REF, propagate the\n \tREF_REVERSE_STORAGE_ORDER flag and avoid simplifying if it is set.\n-        \n+\t\n 2018-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/63155\n@@ -4961,8 +4963,9 @@\n 2018-10-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/85787\n-\t* ipa-pure-const.c (malloc_candidate_p_1): Move most of malloc_candidate_p\n-\tinto this function and add support for detecting multiple phis.\n+\t* ipa-pure-const.c (malloc_candidate_p_1): Move most of\n+\tmalloc_candidate_p into this function and add support for\n+\tdetecting multiple phis.\n \t(DUMP_AND_RETURN): Move from malloc_candidate_p into top-level macro.\n \n 2018-10-04  Martin Liska  <mliska@suse.cz>\n@@ -4973,10 +4976,10 @@\n \n 2018-10-03  Jeff Law  <law@redhat.com>\n \n-        * gimple-ssa-sprintf.c (format_string): Do not hardcode size of\n-        target's wchar_t.\n-        * tree.c (get_typenode_from_name): Moved from fortran/trans-types.c.\n-        * tree.h (get_typenode_from_name): Prototype.\n+\t* gimple-ssa-sprintf.c (format_string): Do not hardcode size of\n+\ttarget's wchar_t.\n+\t* tree.c (get_typenode_from_name): Moved from fortran/trans-types.c.\n+\t* tree.h (get_typenode_from_name): Prototype.\n \n 2018-10-03  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "c18c60a1d191b98c3342886d63bfbe626ffbf8d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281d448d0cdb09728e96f3b667545766bfaed891/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281d448d0cdb09728e96f3b667545766bfaed891/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=281d448d0cdb09728e96f3b667545766bfaed891", "patch": "@@ -12018,8 +12018,7 @@ ix86_update_stack_boundary (void)\n   ix86_incoming_stack_boundary\n     = ix86_minimum_incoming_stack_boundary (false);\n \n-  /* x86_64 vararg needs 16byte stack alignment for register save\n-     area.  */\n+  /* x86_64 vararg needs 16byte stack alignment for register save area.  */\n   if (TARGET_64BIT\n       && cfun->stdarg\n       && crtl->stack_alignment_estimated < 128)\n@@ -18303,15 +18302,20 @@ ix86_print_operand_address_as (FILE *file, rtx addr,\n \n   if (!ADDR_SPACE_GENERIC_P (as))\n     {\n-      const char *string;\n+      if (ASSEMBLER_DIALECT == ASM_ATT)\n+\tputc ('%', file);\n \n-      if (as == ADDR_SPACE_SEG_FS)\n-\tstring = (ASSEMBLER_DIALECT == ASM_ATT ? \"%fs:\" : \"fs:\");\n-      else if (as == ADDR_SPACE_SEG_GS)\n-\tstring = (ASSEMBLER_DIALECT == ASM_ATT ? \"%gs:\" : \"gs:\");\n-      else\n-\tgcc_unreachable ();\n-      fputs (string, file);\n+      switch (as)\n+\t{\n+\tcase ADDR_SPACE_SEG_FS:\n+\t  fputs (\"fs:\", file);\n+\t  break;\n+\tcase ADDR_SPACE_SEG_GS:\n+\t  fputs (\"gs:\", file);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n     }\n \n   /* Use one byte shorter RIP relative addressing for 64bit mode.  */"}]}