{"sha": "e99d77c97fbee5c17594374b978a0c4f9cd125f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5ZDc3Yzk3ZmJlZTVjMTc1OTQzNzRiOTc4YTBjNGY5Y2QxMjVmNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-04-05T14:20:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-04-05T14:20:53Z"}, "message": "PR c++/85200 - ICE with constexpr if in generic lambda.\n\n\t* pt.c (extract_locals_r): Don't record the local specs of variables\n\tdeclared within the pattern.\n\nFrom-SVN: r259127", "tree": {"sha": "8eaf6ab62ce4f7eecac3821f0ee5c7b39119ba59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eaf6ab62ce4f7eecac3821f0ee5c7b39119ba59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e99d77c97fbee5c17594374b978a0c4f9cd125f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99d77c97fbee5c17594374b978a0c4f9cd125f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99d77c97fbee5c17594374b978a0c4f9cd125f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99d77c97fbee5c17594374b978a0c4f9cd125f4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ba16fd2eb40c96e41de967ca32e4dea4b5e45a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba16fd2eb40c96e41de967ca32e4dea4b5e45a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba16fd2eb40c96e41de967ca32e4dea4b5e45a1"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "99ec3ea171e745ef65195d4e6a1a73d8c8b89d2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99d77c97fbee5c17594374b978a0c4f9cd125f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99d77c97fbee5c17594374b978a0c4f9cd125f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e99d77c97fbee5c17594374b978a0c4f9cd125f4", "patch": "@@ -1,3 +1,9 @@\n+2018-04-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85200 - ICE with constexpr if in generic lambda.\n+\t* pt.c (extract_locals_r): Don't record the local specs of variables\n+\tdeclared within the pattern.\n+\n 2018-04-05  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/84979"}, {"sha": "ed6e62c2364878d53447f10a8435b735ea72d29a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99d77c97fbee5c17594374b978a0c4f9cd125f4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99d77c97fbee5c17594374b978a0c4f9cd125f4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e99d77c97fbee5c17594374b978a0c4f9cd125f4", "patch": "@@ -11597,17 +11597,26 @@ tsubst_binary_right_fold (tree t, tree args, tsubst_flags_t complain,\n \n struct el_data\n {\n+  hash_set<tree> internal;\n   tree extra;\n   tsubst_flags_t complain;\n+\n+  el_data (tsubst_flags_t c)\n+    : extra (NULL_TREE), complain (c) {}\n };\n static tree\n extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data_)\n {\n   el_data &data = *reinterpret_cast<el_data*>(data_);\n   tree *extra = &data.extra;\n   tsubst_flags_t complain = data.complain;\n-  if (tree spec = retrieve_local_specialization (*tp))\n+  if (TREE_CODE (*tp) == DECL_EXPR)\n+    data.internal.add (DECL_EXPR_DECL (*tp));\n+  else if (tree spec = retrieve_local_specialization (*tp))\n     {\n+      if (data.internal.contains (*tp))\n+\t/* Don't mess with variables declared within the pattern.  */\n+\treturn NULL_TREE;\n       if (TREE_CODE (spec) == NONTYPE_ARGUMENT_PACK)\n \t{\n \t  /* Maybe pull out the PARM_DECL for a partial instantiation.  */\n@@ -11658,7 +11667,7 @@ extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data_)\n static tree\n extract_local_specs (tree pattern, tsubst_flags_t complain)\n {\n-  el_data data = { NULL_TREE, complain };\n+  el_data data (complain);\n   cp_walk_tree_without_duplicates (&pattern, extract_locals_r, &data);\n   return data.extra;\n }"}, {"sha": "40016a5b7e1176bda81e4d1e2c3e7ddc92e3d2de", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if19.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99d77c97fbee5c17594374b978a0c4f9cd125f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99d77c97fbee5c17594374b978a0c4f9cd125f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if19.C?ref=e99d77c97fbee5c17594374b978a0c4f9cd125f4", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/85200\n+// { dg-additional-options -std=c++17 }\n+\n+struct A{\n+    constexpr operator int(){ return 0; }\n+};\n+\n+template < typename >\n+void f(){\n+    [](auto known){\n+        if constexpr(constexpr int k = known);\n+    }(A{});\n+}\n+\n+int main(){\n+    f<int>();\n+}"}]}