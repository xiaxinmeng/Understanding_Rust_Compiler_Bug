{"sha": "b2153b98f202a261b77be7be529d371bb9fd3907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxNTNiOThmMjAyYTI2MWI3N2JlN2JlNTI5ZDM3MWJiOWZkMzkwNw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-07-03T15:46:21Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-07-03T15:46:21Z"}, "message": "re PR c++/6944 (missing feature on default copy-constructor for class with multi-dim arrays)\n\n\tPR c++/6944\n\t* init.c (build_aggr_init): Remove qualifiers of init before calling\n\tbuild_vec_init.\n\t(build_vec_init): Flatten multi-dimensional array during cleanup.\n\t(build_vec_delete_1): Abort if the type of each element is array.\n\n\t* g++.dg/init/array4.C: New test.\n\t* g++.dg/init/array5.C: New test.\n\nFrom-SVN: r55214", "tree": {"sha": "9ba586fc93e9ae7cc750165df2c4b65dd0a3ded0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ba586fc93e9ae7cc750165df2c4b65dd0a3ded0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2153b98f202a261b77be7be529d371bb9fd3907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2153b98f202a261b77be7be529d371bb9fd3907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2153b98f202a261b77be7be529d371bb9fd3907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2153b98f202a261b77be7be529d371bb9fd3907/comments", "author": null, "committer": null, "parents": [{"sha": "61c07d3c9ba1d6351bbefc0227e526b905a63839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c07d3c9ba1d6351bbefc0227e526b905a63839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c07d3c9ba1d6351bbefc0227e526b905a63839"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "bc42127bd89a71b2060d9cf74d34e3944d2f2ec4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2153b98f202a261b77be7be529d371bb9fd3907", "patch": "@@ -1,3 +1,11 @@\n+2002-07-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6944\n+\t* init.c (build_aggr_init): Remove qualifiers of init before calling\n+\tbuild_vec_init.\n+\t(build_vec_init): Flatten multi-dimensional array during cleanup.\n+\t(build_vec_delete_1): Abort if the type of each element is array.\n+\n 2002-07-03  Graham Stott  <graham.stott@btinternet.com>\n \n \t* pt.c (instantiate_class_template): Fix typo."}, {"sha": "7f23699db41301a5785adc811e69cb80163f81cd", "filename": "gcc/cp/init.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b2153b98f202a261b77be7be529d371bb9fd3907", "patch": "@@ -1161,11 +1161,9 @@ build_aggr_init (exp, init, flags)\n \t  return error_mark_node;\n \t}\n       if (cp_type_quals (type) != TYPE_UNQUALIFIED)\n-\t{\n-\t  TREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n-\t  if (init)\n-\t    TREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n-\t}\n+\tTREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n+      if (itype && cp_type_quals (itype) != TYPE_UNQUALIFIED)\n+\tTREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n       stmt_expr = build_vec_init (exp, init,\n \t\t\t\t  init && same_type_p (TREE_TYPE (init),\n \t\t\t\t\t\t       TREE_TYPE (exp)));\n@@ -2586,6 +2584,10 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, use_global_delete)\n      This is also the containing expression returned by this function.  */\n   tree controller = NULL_TREE;\n \n+  /* We should only have 1-D arrays here.  */\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    abort ();\n+\n   if (! IS_AGGR_TYPE (type) || TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n     {\n       loop = integer_zero_node;\n@@ -3002,12 +3004,20 @@ build_vec_init (base, init, from_array)\n       && from_array != 2)\n     {\n       tree e;\n+      tree m = cp_build_binary_op (MINUS_EXPR, maxindex, iterator);\n+\n+      /* Flatten multi-dimensional array since build_vec_delete only\n+\t expects one-dimensional array.  */\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n+\t{\n+\t  m = cp_build_binary_op (MULT_EXPR, m,\n+\t\t\t\t  array_type_nelts_total (type));\n+\t  type = strip_array_types (type);\n+\t}\n \n       finish_compound_stmt (/*has_no_scope=*/1, try_body);\n       finish_cleanup_try_block (try_block);\n-      e = build_vec_delete_1 (rval,\n-\t\t\t      cp_build_binary_op (MINUS_EXPR, maxindex, \n-\t\t\t\t\t\t  iterator),\n+      e = build_vec_delete_1 (rval, m,\n \t\t\t      type,\n \t\t\t      sfk_base_destructor,\n \t\t\t      /*use_global_delete=*/0);"}, {"sha": "c4146afd6223f5169dc01dcec3a06ac0334a65d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2153b98f202a261b77be7be529d371bb9fd3907", "patch": "@@ -1,3 +1,9 @@\n+2002-07-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6944\n+\t* g++.dg/init/array4.C: New test.\n+\t* g++.dg/init/array5.C: New test.\n+\n Wed Jul  3 10:25:41 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* gcc.c-torture/execute/simd-1.c (main): Also test &, |, ^, ~."}, {"sha": "67519bf7c3517f296140e643fcc70908206b3781", "filename": "gcc/testsuite/g++.dg/init/array4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray4.C?ref=b2153b98f202a261b77be7be529d371bb9fd3907", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// Origin: Markus Breuer <markus.breuer@materna.de>\n+\n+// PR c++/6944\n+// Fail to synthesize copy constructor of multi-dimensional\n+// array of class.\n+\n+#include <string>\n+\n+class Array\n+{\n+public:\n+   std::string m_array[10][20][30];\n+};\n+\n+Array func()\n+{\n+   Array result;\n+   return result; // sorry, not implemented: cannot initialize multi-dimensional array with initializer\n+}\n+\n+\n+int main()\n+{\n+   Array arr = func();\n+}\n+"}, {"sha": "aeacb31cfaa141c78f63c875ffe8f8ad4b1c84a2", "filename": "gcc/testsuite/g++.dg/init/array5.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2153b98f202a261b77be7be529d371bb9fd3907/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray5.C?ref=b2153b98f202a261b77be7be529d371bb9fd3907", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run }\n+// Copyright (C) 2002 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+\n+// Incorrect construction and destruction of multi-dimensional\n+// array of class.\n+\n+extern \"C\" void abort();\n+extern \"C\" int printf(const char *, ...);\n+\n+int count;\n+int num;\n+\n+struct A\n+{\n+\tA()\n+\t{\n+\t\tif (count == num)\n+\t\t\tthrow \"\";\n+\t\tcount++;\n+#ifdef PRINT\n+\t\tprintf(\"ctor %p\\n\", static_cast<void *>(this));\n+#endif\n+\t}\n+\n+\t~A()\n+\t{\n+\t\tcount--;\n+#ifdef PRINT\n+\t\tprintf(\"dtor %p\\n\", static_cast<void *>(this));\n+#endif\n+\t}\n+};\n+\n+struct Array\n+{\n+\tA array[2][2][2];\n+};\n+\n+int main()\n+{\n+\tfor (num = 0; num <= 8; ++num) {\n+\t\tcount = 0;\n+\t\ttry {\n+\t\t\tArray A;\n+\t\t}\n+\t\tcatch (...) {\n+\t\t}\n+\t\tif (count != 0)\n+\t\t\tabort();\n+\t}\n+}"}]}