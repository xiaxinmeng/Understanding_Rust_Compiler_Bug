{"sha": "e2882e76089cecdc268d0835c54cabfa80b5b0be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4ODJlNzYwODljZWNkYzI2OGQwODM1YzU0Y2FiZmE4MGI1YjBiZQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-08-08T16:54:48Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-08-08T16:57:44Z"}, "message": "rs6000: MMA built-ins reject typedefs of MMA types\n\nWe do not allow conversions between the MMA types and other types.\nHowever, we are being too strict in not matching MMA types with\ntypdefs of those types.  Use TYPE_CANONICAL to see through the\ntypes to their canonical types before comparing them.\n\n2020-08-08  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/96530\n\t* config/rs6000/rs6000.c (rs6000_invalid_conversion): Use canonical\n\ttypes for type comparisons.  Refactor code to simplify it.\n\ngcc/testsuite/\n\tPR target/96530\n\t* gcc.target/powerpc/pr96530.c: New test.", "tree": {"sha": "2b4452a8caeab7f00d72156dd6b71511f9888454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b4452a8caeab7f00d72156dd6b71511f9888454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2882e76089cecdc268d0835c54cabfa80b5b0be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2882e76089cecdc268d0835c54cabfa80b5b0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2882e76089cecdc268d0835c54cabfa80b5b0be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2882e76089cecdc268d0835c54cabfa80b5b0be/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676b5525e8333005bdc1c596ed086f1da27a450f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676b5525e8333005bdc1c596ed086f1da27a450f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676b5525e8333005bdc1c596ed086f1da27a450f"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "40ee0a695f10b92de4ef077728eace81de6fd327", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2882e76089cecdc268d0835c54cabfa80b5b0be/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2882e76089cecdc268d0835c54cabfa80b5b0be/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e2882e76089cecdc268d0835c54cabfa80b5b0be", "patch": "@@ -26803,34 +26803,48 @@ rs6000_cannot_substitute_mem_equiv_p (rtx mem)\n static const char *\n rs6000_invalid_conversion (const_tree fromtype, const_tree totype)\n {\n-  if (element_mode (fromtype) != element_mode (totype))\n+  /* Make sure we're working with the canonical types.  */\n+  if (TYPE_CANONICAL (fromtype) != NULL_TREE)\n+    fromtype = TYPE_CANONICAL (fromtype);\n+  if (TYPE_CANONICAL (totype) != NULL_TREE)\n+    totype = TYPE_CANONICAL (totype);\n+\n+  machine_mode frommode = TYPE_MODE (fromtype);\n+  machine_mode tomode = TYPE_MODE (totype);\n+\n+  if (frommode != tomode)\n     {\n       /* Do not allow conversions to/from PXImode and POImode types.  */\n-      if (TYPE_MODE (fromtype) == PXImode)\n+      if (frommode == PXImode)\n \treturn N_(\"invalid conversion from type %<__vector_quad%>\");\n-      if (TYPE_MODE (totype) == PXImode)\n+      if (tomode == PXImode)\n \treturn N_(\"invalid conversion to type %<__vector_quad%>\");\n-      if (TYPE_MODE (fromtype) == POImode)\n+      if (frommode == POImode)\n \treturn N_(\"invalid conversion from type %<__vector_pair%>\");\n-      if (TYPE_MODE (totype) == POImode)\n+      if (tomode == POImode)\n \treturn N_(\"invalid conversion to type %<__vector_pair%>\");\n     }\n   else if (POINTER_TYPE_P (fromtype) && POINTER_TYPE_P (totype))\n     {\n+      /* We really care about the modes of the base types.  */\n+      frommode = TYPE_MODE (TREE_TYPE (fromtype));\n+      tomode = TYPE_MODE (TREE_TYPE (totype));\n+\n       /* Do not allow conversions to/from PXImode and POImode pointer\n \t types, except to/from void pointers.  */\n-      if (TYPE_MODE (TREE_TYPE (fromtype)) == PXImode\n-\t  && TYPE_MODE (TREE_TYPE (totype)) != VOIDmode)\n-\treturn N_(\"invalid conversion from type %<* __vector_quad%>\");\n-      if (TYPE_MODE (TREE_TYPE (totype)) == PXImode\n-\t  && TYPE_MODE (TREE_TYPE (fromtype)) != VOIDmode)\n-\treturn N_(\"invalid conversion to type %<* __vector_quad%>\");\n-      if (TYPE_MODE (TREE_TYPE (fromtype)) == POImode\n-\t  && TYPE_MODE (TREE_TYPE (totype)) != VOIDmode)\n-\treturn N_(\"invalid conversion from type %<* __vector_pair%>\");\n-      if (TYPE_MODE (TREE_TYPE (totype)) == POImode\n-\t  && TYPE_MODE (TREE_TYPE (fromtype)) != VOIDmode)\n-\treturn N_(\"invalid conversion to type %<* __vector_pair%>\");\n+      if (frommode != tomode\n+\t  && frommode != VOIDmode\n+\t  && tomode != VOIDmode)\n+\t{\n+\t  if (frommode == PXImode)\n+\t    return N_(\"invalid conversion from type %<* __vector_quad%>\");\n+\t  if (tomode == PXImode)\n+\t    return N_(\"invalid conversion to type %<* __vector_quad%>\");\n+\t  if (frommode == POImode)\n+\t    return N_(\"invalid conversion from type %<* __vector_pair%>\");\n+\t  if (tomode == POImode)\n+\t    return N_(\"invalid conversion to type %<* __vector_pair%>\");\n+\t}\n     }\n \n   /* Conversion allowed.  */"}, {"sha": "29bb9e3cc53eb430ee754367b4fe24c04cc209e2", "filename": "gcc/testsuite/gcc.target/powerpc/pr96530.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2882e76089cecdc268d0835c54cabfa80b5b0be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96530.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2882e76089cecdc268d0835c54cabfa80b5b0be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96530.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96530.c?ref=e2882e76089cecdc268d0835c54cabfa80b5b0be", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/96530 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+/* Verify we do not reject bar() below due to the typedef.  */\n+\n+typedef __vector_quad vquad_t;\n+\n+void\n+foo (__vector_quad *dst)\n+{\n+  __builtin_mma_xxsetaccz (dst);\n+}\n+\n+void\n+bar (vquad_t *dst)\n+{\n+  __builtin_mma_xxsetaccz (dst);\n+}"}]}