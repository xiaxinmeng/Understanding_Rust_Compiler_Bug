{"sha": "45063c0506a00f2673049d46f12a6061dca4692f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwNjNjMDUwNmEwMGYyNjczMDQ5ZDQ2ZjEyYTYwNjFkY2E0NjkyZg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-05-13T05:08:16Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-05-17T12:04:31Z"}, "message": "Fix ICE [PR target/100549]\n\nWhen arg0 is same as arg1 in __builtin_ia32_pcmpgtw,\ngimple_build (&stmts, GT_EXPR, cmp_type, arg0, arg1) will simplify the\ncomparison to vector constant 0, no stmts is generated, which causes\nICE in gsi_insert_before (gsi, stmts, GSI_SAME_STMT). So use\ngsi_insert_seq_before instead which will handle NULL seq.\n\ngcc/ChangeLog:\n\n\tPR target/100549\n\t* config/i386/i386.c (ix86_gimple_fold_builtin): Use\n\tgsi_insert_seq_before instead.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100549\n\t* gcc.target/i386/pr100549.c: New test.", "tree": {"sha": "5614bce502a55951297d8b9202617fda439ab323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5614bce502a55951297d8b9202617fda439ab323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45063c0506a00f2673049d46f12a6061dca4692f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45063c0506a00f2673049d46f12a6061dca4692f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45063c0506a00f2673049d46f12a6061dca4692f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45063c0506a00f2673049d46f12a6061dca4692f/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca93e302bf496b71bee839b3c121e1f7363fcf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca93e302bf496b71bee839b3c121e1f7363fcf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca93e302bf496b71bee839b3c121e1f7363fcf0"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "befe69e5eebe9d799cdbfcbfd6843a9c88dee68f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45063c0506a00f2673049d46f12a6061dca4692f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45063c0506a00f2673049d46f12a6061dca4692f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=45063c0506a00f2673049d46f12a6061dca4692f", "patch": "@@ -18000,8 +18000,8 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \ttree cmp_type = truth_type_for (type);\n \tgimple_seq stmts = NULL;\n \ttree cmp = gimple_build (&stmts, tcode, cmp_type, arg0, arg1);\n-\tgsi_insert_before (gsi, stmts, GSI_SAME_STMT);\n-\tgimple *g = gimple_build_assign (gimple_call_lhs (stmt),\n+\tgsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\tgimple* g = gimple_build_assign (gimple_call_lhs (stmt),\n \t\t\t\t\t VEC_COND_EXPR, cmp,\n \t\t\t\t\t minus_one_vec, zero_vec);\n \tgimple_set_location (g, loc);"}, {"sha": "83bba3cfd0d00bd1b4ad67b359b103b1b89cde00", "filename": "gcc/testsuite/gcc.target/i386/pr100549.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45063c0506a00f2673049d46f12a6061dca4692f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100549.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45063c0506a00f2673049d46f12a6061dca4692f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100549.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100549.c?ref=45063c0506a00f2673049d46f12a6061dca4692f", "patch": "@@ -0,0 +1,108 @@\n+/* PR target/100549  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mavx2\" } */\n+\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+\n+v16qi\n+f1 (v16qi a)\n+{\n+  return __builtin_ia32_pcmpeqb128 (a, a);\n+}\n+\n+v8hi\n+f2 (v8hi a)\n+{\n+  return __builtin_ia32_pcmpeqw128 (a, a);\n+}\n+\n+v4si\n+f3 (v4si a)\n+{\n+  return __builtin_ia32_pcmpeqd128 (a, a);\n+}\n+\n+v2di\n+f4 (v2di a)\n+{\n+  return __builtin_ia32_pcmpeqq (a, a);\n+}\n+\n+v16qi\n+f5 (v16qi a)\n+{\n+  return __builtin_ia32_pcmpgtb128 (a, a);\n+}\n+\n+v8hi\n+f6 (v8hi a)\n+{\n+  return __builtin_ia32_pcmpgtw128 (a, a);\n+}\n+\n+v4si\n+f7 (v4si a)\n+{\n+  return __builtin_ia32_pcmpgtd128 (a, a);\n+}\n+\n+v2di\n+f8 (v2di a)\n+{\n+  return __builtin_ia32_pcmpgtq (a, a);\n+}\n+\n+v32qi\n+f9 (v32qi a)\n+{\n+  return __builtin_ia32_pcmpeqb256 (a, a);\n+}\n+\n+v16hi\n+f10 (v16hi a)\n+{\n+  return __builtin_ia32_pcmpeqw256 (a, a);\n+}\n+\n+v8si\n+f11 (v8si a)\n+{\n+  return __builtin_ia32_pcmpeqd256 (a, a);\n+}\n+\n+v4di\n+f12 (v4di a)\n+{\n+  return __builtin_ia32_pcmpeqq256 (a, a);\n+}\n+\n+v32qi\n+f13 (v32qi a)\n+{\n+  return __builtin_ia32_pcmpgtb256 (a, a);\n+}\n+\n+v16hi\n+f14 (v16hi a)\n+{\n+  return __builtin_ia32_pcmpgtw256 (a, a);\n+}\n+\n+v8si\n+f15 (v8si a)\n+{\n+  return __builtin_ia32_pcmpgtd256 (a, a);\n+}\n+\n+v4di\n+f16 (v4di a)\n+{\n+  return __builtin_ia32_pcmpgtq256 (a, a);\n+}"}]}