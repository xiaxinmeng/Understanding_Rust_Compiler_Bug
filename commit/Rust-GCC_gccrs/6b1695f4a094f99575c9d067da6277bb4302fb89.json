{"sha": "6b1695f4a094f99575c9d067da6277bb4302fb89", "node_id": "C_kwDOANBUbNoAKDZiMTY5NWY0YTA5NGY5OTU3NWM5ZDA2N2RhNjI3N2JiNDMwMmZiODk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-17T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-17T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "94c53b4f92885a8234dcb3cc7602f7dc5c7eddca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94c53b4f92885a8234dcb3cc7602f7dc5c7eddca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b1695f4a094f99575c9d067da6277bb4302fb89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1695f4a094f99575c9d067da6277bb4302fb89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1695f4a094f99575c9d067da6277bb4302fb89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1695f4a094f99575c9d067da6277bb4302fb89/comments", "author": null, "committer": null, "parents": [{"sha": "73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e4d9f1751fd6d3c182988b2f9d0199c86053c9"}], "stats": {"total": 390, "additions": 389, "deletions": 1}, "files": [{"sha": "a6cbdce3b547f74fe0e825aa56941f1a84c823f6", "filename": "ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,17 @@\n+2021-11-16  Martin Uecker  <uecker@gcc.gnu.org>\n+\n+\t* MAINTAINERS: Add myself to DCO section and update email address.\n+\n+2021-11-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Ensure that PIC (shared) defaults are set\n+\tcorrectly for Darwin.\n+\n+2021-11-16  Jim Wilson  <jim.wilson.gcc@gmail.com>\n+\n+\t* MAINTAINERS: Update my address.\n+\n 2021-11-12  Alan Modra  <amodra@gmail.com>\n \n \t* Makefile.def (configure-opcodes): Depend on configure-bfd."}, {"sha": "0fb2567759439ff4ffdcfd5735a8bdc6f9e3482c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,134 @@\n+2021-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (get_modref_function_summary): Declare.\n+\t* ipa-modref.h (get_modref_function_summary): New function.\n+\t* tree-ssa-dse.c (clear_live_bytes_for_ref): Break out from ...\n+\t(clear_bytes_written_by): ... here; also clear memory killed by\n+\tcalls.\n+\n+2021-11-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* ggc-common.c (gt_pch_save): If we cannot find a suitable\n+\tmemory segment for save, then error-out, do not try to\n+\tcontinue.\n+\t(gt_pch_restore): Save the existing line table, and when\n+\tthe replacement is being read, use that when constructing\n+\tdiagnostics.\n+\n+2021-11-16  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/102976\n+\t* config/rs6000/mma.md (*vsx_assemble_pair): Add early-clobber for\n+\toutput operand.\n+\t(*mma_assemble_acc): Likewise.\n+\n+2021-11-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/102960\n+\t* gimple-fold.c (get_range_strlen): Take bitmap as an argument rather\n+\tthan a pointer to it.\n+\t(get_range_strlen_tree): Same.  Remove bitmap allocation.  Use\n+\tan auto_bitmap.\n+\t(get_maxval_strlen): Use an auto_bitmap.\n+\t* tree-ssa-strlen.c (get_range_strlen_dynamic): Factor out PHI\n+\thandling...\n+\t(get_range_strlen_phi): ...into this function.\n+\tAvoid assuming maximum string length is constant\n+\t(printf_strlen_execute): Dump pointer query cache contents when\n+\tdetails are requisted.\n+\n+2021-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* langhooks.h (struct lang_hooks): Adjust comment.\n+\t* print-tree.c (print_node): Also call print_xnode hook for\n+\ttcc_constant class.\n+\n+2021-11-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103218\n+\t* match.pd: New pattern for \"((type)(a<0)) << SIGNBITOFA\".\n+\n+2021-11-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (maddhisi4): Use a single move to accumulator.\n+\t(umaddhisi4): Likewise.\n+\t(machi): Update pattern.\n+\t(umachi): Likewise.\n+\n+2021-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102880\n+\t* tree-ssa-dce.c (sort_phi_args): New function.\n+\t(make_forwarders_with_degenerate_phis): Likewise.\n+\t(perform_tree_ssa_dce): Call\n+\tmake_forwarders_with_degenerate_phis.\n+\n+2021-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102880\n+\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Push\n+\tsingle_pred (bb1) condition to places that really need it.\n+\t(match_simplify_replacement): Likewise.\n+\t(value_replacement): Likewise.\n+\t(replace_phi_edge_with_variable): Deal with extra edges\n+\tinto the middle BB.\n+\n+2021-11-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Use build_debug_expr_decl,\n+\tadd a fixme note about the mode assignment perhaps being unnecessary.\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call):\n+\tLikewise.\n+\t(ipa_param_body_adjustments::mark_dead_statements): Likewise.\n+\t(ipa_param_body_adjustments::reset_debug_stmts): Likewise.\n+\t* tree-inline.c (remap_ssa_name): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\t* tree-into-ssa.c (rewrite_debug_stmt_uses): Likewise.\n+\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Likewise.\n+\t* tree-ssa.c (insert_debug_temp_for_var_def): Likewise.\n+\n+2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103208\n+\t* omp-expand.c (expand_omp_build_cond): New function.\n+\t(expand_omp_for_init_counts, expand_omp_for_init_vars,\n+\texpand_omp_for_static_nochunk, expand_omp_for_static_chunk): Use it.\n+\n+2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102009\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_alloc_size_call):\n+\tPunt if any of alloc_size arguments is out of bounds vs. number of\n+\tcall arguments.\n+\n+2021-11-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.md (*bmi2_rorx<mode3>_1): Make conditional\n+\ton !optimize_function_for_size_p.\n+\t(*<any_rotate><mode>3_1): Add preferred_for_size attribute.\n+\t(define_splits): Conditionalize on !optimize_function_for_size_p.\n+\t(*bmi2_rorxsi3_1_zext): Likewise.\n+\t(*<any_rotate>si2_1_zext): Add preferred_for_size attribute.\n+\t(define_splits): Conditionalize on !optimize_function_for_size_p.\n+\n+2021-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/103262\n+\t* ipa-modref.c (merge_call_side_effects): Fix uninitialized\n+\taccess.\n+\n+2021-11-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103245\n+\t* match.pd: Combine the abs pattern matching using multiplication.\n+\tAdding optional nop_convert too.\n+\n+2021-11-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/103268\n+\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Add a missing\n+\treturn.\n+\n 2021-11-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n \n \t* gimple-fold.c (gimple_fold_builtin_strncat): Use ranges to"}, {"sha": "530e4a51b6aba37a36bb870691fce0f7d65f5eed", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1 +1 @@\n-20211116\n+20211117"}, {"sha": "be7b286f77821992bed7f53162f8db918e122198", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,9 @@\n+2021-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102662\n+\t* constraint-manager.cc (bounded_range::operator==): Require the\n+\ttypes to be the same for equality.\n+\n 2021-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.opt (Wanalyzer-tainted-allocation-size): New."}, {"sha": "c5ae8c104b75c0d42eb0ea9a279681187fdf4d83", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,8 @@\n+2021-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (release_tree_vector): Only cache vecs smaller than\n+\t16 elements.\n+\n 2021-11-15  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt: Add -fimplicit-constexpr."}, {"sha": "ac52e3b4a69f3f8433442c0eff1ecdb173ade24e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,7 @@\n+2021-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* ptree.c (cxx_print_xnode): Handle PTRMEM_CST.\n+\n 2021-11-15  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (struct lang_decl_fn): Add implicit_constexpr."}, {"sha": "f5abad99572dde06531861a49320900fd67972c6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,63 @@\n+2021-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103286\n+\t* resolve.c (resolve_select): Choose appropriate range limit to\n+\tavoid NULL pointer dereference when generating error message.\n+\n+2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* interface.c (gfc_dummy_arg_get_name): New function.\n+\t* gfortran.h (gfc_dummy_arg_get_name): Declare it.\n+\t* trans-array.c (arg_evaluated_for_scalarization): Pass a dummy\n+\targument wrapper as argument instead of an actual argument\n+\tand an index number.  Check it\u2019s non-NULL.  Use its name\n+\tto identify it.\n+\t(gfc_walk_elemental_function_args): Update call to\n+\targ_evaluated for scalarization.  Remove argument counting.\n+\n+2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_actual_arglist::missing_arg_type): Remove.\n+\t* interface.c (gfc_compare_actual_formal): Remove\n+\tmissing_arg_type initialization.\n+\t* intrinsic.c (sort_actual): Ditto.\n+\t* trans-expr.c (gfc_conv_procedure_call): Use associated_dummy\n+\tand gfc_dummy_arg_get_typespec to get the dummy argument type.\n+\n+2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* interface.c (gfc_dummy_arg_get_typespec,\n+\tgfc_dummy_arg_is_optional): New functions.\n+\t* gfortran.h (gfc_dummy_arg_get_typespec,\n+\tgfc_dummy_arg_is_optional): Declare them.\n+\t* trans.h (gfc_ss_info::dummy_arg): Use the wrapper type\n+\tas declaration type.\n+\t* trans-array.c (gfc_scalar_elemental_arg_saved_as_reference):\n+\tuse gfc_dummy_arg_get_typespec function to get the type.\n+\t(gfc_walk_elemental_function_args): Remove proc_ifc argument.\n+\tGet info about the dummy arg using the associated_dummy field.\n+\t* trans-array.h (gfc_walk_elemental_function_args): Update declaration.\n+\t* trans-intrinsic.c (gfc_walk_intrinsic_function):\n+\tUpdate call to gfc_walk_elemental_function_args.\n+\t* trans-stmt.c (gfc_trans_call): Ditto.\n+\t(get_proc_ifc_for_call): Remove.\n+\n+2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_dummy_arg_kind, gfc_dummy_arg): New.\n+\t(gfc_actual_arglist): New field associated_dummy.\n+\t(gfc_intrinsic_arg): Remove field actual.\n+\t* interface.c (get_nonintrinsic_dummy_arg): New.\n+\t(gfc_compare_actual): Initialize associated_dummy.\n+\t* intrinsic.c (get_intrinsic_dummy_arg): New.\n+\t(sort_actual):\u00a0 Add argument vectors.\n+\tUse loops with indices on argument vectors.\n+\tInitialize associated_dummy.\n+\n+2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* intrinsic.c (sort_actual): initialise variable and use it earlier.\n+\n 2021-11-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.c (OMP_TARGET_CLAUSES): Add thread_limit."}, {"sha": "566c5718aab25c0112e90c3a579d04de5e8876b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,97 @@\n+2021-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-dse-4.c: New test.\n+\n+2021-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103286\n+\t* gfortran.dg/pr103286.f90: New test.\n+\n+2021-11-16  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/102976\n+\t* gcc.target/powerpc/pr102976.c: New test.\n+\n+2021-11-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/102960\n+\t* gcc.dg/Wstringop-overflow-84.c: New test.\n+\n+2021-11-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/shrn-combine-10.c: Use shrn.\n+\n+2021-11-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/signbit-2.c: CHeck vect or scalar.\n+\n+2021-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102662\n+\t* g++.dg/analyzer/pr102662.C: New test.\n+\n+2021-11-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103218\n+\t* gcc.dg/tree-ssa/pr103218-1.c: New test.\n+\n+2021-11-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/tmac-4.c: New test.\n+\n+2021-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102880\n+\t* gcc.dg/tree-ssa/pr102880.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr69270-3.c: Robustify.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Change the number of\n+\texpected threadings.\n+\n+2021-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102880\n+\t* gcc.dg/tree-ssa/phi-opt-26.c: New testcase.\n+\n+2021-11-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/add_n-combine.c: Update test patterns.\n+\t* gcc.target/arc/builtin_eh.c: Update test for linux platforms.\n+\t* gcc.target/arc/mul64-1.c: Disable this test while running on\n+\tlinux.\n+\t* gcc.target/arc/tls-gd.c: Update matching patterns.\n+\t* gcc.target/arc/tls-ie.c: Likewise.\n+\t* gcc.target/arc/tls-ld.c: Likewise.\n+\t* gcc.target/arc/uncached-8.c: Likewise.\n+\n+2021-11-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-sra-ret-nonull.c: New test.\n+\n+2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103208\n+\t* c-c++-common/gomp/loop-11.c: New test.\n+\n+2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102009\n+\t* gcc.dg/pr102009.c: New test.\n+\n+2021-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-dse-5.c: New test.\n+\n+2021-11-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103245\n+\t* gcc.dg/tree-ssa/pr103245-1.c: New test.\n+\n+2021-11-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/103268\n+\t* gcc.dg/pr103268-1.c: New test.\n+\t* gcc.dg/pr103268-2.c: Likewise.\n+\n 2021-11-15  Jason Merrill  <jason@redhat.com>\n \n \t* lib/g++-dg.exp: Handle \"impcx\"."}, {"sha": "b3b7ec569320c4819f6f5ab72533327a81d927b8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,8 @@\n+2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Mark thread_limit clause to target\n+\tconstruct as implemented.\n+\n 2021-11-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/thread-limit-1.f90: New test."}, {"sha": "bce2aa9bfde561d2d71300851a71cbd6c3fb90fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1695f4a094f99575c9d067da6277bb4302fb89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1695f4a094f99575c9d067da6277bb4302fb89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b1695f4a094f99575c9d067da6277bb4302fb89", "patch": "@@ -1,3 +1,72 @@\n+2021-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (operator<=>): Use constexpr\n+\tunconditionally.\n+\t* testsuite/21_strings/basic_string/modifiers/constexpr.cc:\n+\tRequire cxx11-abit effective target.\n+\t* testsuite/21_strings/headers/string/synopsis.cc: Add\n+\tconditional constexpr to declarations, and adjust relational\n+\toperators for C++20.\n+\n+2021-11-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/ryu/MERGE: Update the commit hash.\n+\t* src/c++17/ryu/d2s_intrinsics.h: Merge from Ryu's master\n+\tbranch.\n+\n+2021-11-16  Michael de Lang  <kingoipo@gmail.com>\n+\n+\t* include/bits/basic_string.h (basic_string, operator\"\"s): Add\n+\tconstexpr for C++20.\n+\t(basic_string::basic_string(basic_string&&)): Only copy\n+\tinitialized portion of the buffer.\n+\t(basic_string::basic_string(basic_string&&, const Alloc&)):\n+\tLikewise.\n+\t* include/bits/basic_string.tcc (basic_string): Add constexpr\n+\tfor C++20.\n+\t(basic_string::swap(basic_string&)): Only copy initialized\n+\tportions of the buffers.\n+\t(basic_string::_M_replace): Add constexpr implementation that\n+\tdoesn't depend on pointer comparisons.\n+\t* include/bits/cow_string.h: Adjust comment.\n+\t* include/ext/type_traits.h (__is_null_pointer): Add constexpr.\n+\t* include/std/string (erase, erase_if): Add constexpr.\n+\t* include/std/version (__cpp_lib_constexpr_string): Update\n+\tvalue.\n+\t* testsuite/21_strings/basic_string/cons/char/constexpr.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/constexpr.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string/literals/constexpr.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string/modifiers/constexpr.cc: New test.\n+\t* testsuite/21_strings/basic_string/modifiers/swap/char/constexpr.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string/modifiers/swap/wchar_t/constexpr.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string/version.cc: New test.\n+\n+2021-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_bvector.h (swap(_Bit_reference, _Bit_reference))\n+\t(swap(_Bit_reference, bool&), swap(bool&, _Bit_reference)):\n+\tDefine as hidden friends of _Bit_reference.\n+\n+2021-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/modifiers/append/wchar_t/1.cc:\n+\tFix reads past the end of strings.\n+\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/operations/compare/wchar_t/1.cc:\n+\tLikewise.\n+\n+2021-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/allocator/71964.cc: Fix\n+\ttypo.\n+\t* testsuite/23_containers/set/allocator/71964.cc: Likewise.\n+\n 2021-11-15  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/20_util/to_address/1_neg.cc: Adjust error."}]}