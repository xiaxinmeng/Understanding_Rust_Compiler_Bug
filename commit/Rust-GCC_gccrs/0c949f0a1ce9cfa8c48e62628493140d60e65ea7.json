{"sha": "0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5NDlmMGExY2U5Y2ZhOGM0OGU2MjYyODQ5MzE0MGQ2MGU2NWVhNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-09-01T22:10:57Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-09-01T22:10:57Z"}, "message": "re PR libquadmath/81848 (Add PowerPC support to libquadmath)\n\n2017-09-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR libquadmath/81848\n\t* configure.ac (powerpc*-linux*): Use attribute mode KC to create\n\tcomplex __float128 on PowerPC instead of attribute mode TC.\n\t* quadmath.h (__complex128): Likewise.\n\t* configure: Regenerate.\n\t* math/cbrtq.c (CBRT2): Use __float128 not long double.\n\t(CBRT4): Likewise.\n\t(CBRT2I): Likewise.\n\t(CBRT4I): Likewise.\n\t* math/j0q.c (U0): Likewise.\n\t* math/sqrtq.c (sqrtq): Don't depend on implicit conversion\n\tbetween __float128, instead explicitly convert the __float128\n\tvalue to long double because the PowerPC does not allow __float128\n\tand long double in the same expression.\n\nFrom-SVN: r251613", "tree": {"sha": "19ec6e67a88c3251f2fa78dbe04a44c337eaeaf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ec6e67a88c3251f2fa78dbe04a44c337eaeaf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/comments", "author": null, "committer": null, "parents": [{"sha": "fe920c2d9f479c2b17d6963973cf11efe0169293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe920c2d9f479c2b17d6963973cf11efe0169293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe920c2d9f479c2b17d6963973cf11efe0169293"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "c897d33a2bcef673e21dae1b94a81387575f92c7", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -1,3 +1,20 @@\n+2017-09-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR libquadmath/81848\n+\t* configure.ac (powerpc*-linux*): Use attribute mode KC to create\n+\tcomplex __float128 on PowerPC instead of attribute mode TC.\n+\t* quadmath.h (__complex128): Likewise.\n+\t* configure: Regenerate.\n+\t* math/cbrtq.c (CBRT2): Use __float128 not long double.\n+\t(CBRT4): Likewise.\n+\t(CBRT2I): Likewise.\n+\t(CBRT4I): Likewise.\n+\t* math/j0q.c (U0): Likewise.\n+\t* math/sqrtq.c (sqrtq): Don't depend on implicit conversion\n+\tbetween __float128, instead explicitly convert the __float128\n+\tvalue to long double because the PowerPC does not allow __float128\n+\tand long double in the same expression.\n+\n 2017-07-19  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* math/powq.c (powq): Use uint32_t instead of u_int32_t."}, {"sha": "b1dc7f385378292dca7b5b3027e1d0a6761e7153", "filename": "libquadmath/configure", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -12516,7 +12516,11 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+    #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)\n     typedef _Complex float __attribute__((mode(TC))) __complex128;\n+    #else\n+    typedef _Complex float __attribute__((mode(KC))) __complex128;\n+    #endif\n \n     __float128 foo (__float128 x)\n     {\n@@ -12563,7 +12567,11 @@ fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+    #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)\n     typedef _Complex float __attribute__((mode(TC))) __complex128;\n+    #else\n+    typedef _Complex float __attribute__((mode(KC))) __complex128;\n+    #endif\n \n     __float128 foo (__float128 x)\n     {"}, {"sha": "4226524caf85a3e5697327f0959254e0611db90a", "filename": "libquadmath/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure.ac?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -210,7 +210,11 @@ AM_CONDITIONAL(LIBQUAD_USE_SYMVER_SUN, [test \"x$quadmath_use_symver\" = xsun])\n \n AC_CACHE_CHECK([whether __float128 is supported], [libquad_cv_have_float128],\n   [GCC_TRY_COMPILE_OR_LINK([\n+    #if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)\n     typedef _Complex float __attribute__((mode(TC))) __complex128;\n+    #else\n+    typedef _Complex float __attribute__((mode(KC))) __complex128;\n+    #endif\n \n     __float128 foo (__float128 x)\n     {"}, {"sha": "a7a36f953cd97d511218987f438124ae54bcae50", "filename": "libquadmath/math/cbrtq.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fmath%2Fcbrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fmath%2Fcbrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcbrtq.c?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -56,10 +56,10 @@ Adapted for glibc October, 2001.\n \n #include \"quadmath-imp.h\"\n \n-static const long double CBRT2 = 1.259921049894873164767210607278228350570251Q;\n-static const long double CBRT4 = 1.587401051968199474751705639272308260391493Q;\n-static const long double CBRT2I = 0.7937005259840997373758528196361541301957467Q;\n-static const long double CBRT4I = 0.6299605249474365823836053036391141752851257Q;\n+static const __float128 CBRT2 = 1.259921049894873164767210607278228350570251Q;\n+static const __float128 CBRT4 = 1.587401051968199474751705639272308260391493Q;\n+static const __float128 CBRT2I = 0.7937005259840997373758528196361541301957467Q;\n+static const __float128 CBRT4I = 0.6299605249474365823836053036391141752851257Q;\n \n \n __float128"}, {"sha": "2dc93d5292f3aa5f073fe07c84109f1fda2eeab1", "filename": "libquadmath/math/j0q.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fmath%2Fj0q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fmath%2Fj0q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj0q.c?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -816,7 +816,7 @@ static __float128 Y0_2D[NY0_2D + 1] = {\n  /* 1.000000000000000000000000000000000000000E0 */\n };\n \n-static const long double U0 = -7.3804295108687225274343927948483016310862e-02Q;\n+static const __float128 U0 = -7.3804295108687225274343927948483016310862e-02Q;\n \n /* Bessel function of the second kind, order zero.  */\n "}, {"sha": "56ea5d3243c06df2276689849b448eebacae6367", "filename": "libquadmath/math/sqrtq.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fmath%2Fsqrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fmath%2Fsqrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsqrtq.c?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -32,14 +32,17 @@ sqrtq (const __float128 x)\n   }\n \n #ifdef HAVE_SQRTL\n-  if (x <= LDBL_MAX && x >= LDBL_MIN)\n   {\n-    /* Use long double result as starting point.  */\n-    y = sqrtl ((long double) x);\n-\n-    /* One Newton iteration.  */\n-    y -= 0.5q * (y - x / y);\n-    return y;\n+    long double xl = (long double) x;\n+    if (xl <= LDBL_MAX && xl >= LDBL_MIN)\n+      {\n+\t/* Use long double result as starting point.  */\n+\ty = (__float128) sqrtl (xl);\n+\n+\t/* One Newton iteration.  */\n+\ty -= 0.5q * (y - x / y);\n+\treturn y;\n+      }\n   }\n #endif\n "}, {"sha": "95487b7d6efe68f7dd4babfc414ea4abe6afe2b7", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c949f0a1ce9cfa8c48e62628493140d60e65ea7/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=0c949f0a1ce9cfa8c48e62628493140d60e65ea7", "patch": "@@ -29,7 +29,11 @@ extern \"C\" {\n \n /* Define the complex type corresponding to __float128\n    (\"_Complex __float128\" is not allowed) */\n+#if (!defined(_ARCH_PPC)) || defined(__LONG_DOUBLE_IEEE128__)\n typedef _Complex float __attribute__((mode(TC))) __complex128;\n+#else\n+typedef _Complex float __attribute__((mode(KC))) __complex128;\n+#endif\n \n #ifdef __cplusplus\n # define __quadmath_throw throw ()"}]}