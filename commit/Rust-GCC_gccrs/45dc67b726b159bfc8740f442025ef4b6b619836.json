{"sha": "45dc67b726b159bfc8740f442025ef4b6b619836", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkYzY3YjcyNmIxNTliZmM4NzQwZjQ0MjAyNWVmNGI2YjYxOTgzNg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-07-09T00:47:47Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-07-09T00:47:47Z"}, "message": "sh.c (sh_va_arg): Initinalize lab_over.\n\n\t* config/sh/sh.c (sh_va_arg): Initinalize lab_over.\n\t* config/sh/sh.h (CONST_OK_FOR_J16): Use parentheses.\n\t(MODE_AFTER): Add cast appropriately.\n\t* config/sh/sh.md (movdi splitter): Likewise.\n\t(casesi_worker_2): Add const qualifier appropriately.\n\t(eh_return): Remove unused variable.\n\t(insv): Initialize v;\n\nFrom-SVN: r84337", "tree": {"sha": "b2173c82f257cc08e888fd16c4ea5dd1c096fef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2173c82f257cc08e888fd16c4ea5dd1c096fef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45dc67b726b159bfc8740f442025ef4b6b619836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dc67b726b159bfc8740f442025ef4b6b619836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45dc67b726b159bfc8740f442025ef4b6b619836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dc67b726b159bfc8740f442025ef4b6b619836/comments", "author": null, "committer": null, "parents": [{"sha": "9d6bb56678d647dca2e971c5ca11f8446fab70d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6bb56678d647dca2e971c5ca11f8446fab70d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6bb56678d647dca2e971c5ca11f8446fab70d7"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "20ac9057f73d31b4f42b56786635ca2702334508", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45dc67b726b159bfc8740f442025ef4b6b619836", "patch": "@@ -1,3 +1,13 @@\n+2004-07-08  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (sh_va_arg): Initinalize lab_over.\n+\t* config/sh/sh.h (CONST_OK_FOR_J16): Use parentheses.\n+\t(MODE_AFTER): Add cast appropriately.\n+\t* config/sh/sh.md (movdi splitter): Likewise.\n+\t(casesi_worker_2): Add const qualifier appropriately.\n+\t(eh_return): Remove unused variable.\n+\t(insv): Initialize v;\n+\n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n \t* config/mmix/mmix-protos.h (mmix_expand_builtin_va_arg): Remove."}, {"sha": "ef5df6b69a6a3b8fb38bf1d73b702510e7001d09", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=45dc67b726b159bfc8740f442025ef4b6b619836", "patch": "@@ -6295,7 +6295,7 @@ sh_va_arg (tree valist, tree type)\n   rtx addr_rtx, r;\n   rtx result_ptr, result = NULL_RTX;\n   int pass_by_ref = MUST_PASS_IN_STACK (TYPE_MODE (type), type);\n-  rtx lab_over;\n+  rtx lab_over = NULL_RTX;\n \n   size = int_size_in_bytes (type);\n   rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;"}, {"sha": "3c1e94cf4b0ce260aa454e55f4cdbe7fef322b5c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=45dc67b726b159bfc8740f442025ef4b6b619836", "patch": "@@ -1533,7 +1533,7 @@ extern enum reg_class reg_class_from_letter[];\n    : 0)\n \n #define CONST_OK_FOR_J16(VALUE) \\\n-  (HOST_BITS_PER_WIDE_INT >= 64 && (VALUE) == (HOST_WIDE_INT) 0xffffffff \\\n+  ((HOST_BITS_PER_WIDE_INT >= 64 && (VALUE) == (HOST_WIDE_INT) 0xffffffff) \\\n    || (HOST_BITS_PER_WIDE_INT >= 64 && (VALUE) == (HOST_WIDE_INT) -1 << 32))\n #define CONST_OK_FOR_J(VALUE, STR) \\\n   ((STR)[1] == '1' && (STR)[2] == '6' ? CONST_OK_FOR_J16 (VALUE) \\\n@@ -3365,7 +3365,7 @@ extern int rtx_equal_function_value_matters;\n      (TARGET_HITACHI\t\t\t\t\\\n       && recog_memoized (INSN) >= 0\t\t\\\n       && get_attr_fp_set (INSN) != FP_SET_NONE  \\\n-      ? get_attr_fp_set (INSN)                  \\\n+      ? (int) get_attr_fp_set (INSN)            \\\n       : (MODE))\n \n #define MODE_PRIORITY_TO_MODE(ENTITY, N) \\"}, {"sha": "e901392dc9da3afd0bf2ec734b1d453f13ee007e", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc67b726b159bfc8740f442025ef4b6b619836/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=45dc67b726b159bfc8740f442025ef4b6b619836", "patch": "@@ -4068,7 +4068,8 @@\n \t    }\n \t  /* Try movi / mshflo.l  */\n \t  val2 = (HOST_WIDE_INT) val >> 32;\n-\t  if (val2 == trunc_int_for_mode (val, SImode))\n+\t  if (val2 == ((unsigned HOST_WIDE_INT)\n+\t\t\ttrunc_int_for_mode (val, SImode)))\n \t    {\n \t      operands[1] = gen_mshflo_l_di (operands[0], operands[0],\n \t\t\t\t\t     operands[0]);\n@@ -7171,7 +7172,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"*\n {\n   rtx diff_vec = PATTERN (next_real_insn (operands[2]));\n-  char *load;\n+  const char *load;\n \n   if (GET_CODE (diff_vec) != ADDR_DIFF_VEC)\n     abort ();\n@@ -7415,7 +7416,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(use (match_operand 0 \"register_operand\" \"\"))]\n   \"\"\n {\n-  rtx tmp, ra = operands[0];\n+  rtx ra = operands[0];\n \n   if (TARGET_SHMEDIA64)\n     emit_insn (gen_eh_set_ra_di (ra));\n@@ -9258,7 +9259,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"\n {\n   rtx addr_target, orig_address, shift_reg, qi_val;\n-  HOST_WIDE_INT bitsize, size, v;\n+  HOST_WIDE_INT bitsize, size, v = 0;\n   rtx x = operands[3];\n \n   /* ??? expmed doesn't care for non-register predicates.  */"}]}