{"sha": "664921b428a4b0410d06003734d93520fa93fe5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0OTIxYjQyOGE0YjA0MTBkMDYwMDM3MzRkOTM1MjBmYTkzZmU1Yg==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-08-28T06:24:41Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-08-28T06:24:41Z"}, "message": "(movstrsi): Rewrite to handle operands correctly.\n\nFrom-SVN: r1984", "tree": {"sha": "0b5687425eebac55e3a2c31e995b78437354c1e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b5687425eebac55e3a2c31e995b78437354c1e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664921b428a4b0410d06003734d93520fa93fe5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664921b428a4b0410d06003734d93520fa93fe5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664921b428a4b0410d06003734d93520fa93fe5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664921b428a4b0410d06003734d93520fa93fe5b/comments", "author": null, "committer": null, "parents": [{"sha": "1bbddf1116691381ec23f6a5c4908648784e868d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbddf1116691381ec23f6a5c4908648784e868d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbddf1116691381ec23f6a5c4908648784e868d"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "e2121260747b70f4af1da72a578ef3d7dd745b36", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664921b428a4b0410d06003734d93520fa93fe5b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664921b428a4b0410d06003734d93520fa93fe5b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=664921b428a4b0410d06003734d93520fa93fe5b", "patch": "@@ -3870,20 +3870,29 @@\n   \"nop\")\n \n (define_expand \"movstrsi\"\n-  [(parallel [(set (mem:BLK (match_operand:BLK 0 \"address_operand\" \"\"))\n-\t\t   (mem:BLK (match_operand:BLK 1 \"address_operand\" \"\")))\n+  [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n+\t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n \t      (use (match_operand:SI 2 \"const_int_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"const_int_operand\" \"\"))\n \t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (match_dup 0))\n-\t      (clobber (match_dup 1))])]\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))])]\n   \"\"\n   \"\n {\n+  rtx addr0, addr1;\n+\n   if (GET_CODE (operands[2]) != CONST_INT)\n     FAIL;\n-  operands[0] = copy_to_mode_reg (SImode, XEXP (operands[0], 0));\n-  operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+\n+  addr0 = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n+  addr1 = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n+\n+  operands[5] = addr0;\n+  operands[6] = addr1;\n+\n+  operands[0] = gen_rtx (MEM, BLKmode, addr0);\n+  operands[1] = gen_rtx (MEM, BLKmode, addr1);\n }\")\n \n ;; It might seem that operands 0 & 1 could use predicate register_operand."}]}