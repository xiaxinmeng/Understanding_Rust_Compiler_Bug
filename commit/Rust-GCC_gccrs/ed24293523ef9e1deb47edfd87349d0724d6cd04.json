{"sha": "ed24293523ef9e1deb47edfd87349d0724d6cd04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyNDI5MzUyM2VmOWUxZGViNDdlZGZkODczNDlkMDcyNGQ2Y2QwNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-13T21:06:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-13T21:06:37Z"}, "message": "1.cc: Split and fix for missing seeks between gets and puts into...\n\n2003-06-13  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* testsuite/27_io/basic_filebuf/seekoff/char/1.cc: Split and\n\tfix for missing seeks between gets and puts into...\n\t* testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/4-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/seekpos/char/1.cc: Same, into...\n\t* testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/seekpos/char/4-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc: Fix\n\tfor missing seeks between gets and puts.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-io.cc: Ditto.\n\t* testsuite/data/seekoff-1.tst: New.\n\t* testsuite/data/seekoff-2.tst: New.\n\t* testsuite/data/seekpos-1.tst: New.\n\t* testsuite/data/seekpos-2.tst: New.\n\nFrom-SVN: r67913", "tree": {"sha": "d3477e56f8837250204d2d4341641cc55fa8d4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3477e56f8837250204d2d4341641cc55fa8d4be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed24293523ef9e1deb47edfd87349d0724d6cd04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed24293523ef9e1deb47edfd87349d0724d6cd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed24293523ef9e1deb47edfd87349d0724d6cd04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed24293523ef9e1deb47edfd87349d0724d6cd04/comments", "author": null, "committer": null, "parents": [{"sha": "ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a"}], "stats": {"total": 749, "additions": 480, "deletions": 269}, "files": [{"sha": "75de06fadaa49abe590cb6a1aa5b104e29a9c56c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -1,3 +1,20 @@\n+2003-06-13  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/1.cc: Split and\n+\tfix for missing seeks between gets and puts into...\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/4-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/1.cc: Same, into...\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/4-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc: Fix\n+\tfor missing seeks between gets and puts.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-io.cc: Ditto.\n+\t* testsuite/data/seekoff-1.tst: New.\n+\t* testsuite/data/seekoff-2.tst: New.\n+\t* testsuite/data/seekpos-1.tst: New.\n+\t* testsuite/data/seekpos-2.tst: New.\n+\n 2003-06-13  Nathan C. Myers <ncm-nospam@cantrip.org>\n \n \tAvoid multi-processor bus contention on increment/decrement-and-"}, {"sha": "e448326d76b8e1df533f3e4fc3f5485eddc6849f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1.cc", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1.cc?ref=ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a", "patch": "@@ -1,137 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  using namespace std;\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::traits_type \ttraits_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  filebuf \t\t\t\tf_tmp;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  fb_03.open(name_01, ios_base::out | ios_base::in);\n-\n-  int_type c1;\n-  int_type c2;\n-  int_type c3;\n-\n-  // seekoff\n-  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n-  // alters the stream position to off\n-  pos_type pt_1(off_type(-1));\n-  pos_type pt_2(off_type(0));\n-  off_type off_1 = 0;\n-  off_type off_2 = 0;\n-\n-  //IN|OUT\n-  // 27filebuf-3.txt = bd23456789:;<=>?...\n-  //beg\n-  strmsz_1 = fb_03.in_avail(); \n-  pt_1 = fb_03.pubseekoff(2, ios_base::beg);\n-  strmsz_2 = fb_03.in_avail(); \n-  off_1 = pt_1;\n-  VERIFY( off_1 > 0 );\n-  c1 = fb_03.snextc(); //current in pointer +1\n-  VERIFY( c1 == '9' );\n-  c2 = fb_03.sputc('\\n');  //current in pointer +1\n-  c3 = fb_03.sgetc();\n-  VERIFY( c2 != c3 ); \n-  VERIFY( c3 == '9' );\n-  fb_03.pubsync(); \n-  c1 = fb_03.sgetc();\n-  VERIFY( c1 == c3 );\n-  //cur\n-  // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n-  pt_2 = fb_03.pubseekoff(2, ios_base::cur);\n-  off_2 = pt_2;\n-  VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n-  c1 = fb_03.snextc(); //current in pointer +1\n-  VERIFY( c1 == '1' );\n-  c2 = fb_03.sputc('x');  //test current out pointer\n-  c3 = fb_03.sputc('\\n');\n-  c1 = fb_03.sgetc();\n-  fb_03.pubsync(); \n-  c3 = fb_03.sgetc();\n-  VERIFY( c1 == c3 );\n-  //end\n-  // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n-  pt_2 = fb_03.pubseekoff(0, ios_base::end, ios_base::in|ios_base::out);\n-  off_1 = pt_2;\n-  VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n-  c3 = fb_03.sputc('\\n');\n-  strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n-  VERIFY( strmsz_1 == 28 );\n-  c1 = fb_03.sungetc();\n-  // Defect?  retval of sungetc is not necessarily the character ungotten.\n-  // So re-get it.\n-  c1 = fb_03.sgetc();\n-  fb_03.pubsync(); \n-  c3 = fb_03.sgetc();\n-  VERIFY( c1 == c3 );\n-  // IN\n-  // OUT\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "7552d889eb663f81bbd0156cfde0df4e79b158c6", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,123 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff-1.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_03;\n+    fb_03.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    // 27filebuf-3.txt = bd23456789:;<=>?...\n+    //beg\n+    strmsz_1 = fb_03.in_avail(); \n+    pt_1 = fb_03.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb_03.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb_03.snextc(); //current in pointer +1\n+    VERIFY( c1 == '9' );\n+    fb_03.pubseekoff(3, ios_base::beg);\n+    c2 = fb_03.sputc('\\n');  //current in pointer +1\n+    fb_03.pubseekoff(4, ios_base::beg);\n+    c3 = fb_03.sgetc();\n+    VERIFY( c2 != c3 ); \n+    VERIFY( c3 == '9' );\n+    fb_03.pubsync(); \n+    c1 = fb_03.sgetc();\n+    VERIFY( c1 == c3 );\n+    //cur\n+    // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n+    pt_2 = fb_03.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb_03.snextc(); //current in pointer +1\n+    VERIFY( c1 == '1' );\n+    fb_03.pubseekoff(0, ios_base::cur);\n+    c2 = fb_03.sputc('x');  //test current out pointer\n+    c3 = fb_03.sputc('\\n');\n+    fb_03.pubseekoff(0, ios_base::cur);\n+    c1 = fb_03.sgetc();\n+    fb_03.pubsync(); \n+    c3 = fb_03.sgetc();\n+    VERIFY( c1 == c3 );\n+    //end\n+    // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n+    pt_2 = fb_03.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb_03.sputc('\\n');\n+    strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 28 );\n+    fb_03.pubseekoff(-1, ios_base::end);\n+    fb_03.sgetc();\n+    c1 = fb_03.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb_03.sgetc();\n+    fb_03.pubsync(); \n+    c3 = fb_03.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( fb_03.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d63524738675ac65325bec2f89ff0b11e199a551", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/4-io.cc", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F4-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F4-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F4-io.cc?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,122 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff-2.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  bool\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_03;\n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( fb_03.unbuffered() );\n+    // 27filebuf-3.txt = bd23456789:;<=>?...\n+    //beg\n+    strmsz_1 = fb_03.in_avail(); \n+    pt_1 = fb_03.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb_03.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb_03.snextc(); //current in pointer +1\n+    VERIFY( c1 == '9' );\n+    fb_03.pubseekoff(3, ios_base::beg);\n+    c2 = fb_03.sputc('\\n');  //current in pointer +1\n+    fb_03.pubseekoff(4, ios_base::beg);\n+    c3 = fb_03.sgetc();\n+    VERIFY( c2 != c3 ); \n+    VERIFY( c3 == '9' );\n+    fb_03.pubsync(); \n+    c1 = fb_03.sgetc();\n+    VERIFY( c1 == c3 );\n+    //cur\n+    // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n+    pt_2 = fb_03.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb_03.snextc(); //current in pointer +1\n+    VERIFY( c1 == '1' );\n+    fb_03.pubseekoff(0, ios_base::cur);\n+    c2 = fb_03.sputc('x');  //test current out pointer\n+    c3 = fb_03.sputc('\\n');\n+    fb_03.pubseekoff(0, ios_base::cur);\n+    c1 = fb_03.sgetc();\n+    fb_03.pubsync(); \n+    c3 = fb_03.sgetc();\n+    VERIFY( c1 == c3 );\n+    //end\n+    // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n+    pt_2 = fb_03.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb_03.sputc('\\n');\n+    strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 28 );\n+    fb_03.pubseekoff(-1, ios_base::end);\n+    fb_03.sgetc();\n+    c1 = fb_03.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb_03.sgetc();\n+    fb_03.pubsync(); \n+    c3 = fb_03.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( fb_03.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "cd4084fc85e12ad76ca07071365a402f8f002f5e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1.cc", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1.cc?ref=ca566e4c075bfec8b4c4aab9fb6d6707f0a63b5a", "patch": "@@ -1,127 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  using namespace std;\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::traits_type \ttraits_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  filebuf \t\t\t\tf_tmp;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  fb_03.open(name_01, ios_base::out | ios_base::in);\n-\n-  int_type c1;\n-  int_type c2;\n-  int_type c3;\n-\n-  // seekpos\n-  // pubseekpos(pos_type sp, ios_base::openmode)\n-  // alters the stream position to sp\n-  pos_type pt_1(off_type(-1));\n-  pos_type pt_2(off_type(0));\n-  off_type off_1 = 0;\n-  off_type off_2 = 0;\n-  //IN|OUT\n-  //beg\n-  pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n-  off_1 = pt_1;\n-  VERIFY( off_1 > 0 );\n-  c1 = fb_03.snextc(); \t\t//current in pointer +1\n-  VERIFY( c1 == 't' );\n-  c2 = fb_03.sputc('\\n');  \t//test current out pointer\n-  c3 = fb_03.sgetc();\n-  fb_03.pubsync(); \t\t//resets pointers\n-  pt_2 = fb_03.pubseekpos(pt_1);\n-  off_2 = pt_2;\n-  VERIFY( off_1 == off_2 );\n-  c3 = fb_03.snextc(); \t\t//current in pointer +1\n-  VERIFY( c2 == c3 );\n-  pt_1 = fb_03.pubseekoff(0, ios_base::end);\n-  off_1 = pt_1;\n-  VERIFY( off_1 > off_2 );\n-  fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n-  fb_03.pubsync();\n-\n-  // IN\n-  // OUT\n-\n-  // VIRTUALS (indirectly tested)\n-  // underflow\n-  // if read position avail, returns *gptr()\n-\n-  // pbackfail(int_type c)\n-  // put c back into input sequence\n-\n-  // overflow\n-  // appends c to output seq\n-\n-  // NB Have to close these suckers. . .\n-  // filebuf_type* close()\n-  fb_03.close();\n-  VERIFY( !fb_03.is_open() );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "097edb76b2abcdd253139af0d7d6ad067d0589de", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,98 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos-1.tst\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_03;\n+    fb_03.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb_03.snextc(); \t\t//current in pointer +1\n+    VERIFY( c1 == 't' );\n+    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n+    fb_03.pubseekpos(pt_3);\n+    c2 = fb_03.sputc('\\n');  \t//test current out pointer\n+    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n+    fb_03.pubseekpos(pt_3);\n+    c3 = fb_03.sgetc();\n+    fb_03.pubsync(); \t\t//resets pointers\n+    pt_2 = fb_03.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb_03.snextc(); \t\t//current in pointer +1\n+    VERIFY( c2 == c3 );\n+    pt_1 = fb_03.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb_03.pubsync();\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    fb_03.close();\n+    VERIFY( !fb_03.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "a1c72cfd6dc9e7487c7ee851f452590c71a3c021", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/4-io.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F4-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F4-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F4-io.cc?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,97 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos-2.tst\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_03;\n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( fb_03.unbuffered() );\n+    pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb_03.snextc(); \t\t//current in pointer +1\n+    VERIFY( c1 == 't' );\n+    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n+    fb_03.pubseekpos(pt_3);\n+    c2 = fb_03.sputc('\\n');  \t//test current out pointer\n+    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n+    fb_03.pubseekpos(pt_3);\n+    c3 = fb_03.sgetc();\n+    fb_03.pubsync(); \t\t//resets pointers\n+    pt_2 = fb_03.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb_03.snextc(); \t\t//current in pointer +1\n+    VERIFY( c2 == c3 );\n+    pt_1 = fb_03.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb_03.pubsync();\n+    VERIFY( fb_03.unbuffered() );\n+    fb_03.close();\n+    VERIFY( !fb_03.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "ca300cedbd1fc6709b27d2ef0ac5eba243e1dc51", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -54,6 +54,7 @@ void test01()\n     VERIFY( !fb_01.read_position() );\n     strmsz_1 = fb_01.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n     strmsz_2 = fb_01.sputn(\", i wanna reach out and\", 10);\n+    fb_01.pubseekoff(0, std::ios_base::cur);\n     c1 = fb_01.sgetc(); // -1\n     c2 = fb_01.sputbackc('z');\n     strmsz_2 = fb_01.in_avail();\n@@ -63,9 +64,9 @@ void test01()\n     VERIFY( 1 == strmsz_2 );\n     //test for _in_cur == _in_beg\n     // fb_01._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n-    fb_01.pubseekoff(10, std::ios_base::beg, \n-\t\t   std::ios_base::in | std::ios_base::out);\n+    fb_01.pubseekoff(10, std::ios_base::beg);\n     fb_01.sputc('m');\n+    fb_01.pubseekoff(0, std::ios_base::cur);\n     strmsz_1 = fb_01.in_avail(); \n     c1 = fb_01.sgetc(); \n     fb_01.snextc();\n@@ -78,9 +79,11 @@ void test01()\n     VERIFY( c2 == 'z' );\n     // test for replacing char with identical one\n     fb_01.snextc();\n+    fb_01.pubseekoff(0, std::ios_base::cur);\n     fb_01.sputc('u');\n     fb_01.sputc('v');\n     fb_01.sputc('a');\n+    fb_01.pubseekoff(0, std::ios_base::end);\n     strmsz_1 = fb_01.in_avail();\n     c2 = fb_01.sputbackc('a');\n     strmsz_2 = fb_01.in_avail();"}, {"sha": "093c663db3aaad94b618e26989d3cc07468ae9a8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/2-io.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-io.cc?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -54,6 +54,7 @@ void test01()\n     VERIFY( fb_01.unbuffered() );\n     strmsz_1 = fb_01.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n     strmsz_2 = fb_01.sputn(\", i wanna reach out and\", 10);\n+    fb_01.pubseekoff(0, std::ios_base::cur);\n     c1 = fb_01.sgetc(); // -1\n     c2 = fb_01.sputbackc('z');\n     strmsz_2 = fb_01.in_avail();\n@@ -63,9 +64,9 @@ void test01()\n     VERIFY( 1 == strmsz_2 );\n     //test for _in_cur == _in_beg\n     // fb_01._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n-    fb_01.pubseekoff(10, std::ios_base::beg, \n-\t\t   std::ios_base::in | std::ios_base::out);\n+    fb_01.pubseekoff(10, std::ios_base::beg);\n     fb_01.sputc('m');\n+    fb_01.pubseekoff(0, std::ios_base::cur);\n     strmsz_1 = fb_01.in_avail(); \n     c1 = fb_01.sgetc(); \n     fb_01.snextc();\n@@ -78,15 +79,17 @@ void test01()\n     VERIFY( c2 == 'z' );\n     // test for replacing char with identical one\n     fb_01.snextc();\n+    fb_01.pubseekoff(0, std::ios_base::cur);\n     fb_01.sputc('u');\n     fb_01.sputc('v');\n     fb_01.sputc('a');\n+    fb_01.pubseekoff(0, std::ios_base::end);\n     strmsz_1 = fb_01.in_avail();\n     c2 = fb_01.sputbackc('a');\n     strmsz_2 = fb_01.in_avail();\n     c3 = fb_01.sgetc();\n     VERIFY( c3 == c2 );\n-    VERIFY( strmsz_1 == strmsz_2 );\n+    VERIFY( strmsz_1 + 1 == strmsz_2 );\n     VERIFY( fb_01.unbuffered() );\n   }\n }"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff-1.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1.tst?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff-2.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2.tst?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos-1.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1.tst?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos-2.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24293523ef9e1deb47edfd87349d0724d6cd04/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2.tst?ref=ed24293523ef9e1deb47edfd87349d0724d6cd04", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}]}