{"sha": "c159ffe7060983000c4cd595318fc08c3983db66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1OWZmZTcwNjA5ODMwMDBjNGNkNTk1MzE4ZmMwOGMzOTgzZGI2Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-10-29T21:41:48Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-10-29T21:41:48Z"}, "message": "fold-const.c (fold_comparison): Fold ~X op ~Y as Y op X.\n\n\n\t* fold-const.c (fold_comparison): Fold ~X op ~Y as Y op X.\n\tFold ~X op C as X op' ~C, where op' is the swapped comparison.\n\t(fold_binary): ~X eq/ne C is now handled in fold_comparison.\n\tFold -X eq/ne -Y as X eq/ne Y.\n\n\t* gcc.dg/fold-compare-1.c: New test case.\n\nFrom-SVN: r118158", "tree": {"sha": "f4d6cffd55adc058d815562150ef8f07f2e13b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4d6cffd55adc058d815562150ef8f07f2e13b87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c159ffe7060983000c4cd595318fc08c3983db66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c159ffe7060983000c4cd595318fc08c3983db66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c159ffe7060983000c4cd595318fc08c3983db66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c159ffe7060983000c4cd595318fc08c3983db66/comments", "author": null, "committer": null, "parents": [{"sha": "153ae66aeea1d7b38af1cf77a4107db5964a759a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153ae66aeea1d7b38af1cf77a4107db5964a759a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153ae66aeea1d7b38af1cf77a4107db5964a759a"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "1a5c2cf91a0450cd7d09b93c348b0fb915d37b54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c159ffe7060983000c4cd595318fc08c3983db66", "patch": "@@ -1,3 +1,10 @@\n+2006-10-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_comparison): Fold ~X op ~Y as Y op X.\n+\tFold ~X op C as X op' ~C, where op' is the swapped comparison.\n+\t(fold_binary): ~X eq/ne C is now handled in fold_comparison.\n+\tFold -X eq/ne -Y as X eq/ne Y.\n+\n 2006-10-29  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.md (mul<mode>3): Check ISA_HAS_MUL3 rather than"}, {"sha": "a822abdce90520532705c7cda76d817d7ea99f04", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c159ffe7060983000c4cd595318fc08c3983db66", "patch": "@@ -8360,6 +8360,20 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \treturn tem;\n     }\n \n+  /* Fold ~X op ~Y as Y op X.  */\n+  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+      && TREE_CODE (arg1) == BIT_NOT_EXPR)\n+    return fold_build2 (code, type,\n+\t\t\tTREE_OPERAND (arg1, 0),\n+\t\t\tTREE_OPERAND (arg0, 0));\n+\n+  /* Fold ~X op C as X op' ~C, where op' is the swapped comparison.  */\n+  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+      && TREE_CODE (arg1) == INTEGER_CST)\n+    return fold_build2 (swap_tree_comparison (code), type,\n+\t\t\tTREE_OPERAND (arg0, 0),\n+\t\t\tfold_build1 (BIT_NOT_EXPR, TREE_TYPE (arg1), arg1));\n+\n   return NULL_TREE;\n }\n \n@@ -10426,13 +10440,6 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n           && code == EQ_EXPR)\n         return fold_build1 (TRUTH_NOT_EXPR, type, arg0);\n \n-      /*  ~a != C becomes a != ~C where C is a constant.  Likewise for ==.  */\n-      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST)\n-\treturn fold_build2 (code, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    fold_build1 (BIT_NOT_EXPR, TREE_TYPE (arg1), \n-\t\t\t\t\t arg1));\n-\n       /* If this is an equality comparison of the address of a non-weak\n \t object against zero, then we know the result.  */\n       if (TREE_CODE (arg0) == ADDR_EXPR\n@@ -10798,6 +10805,14 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  tree res = constant_boolean_node (code==NE_EXPR, type);\n \t  return omit_one_operand (type, res, arg0);\n \t}\n+\n+      /* Fold -X op -Y as X op Y, where op is eq/ne.  */\n+      if (TREE_CODE (arg0) == NEGATE_EXPR\n+          && TREE_CODE (arg1) == NEGATE_EXPR)\n+\treturn fold_build2 (code, type,\n+\t\t\t    TREE_OPERAND (arg0, 0),\n+\t\t\t    TREE_OPERAND (arg1, 0));\n+\n       return NULL_TREE;\n \n     case LT_EXPR:"}, {"sha": "bec0930032749e3a60275562a80ba3e273968d30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c159ffe7060983000c4cd595318fc08c3983db66", "patch": "@@ -1,3 +1,7 @@\n+2006-10-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/fold-compare-1.c: New test case.\n+\n 2006-10-29  Dirk Mueller  <dmueller@suse.de>\n \n \tPR c++/16307"}, {"sha": "485d5f584379b953bb91f26a9cffdc57c7034806", "filename": "gcc/testsuite/gcc.dg/fold-compare-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c159ffe7060983000c4cd595318fc08c3983db66/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-1.c?ref=c159ffe7060983000c4cd595318fc08c3983db66", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return ~a == ~b;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return -c == -d;\n+}\n+\n+int test3(int e)\n+{\n+  return -e == 5;\n+}\n+\n+int test4(int f)\n+{\n+  return ~f == 5;\n+}\n+\n+int test5(int g, int h)\n+{\n+  return ~g < ~h;\n+}\n+\n+int test6(int i, int j)\n+{\n+  return ~i >= ~j;\n+}\n+\n+int test7(int k)\n+{\n+  return ~k < 3;\n+}\n+\n+int test8(int l)\n+{\n+  return ~l >= 2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"b == a\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"c == d\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"e == -5\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"f == -6\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"h < g\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"j >= i\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"k > -4\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"l <= -3\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}