{"sha": "29401b7b4581e9131e7057e263dcea8b40a6b5ab", "node_id": "C_kwDOANBUbNoAKDI5NDAxYjdiNDU4MWU5MTMxZTcwNTdlMjYzZGNlYThiNDBhNmI1YWI", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-01-11T21:06:10Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-01-15T21:33:00Z"}, "message": "Fortran: fix ICE and wrong code with TRANSFER and CHARACTER(kind=4)\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/83079\n\t* target-memory.c (gfc_interpret_character): Result length is\n\tin bytes and thus depends on the character kind.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Compute correct\n\tstring length for the result of the TRANSFER intrinsic and for\n\ttemporaries for the different character kinds.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/83079\n\t* gfortran.dg/transfer_char_kind4.f90: New test.", "tree": {"sha": "917d638c4ccbbc5954b59edb18a6967f74d49ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/917d638c4ccbbc5954b59edb18a6967f74d49ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29401b7b4581e9131e7057e263dcea8b40a6b5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29401b7b4581e9131e7057e263dcea8b40a6b5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29401b7b4581e9131e7057e263dcea8b40a6b5ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29401b7b4581e9131e7057e263dcea8b40a6b5ab/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d28210389ff3d4af8f20db4db1f0d58b0f8eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d28210389ff3d4af8f20db4db1f0d58b0f8eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d28210389ff3d4af8f20db4db1f0d58b0f8eff"}], "stats": {"total": 134, "additions": 130, "deletions": 4}, "files": [{"sha": "9b5af8d1482c9446a95259810a615b064848a617", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29401b7b4581e9131e7057e263dcea8b40a6b5ab/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29401b7b4581e9131e7057e263dcea8b40a6b5ab/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=29401b7b4581e9131e7057e263dcea8b40a6b5ab", "patch": "@@ -485,7 +485,7 @@ gfc_interpret_character (unsigned char *buffer, size_t buffer_size,\n \n   result->value.character.string[result->value.character.length] = '\\0';\n \n-  return result->value.character.length;\n+  return size_character (result->value.character.length, result->ts.kind);\n }\n \n "}, {"sha": "a7cbbebdd6fa53579a9dbf562bccea7ae54c253b", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29401b7b4581e9131e7057e263dcea8b40a6b5ab/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29401b7b4581e9131e7057e263dcea8b40a6b5ab/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=29401b7b4581e9131e7057e263dcea8b40a6b5ab", "patch": "@@ -8533,7 +8533,8 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n     {\n     case BT_CHARACTER:\n       tmp = size_of_string_in_bytes (arg->expr->ts.kind, argse.string_length);\n-      mold_type = gfc_get_character_type_len (arg->expr->ts.kind, tmp);\n+      mold_type = gfc_get_character_type_len (arg->expr->ts.kind,\n+\t\t\t\t\t      argse.string_length);\n       break;\n     case BT_CLASS:\n       tmp = gfc_class_vtab_size_get (argse.expr);\n@@ -8635,7 +8636,13 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \n   se->expr = info->descriptor;\n   if (expr->ts.type == BT_CHARACTER)\n-    se->string_length = fold_convert (gfc_charlen_type_node, dest_word_len);\n+    {\n+      tmp = fold_convert (gfc_charlen_type_node,\n+\t\t\t  TYPE_SIZE_UNIT (gfc_get_char_type (expr->ts.kind)));\n+      se->string_length = fold_build2_loc (input_location, TRUNC_DIV_EXPR,\n+\t\t\t\t\t   gfc_charlen_type_node,\n+\t\t\t\t\t   dest_word_len, tmp);\n+    }\n \n   return;\n \n@@ -8689,7 +8696,11 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n       gfc_add_expr_to_block (&se->post, tmp);\n \n       se->expr = tmpdecl;\n-      se->string_length = fold_convert (gfc_charlen_type_node, dest_word_len);\n+      tmp = fold_convert (gfc_charlen_type_node,\n+\t\t\t  TYPE_SIZE_UNIT (gfc_get_char_type (expr->ts.kind)));\n+      se->string_length = fold_build2_loc (input_location, TRUNC_DIV_EXPR,\n+\t\t\t\t\t   gfc_charlen_type_node,\n+\t\t\t\t\t   dest_word_len, tmp);\n     }\n   else\n     {"}, {"sha": "5f1fe6913182c6e31fb4b9b3b63fa498b4c7f6b4", "filename": "gcc/testsuite/gfortran.dg/transfer_char_kind4.f90", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29401b7b4581e9131e7057e263dcea8b40a6b5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_char_kind4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29401b7b4581e9131e7057e263dcea8b40a6b5ab/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_char_kind4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_char_kind4.f90?ref=29401b7b4581e9131e7057e263dcea8b40a6b5ab", "patch": "@@ -0,0 +1,115 @@\n+! { dg-do run }\n+! PR fortran/83079 - ICE and wrong code with TRANSFER and character(kind=4)\n+! Exercise TRANSFER intrinsic to check character result length and shape\n+\n+program p\n+  implicit none\n+  character(len=*,kind=4), parameter :: a = 4_'ABCDEF'\n+  character(len=6,kind=4)            :: b = 4_'abcdef'\n+  character(len=*,kind=4), parameter :: c = 4_'XY'\n+  character(len=2,kind=4)            :: d = 4_'xy'\n+  integer :: k, l\n+  k = len (a)\n+  l = len (c)\n+\n+! print *, transfer(4_'xy', [4_'a'])\n+\n+  ! TRANSFER with rank-0 result\n+  call chk0 (transfer (4_'ABCD', 4_'XY'), 2, 1)\n+  call chk0 (transfer (4_'ABCD', c     ), l, 2)\n+  call chk0 (transfer (4_'ABCD', d     ), l, 3)\n+  call chk0 (transfer (a       , 4_'XY'), 2, 4)\n+  call chk0 (transfer (a       , c     ), l, 5)\n+  call chk0 (transfer (a       , d     ), l, 6)\n+  call chk0 (transfer (b       , 4_'XY'), 2, 7)\n+  call chk0 (transfer (b       , c     ), l, 8)\n+  call chk0 (transfer (b       , d     ), l, 9)\n+\n+  call chk0 (transfer ([4_'ABCD'], 4_'XY'), 2, 11)\n+  call chk0 (transfer ([4_'ABCD'], c     ), l, 12)\n+  call chk0 (transfer ([4_'ABCD'], d     ), l, 13)\n+  call chk0 (transfer ([a       ], 4_'XY'), 2, 14)\n+  call chk0 (transfer ([a       ], c     ), l, 15)\n+  call chk0 (transfer ([a       ], d     ), l, 16)\n+  call chk0 (transfer ([b       ], 4_'XY'), 2, 17)\n+  call chk0 (transfer ([b       ], c     ), l, 18)\n+  call chk0 (transfer ([b       ], d     ), l, 19)\n+\n+  ! TRANSFER with rank-1 result\n+  call chk1 (transfer (4_'ABCD', [4_'XY']), 2,   2, 21)\n+  call chk1 (transfer (4_'ABCD', [c]     ), 2,   2, 22)\n+  call chk1 (transfer (4_'ABCD', [d]     ), 2,   2, 23)\n+  call chk1 (transfer (a       , [4_'XY']), 2, k/2, 24)\n+  call chk1 (transfer (a       , [c]     ), l, k/l, 25)\n+  call chk1 (transfer (a       , [d]     ), l, k/l, 26)\n+  call chk1 (transfer (b       , [4_'XY']), 2, k/2, 27)\n+  call chk1 (transfer (b       , [c]     ), l, k/l, 28)\n+  call chk1 (transfer (b       , [d]     ), l, k/l, 29)\n+\n+  call chk1 (transfer (4_'ABCD', 4_'XY',size=2), 2, 2, 31)\n+  call chk1 (transfer (4_'ABCD', c     ,size=2), 2, 2, 32)\n+  call chk1 (transfer (4_'ABCD', d     ,size=2), 2, 2, 33)\n+  call chk1 (transfer (a       , 4_'XY',size=3), 2, 3, 34)\n+  call chk1 (transfer (a       , c     ,size=3), l, 3, 35)\n+  call chk1 (transfer (a       , d     ,size=3), l, 3, 36)\n+  call chk1 (transfer (b       , 4_'XY',size=3), 2, 3, 37)\n+  call chk1 (transfer (b       , c     ,size=3), l, 3, 38)\n+  call chk1 (transfer (b       , d     ,size=3), l, 3, 39)\n+\n+  call chk1 (transfer (4_'ABCD', [4_'XY'],size=2), 2, 2, 41)\n+  call chk1 (transfer (4_'ABCD', [c]     ,size=2), 2, 2, 42)\n+  call chk1 (transfer (4_'ABCD', [d]     ,size=2), 2, 2, 43)\n+  call chk1 (transfer (a       , [4_'XY'],size=3), 2, 3, 44)\n+  call chk1 (transfer (a       , [c]     ,size=3), l, 3, 45)\n+  call chk1 (transfer (a       , [d]     ,size=3), l, 3, 46)\n+  call chk1 (transfer (b       , [4_'XY'],size=3), 2, 3, 47)\n+  call chk1 (transfer (b       , [c]     ,size=3), l, 3, 48)\n+  call chk1 (transfer (b       , [d]     ,size=3), l, 3, 49)\n+\n+  call chk1 (transfer ([4_'ABCD'], [4_'XY']), 2,   2, 51)\n+  call chk1 (transfer ([4_'ABCD'], [c]     ), 2,   2, 52)\n+  call chk1 (transfer ([4_'ABCD'], [d]     ), 2,   2, 53)\n+  call chk1 (transfer ([a       ], [4_'XY']), 2, k/2, 54)\n+  call chk1 (transfer ([a       ], [c]     ), l, k/l, 55)\n+  call chk1 (transfer ([a       ], [d]     ), l, k/l, 56)\n+  call chk1 (transfer ([b       ], [4_'XY']), 2, k/2, 57)\n+  call chk1 (transfer ([b       ], [c]     ), l, k/l, 58)\n+  call chk1 (transfer ([b       ], [d]     ), l, k/l, 59)\n+\n+  call chk1 (transfer (4_'ABCD', c     ,size=4/l), l, 4/l, 62)\n+  call chk1 (transfer (4_'ABCD', d     ,size=4/l), l, 4/l, 63)\n+  call chk1 (transfer (a       , 4_'XY',size=k/2), 2, k/2, 64)\n+  call chk1 (transfer (a       , c     ,size=k/l), l, k/l, 65)\n+  call chk1 (transfer (a       , d     ,size=k/l), l, k/l, 66)\n+  call chk1 (transfer (b       , 4_'XY',size=k/2), 2, k/2, 67)\n+  call chk1 (transfer (b       , c     ,size=k/l), l, k/l, 68)\n+  call chk1 (transfer (b       , d     ,size=k/l), l, k/l, 69)\n+\n+contains\n+  ! Validate rank-0 result\n+  subroutine chk0 (str, l, stopcode)\n+    character(kind=4,len=*), intent(in) :: str\n+    integer,                 intent(in) :: l, stopcode\n+    integer :: i, p\n+    i = len  (str)\n+    p = verify (str, a // b) ! Check for junk characters\n+    if (i /= l .or. p > 0) then\n+       print *, stopcode, \"len=\", i, i == l, \">\", str, \"<\"\n+       stop stopcode\n+    end if\n+  end subroutine chk0\n+\n+  ! Validate rank-1 result\n+  subroutine chk1 (str, l, m, stopcode)\n+    character(kind=4,len=*), intent(in) :: str(:)\n+    integer,                 intent(in) :: l, m, stopcode\n+    integer :: i, j, p\n+    i = len  (str)\n+    j = size (str)\n+    p = maxval (verify (str, a // b)) ! Check for junk characters\n+    if (i /= l .or. j /= m .or. p > 0) then\n+       print *, stopcode, \"len=\", i, i == l, \"size=\", j, j == m, \">\", str, \"<\"\n+       stop stopcode\n+    end if\n+  end subroutine chk1\n+end"}]}