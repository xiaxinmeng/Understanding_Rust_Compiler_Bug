{"sha": "f55e699d3dac1e2764920fa32bee16bfe5313ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1ZTY5OWQzZGFjMWUyNzY0OTIwZmEzMmJlZTE2YmZlNTMxM2ZmMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-11-11T17:08:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-11-11T17:08:51Z"}, "message": "Loop in std::this_thread sleep functions\n\n\tPR libstdc++/60421\n\t* include/std/thread (this_thread::sleep_for): Retry on EINTR.\n\t(this_thread::sleep_until): Retry if time not reached.\n\t* src/c++11/thread.cc (__sleep_for): Retry on EINTR.\n\t* testsuite/30_threads/this_thread/60421.cc: Test interruption and\n\tnon-steady clocks.\n\nFrom-SVN: r230183", "tree": {"sha": "8a635d744d2c9f5e16d9c2d156fd9421a58463f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a635d744d2c9f5e16d9c2d156fd9421a58463f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f55e699d3dac1e2764920fa32bee16bfe5313ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55e699d3dac1e2764920fa32bee16bfe5313ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f55e699d3dac1e2764920fa32bee16bfe5313ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55e699d3dac1e2764920fa32bee16bfe5313ff2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83e226207d9458396a3a5cf9a1eb2a0092497bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e226207d9458396a3a5cf9a1eb2a0092497bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83e226207d9458396a3a5cf9a1eb2a0092497bb"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "aba4f7e2612ab5eb12e0cb4201884b0fb741837c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f55e699d3dac1e2764920fa32bee16bfe5313ff2", "patch": "@@ -1,3 +1,12 @@\n+2015-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60421\n+\t* include/std/thread (this_thread::sleep_for): Retry on EINTR.\n+\t(this_thread::sleep_until): Retry if time not reached.\n+\t* src/c++11/thread.cc (__sleep_for): Retry on EINTR.\n+\t* testsuite/30_threads/this_thread/60421.cc: Test interruption and\n+\tnon-steady clocks.\n+\n 2015-11-11  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tLWG 2510, make the default constructors of library tag types"}, {"sha": "5940e6e521f97627c9a8d948d433927d5f089ba6", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=f55e699d3dac1e2764920fa32bee16bfe5313ff2", "patch": "@@ -297,7 +297,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t    static_cast<std::time_t>(__s.count()),\n \t    static_cast<long>(__ns.count())\n \t  };\n-\t::nanosleep(&__ts, 0);\n+\twhile (::nanosleep(&__ts, &__ts) == -1 && errno == EINTR)\n+\t  { }\n #else\n \t__sleep_for(__s, __ns);\n #endif\n@@ -309,8 +310,17 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n \tauto __now = _Clock::now();\n-\tif (__now < __atime)\n-\t  sleep_for(__atime - __now);\n+\tif (_Clock::is_steady)\n+\t  {\n+\t    if (__now < __atime)\n+\t      sleep_for(__atime - __now);\n+\t    return;\n+\t  }\n+\twhile (__now < __atime)\n+\t  {\n+\t    sleep_for(__atime - __now);\n+\t    __now = _Clock::now();\n+\t  }\n       }\n \n   _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3407e80a0a3a0430608959e1e7b91f50c105e0b1", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=f55e699d3dac1e2764920fa32bee16bfe5313ff2", "patch": "@@ -221,7 +221,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic_cast<std::time_t>(__s.count()),\n \tstatic_cast<long>(__ns.count())\n       };\n-    ::nanosleep(&__ts, 0);\n+    while (::nanosleep(&__ts, &__ts) == -1 && errno == EINTR)\n+      { }\n #elif defined(_GLIBCXX_HAVE_SLEEP)\n # ifdef _GLIBCXX_HAVE_USLEEP\n     ::sleep(__s.count());"}, {"sha": "5dbf257ac58b446f15cb7ec0f2b1b6c3f90bbc92", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/60421.cc", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F60421.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55e699d3dac1e2764920fa32bee16bfe5313ff2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F60421.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F60421.cc?ref=f55e699d3dac1e2764920fa32bee16bfe5313ff2", "patch": "@@ -15,24 +15,84 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++11\" }\n+// { dg-do run { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* *-*-solaris* *-*-cygwin *-*-rtems* *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++11 -pthread\" { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n // { dg-require-time \"\" }\n \n #include <thread>\n #include <chrono>\n+#include <atomic>\n+#include <cstdint>\n+#include <signal.h>\n #include <testsuite_hooks.h>\n \n void\n test01()\n {\n   std::this_thread::sleep_for(std::chrono::seconds(0));\n   std::this_thread::sleep_for(std::chrono::seconds(-1));\n-  std::this_thread::sleep_for(std::chrono::duration<uint64_t>::zero());\n+  std::this_thread::sleep_for(std::chrono::duration<std::uint64_t>::zero());\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // test interruption of this_thread::sleep_for() by a signal\n+  struct sigaction sa{ };\n+  sa.sa_handler = +[](int) { };\n+  sigaction(SIGUSR1, &sa, 0);\n+  bool result = false;\n+  std::atomic<bool> sleeping{false};\n+  std::thread t([&result, &sleeping] {\n+    auto start = std::chrono::system_clock::now();\n+    auto time = std::chrono::seconds(3);\n+    sleeping = true;\n+    std::this_thread::sleep_for(time);\n+    result = std::chrono::system_clock::now() >= (start + time);\n+  });\n+  while (!sleeping) { }\n+  std::this_thread::sleep_for(std::chrono::milliseconds(500));\n+  pthread_kill(t.native_handle(), SIGUSR1);\n+  t.join();\n+  VERIFY( result );\n+}\n+\n+struct slow_clock\n+{\n+  using rep = std::chrono::system_clock::rep;\n+  using period = std::chrono::system_clock::period;\n+  using duration = std::chrono::system_clock::duration;\n+  using time_point = std::chrono::time_point<slow_clock, duration>;\n+  static constexpr bool is_steady = false;\n+\n+  static time_point now()\n+  {\n+    auto real = std::chrono::system_clock::now();\n+    return time_point{real.time_since_epoch() / 2};\n+  }\n+};\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // test that this_thread::sleep_until() handles clock adjustments\n+  auto when = slow_clock::now() + std::chrono::seconds(2);\n+  std::this_thread::sleep_until(when);\n+  VERIFY( slow_clock::now() >= when );\n }\n \n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}]}