{"sha": "0bad3b7c49882a3aa38510a406c8df9e9420439a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhZDNiN2M0OTg4MmEzYWEzODUxMGE0MDZjOGRmOWU5NDIwNDM5YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-16T16:20:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-16T16:20:28Z"}, "message": "1.cc: Split and fix for missing seeks between gets and puts into...\n\n2003-06-16  Paolo Carlini  <pcarlini@unitus.it>\n\n        * testsuite/27_io/basic_filebuf/sungetc/char/1.cc: Split and\n        fix for missing seeks between gets and puts into...\n\t* testsuite/27_io/basic_filebuf/sungetc/char/1-in.cc: New.\n        * testsuite/27_io/basic_filebuf/sungetc/char/1-io.cc: New.\n        * testsuite/27_io/basic_filebuf/sungetc/char/1-out.cc: New.\n        * testsuite/27_io/basic_filebuf/sungetc/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sungetc/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sungetc/char/2-out.cc: New.\n\nFrom-SVN: r68021", "tree": {"sha": "9cfdee7925bc650f0458fa684367ca39e2716f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cfdee7925bc650f0458fa684367ca39e2716f54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bad3b7c49882a3aa38510a406c8df9e9420439a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bad3b7c49882a3aa38510a406c8df9e9420439a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bad3b7c49882a3aa38510a406c8df9e9420439a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bad3b7c49882a3aa38510a406c8df9e9420439a/comments", "author": null, "committer": null, "parents": [{"sha": "bce75972044133863dac444afa40fb2c464aa500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce75972044133863dac444afa40fb2c464aa500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce75972044133863dac444afa40fb2c464aa500"}], "stats": {"total": 638, "additions": 460, "deletions": 178}, "files": [{"sha": "1620cf4dd2abb3df22ff278926693ddbc239211b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -1,3 +1,14 @@\n+2003-06-16  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/1.cc: Split and\n+        fix for missing seeks between gets and puts into...\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/2-out.cc: New.\n+\t\t\n 2003-06-15  Richard Henderson  <rth@redhat.com>\n \n \t* config/linker-map.gnu: Export virtual function thunks for"}, {"sha": "bf753cabcb6b16e204867e09cdd4967f2647799c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1-in.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-in.cc?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\t        c1, c2, c3;\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+\n+  // in\n+  {\n+    constraint_filebuf fb_01;\n+    fb_01.open(name_01, ios::in);\n+    VERIFY( !fb_01.write_position() );\n+    c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sungetc();\n+    VERIFY( c2 == c1 );\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    fb_01.pubseekoff(2, ios_base::beg, ios_base::in);\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == ' ' );\n+    c2 = fb_01.sungetc();\n+    VERIFY( c2 == traits_type::not_eof(traits_type::eof()) );\n+    VERIFY( !fb_01.write_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "38819b6ba1987f6b8505fe868561f5dab818c540", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1-io.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-io.cc?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -0,0 +1,83 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sungetc_1io.tst\"; // empty file, need to create\n+\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\tsize_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+    fb_01.sputc('u');\n+    fb_01.sputc('v');\n+    fb_01.pubseekoff(-1, std::ios_base::end);\n+    c3 = fb_01.sbumpc();\n+    strmsz_1 = fb_01.in_avail();\n+    c2 = fb_01.sungetc(); \n+    strmsz_2 = fb_01.in_avail();\n+    VERIFY( c2 == 'v' ); //  VERIFY( c2 != traits_type::eof() );\n+    VERIFY( strmsz_1 + 1 == strmsz_2 );\n+    //test for _in_cur == _in_end\n+    fb_01.pubseekoff(0, std::ios_base::end);\n+    strmsz_1 = fb_01.in_avail(); // -1 cuz at the end\n+    c1 = fb_01.sgetc(); \n+    c2 = fb_01.sungetc();\n+    strmsz_2 = fb_01.in_avail(); // 1\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 != c2 );\n+    VERIFY( strmsz_2 != strmsz_1 );\n+    VERIFY( strmsz_2 == 1 );\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f7d78312420afb4cff3a09314c55afa0f1cfcf34", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1-out.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-out.cc?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -0,0 +1,70 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sungetc_1out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+\n+  // out\n+  {\n+    constraint_filebuf fb_01; // out\n+    fb_01.open(name_01, ios::out | ios::trunc);    \n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == traits_type::eof() );\n+    c2 = fb_01.sungetc();\n+    VERIFY( c2 == traits_type::eof() );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sungetc();\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "201217ea00aa41bbd533fe1d869a3674caa92c3a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1.cc", "status": "removed", "additions": 0, "deletions": 178, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce75972044133863dac444afa40fb2c464aa500/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce75972044133863dac444afa40fb2c464aa500/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1.cc?ref=bce75972044133863dac444afa40fb2c464aa500", "patch": "@@ -1,178 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  typedef std::filebuf::int_type \tint_type;\n-  typedef std::filebuf::traits_type \ttraits_type;\n-  typedef std::filebuf::pos_type \tpos_type;\n-  typedef std::filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  std::filebuf \t\t\t\tf_tmp;\n-  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  fb_01.open(name_01, std::ios_base::in);\n-  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-\n-  // PUT\n-  strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n-  strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n-  strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n-  strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n-\n-  // PUTBACK\n-  // int_type pbfail(int_type c)\n-  // called when gptr() null, gptr() == eback(), or traits::eq(*gptr, c) false\n-  // \"pending sequence\" is:\n-  //\t1) everything as defined in underflow\n-  // \t2) + if (traits::eq_int_type(c, traits::eof()), then input\n-  // \tsequence is backed up one char before the pending sequence is\n-  // \tdetermined.\n-  //\t3) + if (not 2) then c is prepended. Left unspecified is\n-  //\twhether the input sequence is backedup or modified in any way\n-  // returns traits::eof() for failure, unspecified other value for success\n-\n-  // int_type sputbackc(char_type c)\n-  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n-  // otherwise decrements in_cur and returns *gptr()\n-  c1 = fb_03.sgetc(); // -1\n-  c2 = fb_03.sputbackc('z');\n-  strmsz_2 = fb_03.in_avail();\n-  c3 = fb_03.sgetc();\n-  //test for _in_cur == _in_beg\n-  // fb_03._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n-  fb_03.pubseekoff(10, std::ios_base::beg, \n-\t\t   std::ios_base::in | std::ios_base::out);\n-  fb_03.sputc('m');\n-  strmsz_1 = fb_03.in_avail(); \n-  c1 = fb_03.sgetc(); \n-  fb_03.snextc();\n-  c2 = fb_03.sputbackc('z');  \n-  strmsz_2 = fb_03.in_avail(); \n-  c3 = fb_03.sgetc();  \n-  fb_03.snextc();\n-  fb_03.sputc('u');\n-  fb_03.sputc('v');\n-  fb_03.sputc('a');\n-  strmsz_1 = fb_03.in_avail();\n-  c2 = fb_03.sputbackc('a');\n-  strmsz_2 = fb_03.in_avail();\n-  c3 = fb_03.sgetc();\n-  //test for ios_base::out\n-  c1 = fb_02.sgetc(); // undefined\n-  c2 = fb_02.sputbackc('a');\n-\n-  // int_type sungetc()\n-  // if in_cur not avail, return pbackfail(), else decrement and\n-  // return to_int_type(*gptr())\n-  // fb_03._M_out_beg = \"uvaacadabras, i wannaZ[\\\\]^_`abcdefghijkl\"\n-  // fb_03._M_out_cur = \"aacadabras, i wannaZ[\\\\]^_`abcdefghijkl\"\n-  strmsz_1 = fb_03.in_avail();\n-  c2 = fb_03.sungetc(); // delete the 'a'\n-  strmsz_2 = fb_03.in_avail();\n-  VERIFY( c2 == 'v' ); //  VERIFY( c2 != traits_type::eof() );\n-  VERIFY( strmsz_1 + 1 == strmsz_2 );\n-  //test for _in_cur == _in_beg\n-  for (int i = 50; i < 32 + 29; ++i)\n-    fb_02.sputc(char(i));\n-  fb_02.pubseekoff(0, std::ios_base::beg, std::ios_base::out);\n-  c1 = fb_02.sgetc(); \n-  strmsz_1 = fb_02.in_avail();\n-  c2 = fb_02.sungetc();\n-  c3 = fb_02.sgetc();\n-  strmsz_2 = fb_02.in_avail();\n-  VERIFY( c1 == c2 );\n-  VERIFY( c2 == c3 );\n-  VERIFY( c1 == traits_type::eof() );\n-  VERIFY( strmsz_1 == strmsz_2 );\n-  //test for _in_cur == _in_end\n-  fb_03.pubseekoff(0, std::ios_base::end);\n-  strmsz_1 = fb_03.in_avail(); // -1 cuz at the end\n-  c1 = fb_03.sgetc(); \n-  c2 = fb_03.sungetc();\n-  strmsz_2 = fb_03.in_avail(); // 1\n-  c3 = fb_03.sgetc();\n-  VERIFY( c1 != c2 );\n-  // VERIFY( c2 == c3 || c2 == traits_type::not_eof(int(c3)) );\n-  VERIFY( strmsz_2 != strmsz_1 );\n-  VERIFY( strmsz_2 == 1 );\n-  //test for ios_base::out\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "e0814fdddc0ef527208b20f019dacfe842974d6f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/2-in.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-in.cc?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -0,0 +1,72 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\t        c1, c2, c3;\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+\n+  // in\n+  {\n+    constraint_filebuf fb_01;\n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios::in);\n+    VERIFY( fb_01.unbuffered() );\n+    c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sungetc();\n+    VERIFY( c2 == c1 );\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    fb_01.pubseekoff(2, ios_base::beg, ios_base::in);\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == ' ' );\n+    c2 = fb_01.sungetc();\n+    VERIFY( c2 == traits_type::not_eof(traits_type::eof()) );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "24d015c90e7f11185247af5f7df3e0e4b5ac941e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/2-io.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-io.cc?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -0,0 +1,82 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sungetc_2io.tst\"; // empty file, need to create\n+\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\tsize_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_01;\n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_01.unbuffered() );\n+    fb_01.sputc('u');\n+    fb_01.sputc('v');\n+    fb_01.pubseekoff(-1, std::ios_base::end);\n+    c3 = fb_01.sbumpc();\n+    strmsz_1 = fb_01.in_avail();\n+    c2 = fb_01.sungetc(); \n+    strmsz_2 = fb_01.in_avail();\n+    VERIFY( c2 == 'v' ); //  VERIFY( c2 != traits_type::eof() );\n+    VERIFY( strmsz_1 + 1 == strmsz_2 );\n+    //test for _in_cur == _in_end\n+    fb_01.pubseekoff(0, std::ios_base::end);\n+    strmsz_1 = fb_01.in_avail(); // -1 cuz at the end\n+    c1 = fb_01.sgetc(); \n+    c2 = fb_01.sungetc();\n+    strmsz_2 = fb_01.in_avail(); // 1\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 != c2 );\n+    VERIFY( strmsz_2 != strmsz_1 );\n+    VERIFY( strmsz_2 == 1 );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d6cd79f5c6e720fbda49ec57bbb97cc004784cce", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/2-out.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bad3b7c49882a3aa38510a406c8df9e9420439a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F2-out.cc?ref=0bad3b7c49882a3aa38510a406c8df9e9420439a", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sungetc_2out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+\n+  // out\n+  {\n+    constraint_filebuf fb_01; // out\n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios::out | ios::trunc);    \n+    VERIFY( fb_01.unbuffered() );\n+    VERIFY( !fb_01.read_position() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == traits_type::eof() );\n+    c2 = fb_01.sungetc();\n+    VERIFY( c2 == traits_type::eof() );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sungetc();\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_01.unbuffered() );\n+    VERIFY( !fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}]}