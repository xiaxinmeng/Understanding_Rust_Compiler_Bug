{"sha": "09df85393ce5501a28359d159670fd05c4d70abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkZjg1MzkzY2U1NTAxYTI4MzU5ZDE1OTY3MGZkMDVjNGQ3MGFiZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-28T08:27:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-28T09:54:50Z"}, "message": "tree-optimization/95273 - more vectorizable_shift massaging\n\nCovering all bases in vectorizable_shift is hard - this makes sure\nto appropriately handle the case of PR95356 without breaking others.\n\n2020-05-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95273\n\tPR tree-optimization/95356\n\t* tree-vect-stmts.c (vectorizable_shift): Adjust when and to\n\twhat we set the vector type of the shift operand SLP node\n\tagain.\n\n\t* gcc.target/i386/pr95356.c: New testcase.", "tree": {"sha": "b5125015fe545cbfcc2d80521283d8a69823abfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5125015fe545cbfcc2d80521283d8a69823abfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09df85393ce5501a28359d159670fd05c4d70abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09df85393ce5501a28359d159670fd05c4d70abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09df85393ce5501a28359d159670fd05c4d70abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09df85393ce5501a28359d159670fd05c4d70abf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd019ef07358602a444f3e63f848aaece5c280f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd019ef07358602a444f3e63f848aaece5c280f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd019ef07358602a444f3e63f848aaece5c280f4"}], "stats": {"total": 131, "additions": 130, "deletions": 1}, "files": [{"sha": "fdd917ba5e7dceca3f6b34a7dbe0df03b0eb2527", "filename": "gcc/testsuite/gcc.target/i386/pr95356.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09df85393ce5501a28359d159670fd05c4d70abf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95356.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09df85393ce5501a28359d159670fd05c4d70abf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95356.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95356.c?ref=09df85393ce5501a28359d159670fd05c4d70abf", "patch": "@@ -0,0 +1,125 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512dq\" } */\n+\n+extern void abort (void);\n+long long a[16];\n+\n+__attribute__((noinline, noclone)) void\n+f1 (void)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << 2;\n+  a1 = a1 << 3;\n+  a2 = a2 << 4;\n+  a3 = a3 << 5;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << 2;\n+  a1 = a1 << 2;\n+  a2 = a2 << 2;\n+  a3 = a3 << 2;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2a (int x)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << x;\n+  a1 = a1 << 2;\n+  a2 = a2 << 2;\n+  a3 = a3 << 2;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2b (int x)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << 2;\n+  a1 = a1 << 2;\n+  a2 = a2 << x;\n+  a3 = a3 << 2;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (int x)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << x;\n+  a1 = a1 << x;\n+  a2 = a2 << x;\n+  a3 = a3 << x;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+int\n+main ()\n+{\n+  a[0] = 4LL;\n+  a[1] = 3LL;\n+  a[2] = 2LL;\n+  a[3] = 1LL;\n+  f1 ();\n+  if (a[0] != (4LL << 2) || a[1] != (3LL << 3)\n+      || a[2] != (2LL << 4) || a[3] != (1LL << 5))\n+    abort ();\n+  f2 ();\n+  if (a[0] != (4LL << 4) || a[1] != (3LL << 5)\n+      || a[2] != (2LL << 6) || a[3] != (1LL << 7))\n+    abort ();\n+  f3 (3);\n+  if (a[0] != (4LL << 7) || a[1] != (3LL << 8)\n+      || a[2] != (2LL << 9) || a[3] != (1LL << 10))\n+    abort ();\n+  f2a (3);\n+  if (a[0] != (4LL << 10) || a[1] != (3LL << 10)\n+      || a[2] != (2LL << 11) || a[3] != (1LL << 12))\n+    abort ();\n+  f2b (3);\n+  if (a[0] != (4LL << 12) || a[1] != (3LL << 12)\n+      || a[2] != (2LL << 14) || a[3] != (1LL << 14))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "ff335aa531eec5ab9bd4df8b388fbe4cb0ff9ce4", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09df85393ce5501a28359d159670fd05c4d70abf/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09df85393ce5501a28359d159670fd05c4d70abf/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=09df85393ce5501a28359d159670fd05c4d70abf", "patch": "@@ -5792,7 +5792,11 @@ vectorizable_shift (vec_info *vinfo,\n       if (slp_node\n \t  && (!vect_maybe_update_slp_op_vectype (slp_op0, vectype)\n \t      || (!scalar_shift_arg\n-\t\t  && !vect_maybe_update_slp_op_vectype (slp_op1, vectype))))\n+\t\t  && (!incompatible_op1_vectype_p\n+\t\t      || dt[1] == vect_constant_def)\n+\t\t  && !vect_maybe_update_slp_op_vectype\n+\t\t\t(slp_op1,\n+\t\t\t incompatible_op1_vectype_p ? vectype : op1_vectype))))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}