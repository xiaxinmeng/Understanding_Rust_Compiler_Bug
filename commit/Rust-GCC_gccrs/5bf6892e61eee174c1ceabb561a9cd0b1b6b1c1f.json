{"sha": "5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmNjg5MmU2MWVlZTE3NGMxY2VhYmI1NjFhOWNkMGIxYjZiMWMxZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-05-25T09:25:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-25T09:25:25Z"}, "message": "atomicity.h: Use the builtins for atomic memory operations.\n\n2005-05-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/cpu/alpha/atomicity.h: Use the builtins for\n\tatomic memory operations.\n\t* config/cpu/powerpc/atomicity.h: Likewise.\n\t* config/cpu/ia64/atomicity.h: Do not include ia64intrin.h.\n\nFrom-SVN: r100139", "tree": {"sha": "f1cabe68634621feb1b63697e0c065713bffe477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1cabe68634621feb1b63697e0c065713bffe477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/comments", "author": null, "committer": null, "parents": [{"sha": "38fc66bac77d6b63669e89f41c05b7cca8576d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fc66bac77d6b63669e89f41c05b7cca8576d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38fc66bac77d6b63669e89f41c05b7cca8576d15"}], "stats": {"total": 89, "additions": 17, "deletions": 72}, "files": [{"sha": "37880848f71afe86fd4976ea8232719c3214ca01", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "patch": "@@ -1,3 +1,10 @@\n+2005-05-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/cpu/alpha/atomicity.h: Use the builtins for\n+\tatomic memory operations.\n+\t* config/cpu/powerpc/atomicity.h: Likewise.\n+\t* config/cpu/ia64/atomicity.h: Do not include ia64intrin.h.\n+\n 2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/25_algorithms/equal.cc: Move to..."}, {"sha": "24a4feb1b64f03457fc59a86899f23ca152a36eb", "filename": "libstdc++-v3/config/cpu/alpha/atomicity.h", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h?ref=5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: Alpha version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,47 +30,16 @@\n \n #include <bits/atomicity.h>\n \n-/* @@@ With gas we can play nice .subsection games to get the\n-   non-predicted branch pointing forward.  But Digital assemblers\n-   don't understand those directives.  This isn't a terribly\n-   important issue, so just ignore it.  */\n-\n namespace __gnu_cxx\n {\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-  {\n-    register int __result, __tmp;\n-    \n-    __asm__ __volatile__ (\n-      \"\\n$Lxadd_%=:\\n\\t\"\n-      \"ldl_l  %0,%3\\n\\t\"\n-      \"addl   %0,%4,%1\\n\\t\"\n-      \"stl_c  %1,%2\\n\\t\"\n-      \"beq    %1,$Lxadd_%=\\n\\t\"\n-      \"mb\"\n-      : \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n-      : \"m\" (*__mem), \"r\"(__val));\n-\n-    return __result;\n-  }\n+  { return __sync_fetch_and_add(__mem, __val); }\n \n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n-  {\n-    register _Atomic_word __result;\n-\n-    __asm__ __volatile__ (\n-      \"\\n$Ladd_%=:\\n\\t\"\n-      \"ldl_l  %0,%2\\n\\t\"\n-      \"addl   %0,%3,%0\\n\\t\"\n-      \"stl_c  %0,%1\\n\\t\"\n-      \"beq    %0,$Ladd_%=\\n\\t\"\n-      \"mb\"\n-      : \"=&r\"(__result), \"=m\"(*__mem)\n-      : \"m\" (*__mem), \"r\"(__val));\n-  }\n+  { __sync_fetch_and_add(__mem, __val); }\n } // namespace __gnu_cxx\n "}, {"sha": "c651b846e99261e466eab0f4af8474cfc108d374", "filename": "libstdc++-v3/config/cpu/ia64/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h?ref=5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: IA64 version  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +29,6 @@\n // the GNU General Public License.\n \n #include <bits/atomicity.h>\n-#include <ia64intrin.h>\n \n namespace __gnu_cxx\n {"}, {"sha": "d3e1e7464e4b50840d8fe06a22681ff30b8d3368", "filename": "libstdc++-v3/config/cpu/powerpc/atomicity.h", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h?ref=5bf6892e61eee174c1ceabb561a9cd0b1b6b1c1f", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: PowerPC version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,48 +30,15 @@\n \n #include <bits/atomicity.h>\n \n-#ifdef __PPC405__\n-#define _STWCX \"sync \\n\\tstwcx. \"\n-#else\n-#define _STWCX \"stwcx. \"\n-#endif\n-\n namespace __gnu_cxx\n {\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-  {\n-    _Atomic_word __tmp, __res;\n-    __asm__ __volatile__ (\n-\t\t\t  \"/* Inline exchange & add */\\n\"\n-\t\t\t  \"0:\\t\"\n-\t\t\t  \"lwarx    %0,0,%3 \\n\\t\"\n-\t\t\t  \"add%I4   %1,%0,%4 \\n\\t\"\n-\t\t\t  _STWCX \"  %1,0,%3 \\n\\t\"\n-\t\t\t  \"bne-     0b \\n\\t\"\n-\t\t\t  \"/* End exchange & add */\"\n-\t\t\t  : \"=&b\"(__res), \"=&r\"(__tmp), \"=m\" (*__mem)\n-\t\t\t  : \"r\" (__mem), \"Ir\"(__val), \"m\" (*__mem)\n-\t\t\t  : \"cr0\");\n-    return __res;\n-  }\n+  { return __sync_fetch_and_add(__mem, __val); }\n   \n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n-  {\n-    _Atomic_word __tmp;\n-    __asm__ __volatile__ (\n-\t\t\t  \"/* Inline atomic add */\\n\"\n-\t\t\t  \"0:\\t\"\n-\t\t\t  \"lwarx    %0,0,%2 \\n\\t\"\n-\t\t\t  \"add%I3   %0,%0,%3 \\n\\t\"\n-\t\t\t  _STWCX \"  %0,0,%2 \\n\\t\"\n-\t\t\t  \"bne-     0b \\n\\t\"\n-\t\t\t  \"/* End atomic add */\"\n-\t\t\t  : \"=&b\"(__tmp), \"=m\" (*__mem)\n-\t\t\t  : \"r\" (__mem), \"Ir\"(__val), \"m\" (*__mem)\n-\t\t\t  : \"cr0\");\n-  }\n+  { __sync_fetch_and_add(__mem, __val); }\n } // namespace __gnu_cxx"}]}