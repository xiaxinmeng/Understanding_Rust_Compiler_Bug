{"sha": "145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1YmRjMmNiYzEyMzdkM2YzYWIyNWY0NWQxOGYxZmNlN2VjYjJiNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-07T20:25:43Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-07T20:25:43Z"}, "message": "re PR fortran/30880 (Derived types with default value -- function with ENTRY: rejected at compile time)\n\n2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30880\n\t* resolve.c (resolve_fl_variable): Set flag to 2 for automatic\n\tarrays.  Make condition for automatic array error explicit.\n\tIf a dummy, no error on an INTENT(OUT) derived type.\n\n2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30880\n\t* gfortran.dg/used_dummy_types_8.f90: New test.\n\nFrom-SVN: r123645", "tree": {"sha": "aef028cedf643c33e61fa8d4f28a708be3b4ce98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aef028cedf643c33e61fa8d4f28a708be3b4ce98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/comments", "author": null, "committer": null, "parents": [{"sha": "4c6b3ec7507e827156a1fdf8b904303b50eedf75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6b3ec7507e827156a1fdf8b904303b50eedf75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6b3ec7507e827156a1fdf8b904303b50eedf75"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "66915c733487970f5997dafa570f40a9d46b2ca5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "patch": "@@ -1,3 +1,10 @@\n+2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30880\n+\t* resolve.c (resolve_fl_variable): Set flag to 2 for automatic\n+\tarrays.  Make condition for automatic array error explicit.\n+\tIf a dummy, no error on an INTENT(OUT) derived type.\n+\n 2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30872"}, {"sha": "f514e77df9ffae8366ab497b5cffb1f8964077a3", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "patch": "@@ -5648,7 +5648,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n \t      || sym->as->upper[i] == NULL\n \t      || sym->as->upper[i]->expr_type != EXPR_CONSTANT)\n \t    {\n-\t      flag = 1;\n+\t      flag = 2;\n \t      break;\n \t    }\n \t}\n@@ -5670,7 +5670,8 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n       else if (sym->attr.external)\n \tgfc_error (\"External '%s' at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n-      else if (sym->attr.dummy)\n+      else if (sym->attr.dummy\n+\t&& !(sym->ts.type == BT_DERIVED && sym->attr.intent == INTENT_OUT))\n \tgfc_error (\"Dummy '%s' at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n       else if (sym->attr.intrinsic)\n@@ -5679,12 +5680,15 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n       else if (sym->attr.result)\n \tgfc_error (\"Function result '%s' at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n-      else\n+      else if (flag == 2)\n \tgfc_error (\"Automatic array '%s' at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n+      else\n+\tgoto no_init_error;\n       return FAILURE;\n     }\n \n+no_init_error:\n   /* Check to see if a derived type is blocked from being host associated\n      by the presence of another class I symbol in the same namespace.\n      14.6.1.3 of the standard and the discussion on comp.lang.fortran.  */"}, {"sha": "bbcfcde7ad6ada69c12eff14b94c629a8b330437", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "patch": "@@ -1,3 +1,8 @@\n+2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30880\n+\t* gfortran.dg/used_dummy_types_8.f90: New test.\n+\n 2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30872"}, {"sha": "8a966a80a533f79c5515102cda87dabd8e2781e6", "filename": "gcc/testsuite/gfortran.dg/used_dummy_types_8.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_8.f90?ref=145bdc2cbc1237d3f3ab25f45d18f1fce7ecb2b5", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! Tests the fix for PR30880, in which the variable d1\n+! in module m1 would cause an error in the main program\n+! because it has an initializer and is a dummy.  This\n+! came about because the function with multiple entries\n+! assigns the initializer earlier than for other cases.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk> \n+!\n+MODULE M1\n+  TYPE T1\n+  INTEGER :: i=7\n+  END TYPE T1\n+CONTAINS\n+  FUNCTION F1(d1) RESULT(res)\n+    INTEGER :: res\n+    TYPE(T1), INTENT(OUT) :: d1\n+    TYPE(T1), INTENT(INOUT) :: d2\n+    res=d1%i\n+    d1%i=0\n+    RETURN\n+  ENTRY E1(d2) RESULT(res)\n+    res=d2%i\n+    d2%i=0\n+  END FUNCTION F1\n+END MODULE M1\n+\n+  USE M1\n+  TYPE(T1) :: D1\n+  D1=T1(3)\n+  write(6,*) F1(D1)\n+  D1=T1(3)\n+  write(6,*) E1(D1)\n+END\n+! { dg-final { cleanup-modules \"m1\" } }"}]}