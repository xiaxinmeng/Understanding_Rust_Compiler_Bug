{"sha": "dc4e989cc8d778764e96577061efc48770bc17fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0ZTk4OWNjOGQ3Nzg3NjRlOTY1NzcwNjFlZmM0ODc3MGJjMTdmZA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-10-28T19:58:31Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-10-28T19:58:31Z"}, "message": "(mulsi): Input predicates back to srcsi_operands.\n\nDon't handle constants specifically for TARGET_SNAKE, but call\nforce_reg to put them in registers.\n(indexed addressing mode patterns): Remove the patterns with\nunscaled index.  Switch off patterns that never match.\n\nFrom-SVN: r2630", "tree": {"sha": "d23bf06876e2a4f2a1850e681650209eb5743f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d23bf06876e2a4f2a1850e681650209eb5743f59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc4e989cc8d778764e96577061efc48770bc17fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4e989cc8d778764e96577061efc48770bc17fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4e989cc8d778764e96577061efc48770bc17fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4e989cc8d778764e96577061efc48770bc17fd/comments", "author": null, "committer": null, "parents": [{"sha": "7691f55974ea73d02416ed9ee4cb8a50117e9bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7691f55974ea73d02416ed9ee4cb8a50117e9bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7691f55974ea73d02416ed9ee4cb8a50117e9bed"}], "stats": {"total": 88, "additions": 32, "deletions": 56}, "files": [{"sha": "e78e86fc6380a6febccf5e5bacdf8c9f074386ed", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 32, "deletions": 56, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4e989cc8d778764e96577061efc48770bc17fd/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4e989cc8d778764e96577061efc48770bc17fd/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=dc4e989cc8d778764e96577061efc48770bc17fd", "patch": "@@ -987,6 +987,9 @@\n   [(set_attr \"length\" \"1\")])\n \n ;; Sneaky ways of using index modes\n+;; We don't use unscaled modes since they can't be used unless we can tell\n+;; which of the registers is the base and which is the index, due to PA's\n+;; idea of segment selection using the top bits of the base register.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -998,28 +1001,18 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mem:SI (match_operand:SI 1 \"register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t  (const_int 4))\n-\t\t (match_dup 1)))]\n-  \"\"\n-  \"ldwx,sm %2(0,%1),%0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mem:SI (match_operand:SI 1 \"register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"ldwx,m %2(0,%1),%0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+; this will never match\n+;(define_insn \"\"\n+;  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+;\t(mem:SI (match_operand:SI 1 \"register_operand\" \"+r\")))\n+;   (set (match_dup 1)\n+;\t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+;\t\t\t  (const_int 4))\n+;\t\t (match_dup 1)))]\n+;  \"\"\n+;  \"ldwx,sm %2(0,%1),%0\"\n+;  [(set_attr \"type\" \"move\")\n+;   (set_attr \"length\" \"1\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1031,37 +1024,18 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(mem:HI (match_operand:SI 1 \"register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t  (const_int 2))\n-\t\t (match_dup 1)))]\n-  \"\"\n-  \"ldhx,sm %2(0,%1),%0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(mem:HI (match_operand:SI 1 \"register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"ldhx,m %2(0,%1),%0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(mem:QI (match_operand:SI 1 \"register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"ldbx,m %2(0,%1),%0\")\n+; this will never match\n+;(define_insn \"\"\n+;  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+;\t(mem:HI (match_operand:SI 1 \"register_operand\" \"+r\")))\n+;   (set (match_dup 1)\n+;\t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+;\t\t\t  (const_int 2))\n+;\t\t (match_dup 1)))]\n+;  \"\"\n+;  \"ldhx,sm %2(0,%1),%0\"\n+;  [(set_attr \"type\" \"move\")\n+;   (set_attr \"length\" \"1\")])\n \n ;; The definition of this insn does not really explain what it does,\n ;; but it should suffice\n@@ -1580,8 +1554,8 @@\n ;; The mulsi3 insns set up registers for the millicode call.\n \n (define_expand \"mulsi3\"\n-  [(set (reg:SI 26) (match_operand:SI 1 \"register_operand\" \"\"))\n-   (set (reg:SI 25) (match_operand:SI 2 \"arith32_operand\" \"\"))\n+  [(set (reg:SI 26) (match_operand:SI 1 \"srcsi_operand\" \"\"))\n+   (set (reg:SI 25) (match_operand:SI 2 \"srcsi_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (mult:SI (reg:SI 26) (reg:SI 25)))\n \t      (clobber (match_scratch:SI 3 \"\"))\n \t      (clobber (reg:SI 26))\n@@ -1591,9 +1565,11 @@\n   \"\"\n   \"\n {\n-  if (TARGET_SNAKE && !(CONSTANT_P (operands[1]) || CONSTANT_P (operands[2])))\n+  if (TARGET_SNAKE)\n     {\n       rtx scratch = gen_reg_rtx (DImode);\n+      operands[1] = force_reg (SImode, operands[1]);\n+      operands[2] = force_reg (SImode, operands[2]);\n       emit_insn (gen_umulsidi3 (scratch, operands[1], operands[2]));\n       emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t  operands[0],"}]}