{"sha": "a8bac9ab24d80842b398093d83096fbb3692cc47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiYWM5YWIyNGQ4MDg0MmIzOTgwOTNkODMwOTZmYmIzNjkyY2M0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-22T07:19:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-22T07:19:01Z"}, "message": "i386.c (ix86_expand_clear): New.\n\n        * config/i386/i386.c (ix86_expand_clear): New.\n        * config/i386/i386-protos.h: Declare it.\n        * config/i386/i386.md (setcc peep2s): Use it.\n        (movsi_xor): Unexport.\n\nFrom-SVN: r46404", "tree": {"sha": "546c2d29460064191ec0c2f6f2b483304c816849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/546c2d29460064191ec0c2f6f2b483304c816849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8bac9ab24d80842b398093d83096fbb3692cc47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8bac9ab24d80842b398093d83096fbb3692cc47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8bac9ab24d80842b398093d83096fbb3692cc47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8bac9ab24d80842b398093d83096fbb3692cc47/comments", "author": null, "committer": null, "parents": [{"sha": "8356429f83a580f9eb077e94a0982b495bfaa91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8356429f83a580f9eb077e94a0982b495bfaa91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8356429f83a580f9eb077e94a0982b495bfaa91f"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "3374a63be55cd3ef577640f4920e28dd46009a36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8bac9ab24d80842b398093d83096fbb3692cc47", "patch": "@@ -1,3 +1,10 @@\n+2001-10-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_clear): New.\n+\t* config/i386/i386-protos.h: Declare it.\n+\t* config/i386/i386.md (setcc peep2s): Use it.\n+\t(movsi_xor): Unexport.\n+\n 2001-10-22  Richard Henderson  <rth@redhat.com>\n \n \t* flow.c (clear_log_links): Use free_INSN_LIST_list, not"}, {"sha": "edd5446ba33a0352d5a4484104d9c2562aca83e2", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=a8bac9ab24d80842b398093d83096fbb3692cc47", "patch": "@@ -106,6 +106,7 @@ extern const char *output_fp_compare PARAMS ((rtx, rtx*, int, int));\n extern void i386_dwarf_output_addr_const PARAMS ((FILE*, rtx));\n extern rtx i386_simplify_dwarf_addr PARAMS ((rtx));\n \n+extern void ix86_expand_clear PARAMS ((rtx));\n extern void ix86_expand_move PARAMS ((enum machine_mode, rtx[]));\n extern void ix86_expand_binary_operator PARAMS ((enum rtx_code,\n \t\t\t\t\t       enum machine_mode, rtx[]));"}, {"sha": "691a3979feaacc84d4ee75a5c14ea8cf787c6f8d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a8bac9ab24d80842b398093d83096fbb3692cc47", "patch": "@@ -6662,6 +6662,35 @@ ix86_output_addr_diff_elt (file, value, rel)\n \t\t ASM_LONG, LPREFIX, value);\n }\n \f\n+/* Generate either \"mov $0, reg\" or \"xor reg, reg\", as appropriate\n+   for the target.  */\n+\n+void\n+ix86_expand_clear (dest)\n+     rtx dest;\n+{\n+  rtx tmp;\n+\n+  /* We play register width games, which are only valid after reload.  */\n+  if (!reload_completed)\n+    abort ();\n+\n+  /* Avoid HImode and its attendant prefix byte.  */\n+  if (GET_MODE_SIZE (GET_MODE (dest)) < 4)\n+    dest = gen_rtx_REG (SImode, REGNO (dest));\n+\n+  tmp = gen_rtx_SET (VOIDmode, dest, const0_rtx);\n+\n+  /* This predicate should match that for movsi_xor and movdi_xor_rex64.  */\n+  if (reload_completed && (!TARGET_USE_MOV0 || optimize_size))\n+    {\n+      rtx clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, 17));\n+      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n+    }\n+\n+  emit_insn (tmp);\n+}\n+\n void\n ix86_expand_move (mode, operands)\n      enum machine_mode mode;"}, {"sha": "803a0eb26643eb024a464e14117f2f7fcef17db3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bac9ab24d80842b398093d83096fbb3692cc47/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a8bac9ab24d80842b398093d83096fbb3692cc47", "patch": "@@ -1711,7 +1711,7 @@\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"movsi_xor\"\n+(define_insn \"*movsi_xor\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"const0_operand\" \"i\"))\n    (clobber (reg:CC 17))]\n@@ -13277,10 +13277,7 @@\n {\n   operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n   operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\n-  if (HAVE_movsi_xor)\n-    emit_insn (gen_movsi_xor (operands[3], const0_rtx));\n-  else\n-    emit_insn (gen_movsi (operands[3], const0_rtx));\n+  ix86_expand_clear (operands[3]);\n })\n \n ;; Similar, but match zero_extendhisi2_and, which adds a clobber.\n@@ -13302,10 +13299,7 @@\n {\n   operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n   operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\n-  if (HAVE_movsi_xor)\n-    emit_insn (gen_movsi_xor (operands[3], const0_rtx));\n-  else\n-    emit_insn (gen_movsi (operands[3], const0_rtx));\n+  ix86_expand_clear (operands[3]);\n })\n \f\n ;; Call instructions."}]}