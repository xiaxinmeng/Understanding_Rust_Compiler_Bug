{"sha": "2710a27af098557e37d3d131fa5a43dbfddab408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxMGEyN2FmMDk4NTU3ZTM3ZDNkMTMxZmE1YTQzZGJmZGRhYjQwOA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-05-13T00:29:36Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-05-13T00:29:36Z"}, "message": "Fix EH handling issue in last change:\n\n        * config/epiphany/epiphany.c (epiphany_init): Check size of\n        NUM_MODES_FOR_MODE_SWITCHING.\n        (epiphany_expand_prologue):\n        Remove CONFIG_REGNUM initial value handling code.\n        (epiphany_optimize_mode_switching): Handle EPIPHANY_MSW_ENTITY_CONFIG.\n        (epiphany_mode_needed, epiphany_mode_entry_exit): Likewise.\n        (emit_set_fp_mode, epiphany_mode_after): Likewise.\n        (epiphany_mode_needed) <Handle EPIPHANY_MSW_ENTITY_AND>:\n        Don't return 1 for FP_MODE_NONE.\n        * config/epiphany/epiphany.h (NUM_MODES_FOR_MODE_SWITCHING):\n        Add value for EPIPHANY_MSW_ENTITY_CONFIG.\n        (EPIPHANY_MSW_ENTITY_CONFIG, EPIPHANY_MSW_ENTITY_NUM): Define.\n        * config/epiphany/epiphany.md (save_config): New pattern.\n\nFrom-SVN: r198811", "tree": {"sha": "e3ecbeedf510584b706045b1f77909c17261de6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ecbeedf510584b706045b1f77909c17261de6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2710a27af098557e37d3d131fa5a43dbfddab408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2710a27af098557e37d3d131fa5a43dbfddab408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2710a27af098557e37d3d131fa5a43dbfddab408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2710a27af098557e37d3d131fa5a43dbfddab408/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "350bfa8f865cdf5214df95cecc58b58556088a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350bfa8f865cdf5214df95cecc58b58556088a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/350bfa8f865cdf5214df95cecc58b58556088a17"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "51deae8e4af56f5b79b517763de931de9149b5e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2710a27af098557e37d3d131fa5a43dbfddab408/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2710a27af098557e37d3d131fa5a43dbfddab408/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2710a27af098557e37d3d131fa5a43dbfddab408", "patch": "@@ -6,7 +6,7 @@\n \tRemove CONFIG_REGNUM initial value handling code.\n \t(epiphany_optimize_mode_switching): Handle EPIPHANY_MSW_ENTITY_CONFIG.\n \t(epiphany_mode_needed, epiphany_mode_entry_exit): Likewise.\n-\t(emit_set_fp_mode): Likewise.\n+\t(emit_set_fp_mode, epiphany_mode_after): Likewise.\n \t(epiphany_mode_needed) <Handle EPIPHANY_MSW_ENTITY_AND>:\n \tDon't return 1 for FP_MODE_NONE.\n \t* config/epiphany/epiphany.h (NUM_MODES_FOR_MODE_SWITCHING):"}, {"sha": "3b6f63ab975d35f3ccf8108def9570820f013d31", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2710a27af098557e37d3d131fa5a43dbfddab408/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2710a27af098557e37d3d131fa5a43dbfddab408/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=2710a27af098557e37d3d131fa5a43dbfddab408", "patch": "@@ -2328,7 +2328,15 @@ epiphany_mode_needed (int entity, rtx insn)\n        just unchanged from the function start.\n        Because of the nature of the mode switching optimization,\n        a restore will be dominated by a clobber.  */\n-    return mode != FP_MODE_NONE && mode != FP_MODE_CALLER ? 1 : 2;\n+    if (mode != FP_MODE_NONE && mode != FP_MODE_CALLER)\n+      return 1;\n+    /* A cpecial case are abnormal edges, which are deemed to clobber\n+       the mode as well.  We need to pin this effect on a actually\n+       dominating insn, and one where the frame can be accessed, too, in\n+       case the pseudo used to save CONFIG doesn't get a hard register.  */\n+    if (CALL_P (insn) && find_reg_note (insn, REG_EH_REGION, NULL_RTX))\n+      return 1;\n+    return 2;\n   case EPIPHANY_MSW_ENTITY_ROUND_KNOWN:\n     if (recog_memoized (insn) == CODE_FOR_set_fp_mode)\n       mode = (enum attr_fp_mode) epiphany_mode_after (entity, mode, insn);\n@@ -2402,6 +2410,18 @@ epiphany_mode_after (int entity, int last_mode, rtx insn)\n \treturn 0;\n       return last_mode;\n     }\n+  /* If there is an abnormal edge, we don't want the config register to\n+     be 'saved' again at the destination.\n+     The frame pointer adjustment is inside a PARALLEL because of the\n+     flags clobber.  */\n+  if (entity == EPIPHANY_MSW_ENTITY_CONFIG && NONJUMP_INSN_P (insn)\n+      && GET_CODE (PATTERN (insn)) == PARALLEL\n+      && GET_CODE (XVECEXP (PATTERN (insn), 0, 0)) == SET\n+      && SET_DEST (XVECEXP (PATTERN (insn), 0, 0)) == frame_pointer_rtx)\n+    {\n+      gcc_assert (cfun->has_nonlocal_label);\n+      return 1;\n+    }\n   if (recog_memoized (insn) < 0)\n     return last_mode;\n   if (get_attr_fp_mode (insn) == FP_MODE_ROUND_UNKNOWN"}]}