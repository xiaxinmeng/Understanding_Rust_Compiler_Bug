{"sha": "71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiNmNiMmJiY2NiYTg5MjJhOGM3ZTkwODJhMTNhMDJkZWU3ZTU3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-06T18:46:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-06T18:46:32Z"}, "message": "re PR c++/87148 (backward compatibility issue  to take char [] as incomplete type)\n\n\tPR c++/87148\n\t* init.c (build_value_init_noctor): Ignore flexible array members.\n\n\t* g++.dg/ext/flexary34.C: New test.\n\nFrom-SVN: r269434", "tree": {"sha": "0ab09c800fdc1e4086296c067ed4ccf46b89414c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ab09c800fdc1e4086296c067ed4ccf46b89414c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4556c5b3157f496c73f7fcd25d103ad3e6ff1874"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "b0c1f88c6a2dbd74313002422d4552818f819c28", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "patch": "@@ -1,3 +1,8 @@\n+2019-03-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87148\n+\t* init.c (build_value_init_noctor): Ignore flexible array members.\n+\n 2019-03-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/89576 - if constexpr of lambda capture."}, {"sha": "79a93a297a91d76f7ac0c924dc30b3e36d9f7a7d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "patch": "@@ -419,6 +419,15 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \t      if (ftype == error_mark_node)\n \t\tcontinue;\n \n+\t      /* Ignore flexible array members for value initialization.  */\n+\t      if (TREE_CODE (ftype) == ARRAY_TYPE\n+\t\t  && !COMPLETE_TYPE_P (ftype)\n+\t\t  && !TYPE_DOMAIN (ftype)\n+\t\t  && COMPLETE_TYPE_P (TREE_TYPE (ftype))\n+\t\t  && (next_initializable_field (DECL_CHAIN (field))\n+\t\t      == NULL_TREE))\n+\t\tcontinue;\n+\n \t      /* We could skip vfields and fields of types with\n \t\t user-defined constructors, but I think that won't improve\n \t\t performance at all; it should be simpler in general just"}, {"sha": "4175bc4b24676f93022d2aba572768c673199ed9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "patch": "@@ -1,3 +1,8 @@\n+2019-03-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87148\n+\t* g++.dg/ext/flexary34.C: New test.\n+\n 2019-03-06  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/88845"}, {"sha": "bbbbf8526926bee1e1f1bf155c82171452bbd36d", "filename": "gcc/testsuite/g++.dg/ext/flexary34.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6cb2bbccba8922a8c7e9082a13a02dee7e57d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary34.C?ref=71b6cb2bbccba8922a8c7e9082a13a02dee7e57d", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/87148\n+// { dg-do compile }\n+// { dg-options \"-pedantic\" }\n+\n+struct Tst { int i; char t[]; };\t// { dg-warning \"forbids flexible array member\" }\n+\n+Tst t {};\t\t\t\t// { dg-warning \"extended initializer lists only available with\" \"\" { target c++98_only } }\n+Tst u = Tst();\n+void foo () { Tst u = {}; }\n+Tst *bar () { return new Tst (); }"}]}