{"sha": "66e97803490ef55770cee7db81eade2d05c4ea0a", "node_id": "C_kwDOANBUbNoAKDY2ZTk3ODAzNDkwZWY1NTc3MGNlZTdkYjgxZWFkZTJkMDVjNGVhMGE", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-13T01:08:43Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-13T01:08:43Z"}, "message": "testsuite: extend timeout into all gm2 tests\n\nAdd timeout capability to gm2-torture.exp.  Also add a simple\ngm2_push_timeout/gm2_pop timeout facility and calibrate all\ntests to use the default of 10 seconds.  15 seconds (for the\ncoroutine tests) and 60 seconds for whole program optimization.\n\ngcc/testsuite/ChangeLog:\n\n\t* gm2/coroutines/pim/run/pass/coroutines-pim-run-pass.exp\n\t(timeout-dg.exp): Load.\n\tCall gm2_push_timeout 15.\n\tCall gm2_pop_timeout at the end.\n\t* gm2/link/min/pass/link-min-pass.exp: Set path\n\targument to \"\".\n\t* gm2/switches/whole-program/pass/run/switches-whole-program-pass-run.exp:\n\tCall gm2_push_timeout 60.\n\tCall gm2_pop_timeout at the end.\n\t* lib/gm2-torture.exp (gm2_previous_timeout): Set to 10 or\n\tindividual_timeout.\n\tConfigure dejagnu to timeout for 10 seconds.\n\t(gm2_push_timeout): New proc.\n\t(gm2_pop_timeout): New proc.\n\t* lib/gm2.exp (gm2_previous_timeout): Set to 10 or\n\tindividual_timeout.\n\tConfigure dejagnu to timeout for 10 seconds.\n\t(gm2_push_timeout): New proc.\n\t(gm2_pop_timeout): New proc.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "96be4a0acb7598455b7f6325fada560d078c49d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96be4a0acb7598455b7f6325fada560d078c49d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e97803490ef55770cee7db81eade2d05c4ea0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e97803490ef55770cee7db81eade2d05c4ea0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e97803490ef55770cee7db81eade2d05c4ea0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e97803490ef55770cee7db81eade2d05c4ea0a/comments", "author": null, "committer": null, "parents": [{"sha": "ecd637e9761485437498f311ddf09af5286d6d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd637e9761485437498f311ddf09af5286d6d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd637e9761485437498f311ddf09af5286d6d0f"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "baf185f717b33b4dc77fb9f7d80eddca7d1d6059", "filename": "gcc/testsuite/gm2/coroutines/pim/run/pass/coroutines-pim-run-pass.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Fgm2%2Fcoroutines%2Fpim%2Frun%2Fpass%2Fcoroutines-pim-run-pass.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Fgm2%2Fcoroutines%2Fpim%2Frun%2Fpass%2Fcoroutines-pim-run-pass.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fcoroutines%2Fpim%2Frun%2Fpass%2Fcoroutines-pim-run-pass.exp?ref=66e97803490ef55770cee7db81eade2d05c4ea0a", "patch": "@@ -24,11 +24,16 @@ if $tracelevel then {\n \n # load support procs\n load_lib gm2-torture.exp\n+load_lib timeout-dg.exp\n \n set gm2src ${srcdir}/../gm2\n \n gm2_init_cor\n \n+# We should be able to compile, link or run in 15 seconds.\n+gm2_push_timeout 15\n+\n+\n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.mod]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n     if ![runtest_file_p $runtests $testcase] then {\n@@ -37,3 +42,5 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.mod]] {\n \n     gm2-torture-execute $testcase \"\" \"pass\"\n }\n+\n+gm2_pop_timeout"}, {"sha": "88e4ed9434d6ddeacd9d3e9f01427a93f0247299", "filename": "gcc/testsuite/gm2/link/min/pass/link-min-pass.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Fgm2%2Flink%2Fmin%2Fpass%2Flink-min-pass.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Fgm2%2Flink%2Fmin%2Fpass%2Flink-min-pass.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Flink%2Fmin%2Fpass%2Flink-min-pass.exp?ref=66e97803490ef55770cee7db81eade2d05c4ea0a", "patch": "@@ -25,7 +25,7 @@ if $tracelevel then {\n # load support procs\n load_lib gm2-torture.exp\n \n-gm2_init_min \"${srcdir}/gm2/min/pass\"\n+gm2_init_min \"\"\n \n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.mod]] {\n     # If we're only testing specific files and this isn't one of them, skip it."}, {"sha": "3058b9a3afb430acc8cbb57ed6d5f0f396042c10", "filename": "gcc/testsuite/gm2/switches/whole-program/pass/run/switches-whole-program-pass-run.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Fgm2%2Fswitches%2Fwhole-program%2Fpass%2Frun%2Fswitches-whole-program-pass-run.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Fgm2%2Fswitches%2Fwhole-program%2Fpass%2Frun%2Fswitches-whole-program-pass-run.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fswitches%2Fwhole-program%2Fpass%2Frun%2Fswitches-whole-program-pass-run.exp?ref=66e97803490ef55770cee7db81eade2d05c4ea0a", "patch": "@@ -25,6 +25,7 @@ if $tracelevel then {\n load_lib gm2-torture.exp\n \n gm2_init_pim \"${srcdir}/gm2/switches/whole-program/run/pass\" -fm2-whole-program\n+gm2_push_timeout 60\n \n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.mod]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n@@ -34,3 +35,5 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.mod]] {\n     gm2_target_compile $srcdir/$subdir/mystrlib.mod mystrlib.o object \"-g -O3 -I$srcdir/$subdir/\"\n     gm2-torture $testcase\n }\n+\n+gm2_pop_timeout"}, {"sha": "44d9d053175545e78878e16a7275fb560ef32a62", "filename": "gcc/testsuite/lib/gm2-torture.exp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Flib%2Fgm2-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Flib%2Fgm2-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgm2-torture.exp?ref=66e97803490ef55770cee7db81eade2d05c4ea0a", "patch": "@@ -20,6 +20,35 @@\n \n load_lib file-format.exp\n load_lib target-libpath.exp\n+load_lib timeout.exp\n+load_lib timeout-dg.exp\n+\n+\n+if {[info exists individual_timeout]} {\n+    set gm2_previous_timeout $individual_timeout\n+} else {\n+    set gm2_previous_timeout 10\n+}\n+\n+\n+# We should be able to complete any test in 10 seconds.\n+dg-timeout S 10\n+\n+\n+# only push one level.\n+\n+proc gm2_push_timeout { secs } {\n+    global individual_timeout\n+    set individual_timeout $secs\n+}\n+\n+\n+proc gm2_pop_timeout { } {\n+    global individual_timeout\n+    global gm2_previous_timeout\n+    set individual_timeout $gm2_previous_timeout\n+}\n+\n \n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n@@ -272,6 +301,7 @@ proc gm2-torture-execute { sources args success } {\n \n \tset options \"\"\n \tlappend options \"additional_flags=$option\"\n+\tlappend options \"timeout=[timeout_value]\"\n \tif { $additional_flags != \"\" } {\n \t    lappend options \"additional_flags=$additional_flags\"\n \t}\n@@ -290,6 +320,7 @@ proc gm2-torture-execute { sources args success } {\n \t# now link the test\n \tset options ${option};\n \n+\tlappend options \"timeout=[timeout_value]\"\n \tif { [llength ${args}] > 0 } {\n \t    lappend options \"additional_flags=[lindex ${args} 0]\"\n \t}"}, {"sha": "f000eae16e546c128c86d0132234cf9b0da7d291", "filename": "gcc/testsuite/lib/gm2.exp", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Flib%2Fgm2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e97803490ef55770cee7db81eade2d05c4ea0a/gcc%2Ftestsuite%2Flib%2Fgm2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgm2.exp?ref=66e97803490ef55770cee7db81eade2d05c4ea0a", "patch": "@@ -23,6 +23,36 @@ load_lib prune.exp\n load_lib gcc-defs.exp\n load_lib target-libpath.exp\n load_lib timeout.exp\n+load_lib timeout-dg.exp\n+\n+\n+if {[info exists individual_timeout]} {\n+    set gm2_previous_timeout $individual_timeout\n+} else {\n+    set gm2_previous_timeout 10\n+}\n+\n+\n+# set gm2_previous_timeout $individual_timeout\n+\n+# We should be able to complete any test in 10 seconds.\n+dg-timeout S 10\n+\n+\n+# only push one level.\n+\n+proc gm2_push_timeout { secs } {\n+    global individual_timeout\n+    set individual_timeout $secs\n+}\n+\n+\n+proc gm2_pop_timeout { } {\n+    global individual_timeout\n+    global gm2_previous_timeout\n+    set individual_timeout $gm2_previous_timeout\n+}\n+\n \n #\n # GCC_UNDER_TEST is the compiler under test.\n@@ -137,8 +167,13 @@ proc gm2_init { args } {\n \n     set gm2_link_path \"[gm2_link_flags [get_multilibs]]\";\n     verbose $gm2_link_path 1\n+\n+    # Set the default timeout value, larger tests can override\n+    # this if necessary.\n+    dg-timeout S 10\n }\n \n+\n #\n # gm2_target_compile_default -- compile a source file\n #"}]}