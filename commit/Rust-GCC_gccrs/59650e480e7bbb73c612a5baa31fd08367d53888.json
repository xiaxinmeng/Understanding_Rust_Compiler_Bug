{"sha": "59650e480e7bbb73c612a5baa31fd08367d53888", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2NTBlNDgwZTdiYmI3M2M2MTJhNWJhYTMxZmQwODM2N2Q1Mzg4OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-11T02:06:12Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-11T02:06:12Z"}, "message": "diagnostic.c: Reorder functions for clarity...\n\n\t* diagnostic.c: Reorder functions for clarity, putting all the\n\tfunctions in the \"error\" family next to each other, and\n\tlikewise all the functions in the \"error_with_decl\" family.\n\tSome other routines were moved too.  Add comments.\n\t(vbuild_message_string): Fold into sole caller.\n\nFrom-SVN: r66676", "tree": {"sha": "06b35cf9bb9dda2a408fe9eb89484254bb042d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06b35cf9bb9dda2a408fe9eb89484254bb042d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59650e480e7bbb73c612a5baa31fd08367d53888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59650e480e7bbb73c612a5baa31fd08367d53888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59650e480e7bbb73c612a5baa31fd08367d53888", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59650e480e7bbb73c612a5baa31fd08367d53888/comments", "author": null, "committer": null, "parents": [{"sha": "95e32f8573a8f58c26ff8d96f0282250601f8947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e32f8573a8f58c26ff8d96f0282250601f8947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e32f8573a8f58c26ff8d96f0282250601f8947"}], "stats": {"total": 742, "additions": 383, "deletions": 359}, "files": [{"sha": "2cdd15391d626a2929e5b9ba22e5a3039a6bc919", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59650e480e7bbb73c612a5baa31fd08367d53888/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59650e480e7bbb73c612a5baa31fd08367d53888/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59650e480e7bbb73c612a5baa31fd08367d53888", "patch": "@@ -1,3 +1,12 @@\n+2003-05-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* diagnostic.c: Reorder functions for clarity, putting all the\n+\tfunctions in the \"error\" family next to each other, and\n+\tlikewise all the functions in the \"error_with_decl\" family.\n+\tSome other routines were moved too.  Add comments.\n+\t(vbuild_message_string): Fold into sole caller.\n+\n+\n 2003-05-11  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* except.c (EH_RETURN_STACKADJ_RTX): Do not define.\n@@ -57,10 +66,10 @@\n \n 2003-05-10  Richard Earnshaw  <rearnsha@arm.com>\n \n-\t* arm.md (DOM_CC_X_AND_Y, DOM_CC_NX_OR_Y, DOM_CC_X_OR_Y): New \n+\t* arm.md (DOM_CC_X_AND_Y, DOM_CC_NX_OR_Y, DOM_CC_X_OR_Y): New\n \tconstants.\n \t(ior_scc_scc, and_scc_scc): New insn_and_split patterns.\n-\t* arm.c (arm_select_dominance_cc_mode): Renamed from \n+\t* arm.c (arm_select_dominance_cc_mode): Renamed from\n \tselect_dominance_cc_mode, no-longer static.  Use DOM_CC... constants.\n \tCallers updated.\n \t* arm-protos.h (arm_select_dominance_cc_mode): Add prototype.\n@@ -123,7 +132,7 @@\n \t(if_stmt_file): Remove.\n \t(if_stmt_line): Likewise.\n \t* jump.c: include \"diagnostic.h\"\n-\t(never_reached_warning): Don't use warning_with_file_and_line. \n+\t(never_reached_warning): Don't use warning_with_file_and_line.\n \t* Makefile.in (jump.o): Add dependce on diagnostic.h\n \n 2003-05-09  Alan Modra  <amodra@bigpond.net.au>\n@@ -159,8 +168,8 @@\n \n 2003-05-08  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * mklibgcc.in: Use mkinstalldirs when installing multilib\n-        directories.\n+\t* mklibgcc.in: Use mkinstalldirs when installing multilib\n+\tdirectories.\n \n 2003-05-08  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -170,7 +179,7 @@\n 2003-05-08  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \t* objc/objc-act.c (error_with_ivar): Don't use\n-\terror_with_file_and_line. \n+\terror_with_file_and_line.\n \t(warn_with_method): Don't use warning_with_file_and_line.\n \n 2003-05-08  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n@@ -205,7 +214,7 @@\n \n 2003-05-07  David Mosberger <davidm@hpl.hp.com>\n \n-        * unwind-libunwind.c (_Unwind_FindEnclosingFunction): New.\n+\t* unwind-libunwind.c (_Unwind_FindEnclosingFunction): New.\n \n 2003-05-07  Richard Henderson  <rth@redhat.com>\n \n@@ -224,38 +233,38 @@\n \n 2003-05-07  David Mosberger <davidm@hpl.hp.com>\n \n-        * config/ia64/crtbegin.asm (__do_jv_register_classes): Don't\n+\t* config/ia64/crtbegin.asm (__do_jv_register_classes): Don't\n \tforget to preserve gp.\n-        * config/ia64/crtend.asm (__do_global_ctors_au): Ditto.\n-\n-        * config/ia64/crtbegin.asm (__do_jv_register_classes): Add missing\n-        .prologue directive.\n-        Use .skip instead of data8 for .bss section to make Intel\n-        Assembler (ias) happy.  Minor whitespace fixups.  Make \"nop 0\"\n-        explicit in the .mib bundles and remove the unnecessary stop\n-        bits.  Replace local labels with normal labels, to make ias\n-        happy.  Don't register __do_global_ctors_aux here, do it in\n-        crtend.asm instead.\n-\n-        * config/ia64/crtend.asm [HAVE_INIT_FINI_ARRAY]: Register\n-        __do_global_ctors_aux in .init_array section instead of\n-        declaring it as a hidden global.  Replace local labels with\n-        ordinary labels to make ias happy.\n+\t* config/ia64/crtend.asm (__do_global_ctors_au): Ditto.\n+\n+\t* config/ia64/crtbegin.asm (__do_jv_register_classes): Add missing\n+\t.prologue directive.\n+\tUse .skip instead of data8 for .bss section to make Intel\n+\tAssembler (ias) happy.  Minor whitespace fixups.  Make \"nop 0\"\n+\texplicit in the .mib bundles and remove the unnecessary stop\n+\tbits.  Replace local labels with normal labels, to make ias\n+\thappy.  Don't register __do_global_ctors_aux here, do it in\n+\tcrtend.asm instead.\n+\n+\t* config/ia64/crtend.asm [HAVE_INIT_FINI_ARRAY]: Register\n+\t__do_global_ctors_aux in .init_array section instead of\n+\tdeclaring it as a hidden global.  Replace local labels with\n+\tordinary labels to make ias happy.\n \n 2003-05-07  Richard Henderson  <rth@redhat.com>\n \n-        PR c++/10570\n-        * except.c: Revert 04-01 and 04-02 forced-unwind changes.\n-        * flags.h, toplev.c, doc/invoke.texi: Likewise.\n+\tPR c++/10570\n+\t* except.c: Revert 04-01 and 04-02 forced-unwind changes.\n+\t* flags.h, toplev.c, doc/invoke.texi: Likewise.\n \n-        * unwind-dw2.c (_Unwind_GetCFA): Fix ptr->int conversion warning.\n-        * unwind.inc (_Unwind_DeleteException): Check for null\n-        exception_cleanup.\n+\t* unwind-dw2.c (_Unwind_GetCFA): Fix ptr->int conversion warning.\n+\t* unwind.inc (_Unwind_DeleteException): Check for null\n+\texception_cleanup.\n \n-        * unwind-sjlj.c (_Unwind_SjLj_Resume_or_Rethrow): New.\n-        * unwind.inc (_Unwind_Resume_or_Rethrow): New.\n-        * unwind.h: Declare them.\n-        * libgcc-std.ver (GCC_3.3): Export them.\n+\t* unwind-sjlj.c (_Unwind_SjLj_Resume_or_Rethrow): New.\n+\t* unwind.inc (_Unwind_Resume_or_Rethrow): New.\n+\t* unwind.h: Declare them.\n+\t* libgcc-std.ver (GCC_3.3): Export them.\n \n 2003-05-07  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "ce6c8bc60bbce719b3cd00e46a8698437a791686", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 341, "deletions": 326, "changes": 667, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59650e480e7bbb73c612a5baa31fd08367d53888/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59650e480e7bbb73c612a5baa31fd08367d53888/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=59650e480e7bbb73c612a5baa31fd08367d53888", "patch": "@@ -51,8 +51,6 @@ static void output_buffer_to_stream PARAMS ((output_buffer *));\n static void output_format PARAMS ((output_buffer *, text_info *));\n static void output_indent PARAMS ((output_buffer *));\n \n-static char *vbuild_message_string PARAMS ((const char *, va_list))\n-     ATTRIBUTE_PRINTF (1, 0);\n static char *build_message_string PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1;\n static void format_with_decl PARAMS ((output_buffer *, text_info *, tree));\n@@ -388,6 +386,9 @@ output_append (buffer, start, end)\n   output_append_r (buffer, start, end - start);\n }\n \n+/* Insert enough spaces into BUFFER to bring the column position to\n+   the current indentation level, assuming that a newline has just\n+   been written to the buffer.  */\n static void\n output_indent (buffer)\n      output_buffer *buffer;\n@@ -616,19 +617,8 @@ output_format (buffer, text)\n     }\n }\n \n-static char *\n-vbuild_message_string (msg, ap)\n-     const char *msg;\n-     va_list ap;\n-{\n-  char *str;\n-\n-  vasprintf (&str, msg, ap);\n-  return str;\n-}\n-\n-/*  Return a malloc'd string containing MSG formatted a la\n-    printf.  The caller is responsible for freeing the memory.  */\n+/* Return a malloc'd string containing MSG formatted a la printf.  The\n+   caller is responsible for freeing the memory.  */\n static char *\n build_message_string VPARAMS ((const char *msg, ...))\n {\n@@ -637,7 +627,7 @@ build_message_string VPARAMS ((const char *msg, ...))\n   VA_OPEN (ap, msg);\n   VA_FIXEDARG (ap, const char *, msg);\n \n-  str = vbuild_message_string (msg, ap);\n+  vasprintf (&str, msg, ap);\n \n   VA_CLOSE (ap);\n \n@@ -851,29 +841,6 @@ diagnostic_build_prefix (diagnostic)\n                             _(diagnostic_kind_text[diagnostic->kind]));\n }\n \n-/* Report a diagnostic MESSAGE at the declaration DECL.\n-   MSG is a format string which uses %s to substitute the declaration\n-   name; subsequent substitutions are a la output_format.  */\n-static void\n-diagnostic_for_decl (diagnostic, decl)\n-     diagnostic_info *diagnostic;\n-     tree decl;\n-{\n-  if (global_dc->lock++)\n-    error_recursion (global_dc);\n-\n-  if (diagnostic_count_diagnostic (global_dc, diagnostic->kind))\n-    {\n-      diagnostic_report_current_function (global_dc);\n-      output_set_prefix\n-\t(&global_dc->buffer, diagnostic_build_prefix (diagnostic));\n-      format_with_decl (&global_dc->buffer, &diagnostic->message, decl);\n-      output_flush (&global_dc->buffer);\n-      output_destroy_prefix (&global_dc->buffer);\n-    }\n-  global_dc->lock--;\n-}\n-\n void\n diagnostic_flush_buffer (context)\n      diagnostic_context *context;\n@@ -923,96 +890,6 @@ diagnostic_count_diagnostic (context, kind)\n   return true;\n }\n \n-/* Print a diagnostic MSGID on FILE.  This is just fprintf, except it\n-   runs its second argument through gettext.  */\n-void\n-fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n-{\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, FILE *, file);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  vfprintf (file, _(msgid), ap);\n-  VA_CLOSE (ap);\n-}\n-\n-\n-/* Print a fatal I/O error message.  Argument are like printf.\n-   Also include a system error message based on `errno'.  */\n-void\n-fatal_io_error VPARAMS ((const char *msgid, ...))\n-{\n-  text_info text;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  text.format_spec = _(msgid);\n-  text.args_ptr = &ap;\n-  output_printf (&global_dc->buffer, \"%s: %s: \", progname, xstrerror (errno));\n-  output_format (&global_dc->buffer, &text);\n-  output_flush (&global_dc->buffer);\n-  VA_CLOSE (ap);\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n-/* Issue a pedantic warning MSGID.  */\n-void\n-pedwarn VPARAMS ((const char *msgid, ...))\n-{\n-  diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  diagnostic_set_info (&diagnostic, _(msgid), &ap, input_filename, input_line,\n-                       pedantic_error_kind ());\n-  report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n-}\n-\n-/* Issue a pedantic warning about DECL.  */\n-void\n-pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n-{\n-  diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, tree, decl);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  diagnostic_set_info (&diagnostic, _(msgid), &ap,\n-                       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n-                       pedantic_error_kind ());\n-\n-  /* We don't want -pedantic-errors to cause the compilation to fail from\n-     \"errors\" in system header files.  Sometimes fixincludes can't fix what's\n-     broken (eg: unsigned char bitfields - fixing it may change the alignment\n-     which will cause programs to mysteriously fail because the C library\n-     or kernel uses the original layout).  There's no point in issuing a\n-     warning either, it's just unnecessary noise.  */\n-  if (!DECL_IN_SYSTEM_HEADER (decl))\n-    diagnostic_for_decl (&diagnostic, decl);\n-  VA_CLOSE (ap);\n-}\n-\n-/* Just apologize with MSGID.  */\n-void\n-sorry VPARAMS ((const char *msgid, ...))\n-{\n-  diagnostic_info diagnostic;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  ++sorrycount;\n-  diagnostic_set_info (&diagnostic, _(msgid), &ap,\n-                       input_filename, input_line, DK_SORRY);\n-\n-  output_set_prefix\n-    (&global_dc->buffer, diagnostic_build_prefix (&diagnostic));\n-  output_format (&global_dc->buffer, &diagnostic.message);\n-  output_flush (&global_dc->buffer);\n-  VA_CLOSE (ap);\n-}\n-\n /* Called when the start of a function definition is parsed,\n    this function prints on stderr the name of the function.  */\n void\n@@ -1080,107 +957,183 @@ diagnostic_report_current_function (context)\n }\n \n void\n-error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n+diagnostic_report_current_module (context)\n+     diagnostic_context *context;\n {\n-  diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, tree, decl);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  diagnostic_set_info (&diagnostic, msgid, &ap,\n-                       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n-                       DK_ERROR);\n-  diagnostic_for_decl (&diagnostic, decl);\n-  VA_CLOSE (ap);\n-}\n+  struct file_stack *p;\n \n+  if (output_needs_newline (&context->buffer))\n+    {\n+      output_add_newline (&context->buffer);\n+      output_needs_newline (&context->buffer) = false;\n+    }\n \n-/* Report an error message.  The arguments are like that of printf.  */\n+  if (input_file_stack && input_file_stack->next != 0\n+      && diagnostic_last_module_changed (context))\n+    {\n+      for (p = input_file_stack->next; p; p = p->next)\n+\tif (p == input_file_stack->next)\n+\t  output_verbatim (&context->buffer,\n+                           \"In file included from %s:%d\",\n+\t\t\t   p->location.file, p->location.line);\n+\telse\n+\t  output_verbatim (&context->buffer,\n+                           \",\\n                 from %s:%d\",\n+\t\t\t   p->location.file, p->location.line);\n+      output_verbatim (&context->buffer, \":\\n\");\n+      diagnostic_set_last_module (context);\n+    }\n+}\n \n-void\n-error VPARAMS ((const char *msgid, ...))\n+static void\n+default_diagnostic_starter (context, diagnostic)\n+     diagnostic_context *context;\n+     diagnostic_info *diagnostic;\n {\n-  diagnostic_info diagnostic;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  diagnostic_report_current_function (context);\n+  output_set_prefix (&context->buffer, diagnostic_build_prefix (diagnostic));\n+}\n \n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n-                       DK_ERROR);\n-  report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+static void\n+default_diagnostic_finalizer (context, diagnostic)\n+     diagnostic_context *context;\n+     diagnostic_info *diagnostic __attribute__((unused));\n+{\n+  output_destroy_prefix (&context->buffer);\n }\n \n-/* Likewise, except that the compilation is terminated after printing the\n-   error message.  */\n+/* Report a diagnostic message (an error or a warning) as specified by\n+   DC.  This function is *the* subroutine in terms of which front-ends\n+   should implement their specific diagnostic handling modules.  The\n+   front-end independent format specifiers are exactly those described\n+   in the documentation of output_format.  */\n \n void\n-fatal_error VPARAMS ((const char *msgid, ...))\n+diagnostic_report_diagnostic (context, diagnostic)\n+     diagnostic_context *context;\n+     diagnostic_info *diagnostic;\n {\n-  diagnostic_info diagnostic;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  if (context->lock++)\n+    error_recursion (context);\n \n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n-                       DK_FATAL);\n-  report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  if (diagnostic_count_diagnostic (context, diagnostic->kind))\n+    {\n+      (*diagnostic_starter (context)) (context, diagnostic);\n+      output_format (&context->buffer, &diagnostic->message);\n+      (*diagnostic_finalizer (context)) (context, diagnostic);\n+      output_flush (&context->buffer);\n+    }\n \n-  fnotice (stderr, \"compilation terminated.\\n\");\n-  exit (FATAL_EXIT_CODE);\n+  if (context->abort_on_error && diagnostic->kind <= DK_ERROR)\n+    real_abort();\n+  --context->lock;\n }\n \n-void\n-internal_error VPARAMS ((const char *msgid, ...))\n+/* Report a diagnostic MESSAGE at the declaration DECL.\n+   MSG is a format string which uses %s to substitute the declaration\n+   name; subsequent substitutions are a la output_format.  */\n+static void\n+diagnostic_for_decl (diagnostic, decl)\n+     diagnostic_info *diagnostic;\n+     tree decl;\n {\n-  diagnostic_info diagnostic;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  if (global_dc->lock)\n+  if (global_dc->lock++)\n     error_recursion (global_dc);\n \n-#ifndef ENABLE_CHECKING\n-  if (errorcount > 0 || sorrycount > 0)\n+  if (diagnostic_count_diagnostic (global_dc, diagnostic->kind))\n     {\n-      fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n-\t       input_filename, input_line);\n-      exit (FATAL_EXIT_CODE);\n+      diagnostic_report_current_function (global_dc);\n+      output_set_prefix\n+\t(&global_dc->buffer, diagnostic_build_prefix (diagnostic));\n+      format_with_decl (&global_dc->buffer, &diagnostic->message, decl);\n+      output_flush (&global_dc->buffer);\n+      output_destroy_prefix (&global_dc->buffer);\n     }\n-#endif\n+  global_dc->lock--;\n+}\n \n-  if (global_dc->internal_error != 0)\n-    (*global_dc->internal_error) (_(msgid), &ap);\n+/* Given a partial pathname as input, return another pathname that\n+   shares no directory elements with the pathname of __FILE__.  This\n+   is used by fancy_abort() to print `Internal compiler error in expr.c'\n+   instead of `Internal compiler error in ../../GCC/gcc/expr.c'.  */\n \n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n-                       DK_ICE);\n-  report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+const char *\n+trim_filename (name)\n+     const char *name;\n+{\n+  static const char this_file[] = __FILE__;\n+  const char *p = name, *q = this_file;\n \n-  fnotice (stderr,\n-\"Please submit a full bug report,\\n\\\n-with preprocessed source if appropriate.\\n\\\n-See %s for instructions.\\n\", bug_report_url);\n-  exit (FATAL_EXIT_CODE);\n+  /* First skip any \"../\" in each filename.  This allows us to give a proper\n+     reference to a file in a subdirectory.  */\n+  while (p[0] == '.' && p[1] == '.'\n+\t && (p[2] == DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t     || p[2] == DIR_SEPARATOR_2\n+#endif\n+\t     ))\n+    p += 3;\n+\n+  while (q[0] == '.' && q[1] == '.'\n+\t && (q[2] == DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t     || p[2] == DIR_SEPARATOR_2\n+#endif\n+\t     ))\n+    q += 3;\n+\n+  /* Now skip any parts the two filenames have in common.  */\n+  while (*p == *q && *p != 0 && *q != 0)\n+    p++, q++;\n+\n+  /* Now go backwards until the previous directory separator.  */\n+  while (p > name && p[-1] != DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t && p[-1] != DIR_SEPARATOR_2\n+#endif\n+\t )\n+    p--;\n+\n+  return p;\n }\n+\f\n+/* Standard error reporting routines in increasing order of severity.\n+   All of these take arguments like printf.  */\n \n+/* Text to be emitted verbatim to the error message stream; this\n+   produces no prefix and disables line-wrapping.  Use rarely.  */\n void\n-warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n+verbatim VPARAMS ((const char *msgid, ...))\n+{\n+  text_info text;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n+  text.format_spec = _(msgid);\n+  text.args_ptr = &ap;\n+  output_do_verbatim (&global_dc->buffer, &text);\n+  output_buffer_to_stream (&global_dc->buffer);\n+  VA_CLOSE (ap);\n+}\n+\n+/* An informative note.  Use this for additional details on an error\n+   message.  */\n+void\n+inform VPARAMS ((const char *msgid, ...))\n {\n   diagnostic_info diagnostic;\n+\n   VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, tree, decl);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  diagnostic_set_info (&diagnostic, msgid, &ap,\n-                       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n-                       DK_WARNING);\n-  diagnostic_for_decl (&diagnostic, decl);\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n+                       DK_NOTE);\n+  report_diagnostic (&diagnostic);\n   VA_CLOSE (ap);\n }\n \n+/* A warning.  Use this for code which is correct according to the\n+   relevant language specification but is likely to be buggy anyway.  */\n void\n warning VPARAMS ((const char *msgid, ...))\n {\n@@ -1195,188 +1148,198 @@ warning VPARAMS ((const char *msgid, ...))\n   VA_CLOSE (ap);\n }\n \n+/* A \"pedantic\" warning.  Use this for code which triggers a\n+   diagnostic which is required by the relevant language\n+   specification, but which is considered unhelpful (i.e. there isn't\n+   anything *really* wrong with the construct in the language as she\n+   is spoke).  It is a normal warning unless -pedantic-errors is\n+   applied, which turns it into an error.  Note that pedwarn-s still\n+   happen if -pedantic is not given; you must write\n+   \"if (pedantic) pedwarn (...)\" to get a warning enabled only under\n+   -pedantic.  All such warnings should, however, use pedwarn.  */\n+void\n+pedwarn VPARAMS ((const char *msgid, ...))\n+{\n+  diagnostic_info diagnostic;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-/* Same as above but use diagnostic_buffer.  */\n+  diagnostic_set_info (&diagnostic, _(msgid), &ap, input_filename, input_line,\n+                       pedantic_error_kind ());\n+  report_diagnostic (&diagnostic);\n+  VA_CLOSE (ap);\n+}\n \n+/* A hard error: the code is definitely ill-formed, and an object file\n+   will not be produced.  */\n void\n-verbatim VPARAMS ((const char *msgid, ...))\n+error VPARAMS ((const char *msgid, ...))\n {\n-  text_info text;\n+  diagnostic_info diagnostic;\n+\n   VA_OPEN (ap, msgid);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  text.format_spec = _(msgid);\n-  text.args_ptr = &ap;\n-  output_do_verbatim (&global_dc->buffer, &text);\n-  output_buffer_to_stream (&global_dc->buffer);\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n+                       DK_ERROR);\n+  report_diagnostic (&diagnostic);\n   VA_CLOSE (ap);\n }\n \n-/* Report a diagnostic message (an error or a warning) as specified by\n-   DC.  This function is *the* subroutine in terms of which front-ends\n-   should implement their specific diagnostic handling modules.  The\n-   front-end independent format specifiers are exactly those described\n-   in the documentation of output_format.  */\n-\n+/* \"Sorry, not implemented.\"  Use for a language feature which is\n+   required by the relevant specification but not implemented by GCC.\n+   An object file will not be produced.  */\n void\n-diagnostic_report_diagnostic (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic;\n+sorry VPARAMS ((const char *msgid, ...))\n {\n-  if (context->lock++)\n-    error_recursion (context);\n+  diagnostic_info diagnostic;\n \n-  if (diagnostic_count_diagnostic (context, diagnostic->kind))\n-    {\n-      (*diagnostic_starter (context)) (context, diagnostic);\n-      output_format (&context->buffer, &diagnostic->message);\n-      (*diagnostic_finalizer (context)) (context, diagnostic);\n-      output_flush (&context->buffer);\n-    }\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-  if (context->abort_on_error && diagnostic->kind <= DK_ERROR)\n-    real_abort();\n-  --context->lock;\n-}\n+  ++sorrycount;\n+  diagnostic_set_info (&diagnostic, _(msgid), &ap,\n+                       input_filename, input_line, DK_SORRY);\n \n-/* Inform the user that an error occurred while trying to report some\n-   other error.  This indicates catastrophic internal inconsistencies,\n-   so give up now.  But do try to flush out the previous error.\n-   This mustn't use internal_error, that will cause infinite recursion.  */\n+  output_set_prefix\n+    (&global_dc->buffer, diagnostic_build_prefix (&diagnostic));\n+  output_format (&global_dc->buffer, &diagnostic.message);\n+  output_flush (&global_dc->buffer);\n+  VA_CLOSE (ap);\n+}\n \n-static void\n-error_recursion (context)\n-     diagnostic_context *context;\n+/* An error which is severe enough that we make no attempt to\n+   continue.  Do not use this for internal consistency checks; that's\n+   internal_error.  Use of this function should be rare.  */\n+void\n+fatal_error VPARAMS ((const char *msgid, ...))\n {\n-  if (context->lock < 3)\n-    output_flush (&context->buffer);\n+  diagnostic_info diagnostic;\n \n-  fnotice (stderr,\n-\t   \"Internal compiler error: Error reporting routines re-entered.\\n\");\n-  fnotice (stderr,\n-\"Please submit a full bug report,\\n\\\n-with preprocessed source if appropriate.\\n\\\n-See %s for instructions.\\n\", bug_report_url);\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n+                       DK_FATAL);\n+  report_diagnostic (&diagnostic);\n+  VA_CLOSE (ap);\n+\n+  fnotice (stderr, \"compilation terminated.\\n\");\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* Given a partial pathname as input, return another pathname that\n-   shares no directory elements with the pathname of __FILE__.  This\n-   is used by fancy_abort() to print `Internal compiler error in expr.c'\n-   instead of `Internal compiler error in ../../GCC/gcc/expr.c'.  */\n-\n-const char *\n-trim_filename (name)\n-     const char *name;\n+/* An internal consistency check has failed.  We make no attempt to\n+   continue.  Note that unless there is debugging value to be had from\n+   a more specific message, or some other good reason, you should use\n+   abort () instead of calling this function directly.  */\n+void\n+internal_error VPARAMS ((const char *msgid, ...))\n {\n-  static const char this_file[] = __FILE__;\n-  const char *p = name, *q = this_file;\n+  diagnostic_info diagnostic;\n \n-  /* First skip any \"../\" in each filename.  This allows us to give a proper\n-     reference to a file in a subdirectory.  */\n-  while (p[0] == '.' && p[1] == '.'\n-\t && (p[2] == DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t     || p[2] == DIR_SEPARATOR_2\n-#endif\n-\t     ))\n-    p += 3;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-  while (q[0] == '.' && q[1] == '.'\n-\t && (q[2] == DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t     || p[2] == DIR_SEPARATOR_2\n+  if (global_dc->lock)\n+    error_recursion (global_dc);\n+\n+#ifndef ENABLE_CHECKING\n+  if (errorcount > 0 || sorrycount > 0)\n+    {\n+      fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n+\t       input_filename, input_line);\n+      exit (FATAL_EXIT_CODE);\n+    }\n #endif\n-\t     ))\n-    q += 3;\n \n-  /* Now skip any parts the two filenames have in common.  */\n-  while (*p == *q && *p != 0 && *q != 0)\n-    p++, q++;\n+  if (global_dc->internal_error != 0)\n+    (*global_dc->internal_error) (_(msgid), &ap);\n \n-  /* Now go backwards until the previous directory separator.  */\n-  while (p > name && p[-1] != DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t && p[-1] != DIR_SEPARATOR_2\n-#endif\n-\t )\n-    p--;\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n+                       DK_ICE);\n+  report_diagnostic (&diagnostic);\n+  VA_CLOSE (ap);\n \n-  return p;\n+  fnotice (stderr,\n+\"Please submit a full bug report,\\n\\\n+with preprocessed source if appropriate.\\n\\\n+See %s for instructions.\\n\", bug_report_url);\n+  exit (FATAL_EXIT_CODE);\n }\n-\n-/* Report an internal compiler error in a friendly manner and without\n-   dumping core.  */\n+\f\n+/* Variants of some of the above, which make reference to a particular\n+   DECL node.  These are deprecated.  */\n \n void\n-fancy_abort (file, line, function)\n-     const char *file;\n-     int line;\n-     const char *function;\n+warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n-  internal_error (\"in %s, at %s:%d\", function, trim_filename (file), line);\n+  diagnostic_info diagnostic;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, tree, decl);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n+  diagnostic_set_info (&diagnostic, msgid, &ap,\n+                       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n+                       DK_WARNING);\n+  diagnostic_for_decl (&diagnostic, decl);\n+  VA_CLOSE (ap);\n }\n \n void\n-diagnostic_report_current_module (context)\n-     diagnostic_context *context;\n+pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n-  struct file_stack *p;\n+  diagnostic_info diagnostic;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, tree, decl);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-  if (output_needs_newline (&context->buffer))\n-    {\n-      output_add_newline (&context->buffer);\n-      output_needs_newline (&context->buffer) = false;\n-    }\n+  diagnostic_set_info (&diagnostic, _(msgid), &ap,\n+                       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n+                       pedantic_error_kind ());\n \n-  if (input_file_stack && input_file_stack->next != 0\n-      && diagnostic_last_module_changed (context))\n-    {\n-      for (p = input_file_stack->next; p; p = p->next)\n-\tif (p == input_file_stack->next)\n-\t  output_verbatim (&context->buffer,\n-                           \"In file included from %s:%d\",\n-\t\t\t   p->location.file, p->location.line);\n-\telse\n-\t  output_verbatim (&context->buffer,\n-                           \",\\n                 from %s:%d\",\n-\t\t\t   p->location.file, p->location.line);\n-      output_verbatim (&context->buffer, \":\\n\");\n-      diagnostic_set_last_module (context);\n-    }\n+  /* We don't want -pedantic-errors to cause the compilation to fail from\n+     \"errors\" in system header files.  Sometimes fixincludes can't fix what's\n+     broken (eg: unsigned char bitfields - fixing it may change the alignment\n+     which will cause programs to mysteriously fail because the C library\n+     or kernel uses the original layout).  There's no point in issuing a\n+     warning either, it's just unnecessary noise.  */\n+  if (!DECL_IN_SYSTEM_HEADER (decl))\n+    diagnostic_for_decl (&diagnostic, decl);\n+  VA_CLOSE (ap);\n }\n \n-static void\n-default_diagnostic_starter (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic;\n+void\n+error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n-  diagnostic_report_current_function (context);\n-  output_set_prefix (&context->buffer, diagnostic_build_prefix (diagnostic));\n-}\n+  diagnostic_info diagnostic;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, tree, decl);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-static void\n-default_diagnostic_finalizer (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic __attribute__((unused));\n-{\n-  output_destroy_prefix (&context->buffer);\n+  diagnostic_set_info (&diagnostic, msgid, &ap,\n+                       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n+                       DK_ERROR);\n+  diagnostic_for_decl (&diagnostic, decl);\n+  VA_CLOSE (ap);\n }\n+\f\n+/* Special case error functions.  Most are implemented in terms of the\n+   above, or should be.  */\n \n+/* Print a diagnostic MSGID on FILE.  This is just fprintf, except it\n+   runs its second argument through gettext.  */\n void\n-inform VPARAMS ((const char *msgid, ...))\n+fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n {\n-  diagnostic_info diagnostic;\n-\n   VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, FILE *, file);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n-                       DK_NOTE);\n-  report_diagnostic (&diagnostic);\n+  vfprintf (file, _(msgid), ap);\n   VA_CLOSE (ap);\n }\n \n+/* Warn about a use of an identifier which was marked deprecated.  */\n void\n warn_deprecated_use (node)\n      tree node;\n@@ -1415,6 +1378,58 @@ warn_deprecated_use (node)\n     }\n }\n \n+/* Print a fatal I/O error message.  Argument are like printf.\n+   Also include a system error message based on `errno'.  */\n+void\n+fatal_io_error VPARAMS ((const char *msgid, ...))\n+{\n+  text_info text;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n+  text.format_spec = _(msgid);\n+  text.args_ptr = &ap;\n+  output_printf (&global_dc->buffer, \"%s: %s: \", progname, xstrerror (errno));\n+  output_format (&global_dc->buffer, &text);\n+  output_flush (&global_dc->buffer);\n+  VA_CLOSE (ap);\n+  exit (FATAL_EXIT_CODE);\n+}\n+\n+/* Inform the user that an error occurred while trying to report some\n+   other error.  This indicates catastrophic internal inconsistencies,\n+   so give up now.  But do try to flush out the previous error.\n+   This mustn't use internal_error, that will cause infinite recursion.  */\n+\n+static void\n+error_recursion (context)\n+     diagnostic_context *context;\n+{\n+  if (context->lock < 3)\n+    output_flush (&context->buffer);\n+\n+  fnotice (stderr,\n+\t   \"Internal compiler error: Error reporting routines re-entered.\\n\");\n+  fnotice (stderr,\n+\"Please submit a full bug report,\\n\\\n+with preprocessed source if appropriate.\\n\\\n+See %s for instructions.\\n\", bug_report_url);\n+  exit (FATAL_EXIT_CODE);\n+}\n+\n+/* Report an internal compiler error in a friendly manner.  This is\n+   the function that gets called upon use of abort() in the source\n+   code generally, thanks to a special macro.  */\n+\n+void\n+fancy_abort (file, line, function)\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  internal_error (\"in %s, at %s:%d\", function, trim_filename (file), line);\n+}\n+\n /* Really call the system 'abort'.  This has to go right at the end of\n    this file, so that there are no functions after it that call abort\n    and get the system abort instead of our macro.  */"}]}