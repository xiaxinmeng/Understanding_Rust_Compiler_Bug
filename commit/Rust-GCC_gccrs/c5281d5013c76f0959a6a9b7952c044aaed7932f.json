{"sha": "c5281d5013c76f0959a6a9b7952c044aaed7932f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyODFkNTAxM2M3NmYwOTU5YTZhOWI3OTUyYzA0NGFhZWQ3OTMyZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-10-29T08:44:28Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-10-29T08:44:28Z"}, "message": "Remove misleading sorting function in ggc memory report.\n\n2019-10-29  Martin Liska  <mliska@suse.cz>\n\n\t* cgraphunit.c (symbol_table::compile): Remove argument\n\tfor dump_memory_report.\n\t* ggc-common.c (dump_ggc_loc_statistics): Likewise.\n\t(compare_final): Remove in order to make report\n\tbetter readable.\n\t* ggc.h (dump_ggc_loc_statistics):  Remove argument.\n\t* mem-stats.h (mem_alloc_description::get_list):\n\tDo not pass cmp.\n\t(mem_alloc_description::dump): Likewise here.\n\t* toplev.c (dump_memory_report): Remove final\n\targument.\n\t(finalize): Likewise.\n\t* toplev.h (dump_memory_report): Remove argument.\n2019-10-29  Martin Liska  <mliska@suse.cz>\n\n\t* lto.c (do_whole_program_analysis): Remove argument.\n\nFrom-SVN: r277557", "tree": {"sha": "9f23eb7e05b8668df00c87c25029d83f412bef5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f23eb7e05b8668df00c87c25029d83f412bef5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5281d5013c76f0959a6a9b7952c044aaed7932f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5281d5013c76f0959a6a9b7952c044aaed7932f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5281d5013c76f0959a6a9b7952c044aaed7932f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5281d5013c76f0959a6a9b7952c044aaed7932f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bc67182b6500b942674d6031c1bf0f02c779cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc67182b6500b942674d6031c1bf0f02c779cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc67182b6500b942674d6031c1bf0f02c779cbd"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "1942f4e315a1f6aa78794b0fc0fe0b5f0b414a42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -1,3 +1,19 @@\n+2019-10-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraphunit.c (symbol_table::compile): Remove argument\n+\tfor dump_memory_report.\n+\t* ggc-common.c (dump_ggc_loc_statistics): Likewise.\n+\t(compare_final): Remove in order to make report\n+\tbetter readable.\n+\t* ggc.h (dump_ggc_loc_statistics):  Remove argument.\n+\t* mem-stats.h (mem_alloc_description::get_list):\n+\tDo not pass cmp.\n+\t(mem_alloc_description::dump): Likewise here.\n+\t* toplev.c (dump_memory_report): Remove final\n+\targument.\n+\t(finalize): Likewise.\n+\t* toplev.h (dump_memory_report): Remove argument.\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_sve_cmp_immediate_p)"}, {"sha": "9873b9b7aac303f453e96b132784cdda35cabbfe", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -2604,7 +2604,7 @@ symbol_table::compile (void)\n   if (pre_ipa_mem_report)\n     {\n       fprintf (stderr, \"Memory consumption before IPA\\n\");\n-      dump_memory_report (false);\n+      dump_memory_report ();\n     }\n   if (!quiet_flag)\n     fprintf (stderr, \"Performing interprocedural optimizations\\n\");\n@@ -2639,7 +2639,7 @@ symbol_table::compile (void)\n   if (post_ipa_mem_report)\n     {\n       fprintf (stderr, \"Memory consumption after IPA\\n\");\n-      dump_memory_report (false);\n+      dump_memory_report ();\n     }\n   timevar_pop (TV_CGRAPHOPT);\n "}, {"sha": "8bc77a0a0366b9c25ddda8fd719a6a34da7db93c", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -933,21 +933,6 @@ class ggc_usage: public mem_usage\n     return s.second->get_balance () - f.second->get_balance ();\n   }\n \n-  /* Compare rows in final GGC summary dump.  */\n-  static int\n-  compare_final (const void *first, const void *second)\n-  {\n-    typedef std::pair<mem_location *, ggc_usage *> mem_pair_t;\n-\n-    const ggc_usage *f = ((const mem_pair_t *)first)->second;\n-    const ggc_usage *s = ((const mem_pair_t *)second)->second;\n-\n-    size_t a = f->m_allocated + f->m_overhead - f->m_freed;\n-    size_t b = s->m_allocated + s->m_overhead - s->m_freed;\n-\n-    return a == b ? 0 : (a < b ? 1 : -1);\n-  }\n-\n   /* Dump header with NAME.  */\n   static inline void\n   dump_header (const char *name)\n@@ -970,15 +955,15 @@ static mem_alloc_description<ggc_usage> ggc_mem_desc;\n /* Dump per-site memory statistics.  */\n \n void\n-dump_ggc_loc_statistics (bool final)\n+dump_ggc_loc_statistics ()\n {\n   if (! GATHER_STATISTICS)\n     return;\n \n   ggc_force_collect = true;\n   ggc_collect ();\n \n-  ggc_mem_desc.dump (GGC_ORIGIN, final ? ggc_usage::compare_final : NULL);\n+  ggc_mem_desc.dump (GGC_ORIGIN);\n \n   ggc_force_collect = false;\n }"}, {"sha": "64d1f188eb0b74264f15d5c0b78d0b3cb2d34787", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -149,7 +149,7 @@ extern void *ggc_realloc (void *, size_t CXX_MEM_STAT_INFO);\n /* Free a block.  To be used when known for certain it's not reachable.  */\n extern void ggc_free (void *);\n \n-extern void dump_ggc_loc_statistics (bool);\n+extern void dump_ggc_loc_statistics ();\n \n /* Reallocator.  */\n #define GGC_RESIZEVEC(T, P, N) \\"}, {"sha": "2aefc366701601317dd262b4f98ef74a2427e8ed", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -1,3 +1,7 @@\n+2019-10-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto.c (do_whole_program_analysis): Remove argument.\n+\n 2019-10-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-partition.c (add_symbol_to_partition_1): Update."}, {"sha": "5dca73ffdb38c85a214c8b113928ab0a88b6969c", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -457,7 +457,7 @@ do_whole_program_analysis (void)\n   if (pre_ipa_mem_report)\n     {\n       fprintf (stderr, \"Memory consumption before IPA\\n\");\n-      dump_memory_report (false);\n+      dump_memory_report ();\n     }\n \n   symtab->function_flags_ready = true;\n@@ -539,14 +539,14 @@ do_whole_program_analysis (void)\n   if (post_ipa_mem_report)\n     {\n       fprintf (stderr, \"Memory consumption after IPA\\n\");\n-      dump_memory_report (false);\n+      dump_memory_report ();\n     }\n \n   /* Show the LTO report before launching LTRANS.  */\n   if (flag_lto_report || (flag_wpa && flag_lto_report_wpa))\n     print_lto_report_1 ();\n   if (mem_report_wpa)\n-    dump_memory_report (true);\n+    dump_memory_report ();\n }\n \n /* Create artificial pointers for \"omp declare target link\" vars.  */"}, {"sha": "c2329c2b14d96bc6d22c30d47c69e349119c5de0", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -361,14 +361,11 @@ class mem_alloc_description\n      are filtered by ORIGIN type, LENGTH is return value where we register\n      the number of elements in the list. If we want to process custom order,\n      CMP comparator can be provided.  */\n-  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length,\n-\t\t\tint (*cmp) (const void *first,\n-\t\t\t\t    const void *second) = NULL);\n+  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length);\n \n   /* Dump all tracked instances of type ORIGIN. If we want to process custom\n      order, CMP comparator can be provided.  */\n-  void dump (mem_alloc_origin origin,\n-\t     int (*cmp) (const void *first, const void *second) = NULL);\n+  void dump (mem_alloc_origin origin);\n \n   /* Reverse object map used for every object allocation mapping.  */\n   reverse_object_map_t *m_reverse_object_map;\n@@ -593,9 +590,7 @@ mem_alloc_description<T>::~mem_alloc_description ()\n template <class T>\n inline\n typename mem_alloc_description<T>::mem_list_t *\n-mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length,\n-\t\t\t\t    int (*cmp) (const void *first,\n-\t\t\t\t\t\tconst void *second))\n+mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length)\n {\n   /* vec data structure is not used because all vectors generate memory\n      allocation info a it would create a cycle.  */\n@@ -608,7 +603,7 @@ mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length,\n     if ((*it).first->m_origin == origin)\n       list[i++] = std::pair<mem_location*, T*> (*it);\n \n-  qsort (list, i, element_size, cmp == NULL ? T::compare : cmp);\n+  qsort (list, i, element_size, T::compare);\n   *length = i;\n \n   return list;\n@@ -637,15 +632,13 @@ mem_alloc_description<T>::get_sum (mem_alloc_origin origin)\n \n template <class T>\n inline void\n-mem_alloc_description<T>::dump (mem_alloc_origin origin,\n-\t\t\t\tint (*cmp) (const void *first,\n-\t\t\t\t\t    const void *second))\n+mem_alloc_description<T>::dump (mem_alloc_origin origin)\n {\n   unsigned length;\n \n   fprintf (stderr, \"\\n\");\n \n-  mem_list_t *list = get_list (origin, &length, cmp);\n+  mem_list_t *list = get_list (origin, &length);\n   T total = get_sum (origin);\n \n   T::print_dash_line ();"}, {"sha": "8a152b8e3b144b79f6b24aa09d9ff099e560a684", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -1994,7 +1994,7 @@ target_reinit (void)\n }\n \n void\n-dump_memory_report (bool final)\n+dump_memory_report ()\n {\n   dump_line_table_statistics ();\n   ggc_print_statistics ();\n@@ -2006,7 +2006,7 @@ dump_memory_report (bool final)\n   dump_bitmap_statistics ();\n   dump_hash_table_loc_statistics ();\n   dump_vec_loc_statistics ();\n-  dump_ggc_loc_statistics (final);\n+  dump_ggc_loc_statistics ();\n   dump_alias_stats (stderr);\n   dump_pta_stats (stderr);\n }\n@@ -2058,7 +2058,7 @@ finalize (bool no_backend)\n     }\n \n   if (mem_report)\n-    dump_memory_report (true);\n+    dump_memory_report ();\n \n   if (profile_report)\n     dump_profile_report ();"}, {"sha": "91e346570db49e0b63e6e414a9971486d92748de", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5281d5013c76f0959a6a9b7952c044aaed7932f/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=c5281d5013c76f0959a6a9b7952c044aaed7932f", "patch": "@@ -66,7 +66,7 @@ extern bool wrapup_global_declarations (tree *, int);\n \n extern void global_decl_processing (void);\n \n-extern void dump_memory_report (bool);\n+extern void dump_memory_report ();\n extern void dump_profile_report (void);\n \n extern void target_reinit (void);"}]}