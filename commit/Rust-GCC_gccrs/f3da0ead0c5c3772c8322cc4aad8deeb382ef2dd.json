{"sha": "f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkYTBlYWQwYzVjMzc3MmM4MzIyY2M0YWFkOGRlZWIzODJlZjJkZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-12-20T03:21:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-20T03:21:25Z"}, "message": "tree.c (get_unwidened): Decide whether to narrow a bitfield reference based on TYPE_SIZE...\n\n        * tree.c (get_unwidened): Decide whether to narrow a bitfield\n        reference based on TYPE_SIZE, not TYPE_PRECISION.\n        * cp/cvt.c (convert_to_void): Don't warn about the RHS of a comma\n        being useless if TREE_NO_UNUSED_WARNING is set.\n\n        * stmt.c (parse_output_constraint): Warn about in-out constraint\n        that doesn't allow a register.\n        (parse_input_constraint): Warn about matching constraint that\n        doesn't allow a register.\n\nFrom-SVN: r74871", "tree": {"sha": "9bb4e10d802613726fd9fcebe175b05cee831ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bb4e10d802613726fd9fcebe175b05cee831ce4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46eb4b398948ddef881e51b9c49d96e242d56002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eb4b398948ddef881e51b9c49d96e242d56002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46eb4b398948ddef881e51b9c49d96e242d56002"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "a8b38dff93fdb5e83ac321fe84f412989cb3e7ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "patch": "@@ -1,3 +1,13 @@\n+2003-12-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (get_unwidened): Decide whether to narrow a bitfield\n+\treference based on TYPE_SIZE, not TYPE_PRECISION.\n+\n+\t* stmt.c (parse_output_constraint): Warn about in-out constraint\n+\tthat doesn't allow a register.\n+\t(parse_input_constraint): Warn about matching constraint that\n+\tdoesn't allow a register.\n+\n 2003-12-19  James E Wilson  <wilson@specifixinc.com>\n \n \t* flow.c (mark_set_regs, case PARALLEL): Scan loop forwards.\n@@ -27,10 +37,12 @@\n \tdecimal formats.\n \n 2003-12-19  Stuart Hastings  <stuart@apple.com>\n+\n \t* gcc/config/i386/i386.c (ix86_expand_call, x86_output_mi_thunk):\n \tTrivial fixes for i386.c on Darwin/x86.\n \t\n 2003-12-19  Fariborz Jahanian <fjahanian@apple.com>\n+\n         * config/rs6000/rs6000.c (legitimate_lo_sum_address_p): Add code to\n         recognize macho-style lo_sum adrress patterns.\n "}, {"sha": "91fb9df30792d482e4c6cdc4348040fd6e3c58f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "patch": "@@ -24,6 +24,8 @@\n \n \tPR c++/13371\n \t* typeck.c (build_modify_expr): Stabilize lhs if we're narrowing.\n+\t* cvt.c (convert_to_void): Don't warn about the RHS of a comma\n+\tbeing useless if TREE_NO_UNUSED_WARNING is set.\n \n 2003-12-18  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "6d4b961f7288be25f2613cc26304dbee813a444a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "patch": "@@ -817,7 +817,8 @@ convert_to_void (tree expr, const char *implicit)\n         /* The second part of a compound expr contains the value.  */\n         tree op1 = TREE_OPERAND (expr,1);\n         tree new_op1 = convert_to_void\n-\t  (op1, implicit ? \"right-hand operand of comma\" : NULL);\n+\t  (op1, (implicit && !TREE_NO_UNUSED_WARNING (expr)\n+\t\t ? \"right-hand operand of comma\" : NULL));\n         \n         if (new_op1 != op1)\n \t  {"}, {"sha": "7b388dd6c1d8ff58253dc00abaa4b0a337447e2c", "filename": "gcc/stmt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "patch": "@@ -1254,6 +1254,9 @@ parse_output_constraint (const char **constraint_p, int operand_num,\n \tbreak;\n       }\n \n+  if (*is_inout && !*allows_reg)\n+    warning (\"read-write constraint does not allow a register\");\n+\n   return true;\n }\n \n@@ -1269,6 +1272,7 @@ parse_input_constraint (const char **constraint_p, int input_num,\n   const char *orig_constraint = constraint;\n   size_t c_len = strlen (constraint);\n   size_t j;\n+  bool saw_match = false;\n \n   /* Assume the constraint doesn't allow the use of either\n      a register or memory.  */\n@@ -1320,6 +1324,8 @@ parse_input_constraint (const char **constraint_p, int input_num,\n \t  char *end;\n \t  unsigned long match;\n \n+\t  saw_match = true;\n+\n \t  match = strtoul (constraint + j, &end, 10);\n \t  if (match >= (unsigned long) noutputs)\n \t    {\n@@ -1384,6 +1390,9 @@ parse_input_constraint (const char **constraint_p, int input_num,\n \tbreak;\n       }\n \n+  if (saw_match && !*allows_reg)\n+    warning (\"matching constraint does not allow a register\");\n+\n   return true;\n }\n "}, {"sha": "b252a67c354c0e815b0998653d8043d8ae0edc87", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f3da0ead0c5c3772c8322cc4aad8deeb382ef2dd", "patch": "@@ -4123,7 +4123,7 @@ get_unwidened (tree op, tree for_type)\n \t The resulting extension to its nominal type (a fullword type)\n \t must fit the same conditions as for other extensions.  */\n \n-      if (innerprec < TYPE_PRECISION (TREE_TYPE (op))\n+      if (INT_CST_LT_UNSIGNED (TYPE_SIZE (type), TYPE_SIZE (TREE_TYPE (op)))\n \t  && (for_type || ! DECL_BIT_FIELD (TREE_OPERAND (op, 1)))\n \t  && (! uns || final_prec <= innerprec || unsignedp)\n \t  && type != 0)"}]}