{"sha": "b27c10823418d58d70274ee3a7378e1aca21d418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3YzEwODIzNDE4ZDU4ZDcwMjc0ZWUzYTczNzhlMWFjYTIxZDQxOA==", "commit": {"author": {"name": "Matt Thomas", "email": "matt@3am-software.com", "date": "2019-06-14T14:04:20Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-06-14T14:04:20Z"}, "message": "[NetBSD] Add support for the Arm EABI.\n\nThis is a roll-up of a set of changes needed to support the Arm EABI on NetBSD.\n\n2019-06-14  Matt Thomas  <matt@3am-software.com>\n\t    Matthew Green  <mrg@eterna.com.au>\n\t    Nick Hudson  <skrll@netbsd.org>\n\t    Maya Rashish  <coypu@sdf.org>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\ngcc:\n\n\t* config.gcc (arm*-*-netbsdelf*) Add support for EABI configuration.\n\t* config.host (arm*-*-netbsd*): Use driver-arm.o on native NetBSD.\n\t* config/arm/netbsd-eabi.h: New file.\n\t* config/arm/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Undefine before\n\tredefining.\n\t(SUBTARGET_EXTRA_ASM_SPEC): Don't pass -matpcs to the assembler.\n\t* config/netbsd-elf.h (NETBSD_LINK_LD_ELF_SO_SPEC): New define.\n\t(NETBSD_SUBTARGET_EXTRA_SPECS): New define.\n\t(SUBTARGET_EXTRA_SPECS): Define to NETBSD_SUBTARGET_EXTRA_SPECS.\n\nlibatomic:\n\t* configure.tgt (arm*): Handle NetBSD in the same way as FreeBSD.\n\nlibgcc:\n\t* config.host (arm*-*-netbsdelf*): Add support for EABI configurations.\n\t* config/arm/t-netbsd (LIB1ASMFUNCS): Add some additional assembler\n\tfunctions to build.\n\t* config/arm/t-netbsd-eabi: New file.\n\n\nCo-Authored-By: Matthew Green <mrg@eterna.com.au>\nCo-Authored-By: Maya Rashish <coypu@sdf.org>\nCo-Authored-By: Nick Hudson <skrll@netbsd.org>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r272290", "tree": {"sha": "3717efc4e50692f14aa03eb5c08936d0273cdb42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3717efc4e50692f14aa03eb5c08936d0273cdb42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b27c10823418d58d70274ee3a7378e1aca21d418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27c10823418d58d70274ee3a7378e1aca21d418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27c10823418d58d70274ee3a7378e1aca21d418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27c10823418d58d70274ee3a7378e1aca21d418/comments", "author": null, "committer": null, "parents": [{"sha": "cc28d23496b014ae413a03923404fd45b1ba5f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc28d23496b014ae413a03923404fd45b1ba5f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc28d23496b014ae413a03923404fd45b1ba5f28"}], "stats": {"total": 249, "additions": 231, "deletions": 18}, "files": [{"sha": "f98290188c9c4140e32ff066b6353f4ae31858e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -1,3 +1,19 @@\n+2019-06-14  Matt Thomas  <matt@3am-software.com>\n+\t    Matthew Green  <mrg@eterna.com.au>\n+\t    Nick Hudson  <skrll@netbsd.org>\n+\t    Maya Rashish  <coypu@sdf.org>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config.gcc (arm*-*-netbsdelf*) Add support for EABI configuration.\n+\t* config.host (arm*-*-netbsd*): Use driver-arm.o on native NetBSD.\n+\t* config/arm/netbsd-eabi.h: New file.\n+\t* config/arm/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Undefine before\n+\tredefining.\n+\t(SUBTARGET_EXTRA_ASM_SPEC): Don't pass -matpcs to the assembler.\n+\t* config/netbsd-elf.h (NETBSD_LINK_LD_ELF_SO_SPEC): New define.\n+\t(NETBSD_SUBTARGET_EXTRA_SPECS): New define.\n+\t(SUBTARGET_EXTRA_SPECS): Define to NETBSD_SUBTARGET_EXTRA_SPECS.\n+\n 2019-06-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-loop-distribution.c (classify_partition): Return"}, {"sha": "8f864c8e1f5f21029e512e40fafcbedf475182e2", "filename": "gcc/config.gcc", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -1162,10 +1162,35 @@ arm*-*-freebsd*)                # ARM FreeBSD EABI\n \twith_tls=${with_tls:-gnu}\n \t;;\n arm*-*-netbsdelf*)\n-\ttm_file=\"dbxelf.h elfos.h ${nbsd_tm_file} arm/elf.h arm/aout.h ${tm_file} arm/netbsd-elf.h\"\n-\textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n-\ttmake_file=\"${tmake_file} arm/t-arm\"\n \ttarget_cpu_cname=\"strongarm\"\n+\ttmake_file=\"${tmake_file} arm/t-arm\"\n+\ttm_file=\"dbxelf.h elfos.h ${nbsd_tm_file} arm/elf.h\"\n+\textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n+\tcase ${target} in\n+\tarm*eb-*) tm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\" ;;\n+\tesac\n+\tcase ${target} in\n+\tarm*-*-netbsdelf-*eabi*)\n+\t    tm_file=\"$tm_file arm/bpabi.h arm/netbsd-elf.h arm/netbsd-eabi.h\"\n+\t    tmake_file=\"$tmake_file arm/t-bpabi arm/t-netbsdeabi\"\n+\t    ;;\n+\t*)\n+\t    tm_file=\"$tm_file arm/netbsd-elf.h\"\n+\t    tmake_file=\"$tmake_file arm/t-netbsd\"\n+\t    ;;\n+\tesac\n+\ttm_file=\"${tm_file} arm/aout.h arm/arm.h\"\n+\tcase ${target} in\n+\tarm*-*-netbsdelf-*eabihf*)\n+\t    # Hard-float requires at least Arm v5te\n+\t    target_cpu_cname=\"arm10e\"\n+\t    tm_defines=\"${tm_defines} TARGET_DEFAULT_FLOAT_ABI=ARM_FLOAT_ABI_HARD\"\n+\t    ;;\n+\tesac\n+\tcase ${target} in\n+\tarmv6*) target_cpu_cname=\"arm1176jzf-s\";;\n+\tarmv7*) target_cpu_cname=\"generic-armv7-a\";;\n+\tesac\n \t;;\n arm*-*-linux-*)\t\t\t# ARM GNU/Linux with ELF\n \ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h linux-android.h glibc-stdint.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\""}, {"sha": "82409e32f9601226fbbb62a57206575c13a6e9c9", "filename": "gcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -107,7 +107,7 @@ case ${host} in\n \t;;\n     esac\n     ;;\n-  arm*-*-freebsd* | arm*-*-linux* | arm*-*-fuchsia*)\n+  arm*-*-freebsd* | arm*-*-netbsd* | arm*-*-linux* | arm*-*-fuchsia*)\n     case ${target} in\n       arm*-*-*)\n \thost_extra_gcc_objs=\"driver-arm.o\""}, {"sha": "5524b3747f96ce20e56f5da6629de18141d4e90f", "filename": "gcc/config/arm/netbsd-eabi.h", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -0,0 +1,105 @@\n+/* Definitions of target machine for GNU compiler, NetBSD/arm ELF version.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Contributed by Wasabi Systems, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Run-time Target Specification.  */\n+#undef MULTILIB_DEFAULTS\n+#define MULTILIB_DEFAULTS { \"mabi=aapcs-linux\" }\n+\n+#define TARGET_LINKER_EABI_SUFFIX_SOFT \\\n+  \"%{!mabi=apcs-gnu:%{!mabi=atpcs:%{mfloat-abi=hard:_eabihf;:_eabi}}}\"\n+#define TARGET_LINKER_EABI_SUFFIX_HARD \\\n+  \"%{!mabi=apcs-gnu:%{!mabi=atpcs:%{mfloat-abi=soft:_eabi;:_eabihf}}}\"\n+\n+#define TARGET_LINKER_EABI_SUFFIX\t\t\t\\\n+  (TARGET_DEFAULT_FLOAT_ABI == ARM_FLOAT_ABI_SOFT\t\\\n+   ? TARGET_LINKER_EABI_SUFFIX_SOFT\t\t\t\\\n+   : TARGET_LINKER_EABI_SUFFIX_HARD)\n+\n+#define TARGET_LINKER_BIG_EMULATION \"armelfb_nbsd%(linker_eabi_suffix)\"\n+#define TARGET_LINKER_LITTLE_EMULATION \"armelf_nbsd%(linker_eabi_suffix)\"\n+\n+/* TARGET_BIG_ENDIAN_DEFAULT is set in\n+   config.gcc for big endian configurations.  */\n+#undef  TARGET_LINKER_EMULATION\n+#if TARGET_BIG_ENDIAN_DEFAULT\n+#define TARGET_LINKER_EMULATION TARGET_LINKER_BIG_EMULATION\n+#else\n+#define TARGET_LINKER_EMULATION TARGET_LINKER_LITTLE_EMULATION\n+#endif\n+\n+#undef ARM_DEFAULT_ABI\n+#define ARM_DEFAULT_ABI ARM_ABI_AAPCS_LINUX\n+\n+#undef ARM_UNWIND_INFO\n+#define ARM_UNWIND_INFO 0\n+#undef DWARF2_UNWIND_INFO\n+#define DWARF2_UNWIND_INFO 1\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (TARGET_AAPCS_BASED)\t\t\t\\\n+\tTARGET_BPABI_CPP_BUILTINS();\t\t\\\n+      NETBSD_OS_CPP_BUILTINS_ELF();\t\t\\\n+      if (DWARF2_UNWIND_INFO)\t\t\t\\\n+\tbuiltin_define (\"__ARM_DWARF_EH__\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n+\n+/*\n+ * Override AAPCS types to remain compatible the existing NetBSD types.\n+ */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+#undef SUBTARGET_EXTRA_ASM_SPEC\n+#define SUBTARGET_EXTRA_ASM_SPEC\t\t\\\n+  \"%{mabi=apcs-gnu|mabi=atpcs:-meabi=gnu} \"\t\\\n+  \"%{fpic|fpie:-k} \"\t\t\t\t\\\n+  \"%{fPIC|fPIE:-k}\"\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n+  { \"subtarget_extra_asm_spec\",\tSUBTARGET_EXTRA_ASM_SPEC },\t\t\\\n+  { \"linker_eabi_suffix\",\tTARGET_LINKER_EABI_SUFFIX },\t\t\\\n+  { \"linker_emulation\",\t\tTARGET_LINKER_EMULATION },\t\t\\\n+  { \"linker_big_emulation\",\tTARGET_LINKER_BIG_EMULATION },\t\t\\\n+  { \"linker_little_emulation\",\tTARGET_LINKER_LITTLE_EMULATION },\t\\\n+  { \"target_fix_v4bx_spec\",\tTARGET_FIX_V4BX_SPEC },\t\t\t\\\n+  NETBSD_SUBTARGET_EXTRA_SPECS\n+\n+#define NETBSD_ENTRY_POINT \"__start\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\t\t\t\t\t\\\n+  \"-X %{mbig-endian:-EB -m %(linker_big_emulation)} \"\t\t\\\n+  \"%{mlittle-endian:-EL -m %(linker_liitle_emulation)} \"\t\\\n+  \"%{!mbig-endian:%{!mlittle-endian:-m %(linker_emulation)}} \"\t\\\n+  \"%(target_fix_v4bx_spec) %(netbsd_link_spec)\""}, {"sha": "ec68d3fd10f27527379c6057d6a6d8e067a69bea", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -43,6 +43,7 @@\n #undef ARM_DEFAULT_ABI\n #define ARM_DEFAULT_ABI ARM_ABI_ATPCS\n \n+#undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()\t\\\n   do\t\t\t\t\t\\\n     {\t\t\t\t\t\\\n@@ -55,7 +56,7 @@\n \n #undef SUBTARGET_EXTRA_ASM_SPEC\n #define SUBTARGET_EXTRA_ASM_SPEC\t\\\n-  \"-matpcs %{\" FPIE_OR_FPIC_SPEC \":-k}\"\n+  \"%{\" FPIE_OR_FPIC_SPEC \":-k}\"\n \n /* Default to full VFP if -mfloat-abi=hard is specified.  */\n #undef SUBTARGET_ASM_FLOAT_SPEC\n@@ -87,13 +88,13 @@\n /* We don't have any limit on the length as out debugger is GDB.  */\n #undef DBX_CONTIN_LENGTH\n \n-/* NetBSD does its profiling differently to the Acorn compiler. We      \n+/* NetBSD does its profiling differently to the Acorn compiler. We\n    don't need a word following the mcount call; and to skip it\n-   requires either an assembly stub or use of fomit-frame-pointer when  \n+   requires either an assembly stub or use of fomit-frame-pointer when\n    compiling the profiling functions.  Since we break Acorn CC\n    compatibility below a little more won't hurt.  */\n-   \n-#undef ARM_FUNCTION_PROFILER                                  \n+\n+#undef ARM_FUNCTION_PROFILER\n #define ARM_FUNCTION_PROFILER(STREAM,LABELNO)\t\t\\\n {\t\t\t\t\t\t\t\\\n   asm_fprintf (STREAM, \"\\tmov\\t%Rip, %Rlr\\n\");\t\t\\\n@@ -110,22 +111,22 @@\n    boundary.  However this causes problems with bugged NetBSD kernel\n    code (possibly userland code as well - I have not checked every\n    binary).  The nature of this bugged code is to rely on sizeof()\n-   returning the correct size of various structures rounded to the  \n+   returning the correct size of various structures rounded to the\n    nearest byte (SCSI and ether code are two examples, the vm system\n    is another).  This code breaks when the structure alignment is 32\n-   as sizeof() will report a word=rounded size.  By changing the        \n+   as sizeof() will report a word=rounded size.  By changing the\n    structure alignment to 8. GCC will conform to what is expected by\n    NetBSD.\n-   \n+\n    This has several side effects that should be considered.\n    1. Structures will only be aligned to the size of the largest member.\n       i.e. structures containing only bytes will be byte aligned.\n-           structures containing shorts will be half word aligned.          \n-           structures containing ints will be word aligned.                 \n-  \n+\t   structures containing shorts will be half word aligned.\n+\t   structures containing ints will be word aligned.\n+\n       This means structures should be padded to a word boundary if\n       alignment of 32 is required for byte structures etc.\n-       \n+\n    2. A potential performance penalty may exist if strings are no longer\n       word aligned.  GCC will not be able to use word load/stores to copy\n       short strings."}, {"sha": "12ebdd673c62a50f2e28d9caf5e67cbe517fafaa", "filename": "gcc/config/netbsd-elf.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/gcc%2Fconfig%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-elf.h?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -73,6 +73,9 @@ along with GCC; see the file COPYING3.  If not see\n \n    Target-specific code must provide the %(netbsd_entry_point) spec.  */\n \n+#define NETBSD_LINK_LD_ELF_SO_SPEC \\\n+  \"%{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}\"\n+\n #define NETBSD_LINK_SPEC_ELF \\\n   \"%{assert*} %{R*} %{rpath*} \\\n    %{shared:-shared} \\\n@@ -87,6 +90,17 @@ along with GCC; see the file COPYING3.  If not see\n        -dynamic-linker /usr/libexec/ld.elf_so} \\\n      %{static:-static}}\"\n \n+/* Provide the standard list of subtarget extra specs for NetBSD targets.  */\n+#define NETBSD_SUBTARGET_EXTRA_SPECS \\\n+  { \"netbsd_link_ld_elf_so\",    NETBSD_LINK_LD_ELF_SO_SPEC }, \\\n+  { \"netbsd_cpp_spec\",          NETBSD_CPP_SPEC }, \\\n+  { \"netbsd_link_spec\",         NETBSD_LINK_SPEC_ELF }, \\\n+  { \"netbsd_entry_point\",       NETBSD_ENTRY_POINT }, \\\n+  { \"netbsd_endfile_spec\",      NETBSD_ENDFILE_SPEC },\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS   NETBSD_SUBTARGET_EXTRA_SPECS\n+\n /* Use --as-needed -lgcc_s for eh support.  */\n #ifdef HAVE_LD_AS_NEEDED\n #define USE_LD_AS_NEEDED 1"}, {"sha": "40e32c37330c7633bc975fb43fdf3003919fdac7", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -1,3 +1,10 @@\n+2019-06-14  Matt Thomas  <matt@3am-software.com>\n+\t    Matthew Green  <mrg@eterna.com.au>\n+\t    Nick Hudson  <skrll@netbsd.org>\n+\t    Maya Rashish  <coypu@sdf.org>\n+\n+\t* configure.tgt (arm*): Handle NetBSD in the same way as FreeBSD.\n+\n 2019-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "4a1294bc1ffff09396c78811aac39161e55df1bf", "filename": "libatomic/configure.tgt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/libatomic%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/libatomic%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.tgt?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -53,7 +53,7 @@ case \"${target_cpu}\" in\n   arm*)\n \tARCH=arm\n \tcase \"${target}\" in\n-            arm*-*-freebsd*)\n+            arm*-*-freebsd* | arm*-*-netbsd*)\n                 ;;\n             *)\n                 # ??? Detect when -march=armv7 is already enabled."}, {"sha": "959776da959788cf2aedaf77d17b70b20884588d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -1,3 +1,13 @@\n+2019-06-14  Matt Thomas  <matt@3am-software.com>\n+\t    Matthew Green  <mrg@eterna.com.au>\n+\t    Nick Hudson  <skrll@netbsd.org>\n+\t    Maya Rashish  <coypu@sdf.org>\n+\n+\t* config.host (arm*-*-netbsdelf*): Add support for EABI configurations.\n+\t* config/arm/t-netbsd (LIB1ASMFUNCS): Add some additional assembler\n+\tfunctions to build.\n+\t* config/arm/t-netbsd-eabi: New file.\n+\n 2019-06-12  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* config.host: Add PRU target."}, {"sha": "0574b4d7741c05901fc7421e36517cf39946c0a3", "filename": "libgcc/config.host", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -436,7 +436,16 @@ arm*-*-fuchsia*)\n \tunwind_header=config/arm/unwind-arm.h\n \t;;\n arm*-*-netbsdelf*)\n-\ttmake_file=\"$tmake_file arm/t-arm arm/t-netbsd t-slibgcc-gld-nover\"\n+\ttmake_file=\"$tmake_file arm/t-arm\"\n+\tcase ${host} in\n+\t  arm*-*-netbsdelf-*eabi*)\n+\t    tmake_file=\"${tmake_file} arm/t-netbsd-eabi\"\n+\t    unwind_header=config/arm/unwind-arm.h\n+\t    ;;\n+\t  *)\n+\t    tmake_file=\"${tmake_file} arm/t-netbsd t-slibgcc-gld-nover\"\n+\t    ;;\n+\tesac\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttmake_file=\"${tmake_file} arm/t-arm t-fixedpoint-gnu-prefix t-crtfm\""}, {"sha": "ea4d5de4e7740c993c2e3486c0b8488dd35b8b81", "filename": "libgcc/config/arm/t-netbsd", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2Fconfig%2Farm%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2Fconfig%2Farm%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-netbsd?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -1,3 +1,11 @@\n+# This list is from t-elf, but with some things removed.\n+LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func \\\n+\t_call_via_rX _interwork_call_via_rX \\\n+\t_arm_fixunsdfsi _arm_fixunssfsi \\\n+\t_arm_floatdidf _arm_floatdisf _arm_floatundidf _arm_floatundisf \\\n+\t_lshrdi3 _ashrdi3 _ashldi3 \\\n+\t_clzsi2 _clzdi2 _ctzsi2\n+\n # Just for these, we omit the frame pointer since it makes such a big\n # difference.  It is then pointless adding debugging.\n HOST_LIBGCC2_CFLAGS += -fomit-frame-pointer"}, {"sha": "ae08ea43ef73ed6c1a665091ae93e859c48fab26", "filename": "libgcc/config/arm/t-netbsd-eabi", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2Fconfig%2Farm%2Ft-netbsd-eabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c10823418d58d70274ee3a7378e1aca21d418/libgcc%2Fconfig%2Farm%2Ft-netbsd-eabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-netbsd-eabi?ref=b27c10823418d58d70274ee3a7378e1aca21d418", "patch": "@@ -0,0 +1,18 @@\n+# This list is from t-elf, but with lots removed.\n+LIB1ASMFUNCS += _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX \\\n+        _clzsi2 _clzdi2 _ctzsi2\n+\n+# Derived from t-bpabi\n+# Add the BPABI C functions.\n+LIB2ADD +=    $(srcdir)/config/arm/unaligned-funcs.c\n+\n+# Not using libgcc for EH.\n+LIB2ADDEH =\n+\n+# Add the BPABI names.\n+SHLIB_MAPFILES += $(srcdir)/config/arm/libgcc-bpabi.ver\n+\n+# On ARM, specifying -fnon-call-exceptions will needlessly pull in\n+# the unwinder in simple programs which use 64-bit division.  Omitting\n+# the option is safe.\n+LIB2_DIVMOD_EXCEPTION_FLAGS := -fexceptions"}]}