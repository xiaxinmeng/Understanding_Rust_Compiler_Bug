{"sha": "63d1c7b35fe104326f278f45daf20743853920bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkMWM3YjM1ZmUxMDQzMjZmMjc4ZjQ1ZGFmMjA3NDM4NTM5MjBiYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-26T08:23:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-26T08:23:58Z"}, "message": "tree.h (BINFO_BASE_ACCESSES): Accesses are a VEC(tree).\n\n.:\t* tree.h (BINFO_BASE_ACCESSES): Accesses are a VEC(tree).\n\t(BINFO_BASE_ACCESS): Adjust.\n\t(BINFO_BASE_ACCESS_APPEND): New.\n\t(struct tree_binfo): Make base_accesses a VEC(tree) pointer.\n\t* dbxout.c (dbxout_type): Adjust binfo access accessing.\n\t* dwarf2out.c (gen_member_die): Likewise.\n\t* tree-dump.c (deque_and_dump): Likewise.\ncp:\n\t* decl.c (xref_basetypes): Adjust base access vector creation.\n\t* rtti.c (get_pseudo_ti_init, get_pseudo_ti_desc): Adjust base\n\taccess accesses.\n\t* search.c (dynamic_cast_base_recurse, dfs_access_in_type): Likewise.\n\nFrom-SVN: r85187", "tree": {"sha": "a52bd0b1bb36a9dba1bfbf17a55c904a10884e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52bd0b1bb36a9dba1bfbf17a55c904a10884e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d1c7b35fe104326f278f45daf20743853920bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d1c7b35fe104326f278f45daf20743853920bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d1c7b35fe104326f278f45daf20743853920bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d1c7b35fe104326f278f45daf20743853920bb/comments", "author": null, "committer": null, "parents": [{"sha": "9b4f6a07a51dd570a2c50fe944e1fbd91f766e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f6a07a51dd570a2c50fe944e1fbd91f766e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4f6a07a51dd570a2c50fe944e1fbd91f766e76"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "4e455a3a0c95e0c753932e6b1683c5e929db77e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -1,4 +1,14 @@\n-2004-07-26  Falk Hueffner  <falk@debian.org>>\n+2004-07-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h (BINFO_BASE_ACCESSES): Accesses are a VEC(tree).\n+\t(BINFO_BASE_ACCESS): Adjust.\n+\t(BINFO_BASE_ACCESS_APPEND): New.\n+\t(struct tree_binfo): Make base_accesses a VEC(tree) pointer.\n+\t* dbxout.c (dbxout_type): Adjust binfo access accessing.\n+\t* dwarf2out.c (gen_member_die): Likewise.\n+\t* tree-dump.c (deque_and_dump): Likewise.\n+\n+2004-07-26  Falk Hueffner  <falk@debian.org>\n \n \t* config/alpha/alpha.c (alpha_rtx_cost_data): Tweak int_div\n \tcosts.\n@@ -340,8 +350,8 @@\n \n 2004-07-23  Mike Stump  <mrs@apple.com>\n \n-\t* c-typeck.c (convert_for_assignment): Tightened up pointer converstions\n-\tthat differ in signedness.\n+\t* c-typeck.c (convert_for_assignment): Tightened up pointer\n+\tconverstions that differ in signedness.\n \n 2004-07-23  Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "1fb00277f9aae19eb1d1e9282ae682dfa045f170", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -1,3 +1,10 @@\n+2004-07-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (xref_basetypes): Adjust base access vector creation.\n+\t* rtti.c (get_pseudo_ti_init, get_pseudo_ti_desc): Adjust base\n+\taccess accesses.\n+\t* search.c (dynamic_cast_base_recurse, dfs_access_in_type): Likewise.\n+\n 2004-07-26  Niall Douglas  <s_fsfeurope2@nedprod.com>\n \t    Brian Ryner  <bryner@brianryner.com>\n "}, {"sha": "f901d98f3dbe097ec011fd7f2fd3dc96c5454975", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -9109,7 +9109,7 @@ xref_basetypes (tree ref, tree base_list)\n \n   if (max_bases)\n     {\n-      BINFO_BASE_ACCESSES (binfo) = make_tree_vec (max_bases);\n+      BINFO_BASE_ACCESSES (binfo) = VEC_alloc (tree, max_bases);\n       /* An aggregate cannot have baseclasses.  */\n       CLASSTYPE_NON_AGGREGATE (ref) = 1;\n \n@@ -9199,17 +9199,10 @@ xref_basetypes (tree ref, tree base_list)\n       if (!BINFO_INHERITANCE_CHAIN (base_binfo))\n \tBINFO_INHERITANCE_CHAIN (base_binfo) = binfo;\n \n-      TREE_VEC_ELT (BINFO_BASE_ACCESSES (binfo),\n-\t\t    BINFO_N_BASE_BINFOS (binfo)) = access;\n       BINFO_BASE_APPEND (binfo, base_binfo);\n+      BINFO_BASE_ACCESS_APPEND (binfo, access);\n     }\n \n-  if (max_bases)\n-    /* If any bases were invalid, we will have allocated too many\n-       slots.  */\n-    TREE_VEC_LENGTH (BINFO_BASE_ACCESSES (binfo))\n-      = BINFO_N_BASE_BINFOS (binfo);\n-\n   /* Unmark all the types.  */\n   for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n     CLEAR_CLASSTYPE_MARKED (BINFO_TYPE (base_binfo));"}, {"sha": "c6c9fc6acc44af98354acbcc99c2b5ba83e5f428", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -1052,7 +1052,7 @@ get_pseudo_ti_init (tree type, tree var_desc, bool *non_public_p)\n \t  int hint = class_hint_flags (type);\n \t  tree binfo = TYPE_BINFO (type);\n           int nbases = BINFO_N_BASE_BINFOS (binfo);\n-\t  tree base_accesses = BINFO_BASE_ACCESSES (binfo);\n+\t  VEC (tree) *base_accesses = BINFO_BASE_ACCESSES (binfo);\n           tree base_inits = NULL_TREE;\n           int ix;\n           \n@@ -1065,7 +1065,7 @@ get_pseudo_ti_init (tree type, tree var_desc, bool *non_public_p)\n               tree tinfo;\n               tree offset;\n               \n-              if (TREE_VEC_ELT (base_accesses, ix) == access_public_node)\n+              if (VEC_index (tree, base_accesses, ix) == access_public_node)\n                 flags |= 2;\n               tinfo = get_tinfo_ptr (BINFO_TYPE (base_binfo));\n \t      if (BINFO_VIRTUAL_P (base_binfo))\n@@ -1199,12 +1199,12 @@ get_pseudo_ti_desc (tree type)\n       else\n \t{\n \t  tree binfo = TYPE_BINFO (type);\n-\t  tree base_accesses = BINFO_BASE_ACCESSES (binfo);\n+\t  VEC (tree) *base_accesses = BINFO_BASE_ACCESSES (binfo);\n \t  tree base_binfo = BINFO_BASE_BINFO (binfo, 0);\n \t  int num_bases = BINFO_N_BASE_BINFOS (binfo);\n \t  \n \t  if (num_bases == 1\n-\t      && TREE_VEC_ELT (base_accesses, 0) == access_public_node\n+\t      && VEC_index (tree, base_accesses, 0) == access_public_node\n \t      && !BINFO_VIRTUAL_P (base_binfo)\n \t      && integer_zerop (BINFO_OFFSET (base_binfo)))\n \t    /* single non-virtual public.  */"}, {"sha": "a1270acdbfa208f60f2cae770f4bff0bd815a021", "filename": "gcc/cp/search.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -287,7 +287,7 @@ static int\n dynamic_cast_base_recurse (tree subtype, tree binfo, bool is_via_virtual,\n \t\t\t   tree *offset_ptr)\n {\n-  tree accesses;\n+  VEC (tree) *accesses;\n   tree base_binfo;\n   int i;\n   int worst = -2;\n@@ -306,7 +306,7 @@ dynamic_cast_base_recurse (tree subtype, tree binfo, bool is_via_virtual,\n   accesses = BINFO_BASE_ACCESSES (binfo);\n   for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n     {\n-      tree base_access = TREE_VEC_ELT (accesses, i);\n+      tree base_access = VEC_index (tree, accesses, i);\n       int rval;\n       \n       if (base_access != access_public_node)\n@@ -625,14 +625,15 @@ dfs_access_in_type (tree binfo, void *data)\n       if (!access)\n \t{\n \t  int i;\n-\t  tree base_binfo, accesses;\n+\t  tree base_binfo;\n+\t  VEC (tree) *accesses;\n \t  \n \t  /* Otherwise, scan our baseclasses, and pick the most favorable\n \t     access.  */\n \t  accesses = BINFO_BASE_ACCESSES (binfo);\n \t  for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n \t    {\n-\t      tree base_access = TREE_VEC_ELT (accesses, i);\n+\t      tree base_access = VEC_index (tree, accesses, i);\n \t      access_kind base_access_now = BINFO_ACCESS (base_binfo);\n \n \t      if (base_access_now == ak_none || base_access_now == ak_private)"}, {"sha": "6630702e9d59bd0f9a3e72df4b5a07faebbdc2a6", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -1684,6 +1684,7 @@ dbxout_type (tree type, int full)\n \t  {\n \t    int i;\n \t    tree child;\n+\t    VEC (tree) *accesses = BINFO_BASE_ACCESSES (binfo);\n \t    \n \t    if (use_gnu_debug_info_extensions)\n \t      {\n@@ -1696,8 +1697,7 @@ dbxout_type (tree type, int full)\n \t      }\n \t    for (i = 0; BINFO_BASE_ITERATE (binfo, i, child); i++)\n \t      {\n-\t\ttree access = (BINFO_BASE_ACCESSES (binfo)\n-\t\t\t       ? BINFO_BASE_ACCESS (binfo, i)\n+\t\ttree access = (accesses ? VEC_index (tree, accesses, i)\n \t\t\t       : access_public_node);\n \n \t\tif (use_gnu_debug_info_extensions)"}, {"sha": "4a1037fdf72cf7970fa052d67ff895a15e5e57f9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -11897,13 +11897,13 @@ gen_member_die (tree type, dw_die_ref context_die)\n   /* First output info about the base classes.  */\n   if (binfo)\n     {\n-      tree accesses = BINFO_BASE_ACCESSES (binfo);\n+      VEC (tree) *accesses = BINFO_BASE_ACCESSES (binfo);\n       int i;\n       tree base;\n \n       for (i = 0; BINFO_BASE_ITERATE (binfo, i, base); i++)\n \tgen_inheritance_die (base,\n-\t\t\t     (accesses ? TREE_VEC_ELT (accesses, i)\n+\t\t\t     (accesses ? VEC_index (tree, accesses, i)\n \t\t\t      : access_public_node), context_die);\n     }\n "}, {"sha": "c42e33f32f782faa34fe0d7423b67d401b027365", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -252,7 +252,7 @@ dequeue_and_dump (dump_info_p di)\n     {\n       unsigned ix;\n       tree base;\n-      tree accesses = BINFO_BASE_ACCESSES (t);\n+      VEC (tree) *accesses = BINFO_BASE_ACCESSES (t);\n \n       dump_child (\"type\", BINFO_TYPE (t));\n \n@@ -262,7 +262,7 @@ dequeue_and_dump (dump_info_p di)\n       dump_int (di, \"bases\", BINFO_N_BASE_BINFOS (t));\n       for (ix = 0; BINFO_BASE_ITERATE (t, ix, base); ix++)\n \t{\n-\t  tree access = (accesses ? TREE_VEC_ELT (accesses, ix)\n+\t  tree access = (accesses ? VEC_index (tree, accesses, ix)\n \t\t\t : access_public_node);\n \t  const char *string = NULL;\n "}, {"sha": "3ee61882deb9c07dc09adf3d813517343e903174", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d1c7b35fe104326f278f45daf20743853920bb/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=63d1c7b35fe104326f278f45daf20743853920bb", "patch": "@@ -1671,7 +1671,11 @@ struct tree_type GTY(())\n    access_public_node, access_protected_node or access_private_node.\n    If this array is not present, public access is implied.  */\n #define BINFO_BASE_ACCESSES(NODE) (TREE_BINFO_CHECK(NODE)->binfo.base_accesses)\n-#define BINFO_BASE_ACCESS(NODE,N) TREE_VEC_ELT (BINFO_BASE_ACCESSES(NODE), (N))\n+\n+#define BINFO_BASE_ACCESS(NODE,N) \\\n+  VEC_index (tree, BINFO_BASE_ACCESSES (NODE), (N))\n+#define BINFO_BASE_ACCESS_APPEND(NODE,T) \\\n+  VEC_quick_push (tree, BINFO_BASE_ACCESSES (NODE), (T))\n \n /* The index in the VTT where this subobject's sub-VTT can be found.\n    NULL_TREE if there is no sub-VTT.  */\n@@ -1701,7 +1705,7 @@ struct tree_binfo GTY (())\n   tree vtable;\n   tree virtuals;\n   tree vptr_field;\n-  tree base_accesses;\n+  VEC(tree) *base_accesses;\n   tree inheritance;\n \n   tree vtt_subvtt;"}]}