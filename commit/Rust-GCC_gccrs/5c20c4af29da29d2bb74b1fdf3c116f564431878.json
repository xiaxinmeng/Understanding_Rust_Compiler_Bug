{"sha": "5c20c4af29da29d2bb74b1fdf3c116f564431878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyMGM0YWYyOWRhMjlkMmJiNzRiMWZkZjNjMTE2ZjU2NDQzMTg3OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:09:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:09:48Z"}, "message": "[12/77] Use opt_scalar_float_mode when iterating over float modes\n\nThis means that we know when accessing the modes that the size is\na compile-time constant, even for SVE.  It also enables stricter\ntype safety in later patches.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* machmode.h (mode_iterator::start): Provide overload for opt_modes.\n\t(mode_iterator::iterate_p): Likewise.\n\t(mode_iterator::get_wider): Likewise.\n\t* expr.c (init_expr_target): Use opt_scalar_float_mode.\n\ngcc/ada/\n\t* gcc-interface/misc.c (fp_prec_to_size): Use opt_scalar_float_mode.\n\t(fp_size_to_prec): Likewise.\n\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Use opt_scalar_float_mode.\n\ngcc/fortran/\n\t* trans-types.c (gfc_init_kinds): Use opt_scalar_float_mode\n\tand FOR_EACH_MODE_IN_CLASS.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251464", "tree": {"sha": "7e03f2635a9fe715b2717872ffe1afc0cc1cfde8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e03f2635a9fe715b2717872ffe1afc0cc1cfde8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c20c4af29da29d2bb74b1fdf3c116f564431878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c20c4af29da29d2bb74b1fdf3c116f564431878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c20c4af29da29d2bb74b1fdf3c116f564431878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c20c4af29da29d2bb74b1fdf3c116f564431878/comments", "author": null, "committer": null, "parents": [{"sha": "857c7b46875bdcf9d889543baad54977034d57ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857c7b46875bdcf9d889543baad54977034d57ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857c7b46875bdcf9d889543baad54977034d57ef"}], "stats": {"total": 101, "additions": 81, "deletions": 20}, "files": [{"sha": "f5fb5fc0f631130d4ba37a5e126184421959e301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -1,3 +1,12 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* machmode.h (mode_iterator::start): Provide overload for opt_modes.\n+\t(mode_iterator::iterate_p): Likewise.\n+\t(mode_iterator::get_wider): Likewise.\n+\t* expr.c (init_expr_target): Use opt_scalar_float_mode.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "8024211422433f7567d87c1e6d013d9f671d06ed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc-interface/misc.c (fp_prec_to_size): Use opt_scalar_float_mode.\n+\t(fp_size_to_prec): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "081a63ab0d0824654f72f84e4b5d48a60b824dbb", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -1311,11 +1311,14 @@ enumerate_modes (void (*f) (const char *, int, int, int, int, int, int, int))\n int\n fp_prec_to_size (int prec)\n {\n-  machine_mode mode;\n+  opt_scalar_float_mode opt_mode;\n \n-  FOR_EACH_MODE_IN_CLASS (mode, MODE_FLOAT)\n-    if (GET_MODE_PRECISION (mode) == prec)\n-      return GET_MODE_BITSIZE (mode);\n+  FOR_EACH_MODE_IN_CLASS (opt_mode, MODE_FLOAT)\n+    {\n+      scalar_float_mode mode = opt_mode.require ();\n+      if (GET_MODE_PRECISION (mode) == prec)\n+\treturn GET_MODE_BITSIZE (mode);\n+    }\n \n   gcc_unreachable ();\n }\n@@ -1325,11 +1328,14 @@ fp_prec_to_size (int prec)\n int\n fp_size_to_prec (int size)\n {\n-  machine_mode mode;\n+  opt_scalar_float_mode opt_mode;\n \n-  FOR_EACH_MODE_IN_CLASS (mode, MODE_FLOAT)\n-    if (GET_MODE_BITSIZE (mode) == size)\n-      return GET_MODE_PRECISION (mode);\n+  FOR_EACH_MODE_IN_CLASS (opt_mode, MODE_FLOAT)\n+    {\n+      scalar_mode mode = opt_mode.require ();\n+      if (GET_MODE_BITSIZE (mode) == size)\n+\treturn GET_MODE_PRECISION (mode);\n+    }\n \n   gcc_unreachable ();\n }"}, {"sha": "36413cfca749e69f3797ab0f0a189ecd2d79fb89", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -1,3 +1,9 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Use opt_scalar_float_mode.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n             Alan Hayward  <alan.hayward@arm.com>\n             David Sherwood  <david.sherwood@arm.com>"}, {"sha": "8f377f698a63c0ee38f2295184c7c6f480a852b9", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -1186,9 +1186,10 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (flag_building_libgcc)\n     {\n       /* Properties of floating-point modes for libgcc2.c.  */\n-      machine_mode mode;\n-      FOR_EACH_MODE_IN_CLASS (mode, MODE_FLOAT)\n+      opt_scalar_float_mode mode_iter;\n+      FOR_EACH_MODE_IN_CLASS (mode_iter, MODE_FLOAT)\n \t{\n+\t  scalar_float_mode mode = mode_iter.require ();\n \t  const char *name = GET_MODE_NAME (mode);\n \t  char *macro_name\n \t    = (char *) alloca (strlen (name)"}, {"sha": "c5cc0cbc155ce8a92795e86eeb87cf5a629e3f4c", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -112,7 +112,6 @@ void\n init_expr_target (void)\n {\n   rtx pat;\n-  machine_mode mode;\n   int num_clobbers;\n   rtx mem, mem1;\n   rtx reg;\n@@ -131,7 +130,7 @@ init_expr_target (void)\n   pat = gen_rtx_SET (NULL_RTX, NULL_RTX);\n   PATTERN (insn) = pat;\n \n-  for (mode = VOIDmode; (int) mode < NUM_MACHINE_MODES;\n+  for (machine_mode mode = VOIDmode; (int) mode < NUM_MACHINE_MODES;\n        mode = (machine_mode) ((int) mode + 1))\n     {\n       int regno;\n@@ -177,9 +176,11 @@ init_expr_target (void)\n \n   mem = gen_rtx_MEM (VOIDmode, gen_raw_REG (Pmode, LAST_VIRTUAL_REGISTER + 1));\n \n-  FOR_EACH_MODE_IN_CLASS (mode, MODE_FLOAT)\n+  opt_scalar_float_mode mode_iter;\n+  FOR_EACH_MODE_IN_CLASS (mode_iter, MODE_FLOAT)\n     {\n-      machine_mode srcmode;\n+      scalar_float_mode mode = mode_iter.require ();\n+      scalar_float_mode srcmode;\n       FOR_EACH_MODE_UNTIL (srcmode, mode)\n \t{\n \t  enum insn_code ic;"}, {"sha": "c7a75341d123a67bf2317e4c9e9fd3217889cc12", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Use opt_scalar_float_mode\n+\tand FOR_EACH_MODE_IN_CLASS.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "282218fd65650635778e7074e57dc40d94c5533a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -364,6 +364,7 @@ void\n gfc_init_kinds (void)\n {\n   machine_mode mode;\n+  opt_scalar_float_mode float_mode_iter;\n   int i_index, r_index, kind;\n   bool saw_i4 = false, saw_i8 = false;\n   bool saw_r4 = false, saw_r8 = false, saw_r10 = false, saw_r16 = false;\n@@ -419,11 +420,11 @@ gfc_init_kinds (void)\n   /* Set the maximum integer kind.  Used with at least BOZ constants.  */\n   gfc_max_integer_kind = gfc_integer_kinds[i_index - 1].kind;\n \n-  for (r_index = 0, mode = MIN_MODE_FLOAT; mode <= MAX_MODE_FLOAT;\n-       mode = (machine_mode) ((int) mode + 1))\n+  r_index = 0;\n+  FOR_EACH_MODE_IN_CLASS (float_mode_iter, MODE_FLOAT)\n     {\n-      const struct real_format *fmt =\n-\tREAL_MODE_FORMAT (mode);\n+      scalar_float_mode mode = float_mode_iter.require ();\n+      const struct real_format *fmt = REAL_MODE_FORMAT (mode);\n       int kind;\n \n       if (fmt == NULL)\n@@ -434,8 +435,7 @@ gfc_init_kinds (void)\n       /* Only let float, double, long double and __float128 go through.\n \t Runtime support for others is not provided, so they would be\n \t useless.  */\n-      if (!targetm.libgcc_floating_mode_supported_p ((machine_mode)\n-\t\t\t\t\t\t       mode))\n+      if (!targetm.libgcc_floating_mode_supported_p (mode))\n \tcontinue;\n       if (mode != TYPE_MODE (float_type_node)\n \t    && (mode != TYPE_MODE (double_type_node))"}, {"sha": "2603d838d93d267c593375aa9321999833b302f3", "filename": "gcc/machmode.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c20c4af29da29d2bb74b1fdf3c116f564431878/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=5c20c4af29da29d2bb74b1fdf3c116f564431878", "patch": "@@ -651,6 +651,16 @@ namespace mode_iterator\n {\n   /* Start mode iterator *ITER at the first mode in class MCLASS, if any.  */\n \n+  template<typename T>\n+  inline void\n+  start (opt_mode<T> *iter, enum mode_class mclass)\n+  {\n+    if (GET_CLASS_NARROWEST_MODE (mclass) == E_VOIDmode)\n+      *iter = opt_mode<T> ();\n+    else\n+      *iter = as_a<T> (GET_CLASS_NARROWEST_MODE (mclass));\n+  }\n+\n   inline void\n   start (machine_mode *iter, enum mode_class mclass)\n   {\n@@ -659,6 +669,13 @@ namespace mode_iterator\n \n   /* Return true if mode iterator *ITER has not reached the end.  */\n \n+  template<typename T>\n+  inline bool\n+  iterate_p (opt_mode<T> *iter)\n+  {\n+    return iter->exists ();\n+  }\n+\n   inline bool\n   iterate_p (machine_mode *iter)\n   {\n@@ -668,6 +685,13 @@ namespace mode_iterator\n   /* Set mode iterator *ITER to the next widest mode in the same class,\n      if any.  */\n \n+  template<typename T>\n+  inline void\n+  get_wider (opt_mode<T> *iter)\n+  {\n+    *iter = GET_MODE_WIDER_MODE (iter->require ());\n+  }\n+\n   inline void\n   get_wider (machine_mode *iter)\n   {"}]}