{"sha": "3acf034c5a48c45c39a5be03369cea154fe39f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FjZjAzNGM1YTQ4YzQ1YzM5YTViZTAzMzY5Y2VhMTU0ZmUzOWYyNQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:13:18Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:13:18Z"}, "message": "lm32-protos.h (lm32_function_arg): Delete.\n\n\t* config/lm32/lm32-protos.h (lm32_function_arg): Delete.\n\t* config/lm32/lm32.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/mcore/mcore.c (mcore_function_arg): Declare.  Make static.\n\tTake a const_tree and a bool.\n\t(mcore_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166044", "tree": {"sha": "869db1b8a591c30e2ec23142cb994437066e632e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869db1b8a591c30e2ec23142cb994437066e632e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3acf034c5a48c45c39a5be03369cea154fe39f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3acf034c5a48c45c39a5be03369cea154fe39f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3acf034c5a48c45c39a5be03369cea154fe39f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3acf034c5a48c45c39a5be03369cea154fe39f25/comments", "author": null, "committer": null, "parents": [{"sha": "4665ac17309744645b3c03bf77328bbc040f6954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4665ac17309744645b3c03bf77328bbc040f6954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4665ac17309744645b3c03bf77328bbc040f6954"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "4e87797150be6f31e2f13b66cdce1c894844fbaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3acf034c5a48c45c39a5be03369cea154fe39f25", "patch": "@@ -1,3 +1,12 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/lm32/lm32-protos.h (lm32_function_arg): Delete.\n+\t* config/lm32/lm32.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/mcore/mcore.c (mcore_function_arg): Declare.  Make static.\n+\tTake a const_tree and a bool.\n+\t(mcore_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/mcore/mcore-protos.h (mcore_function_arg): Delete."}, {"sha": "bc086d2ee0b5e76f2dcb9a7d0190fb209009d4ec", "filename": "gcc/config/lm32/lm32-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2Fconfig%2Flm32%2Flm32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2Fconfig%2Flm32%2Flm32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32-protos.h?ref=3acf034c5a48c45c39a5be03369cea154fe39f25", "patch": "@@ -26,8 +26,6 @@ extern void lm32_expand_prologue (void);\n extern void lm32_expand_epilogue (void);\n extern void lm32_print_operand (FILE *file, rtx op, int letter);\n extern void lm32_print_operand_address (FILE *file, rtx addr);\n-extern rtx lm32_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n-                              tree type, int named);\n extern HOST_WIDE_INT lm32_compute_initial_elimination_offset (int from, \n                                                              int to);\n extern int lm32_can_use_return (void);"}, {"sha": "18a4b4403cd585efe59e57ab80db9f5a4982c957", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=3acf034c5a48c45c39a5be03369cea154fe39f25", "patch": "@@ -76,6 +76,12 @@ static bool\n lm32_legitimate_address_p (enum machine_mode mode, rtx x, bool strict);\n static HOST_WIDE_INT lm32_compute_frame_size (int size);\n static void lm32_option_override (void);\n+static rtx lm32_function_arg (CUMULATIVE_ARGS * cum,\n+\t\t\t      enum machine_mode mode, const_tree type,\n+\t\t\t      bool named);\n+static void lm32_function_arg_advance (CUMULATIVE_ARGS * cum,\n+\t\t\t\t       enum machine_mode mode,\n+\t\t\t\t       const_tree type, bool named);\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options lm32_option_optimization_table[] =\n@@ -98,6 +104,10 @@ static const struct default_options lm32_option_optimization_table[] =\n #define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS lm32_setup_incoming_varargs\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG lm32_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE lm32_function_arg_advance\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef TARGET_MIN_ANCHOR_OFFSET\n@@ -613,9 +623,9 @@ lm32_print_operand_address (FILE * file, rtx addr)\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-rtx\n-lm32_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n-\t\t   tree type, int named)\n+static rtx\n+lm32_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t   const_tree type, bool named)\n {\n   if (mode == VOIDmode)\n     /* Compute operand 2 of the call insn.  */\n@@ -624,10 +634,17 @@ lm32_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n   if (targetm.calls.must_pass_in_stack (mode, type))\n     return NULL_RTX;\n \n-  if (!named || (cum + LM32_NUM_REGS2 (mode, type) > LM32_NUM_ARG_REGS))\n+  if (!named || (*cum + LM32_NUM_REGS2 (mode, type) > LM32_NUM_ARG_REGS))\n     return NULL_RTX;\n \n-  return gen_rtx_REG (mode, cum + LM32_FIRST_ARG_REG);\n+  return gen_rtx_REG (mode, *cum + LM32_FIRST_ARG_REG);\n+}\n+\n+static void\n+lm32_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  *cum += LM32_NUM_REGS2 (mode, type);\n }\n \n HOST_WIDE_INT"}, {"sha": "bcea41aa3a16e9890efc892c4628c8e88c92f237", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acf034c5a48c45c39a5be03369cea154fe39f25/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=3acf034c5a48c45c39a5be03369cea154fe39f25", "patch": "@@ -276,17 +276,11 @@ enum reg_class\n /* The number of (integer) argument register available.  */\n #define LM32_NUM_ARG_REGS 8\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)                            \\\n-  lm32_function_arg ((CUM), (MODE), (TYPE), (NAMED))\n-\n #define CUMULATIVE_ARGS int\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT,N_NAMED_ARGS)  \\\n   (CUM) = 0\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)                    \\\n-  (CUM) += LM32_NUM_REGS2 (MODE, TYPE)\n-\n #define FUNCTION_ARG_REGNO_P(r)                                         \\\n   (((r) >= LM32_FIRST_ARG_REG) && ((r) <= LM32_NUM_ARG_REGS))\n "}]}