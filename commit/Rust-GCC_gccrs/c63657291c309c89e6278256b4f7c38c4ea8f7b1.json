{"sha": "c63657291c309c89e6278256b4f7c38c4ea8f7b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzNjU3MjkxYzMwOWM4OWU2Mjc4MjU2YjRmN2MzOGM0ZWE4ZjdiMQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:00:06Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:56Z"}, "message": "AVX512FP16: Add testcase for vsqrtph/vsqrtsh/vrsqrtph/vrsqrtsh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vrsqrtph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vrsqrtph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrsqrtsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrsqrtsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vsqrtph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vsqrtph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vsqrtsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vsqrtsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vrsqrtph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vrsqrtph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vsqrtph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vsqrtph-1b.c: Ditto.", "tree": {"sha": "e442803d8a1e80783bb337d321326754f5f72734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e442803d8a1e80783bb337d321326754f5f72734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c63657291c309c89e6278256b4f7c38c4ea8f7b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63657291c309c89e6278256b4f7c38c4ea8f7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63657291c309c89e6278256b4f7c38c4ea8f7b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63657291c309c89e6278256b4f7c38c4ea8f7b1/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4204740f649f2ad8dbc50e871fc6b421338478d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4204740f649f2ad8dbc50e871fc6b421338478d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4204740f649f2ad8dbc50e871fc6b421338478d3"}], "stats": {"total": 462, "additions": 462, "deletions": 0}, "files": [{"sha": "c9671e8ed0aba826f6af2ffce093d3b15aeb50e0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrsqrtph-1a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtph-1a.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res;\n+volatile __m512h x1;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_rsqrt_ph (x1);\n+  res = _mm512_mask_rsqrt_ph (res, m32, x1);\n+  res = _mm512_maskz_rsqrt_ph (m32, x1);\n+}"}, {"sha": "237971dbaa748ab7343f3b5fac4a04cf5bca126b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrsqrtph-1b.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtph-1b.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(rsqrt_ph) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.f32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = v7.u32[i];\n+      }\n+    }\n+    else {\n+      v5.f32[i] = 1. / sqrtf(v1.f32[i]);\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+      if (zero_mask) {\n+\tv6.f32[i] = 0;\n+      }\n+      else {\n+\tv6.u32[i] = v8.u32[i];\n+      }\n+    }\n+    else {\n+      v6.f32[i] = 1. / sqrtf(v2.f32[i]);\n+    }\n+\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(rsqrt_ph) (&exp, src1,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_rsqrt_ph) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _rsqrt_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(rsqrt_ph) (&exp, src1, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_rsqrt_ph) (HF(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_rsqrt_ph);\n+\n+  EMULATE(rsqrt_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_rsqrt_ph) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_rsqrt_ph);\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "060ce33f164cab509037200bf1ce035b5988b3b6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrsqrtsh-1a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtsh-1a.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrtsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, x1, x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_rsqrt_sh (x1, x2);\n+  res = _mm_mask_rsqrt_sh (res, m8, x1, x2);\n+  res = _mm_maskz_rsqrt_sh (m8, x1, x2);\n+}"}, {"sha": "5f20de7c24aafdc9c24229e98f1581897f84f326", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrsqrtsh-1b.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrsqrtsh-1b.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_rsqrt_sh(V512 * dest, V512 op1,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = 1.0 / sqrtf(v1.f32[0]);\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_rsqrt_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_rsqrt_sh(exp.xmmh[0], src1.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_rsqrt_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_rsqrt_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_rsqrt_sh(res.xmmh[0], 0x1, exp.xmmh[0], src1.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_rsqrt_sh\");\n+\n+  emulate_rsqrt_sh(&exp, src1,  0x1, 1);\n+  res.xmmh[0] = _mm_maskz_rsqrt_sh(0x1, exp.xmmh[0], src1.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_rsqrt_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+\n+}\n+"}, {"sha": "497b5bab1db1ab43148e8d4b6d045d071cc2dab5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vsqrtph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtph-1a.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res;\n+volatile __m512h x1;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_sqrt_ph (x1);\n+  res = _mm512_mask_sqrt_ph (res, m32, x1);\n+  res = _mm512_maskz_sqrt_ph (m32, x1);\n+  res = _mm512_sqrt_round_ph (x1, 4);\n+  res = _mm512_mask_sqrt_round_ph (res, m32, x1, 8);\n+  res = _mm512_maskz_sqrt_round_ph (m32, x1, 11);\n+}"}, {"sha": "d4d047b194da21f2c89acf622864ef69f8d7e4b7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vsqrtph-1b.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtph-1b.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(sqrt_ph) (V512 * dest, V512 op1,\n+\t\t__mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.f32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = v7.u32[i];\n+      }\n+    }\n+    else {\n+      v5.f32[i] = sqrtf(v1.f32[i]);\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+      if (zero_mask) {\n+\tv6.f32[i] = 0;\n+      }\n+      else {\n+\tv6.u32[i] = v8.u32[i];\n+      }\n+    }\n+    else {\n+      v6.f32[i] = sqrtf(v2.f32[i]);\n+    }\n+\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(sqrt_ph) (&exp, src1, NET_MASK, 0);\n+  HF(res) = INTRINSIC (_sqrt_ph) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _sqrt_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(sqrt_ph) (&exp, src1, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_sqrt_ph) (HF(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_sqrt_ph);\n+\n+  EMULATE(sqrt_ph) (&exp, src1, ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_sqrt_ph) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_sqrt_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(sqrt_ph) (&exp, src1, NET_MASK, 0);\n+  HF(res) = INTRINSIC (_sqrt_round_ph) (HF(src1), 8);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _sqrt_round_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(sqrt_ph) (&exp, src1, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_sqrt_round_ph) (HF(res), MASK_VALUE, HF(src1), 8);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_sqrt_round_ph);\n+\n+  EMULATE(sqrt_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_sqrt_round_ph) (ZMASK_VALUE, HF(src1), 8);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_sqrt_round_ph);\n+#endif\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "dd44534a2eb3e027053751fef5fca7afe118299c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vsqrtsh-1a.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtsh-1a.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsqrtsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, x1, x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_sqrt_sh (x1, x2);\n+  res = _mm_mask_sqrt_sh (res, m8, x1, x2);\n+  res = _mm_maskz_sqrt_sh (m8, x1, x2);\n+  res = _mm_sqrt_round_sh (x1, x2, 4);\n+  res = _mm_mask_sqrt_round_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_sqrt_round_sh (m8, x1, x2, 11);\n+}"}, {"sha": "4744c6f1e555a0a1390a0f0e4860d998536a233b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vsqrtsh-1b.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsqrtsh-1b.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_sqrt_sh(V512 * dest, V512 op1,\n+\t\t__mmask8 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k)\n+    v5.f32[0] = sqrtf(v1.f32[0]);\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 1; i < 8; i++)\n+    v5.f32[i] = v1.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_sqrt_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_sqrt_round_sh(exp.xmmh[0], src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_sqrt_round_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_sqrt_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_sqrt_round_sh(res.xmmh[0], 0x1, exp.xmmh[0],\n+                                         src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_sqrt_round_sh\");\n+\n+  emulate_sqrt_sh(&exp, src1,  0x1, 1);\n+  res.xmmh[0] = _mm_maskz_sqrt_round_sh(0x1, exp.xmmh[0], src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_sqrt_round_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+\n+}\n+"}, {"sha": "a5edc176b630885b59f9741089758e0a4350f93f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vrsqrtph-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrsqrtph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrsqrtph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrsqrtph-1a.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1;\n+volatile __m128h x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_rsqrt_ph (x1);\n+  res1 = _mm256_mask_rsqrt_ph (res1, m16, x1);\n+  res1 = _mm256_maskz_rsqrt_ph (m16, x1);\n+\n+  res2 = _mm_rsqrt_ph (x2);\n+  res2 = _mm_mask_rsqrt_ph (res2, m8, x2);\n+  res2 = _mm_maskz_rsqrt_ph (m8, x2);\n+}"}, {"sha": "a5e796b8ebb141873c1145eefee723f199658621", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vrsqrtph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrsqrtph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrsqrtph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrsqrtph-1b.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vrsqrtph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vrsqrtph-1b.c\"\n+"}, {"sha": "4acb137e6b8a17760299adde15f5e1f786dbf1af", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vsqrtph-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vsqrtph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vsqrtph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vsqrtph-1a.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1;\n+volatile __m128h x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_sqrt_ph (x1);\n+  res1 = _mm256_mask_sqrt_ph (res1, m16, x1);\n+  res1 = _mm256_maskz_sqrt_ph (m16, x1);\n+\n+  res2 = _mm_sqrt_ph (x2);\n+  res2 = _mm_mask_sqrt_ph (res2, m8, x2);\n+  res2 = _mm_maskz_sqrt_ph (m8, x2);\n+}"}, {"sha": "9b0a91d7b5d29b5f479f7827f85aa62c27cd3e07", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vsqrtph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vsqrtph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63657291c309c89e6278256b4f7c38c4ea8f7b1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vsqrtph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vsqrtph-1b.c?ref=c63657291c309c89e6278256b4f7c38c4ea8f7b1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vsqrtph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vsqrtph-1b.c\"\n+"}]}