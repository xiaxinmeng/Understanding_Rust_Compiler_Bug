{"sha": "0d2f700f7be6780985b2cfd6bfca44523e058cbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyZjcwMGY3YmU2NzgwOTg1YjJjZmQ2YmZjYTQ0NTIzZTA1OGNiYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-06-03T15:49:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-06-03T15:49:04Z"}, "message": "Add option for whether ceil etc. can raise \"inexact\", adjust x86 conditions.\n\nIn ISO C99/C11, the ceil, floor, round and trunc functions may or may\nnot raise the \"inexact\" exception for noninteger arguments.  Under TS\n18661-1:2014, the C bindings for IEEE 754-2008, these functions are\nprohibited from raising \"inexact\", in line with the general rule that\n\"inexact\" is only when the mathematical infinite precision result of a\nfunction differs from the result after rounding to the target type.\n\nGCC has no option to select TS 18661 requirements for not raising\n\"inexact\" when expanding built-in versions of these functions inline.\nFurthermore, even given such requirements, the conditions on the x86\ninsn patterns for these functions are unnecessarily restrictive.  I'd\nlike to make the out-of-line glibc versions follow the TS 18661\nrequirements; in the cases where this slows them down (the cases using\nx87 floating point), that makes it more important for inline versions\nto be used when the user does not care about \"inexact\".\n\nThis patch fixes these issues.  A new option\n-fno-fp-int-builtin-inexact is added to request TS 18661 rules for\nthese functions; the default -ffp-int-builtin-inexact reflects that\nsuch exceptions are allowed by C99 and C11.  (The intention is that if\nC2x incorporates TS 18661-1, then the default would change in C2x\nmode.)\n\nThe x86 built-ins for rint (x87, SSE2 and SSE4.1) are made\nunconditionally available (no longer depending on\n-funsafe-math-optimizations or -fno-trapping-math); \"inexact\" is\ncorrect for noninteger arguments to rint.  For floor, ceil and trunc,\nthe x87 and SSE2 built-ins are OK if -ffp-int-builtin-inexact or\n-fno-trapping-math (they may raise \"inexact\" for noninteger\narguments); the SSE4.1 built-ins are made to use ROUND_NO_EXC so that\nthey do not raise \"inexact\" and so are OK unconditionally.\n\nNow, while there was no semantic reason for depending on\n-funsafe-math-optimizations, the insn patterns had such a dependence\nbecause of use of gen_truncxf<mode>2_i387_noop to truncate back to\nSFmode or DFmode after using frndint in XFmode.  In this case a no-op\ntruncation is safe because rounding to integer always produces an\nexactly representable value (the same reason why IEEE semantics say it\nshouldn't produce \"inexact\") - but of course that insn pattern isn't\nsafe because it would also match cases where the truncation is not in\nfact a no-op.  To allow frndint to be used for SFmode and DFmode\nwithout that unsafe pattern, the relevant frndint patterns are\nextended to SFmode and DFmode or new SFmode and DFmode patterns added,\nso that the frndint operation can be represented in RTL as an\noperation acting directly on SFmode or DFmode without the extension\nand the problematic truncation.\n\nA generic test of the new option is added, as well as x86-specific\ntests, both execution tests including the generic test with different\nx86 options and scan-assembler tests verifying that functions that\nshould be inlined with different options are indeed inlined.\n\nI think other architectures are OK for TS 18661-1 semantics already.\nConsidering those defining \"ceil\" patterns: aarch64, arm, rs6000, s390\nuse instructions that do not raise \"inexact\"; nvptx does not support\nfloating-point exceptions.  (This does mean the -f option in fact only\naffects one architecture, but I think it should still be a -f option;\nit's logically architecture-independent and is expected to be affected\nby future -std options, so is similar to e.g. -fexcess-precision=,\nwhich also does nothing on most architectures but is implied by -std\noptions.)\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.  OK to\ncommit?\n\n\tPR target/71276\n\tPR target/71277\ngcc:\n\t* common.opt (ffp-int-builtin-inexact): New option.\n\t* doc/invoke.texi (-fno-fp-int-builtin-inexact): Document.\n\t* doc/md.texi (floor@var{m}2, btrunc@var{m}2, round@var{m}2)\n\t(ceil@var{m}2): Document dependence on this option.\n\t* ipa-inline-transform.c (inline_call): Handle\n\tflag_fp_int_builtin_inexact.\n\t* ipa-inline.c (can_inline_edge_p): Likewise.\n\t* config/i386/i386.md (rintxf2): Do not test\n\tflag_unsafe_math_optimizations.\n\t(rint<mode>2_frndint): New define_insn.\n\t(rint<mode>2): Do not test flag_unsafe_math_optimizations for 387\n\tor !flag_trapping_math for SSE.  Just use gen_rint<mode>2_frndint\n\tfor 387 instead of extending and truncating.\n\t(frndintxf2_<rounding>): Test flag_fp_int_builtin_inexact ||\n\t!flag_trapping_math instead of flag_unsafe_math_optimizations.\n\tChange to frndint<mode>2_<rounding>.\n\t(frndintxf2_<rounding>_i387): Likewise.  Change to\n\tfrndint<mode>2_<rounding>_i387.\n\t(<rounding_insn>xf2): Likewise.\n\t(<rounding_insn><mode>2): Test flag_fp_int_builtin_inexact ||\n\t!flag_trapping_math instead of flag_unsafe_math_optimizations for\n\tx87.  Test TARGET_ROUND || !flag_trapping_math ||\n\tflag_fp_int_builtin_inexact instead of !flag_trapping_math for\n\tSSE.  Use ROUND_NO_EXC in constant operand of\n\tgen_sse4_1_round<mode>2.  Just use gen_frndint<mode>2_<rounding>\n\tfor 387 instead of extending and truncating.\n\ngcc/testsuite:\n\t* gcc.dg/torture/builtin-fp-int-inexact.c,\n\tgcc.target/i386/387-builtin-fp-int-inexact.c,\n\tgcc.target/i386/387-rint-inline-1.c,\n\tgcc.target/i386/387-rint-inline-2.c,\n\tgcc.target/i386/sse2-builtin-fp-int-inexact.c,\n\tgcc.target/i386/sse2-rint-inline-1.c,\n\tgcc.target/i386/sse2-rint-inline-2.c,\n\tgcc.target/i386/sse4_1-builtin-fp-int-inexact.c,\n\tgcc.target/i386/sse4_1-rint-inline.c: New tests.\n\nFrom-SVN: r237074", "tree": {"sha": "8faaebee6ba075de829b12273c5953e4f8c2ece5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8faaebee6ba075de829b12273c5953e4f8c2ece5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d2f700f7be6780985b2cfd6bfca44523e058cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2f700f7be6780985b2cfd6bfca44523e058cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d2f700f7be6780985b2cfd6bfca44523e058cbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2f700f7be6780985b2cfd6bfca44523e058cbc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8071c056663dad2458c96705b459561cd5ea130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8071c056663dad2458c96705b459561cd5ea130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8071c056663dad2458c96705b459561cd5ea130"}], "stats": {"total": 446, "additions": 394, "deletions": 52}, "files": [{"sha": "d52fa3d1ffe49b35f3b9c460de036da17781e2dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -1,3 +1,34 @@\n+2016-06-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR target/71276\n+\tPR target/71277\n+\t* common.opt (ffp-int-builtin-inexact): New option.\n+\t* doc/invoke.texi (-fno-fp-int-builtin-inexact): Document.\n+\t* doc/md.texi (floor@var{m}2, btrunc@var{m}2, round@var{m}2)\n+\t(ceil@var{m}2): Document dependence on this option.\n+\t* ipa-inline-transform.c (inline_call): Handle\n+\tflag_fp_int_builtin_inexact.\n+\t* ipa-inline.c (can_inline_edge_p): Likewise.\n+\t* config/i386/i386.md (rintxf2): Do not test\n+\tflag_unsafe_math_optimizations.\n+\t(rint<mode>2_frndint): New define_insn.\n+\t(rint<mode>2): Do not test flag_unsafe_math_optimizations for 387\n+\tor !flag_trapping_math for SSE.  Just use gen_rint<mode>2_frndint\n+\tfor 387 instead of extending and truncating.\n+\t(frndintxf2_<rounding>): Test flag_fp_int_builtin_inexact ||\n+\t!flag_trapping_math instead of flag_unsafe_math_optimizations.\n+\tChange to frndint<mode>2_<rounding>.\n+\t(frndintxf2_<rounding>_i387): Likewise.  Change to\n+\tfrndint<mode>2_<rounding>_i387.\n+\t(<rounding_insn>xf2): Likewise.\n+\t(<rounding_insn><mode>2): Test flag_fp_int_builtin_inexact ||\n+\t!flag_trapping_math instead of flag_unsafe_math_optimizations for\n+\tx87.  Test TARGET_ROUND || !flag_trapping_math ||\n+\tflag_fp_int_builtin_inexact instead of !flag_trapping_math for\n+\tSSE.  Use ROUND_NO_EXC in constant operand of\n+\tgen_sse4_1_round<mode>2.  Just use gen_frndint<mode>2_<rounding>\n+\tfor 387 instead of extending and truncating.\n+\n 2016-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Julia Koval  <julia.koval@intel.com>\n "}, {"sha": "2bb576c51c4add8b8535347b17f775c883e6f7ee", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -1330,6 +1330,10 @@ Enum(fp_contract_mode) String(on) Value(FP_CONTRACT_OFF)\n EnumValue\n Enum(fp_contract_mode) String(fast) Value(FP_CONTRACT_FAST)\n \n+ffp-int-builtin-inexact\n+Common Report Var(flag_fp_int_builtin_inexact) Init(1) Optimization\n+Allow built-in functions ceil, floor, round, trunc to raise \\\"inexact\\\" exceptions.\n+\n ; Nonzero means don't put addresses of constant functions in registers.\n ; Used for compiling the Unix kernel, where strange substitutions are\n ; done on the assembly output."}, {"sha": "a32c4e204ce317dbf9cc40bb452d3e7b559db9a8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -15526,25 +15526,31 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n \t\t   UNSPEC_FRNDINT))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"frndint\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n+(define_insn \"rint<mode>2_frndint\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n+\t(unspec:MODEF [(match_operand:MODEF 1 \"register_operand\" \"0\")]\n+\t\t      UNSPEC_FRNDINT))]\n+  \"TARGET_USE_FANCY_MATH_387\"\n+  \"frndint\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"rint<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"register_operand\"))]\n   \"(TARGET_USE_FANCY_MATH_387\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-\t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations)\n-   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math)\"\n+\t|| TARGET_MIX_SSE_I387))\n+   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n {\n-  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n+  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n@@ -15553,15 +15559,7 @@\n \tix86_expand_rint (operands[0], operands[1]);\n     }\n   else\n-    {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n-\n-      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-      emit_insn (gen_rintxf2 (op0, op1));\n-\n-      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n-    }\n+    emit_insn (gen_rint<mode>2_frndint (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -15784,13 +15782,13 @@\n \t (UNSPEC_FIST_CEIL \"CEIL\")])\n \n ;; Rounding mode control word calculation could clobber FLAGS_REG.\n-(define_insn_and_split \"frndintxf2_<rounding>\"\n-  [(set (match_operand:XF 0 \"register_operand\")\n-\t(unspec:XF [(match_operand:XF 1 \"register_operand\")]\n+(define_insn_and_split \"frndint<mode>2_<rounding>\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\")\n+\t(unspec:X87MODEF [(match_operand:X87MODEF 1 \"register_operand\")]\n \t\t   FRNDINT_ROUNDING))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\n+   && (flag_fp_int_builtin_inexact || !flag_trapping_math)\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -15801,34 +15799,34 @@\n   operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n   operands[3] = assign_386_stack_local (HImode, SLOT_CW_<ROUNDING>);\n \n-  emit_insn (gen_frndintxf2_<rounding>_i387 (operands[0], operands[1],\n-\t\t\t\t\t     operands[2], operands[3]));\n+  emit_insn (gen_frndint<mode>2_<rounding>_i387 (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2], operands[3]));\n   DONE;\n }\n   [(set_attr \"type\" \"frndint\")\n    (set_attr \"i387_cw\" \"<rounding>\")\n-   (set_attr \"mode\" \"XF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"frndintxf2_<rounding>_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n-\t\t   FRNDINT_ROUNDING))\n+(define_insn \"frndint<mode>2_<rounding>_i387\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(unspec:X87MODEF [(match_operand:X87MODEF 1 \"register_operand\" \"0\")]\n+\t\t\t FRNDINT_ROUNDING))\n    (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n    (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+   && (flag_fp_int_builtin_inexact || !flag_trapping_math)\"\n   \"fldcw\\t%3\\n\\tfrndint\\n\\tfldcw\\t%2\"\n   [(set_attr \"type\" \"frndint\")\n    (set_attr \"i387_cw\" \"<rounding>\")\n-   (set_attr \"mode\" \"XF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"<rounding_insn>xf2\"\n   [(parallel [(set (match_operand:XF 0 \"register_operand\")\n \t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")]\n \t\t\t      FRNDINT_ROUNDING))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\")\n+   && (flag_fp_int_builtin_inexact || !flag_trapping_math)\")\n \n (define_expand \"<rounding_insn><mode>2\"\n   [(parallel [(set (match_operand:MODEF 0 \"register_operand\")\n@@ -15838,16 +15836,17 @@\n   \"(TARGET_USE_FANCY_MATH_387\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n \t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations)\n+    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math)\"\n+       && (TARGET_ROUND || !flag_trapping_math || flag_fp_int_builtin_inexact))\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n+      && (TARGET_ROUND || !flag_trapping_math || flag_fp_int_builtin_inexact))\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (ROUND_<ROUNDING>)));\n+\t\t   (operands[0], operands[1], GEN_INT (ROUND_<ROUNDING>\n+\t\t\t\t\t\t       | ROUND_NO_EXC)));\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \t{\n \t  if (ROUND_<ROUNDING> == ROUND_FLOOR)\n@@ -15872,16 +15871,7 @@\n \t}\n     }\n   else\n-    {\n-      rtx op0, op1;\n-\n-      op0 = gen_reg_rtx (XFmode);\n-      op1 = gen_reg_rtx (XFmode);\n-      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_<rounding> (op0, op1));\n-\n-      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n-    }\n+    emit_insn (gen_frndint<mode>2_<rounding> (operands[0], operands[1]));\n   DONE;\n })\n "}, {"sha": "89bd983d741c37cf608c9001da1215ef6621c3b2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -370,9 +370,9 @@ Objective-C and Objective-C++ Dialects}.\n -flto-partition=@var{alg} -fmerge-all-constants @gol\n -fmerge-constants -fmodulo-sched -fmodulo-sched-allow-regmoves @gol\n -fmove-loop-invariants -fno-branch-count-reg @gol\n--fno-defer-pop -fno-function-cse -fno-guess-branch-probability @gol\n--fno-inline -fno-math-errno -fno-peephole -fno-peephole2 @gol\n--fno-sched-interblock -fno-sched-spec -fno-signed-zeros @gol\n+-fno-defer-pop -fno-fp-int-builtin-inexact -fno-function-cse @gol\n+-fno-guess-branch-probability -fno-inline -fno-math-errno -fno-peephole @gol\n+-fno-peephole2 -fno-sched-interblock -fno-sched-spec -fno-signed-zeros @gol\n -fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer -foptimize-sibling-calls @gol\n -fpartial-inlining -fpeel-loops -fpredictive-commoning @gol\n@@ -8532,6 +8532,24 @@ The default is @option{-fno-signaling-nans}.\n This option is experimental and does not currently guarantee to\n disable all GCC optimizations that affect signaling NaN behavior.\n \n+@item -fno-fp-int-builtin-inexact\n+@opindex fno-fp-int-builtin-inexact\n+Do not allow the built-in functions @code{ceil}, @code{floor},\n+@code{round} and @code{trunc}, and their @code{float} and @code{long\n+double} variants, to generate code that raises the ``inexact''\n+floating-point exception for noninteger arguments.  ISO C99 and C11\n+allow these functions to raise the ``inexact'' exception, but ISO/IEC\n+TS 18661-1:2014, the C bindings to IEEE 754-2008, does not allow these\n+functions to do so.\n+\n+The default is @option{-ffp-int-builtin-inexact}, allowing the\n+exception to be raised.  This option does nothing unless\n+@option{-ftrapping-math} is in effect.\n+\n+Even if @option{-fno-fp-int-builtin-inexact} is used, if the functions\n+generate a call to a library function then the ``inexact'' exception\n+may be raised if the library implementation does not follow TS 18661.\n+\n @item -fsingle-precision-constant\n @opindex fsingle-precision-constant\n Treat floating-point constants as single precision instead of"}, {"sha": "12fc712834351e55242c8e25fb6340f804930abe", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -5554,31 +5554,40 @@ This pattern is not allowed to @code{FAIL}.\n @item @samp{floor@var{m}2}\n Store the largest integral value not greater than operand 1 in operand 0.\n Both operands have mode @var{m}, which is a scalar or vector\n-floating-point mode.\n+floating-point mode.  If @option{-ffp-int-builtin-inexact} is in\n+effect, the ``inexact'' exception may be raised for noninteger\n+operands; otherwise, it may not.\n \n This pattern is not allowed to @code{FAIL}.\n \n @cindex @code{btrunc@var{m}2} instruction pattern\n @item @samp{btrunc@var{m}2}\n Round operand 1 to an integer, towards zero, and store the result in\n operand 0.  Both operands have mode @var{m}, which is a scalar or\n-vector floating-point mode.\n+vector floating-point mode.  If @option{-ffp-int-builtin-inexact} is\n+in effect, the ``inexact'' exception may be raised for noninteger\n+operands; otherwise, it may not.\n \n This pattern is not allowed to @code{FAIL}.\n \n @cindex @code{round@var{m}2} instruction pattern\n @item @samp{round@var{m}2}\n Round operand 1 to the nearest integer, rounding away from zero in the\n event of a tie, and store the result in operand 0.  Both operands have\n-mode @var{m}, which is a scalar or vector floating-point mode.\n+mode @var{m}, which is a scalar or vector floating-point mode.  If\n+@option{-ffp-int-builtin-inexact} is in effect, the ``inexact''\n+exception may be raised for noninteger operands; otherwise, it may\n+not.\n \n This pattern is not allowed to @code{FAIL}.\n \n @cindex @code{ceil@var{m}2} instruction pattern\n @item @samp{ceil@var{m}2}\n Store the smallest integral value not less than operand 1 in operand 0.\n Both operands have mode @var{m}, which is a scalar or vector\n-floating-point mode.\n+floating-point mode.  If @option{-ffp-int-builtin-inexact} is in\n+effect, the ``inexact'' exception may be raised for noninteger\n+operands; otherwise, it may not.\n \n This pattern is not allowed to @code{FAIL}.\n "}, {"sha": "f6b7d41d47e8e1df41cd8843cc443a5fc738fc29", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -369,6 +369,8 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \t     != opt_for_fn (to->decl, flag_associative_math)\n \t  || opt_for_fn (callee->decl, flag_reciprocal_math)\n \t     != opt_for_fn (to->decl, flag_reciprocal_math)\n+\t  || opt_for_fn (callee->decl, flag_fp_int_builtin_inexact)\n+\t     != opt_for_fn (to->decl, flag_fp_int_builtin_inexact)\n \t  || opt_for_fn (callee->decl, flag_errno_math)\n \t     != opt_for_fn (to->decl, flag_errno_math))\n \t{\n@@ -393,6 +395,8 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \t    = opt_for_fn (callee->decl, flag_associative_math);\n \t  opts.x_flag_reciprocal_math\n \t    = opt_for_fn (callee->decl, flag_reciprocal_math);\n+\t  opts.x_flag_fp_int_builtin_inexact\n+\t    = opt_for_fn (callee->decl, flag_fp_int_builtin_inexact);\n \t  opts.x_flag_errno_math\n \t    = opt_for_fn (callee->decl, flag_errno_math);\n \t  if (dump_file)"}, {"sha": "5c9366a7cdd8abdccd26871704d6e6ce86136d0e", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -429,6 +429,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n \t\t      || check_maybe_up (flag_signed_zeros)\n \t\t      || check_maybe_down (flag_associative_math)\n \t\t      || check_maybe_down (flag_reciprocal_math)\n+\t\t      || check_maybe_down (flag_fp_int_builtin_inexact)\n \t\t      /* Strictly speaking only when the callee contains function\n \t\t\t calls that may end up setting errno.  */\n \t\t      || check_maybe_up (flag_errno_math)))"}, {"sha": "2822de1620a05ed7d514d7f3ce43f4bd5eff88a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -1,3 +1,17 @@\n+2016-06-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR target/71276\n+\tPR target/71277\n+\t* gcc.dg/torture/builtin-fp-int-inexact.c,\n+\tgcc.target/i386/387-builtin-fp-int-inexact.c,\n+\tgcc.target/i386/387-rint-inline-1.c,\n+\tgcc.target/i386/387-rint-inline-2.c,\n+\tgcc.target/i386/sse2-builtin-fp-int-inexact.c,\n+\tgcc.target/i386/sse2-rint-inline-1.c,\n+\tgcc.target/i386/sse2-rint-inline-2.c,\n+\tgcc.target/i386/sse4_1-builtin-fp-int-inexact.c,\n+\tgcc.target/i386/sse4_1-rint-inline.c: New tests.\n+\n 2016-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Julia Koval  <julia.koval@intel.com>\n "}, {"sha": "80458fa62749947e67014a12ad3c8e1229b6be3a", "filename": "gcc/testsuite/gcc.dg/torture/builtin-fp-int-inexact.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-fp-int-inexact.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-fp-int-inexact.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-fp-int-inexact.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,72 @@\n+/* Test -fno-fp-int-builtin-inexact.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+/* Define functions locally to ensure that if the calls are not\n+   expanded inline, failures do not occur because of libm raising\n+   \"inexact\".  */\n+\n+#define LOCAL_FN(NAME, TYPE)\t\t\t\\\n+  __attribute__ ((noinline, noclone)) TYPE\t\\\n+  NAME (TYPE x)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return x;\t\t\t\t\t\\\n+  }\n+\n+#define LOCAL_FNS(NAME)\t\t\t\t\\\n+  LOCAL_FN (NAME, double)\t\t\t\\\n+  LOCAL_FN (NAME ## f, float)\t\t\t\\\n+  LOCAL_FN (NAME ## l, long double)\n+\n+LOCAL_FNS (ceil)\n+LOCAL_FNS (floor)\n+LOCAL_FNS (round)\n+LOCAL_FNS (trunc)\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define TEST(FN, TYPE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile TYPE a = 1.5, b;\t\t\t\\\n+      b = FN (a);\t\t\t\t\\\n+      if (fetestexcept (FE_INEXACT))\t\t\\\n+\tabort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FN_TESTS(FN)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TEST (__builtin_ ## FN, double);\t\t\t\\\n+      TEST (__builtin_ ## FN ## f, float);\t\t\\\n+      TEST (__builtin_ ## FN ## l, long double);\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+static void\n+main_test (void)\n+{\n+  FN_TESTS (ceil);\n+  FN_TESTS (floor);\n+  FN_TESTS (round);\n+  FN_TESTS (trunc);\n+}\n+\n+/* This file may be included by architecture-specific tests.  */\n+\n+#ifndef ARCH_MAIN\n+\n+int\n+main (void)\n+{\n+  main_test ();\n+  exit (0);\n+}\n+\n+#endif"}, {"sha": "752b487825e718501e5fa12f0aca920fe44da4e6", "filename": "gcc/testsuite/gcc.target/i386/387-builtin-fp-int-inexact.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-builtin-fp-int-inexact.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-builtin-fp-int-inexact.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-builtin-fp-int-inexact.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,7 @@\n+/* Test -fno-fp-int-builtin-inexact for 387.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mfancy-math-387 -mfpmath=387 -fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include \"../../gcc.dg/torture/builtin-fp-int-inexact.c\""}, {"sha": "522edff611aa0bc0ab0d3c0d8abf757ae3b1bd8f", "filename": "gcc/testsuite/gcc.target/i386/387-rint-inline-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-rint-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-rint-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-rint-inline-1.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,36 @@\n+/* Test rint and related functions expanded inline for 387.  All\n+   should be expanded when spurious \"inexact\" allowed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfancy-math-387 -mfpmath=387 -ffp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+\n+#define TEST(FN, TYPE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile TYPE a = 1.5, b;\t\t\t\\\n+      b = FN (a);\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FN_TESTS(FN)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TEST (__builtin_ ## FN, double);\t\t\t\\\n+      TEST (__builtin_ ## FN ## f, float);\t\t\\\n+      TEST (__builtin_ ## FN ## l, long double);\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test (void)\n+{\n+  FN_TESTS (rint);\n+  FN_TESTS (ceil);\n+  FN_TESTS (floor);\n+  FN_TESTS (trunc);\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]rint\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]ceil\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]floor\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]trunc\" } } */"}, {"sha": "be765a7a39fe2fd9712ddb7761bccdb924699dcb", "filename": "gcc/testsuite/gcc.target/i386/387-rint-inline-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-rint-inline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-rint-inline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-rint-inline-2.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,30 @@\n+/* Test rint and related functions expanded inline for 387.  rint\n+   should be expanded even when spurious \"inexact\" not allowed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfancy-math-387 -mfpmath=387 -fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+\n+#define TEST(FN, TYPE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile TYPE a = 1.5, b;\t\t\t\\\n+      b = FN (a);\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FN_TESTS(FN)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TEST (__builtin_ ## FN, double);\t\t\t\\\n+      TEST (__builtin_ ## FN ## f, float);\t\t\\\n+      TEST (__builtin_ ## FN ## l, long double);\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test (void)\n+{\n+  FN_TESTS (rint);\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]rint\" } } */"}, {"sha": "10015972049845b421bd40096ee0e5afca2c7561", "filename": "gcc/testsuite/gcc.target/i386/sse2-builtin-fp-int-inexact.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-builtin-fp-int-inexact.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-builtin-fp-int-inexact.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-builtin-fp-int-inexact.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,12 @@\n+/* Test -fno-fp-int-builtin-inexact for SSE 2.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse -fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+\n+#define main_test sse2_test\n+#define ARCH_MAIN\n+#include \"../../gcc.dg/torture/builtin-fp-int-inexact.c\""}, {"sha": "06baed2046a4af72ba6e0cd5da5261ea851e9ef9", "filename": "gcc/testsuite/gcc.target/i386/sse2-rint-inline-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-rint-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-rint-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-rint-inline-1.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,36 @@\n+/* Test rint and related functions expanded inline for SSE2.  All\n+   should be expanded when spurious \"inexact\" allowed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse -ffp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#define TEST(FN, TYPE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile TYPE a = 1.5, b;\t\t\t\\\n+      b = FN (a);\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FN_TESTS(FN)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TEST (__builtin_ ## FN, double);\t\t\t\\\n+      TEST (__builtin_ ## FN ## f, float);\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test (void)\n+{\n+  FN_TESTS (rint);\n+  FN_TESTS (ceil);\n+  FN_TESTS (floor);\n+  FN_TESTS (trunc);\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]rint\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]ceil\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]floor\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]trunc\" } } */"}, {"sha": "3ebf7a7af69cbf86b37e32a2b996a784f6a49c43", "filename": "gcc/testsuite/gcc.target/i386/sse2-rint-inline-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-rint-inline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-rint-inline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-rint-inline-2.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,30 @@\n+/* Test rint and related functions expanded inline for SSE2.  rint\n+   should be expanded even when spurious \"inexact\" not allowed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse -fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#define TEST(FN, TYPE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile TYPE a = 1.5, b;\t\t\t\\\n+      b = FN (a);\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FN_TESTS(FN)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TEST (__builtin_ ## FN, double);\t\t\t\\\n+      TEST (__builtin_ ## FN ## f, float);\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test (void)\n+{\n+  FN_TESTS (rint);\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]rint\" } } */"}, {"sha": "4c9244d05442ca8505fc4f6c699a910ec4cfc355", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-builtin-fp-int-inexact.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-builtin-fp-int-inexact.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-builtin-fp-int-inexact.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-builtin-fp-int-inexact.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,12 @@\n+/* Test -fno-fp-int-builtin-inexact for SSE 4.1.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse4.1 -mfpmath=sse -fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-require-effective-target sse4 } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define main_test sse4_1_test\n+#define ARCH_MAIN\n+#include \"../../gcc.dg/torture/builtin-fp-int-inexact.c\""}, {"sha": "6d60da33cb7f3e0bda9beb1b1292de4f10d4ac88", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rint-inline.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f700f7be6780985b2cfd6bfca44523e058cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-inline.c?ref=0d2f700f7be6780985b2cfd6bfca44523e058cbc", "patch": "@@ -0,0 +1,36 @@\n+/* Test rint and related functions expanded inline for SSE4.1, even\n+   when spurious \"inexact\" not allowed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -mfpmath=sse -fno-fp-int-builtin-inexact\" } */\n+/* { dg-add-options c99_runtime } */\n+/* { dg-require-effective-target sse4 } */\n+\n+#define TEST(FN, TYPE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile TYPE a = 1.5, b;\t\t\t\\\n+      b = FN (a);\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FN_TESTS(FN)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TEST (__builtin_ ## FN, double);\t\t\t\\\n+      TEST (__builtin_ ## FN ## f, float);\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test (void)\n+{\n+  FN_TESTS (rint);\n+  FN_TESTS (ceil);\n+  FN_TESTS (floor);\n+  FN_TESTS (trunc);\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]rint\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]ceil\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]floor\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]trunc\" } } */"}]}