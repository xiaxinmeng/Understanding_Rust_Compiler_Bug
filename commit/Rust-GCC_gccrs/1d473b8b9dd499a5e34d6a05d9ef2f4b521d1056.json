{"sha": "1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0NzNiOGI5ZGQ0OTlhNWUzNGQ2YTA1ZDllZjJmNGI1MjFkMTA1Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-07T19:22:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-07T19:22:35Z"}, "message": "PR c++/85618 - ICE with initialized VLA.\n\n\t* tree.c (vla_type_p): New.\n\t* typeck2.c (store_init_value, split_nonconstant_init_1): Check it\n\trather than array_of_runtime_bound_p.\n\nFrom-SVN: r260012", "tree": {"sha": "b86bd7a4e4f6fc75b74e2f16bc515803da0700b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86bd7a4e4f6fc75b74e2f16bc515803da0700b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b83f5981c1f0bdc606d5cec28e1f32db7c5bc237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83f5981c1f0bdc606d5cec28e1f32db7c5bc237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83f5981c1f0bdc606d5cec28e1f32db7c5bc237"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "8ab3d36b7110d8bf475ad32312a9482cf6f39897", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -1,3 +1,10 @@\n+2018-05-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85618 - ICE with initialized VLA.\n+\t* tree.c (vla_type_p): New.\n+\t* typeck2.c (store_init_value, split_nonconstant_init_1): Check it\n+\trather than array_of_runtime_bound_p.\n+\n 2018-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* cvt.c (ocp_convert): Early handle the special case of a"}, {"sha": "d5ef6d3cf8008b9a0652c567e39eb6cbacf74d61", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -7097,6 +7097,7 @@ extern tree get_target_expr_sfinae\t\t(tree, tsubst_flags_t);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern bool array_of_runtime_bound_p\t\t(tree);\n+extern bool vla_type_p\t\t\t\t(tree);\n extern tree build_array_copy\t\t\t(tree);\n extern tree build_vec_init_expr\t\t\t(tree, tree, tsubst_flags_t);\n extern void diagnose_non_constexpr_vec_init\t(tree);"}, {"sha": "313ff9008e484ca06bf1458710db97ac41e4d26e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -1051,8 +1051,10 @@ build_array_of_n_type (tree elt, int n)\n   return build_cplus_array_type (elt, build_index_type (size_int (n - 1)));\n }\n \n-/* True iff T is an N3639 array of runtime bound (VLA).  These were\n-   approved for C++14 but then removed.  */\n+/* True iff T is an N3639 array of runtime bound (VLA).  These were approved\n+   for C++14 but then removed.  This should only be used for N3639\n+   specifically; code wondering more generally if something is a VLA should use\n+   vla_type_p.  */\n \n bool\n array_of_runtime_bound_p (tree t)\n@@ -1069,6 +1071,23 @@ array_of_runtime_bound_p (tree t)\n \t  || (!value_dependent_expression_p (max) && !TREE_CONSTANT (max)));\n }\n \n+/* True iff T is a variable length array.  */\n+\n+bool\n+vla_type_p (tree t)\n+{\n+  for (; t && TREE_CODE (t) == ARRAY_TYPE;\n+       t = TREE_TYPE (t))\n+    if (tree dom = TYPE_DOMAIN (t))\n+      {\n+\ttree max = TYPE_MAX_VALUE (dom);\n+\tif (!potential_rvalue_constant_expression (max)\n+\t    || (!value_dependent_expression_p (max) && !TREE_CONSTANT (max)))\n+\t  return true;\n+      }\n+  return false;\n+}\n+\n /* Return a reference type node referring to TO_TYPE.  If RVAL is\n    true, return an rvalue reference type, otherwise return an lvalue\n    reference type.  If a type node exists, reuse it, otherwise create"}, {"sha": "444ebfdcb37a122f9ae8a0d3446b866c4c43ccf1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -611,7 +611,7 @@ split_nonconstant_init_1 (tree dest, tree init)\n       array_type_p = true;\n       if ((TREE_SIDE_EFFECTS (init)\n \t   && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n-\t  || array_of_runtime_bound_p (type))\n+\t  || vla_type_p (type))\n \t{\n \t  /* For an array, we only need/want a single cleanup region rather\n \t     than one per element.  */\n@@ -861,7 +861,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n      will perform the dynamic initialization.  */\n   if (value != error_mark_node\n       && (TREE_SIDE_EFFECTS (value)\n-\t  || array_of_runtime_bound_p (type)\n+\t  || vla_type_p (type)\n \t  || ! reduced_constant_expression_p (value)))\n     return split_nonconstant_init (decl, value);\n   /* If the value is a constant, just put it in DECL_INITIAL.  If DECL"}, {"sha": "80eae0cde617372b4194249f69f95cb23c756162", "filename": "gcc/testsuite/g++.dg/ext/vla20.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla20.C?ref=1d473b8b9dd499a5e34d6a05d9ef2f4b521d1056", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/85618\n+// { dg-additional-options \"-Wno-vla\" }\n+\n+  void function(int size) {\n+     bool myArray[size][size] = {};\n+  }"}]}