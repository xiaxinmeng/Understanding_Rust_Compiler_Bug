{"sha": "af42043e6618e69187b47f37dac870763c01e20f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0MjA0M2U2NjE4ZTY5MTg3YjQ3ZjM3ZGFjODcwNzYzYzAxZTIwZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-05-15T08:11:12Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-05-15T08:21:47Z"}, "message": "Revert \"tree-sra: Avoid refreshing into const base decls (PR 100453)\"\n\nThis reverts commit ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069.\n...because of Ada issues I did not catch with original testing.\n\ngcc/ChangeLog:\n\n2021-05-12  Martin Jambor  <mjambor@suse.cz>\n\n\tRevert:\n        PR tree-optimization/100453\n\t* tree-sra.c (sra_modify_assign): All const base accesses do not\n\tneed refreshing, not just those from decl_pool.\n\t(sra_modify_assign): Do not refresh into a const base decl.\n\ngcc/testsuite/ChangeLog:\n\n2021-05-12  Martin Jambor  <mjambor@suse.cz>\n\n\tRevert:\n        PR tree-optimization/100453\n\t* gcc.dg/tree-ssa/pr100453.c: New test.", "tree": {"sha": "f0d7328f70f0259a73047f555ce22f8477f9c2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d7328f70f0259a73047f555ce22f8477f9c2e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af42043e6618e69187b47f37dac870763c01e20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af42043e6618e69187b47f37dac870763c01e20f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af42043e6618e69187b47f37dac870763c01e20f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af42043e6618e69187b47f37dac870763c01e20f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "425ad87dcfacbb326d8f448a0f2b4d6b53dcd98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425ad87dcfacbb326d8f448a0f2b4d6b53dcd98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425ad87dcfacbb326d8f448a0f2b4d6b53dcd98f"}], "stats": {"total": 22, "additions": 2, "deletions": 20}, "files": [{"sha": "0cf0ad23815350f4be1eacc72432ff25bca8b82a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr100453.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425ad87dcfacbb326d8f448a0f2b4d6b53dcd98f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425ad87dcfacbb326d8f448a0f2b4d6b53dcd98f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100453.c?ref=425ad87dcfacbb326d8f448a0f2b4d6b53dcd98f", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-O1\" } */\n-\n-struct a {\n-  int b : 4;\n-} d;\n-static int c, e;\n-static const struct a f;\n-static void g(const struct a h) {\n-  for (; c < 1; c++)\n-    d = h;\n-  e = h.b;\n-  c = h.b;\n-}\n-int main() {\n-  g(f);\n-  return 0;\n-}"}, {"sha": "8dfc923ed7e3b8558e818c13a9f48aa3e4aa8dbe", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af42043e6618e69187b47f37dac870763c01e20f/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af42043e6618e69187b47f37dac870763c01e20f/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=af42043e6618e69187b47f37dac870763c01e20f", "patch": "@@ -4244,7 +4244,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n       || stmt_ends_bb_p (stmt))\n     {\n       /* No need to copy into a constant-pool, it comes pre-initialized.  */\n-      if (access_has_children_p (racc) && !TREE_READONLY (racc->base))\n+      if (access_has_children_p (racc) && !constant_decl_p (racc->base))\n \tgenerate_subtree_copies (racc->first_child, rhs, racc->offset, 0, 0,\n \t\t\t\t gsi, false, false, loc);\n       if (access_has_children_p (lacc))\n@@ -4333,7 +4333,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t    }\n \t  /* Restore the aggregate RHS from its components so the\n \t     prevailing aggregate copy does the right thing.  */\n-\t  if (access_has_children_p (racc) && !TREE_READONLY (racc->base))\n+\t  if (access_has_children_p (racc))\n \t    generate_subtree_copies (racc->first_child, rhs, racc->offset, 0, 0,\n \t\t\t\t     gsi, false, false, loc);\n \t  /* Re-load the components of the aggregate copy destination."}]}