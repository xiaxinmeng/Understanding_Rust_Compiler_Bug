{"sha": "eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxZjRkOWQyODA0YThmMjQ0YTA2YmZmMmQyMmQ2MjkwNmNjY2JiOA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-18T19:00:26Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-18T19:00:26Z"}, "message": "c-lex.c: s/change_file/file_change.\n\n        * c-lex.c: s/change_file/file_change.\n        * cpplib.h: Similarly.\n        * cppmain.c: Similarly.\n        * fix-header.c: Similarly.\n        * cppfiles.c (stack_include_file): Pass the buffer location and\n        size to cpp_push_buffer.  Generate the file_change callback,\n        so that sysp is already set.\n        * cpphash.h: Add _cpp_do_file_change.\n        * cpplib.c (do_line): Set buffer->sysp directly. Generate the\n        file_change callback after setting sysp.\n        (_cpp_do_file_change): Handle FC_ENTER and the FC_RENAME exception\n        here.\n        (cpp_push_buffer): Don't generate a callback.  Clear sysp.\n        (cpp_pop_buffer): Clean up logic.\n\nFrom-SVN: r38357", "tree": {"sha": "dc29c41d4ea8d368485a05613f91c17d4bec16ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc29c41d4ea8d368485a05613f91c17d4bec16ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/comments", "author": null, "committer": null, "parents": [{"sha": "e2187d3b5278e31a321fae25879d9044248d2287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2187d3b5278e31a321fae25879d9044248d2287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2187d3b5278e31a321fae25879d9044248d2287"}], "stats": {"total": 167, "additions": 95, "deletions": 72}, "files": [{"sha": "76be2af58508d4f0d0122383d261aef2f888657e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -1,3 +1,20 @@\n+2000-12-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * c-lex.c: s/change_file/file_change.\n+        * cpplib.h: Similarly.\n+        * cppmain.c: Similarly.\n+        * fix-header.c: Similarly.\n+        * cppfiles.c (stack_include_file): Pass the buffer location and\n+        size to cpp_push_buffer.  Generate the file_change callback,\n+        so that sysp is already set.\n+        * cpphash.h: Add _cpp_do_file_change.\n+        * cpplib.c (do_line): Set buffer->sysp directly. Generate the\n+        file_change callback after setting sysp.\n+        (_cpp_do_file_change): Handle FC_ENTER and the FC_RENAME exception\n+        here.\n+        (cpp_push_buffer): Don't generate a callback.  Clear sysp.\n+        (cpp_pop_buffer): Clean up logic.\n+\n 2000-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.in (gcc_gxx_include_dir): Simplify."}, {"sha": "645661d405956d88b81445dfebabaa3886f4118d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -90,7 +90,7 @@ static tree lex_charconst\tPARAMS ((const char *, unsigned int, int));\n static void update_header_times\tPARAMS ((const char *));\n static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n static void cb_ident\t\tPARAMS ((cpp_reader *, const cpp_string *));\n-static void cb_change_file    PARAMS ((cpp_reader *, const cpp_file_change *));\n+static void cb_file_change    PARAMS ((cpp_reader *, const cpp_file_change *));\n static void cb_def_pragma\tPARAMS ((cpp_reader *));\n \f\n const char *\n@@ -120,7 +120,7 @@ init_c_lex (filename)\n #endif\n \n   parse_in->cb.ident = cb_ident;\n-  parse_in->cb.change_file = cb_change_file;\n+  parse_in->cb.file_change = cb_file_change;\n   parse_in->cb.def_pragma = cb_def_pragma;\n \n   if (filename == 0 || !strcmp (filename, \"-\"))\n@@ -226,7 +226,7 @@ cb_ident (pfile, str)\n }\n \n static void\n-cb_change_file (pfile, fc)\n+cb_file_change (pfile, fc)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n      const cpp_file_change *fc;\n {"}, {"sha": "ddf2e800f0afc2153c19c68d4ef49833e25968b1", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -245,21 +245,19 @@ stack_include_file (pfile, inc)\n      cpp_reader *pfile;\n      struct include_file *inc;\n {\n+  size_t len = 0;\n   cpp_buffer *fp;\n \n   /* Not in cache?  */\n   if (! inc->buffer)\n     read_include_file (pfile, inc);\n \n-  /* Push a null buffer.  */\n-  fp = cpp_push_buffer (pfile, NULL, 0, BUF_FILE, inc->name);\n-  fp->inc = inc;\n-  fp->buf = inc->buffer;\n-  fp->rlimit = fp->buf;\n   if (! DO_NOT_REREAD (inc))\n-    fp->rlimit += inc->st.st_size;\n-  fp->cur = fp->buf;\n-  fp->line_base = fp->buf;\n+    len = inc->st.st_size;\n+\n+  /* Push a buffer.  */\n+  fp = cpp_push_buffer (pfile, inc->buffer, len, BUF_FILE, inc->name);\n+  fp->inc = inc;\n   fp->inc->refcnt++;\n   if (inc->foundhere)\n     fp->sysp = inc->foundhere->sysp;\n@@ -273,6 +271,11 @@ stack_include_file (pfile, inc)\n   pfile->mi_state = MI_OUTSIDE;\n   pfile->mi_cmacro = 0;\n   pfile->include_depth++;\n+\n+  /* Generate the call back.  */\n+  fp->lineno = 0;\n+  _cpp_do_file_change (pfile, FC_ENTER, 0, 0);\n+  fp->lineno = 1;\n }\n \n /* Read the file referenced by INC into the file cache."}, {"sha": "6cd162181a0d47243f60296a364ce63822868202", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -229,6 +229,8 @@ extern void _cpp_do__Pragma\tPARAMS ((cpp_reader *));\n extern void _cpp_init_stacks\tPARAMS ((cpp_reader *));\n extern void _cpp_cleanup_stacks\tPARAMS ((cpp_reader *));\n extern void _cpp_init_internal_pragmas PARAMS ((cpp_reader *));\n+extern void _cpp_do_file_change PARAMS ((cpp_reader *, enum cpp_fc_reason,\n+\t\t\t\t\t const char *, unsigned int));\n \n /* Utility routines and macros.  */\n #define DSC(str) (const U_CHAR *)str, sizeof str - 1"}, {"sha": "c915f77454035aedd697f756e3c93d747cd31ecc", "filename": "gcc/cpplib.c", "status": "modified", "additions": 55, "deletions": 54, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -108,8 +108,6 @@ static cpp_hashnode *parse_assertion PARAMS ((cpp_reader *, struct answer **,\n static struct answer ** find_answer PARAMS ((cpp_hashnode *,\n \t\t\t\t\t     const struct answer *));\n static void handle_assertion\tPARAMS ((cpp_reader *, const char *, int));\n-static void do_file_change\tPARAMS ((cpp_reader *, enum cpp_fc_reason,\n-\t\t\t\t\t const char *, unsigned int));\n \n /* This is the table of directive handlers.  It is ordered by\n    frequency of occurrence; the numbers at the end are directive\n@@ -768,10 +766,8 @@ do_line (pfile)\n \t\t\t\t buffer->nominal_fname);\n \t\t}\n \t    }\n-\n-\t  cpp_make_system_header (pfile, sysp, sysp == 2);\n+\t  buffer->sysp = sysp;\n \t}\n-\n       buffer->nominal_fname = fname;\n     }\n   else if (token.type != CPP_EOF)\n@@ -783,37 +779,47 @@ do_line (pfile)\n \n   /* Our line number is incremented after the directive is processed.  */\n   buffer->lineno = new_lineno - 1;\n-\n-  if (reason == FC_RENAME)\n-    {\n-      /* Special case for file \"foo.i\" with \"# 1 foo.c\" on first line.  */\n-      if (! buffer->prev && pfile->directive_pos.line == 1)\n-\tfilename = 0;\n-      do_file_change (pfile, reason, filename, lineno);\n-    }\n+  _cpp_do_file_change (pfile, reason, filename, lineno);\n }\n \n /* Arrange the file_change callback.  */\n-static void\n-do_file_change (pfile, reason, from_file, from_lineno)\n+void\n+_cpp_do_file_change (pfile, reason, from_file, from_lineno)\n      cpp_reader *pfile;\n      enum cpp_fc_reason reason;\n      const char *from_file;\n      unsigned int from_lineno;\n {\n-  if (pfile->cb.change_file)\n+  if (pfile->cb.file_change)\n     {\n       cpp_file_change fc;\n       cpp_buffer *buffer = pfile->buffer;\n \n       fc.reason = reason;\n-      fc.from.filename = from_file;\n-      fc.from.lineno = from_lineno;\n       fc.to.filename = buffer->nominal_fname;\n       fc.to.lineno = buffer->lineno + 1;\n       fc.sysp = buffer->sysp;\n       fc.externc = CPP_OPTION (pfile, cplusplus) && buffer->sysp == 2;\n-      pfile->cb.change_file (pfile, &fc);\n+\n+      /* Caller doesn't need to handle FC_ENTER.  */\n+      if (reason == FC_ENTER)\n+\t{\n+\t  if (buffer->prev)\n+\t    {\n+\t      from_file = buffer->prev->nominal_fname;\n+\t      from_lineno = buffer->prev->lineno;\n+\t    }\n+\t  else\n+\t    from_file = 0;\n+\t}\n+      /* Special case for file \"foo.i\" with \"# 1 foo.c\" on first line.  */\n+      else if (reason == FC_RENAME && ! buffer->prev\n+\t       && pfile->directive_pos.line == 1)\n+\tfrom_file = 0;\n+\n+      fc.from.filename = from_file;\n+      fc.from.lineno = from_lineno;\n+      pfile->cb.file_change (pfile, &fc);\n     }\n }\n \n@@ -1708,9 +1714,9 @@ handle_assertion (pfile, str, type)\n   run_directive (pfile, type, BUF_CL_OPTION, str, count);\n }\n \n-/* Push a new buffer on the buffer stack.  Buffer can be NULL, but\n-   then LEN should be 0.  Returns the new buffer; it doesn't fail.  */\n-\n+/* Push a new buffer on the buffer stack.  Returns the new buffer; it\n+   doesn't fail.  It does not generate a file change call back; that\n+   is the responsibility of the caller.  */\n cpp_buffer *\n cpp_push_buffer (pfile, buffer, len, type, filename)\n      cpp_reader *pfile;\n@@ -1741,6 +1747,7 @@ cpp_push_buffer (pfile, buffer, len, type, filename)\n \n       new->line_base = new->buf = new->cur = buffer;\n       new->rlimit = buffer + len;\n+      new->sysp = 0;\n \n       /* No read ahead or extra char initially.  */\n       new->read_ahead = EOF;\n@@ -1758,38 +1765,26 @@ cpp_push_buffer (pfile, buffer, len, type, filename)\n   new->prev = pfile->buffer;\n   new->pfile = pfile;\n   new->include_stack_listed = 0;\n+  new->lineno = 1;\n \n   pfile->state.next_bol = 1;\n   pfile->buffer_stack_depth++;\n   pfile->buffer = new;\n \n-  if (type == BUF_FILE || type == BUF_FAKE)\n-    {\n-      const char *filename = 0;\n-      unsigned int lineno = 0;\n-\n-      if (new->prev)\n-\t{\n-\t  filename = new->prev->nominal_fname;\n-\t  lineno = new->prev->lineno;\n-\t}\n-      new->lineno = 0;\n-      do_file_change (pfile, FC_ENTER, filename, lineno);\n-    }\n-\n-  new->lineno = 1;\n   return new;\n }\n \n+/* If called from do_line, pops a single buffer.  Otherwise pops all\n+   buffers until a real file is reached.  Generates appropriate\n+   call-backs.  */\n cpp_buffer *\n cpp_pop_buffer (pfile)\n      cpp_reader *pfile;\n {\n   cpp_buffer *buffer;\n   struct if_stack *ifs;\n-  int in_do_line = pfile->directive == &dtable[T_LINE];\n \n-  do\n+  for (;;)\n     {\n       buffer = pfile->buffer;\n       /* Walk back up the conditional stack till we reach its level at\n@@ -1799,28 +1794,34 @@ cpp_pop_buffer (pfile)\n \t\t\t     \"unterminated #%s\", dtable[ifs->type].name);\n \n       if (buffer->type == BUF_FAKE)\n-\t{\n-\t  if (!in_do_line)\n-\t    cpp_warning (pfile, \"file \\\"%s\\\" entered but not left\",\n-\t\t\t buffer->nominal_fname);\n-\n-\t  buffer->prev->cur = buffer->cur;\n-\t}\n+\tbuffer->prev->cur = buffer->cur;\n       else if (buffer->type == BUF_FILE)\n \t_cpp_pop_file_buffer (pfile, buffer);\n \n       pfile->buffer = buffer->prev;\n       pfile->buffer_stack_depth--;\n \n-      if ((buffer->type == BUF_FILE || buffer->type == BUF_FAKE)\n-\t  && pfile->buffer)\n-\t{\n-\t  do_file_change (pfile, FC_LEAVE, buffer->nominal_fname,\n-\t\t\t  buffer->lineno);\n-\t  pfile->buffer->include_stack_listed = 0;\n-\t}\n+      /* Callbacks only generated for faked or real files.  */\n+      if (buffer->type != BUF_FILE && buffer->type != BUF_FAKE)\n+\tbreak;\n+\t  \n+      /* No callback for EOF of last file.  */\n+      if (!pfile->buffer)\n+\tbreak;\n+\n+      /* do_line does its own call backs.  */\n+      pfile->buffer->include_stack_listed = 0;\n+      if (pfile->directive == &dtable[T_LINE])\n+\tbreak;\n+\n+      _cpp_do_file_change (pfile, FC_LEAVE, buffer->nominal_fname,\n+\t\t\t   buffer->lineno);\n+      if (pfile->buffer->type == BUF_FILE)\n+\tbreak;\n+\n+      cpp_warning (pfile, \"file \\\"%s\\\" entered but not left\",\n+\t\t   buffer->nominal_fname);\n     }\n-  while (pfile->buffer && pfile->buffer->type == BUF_FAKE && !in_do_line);\n \n   obstack_free (pfile->buffer_ob, buffer);\n   return pfile->buffer;"}, {"sha": "3c71188c480726bcba7a14e7400967cde233bc15", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -590,7 +590,7 @@ struct cpp_reader\n \n   /* Call backs.  */\n   struct {\n-    void (*change_file) PARAMS ((cpp_reader *, const cpp_file_change *));\n+    void (*file_change) PARAMS ((cpp_reader *, const cpp_file_change *));\n     void (*include) PARAMS ((cpp_reader *, const unsigned char *,\n \t\t\t     const cpp_token *));\n     void (*define) PARAMS ((cpp_reader *, cpp_hashnode *));"}, {"sha": "ed6858e3c1f3045e9031ac9f5a68ce25b175ef77", "filename": "gcc/cppmain.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -57,7 +57,7 @@ static void cb_undef\tPARAMS ((cpp_reader *, cpp_hashnode *));\n static void cb_include\tPARAMS ((cpp_reader *, const unsigned char *,\n \t\t\t\t const cpp_token *));\n static void cb_ident\t  PARAMS ((cpp_reader *, const cpp_string *));\n-static void cb_change_file PARAMS ((cpp_reader *, const cpp_file_change *));\n+static void cb_file_change PARAMS ((cpp_reader *, const cpp_file_change *));\n static void cb_def_pragma PARAMS ((cpp_reader *));\n static void do_pragma_implementation PARAMS ((cpp_reader *));\n \n@@ -154,7 +154,7 @@ setup_callbacks ()\n       pfile->cb.ident      = cb_ident;\n       pfile->cb.def_pragma = cb_def_pragma;\n       if (! CPP_OPTION (pfile, no_line_commands))\n-\tpfile->cb.change_file = cb_change_file;\n+\tpfile->cb.file_change = cb_file_change;\n     }\n \n   if (CPP_OPTION (pfile, dump_includes))\n@@ -374,7 +374,7 @@ cb_include (pfile, dir, header)\n }\n \n static void\n-cb_change_file (pfile, fc)\n+cb_file_change (pfile, fc)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n      const cpp_file_change *fc;\n {"}, {"sha": "28cfe870974e8e6dfeccc365726155ca6e46749f", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "patch": "@@ -199,7 +199,7 @@ static int inf_skip_spaces PARAMS ((int));\n static int inf_read_upto PARAMS ((sstring *, int));\n static int inf_scan_ident PARAMS ((sstring *, int));\n static int check_protection PARAMS ((int *, int *));\n-static void cb_change_file PARAMS ((cpp_reader *, const cpp_file_change *));\n+static void cb_file_change PARAMS ((cpp_reader *, const cpp_file_change *));\n \n static void\n add_symbols (flags, names)\n@@ -598,7 +598,7 @@ check_macro_names (pfile, names)\n }\n \n static void\n-cb_change_file (pfile, fc)\n+cb_file_change (pfile, fc)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n      const cpp_file_change *fc;\n {\n@@ -620,7 +620,7 @@ read_scan_file (in_fname, argc, argv)\n   obstack_init (&scan_file_obstack); \n \n   scan_in = cpp_create_reader (CLK_GNUC89);\n-  scan_in->cb.change_file = cb_change_file;\n+  scan_in->cb.file_change = cb_file_change;\n \n   /* We are going to be scanning a header file out of its proper context,\n      so ignore warnings and errors.  */"}]}