{"sha": "81cf47b209c433b6cb1ccffb030789a06ffa5c16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjZjQ3YjIwOWM0MzNiNmNiMWNjZmZiMDMwNzg5YTA2ZmZhNWMxNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-18T16:09:35Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-18T16:09:35Z"}, "message": "c-common.c (check_format_types): Check for writing through a NULL pointer argument.\n\n\t* c-common.c (check_format_types): Check for writing through a\n\tNULL pointer argument.\n\ntestsuite:\n\t* gcc.dg/c90-printf-1.c, gcc.dg/c90-scanf-1.c: Add tests for\n\twriting through null pointers; remove comment about testing\n\tunterminated strings.\n\nFrom-SVN: r36936", "tree": {"sha": "85c536f50f4a4636eb737ad764e804903e9b46cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c536f50f4a4636eb737ad764e804903e9b46cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81cf47b209c433b6cb1ccffb030789a06ffa5c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cf47b209c433b6cb1ccffb030789a06ffa5c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81cf47b209c433b6cb1ccffb030789a06ffa5c16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cf47b209c433b6cb1ccffb030789a06ffa5c16/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c35f4b2435bc05271dca75ec26a585e6853f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c35f4b2435bc05271dca75ec26a585e6853f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c35f4b2435bc05271dca75ec26a585e6853f4a"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "a3f14f9748e2697481d63e9f7cd4b457920f48a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81cf47b209c433b6cb1ccffb030789a06ffa5c16", "patch": "@@ -1,3 +1,8 @@\n+2000-10-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (check_format_types): Check for writing through a\n+\tNULL pointer argument.\n+\n 2000-10-18  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* tm.texi (Exception Region Output): Document"}, {"sha": "09cb949f4391f8332ad9b81116e6283c88b2ad3e", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=81cf47b209c433b6cb1ccffb030789a06ffa5c16", "patch": "@@ -3119,6 +3119,15 @@ check_format_types (status, types)\n \t      if (TREE_CODE (cur_type) == ERROR_MARK)\n \t\tbreak;\n \n+\t      /* Check for writing through a NULL pointer.  */\n+\t      if (types->writing_in_flag\n+\t\t  && i == 0\n+\t\t  && cur_param != 0\n+\t\t  && integer_zerop (cur_param))\n+\t\tstatus_warning (status,\n+\t\t\t\t\"writing through null pointer (arg %d)\",\n+\t\t\t\targ_num);\n+\n \t      if (cur_param != 0 && TREE_CODE (cur_param) == ADDR_EXPR)\n \t\tcur_param = TREE_OPERAND (cur_param, 0);\n \t      else"}, {"sha": "679b4edf630432d33426ca613342aca05f81777b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81cf47b209c433b6cb1ccffb030789a06ffa5c16", "patch": "@@ -1,3 +1,9 @@\n+2000-10-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-printf-1.c, gcc.dg/c90-scanf-1.c: Add tests for\n+\twriting through null pointers; remove comment about testing\n+\tunterminated strings.\n+\n 2000-10-17  Matthew Hiller  <hiller@redhat.com>\n \n \t* gcc.c-torture/execute/20001017-2.c: New test."}, {"sha": "85193ec72e9b647168cd1e799202987f9787eefa", "filename": "gcc/testsuite/gcc.dg/c90-printf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c?ref=81cf47b209c433b6cb1ccffb030789a06ffa5c16", "patch": "@@ -244,5 +244,5 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%++d\", i); /* { dg-warning \"repeated\" \"repeated flag warning\" } */\n   printf (\"%n\", cn); /* { dg-warning \"constant\" \"%n with const\" } */\n   printf ((const char *)L\"foo\"); /* { dg-warning \"wide\" \"wide string\" } */\n-  /* Can we test for the warning for unterminated string formats?  */\n+  printf (\"%n\", (int *)0); /* { dg-warning \"null\" \"%n with NULL\" } */\n }"}, {"sha": "922a7a782bd61311ce1d63224fa8f0e71a989772", "filename": "gcc/testsuite/gcc.dg/c90-scanf-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf47b209c433b6cb1ccffb030789a06ffa5c16/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-1.c?ref=81cf47b209c433b6cb1ccffb030789a06ffa5c16", "patch": "@@ -122,4 +122,5 @@ foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,\n   scanf (\"%d\\0%d\", ip, ip); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n   scanf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n   scanf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n+  scanf (\"%d\", (int *)0); /* { dg-warning \"null\" \"writing into NULL\" } */\n }"}]}