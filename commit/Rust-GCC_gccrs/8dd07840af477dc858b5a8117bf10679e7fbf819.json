{"sha": "8dd07840af477dc858b5a8117bf10679e7fbf819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkMDc4NDBhZjQ3N2RjODU4YjVhODExN2JmMTA2NzllN2ZiZjgxOQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-25T21:18:55Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-02-25T21:18:55Z"}, "message": "gnat_rm.texi, [...]: Fix spacing after `e.g.' and `i.e.' by adding comma or `@:' as appropriate.\n\n* gnat_rm.texi, gnat_ugn.texi: Fix spacing after `e.g.' and\n`i.e.' by adding comma or `@:' as appropriate.\n* gnat_rm.texi (Pragma Wide_Character_Encoding): Instead of\nplain characters `C', use `@samp{C}'.\n* gnat_ugn.texi (File Naming Rules, About gnatkr)\n(Krunching Method): Likewise.\n\nFrom-SVN: r132642", "tree": {"sha": "bd7edd4d2292dc0c324d6ec9fd0deb81300050ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7edd4d2292dc0c324d6ec9fd0deb81300050ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dd07840af477dc858b5a8117bf10679e7fbf819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd07840af477dc858b5a8117bf10679e7fbf819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd07840af477dc858b5a8117bf10679e7fbf819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd07840af477dc858b5a8117bf10679e7fbf819/comments", "author": null, "committer": null, "parents": [{"sha": "443b3472e69d0cf2252844ec675bdeaeba1c4d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443b3472e69d0cf2252844ec675bdeaeba1c4d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443b3472e69d0cf2252844ec675bdeaeba1c4d80"}], "stats": {"total": 148, "additions": 79, "deletions": 69}, "files": [{"sha": "954f1a90c5ab23bc5d5ca611131116ef8d49db49", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd07840af477dc858b5a8117bf10679e7fbf819/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd07840af477dc858b5a8117bf10679e7fbf819/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8dd07840af477dc858b5a8117bf10679e7fbf819", "patch": "@@ -1,5 +1,12 @@\n 2008-02-25  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n+\t* gnat_rm.texi, gnat_ugn.texi: Fix spacing after `e.g.' and\n+\t`i.e.' by adding comma or `@:' as appropriate.\n+\t* gnat_rm.texi (Pragma Wide_Character_Encoding): Instead of\n+\tplain characters `C', use `@samp{C}'.\n+\t* gnat_ugn.texi (File Naming Rules, About gnatkr)\n+\t(Krunching Method): Likewise.\n+\n \t* gnat_ugn.texi (Conventions): List environment variables and\n \tmetasyntactic variables.\n \t(Compiling Programs): Fix notation of metasyntactic variables."}, {"sha": "cbc5685ffb8c218a474a1ccc805fb1605ecc7009", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd07840af477dc858b5a8117bf10679e7fbf819/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd07840af477dc858b5a8117bf10679e7fbf819/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8dd07840af477dc858b5a8117bf10679e7fbf819", "patch": "@@ -1067,8 +1067,8 @@ and as the prefix of a @code{Check_Name'Enabled} attribute reference. For\n any of these three cases, the check name must be visible. A check\n name is visible if it is in the configuration pragmas applying to\n the current unit, or if it appears at the start of any unit that\n-is part of the dependency set of the current unit (e.g. units that\n-are mentioned in @code{with} clauses.\n+is part of the dependency set of the current unit (e.g., units that\n+are mentioned in @code{with} clauses).\n \n @node Pragma Comment\n @unnumberedsec Pragma Comment\n@@ -1141,7 +1141,7 @@ expression. The pragma is effective only if the value of this expression\n is known at compile time, and has the value True. The set of expressions\n whose values are known at compile time includes all static boolean\n expressions, and also other values which the compiler can determine\n-at compile time (e.g. the size of a record type set by an explicit\n+at compile time (e.g., the size of a record type set by an explicit\n size representation clause, or the value of a variable which was\n initialized to a constant and is known not to have been modified).\n If these conditions are met, an error message is generated using\n@@ -2917,7 +2917,7 @@ and causes @var{LOCAL_NAME} to be emitted as an alias for the symbol\n is reserved for @var{LOCAL_NAME} by the assembler and it will be resolved\n to the same address as @var{static_string_EXPRESSION} by the linker.\n \n-The actual linker name for the target must be used (e.g. the fully\n+The actual linker name for the target must be used (e.g.@: the fully\n encoded name with qualification in Ada, or the mangled name in C++),\n or it must be declared using the C convention with @code{pragma Import}\n or @code{pragma Export}.\n@@ -3022,7 +3022,7 @@ at the symbolic level with the compiler.\n Some file formats do not support arbitrary sections so not all target\n machines support this pragma. The use of this pragma may cause a program\n execution to be erroneous if it is used to place an entity into an\n-inappropriate section (e.g. a modified variable into the @code{.text}\n+inappropriate section (e.g.@: a modified variable into the @code{.text}\n section). See also @code{pragma Persistent_BSS}.\n \n @smallexample @c ada\n@@ -3325,7 +3325,7 @@ indication of obsolescence applies only when compiling in Ada 2005\n mode. This is primarily intended for dealing with the situations\n in the predefined library where subprograms or packages\n have become defined as obsolescent in Ada 2005\n-(e.g. in Ada.Characters.Handling), but may be used anywhere.\n+(e.g.@: in Ada.Characters.Handling), but may be used anywhere.\n \n The following examples show typical uses of this pragma:\n \n@@ -4730,7 +4730,8 @@ to appear within the same file.\n The argument can be an identifier or a character literal. In the identifier\n case, it is one of @code{HEX}, @code{UPPER}, @code{SHIFT_JIS},\n @code{EUC}, @code{UTF8}, or @code{BRACKETS}. In the character literal\n-case it is correspondingly one of the characters h,u,s,e,8,b.\n+case it is correspondingly one of the characters @samp{h}, @samp{u},\n+@samp{s}, @samp{e}, @samp{8}, or @samp{b}.\n \n Note that when the pragma is used within a file, it affects only the\n encoding within that file, and does not affect withed units, specs,\n@@ -8469,7 +8470,7 @@ suffix\n is the hexadecimal representation of the virtual address of the corresponding\n task control block. If the variable is an array of tasks, the image of each\n task will have the form of an indexed component indicating the position of a\n-given task in the array, eg.  Group(5)_XXXXXXX. If the task is a\n+given task in the array, e.g.@: Group(5)_XXXXXXX. If the task is a\n component of a record, the image of the task will have the form of a selected\n component. These rules are fully recursive, so that the image of a task that\n is a subcomponent of a composite object corresponds to the expression that\n@@ -10459,7 +10460,7 @@ including the important case of single bits or boolean values, then\n there are no limitations on placement of such components, and they\n may start and end at arbitrary bit boundaries.\n \n-If the component size is not a power of 2 (e.g. 3 or 5), then\n+If the component size is not a power of 2 (e.g.@: 3 or 5), then\n an array of this type longer than 64 bits must always be placed on\n on a storage unit (byte) boundary and occupy an integral number\n of storage units (bytes). Any component clause that does not\n@@ -11616,7 +11617,7 @@ library routines that support streams. This facilitates shared use of these\n streams by mixed language programs. Note though that system level buffering is\n explicitly enabled at elaboration of the standard I/O packages and that can\n have an impact on mixed language programs, in particular those using I/O before\n-calling the Ada elaboration routine (e.g. adainit). It is recommended to call\n+calling the Ada elaboration routine (e.g.@: adainit). It is recommended to call\n the Ada elaboration routine before performing any I/O or when impractical,\n flush the common I/O streams and in particular Standard_Output before\n elaborating the Ada code.\n@@ -12587,7 +12588,7 @@ package Interfaces.C_Streams is\n   -- If text_translation_required is true, then the following\n   -- functions may be used to dynamically switch a file from\n   -- binary to text mode or vice versa.  These functions have\n-  -- no effect if text_translation_required is false (i.e.  in\n+  -- no effect if text_translation_required is false (i.e.@: in\n   -- normal UNIX mode).  Use fileno to get a stream handle.\n   procedure set_binary_mode (handle : int);\n   procedure set_text_mode (handle : int);\n@@ -14676,7 +14677,7 @@ GNAT fully implements the pragma @code{Shared_Passive} for\n @cindex pragma @code{Shared_Passive}\n the purpose of designating shared passive packages.\n This allows the use of passive partitions in the\n-context described in the Ada Reference Manual; i.e. for communication\n+context described in the Ada Reference Manual; i.e., for communication\n between separate partitions of a distributed application using the\n features in Annex E.\n @cindex Annex E\n@@ -14693,7 +14694,7 @@ partitions, using protected objects for synchronization where\n needed. The only requirement is that the two programs have a\n common shared file system. It is even possible for programs\n running on different machines with different architectures\n-(e.g. different endianness) to communicate via the data in\n+(e.g.@: different endianness) to communicate via the data in\n a passive partition.\n \n @item Persistence between program runs\n@@ -16005,7 +16006,7 @@ on which the program should execute.\n @item Communication_Protocol\n This is a simple string attribute. Its value is the name of the protocol\n to use to communicate with the target in a cross-compilation environment,\n-e.g. @code{\"wtx\"} or @code{\"vxworks\"}.\n+e.g.@: @code{\"wtx\"} or @code{\"vxworks\"}.\n \n @item Compiler_Command\n This is an associative array attribute, whose domain is a language name. Its\n@@ -16029,7 +16030,7 @@ predefined path; e.g., @code{\"gnatls\"}, @code{\"powerpc-wrs-vxworks-gnatls\"}.\n \n @item VCS_Kind\n This is a simple attribute. Its value is a string used to specify the\n-Version Control System (VCS) to be used for this project, e.g CVS, RCS\n+Version Control System (VCS) to be used for this project, e.g.@: CVS, RCS\n ClearCase or Perforce.\n \n @item VCS_File_Check"}, {"sha": "bd8eb83ddf9ec8d56870869cc96115dc4857845d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 56, "deletions": 54, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd07840af477dc858b5a8117bf10679e7fbf819/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd07840af477dc858b5a8117bf10679e7fbf819/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=8dd07840af477dc858b5a8117bf10679e7fbf819", "patch": "@@ -1348,7 +1348,7 @@ written as @kbd{C-h}), and the tutorial by @kbd{C-h t}.\n \n Documentation on Emacs and other tools is available in Emacs under the\n pull-down menu button: @code{Help - Info}. After selecting @code{Info},\n-use the middle mouse button to select a topic (e.g. Emacs).\n+use the middle mouse button to select a topic (e.g.@: Emacs).\n \n In a character cell terminal, do @kbd{C-h i} to invoke info, and then @kbd{m}\n (stands for menu) followed by the menu item desired, as in @kbd{m Emacs}, to\n@@ -1624,7 +1624,7 @@ statement @code{Put_Line@ (Line@ (1..N));}\n Select @code{Debug}, then @code{Run}.  When the\n @code{Program Arguments} window appears, click @code{OK}.\n A console window will appear; enter some line of text,\n-e.g. @code{abcde}, at the prompt.\n+e.g.@: @code{abcde}, at the prompt.\n The program will pause execution when it gets to the\n breakpoint, and the corresponding line is highlighted.\n \n@@ -1856,7 +1856,7 @@ lowercase equivalence.\n Any character in the range 80-FF allowed in identifiers, and all are\n considered distinct. In other words, there are no uppercase and lowercase\n equivalences in this range. This is useful in conjunction with\n-certain encoding schemes used for some foreign character sets (e.g.\n+certain encoding schemes used for some foreign character sets (e.g.,\n the typical method of representing Chinese characters on the PC).\n \n @item No Upper-Half\n@@ -1985,21 +1985,21 @@ the unit and replacing the separating dots with hyphens and using\n An exception arises if the file name generated by the above rules starts\n with one of the characters\n @ifset vms\n-A,G,I, or S,\n+@samp{A}, @samp{G}, @samp{I}, or @samp{S},\n @end ifset\n @ifclear vms\n-a,g,i, or s,\n+@samp{a}, @samp{g}, @samp{i}, or @samp{s},\n @end ifclear\n and the second character is a\n minus. In this case, the character ^tilde^dollar sign^ is used in place\n of the minus. The reason for this special rule is to avoid clashes with\n the standard names for child units of the packages System, Ada,\n Interfaces, and GNAT, which use the prefixes\n @ifset vms\n-S- A- I- and G-\n+@samp{S-}, @samp{A-}, @samp{I-}, and @samp{G-},\n @end ifset\n @ifclear vms\n-s- a- i- and g-\n+@samp{s-}, @samp{a-}, @samp{i-}, and @samp{g-},\n @end ifclear\n respectively.\n \n@@ -2177,7 +2177,7 @@ a separate @code{Subunit_File_Name} rule, and in this case the\n @code{Body_File_name} rule is used for subunits as well.\n \n The separate rule for subunits can also be used to implement the rather\n-unusual case of a compilation environment (e.g. a single directory) which\n+unusual case of a compilation environment (e.g.@: a single directory) which\n contains a subunit and a child unit with the same unit name. Although\n both units cannot appear in the same partition, the Ada Reference Manual\n allows (but does not require) the possibility of the two units coexisting\n@@ -2434,7 +2434,7 @@ A list of relevant restrictions applying to the unit (used for consistency)\n checking.\n \n @item\n-Categorization information (e.g. use of pragma @code{Pure}).\n+Categorization information (e.g.@: use of pragma @code{Pure}).\n \n @item\n Information on all @code{with}'ed units, including presence of\n@@ -3049,7 +3049,7 @@ $ gnatlink ada_unit file1.o file2.o --LINK=./my_script\n Where CC is the name of the non-GNU C++ compiler.\n \n If the @code{zero cost} exception mechanism is used, and the platform\n-supports automatic registration of exception tables (e.g. Solaris or IRIX),\n+supports automatic registration of exception tables (e.g.@: Solaris or IRIX),\n paths to more objects are required:\n \n @smallexample\n@@ -3062,7 +3062,7 @@ $ gnatlink ada_unit file1.o file2.o --LINK=./my_script\n @end smallexample\n \n If the @code{zero cost} exception mechanism is used, and the platform\n-doesn't support automatic registration of exception tables (e.g. HP-UX,\n+doesn't support automatic registration of exception tables (e.g.@: HP-UX,\n Tru64 or AIX), the simple approach described above will not work and\n a pre-linking phase using GNAT will be necessary.\n \n@@ -4525,7 +4525,7 @@ illegalities are detected in the program. The use of @option{-gnatQ} forces\n generation of the @file{ALI} file. This file is marked as being in\n error, so it cannot be used for binding purposes, but it does contain\n reasonably complete cross-reference information, and thus may be useful\n-for use by tools (e.g. semantic browsing tools or integrated development\n+for use by tools (e.g., semantic browsing tools or integrated development\n environments) that are driven from the @file{ALI} file. This switch\n implies @option{-gnatq}, since the semantic phase must be run to get a\n meaningful ALI file.\n@@ -5555,7 +5555,7 @@ the shift operators defined as intrinsic in package @code{Interfaces}\n and operands for attributes such as @code{Pos}. Checks are also made\n on individual component values for composite comparisons, and on the\n expressions in type conversions and qualified expressions. Checks are\n-also made on explicit ranges using @samp{..} (e.g. slices, loops etc).\n+also made on explicit ranges using @samp{..} (e.g.@: slices, loops etc).\n \n @item -gnatVp\n @emph{Validity checks for parameters.}\n@@ -5728,7 +5728,7 @@ language (where ``@code{--#}'' is used). For the purposes of this rule, a\n special character is defined as being in one of the ASCII ranges\n @code{16#21#@dots{}16#2F#} or @code{16#3A#@dots{}16#3F#}.\n Note that this usage is not permitted\n-in GNAT implementation units (i.e. when @option{-gnatg} is used).\n+in GNAT implementation units (i.e., when @option{-gnatg} is used).\n \n @item\n A line consisting entirely of minus signs, possibly preceded by blanks, is\n@@ -5918,10 +5918,10 @@ to match the presentation in the Ada Reference Manual (for example,\n @emph{Check order of subprogram bodies.}\n If the ^letter o^word ORDERED_SUBPROGRAMS^ appears in the string\n after @option{-gnaty} then all subprogram bodies in a given scope\n-(e.g. a package body) must be in alphabetical order. The ordering\n+(e.g.@: a package body) must be in alphabetical order. The ordering\n rule uses normal Ada rules for comparing strings, ignoring casing\n of letters, except that if there is a trailing numeric suffix, then\n-the value of this suffix is used in the ordering (e.g. Junk2 comes\n+the value of this suffix is used in the ordering (e.g.@: Junk2 comes\n before Junk10).\n \n @item ^p^PRAGMA^\n@@ -6603,7 +6603,7 @@ into calls to the tasking run-time routines. A unique capability of GNAT\n is to list this expanded code in a form very close to normal Ada source.\n This is very useful in understanding the implications of various Ada\n usage on the efficiency of the generated code. There are many cases in\n-Ada (e.g. the use of controlled types), where simple Ada statements can\n+Ada (e.g.@: the use of controlled types), where simple Ada statements can\n generate a lot of run-time code. By using @option{-gnatG} you can identify\n these cases, and consider whether it may be desirable to modify the coding\n approach to improve efficiency.\n@@ -6735,7 +6735,7 @@ variant records. These symbolic expressions have a mostly obvious\n format with #n being used to represent the value of the n'th\n discriminant. See source files @file{repinfo.ads/adb} in the\n @code{GNAT} sources for full details on the format of @option{-gnatR3}\n-output. If the switch is followed by an s (e.g. @option{-gnatR2s}), then\n+output. If the switch is followed by an s (e.g.@: @option{-gnatR2s}), then\n the output is to a file with the name @file{^file.rep^file_REP^} where\n file is the name of the corresponding source file.\n @end ifclear\n@@ -6758,7 +6758,7 @@ discriminant. See source files @file{REPINFO.ADS/ADB} in the\n @code{GNAT} sources for full details on the format of\n @option{/REPRESENTATION_INFO=SYMBOLIC} output.\n If _FILE is added at the end of an option\n-(e.g. @option{/REPRESENTATION_INFO=ARRAYS_FILE}),\n+(e.g.@: @option{/REPRESENTATION_INFO=ARRAYS_FILE}),\n then the output is to a file with the name @file{file_REP} where\n file is the name of the corresponding source file.\n @end ifset\n@@ -7055,9 +7055,9 @@ This switch is similar to switch @option{^-D^/ASSOCIATE^} of @code{gnatprep}.\n The GCC technology provides a wide range of target dependent\n @option{-m} switches for controlling\n details of code generation with respect to different versions of\n-architectures. This includes variations in instruction sets (e.g.\n+architectures. This includes variations in instruction sets (e.g.@:\n different members of the power pc family), and different requirements\n-for optimal arrangement of instructions (e.g. different members of\n+for optimal arrangement of instructions (e.g.@: different members of\n the x86 family). The list of available @option{-m} switches may be\n found in the GCC documentation.\n \n@@ -7084,7 +7084,7 @@ unless you actually see a performance improvement.\n \n @noindent\n On VMS, GNAT compiled programs return POSIX-style codes by default,\n-e.g. @option{/RETURN_CODES=POSIX}.\n+e.g.@: @option{/RETURN_CODES=POSIX}.\n \n To enable VMS style return codes, use GNAT BIND and LINK with the option\n @option{/RETURN_CODES=VMS}. For example:\n@@ -7641,7 +7641,7 @@ The @var{xxx} ^string specified with the switch^option^ may be either\n @item ``@option{^lo^LOW^}'' for the lowest possible value\n @item ``@option{^hi^HIGH^}'' for the highest possible value\n @item ``@option{xx}'' for a value consisting of repeated bytes with the\n-value 16#xx# (i.e. xx is a string of two hexadecimal digits).\n+value 16#xx# (i.e., xx is a string of two hexadecimal digits).\n @end itemize\n \n In addition, you can specify @option{-Sev} to indicate that the value is\n@@ -7783,7 +7783,7 @@ specify this switch, the binder will not detect that the object\n file is out of date with respect to the source file. Note that this is the\n mode that is automatically used by @command{gnatmake} because in this\n case the checking against sources has already been performed by\n-@command{gnatmake} in the course of compilation (i.e. before binding).\n+@command{gnatmake} in the course of compilation (i.e.@: before binding).\n \n @ifset vms\n @item /READ_SOURCES=AVAILABLE\n@@ -8980,7 +8980,7 @@ then the finalization routines.\n @item @command{gcc} @asis{switches}\n @ifclear vms\n Any uppercase or multi-character switch that is not a @command{gnatmake} switch\n-is passed to @command{gcc} (e.g. @option{-O}, @option{-gnato,} etc.)\n+is passed to @command{gcc} (e.g.@: @option{-O}, @option{-gnato,} etc.)\n @end ifclear\n @ifset vms\n Any qualifier that cannot be recognized as a qualifier for @code{GNAT MAKE}\n@@ -11670,7 +11670,7 @@ files is located in its respective project file directory.  Schematically:\n @noindent\n We want to develop an application in directory @file{^/app^[APP]^} that\n @code{with} the packages @code{GUI} and @code{Comm}, using the properties of\n-the corresponding project files (e.g. the ^switch^switch^ settings\n+the corresponding project files (e.g.@: the ^switch^switch^ settings\n and object directory).\n Skeletal code for a main procedure might be something like the following:\n \n@@ -12024,7 +12024,7 @@ A @emph{string expression} is either a @emph{simple string expression} or a\n \n A @emph{simple string expression} is one of the following:\n @itemize @bullet\n-@item A literal string; e.g.@code{\"comm/my_proj.gpr\"}\n+@item A literal string; e.g.@: @code{\"comm/my_proj.gpr\"}\n @item A string-valued variable reference (@pxref{Variables})\n @item A string-valued attribute reference (@pxref{Attributes})\n @item An external reference (@pxref{External References in Project Files})\n@@ -16037,7 +16037,7 @@ that has a special format (that is, a character that is neither a letter nor dig\n not white space nor line break immediately following the leading @code{--} of\n the comment) should be without any change moved from the argument source\n into reformatted source. This switch allows to preserve comments that are used\n-as a special marks in the code (e.g. SPARK annotation).\n+as a special marks in the code (e.g.@: SPARK annotation).\n \n @node Construct Layout\n @subsection Construct Layout\n@@ -17039,13 +17039,15 @@ Take the unit name and replace all dots by hyphens.\n @item\n If such a replacement occurs in the\n second character position of a name, and the first character is\n-^a, g, s, or i^A, G, S, or I^ then replace the dot by the character\n-^~ (tilde)^$ (dollar sign)^\n+^@samp{a}, @samp{g}, @samp{s}, or @samp{i}, ^@samp{A}, @samp{G}, @samp{S}, or @samp{I},^\n+then replace the dot by the character\n+^@samp{~} (tilde)^@samp{$} (dollar sign)^\n instead of a minus.\n @end itemize\n The reason for this exception is to avoid clashes\n with the standard names for children of System, Ada, Interfaces,\n-and GNAT, which use the prefixes ^s- a- i- and g-^S- A- I- and G-^\n+and GNAT, which use the prefixes\n+^@samp{s-}, @samp{a-}, @samp{i-}, and @samp{g-},^@samp{S-}, @samp{A-}, @samp{I-}, and @samp{G-},^\n respectively.\n \n The @option{^-gnatk^/FILE_NAME_MAX_LENGTH=^@var{nn}}\n@@ -17081,7 +17083,7 @@ $ gnatkr @var{name} /COUNT=nn\n \n @noindent\n @var{name} is the uncrunched file name, derived from the name of the unit\n-in the standard manner described in the previous section (i.e. in particular\n+in the standard manner described in the previous section (i.e., in particular\n all dots are replaced by hyphens). The file name may or may not have an\n extension (defined as a suffix of the form period followed by arbitrary\n characters other than period). If an extension is present then it will\n@@ -17117,7 +17119,7 @@ unit and replacing the separating dots with hyphens and\n using ^lowercase^uppercase^\n for all letters, except that a hyphen in the second character position is\n replaced by a ^tilde^dollar sign^ if the first character is\n-^a, i, g, or s^A, I, G, or S^.\n+^@samp{a}, @samp{i}, @samp{g}, or @samp{s}^@samp{A}, @samp{I}, @samp{G}, or @samp{S}^.\n The extension is @code{.ads} for a\n specification and @code{.adb} for a body.\n Krunching does not affect the extension, but the file name is shortened to\n@@ -17297,7 +17299,7 @@ being preserved in the output file.\n Causes comments to be scanned. Normally comments are ignored by gnatprep.\n If this option is specified, then comments are scanned and any $symbol\n substitutions performed as in program text. This is particularly useful\n-when structured comments are used (e.g. when writing programs in the\n+when structured comments are used (e.g., when writing programs in the\n SPARK dialect of Ada). Note that this switch is not available when\n doing integrated preprocessing (it would be useless in this context\n since comments are ignored by the compiler in any case).\n@@ -17462,7 +17464,7 @@ preprocessor line. Any number of @code{elsif} clauses can be present,\n including none at all. The @code{else} is optional, as in Ada.\n \n The @code{#} marking the start of a preprocessor line must be the first\n-non-blank character on the line, i.e. it must be preceded only by\n+non-blank character on the line, i.e., it must be preceded only by\n spaces or horizontal tabs.\n \n Symbol substitution outside of preprocessor lines is obtained by using\n@@ -18493,7 +18495,7 @@ the object directory.\n @item\n Copy the @code{ALI} files of the interface to the library directory,\n add in this copy an indication that it is an interface to a SAL\n-(i.e. add a word @option{SL} on the line in the @file{ALI} file that starts\n+(i.e., add a word @option{SL} on the line in the @file{ALI} file that starts\n with letter ``P'') and make the modified copy of the @file{ALI} file\n read-only.\n @end itemize\n@@ -19176,7 +19178,7 @@ It provides three type of information:\n @item\n General information concerning memory management, such as the total\n number of allocations and deallocations, the amount of allocated\n-memory and the high water mark, i.e. the largest amount of allocated\n+memory and the high water mark, i.e.@: the largest amount of allocated\n memory in the course of program execution.\n \n @item\n@@ -19700,7 +19702,7 @@ and max values.\n @end table\n \n @noindent\n-The environment task stack, e.g. the stack that contains the main unit, is\n+The environment task stack, e.g., the stack that contains the main unit, is\n only processed when the environment variable GNAT_STACK_LIMIT is set.\n \n \n@@ -23084,7 +23086,7 @@ use  System.Aux_DEC;\n The effect is not quite semantically identical to incorporating\n the declarations directly into package @code{System},\n but most programs will not notice a difference\n-unless they use prefix notation (e.g. @code{System.Integer_8})\n+unless they use prefix notation (e.g.@: @code{System.Integer_8})\n to reference the entities directly in package @code{System}.\n For units containing such references,\n the prefixes must either be removed, or the pragma @code{Extend_System}\n@@ -24983,7 +24985,7 @@ Run the program on the specified processor.\n On GNU/Linux without NPTL support (usually system with GNU C Library\n older than 2.3), the signal model is not POSIX compliant, which means\n that to send a signal to the process, you need to send the signal to all\n-threads, e.g. by using @code{killpg()}.\n+threads, e.g.@: by using @code{killpg()}.\n \n @node AIX-Specific Considerations\n @section AIX-Specific Considerations\n@@ -25640,7 +25642,7 @@ package body ada_main is\n       --  pragma Import because if we try to with the unit and\n       --  call it Ada style, then not only do we waste time\n       --  recompiling it, but also, we don't really know the right\n-      --  switches (e.g. identifier character set) to be used\n+      --  switches (e.g.@: identifier character set) to be used\n       --  to compile it.\n \n       procedure Ada_Main_Program;\n@@ -25930,7 +25932,7 @@ is impossible to guarantee a safe order of elaboration at run time.\n \n @noindent\n In some languages that involve the same kind of elaboration problems,\n-e.g. Java and C++, the programmer is expected to worry about these\n+e.g.@: Java and C++, the programmer is expected to worry about these\n ordering problems himself, and it is common to\n write a program in which an incorrect elaboration order  gives\n surprising results, because it references variables before they\n@@ -26242,7 +26244,7 @@ to use @code{Elaborate_All} on such units.\n @section Controlling Elaboration in GNAT - Internal Calls\n \n @noindent\n-In the case of internal calls, i.e. calls within a single package, the\n+In the case of internal calls, i.e., calls within a single package, the\n programmer has full control over the order of elaboration, and it is up\n to the programmer to elaborate declarations in an appropriate order. For\n example writing:\n@@ -26835,7 +26837,7 @@ Here is the exact chain of events we are worrying about:\n In the body of @code{Decls} a call is made from within the body of a library\n task to a subprogram in the package @code{Utils}. Since this call may\n occur at elaboration time (given that the task is activated at elaboration\n-time), we have to assume the worst, i.e. that the\n+time), we have to assume the worst, i.e., that the\n call does happen at elaboration time.\n \n @item\n@@ -26967,7 +26969,7 @@ Declare separate task types.\n \n A significant part of the problem arises because of the use of the\n single task declaration form. This means that the elaboration of\n-the task type, and the elaboration of the task itself (i.e. the\n+the task type, and the elaboration of the task itself (i.e.@: the\n creation of the task) happen at the same time. A good rule\n of style in Ada is to always create explicit task types. By\n following the additional step of placing task objects in separate\n@@ -27852,8 +27854,8 @@ Note that in this approach, both declarations are analyzed by the\n compiler so this can only be used where both declarations are legal,\n even though one of them will not be used.\n \n-Another approach is to define integer constants, e.g. @code{Bits_Per_Word}, or\n-Boolean constants, e.g. @code{Little_Endian}, and then write declarations\n+Another approach is to define integer constants, e.g.@: @code{Bits_Per_Word}, or\n+Boolean constants, e.g.@: @code{Little_Endian}, and then write declarations\n that are parameterized by these constants. For example\n \n @smallexample @c ada\n@@ -28402,7 +28404,7 @@ most useful (for the Intel x86 processor) are the following:\n @item =\n output constraint\n @item g\n-global (i.e. can be stored anywhere)\n+global (i.e.@: can be stored anywhere)\n @item m\n in memory\n @item I\n@@ -28839,7 +28841,7 @@ following subsections treat the most likely issues to be encountered.\n @node Legal Ada 83 programs that are illegal in Ada 95\n @subsection Legal Ada 83 programs that are illegal in Ada 95\n \n-Some legal Ada 83 programs are illegal (i.e. they will fail to compile) in\n+Some legal Ada 83 programs are illegal (i.e., they will fail to compile) in\n Ada 95 and thus also in Ada 2005:\n \n @table @emph\n@@ -29152,7 +29154,7 @@ ways to deal with this situation:\n \n @itemize @bullet\n @item\n-Modify the program to eliminate the circularities, e.g. by moving\n+Modify the program to eliminate the circularities, e.g.@: by moving\n elaboration-time code into explicitly-invoked procedures\n @item\n Constrain the elaboration order by including explicit @code{Elaborate_Body} or\n@@ -29898,7 +29900,7 @@ uninstall or integrate different GNAT products.\n \n @noindent\n Make sure the system on which GNAT is installed is accessible from the\n-current machine, i.e. the install location is shared over the network.\n+current machine, i.e., the install location is shared over the network.\n Shared resources are accessed on Windows by means of UNC paths, which\n have the format @code{\\\\server\\sharename\\path}\n \n@@ -29969,7 +29971,7 @@ interoperability strategy.\n If you use @command{gcc} to compile the non-Ada part of your application,\n there are no Windows-specific restrictions that affect the overall\n interoperability with your Ada code. If you plan to use\n-Microsoft tools (e.g. Microsoft Visual C/C++), you should be aware of\n+Microsoft tools (e.g.@: Microsoft Visual C/C++), you should be aware of\n the following limitations:\n \n @itemize @bullet\n@@ -30713,7 +30715,7 @@ one in the main program.\n \n It is therefore not possible to exchange GNAT run-time objects between the\n Ada DLL and the main Ada program. Example of GNAT run-time objects are file\n-handles (e.g. @code{Text_IO.File_Type}), tasks types, protected objects\n+handles (e.g.@: @code{Text_IO.File_Type}), tasks types, protected objects\n types, etc.\n \n It is completely safe to exchange plain elementary, array or record types,\n@@ -30882,7 +30884,7 @@ during the DLL build process by the @code{gnatdll} tool\n \n @noindent\n To use the services exported by the Ada DLL from another programming\n-language (e.g. C), you have to translate the specs of the exported Ada\n+language (e.g.@: C), you have to translate the specs of the exported Ada\n entities in that language. For instance in the case of @code{API.dll},\n the corresponding C header file could look like:\n "}]}