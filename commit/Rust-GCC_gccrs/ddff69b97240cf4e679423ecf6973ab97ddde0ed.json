{"sha": "ddff69b97240cf4e679423ecf6973ab97ddde0ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmZjY5Yjk3MjQwY2Y0ZTY3OTQyM2VjZjY5NzNhYjk3ZGRkZTBlZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2007-03-14T22:36:22Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2007-03-14T22:36:22Z"}, "message": "Fix 31018 -- move TARGET_xxx in i386.md to tuning options\n\nFrom-SVN: r122933", "tree": {"sha": "474b573e014a424f34cc0e5e4eb1ecba52aacda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474b573e014a424f34cc0e5e4eb1ecba52aacda0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddff69b97240cf4e679423ecf6973ab97ddde0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddff69b97240cf4e679423ecf6973ab97ddde0ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddff69b97240cf4e679423ecf6973ab97ddde0ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddff69b97240cf4e679423ecf6973ab97ddde0ed/comments", "author": null, "committer": null, "parents": [{"sha": "d33d6db009db55c792b1fbaa343220b079c251d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33d6db009db55c792b1fbaa343220b079c251d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33d6db009db55c792b1fbaa343220b079c251d7"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "d4101cb4acdda1865e1adffbaa51b1e1efd7c3ce", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddff69b97240cf4e679423ecf6973ab97ddde0ed/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddff69b97240cf4e679423ecf6973ab97ddde0ed/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ddff69b97240cf4e679423ecf6973ab97ddde0ed", "patch": "@@ -1192,7 +1192,34 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   m_ATHLON_K8_AMDFAM10 | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_EXT_80387_CONSTANTS */\n-  m_K6_GEODE | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2 | m_GENERIC\n+  m_K6_GEODE | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2 | m_GENERIC,\n+\n+  /* X86_TUNE_SHORTEN_X87_SSE */\n+  ~m_K8,\n+\n+  /* X86_TUNE_AVOID_VECTOR_DECODE */\n+  m_K8 | m_GENERIC64,\n+\n+  /* X86_TUNE_SLOW_IMUL_IMM32_MEM (imul of 32-bit constant and memory is vector\n+     path on AMD machines) */\n+  m_K8 | m_GENERIC64 | m_AMDFAM10,\n+\n+  /* X86_TUNE_SLOW_IMUL_IMM8 (imul of 8-bit constant is vector path on AMD\n+     machines)  */\n+  m_K8 | m_GENERIC64 | m_AMDFAM10,\n+\n+  /* X86_TUNE_MOVE_M1_VIA_OR (on pentiums, it is faster to load -1 via OR than\n+     a MOV) */\n+  m_PENT,\n+\n+  /* X86_TUNE_NOT_UNPAIRABLE (NOT is not pairable on Pentium, while XOR is, but\n+     one byte longer).  */\n+  m_PENT,\n+\n+  /* X86_TUNE_NOT_VECTORMODE (On AMD K6, NOT is vector decoded with memory\n+     operand that cannot be represented using a modRM byte.  The XOR\n+     replacement is long decoded, so this split helps here as well).  */\n+  m_K6,\n };\n \n /* Feature tests against the various architecture variations.  */"}, {"sha": "f0c6ab9d697204c5d1b86b70de41778af733c479", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddff69b97240cf4e679423ecf6973ab97ddde0ed/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddff69b97240cf4e679423ecf6973ab97ddde0ed/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ddff69b97240cf4e679423ecf6973ab97ddde0ed", "patch": "@@ -233,6 +233,13 @@ enum ix86_tune_indices {\n   X86_TUNE_USE_INCDEC,\n   X86_TUNE_PAD_RETURNS,\n   X86_TUNE_EXT_80387_CONSTANTS,\n+  X86_TUNE_SHORTEN_X87_SSE,\n+  X86_TUNE_AVOID_VECTOR_DECODE,\n+  X86_TUNE_SLOW_IMUL_IMM32_MEM,\n+  X86_TUNE_SLOW_IMUL_IMM8,\n+  X86_TUNE_MOVE_M1_VIA_OR,\n+  X86_TUNE_NOT_UNPAIRABLE,\n+  X86_TUNE_NOT_VECTORMODE,\n \n   X86_TUNE_LAST\n };\n@@ -302,6 +309,15 @@ extern unsigned int ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_PAD_RETURNS\tix86_tune_features[X86_TUNE_PAD_RETURNS]\n #define TARGET_EXT_80387_CONSTANTS \\\n \tix86_tune_features[X86_TUNE_EXT_80387_CONSTANTS]\n+#define TARGET_SHORTEN_X87_SSE\tix86_tune_features[X86_TUNE_SHORTEN_X87_SSE]\n+#define TARGET_AVOID_VECTOR_DECODE \\\n+\tix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]\n+#define TARGET_SLOW_IMUL_IMM32_MEM \\\n+\tix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM]\n+#define TARGET_SLOW_IMUL_IMM8\tix86_tune_features[X86_TUNE_SLOW_IMUL_IMM8]\n+#define\tTARGET_MOVE_M1_VIA_OR\tix86_tune_features[X86_TUNE_MOVE_M1_VIA_OR]\n+#define TARGET_NOT_UNPAIRABLE\tix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]\n+#define TARGET_NOT_VECTORMODE\tix86_tune_features[X86_TUNE_NOT_VECTORMODE]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}, {"sha": "a76c7802e496c5826119851d3c550b155e8bedcd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddff69b97240cf4e679423ecf6973ab97ddde0ed/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddff69b97240cf4e679423ecf6973ab97ddde0ed/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ddff69b97240cf4e679423ecf6973ab97ddde0ed", "patch": "@@ -1182,7 +1182,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n    && operands[1] == constm1_rtx\n-   && (TARGET_PENTIUM || optimize_size)\"\n+   && (TARGET_MOVE_M1_VIA_OR || optimize_size)\"\n {\n   operands[1] = constm1_rtx;\n   return \"or{l}\\t{%1, %0|%0, %1}\";\n@@ -1974,7 +1974,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"const_int_operand\" \"i\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (TARGET_PENTIUM || optimize_size)\n+  \"TARGET_64BIT && (TARGET_MOVE_M1_VIA_OR || optimize_size)\n    && reload_completed\n    && operands[1] == constm1_rtx\"\n {\n@@ -4433,7 +4433,7 @@\n \t(match_operand:SSEMODEF 1 \"memory_operand\" \"\"))\n    (set (match_operand:SSEMODEI24 2 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_dup 0)))]\n-  \"!TARGET_K8\n+  \"TARGET_SHORTEN_X87_SSE\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2) (fix:SSEMODEI24 (match_dup 1)))]\n   \"\")\n@@ -4443,7 +4443,7 @@\n   [(match_scratch:DF 2 \"Y2\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:DF 1 \"memory_operand\" \"\")))]\n-  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\"\n+  \"TARGET_AVOID_VECTOR_DECODE && !optimize_size\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n@@ -4452,7 +4452,7 @@\n   [(match_scratch:SF 2 \"x\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:SF 1 \"memory_operand\" \"\")))]\n-  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\"\n+  \"TARGET_AVOID_VECTOR_DECODE && !optimize_size\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n@@ -20024,10 +20024,10 @@\n \t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n    && peep2_regno_dead_p (0, FLAGS_REG)\n-   && ((TARGET_PENTIUM\n+   && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], SImode)))\n-       || (TARGET_K6 && long_memory_operand (operands[0], SImode)))\"\n+       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], SImode)))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:SI (match_dup 1) (const_int -1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20038,10 +20038,10 @@\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n    && peep2_regno_dead_p (0, FLAGS_REG)\n-   && ((TARGET_PENTIUM\n+   && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], HImode)))\n-       || (TARGET_K6 && long_memory_operand (operands[0], HImode)))\"\n+       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], HImode)))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:HI (match_dup 1) (const_int -1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20052,10 +20052,10 @@\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n    && peep2_regno_dead_p (0, FLAGS_REG)\n-   && ((TARGET_PENTIUM\n+   && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], QImode)))\n-       || (TARGET_K6 && long_memory_operand (operands[0], QImode)))\"\n+       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], QImode)))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:QI (match_dup 1) (const_int -1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20237,7 +20237,7 @@\n   \"(GET_MODE (operands[0]) == HImode\n     || GET_MODE (operands[0]) == SImode\n     || (GET_MODE (operands[0]) == DImode && TARGET_64BIT))\n-   && (optimize_size || TARGET_PENTIUM)\n+   && (optimize_size || TARGET_MOVE_M1_VIA_OR)\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int -1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20641,7 +20641,7 @@\n \t\t   (mult:DI (match_operand:DI 1 \"memory_operand\" \"\")\n \t\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"(TARGET_K8 || TARGET_GENERIC64 || TARGET_AMDFAM10) && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM32_MEM && !optimize_size\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (mult:DI (match_dup 3) (match_dup 2)))\n@@ -20654,7 +20654,7 @@\n \t\t   (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"(TARGET_K8 || TARGET_GENERIC64 || TARGET_AMDFAM10) && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM32_MEM && !optimize_size\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (mult:SI (match_dup 3) (match_dup 2)))\n@@ -20668,7 +20668,7 @@\n \t\t     (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"immediate_operand\" \"\"))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"(TARGET_K8 || TARGET_GENERIC64 || TARGET_AMDFAM10) && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM32_MEM && !optimize_size\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (zero_extend:DI (mult:SI (match_dup 3) (match_dup 2))))\n@@ -20685,7 +20685,7 @@\n \t\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:DI 3 \"r\")]\n-  \"(TARGET_K8 || TARGET_GENERIC64 || TARGET_AMDFAM10) && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM8 && !optimize_size\n    && satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:DI (match_dup 0) (match_dup 3)))\n@@ -20701,7 +20701,7 @@\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:SI 3 \"r\")]\n-  \"(TARGET_K8 || TARGET_GENERIC64 || TARGET_AMDFAM10) && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM8 && !optimize_size\n    && satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:SI (match_dup 0) (match_dup 3)))\n@@ -20717,7 +20717,7 @@\n \t\t\t    (match_operand:HI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:HI 3 \"r\")]\n-  \"(TARGET_K8 || TARGET_GENERIC64 || TARGET_AMDFAM10) && !optimize_size\"\n+  \"TARGET_SLOW_IMUL_IMM8 && !optimize_size\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:HI (match_dup 0) (match_dup 3)))\n \t      (clobber (reg:CC FLAGS_REG))])]"}]}