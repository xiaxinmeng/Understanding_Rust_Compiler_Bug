{"sha": "43898541b920dbcb8e3d24179cae3436a9c8b281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4OTg1NDFiOTIwZGJjYjhlM2QyNDE3OWNhZTM0MzZhOWM4YjI4MQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-08-31T15:44:20Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-08-31T15:44:20Z"}, "message": "stormy16.c (stormy16_asm_out_destructor): New function.\n\n\t* config/stormy16/stormy16.c (stormy16_asm_out_destructor): New\n\tfunction.\n\t(stormy16_asm_out_constructor): New function.\n\t(TARGET_ASM_CONSTRUCTOR): Define.\n\t(TARGET_ASM_DESTRUCTOR): Define.\n\nFrom-SVN: r45322", "tree": {"sha": "84af5e2b84f297229a6ae88c2b650f19fe90129b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84af5e2b84f297229a6ae88c2b650f19fe90129b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43898541b920dbcb8e3d24179cae3436a9c8b281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43898541b920dbcb8e3d24179cae3436a9c8b281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43898541b920dbcb8e3d24179cae3436a9c8b281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43898541b920dbcb8e3d24179cae3436a9c8b281/comments", "author": null, "committer": null, "parents": [{"sha": "6b8c9327ed60bbb966e7c82df75f9aa0faa727e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8c9327ed60bbb966e7c82df75f9aa0faa727e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8c9327ed60bbb966e7c82df75f9aa0faa727e2"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "a7ff0259117c00acb8493451067388509f11e8bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43898541b920dbcb8e3d24179cae3436a9c8b281/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43898541b920dbcb8e3d24179cae3436a9c8b281/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43898541b920dbcb8e3d24179cae3436a9c8b281", "patch": "@@ -1,3 +1,11 @@\n+2001-08-31  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* config/stormy16/stormy16.c (stormy16_asm_out_destructor): New\n+\tfunction.\n+\t(stormy16_asm_out_constructor): New function.\n+\t(TARGET_ASM_CONSTRUCTOR): Define.\n+\t(TARGET_ASM_DESTRUCTOR): Define.\n+\n 2001-08-31  Andreas Jaeger  <aj@suse.de>\n \n \t* gcse.c (add_label_notes): REG_LABEL is an INSN_LIST."}, {"sha": "ebb9be74064998554f05d9abeab10c1ee8b4cece", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43898541b920dbcb8e3d24179cae3436a9c8b281/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43898541b920dbcb8e3d24179cae3436a9c8b281/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=43898541b920dbcb8e3d24179cae3436a9c8b281", "patch": "@@ -45,6 +45,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n \n static rtx emit_addhi3_postreload PARAMS ((rtx, rtx, rtx));\n+static void stormy16_asm_out_constructor PARAMS ((rtx, int));\n+static void stormy16_asm_out_destructor PARAMS ((rtx, int));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -1324,6 +1326,61 @@ stormy16_encode_section_info (decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n+\n+/* Output constructors and destructors.  Just like \n+   default_named_section_asm_out_* but don't set the sections writable.  */\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR stormy16_asm_out_constructor\n+#undef TARGET_ASM_DESTRUCTOR\n+#define TARGET_ASM_DESTRUCTOR stormy16_asm_out_destructor\n+\n+static void\n+stormy16_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  const char *section = \".dtors\";\n+  char buf[16];\n+\n+  /* ??? This only works reliably with the GNU linker.   */\n+  if (priority != DEFAULT_INIT_PRIORITY)\n+    {\n+      sprintf (buf, \".dtors.%.5u\",\n+\t       /* Invert the numbering so the linker puts us in the proper\n+\t\t  order; constructors are run from right to left, and the\n+\t\t  linker sorts in increasing order.  */\n+\t       MAX_INIT_PRIORITY - priority);\n+      section = buf;\n+    }\n+\n+  named_section_flags (section, 0);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+}\n+\n+static void\n+stormy16_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  const char *section = \".ctors\";\n+  char buf[16];\n+\n+  /* ??? This only works reliably with the GNU linker.   */\n+  if (priority != DEFAULT_INIT_PRIORITY)\n+    {\n+      sprintf (buf, \".ctors.%.5u\",\n+\t       /* Invert the numbering so the linker puts us in the proper\n+\t\t  order; constructors are run from right to left, and the\n+\t\t  linker sorts in increasing order.  */\n+\t       MAX_INIT_PRIORITY - priority);\n+      section = buf;\n+    }\n+\n+  named_section_flags (section, 0);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+}\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n void"}]}