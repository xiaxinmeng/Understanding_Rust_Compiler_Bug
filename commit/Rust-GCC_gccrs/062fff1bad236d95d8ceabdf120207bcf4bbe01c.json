{"sha": "062fff1bad236d95d8ceabdf120207bcf4bbe01c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyZmZmMWJhZDIzNmQ5NWQ4Y2VhYmRmMTIwMjA3YmNmNGJiZTAxYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-08T22:17:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-08T22:17:48Z"}, "message": "cris-protos.h (cris_expand_builtin_va_arg): Remove.\n\n        * config/cris/cris-protos.h (cris_expand_builtin_va_arg): Remove.\n        * config/cris/cris.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (cris_gimplify_va_arg_expr): Rewrite from cris_expand_builtin_va_arg.\n        * config/cris/cris.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84321", "tree": {"sha": "0d078be073f3095b5ae37c5cc81a2a0e6d536d5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d078be073f3095b5ae37c5cc81a2a0e6d536d5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062fff1bad236d95d8ceabdf120207bcf4bbe01c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062fff1bad236d95d8ceabdf120207bcf4bbe01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062fff1bad236d95d8ceabdf120207bcf4bbe01c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062fff1bad236d95d8ceabdf120207bcf4bbe01c/comments", "author": null, "committer": null, "parents": [{"sha": "2d8f9759a2d0cc44b96439ab29b67286b1fa541a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8f9759a2d0cc44b96439ab29b67286b1fa541a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8f9759a2d0cc44b96439ab29b67286b1fa541a"}], "stats": {"total": 105, "additions": 18, "deletions": 87}, "files": [{"sha": "b5bf198e0f109ca86141dd09dc1abde99782b5e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=062fff1bad236d95d8ceabdf120207bcf4bbe01c", "patch": "@@ -4,6 +4,13 @@\n \t* config/ia64/ia64.c (ia64_dfa_new_cycle): Fix typo in comparison\n \tof asm_noperands result.\n \n+2004-07-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/cris/cris-protos.h (cris_expand_builtin_va_arg): Remove.\n+\t* config/cris/cris.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(cris_gimplify_va_arg_expr): Rewrite from cris_expand_builtin_va_arg.\n+\t* config/cris/cris.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.c (ind_gimplify_va_arg_expr): New."}, {"sha": "0e65dc2da8cbc5c5ea53310b3e9ec4d9beb38de1", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=062fff1bad236d95d8ceabdf120207bcf4bbe01c", "patch": "@@ -45,10 +45,6 @@ extern int cris_symbol (rtx);\n extern void cris_output_addr_const (FILE *, rtx);\n extern int cris_cfun_uses_pic_table (void);\n extern void cris_target_asm_named_section (const char *, unsigned int);\n-\n-# ifdef TREE_CODE\n-extern rtx cris_expand_builtin_va_arg (tree, tree);\n-# endif\n #endif /* RTX_CODE */\n \n extern void cris_pragma_expand_mul (struct cpp_reader *);"}, {"sha": "4ca9cb9c9790b1d83b89ec13554380f49e1ad5d5", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 11, "deletions": 75, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=062fff1bad236d95d8ceabdf120207bcf4bbe01c", "patch": "@@ -116,6 +116,8 @@ static void cris_init_libfuncs (void);\n static bool cris_rtx_costs (rtx, int, int, int *);\n static int cris_address_cost (rtx);\n \n+static tree cris_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n+\n /* The function cris_target_asm_function_epilogue puts the last insn to\n    output here.  It always fits; there won't be a symbol operand.  Used in\n    delay_slots_for_epilogue and function_epilogue.  */\n@@ -189,6 +191,8 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS cris_setup_incoming_varargs\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR cris_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2785,84 +2789,16 @@ cris_init_libfuncs (void)\n   set_optab_libfunc (umod_optab, SImode, \"__Umod\");\n }\n \n-/* The EXPAND_BUILTIN_VA_ARG worker.  This is modified from the\n-   \"standard\" implementation of va_arg: read the value from the current\n-   address and increment by the size of one or two registers.  The\n-   important difference for CRIS is that if the type is\n-   pass-by-reference, then perform an indirection.  */\n+/* The va_arg gimplifier.  All we need to do here special is notice\n+   when we we've got a pass-by-reference.  */\n \n-rtx\n-cris_expand_builtin_va_arg (tree valist, tree type)\n+static tree\n+cris_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  tree addr_tree, t;\n-  rtx addr;\n-  tree passed_size = size_zero_node;\n-  tree type_size = NULL;\n-  tree size3 = size_int (3);\n-  tree size4 = size_int (4);\n-  tree size8 = size_int (8);\n-  tree rounded_size;\n-\n-  /* Get AP.  */\n-  addr_tree = valist;\n-\n-  if (type == error_mark_node\n-      || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n-      || TREE_OVERFLOW (type_size))\n-    /* Presumably an error; the size isn't computable.  A message has\n-       supposedly been emitted elsewhere.  */\n-    rounded_size = size_zero_node;\n+  if (FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, dummy))\n+    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n   else\n-    rounded_size\n-      = fold (build (MULT_EXPR, sizetype,\n-\t\t     fold (build (TRUNC_DIV_EXPR, sizetype,\n-\t\t\t\t  fold (build (PLUS_EXPR, sizetype,\n-\t\t\t\t\t       type_size, size3)),\n-\t\t\t\t  size4)),\n-\t\t     size4));\n-\n-  if (!integer_zerop (rounded_size))\n-    {\n-      /* Check if the type is passed by value or by reference.  Values up\n-\t to 8 bytes are passed by-value, padded to register-size (4\n-\t bytes).  Larger values and varying-size types are passed\n-\t by reference.  */\n-      passed_size\n-\t= (!really_constant_p (type_size)\n-\t   ? size4\n-\t   : fold (build (COND_EXPR, sizetype,\n-\t\t\t  fold (build (GT_EXPR, sizetype,\n-\t\t\t\t       rounded_size,\n-\t\t\t\t       size8)),\n-\t\t\t  size4,\n-\t\t\t  rounded_size)));\n-\n-      addr_tree\n-\t= (!really_constant_p (type_size)\n-\t   ? build1 (INDIRECT_REF, build_pointer_type (type), addr_tree)\n-\t   : fold (build (COND_EXPR, TREE_TYPE (addr_tree),\n-\t\t\t  fold (build (GT_EXPR, sizetype,\n-\t\t\t\t       rounded_size,\n-\t\t\t\t       size8)),\n-\t\t\t  build1 (INDIRECT_REF, build_pointer_type (type),\n-\t\t\t\t  addr_tree),\n-\t\t\t  addr_tree)));\n-    }\n-\n-  addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n-  addr = copy_to_reg (addr);\n-\n-  if (!integer_zerop (rounded_size))\n-    {\n-      /* Compute new value for AP.  */\n-      t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t\tpassed_size));\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-    }\n-\n-  return addr;\n+    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n }\n \n /* The INIT_EXPANDERS worker sets the per-function-data initializer and"}, {"sha": "3eabb51ba6230b912b678537a9512ce93b693f2b", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062fff1bad236d95d8ceabdf120207bcf4bbe01c/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=062fff1bad236d95d8ceabdf120207bcf4bbe01c", "patch": "@@ -1051,14 +1051,6 @@ struct cum_args {int regs;};\n    documentation.  */\n \n \n-/* Node: Varargs */\n-\n-/* FIXME: This and other EXPAND_BUILTIN_VA_... target macros are not\n-   documented, although used by several targets.  */\n-#define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\\n- cris_expand_builtin_va_arg (VALIST, TYPE)\n-\n-\n /* Node: Trampolines */\n \n /* This looks too complicated, and it is.  I assigned r7 to be the"}]}