{"sha": "6e53546d88082744f84bc41b85021362d2f29141", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1MzU0NmQ4ODA4Mjc0NGY4NGJjNDFiODUwMjEzNjJkMmYyOTE0MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-10-17T06:56:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-10-17T06:56:44Z"}, "message": "mips-abi.exp: New test.\n\n\t* gcc.dg/special/mips-abi.exp: New test.\n\t* gcc.dg/special/mips-abi.s: Empty file used by the above.\n\nFrom-SVN: r58238", "tree": {"sha": "2cb691bdd1ca816b3bf8607c13795a9381931aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cb691bdd1ca816b3bf8607c13795a9381931aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e53546d88082744f84bc41b85021362d2f29141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e53546d88082744f84bc41b85021362d2f29141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e53546d88082744f84bc41b85021362d2f29141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e53546d88082744f84bc41b85021362d2f29141/comments", "author": null, "committer": null, "parents": [{"sha": "4db83639f47d56b18b5b8f47ebbfeffd92437d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db83639f47d56b18b5b8f47ebbfeffd92437d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db83639f47d56b18b5b8f47ebbfeffd92437d12"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "d8ebf360424e1981379934d23f575b9bea326a74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e53546d88082744f84bc41b85021362d2f29141/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e53546d88082744f84bc41b85021362d2f29141/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e53546d88082744f84bc41b85021362d2f29141", "patch": "@@ -1,3 +1,8 @@\n+2002-10-17  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.dg/special/mips-abi.exp: New test.\n+\t* gcc.dg/special/mips-abi.s: Empty file used by the above.\n+\n 2002-10-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/mangle16.C: New test."}, {"sha": "46475f8d96ad8a9dbdb3fec8caf7e42818b555bb", "filename": "gcc/testsuite/gcc.dg/special/mips-abi.exp", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e53546d88082744f84bc41b85021362d2f29141/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e53546d88082744f84bc41b85021362d2f29141/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.exp?ref=6e53546d88082744f84bc41b85021362d2f29141", "patch": "@@ -0,0 +1,125 @@\n+#   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# This test checks whether MIPS ELF configurations pass the right\n+# ABI flags to the assembler.  An ABI flag should always be passed\n+# unless MEABI is selected.\n+\n+load_lib gcc-dg.exp\n+\n+# Only run this test on MIPS ELF targets\n+if {![istarget mips*-*-*] || [gcc_target_object_format] != \"elf\"} {\n+    return\n+}\n+\n+# A list of all assembler ABI flags.  We should use SGI-compatible\n+# flags where possible.\n+set asm_abi_flags {-32 -n32 -64 -mabi=o64 -mabi=eabi}\n+\n+# Return true if the configuration uses MEABI by default.\n+proc is_meabi_config {} {\n+    return [expr {[istarget mipsisa32*-*-elf*]\n+\t\t  || [istarget mipsisa32el-*-elf*]\n+\t\t  || [istarget mipsisa64-*-elf*]\n+\t\t  || [istarget mipsisa64el-*-elf*]\n+\t\t  || [istarget mipsisa64sr71k-*-elf*]}]\n+}\n+\n+# Try to assemble mips-abi.s (an empty file), passing -v in order to\n+# get the assembler command line.  Check whether an appropriate ABI\n+# flag is passed.\n+#\n+# NAME is a name for the pass/fail line.\n+# ABIS is a list of acceptable assembler ABI flags, or \"\" if no\n+#   ABI flag is expected.\n+# FLAGS is a list of options for gcc.\n+proc check_mips_abi {name abis flags} {\n+    global srcdir subdir asm_abi_flags\n+\n+    lappend flags \"-v\"\n+    set lines [gcc_target_compile \"$srcdir/$subdir/mips-abi.s\" \\\n+\t\t\t\t  \"mips-abi.o\" object \\\n+\t\t\t\t  [list \"additional_flags=$flags\"]]\n+    set good 0\n+    set bad 0\n+    foreach line [split $lines \"\\n\"] {\n+\t# Find the assembler command line.\n+\tif {[string first \"$srcdir/$subdir/mips-abi.s\" $line] >= 0} {\n+\t    foreach arg [split $line \" \"] {\n+\t\t# Count the number of matching and non-matching\n+\t\t# ABI options.\n+\t\tif {[lsearch -exact $abis $arg] >= 0} {\n+\t\t    incr good\n+\t\t} elseif {[lsearch -exact $asm_abi_flags $arg] >= 0} {\n+\t\t    incr bad\n+\t\t}\n+\t    }\n+\t}\n+    }\n+    if {$good == ($abis != \"\") && $bad == 0} {\n+\tpass \"mips-abi $name\"\n+    } else {\n+\tfail \"mips-abi $name\"\n+    }\n+}\n+\n+# Collect the default target flags.\n+set default_flags \"\"\n+set target [target_info name]\n+if {[info exists CFLAGS_FOR_TARGET]} {\n+    append default_flags \" $CFLAGS_FOR_TARGET\"\n+}\n+if {[board_info $target exists cflags]} {\n+    append default_flags \" [board_info $target cflags]\"\n+}\n+if {[board_info $target exists multilib_flags]} {\n+    append default_flags \" [board_info $target multilib_flags]\"\n+}\n+\n+# See whether the default command line specifies an ABI.\n+set default_abi \"\"\n+foreach flag $default_flags {\n+    if {[string first \"-mabi\" $flag] == 0} {\n+\tset default_abi $flag\n+    }\n+}\n+\n+# If the command line does specify an ABI, just check for the\n+# appropriate assembler flag.\n+switch -- $default_abi {\n+    -mabi=meabi { check_mips_abi \"MEABI\" \"\" \"\" }\n+    -mabi=eabi { check_mips_abi \"EABI\" \"-mabi=eabi\" \"\" }\n+    -mabi=32 { check_mips_abi \"o32\" \"-32\" \"\" }\n+    -mabi=n32 { check_mips_abi \"n32\" \"-n32\" \"\" }\n+    -mabi=o64 { check_mips_abi \"o64\" \"-mabi=o64\" \"\" }\n+    -mabi=64 { check_mips_abi \"n64\" \"-64\" \"\" }\n+    \"\" {\n+\t# MEABI configs shouldn't pass an ABI flag by default\n+\t# but the others should.  It doesn't seem worthwhile\n+\t# duplicating the configuration to ABI logic here,\n+\t# so just accept any ABI.\n+\tif {[is_meabi_config]} {\n+\t    check_mips_abi \"default\" \"\" \"\"\n+\t} else {\n+\t    check_mips_abi \"default\" $asm_abi_flags \"\"\n+\t}\n+\t# See whether passing a -mabi flag does the right thing.\n+\t# Only try ABIs that the SGI assembler also understands.\n+\tcheck_mips_abi \"o32\" \"-32\" \"-mabi=32\"\n+\tcheck_mips_abi \"n32\" \"-n32\" \"-mabi=n32\"\n+\tcheck_mips_abi \"64\" \"-64\" \"-mabi=64\"\n+    }\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/special/mips-abi.s", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e53546d88082744f84bc41b85021362d2f29141/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e53546d88082744f84bc41b85021362d2f29141/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.s?ref=6e53546d88082744f84bc41b85021362d2f29141"}]}