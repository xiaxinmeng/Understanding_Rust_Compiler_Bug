{"sha": "7028ce0d3916755b930332f6796f3c0911ae04e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyOGNlMGQzOTE2NzU1YjkzMDMzMmY2Nzk2ZjNjMDkxMWFlMDRlOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T10:05:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T10:05:10Z"}, "message": "[multiple changes]\n\n2012-11-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_vfpt.adb: Document VAX float point layout.\n\n2012-11-06  Geert Bosch  <bosch@adacore.com>\n\n\t* eval_fat.adb (Machine): Don't return -0.0 on targets without\n\tsigned zeros.\n\n2012-11-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch9.adb (Analyze_Entry_Call_Alternative,\n\tCheck_Triggering_Statement): Reject properly an indirect call.\n\nFrom-SVN: r193222", "tree": {"sha": "e124bc5974e7659ce403e0ed50952ad03cf3fe59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e124bc5974e7659ce403e0ed50952ad03cf3fe59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7028ce0d3916755b930332f6796f3c0911ae04e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7028ce0d3916755b930332f6796f3c0911ae04e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7028ce0d3916755b930332f6796f3c0911ae04e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7028ce0d3916755b930332f6796f3c0911ae04e8/comments", "author": null, "committer": null, "parents": [{"sha": "9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9276875d7bdfd6b4fd55ef099c0caa55d6e01432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9276875d7bdfd6b4fd55ef099c0caa55d6e01432"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "7aad4baa46abd006626f79d8ac5d599c2440e1d0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7028ce0d3916755b930332f6796f3c0911ae04e8", "patch": "@@ -1,3 +1,17 @@\n+2012-11-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_vfpt.adb: Document VAX float point layout.\n+\n+2012-11-06  Geert Bosch  <bosch@adacore.com>\n+\n+\t* eval_fat.adb (Machine): Don't return -0.0 on targets without\n+\tsigned zeros.\n+\n+2012-11-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Entry_Call_Alternative,\n+\tCheck_Triggering_Statement): Reject properly an indirect call.\n+\n 2012-11-06  Pascal Obry  <obry@adacore.com>\n \n \t* xoscons.adb, xutil.adb, xutil.ads: Add support for post-processing."}, {"sha": "bbcb886b72210383b5db7fa383d3623798747382", "filename": "gcc/ada/eval_fat.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2Feval_fat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2Feval_fat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.adb?ref=7028ce0d3916755b930332f6796f3c0911ae04e8", "patch": "@@ -371,9 +371,14 @@ package body Eval_Fat is\n          case Mode is\n             when Round_Even =>\n \n-               --  This rounding mode should not be used for static\n-               --  expressions, but only for compile-time evaluation of\n-               --  non-static expressions.\n+               --  This rounding mode corresponds to the unbiased rounding\n+               --  method that is used at run time. When the real value is\n+               --  exactly between two machine numbers, choose the machine\n+               --  number with its least significant bit equal to zero.\n+\n+               --  The recommendation advice in RM 4.9(38) is that static\n+               --  expressions are rounded to machine numbers in the same\n+               --  way as the target machine does.\n \n                if (Even and then N * 2 > D)\n                      or else\n@@ -386,7 +391,9 @@ package body Eval_Fat is\n \n                --  Do not round to even as is done with IEEE arithmetic, but\n                --  instead round away from zero when the result is exactly\n-               --  between two machine numbers. See RM 4.9(38).\n+               --  between two machine numbers. This biased rounding method\n+               --  should not be used to convert static expressions to\n+               --  machine numbers, see AI95-268.\n \n                if N * 2 >= D then\n                   Fraction := Fraction + 1;\n@@ -513,7 +520,7 @@ package body Eval_Fat is\n                                         - Machine_Mantissa_Value (RT) + Uint_1;\n          begin\n             if X_Exp < Emin_Den or not Denorm_On_Target then\n-               if UR_Is_Negative (X) then\n+               if Signed_Zeros_On_Target and then UR_Is_Negative (X) then\n                   Error_Msg_N\n                     (\"floating-point value underflows to -0.0?\", Enode);\n                   return Ureal_M_0;"}, {"sha": "146fab8a9df638e11886c8d64fb7e4bcb51dbfb2", "filename": "gcc/ada/exp_vfpt.adb", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2Fexp_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2Fexp_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.adb?ref=7028ce0d3916755b930332f6796f3c0911ae04e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,78 @@ with Urealp;   use Urealp;\n \n package body Exp_VFpt is\n \n+   --  Vax floating point format (from Vax Architecture Reference Manual\n+   --  version 6):\n+   --\n+   --  Float F:\n+   --  --------\n+   --\n+   --   1 1\n+   --   5 4             7 6            0\n+   --  +-+---------------+--------------+\n+   --  |S|     exp       |   fraction   |  A\n+   --  +-+---------------+--------------+\n+   --  |             fraction           |  A + 2\n+   --  +--------------------------------+\n+   --\n+   --  bit 15 is the sign bit,\n+   --  bits 14:7 is the excess 128 binary exponent,\n+   --  bits 6:0 and 31:16 the normalized 24-bit fraction with the redundant\n+   --    most significant fraction bit not represented.\n+   --\n+   --  An exponent value of 0 together with a sign bit of 0, is taken to\n+   --  indicate that the datum has a value of 0. Exponent values of 1 through\n+   --  255 indicate true binary exponents of -127 to +127. An exponent value\n+   --  of 0, together with a sign bit of 1, is taken as reserved.\n+   --\n+   --  Note that fraction bits are not continuous in memory, VAX is little\n+   --  endian (LSB first).\n+   --\n+   --  Float D:\n+   --  --------\n+   --\n+   --   1 1\n+   --   5 4             7 6            0\n+   --  +-+---------------+--------------+\n+   --  |S|     exp       |   fraction   |  A\n+   --  +-+---------------+--------------+\n+   --  |             fraction           |  A + 2\n+   --  +--------------------------------+\n+   --  |             fraction           |  A + 4\n+   --  +--------------------------------+\n+   --  |             fraction           |  A + 6\n+   --  +--------------------------------+\n+   --\n+   --  Like Float F but with 55 bits for the fraction.\n+   --\n+   --  Float G:\n+   --  --------\n+   --\n+   --   1 1\n+   --   5 4                   4 3      0\n+   --  +-+---------------------+--------+\n+   --  |S|     exp             |  fract |  A\n+   --  +-+---------------------+--------+\n+   --  |             fraction           |  A + 2\n+   --  +--------------------------------+\n+   --  |             fraction           |  A + 4\n+   --  +--------------------------------+\n+   --  |             fraction           |  A + 6\n+   --  +--------------------------------+\n+   --\n+   --  Exponent values of 1 through 2047 indicate trye binary exponents of\n+   --  -1023 to +1023.\n+   --\n+   --  Main differences compared to IEEE 754:\n+   --\n+   --  * No denormalized numbers\n+   --  * No infinity\n+   --  * No NaN\n+   --  * No -0.0\n+   --  * Reserved values (exp = 0, sign = 1)\n+   --  * Vax mantissa represent values [0.5, 1)\n+   --  * Bias is shifted by 1 (for single float: 128 on Vax, 127 on IEEE)\n+\n    VAXFF_Digits : constant := 6;\n    VAXDF_Digits : constant := 9;\n    VAXGF_Digits : constant := 15;"}, {"sha": "4e0ecf28a2dbce67891bcaff90d1f71440ec3037", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7028ce0d3916755b930332f6796f3c0911ae04e8/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=7028ce0d3916755b930332f6796f3c0911ae04e8", "patch": "@@ -1470,6 +1470,15 @@ package body Sem_Ch9 is\n \n       Analyze (Call);\n \n+      --  An indirect call in this context  is illegal. A procedure call that\n+      --  does not involve a renaming of an entry is illegal as well, but this\n+      --  and other semantic errors are caught during resolution.\n+\n+      if Nkind (Call) = N_Explicit_Dereference then\n+         Error_Msg_N\n+           (\"entry call or dispatching primitive of interface required \", N);\n+      end if;\n+\n       if Is_Non_Empty_List (Statements (N)) then\n          Analyze_Statements (Statements (N));\n       end if;\n@@ -3304,6 +3313,11 @@ package body Sem_Ch9 is\n                  (\"dispatching operation of limited or synchronized \" &\n                   \"interface required (RM 9.7.2(3))!\", Error_Node);\n             end if;\n+\n+         elsif Nkind (Trigger) = N_Explicit_Dereference then\n+            Error_Msg_N\n+              (\"entry call or dispatching primitive of interface required \",\n+                Trigger);\n          end if;\n       end if;\n    end Check_Triggering_Statement;"}]}