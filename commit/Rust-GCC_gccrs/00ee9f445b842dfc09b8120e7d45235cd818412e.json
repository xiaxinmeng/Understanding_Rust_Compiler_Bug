{"sha": "00ee9f445b842dfc09b8120e7d45235cd818412e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlZTlmNDQ1Yjg0MmRmYzA5YjgxMjBlN2Q0NTIzNWNkODE4NDEyZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-12-17T19:30:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-12-17T19:30:58Z"}, "message": "re PR debug/41679 (internal compiler error: in loc_cmp, at var-tracking.c:2433)\n\n\tPR debug/41679\n\t* var-tracking.c (add_stores): Avoid value mode mismatch for\n\tpromoted declarations.\n\n\t* gcc.target/arm/pr41679.c: New.\n\nFrom-SVN: r155322", "tree": {"sha": "7de22c79741e0248541d337275089b1d426b896f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de22c79741e0248541d337275089b1d426b896f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00ee9f445b842dfc09b8120e7d45235cd818412e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ee9f445b842dfc09b8120e7d45235cd818412e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ee9f445b842dfc09b8120e7d45235cd818412e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ee9f445b842dfc09b8120e7d45235cd818412e/comments", "author": null, "committer": null, "parents": [{"sha": "3fd54fb075d6e0639027fbfa0669e240ff73f262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd54fb075d6e0639027fbfa0669e240ff73f262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd54fb075d6e0639027fbfa0669e240ff73f262"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "45a97150a60dd8351aa0f4eb6149c4c450b09309", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00ee9f445b842dfc09b8120e7d45235cd818412e", "patch": "@@ -1,3 +1,9 @@\n+2009-12-17  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/41679\n+\t* var-tracking.c (add_stores): Avoid value mode mismatch for\n+\tpromoted declarations.\n+\n 2009-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/42386"}, {"sha": "345d6645dee9b601a398f52923616b530ad5b2a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00ee9f445b842dfc09b8120e7d45235cd818412e", "patch": "@@ -1,3 +1,8 @@\n+2009-12-17  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/41679\n+\t* gcc.target/arm/pr41679.c: New.\n+\n 2009-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/42386"}, {"sha": "8b248985fe00c6f5822e93581c60d3e3440ad530", "filename": "gcc/testsuite/gcc.target/arm/pr41679.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr41679.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr41679.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr41679.c?ref=00ee9f445b842dfc09b8120e7d45235cd818412e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv5te -g -O2\" } */\n+\n+extern int a;\n+extern char b;\n+extern int foo (void);\n+\n+void\n+test (void)\n+{\n+  int c;\n+  b = foo () ? '~' : '\\0';\n+  while ((c = foo ()))\n+    if (c == '7')\n+      a = 0;\n+}"}, {"sha": "11e3aa213a9b22bdd71c4cdf975ab71b7eded793", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ee9f445b842dfc09b8120e7d45235cd818412e/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=00ee9f445b842dfc09b8120e7d45235cd818412e", "patch": "@@ -4815,13 +4815,15 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t    }\n \t  else\n \t    {\n+\t      rtx xexpr = CONST_CAST_RTX (expr);\n+\n \t      if (SET_SRC (expr) != src)\n-\t\texpr = gen_rtx_SET (VOIDmode, loc, src);\n+\t\txexpr = gen_rtx_SET (VOIDmode, loc, src);\n \t      if (same_variable_part_p (src, REG_EXPR (loc), REG_OFFSET (loc)))\n \t\tmo->type = MO_COPY;\n \t      else\n \t\tmo->type = MO_SET;\n-\t      mo->u.loc = CONST_CAST_RTX (expr);\n+\t      mo->u.loc = xexpr;\n \t    }\n \t}\n       mo->insn = cui->insn;\n@@ -4872,15 +4874,17 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t    }\n \t  else\n \t    {\n+\t      rtx xexpr = CONST_CAST_RTX (expr);\n+\n \t      if (SET_SRC (expr) != src)\n-\t\texpr = gen_rtx_SET (VOIDmode, loc, src);\n-\t      if (same_variable_part_p (SET_SRC (expr),\n+\t\txexpr = gen_rtx_SET (VOIDmode, loc, src);\n+\t      if (same_variable_part_p (SET_SRC (xexpr),\n \t\t\t\t\tMEM_EXPR (loc),\n \t\t\t\t\tINT_MEM_OFFSET (loc)))\n \t\tmo->type = MO_COPY;\n \t      else\n \t\tmo->type = MO_SET;\n-\t      mo->u.loc = CONST_CAST_RTX (expr);\n+\t      mo->u.loc = xexpr;\n \t    }\n \t}\n       mo->insn = cui->insn;\n@@ -4901,7 +4905,14 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \n   if (resolve && GET_CODE (mo->u.loc) == SET)\n     {\n-      nloc = replace_expr_with_values (SET_SRC (mo->u.loc));\n+      nloc = replace_expr_with_values (SET_SRC (expr));\n+\n+      /* Avoid the mode mismatch between oexpr and expr.  */\n+      if (!nloc && mode != mode2)\n+\t{\n+\t  nloc = SET_SRC (expr);\n+\t  gcc_assert (oloc == SET_DEST (expr));\n+\t}\n \n       if (nloc)\n \toloc = gen_rtx_SET (GET_MODE (mo->u.loc), oloc, nloc);\n@@ -4940,7 +4951,8 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \n      (concat (concat val dstv) (set dst src)): dst now holds val,\n      copied from src.  dstv is a value-based representation of dst, if\n-     it differs from dst.  If resolution is needed, src is a REG.\n+     it differs from dst.  If resolution is needed, src is a REG, and\n+     its mode is the same as that of val.\n \n      (concat (concat val (set dstv srcv)) (set dst src)): src\n      copied to dst, holding val.  dstv and srcv are value-based"}]}