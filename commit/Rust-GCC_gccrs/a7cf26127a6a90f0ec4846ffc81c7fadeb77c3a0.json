{"sha": "a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdjZjI2MTI3YTZhOTBmMGVjNDg0NmZmYzgxYzdmYWRlYjc3YzNhMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-11-15T13:40:58Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-11-15T13:40:58Z"}, "message": "Add libgomp.oacc-c-c++-common/f-asyncwait-{1,2,3}.c\n\n2017-11-15  Tom de Vries  <tom@codesourcery.com>\n\n\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c: New test, copied\n\tfrom asyncwait-1.f90.  Rewrite into C.  Rewrite from float to int.\n\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-2.c: New test, copied\n\tfrom asyncwait-2.f90.  Rewrite into C.  Rewrite from float to int.\n\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-3.c: New test, copied\n\tfrom asyncwait-3.f90.  Rewrite into C.  Rewrite from float to int.\n\nFrom-SVN: r254769", "tree": {"sha": "960b98c3df6d77b6a122c1fdbf76df02096b35c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/960b98c3df6d77b6a122c1fdbf76df02096b35c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/comments", "author": null, "committer": null, "parents": [{"sha": "03ab2eb725851203ccc34ca3210439801812a6be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ab2eb725851203ccc34ca3210439801812a6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ab2eb725851203ccc34ca3210439801812a6be"}], "stats": {"total": 430, "additions": 430, "deletions": 0}, "files": [{"sha": "7331d412a8258b12108b9aa2221ad76b8ee93285", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "patch": "@@ -1,3 +1,12 @@\n+2017-11-15  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c: New test, copied\n+\tfrom asyncwait-1.f90.  Rewrite into C.  Rewrite from float to int.\n+\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-2.c: New test, copied\n+\tfrom asyncwait-2.f90.  Rewrite into C.  Rewrite from float to int.\n+\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-3.c: New test, copied\n+\tfrom asyncwait-3.f90.  Rewrite into C.  Rewrite from float to int.\n+\n 2017-11-14  Tom de Vries  <tom@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/asyncwait-1.c: Allow to run for"}, {"sha": "cf851707dc7c98dd255b9c85bfd1ed0176644ce2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c?ref=a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "patch": "@@ -0,0 +1,297 @@\n+/* { dg-do run } */\n+\n+/* Based on asyncwait-1.f90.  */\n+\n+#include <stdlib.h>\n+\n+#define N 64\n+\n+int\n+main (void)\n+{\n+  int *a, *b, *c, *d, *e;\n+\n+  a = (int*)malloc (N * sizeof (*a));\n+  b = (int*)malloc (N * sizeof (*b));\n+  c = (int*)malloc (N * sizeof (*c));\n+  d = (int*)malloc (N * sizeof (*d));\n+  e = (int*)malloc (N * sizeof (*e));\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 3;\n+      b[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N]) copy (b[0:N])\n+  {\n+\n+#pragma acc parallel async\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      b[i] = a[i];\n+\n+#pragma acc wait\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 3)\n+\tabort ();\n+      if (b[i] != 3)\n+\tabort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 2;\n+      b[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N]) copy (b[0:N])\n+  {\n+#pragma acc parallel async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      b[i] = a[i];\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 2) abort ();\n+      if (b[i] != 2) abort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 3;\n+      b[i] = 0;\n+      c[i] = 0;\n+      d[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N]) copy (b[0:N]) copy (c[0:N]) copy (d[0:N])\n+  {\n+\n+#pragma acc parallel async (1)\n+    for (int i = 0; i < N; ++i)\n+      b[i] = (a[i] * a[i] * a[i]) / a[i];\n+\n+#pragma acc parallel async (1)\n+    for (int i = 0; i < N; ++i)\n+      c[i] = (a[i] * 4) / a[i];\n+\n+\n+#pragma acc parallel async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 3)\n+\tabort ();\n+      if (b[i] != 9)\n+\tabort ();\n+      if (c[i] != 4)\n+\tabort ();\n+      if (d[i] != 1)\n+\tabort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 2;\n+      b[i] = 0;\n+      c[i] = 0;\n+      d[i] = 0;\n+      e[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N])\n+  {\n+\n+#pragma acc parallel async (1)\n+    for (int i = 0; i < N; ++i)\n+      b[i] = (a[i] * a[i] * a[i]) / a[i];\n+\n+#pragma acc parallel async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      c[i] = (a[i] * 4) / a[i];\n+\n+#pragma acc parallel async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n+\n+\n+#pragma acc parallel wait (1) async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      e[i] = a[i] + b[i] + c[i] + d[i];\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 2)\n+\tabort ();\n+      if (b[i] != 4)\n+\tabort ();\n+      if (c[i] != 4)\n+\tabort ();\n+      if (d[i] != 1)\n+\tabort ();\n+      if (e[i] != 11)\n+\tabort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 3;\n+      b[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N]) copy (b[0:N])\n+  {\n+\n+#pragma acc kernels async\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      b[i] = a[i];\n+\n+#pragma acc wait\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 3)\n+\tabort ();\n+      if (b[i] != 3)\n+\tabort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 2;\n+      b[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N]) copy (b[0:N])\n+  {\n+#pragma acc kernels async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      b[i] = a[i];\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 2)\n+\tabort ();\n+      if (b[i] != 2)\n+\tabort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 3;\n+      b[i] = 0;\n+      c[i] = 0;\n+      d[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N]) copy (b[0:N]) copy (c[0:N]) copy (d[0:N])\n+  {\n+#pragma acc kernels async (1)\n+    for (int i = 0; i < N; ++i)\n+      b[i] = (a[i] * a[i] * a[i]) / a[i];\n+\n+#pragma acc kernels async (1)\n+    for (int i = 0; i < N; ++i)\n+      c[i] = (a[i] * 4) / a[i];\n+\n+#pragma acc kernels async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 3)\n+\tabort ();\n+      if (b[i] != 9)\n+\tabort ();\n+      if (c[i] != 4)\n+\tabort ();\n+      if (d[i] != 1)\n+\tabort ();\n+    }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = 2;\n+      b[i] = 0;\n+      c[i] = 0;\n+      d[i] = 0;\n+      e[i] = 0;\n+    }\n+\n+#pragma acc data copy (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N])\n+  {\n+#pragma acc kernels async (1)\n+    for (int i = 0; i < N; ++i)\n+      b[i] = (a[i] * a[i] * a[i]) / a[i];\n+\n+#pragma acc kernels async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      c[i] = (a[i] * 4) / a[i];\n+\n+#pragma acc kernels async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n+\n+#pragma acc kernels wait (1) async (1)\n+#pragma acc loop\n+    for (int i = 0; i < N; ++i)\n+      e[i] = a[i] + b[i] + c[i] + d[i];\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (a[i] != 2)\n+\tabort ();\n+      if (b[i] != 4)\n+\tabort ();\n+      if (c[i] != 4)\n+\tabort ();\n+      if (d[i] != 1)\n+\tabort ();\n+      if (e[i] != 11)\n+\tabort ();\n+    }\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+  free (d);\n+  free (e);\n+\n+  return 0;\n+}"}, {"sha": "5298e4c54f774e416f29a8c01c1d0f90abf81ca0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/f-asyncwait-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-2.c?ref=a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+\n+/* Based on asyncwait-2.f90.  */\n+\n+#include <stdlib.h>\n+\n+#define N 64\n+\n+int *a, *b, *c;\n+\n+int\n+main (void)\n+{\n+  a = (int *)malloc (N * sizeof (*a));\n+  b = (int *)malloc (N * sizeof (*b));\n+  c = (int *)malloc (N * sizeof (*c));\n+\n+#pragma acc parallel copy (a[0:N]) async (0)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 1;\n+\n+#pragma acc parallel copy (b[0:N]) async (1)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    b[i] = 1;\n+\n+#pragma acc parallel copy (a[0:N], b[0:N], c[0:N]) wait (0, 1)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    c[i] = a[i] + b[i];\n+\n+  for (int i = 0; i < N; ++i)\n+    if (c[i] != 2)\n+      abort ();\n+\n+#if 1\n+#pragma acc kernels copy (a[0:N]) async (0)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 1;\n+\n+#pragma acc kernels copy (b[0:N]) async (1)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    b[i] = 1;\n+\n+#pragma acc kernels copy (a[0:N], b[0:N], c[0:N]) wait (0, 1)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    c[i] = a[i] + b[i];\n+\n+  for (int i = 0; i < N; ++i)\n+    if (c[i] != 2)\n+      abort ();\n+#endif\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+}"}, {"sha": "319eea61dc7e3016db43ee928f32d44d7adbfc23", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/f-asyncwait-3.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-3.c?ref=a7cf26127a6a90f0ec4846ffc81c7fadeb77c3a0", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+\n+/* Based on asyncwait-3.f90.  */\n+\n+#include <stdlib.h>\n+\n+#define N 64\n+\n+int\n+main (void)\n+{\n+  int *a, *b, *c;\n+\n+  a = (int *)malloc (N * sizeof (*a));\n+  b = (int *)malloc (N * sizeof (*b));\n+  c = (int *)malloc (N * sizeof (*c));\n+\n+#pragma acc parallel copy (a[0:N]) async (0)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 1;\n+\n+#pragma acc parallel copy (b[0:N]) async (1)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    b[i] = 1;\n+\n+#pragma acc wait (0, 1)\n+\n+#pragma acc parallel copy (a[0:N], b[0:N], c[0:N])\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    c[i] = a[i] + b[i];\n+\n+  for (int i = 0; i < N; ++i)\n+    if (c[i] != 2)\n+      abort ();\n+\n+#pragma acc kernels copy (a[0:N]) async (0)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    a[i] = 1;\n+\n+#pragma acc kernels copy (b[0:N]) async (1)\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    b[i] = 1;\n+\n+#pragma acc wait (0, 1)\n+\n+#pragma acc kernels copy (a[0:N], b[0:N], c[0:N])\n+#pragma acc loop\n+  for (int i = 0; i < N; ++i)\n+    c[i] = a[i] + b[i];\n+\n+  for (int i = 0; i < N; ++i)\n+    if (c[i] != 2)\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+}"}]}