{"sha": "427764163985bbfb309ee43a85605d6b32c225d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3NzY0MTYzOTg1YmJmYjMwOWVlNDNhODU2MDVkNmIzMmMyMjVkNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-21T14:51:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-21T14:51:52Z"}, "message": "Remove the frame size argument from function_prologue/epilogue\n\nLater patches will add support for frame sizes that are a run-time\ninvariant but not a compile-time constant.  This then raised the\nquestion of whether the frame size argument to the function_prologue/\nepilogue hooks should be updated accordingly.\n\nIt turned out that only two targets actually used this argument, and\neven they got other frame-related information from the cached machine\nstructure.  This patch therefore removes the argument and makes the two\ntargets use get_frame_size () instead.\n\n2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (function_prologue): Remove frame size argument.\n\t(function_epilogue): Likewise.\n\t* doc/tm.texi: Regenerate.\n\t* final.c (final_start_function): Update call to function_prologue.\n\t(final_end_function): Update call to function_epilogue.\n\t(default_function_pro_epilogue): Remove frame size argument.\n\t* output.h (default_function_pro_epilogue): Likewise.\n\t* config/arm/arm.c (arm_output_function_epilogue): Likewise.\n\t(arm_output_function_prologue): Likewise.\n\t* config/frv/frv.c (frv_function_prologue): Likewise.\n\t(frv_function_epilogue): Likewise.\n\t* config/i386/i386.c (ix86_output_function_epilogue): Likewise.\n\t* config/ia64/ia64.c (ia64_output_function_prologue): Likewise.\n\t(ia64_output_function_epilogue): Likewise.\n\t* config/m32r/m32r.c (m32r_output_function_prologue): Likewise.\n\t(m32r_output_function_epilogue): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_function_prologue)\n\t(microblaze_function_epilogue): Likewise.\n\t* config/mips/mips.c (mips_output_function_prologue): Likewise.\n\t(mips_output_function_epilogue): Likewise.\n\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Likewise.\n\t(mmix_target_asm_function_epilogue): Likewise.\n\t* config/msp430/msp430.c (msp430_start_function): Likewise.\n\t* config/nds32/nds32.c (nds32_asm_function_prologue): Likewise.\n\t(nds32_asm_function_epilogue): Likewise.\n\t* config/nios2/nios2.c (nios2_asm_function_prologue): Likewise.\n\t* config/pa/pa.c (pa_output_function_prologue): Likewise.\n\t(pa_output_function_epilogue): Likewise.\n\t* config/powerpcspe/powerpcspe.c (rs6000_output_function_prologue)\n\t(rs6000_output_function_epilogue): Likewise.\n\t* config/rl78/rl78.c (rl78_start_function): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_output_function_prologue): Likewise.\n\t(rs6000_output_function_epilogue): Likewise.\n\t* config/rx/rx.c (rx_output_function_prologue): Likewise.\n\t* config/sh/sh.c (sh_output_function_epilogue): Likewise.\n\t* config/sparc/sparc.c (sparc_asm_function_prologue): Likewise.\n\t(sparc_asm_function_epilogue): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251232", "tree": {"sha": "c3877024ed5bc29701e2274ee5c15ed2a72cca79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3877024ed5bc29701e2274ee5c15ed2a72cca79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/427764163985bbfb309ee43a85605d6b32c225d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427764163985bbfb309ee43a85605d6b32c225d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427764163985bbfb309ee43a85605d6b32c225d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427764163985bbfb309ee43a85605d6b32c225d5/comments", "author": null, "committer": null, "parents": [{"sha": "2be65d9e98a1335e0d948c2de59946e715afcbe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be65d9e98a1335e0d948c2de59946e715afcbe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be65d9e98a1335e0d948c2de59946e715afcbe5"}], "stats": {"total": 191, "additions": 104, "deletions": 87}, "files": [{"sha": "4c0b975e26aa299c97c23dea934240e42df75b5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -1,3 +1,45 @@\n+2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (function_prologue): Remove frame size argument.\n+\t(function_epilogue): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* final.c (final_start_function): Update call to function_prologue.\n+\t(final_end_function): Update call to function_epilogue.\n+\t(default_function_pro_epilogue): Remove frame size argument.\n+\t* output.h (default_function_pro_epilogue): Likewise.\n+\t* config/arm/arm.c (arm_output_function_epilogue): Likewise.\n+\t(arm_output_function_prologue): Likewise.\n+\t* config/frv/frv.c (frv_function_prologue): Likewise.\n+\t(frv_function_epilogue): Likewise.\n+\t* config/i386/i386.c (ix86_output_function_epilogue): Likewise.\n+\t* config/ia64/ia64.c (ia64_output_function_prologue): Likewise.\n+\t(ia64_output_function_epilogue): Likewise.\n+\t* config/m32r/m32r.c (m32r_output_function_prologue): Likewise.\n+\t(m32r_output_function_epilogue): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_function_prologue)\n+\t(microblaze_function_epilogue): Likewise.\n+\t* config/mips/mips.c (mips_output_function_prologue): Likewise.\n+\t(mips_output_function_epilogue): Likewise.\n+\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Likewise.\n+\t(mmix_target_asm_function_epilogue): Likewise.\n+\t* config/msp430/msp430.c (msp430_start_function): Likewise.\n+\t* config/nds32/nds32.c (nds32_asm_function_prologue): Likewise.\n+\t(nds32_asm_function_epilogue): Likewise.\n+\t* config/nios2/nios2.c (nios2_asm_function_prologue): Likewise.\n+\t* config/pa/pa.c (pa_output_function_prologue): Likewise.\n+\t(pa_output_function_epilogue): Likewise.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_output_function_prologue)\n+\t(rs6000_output_function_epilogue): Likewise.\n+\t* config/rl78/rl78.c (rl78_start_function): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_output_function_prologue): Likewise.\n+\t(rs6000_output_function_epilogue): Likewise.\n+\t* config/rx/rx.c (rx_output_function_prologue): Likewise.\n+\t* config/sh/sh.c (sh_output_function_epilogue): Likewise.\n+\t* config/sparc/sparc.c (sparc_asm_function_prologue): Likewise.\n+\t(sparc_asm_function_epilogue): Likewise.\n+\n 2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree.h (type_has_mode_precision_p): New function."}, {"sha": "3d15a8185a74164743961d7d666cef4d60b8b11e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -144,8 +144,8 @@ static tree arm_handle_notshared_attribute (tree *, tree, tree, int, bool *);\n #endif\n static tree arm_handle_cmse_nonsecure_entry (tree *, tree, tree, int, bool *);\n static tree arm_handle_cmse_nonsecure_call (tree *, tree, tree, int, bool *);\n-static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n-static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void arm_output_function_epilogue (FILE *);\n+static void arm_output_function_prologue (FILE *);\n static int arm_comp_type_attributes (const_tree, const_tree);\n static void arm_set_default_type_attributes (tree);\n static int arm_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n@@ -19699,7 +19699,7 @@ arm_poke_function_name (FILE *stream, const char *name)\n /* Place some comments into the assembler stream\n    describing the current function.  */\n static void\n-arm_output_function_prologue (FILE *f, HOST_WIDE_INT frame_size)\n+arm_output_function_prologue (FILE *f)\n {\n   unsigned long func_type;\n \n@@ -19742,7 +19742,8 @@ arm_output_function_prologue (FILE *f, HOST_WIDE_INT frame_size)\n \n   asm_fprintf (f, \"\\t%@ args = %d, pretend = %d, frame = %wd\\n\",\n \t       crtl->args.size,\n-\t       crtl->args.pretend_args_size, frame_size);\n+\t       crtl->args.pretend_args_size,\n+\t       (HOST_WIDE_INT) get_frame_size ());\n \n   asm_fprintf (f, \"\\t%@ frame_needed = %d, uses_anonymous_args = %d\\n\",\n \t       frame_pointer_needed,\n@@ -19757,8 +19758,7 @@ arm_output_function_prologue (FILE *f, HOST_WIDE_INT frame_size)\n }\n \n static void\n-arm_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t      HOST_WIDE_INT frame_size ATTRIBUTE_UNUSED)\n+arm_output_function_epilogue (FILE *)\n {\n   arm_stack_offsets *offsets;\n "}, {"sha": "2697ba978dff2fad118018413613c78718ada7f1", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -348,8 +348,8 @@ static void frv_reorg_packet \t\t\t(void);\n static void frv_register_nop\t\t\t(rtx);\n static void frv_reorg \t\t\t\t(void);\n static void frv_pack_insns\t\t\t(void);\n-static void frv_function_prologue\t\t(FILE *, HOST_WIDE_INT);\n-static void frv_function_epilogue\t\t(FILE *, HOST_WIDE_INT);\n+static void frv_function_prologue\t\t(FILE *);\n+static void frv_function_epilogue\t\t(FILE *);\n static bool frv_assemble_integer\t\t(rtx, unsigned, int);\n static void frv_init_builtins\t\t\t(void);\n static rtx frv_expand_builtin\t\t\t(tree, rtx, rtx, machine_mode, int);\n@@ -1401,7 +1401,7 @@ frv_function_contains_far_jump (void)\n    will return correctly.  It also does the VLIW packing.  */\n \n static void\n-frv_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+frv_function_prologue (FILE *file)\n {\n   rtx_insn *insn, *next, *last_call;\n \n@@ -1841,8 +1841,7 @@ frv_expand_prologue (void)\n    this function provides a convenient place to do cleanup.  */\n \n static void\n-frv_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-                       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+frv_function_epilogue (FILE *)\n {\n   frv_stack_cache = (frv_stack_t *)0;\n "}, {"sha": "3c82ae64f4f2086fb7cacbb8ec6bf3f6db2a65c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -15677,7 +15677,7 @@ ix86_expand_epilogue (int style)\n /* Reset from the function's potential modifications.  */\n \n static void\n-ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED, HOST_WIDE_INT)\n+ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED)\n {\n   if (pic_offset_table_rtx\n       && !ix86_use_pseudo_pic_reg ())"}, {"sha": "571c204302211fe2f55b12eb3bab8f160de72894", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -233,8 +233,8 @@ static bool ia64_in_small_data_p (const_tree);\n static void process_epilogue (FILE *, rtx, bool, bool);\n \n static bool ia64_assemble_integer (rtx, unsigned int, int);\n-static void ia64_output_function_prologue (FILE *, HOST_WIDE_INT);\n-static void ia64_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void ia64_output_function_prologue (FILE *);\n+static void ia64_output_function_epilogue (FILE *);\n static void ia64_output_function_end_prologue (FILE *);\n \n static void ia64_print_operand (FILE *, rtx, int);\n@@ -4278,7 +4278,7 @@ ia64_assemble_integer (rtx x, unsigned int size, int aligned_p)\n /* Emit the function prologue.  */\n \n static void\n-ia64_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+ia64_output_function_prologue (FILE *file)\n {\n   int mask, grsave, grsave_prev;\n \n@@ -4356,8 +4356,7 @@ ia64_output_function_end_prologue (FILE *file)\n /* Emit the function epilogue.  */\n \n static void\n-ia64_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+ia64_output_function_epilogue (FILE *)\n {\n   int i;\n "}, {"sha": "ae3738823783ae84971040ab19ad4a354a437b6a", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -70,8 +70,8 @@ static tree  m32r_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void  m32r_print_operand (FILE *, rtx, int);\n static void  m32r_print_operand_address (FILE *, machine_mode, rtx);\n static bool  m32r_print_operand_punct_valid_p (unsigned char code);\n-static void  m32r_output_function_prologue (FILE *, HOST_WIDE_INT);\n-static void  m32r_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void  m32r_output_function_prologue (FILE *);\n+static void  m32r_output_function_epilogue (FILE *);\n \n static void  m32r_file_start (void);\n \n@@ -1744,7 +1744,7 @@ m32r_expand_prologue (void)\n    m32r_compute_frame_size which calculates the prolog size.  */\n \n static void\n-m32r_output_function_prologue (FILE * file, HOST_WIDE_INT size)\n+m32r_output_function_prologue (FILE * file)\n {\n   enum m32r_function_type fn_type = m32r_compute_function_type (current_function_decl);\n \n@@ -1753,7 +1753,7 @@ m32r_output_function_prologue (FILE * file, HOST_WIDE_INT size)\n     fprintf (file, \"\\t%s interrupt handler\\n\", ASM_COMMENT_START);\n \n   if (! current_frame_info.initialized)\n-    m32r_compute_frame_size (size);\n+    m32r_compute_frame_size (get_frame_size ());\n \n   /* This is only for the human reader.  */\n   fprintf (file,\n@@ -1880,8 +1880,7 @@ m32r_expand_epilogue (void)\n    and regs.  */\n \n static void\n-m32r_output_function_epilogue (FILE * file ATTRIBUTE_UNUSED,\n-\t\t\t       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+m32r_output_function_epilogue (FILE *)\n {\n   /* Reset state info for each function.  */\n   current_frame_info = zero_frame_info;"}, {"sha": "04121c816ed6f95d0e90fa5e23eb17040d9eb38b", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -2659,7 +2659,7 @@ save_restore_insns (int prologue)\n \n /* Set up the stack and frame (if desired) for the function.  */\n static void\n-microblaze_function_prologue (FILE * file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+microblaze_function_prologue (FILE * file)\n {\n   const char *fnname;\n   long fsiz = current_frame_info.total_size;\n@@ -2955,8 +2955,7 @@ microblaze_expand_prologue (void)\n #define PIC_OFFSET_TABLE_MASK (1 << (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST))\n \n static void\n-microblaze_function_epilogue (FILE * file ATTRIBUTE_UNUSED,\n-\t\t\t      HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+microblaze_function_epilogue (FILE *file)\n {\n   const char *fnname;\n "}, {"sha": "563f74b74f06cb6577179f836fe8a54d95095edb", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -11722,7 +11722,7 @@ mips_output_cplocal (void)\n /* Implement TARGET_OUTPUT_FUNCTION_PROLOGUE.  */\n \n static void\n-mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+mips_output_function_prologue (FILE *file)\n {\n   const char *fnname;\n \n@@ -11817,8 +11817,7 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n /* Implement TARGET_OUTPUT_FUNCTION_EPILOGUE.  */\n \n static void\n-mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+mips_output_function_epilogue (FILE *)\n {\n   const char *fnname;\n "}, {"sha": "c2cef018e3ff11fc50d666cbdc8b6245ea2499c9", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -127,9 +127,9 @@ static struct machine_function *mmix_init_machine_status (void);\n static void mmix_encode_section_info (tree, rtx, int);\n static const char *mmix_strip_name_encoding (const char *);\n static void mmix_emit_sp_add (HOST_WIDE_INT offset);\n-static void mmix_target_asm_function_prologue (FILE *, HOST_WIDE_INT);\n+static void mmix_target_asm_function_prologue (FILE *);\n static void mmix_target_asm_function_end_prologue (FILE *);\n-static void mmix_target_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void mmix_target_asm_function_epilogue (FILE *);\n static reg_class_t mmix_preferred_reload_class (rtx, reg_class_t);\n static reg_class_t mmix_preferred_output_reload_class (rtx, reg_class_t);\n static bool mmix_legitimate_address_p (machine_mode, rtx, bool);\n@@ -821,8 +821,7 @@ mmix_asm_preferred_eh_data_format (int code ATTRIBUTE_UNUSED,\n    mmix_reorg.  */\n \n static void\n-mmix_target_asm_function_prologue (FILE *stream ATTRIBUTE_UNUSED,\n-\t\t\t\t   HOST_WIDE_INT framesize ATTRIBUTE_UNUSED)\n+mmix_target_asm_function_prologue (FILE *)\n {\n   cfun->machine->in_prologue = 1;\n }\n@@ -880,8 +879,7 @@ mmix_reorg (void)\n /* TARGET_ASM_FUNCTION_EPILOGUE.  */\n \n static void\n-mmix_target_asm_function_epilogue (FILE *stream,\n-\t\t\t\t   HOST_WIDE_INT locals_size ATTRIBUTE_UNUSED)\n+mmix_target_asm_function_epilogue (FILE *stream)\n {\n   /* Emit an \\n for readability of the generated assembly.  */\n   fputc ('\\n', stream);"}, {"sha": "2b4427d8eb220ad9efc5370768888d27738477de", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -2059,7 +2059,7 @@ const struct attribute_spec msp430_attribute_table[] =\n #define TARGET_ASM_FUNCTION_PROLOGUE\tmsp430_start_function\n \n static void\n-msp430_start_function (FILE *outfile, HOST_WIDE_INT hwi_local ATTRIBUTE_UNUSED)\n+msp430_start_function (FILE *outfile)\n {\n   int r, n;\n "}, {"sha": "48344ddb4b3dadc9c7a7a81b3fb8056050f1c4ee", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -1502,8 +1502,7 @@ nds32_function_value_regno_p (const unsigned int regno)\n /* The content produced from this function\n    will be placed before prologue body.  */\n static void\n-nds32_asm_function_prologue (FILE *file,\n-\t\t\t     HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+nds32_asm_function_prologue (FILE *file)\n {\n   int r;\n   const char *func_name;\n@@ -1620,8 +1619,7 @@ nds32_asm_function_begin_epilogue (FILE *file)\n /* The content produced from this function\n    will be placed after epilogue body.  */\n static void\n-nds32_asm_function_epilogue (FILE *file,\n-\t\t\t     HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+nds32_asm_function_epilogue (FILE *file)\n {\n   fprintf (file, \"\\t! END EPILOGUE\\n\");\n }"}, {"sha": "0a4ce3886146c223491d62b5950da6679b5d7929", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -2800,7 +2800,7 @@ nios2_asm_file_end (void)\n \n /* Implement TARGET_ASM_FUNCTION_PROLOGUE.  */\n static void\n-nios2_asm_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+nios2_asm_function_prologue (FILE *file)\n {\n   if (flag_verbose_asm || flag_debug_asm)\n     {"}, {"sha": "071cdb521ed6a2a68f4e44ebcb4a1988680f051e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -116,9 +116,9 @@ static void set_reg_plus_d (int, int, HOST_WIDE_INT, int);\n static rtx pa_function_value (const_tree, const_tree, bool);\n static rtx pa_libcall_value (machine_mode, const_rtx);\n static bool pa_function_value_regno_p (const unsigned int);\n-static void pa_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void pa_output_function_prologue (FILE *);\n static void update_total_code_bytes (unsigned int);\n-static void pa_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void pa_output_function_epilogue (FILE *);\n static int pa_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n static int pa_adjust_priority (rtx_insn *, int);\n static int pa_issue_rate (void);\n@@ -3822,15 +3822,6 @@ pa_compute_frame_size (HOST_WIDE_INT size, int *fregs_live)\n \t  & ~(PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT - 1));\n }\n \n-/* Generate the assembly code for function entry.  FILE is a stdio\n-   stream to output the code to.  SIZE is an int: how many units of\n-   temporary storage to allocate.\n-\n-   Refer to the array `regs_ever_live' to determine which registers to\n-   save; `regs_ever_live[I]' is nonzero if register number I is ever\n-   used in the function.  This function is responsible for knowing\n-   which registers should not be saved even if used.  */\n-\n /* On HP-PA, move-double insns between fpu and cpu need an 8-byte block\n    of memory.  If any fpu reg is used in the function, we allocate\n    such a block here, at the bottom of the frame, just in case it's needed.\n@@ -3840,7 +3831,7 @@ pa_compute_frame_size (HOST_WIDE_INT size, int *fregs_live)\n    to do this is made in regclass.c.  */\n \n static void\n-pa_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+pa_output_function_prologue (FILE *file)\n {\n   /* The function's label and associated .PROC must never be\n      separated and must be output *after* any profiling declarations\n@@ -4254,7 +4245,7 @@ update_total_code_bytes (unsigned int nbytes)\n    adjustments before returning.  */\n \n static void\n-pa_output_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+pa_output_function_epilogue (FILE *file)\n {\n   rtx_insn *insn = get_last_insn ();\n   bool extra_nop;"}, {"sha": "5a92cd090698b9450fd40eed64c2034df961ee14", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -30599,8 +30599,7 @@ rs6000_output_savres_externs (FILE *file)\n /* Write function prologue.  */\n \n static void\n-rs6000_output_function_prologue (FILE *file,\n-\t\t\t\t HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+rs6000_output_function_prologue (FILE *file)\n {\n   if (!cfun->is_thunk)\n     rs6000_output_savres_externs (file);\n@@ -31790,8 +31789,7 @@ rs6000_emit_epilogue (int sibcall)\n /* Write function epilogue.  */\n \n static void\n-rs6000_output_function_epilogue (FILE *file,\n-\t\t\t\t HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+rs6000_output_function_epilogue (FILE *file)\n {\n #if TARGET_MACHO\n   macho_branch_islands ();"}, {"sha": "9592cd9ecb97a89153e844ed3db0e6a77a4479f7", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -1553,7 +1553,7 @@ rl78_expand_eh_epilogue (rtx x ATTRIBUTE_UNUSED)\n    this to insert a comment in the asm file describing the\n    function.  */\n static void\n-rl78_start_function (FILE *file, HOST_WIDE_INT hwi_local ATTRIBUTE_UNUSED)\n+rl78_start_function (FILE *file)\n {\n   int i;\n "}, {"sha": "c0e3dcaefb73966e2ea35c4affa7e6a7369ac7bd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -27569,8 +27569,7 @@ rs6000_output_savres_externs (FILE *file)\n /* Write function prologue.  */\n \n static void\n-rs6000_output_function_prologue (FILE *file,\n-\t\t\t\t HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+rs6000_output_function_prologue (FILE *file)\n {\n   if (!cfun->is_thunk)\n     rs6000_output_savres_externs (file);\n@@ -28694,8 +28693,7 @@ rs6000_emit_epilogue (int sibcall)\n /* Write function epilogue.  */\n \n static void\n-rs6000_output_function_epilogue (FILE *file,\n-\t\t\t\t HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+rs6000_output_function_epilogue (FILE *file)\n {\n #if TARGET_MACHO\n   macho_branch_islands ();"}, {"sha": "9852a736471186e299f0e40ded8ae1e46f9dd374", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -1888,8 +1888,7 @@ add_vector_labels (FILE *file, const char *aname)\n }\n \n static void\n-rx_output_function_prologue (FILE * file,\n-\t\t\t     HOST_WIDE_INT frame_size ATTRIBUTE_UNUSED)\n+rx_output_function_prologue (FILE * file)\n {\n   add_vector_labels (file, \"interrupt\");\n   add_vector_labels (file, \"vector\");"}, {"sha": "90dd76df05f89b0dd7c337515145d04f427245f7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -211,7 +211,7 @@ static void sh_print_operand (FILE *, rtx, int);\n static void sh_print_operand_address (FILE *, machine_mode, rtx);\n static bool sh_print_operand_punct_valid_p (unsigned char code);\n static bool sh_asm_output_addr_const_extra (FILE *file, rtx x);\n-static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void sh_output_function_epilogue (FILE *);\n static void sh_insert_attributes (tree, tree *);\n static const char *sh_check_pch_target_flags (int);\n static int sh_register_move_cost (machine_mode, reg_class_t, reg_class_t);\n@@ -7350,8 +7350,7 @@ sh_set_return_address (rtx ra, rtx tmp)\n \n /* Clear variables at function end.  */\n static void\n-sh_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t     HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+sh_output_function_epilogue (FILE *)\n {\n }\n "}, {"sha": "911cb34c22bd781b626b7d0f97dc6c2dd0f4902e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -585,8 +585,8 @@ static rtx sparc_builtin_saveregs (void);\n static int epilogue_renumber (rtx *, int);\n static bool sparc_assemble_integer (rtx, unsigned int, int);\n static int set_extends (rtx_insn *);\n-static void sparc_asm_function_prologue (FILE *, HOST_WIDE_INT);\n-static void sparc_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void sparc_asm_function_prologue (FILE *);\n+static void sparc_asm_function_epilogue (FILE *);\n #ifdef TARGET_SOLARIS\n static void sparc_solaris_elf_asm_named_section (const char *, unsigned int,\n \t\t\t\t\t\t tree) ATTRIBUTE_UNUSED;\n@@ -5911,7 +5911,7 @@ sparc_flat_expand_prologue (void)\n    down to emitting the necessary .register directives.  */\n \n static void\n-sparc_asm_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+sparc_asm_function_prologue (FILE *file)\n {\n   /* Check that the assumption we made in sparc_expand_prologue is valid.  */\n   if (!TARGET_FLAT)\n@@ -6033,7 +6033,7 @@ sparc_can_use_return_insn_p (void)\n /* This function generates the assembly code for function exit.  */\n \n static void\n-sparc_asm_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+sparc_asm_function_epilogue (FILE *file)\n {\n   /* If the last two instructions of a function are \"call foo; dslot;\"\n      the return address might point to the first instruction in the next"}, {"sha": "20926d1b2fc62ab3fd318f37d2ab543134abc682", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -4582,13 +4582,13 @@ of the hook places the table of pointers in the special section named\n @code{__patchable_function_entries}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_PROLOGUE (FILE *@var{file}, HOST_WIDE_INT @var{size})\n+@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_PROLOGUE (FILE *@var{file})\n If defined, a function that outputs the assembler code for entry to a\n function.  The prologue is responsible for setting up the stack frame,\n initializing the frame pointer register, saving registers that must be\n saved, and allocating @var{size} additional bytes of storage for the\n-local variables.  @var{size} is an integer.  @var{file} is a stdio\n-stream to which the assembler code should be output.\n+local variables.  @var{file} is a stdio stream to which the assembler\n+code should be output.\n \n The label for the beginning of the function need not be output by this\n macro.  That has already been done when the macro is run.\n@@ -4641,12 +4641,12 @@ emitted as RTL, and you have some extra assembler that needs to be\n emitted.  @xref{epilogue instruction pattern}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_EPILOGUE (FILE *@var{file}, HOST_WIDE_INT @var{size})\n+@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_EPILOGUE (FILE *@var{file})\n If defined, a function that outputs the assembler code for exit from a\n function.  The epilogue is responsible for restoring the saved\n registers and stack pointer to their values when the function was\n called, and returning control to the caller.  This macro takes the\n-same arguments as the macro @code{TARGET_ASM_FUNCTION_PROLOGUE}, and the\n+same argument as the macro @code{TARGET_ASM_FUNCTION_PROLOGUE}, and the\n registers to restore are determined from @code{regs_ever_live} and\n @code{CALL_USED_REGISTERS} in the same way.\n "}, {"sha": "5cc0a1ebbc9e8e9dc66fba4e1f559984834eee64", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -244,8 +244,7 @@ init_final (const char *filename ATTRIBUTE_UNUSED)\n    If not overridden for epilogue code, then the function body itself\n    contains return instructions wherever needed.  */\n void\n-default_function_pro_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+default_function_pro_epilogue (FILE *)\n {\n }\n \n@@ -1845,7 +1844,7 @@ final_start_function (rtx_insn *first, FILE *file,\n   }\n \n   /* First output the function prologue: code to set up the stack frame.  */\n-  targetm.asm_out.function_prologue (file, get_frame_size ());\n+  targetm.asm_out.function_prologue (file);\n \n   /* If the machine represents the prologue as RTL, the profiling code must\n      be emitted when NOTE_INSN_PROLOGUE_END is scanned.  */\n@@ -1918,7 +1917,7 @@ final_end_function (void)\n \n   /* Finally, output the function epilogue:\n      code to restore the stack frame and return to the caller.  */\n-  targetm.asm_out.function_epilogue (asm_out_file, get_frame_size ());\n+  targetm.asm_out.function_epilogue (asm_out_file);\n \n   /* And debug output.  */\n   if (!DECL_IGNORED_P (current_function_decl))"}, {"sha": "2ea4366719288e4dfb8d677ca9542184bd598f63", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -355,7 +355,7 @@ extern int compute_reloc_for_constant (tree);\n extern const char *user_label_prefix;\n \n /* Default target function prologue and epilogue assembler output.  */\n-extern void default_function_pro_epilogue (FILE *, HOST_WIDE_INT);\n+extern void default_function_pro_epilogue (FILE *);\n \n /* Default target function switched text sections.  */\n extern void default_function_switched_text_sections (FILE *, tree, bool);"}, {"sha": "985ddc0c8706bf3d1dc8e57371e17496c77f38bc", "filename": "gcc/target.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427764163985bbfb309ee43a85605d6b32c225d5/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=427764163985bbfb309ee43a85605d6b32c225d5", "patch": "@@ -306,8 +306,8 @@ DEFHOOK\n function.  The prologue is responsible for setting up the stack frame,\\n\\\n initializing the frame pointer register, saving registers that must be\\n\\\n saved, and allocating @var{size} additional bytes of storage for the\\n\\\n-local variables.  @var{size} is an integer.  @var{file} is a stdio\\n\\\n-stream to which the assembler code should be output.\\n\\\n+local variables.  @var{file} is a stdio stream to which the assembler\\n\\\n+code should be output.\\n\\\n \\n\\\n The label for the beginning of the function need not be output by this\\n\\\n macro.  That has already been done when the macro is run.\\n\\\n@@ -344,7 +344,7 @@ for a machine if doing so is more convenient or required for\\n\\\n compatibility reasons.  Except in cases where required by standard\\n\\\n or by a debugger, there is no reason why the stack layout used by GCC\\n\\\n need agree with that used by other compilers for a machine.\",\n- void, (FILE *file, HOST_WIDE_INT size),\n+ void, (FILE *file),\n  default_function_pro_epilogue)\n \n /* Output the assembler code for end of prologue.  */\n@@ -374,7 +374,7 @@ DEFHOOK\n function.  The epilogue is responsible for restoring the saved\\n\\\n registers and stack pointer to their values when the function was\\n\\\n called, and returning control to the caller.  This macro takes the\\n\\\n-same arguments as the macro @code{TARGET_ASM_FUNCTION_PROLOGUE}, and the\\n\\\n+same argument as the macro @code{TARGET_ASM_FUNCTION_PROLOGUE}, and the\\n\\\n registers to restore are determined from @code{regs_ever_live} and\\n\\\n @code{CALL_USED_REGISTERS} in the same way.\\n\\\n \\n\\\n@@ -414,7 +414,7 @@ functions pop their own arguments.  @code{TARGET_ASM_FUNCTION_EPILOGUE}\\n\\\n needs to know what was decided.  The number of bytes of the current\\n\\\n function's arguments that this function should pop is available in\\n\\\n @code{crtl->args.pops_args}.  @xref{Scalar Return}.\",\n- void, (FILE *file, HOST_WIDE_INT size),\n+ void, (FILE *file),\n  default_function_pro_epilogue)\n \n /* Initialize target-specific sections.  */"}]}