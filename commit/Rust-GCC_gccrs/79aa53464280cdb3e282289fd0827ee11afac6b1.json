{"sha": "79aa53464280cdb3e282289fd0827ee11afac6b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhYTUzNDY0MjgwY2RiM2UyODIyODlmZDA4MjdlZTExYWZhYzZiMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-28T06:19:35Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-28T06:19:35Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r608", "tree": {"sha": "ec864917c9d465588fbf9845bb918e04c0b233eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec864917c9d465588fbf9845bb918e04c0b233eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79aa53464280cdb3e282289fd0827ee11afac6b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79aa53464280cdb3e282289fd0827ee11afac6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79aa53464280cdb3e282289fd0827ee11afac6b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79aa53464280cdb3e282289fd0827ee11afac6b1/comments", "author": null, "committer": null, "parents": [{"sha": "81c9a89f1ed3e7d7e7a0e11f2eec953d262e9308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c9a89f1ed3e7d7e7a0e11f2eec953d262e9308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c9a89f1ed3e7d7e7a0e11f2eec953d262e9308"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "0cb876cfa309e8a04dea325342556071d47c0137", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79aa53464280cdb3e282289fd0827ee11afac6b1/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79aa53464280cdb3e282289fd0827ee11afac6b1/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=79aa53464280cdb3e282289fd0827ee11afac6b1", "patch": "@@ -382,12 +382,15 @@ print_operand (file, x, code)\n   else if (GET_CODE (x) == MEM)\n     {\n       rtx tmp = XEXP (x, 0);\n-#ifndef PC_RELATIVE\n-      if (GET_CODE (tmp) == SYMBOL_REF || GET_CODE (tmp) == LABEL_REF)\n+#if ! (defined (PC_RELATIVE) || defined (NO_ABSOLUTE_PREFIX_IF_SYMBOLIC))\n+      if (GET_CODE (tmp) != CONST_INT)\n \t{\n \t  char *out = XSTR (tmp, 0);\n \t  if (out[0] == '*')\n-\t    fprintf (file, \"@%s\", &out[1]);\n+\t    {\n+\t      PUT_ABSOLUTE_PREFIX (file);\n+\t      fprintf (file, \"%s\", &out[1]);\n+\t    }\n \t  else\n \t    ASM_OUTPUT_LABELREF (file, out);\n \t}\n@@ -404,7 +407,7 @@ print_operand (file, x, code)\n \t  PUT_IMMEDIATE_PREFIX(file);\n #ifdef SEQUENT_ASM\n \t  /* Sequent likes it's floating point constants as integers */\n-\t  fprintf (file, \"0Dx%08x%08x\", u.i[1], u.i[0])l\n+\t  fprintf (file, \"0Dx%08x%08x\", u.i[1], u.i[0]);\n #else\n #ifdef ENCORE_ASM\n \t  fprintf (file, \"0f%.20e\", u.d); \n@@ -417,7 +420,7 @@ print_operand (file, x, code)\n \t{ \n \t  union { double d; int i[2]; } u;\n \t  u.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n-\t  PUT_IMMEDIATE_PREFIX(file);\n+\t  PUT_IMMEDIATE_PREFIX (file);\n #ifdef SEQUENT_ASM\n \t  {\n \t    union { float f; long l; } uu;\n@@ -530,12 +533,24 @@ print_operand_address (file, addr)\n     }\n   if (! offset)\n     offset = const0_rtx;\n+\n+#ifdef INDEX_RATHER_THAN_BASE\n+  /* This is a re-implementation of the SEQUENT_ADDRESS_BUG fix.  */\n+  if (base && !indexexp && GET_CODE (base) == REG\n+      && REG_OK_FOR_INDEX_P (REGNO (base))\n+    {\n+      indexexp = base;\n+      base = 0;\n+    }\n+#endif\n+\n   /* now, offset, base and indexexp are set */\n   if (! base)\n     {\n #if defined (PC_RELATIVE) || defined (NO_ABSOLUTE_PREFIX_IF_SYMBOLIC)\n-      if (! (GET_CODE (offset) == LABEL_REF\n-\t     || GET_CODE (offset) == SYMBOL_REF))\n+      if (GET_CODE (offset) == CONST_INT)\n+/*      if (! (GET_CODE (offset) == LABEL_REF\n+\t     || GET_CODE (offset) == SYMBOL_REF)) */\n #endif\n \tPUT_ABSOLUTE_PREFIX (file);\n     }\n@@ -546,7 +561,7 @@ print_operand_address (file, addr)\n       {\n \t/* now we must output base.  Possible alternatives are:\n \t   (rN)       (REG ...)\n-\t   (sp)\t(REG ...)\n+\t   (sp)\t      (REG ...)\n \t   (fp)       (REG ...)\n \t   (pc)       (REG ...)  used for SYMBOL_REF and LABEL_REF, output\n \t   (disp(fp)) (MEM ...)       just before possible [rX:y]"}, {"sha": "faeade9fb986148e1d9d26f4f0d360d2f2f638e6", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79aa53464280cdb3e282289fd0827ee11afac6b1/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79aa53464280cdb3e282289fd0827ee11afac6b1/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=79aa53464280cdb3e282289fd0827ee11afac6b1", "patch": "@@ -247,8 +247,8 @@\n     return \\\"movf %1,%0\\\";\n #endif\n /* There was a #if 0 around this, but that was erroneous\n-   for anything bug GAS syntax -- rms.  */\n-#ifndef GAS_SYNTAX\n+   for many machines -- rms.  */\n+#ifndef MOVD_FLOAT_OK\n   /* GAS understands floating constants in ordinary movd instructions\n      but other assemblers might object.  */\n   else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n@@ -2183,7 +2183,7 @@\n       rtx temp = XEXP (operands[0], 0);\n       if (CONSTANT_ADDRESS_P (temp))\n \t{\n-#ifdef GAS_SYNTAX\n+#ifdef CALL_MEMREF_IMPLICIT\n \t  operands[0] = temp;\n \t  return \\\"bsr %0\\\";\n #else\n@@ -2195,7 +2195,7 @@\n #endif\n \t}\n       if (GET_CODE (XEXP (operands[0], 0)) == REG)\n-#if defined (GNX_V3) || defined (GAS_SYNTAX)\n+#if defined (GNX_V3) || defined (CALL_MEMREF_IMPLICIT)\n \treturn \\\"jsr %0\\\";\n #else\n         return \\\"jsr %a0\\\";\n@@ -2218,7 +2218,7 @@\n       rtx temp = XEXP (operands[1], 0);\n       if (CONSTANT_ADDRESS_P (temp))\n \t{\n-#ifdef GAS_SYNTAX\n+#ifdef CALL_MEMREF_IMPLICIT\n \t  operands[1] = temp;\n \t  return \\\"bsr %1\\\";\n #else\n@@ -2230,7 +2230,7 @@\n #endif\n \t}\n       if (GET_CODE (XEXP (operands[1], 0)) == REG)\n-#if defined (GNX_V3) || defined (GAS_SYNTAX)\n+#if defined (GNX_V3) || defined (CALL_MEMREF_IMPLICIT)\n \treturn \\\"jsr %1\\\";\n #else\n         return \\\"jsr %a1\\\";"}, {"sha": "af6e891ae843120a858ea32cdfcd93f51e00828a", "filename": "gcc/config/ns32k/sequent.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79aa53464280cdb3e282289fd0827ee11afac6b1/gcc%2Fconfig%2Fns32k%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79aa53464280cdb3e282289fd0827ee11afac6b1/gcc%2Fconfig%2Fns32k%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fsequent.h?ref=79aa53464280cdb3e282289fd0827ee11afac6b1", "patch": "@@ -58,3 +58,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define IMMEDIATE_PREFIX 0\n \n #define SEQUENT_ASM\n+\n+/* Operand of bsr or jsr should be just the address.  */\n+\n+#define CALL_MEMREF_IMPLICIT\n+\n+/* Output a reg as an index rather than a base if we have the choice.  */\n+\n+#define INDEX_RATHER_THAN_BASE"}]}