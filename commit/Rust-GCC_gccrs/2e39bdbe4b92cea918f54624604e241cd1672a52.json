{"sha": "2e39bdbe4b92cea918f54624604e241cd1672a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzOWJkYmU0YjkyY2VhOTE4ZjU0NjI0NjA0ZTI0MWNkMTY3MmE1Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-02-01T21:30:52Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-02-01T21:30:52Z"}, "message": "tsystem.h: New file.\n\n\t* tsystem.h: New file.\n\n\t* Makefile.in (libgcc2.a, stmp-multilib, crtbegin.o, crtend.o,\n\ts-crtS): Depend on tsystem.h.\n\n\t* crtstuff.c: Include tsystem.h.\n\t* frame.c: Likewise.\n\t* libgcc2.c: Likewise.\n\nFrom-SVN: r31741", "tree": {"sha": "bd349f655e668c3f79a4ea423341713cac116e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd349f655e668c3f79a4ea423341713cac116e61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e39bdbe4b92cea918f54624604e241cd1672a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e39bdbe4b92cea918f54624604e241cd1672a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e39bdbe4b92cea918f54624604e241cd1672a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e39bdbe4b92cea918f54624604e241cd1672a52/comments", "author": null, "committer": null, "parents": [{"sha": "ed672cd0e9fe098b273c2dfd2dcac08b59e4a381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed672cd0e9fe098b273c2dfd2dcac08b59e4a381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed672cd0e9fe098b273c2dfd2dcac08b59e4a381"}], "stats": {"total": 177, "additions": 108, "deletions": 69}, "files": [{"sha": "2e1691505db00a584a1eeade55c77fb954be12d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e39bdbe4b92cea918f54624604e241cd1672a52", "patch": "@@ -1,3 +1,14 @@\n+2000-02-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tsystem.h: New file.\n+\n+\t* Makefile.in (libgcc2.a, stmp-multilib, crtbegin.o, crtend.o,\n+\ts-crtS): Depend on tsystem.h.\n+\n+\t* crtstuff.c: Include tsystem.h.\n+\t* frame.c: Likewise.\n+\t* libgcc2.c: Likewise.\n+\n Tue Feb  1 19:53:27 CET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* builtins.c (expand_builtin_memset): Expand for variable sized"}, {"sha": "2a61aa84122ccdb90fa651a0ab1c0fbe82e7606b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2e39bdbe4b92cea918f54624604e241cd1672a52", "patch": "@@ -1054,7 +1054,8 @@ libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs $(STMP_FIXPROTO)\n \n LIB2ADD = $(srcdir)/frame.c $(LIB2FUNCS_EXTRA) $(LANG_LIB2FUNCS)\n libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n-   $(MACHMODE_H) longlong.h frame.h gbl-ctors.h config.status stmp-int-hdrs\n+   $(MACHMODE_H) longlong.h frame.h gbl-ctors.h config.status stmp-int-hdrs \\\n+   tsystem.h\n # Actually build it in tmplibgcc2.a, then rename at end,\n # so that libgcc2.a itself remains nonexistent if compilation is aborted.\n \t-rm -f tmplibgcc2.a\n@@ -1186,7 +1187,7 @@ s-mlib: $(srcdir)/genmultilib Makefile\n \n # Build multiple copies of libgcc.a, one for each target switch.\n stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n-   frame.h \\\n+   frame.h tsystem.h \\\n    $(LIB2ADD) $(MACHMODE_H) longlong.h gbl-ctors.h config.status\n \tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n \t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n@@ -1272,14 +1273,14 @@ stmp-multilib-sub:\n # linked using GCC on systems using COFF or ELF, for the sake of C++\n # constructors.\n $(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \\\n-  defaults.h frame.h gbl-ctors.h stmp-int-hdrs\n+  defaults.h frame.h gbl-ctors.h stmp-int-hdrs tsystem.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n \t  -finhibit-size-directive -fno-inline-functions \\\n \t  -fno-exceptions $(CRTSTUFF_T_CFLAGS) @inhibit_libc@ \\\n \t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -o $(T)crtbegin$(objext)\n \n $(T)crtend.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \\\n-  defaults.h frame.h gbl-ctors.h stmp-int-hdrs\n+  defaults.h frame.h gbl-ctors.h stmp-int-hdrs tsystem.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n \t  -finhibit-size-directive -fno-inline-functions \\\n \t  -fno-exceptions $(CRTSTUFF_T_CFLAGS) @inhibit_libc@ \\\n@@ -1290,7 +1291,7 @@ $(T)crtend.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \\\n crtbeginS.o crtendS.o: s-crtS ; @true\n \n s-crtS: crtstuff.c $(GCC_PASSES) $(CONFIG_H) \\\n-  defaults.h frame.h gbl-ctors.h stmp-int-hdrs\n+  defaults.h frame.h gbl-ctors.h stmp-int-hdrs tsystem.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS_S) \\\n \t  -DCRT_BEGIN -DCRTSTUFFS_O -finhibit-size-directive \\\n \t  -fno-inline-functions -fno-exceptions @inhibit_libc@ -g0 \\"}, {"sha": "c2d4fac605a45e3233dc528d67558199287646fd", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=2e39bdbe4b92cea918f54624604e241cd1672a52", "patch": "@@ -1,6 +1,6 @@\n /* Specialized bits of code needed to support construction and\n    destruction of file-scope objects in C++ code.\n-   Copyright (C) 1991, 1994-1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994-1999, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -52,23 +52,9 @@ Boston, MA 02111-1307, USA.  */\n    do not apply.  */\n \n #include \"tm.h\"\n-\n-/* We disable this when inhibit_libc, so that gcc can still be built without\n-   needing header files first.  */\n-/* ??? This is not a good solution, since prototypes may be required in\n-   some cases for correct code.  See also libgcc2.c/frame.c.  */\n-#ifndef inhibit_libc\n-/* fixproto guarantees these system headers exist. */\n-#include <stdlib.h>\n-#include <unistd.h>\n-#else\n-# ifndef atexit\n-extern int atexit(void (*)(void));\n-# endif\n-#endif\n+#include \"tsystem.h\"\n \n #include \"defaults.h\"\n-#include <stddef.h>\n #include \"frame.h\"\n \n /* We do not want to add the weak attribute to the declarations of these"}, {"sha": "717849fe3b870b463c6e175878d0abffd97700b6", "filename": "gcc/frame.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Fframe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Fframe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.c?ref=2e39bdbe4b92cea918f54624604e241cd1672a52", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines needed for unwinding stack frames for exception handling.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -32,31 +32,12 @@ Boston, MA 02111-1307, USA.  */\n    do not apply.  */\n \n #include \"tconfig.h\"\n-\n-/* We disable this when inhibit_libc, so that gcc can still be built without\n-   needing header files first.  */\n-/* ??? This is not a good solution, since prototypes may be required in\n-   some cases for correct code.  See also libgcc2.c/crtstuff.c.  */\n-#ifndef inhibit_libc\n-/* fixproto guarantees these system headers exist. */\n-#include <stdlib.h>\n-#include <unistd.h>\n-\n-#else\n-#include <stddef.h>\n-#ifndef malloc\n-extern void *malloc (size_t);\n-#endif\n-#ifndef free\n-extern void free (void *);\n-#endif\n-#endif\n+#include \"tsystem.h\"\n \n #include \"defaults.h\"\n \n #ifdef DWARF2_UNWIND_INFO\n #include \"dwarf2.h\"\n-#include <stddef.h>\n #include \"frame.h\"\n #include \"gthr.h\"\n "}, {"sha": "2775751aca9e79eae0c3cfdc28044b25a6b1f0cc", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=2e39bdbe4b92cea918f54624604e241cd1672a52", "patch": "@@ -32,36 +32,10 @@ Boston, MA 02111-1307, USA.  */\n    do not apply.  */\n \n #include \"tconfig.h\"\n-\n-/* We disable this when inhibit_libc, so that gcc can still be built without\n-   needing header files first.  */\n-/* ??? This is not a good solution, since prototypes may be required in\n-   some cases for correct code.  See also frame.c/crtstuff.c.  */\n-#ifndef inhibit_libc\n-/* fixproto guarantees these system headers exist. */\n-#include <stdlib.h>\n-#include <unistd.h>\n-\n-#else\n-#ifndef L_trampoline\n-#include <stddef.h>\n-#ifndef malloc\n-extern void *malloc (size_t);\n-#endif\n-#ifndef free\n-extern void free (void *);\n-#endif\n-#ifndef atexit\n-extern int atexit(void (*)(void));\n-#endif\n-#endif\n-#endif\n+#include \"tsystem.h\"\n \n #include \"machmode.h\"\n #include \"defaults.h\" \n-#ifndef L_trampoline\n-#include <stddef.h>\n-#endif\n \n /* Don't use `fancy_abort' here even if config.h says to use it.  */\n #ifdef abort"}, {"sha": "244e5c06c2abd65dba2b5e9f78afea6d5b45c983", "filename": "gcc/tsystem.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Ftsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e39bdbe4b92cea918f54624604e241cd1672a52/gcc%2Ftsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsystem.h?ref=2e39bdbe4b92cea918f54624604e241cd1672a52", "patch": "@@ -0,0 +1,86 @@\n+/* Get common system includes and various definitions and declarations\n+   based on target macros.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef __GCC_TSYSTEM_H__\n+#define __GCC_TSYSTEM_H__\n+\n+/* GCC supplies this header. */\n+#include <stddef.h>\n+\n+#ifdef inhibit_libc\n+\n+#ifndef malloc\n+extern void *malloc (size_t);\n+#endif\n+\n+#ifndef free\n+extern void free (void *);\n+#endif\n+\n+#ifndef atexit\n+extern int atexit (void (*)(void));\n+#endif\n+\n+#else /* ! inhibit_libc */\n+/* We disable this when inhibit_libc, so that gcc can still be built without\n+   needing header files first.  */\n+/* ??? This is not a good solution, since prototypes may be required in\n+   some cases for correct code.  */\n+\n+/* GCC supplies this header. */\n+#include <stdarg.h>\n+\n+/* All systems have this header. */\n+#include <stdio.h>\n+\n+/* All systems have this header. */\n+#include <sys/types.h>\n+\n+/* All systems have this header. */\n+#include <errno.h>\n+\n+#ifndef errno\n+extern int errno;\n+#endif\n+\n+#if defined(POSIX) || defined(USG)\n+#include <string.h>\n+#endif\n+\n+/* GCC (fixproto) guarantees these system headers exist. */\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+/* GCC supplies this header. */\n+#include <limits.h>\n+\n+#if defined(POSIX) || defined(USG)\n+#include <time.h>\n+#endif\n+\n+#endif /* inhibit_libc */\n+\n+/* Define a generic NULL if one hasn't already been defined.  */\n+#ifndef NULL\n+#define NULL 0\n+#endif\n+\n+#endif /* __GCC_TSYSTEM_H__ */"}]}