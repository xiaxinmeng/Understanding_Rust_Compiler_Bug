{"sha": "9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNkNTFlZjY4ZTRjY2MyMTQ2OTQ3OGQ0NWQwMGE2YzkzMWUyYTYyZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-07-18T03:39:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-18T03:39:42Z"}, "message": "c-decl.c (pushdecl_function_level): Make static, return nothing.\n\n\t* c-decl.c (pushdecl_function_level): Make static, return nothing.\n\t(kept_level_p): Fold into poplevel.\n\t(undeclared_variable): Moved here from c-typeck.c.  Export.\n\t* c-tree.h (KEEP_YES, KEEP_NO, KEEP_MAYBE): New #defines.\n\t(undeclared_variable): Prototype here.  Don't prototype\n\tkept_level_p nor pushdecl_function_level.\n\t* c-parse.in: Change first argument to poplevel from\n\t\"kept_level_p()\" to \"KEEP_MAYBE\".\n\t* c-typeck.c (undeclared_variable): Moved to c-decl.c.\n\nFrom-SVN: r69540", "tree": {"sha": "ffa570317e75d53bed5c8b63b11fb942dd23eefd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa570317e75d53bed5c8b63b11fb942dd23eefd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/comments", "author": null, "committer": null, "parents": [{"sha": "cf6bcbd0848c32a1760ee7be49f6a57fad00e69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6bcbd0848c32a1760ee7be49f6a57fad00e69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6bcbd0848c32a1760ee7be49f6a57fad00e69c"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "890dfdaaed506401a7ca3c71b06cafb0042cb279", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "patch": "@@ -1,3 +1,15 @@\n+2003-07-17  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-decl.c (pushdecl_function_level): Make static, return nothing.\n+\t(kept_level_p): Fold into poplevel.\n+\t(undeclared_variable): Moved here from c-typeck.c.  Export.\n+\t* c-tree.h (KEEP_YES, KEEP_NO, KEEP_MAYBE): New #defines.\n+\t(undeclared_variable): Prototype here.  Don't prototype\n+\tkept_level_p nor pushdecl_function_level.\n+\t* c-parse.in: Change first argument to poplevel from\n+\t\"kept_level_p()\" to \"KEEP_MAYBE\".\n+\t* c-typeck.c (undeclared_variable): Moved to c-decl.c.\n+\n 2003-07-17  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_rtx): Use simplify_gen_binary to swap"}, {"sha": "07d873436cf30c7143457e3ce3a0cd3183e93719", "filename": "gcc/c-decl.c", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "patch": "@@ -291,6 +291,7 @@ static tree any_external_decl (tree);\n static void record_external_decl (tree);\n static void warn_if_shadowing (tree, tree);\n static void clone_underlying_type (tree);\n+static void pushdecl_function_level (tree, tree);\n static bool flexible_array_type_p (tree);\n static hashval_t link_hash_hash\t(const void *);\n static int link_hash_eq (const void *, const void *);\n@@ -391,18 +392,6 @@ keep_next_level (void)\n   keep_next_level_flag = 1;\n }\n \n-/* Nonzero if the current level needs to have a BLOCK made.  */\n-\n-int\n-kept_level_p (void)\n-{\n-  return ((current_binding_level->keep_if_subblocks\n-\t   && current_binding_level->blocks != 0)\n-\t  || current_binding_level->keep\n-\t  || current_binding_level->names != 0\n-\t  || current_binding_level->tags != 0);\n-}\n-\n /* Identify this binding level as a level of parameters.  */\n \n void\n@@ -485,8 +474,12 @@ poplevel (int keep, int reverse, int functionbody)\n   tree subblocks = current_binding_level->blocks;\n \n   functionbody |= current_binding_level->function_body;\n+\n+  if (keep == KEEP_MAYBE)\n+    keep = (current_binding_level->names || current_binding_level->tags);\n+  \n   keep |= (current_binding_level->keep || functionbody\n-\t   || (current_binding_level->keep_if_subblocks && subblocks != 0));\n+\t   || (subblocks && current_binding_level->keep_if_subblocks));\n \n   /* We used to warn about unused variables in expand_end_bindings,\n      i.e. while generating RTL.  But in function-at-a-time mode we may\n@@ -1830,12 +1823,12 @@ pushdecl_top_level (tree x)\n \n /* Record X as belonging to the outermost scope of the current\n    function.  This is used only internally, by c_make_fname_decl and\n-   build_external_ref, and is limited to their needs.  The NAME is\n-   provided as a separate argument because build_external_ref wants to\n+   undeclared_variable, and is limited to their needs.  The NAME is\n+   provided as a separate argument because undeclared_variable wants to\n    use error_mark_node for X.  For VAR_DECLs, duplicate_decls is not\n    called; if there is any preexisting decl for this identifier, it is\n    an ICE.  */\n-tree\n+static void\n pushdecl_function_level (tree x, tree name)\n {\n   struct binding_level *scope;\n@@ -1862,7 +1855,6 @@ pushdecl_function_level (tree x, tree name)\n     }\n \n   IDENTIFIER_SYMBOL_VALUE (name) = x;\n-  return x;\n }\n \f\n /* Generate an implicit declaration for identifier FUNCTIONID as a\n@@ -1992,6 +1984,38 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       return 0;\n     }\n }\n+\n+/* Issue an error message for a reference to an undeclared variable\n+   ID, including a reference to a builtin outside of function-call\n+   context.  Establish a binding of the identifier to error_mark_node\n+   in an appropriate scope, which will suppress further errors for the\n+   same identifier.  */\n+void\n+undeclared_variable (tree id)\n+{\n+  static bool already = false;\n+\n+  if (current_function_decl == 0)\n+    {\n+      error (\"`%s' undeclared here (not in a function)\",\n+\t     IDENTIFIER_POINTER (id));\n+      IDENTIFIER_SYMBOL_VALUE (id) = error_mark_node;\n+    }\n+  else\n+    {\n+      error (\"`%s' undeclared (first use in this function)\",\n+\t     IDENTIFIER_POINTER (id));\n+\n+      if (! already)\n+\t{\n+\t  error (\"(Each undeclared identifier is reported only once\");\n+\t  error (\"for each function it appears in.)\");\n+\t  already = true;\n+\t}\n+\n+      pushdecl_function_level (error_mark_node, id);\n+    }\n+}\n \f\n /* Get the LABEL_DECL corresponding to identifier ID as a label.\n    Create one if none exists so far for the current function."}, {"sha": "8ec1fa70df617455c5f330b53003eaf76540134a", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "patch": "@@ -2087,7 +2087,7 @@ c99_block_end: /* empty */\n                 { if (flag_isoc99)\n \t\t    {\n \t\t      tree scope_stmt = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n-\t\t      $$ = poplevel (kept_level_p (), 0, 0);\n+\t\t      $$ = poplevel (KEEP_MAYBE, 0, 0);\n \t\t      SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmt))\n \t\t\t= SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmt))\n \t\t\t= $$;\n@@ -2137,7 +2137,7 @@ compstmt_start: '{' { compstmt_count++;\n compstmt_nostart: '}'\n \t\t{ $$ = convert (void_type_node, integer_zero_node); }\n \t| pushlevel maybe_label_decls compstmt_contents_nonempty '}' poplevel\n-\t\t{ $$ = poplevel (kept_level_p (), 1, 0);\n+\t\t{ $$ = poplevel (KEEP_MAYBE, 1, 0);\n \t\t  SCOPE_STMT_BLOCK (TREE_PURPOSE ($5))\n \t\t    = SCOPE_STMT_BLOCK (TREE_VALUE ($5))\n \t\t    = $$; }"}, {"sha": "876f116f60683d5f42f0ba4eb89756f1fa341949", "filename": "gcc/c-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "patch": "@@ -155,6 +155,11 @@ struct lang_type GTY(())\n    without prototypes.  */\n #define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_BINFO (NODE)\n \n+/* Values for the first parameter to poplevel.  */\n+#define KEEP_NO\t\t0\n+#define KEEP_YES\t1\n+#define KEEP_MAYBE\t2\n+\n \f\n /* in c-lang.c and objc-act.c */\n extern tree lookup_interface (tree);\n@@ -175,7 +180,6 @@ extern void gen_aux_info_record (tree, int, int, int);\n \n /* in c-decl.c */\n extern int global_bindings_p (void);\n-extern int kept_level_p (void);\n extern tree getdecls (void);\n extern void pushlevel (int);\n extern void insert_block (tree);\n@@ -192,6 +196,7 @@ extern void check_for_loop_decls (void);\n extern void clear_parm_order (void);\n extern int  complete_array_type (tree, tree, int);\n extern void declare_parm_level (void);\n+extern void undeclared_variable (tree);\n extern tree define_label (location_t, tree);\n extern void finish_decl (tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);\n@@ -213,7 +218,6 @@ extern void pop_label_level (void);\n extern void push_label_level (void);\n extern void push_parm_decl (tree);\n extern tree pushdecl_top_level (tree);\n-extern tree pushdecl_function_level (tree, tree);\n extern void pushtag (tree, tree);\n extern tree set_array_declarator_type (tree, tree, int);\n extern tree shadow_label (tree);"}, {"sha": "a0ec52f9b94c8e049f2633dd9ed09a706b259cf4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd51ef68e4ccc21469478d45d00a6c931e2a62e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9cd51ef68e4ccc21469478d45d00a6c931e2a62e", "patch": "@@ -49,9 +49,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    message within this initializer.  */\n static int missing_braces_mentioned;\n \n-/* 1 if we explained undeclared var errors.  */\n-static int undeclared_variable_notice;\n-\n static tree qualify_type (tree, tree);\n static int tagged_types_tu_compatible_p (tree, tree, int);\n static int comp_target_types (tree, tree, int);\n@@ -60,7 +57,6 @@ static int type_lists_compatible_p (tree, tree, int);\n static tree decl_constant_value_for_broken_optimization (tree);\n static tree default_function_array_conversion (tree);\n static tree lookup_field (tree, tree);\n-static void undeclared_variable (tree);\n static tree convert_arguments (tree, tree, tree, tree);\n static tree pointer_diff (tree, tree);\n static tree unary_complex_lvalue (enum tree_code, tree, int);\n@@ -1531,37 +1527,6 @@ build_array_ref (tree array, tree index)\n   }\n }\n \f\n-/* Issue an error message for a reference to an undeclared variable ID,\n-   including a reference to a builtin outside of function-call context.\n-   Arrange to suppress further errors for the same identifier.  */\n-static void\n-undeclared_variable (tree id)\n-{\n-  if (current_function_decl == 0)\n-    {\n-      error (\"`%s' undeclared here (not in a function)\",\n-\t     IDENTIFIER_POINTER (id));\n-      IDENTIFIER_SYMBOL_VALUE (id) = error_mark_node;\n-    }\n-  else\n-    {\n-      error (\"`%s' undeclared (first use in this function)\",\n-\t     IDENTIFIER_POINTER (id));\n-\n-      if (! undeclared_variable_notice)\n-\t{\n-\t  error (\"(Each undeclared identifier is reported only once\");\n-\t  error (\"for each function it appears in.)\");\n-\t  undeclared_variable_notice = 1;\n-\t}\n-\n-      /* Set IDENTIFIER_SYMBOL_VALUE (id) to error_mark_node\n-\t at function scope.  This suppresses further warnings\n-\t about this undeclared identifier in this function.  */\n-      pushdecl_function_level (error_mark_node, id);\n-    }\n-}\n-\n /* Build an external reference to identifier ID.  FUN indicates\n    whether this will be used for a function call.  */\n tree"}]}