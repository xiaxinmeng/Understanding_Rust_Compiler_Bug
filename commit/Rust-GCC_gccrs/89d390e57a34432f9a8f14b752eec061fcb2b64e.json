{"sha": "89d390e57a34432f9a8f14b752eec061fcb2b64e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkMzkwZTU3YTM0NDMyZjlhOGYxNGI3NTJlZWMwNjFmY2IyYjY0ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-23T12:47:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-23T12:47:54Z"}, "message": "re PR tree-optimization/65494 (Loop is not vectorized because of operand canonicalization.)\n\n2015-03-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65494\n\t* tree-vect-slp.c (vect_build_slp_tree): Do not (re-)allocate\n\tmatches here.\n\t(vect_analyze_slp_instance): But do that here, always and once.\n\n\t* gcc.dg/vect/pr65494.c: New testcase.\n\nFrom-SVN: r221592", "tree": {"sha": "6b21732ccd16640529efa5c8589edbb5d82d1f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b21732ccd16640529efa5c8589edbb5d82d1f92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d390e57a34432f9a8f14b752eec061fcb2b64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d390e57a34432f9a8f14b752eec061fcb2b64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d390e57a34432f9a8f14b752eec061fcb2b64e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d390e57a34432f9a8f14b752eec061fcb2b64e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c61928d098559fedd9032e4292740ba020103629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61928d098559fedd9032e4292740ba020103629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61928d098559fedd9032e4292740ba020103629"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "cb657f66fa8577ca01edfb1e59a7823a719e16af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89d390e57a34432f9a8f14b752eec061fcb2b64e", "patch": "@@ -1,3 +1,10 @@\n+2015-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65494\n+\t* tree-vect-slp.c (vect_build_slp_tree): Do not (re-)allocate\n+\tmatches here.\n+\t(vect_analyze_slp_instance): But do that here, always and once.\n+\n 2015-03-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* expmed.c (synth_mult): Fix comment about multiplying by T-1 and"}, {"sha": "cafb23b4b27e58b9d28534ddb5e779c307d4131a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89d390e57a34432f9a8f14b752eec061fcb2b64e", "patch": "@@ -1,3 +1,8 @@\n+2015-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65494\n+\t* gcc.dg/vect/pr65494.c: New testcase.\n+\n 2015-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/65238"}, {"sha": "753985f7e5055c50c908516c50cf420853a5067b", "filename": "gcc/testsuite/gcc.dg/vect/pr65494.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65494.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65494.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65494.c?ref=89d390e57a34432f9a8f14b752eec061fcb2b64e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\r\n+/* { dg-additional-options \"-Ofast -funroll-loops\" } */\r\n+\r\n+typedef unsigned char uchar;\r\n+typedef struct rgb_ {uchar r; uchar g; uchar b;} rgb;\r\n+#define N 512\r\n+rgb in[N], out[N];\r\n+float c[N];\r\n+void foo(int n)\r\n+{\r\n+  int i, j;\r\n+  for (i = 0; i < n; i++) //in and out are RGB byte arrays\r\n+    {\r\n+      float r = 0, g = 0, b = 0;\r\n+      for (j = 0; j < 5; j++)\r\n+\t{\r\n+\t  r += (float)in[i + j].r * c[j];\r\n+\t  g += (float)in[i + j].g * c[j];\r\n+\t  b += (float)in[i + j].b * c[j];\r\n+\t}\r\n+      out[i].r = (uchar)r;\r\n+      out[i].g = (uchar)g;\r\n+      out[i].b = (uchar)b;\r\n+    }\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" { target { vect_float && vect_intfloat_cvt } } } } */\r\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\r"}, {"sha": "c57a5caf68b87ca55b03c18bf1227ab5e40c4b51", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d390e57a34432f9a8f14b752eec061fcb2b64e/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=89d390e57a34432f9a8f14b752eec061fcb2b64e", "patch": "@@ -926,14 +926,9 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\t     bool *matches, unsigned *npermutes, unsigned *tree_size,\n \t\t     unsigned max_tree_size)\n {\n-  unsigned nops, i, this_npermutes = 0, this_tree_size = 0;\n+  unsigned nops, i, this_tree_size = 0;\n   gimple stmt;\n \n-  if (!matches)\n-    matches = XALLOCAVEC (bool, group_size);\n-  if (!npermutes)\n-    npermutes = &this_npermutes;\n-\n   matches[0] = false;\n \n   stmt = SLP_TREE_SCALAR_STMTS (*node)[0];\n@@ -1012,7 +1007,6 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  return false;\n \t}\n \n-      bool *matches = XALLOCAVEC (bool, group_size);\n       if (vect_build_slp_tree (loop_vinfo, bb_vinfo, &child,\n \t\t\t       group_size, max_nunits, loads,\n \t\t\t       vectorization_factor, matches,\n@@ -1637,9 +1631,11 @@ vect_analyze_slp_instance (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   loads.create (group_size);\n \n   /* Build the tree for the SLP instance.  */\n+  bool *matches = XALLOCAVEC (bool, group_size);\n+  unsigned npermutes = 0;\n   if (vect_build_slp_tree (loop_vinfo, bb_vinfo, &node, group_size,\n \t\t\t   &max_nunits, &loads,\n-\t\t\t   vectorization_factor, NULL, NULL, NULL,\n+\t\t\t   vectorization_factor, matches, &npermutes, NULL,\n \t\t\t   max_tree_size))\n     {\n       /* Calculate the unrolling factor based on the smallest type.  */"}]}