{"sha": "88a00ef7d65f16ce3851cf8ebcda756c97113cee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhMDBlZjdkNjVmMTZjZTM4NTFjZjhlYmNkYTc1NmM5NzExM2NlZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-06-28T10:28:09Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-06-28T10:28:09Z"}, "message": "genattr-common.c: New.\n\n\t* genattr-common.c: New.  Based on genattr.c.\n\t* Makefile.in (INSN_ATTR_H): Include insn-attr-common.h.\n\t(MOSTLYCLEANFILES): Add insn-attr-common.h.\n\t(opts.o): Update dependencies.\n\t(.PRECIOUS): Add insn-attr-common.h.\n\t(simple_rtl_generated_h): Add insn-attr-common.h.\n\t(build/genattr-common.o): New.\n\t(genprogrtl): Add attr-common.\n\t* genattr.c (main): Include insn-attr-common.h.  Don't generate\n\tdefinitions of DELAY_SLOTS or INSN_SCHEDULING.\n\t* opts.c: Include insn-attr-common.h instead of rtl.h and\n\tinsn-attr.h.\n\nFrom-SVN: r175579", "tree": {"sha": "b3eb1b6cdfe6199aca999ce1c33202fecb509335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3eb1b6cdfe6199aca999ce1c33202fecb509335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a00ef7d65f16ce3851cf8ebcda756c97113cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a00ef7d65f16ce3851cf8ebcda756c97113cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a00ef7d65f16ce3851cf8ebcda756c97113cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a00ef7d65f16ce3851cf8ebcda756c97113cee/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9633db4d2870935d07ea267637422b43f838977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9633db4d2870935d07ea267637422b43f838977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9633db4d2870935d07ea267637422b43f838977"}], "stats": {"total": 127, "additions": 114, "deletions": 13}, "files": [{"sha": "2e744e891688b9bcb21e53cddde4b12a951625c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88a00ef7d65f16ce3851cf8ebcda756c97113cee", "patch": "@@ -1,3 +1,18 @@\n+2011-06-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* genattr-common.c: New.  Based on genattr.c.\n+\t* Makefile.in (INSN_ATTR_H): Include insn-attr-common.h.\n+\t(MOSTLYCLEANFILES): Add insn-attr-common.h.\n+\t(opts.o): Update dependencies.\n+\t(.PRECIOUS): Add insn-attr-common.h.\n+\t(simple_rtl_generated_h): Add insn-attr-common.h.\n+\t(build/genattr-common.o): New.\n+\t(genprogrtl): Add attr-common.\n+\t* genattr.c (main): Include insn-attr-common.h.  Don't generate\n+\tdefinitions of DELAY_SLOTS or INSN_SCHEDULING.\n+\t* opts.c: Include insn-attr-common.h instead of rtl.h and\n+\tinsn-attr.h.\n+\n 2011-06-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config.gcc (tm_file): Add elfos.h and avr/elf.h for "}, {"sha": "0a2d9275ad60a80e6ee1d05842f742f85d7f89d2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=88a00ef7d65f16ce3851cf8ebcda756c97113cee", "patch": "@@ -965,7 +965,7 @@ GCC_H = gcc.h version.h $(DIAGNOSTIC_CORE_H)\n GGC_H = ggc.h gtype-desc.h statistics.h\n GGC_INTERNAL_H = ggc-internal.h $(GGC_H)\n TIMEVAR_H = timevar.h timevar.def\n-INSN_ATTR_H = insn-attr.h $(INSN_ADDR_H)\n+INSN_ATTR_H = insn-attr.h insn-attr-common.h $(INSN_ADDR_H)\n INSN_ADDR_H = $(srcdir)/insn-addr.h vecprim.h\n C_COMMON_H = c-family/c-common.h c-family/c-common.def \\\n \t$(SPLAY_TREE_H) $(CPPLIB_H) $(GGC_H) $(DIAGNOSTIC_CORE_H)\n@@ -1524,7 +1524,8 @@ BACKEND = main.o @TREEBROWSER@ libbackend.a libcommon-target.a libcommon.a \\\n \n MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n- insn-attr.h insn-attrtab.c insn-opinit.c insn-preds.c insn-constants.h \\\n+ insn-attr.h insn-attr-common.h insn-attrtab.c insn-opinit.c \\\n+ insn-preds.c insn-constants.h \\\n  tm-preds.h tm-constrs.h checksum-options \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n  genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n@@ -2848,8 +2849,8 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TM_H) $(RTL_H) \\\n-   $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(COMMON_TARGET_H) \\\n+   coretypes.h $(TM_H) \\\n+   $(DIAGNOSTIC_H) insn-attr-common.h intl.h $(COMMON_TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_H) $(OPTS_H) $(FLAGS_H) $(GGC_H) $(TREE_H) langhooks.h \\\n@@ -3589,7 +3590,7 @@ mips-tdump.o : mips-tdump.c $(CONFIG_H) $(SYSTEM_H) \\\n \n .PRECIOUS: insn-config.h insn-flags.h insn-codes.h insn-constants.h \\\n   insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \\\n-  insn-attr.h insn-attrtab.c insn-preds.c\n+  insn-attr.h insn-attr-common.h insn-attrtab.c insn-preds.c\n \n # Dependencies for the md file.  The first time through, we just assume\n # the md file itself and the generated dependency file (in order to get\n@@ -3646,7 +3647,8 @@ insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n # The \"; @true\" construct forces Make to recheck the timestamp on\n # the target file.\n \n-simple_rtl_generated_h\t= insn-attr.h insn-codes.h insn-config.h insn-flags.h\n+simple_rtl_generated_h\t= insn-attr.h insn-attr-common.h insn-codes.h \\\n+\t\t\t  insn-config.h insn-flags.h\n \n simple_rtl_generated_c\t= insn-attrtab.c insn-automata.c insn-emit.c \\\n \t\t\t  insn-extract.c insn-opinit.c insn-output.c \\\n@@ -3962,6 +3964,8 @@ build/gencondmd.o : \\\n # ...these are the programs themselves.\n build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n+build/genattr-common.o : genattr-common.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n+  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n   $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(GGC_H)\t\\\n   $(READ_MD_H) gensupport.h vecprim.h\n@@ -4021,7 +4025,7 @@ build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n # even if GCC is being compiled to run on some other machine.\n \n # All these programs use the RTL reader ($(BUILD_RTL)).\n-genprogrtl = attr attrtab automata codes conditions config emit \\\n+genprogrtl = attr attr-common attrtab automata codes conditions config emit \\\n \t     extract flags opinit output peep preds recog\n $(genprogrtl:%=build/gen%$(build_exeext)): $(BUILD_RTL)\n "}, {"sha": "bc7e1bba993e3f17971eaf5fdf7b29341d2977f9", "filename": "gcc/genattr-common.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2Fgenattr-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2Fgenattr-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr-common.c?ref=88a00ef7d65f16ce3851cf8ebcda756c97113cee", "patch": "@@ -0,0 +1,83 @@\n+/* Generate attribute information shared between driver and core\n+   compilers (insn-attr-common.h) from machine description.  Split out\n+   of genattr.c.\n+   Copyright (C) 1991, 1994, 1996, 1998, 1999, 2000, 2003, 2004, 2007, 2008,\n+   2010, 2011  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#include \"bconfig.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"errors.h\"\n+#include \"read-md.h\"\n+#include \"gensupport.h\"\n+\n+int\n+main (int argc, char **argv)\n+{\n+  rtx desc;\n+  bool have_delay = false;\n+  bool have_sched = false;\n+\n+  progname = \"genattr-common\";\n+\n+  if (!init_rtx_reader_args (argc, argv))\n+    return (FATAL_EXIT_CODE);\n+\n+  puts (\"/* Generated automatically by the program `genattr-common'\");\n+  puts (\"   from the machine description file `md'.  */\\n\");\n+  puts (\"#ifndef GCC_INSN_ATTR_COMMON_H\");\n+  puts (\"#define GCC_INSN_ATTR_COMMON_H\\n\");\n+\n+  /* Read the machine description.  */\n+\n+  while (1)\n+    {\n+      int line_no, insn_code_number;\n+\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n+\tbreak;\n+\n+      if (GET_CODE (desc) == DEFINE_DELAY)\n+        {\n+\t  if (!have_delay)\n+\t    {\n+\t      printf (\"#define DELAY_SLOTS\\n\");\n+\t      have_delay = true;\n+\t    }\n+\t}\n+      else if (GET_CODE (desc) == DEFINE_INSN_RESERVATION)\n+\t{\n+\t  if (!have_sched)\n+\t    {\n+\t      printf (\"#define INSN_SCHEDULING\\n\");\n+\t      have_sched = true;\n+\t    }\n+\t}\n+    }\n+  puts (\"\\n#endif /* GCC_INSN_ATTR_COMMON_H */\");\n+\n+  if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n+    return FATAL_EXIT_CODE;\n+\n+  return SUCCESS_EXIT_CODE;\n+}"}, {"sha": "5df138ff8b0128bca9c787265f5507c8cf31cca6", "filename": "gcc/genattr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=88a00ef7d65f16ce3851cf8ebcda756c97113cee", "patch": "@@ -1,6 +1,6 @@\n /* Generate attribute information (insn-attr.h) from machine description.\n    Copyright (C) 1991, 1994, 1996, 1998, 1999, 2000, 2003, 2004, 2007, 2008,\n-   2010  Free Software Foundation, Inc.\n+   2010, 2011  Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GCC.\n@@ -180,6 +180,8 @@ main (int argc, char **argv)\n   puts (\"#ifndef GCC_INSN_ATTR_H\");\n   puts (\"#define GCC_INSN_ATTR_H\\n\");\n \n+  puts (\"#include \\\"insn-attr-common.h\\\"\\n\");\n+\n   /* For compatibility, define the attribute `alternative', which is just\n      a reference to the variable `which_alternative'.  */\n \n@@ -204,7 +206,6 @@ main (int argc, char **argv)\n         {\n \t  if (! have_delay)\n \t    {\n-\t      printf (\"#define DELAY_SLOTS\\n\");\n \t      printf (\"extern int num_delay_slots (rtx);\\n\");\n \t      printf (\"extern int eligible_for_delay (rtx, int, rtx, int);\\n\\n\");\n \t      printf (\"extern int const_num_delay_slots (rtx);\\n\\n\");\n@@ -242,7 +243,6 @@ main (int argc, char **argv)\n \t= find_tune_attr (XEXP (VEC_index (rtx, reservations, 0), 2));\n       /* Output interface for pipeline hazards recognition based on\n \t DFA (deterministic finite state automata.  */\n-      printf (\"\\n#define INSN_SCHEDULING\\n\");\n       printf (\"\\n/* DFA based pipeline interface.  */\");\n       printf (\"\\n#ifndef AUTOMATON_ALTS\\n\");\n       printf (\"#define AUTOMATON_ALTS 0\\n\");"}, {"sha": "c3e7bc7e3e1b16df72041183a5c07ab479361f42", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a00ef7d65f16ce3851cf8ebcda756c97113cee/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=88a00ef7d65f16ce3851cf8ebcda756c97113cee", "patch": "@@ -23,17 +23,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"intl.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\" /* Needed by rtl.h and used for STACK_CHECK_BUILTIN,\n+#include \"tm.h\" /* For STACK_CHECK_BUILTIN,\n \t\t   STACK_CHECK_STATIC_BUILTIN, DEFAULT_GDB_EXTENSIONS,\n \t\t   DWARF2_DEBUGGING_INFO and DBX_DEBUGGING_INFO.  */\n-#include \"rtl.h\" /* Needed by insn-attr.h.  */\n #include \"opts.h\"\n #include \"options.h\"\n #include \"flags.h\"\n #include \"params.h\"\n #include \"diagnostic.h\"\n #include \"opts-diagnostic.h\"\n-#include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING and DELAY_SLOTS.  */\n+#include \"insn-attr-common.h\"\n #include \"common/common-target.h\"\n \n /* Parse the -femit-struct-debug-detailed option value"}]}