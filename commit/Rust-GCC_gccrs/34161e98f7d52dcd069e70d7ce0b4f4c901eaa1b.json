{"sha": "34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxNjFlOThmN2Q1MmRjZDA2OWU3MGQ3Y2UwYjRmNGM5MDFlYWExYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-03-02T13:25:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-03-02T13:25:10Z"}, "message": "re PR rtl-optimization/47925 (delete_trivially_dead_insns mishandles volatile mems)\n\ngcc/\n\tPR rtl-optimization/47925\n\t* cse.c (count_reg_usage): Don't ignore the SET_DEST of instructions\n\twith side effects.  Remove the more-specific check for volatile asms.\n\ngcc/testsuite/\n\tPR rtl-optimization/47925\n\t* gcc.c-torture/execute/pr47925.c: New test.\n\nFrom-SVN: r170613", "tree": {"sha": "ef8fb861ebff6b9fa90feb055763a53d2b76bb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8fb861ebff6b9fa90feb055763a53d2b76bb0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/comments", "author": null, "committer": null, "parents": [{"sha": "b2e2ea671c7653b299435ed4e96c50460bfad48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e2ea671c7653b299435ed4e96c50460bfad48b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e2ea671c7653b299435ed4e96c50460bfad48b"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "3f58172a070534620c3f105b3b703baf6b0b0301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "patch": "@@ -1,3 +1,9 @@\n+2011-03-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR rtl-optimization/47925\n+\t* cse.c (count_reg_usage): Don't ignore the SET_DEST of instructions\n+\twith side effects.  Remove the more-specific check for volatile asms.\n+\n 2011-03-02  Alan Modra  <amodra@gmail.com>\n \n \tPR target/47935"}, {"sha": "f7b477c60b1fa994f8d76cb0472e63956ffbb805", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "patch": "@@ -6575,8 +6575,9 @@ check_for_label_ref (rtx *rtl, void *data)\n    Don't count a usage of DEST, which is the SET_DEST of a SET which\n    contains X in its SET_SRC.  This is because such a SET does not\n    modify the liveness of DEST.\n-   DEST is set to pc_rtx for a trapping insn, which means that we must count\n-   uses of a SET_DEST regardless because the insn can't be deleted here.  */\n+   DEST is set to pc_rtx for a trapping insn, or for an insn with side effects.\n+   We must then count uses of a SET_DEST regardless, because the insn can't be\n+   deleted here.  */\n \n static void\n count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n@@ -6629,9 +6630,10 @@ count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n     case CALL_INSN:\n     case INSN:\n     case JUMP_INSN:\n-      /* We expect dest to be NULL_RTX here.  If the insn may trap, mark\n-         this fact by setting DEST to pc_rtx.  */\n-      if (insn_could_throw_p (x))\n+      /* We expect dest to be NULL_RTX here.  If the insn may trap,\n+\t or if it cannot be deleted due to side-effects, mark this fact\n+\t by setting DEST to pc_rtx.  */\n+      if (insn_could_throw_p (x) || side_effects_p (PATTERN (x)))\n \tdest = pc_rtx;\n       if (code == CALL_INSN)\n \tcount_reg_usage (CALL_INSN_FUNCTION_USAGE (x), counts, dest, incr);\n@@ -6671,10 +6673,6 @@ count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n       return;\n \n     case ASM_OPERANDS:\n-      /* If the asm is volatile, then this insn cannot be deleted,\n-\t and so the inputs *must* be live.  */\n-      if (MEM_VOLATILE_P (x))\n-\tdest = NULL_RTX;\n       /* Iterate over just the inputs, not the constraints as well.  */\n       for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n \tcount_reg_usage (ASM_OPERANDS_INPUT (x, i), counts, dest, incr);"}, {"sha": "ebe736c457b1cef08cd6c5dfc99a4aeedfa0d1d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "patch": "@@ -1,3 +1,8 @@\n+2011-03-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR rtl-optimization/47925\n+\t* gcc.c-torture/execute/pr47925.c: New test.\n+\n 2011-03-01  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/decltype25.C: New."}, {"sha": "89f54c13a55028b0d89d7f9304a382eef62d848a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr47925.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47925.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47925.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47925.c?ref=34161e98f7d52dcd069e70d7ce0b4f4c901eaa1b", "patch": "@@ -0,0 +1,24 @@\n+struct s { volatile struct s *next; };\n+\n+void __attribute__((noinline))\n+bar (int ignored, int n)\n+{\n+  asm volatile (\"\");\n+}\n+\n+int __attribute__((noinline))\n+foo (volatile struct s *ptr, int n)\n+{\n+  int i;\n+\n+  bar (0, n);\n+  for (i = 0; i < n; i++)\n+    ptr = ptr->next;\n+}\n+\n+int main (void)\n+{\n+  volatile struct s rec = { &rec };\n+  foo (&rec, 10);\n+  return 0;\n+}"}]}