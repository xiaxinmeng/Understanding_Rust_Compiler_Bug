{"sha": "b24e9c083093a9e1b1007933a184c02f7ff058db", "node_id": "C_kwDOANBUbNoAKGIyNGU5YzA4MzA5M2E5ZTFiMTAwNzkzM2ExODRjMDJmN2ZmMDU4ZGI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-09T16:43:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-09T16:43:19Z"}, "message": "i386: Call get_available_features for all CPUs with max_level >= 1 [PR100758]\n\nget_available_features doesn't depend on cpu_model2->__cpu_{family,model}\nand just sets stuff up based on CPUID leaf 1, or some extended ones,\nso I wonder why are we calling it separately for Intel, AMD and Zhaoxin\nand not for all other CPUs too?  I think various programs in the wild\nwhich aren't using __builtin_cpu_{is,supports} just check the various CPUID\nleafs and query bits in there, without blacklisting unknown CPU vendors,\nso I think even __builtin_cpu_supports (\"sse2\") etc. should be reliable\nif those VENDOR_{CENTAUR,CYRIX,NSC,OTHER} CPUs set those bits in CPUID leaf\n1 or some extended ones.  Calling it for all CPUs also means it can be\ninlined because there will be just a single caller.\n\nI have tested it on Intel and Martin tested it on AMD, but can't test it\non non-Intel/AMD; for Intel/AMD/Zhaoxin it should be really no change in\nbehavior.\n\n2023-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100758\n\t* common/config/i386/cpuinfo.h (get_zhaoxin_cpu): Formatting fixes.\n\t(cpu_indicator_init): Call get_available_features for all CPUs with\n\tmax_level >= 1, rather than just Intel, AMD or Zhaoxin.  Formatting\n\tfixes.", "tree": {"sha": "8d44735a8db72f0990865bfb6792708692bcb86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d44735a8db72f0990865bfb6792708692bcb86b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b24e9c083093a9e1b1007933a184c02f7ff058db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24e9c083093a9e1b1007933a184c02f7ff058db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24e9c083093a9e1b1007933a184c02f7ff058db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24e9c083093a9e1b1007933a184c02f7ff058db/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcca64d70ce91e29717fb70cff252639df6902be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcca64d70ce91e29717fb70cff252639df6902be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcca64d70ce91e29717fb70cff252639df6902be"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "5bde0cddb248de18434985451afb0a7418d1e328", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24e9c083093a9e1b1007933a184c02f7ff058db/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24e9c083093a9e1b1007933a184c02f7ff058db/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=b24e9c083093a9e1b1007933a184c02f7ff058db", "patch": "@@ -601,8 +601,8 @@ get_intel_cpu (struct __processor_model *cpu_model,\n \n static inline const char *\n get_zhaoxin_cpu (struct __processor_model *cpu_model,\n-\t\tstruct __processor_model2 *cpu_model2,\n-\t\tunsigned int *cpu_features2)\n+\t\t struct __processor_model2 *cpu_model2,\n+\t\t unsigned int *cpu_features2)\n {\n   const char *cpu = NULL;\n   unsigned int family = cpu_model2->__cpu_family;\n@@ -1016,6 +1016,10 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n   extended_model = (eax >> 12) & 0xf0;\n   extended_family = (eax >> 20) & 0xff;\n \n+  /* Find available features. */\n+  get_available_features (cpu_model, cpu_model2, cpu_features2,\n+\t\t\t  ecx, edx);\n+\n   if (vendor == signature_INTEL_ebx)\n     {\n       /* Adjust model and family for Intel CPUS. */\n@@ -1030,9 +1034,6 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n       cpu_model2->__cpu_family = family;\n       cpu_model2->__cpu_model = model;\n \n-      /* Find available features. */\n-      get_available_features (cpu_model, cpu_model2, cpu_features2,\n-\t\t\t      ecx, edx);\n       /* Get CPU type.  */\n       get_intel_cpu (cpu_model, cpu_model2, cpu_features2);\n       cpu_model->__cpu_vendor = VENDOR_INTEL;\n@@ -1049,32 +1050,24 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n       cpu_model2->__cpu_family = family;\n       cpu_model2->__cpu_model = model;\n \n-      /* Find available features. */\n-      get_available_features (cpu_model, cpu_model2, cpu_features2,\n-\t\t\t      ecx, edx);\n       /* Get CPU type.  */\n       get_amd_cpu (cpu_model, cpu_model2, cpu_features2);\n       cpu_model->__cpu_vendor = VENDOR_AMD;\n     }\n   else if (vendor == signature_CENTAUR_ebx && family < 0x07)\n     cpu_model->__cpu_vendor = VENDOR_CENTAUR;\n   else if (vendor == signature_SHANGHAI_ebx\n-\t\t|| vendor == signature_CENTAUR_ebx)\n+\t   || vendor == signature_CENTAUR_ebx)\n     {\n       /* Adjust model and family for ZHAOXIN CPUS.  */\n       if (family == 0x07)\n-\t{\n-\t  model += extended_model;\n-\t}\n+\tmodel += extended_model;\n \n       cpu_model2->__cpu_family = family;\n       cpu_model2->__cpu_model = model;\n \n-      /* Find available features.  */\n-      get_available_features (cpu_model, cpu_model2, cpu_features2,\n-\t\t\t\t  ecx, edx);\n       /* Get CPU type.  */\n-      get_zhaoxin_cpu (cpu_model, cpu_model2,cpu_features2);\n+      get_zhaoxin_cpu (cpu_model, cpu_model2, cpu_features2);\n       cpu_model->__cpu_vendor = VENDOR_ZHAOXIN;\n     }\n   else if (vendor == signature_CYRIX_ebx)"}]}