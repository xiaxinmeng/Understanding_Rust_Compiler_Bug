{"sha": "5c234cd7f4ce3463ea8a3403dca76654200fe547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyMzRjZDdmNGNlMzQ2M2VhOGEzNDAzZGNhNzY2NTQyMDBmZTU0Nw==", "commit": {"author": {"name": "David Ayers", "email": "d.ayers@inode.at", "date": "2004-06-21T01:50:18Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-06-21T01:50:18Z"}, "message": "objc-act.h (get_object_reference): Rename to get_protocol_reference.\n\n2004-06-20  David Ayers  <d.ayers@inode.at>\n\n\t* objc/objc-act.h (get_object_reference): Rename to\n\tget_protocol_reference.\n\t(super_type): Rename to objc_super_type.\n\t(selector_type): Rename to objc_selector_type.\n\t(id_type): Rename to objc_id_type.\n\t(instance_type): Rename to objc_instance_type.\n\t(protocol_type): Rename to objc_protocol_type.\n\t(IS_ID): Update reference to id_type.\n\t* objc/objc-act.c (get_object_reference): Rename to\n\tget_protocol_reference; add documentation; update references to\n\tid_type.\n\t(lookup_method_in_protocol_list): Rename class_meth to\n\tis_class; add documentation.\n\t(finish_message_expr): Rename is_class to class_tree.\n\t(synth_module_prologue, objc_is_object_ptr, objc_build_exc_ptr,\n\tnext_sjlj_build_try_catch_finally, objc_begin_catch_clause,\n\tbuild_next_objc_exception_stuff, get_arg_type_list,\n\tbuild_objc_method_call): Update references to id_type.\n\t(synth_module_prologue, build_objc_symtab_template,\n\tbuild_selector_reference_decl, build_selector,\n\tbuild_selector_translation_table, build_typed_selector_reference,\n\tget_arg_type_list, synth_self_and_ucmd_args, get_arg_type_list,\n\tsynth_self_and_ucmd_args): Update references to selector_type.\n\t(build_private_template, build_ivar_reference):\tUpdate references\n\tto instance_type.\n\t(synth_module_prologue, build_protocol_reference,\n\tbuild_protocol_expr, start_protocol): Update references to\n\tprotocol_type.\n\t(synth_module_prologue, get_arg_type_list, build_objc_method_call):\n\tUpdate references to super_type.\n\t* c-parse.in: (typespec_nonreserved_nonattr): Update\n\treferences to get_object_reference.\n\t* objc/objc-tree.def: Add C mode identifier sequence.\n\nFrom-SVN: r83425", "tree": {"sha": "0d7cb46db4ff78fbc71db1443a7372c14df61d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d7cb46db4ff78fbc71db1443a7372c14df61d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c234cd7f4ce3463ea8a3403dca76654200fe547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c234cd7f4ce3463ea8a3403dca76654200fe547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c234cd7f4ce3463ea8a3403dca76654200fe547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c234cd7f4ce3463ea8a3403dca76654200fe547/comments", "author": null, "committer": null, "parents": [{"sha": "6687b0fc2ac79ef97524f859d39d165f98578a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6687b0fc2ac79ef97524f859d39d165f98578a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6687b0fc2ac79ef97524f859d39d165f98578a5a"}], "stats": {"total": 208, "additions": 130, "deletions": 78}, "files": [{"sha": "c540c28e48b3cbf4b0865cc048a8558bfedb2d05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c234cd7f4ce3463ea8a3403dca76654200fe547", "patch": "@@ -1,3 +1,39 @@\n+2004-06-20  David Ayers  <d.ayers@inode.at>\n+\n+\t* objc/objc-act.h (get_object_reference): Rename to\n+\tget_protocol_reference.\n+\t(super_type): Rename to objc_super_type.\n+\t(selector_type): Rename to objc_selector_type.\n+\t(id_type): Rename to objc_id_type.\n+\t(instance_type): Rename to objc_instance_type.\n+\t(protocol_type): Rename to objc_protocol_type.\n+\t(IS_ID): Update reference to id_type.\n+\t* objc/objc-act.c (get_object_reference): Rename to\n+\tget_protocol_reference; add documentation; update references to\n+\tid_type.\n+\t(lookup_method_in_protocol_list): Rename class_meth to\n+\tis_class; add documentation.\n+\t(finish_message_expr): Rename is_class to class_tree.\n+\t(synth_module_prologue, objc_is_object_ptr, objc_build_exc_ptr,\n+\tnext_sjlj_build_try_catch_finally, objc_begin_catch_clause,\n+\tbuild_next_objc_exception_stuff, get_arg_type_list,\n+\tbuild_objc_method_call): Update references to id_type.\n+\t(synth_module_prologue, build_objc_symtab_template,\n+\tbuild_selector_reference_decl, build_selector,\n+\tbuild_selector_translation_table, build_typed_selector_reference,\n+\tget_arg_type_list, synth_self_and_ucmd_args, get_arg_type_list,\n+\tsynth_self_and_ucmd_args): Update references to selector_type.\n+\t(build_private_template, build_ivar_reference):\tUpdate references\n+\tto instance_type.\n+\t(synth_module_prologue, build_protocol_reference,\n+\tbuild_protocol_expr, start_protocol): Update references to\n+\tprotocol_type.\n+\t(synth_module_prologue, get_arg_type_list, build_objc_method_call):\n+\tUpdate references to super_type.\n+\t* c-parse.in: (typespec_nonreserved_nonattr): Update\n+\treferences to get_object_reference.\n+\t* objc/objc-tree.def: Add C mode identifier sequence.\n+\n 2004-06-20  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* loop-invariant.c: New file."}, {"sha": "176e97a7281c3765531f2754b1c5fa02623207db", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=5c234cd7f4ce3463ea8a3403dca76654200fe547", "patch": "@@ -1326,12 +1326,12 @@ typespec_nonreserved_nonattr:\n \t| CLASSNAME protocolrefs\n \t\t{ $$ = get_static_reference ($1, $2); }\n \t| OBJECTNAME protocolrefs\n-\t\t{ $$ = get_object_reference ($2); }\n+\t\t{ $$ = get_protocol_reference ($2); }\n \n /* Make \"<SomeProtocol>\" equivalent to \"id <SomeProtocol>\"\n    - nisse@lysator.liu.se */\n         | non_empty_protocolrefs\n-                { $$ = get_object_reference ($1); }\n+                { $$ = get_protocol_reference ($1); }\n @@end_ifobjc\n \t| typeof '(' expr ')'\n \t\t{ skip_evaluation--;"}, {"sha": "8176bd97d2a03c0b645732c9ddac2677c999e8fb", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 79, "deletions": 69, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5c234cd7f4ce3463ea8a3403dca76654200fe547", "patch": "@@ -538,9 +538,13 @@ define_decl (tree declarator, tree declspecs)\n   return decl;\n }\n \n+/* Return the first occurrence of a method declaration corresponding\n+   to sel_name in rproto_list.  Search rproto_list recursively.\n+   If is_class is 0, search for instance methods, otherwise for class\n+   methods.  */\n static tree\n lookup_method_in_protocol_list (tree rproto_list, tree sel_name,\n-\t\t\t\tint class_meth)\n+\t\t\t\tint is_class)\n {\n    tree rproto, p;\n    tree fnd = 0;\n@@ -551,13 +555,13 @@ lookup_method_in_protocol_list (tree rproto_list, tree sel_name,\n \n \tif (TREE_CODE (p) == PROTOCOL_INTERFACE_TYPE)\n \t  {\n-\t    if ((fnd = lookup_method (class_meth\n+\t    if ((fnd = lookup_method (is_class\n \t\t\t\t      ? PROTOCOL_CLS_METHODS (p)\n \t\t\t\t      : PROTOCOL_NST_METHODS (p), sel_name)))\n \t      ;\n \t    else if (PROTOCOL_LIST (p))\n \t      fnd = lookup_method_in_protocol_list (PROTOCOL_LIST (p),\n-\t\t\t\t\t\t    sel_name, class_meth);\n+\t\t\t\t\t\t    sel_name, is_class);\n \t  }\n \telse\n           {\n@@ -979,16 +983,17 @@ get_static_reference (tree interface, tree protocols)\n   return type;\n }\n \n+/* Return a declaration corresponding to a protocol list qualified 'id'. */\n tree\n-get_object_reference (tree protocols)\n+get_protocol_reference (tree protocols)\n {\n   tree type_decl = lookup_name (objc_id_id);\n   tree type;\n \n   if (type_decl && TREE_CODE (type_decl) == TYPE_DECL)\n     {\n       type = TREE_TYPE (type_decl);\n-      if (TYPE_MAIN_VARIANT (type) != id_type)\n+      if (TYPE_MAIN_VARIANT (type) != objc_id_type)\n \twarning (\"unexpected type for `id' (%s)\",\n \t\t gen_declaration (type, errbuf));\n     }\n@@ -1139,27 +1144,26 @@ synth_module_prologue (void)\n \n   objc_object_reference = xref_tag (RECORD_TYPE, objc_object_id);\n \n-  id_type = build_pointer_type (objc_object_reference);\n+  objc_id_type = build_pointer_type (objc_object_reference);\n \n   objc_id_id = get_identifier (TYPE_ID);\n   objc_class_id = get_identifier (TAG_CLASS);\n \n   objc_class_type = build_pointer_type (xref_tag (RECORD_TYPE, objc_class_id));\n   temp_type = get_identifier (PROTOCOL_OBJECT_CLASS_NAME);\n   objc_declare_class (tree_cons (NULL_TREE, temp_type, NULL_TREE));\n-  protocol_type = build_pointer_type (xref_tag (RECORD_TYPE,\n-                                temp_type));\n+  objc_protocol_type = build_pointer_type (xref_tag (RECORD_TYPE, temp_type));\n \n   /* Declare type of selector-objects that represent an operation name.  */\n \n   if (flag_next_runtime)\n     /* `struct objc_selector *' */\n-    selector_type\n+    objc_selector_type\n       = build_pointer_type (xref_tag (RECORD_TYPE,\n \t\t\t\t      get_identifier (TAG_SELECTOR)));\n   else\n     /* `const struct objc_selector *' */\n-    selector_type\n+    objc_selector_type\n       = build_pointer_type\n \t(build_qualified_type (xref_tag (RECORD_TYPE,\n \t\t\t\t\t get_identifier (TAG_SELECTOR)),\n@@ -1168,8 +1172,8 @@ synth_module_prologue (void)\n   /* Declare receiver type used for dispatching messages to 'super'.  */\n \n   /* `struct objc_super *' */\n-  super_type = build_pointer_type (xref_tag (RECORD_TYPE,\n-\t\t\t\t\t  get_identifier (TAG_SUPER)));\n+  objc_super_type = build_pointer_type (xref_tag (RECORD_TYPE,\n+\t\t\t\t\t\t  get_identifier (TAG_SUPER)));\n \n   if (flag_next_runtime)\n     {\n@@ -1183,9 +1187,10 @@ synth_module_prologue (void)\n       /* id objc_msgSend_stret (id, SEL, ...); */\n       /* id objc_msgSendNonNil_stret (id, SEL, ...); */\n       temp_type\n-\t= build_function_type (id_type,\n-\t\t\t       tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t  tree_cons (NULL_TREE, selector_type,\n+\t= build_function_type (objc_id_type,\n+\t\t\t       tree_cons (NULL_TREE, objc_id_type,\n+\t\t\t\t\t  tree_cons (NULL_TREE, \n+\t\t\t\t\t\t     objc_selector_type,\n \t\t\t\t\t\t     NULL_TREE)));\n       umsg_decl = builtin_function (TAG_MSGSEND,\n \t\t\t\t    temp_type, 0, NOT_BUILT_IN,\n@@ -1203,9 +1208,10 @@ synth_module_prologue (void)\n       /* id objc_msgSendSuper (struct objc_super *, SEL, ...); */\n       /* id objc_msgSendSuper_stret (struct objc_super *, SEL, ...); */\n       temp_type\n-\t= build_function_type (id_type,\n-\t\t\t       tree_cons (NULL_TREE, super_type,\n-\t\t\t\t\t  tree_cons (NULL_TREE, selector_type,\n+\t= build_function_type (objc_id_type,\n+\t\t\t       tree_cons (NULL_TREE, objc_super_type,\n+\t\t\t\t\t  tree_cons (NULL_TREE,\n+\t\t\t\t\t\t     objc_selector_type,\n \t\t\t\t\t\t     NULL_TREE)));\n       umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n \t\t\t\t\t  temp_type, 0, NOT_BUILT_IN,\n@@ -1221,16 +1227,18 @@ synth_module_prologue (void)\n       /* typedef id (*IMP)(id, SEL, ...); */\n       tree IMP_type\n \t= build_pointer_type\n-\t  (build_function_type (id_type,      \n-\t\t\t\ttree_cons (NULL_TREE, id_type,      \n-\t\t\t\t\t   tree_cons (NULL_TREE, selector_type,      \n+\t  (build_function_type (objc_id_type,      \n+\t\t\t\ttree_cons (NULL_TREE, objc_id_type,      \n+\t\t\t\t\t   tree_cons (NULL_TREE,\n+\t\t\t\t\t\t      objc_selector_type,      \n \t\t\t\t\t\t      NULL_TREE))));      \n \n       /* IMP objc_msg_lookup (id, SEL); */\n       temp_type\n         = build_function_type (IMP_type,\n-                               tree_cons (NULL_TREE, id_type,\n-                                          tree_cons (NULL_TREE, selector_type,\n+                               tree_cons (NULL_TREE, objc_id_type,\n+                                          tree_cons (NULL_TREE,\n+\t\t\t\t\t\t     objc_selector_type,\n                                                      void_list_node)));\n       umsg_decl = builtin_function (TAG_MSGSEND,\n \t\t\t\t    temp_type, 0, NOT_BUILT_IN,\n@@ -1239,8 +1247,9 @@ synth_module_prologue (void)\n       /* IMP objc_msg_lookup_super (struct objc_super *, SEL); */\n       temp_type\n         = build_function_type (IMP_type,\n-                               tree_cons (NULL_TREE, super_type,\n-                                          tree_cons (NULL_TREE, selector_type,\n+                               tree_cons (NULL_TREE, objc_super_type,\n+                                          tree_cons (NULL_TREE,\n+\t\t\t\t\t\t     objc_selector_type,\n                                                      void_list_node)));\n       umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n \t\t\t\t\t  temp_type, 0, NOT_BUILT_IN,\n@@ -1249,7 +1258,7 @@ synth_module_prologue (void)\n \n   /* id objc_getClass (const char *); */\n \n-  temp_type = build_function_type (id_type,\n+  temp_type = build_function_type (objc_id_type,\n \t\t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t\t      const_string_type_node,\n \t\t\t\t\t      void_list_node));\n@@ -1288,7 +1297,7 @@ synth_module_prologue (void)\n \t  debug_hooks = save_hooks;\n \t}\n       else\n-\ttemp_type = build_array_type (selector_type, NULL_TREE);\n+\ttemp_type = build_array_type (objc_selector_type, NULL_TREE);\n \n       layout_type (temp_type);\n       UOBJC_SELECTOR_TABLE_decl\n@@ -1558,7 +1567,7 @@ build_objc_symtab_template (void)\n   /* SEL *refs; */\n \n   field_decl = create_builtin_decl (FIELD_DECL,\n-\t\t\t\t    build_pointer_type (selector_type),\n+\t\t\t\t    build_pointer_type (objc_selector_type),\n \t\t\t\t    \"refs\");\n   chainon (field_decl_chain, field_decl);\n \n@@ -2086,7 +2095,7 @@ build_selector_reference_decl (void)\n \n   ident = get_identifier (buf);\n \n-  decl = build_decl (VAR_DECL, ident, selector_type);\n+  decl = build_decl (VAR_DECL, ident, objc_selector_type);\n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 0;\n   TREE_USED (decl) = 1;\n@@ -2108,7 +2117,7 @@ build_selector (tree ident)\n   if (flag_typed_selectors)\n     return expr;\n   else\n-    return build_c_cast (selector_type, expr); /* cast! */\n+    return build_c_cast (objc_selector_type, expr); /* cast! */\n }\n \n static void\n@@ -2158,7 +2167,7 @@ build_selector_translation_table (void)\n \t  sc_spec = build_tree_list (NULL_TREE, ridpointers[(int) RID_STATIC]);\n \n \t  /* static SEL _OBJC_SELECTOR_REFERENCES_n = ...; */\n-\t  decl_specs = tree_cons (NULL_TREE, selector_type, sc_spec);\n+\t  decl_specs = tree_cons (NULL_TREE, objc_selector_type, sc_spec);\n \n \t  var_decl = name;\n \n@@ -2249,7 +2258,7 @@ build_typed_selector_reference (tree ident, tree prototype)\n \t\t\t build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n \t\t\t\t\t  build_int_2 (index, 0)),\n \t\t\t 1);\n-  return build_c_cast (selector_type, expr);\n+  return build_c_cast (objc_selector_type, expr);\n }\n \n static tree\n@@ -2558,8 +2567,8 @@ objc_is_object_ptr (tree type)\n   if (!type || TREE_CODE (type) != POINTER_TYPE)\n     return 0;\n   /* NB: This function may be called before the ObjC front-end has\n-     been initialized, in which case ID_TYPE will be NULL.  */\n-  if (id_type && type && TYPE_P (type)\n+     been initialized, in which case OBJC_ID_TYPE will be NULL.  */\n+  if (objc_id_type && type && TYPE_P (type)\n       && (IS_ID (type)\n \t  || TREE_TYPE (type) == TREE_TYPE (objc_class_type)))\n     return type;\n@@ -2773,13 +2782,13 @@ objc_build_exc_ptr (void)\n       tree var = cur_try_context->caught_decl;\n       if (!var)\n \t{\n-\t  var = objc_create_temporary_var (id_type);\n+\t  var = objc_create_temporary_var (objc_id_type);\n \t  cur_try_context->caught_decl = var;\n \t}\n       return var;\n     }\n   else\n-    return build (EXC_PTR_EXPR, id_type);\n+    return build (EXC_PTR_EXPR, objc_id_type);\n }\n \n /* Build \"objc_exception_try_exit(&_stack)\".  */\n@@ -2959,7 +2968,7 @@ next_sjlj_build_try_catch_finally (void)\n   stack_decl = objc_create_temporary_var (t);\n   cur_try_context->stack_decl = stack_decl;\n \n-  rethrow_decl = objc_create_temporary_var (id_type);\n+  rethrow_decl = objc_create_temporary_var (objc_id_type);\n   cur_try_context->rethrow_decl = rethrow_decl;\n   TREE_THIS_VOLATILE (rethrow_decl) = 1;\n   TREE_CHAIN (rethrow_decl) = stack_decl;\n@@ -2971,7 +2980,7 @@ next_sjlj_build_try_catch_finally (void)\n \n   /* Initialize rethrow_decl.  */\n   t = build (MODIFY_EXPR, void_type_node, rethrow_decl,\n-\t     convert (id_type, null_pointer_node));\n+\t     convert (objc_id_type, null_pointer_node));\n   annotate_with_locus (t, cur_try_context->try_locus);\n   append_to_statement_list (t, &BIND_EXPR_BODY (bind));\n \n@@ -3091,7 +3100,7 @@ objc_begin_catch_clause (tree parm)\n \t      warning (\"exception of type %<%T%> will be caught\",\n \t\t       TREE_TYPE (type));\n \t      warning (\"%H   by earlier handler for %<%T%>\",\n-\t\t       EXPR_LOCUS (stmt), TREE_TYPE (t ? t : id_type));\n+\t\t       EXPR_LOCUS (stmt), TREE_TYPE (t ? t : objc_id_type));\n \t      break;\n \t    }\n \t}\n@@ -3291,7 +3300,7 @@ build_next_objc_exception_stuff (void)\n \n   /* id objc_exception_extract(struct _objc_exception_data *); */\n   temp_type\n-    = build_function_type (id_type,\n+    = build_function_type (objc_id_type,\n \t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t      build_pointer_type (objc_exception_data_template),\n \t\t\t\t      void_list_node));\n@@ -3310,10 +3319,11 @@ build_next_objc_exception_stuff (void)\n     = builtin_function (TAG_EXCEPTIONTRYEXIT, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   /* int objc_exception_match(id, id); */\n-  temp_type = build_function_type (integer_type_node,\n-\t\t\t\t   tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t      tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t\t\t void_list_node)));\n+  temp_type \n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, objc_id_type,\n+\t\t\t\t      tree_cons (NULL_TREE, objc_id_type,\n+\t\t\t\t\t\t void_list_node)));\n   objc_exception_match_decl\n     = builtin_function (TAG_EXCEPTIONMATCH, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n \t\n@@ -3333,7 +3343,7 @@ build_objc_exception_stuff (void)\n   /* void objc_sync_enter(id); */\n   /* void objc_sync_exit(id); */\n   temp_type = build_function_type (void_type_node,\n-\t\t\t\t   tree_cons (NULL_TREE, id_type,\n+\t\t\t\t   tree_cons (NULL_TREE, objc_id_type,\n \t\t\t\t\t      void_list_node));\n   objc_exception_throw_decl\n     = builtin_function (TAG_EXCEPTIONTHROW, temp_type, 0, NOT_BUILT_IN, NULL,\n@@ -3375,7 +3385,7 @@ build_private_template (tree class)\n       TREE_STATIC_TEMPLATE (uprivate_record) = 1;\n     }\n \n-  instance_type\n+  objc_instance_type\n     = groktypename (build_tree_list (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t      uprivate_record),\n \t\t\t\t     build1 (INDIRECT_REF, NULL_TREE,\n@@ -5416,14 +5426,14 @@ get_arg_type_list (tree meth, int context, int superflag)\n \n   /* Receiver type.  */\n   if (flag_next_runtime && superflag)\n-    arglist = build_tree_list (NULL_TREE, super_type);\n+    arglist = build_tree_list (NULL_TREE, objc_super_type);\n   else if (context == METHOD_DEF)\n     arglist = build_tree_list (NULL_TREE, TREE_TYPE (self_decl));\n   else\n-    arglist = build_tree_list (NULL_TREE, id_type);\n+    arglist = build_tree_list (NULL_TREE, objc_id_type);\n \n   /* Selector type - will eventually change to `int'.  */\n-  chainon (arglist, build_tree_list (NULL_TREE, selector_type));\n+  chainon (arglist, build_tree_list (NULL_TREE, objc_selector_type));\n \n   /* No actual method prototype given -- assume that remaining arguments\n      are `...'.  */\n@@ -5652,7 +5662,7 @@ tree\n finish_message_expr (tree receiver, tree sel_name, tree method_params)\n {\n   tree method_prototype = NULL_TREE, rprotos = NULL_TREE, rtype;\n-  tree selector, retval, is_class;\n+  tree selector, retval, class_tree;\n   int self, super, have_cast;\n \n   /* Extract the receiver of the message, as well as its type\n@@ -5673,14 +5683,14 @@ finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \n   /* If the receiver is a class object, retrieve the corresponding\n      @interface, if one exists. */\n-  is_class = receiver_is_class_object (receiver, self, super);\n+  class_tree = receiver_is_class_object (receiver, self, super);\n \n   /* Now determine the receiver type (if an explicit cast has not been\n      provided).  */\n   if (!have_cast)\n     {\n-      if (is_class)\n-\trtype = lookup_interface (is_class);\n+      if (class_tree)\n+\trtype = lookup_interface (class_tree);\n       /* Handle `self' and `super'.  */\n       else if (super)\n \t{\n@@ -5703,23 +5713,23 @@ finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t|| TREE_TYPE (rtype) == TREE_TYPE (objc_class_type))\n     {\n       if (!rtype)\n-\trtype = xref_tag (RECORD_TYPE, is_class);\n+\trtype = xref_tag (RECORD_TYPE, class_tree);\n       else if (IS_ID (rtype))\n \t{\n \t  rprotos = TYPE_PROTOCOL_LIST (rtype);\n \t  rtype = NULL_TREE;\n \t}\n       else\n-\tis_class = TYPE_NAME (rtype) = get_identifier (\"Class\");\n+\tclass_tree = TYPE_NAME (rtype) = get_identifier (\"Class\");\n \n       if (rprotos)\n \tmethod_prototype\n \t  = lookup_method_in_protocol_list (rprotos, sel_name,\n-\t\t\t\t\t    is_class != NULL_TREE);\n+\t\t\t\t\t    class_tree != NULL_TREE);\n       if (!method_prototype && !rprotos)\n \tmethod_prototype\n \t  = lookup_method_in_hash_lists (sel_name,\n-\t\t\t\t\t is_class != NULL_TREE);\n+\t\t\t\t\t class_tree != NULL_TREE);\n     }\n   else\n     {\n@@ -5751,7 +5761,7 @@ finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t     in the published @interface for the class (and its\n \t     superclasses). */\n \t  method_prototype\n-\t    = lookup_method_static (rtype, sel_name, is_class != NULL_TREE);\n+\t    = lookup_method_static (rtype, sel_name, class_tree != NULL_TREE);\n \n \t  /* If the method was not found in the @interface, it may still\n \t     exist locally as part of the @implementation.  */\n@@ -5760,7 +5770,7 @@ finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t\t== OBJC_TYPE_NAME (rtype))\t\t\t\n \t    method_prototype\n \t      = lookup_method\n-\t\t((is_class\n+\t\t((class_tree\n \t\t  ? CLASS_CLS_METHODS (objc_implementation_context)\n \t\t  : CLASS_NST_METHODS (objc_implementation_context)),\n \t\t  sel_name);\n@@ -5770,7 +5780,7 @@ finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t  if (!method_prototype && rprotos)\n \t    method_prototype\n \t      = lookup_method_in_protocol_list (rprotos, sel_name,\n-\t\t\t\t\t\tis_class != NULL_TREE);\n+\t\t\t\t\t\tclass_tree != NULL_TREE);\n \t}\n       else\n \t{\n@@ -5787,11 +5797,11 @@ finish_message_expr (tree receiver, tree sel_name, tree method_params)\n       if (rtype)\n \twarning (\"`%s' may not respond to `%c%s'\",\n \t\t IDENTIFIER_POINTER (OBJC_TYPE_NAME (rtype)),\n-\t\t (is_class ? '+' : '-'),\n+\t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n       if (rprotos)\n \twarning (\"`%c%s' not implemented by protocol(s)\",\n-\t\t (is_class ? '+' : '-'),\n+\t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n       if (!warn_missing_methods)\n \t{\n@@ -5838,15 +5848,15 @@ build_objc_method_call (int super_flag, tree method_prototype,\n \t\t (!flag_next_runtime || flag_nil_receivers\n \t\t  ? umsg_decl\n \t\t  : umsg_nonnil_decl));\n-  tree rcv_p = (super_flag ? super_type : id_type);\n+  tree rcv_p = (super_flag ? objc_super_type : objc_id_type);\n \n   /* If a prototype for the method to be called exists, then cast\n      the sender's return type and arguments to match that of the method.\n      Otherwise, leave sender as is.  */\n   tree ret_type\n     = (method_prototype\n        ? groktypename (TREE_TYPE (method_prototype))\n-       : id_type);\n+       : objc_id_type);\n   tree sender_cast\n     = build_pointer_type\n       (build_function_type\n@@ -5957,9 +5967,9 @@ build_protocol_expr (tree protoname)\n \n   expr = build_unary_op (ADDR_EXPR, PROTOCOL_FORWARD_DECL (p), 0);\n \n-  /* ??? Ideally we'd build the reference with protocol_type directly,\n+  /* ??? Ideally we'd build the reference with objc_protocol_type directly,\n      if we have it, rather than converting it here.  */\n-  expr = convert (protocol_type, expr);\n+  expr = convert (objc_protocol_type, expr);\n \n   /* The @protocol() expression is being compiled into a pointer to a\n      statically allocated instance of the Protocol class.  To become\n@@ -5977,7 +5987,7 @@ build_protocol_expr (tree protoname)\n   if (! flag_next_runtime)\n     {\n       /* This type is a struct containing the fields of a Protocol\n-        object.  (Cfr. protocol_type instead is the type of a pointer\n+        object.  (Cfr. objc_protocol_type instead is the type of a pointer\n         to such a struct).  */\n       tree protocol_struct_type = xref_tag\n        (RECORD_TYPE, get_identifier (PROTOCOL_OBJECT_CLASS_NAME));\n@@ -6090,7 +6100,7 @@ build_ivar_reference (tree id)\n \t paradigm.  */\n       warning (\"instance variable `%s' accessed in class method\",\n \t       IDENTIFIER_POINTER (id));\n-      TREE_TYPE (self_decl) = instance_type; /* cast */\n+      TREE_TYPE (self_decl) = objc_instance_type; /* cast */\n     }\n \n   return build_component_ref (build_indirect_ref (self_decl, \"->\"), id);\n@@ -7500,7 +7510,7 @@ synth_self_and_ucmd_args (void)\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, self_id)),\n \t\t   unused_list));\n \n-  decl_specs = build_tree_list (NULL_TREE, TREE_TYPE (selector_type));\n+  decl_specs = build_tree_list (NULL_TREE, TREE_TYPE (objc_selector_type));\n   push_parm_decl (build_tree_list\n \t\t  (build_tree_list (decl_specs,\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, ucmd_id)),"}, {"sha": "ab2ea08fd1e2d91e912e0d2074a01657fa0d767f", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=5c234cd7f4ce3463ea8a3403dca76654200fe547", "patch": "@@ -57,7 +57,7 @@ void objc_clear_super_receiver (void);\n tree get_class_ivars_from_name (tree);\n tree get_class_reference (tree);\n tree get_static_reference (tree, tree);\n-tree get_object_reference (tree);\n+tree get_protocol_reference (tree);\n tree build_message_expr (tree);\n tree finish_message_expr (tree, tree, tree);\n tree build_selector_expr (tree);\n@@ -308,17 +308,17 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define objc_get_meta_class_decl\t\t\t\\\n \t\t\t\tobjc_global_trees[OCTI_GET_MCLASS_DECL]\n \n-#define super_type\t\tobjc_global_trees[OCTI_SUPER_TYPE]\n-#define selector_type\t\tobjc_global_trees[OCTI_SEL_TYPE]\n-#define id_type\t\t\tobjc_global_trees[OCTI_ID_TYPE]\n+#define objc_super_type\t\tobjc_global_trees[OCTI_SUPER_TYPE]\n+#define objc_selector_type\tobjc_global_trees[OCTI_SEL_TYPE]\n+#define objc_id_type\t\tobjc_global_trees[OCTI_ID_TYPE]\n #define objc_class_type\t\tobjc_global_trees[OCTI_CLS_TYPE]\n-#define instance_type\t\tobjc_global_trees[OCTI_NST_TYPE]\n-#define protocol_type\t\tobjc_global_trees[OCTI_PROTO_TYPE]\n+#define objc_instance_type\tobjc_global_trees[OCTI_NST_TYPE]\n+#define objc_protocol_type\tobjc_global_trees[OCTI_PROTO_TYPE]\n \n /* Type checking macros.  */\n \n #define IS_ID(TYPE) \\\n-  (TYPE_MAIN_VARIANT (TYPE) == TYPE_MAIN_VARIANT (id_type))\n+  (TYPE_MAIN_VARIANT (TYPE) == TYPE_MAIN_VARIANT (objc_id_type))\n #define IS_PROTOCOL_QUALIFIED_ID(TYPE) \\\n   (IS_ID (TYPE) && TYPE_PROTOCOL_LIST (TYPE))\n #define IS_SUPER(TYPE) \\"}, {"sha": "ea88d1eec338ddd4ee77974a07945dbeaa2c281e", "filename": "gcc/objc/objc-tree.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fobjc%2Fobjc-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c234cd7f4ce3463ea8a3403dca76654200fe547/gcc%2Fobjc%2Fobjc-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-tree.def?ref=5c234cd7f4ce3463ea8a3403dca76654200fe547", "patch": "@@ -37,3 +37,9 @@ DEFTREECODE (CLASS_METHOD_DECL, \"class_method_decl\", 'd', 0)\n /* Objective-C expressions.  */\n DEFTREECODE (MESSAGE_SEND_EXPR, \"message_send_expr\", 'e', 3)\n DEFTREECODE (CLASS_REFERENCE_EXPR, \"class_reference_expr\", 'e', 1)\n+\n+/*\n+Local variables:\n+mode:c\n+End:\n+*/"}]}