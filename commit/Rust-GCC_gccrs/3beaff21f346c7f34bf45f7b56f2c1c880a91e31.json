{"sha": "3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlYWZmMjFmMzQ2YzdmMzRiZjQ1ZjdiNTZmMmMxYzg4MGE5MWUzMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-14T20:25:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-14T20:25:40Z"}, "message": "rtl.h (classify_insn): Declare.\n\ngcc/\n\t* rtl.h (classify_insn): Declare.\n\t* emit-rtl.c (classify_insn): Move to...\n\t* rtl.c: ...here and add generator support.\n\t* gensupport.h (get_emit_function, needs_barrier_p): Declare.\n\t* gensupport.c (get_emit_function, needs_barrier_p): New functions.\n\t* genemit.c (gen_emit_seq): New function.\n\t(gen_expand, gen_split): Use it.\n\nFrom-SVN: r224470", "tree": {"sha": "5c9473ab1cc9660cc825b2a8b95569ab4d1e7cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9473ab1cc9660cc825b2a8b95569ab4d1e7cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b25b4ed2b7010c0d36474b4caf3f7fe1a094095c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25b4ed2b7010c0d36474b4caf3f7fe1a094095c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25b4ed2b7010c0d36474b4caf3f7fe1a094095c"}], "stats": {"total": 231, "additions": 114, "deletions": 117}, "files": [{"sha": "c9b156f2e8d165307a0e2dc3d5466af98e0e363a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -1,3 +1,13 @@\n+2015-06-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (classify_insn): Declare.\n+\t* emit-rtl.c (classify_insn): Move to...\n+\t* rtl.c: ...here and add generator support.\n+\t* gensupport.h (get_emit_function, needs_barrier_p): Declare.\n+\t* gensupport.c (get_emit_function, needs_barrier_p): New functions.\n+\t* genemit.c (gen_emit_seq): New function.\n+\t(gen_expand, gen_split): Use it.\n+\n 2015-06-13  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* tree.c (make_vector_stat): Fix comment to state that the"}, {"sha": "e64ca4ceb4c27483804937c4e8e18cfa832017da", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -5304,43 +5304,6 @@ set_dst_reg_note (rtx insn, enum reg_note kind, rtx datum, rtx dst)\n   return NULL_RTX;\n }\n \f\n-/* Return an indication of which type of insn should have X as a body.\n-   The value is CODE_LABEL, INSN, CALL_INSN or JUMP_INSN.  */\n-\n-static enum rtx_code\n-classify_insn (rtx x)\n-{\n-  if (LABEL_P (x))\n-    return CODE_LABEL;\n-  if (GET_CODE (x) == CALL)\n-    return CALL_INSN;\n-  if (ANY_RETURN_P (x))\n-    return JUMP_INSN;\n-  if (GET_CODE (x) == SET)\n-    {\n-      if (SET_DEST (x) == pc_rtx)\n-\treturn JUMP_INSN;\n-      else if (GET_CODE (SET_SRC (x)) == CALL)\n-\treturn CALL_INSN;\n-      else\n-\treturn INSN;\n-    }\n-  if (GET_CODE (x) == PARALLEL)\n-    {\n-      int j;\n-      for (j = XVECLEN (x, 0) - 1; j >= 0; j--)\n-\tif (GET_CODE (XVECEXP (x, 0, j)) == CALL)\n-\t  return CALL_INSN;\n-\telse if (GET_CODE (XVECEXP (x, 0, j)) == SET\n-\t\t && SET_DEST (XVECEXP (x, 0, j)) == pc_rtx)\n-\t  return JUMP_INSN;\n-\telse if (GET_CODE (XVECEXP (x, 0, j)) == SET\n-\t\t && GET_CODE (SET_SRC (XVECEXP (x, 0, j))) == CALL)\n-\t  return CALL_INSN;\n-    }\n-  return INSN;\n-}\n-\n /* Emit the rtl pattern X as an appropriate kind of insn.\n    If X is a label, it is simply added into the insn chain.  */\n "}, {"sha": "15ec08192ba5c1613e291861590607859f447146", "filename": "gcc/genemit.c", "status": "modified", "additions": 19, "deletions": 80, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -268,6 +268,23 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n     }\n   printf (\")\");\n }\n+\n+/* Output code to emit the instruction patterns in VEC, with each element\n+   becoming a separate instruction.  USED is as for gen_exp.  */\n+\n+static void\n+gen_emit_seq (rtvec vec, char *used)\n+{\n+  for (int i = 0, len = GET_NUM_ELEM (vec); i < len; ++i)\n+    {\n+      rtx next = RTVEC_ELT (vec, i);\n+      printf (\"  %s (\", get_emit_function (next));\n+      gen_exp (next, DEFINE_EXPAND, used);\n+      printf (\");\\n\");\n+      if (needs_barrier_p (next))\n+\tprintf (\"  emit_barrier ();\");\n+    }\n+}\n \f\n /* Generate the `gen_...' function for a DEFINE_INSN.  */\n \n@@ -475,49 +492,8 @@ gen_expand (rtx expand)\n       printf (\"  }\\n\");\n     }\n \n-  /* Output code to construct the rtl for the instruction bodies.\n-     Use emit_insn to add them to the sequence being accumulated.\n-     But don't do this if the user's code has set `no_more' nonzero.  */\n-\n   used = XCNEWVEC (char, stats.num_operand_vars);\n-\n-  for (i = 0; i < XVECLEN (expand, 1); i++)\n-    {\n-      rtx next = XVECEXP (expand, 1, i);\n-      if ((GET_CODE (next) == SET && GET_CODE (SET_DEST (next)) == PC)\n-\t  || (GET_CODE (next) == PARALLEL\n-\t      && ((GET_CODE (XVECEXP (next, 0, 0)) == SET\n-\t\t   && GET_CODE (SET_DEST (XVECEXP (next, 0, 0))) == PC)\n-\t\t  || ANY_RETURN_P (XVECEXP (next, 0, 0))))\n-\t  || ANY_RETURN_P (next))\n-\tprintf (\"  emit_jump_insn (\");\n-      else if ((GET_CODE (next) == SET && GET_CODE (SET_SRC (next)) == CALL)\n-\t       || GET_CODE (next) == CALL\n-\t       || (GET_CODE (next) == PARALLEL\n-\t\t   && GET_CODE (XVECEXP (next, 0, 0)) == SET\n-\t\t   && GET_CODE (SET_SRC (XVECEXP (next, 0, 0))) == CALL)\n-\t       || (GET_CODE (next) == PARALLEL\n-\t\t   && GET_CODE (XVECEXP (next, 0, 0)) == CALL))\n-\tprintf (\"  emit_call_insn (\");\n-      else if (LABEL_P (next))\n-\tprintf (\"  emit_label (\");\n-      else if (GET_CODE (next) == MATCH_OPERAND\n-\t       || GET_CODE (next) == MATCH_DUP\n-\t       || GET_CODE (next) == MATCH_OPERATOR\n-\t       || GET_CODE (next) == MATCH_OP_DUP\n-\t       || GET_CODE (next) == MATCH_PARALLEL\n-\t       || GET_CODE (next) == MATCH_PAR_DUP\n-\t       || GET_CODE (next) == PARALLEL)\n-\tprintf (\"  emit (\");\n-      else\n-\tprintf (\"  emit_insn (\");\n-      gen_exp (next, DEFINE_EXPAND, used);\n-      printf (\");\\n\");\n-      if (GET_CODE (next) == SET && GET_CODE (SET_DEST (next)) == PC\n-\t  && GET_CODE (SET_SRC (next)) == LABEL_REF)\n-\tprintf (\"  emit_barrier ();\");\n-    }\n-\n+  gen_emit_seq (XVEC (expand, 1), used);\n   XDELETEVEC (used);\n \n   /* Call `get_insns' to extract the list of all the\n@@ -601,44 +577,7 @@ gen_split (rtx split)\n       printf (\"  (void) operand%d;\\n\", i);\n     }\n \n-  /* Output code to construct the rtl for the instruction bodies.\n-     Use emit_insn to add them to the sequence being accumulated.\n-     But don't do this if the user's code has set `no_more' nonzero.  */\n-\n-  for (i = 0; i < XVECLEN (split, 2); i++)\n-    {\n-      rtx next = XVECEXP (split, 2, i);\n-      if ((GET_CODE (next) == SET && GET_CODE (SET_DEST (next)) == PC)\n-\t  || (GET_CODE (next) == PARALLEL\n-\t      && GET_CODE (XVECEXP (next, 0, 0)) == SET\n-\t      && GET_CODE (SET_DEST (XVECEXP (next, 0, 0))) == PC)\n-\t  || ANY_RETURN_P (next))\n-\tprintf (\"  emit_jump_insn (\");\n-      else if ((GET_CODE (next) == SET && GET_CODE (SET_SRC (next)) == CALL)\n-\t       || GET_CODE (next) == CALL\n-\t       || (GET_CODE (next) == PARALLEL\n-\t\t   && GET_CODE (XVECEXP (next, 0, 0)) == SET\n-\t\t   && GET_CODE (SET_SRC (XVECEXP (next, 0, 0))) == CALL)\n-\t       || (GET_CODE (next) == PARALLEL\n-\t\t   && GET_CODE (XVECEXP (next, 0, 0)) == CALL))\n-\tprintf (\"  emit_call_insn (\");\n-      else if (LABEL_P (next))\n-\tprintf (\"  emit_label (\");\n-      else if (GET_CODE (next) == MATCH_OPERAND\n-\t       || GET_CODE (next) == MATCH_OPERATOR\n-\t       || GET_CODE (next) == MATCH_PARALLEL\n-\t       || GET_CODE (next) == MATCH_OP_DUP\n-\t       || GET_CODE (next) == MATCH_DUP\n-\t       || GET_CODE (next) == PARALLEL)\n-\tprintf (\"  emit (\");\n-      else\n-\tprintf (\"  emit_insn (\");\n-      gen_exp (next, GET_CODE (split), used);\n-      printf (\");\\n\");\n-      if (GET_CODE (next) == SET && GET_CODE (SET_DEST (next)) == PC\n-\t  && GET_CODE (SET_SRC (next)) == LABEL_REF)\n-\tprintf (\"  emit_barrier ();\");\n-    }\n+  gen_emit_seq (XVEC (split, 2), used);\n \n   /* Call `get_insns' to make a list of all the\n      insns emitted within this gen_... function.  */"}, {"sha": "916fbc10b92ff3f2997de90400c5454f64c90543", "filename": "gcc/gensupport.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -2982,3 +2982,37 @@ get_pattern_stats (struct pattern_stats *stats, rtvec pattern)\n \t\t\t\t  MAX (stats->max_dup_opno,\n \t\t\t\t       stats->max_scratch_opno)) + 1;\n }\n+\n+/* Return the emit_* function that should be used for pattern X.  */\n+\n+const char *\n+get_emit_function (rtx x)\n+{\n+  switch (classify_insn (x))\n+    {\n+    case INSN:\n+      return \"emit_insn\";\n+\n+    case CALL_INSN:\n+      return \"emit_call_insn\";\n+\n+    case JUMP_INSN:\n+      return \"emit_jump_insn\";\n+\n+    case UNKNOWN:\n+      return \"emit\";\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/* Return true if we must emit a barrier after pattern X.  */\n+\n+bool\n+needs_barrier_p (rtx x)\n+{\n+  return (GET_CODE (x) == SET\n+\t  && GET_CODE (SET_DEST (x)) == PC\n+\t  && GET_CODE (SET_SRC (x)) == LABEL_REF);\n+}"}, {"sha": "97f9a72b1007c7523929cebf2bfa57862cc46141", "filename": "gcc/gensupport.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -111,5 +111,7 @@ struct pattern_stats\n \n extern void get_pattern_stats (struct pattern_stats *ranges, rtvec vec);\n extern void compute_test_codes (rtx, int, char *);\n+extern const char *get_emit_function (rtx);\n+extern bool needs_barrier_p (rtx);\n \n #endif /* GCC_GENSUPPORT_H */"}, {"sha": "346155e9fafe0c5acac6b1baeb3d5d1e6f4f7bb5", "filename": "gcc/rtl.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -657,6 +657,54 @@ rtx_equal_p (const_rtx x, const_rtx y)\n   return 1;\n }\n \n+/* Return an indication of which type of insn should have X as a body.\n+   In generator files, this can be UNKNOWN if the answer is only known\n+   at (GCC) runtime.  Otherwise the value is CODE_LABEL, INSN, CALL_INSN\n+   or JUMP_INSN.  */\n+\n+enum rtx_code\n+classify_insn (rtx x)\n+{\n+  if (LABEL_P (x))\n+    return CODE_LABEL;\n+  if (GET_CODE (x) == CALL)\n+    return CALL_INSN;\n+  if (ANY_RETURN_P (x))\n+    return JUMP_INSN;\n+  if (GET_CODE (x) == SET)\n+    {\n+      if (GET_CODE (SET_DEST (x)) == PC)\n+\treturn JUMP_INSN;\n+      else if (GET_CODE (SET_SRC (x)) == CALL)\n+\treturn CALL_INSN;\n+      else\n+\treturn INSN;\n+    }\n+  if (GET_CODE (x) == PARALLEL)\n+    {\n+      int j;\n+      for (j = XVECLEN (x, 0) - 1; j >= 0; j--)\n+\tif (GET_CODE (XVECEXP (x, 0, j)) == CALL)\n+\t  return CALL_INSN;\n+\telse if (GET_CODE (XVECEXP (x, 0, j)) == SET\n+\t\t && GET_CODE (SET_DEST (XVECEXP (x, 0, j))) == PC)\n+\t  return JUMP_INSN;\n+\telse if (GET_CODE (XVECEXP (x, 0, j)) == SET\n+\t\t && GET_CODE (SET_SRC (XVECEXP (x, 0, j))) == CALL)\n+\t  return CALL_INSN;\n+    }\n+#ifdef GENERATOR_FILE\n+  if (GET_CODE (x) == MATCH_OPERAND\n+      || GET_CODE (x) == MATCH_OPERATOR\n+      || GET_CODE (x) == MATCH_PARALLEL\n+      || GET_CODE (x) == MATCH_OP_DUP\n+      || GET_CODE (x) == MATCH_DUP\n+      || GET_CODE (x) == PARALLEL)\n+    return UNKNOWN;\n+#endif\n+  return INSN;\n+}\n+\n void\n dump_rtx_statistics (void)\n {"}, {"sha": "967175cd6e626152fb0dcea6e0e9fcc3f2fd2821", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3beaff21f346c7f34bf45f7b56f2c1c880a91e31/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3beaff21f346c7f34bf45f7b56f2c1c880a91e31", "patch": "@@ -2666,6 +2666,7 @@ extern rtvec rtvec_alloc (int);\n extern rtvec shallow_copy_rtvec (rtvec);\n extern bool shared_const_p (const_rtx);\n extern rtx copy_rtx (rtx);\n+extern enum rtx_code classify_insn (rtx);\n extern void dump_rtx_statistics (void);\n \n /* In emit-rtl.c */"}]}