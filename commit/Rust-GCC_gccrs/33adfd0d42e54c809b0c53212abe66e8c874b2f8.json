{"sha": "33adfd0d42e54c809b0c53212abe66e8c874b2f8", "node_id": "C_kwDOANBUbNoAKDMzYWRmZDBkNDJlNTRjODA5YjBjNTMyMTJhYmU2NmU4Yzg3NGIyZjg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-26T21:34:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-26T22:28:48Z"}, "message": "libstdc++: Fix trivial relocation for constexpr std::vector\n\nWhen implementing constexpr std::vector I added a check for constant\nevaluation in vector::_S_use_relocate(), so that we would not try to relocate\ntrivial objects by using memmove. But I put it in the constexpr function\nthat decides whether to relocate or not, and calls to that function are\nalways constant evaluated. This had the effect of disabling relocation\nentirely, even in non-constexpr vectors.\n\nThis removes the check in _S_use_relocate() and modifies the actual\nrelocation algorithm, __relocate_a_1, to use the non-trivial\nimplementation instead of memmove when called during constant\nevaluation.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_uninitialized.h (__relocate_a_1): Do not use\n\tmemmove during constant evaluation.\n\t* include/bits/stl_vector.h (vector::_S_use_relocate()): Do not\n\tcheck is_constant_evaluated in always-constexpr function.", "tree": {"sha": "f150053a0dfbd140fa6c9149d5fdea1d6b4f5e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f150053a0dfbd140fa6c9149d5fdea1d6b4f5e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33adfd0d42e54c809b0c53212abe66e8c874b2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33adfd0d42e54c809b0c53212abe66e8c874b2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33adfd0d42e54c809b0c53212abe66e8c874b2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33adfd0d42e54c809b0c53212abe66e8c874b2f8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c6be48b7841524974754f8ea7533b82c7de77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c6be48b7841524974754f8ea7533b82c7de77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c6be48b7841524974754f8ea7533b82c7de77e"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "f2786c5a46117aec6232ca959ddb1c0e8a27a29d", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33adfd0d42e54c809b0c53212abe66e8c874b2f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33adfd0d42e54c809b0c53212abe66e8c874b2f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=33adfd0d42e54c809b0c53212abe66e8c874b2f8", "patch": "@@ -1051,6 +1051,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// @cond undocumented\n \n   template<typename _Tp, typename _Up, typename _Allocator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,\n \t\t\t_Allocator& __alloc)\n@@ -1070,18 +1071,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_bitwise_relocatable\n     : is_trivial<_Tp> { };\n \n-  template <typename _Tp, typename _Up>\n-    _GLIBCXX20_CONSTEXPR\n-    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>\n-    __relocate_a_1(_Tp* __first, _Tp* __last,\n-\t\t   _Tp* __result, allocator<_Up>&) noexcept\n-    {\n-      ptrdiff_t __count = __last - __first;\n-      if (__count > 0)\n-\t__builtin_memmove(__result, __first, __count * sizeof(_Tp));\n-      return __result + __count;\n-    }\n-\n   template <typename _InputIterator, typename _ForwardIterator,\n \t    typename _Allocator>\n     _GLIBCXX20_CONSTEXPR\n@@ -1105,6 +1094,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __cur;\n     }\n \n+  template <typename _Tp, typename _Up>\n+    _GLIBCXX20_CONSTEXPR\n+    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>\n+    __relocate_a_1(_Tp* __first, _Tp* __last,\n+\t\t   _Tp* __result,\n+\t\t   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept\n+    {\n+      ptrdiff_t __count = __last - __first;\n+      if (__count > 0)\n+\t{\n+#ifdef __cpp_lib_is_constant_evaluated\n+\t  if (std::is_constant_evaluated())\n+\t    {\n+\t      // Can't use memmove. Wrap the pointer so that __relocate_a_1\n+\t      // resolves to the non-trivial overload above.\n+\t      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);\n+\t      __out = std::__relocate_a_1(__first, __last, __out, __alloc);\n+\t      return __out.base();\n+\t    }\n+#endif\n+\t  __builtin_memmove(__result, __first, __count * sizeof(_Tp));\n+\t}\n+      return __result + __count;\n+    }\n+\n+\n   template <typename _InputIterator, typename _ForwardIterator,\n \t    typename _Allocator>\n     _GLIBCXX20_CONSTEXPR\n@@ -1115,9 +1130,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     std::__niter_base(__last),\n \t\t\t\t     std::__niter_base(__result), __alloc)))\n     {\n-      return __relocate_a_1(std::__niter_base(__first),\n-\t\t\t    std::__niter_base(__last),\n-\t\t\t    std::__niter_base(__result), __alloc);\n+      return std::__relocate_a_1(std::__niter_base(__first),\n+\t\t\t\t std::__niter_base(__last),\n+\t\t\t\t std::__niter_base(__result), __alloc);\n     }\n \n   /// @endcond"}, {"sha": "4587757637ebe9e70e68726590017ae6a3392810", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33adfd0d42e54c809b0c53212abe66e8c874b2f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33adfd0d42e54c809b0c53212abe66e8c874b2f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=33adfd0d42e54c809b0c53212abe66e8c874b2f8", "patch": "@@ -475,10 +475,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       static constexpr bool\n       _S_use_relocate()\n       {\n-#if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)\n-\tif (__builtin_is_constant_evaluated())\n-\t  return false; // Cannot use memcpy in constant evaluation contexts.\n-#endif\n \t// Instantiating std::__relocate_a might cause an error outside the\n \t// immediate context (in __relocate_object_a's noexcept-specifier),\n \t// so only do it if we know the type can be move-inserted into *this."}]}