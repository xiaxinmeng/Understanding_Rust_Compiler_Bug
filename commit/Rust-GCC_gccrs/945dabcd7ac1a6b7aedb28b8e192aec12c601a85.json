{"sha": "945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1ZGFiY2Q3YWMxYTZiN2FlZGIyOGI4ZTE5MmFlYzEyYzYwMWE4NQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-06-15T18:38:00Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-15T18:38:00Z"}, "message": "ChoiceFormat.java: Update comments from Classpath.\n\n2002-06-15  Nathanael Nerode  <neroden@twcny.rr.com>\n\n\t* java/text/ChoiceFormat.java: Update comments from Classpath.\n\t* java/text/ParseException.java (serialVersionUID): New\n\tfield from Classpath.\n\t* java/text/ParseException.java: Update formatting & comments\n\tfrom Classpath.\n\nFrom-SVN: r54654", "tree": {"sha": "8a4f017e3a724177a134fd4df0e2e753015e297e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a4f017e3a724177a134fd4df0e2e753015e297e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/comments", "author": null, "committer": null, "parents": [{"sha": "5f51b048fbb02d1c6fe31c4508dc142653b3cac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f51b048fbb02d1c6fe31c4508dc142653b3cac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f51b048fbb02d1c6fe31c4508dc142653b3cac8"}], "stats": {"total": 122, "additions": 57, "deletions": 65}, "files": [{"sha": "f3268e65f4b72852682c9b0680cdbbd26c6cb7a7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "patch": "@@ -1,3 +1,11 @@\n+2002-06-15  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* java/text/ChoiceFormat.java: Update comments from Classpath.\n+\t* java/text/ParseException.java (serialVersionUID): New\n+\tfield from Classpath.\n+\t* java/text/ParseException.java: Update formatting & comments\n+\tfrom Classpath.\n+\n 2002-06-15  Tom Tromey  <tromey@redhat.com>\n \n \t* java/util/zip/InflaterInputStream.java (read): Loop if data has"}, {"sha": "710a725990efc9205ea8b645a7a69438081e4c53", "filename": "libjava/java/text/ChoiceFormat.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FChoiceFormat.java?ref=945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "patch": "@@ -52,10 +52,10 @@\n  * This sounds complicated, but that is because I did a poor job of\n  * explaining it.  Consider the following example:\n  * <p>\n- * <pre>\n- * terminators = { 1, ChoiceFormat.nextDouble(1) }\n- * formats = { \"file\", \"files\" }\n- * </pre>\n+ *\n+<pre>terminators = { 1, ChoiceFormat.nextDouble(1) }\n+formats = { \"file\", \"files\" }</pre>\n+ *\n  * <p>\n  * In this case if the actual number tested is one or less, then the word\n  * \"file\" is used as the format value.  If the number tested is greater than"}, {"sha": "20e828e18a762bb0eec018d31b238d30196ee542", "filename": "libjava/java/text/ParseException.java", "status": "modified", "additions": 45, "deletions": 61, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/libjava%2Fjava%2Ftext%2FParseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945dabcd7ac1a6b7aedb28b8e192aec12c601a85/libjava%2Fjava%2Ftext%2FParseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FParseException.java?ref=945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "patch": "@@ -1,13 +1,13 @@\n-/* ParseException.java -- An error occurred while parsing.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* ParseException.java -- an error occurred while parsing\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,65 +38,49 @@\n \n package java.text;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, plus online\n- * API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n-/**\n-  * This exception is thrown when an unexpected error occurs during parsing.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Per Bothner <bothner@cygnus.com>\n-  * @date October 25, 1998.\n-  */\n-public class ParseException extends Exception\n-{\n-\n-/*\n- * Instance Variables\n- */\n-\n /**\n-  * This is the position where the error was encountered.\n-  */\n-private int errorOffset;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n+ * This exception is thrown when an unexpected error occurs during parsing.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @see Format\n+ * @see FieldPosition\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * This method initializes a new instance of <code>ParseException</code>\n-  * with a detailed error message and a error position.\n-  *\n-  * @param msg The descriptive message describing the error.\n-  * @param offset The position where the error was encountered.\n-  */\n-public\n-ParseException(String s, int offset)\n-{\n-  super(s);\n-  \n-  errorOffset = offset;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the position where the error occurred.\n-  * \n-  * @return The position where the error occurred.\n-  */\n-public int\n-getErrorOffset()\n+public class ParseException extends Exception\n {\n-  return(errorOffset);\n-}\n-\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 2703218443322787634L;\n+\n+  /**\n+   * This is the position where the error was encountered.\n+   *\n+   * @serial the zero-based offset in the string where the error occurred\n+   */\n+  private final int errorOffset;\n+\n+  /**\n+   * This method initializes a new instance of <code>ParseException</code>\n+   * with a detailed error message and a error position.\n+   *\n+   * @param msg the descriptive message describing the error\n+   * @param offset the position where the error was encountered\n+   */\n+  public ParseException(String s, int offset)\n+  {\n+    super(s);\n+    errorOffset = offset;\n+  }\n+\n+  /**\n+   * This method returns the position where the error occurred.\n+   *\n+   * @return the position where the error occurred\n+   */\n+  public int getErrorOffset()\n+  {\n+    return errorOffset;\n+  }\n } // class ParseException\n-"}]}