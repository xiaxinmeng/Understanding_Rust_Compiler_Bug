{"sha": "fd5564d3c71195714c28ba150de7e9b90bf9c83d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ1NTY0ZDNjNzExOTU3MTRjMjhiYTE1MGRlN2U5YjkwYmY5YzgzZA==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2013-11-04T21:31:07Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2013-11-04T21:31:07Z"}, "message": "i386-c.c (ix86_target_macros_internal): Separate PROCESSOR_COREI7_AVX out from PROCESSOR_COREI7.\n\n2013-11-04  Wei Mi  <wmi@google.com>\n\n        * gcc/config/i386/i386-c.c (ix86_target_macros_internal): Separate\n        PROCESSOR_COREI7_AVX out from PROCESSOR_COREI7.\n        * gcc/config/i386/i386.c (ix86_option_override_internal): Ditto.\n        (ix86_issue_rate): Ditto.\n        (ix86_adjust_cost): Ditto.\n        (ia32_multipass_dfa_lookahead): Ditto.\n        (ix86_sched_init_global): Ditto.\n        (get_builtin_code_for_version): Ditto.\n        * gcc/config/i386/i386.h (enum target_cpu_default): Ditto.\n        (enum processor_type): Ditto.\n        * gcc/config/i386/x86-tune.def (DEF_TUNE): Ditto.\n\nFrom-SVN: r204367", "tree": {"sha": "514dde8de45ba210fcf4eb75cdacf533f175728b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/514dde8de45ba210fcf4eb75cdacf533f175728b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd5564d3c71195714c28ba150de7e9b90bf9c83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5564d3c71195714c28ba150de7e9b90bf9c83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5564d3c71195714c28ba150de7e9b90bf9c83d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5564d3c71195714c28ba150de7e9b90bf9c83d/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cfa63d2237082e84f78cc855614475a78f18c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfa63d2237082e84f78cc855614475a78f18c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfa63d2237082e84f78cc855614475a78f18c13"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "f8584062cef6e7837737a917d25b73b59d63c461", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd5564d3c71195714c28ba150de7e9b90bf9c83d", "patch": "@@ -1,3 +1,17 @@\n+2013-11-04  Wei Mi  <wmi@google.com>\n+\n+\t* gcc/config/i386/i386-c.c (ix86_target_macros_internal): Separate\n+\tPROCESSOR_COREI7_AVX out from PROCESSOR_COREI7.\n+\t* gcc/config/i386/i386.c (ix86_option_override_internal): Ditto.\n+\t(ix86_issue_rate): Ditto.\n+\t(ix86_adjust_cost): Ditto.\n+\t(ia32_multipass_dfa_lookahead): Ditto.\n+\t(ix86_sched_init_global): Ditto.\n+\t(get_builtin_code_for_version): Ditto.\n+\t* gcc/config/i386/i386.h (enum target_cpu_default): Ditto.\n+\t(enum processor_type): Ditto.\n+\t* gcc/config/i386/x86-tune.def (DEF_TUNE): Ditto.\n+\n 2013-11-04  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/58967"}, {"sha": "690169dab3ddf0c3f812078adaf921dd907ef0fe", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=fd5564d3c71195714c28ba150de7e9b90bf9c83d", "patch": "@@ -141,6 +141,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__corei7\");\n       def_or_undef (parse_in, \"__corei7__\");\n       break;\n+    case PROCESSOR_COREI7_AVX:\n+      def_or_undef (parse_in, \"__corei7_avx\");\n+      def_or_undef (parse_in, \"__corei7_avx__\");\n+      break;\n     case PROCESSOR_HASWELL:\n       def_or_undef (parse_in, \"__core_avx2\");\n       def_or_undef (parse_in, \"__core_avx2__\");\n@@ -238,6 +242,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_COREI7:\n       def_or_undef (parse_in, \"__tune_corei7__\");\n       break;\n+    case PROCESSOR_COREI7_AVX:\n+      def_or_undef (parse_in, \"__tune_corei7_avx__\");\n+      break;\n     case PROCESSOR_HASWELL:\n       def_or_undef (parse_in, \"__tune_core_avx2__\");\n       break;"}, {"sha": "631f3b9d102df07485b43ba6aa1d89dba7c3a1d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fd5564d3c71195714c28ba150de7e9b90bf9c83d", "patch": "@@ -1833,8 +1833,9 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_P4_NOCONA (m_PENT4 | m_NOCONA)\n #define m_CORE2 (1<<PROCESSOR_CORE2)\n #define m_COREI7 (1<<PROCESSOR_COREI7)\n+#define m_COREI7_AVX (1<<PROCESSOR_COREI7_AVX)\n #define m_HASWELL (1<<PROCESSOR_HASWELL)\n-#define m_CORE_ALL (m_CORE2 | m_COREI7  | m_HASWELL)\n+#define m_CORE_ALL (m_CORE2 | m_COREI7  | m_COREI7_AVX | m_HASWELL)\n #define m_ATOM (1<<PROCESSOR_ATOM)\n #define m_SLM (1<<PROCESSOR_SLM)\n \n@@ -2299,6 +2300,8 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&core_cost, 16, 10, 16, 10, 16},\n   /* Core i7  */\n   {&core_cost, 16, 10, 16, 10, 16},\n+  /* Core i7 avx  */\n+  {&core_cost, 16, 10, 16, 10, 16},\n   /* Core avx2  */\n   {&core_cost, 16, 10, 16, 10, 16},\n   {&generic_cost, 16, 10, 16, 10, 16},\n@@ -2328,6 +2331,7 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"nocona\",\n   \"core2\",\n   \"corei7\",\n+  \"corei7-avx\",\n   \"core-avx2\",\n   \"atom\",\n   \"slm\",\n@@ -3016,12 +3020,12 @@ ix86_option_override_internal (bool main_args_p,\n       {\"corei7\", PROCESSOR_COREI7, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3\n \t| PTA_SSE4_1 | PTA_SSE4_2 | PTA_CX16 | PTA_POPCNT | PTA_FXSR},\n-      {\"corei7-avx\", PROCESSOR_COREI7, CPU_COREI7,\n+      {\"corei7-avx\", PROCESSOR_COREI7_AVX, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL\n \t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n-      {\"core-avx-i\", PROCESSOR_COREI7, CPU_COREI7,\n+      {\"core-avx-i\", PROCESSOR_COREI7_AVX, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n@@ -24807,6 +24811,7 @@ ix86_issue_rate (void)\n \n     case PROCESSOR_CORE2:\n     case PROCESSOR_COREI7:\n+    case PROCESSOR_COREI7_AVX:\n     case PROCESSOR_HASWELL:\n       return 4;\n \n@@ -25103,6 +25108,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \n     case PROCESSOR_CORE2:\n     case PROCESSOR_COREI7:\n+    case PROCESSOR_COREI7_AVX:\n     case PROCESSOR_HASWELL:\n       memory = get_attr_memory (insn);\n \n@@ -25181,6 +25187,7 @@ ia32_multipass_dfa_lookahead (void)\n \n     case PROCESSOR_CORE2:\n     case PROCESSOR_COREI7:\n+    case PROCESSOR_COREI7_AVX:\n     case PROCESSOR_HASWELL:\n     case PROCESSOR_ATOM:\n     case PROCESSOR_SLM:\n@@ -25821,6 +25828,7 @@ ix86_sched_init_global (FILE *dump ATTRIBUTE_UNUSED,\n     {\n     case PROCESSOR_CORE2:\n     case PROCESSOR_COREI7:\n+    case PROCESSOR_COREI7_AVX:\n     case PROCESSOR_HASWELL:\n       /* Do not perform multipass scheduling for pre-reload schedule\n          to save compile time.  */\n@@ -29672,6 +29680,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"corei7\";\n \t      priority = P_PROC_SSE4_2;\n \t      break;\n+            case PROCESSOR_COREI7_AVX:\n+              arg_str = \"corei7-avx\";\n+              priority = P_PROC_SSE4_2;\n+              break;\n \t    case PROCESSOR_ATOM:\n \t      arg_str = \"atom\";\n \t      priority = P_PROC_SSSE3;"}, {"sha": "f07fd7961975a52395b18da76335a263889425aa", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fd5564d3c71195714c28ba150de7e9b90bf9c83d", "patch": "@@ -304,6 +304,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_NOCONA (ix86_tune == PROCESSOR_NOCONA)\n #define TARGET_CORE2 (ix86_tune == PROCESSOR_CORE2)\n #define TARGET_COREI7 (ix86_tune == PROCESSOR_COREI7)\n+#define TARGET_COREI7_AVX (ix86_tune == PROCESSOR_COREI7_AVX)\n #define TARGET_HASWELL (ix86_tune == PROCESSOR_HASWELL)\n #define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n@@ -613,6 +614,7 @@ enum target_cpu_default\n   TARGET_CPU_DEFAULT_nocona,\n   TARGET_CPU_DEFAULT_core2,\n   TARGET_CPU_DEFAULT_corei7,\n+  TARGET_CPU_DEFAULT_corei7_avx,\n   TARGET_CPU_DEFAULT_haswell,\n   TARGET_CPU_DEFAULT_atom,\n   TARGET_CPU_DEFAULT_slm,\n@@ -2229,6 +2231,7 @@ enum processor_type\n   PROCESSOR_NOCONA,\n   PROCESSOR_CORE2,\n   PROCESSOR_COREI7,\n+  PROCESSOR_COREI7_AVX,\n   PROCESSOR_HASWELL,\n   PROCESSOR_GENERIC,\n   PROCESSOR_AMDFAM10,"}, {"sha": "93977a9a0db06a2987ac836c1ffda9d318638460", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5564d3c71195714c28ba150de7e9b90bf9c83d/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=fd5564d3c71195714c28ba150de7e9b90bf9c83d", "patch": "@@ -300,12 +300,12 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL: Use movups for misaligned loads instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n-          m_COREI7 | m_AMDFAM10 | m_BDVER | m_BTVER | m_SLM | m_GENERIC)\n+          m_COREI7 | m_COREI7_AVX | m_AMDFAM10 | m_BDVER | m_BTVER | m_SLM | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n-          m_COREI7 | m_BDVER | m_SLM | m_GENERIC)\n+          m_COREI7 | m_COREI7_AVX | m_BDVER | m_SLM | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n    of movupd.  */"}]}