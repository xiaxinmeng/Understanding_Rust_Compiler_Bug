{"sha": "4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzZjQ5NjQ5YTc2YWZjM2VkMWI3NWM3ZTY4ZDY0MTM3N2UyMmFlMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-05-23T15:13:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-05-23T15:13:31Z"}, "message": "i386.md (*floatuns<SWI48:mode><MODEF:mode>2_avx512): New insn pattern.\n\n\t* config/i386/i386.md (*floatuns<SWI48:mode><MODEF:mode>2_avx512):\n\tNew insn pattern.\n\t(floatunssi<mode>2): Also enable for AVX512F and TARGET_SSE_MATH.\n\tRewrite expander pattern.  Emit gen_floatunssi<mode>2_i387_with_xmm\n\tfor non-SSE modes.\n\t(floatunsdisf2): Rewrite expander pattern.  Hanlde TARGET_AVX512F.\n\t(floatunsdidf2): Ditto.\n\n\t* config/i386/i386.md (fixuns_trunc<mode>di2): New insn pattern.\n\t(fixuns_trunc<mode>si2_avx512f): Ditto.\n\t(*fixuns_trunc<mode>si2_avx512f_zext): Ditto.\n\t(fixuns_trunc<mode>si2): Also enable for AVX512F and TARGET_SSE_MATH.\n\tEmit fixuns_trunc<mode>si2_avx512f for AVX512F targets.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/cvt-2.c: New test.\n\n\t* gcc.target/i386/cvt-3.c: New test.\n\nFrom-SVN: r260614", "tree": {"sha": "18246a1811de5a29d2a0ebdca6b8d7d55dc2c730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18246a1811de5a29d2a0ebdca6b8d7d55dc2c730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f13154553f8546ac3b2154440bca0cf556d57a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f13154553f8546ac3b2154440bca0cf556d57a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f13154553f8546ac3b2154440bca0cf556d57a7"}], "stats": {"total": 177, "additions": 149, "deletions": 28}, "files": [{"sha": "e9268d64c78d0be80d27901344ad1c2b05318e59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "patch": "@@ -1,3 +1,21 @@\n+2018-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*floatuns<SWI48:mode><MODEF:mode>2_avx512):\n+\tNew insn pattern.\n+\t(floatunssi<mode>2): Also enable for AVX512F and TARGET_SSE_MATH.\n+\tRewrite expander pattern.  Emit gen_floatunssi<mode>2_i387_with_xmm\n+\tfor non-SSE modes.\n+\t(floatunsdisf2): Rewrite expander pattern.  Hanlde TARGET_AVX512F.\n+\t(floatunsdidf2): Ditto.\n+\n+2018-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (fixuns_trunc<mode>di2): New insn pattern.\n+\t(fixuns_trunc<mode>si2_avx512f): Ditto.\n+\t(*fixuns_trunc<mode>si2_avx512f_zext): Ditto.\n+\t(fixuns_trunc<mode>si2): Also enable for AVX512F and TARGET_SSE_MATH.\n+\tEmit fixuns_trunc<mode>si2_avx512f for AVX512F targets.\n+\n 2018-05-23  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/79985"}, {"sha": "bde3c34ee63d14cb328a8ab5e352dac79e4350aa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 93, "deletions": 28, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "patch": "@@ -5017,6 +5017,18 @@\n    }\n })\n \n+;; Unsigned conversion to DImode\n+\n+(define_insn \"fixuns_trunc<mode>di2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:DI\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_64BIT && TARGET_AVX512F && TARGET_SSE_MATH\"\n+  \"vcvtt<ssemodesuffix>2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"DI\")])\n+\n ;; Unsigned conversion to SImode.\n \n (define_expand \"fixuns_trunc<mode>si2\"\n@@ -5027,13 +5039,19 @@\n      (use (match_dup 2))\n      (clobber (match_scratch:<ssevecmode> 3))\n      (clobber (match_scratch:<ssevecmode> 4))])]\n-  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\"\n+  \"(!TARGET_64BIT || TARGET_AVX512F) && TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   machine_mode mode = <MODE>mode;\n   machine_mode vecmode = <ssevecmode>mode;\n   REAL_VALUE_TYPE TWO31r;\n   rtx two31;\n \n+  if (TARGET_AVX512F)\n+    {\n+      emit_insn (gen_fixuns_trunc<mode>si2_avx512f (operands[0], operands[1]));\n+      DONE;\n+    }\n+\n   if (optimize_insn_for_size_p ())\n     FAIL;\n \n@@ -5043,6 +5061,27 @@\n   operands[2] = force_reg (vecmode, two31);\n })\n \n+(define_insn \"fixuns_trunc<mode>si2_avx512f\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:SI\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F && TARGET_SSE_MATH\"\n+  \"vcvtt<ssemodesuffix>2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*fixuns_trunc<mode>si2_avx512f_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (unsigned_fix:SI\n+\t    (match_operand:MODEF 1 \"nonimmediate_operand\" \"vm\"))))]\n+  \"TARGET_64BIT && TARGET_AVX512F\"\n+  \"vcvtt<ssemodesuffix>2usi\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn_and_split \"*fixuns_trunc<mode>_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&x,&x\")\n \t(unsigned_fix:SI\n@@ -5615,16 +5654,26 @@\n   DONE;\n })\n \n+(define_insn \"*floatuns<SWI48:mode><MODEF:mode>2_avx512\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=v\")\n+\t(unsigned_float:MODEF\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"TARGET_AVX512F && TARGET_SSE_MATH\"\n+  \"vcvtusi2<MODEF:ssemodesuffix><SWI48:rex64suffix>\\t{%1, %0, %0|%0, %0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")])\n+\n ;; Avoid store forwarding (partial memory) stall penalty by extending\n ;; SImode value to DImode through XMM register instead of pushing two\n ;; SImode values to stack. Also note that fild loads from memory only.\n \n-(define_insn_and_split \"*floatunssi<mode>2_i387_with_xmm\"\n+(define_insn_and_split \"floatunssi<mode>2_i387_with_xmm\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n \t(unsigned_float:X87MODEF\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n-   (clobber (match_scratch:DI 3 \"=x\"))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"=m\"))]\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m\"))\n+   (clobber (match_scratch:DI 3 \"=x\"))]\n   \"!TARGET_64BIT\n    && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\"\n@@ -5639,43 +5688,59 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"floatunssi<mode>2\"\n-  [(parallel\n-     [(set (match_operand:X87MODEF 0 \"register_operand\")\n-\t   (unsigned_float:X87MODEF\n-\t     (match_operand:SI 1 \"nonimmediate_operand\")))\n-      (clobber (match_scratch:DI 3))\n-      (clobber (match_dup 2))])]\n-  \"!TARGET_64BIT\n-   && ((TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-\t&& TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC)\n-       || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\")\n+\t(unsigned_float:X87MODEF\n+\t  (match_operand:SI 1 \"nonimmediate_operand\")))]\n+  \"(!TARGET_64BIT\n+    && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n+    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC)\n+   || ((!TARGET_64BIT || TARGET_AVX512F)\n+       && SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n {\n-  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+  if (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\n+    {\n+      emit_insn (gen_floatunssi<mode>2_i387_with_xmm\n+\t\t  (operands[0], operands[1],\n+\t\t   assign_386_stack_local (DImode, SLOT_TEMP)));\n+      DONE;\n+    }\n+  if (!TARGET_AVX512F)\n     {\n       ix86_expand_convert_uns_si<mode>_sse (operands[0], operands[1]);\n       DONE;\n     }\n-  else\n-    operands[2] = assign_386_stack_local (DImode, SLOT_TEMP);\n })\n \n (define_expand \"floatunsdisf2\"\n-  [(use (match_operand:SF 0 \"register_operand\"))\n-   (use (match_operand:DI 1 \"nonimmediate_operand\"))]\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(unsigned_float:SF\n+\t  (match_operand:DI 1 \"nonimmediate_operand\")))]\n   \"TARGET_64BIT && TARGET_SSE && TARGET_SSE_MATH\"\n-  \"x86_emit_floatuns (operands); DONE;\")\n+{\n+  if (!TARGET_AVX512F)\n+    {\n+      x86_emit_floatuns (operands);\n+      DONE;\n+    }\n+})\n \n (define_expand \"floatunsdidf2\"\n-  [(use (match_operand:DF 0 \"register_operand\"))\n-   (use (match_operand:DI 1 \"nonimmediate_operand\"))]\n-  \"(TARGET_64BIT || TARGET_KEEPS_VECTOR_ALIGNED_STACK)\n+  [(set (match_operand:DF 0 \"register_operand\")\n+\t(unsigned_float:DF\n+\t  (match_operand:DI 1 \"nonimmediate_operand\")))]\n+  \"(TARGET_KEEPS_VECTOR_ALIGNED_STACK || TARGET_AVX512F)\n    && TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n-  if (TARGET_64BIT)\n-    x86_emit_floatuns (operands);\n-  else\n-    ix86_expand_convert_uns_didf_sse (operands[0], operands[1]);\n-  DONE;\n+  if (!TARGET_64BIT)\n+    {\n+      ix86_expand_convert_uns_didf_sse (operands[0], operands[1]);\n+      DONE;\n+    }\n+  if (!TARGET_AVX512F)\n+    {\n+      x86_emit_floatuns (operands);\n+      DONE;\n+    }\n })\n \f\n ;; Load effective address instructions"}, {"sha": "f45de0973056d3f2b1a72d883ac75143dc3184cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "patch": "@@ -1,3 +1,11 @@\n+2018-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/cvt-3.c: New test.\n+\n+2018-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/cvt-2.c: New test.\n+\n 2018-05-23  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* gcc.dg/pr79985.c: New testcase."}, {"sha": "aa0fd86731c6aab1e766390c069d9b96566e15a2", "filename": "gcc/testsuite/gcc.target/i386/cvt-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcvt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcvt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcvt-2.c?ref=4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mfpmath=sse\" } */\n+\n+unsigned int f2ui (float x) { return x; }\n+unsigned int d2ui (double x) { return x; }\n+\n+#ifdef __x86_64__\n+unsigned long f2ul (float x) { return x; }\n+unsigned long d2ul (double x) { return x; }\n+#endif\n+  \n+/* { dg-final { scan-assembler-times \"vcvttss2usi\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2usi\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vcvttss2usi\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vcvttsd2usi\" 2 { target { ! ia32 } } } } */"}, {"sha": "132ea6e3d338499a536e84e1ae79f7a8c8c29777", "filename": "gcc/testsuite/gcc.target/i386/cvt-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcvt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3f49649a76afc3ed1b75c7e68d641377e22ae1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcvt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcvt-3.c?ref=4b3f49649a76afc3ed1b75c7e68d641377e22ae1", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mfpmath=sse\" } */\n+\n+float ui2f (unsigned int x) { return x; }\n+double ui2d (unsigned int x) { return x; }\n+\n+#ifdef __x86_64__\n+float ul2f (unsigned long x) { return x; }\n+double ul2d (unsigned long x) { return x; }\n+#endif\n+  \n+/* { dg-final { scan-assembler-times \"vcvtusi2ss\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2sd\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2ss\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2sd\" 2 { target { ! ia32 } } } } */"}]}