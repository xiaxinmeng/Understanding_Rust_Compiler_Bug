{"sha": "28ca8446417d1af3ea00912e76ff46244b2a4075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjYTg0NDY0MTdkMWFmM2VhMDA5MTJlNzZmZjQ2MjQ0YjJhNDA3NQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-07-08T01:25:30Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-07-15T05:10:19Z"}, "message": "use error_at and warning_at in cfgexpand.c\n\ngcc/ChangeLog:\n\n\t* cfgexpand.c (tree_conflicts_with_clobbers_p): Pass location to\n\tdiagnostics.\n\t(expand_asm_stmt): Likewise.\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>", "tree": {"sha": "b4aea172f44aeb23c47e261410c92bcf3766996e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4aea172f44aeb23c47e261410c92bcf3766996e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28ca8446417d1af3ea00912e76ff46244b2a4075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ca8446417d1af3ea00912e76ff46244b2a4075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ca8446417d1af3ea00912e76ff46244b2a4075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ca8446417d1af3ea00912e76ff46244b2a4075/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7a11874d4eb428c18a91f38786032ce0e77a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7a11874d4eb428c18a91f38786032ce0e77a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7a11874d4eb428c18a91f38786032ce0e77a96"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "7dd1225143efb9455f92aaf2db4c6d35c536a654", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ca8446417d1af3ea00912e76ff46244b2a4075/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ca8446417d1af3ea00912e76ff46244b2a4075/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=28ca8446417d1af3ea00912e76ff46244b2a4075", "patch": "@@ -2954,17 +2954,17 @@ check_operand_nalternatives (const vec<const char *> &constraints)\n    variable definition for error, NULL_TREE for ok.  */\n \n static bool\n-tree_conflicts_with_clobbers_p (tree t, HARD_REG_SET *clobbered_regs)\n+tree_conflicts_with_clobbers_p (tree t, HARD_REG_SET *clobbered_regs,\n+\t\t\t\tlocation_t loc)\n {\n   /* Conflicts between asm-declared register variables and the clobber\n      list are not allowed.  */\n   tree overlap = tree_overlaps_hard_reg_set (t, clobbered_regs);\n \n   if (overlap)\n     {\n-      error (\"%<asm%> specifier for variable %qE conflicts with \"\n-\t     \"%<asm%> clobber list\",\n-\t     DECL_NAME (overlap));\n+      error_at (loc, \"%<asm%> specifier for variable %qE conflicts with \"\n+\t\t\"%<asm%> clobber list\", DECL_NAME (overlap));\n \n       /* Reset registerness to stop multiple errors emitted for a single\n \t variable.  */\n@@ -3087,7 +3087,7 @@ expand_asm_stmt (gasm *stmt)\n   /* ??? Diagnose during gimplification?  */\n   if (ninputs + noutputs + nlabels > MAX_RECOG_OPERANDS)\n     {\n-      error (\"more than %d operands in %<asm%>\", MAX_RECOG_OPERANDS);\n+      error_at (locus, \"more than %d operands in %<asm%>\", MAX_RECOG_OPERANDS);\n       return;\n     }\n \n@@ -3140,7 +3140,8 @@ expand_asm_stmt (gasm *stmt)\n \t      if (j == -2)\n \t\t{\n \t\t  /* ??? Diagnose during gimplification?  */\n-\t\t  error (\"unknown register name %qs in %<asm%>\", regname);\n+\t\t  error_at (locus, \"unknown register name %qs in %<asm%>\",\n+\t\t\t    regname);\n \t\t  error_seen = true;\n \t\t}\n \t      else if (j == -4)\n@@ -3205,7 +3206,8 @@ expand_asm_stmt (gasm *stmt)\n \t\t&& HARD_REGISTER_P (DECL_RTL (output_tvec[j]))\n \t\t&& output_hregno == REGNO (DECL_RTL (output_tvec[j])))\n \t      {\n-\t\terror (\"invalid hard register usage between output operands\");\n+\t\terror_at (locus, \"invalid hard register usage between output \"\n+\t\t\t  \"operands\");\n \t\terror_seen = true;\n \t      }\n \n@@ -3231,16 +3233,16 @@ expand_asm_stmt (gasm *stmt)\n \t\tif (i == match\n \t\t    && output_hregno != input_hregno)\n \t\t  {\n-\t\t    error (\"invalid hard register usage between output \"\n-\t\t\t   \"operand and matching constraint operand\");\n+\t\t    error_at (locus, \"invalid hard register usage between \"\n+\t\t\t      \"output operand and matching constraint operand\");\n \t\t    error_seen = true;\n \t\t  }\n \t\telse if (early_clobber_p\n \t\t\t && i != match\n \t\t\t && output_hregno == input_hregno)\n \t\t  {\n-\t\t    error (\"invalid hard register usage between \"\n-\t\t\t   \"earlyclobber operand and input operand\");\n+\t\t    error_at (locus, \"invalid hard register usage between \"\n+\t\t\t      \"earlyclobber operand and input operand\");\n \t\t    error_seen = true;\n \t\t  }\n \t      }\n@@ -3319,7 +3321,7 @@ expand_asm_stmt (gasm *stmt)\n \n \t  if (! allows_reg && !MEM_P (op))\n \t    {\n-\t      error (\"output number %d not directly addressable\", i);\n+\t      error_at (locus, \"output number %d not directly addressable\", i);\n \t      error_seen = true;\n \t    }\n \t  if ((! allows_mem && MEM_P (op) && GET_MODE (op) != BLKmode)\n@@ -3415,9 +3417,8 @@ expand_asm_stmt (gasm *stmt)\n \t  if (allows_reg && TYPE_MODE (type) != BLKmode)\n \t    op = force_reg (TYPE_MODE (type), op);\n \t  else if (!allows_mem)\n-\t    warning (0, \"%<asm%> operand %d probably does not match \"\n-\t\t     \"constraints\",\n-\t\t     i + noutputs);\n+\t    warning_at (locus, 0, \"%<asm%> operand %d probably does not match \"\n+\t\t\t\"constraints\", i + noutputs);\n \t  else if (MEM_P (op))\n \t    {\n \t      /* We won't recognize either volatile memory or memory\n@@ -3471,10 +3472,10 @@ expand_asm_stmt (gasm *stmt)\n \n   bool clobber_conflict_found = 0;\n   for (i = 0; i < noutputs; ++i)\n-    if (tree_conflicts_with_clobbers_p (output_tvec[i], &clobbered_regs))\n+    if (tree_conflicts_with_clobbers_p (output_tvec[i], &clobbered_regs, locus))\n \tclobber_conflict_found = 1;\n   for (i = 0; i < ninputs - ninout; ++i)\n-    if (tree_conflicts_with_clobbers_p (input_tvec[i], &clobbered_regs))\n+    if (tree_conflicts_with_clobbers_p (input_tvec[i], &clobbered_regs, locus))\n \tclobber_conflict_found = 1;\n \n   /* Make vectors for the expression-rtx, constraint strings,"}]}