{"sha": "e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxZWM3MWJkOTdhMWE4ZWFlZjQwNjk1YzdhZTliN2Y0YjFmYzgxOQ==", "commit": {"author": {"name": "Yury Gribov", "email": "tetra2005@gmail.com", "date": "2018-10-12T20:35:20Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2018-10-12T20:35:20Z"}, "message": "Add pattern to remove useless float casts in comparisons.\n\n\tPR middle-end/81376\n\n\tgcc/\n\t* real.c (format_helper::can_represent_integral_type_p): New function\n\t* real.h (format_helper::can_represent_integral_type_p): Ditto.\n\t* match.pd: New pattern.\n\n\tgcc/testsuite/\n\t* c-c++-common/pr81376.c: New test.\n\t* gcc.target/i386/387-ficom-2.c: Update test.\n\t* gcc.target/i386/387-ficom-2.c: Ditto.\n\nFrom-SVN: r265131", "tree": {"sha": "d9f2071404e3120d9043af8e3800ed5d14c14b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f2071404e3120d9043af8e3800ed5d14c14b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/comments", "author": {"login": "yugr", "id": 1101391, "node_id": "MDQ6VXNlcjExMDEzOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1101391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugr", "html_url": "https://github.com/yugr", "followers_url": "https://api.github.com/users/yugr/followers", "following_url": "https://api.github.com/users/yugr/following{/other_user}", "gists_url": "https://api.github.com/users/yugr/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugr/subscriptions", "organizations_url": "https://api.github.com/users/yugr/orgs", "repos_url": "https://api.github.com/users/yugr/repos", "events_url": "https://api.github.com/users/yugr/events{/privacy}", "received_events_url": "https://api.github.com/users/yugr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2"}], "stats": {"total": 121, "additions": 110, "deletions": 11}, "files": [{"sha": "465de40d61e9da81154826c526a16867aeb04383", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -1,3 +1,10 @@\n+2018-10-12  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR middle-end/81376\n+\t* real.c (format_helper::can_represent_integral_type_p): New function\n+\t* real.h (format_helper::can_represent_integral_type_p): Ditto.\n+\t* match.pd: New pattern.\n+\n 2018-10-12  Alexandre Oliva <oliva@adacore.com>\n \n \t* configure.ac: Introduce --enable-large-address-aware"}, {"sha": "b36d7ccb5dc30b56ce65ecd274ac98f46a78136c", "filename": "gcc/match.pd", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -3400,6 +3400,32 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (if (! HONOR_NANS (@0))\n \t(cmp @0 @1))))))\n \n+/* Optimize various special cases of (FTYPE) N CMP (FTYPE) M.  */\n+(for cmp (tcc_comparison)\n+ (simplify\n+  (cmp (float@0 @1) (float @2))\n+   (if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (@0))\n+\t&& ! DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@0)))\n+    (with\n+     {\n+       format_helper fmt (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (@0))));\n+       tree type1 = TREE_TYPE (@1);\n+       bool type1_signed_p = TYPE_SIGN (type1) == SIGNED;\n+       tree type2 = TREE_TYPE (@2);\n+       bool type2_signed_p = TYPE_SIGN (type2) == SIGNED;\n+     }\n+     (if (fmt.can_represent_integral_type_p (type1)\n+\t  && fmt.can_represent_integral_type_p (type2))\n+      (if (TYPE_PRECISION (type1) > TYPE_PRECISION (type2)\n+           && type1_signed_p >= type2_signed_p)\n+       (cmp @1 (convert @2))\n+       (if (TYPE_PRECISION (type1) < TYPE_PRECISION (type2)\n+            && type1_signed_p <= type2_signed_p)\n+        (cmp (convert:type2 @1) @2)\n+        (if (TYPE_PRECISION (type1) == TYPE_PRECISION (type2)\n+             && type1_signed_p == type2_signed_p)\n+\t (cmp @1 @2)))))))))\n+\n /* Optimize various special cases of (FTYPE) N CMP CST.  */\n (for cmp  (lt le eq ne ge gt)\n      icmp (le le eq ne ge ge)\n@@ -3410,7 +3436,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (with\n      {\n        tree itype = TREE_TYPE (@0);\n-       signop isign = TYPE_SIGN (itype);\n        format_helper fmt (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (@1))));\n        const REAL_VALUE_TYPE *cst = TREE_REAL_CST_PTR (@1);\n        /* Be careful to preserve any potential exceptions due to\n@@ -3420,17 +3445,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        bool exception_p\n          = real_isnan (cst) && (cst->signalling\n \t\t\t\t|| (cmp != EQ_EXPR && cmp != NE_EXPR));\n-       /* INT?_MIN is power-of-two so it takes\n-\t  only one mantissa bit.  */\n-       bool signed_p = isign == SIGNED;\n-       bool itype_fits_ftype_p\n-\t = TYPE_PRECISION (itype) - signed_p <= significand_size (fmt);\n      }\n      /* TODO: allow non-fitting itype and SNaNs when\n \t-fno-trapping-math.  */\n-     (if (itype_fits_ftype_p && ! exception_p)\n+     (if (fmt.can_represent_integral_type_p (itype) && ! exception_p)\n       (with\n        {\n+\t signop isign = TYPE_SIGN (itype);\n \t REAL_VALUE_TYPE imin, imax;\n \t real_from_integer (&imin, fmt, wi::min_value (itype), isign);\n \t real_from_integer (&imax, fmt, wi::max_value (itype), isign);"}, {"sha": "0e2da25c2d1cef68bcfe73f004360229a2940035", "filename": "gcc/real.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -5176,6 +5176,19 @@ get_max_float (const struct real_format *fmt, char *buf, size_t len)\n   gcc_assert (strlen (buf) < len);\n }\n \n+/* True if all values of integral type can be represented\n+   by this floating-point type exactly.  */\n+\n+bool format_helper::can_represent_integral_type_p (tree type) const\n+{\n+  gcc_assert (! decimal_p () && INTEGRAL_TYPE_P (type));\n+\n+  /* INT?_MIN is power-of-two so it takes\n+     only one mantissa bit.  */\n+  bool signed_p = TYPE_SIGN (type) == SIGNED;\n+  return TYPE_PRECISION (type) - signed_p <= significand_size (*this);\n+}\n+\n /* True if mode M has a NaN representation and\n    the treatment of NaN operands is important.  */\n "}, {"sha": "cd557b31c23303f5be0dde715553106ed303702c", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -216,6 +216,7 @@ class format_helper\n   operator const real_format *() const { return m_format; }\n \n   bool decimal_p () const { return m_format && m_format->b == 10; }\n+  bool can_represent_integral_type_p (tree type) const;\n \n private:\n   const real_format *m_format;"}, {"sha": "d5bdf787a38adbe22e21c5ff189721cab1b67c00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -1,3 +1,10 @@\n+2018-10-12  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR middle-end/81376\n+\t* c-c++-common/pr81376.c: New test.\n+\t* gcc.target/i386/387-ficom-2.c: Update test.\n+\t* gcc.target/i386/387-ficom-2.c: Ditto.\n+\n 2018-10-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/87597"}, {"sha": "e67f41e7356da50945dc3511fed05a478e19ecc7", "filename": "gcc/testsuite/c-c++-common/pr81376.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr81376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr81376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr81376.c?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+typedef double c_t;\n+typedef int a_t;\n+int f(a_t a1, a_t a2) {\n+  return (c_t) a1 < (c_t) a2;\n+  /* { dg-final { scan-tree-dump \"return (<retval> = )?a1 < a2\" \"original\" } } */\n+}\n+\n+void f1(short a, short b)\n+{\n+  volatile int s_s;\n+  s_s = (float) a < (float) b;\n+  /* { dg-final { scan-tree-dump \"s_s = a < b\" \"original\" } } */\n+}\n+\n+void f2(unsigned short a, unsigned short b)\n+{\n+  volatile int us_us;\n+  us_us = (float) a < (float) b;\n+  /* { dg-final { scan-tree-dump \"us_us = a < b\" \"original\" } } */\n+}\n+\n+/* We don't optimize here because neither of integral types is\n+   subset of the other.  */\n+void f3(unsigned short a, short b)\n+{\n+  volatile int us_s;\n+  us_s = (float) a < (float) b;\n+  /* { dg-final { scan-tree-dump \"us_s = \\\\(float\\\\) a < \\\\(float\\\\) b\" \"original\" } } */\n+}\n+\n+void f4(unsigned short a, int b)\n+{\n+  volatile int us_i;\n+  us_i = (double) a < (double) b;\n+  /* { dg-final { scan-tree-dump \"us_i = \\\\(int\\\\) a < b\" \"original\" } } */\n+}\n+\n+/* We don't optimize here because neither of integral types is\n+   subset of the other.  */\n+void f5(short a, unsigned int b)\n+{\n+  volatile int s_ui;\n+  s_ui = (double) a < (double) b;\n+  /* { dg-final { scan-tree-dump \"s_ui = \\\\(double\\\\) a < \\\\(double\\\\) b\" \"original\" } } */\n+}"}, {"sha": "8cef82df6a01b4034594e74d741c78937a80552a", "filename": "gcc/testsuite/gcc.target/i386/387-ficom-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-1.c?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -37,5 +37,6 @@ int test_ld_i (int x)\n   return (long double)i != x;\n }\n \n-/* { dg-final { scan-assembler-times \"ficomp\\[s\\t\\]\" 3 } } */\n-/* { dg-final { scan-assembler-times \"ficompl\" 3 } } */\n+/* { dg-final { scan-assembler-times \"cmpw\\[s\\t\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ficompl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cmpl\" 2 } } */"}, {"sha": "46c4b558d8ceb32ae841141f4ce7e63cd603ea90", "filename": "gcc/testsuite/gcc.target/i386/387-ficom-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-2.c?ref=e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "patch": "@@ -5,5 +5,6 @@\n \n #include \"387-ficom-1.c\"\n \n-/* { dg-final { scan-assembler-times \"ficomp\\[s\\t\\]\" 3 } } */\n-/* { dg-final { scan-assembler-times \"ficompl\" 3 } } */\n+/* { dg-final { scan-assembler-times \"cmpw\\[s\\t\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ficompl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cmpl\" 2 } } */"}]}