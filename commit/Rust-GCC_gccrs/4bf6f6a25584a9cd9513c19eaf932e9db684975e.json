{"sha": "4bf6f6a25584a9cd9513c19eaf932e9db684975e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmNmY2YTI1NTg0YTljZDk1MTNjMTllYWY5MzJlOWRiNjg0OTc1ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-07-18T15:25:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-07-18T15:25:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r21274", "tree": {"sha": "88403d8a7944ee653d26340a49737c0943d2e69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88403d8a7944ee653d26340a49737c0943d2e69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bf6f6a25584a9cd9513c19eaf932e9db684975e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf6f6a25584a9cd9513c19eaf932e9db684975e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf6f6a25584a9cd9513c19eaf932e9db684975e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf6f6a25584a9cd9513c19eaf932e9db684975e/comments", "author": null, "committer": null, "parents": [{"sha": "0c64a9cab4d4e776f2e0ba05ead2837ebc55f902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c64a9cab4d4e776f2e0ba05ead2837ebc55f902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c64a9cab4d4e776f2e0ba05ead2837ebc55f902"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "8792dbf586b64b2671f3e03c613580786af32c2c", "filename": "gcc/testsuite/gcc.c-torture/execute/loop-2g.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf6f6a25584a9cd9513c19eaf932e9db684975e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf6f6a25584a9cd9513c19eaf932e9db684975e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2g.c?ref=4bf6f6a25584a9cd9513c19eaf932e9db684975e", "patch": "@@ -0,0 +1,63 @@\n+#include <limits.h>\n+\n+#ifdef __unix__ /* ??? Is that good enough? */\n+#include <sys/types.h>\n+#include <sys/mman.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+#ifndef MAP_ANON\n+#ifdef MAP_ANONYMOUS\n+#define MAP_ANON MAP_ANONYMOUS\n+#else\n+#define MAP_ANON MAP_FILE\n+#endif\n+#endif\n+#ifndef MAP_FILE\n+#define MAP_FILE 0\n+#endif\n+#ifndef MAP_FIXED\n+#define MAP_FIXED 0\n+#endif\n+#endif\n+\n+#define MAP_START (void *)0x7fff8000\n+#define MAP_LEN 0x10000\n+\n+#define OFFSET (MAP_LEN/2 - 2 * sizeof (char));\n+\n+f (int s, char *p)\n+{\n+  int i;\n+  for (i = s; &p[i] < &p[40] && i >= 0; i++)\n+    {\n+      p[i] = -2;\n+    }\n+}\n+\n+main ()\n+{\n+#ifdef MAP_ANON\n+  char *p;\n+  int dev_zero;\n+\n+  dev_zero = open (\"/dev/zero\", O_RDONLY);\n+  /* -1 is OK when we have MAP_ANON; else mmap will flag an error.  */\n+  if (INT_MAX != 0x7fffffffL || sizeof (char *) != sizeof (int))\n+    exit (0);\n+  p = mmap (MAP_START, MAP_LEN, PROT_READ|PROT_WRITE,\n+\t    MAP_ANON|MAP_FIXED|MAP_PRIVATE, dev_zero, 0);\n+  if (p != (char *)-1)\n+    {\n+      p += OFFSET;\n+      p[39] = 0;\n+      f (0, p);\n+      if (p[39] != (char)-2)\n+\tabort ();\n+      p[39] = 0;\n+      f (-1, p);\n+      if (p[39] != 0)\n+\tabort ();\n+    }\n+#endif\n+  exit (0);\n+}"}, {"sha": "e68b8fbb8d293d0d05aa46ad51a923ad17c1cbf0", "filename": "gcc/testsuite/gcc.c-torture/execute/loop-2g.x", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf6f6a25584a9cd9513c19eaf932e9db684975e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2g.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf6f6a25584a9cd9513c19eaf932e9db684975e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2g.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2g.x?ref=4bf6f6a25584a9cd9513c19eaf932e9db684975e", "patch": "@@ -0,0 +1,9 @@\n+# This doesn't work on m68k-motorola-sysv\n+# It also doesn't work on m88k-motorola-sysv3\n+\n+global target_triplet\n+if { [istarget \"m68k-motorola-sysv\"] || [istarget \"m88k-motorola-sysv3\"] } {\n+      set torture_compile_xfail \"$target_triplet\"\n+}\n+\n+return 0"}]}