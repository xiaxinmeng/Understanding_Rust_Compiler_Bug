{"sha": "b3eaaf1a508157d95b86651c27ad2b77dc137a88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlYWFmMWE1MDgxNTdkOTViODY2NTFjMjdhZDJiNzdkYzEzN2E4OA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2008-02-19T10:33:41Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-02-19T10:33:41Z"}, "message": "re PR other/31349 (gcc -v --help returns no options for C, C++)\n\n        PR other/31349\n        * opts.c (undocumented_msg): Leave blank unless checking is\n        enabled.\n        (handle_options): Fix indentation.\n        (print_filtered_help): If no language-specific options were\n        displayed tell the user how to list all the options supported by\n        the language's front-end.\n        (print_specific_help): Fix indentation and remove duplicate line.\n        (common_handle_option): Handle the -v option.\n        For --help enable the display of undocumented options if the -v\n        switch has been included on the command line.\n        For --help= check for overlaps in the arguments between the option\n        classes and the language names and issue a warning when they\n        cannot be disambiguated.\n        * c.opt (v): Pass on to the common option handler.\n\nFrom-SVN: r132427", "tree": {"sha": "19e80a2c1735712ed685a4ed4cc4e884c94e3d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19e80a2c1735712ed685a4ed4cc4e884c94e3d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3eaaf1a508157d95b86651c27ad2b77dc137a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eaaf1a508157d95b86651c27ad2b77dc137a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3eaaf1a508157d95b86651c27ad2b77dc137a88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eaaf1a508157d95b86651c27ad2b77dc137a88/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2ee546fd6d04c56754647e5c21d3fa7e4f11294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ee546fd6d04c56754647e5c21d3fa7e4f11294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ee546fd6d04c56754647e5c21d3fa7e4f11294"}], "stats": {"total": 114, "additions": 90, "deletions": 24}, "files": [{"sha": "1503d78ffa5d195a03b06966e84d425b2cca97c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eaaf1a508157d95b86651c27ad2b77dc137a88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eaaf1a508157d95b86651c27ad2b77dc137a88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3eaaf1a508157d95b86651c27ad2b77dc137a88", "patch": "@@ -1,3 +1,21 @@\n+2008-02-19  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR other/31349\n+\t* opts.c (undocumented_msg): Leave blank unless checking is\n+\tenabled.\n+\t(handle_options): Fix indentation.\n+\t(print_filtered_help): If no language-specific options were\n+\tdisplayed tell the user how to list all the options supported by\n+\tthe language's front-end.\n+\t(print_specific_help): Fix indentation and remove duplicate line.\n+\t(common_handle_option): Handle the -v option.\n+\tFor --help enable the display of undocumented options if the -v\n+\tswitch has been included on the command line.\n+\tFor --help= check for overlaps in the arguments between the option\n+\tclasses and the language names and issue a warning when they\n+\tcannot be disambiguated.\n+\t* c.opt (v): Pass on to the common option handler.\n+\n 2008-02-19  Revital Eres  <eres@il.ibm.com> \n \n \t* modulo-sched.c (sms_schedule): Change dump message when"}, {"sha": "94f0398419d3095ca1d89ff6ae508e16d1e949a0", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eaaf1a508157d95b86651c27ad2b77dc137a88/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eaaf1a508157d95b86651c27ad2b77dc137a88/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=b3eaaf1a508157d95b86651c27ad2b77dc137a88", "patch": "@@ -978,7 +978,7 @@ C ObjC C++ ObjC++\n Do not predefine system-specific and GCC-specific macros\n \n v\n-C ObjC C++ ObjC++\n+Common C ObjC C++ ObjC++\n Enable verbose output\n \n w"}, {"sha": "f2eea7dcf7edebcb7b0cb1bbd569900c7a2b6874", "filename": "gcc/opts.c", "status": "modified", "additions": 71, "deletions": 23, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eaaf1a508157d95b86651c27ad2b77dc137a88/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eaaf1a508157d95b86651c27ad2b77dc137a88/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b3eaaf1a508157d95b86651c27ad2b77dc137a88", "patch": "@@ -337,7 +337,11 @@ bool no_unit_at_a_time_default;\n struct visibility_flags visibility_options;\n \n /* What to print when a switch has no documentation.  */\n+#ifdef ENABLE_CHECKING\n static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n+#else\n+static const char undocumented_msg[] = \"\";\n+#endif\n \n /* Used for bookkeeping on whether user set these flags so\n    -fprofile-use/-fprofile-generate does not use them.  */\n@@ -703,7 +707,7 @@ handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n \t{\n \t  if (main_input_filename == NULL)\n \t    {\n-\t    main_input_filename = opt;\n+\t      main_input_filename = opt;\n \t      main_input_baselength\n \t\t= base_of_path (main_input_filename, &main_input_basename);\n \t    }\n@@ -1169,7 +1173,24 @@ print_filtered_help (unsigned int include_flags,\n     }\n \n   if (! found)\n-    printf (_(\" No options with the desired characteristics were found\\n\"));\n+    {\n+      unsigned int langs = include_flags & CL_LANG_ALL;\n+\n+      if (langs == 0)\n+\tprintf (_(\" No options with the desired characteristics were found\\n\"));\n+      else\n+\t{\n+\t  unsigned int i;\n+\n+\t  /* PR 31349: Tell the user how to see all of the\n+\t     options supported by a specific front end.  */\n+\t  for (i = 0; (1U << i) < CL_LANG_ALL; i ++)\n+\t    if ((1U << i) & langs)\n+\t      printf (_(\" None found.  Use --help=%s to show *all* the options supported by the %s front-end\\n\"),\n+\t\t      lang_names[i], lang_names[i]);\n+\t}\n+\t\n+    }\n   else if (! displayed)\n     printf (_(\" All options with the desired characteristics have already been displayed\\n\"));\n \n@@ -1243,13 +1264,10 @@ print_specific_help (unsigned int include_flags,\n \t  if (i >= cl_lang_count)\n \t    break;\n \t  if ((exclude_flags & ((1U << cl_lang_count) - 1)) != 0)\n-\t    {\n-\t      description = _(\"The following options are specific to the language \");\n-\t      descrip_extra = lang_names [i];\n-\t    }\n+\t    description = _(\"The following options are specific to the just the language \");\n \t  else\n \t    description = _(\"The following options are supported by the language \");\n-\t    descrip_extra = lang_names [i];\n+\t  descrip_extra = lang_names [i];\n \t  break;\n \t}\n     }\n@@ -1289,6 +1307,7 @@ static int\n common_handle_option (size_t scode, const char *arg, int value,\n \t\t      unsigned int lang_mask)\n {\n+  static bool verbose = false;\n   enum opt_code code = (enum opt_code) scode;\n \n   switch (code)\n@@ -1297,14 +1316,18 @@ common_handle_option (size_t scode, const char *arg, int value,\n       handle_param (arg);\n       break;\n \n+    case OPT_v:\n+      verbose = true;\n+      break;\n+\n     case OPT_fhelp:\n     case OPT__help:\n       {\n \tunsigned int all_langs_mask = (1U << cl_lang_count) - 1;\n \tunsigned int undoc_mask;\n \tunsigned int i;\n \n-\tundoc_mask = extra_warnings ? 0 : CL_UNDOCUMENTED;\n+\tundoc_mask = (verbose | extra_warnings) ? 0 : CL_UNDOCUMENTED;\n \t/* First display any single language specific options.  */\n \tfor (i = 0; i < cl_lang_count; i++)\n \t  print_specific_help\n@@ -1366,6 +1389,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n \t    };\n \t    unsigned int * pflags;\n \t    char * comma;\n+\t    unsigned int lang_flag, specific_flag;\n \t    unsigned int len;\n \t    unsigned int i;\n \n@@ -1383,28 +1407,52 @@ common_handle_option (size_t scode, const char *arg, int value,\n \t    else\n \t      len = comma - a;\n \n-\t    for (i = 0; specifics[i].string != NULL; i++)\n+\t    /* Check to see if the string matches an option class name.  */\n+\t    for (i = 0, specific_flag = 0; specifics[i].string != NULL; i++)\n \t      if (strncasecmp (a, specifics[i].string, len) == 0)\n \t\t{\n-\t\t  * pflags |= specifics[i].flag;\n+\t\t  specific_flag = specifics[i].flag;\n+\t\t  break;\n+\t\t}\n+\t    \n+\t    /* Check to see if the string matches a language name.\n+\t       Note - we rely upon the alpha-sorted nature of the entries in\n+\t       the lang_names array, specifically that shorter names appear\n+\t       before their longer variants.  (ie C before C++).  That way\n+\t       when we are attempting to match --help=c for example we will\n+\t       match with C first and not C++.  */\n+\t    for (i = 0, lang_flag = 0; i < cl_lang_count; i++)\n+\t      if (strncasecmp (a, lang_names[i], len) == 0)\n+\t\t{\n+\t\t  lang_flag = 1U << i;\n \t\t  break;\n \t\t}\n \n-\t    if (specifics[i].string == NULL)\n+\t    if (specific_flag != 0)\n \t      {\n-\t\t/* Check to see if the string matches a language name.  */\n-\t\tfor (i = 0; i < cl_lang_count; i++)\n-\t\t  if (strncasecmp (a, lang_names[i], len) == 0)\n-\t\t    {\n-\t\t      * pflags |= 1U << i;\n-\t\t      break;\n-\t\t    }\n-\n-\t\tif (i == cl_lang_count)\n-\t\t  fnotice (stderr,\n-\t\t\t   \"warning: unrecognized argument to --help= switch: %.*s\\n\",\n-\t\t\t   len, a);\n+\t\tif (lang_flag == 0)\n+\t\t  * pflags |= specific_flag;\n+\t\telse\n+\t\t  {\n+\t\t    /* The option's argument matches both the start of a\n+\t\t       language name and the start of an option class name.\n+\t\t       We have a special case for when the user has\n+\t\t       specified \"--help=c\", but otherwise we have to issue\n+\t\t       a warning.  */\n+\t\t    if (strncasecmp (a, \"c\", len) == 0)\n+\t\t      * pflags |= lang_flag;\n+\t\t    else\n+\t\t      fnotice (stderr,\n+\t\t\t       \"warning: --help argument %.*s is ambiguous, please be more specific\\n\",\n+\t\t\t       len, a);\n+\t\t  }\n \t      }\n+\t    else if (lang_flag != 0)\n+\t      * pflags |= lang_flag;\n+\t    else\n+\t      fnotice (stderr,\n+\t\t       \"warning: unrecognized argument to --help= option: %.*s\\n\",\n+\t\t       len, a);\n \n \t    if (comma == NULL)\n \t      break;"}]}