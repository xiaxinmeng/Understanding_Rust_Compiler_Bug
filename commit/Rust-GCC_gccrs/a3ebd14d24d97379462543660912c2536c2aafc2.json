{"sha": "a3ebd14d24d97379462543660912c2536c2aafc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlYmQxNGQyNGQ5NzM3OTQ2MjU0MzY2MDkxMmMyNTM2YzJhYWZjMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-03-28T03:15:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-03-28T03:15:08Z"}, "message": "ostream.tcc (ostream::operator<<(_CharT)): Always allocate at least a byte.\n\n\n2002-03-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/ostream.tcc (ostream::operator<<(_CharT)): Always\n\tallocate at least a byte.\n\n\t* testsuite/18_support/numeric_limits.cc (test_extrema): Make\n\tdebugger-friendly.\n\t* testsuite/27_io/streambuf.cc (test07): Fix.\n\t(test06): Enable.\n\nFrom-SVN: r51494", "tree": {"sha": "81a6cb7b237b4b31664811f7c6186b4cadf361c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81a6cb7b237b4b31664811f7c6186b4cadf361c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ebd14d24d97379462543660912c2536c2aafc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ebd14d24d97379462543660912c2536c2aafc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ebd14d24d97379462543660912c2536c2aafc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ebd14d24d97379462543660912c2536c2aafc2/comments", "author": null, "committer": null, "parents": [{"sha": "47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d0866c79c04d8d86ce3d1eff9dda7899179c4b"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "e262607c86d6419f5d35a630f6458d557fea2853", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a3ebd14d24d97379462543660912c2536c2aafc2", "patch": "@@ -1,3 +1,13 @@\n+2002-03-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/ostream.tcc (ostream::operator<<(_CharT)): Always\n+\tallocate at least a byte.\n+\n+\t* testsuite/18_support/numeric_limits.cc (test_extrema): Make\n+\tdebugger-friendly.\n+\t* testsuite/27_io/streambuf.cc (test07): Fix.\n+\t(test06): Enable.\n+\n 2002-03-27  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/Intro.3:  Date tweak."}, {"sha": "9a2608888e9e10fef74ad9246347b7ad3559b262", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=a3ebd14d24d97379462543660912c2536c2aafc2", "patch": "@@ -481,7 +481,7 @@ namespace std\n \t  try \n \t    {\n \t      streamsize __w = __out.width();\n-\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n+\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca((sizeof(_CharT) * __w) + 1));\n \t      __pads[0] = __c;\n \t      streamsize __len = 1;\n \t      if (__w > __len)"}, {"sha": "8efaa4617099c5ed71e92ac33b88694814a00078", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=a3ebd14d24d97379462543660912c2536c2aafc2", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-23 bkoz\n \n-// Copyright (C) 1999, 2001 Free Software Foundation\n+// Copyright (C) 1999, 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -56,33 +56,39 @@ template<typename T>\n void test_extrema()\n {\n   bool test = true;\n-  VERIFY( extrema<T>::min == std::numeric_limits<T>::min() );\n-  VERIFY( extrema<T>::max == std::numeric_limits<T>::max() );\n+  T limits_min = std::numeric_limits<T>::min();\n+  T limits_max = std::numeric_limits<T>::max();\n+  T extrema_min = extrema<T>::min;\n+  T extrema_max = extrema<T>::max;\n+  VERIFY( extrema_min == limits_min );\n+  VERIFY( extrema_max == limits_max );\n }\n \n #ifdef __FreeBSD__\n-// This specialization allows the extra precision unmentioned\n-// in system headers yet supported by long double on FreeBSD to\n-// not cause a gratuitous FAIL for the entire test.  Using this\n-// technique to compare the residual against epsilon ensures that\n-// any major breakage will still be detected (although obviously not\n-// as tight as the exact equality check that would have been generated\n-// by default).  This replacement test is allowable by the fact that\n-// C++ limits should match the system provided limits for C even if\n-// they were wrong verses the actual FP hardware.\n+// This specialization allows the extra precision unmentioned in\n+// system headers yet supported by long double on FreeBSD or Solaris\n+// to not cause a gratuitous FAIL for the entire test.  Using this\n+// technique to compare the residual against epsilon ensures that any\n+// major breakage will still be detected (although obviously not as\n+// tight as the exact equality check that would have been generated by\n+// default).  This replacement test is allowable by the fact that C++\n+// limits should match the system provided limits for C even if they\n+// were wrong verses the actual FP hardware.\n template<>\n void test_extrema<long double>()\n {\n   typedef long double T;\n   bool test = true;\n-  VERIFY( (extrema<T>::min - std::numeric_limits<T>::min())\n-            < std::numeric_limits<T>::epsilon() );\n-  VERIFY( (std::numeric_limits<T>::min() - extrema<T>::min)\n-            < std::numeric_limits<T>::epsilon() );\n-  VERIFY( (extrema<T>::max / std::numeric_limits<T>::max())\n-            < (1 + std::numeric_limits<T>::epsilon()) );\n-  VERIFY( (std::numeric_limits<T>::max() / extrema<T>::max)\n-            < (1 + std::numeric_limits<T>::epsilon()) );\n+  T limits_min = std::numeric_limits<T>::min();\n+  T limits_max = std::numeric_limits<T>::max();\n+  T extrema_min = extrema<T>::min;\n+  T extrema_max = extrema<T>::max;\n+  T epsilon = std::numeric_limits<T>::epsilon();\n+\n+  VERIFY( (extrema_min - limits_min) < epsilon );\n+  VERIFY( (limits_min - extrema_min) < epsilon );\n+  VERIFY( (extrema_max - limits_max) < (1 + epsilon) );\n+  VERIFY( (limits_max - extrema_max) < (1 + epsilon) );\n }\n #endif\n "}, {"sha": "3f9a3192b7e0174c1ccb6aa843a185d585210f6f", "filename": "libstdc++-v3/testsuite/27_io/streambuf.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebd14d24d97379462543660912c2536c2aafc2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc?ref=a3ebd14d24d97379462543660912c2536c2aafc2", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -329,15 +329,12 @@ void test05()\n }\n \n // test06\n-// XXX this should work, doesn't due to compiler limitations.\n-#if 0\n namespace gnu \n {\n   class something_derived;\n }\n \n class gnu::something_derived : std::streambuf { };\n-#endif\n \n // libstdc++/3599\n class testbuf2 : public std::streambuf\n@@ -356,11 +353,15 @@ class testbuf2 : public std::streambuf\n void\n test07()\n {\n+  bool test = true;\n   testbuf2 ob;\n   std::ostream out(&ob); \n \n-  VERIFY(out << \"gasp\");\n-  VERIFY(out << std::endl);\n+  out << \"gasp\";\n+  VERIFY(out.good());\n+\n+  out << std::endl;\n+  VERIFY(out.good());\n }\n \n int main() "}]}