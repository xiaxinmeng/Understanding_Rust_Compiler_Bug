{"sha": "d6240ea016ea87d12456f92a7215af28c3dc3316", "node_id": "C_kwDOANBUbNoAKGQ2MjQwZWEwMTZlYTg3ZDEyNDU2ZjkyYTcyMTVhZjI4YzNkYzMzMTY", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-25T20:17:28Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-25T20:20:12Z"}, "message": "rs6000: Fix missing \"externs\" in smmintrin.h\n\nInline functions defined in smmintrin.h need \"extern\" as part of their\ndeclaration, otherwise instances of those functions are created in the\nobjects which include them.\n\nFixes commits:\n- acd4b9103c1a30c833de4eee31fb69c3ff13cd77\n- 9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748\n- bd9a8737d478f7f1d01a9d5f1cc4309ffbb53103\n- 5f500715438761f59de5fb992267748c5d4dc4b6\n- eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412\n- 29fb1e831bf1c25e4574bf2f98a9f534e5c67665\n\n2021-10-25  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_testz_si128): Add \"extern\" to\n\tfunction signature.\n\t(_mm_testc_si128): Likewise.\n\t(_mm_testnzc_si128): Likewise.\n\t(_mm_blend_ps): Likewise.\n\t(_mm_blendv_ps): Likewise.\n\t(_mm_blend_pd): Likewise.\n\t(_mm_blendv_pd): Likewise.\n\t(_mm_ceil_pd): Likewise.\n\t(_mm_ceil_sd): Likewise.\n\t(_mm_ceil_ps): Likewise.\n\t(_mm_ceil_ss): Likewise.\n\t(_mm_floor_pd): Likewise.\n\t(_mm_floor_sd): Likewise.\n\t(_mm_floor_ps): Likewise.\n\t(_mm_floor_ss): Likewise.\n\t(_mm_minpos_epu16): Likewise.\n\t(_mm_mul_epi32): Likewise.\n\t(_mm_cvtepi8_epi16): Likewise.\n\t(_mm_packus_epi32): Likewise.\n\t(_mm_cmpgt_epi64): Likewise.", "tree": {"sha": "a72061d2271b7620ff6fac6c809e65ce6ab7d3b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72061d2271b7620ff6fac6c809e65ce6ab7d3b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6240ea016ea87d12456f92a7215af28c3dc3316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6240ea016ea87d12456f92a7215af28c3dc3316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6240ea016ea87d12456f92a7215af28c3dc3316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6240ea016ea87d12456f92a7215af28c3dc3316/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72dc270be793f159a3a038bef41542d85550b331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72dc270be793f159a3a038bef41542d85550b331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72dc270be793f159a3a038bef41542d85550b331"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "0fab308b1951c6071d7f6da10b39233ccea9fdbc", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6240ea016ea87d12456f92a7215af28c3dc3316/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6240ea016ea87d12456f92a7215af28c3dc3316/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=d6240ea016ea87d12456f92a7215af28c3dc3316", "patch": "@@ -118,7 +118,7 @@ _mm_blendv_epi8 (__m128i __A, __m128i __B, __m128i __mask)\n   return (__m128i) vec_sel ((__v16qu) __A, (__v16qu) __B, __lmask);\n }\n \n-__inline __m128\n+extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blend_ps (__m128 __A, __m128 __B, const int __imm8)\n {\n@@ -145,7 +145,7 @@ _mm_blend_ps (__m128 __A, __m128 __B, const int __imm8)\n   return (__m128) __r;\n }\n \n-__inline __m128\n+extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_ps (__m128 __A, __m128 __B, __m128 __mask)\n {\n@@ -154,7 +154,7 @@ _mm_blendv_ps (__m128 __A, __m128 __B, __m128 __mask)\n   return (__m128) vec_sel ((__v4su) __A, (__v4su) __B, (__v4su) __boolmask);\n }\n \n-__inline __m128d\n+extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blend_pd (__m128d __A, __m128d __B, const int __imm8)\n {\n@@ -170,7 +170,7 @@ _mm_blend_pd (__m128d __A, __m128d __B, const int __imm8)\n }\n \n #ifdef _ARCH_PWR8\n-__inline __m128d\n+extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_pd (__m128d __A, __m128d __B, __m128d __mask)\n {\n@@ -180,7 +180,7 @@ _mm_blendv_pd (__m128d __A, __m128d __B, __m128d __mask)\n }\n #endif\n \n-__inline int\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_testz_si128 (__m128i __A, __m128i __B)\n {\n@@ -189,7 +189,7 @@ _mm_testz_si128 (__m128i __A, __m128i __B)\n   return vec_all_eq (vec_and ((__v16qu) __A, (__v16qu) __B), __zero);\n }\n \n-__inline int\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_testc_si128 (__m128i __A, __m128i __B)\n {\n@@ -199,7 +199,7 @@ _mm_testc_si128 (__m128i __A, __m128i __B)\n   return vec_all_eq (vec_and ((__v16qu) __notA, (__v16qu) __B), __zero);\n }\n \n-__inline int\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_testnzc_si128 (__m128i __A, __m128i __B)\n {\n@@ -214,14 +214,14 @@ _mm_testnzc_si128 (__m128i __A, __m128i __B)\n \n #define _mm_test_mix_ones_zeros(M, V) _mm_testnzc_si128 ((M), (V))\n \n-__inline __m128d\n+extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ceil_pd (__m128d __A)\n {\n   return (__m128d) vec_ceil ((__v2df) __A);\n }\n \n-__inline __m128d\n+extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ceil_sd (__m128d __A, __m128d __B)\n {\n@@ -230,14 +230,14 @@ _mm_ceil_sd (__m128d __A, __m128d __B)\n   return (__m128d) __r;\n }\n \n-__inline __m128d\n+extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_floor_pd (__m128d __A)\n {\n   return (__m128d) vec_floor ((__v2df) __A);\n }\n \n-__inline __m128d\n+extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_floor_sd (__m128d __A, __m128d __B)\n {\n@@ -246,14 +246,14 @@ _mm_floor_sd (__m128d __A, __m128d __B)\n   return (__m128d) __r;\n }\n \n-__inline __m128\n+extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ceil_ps (__m128 __A)\n {\n   return (__m128) vec_ceil ((__v4sf) __A);\n }\n \n-__inline __m128\n+extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ceil_ss (__m128 __A, __m128 __B)\n {\n@@ -262,14 +262,14 @@ _mm_ceil_ss (__m128 __A, __m128 __B)\n   return __r;\n }\n \n-__inline __m128\n+extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_floor_ps (__m128 __A)\n {\n   return (__m128) vec_floor ((__v4sf) __A);\n }\n \n-__inline __m128\n+extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_floor_ss (__m128 __A, __m128 __B)\n {\n@@ -351,15 +351,15 @@ _mm_mullo_epi32 (__m128i __X, __m128i __Y)\n }\n \n #ifdef _ARCH_PWR8\n-__inline __m128i\n+extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mul_epi32 (__m128i __X, __m128i __Y)\n {\n   return (__m128i) vec_mule ((__v4si) __X, (__v4si) __Y);\n }\n #endif\n \n-__inline __m128i\n+extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtepi8_epi16 (__m128i __A)\n {\n@@ -499,7 +499,7 @@ _mm_cvtepu32_epi64 (__m128i __A)\n \n /* Return horizontal packed word minimum and its index in bits [15:0]\n    and bits [18:16] respectively.  */\n-__inline __m128i\n+extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_minpos_epu16 (__m128i __A)\n {\n@@ -524,15 +524,15 @@ _mm_minpos_epu16 (__m128i __A)\n   return __r.__m;\n }\n \n-__inline __m128i\n+extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_packus_epi32 (__m128i __X, __m128i __Y)\n {\n   return (__m128i) vec_packsu ((__v4si) __X, (__v4si) __Y);\n }\n \n #ifdef _ARCH_PWR8\n-__inline __m128i\n+extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi64 (__m128i __X, __m128i __Y)\n {"}]}