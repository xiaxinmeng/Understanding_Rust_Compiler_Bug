{"sha": "6193b8b7edb139ddf475352a0822482f16be4a2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5M2I4YjdlZGIxMzlkZGY0NzUzNTJhMDgyMjQ4MmYxNmJlNGEyZA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2006-08-01T14:23:58Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2006-08-01T14:23:58Z"}, "message": "re PR debug/23336 (enum constants not visible to gdb because of -feliminate-unused-debug-types)\n\ngcc/\n\tPR debug/23336\n\t* c-typeck.c (build_external_type): Mark used enum types.\n\t* dwarf2out.c (dwarf2out_abstract_function): Save and restore\n\tcfun also.\n\t(gen_subprogram_die): Whitespace fix.\ngcc/cp/\n\tPR debug/23336\n\t* pt.c (tsubst_copy_and_build): Mark used enum types.\n\t* semantics.c (finish_id_expression): Likewise.\ngcc/testsuite/\n\tPR debug/23336\n\t* lib/gcc-dg.exp (gcc-dg-debug-runtest): Suppress new tests\n\tat -g1.\n\t* gcc.dg/debug/enum-1.c, g++.dg/debug/enum-1.C,\n\tg++.dg/debug/enum-2.C: New.\n\nFrom-SVN: r115853", "tree": {"sha": "8de0634b83102dd0cc5f4b28594ecb7f65a6dd52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de0634b83102dd0cc5f4b28594ecb7f65a6dd52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6193b8b7edb139ddf475352a0822482f16be4a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6193b8b7edb139ddf475352a0822482f16be4a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6193b8b7edb139ddf475352a0822482f16be4a2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6193b8b7edb139ddf475352a0822482f16be4a2d/comments", "author": null, "committer": null, "parents": [{"sha": "9824b8867a2c169ee38947d191ba646786586ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9824b8867a2c169ee38947d191ba646786586ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9824b8867a2c169ee38947d191ba646786586ae6"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "b8aee3b467cad37bc582e49e0f3c82843919fae2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -1,3 +1,11 @@\n+2006-08-01  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\tPR debug/23336\n+\t* c-typeck.c (build_external_type): Mark used enum types.\n+\t* dwarf2out.c (dwarf2out_abstract_function): Save and restore\n+\tcfun also.\n+\t(gen_subprogram_die): Whitespace fix.\n+\n 2006-08-01  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-outof-ssa.c (check_replaceable): Do not allocate def_vars"}, {"sha": "31dadc6ebeb8ce377d294a2662f0f1fbb09d3050", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -2067,6 +2067,7 @@ build_external_ref (tree id, int fun, location_t loc)\n \n   if (TREE_CODE (ref) == CONST_DECL)\n     {\n+      used_types_insert (TREE_TYPE (ref));\n       ref = DECL_INITIAL (ref);\n       TREE_CONSTANT (ref) = 1;\n       TREE_INVARIANT (ref) = 1;"}, {"sha": "56c613b0aefb7f03625fa7889052db5b048b0ad1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -1,3 +1,9 @@\n+2006-08-01  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\tPR debug/23336\n+\t* pt.c (tsubst_copy_and_build): Mark used enum types.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\n 2006-07-31  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/6634"}, {"sha": "30e6cd09a4b301df0ec7f89e1c965e31a9610394", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -9240,7 +9240,10 @@ tsubst_copy_and_build (tree t,\n       /* As in finish_id_expression, we resolve enumeration constants\n \t to their underlying values.  */\n       if (TREE_CODE (t) == CONST_DECL)\n-\treturn DECL_INITIAL (t);\n+\t{\n+\t  used_types_insert (TREE_TYPE (t));\n+\t  return DECL_INITIAL (t);\n+\t}\n       return t;\n \n     default:"}, {"sha": "d36eba76e4143b717e49cb45448c968cd2b55237", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -2589,7 +2589,10 @@ finish_id_expression (tree id_expression,\n     {\n       *idk = CP_ID_KIND_NONE;\n       if (!processing_template_decl)\n-\treturn DECL_INITIAL (decl);\n+\t{\n+\t  used_types_insert (TREE_TYPE (decl));\n+\t  return DECL_INITIAL (decl);\n+\t}\n       return decl;\n     }\n   else"}, {"sha": "41aa5ace0cb1d94b29127d54e394f6bea28e449c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -11457,6 +11457,7 @@ dwarf2out_abstract_function (tree decl)\n {\n   dw_die_ref old_die;\n   tree save_fn;\n+  struct function *save_cfun;\n   tree context;\n   int was_abstract = DECL_ABSTRACT (decl);\n \n@@ -11480,14 +11481,17 @@ dwarf2out_abstract_function (tree decl)\n \n   /* Pretend we've just finished compiling this function.  */\n   save_fn = current_function_decl;\n+  save_cfun = cfun;\n   current_function_decl = decl;\n+  cfun = DECL_STRUCT_FUNCTION (decl);\n \n   set_decl_abstract_flags (decl, 1);\n   dwarf2out_decl (decl);\n   if (! was_abstract)\n     set_decl_abstract_flags (decl, 0);\n \n   current_function_decl = save_fn;\n+  cfun = save_cfun;\n }\n \n /* Helper function of premark_used_types() which gets called through\n@@ -11531,7 +11535,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   int declaration = (current_function_decl != decl\n \t\t     || class_or_namespace_scope_p (context_die));\n \n-  premark_used_types();\n+  premark_used_types ();\n \n   /* It is possible to have both DECL_ABSTRACT and DECLARATION be true if we\n      started to generate the abstract instance of an inline, decided to output"}, {"sha": "261cadc8ae228b95c3da3e3488b208aa35382b52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -1,3 +1,11 @@\n+2006-08-01  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\tPR debug/23336\n+\t* lib/gcc-dg.exp (gcc-dg-debug-runtest): Suppress new tests\n+\tat -g1.\n+\t* gcc.dg/debug/enum-1.c, g++.dg/debug/enum-1.C,\n+\tg++.dg/debug/enum-2.C: New.\n+\n 2006-07-31  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/6634"}, {"sha": "7681e9b521511df233d8dded9811a2289e0d827c", "filename": "gcc/testsuite/g++.dg/debug/enum-1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fenum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fenum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fenum-1.C?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that used enums are output.  */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"JTI_MAX\" } } */\n+\n+int var;\n+\n+enum java_tree_index\n+{\n+  JTI_MAX\n+};\n+\n+void function (void)\n+{\n+  var = JTI_MAX;\n+}\n+ "}, {"sha": "d5501313d9300aa401cb00068271155d37d75325", "filename": "gcc/testsuite/g++.dg/debug/enum-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fenum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fenum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fenum-2.C?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that used enums are output.  */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"JTI_MAX\" } } */\n+\n+int var;\n+\n+enum java_tree_index\n+{\n+  JTI_MAX\n+};\n+\n+template<int X>\n+void tmpl (void)\n+{\n+  var = JTI_MAX + X;\n+}\n+ \n+void\n+function (void)\n+{\n+  tmpl<2>();\n+}"}, {"sha": "7681e9b521511df233d8dded9811a2289e0d827c", "filename": "gcc/testsuite/gcc.dg/debug/enum-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fenum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fenum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fenum-1.c?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that used enums are output.  */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"JTI_MAX\" } } */\n+\n+int var;\n+\n+enum java_tree_index\n+{\n+  JTI_MAX\n+};\n+\n+void function (void)\n+{\n+  var = JTI_MAX;\n+}\n+ "}, {"sha": "1573545db6ac1a125967d89a3687217750336c6d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6193b8b7edb139ddf475352a0822482f16be4a2d/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=6193b8b7edb139ddf475352a0822482f16be4a2d", "patch": "@@ -292,7 +292,12 @@ proc gcc-dg-debug-runtest { target_compile trivial opt_opts testcases } {\n \n \tforeach flags $DEBUG_TORTURE_OPTIONS {\n \t    set doit 1\n-\t    if { [string match {*/debug-[126].c} \"$nshort\"] \\\n+\n+\t    # These tests check for information which may be deliberately\n+\t    # suppressed at -g1.\n+\t    if { ([string match {*/debug-[126].c} \"$nshort\"] \\\n+\t\t   || [string match {*/enum-1.c} \"$nshort\"] \\\n+\t\t   || [string match {*/enum-[12].C} \"$nshort\"]) \\\n \t\t    && [string match \"*1\" [lindex \"$flags\" 0] ] } {\n \t\tset doit 0\n \t    }"}]}