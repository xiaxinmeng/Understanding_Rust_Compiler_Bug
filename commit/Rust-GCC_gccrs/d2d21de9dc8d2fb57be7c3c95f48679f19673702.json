{"sha": "d2d21de9dc8d2fb57be7c3c95f48679f19673702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkMjFkZTlkYzhkMmZiNTdiZTdjM2M5NWY0ODY3OWYxOTY3MzcwMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2014-01-21T15:09:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2014-01-21T15:09:10Z"}, "message": "include\n\t* ansidecl.h (ANSI_PROTOTYPES, PTRCONST, LONG_DOUBLE, PARAMS)\n\t(VPARAMS, VA_START, VA_OPEN, VA_CLOSE, VA_FIXEDARG, CONST)\n\t(VOLATILE, SIGNED, PROTO, EXFUN, DEFUN, DEFUN_VOID, AND, DOTS)\n\t(NOARGS): Don't define.\n\t* libiberty.h (expandargv, writeargv): Don't use PARAMS.\nlibiberty\n\t* _doprint.c (checkit): Use stdarg, not VA_* macros.\n\t* asprintf.c (asprintf): Use stdarg, not VA_* macros.\n\t* concat.c (concat_length, concat_copy, concat_copy2, concat)\n\t(reconcat): Use stdarg, not VA_* macros.\n\t* snprintf.c (snprintf): Use stdarg, not VA_* macros.\n\t* vasprintf.c (checkit): Use stdarg, not VA_* macros.\n\t* vsnprintf.c (checkit): Use stdarg, not VA_* macros.\n\nFrom-SVN: r206881", "tree": {"sha": "56d178887d5c3ae814e15a8a05ae0f6fca58b930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d178887d5c3ae814e15a8a05ae0f6fca58b930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2d21de9dc8d2fb57be7c3c95f48679f19673702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d21de9dc8d2fb57be7c3c95f48679f19673702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d21de9dc8d2fb57be7c3c95f48679f19673702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d21de9dc8d2fb57be7c3c95f48679f19673702/comments", "author": null, "committer": null, "parents": [{"sha": "579847c27262b011e96575c8ac74d0aa118152f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579847c27262b011e96575c8ac74d0aa118152f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579847c27262b011e96575c8ac74d0aa118152f0"}], "stats": {"total": 253, "additions": 62, "deletions": 191}, "files": [{"sha": "d83e6b74720d0eadf4450bef76fb65ed23acf3be", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,3 +1,11 @@\n+2014-01-21  Tom Tromey  <tromey@redhat.com>\n+\n+\t* ansidecl.h (ANSI_PROTOTYPES, PTRCONST, LONG_DOUBLE, PARAMS)\n+\t(VPARAMS, VA_START, VA_OPEN, VA_CLOSE, VA_FIXEDARG, CONST)\n+\t(VOLATILE, SIGNED, PROTO, EXFUN, DEFUN, DEFUN_VOID, AND, DOTS)\n+\t(NOARGS): Don't define.\n+\t* libiberty.h (expandargv, writeargv): Don't use PARAMS.\n+\n 2013-12-23  Bill Maddox  <maddox@google.com>\n \n \t* demangle.h (enum gnu_v3_ctor_kinds):"}, {"sha": "0fb23bba792dbb30d852723b9ac9a5d337e3aedc", "filename": "include/ansidecl.h", "status": "modified", "additions": 2, "deletions": 139, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,6 +1,6 @@\n /* ANSI and traditional C compatability macros\n    Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2013\n    Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n@@ -24,93 +24,16 @@ Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.\n \n    Macro\t\tANSI C definition\tTraditional C definition\n    -----\t\t---- - ----------\t----------- - ----------\n-   ANSI_PROTOTYPES\t1\t\t\tnot defined\n    PTR\t\t\t`void *'\t\t`char *'\n-   PTRCONST\t\t`void *const'\t\t`char *'\n-   LONG_DOUBLE\t\t`long double'\t\t`double'\n    const\t\tnot defined\t\t`'\n    volatile\t\tnot defined\t\t`'\n    signed\t\tnot defined\t\t`'\n-   VA_START(ap, var)\tva_start(ap, var)\tva_start(ap)\n-\n-   Note that it is safe to write \"void foo();\" indicating a function\n-   with no return value, in all K+R compilers we have been able to test.\n-\n-   For declaring functions with prototypes, we also provide these:\n-\n-   PARAMS ((prototype))\n-   -- for functions which take a fixed number of arguments.  Use this\n-   when declaring the function.  When defining the function, write a\n-   K+R style argument list.  For example:\n-\n-\tchar *strcpy PARAMS ((char *dest, char *source));\n-\t...\n-\tchar *\n-\tstrcpy (dest, source)\n-\t     char *dest;\n-\t     char *source;\n-\t{ ... }\n-\n-\n-   VPARAMS ((prototype, ...))\n-   -- for functions which take a variable number of arguments.  Use\n-   PARAMS to declare the function, VPARAMS to define it.  For example:\n-\n-\tint printf PARAMS ((const char *format, ...));\n-\t...\n-\tint\n-\tprintf VPARAMS ((const char *format, ...))\n-\t{\n-\t   ...\n-\t}\n-\n-   For writing functions which take variable numbers of arguments, we\n-   also provide the VA_OPEN, VA_CLOSE, and VA_FIXEDARG macros.  These\n-   hide the differences between K+R <varargs.h> and C89 <stdarg.h> more\n-   thoroughly than the simple VA_START() macro mentioned above.\n-\n-   VA_OPEN and VA_CLOSE are used *instead of* va_start and va_end.\n-   Immediately after VA_OPEN, put a sequence of VA_FIXEDARG calls\n-   corresponding to the list of fixed arguments.  Then use va_arg\n-   normally to get the variable arguments, or pass your va_list object\n-   around.  You do not declare the va_list yourself; VA_OPEN does it\n-   for you.\n-\n-   Here is a complete example:\n-\n-\tint\n-\tprintf VPARAMS ((const char *format, ...))\n-\t{\n-\t   int result;\n-\n-\t   VA_OPEN (ap, format);\n-\t   VA_FIXEDARG (ap, const char *, format);\n-\n-\t   result = vfprintf (stdout, format, ap);\n-\t   VA_CLOSE (ap);\n-\n-\t   return result;\n-\t}\n-\n-\n-   You can declare variables either before or after the VA_OPEN,\n-   VA_FIXEDARG sequence.  Also, VA_OPEN and VA_CLOSE are the beginning\n-   and end of a block.  They must appear at the same nesting level,\n-   and any variables declared after VA_OPEN go out of scope at\n-   VA_CLOSE.  Unfortunately, with a K+R compiler, that includes the\n-   argument list.  You can have multiple instances of VA_OPEN/VA_CLOSE\n-   pairs in a single function in case you need to traverse the\n-   argument list more than once.\n \n    For ease of writing code which uses GCC extensions but needs to be\n    portable to other compilers, we provide the GCC_VERSION macro that\n    simplifies testing __GNUC__ and __GNUC_MINOR__ together, and various\n    wrappers around __attribute__.  Also, __extension__ will be #defined\n-   to nothing if it doesn't work.  See below.\n-\n-   This header also defines a lot of obsolete macros:\n-   CONST, VOLATILE, SIGNED, PROTO, EXFUN, DEFUN, DEFUN_VOID,\n-   AND, DOTS, NOARGS.  Don't use them.  */\n+   to nothing if it doesn't work.  See below.  */\n \n #ifndef\t_ANSIDECL_H\n #define _ANSIDECL_H\t1\n@@ -149,28 +72,8 @@ So instead we use the macro below and test it against specific values.  */\n    C++ compilers, does not define __STDC__, though it acts as if this\n    was so. (Verified versions: 5.7, 6.2, 6.3, 6.5) */\n \n-#define ANSI_PROTOTYPES\t1\n #define PTR\t\tvoid *\n-#define PTRCONST\tvoid *const\n-#define LONG_DOUBLE\tlong double\n \n-/* PARAMS is often defined elsewhere (e.g. by libintl.h), so wrap it in\n-   a #ifndef.  */\n-#ifndef PARAMS\n-#define PARAMS(ARGS)\t\tARGS\n-#endif\n-\n-#define VPARAMS(ARGS)\t\tARGS\n-#define VA_START(VA_LIST, VAR)\tva_start(VA_LIST, VAR)\n-\n-/* variadic function helper macros */\n-/* \"struct Qdmy\" swallows the semicolon after VA_OPEN/VA_FIXEDARG's\n-   use without inhibiting further decls and without declaring an\n-   actual variable.  */\n-#define VA_OPEN(AP, VAR)\t{ va_list AP; va_start(AP, VAR); { struct Qdmy\n-#define VA_CLOSE(AP)\t\t} va_end(AP); }\n-#define VA_FIXEDARG(AP, T, N)\tstruct Qdmy\n- \n #undef const\n #undef volatile\n #undef signed\n@@ -188,35 +91,9 @@ So instead we use the macro below and test it against specific values.  */\n # endif\n #endif\n \n-/* These are obsolete.  Do not use.  */\n-#ifndef IN_GCC\n-#define CONST\t\tconst\n-#define VOLATILE\tvolatile\n-#define SIGNED\t\tsigned\n-\n-#define PROTO(type, name, arglist)\ttype name arglist\n-#define EXFUN(name, proto)\t\tname proto\n-#define DEFUN(name, arglist, args)\tname(args)\n-#define DEFUN_VOID(name)\t\tname(void)\n-#define AND\t\t,\n-#define DOTS\t\t, ...\n-#define NOARGS\t\tvoid\n-#endif /* ! IN_GCC */\n-\n #else\t/* Not ANSI C.  */\n \n-#undef  ANSI_PROTOTYPES\n #define PTR\t\tchar *\n-#define PTRCONST\tPTR\n-#define LONG_DOUBLE\tdouble\n-\n-#define PARAMS(args)\t\t()\n-#define VPARAMS(args)\t\t(va_alist) va_dcl\n-#define VA_START(va_list, var)\tva_start(va_list)\n-\n-#define VA_OPEN(AP, VAR)\t\t{ va_list AP; va_start(AP); { struct Qdmy\n-#define VA_CLOSE(AP)\t\t\t} va_end(AP); }\n-#define VA_FIXEDARG(AP, TYPE, NAME)\tTYPE NAME = va_arg(AP, TYPE)\n \n /* some systems define these in header files for non-ansi mode */\n #undef const\n@@ -228,20 +105,6 @@ So instead we use the macro below and test it against specific values.  */\n #define signed\n #define inline\n \n-#ifndef IN_GCC\n-#define CONST\n-#define VOLATILE\n-#define SIGNED\n-\n-#define PROTO(type, name, arglist)\ttype name ()\n-#define EXFUN(name, proto)\t\tname()\n-#define DEFUN(name, arglist, args)\tname arglist args;\n-#define DEFUN_VOID(name)\t\tname()\n-#define AND\t\t;\n-#define DOTS\n-#define NOARGS\n-#endif /* ! IN_GCC */\n-\n #endif\t/* ANSI C.  */\n \n /* Define macros for some gcc attributes.  This permits us to use the"}, {"sha": "78c42eb88f15240a5096cc18f39bccabd6737e40", "filename": "include/libiberty.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,7 +1,7 @@\n /* Function declarations for libiberty.\n \n    Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010, 2011, 2013 Free Software Foundation, Inc.\n    \n    Note - certain prototypes declared in this header file are for\n    functions whoes implementation copyright does not belong to the\n@@ -85,11 +85,11 @@ extern char **dupargv (char **) ATTRIBUTE_MALLOC;\n \n /* Expand \"@file\" arguments in argv.  */\n \n-extern void expandargv PARAMS ((int *, char ***));\n+extern void expandargv (int *, char ***);\n \n /* Write argv to an @-file, inserting necessary quoting.  */\n \n-extern int writeargv PARAMS ((char **, FILE *));\n+extern int writeargv (char **, FILE *);\n \n /* Return the number of elements in argv.  */\n "}, {"sha": "083ec79cf977dc988fa188f8fbc71fefd471ab28", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,3 +1,13 @@\n+2014-01-21  Tom Tromey  <tromey@redhat.com>\n+\n+\t* _doprint.c (checkit): Use stdarg, not VA_* macros.\n+\t* asprintf.c (asprintf): Use stdarg, not VA_* macros.\n+\t* concat.c (concat_length, concat_copy, concat_copy2, concat)\n+\t(reconcat): Use stdarg, not VA_* macros.\n+\t* snprintf.c (snprintf): Use stdarg, not VA_* macros.\n+\t* vasprintf.c (checkit): Use stdarg, not VA_* macros.\n+\t* vsnprintf.c (checkit): Use stdarg, not VA_* macros.\n+\n 2014-01-06  Mike Frysinger  <vapier@gentoo.org>\n \n \tPR other/56780"}, {"sha": "9723f32e6c055ebf5e27d013177be1687eff1c14", "filename": "libiberty/_doprnt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2F_doprnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2F_doprnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2F_doprnt.c?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -222,11 +222,11 @@ static int\n checkit (const char* format, ...)\n {\n   int result;\n-  VA_OPEN (args, format);\n-  VA_FIXEDARG (args, char *, format);\n+  va_list args;\n+  va_start (args, format);\n \n   result = _doprnt (format, args, stdout);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   return result;\n }"}, {"sha": "961ad4dbb002edad88b4feb3a53eb73f8ca14800", "filename": "libiberty/asprintf.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fasprintf.c?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,6 +1,6 @@\n /* Like sprintf but provides a pointer to malloc'd storage, which must\n    be freed by the caller.\n-   Copyright (C) 1997, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 2003, 2013 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n This file is part of the libiberty library.\n@@ -47,10 +47,9 @@ int\n asprintf (char **buf, const char *fmt, ...)\n {\n   int status;\n-  VA_OPEN (ap, fmt);\n-  VA_FIXEDARG (ap, char **, buf);\n-  VA_FIXEDARG (ap, const char *, fmt);\n+  va_list ap;\n+  va_start (ap, fmt);\n   status = vasprintf (buf, fmt, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   return status;\n }"}, {"sha": "7846a19393bde021841b75a7f06803c7d965c6dd", "filename": "libiberty/concat.c", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,5 +1,5 @@\n /* Concatenate variable number of strings.\n-   Copyright (C) 1991, 1994, 2001, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 2001, 2011, 2013 Free Software Foundation, Inc.\n    Written by Fred Fish @ Cygnus Support\n \n This file is part of the libiberty library.\n@@ -90,11 +90,11 @@ unsigned long\n concat_length (const char *first, ...)\n {\n   unsigned long length;\n+  va_list args;\n \n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_start (args, first);\n   length = vconcat_length (first, args);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   return length;\n }\n@@ -105,13 +105,12 @@ char *\n concat_copy (char *dst, const char *first, ...)\n {\n   char *save_dst;\n+  va_list args;\n \n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, char *, dst);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_start (args, first);\n   vconcat_copy (dst, first, args);\n   save_dst = dst; /* With K&R C, dst goes out of scope here.  */\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   return save_dst;\n }\n@@ -129,10 +128,10 @@ char *libiberty_concat_ptr;\n char *\n concat_copy2 (const char *first, ...)\n {\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_list args;\n+  va_start (args, first);\n   vconcat_copy (libiberty_concat_ptr, first, args);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   return libiberty_concat_ptr;\n }\n@@ -141,18 +140,17 @@ char *\n concat (const char *first, ...)\n {\n   char *newstr;\n+  va_list args;\n \n   /* First compute the size of the result and get sufficient memory.  */\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_start (args, first);\n   newstr = XNEWVEC (char, vconcat_length (first, args) + 1);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   /* Now copy the individual pieces to the result string. */\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_start (args, first);\n   vconcat_copy (newstr, first, args);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   return newstr;\n }\n@@ -179,22 +177,19 @@ char *\n reconcat (char *optr, const char *first, ...)\n {\n   char *newstr;\n+  va_list args;\n \n   /* First compute the size of the result and get sufficient memory.  */\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, char *, optr);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_start (args, first);\n   newstr = XNEWVEC (char, vconcat_length (first, args) + 1);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   /* Now copy the individual pieces to the result string. */\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, char *, optr);\n-  VA_FIXEDARG (args, const char *, first);\n+  va_start (args, first);\n   vconcat_copy (newstr, first, args);\n   if (optr) /* Done before VA_CLOSE so optr stays in scope for K&R C.  */\n     free (optr);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   return newstr;\n }"}, {"sha": "49bcd8300d240d48ca25923cd3654344e3371447", "filename": "libiberty/snprintf.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsnprintf.c?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,5 +1,5 @@\n /* Implement the snprintf function.\n-   Copyright (C) 2003, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2011, 2013 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.  This library is free\n@@ -53,11 +53,9 @@ int\n snprintf (char *s, size_t n, const char *format, ...)\n {\n   int result;\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, char *, s);\n-  VA_FIXEDARG (ap, size_t, n);\n-  VA_FIXEDARG (ap, const char *, format);\n+  va_list ap;\n+  va_start (ap, format);\n   result = vsnprintf (s, n, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   return result;\n }"}, {"sha": "492506037da6353214d063f6ea37f58e24af3abf", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,6 +1,6 @@\n /* Like vsprintf but provides a pointer to malloc'd storage, which must\n    be freed by the caller.\n-   Copyright (C) 1994, 2003, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 2003, 2011, 2013 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or\n@@ -165,10 +165,10 @@ static void ATTRIBUTE_PRINTF_1\n checkit (const char *format, ...)\n {\n   char *result;\n-  VA_OPEN (args, format);\n-  VA_FIXEDARG (args, const char *, format);\n+  va_list args;\n+  va_start (args, format);\n   vasprintf (&result, format, args);\n-  VA_CLOSE (args);\n+  va_end (args);\n \n   if (strlen (result) < (size_t) global_total_width)\n     printf (\"PASS: \");"}, {"sha": "2c441a72f603ae4bae0f34708d264650f9b951a8", "filename": "libiberty/vsnprintf.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fvsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d21de9dc8d2fb57be7c3c95f48679f19673702/libiberty%2Fvsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvsnprintf.c?ref=d2d21de9dc8d2fb57be7c3c95f48679f19673702", "patch": "@@ -1,5 +1,5 @@\n /* Implement the vsnprintf function.\n-   Copyright (C) 2003, 2004, 2005, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2011, 2013 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.  This library is free\n@@ -95,12 +95,10 @@ static int ATTRIBUTE_PRINTF_3\n checkit (char *s, size_t n, const char *format, ...)\n {\n   int result;\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, char *, s);\n-  VA_FIXEDARG (ap, size_t, n);\n-  VA_FIXEDARG (ap, const char *, format);\n+  va_list ap;\n+  va_start (ap, format);\n   result = vsnprintf (s, n, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   return result;\n }\n "}]}