{"sha": "048971cf4284e8eaf71060d3136495b1111793d9", "node_id": "C_kwDOANBUbNoAKDA0ODk3MWNmNDI4NGU4ZWFmNzEwNjBkMzEzNjQ5NWIxMTExNzkzZDk", "commit": {"author": {"name": "Jakub Dupak", "email": "dev@jakubdupak.com", "date": "2023-03-11T19:36:11Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-13T18:09:47Z"}, "message": "hir: Unify indentation approach with ast\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Indent::Indent): Move to separate file.\n\t(operator<<): Move to separate file.\n\t(Indent::increment): Move to separate file.\n\t(Indent::decrement): Move to separate file.\n\t* ast/rust-ast-dump.h (class Indent): Move to separate file.\n\t* hir/rust-hir-dump.cc (Dump::Dump): Use new indentation object.\n\t(Dump::go): Use new indentation object.\n\t(Dump::visit): Use new indention object.\n\t* hir/rust-hir-dump.h: Use new indentation object.\n\t* util/rust-dump.h: New file. Moved Indentation from rust-ast-dump.cc\n\nSigned-off-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "4aaaa577d034b747f1526c429dedf73dfc340117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aaaa577d034b747f1526c429dedf73dfc340117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048971cf4284e8eaf71060d3136495b1111793d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048971cf4284e8eaf71060d3136495b1111793d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048971cf4284e8eaf71060d3136495b1111793d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048971cf4284e8eaf71060d3136495b1111793d9/comments", "author": {"login": "jdupak", "id": 22683640, "node_id": "MDQ6VXNlcjIyNjgzNjQw", "avatar_url": "https://avatars.githubusercontent.com/u/22683640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdupak", "html_url": "https://github.com/jdupak", "followers_url": "https://api.github.com/users/jdupak/followers", "following_url": "https://api.github.com/users/jdupak/following{/other_user}", "gists_url": "https://api.github.com/users/jdupak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdupak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdupak/subscriptions", "organizations_url": "https://api.github.com/users/jdupak/orgs", "repos_url": "https://api.github.com/users/jdupak/repos", "events_url": "https://api.github.com/users/jdupak/events{/privacy}", "received_events_url": "https://api.github.com/users/jdupak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31fc7b0f6fb22e84a27dc68f69cb0fca9707879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31fc7b0f6fb22e84a27dc68f69cb0fca9707879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f31fc7b0f6fb22e84a27dc68f69cb0fca9707879"}], "stats": {"total": 192, "additions": 103, "deletions": 89}, "files": [{"sha": "3792f9607267cf3ab8caba8d85991a4c2e01c136", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=048971cf4284e8eaf71060d3136495b1111793d9", "patch": "@@ -21,27 +21,6 @@\n namespace Rust {\n namespace AST {\n \n-Indent::Indent () : tabs (0) {}\n-\n-std::ostream &\n-operator<< (std::ostream &stream, const Indent &indent)\n-{\n-  return stream << std::string (indent.tabs, '\\t');\n-}\n-\n-void\n-Indent::increment ()\n-{\n-  tabs++;\n-}\n-\n-void\n-Indent::decrement ()\n-{\n-  rust_assert (tabs != 0);\n-  tabs--;\n-}\n-\n Dump::Dump (std::ostream &stream) : stream (stream), indentation (Indent ()) {}\n \n void"}, {"sha": "4b76ec1a484662cee6a5fe6f7c8f20cbc0ebb4a2", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=048971cf4284e8eaf71060d3136495b1111793d9", "patch": "@@ -19,28 +19,14 @@\n #include \"rust-ast-visitor.h\"\n #include \"rust-ast.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-dump.h\"\n \n #ifndef RUST_AST_DUMP_H\n #define RUST_AST_DUMP_H\n \n namespace Rust {\n namespace AST {\n \n-// TODO: We might want to reuse this class somewhere else\n-class Indent\n-{\n-public:\n-  Indent ();\n-\n-  friend std::ostream &operator<< (std::ostream &stream, const Indent &indent);\n-\n-  void increment ();\n-  void decrement ();\n-\n-private:\n-  size_t tabs;\n-};\n-\n class Dump : public ASTVisitor\n {\n public:"}, {"sha": "52c17b8a979ed47303acf36bc681d2d5189a501f", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=048971cf4284e8eaf71060d3136495b1111793d9", "patch": "@@ -21,7 +21,7 @@\n namespace Rust {\n namespace HIR {\n \n-Dump::Dump (std::ostream &stream) : stream (stream), indent (0) {}\n+Dump::Dump (std::ostream &stream) : stream (stream) {}\n \n void\n Dump::go (HIR::Crate &crate)\n@@ -30,37 +30,37 @@ Dump::go (HIR::Crate &crate)\n   // inner attributes\n   if (!crate.inner_attrs.empty ())\n     {\n-      indent++;\n-      stream << std::string (indent, indent_char);\n+      indentation.increment();\n+      stream << indentation;\n       stream << \"inner_attrs: [\";\n       for (auto &attr : crate.inner_attrs)\n \tstream << attr.as_string ();\n       stream << \"],\" << std::endl;\n-      indent--;\n+      indentation.decrement();\n     }\n \n-  indent++;\n-  stream << std::string (indent, indent_char);\n+  indentation.increment();\n+  stream << indentation;\n   //\n \n   stream << \"items: [\";\n \n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   for (const auto &item : crate.items)\n     {\n       stream << std::endl;\n       item->accept_vis (*this);\n     }\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << \"],\" << std::endl;\n-  indent--;\n+  indentation.decrement();\n   //\n \n-  indent++;\n-  stream << std::string (indent, indent_char);\n+  indentation.increment();\n+  stream << indentation;\n   stream << \"node_mappings: \";\n   stream << crate.get_mappings ().as_string ();\n-  indent--;\n+  indentation.decrement();\n \n   stream << \"\\n}\" << std::endl;\n }\n@@ -157,9 +157,9 @@ Dump::visit (ArithmeticOrLogicalExpr &aole)\n \n   aole.visit_lhs (*this);\n   stream << \"\\n\";\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << operator_str << \"\\n\";\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   aole.visit_rhs (*this);\n }\n void\n@@ -236,7 +236,7 @@ void\n Dump::visit (BlockExpr &block_expr)\n {\n   stream << \"BlockExpr: [\";\n-  indent++;\n+  indentation.increment();\n   stream << std::endl;\n   // TODO: inner attributes\n \n@@ -246,20 +246,20 @@ Dump::visit (BlockExpr &block_expr)\n       auto &stmts = block_expr.get_statements ();\n       for (auto &stmt : stmts)\n \t{\n-\t  stream << std::string (indent, indent_char);\n+\t  stream << indentation;\n \t  stream << \"Stmt: {\\n\";\n-\t  // stream << std::string (indent, indent_char);\n+\t  // stream << indentation;\n \t  stmt->accept_vis (*this);\n \t  stream << \"\\n\";\n-\t  stream << std::string (indent, indent_char);\n+\t  stream << indentation;\n \t  stream << \"}\\n\";\n \t}\n     }\n \n   // // TODO: print tail expression if exists\n \n-  indent--;\n-  stream << std::string (indent, indent_char);\n+  indentation.decrement();\n+  stream << indentation;\n   stream << \"]\";\n }\n \n@@ -376,20 +376,20 @@ Dump::visit (UseDeclaration &)\n void\n Dump::visit (Function &func)\n {\n-  indent++;\n-  stream << std::string (indent, indent_char);\n+  indentation.increment();\n+  stream << indentation;\n   stream << \"Function {\" << std::endl;\n-  indent++;\n+  indentation.increment();\n \n   // function name\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << \"func_name: \";\n   auto func_name = func.get_function_name ();\n   stream << func_name;\n   stream << \",\\n\";\n \n   // return type\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << \"return_type: \";\n   if (func.has_return_type ())\n     {\n@@ -405,57 +405,57 @@ Dump::visit (Function &func)\n   // function params\n   if (func.has_function_params ())\n     {\n-      stream << std::string (indent, indent_char);\n+      stream << indentation;\n       stream << \"params: [\\n\";\n-      indent++;\n+      indentation.increment();\n       auto &func_params = func.get_function_params ();\n       for (const auto &item : func_params)\n \t{\n-\t  stream << std::string (indent, indent_char);\n+\t  stream << indentation;\n \t  stream << item.as_string ();\n \t  stream << \",\\n\";\n \t}\n \n       // parameter node mappings\n-      stream << std::string (indent, indent_char);\n+      stream << indentation;\n       stream << \"node_mappings: [\\n\";\n       for (const auto &item : func_params)\n \t{\n \t  auto nmap = item.get_mappings ();\n-\t  indent++;\n-\t  stream << std::string (indent, indent_char);\n+\t  indentation.increment();\n+\t  stream << indentation;\n \t  auto pname = item.param_name->as_string ();\n \t  stream << pname << \": \";\n \t  stream << nmap.as_string () << \",\\n\";\n-\t  indent--;\n+\t  indentation.decrement();\n \t}\n-      stream << std::string (indent, indent_char);\n+      stream << indentation;\n       stream << \"],\";\n-      indent--;\n+      indentation.decrement();\n       stream << \"\\n\";\n-      stream << std::string (indent, indent_char);\n+      stream << indentation;\n       stream << \"],\";\n       stream << \"\\n\";\n     }\n \n   // function body\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   auto &func_body = func.get_definition ();\n   func_body->accept_vis (*this);\n \n   // func node mappings\n   stream << \"\\n\";\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << \"node_mappings: \";\n   stream << func.get_impl_mappings ().as_string ();\n-  indent--;\n+  indentation.decrement();\n   stream << \"\\n\";\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << \"}\" << std::endl;\n   // TODO: get function definition and visit block\n \n   // stream << std::endl;\n-  indent--;\n+  indentation.decrement();\n }\n void\n Dump::visit (TypeAlias &)\n@@ -590,12 +590,12 @@ Dump::visit (EmptyStmt &)\n void\n Dump::visit (LetStmt &let_stmt)\n {\n-  indent++;\n+  indentation.increment();\n   // TODO: outer attributes\n-  stream << std::string (indent, indent_char);\n+  stream << indentation;\n   stream << \"LetStmt: {\\n\";\n-  indent++;\n-  stream << std::string (indent, indent_char);\n+  indentation.increment();\n+  stream << indentation;\n \n   auto var_pattern = let_stmt.get_pattern ();\n   stream << var_pattern->as_string ();\n@@ -610,20 +610,20 @@ Dump::visit (LetStmt &let_stmt)\n   if (let_stmt.has_init_expr ())\n     {\n       stream << \" = Expr: {\\n \";\n-      indent++;\n-      stream << std::string (indent, indent_char);\n+      indentation.increment();\n+      stream << indentation;\n       auto expr = let_stmt.get_init_expr ();\n       expr->accept_vis (*this);\n       stream << \"\\n\";\n-      stream << std::string (indent, indent_char);\n-      indent--;\n+      stream << indentation;\n+      indentation.decrement();\n       stream << \"}\\n\";\n     }\n-  indent--;\n-  stream << std::string (indent, indent_char);\n+  indentation.decrement();\n+  stream << indentation;\n   stream << \"}\\n\";\n \n-  indent--;\n+  indentation.decrement();\n }\n void\n Dump::visit (ExprStmtWithoutBlock &expr_stmt)"}, {"sha": "3f42d0481351a61522991d4a1f48e017888761ad", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=048971cf4284e8eaf71060d3136495b1111793d9", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-hir-visitor.h\"\n #include \"rust-hir.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-dump.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -33,9 +34,8 @@ class Dump : public HIRFullVisitor\n   void go (HIR::Crate &crate);\n \n private:\n+  Indent indentation;\n   std::ostream &stream;\n-  std::size_t indent; // current indentation level\n-  char indent_char = '\\t';\n \n   virtual void visit (Lifetime &) override;\n   virtual void visit (LifetimeParam &) override;"}, {"sha": "7fd0b365b9fae63735d0d6d874e72edcdc7381d7", "filename": "gcc/rust/util/rust-dump.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Futil%2Frust-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048971cf4284e8eaf71060d3136495b1111793d9/gcc%2Frust%2Futil%2Frust-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-dump.h?ref=048971cf4284e8eaf71060d3136495b1111793d9", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2021-2023 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Common definitions useful for textual dump of IRs (AST and HIR).\n+\n+#ifndef RUST_DUMP_H\n+#define RUST_DUMP_H\n+\n+namespace Rust {\n+\n+class Indent\n+{\n+public:\n+  Indent () = default;\n+\n+  friend std::ostream &operator<< (std::ostream &stream, const Indent &indent)\n+  {\n+    return stream << std::string (indent.tabs, '\\t');\n+  };\n+\n+  void increment () { tabs++; };\n+\n+  void decrement ()\n+  {\n+    rust_assert (tabs != 0);\n+    tabs--;\n+  };\n+\n+private:\n+  size_t tabs = 0;\n+};\n+} // namespace Rust\n+\n+#endif"}]}