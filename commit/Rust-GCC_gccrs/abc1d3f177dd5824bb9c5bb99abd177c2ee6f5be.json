{"sha": "abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjMWQzZjE3N2RkNTgyNGJiOWM1YmI5OWFiZDE3N2MyZWU2ZjViZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-17T23:33:10Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-17T23:33:10Z"}, "message": "(truncdfsf2, extendsfdf2): Changed from define_insn to expand_insn.\n\nEliminated a jmp pattern and the peephole patterns which are no longer\nneeded now that deferred addressing is supported.\n\nFrom-SVN: r3483", "tree": {"sha": "440d780e8f166c7a9ed8e9caaf6418413da17b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/440d780e8f166c7a9ed8e9caaf6418413da17b3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be/comments", "author": null, "committer": null, "parents": [{"sha": "4de54e922f4123559dba5215e0cd160dd7bcd264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de54e922f4123559dba5215e0cd160dd7bcd264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de54e922f4123559dba5215e0cd160dd7bcd264"}], "stats": {"total": 83, "additions": 28, "deletions": 55}, "files": [{"sha": "6b175d0c89c28cbfb346fcb2797de4c978aceb22", "filename": "gcc/config/we32k/we32k.md", "status": "modified", "additions": 28, "deletions": 55, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.md?ref=abc1d3f177dd5824bb9c5bb99abd177c2ee6f5be", "patch": "@@ -802,24 +802,29 @@\n \f\n ;; truncate instructions\n \n-(define_insn \"truncdfsf2\"\n-  [(clobber (reg:SI 0))\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (float_truncate:SF (match_operand:DF 1 \"general_operand\" \"orF\")))\n    (clobber (reg:SI 1))\n-   (clobber (reg:SI 2))\n-   (set (match_operand:SF 0 \"nonimmediate_operand\" \"=mr\")\n-        (float_truncate:SF (match_operand:DF 1 \"general_operand\" \"orF\")))]\n-  \"\"\n+   (clobber (reg:SI 2))]\n+  \"REGNO (operands[0]) == 0\"\n   \"*\n   {\n   output_push_double(&operands[1]);\n   output_asm_insn(\\\"call &2, _fdtos\\\");\n \n-  if (GET_CODE (operands[0]) != REG || REGNO (operands[0]) != 0)\n-    output_asm_insn(\\\"movw %%r0, %0\\\", operands);\n-\n   return \\\"\\\";\n   }\")\n \n+(define_expand \"truncdfsf2\"\n+  [(parallel [(set (reg:SF 0)\n+               (float_truncate:SF (match_operand:DF 1 \"general_operand\" \"orF\")))\n+              (clobber (reg:SI 1))\n+              (clobber (reg:SI 2))])\n+   (set (match_operand:SF 0 \"nonimmediate_operand\" \"=mr\")\n+        (reg:SF 0))]\n+  \"\"\n+  \"\")\n \n (define_insn \"truncsihi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=mr\")\n@@ -841,29 +846,28 @@\n \f\n ;; sign-extend move instructions\n \n-(define_insn \"extendsfdf2\"\n-  [(clobber (reg:SI 0))\n-   (clobber (reg:SI 1))\n-   (clobber (reg:SI 2))\n-   (set (match_operand:DF 0 \"nonimmediate_operand\" \"=or\")\n-        (float_extend:DF (match_operand:SF 1 \"general_operand\" \"mrF\")))]\n-  \"\"\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=r\")\n+        (float_extend:DF (match_operand:SF 1 \"general_operand\" \"mrF\")))\n+   (clobber (reg:SI 2))]\n+  \"REGNO (operands[0]) == 0\"\n   \"*\n   {\n-  rtx xoperands[2];\n-\n   output_asm_insn(\\\"pushw %1\\\", operands);\n   output_asm_insn(\\\"call &1, _fstod\\\");\n \n-  if (GET_CODE (operands[0]) != REG || REGNO (operands[0]) != 0) {\n-    xoperands[0] = operands[0];\n-    xoperands[1] = gen_rtx(REG, DFmode, 0);\n-    output_move_double(xoperands);\n-    }\n-\n   return \\\"\\\";\n   }\")\n \n+(define_expand \"extendsfdf2\"\n+  [(parallel [(set (reg:DF 0)\n+               (float_extend:DF (match_operand:SF 1 \"general_operand\" \"mrF\")))\n+              (clobber (reg:SI 2))])\n+   (set (match_operand:DF 0 \"nonimmediate_operand\" \"=or\")\n+        (reg:DF 0))]\n+  \"\"\n+  \"\")\n+\n (define_insn \"extendhisi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n         (sign_extend:SI (match_operand:HI 1 \"general_operand\" \"mri\")))]\n@@ -1189,11 +1193,6 @@\n \n ;; jump instructions\n \n-(define_insn \"\"\n-  [(set (pc) (mem:SI (match_operand:SI 0 \"address_operand\" \"p\")))]\n-  \"GET_CODE (operands[0]) != MEM\"\n-  \"jmp *%a0\")\n-\n (define_insn \"indirect_jump\"\n   [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))]\n   \"\"\n@@ -1203,29 +1202,3 @@\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"jmp %l0\")\n-\f\n-;; peephole optimizations\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"nonimmediate_operand\" \"or\"))\n-   (set (match_operand:SI 2 \"register_operand\" \"=r\")\n-        (mem:SI (match_dup 0)))]\n-  \"REGNO (operands[0]) == REGNO (operands[2]) && (REG_P (operands[1]) || offsettable_memref_p (operands[1]))\"\n-  \"movw %a1, %0\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"nonimmediate_operand\" \"or\"))\n-   (set (match_operand:HI 2 \"register_operand\" \"=r\")\n-        (mem:HI (match_dup 0)))]\n-  \"REGNO (operands[0]) == REGNO (operands[2]) && (REG_P (operands[1]) || offsettable_memref_p (operands[1]))\"\n-  \"movh %a1, %0\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"nonimmediate_operand\" \"or\"))\n-   (set (match_operand:QI 2 \"register_operand\" \"=r\")\n-        (mem:QI (match_dup 0)))]\n-  \"REGNO (operands[0]) == REGNO (operands[2]) && (REG_P (operands[1]) || offsettable_memref_p (operands[1]))\"\n-  \"movb %a1, %0\")"}]}