{"sha": "b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmZDBiNzFmZTc0ZDExZjM3ZTZmNjc5ZDNlNzJiYWQyM2I4MmFhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-08-19T15:25:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-19T15:25:05Z"}, "message": "rdseedintrin.h (_rdseed16_step, [...]): Uglify argument names and/or local variable names in inline functions.\n\n\t* config/i386/rdseedintrin.h (_rdseed16_step, _rdseed32_step,\n\t_rdseed64_step): Uglify argument names and/or local variable names\n\tin inline functions.\n\t* config/i386/rtmintrin.h (_xabort): Likewise.\n\t* config/i386/avx512vlintrin.h (_mm256_ternarylogic_epi64,\n\t_mm256_mask_ternarylogic_epi64, _mm256_maskz_ternarylogic_epi64,\n\t_mm256_ternarylogic_epi32, _mm256_mask_ternarylogic_epi32,\n\t_mm256_maskz_ternarylogic_epi32, _mm_ternarylogic_epi64,\n\t_mm_mask_ternarylogic_epi64, _mm_maskz_ternarylogic_epi64,\n\t_mm_ternarylogic_epi32, _mm_mask_ternarylogic_epi32,\n\t_mm_maskz_ternarylogic_epi32): Likewise.\n\t* config/i386/lwpintrin.h (__llwpcb, __lwpval32, __lwpval64,\n\t__lwpins32, __lwpins64): Likewise.\n\t* config/i386/avx2intrin.h (_mm_i32gather_pd, _mm_mask_i32gather_pd,\n\t_mm256_i32gather_pd, _mm256_mask_i32gather_pd, _mm_i64gather_pd,\n\t_mm_mask_i64gather_pd, _mm256_i64gather_pd, _mm256_mask_i64gather_pd,\n\t_mm_i32gather_ps, _mm_mask_i32gather_ps, _mm256_i32gather_ps,\n\t_mm256_mask_i32gather_ps, _mm_i64gather_ps, _mm_mask_i64gather_ps,\n\t_mm256_i64gather_ps, _mm256_mask_i64gather_ps, _mm_i32gather_epi64,\n\t_mm_mask_i32gather_epi64, _mm256_i32gather_epi64,\n\t_mm256_mask_i32gather_epi64, _mm_i64gather_epi64,\n\t_mm_mask_i64gather_epi64, _mm256_i64gather_epi64,\n\t_mm256_mask_i64gather_epi64, _mm_i32gather_epi32,\n\t_mm_mask_i32gather_epi32, _mm256_i32gather_epi32,\n\t_mm256_mask_i32gather_epi32, _mm_i64gather_epi32,\n\t_mm_mask_i64gather_epi32, _mm256_i64gather_epi32,\n\t_mm256_mask_i64gather_epi32): Likewise.\n\t* config/i386/pmm_malloc.h (_mm_malloc, _mm_free): Likewise.\n\t* config/i386/ia32intrin.h (__writeeflags): Likewise.\n\t* config/i386/pkuintrin.h (_wrpkru): Likewise.\n\t* config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd,\n\t_mm512_mask_prefetch_i32gather_ps, _mm512_mask_prefetch_i64gather_pd,\n\t_mm512_mask_prefetch_i64gather_ps, _mm512_prefetch_i32scatter_pd,\n\t_mm512_prefetch_i32scatter_ps, _mm512_mask_prefetch_i32scatter_pd,\n\t_mm512_mask_prefetch_i32scatter_ps, _mm512_prefetch_i64scatter_pd,\n\t_mm512_prefetch_i64scatter_ps, _mm512_mask_prefetch_i64scatter_pd,\n\t_mm512_mask_prefetch_i64scatter_ps): Likewise.\n\t* config/i386/gmm_malloc.h (_mm_malloc, _mm_free): Likewise.\n\t* config/i386/avx512fintrin.h (_mm512_ternarylogic_epi64,\n\t_mm512_mask_ternarylogic_epi64, _mm512_maskz_ternarylogic_epi64,\n\t_mm512_ternarylogic_epi32, _mm512_mask_ternarylogic_epi32,\n\t_mm512_maskz_ternarylogic_epi32, _mm512_i32gather_ps,\n\t_mm512_mask_i32gather_ps, _mm512_i32gather_pd, _mm512_i64gather_ps,\n\t_mm512_i64gather_pd, _mm512_i32gather_epi32, _mm512_i32gather_epi64,\n\t_mm512_i64gather_epi32, _mm512_i64gather_epi64): Likewise.\n\nFrom-SVN: r239617", "tree": {"sha": "5a4cadefc0a155b8793e5d2a70e29bcf880a5125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a4cadefc0a155b8793e5d2a70e29bcf880a5125"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31c2bc2e0dbf30472c2b6501fd085bfc50ccb8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c2bc2e0dbf30472c2b6501fd085bfc50ccb8ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31c2bc2e0dbf30472c2b6501fd085bfc50ccb8ad"}], "stats": {"total": 878, "additions": 466, "deletions": 412}, "files": [{"sha": "04ad7c1c316fb190f6d1d2ed4dfd2e8e7a184b72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -1,5 +1,51 @@\n 2016-08-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/rdseedintrin.h (_rdseed16_step, _rdseed32_step,\n+\t_rdseed64_step): Uglify argument names and/or local variable names\n+\tin inline functions.\n+\t* config/i386/rtmintrin.h (_xabort): Likewise.\n+\t* config/i386/avx512vlintrin.h (_mm256_ternarylogic_epi64,\n+\t_mm256_mask_ternarylogic_epi64, _mm256_maskz_ternarylogic_epi64,\n+\t_mm256_ternarylogic_epi32, _mm256_mask_ternarylogic_epi32,\n+\t_mm256_maskz_ternarylogic_epi32, _mm_ternarylogic_epi64,\n+\t_mm_mask_ternarylogic_epi64, _mm_maskz_ternarylogic_epi64,\n+\t_mm_ternarylogic_epi32, _mm_mask_ternarylogic_epi32,\n+\t_mm_maskz_ternarylogic_epi32): Likewise.\n+\t* config/i386/lwpintrin.h (__llwpcb, __lwpval32, __lwpval64,\n+\t__lwpins32, __lwpins64): Likewise.\n+\t* config/i386/avx2intrin.h (_mm_i32gather_pd, _mm_mask_i32gather_pd,\n+\t_mm256_i32gather_pd, _mm256_mask_i32gather_pd, _mm_i64gather_pd,\n+\t_mm_mask_i64gather_pd, _mm256_i64gather_pd, _mm256_mask_i64gather_pd,\n+\t_mm_i32gather_ps, _mm_mask_i32gather_ps, _mm256_i32gather_ps,\n+\t_mm256_mask_i32gather_ps, _mm_i64gather_ps, _mm_mask_i64gather_ps,\n+\t_mm256_i64gather_ps, _mm256_mask_i64gather_ps, _mm_i32gather_epi64,\n+\t_mm_mask_i32gather_epi64, _mm256_i32gather_epi64,\n+\t_mm256_mask_i32gather_epi64, _mm_i64gather_epi64,\n+\t_mm_mask_i64gather_epi64, _mm256_i64gather_epi64,\n+\t_mm256_mask_i64gather_epi64, _mm_i32gather_epi32,\n+\t_mm_mask_i32gather_epi32, _mm256_i32gather_epi32,\n+\t_mm256_mask_i32gather_epi32, _mm_i64gather_epi32,\n+\t_mm_mask_i64gather_epi32, _mm256_i64gather_epi32,\n+\t_mm256_mask_i64gather_epi32): Likewise.\n+\t* config/i386/pmm_malloc.h (_mm_malloc, _mm_free): Likewise.\n+\t* config/i386/ia32intrin.h (__writeeflags): Likewise.\n+\t* config/i386/pkuintrin.h (_wrpkru): Likewise.\n+\t* config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd,\n+\t_mm512_mask_prefetch_i32gather_ps, _mm512_mask_prefetch_i64gather_pd,\n+\t_mm512_mask_prefetch_i64gather_ps, _mm512_prefetch_i32scatter_pd,\n+\t_mm512_prefetch_i32scatter_ps, _mm512_mask_prefetch_i32scatter_pd,\n+\t_mm512_mask_prefetch_i32scatter_ps, _mm512_prefetch_i64scatter_pd,\n+\t_mm512_prefetch_i64scatter_ps, _mm512_mask_prefetch_i64scatter_pd,\n+\t_mm512_mask_prefetch_i64scatter_ps): Likewise.\n+\t* config/i386/gmm_malloc.h (_mm_malloc, _mm_free): Likewise.\n+\t* config/i386/avx512fintrin.h (_mm512_ternarylogic_epi64,\n+\t_mm512_mask_ternarylogic_epi64, _mm512_maskz_ternarylogic_epi64,\n+\t_mm512_ternarylogic_epi32, _mm512_mask_ternarylogic_epi32,\n+\t_mm512_maskz_ternarylogic_epi32, _mm512_i32gather_ps,\n+\t_mm512_mask_i32gather_ps, _mm512_i32gather_pd, _mm512_i64gather_ps,\n+\t_mm512_i64gather_pd, _mm512_i32gather_epi32, _mm512_i32gather_epi64,\n+\t_mm512_i64gather_epi32, _mm512_i64gather_epi64): Likewise.\n+\n \t* config/i386/fxsrintrin.h (_fxsave): Remove return keyword in inlines\n \treturning void.\n \t(_fxrstor, _fxsave64, _fxrstor64): Likewise."}, {"sha": "0cb6d2c896379d57e0026375c98cfd390d652199", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 246, "deletions": 242, "changes": 488, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -1246,422 +1246,426 @@ _mm_srlv_epi64 (__m128i __X, __m128i __Y)\n #ifdef __OPTIMIZE__\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32gather_pd (double const *base, __m128i index, const int scale)\n+_mm_i32gather_pd (double const *__base, __m128i __index, const int __scale)\n {\n-  __v2df zero = _mm_setzero_pd ();\n-  __v2df mask = _mm_cmpeq_pd (zero, zero);\n+  __v2df __zero = _mm_setzero_pd ();\n+  __v2df __mask = _mm_cmpeq_pd (__zero, __zero);\n \n   return (__m128d) __builtin_ia32_gathersiv2df (_mm_undefined_pd (),\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32gather_pd (__m128d src, double const *base, __m128i index,\n-\t\t       __m128d mask, const int scale)\n+_mm_mask_i32gather_pd (__m128d __src, double const *__base, __m128i __index,\n+\t\t       __m128d __mask, const int __scale)\n {\n-  return (__m128d) __builtin_ia32_gathersiv2df ((__v2df)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\t(__v2df)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128d) __builtin_ia32_gathersiv2df ((__v2df)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t(__v2df)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32gather_pd (double const *base, __m128i index, const int scale)\n+_mm256_i32gather_pd (double const *__base, __m128i __index, const int __scale)\n {\n-  __v4df zero = _mm256_setzero_pd ();\n-  __v4df mask = _mm256_cmp_pd (zero, zero, _CMP_EQ_OQ);\n+  __v4df __zero = _mm256_setzero_pd ();\n+  __v4df __mask = _mm256_cmp_pd (__zero, __zero, _CMP_EQ_OQ);\n \n   return (__m256d) __builtin_ia32_gathersiv4df (_mm256_undefined_pd (),\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32gather_pd (__m256d src, double const *base,\n-\t\t\t  __m128i index, __m256d mask, const int scale)\n+_mm256_mask_i32gather_pd (__m256d __src, double const *__base,\n+\t\t\t  __m128i __index, __m256d __mask, const int __scale)\n {\n-  return (__m256d) __builtin_ia32_gathersiv4df ((__v4df)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\t(__v4df)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m256d) __builtin_ia32_gathersiv4df ((__v4df)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t(__v4df)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64gather_pd (double const *base, __m128i index, const int scale)\n+_mm_i64gather_pd (double const *__base, __m128i __index, const int __scale)\n {\n-  __v2df src = _mm_setzero_pd ();\n-  __v2df mask = _mm_cmpeq_pd (src, src);\n+  __v2df __src = _mm_setzero_pd ();\n+  __v2df __mask = _mm_cmpeq_pd (__src, __src);\n \n-  return (__m128d) __builtin_ia32_gatherdiv2df (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m128d) __builtin_ia32_gatherdiv2df (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64gather_pd (__m128d src, double const *base, __m128i index,\n-\t\t       __m128d mask, const int scale)\n+_mm_mask_i64gather_pd (__m128d __src, double const *__base, __m128i __index,\n+\t\t       __m128d __mask, const int __scale)\n {\n-  return (__m128d) __builtin_ia32_gatherdiv2df ((__v2df)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\t(__v2df)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128d) __builtin_ia32_gatherdiv2df ((__v2df)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t(__v2df)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64gather_pd (double const *base, __m256i index, const int scale)\n+_mm256_i64gather_pd (double const *__base, __m256i __index, const int __scale)\n {\n-  __v4df src = _mm256_setzero_pd ();\n-  __v4df mask = _mm256_cmp_pd (src, src, _CMP_EQ_OQ);\n+  __v4df __src = _mm256_setzero_pd ();\n+  __v4df __mask = _mm256_cmp_pd (__src, __src, _CMP_EQ_OQ);\n \n-  return (__m256d) __builtin_ia32_gatherdiv4df (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4di)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m256d) __builtin_ia32_gatherdiv4df (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4di)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64gather_pd (__m256d src, double const *base,\n-\t\t\t  __m256i index, __m256d mask, const int scale)\n+_mm256_mask_i64gather_pd (__m256d __src, double const *__base,\n+\t\t\t  __m256i __index, __m256d __mask, const int __scale)\n {\n-  return (__m256d) __builtin_ia32_gatherdiv4df ((__v4df)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4di)index,\n-\t\t\t\t\t\t(__v4df)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m256d) __builtin_ia32_gatherdiv4df ((__v4df)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4di)__index,\n+\t\t\t\t\t\t(__v4df)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32gather_ps (float const *base, __m128i index, const int scale)\n+_mm_i32gather_ps (float const *__base, __m128i __index, const int __scale)\n {\n-  __v4sf src = _mm_setzero_ps ();\n-  __v4sf mask = _mm_cmpeq_ps (src, src);\n+  __v4sf __src = _mm_setzero_ps ();\n+  __v4sf __mask = _mm_cmpeq_ps (__src, __src);\n \n-  return (__m128) __builtin_ia32_gathersiv4sf (src,\n-\t\t\t\t\t       base,\n-\t\t\t\t\t       (__v4si)index,\n-\t\t\t\t\t       mask,\n-\t\t\t\t\t       scale);\n+  return (__m128) __builtin_ia32_gathersiv4sf (__src,\n+\t\t\t\t\t       __base,\n+\t\t\t\t\t       (__v4si)__index,\n+\t\t\t\t\t       __mask,\n+\t\t\t\t\t       __scale);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32gather_ps (__m128 src, float const *base, __m128i index,\n-\t\t       __m128 mask, const int scale)\n+_mm_mask_i32gather_ps (__m128 __src, float const *__base, __m128i __index,\n+\t\t       __m128 __mask, const int __scale)\n {\n-  return (__m128) __builtin_ia32_gathersiv4sf ((__v4sf)src,\n-\t\t\t\t\t       base,\n-\t\t\t\t\t       (__v4si)index,\n-\t\t\t\t\t       (__v4sf)mask,\n-\t\t\t\t\t       scale);\n+  return (__m128) __builtin_ia32_gathersiv4sf ((__v4sf)__src,\n+\t\t\t\t\t       __base,\n+\t\t\t\t\t       (__v4si)__index,\n+\t\t\t\t\t       (__v4sf)__mask,\n+\t\t\t\t\t       __scale);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32gather_ps (float const *base, __m256i index, const int scale)\n+_mm256_i32gather_ps (float const *__base, __m256i __index, const int __scale)\n {\n-  __v8sf src = _mm256_setzero_ps ();\n-  __v8sf mask = _mm256_cmp_ps (src, src, _CMP_EQ_OQ);\n+  __v8sf __src = _mm256_setzero_ps ();\n+  __v8sf __mask = _mm256_cmp_ps (__src, __src, _CMP_EQ_OQ);\n \n-  return (__m256) __builtin_ia32_gathersiv8sf (src,\n-\t\t\t\t\t       base,\n-\t\t\t\t\t       (__v8si)index,\n-\t\t\t\t\t       mask,\n-\t\t\t\t\t       scale);\n+  return (__m256) __builtin_ia32_gathersiv8sf (__src,\n+\t\t\t\t\t       __base,\n+\t\t\t\t\t       (__v8si)__index,\n+\t\t\t\t\t       __mask,\n+\t\t\t\t\t       __scale);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32gather_ps (__m256 src, float const *base,\n-\t\t\t  __m256i index, __m256 mask, const int scale)\n+_mm256_mask_i32gather_ps (__m256 __src, float const *__base,\n+\t\t\t  __m256i __index, __m256 __mask, const int __scale)\n {\n-  return (__m256) __builtin_ia32_gathersiv8sf ((__v8sf)src,\n-\t\t\t\t\t       base,\n-\t\t\t\t\t       (__v8si)index,\n-\t\t\t\t\t       (__v8sf)mask,\n-\t\t\t\t\t       scale);\n+  return (__m256) __builtin_ia32_gathersiv8sf ((__v8sf)__src,\n+\t\t\t\t\t       __base,\n+\t\t\t\t\t       (__v8si)__index,\n+\t\t\t\t\t       (__v8sf)__mask,\n+\t\t\t\t\t       __scale);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64gather_ps (float const *base, __m128i index, const int scale)\n+_mm_i64gather_ps (float const *__base, __m128i __index, const int __scale)\n {\n-  __v4sf src = _mm_setzero_ps ();\n-  __v4sf mask = _mm_cmpeq_ps (src, src);\n+  __v4sf __src = _mm_setzero_ps ();\n+  __v4sf __mask = _mm_cmpeq_ps (__src, __src);\n \n-  return (__m128) __builtin_ia32_gatherdiv4sf (src,\n-\t\t\t\t\t       base,\n-\t\t\t\t\t       (__v2di)index,\n-\t\t\t\t\t       mask,\n-\t\t\t\t\t       scale);\n+  return (__m128) __builtin_ia32_gatherdiv4sf (__src,\n+\t\t\t\t\t       __base,\n+\t\t\t\t\t       (__v2di)__index,\n+\t\t\t\t\t       __mask,\n+\t\t\t\t\t       __scale);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64gather_ps (__m128 src, float const *base, __m128i index,\n-\t\t       __m128 mask, const int scale)\n+_mm_mask_i64gather_ps (__m128 __src, float const *__base, __m128i __index,\n+\t\t       __m128 __mask, const int __scale)\n {\n-  return (__m128) __builtin_ia32_gatherdiv4sf ((__v4sf)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\t(__v4sf)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128) __builtin_ia32_gatherdiv4sf ((__v4sf)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t(__v4sf)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64gather_ps (float const *base, __m256i index, const int scale)\n+_mm256_i64gather_ps (float const *__base, __m256i __index, const int __scale)\n {\n-  __v4sf src = _mm_setzero_ps ();\n-  __v4sf mask = _mm_cmpeq_ps (src, src);\n+  __v4sf __src = _mm_setzero_ps ();\n+  __v4sf __mask = _mm_cmpeq_ps (__src, __src);\n \n-  return (__m128) __builtin_ia32_gatherdiv4sf256 (src,\n-\t\t\t\t\t\t  base,\n-\t\t\t\t\t\t  (__v4di)index,\n-\t\t\t\t\t\t  mask,\n-\t\t\t\t\t\t  scale);\n+  return (__m128) __builtin_ia32_gatherdiv4sf256 (__src,\n+\t\t\t\t\t\t  __base,\n+\t\t\t\t\t\t  (__v4di)__index,\n+\t\t\t\t\t\t  __mask,\n+\t\t\t\t\t\t  __scale);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64gather_ps (__m128 src, float const *base,\n-\t\t\t  __m256i index, __m128 mask, const int scale)\n+_mm256_mask_i64gather_ps (__m128 __src, float const *__base,\n+\t\t\t  __m256i __index, __m128 __mask, const int __scale)\n {\n-  return (__m128) __builtin_ia32_gatherdiv4sf256 ((__v4sf)src,\n-\t\t\t\t\t\t  base,\n-\t\t\t\t\t\t  (__v4di)index,\n-\t\t\t\t\t\t  (__v4sf)mask,\n-\t\t\t\t\t\t  scale);\n+  return (__m128) __builtin_ia32_gatherdiv4sf256 ((__v4sf)__src,\n+\t\t\t\t\t\t  __base,\n+\t\t\t\t\t\t  (__v4di)__index,\n+\t\t\t\t\t\t  (__v4sf)__mask,\n+\t\t\t\t\t\t  __scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32gather_epi64 (long long int const *base,\n-\t\t     __m128i index, const int scale)\n+_mm_i32gather_epi64 (long long int const *__base,\n+\t\t     __m128i __index, const int __scale)\n {\n-  __v2di src = __extension__ (__v2di){ 0, 0 };\n-  __v2di mask = __extension__ (__v2di){ ~0, ~0 };\n+  __v2di __src = __extension__ (__v2di){ 0, 0 };\n+  __v2di __mask = __extension__ (__v2di){ ~0, ~0 };\n \n-  return (__m128i) __builtin_ia32_gathersiv2di (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gathersiv2di (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32gather_epi64 (__m128i src, long long int const *base,\n-\t\t\t  __m128i index, __m128i mask, const int scale)\n+_mm_mask_i32gather_epi64 (__m128i __src, long long int const *__base,\n+\t\t\t  __m128i __index, __m128i __mask, const int __scale)\n {\n-  return (__m128i) __builtin_ia32_gathersiv2di ((__v2di)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\t(__v2di)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gathersiv2di ((__v2di)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t(__v2di)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32gather_epi64 (long long int const *base,\n-\t\t\t__m128i index, const int scale)\n+_mm256_i32gather_epi64 (long long int const *__base,\n+\t\t\t__m128i __index, const int __scale)\n {\n-  __v4di src = __extension__ (__v4di){ 0, 0, 0, 0 };\n-  __v4di mask = __extension__ (__v4di){ ~0, ~0, ~0, ~0 };\n+  __v4di __src = __extension__ (__v4di){ 0, 0, 0, 0 };\n+  __v4di __mask = __extension__ (__v4di){ ~0, ~0, ~0, ~0 };\n \n-  return (__m256i) __builtin_ia32_gathersiv4di (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m256i) __builtin_ia32_gathersiv4di (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32gather_epi64 (__m256i src, long long int const *base,\n-\t\t\t     __m128i index, __m256i mask, const int scale)\n+_mm256_mask_i32gather_epi64 (__m256i __src, long long int const *__base,\n+\t\t\t     __m128i __index, __m256i __mask,\n+\t\t\t     const int __scale)\n {\n-  return (__m256i) __builtin_ia32_gathersiv4di ((__v4di)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\t(__v4di)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m256i) __builtin_ia32_gathersiv4di ((__v4di)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t(__v4di)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64gather_epi64 (long long int const *base,\n-\t\t     __m128i index, const int scale)\n+_mm_i64gather_epi64 (long long int const *__base,\n+\t\t     __m128i __index, const int __scale)\n {\n-  __v2di src = __extension__ (__v2di){ 0, 0 };\n-  __v2di mask = __extension__ (__v2di){ ~0, ~0 };\n+  __v2di __src = __extension__ (__v2di){ 0, 0 };\n+  __v2di __mask = __extension__ (__v2di){ ~0, ~0 };\n \n-  return (__m128i) __builtin_ia32_gatherdiv2di (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gatherdiv2di (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64gather_epi64 (__m128i src, long long int const *base, __m128i index,\n-\t\t\t  __m128i mask, const int scale)\n+_mm_mask_i64gather_epi64 (__m128i __src, long long int const *__base,\n+\t\t\t  __m128i __index, __m128i __mask, const int __scale)\n {\n-  return (__m128i) __builtin_ia32_gatherdiv2di ((__v2di)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\t(__v2di)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gatherdiv2di ((__v2di)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t(__v2di)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64gather_epi64 (long long int const *base,\n-\t\t\t__m256i index, const int scale)\n+_mm256_i64gather_epi64 (long long int const *__base,\n+\t\t\t__m256i __index, const int __scale)\n {\n-  __v4di src = __extension__ (__v4di){ 0, 0, 0, 0 };\n-  __v4di mask = __extension__ (__v4di){ ~0, ~0, ~0, ~0 };\n+  __v4di __src = __extension__ (__v4di){ 0, 0, 0, 0 };\n+  __v4di __mask = __extension__ (__v4di){ ~0, ~0, ~0, ~0 };\n \n-  return (__m256i) __builtin_ia32_gatherdiv4di (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4di)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m256i) __builtin_ia32_gatherdiv4di (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4di)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64gather_epi64 (__m256i src, long long int const *base,\n-\t\t\t     __m256i index, __m256i mask, const int scale)\n+_mm256_mask_i64gather_epi64 (__m256i __src, long long int const *__base,\n+\t\t\t     __m256i __index, __m256i __mask,\n+\t\t\t     const int __scale)\n {\n-  return (__m256i) __builtin_ia32_gatherdiv4di ((__v4di)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4di)index,\n-\t\t\t\t\t\t(__v4di)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m256i) __builtin_ia32_gatherdiv4di ((__v4di)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4di)__index,\n+\t\t\t\t\t\t(__v4di)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32gather_epi32 (int const *base, __m128i index, const int scale)\n+_mm_i32gather_epi32 (int const *__base, __m128i __index, const int __scale)\n {\n-  __v4si src = __extension__ (__v4si){ 0, 0, 0, 0 };\n-  __v4si mask = __extension__ (__v4si){ ~0, ~0, ~0, ~0 };\n+  __v4si __src = __extension__ (__v4si){ 0, 0, 0, 0 };\n+  __v4si __mask = __extension__ (__v4si){ ~0, ~0, ~0, ~0 };\n \n-  return (__m128i) __builtin_ia32_gathersiv4si (src,\n-\t\t\t\t\t       base,\n-\t\t\t\t\t       (__v4si)index,\n-\t\t\t\t\t       mask,\n-\t\t\t\t\t       scale);\n+  return (__m128i) __builtin_ia32_gathersiv4si (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32gather_epi32 (__m128i src, int const *base, __m128i index,\n-\t\t\t  __m128i mask, const int scale)\n+_mm_mask_i32gather_epi32 (__m128i __src, int const *__base, __m128i __index,\n+\t\t\t  __m128i __mask, const int __scale)\n {\n-  return (__m128i) __builtin_ia32_gathersiv4si ((__v4si)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v4si)index,\n-\t\t\t\t\t\t(__v4si)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gathersiv4si ((__v4si)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t(__v4si)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32gather_epi32 (int const *base, __m256i index, const int scale)\n+_mm256_i32gather_epi32 (int const *__base, __m256i __index, const int __scale)\n {\n-  __v8si src = __extension__ (__v8si){ 0, 0, 0, 0, 0, 0, 0, 0 };\n-  __v8si mask = __extension__ (__v8si){ ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0 };\n+  __v8si __src = __extension__ (__v8si){ 0, 0, 0, 0, 0, 0, 0, 0 };\n+  __v8si __mask = __extension__ (__v8si){ ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0 };\n \n-  return (__m256i) __builtin_ia32_gathersiv8si (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v8si)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m256i) __builtin_ia32_gathersiv8si (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v8si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32gather_epi32 (__m256i src, int const *base,\n-\t\t\t     __m256i index, __m256i mask, const int scale)\n+_mm256_mask_i32gather_epi32 (__m256i __src, int const *__base,\n+\t\t\t     __m256i __index, __m256i __mask,\n+\t\t\t     const int __scale)\n {\n-  return (__m256i) __builtin_ia32_gathersiv8si ((__v8si)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v8si)index,\n-\t\t\t\t\t\t(__v8si)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m256i) __builtin_ia32_gathersiv8si ((__v8si)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v8si)__index,\n+\t\t\t\t\t\t(__v8si)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64gather_epi32 (int const *base, __m128i index, const int scale)\n+_mm_i64gather_epi32 (int const *__base, __m128i __index, const int __scale)\n {\n-  __v4si src = __extension__ (__v4si){ 0, 0, 0, 0 };\n-  __v4si mask = __extension__ (__v4si){ ~0, ~0, ~0, ~0 };\n+  __v4si __src = __extension__ (__v4si){ 0, 0, 0, 0 };\n+  __v4si __mask = __extension__ (__v4si){ ~0, ~0, ~0, ~0 };\n \n-  return (__m128i) __builtin_ia32_gatherdiv4si (src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\tmask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gatherdiv4si (__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64gather_epi32 (__m128i src, int const *base, __m128i index,\n-\t\t\t  __m128i mask, const int scale)\n+_mm_mask_i64gather_epi32 (__m128i __src, int const *__base, __m128i __index,\n+\t\t\t  __m128i __mask, const int __scale)\n {\n-  return (__m128i) __builtin_ia32_gatherdiv4si ((__v4si)src,\n-\t\t\t\t\t\tbase,\n-\t\t\t\t\t\t(__v2di)index,\n-\t\t\t\t\t\t(__v4si)mask,\n-\t\t\t\t\t\tscale);\n+  return (__m128i) __builtin_ia32_gatherdiv4si ((__v4si)__src,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t(__v4si)__mask,\n+\t\t\t\t\t\t__scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64gather_epi32 (int const *base, __m256i index, const int scale)\n+_mm256_i64gather_epi32 (int const *__base, __m256i __index, const int __scale)\n {\n-  __v4si src = __extension__ (__v4si){ 0, 0, 0, 0 };\n-  __v4si mask = __extension__ (__v4si){ ~0, ~0, ~0, ~0 };\n+  __v4si __src = __extension__ (__v4si){ 0, 0, 0, 0 };\n+  __v4si __mask = __extension__ (__v4si){ ~0, ~0, ~0, ~0 };\n \n-  return (__m128i) __builtin_ia32_gatherdiv4si256 (src,\n-\t\t\t\t\t\t  base,\n-\t\t\t\t\t\t  (__v4di)index,\n-\t\t\t\t\t\t  mask,\n-\t\t\t\t\t\t  scale);\n+  return (__m128i) __builtin_ia32_gatherdiv4si256 (__src,\n+\t\t\t\t\t\t   __base,\n+\t\t\t\t\t\t   (__v4di)__index,\n+\t\t\t\t\t\t   __mask,\n+\t\t\t\t\t\t   __scale);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64gather_epi32 (__m128i src, int const *base,\n-\t\t\t     __m256i index, __m128i mask, const int scale)\n+_mm256_mask_i64gather_epi32 (__m128i __src, int const *__base,\n+\t\t\t     __m256i __index, __m128i __mask,\n+\t\t\t     const int __scale)\n {\n-  return (__m128i) __builtin_ia32_gatherdiv4si256 ((__v4si)src,\n-\t\t\t\t\t\t   base,\n-\t\t\t\t\t\t   (__v4di)index,\n-\t\t\t\t\t\t   (__v4si)mask,\n-\t\t\t\t\t\t   scale);\n+  return (__m128i) __builtin_ia32_gatherdiv4si256 ((__v4si)__src,\n+\t\t\t\t\t\t   __base,\n+\t\t\t\t\t\t   (__v4di)__index,\n+\t\t\t\t\t\t   (__v4si)__mask,\n+\t\t\t\t\t\t   __scale);\n }\n #else /* __OPTIMIZE__ */\n #define _mm_i32gather_pd(BASE, INDEX, SCALE)\t\t\t\t\\"}, {"sha": "688e8dc00f5197b5a380b3b35fb411b3e6bb5309", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -1438,66 +1438,68 @@ _mm_sub_round_ss (__m128 __A, __m128 __B, const int __R)\n #ifdef __OPTIMIZE__\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_ternarylogic_epi64 (__m512i __A, __m512i __B, __m512i __C, const int imm)\n+_mm512_ternarylogic_epi64 (__m512i __A, __m512i __B, __m512i __C,\n+\t\t\t   const int __imm)\n {\n   return (__m512i) __builtin_ia32_pternlogq512_mask ((__v8di) __A,\n \t\t\t\t\t\t     (__v8di) __B,\n-\t\t\t\t\t\t     (__v8di) __C, imm,\n+\t\t\t\t\t\t     (__v8di) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) -1);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_ternarylogic_epi64 (__m512i __A, __mmask8 __U, __m512i __B,\n-\t\t\t\t__m512i __C, const int imm)\n+\t\t\t\t__m512i __C, const int __imm)\n {\n   return (__m512i) __builtin_ia32_pternlogq512_mask ((__v8di) __A,\n \t\t\t\t\t\t     (__v8di) __B,\n-\t\t\t\t\t\t     (__v8di) __C, imm,\n+\t\t\t\t\t\t     (__v8di) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_ternarylogic_epi64 (__mmask8 __U, __m512i __A, __m512i __B,\n-\t\t\t\t __m512i __C, const int imm)\n+\t\t\t\t __m512i __C, const int __imm)\n {\n   return (__m512i) __builtin_ia32_pternlogq512_maskz ((__v8di) __A,\n \t\t\t\t\t\t      (__v8di) __B,\n \t\t\t\t\t\t      (__v8di) __C,\n-\t\t\t\t\t\t      imm, (__mmask8) __U);\n+\t\t\t\t\t\t      __imm, (__mmask8) __U);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_ternarylogic_epi32 (__m512i __A, __m512i __B, __m512i __C, const int imm)\n+_mm512_ternarylogic_epi32 (__m512i __A, __m512i __B, __m512i __C,\n+\t\t\t   const int __imm)\n {\n   return (__m512i) __builtin_ia32_pternlogd512_mask ((__v16si) __A,\n \t\t\t\t\t\t     (__v16si) __B,\n \t\t\t\t\t\t     (__v16si) __C,\n-\t\t\t\t\t\t     imm, (__mmask16) -1);\n+\t\t\t\t\t\t     __imm, (__mmask16) -1);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_ternarylogic_epi32 (__m512i __A, __mmask16 __U, __m512i __B,\n-\t\t\t\t__m512i __C, const int imm)\n+\t\t\t\t__m512i __C, const int __imm)\n {\n   return (__m512i) __builtin_ia32_pternlogd512_mask ((__v16si) __A,\n \t\t\t\t\t\t     (__v16si) __B,\n \t\t\t\t\t\t     (__v16si) __C,\n-\t\t\t\t\t\t     imm, (__mmask16) __U);\n+\t\t\t\t\t\t     __imm, (__mmask16) __U);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_ternarylogic_epi32 (__mmask16 __U, __m512i __A, __m512i __B,\n-\t\t\t\t __m512i __C, const int imm)\n+\t\t\t\t __m512i __C, const int __imm)\n {\n   return (__m512i) __builtin_ia32_pternlogd512_maskz ((__v16si) __A,\n \t\t\t\t\t\t      (__v16si) __B,\n \t\t\t\t\t\t      (__v16si) __C,\n-\t\t\t\t\t\t      imm, (__mmask16) __U);\n+\t\t\t\t\t\t      __imm, (__mmask16) __U);\n }\n #else\n #define _mm512_ternarylogic_epi64(A, B, C, I)\t\t\t\t\\\n@@ -9211,21 +9213,21 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i32gather_ps (__m512i __index, float const *__addr, int __scale)\n {\n-  __m512 v1_old = _mm512_undefined_ps ();\n-  __mmask16 mask = 0xFFFF;\n+  __m512 __v1_old = _mm512_undefined_ps ();\n+  __mmask16 __mask = 0xFFFF;\n \n-  return (__m512) __builtin_ia32_gathersiv16sf ((__v16sf) v1_old,\n+  return (__m512) __builtin_ia32_gathersiv16sf ((__v16sf) __v1_old,\n \t\t\t\t\t\t__addr,\n \t\t\t\t\t\t(__v16si) __index,\n-\t\t\t\t\t\tmask, __scale);\n+\t\t\t\t\t\t__mask, __scale);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i32gather_ps (__m512 v1_old, __mmask16 __mask,\n+_mm512_mask_i32gather_ps (__m512 __v1_old, __mmask16 __mask,\n \t\t\t  __m512i __index, float const *__addr, int __scale)\n {\n-  return (__m512) __builtin_ia32_gathersiv16sf ((__v16sf) v1_old,\n+  return (__m512) __builtin_ia32_gathersiv16sf ((__v16sf) __v1_old,\n \t\t\t\t\t\t__addr,\n \t\t\t\t\t\t(__v16si) __index,\n \t\t\t\t\t\t__mask, __scale);\n@@ -9235,12 +9237,12 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i32gather_pd (__m256i __index, double const *__addr, int __scale)\n {\n-  __m512d v1_old = _mm512_undefined_pd ();\n-  __mmask8 mask = 0xFF;\n+  __m512d __v1_old = _mm512_undefined_pd ();\n+  __mmask8 __mask = 0xFF;\n \n-  return (__m512d) __builtin_ia32_gathersiv8df ((__v8df) v1_old,\n+  return (__m512d) __builtin_ia32_gathersiv8df ((__v8df) __v1_old,\n \t\t\t\t\t\t__addr,\n-\t\t\t\t\t\t(__v8si) __index, mask,\n+\t\t\t\t\t\t(__v8si) __index, __mask,\n \t\t\t\t\t\t__scale);\n }\n \n@@ -9259,12 +9261,12 @@ extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i64gather_ps (__m512i __index, float const *__addr, int __scale)\n {\n-  __m256 v1_old = _mm256_undefined_ps ();\n-  __mmask8 mask = 0xFF;\n+  __m256 __v1_old = _mm256_undefined_ps ();\n+  __mmask8 __mask = 0xFF;\n \n-  return (__m256) __builtin_ia32_gatherdiv16sf ((__v8sf) v1_old,\n+  return (__m256) __builtin_ia32_gatherdiv16sf ((__v8sf) __v1_old,\n \t\t\t\t\t\t__addr,\n-\t\t\t\t\t\t(__v8di) __index, mask,\n+\t\t\t\t\t\t(__v8di) __index, __mask,\n \t\t\t\t\t\t__scale);\n }\n \n@@ -9283,12 +9285,12 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i64gather_pd (__m512i __index, double const *__addr, int __scale)\n {\n-  __m512d v1_old = _mm512_undefined_pd ();\n-  __mmask8 mask = 0xFF;\n+  __m512d __v1_old = _mm512_undefined_pd ();\n+  __mmask8 __mask = 0xFF;\n \n-  return (__m512d) __builtin_ia32_gatherdiv8df ((__v8df) v1_old,\n+  return (__m512d) __builtin_ia32_gatherdiv8df ((__v8df) __v1_old,\n \t\t\t\t\t\t__addr,\n-\t\t\t\t\t\t(__v8di) __index, mask,\n+\t\t\t\t\t\t(__v8di) __index, __mask,\n \t\t\t\t\t\t__scale);\n }\n \n@@ -9307,13 +9309,13 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i32gather_epi32 (__m512i __index, int const *__addr, int __scale)\n {\n-  __m512i v1_old = _mm512_undefined_epi32 ();\n-  __mmask16 mask = 0xFFFF;\n+  __m512i __v1_old = _mm512_undefined_epi32 ();\n+  __mmask16 __mask = 0xFFFF;\n \n-  return (__m512i) __builtin_ia32_gathersiv16si ((__v16si) v1_old,\n+  return (__m512i) __builtin_ia32_gathersiv16si ((__v16si) __v1_old,\n \t\t\t\t\t\t __addr,\n \t\t\t\t\t\t (__v16si) __index,\n-\t\t\t\t\t\t mask, __scale);\n+\t\t\t\t\t\t __mask, __scale);\n }\n \n extern __inline __m512i\n@@ -9331,12 +9333,12 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i32gather_epi64 (__m256i __index, long long const *__addr, int __scale)\n {\n-  __m512i v1_old = _mm512_undefined_epi32 ();\n-  __mmask8 mask = 0xFF;\n+  __m512i __v1_old = _mm512_undefined_epi32 ();\n+  __mmask8 __mask = 0xFF;\n \n-  return (__m512i) __builtin_ia32_gathersiv8di ((__v8di) v1_old,\n+  return (__m512i) __builtin_ia32_gathersiv8di ((__v8di) __v1_old,\n \t\t\t\t\t\t__addr,\n-\t\t\t\t\t\t(__v8si) __index, mask,\n+\t\t\t\t\t\t(__v8si) __index, __mask,\n \t\t\t\t\t\t__scale);\n }\n \n@@ -9356,13 +9358,13 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i64gather_epi32 (__m512i __index, int const *__addr, int __scale)\n {\n-  __m256i v1_old = _mm256_undefined_si256 ();\n-  __mmask8 mask = 0xFF;\n+  __m256i __v1_old = _mm256_undefined_si256 ();\n+  __mmask8 __mask = 0xFF;\n \n-  return (__m256i) __builtin_ia32_gatherdiv16si ((__v8si) v1_old,\n+  return (__m256i) __builtin_ia32_gatherdiv16si ((__v8si) __v1_old,\n \t\t\t\t\t\t __addr,\n \t\t\t\t\t\t (__v8di) __index,\n-\t\t\t\t\t\t mask, __scale);\n+\t\t\t\t\t\t __mask, __scale);\n }\n \n extern __inline __m256i\n@@ -9380,12 +9382,12 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_i64gather_epi64 (__m512i __index, long long const *__addr, int __scale)\n {\n-  __m512i v1_old = _mm512_undefined_epi32 ();\n-  __mmask8 mask = 0xFF;\n+  __m512i __v1_old = _mm512_undefined_epi32 ();\n+  __mmask8 __mask = 0xFF;\n \n-  return (__m512i) __builtin_ia32_gatherdiv8di ((__v8di) v1_old,\n+  return (__m512i) __builtin_ia32_gatherdiv8di ((__v8di) __v1_old,\n \t\t\t\t\t\t__addr,\n-\t\t\t\t\t\t(__v8di) __index, mask,\n+\t\t\t\t\t\t(__v8di) __index, __mask,\n \t\t\t\t\t\t__scale);\n }\n "}, {"sha": "5e4aace8dde4a0167db71f2b3bcce7c0235a300a", "filename": "gcc/config/i386/avx512pfintrin.h", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -48,110 +48,110 @@ typedef unsigned short __mmask16;\n #ifdef __OPTIMIZE__\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i32gather_pd (__m256i index, __mmask8 mask,\n-\t\t\t\t   void *addr, int scale, int hint)\n+_mm512_mask_prefetch_i32gather_pd (__m256i __index, __mmask8 __mask,\n+\t\t\t\t   void *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfdpd (mask, (__v8si) index, (long long const *) addr,\n-\t\t\t      scale, hint);\n+  __builtin_ia32_gatherpfdpd (__mask, (__v8si) __index,\n+\t\t\t      (long long const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i32gather_ps (__m512i index, __mmask16 mask,\n-\t\t\t\t   void *addr, int scale, int hint)\n+_mm512_mask_prefetch_i32gather_ps (__m512i __index, __mmask16 __mask,\n+\t\t\t\t   void *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfdps (mask, (__v16si) index, (int const *) addr,\n-\t\t\t      scale, hint);\n+  __builtin_ia32_gatherpfdps (__mask, (__v16si) __index, (int const *) __addr,\n+\t\t\t      __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i64gather_pd (__m512i index, __mmask8 mask,\n-\t\t\t\t   void *addr, int scale, int hint)\n+_mm512_mask_prefetch_i64gather_pd (__m512i __index, __mmask8 __mask,\n+\t\t\t\t   void *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfqpd (mask, (__v8di) index, (long long const *) addr,\n-\t\t\t      scale, hint);\n+  __builtin_ia32_gatherpfqpd (__mask, (__v8di) __index,\n+\t\t\t      (long long const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i64gather_ps (__m512i index, __mmask8 mask,\n-\t\t\t\t   void *addr, int scale, int hint)\n+_mm512_mask_prefetch_i64gather_ps (__m512i __index, __mmask8 __mask,\n+\t\t\t\t   void *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfqps (mask, (__v8di) index, (int const *) addr,\n-\t\t\t      scale, hint);\n+  __builtin_ia32_gatherpfqps (__mask, (__v8di) __index, (int const *) __addr,\n+\t\t\t      __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_prefetch_i32scatter_pd (void *addr, __m256i index, int scale,\n-\t\t\t       int hint)\n+_mm512_prefetch_i32scatter_pd (void *__addr, __m256i __index, int __scale,\n+\t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfdpd ((__mmask8) 0xFF, (__v8si) index, \n-\t\t\t       (long long const *)addr, scale, hint);\n+  __builtin_ia32_scatterpfdpd ((__mmask8) 0xFF, (__v8si) __index, \n+\t\t\t       (long long const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_prefetch_i32scatter_ps (void *addr, __m512i index, int scale,\n-\t\t\t       int hint)\n+_mm512_prefetch_i32scatter_ps (void *__addr, __m512i __index, int __scale,\n+\t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) index, (int const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) __index,\n+\t\t\t       (int const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i32scatter_pd (void *addr, __mmask8 mask,\n-\t\t\t\t    __m256i index, int scale, int hint)\n+_mm512_mask_prefetch_i32scatter_pd (void *__addr, __mmask8 __mask,\n+\t\t\t\t    __m256i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfdpd (mask, (__v8si) index, (long long const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfdpd (__mask, (__v8si) __index,\n+\t\t\t       (long long const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i32scatter_ps (void *addr, __mmask16 mask,\n-\t\t\t\t    __m512i index, int scale, int hint)\n+_mm512_mask_prefetch_i32scatter_ps (void *__addr, __mmask16 __mask,\n+\t\t\t\t    __m512i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfdps (mask, (__v16si) index, (int const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfdps (__mask, (__v16si) __index, (int const *) __addr,\n+\t\t\t       __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_prefetch_i64scatter_pd (void *addr, __m512i index, int scale,\n-\t\t\t       int hint)\n+_mm512_prefetch_i64scatter_pd (void *__addr, __m512i __index, int __scale,\n+\t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfqpd ((__mmask8) 0xFF, (__v8di) index, (long long const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfqpd ((__mmask8) 0xFF, (__v8di) __index,\n+\t\t\t       (long long const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_prefetch_i64scatter_ps (void *addr, __m512i index, int scale,\n-\t\t\t       int hint)\n+_mm512_prefetch_i64scatter_ps (void *__addr, __m512i __index, int __scale,\n+\t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) index, (int const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) __index,\n+\t\t\t       (int const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i64scatter_pd (void *addr, __mmask16 mask,\n-\t\t\t\t    __m512i index, int scale, int hint)\n+_mm512_mask_prefetch_i64scatter_pd (void *__addr, __mmask16 __mask,\n+\t\t\t\t    __m512i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfqpd (mask, (__v8di) index, (long long const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfqpd (__mask, (__v8di) __index,\n+\t\t\t       (long long const *) __addr, __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i64scatter_ps (void *addr, __mmask16 mask,\n-\t\t\t\t    __m512i index, int scale, int hint)\n+_mm512_mask_prefetch_i64scatter_ps (void *__addr, __mmask16 __mask,\n+\t\t\t\t    __m512i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfqps (mask, (__v8di) index, (int const *) addr,\n-\t\t\t       scale, hint);\n+  __builtin_ia32_scatterpfqps (__mask, (__v8di) __index, (int const *) __addr,\n+\t\t\t       __scale, __hint);\n }\n \n #else"}, {"sha": "f339ed3e8625c7b37ca11c449bffc25aec97768a", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -9796,140 +9796,140 @@ _mm_maskz_srli_epi64 (__mmask8 __U, __m128i __A, const int __imm)\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_ternarylogic_epi64 (__m256i __A, __m256i __B, __m256i __C,\n-\t\t\t   const int imm)\n+\t\t\t   const int __imm)\n {\n   return (__m256i) __builtin_ia32_pternlogq256_mask ((__v4di) __A,\n \t\t\t\t\t\t     (__v4di) __B,\n-\t\t\t\t\t\t     (__v4di) __C, imm,\n+\t\t\t\t\t\t     (__v4di) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) -1);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_ternarylogic_epi64 (__m256i __A, __mmask8 __U,\n \t\t\t\t__m256i __B, __m256i __C,\n-\t\t\t\tconst int imm)\n+\t\t\t\tconst int __imm)\n {\n   return (__m256i) __builtin_ia32_pternlogq256_mask ((__v4di) __A,\n \t\t\t\t\t\t     (__v4di) __B,\n-\t\t\t\t\t\t     (__v4di) __C, imm,\n+\t\t\t\t\t\t     (__v4di) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_ternarylogic_epi64 (__mmask8 __U, __m256i __A,\n \t\t\t\t __m256i __B, __m256i __C,\n-\t\t\t\t const int imm)\n+\t\t\t\t const int __imm)\n {\n   return (__m256i) __builtin_ia32_pternlogq256_maskz ((__v4di) __A,\n \t\t\t\t\t\t      (__v4di) __B,\n \t\t\t\t\t\t      (__v4di) __C,\n-\t\t\t\t\t\t      imm,\n+\t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_ternarylogic_epi32 (__m256i __A, __m256i __B, __m256i __C,\n-\t\t\t   const int imm)\n+\t\t\t   const int __imm)\n {\n   return (__m256i) __builtin_ia32_pternlogd256_mask ((__v8si) __A,\n \t\t\t\t\t\t     (__v8si) __B,\n-\t\t\t\t\t\t     (__v8si) __C, imm,\n+\t\t\t\t\t\t     (__v8si) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) -1);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_ternarylogic_epi32 (__m256i __A, __mmask8 __U,\n \t\t\t\t__m256i __B, __m256i __C,\n-\t\t\t\tconst int imm)\n+\t\t\t\tconst int __imm)\n {\n   return (__m256i) __builtin_ia32_pternlogd256_mask ((__v8si) __A,\n \t\t\t\t\t\t     (__v8si) __B,\n-\t\t\t\t\t\t     (__v8si) __C, imm,\n+\t\t\t\t\t\t     (__v8si) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_ternarylogic_epi32 (__mmask8 __U, __m256i __A,\n \t\t\t\t __m256i __B, __m256i __C,\n-\t\t\t\t const int imm)\n+\t\t\t\t const int __imm)\n {\n   return (__m256i) __builtin_ia32_pternlogd256_maskz ((__v8si) __A,\n \t\t\t\t\t\t      (__v8si) __B,\n \t\t\t\t\t\t      (__v8si) __C,\n-\t\t\t\t\t\t      imm,\n+\t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ternarylogic_epi64 (__m128i __A, __m128i __B, __m128i __C,\n-\t\t\tconst int imm)\n+\t\t\tconst int __imm)\n {\n   return (__m128i) __builtin_ia32_pternlogq128_mask ((__v2di) __A,\n \t\t\t\t\t\t     (__v2di) __B,\n-\t\t\t\t\t\t     (__v2di) __C, imm,\n+\t\t\t\t\t\t     (__v2di) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) -1);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_ternarylogic_epi64 (__m128i __A, __mmask8 __U,\n-\t\t\t     __m128i __B, __m128i __C, const int imm)\n+\t\t\t     __m128i __B, __m128i __C, const int __imm)\n {\n   return (__m128i) __builtin_ia32_pternlogq128_mask ((__v2di) __A,\n \t\t\t\t\t\t     (__v2di) __B,\n-\t\t\t\t\t\t     (__v2di) __C, imm,\n+\t\t\t\t\t\t     (__v2di) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_ternarylogic_epi64 (__mmask8 __U, __m128i __A,\n-\t\t\t      __m128i __B, __m128i __C, const int imm)\n+\t\t\t      __m128i __B, __m128i __C, const int __imm)\n {\n   return (__m128i) __builtin_ia32_pternlogq128_maskz ((__v2di) __A,\n \t\t\t\t\t\t      (__v2di) __B,\n \t\t\t\t\t\t      (__v2di) __C,\n-\t\t\t\t\t\t      imm,\n+\t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ternarylogic_epi32 (__m128i __A, __m128i __B, __m128i __C,\n-\t\t\tconst int imm)\n+\t\t\tconst int __imm)\n {\n   return (__m128i) __builtin_ia32_pternlogd128_mask ((__v4si) __A,\n \t\t\t\t\t\t     (__v4si) __B,\n-\t\t\t\t\t\t     (__v4si) __C, imm,\n+\t\t\t\t\t\t     (__v4si) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) -1);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_ternarylogic_epi32 (__m128i __A, __mmask8 __U,\n-\t\t\t     __m128i __B, __m128i __C, const int imm)\n+\t\t\t     __m128i __B, __m128i __C, const int __imm)\n {\n   return (__m128i) __builtin_ia32_pternlogd128_mask ((__v4si) __A,\n \t\t\t\t\t\t     (__v4si) __B,\n-\t\t\t\t\t\t     (__v4si) __C, imm,\n+\t\t\t\t\t\t     (__v4si) __C, __imm,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_ternarylogic_epi32 (__mmask8 __U, __m128i __A,\n-\t\t\t      __m128i __B, __m128i __C, const int imm)\n+\t\t\t      __m128i __B, __m128i __C, const int __imm)\n {\n   return (__m128i) __builtin_ia32_pternlogd128_maskz ((__v4si) __A,\n \t\t\t\t\t\t      (__v4si) __B,\n \t\t\t\t\t\t      (__v4si) __C,\n-\t\t\t\t\t\t      imm,\n+\t\t\t\t\t\t      __imm,\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n "}, {"sha": "1f36a681fcebc69bed99dcabbbcbe8dd6ac1dc2b", "filename": "gcc/config/i386/gmm_malloc.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -27,48 +27,48 @@\n #include <stdlib.h>\n #include <errno.h>\n \n-static __inline__ void* \n-_mm_malloc (size_t size, size_t align)\n+static __inline__ void * \n+_mm_malloc (size_t __size, size_t __align)\n {\n-  void * malloc_ptr;\n-  void * aligned_ptr;\n+  void * __malloc_ptr;\n+  void * __aligned_ptr;\n \n   /* Error if align is not a power of two.  */\n-  if (align & (align - 1))\n+  if (__align & (__align - 1))\n     {\n       errno = EINVAL;\n-      return ((void*) 0);\n+      return ((void *) 0);\n     }\n \n-  if (size == 0)\n+  if (__size == 0)\n     return ((void *) 0);\n \n  /* Assume malloc'd pointer is aligned at least to sizeof (void*).\n     If necessary, add another sizeof (void*) to store the value\n     returned by malloc. Effectively this enforces a minimum alignment\n     of sizeof double. */     \n-    if (align < 2 * sizeof (void *))\n-      align = 2 * sizeof (void *);\n+    if (__align < 2 * sizeof (void *))\n+      __align = 2 * sizeof (void *);\n \n-  malloc_ptr = malloc (size + align);\n-  if (!malloc_ptr)\n+  __malloc_ptr = malloc (__size + __align);\n+  if (!__malloc_ptr)\n     return ((void *) 0);\n \n   /* Align  We have at least sizeof (void *) space below malloc'd ptr. */\n-  aligned_ptr = (void *) (((size_t) malloc_ptr + align)\n-\t\t\t  & ~((size_t) (align) - 1));\n+  __aligned_ptr = (void *) (((size_t) __malloc_ptr + __align)\n+\t\t\t    & ~((size_t) (__align) - 1));\n \n   /* Store the original pointer just before p.  */\t\n-  ((void **) aligned_ptr) [-1] = malloc_ptr;\n+  ((void **) __aligned_ptr)[-1] = __malloc_ptr;\n \n-  return aligned_ptr;\n+  return __aligned_ptr;\n }\n \n static __inline__ void\n-_mm_free (void * aligned_ptr)\n+_mm_free (void *__aligned_ptr)\n {\n-  if (aligned_ptr)\n-    free (((void **) aligned_ptr) [-1]);\n+  if (__aligned_ptr)\n+    free (((void **) __aligned_ptr)[-1]);\n }\n \n #endif /* _MM_MALLOC_H_INCLUDED */"}, {"sha": "cbb9e7d57a55787a505f3fa82b62569e762dbe06", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -261,9 +261,9 @@ __readeflags (void)\n /* Write flags register */\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__writeeflags (unsigned long long X)\n+__writeeflags (unsigned long long __X)\n {\n-  __builtin_ia32_writeeflags_u64 (X);\n+  __builtin_ia32_writeeflags_u64 (__X);\n }\n \n #define _bswap64(a)\t\t__bswapq(a)\n@@ -281,9 +281,9 @@ __readeflags (void)\n /* Write flags register */\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__writeeflags (unsigned int X)\n+__writeeflags (unsigned int __X)\n {\n-  __builtin_ia32_writeeflags_u32 (X);\n+  __builtin_ia32_writeeflags_u32 (__X);\n }\n \n #endif"}, {"sha": "55d431a424d558d7fccff47e8b682cdfb81b4ce6", "filename": "gcc/config/i386/lwpintrin.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flwpintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -35,9 +35,9 @@\n #endif /* __LWP__ */\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__llwpcb (void *pcbAddress)\n+__llwpcb (void *__pcbAddress)\n {\n-  __builtin_ia32_llwpcb (pcbAddress);\n+  __builtin_ia32_llwpcb (__pcbAddress);\n }\n \n extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -48,16 +48,17 @@ __slwpcb (void)\n \n #ifdef __OPTIMIZE__\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpval32 (unsigned int data2, unsigned int data1, unsigned int flags)\n+__lwpval32 (unsigned int __data2, unsigned int __data1, unsigned int __flags)\n {\n-  __builtin_ia32_lwpval32 (data2, data1, flags);\n+  __builtin_ia32_lwpval32 (__data2, __data1, __flags);\n }\n \n #ifdef __x86_64__\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpval64 (unsigned long long data2, unsigned int data1, unsigned int flags)\n+__lwpval64 (unsigned long long __data2, unsigned int __data1,\n+\t    unsigned int __flags)\n {\n-  __builtin_ia32_lwpval64 (data2, data1, flags);\n+  __builtin_ia32_lwpval64 (__data2, __data1, __flags);\n }\n #endif\n #else\n@@ -74,16 +75,17 @@ __lwpval64 (unsigned long long data2, unsigned int data1, unsigned int flags)\n \n #ifdef __OPTIMIZE__\n extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpins32 (unsigned int data2, unsigned int data1, unsigned int flags)\n+__lwpins32 (unsigned int __data2, unsigned int __data1, unsigned int __flags)\n {\n-  return __builtin_ia32_lwpins32 (data2, data1, flags);\n+  return __builtin_ia32_lwpins32 (__data2, __data1, __flags);\n }\n \n #ifdef __x86_64__\n extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpins64 (unsigned long long data2, unsigned int data1, unsigned int flags)\n+__lwpins64 (unsigned long long __data2, unsigned int __data1,\n+\t    unsigned int __flags)\n {\n-  return __builtin_ia32_lwpins64 (data2, data1, flags);\n+  return __builtin_ia32_lwpins64 (__data2, __data1, __flags);\n }\n #endif\n #else"}, {"sha": "4ad939ddf06c5887f90ac13e58cbf1f245356e34", "filename": "gcc/config/i386/pkuintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fpkuintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fpkuintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpkuintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -43,9 +43,9 @@ _rdpkru_u32 (void)\n \n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_wrpkru (unsigned int key)\n+_wrpkru (unsigned int __key)\n {\n-  __builtin_ia32_wrpkru (key);\n+  __builtin_ia32_wrpkru (__key);\n }\n \n #ifdef __DISABLE_PKU__"}, {"sha": "a9c2be4e0c2a75436aee7c4b16855172415906fa", "filename": "gcc/config/i386/pmm_malloc.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fpmm_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Fpmm_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpmm_malloc.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -35,23 +35,23 @@ extern \"C\" int posix_memalign (void **, size_t, size_t) throw ();\n #endif\n \n static __inline void *\n-_mm_malloc (size_t size, size_t alignment)\n+_mm_malloc (size_t __size, size_t __alignment)\n {\n-  void *ptr;\n-  if (alignment == 1)\n-    return malloc (size);\n-  if (alignment == 2 || (sizeof (void *) == 8 && alignment == 4))\n-    alignment = sizeof (void *);\n-  if (posix_memalign (&ptr, alignment, size) == 0)\n-    return ptr;\n+  void *__ptr;\n+  if (__alignment == 1)\n+    return malloc (__size);\n+  if (__alignment == 2 || (sizeof (void *) == 8 && __alignment == 4))\n+    __alignment = sizeof (void *);\n+  if (posix_memalign (&__ptr, __alignment, __size) == 0)\n+    return __ptr;\n   else\n     return NULL;\n }\n \n static __inline void\n-_mm_free (void * ptr)\n+_mm_free (void *__ptr)\n {\n-  free (ptr);\n+  free (__ptr);\n }\n \n #endif /* _MM_MALLOC_H_INCLUDED */"}, {"sha": "57b45155f1a5612d3fb5b32658c9df8a46b996c3", "filename": "gcc/config/i386/rdseedintrin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frdseedintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -37,24 +37,24 @@\n \n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdseed16_step (unsigned short *p)\n+_rdseed16_step (unsigned short *__p)\n {\n-    return __builtin_ia32_rdseed_hi_step (p);\n+    return __builtin_ia32_rdseed_hi_step (__p);\n }\n \n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdseed32_step (unsigned int *p)\n+_rdseed32_step (unsigned int *__p)\n {\n-    return __builtin_ia32_rdseed_si_step (p);\n+    return __builtin_ia32_rdseed_si_step (__p);\n }\n \n #ifdef __x86_64__\n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdseed64_step (unsigned long long *p)\n+_rdseed64_step (unsigned long long *__p)\n {\n-    return __builtin_ia32_rdseed_di_step (p);\n+    return __builtin_ia32_rdseed_di_step (__p);\n }\n #endif\n "}, {"sha": "df53041779f05e7a0f83b4dc2ce96b4e7cdfe280", "filename": "gcc/config/i386/rtmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Frtmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7/gcc%2Fconfig%2Fi386%2Frtmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtmintrin.h?ref=b5fd0b71fe74d11f37e6f679d3e72bad23b82aa7", "patch": "@@ -68,9 +68,9 @@ _xend (void)\n #ifdef __OPTIMIZE__\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_xabort (const unsigned int imm)\n+_xabort (const unsigned int __imm)\n {\n-  __builtin_ia32_xabort (imm);\n+  __builtin_ia32_xabort (__imm);\n }\n #else\n #define _xabort(N)  __builtin_ia32_xabort (N)"}]}