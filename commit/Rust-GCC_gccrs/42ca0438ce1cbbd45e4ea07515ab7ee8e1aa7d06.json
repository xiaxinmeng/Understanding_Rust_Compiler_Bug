{"sha": "42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjYTA0MzhjZTFjYmJkNDVlNGVhMDc1MTVhYjdlZThlMWFhN2QwNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-17T06:20:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-17T06:20:20Z"}, "message": "concept-inst.cc (vector<locale::facet*>): Remove instantiations.\n\n\n2002-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/concept-inst.cc (vector<locale::facet*>): Remove instantiations.\n\t* src/stl-inst.cc (vector::_M_insert_aux): Remove instantiation.\n\t(__malloc_alloc_template): Conditionalize.\n\n\t* include/bits/istream.tcc: Remove sputbackc calls.\n\n\t* testsuite/19_diagnostics/stdexceptions.cc: Fix comment.\n\nFrom-SVN: r52405", "tree": {"sha": "6ca2dbe732728b7f5cc46dc3a41e38e6646e56b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ca2dbe732728b7f5cc46dc3a41e38e6646e56b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/comments", "author": null, "committer": null, "parents": [{"sha": "c0fe1b1d5655f666d1d13f3b9a474a66bdabe739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0fe1b1d5655f666d1d13f3b9a474a66bdabe739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0fe1b1d5655f666d1d13f3b9a474a66bdabe739"}], "stats": {"total": 213, "additions": 63, "deletions": 150}, "files": [{"sha": "26af65c93d6bb391fce2cfebf03959b540db3c8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "patch": "@@ -1,4 +1,15 @@\n+2002-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/concept-inst.cc (vector<locale::facet*>): Remove instantiations.\n+\t* src/stl-inst.cc (vector::_M_insert_aux): Remove instantiation.\n+\t(__malloc_alloc_template): Conditionalize.\n+\n+\t* include/bits/istream.tcc: Remove sputbackc calls.\n+\n+\t* testsuite/19_diagnostics/stdexceptions.cc: Fix comment.\n+\t\n 2002-04-16  Paolo Carlini <pcarlini@unitus.it>\n+\n  \t* testsuite/24_iterators/rel_ops.cc: New test.\n \t\n 2002-04-16  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>"}, {"sha": "9ee38a42fc7e7043a666d68c793d0922d4edefe0", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 48, "deletions": 89, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "patch": "@@ -579,28 +579,22 @@ namespace std\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 1) \n+      if (__cerb) \n \t{\n \t  try \n \t    {\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n-\t      int_type __c = __sb->sbumpc();\t\n-\t      bool __testdelim = __c == __idelim;\n-\t      bool __testeof =  __c == __eof;\n+\t      int_type __c = __sb->sgetc();\t\n \t      \n-\t      while (_M_gcount < __n - 1 && !__testeof && !__testdelim)\n+\t      while (_M_gcount + 1 < __n && __c != __eof && __c != __idelim)\n \t\t{\n \t\t  *__s++ = traits_type::to_char_type(__c);\n+\t\t  __c = __sb->snextc();\n \t\t  ++_M_gcount;\n-\t\t  __c = __sb->sbumpc();\n-\t\t  __testeof = __c == __eof;\n-\t\t  __testdelim = __c == __idelim;\n \t\t}\n-\t      if (__testdelim || _M_gcount == __n - 1)\n-\t\t__sb->sputbackc(__c);\n-\t      if (__testeof)\n+\t      if (__c == __eof)\n \t\tthis->setstate(ios_base::eofbit);\n \t    }\n \t  catch(exception& __fail)\n@@ -627,35 +621,29 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  int_type __c;\n-\t  __streambuf_type* __this_sb = this->rdbuf();\n \t  try \n \t    {\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\t      \n-\t      __c = __this_sb->sbumpc();\n-\t      bool __testdelim = __c == __idelim;\n-\t      bool __testeof =  __c == __eof;\n-\t      bool __testput = true;\n+\t      __streambuf_type* __this_sb = this->rdbuf();\n+\t      int_type __c = __this_sb->sgetc();\n \t      \n-\t      while (!__testeof && !__testdelim \n-\t\t    && (__testput = __sb.sputc(traits_type::to_char_type(__c)) \n-\t\t\t != __eof))\n+\t      while (__c != __eof && __c != __idelim \n+\t\t     && (__sb.sputc(traits_type::to_char_type(__c)) != __eof))\n \t\t{\n \t\t  ++_M_gcount;\n-\t\t  __c = __this_sb->sbumpc();\n-\t\t  __testeof = __c == __eof;\n-\t\t  __testdelim = __c == __idelim;\n+\t\t  __c = __this_sb->snextc();\n \t\t}\n-\t      if (__testdelim || !__testput)\n-\t\t__this_sb->sputbackc(traits_type::to_char_type(__c));\n-\t      if (__testeof)\n+\t      if (__c == __eof)\n \t\tthis->setstate(ios_base::eofbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n-\t      // Exception may result from sputc->overflow.\n-\t      __this_sb->sputbackc(traits_type::to_char_type(__c));\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n \t    }\n \t}\n       if (!_M_gcount)\n@@ -674,33 +662,28 @@ namespace std\n \t{\n           try \n \t    {\n-\t      __streambuf_type* __sb = this->rdbuf();\n-\t      int_type __c = __sb->sbumpc();\n-\t      ++_M_gcount;\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n-\t      bool __testdelim = __c == __idelim;\n-\t      bool __testeof =  __c == __eof;\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n \t    \n-\t      while (_M_gcount < __n && !__testeof && !__testdelim)\n+\t      while (_M_gcount + 1 < __n && __c != __eof && __c != __idelim)\n \t\t{\n \t\t  *__s++ = traits_type::to_char_type(__c);\n-\t\t  __c = __sb->sbumpc();\n+\t\t  __c = __sb->snextc();\n \t\t  ++_M_gcount;\n-\t\t  __testeof = __c == __eof;\n-\t\t  __testdelim = __c == __idelim;\n \t\t}\n-\t      \n-\t      if (__testeof)\n-\t\t{\n-\t\t  --_M_gcount;\n-\t\t  this->setstate(ios_base::eofbit);\n-\t\t}\n-\t      else if (!__testdelim)\n+\t      if (__c == __eof)\n+\t\tthis->setstate(ios_base::eofbit);\n+\t      else\n \t\t{\n-\t\t  --_M_gcount;\n-\t\t  __sb->sputbackc(traits_type::to_char_type(__c));\n-\t\t  this->setstate(ios_base::failbit);\n+\t\t  if (__c == __idelim)\n+\t\t    {\n+\t\t      __sb->snextc();\n+\t\t      ++_M_gcount;\n+\t\t    }\n+\t\t  else\n+\t\t    this->setstate(ios_base::failbit);\n \t\t}\n \t    }\n \t  catch(exception& __fail)\n@@ -1102,22 +1085,16 @@ namespace std\n \t      const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n \t      const int_type __eof = _Traits::eof();\n \t      __streambuf_type* __sb = __in.rdbuf();\n-\t      int_type __c = __sb->sbumpc();\n-\t      bool __testeof =  __c == __eof;\n-\t      bool __testsp = __ctype.is(ctype_base::space, __c);\n+\t      int_type __c = __sb->sgetc();\n \t      \n-\t      while (__extracted < __num - 1 && !__testeof && !__testsp)\n+\t      while (__extracted < __num - 1 \n+\t\t     && __c != __eof && !__ctype.is(ctype_base::space, __c))\n \t\t{\n \t\t  *__s++ = __c;\n \t\t  ++__extracted;\n-\t\t  __c = __sb->sbumpc();\n-\t\t  __testeof = __c == __eof;\n-\t\t  __testsp = __ctype.is(ctype_base::space, __c);\n+\t\t  __c = __sb->snextc();\n \t\t}\n-\t      \n-\t      if (!__testeof)\n-\t\t__sb->sputbackc(__c);\n-\t      else\n+\t      if (__c == __eof)\n \t\t__in.setstate(ios_base::eofbit);\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n@@ -1149,26 +1126,15 @@ namespace std\n       typedef typename __istream_type::__streambuf_type __streambuf_type;\n       typedef typename __istream_type::__ctype_type \t__ctype_type;\n       typedef typename __istream_type::int_type \t__int_type;\n-      typedef typename __istream_type::char_type \t__char_type;\n \n       const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n-      __streambuf_type* __sb = __in.rdbuf();\n       const __int_type __eof = _Traits::eof();\t      \n-      __int_type __c;\n-      bool __testeof;\n-      bool __testsp;\n-\n-      do \n-\t{\n-\t  __c = __sb->sbumpc();\n-\t  __testeof = __c == __eof;\t  \n-\t  __testsp = __ctype.is(ctype_base::space, __c);\n-\t}\n-      while (!__testeof && __testsp);\n+      __streambuf_type* __sb = __in.rdbuf();\n+      __int_type __c = __sb->sgetc();\n \n-      if (!__testeof && !__testsp)\n-\t__sb->sputbackc(__c);\n-      else\n+      while (__c != __eof && __ctype.is(ctype_base::space, __c))\n+\t__c = __sb->snextc();\n+      if (__c == __eof)\n \t__in.setstate(ios_base::eofbit);\n \n       return __in;\n@@ -1199,21 +1165,16 @@ namespace std\n \t  const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n \t  const __int_type __eof = _Traits::eof();\n \t  __streambuf_type* __sb = __in.rdbuf();\n-\t  __int_type __c = __sb->sbumpc();\n-\t  bool __testeof =  __c == __eof;\n-\t  bool __testsp = __ctype.is(ctype_base::space, __c);\n-\n-\t  while (__extracted < __n && !__testeof && !__testsp)\n+\t  __int_type __c = __sb->sgetc();\n+\t  \n+\t  while (__extracted < __n \n+\t\t && __c != __eof && !__ctype.is(ctype_base::space, __c))\n \t    {\n \t      __str += _Traits::to_char_type(__c);\n \t      ++__extracted;\n-\t      __c = __sb->sbumpc();\n-\t      __testeof = __c == __eof;\n-\t      __testsp = __ctype.is(ctype_base::space, __c);\n+\t      __c = __sb->snextc();\n \t    }\n-\t  if (!__testeof)\n-\t    __sb->sputbackc(__c);\n-\t  else\n+\t  if (__c == __eof)\n \t    __in.setstate(ios_base::eofbit);\n \t  __in.width(0);\n \t}\n@@ -1250,17 +1211,15 @@ namespace std\n \t  __int_type __c = __sb->sbumpc();\n \t  const __int_type __eof = _Traits::eof();\n \t  __testdelim = __c ==  __idelim;\n-\t  bool __testeof =  __c == __eof;\n \n-\t  while (__extracted <= __n && !__testeof && !__testdelim)\n+\t  while (__extracted <= __n && __c != __eof && !__testdelim)\n \t    {\n \t      __str += _Traits::to_char_type(__c);\n \t      ++__extracted;\n \t      __c = __sb->sbumpc();\n-\t      __testeof = __c == __eof;\n \t      __testdelim = __c == __idelim;\n \t    }\n-\t  if (__testeof)\n+\t  if (__c == __eof)\n \t    __in.setstate(ios_base::eofbit);\n \t}\n       if (!__extracted && !__testdelim)"}, {"sha": "01cc030da8da1222ab9e9172e6d43261d8b4ec29", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "patch": "@@ -1,6 +1,6 @@\n // Concept checking instantiations -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -40,7 +40,6 @@\n #ifdef _GLIBCPP_CONCEPT_CHECKS\n \n #include <memory>\n-#include <vector>\n #include <ostream>\n \n #define _Instantiate(...) template void __function_requires< __VA_ARGS__ > ()\n@@ -49,36 +48,12 @@ namespace __gnu_cxx\n {\n   template void __aux_require_boolean_expr<bool>(bool const&);\n \n-  _Instantiate(_BidirectionalIteratorConcept<\n-    __normal_iterator< std::locale::facet**,\n-    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n-\n-  _Instantiate(_BidirectionalIteratorConcept<\n-    __normal_iterator< unsigned*,\n-    std::vector<unsigned, std::allocator<unsigned> > > > );\n-\n-  _Instantiate(_ConvertibleConcept<std::locale::facet*, std::locale::facet*> );\n-\n   _Instantiate(_ConvertibleConcept<unsigned, unsigned> );\n \n   _Instantiate(_InputIteratorConcept<char*> );\n \n   _Instantiate(_InputIteratorConcept<char const*> );\n \n-  _Instantiate(_InputIteratorConcept<std::locale::facet**> );\n-\n-  _Instantiate(_InputIteratorConcept<\n-    __normal_iterator< std::locale::facet* const*,\n-    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n-\n-  _Instantiate(_InputIteratorConcept<\n-    __normal_iterator< std::locale::facet**,\n-    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n-\n-  _Instantiate(_InputIteratorConcept<\n-    __normal_iterator< unsigned*,\n-    std::vector<unsigned, std::allocator<unsigned> > > > );\n-\n #ifdef _GLIBCPP_USE_WCHAR_T\n   _Instantiate(_InputIteratorConcept<wchar_t*> );\n \n@@ -97,29 +72,6 @@ namespace __gnu_cxx\n \n   _Instantiate(_LessThanComparableConcept<unsigned> );\n \n-  _Instantiate(_Mutable_BidirectionalIteratorConcept<\n-    __normal_iterator< std::locale::facet**,\n-    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n-\n-  _Instantiate(_Mutable_BidirectionalIteratorConcept<\n-    __normal_iterator< unsigned*,\n-    std::vector<unsigned, std::allocator<unsigned> > > > );\n-\n-  _Instantiate(_Mutable_ForwardIteratorConcept<\n-    __normal_iterator< std::locale::facet**,\n-    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n-\n-  _Instantiate(_OutputIteratorConcept<\n-    std::locale::facet**, std::locale::facet*> );\n-\n-  _Instantiate(_OutputIteratorConcept<\n-    __normal_iterator< std::locale::facet**,\n-      std::vector<std::locale::facet*, std::allocator<std::locale::facet* > > >,\n-    std::locale::facet* > );\n-\n-  _Instantiate(_OutputIteratorConcept<__normal_iterator<\n-    unsigned*, std::vector<unsigned, std::allocator<unsigned> > >, unsigned> );\n-\n   _Instantiate(_OutputIteratorConcept<std::ostreambuf_iterator<\n     char, std::char_traits<char> >, char> );\n \n@@ -153,7 +105,6 @@ namespace __gnu_cxx\n \n   _Instantiate(_RandomAccessIteratorConcept<wchar_t const*> );\n #endif\n-\n } // namespace __gnu_cxx\n \n #undef _Instantiate"}, {"sha": "d8879a7bccd82984378b4272e1dcc6d83b28354e", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "patch": "@@ -33,21 +33,15 @@\n \n #include <bits/c++config.h>\n #include <memory>\n-#include <vector>\n \n namespace std\n {\n   template class allocator<char>;\n   template class allocator<wchar_t>;\n \n+#ifdef __USE_MALLOC\n   template class __malloc_alloc_template<0>;\n-\n-#ifndef __USE_MALLOC\n+#else\n   template class __default_alloc_template<true, 0>;\n #endif\n-\n-  template\n-    void\n-    vector<unsigned int>::\n-    _M_insert_aux(vector<unsigned int>::iterator, unsigned int const &);\n } // namespace std"}, {"sha": "1b11118da5d92beff543a64e54d3cddccee3553c", "filename": "libstdc++-v3/testsuite/19_diagnostics/stdexceptions.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc?ref=42ca0438ce1cbbd45e4ea07515ab7ee8e1aa7d06", "patch": "@@ -1,6 +1,6 @@\n // 2001-02-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,6 @@ void test01()\n {\n   bool test = true;\n   std::string s(\"lack of sunlight, no water error\");\n-  // XXX work around long-standing, pathalogical, hostility-inducing parser bug\n-  // std::logic_error obj(std::string(strlit));\n \n   // 1\n   std::logic_error obj = std::logic_error(s);"}]}