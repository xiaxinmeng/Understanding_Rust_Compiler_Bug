{"sha": "0a9771231409863b86f66b1e1c368a53b65980da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5NzcxMjMxNDA5ODYzYjg2ZjY2YjFlMWMzNjhhNTNiNjU5ODBkYQ==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2001-10-10T21:57:20Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2001-10-10T21:57:20Z"}, "message": "cygwin.h: Avoid adding include files if -nostdinc is used.\n\n* config/i386/cygwin.h: Avoid adding include files if -nostdinc is used.\n* config/i386/mingw32.h (WIN32_NO_ABSOLUTE_INST_DIRS): New define.\n(Thanks to Chris Faylor for suggesting macro name).\n(CPP_PREDEFINES): Define __MINGW32__ but don't set value; add more WIN32\ndefines.\n(STANDARD_INCLUDE_DIR): Remove i386- from directory name.\n(STANDARD_INCLUDE_COMPONENT): Change to MINGW.\n(MATH_LIBRARY): Undef before definition.\n(OUTPUT_QUOTED_STRING): Likewise.\n* config/i386/cygwin.h: Use WIN32_NO_ABSOLUTE_INST_DIRS.\n\nFrom-SVN: r46161", "tree": {"sha": "b7acaeeb2323d182bc0268a4764e9028bbb796e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7acaeeb2323d182bc0268a4764e9028bbb796e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9771231409863b86f66b1e1c368a53b65980da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9771231409863b86f66b1e1c368a53b65980da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9771231409863b86f66b1e1c368a53b65980da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9771231409863b86f66b1e1c368a53b65980da/comments", "author": null, "committer": null, "parents": [{"sha": "c2d7fe594673b58bcf1424ee3b0cfd8a180ba3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d7fe594673b58bcf1424ee3b0cfd8a180ba3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d7fe594673b58bcf1424ee3b0cfd8a180ba3b3"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "6bc35572e97da31c5e4b81bd5be2e8a28f534235", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a9771231409863b86f66b1e1c368a53b65980da", "patch": "@@ -1,3 +1,20 @@\n+2001-10-10  Christopher Faylor <cgf@redhat.com>\n+\n+\t* config/i386/cygwin.h: Avoid adding include files if -nostdinc is\n+\tused.\n+\n+2001-10-10  Danny Smith  <danny_r_smith_2001@yahoo.co.nz>\n+\n+\t* config/i386/mingw32.h (WIN32_NO_ABSOLUTE_INST_DIRS): New define.\n+\t(Thanks to Chris Faylor for suggesting macro name).\n+\t(CPP_PREDEFINES): Define __MINGW32__ but don't set value; add more\n+\tWIN32 defines.\n+\t(STANDARD_INCLUDE_DIR): Remove i386- from directory name.\n+\t(STANDARD_INCLUDE_COMPONENT): Change to MINGW.\n+\t(MATH_LIBRARY): Undef before definition.\n+\t(OUTPUT_QUOTED_STRING): Likewise.\n+\t* config/i386/cygwin.h: Use WIN32_NO_ABSOLUTE_INST_DIRS.\n+\n 2001-10-10  Richard Henderson  <rth@redhat.com>\n \n \t* unwind-dw2-fde.c (fde_compare_t): Change return type to int."}, {"sha": "65e5f7fe5f45fd357c34dfaaa5d6d7eb01bb2275", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=0a9771231409863b86f66b1e1c368a53b65980da", "patch": "@@ -66,24 +66,24 @@ Boston, MA 02111-1307, USA. */\n #define CPP_PREDEFINES \"-D_X86_=1 -Asystem=winnt\"\n \n #ifdef CROSS_COMPILE\n-#define CYGWIN_INCLUDES \"-idirafter \" CYGWIN_CROSS_DIR \"/include\"\n-#define W32API_INC \"-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api\"\n+#define CYGWIN_INCLUDES \"%{!nostdinc:-idirafter \" CYGWIN_CROSS_DIR \"/include}\"\n+#define W32API_INC \"%{!nostdinc:-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api}\"\n #define W32API_LIB \"-L\" CYGWIN_CROSS_DIR \"/lib/w32api/\"\n #define CYGWIN_LIB CYGWIN_CROSS_DIR \"/lib\"\n #define MINGW_LIBS \"-L\" CYGWIN_CROSS_DIR \"/lib/mingw\"\n-#define MINGW_INCLUDES \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++-3 \"\\\n+#define MINGW_INCLUDES \"%{!nostdinc:-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++-3 \"\\\n \t\t       \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++ \"\\\n-\t\t       \"-idirafter \" CYGWIN_CROSS_DIR \"/include/mingw\"\n+\t\t       \"-idirafter \" CYGWIN_CROSS_DIR \"/include/mingw}\"\n #else\n-#define CYGWIN_INCLUDES \"-isystem /usr/local/include -idirafter /usr/include\"\n-#define W32API_INC \"-idirafter /usr/include/w32api\"\n+#define CYGWIN_INCLUDES \"%{!nostdinc:-isystem /usr/local/include -idirafter /usr/include}\"\n+#define W32API_INC \"%{!nostdinc:-idirafter /usr/include/w32api}\"\n #define W32API_LIB \"-L/usr/lib/w32api/\"\n #define CYGWIN_LIB \"/usr/lib\"\n #define MINGW_LIBS \"-L/usr/local/lib/mingw -L/usr/lib/mingw\"\n-#define MINGW_INCLUDES \"-isystem /usr/include/mingw/g++-3 \"\\\n+#define MINGW_INCLUDES \"%{!nostdinc:-isystem /usr/include/mingw/g++-3 \"\\\n \t\t       \"-isystem /usr/include/mingw/g++ \"\\\n \t\t       \"-isystem /usr/local/include/mingw\" \\\n-\t\t       \"-idirafter /usr/include/mingw\"\n+\t\t       \"-idirafter /usr/include/mingw}\"\n #endif\n \n /* Get tree.c to declare a target-specific specialization of\n@@ -109,9 +109,9 @@ Boston, MA 02111-1307, USA. */\n   %{mno-win32:%{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n   %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{mthreads:-D_MT} \"\\\n     MINGW_INCLUDES \"} \\\n-  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix__ -D__unix \"\\\n+  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ %{!ansi:-Dunix} -D__unix__ -D__unix \"\\\n     CYGWIN_INCLUDES \"}\\\n-  %{mwin32|mno-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT}\\\n+  %{mwin32|mno-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ %{!ansi:-DWINNT}}\\\n   %{!mno-win32:\" W32API_INC \"}\\\n \"\n \n@@ -120,8 +120,12 @@ Boston, MA 02111-1307, USA. */\n   %{shared|mdll: %{mno-cygwin:\" MINGW_LIBS \" mingw/dllcrt2%O%s}}\\\n   %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:\" MINGW_LIBS \" mingw/crt2%O%s}\\\n   %{pg:gcrt0%O%s}}}\\\n+  crtbegin%O%s\\\n \"\n \n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend%O%s\"\n+\n /* Normally, -lgcc is not needed since everything in it is in the DLL, but we\n    want to allow things to be added to it when installing new versions of\n    GCC without making a new CYGWIN.DLL, so we leave it.  Profiling is handled\n@@ -461,6 +465,9 @@ extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n #define SET_ASM_OP \"\\t.set\\t\"\n #endif\n \n+/* Override GCC's relative pathname lookup (ie., relocatability) unless\n+   otherwise told by other subtargets.  */\n+#ifndef WIN32_NO_ABSOLUTE_INST_DIRS\n #undef MD_STARTFILE_PREFIX\n #define MD_STARTFILE_PREFIX     \"/usr/lib/\"\n \n@@ -473,7 +480,8 @@ extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n #undef SYSTEM_INCLUDE_DIR\n #undef STANDARD_INCLUDE_DIR\n #define STANDARD_INCLUDE_DIR 0\n-#endif\n+#endif /* not CROSS_COMPILE */\n+#endif /* not WIN32_NO_ABSOLUTE_INST_DIRS */\n \n #undef TREE\n "}, {"sha": "bdbedddd66dfe27deef3e16657de7493301a8e99", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=0a9771231409863b86f66b1e1c368a53b65980da", "patch": "@@ -22,6 +22,12 @@ Boston, MA 02111-1307, USA. */\n /* Most of this is the same as for cygwin, except for changing some\n    specs.  */\n \n+/* Mingw GCC, unlike Cygwin's, must be relocatable. This macro must \n+   be defined before any other files are included. */\n+#ifndef WIN32_NO_ABSOLUTE_INST_DIRS\n+#define WIN32_NO_ABSOLUTE_INST_DIRS 1\n+#endif\n+\n #include \"i386/cygwin.h\"\n \n #define TARGET_EXECUTABLE_SUFFIX \".exe\"\n@@ -30,15 +36,15 @@ Boston, MA 02111-1307, USA. */\n    only difference between the two should be __MSVCRT__ needed to \n    distinguish MSVC from CRTDLL runtime in mingw headers. */\n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_WIN32 -DWIN32 \\\n-  -D__MINGW32__=0.2 -D__MSVCRT__ -DWINNT -D_X86_=1 \\\n+#define CPP_PREDEFINES \"-D_WIN32 -D__WIN32 -D__WIN32__ -DWIN32 \\\n+  -D__MINGW32__ -D__MSVCRT__ -DWINNT -D_X86_=1 \\\n   -Asystem=winnt\"\n \n /* Specific a different directory for the standard include files.  */\n #undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/usr/local/i386-mingw32/include\"\n-\n-#define STANDARD_INCLUDE_COMPONENT \"MINGW32\"\n+#define STANDARD_INCLUDE_DIR \"/usr/local/mingw32/include\"\n+#undef STANDARD_INCLUDE_COMPONENT\n+#define STANDARD_INCLUDE_COMPONENT \"MINGW\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \\\n@@ -75,10 +81,12 @@ Boston, MA 02111-1307, USA. */\n   %{!shared:%{!mdll:crt2%O%s}} %{pg:gcrt2%O%s}\"\n \n /* MS runtime does not need a separate math library. */\n+#undef MATH_LIBRARY\n #define MATH_LIBRARY \"\"\n \n-/* Output STRING, a string representing a filename, to FILE.  We canonicalize\n-   it to be in MS-DOS format.  */\n+/* Output STRING, a string representing a filename, to FILE.\n+   We canonicalize it to be in MS-DOS format.  */\n+#undef OUTPUT_QUOTED_STRING\n #define OUTPUT_QUOTED_STRING(FILE, STRING) \\\n do {\t\t\t\t\t\t\\\n   char c;\t\t\t\t\t\\"}, {"sha": "fac2d8d61e49da6e802d25599a223065bc6085f2", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9771231409863b86f66b1e1c368a53b65980da/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=0a9771231409863b86f66b1e1c368a53b65980da", "patch": "@@ -201,9 +201,6 @@ extern void i386_pe_unique_section ();\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n \n-/* DWARF2 Unwinding doesn't work with exception handling yet. */\n-#define DWARF2_UNWIND_INFO 0\n-\n /* Don't assume anything about the header files. */\n #define NO_IMPLICIT_EXTERN_C\n "}]}