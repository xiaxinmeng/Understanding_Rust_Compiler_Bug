{"sha": "508ef0c675b409e2c92c8078a2dc5043da88db1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4ZWYwYzY3NWI0MDllMmM5MmM4MDc4YTJkYzUwNDNkYTg4ZGIxYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-29T14:40:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-29T14:40:16Z"}, "message": "re PR tree-optimization/53516 (Vectorization and memset recognition miscompile bitfield stores)\n\n2012-05-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/53516\n\t* tree-data-ref.c (stmt_with_adjacent_zero_store_dr_p): Reject\n\tbitfield accesses.\n\t* tree-vect-data-refs.c (vect_analyze_data_refs): Likewise.\n\n\t* gcc.dg/torture/pr53516.c: New testcase.\n\nFrom-SVN: r187961", "tree": {"sha": "defff990b81b71950b63227548cb841b34adf3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/defff990b81b71950b63227548cb841b34adf3bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/508ef0c675b409e2c92c8078a2dc5043da88db1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508ef0c675b409e2c92c8078a2dc5043da88db1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508ef0c675b409e2c92c8078a2dc5043da88db1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508ef0c675b409e2c92c8078a2dc5043da88db1b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "073a899888791eb53e4454236e3463b6619bfd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073a899888791eb53e4454236e3463b6619bfd9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073a899888791eb53e4454236e3463b6619bfd9b"}], "stats": {"total": 97, "additions": 85, "deletions": 12}, "files": [{"sha": "399da9304224cc2ae458e1241e2520ef5b47c2a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=508ef0c675b409e2c92c8078a2dc5043da88db1b", "patch": "@@ -1,3 +1,10 @@\n+2012-05-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53516\n+\t* tree-data-ref.c (stmt_with_adjacent_zero_store_dr_p): Reject\n+\tbitfield accesses.\n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Likewise.\n+\n 2012-05-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* LANGUAGES: Fix typos."}, {"sha": "56bb5abc88389d95abc27ab9e92db5600875d1e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=508ef0c675b409e2c92c8078a2dc5043da88db1b", "patch": "@@ -1,3 +1,8 @@\n+2012-05-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53516\n+\t* gcc.dg/torture/pr53516.c: New testcase.\n+\n 2012-05-29  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR preprocessor/53229"}, {"sha": "7f8094d19cdf36bfd5c12261c2f4150c01c4867c", "filename": "gcc/testsuite/gcc.dg/torture/pr53516.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53516.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53516.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53516.c?ref=508ef0c675b409e2c92c8078a2dc5043da88db1b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-ftree-vectorize -ftree-loop-distribute-patterns\" } */\n+\n+extern void abort (void);\n+\n+struct Foo\n+{\n+  char a : 1;\n+  char b : 7;\n+};\n+\n+struct Foo x[256];\n+int y[256];\n+\n+void __attribute__((noinline,noclone)) bar (int n)\n+{\n+  int i;\n+  for (i = 0; i < n; ++i)\n+    {\n+      x[i].a = 0;\n+      y[i] = 3;\n+    }\n+}\n+\n+int main()\n+{\n+  x[5].b = 7;\n+  bar (256);\n+  if (x[5].b != 7)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "8a23efa36dc6e2556fdf523fbfac40887db0863b", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=508ef0c675b409e2c92c8078a2dc5043da88db1b", "patch": "@@ -5255,26 +5255,33 @@ stores_from_loop (struct loop *loop, VEC (gimple, heap) **stmts)\n bool\n stmt_with_adjacent_zero_store_dr_p (gimple stmt)\n {\n-  tree op0, op1;\n+  tree lhs, rhs;\n   bool res;\n   struct data_reference *dr;\n \n   if (!stmt\n       || !gimple_vdef (stmt)\n-      || !is_gimple_assign (stmt)\n-      || !gimple_assign_single_p (stmt)\n-      || !(op1 = gimple_assign_rhs1 (stmt))\n-      || !(integer_zerop (op1) || real_zerop (op1)))\n+      || !gimple_assign_single_p (stmt))\n+    return false;\n+\n+  lhs = gimple_assign_lhs (stmt);\n+  rhs = gimple_assign_rhs1 (stmt);\n+\n+  /* If this is a bitfield store bail out.  */\n+  if (TREE_CODE (lhs) == COMPONENT_REF\n+      && DECL_BIT_FIELD (TREE_OPERAND (lhs, 1)))\n+    return false;\n+\n+  if (!(integer_zerop (rhs) || real_zerop (rhs)))\n     return false;\n \n   dr = XCNEW (struct data_reference);\n-  op0 = gimple_assign_lhs (stmt);\n \n   DR_STMT (dr) = stmt;\n-  DR_REF (dr) = op0;\n+  DR_REF (dr) = lhs;\n \n   res = dr_analyze_innermost (dr, loop_containing_stmt (stmt))\n-    && stride_of_unit_type_p (DR_STEP (dr), TREE_TYPE (op0));\n+    && stride_of_unit_type_p (DR_STEP (dr), TREE_TYPE (lhs));\n \n   free_data_ref (dr);\n   return res;"}, {"sha": "e34f41a3f1f975459875dc63e1a6aa98f3f0408e", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508ef0c675b409e2c92c8078a2dc5043da88db1b/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=508ef0c675b409e2c92c8078a2dc5043da88db1b", "patch": "@@ -2972,10 +2972,6 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n           return false;\n         }\n \n-      base = unshare_expr (DR_BASE_ADDRESS (dr));\n-      offset = unshare_expr (DR_OFFSET (dr));\n-      init = unshare_expr (DR_INIT (dr));\n-\n       if (stmt_can_throw_internal (stmt))\n         {\n           if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))\n@@ -2997,6 +2993,32 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n           return false;\n         }\n \n+      if (TREE_CODE (DR_REF (dr)) == COMPONENT_REF\n+\t  && DECL_BIT_FIELD (TREE_OPERAND (DR_REF (dr), 1)))\n+\t{\n+          if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))\n+            {\n+              fprintf (vect_dump, \"not vectorized: statement is bitfield \"\n+                       \"access \");\n+              print_gimple_stmt (vect_dump, stmt, 0, TDF_SLIM);\n+            }\n+\n+          if (bb_vinfo)\n+            {\n+              STMT_VINFO_VECTORIZABLE (stmt_info) = false;\n+              stop_bb_analysis = true;\n+              continue;\n+            }\n+\n+\t  if (gather)\n+\t    free_data_ref (dr);\n+          return false;\n+\t}\n+\n+      base = unshare_expr (DR_BASE_ADDRESS (dr));\n+      offset = unshare_expr (DR_OFFSET (dr));\n+      init = unshare_expr (DR_INIT (dr));\n+\n       if (is_gimple_call (stmt))\n \t{\n \t  if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))"}]}