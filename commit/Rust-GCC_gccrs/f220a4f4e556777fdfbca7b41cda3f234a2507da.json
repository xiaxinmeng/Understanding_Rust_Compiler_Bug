{"sha": "f220a4f4e556777fdfbca7b41cda3f234a2507da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyMGE0ZjRlNTU2Nzc3ZmRmYmNhN2I0MWNkYTNmMjM0YTI1MDdkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-04T11:11:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-04T11:11:24Z"}, "message": "re PR target/59163 (program compiled with g++ -O3 segfaults)\n\n\tPR target/59163\n\t* config/i386/i386.c (ix86_legitimate_combined_insn): If for\n\t!TARGET_AVX there is misaligned MEM operand with vector mode\n\tand get_attr_ssememalign is 0, return false.\n\t(ix86_expand_special_args_builtin): Add get_pointer_alignment\n\tcomputed alignment and for non-temporal loads/stores also\n\tat least GET_MODE_ALIGNMENT as MEM_ALIGN.\n\t* config/i386/sse.md\n\t(<sse>_loadu<ssemodesuffix><avxsizesuffix><mask_name>,\n\t<sse>_storeu<ssemodesuffix><avxsizesuffix>,\n\t<sse2_avx_avx512f>_loaddqu<mode><mask_name>,\n\t<sse2_avx_avx512f>_storedqu<mode>, <sse3>_lddqu<avxsizesuffix>,\n\tsse_vmrcpv4sf2, sse_vmrsqrtv4sf2, sse2_cvtdq2pd, sse_movhlps,\n\tsse_movlhps, sse_storehps, sse_loadhps, sse_loadlps,\n\t*vec_interleave_highv2df, *vec_interleave_lowv2df,\n\t*vec_extractv2df_1_sse, sse2_movsd, sse4_1_<code>v8qiv8hi2,\n\tsse4_1_<code>v4qiv4si2, sse4_1_<code>v4hiv4si2,\n\tsse4_1_<code>v2qiv2di2, sse4_1_<code>v2hiv2di2,\n\tsse4_1_<code>v2siv2di2, sse4_2_pcmpestr, *sse4_2_pcmpestr_unaligned,\n\tsse4_2_pcmpestri, sse4_2_pcmpestrm, sse4_2_pcmpestr_cconly,\n\tsse4_2_pcmpistr, *sse4_2_pcmpistr_unaligned, sse4_2_pcmpistri,\n\tsse4_2_pcmpistrm, sse4_2_pcmpistr_cconly): Add ssememalign attribute.\n\t* config/i386/i386.md (ssememalign): New define_attr.\n\n\t* g++.dg/torture/pr59163.C: New test.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r205661", "tree": {"sha": "ceaa2b1e2d3016b8185eb55ef9d26b1a87ee6fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceaa2b1e2d3016b8185eb55ef9d26b1a87ee6fc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f220a4f4e556777fdfbca7b41cda3f234a2507da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f220a4f4e556777fdfbca7b41cda3f234a2507da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f220a4f4e556777fdfbca7b41cda3f234a2507da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f220a4f4e556777fdfbca7b41cda3f234a2507da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b21fbbd29cee0d18b2e5babf2bee470db98ebb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21fbbd29cee0d18b2e5babf2bee470db98ebb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21fbbd29cee0d18b2e5babf2bee470db98ebb51"}], "stats": {"total": 171, "additions": 167, "deletions": 4}, "files": [{"sha": "56b4f477f785df38c210c3941f427f348ede47b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f220a4f4e556777fdfbca7b41cda3f234a2507da", "patch": "@@ -1,3 +1,30 @@\n+2013-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59163\n+\t* config/i386/i386.c (ix86_legitimate_combined_insn): If for\n+\t!TARGET_AVX there is misaligned MEM operand with vector mode\n+\tand get_attr_ssememalign is 0, return false.\n+\t(ix86_expand_special_args_builtin): Add get_pointer_alignment\n+\tcomputed alignment and for non-temporal loads/stores also\n+\tat least GET_MODE_ALIGNMENT as MEM_ALIGN.\n+\t* config/i386/sse.md\n+\t(<sse>_loadu<ssemodesuffix><avxsizesuffix><mask_name>,\n+\t<sse>_storeu<ssemodesuffix><avxsizesuffix>,\n+\t<sse2_avx_avx512f>_loaddqu<mode><mask_name>,\n+\t<sse2_avx_avx512f>_storedqu<mode>, <sse3>_lddqu<avxsizesuffix>,\n+\tsse_vmrcpv4sf2, sse_vmrsqrtv4sf2, sse2_cvtdq2pd, sse_movhlps,\n+\tsse_movlhps, sse_storehps, sse_loadhps, sse_loadlps,\n+\t*vec_interleave_highv2df, *vec_interleave_lowv2df,\n+\t*vec_extractv2df_1_sse, sse2_movsd, sse4_1_<code>v8qiv8hi2,\n+\tsse4_1_<code>v4qiv4si2, sse4_1_<code>v4hiv4si2,\n+\tsse4_1_<code>v2qiv2di2, sse4_1_<code>v2hiv2di2,\n+\tsse4_1_<code>v2siv2di2, sse4_2_pcmpestr, *sse4_2_pcmpestr_unaligned,\n+\tsse4_2_pcmpestri, sse4_2_pcmpestrm, sse4_2_pcmpestr_cconly,\n+\tsse4_2_pcmpistr, *sse4_2_pcmpistr_unaligned, sse4_2_pcmpistri,\n+\tsse4_2_pcmpistrm, sse4_2_pcmpistr_cconly): Add ssememalign attribute.\n+\t* config/i386/i386.md (ssememalign): New define_attr.\n+\n 2013-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59355"}, {"sha": "f9b06d13b89b5424f89a5ca7b3b5e0ae7ffab06f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f220a4f4e556777fdfbca7b41cda3f234a2507da", "patch": "@@ -5733,6 +5733,17 @@ ix86_legitimate_combined_insn (rtx insn)\n \t  bool win;\n \t  int j;\n \n+\t  /* For pre-AVX disallow unaligned loads/stores where the\n+\t     instructions don't support it.  */\n+\t  if (!TARGET_AVX\n+\t      && VECTOR_MODE_P (GET_MODE (op))\n+\t      && misaligned_operand (op, GET_MODE (op)))\n+\t    {\n+\t      int min_align = get_attr_ssememalign (insn);\n+\t      if (min_align == 0)\n+\t\treturn false;\n+\t    }\n+\n \t  /* A unary operator may be accepted by the predicate, but it\n \t     is irrelevant for matching constraints.  */\n \t  if (UNARY_P (op))\n@@ -32481,11 +32492,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \n static rtx\n ix86_expand_special_args_builtin (const struct builtin_description *d,\n-\t\t\t\t    tree exp, rtx target)\n+\t\t\t\t  tree exp, rtx target)\n {\n   tree arg;\n   rtx pat, op;\n   unsigned int i, nargs, arg_adjust, memory;\n+  bool aligned_mem = false;\n   struct\n     {\n       rtx op;\n@@ -32531,6 +32543,15 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       nargs = 1;\n       klass = load;\n       memory = 0;\n+      switch (icode)\n+\t{\n+\tcase CODE_FOR_sse4_1_movntdqa:\n+\tcase CODE_FOR_avx2_movntdqa:\n+\t  aligned_mem = true;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n       break;\n     case VOID_FTYPE_PV2SF_V4SF:\n     case VOID_FTYPE_PV4DI_V4DI:\n@@ -32548,6 +32569,26 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       klass = store;\n       /* Reserve memory operand for target.  */\n       memory = ARRAY_SIZE (args);\n+      switch (icode)\n+\t{\n+\t/* These builtins and instructions require the memory\n+\t   to be properly aligned.  */\n+\tcase CODE_FOR_avx_movntv4di:\n+\tcase CODE_FOR_sse2_movntv2di:\n+\tcase CODE_FOR_avx_movntv8sf:\n+\tcase CODE_FOR_sse_movntv4sf:\n+\tcase CODE_FOR_sse4a_vmmovntv4sf:\n+\tcase CODE_FOR_avx_movntv4df:\n+\tcase CODE_FOR_sse2_movntv2df:\n+\tcase CODE_FOR_sse4a_vmmovntv2df:\n+\tcase CODE_FOR_sse2_movntidi:\n+\tcase CODE_FOR_sse_movntq:\n+\tcase CODE_FOR_sse2_movntisi:\n+\t  aligned_mem = true;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n       break;\n     case V4SF_FTYPE_V4SF_PCV2SF:\n     case V2DF_FTYPE_V2DF_PCDOUBLE:\n@@ -32604,6 +32645,17 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t{\n \t  op = ix86_zero_extend_to_Pmode (op);\n \t  target = gen_rtx_MEM (tmode, op);\n+\t  /* target at this point has just BITS_PER_UNIT MEM_ALIGN\n+\t     on it.  Try to improve it using get_pointer_alignment,\n+\t     and if the special builtin is one that requires strict\n+\t     mode alignment, also from it's GET_MODE_ALIGNMENT.\n+\t     Failure to do so could leak to ix86_legitimate_combined_insn\n+\t     rejecting all changes to such insns.  */\n+\t  unsigned int align = get_pointer_alignment (arg);\n+\t  if (aligned_mem && align < GET_MODE_ALIGNMENT (tmode))\n+\t    align = GET_MODE_ALIGNMENT (tmode);\n+\t  if (MEM_ALIGN (target) < align)\n+\t    set_mem_align (target, align);\n \t}\n       else\n \ttarget = force_reg (tmode, op);\n@@ -32649,8 +32701,17 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t      /* This must be the memory operand.  */\n \t      op = ix86_zero_extend_to_Pmode (op);\n \t      op = gen_rtx_MEM (mode, op);\n-\t      gcc_assert (GET_MODE (op) == mode\n-\t\t\t  || GET_MODE (op) == VOIDmode);\n+\t      /* op at this point has just BITS_PER_UNIT MEM_ALIGN\n+\t\t on it.  Try to improve it using get_pointer_alignment,\n+\t\t and if the special builtin is one that requires strict\n+\t\t mode alignment, also from it's GET_MODE_ALIGNMENT.\n+\t\t Failure to do so could leak to ix86_legitimate_combined_insn\n+\t\t rejecting all changes to such insns.  */\n+\t      unsigned int align = get_pointer_alignment (arg);\n+\t      if (aligned_mem && align < GET_MODE_ALIGNMENT (mode))\n+\t\talign = GET_MODE_ALIGNMENT (mode);\n+\t      if (MEM_ALIGN (op) < align)\n+\t\tset_mem_align (op, align);\n \t    }\n \t  else\n \t    {"}, {"sha": "0c732c7689f62993faf9fe2fa9c433ba5a9d5302", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f220a4f4e556777fdfbca7b41cda3f234a2507da", "patch": "@@ -402,6 +402,13 @@\n \t   (const_string \"unknown\")]\n \t (const_string \"integer\")))\n \n+;; The minimum required alignment of vector mode memory operands of the SSE\n+;; (non-VEX/EVEX) instruction in bits, if it is different from\n+;; GET_MODE_ALIGNMENT of the operand, otherwise 0.  If an instruction has\n+;; multiple alternatives, this should be conservative maximum of those minimum\n+;; required alignments.\n+(define_attr \"ssememalign\" \"\" (const_int 0))\n+\n ;; The (bounding maximum) length of an instruction immediate.\n (define_attr \"length_immediate\" \"\"\n   (cond [(eq_attr \"type\" \"incdec,setcc,icmov,str,lea,other,multi,idiv,leave,"}, {"sha": "f4efeaa31226835ab22e98e45e3358233fd2dfea", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f220a4f4e556777fdfbca7b41cda3f234a2507da", "patch": "@@ -931,6 +931,7 @@\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n@@ -961,6 +962,7 @@\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n@@ -1020,6 +1022,7 @@\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (match_test \"TARGET_AVX\")\n@@ -1059,6 +1062,7 @@\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (match_test \"TARGET_AVX\")\n@@ -1105,6 +1109,7 @@\n   \"%vlddqu\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set (attr \"prefix_data16\")\n      (if_then_else\n        (match_test \"TARGET_AVX\")\n@@ -1369,6 +1374,7 @@\n    vrcpss\\t{%1, %2, %0|%0, %2, %k1}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n+   (set_attr \"ssememalign\" \"32\")\n    (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"btver2_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"orig,vex\")\n@@ -1509,6 +1515,7 @@\n    vrsqrtss\\t{%1, %2, %0|%0, %2, %k1}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n+   (set_attr \"ssememalign\" \"32\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -3853,6 +3860,7 @@\n   \"%vcvtdq2pd\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"<mask_codefor>avx512f_cvtpd2dq512<mask_name>\"\n@@ -4725,6 +4733,7 @@\n    %vmovhps\\t{%2, %0|%q0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF,V2SF\")])\n \n@@ -4770,6 +4779,7 @@\n    %vmovlps\\t{%2, %H0|%H0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF,V2SF\")])\n \n@@ -5174,6 +5184,7 @@\n    %vmovhlps\\t{%1, %d0|%d0, %1}\n    %vmovlps\\t{%H1, %d0|%d0, %H1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n@@ -5213,6 +5224,7 @@\n    %vmovlps\\t{%2, %H0|%H0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V2SF,V2SF,V4SF,V4SF,V2SF\")])\n \n@@ -5266,6 +5278,7 @@\n    %vmovlps\\t{%2, %0|%q0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"sseshuf,sseshuf,ssemov,ssemov,ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"length_immediate\" \"1,1,*,*,*\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF,V2SF\")])\n@@ -6224,7 +6237,8 @@\n    vmovlpd\\t{%H1, %2, %0|%0, %2, %H1}\n    %vmovhpd\\t{%1, %0|%q0, %1}\"\n   [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n-  (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_data16\" \"*,*,*,1,*,1\")\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,V1DF\")])\n@@ -6368,6 +6382,7 @@\n    %vmovlpd\\t{%2, %H0|%H0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n    (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_data16\" \"*,*,*,1,*,1\")\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,V1DF\")])\n@@ -6959,6 +6974,7 @@\n    movhlps\\t{%1, %0|%0, %1}\n    movlps\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n@@ -7051,6 +7067,7 @@\n    #\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*,*,*\")\n    (set_attr \"type\" \"ssemov,ssemov,sselog,sselog,ssemov,fmov,imov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_data16\" \"1,*,*,*,*,*,*\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,*,*,*\")\n    (set_attr \"mode\" \"V1DF,V1DF,V2DF,V2DF,DF,DF,DF\")])\n@@ -7119,6 +7136,7 @@\n \t      (const_string \"imov\")\n \t   ]\n \t   (const_string \"ssemov\")))\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_data16\" \"*,1,*,*,*,*,1,*,*,*,*\")\n    (set_attr \"length_immediate\" \"*,*,*,*,*,1,*,*,*,*,*\")\n    (set_attr \"prefix\" \"maybe_vex,orig,vex,orig,vex,orig,orig,vex,*,*,*\")\n@@ -7163,6 +7181,7 @@\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"length_immediate\" \"*,*,*,*,*,1,*,*,*\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex,orig,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"DF,DF,V1DF,V1DF,V1DF,V2DF,V1DF,V1DF,V1DF\")])\n \n@@ -11459,6 +11478,7 @@\n   \"TARGET_SSE4_1\"\n   \"%vpmov<extsuffix>bw\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11499,6 +11519,7 @@\n   \"TARGET_SSE4_1\"\n   \"%vpmov<extsuffix>bd\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"32\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11534,6 +11555,7 @@\n   \"TARGET_SSE4_1\"\n   \"%vpmov<extsuffix>wd\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11576,6 +11598,7 @@\n   \"TARGET_SSE4_1\"\n   \"%vpmov<extsuffix>bq\\t{%1, %0|%0, %w1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"16\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11613,6 +11636,7 @@\n   \"TARGET_SSE4_1\"\n   \"%vpmov<extsuffix>wq\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"32\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11646,6 +11670,7 @@\n   \"TARGET_SSE4_1\"\n   \"%vpmov<extsuffix>dq\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11939,6 +11964,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -12001,6 +12027,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -12028,6 +12055,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"memory\" \"none,load\")\n@@ -12055,6 +12083,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"btver2_decode\" \"vector\")\n@@ -12081,6 +12110,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load,none,load\")\n    (set_attr \"btver2_decode\" \"vector,vector,vector,vector\") \n@@ -12134,6 +12164,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -12187,6 +12218,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -12209,6 +12241,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"none,load\")\n@@ -12233,6 +12266,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"none,load\")\n@@ -12257,6 +12291,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"ssememalign\" \"8\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load,none,load\")\n    (set_attr \"prefix\" \"maybe_vex\")"}, {"sha": "32b4ff41e3e27ab5f42fe991ebe61e8c3e106543", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f220a4f4e556777fdfbca7b41cda3f234a2507da", "patch": "@@ -1,5 +1,8 @@\n 2013-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/59163\n+\t* g++.dg/torture/pr59163.C: New test.\n+\n \tPR tree-optimization/59355\n \t* g++.dg/ipa/pr59355.C: New test.\n "}, {"sha": "2f9a99970781b862f5a10303b16b8fac0e7cf195", "filename": "gcc/testsuite/g++.dg/torture/pr59163.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59163.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f220a4f4e556777fdfbca7b41cda3f234a2507da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59163.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59163.C?ref=f220a4f4e556777fdfbca7b41cda3f234a2507da", "patch": "@@ -0,0 +1,30 @@\n+// PR target/59163\n+// { dg-do run }\n+\n+struct A { float a[4]; };\n+struct B { int b; A a; };\n+\n+__attribute__((noinline, noclone)) void\n+bar (A &a)\n+{\n+  if (a.a[0] != 36.0f || a.a[1] != 42.0f || a.a[2] != 48.0f || a.a[3] != 54.0f)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline, noclone)) void\n+foo (A &a)\n+{\n+  int i;\n+  A c = a;\n+  for (i = 0; i < 4; i++)\n+    c.a[i] *= 6.0f;\n+  a = c;\n+  bar (a);\n+}\n+\n+int\n+main ()\n+{\n+  B b = { 5, { 6, 7, 8, 9 } };\n+  foo (b.a);\n+}"}]}