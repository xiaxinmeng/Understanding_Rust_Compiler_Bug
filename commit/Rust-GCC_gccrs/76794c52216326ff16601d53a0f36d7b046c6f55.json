{"sha": "76794c52216326ff16601d53a0f36d7b046c6f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3OTRjNTIyMTYzMjZmZjE2NjAxZDUzYTBmMzZkN2IwNDZjNmY1NQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T14:04:12Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T14:04:12Z"}, "message": "S/390: arch12: New builtins.\n\nThis patch implements a set of low-level builtins for instruction\nwhich would otherwise not be emitted by the compiler plus a set of\nhigh-level builtins as defined by the IBM XL compiler.  The high-level\nbuiltins will be described in a future revision of the z/OS XL C/C++\nProgramming Guide.\n\nI'll try to come up with a documentation appropriate for the GCC\nmanual as well (sometimes in the future).\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390-builtins.def: Add VXE builtins.  Add a flags\n\targument to the overloaded builtin variants.  Use the new flag to\n\tdeprecate certain builtin variants.\n\t* config/s390/s390-builtin-types.def: Add new builtin types.\n\t* config/s390/s390-builtins.h: Support new flags field for\n\toverloaded builtins.\n\t* config/s390/s390-c.c (OB_DEF_VAR): New flags field.\n\t(s390_macro_to_expand): Enable vector float data type.\n\t(s390_cpu_cpp_builtins_internal): Indicate support of the new\n\tbuiltins by incrementing the __VEC__ version number.\n\t(s390_expand_overloaded_builtin): Support expansion of vec_xl and\n\tvec_xst.\n\t(s390_resolve_overloaded_builtin): Emit error messages depending\n\ton the builtin flags.\n\t* config/s390/s390.c (s390_expand_builtin): Support additional\n\tflags argument.  Change error message to match the messages\n\temitted in s390-c.c.\n\t* config/s390/s390.md: New UNSPEC_* constants.\n\t(op_type): Add new instruction types.\n\t* config/s390/vecintrin.h: Add new builtins and test data class\n\tconstants.\n\t* config/s390/vx-builtins.md (V_HW_32_64): Add V4SF.\n\t(V_HW_4, VEC_HW, VECF_HW): New mode iterators.\n\t(VEC_INEXACT, VEC_NOINEXACT): New constants.\n\t(\"vec_splats<mode>\", \"vec_insert<mode>\", \"vec_promote<mode>\")\n\t(\"vec_insert_and_zero<mode>\", \"vec_mergeh<mode>\")\n\t(\"vec_mergel<mode>\"): V_HW -> VEC_HW.\n\n\t(\"vlrlrv16qi\", \"vstrlrv16qi\", \"vbpermv16qi\", \"vec_msumv2di\")\n\t(\"vmslg\", \"*vftci<mode>_cconly\", \"vftci<mode>_intcconly\")\n\t(\"*vftci<mode>\", \"vftci<mode>_intcc\", \"vec_double_s64\")\n\t(\"vec_double_u64\", \"vfmin<mode>\", \"vfmax<mode>\"): New definition.\n\n\t(\"and_av2df3\", \"and_cv2df3\", \"vec_andc_av2df3\")\n\t(\"vec_andc_cv2df3\", \"xor_av2df3\", \"xor_cv2df3\", \"vec_nor_av2df3\")\n\t(\"vec_nor_cv2df3\", \"ior_av2df3\", \"ior_cv2df3\", \"vec_nabs\")\n\t(\"*vftcidb\", \"*vftcidb_cconly\", \"vftcidb\"): Remove definition.\n\n\t(\"vec_all_<fpcmpcc:code>v2df\", \"vec_any_<fpcmpcc:code>v2df\")\n\t(\"vec_scatter_elementv4si_DI\", \"vec_cmp<fpcmp:code>v2df\")\n\t(\"vec_di_to_df_s64\", \"vec_di_to_df_u64\", \"vec_df_to_di_u64\")\n\t(\"vfidb\", \"*vldeb\", \"*vledb\", \"*vec_cmp<insn_cmp>v2df_cconly\")\n\t(\"vec_cmpeqv2df_cc\", \"vec_cmpeqv2df_cc\", \"vec_cmphv2df_cc\")\n\t(\"vec_cmphev2df_cc\", \"*vec_cmpeqv2df_cc\")\n\t(\"*vec_cmphv2df_cc\", \"*vec_cmphev2df_cc\"): Enable new modes as ...\n\n\t(\"vec_all_<fpcmpcc:code><mode>\", \"vec_any_<fpcmpcc:code><mode>\")\n\t(\"vec_scatter_element<V_HW_4:mode>_DI\")\n\t(\"vec_cmp<fpcmp:code><mode>\", \"vcdgb\", \"vcdlgb\", \"vclgdb\")\n\t(\"vec_fpint<mode>\", \"vflls\")\n\t(\"vflrd\", \"*vec_cmp<insn_cmp><mode>_cconly\", \"vec_cmpeq<mode>_cc\")\n\t(\"vec_cmpeq<mode>_cc\", \"vec_cmph<mode>_cc\", \"vec_cmphe<mode>_cc\")\n\t(\"*vec_cmpeq<mode>_cc\", \"*vec_cmph<mode>_cc\")\n\t(\"*vec_cmphe<mode>_cc\"): ... these.\n\n\t(\"vec_ctd_s64\", \"vec_ctsl\", \"vec_ctul\", \"vec_st2f\"): Use rounding\n\tmode constant instead of magic value.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/target-attribute/tattr-3.c: Adjust error message\n\tand remove the high-level builtin.  The error message for the\n\twould prevent compilation from reaching the second.\n\t* gcc.target/s390/target-attribute/tattr-4.c: Likewise.\n\nFrom-SVN: r246459", "tree": {"sha": "a5ca19d73677900d2c10dbd146a8c9748ff51855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ca19d73677900d2c10dbd146a8c9748ff51855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76794c52216326ff16601d53a0f36d7b046c6f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76794c52216326ff16601d53a0f36d7b046c6f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76794c52216326ff16601d53a0f36d7b046c6f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76794c52216326ff16601d53a0f36d7b046c6f55/comments", "author": null, "committer": null, "parents": [{"sha": "2de2b3f93b964081665a990a8b5645709302d834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2de2b3f93b964081665a990a8b5645709302d834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2de2b3f93b964081665a990a8b5645709302d834"}], "stats": {"total": 4455, "additions": 2543, "deletions": 1912}, "files": [{"sha": "c133ecc684096159b6e774724731b3da2bf9411a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -1,3 +1,63 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390-builtins.def: Add VXE builtins.  Add a flags\n+\targument to the overloaded builtin variants.  Use the new flag to\n+\tdeprecate certain builtin variants.\n+\t* config/s390/s390-builtin-types.def: Add new builtin types.\n+\t* config/s390/s390-builtins.h: Support new flags field for\n+\toverloaded builtins.\n+\t* config/s390/s390-c.c (OB_DEF_VAR): New flags field.\n+\t(s390_macro_to_expand): Enable vector float data type.\n+\t(s390_cpu_cpp_builtins_internal): Indicate support of the new\n+\tbuiltins by incrementing the __VEC__ version number.\n+\t(s390_expand_overloaded_builtin): Support expansion of vec_xl and\n+\tvec_xst.\n+\t(s390_resolve_overloaded_builtin): Emit error messages depending\n+\ton the builtin flags.\n+\t* config/s390/s390.c (s390_expand_builtin): Support additional\n+\tflags argument.  Change error message to match the messages\n+\temitted in s390-c.c.\n+\t* config/s390/s390.md: New UNSPEC_* constants.\n+\t(op_type): Add new instruction types.\n+\t* config/s390/vecintrin.h: Add new builtins and test data class\n+\tconstants.\n+\t* config/s390/vx-builtins.md (V_HW_32_64): Add V4SF.\n+\t(V_HW_4, VEC_HW, VECF_HW): New mode iterators.\n+\t(VEC_INEXACT, VEC_NOINEXACT): New constants.\n+\t(\"vec_splats<mode>\", \"vec_insert<mode>\", \"vec_promote<mode>\")\n+\t(\"vec_insert_and_zero<mode>\", \"vec_mergeh<mode>\")\n+\t(\"vec_mergel<mode>\"): V_HW -> VEC_HW.\n+\n+\t(\"vlrlrv16qi\", \"vstrlrv16qi\", \"vbpermv16qi\", \"vec_msumv2di\")\n+\t(\"vmslg\", \"*vftci<mode>_cconly\", \"vftci<mode>_intcconly\")\n+\t(\"*vftci<mode>\", \"vftci<mode>_intcc\", \"vec_double_s64\")\n+\t(\"vec_double_u64\", \"vfmin<mode>\", \"vfmax<mode>\"): New definition.\n+\n+\t(\"and_av2df3\", \"and_cv2df3\", \"vec_andc_av2df3\")\n+\t(\"vec_andc_cv2df3\", \"xor_av2df3\", \"xor_cv2df3\", \"vec_nor_av2df3\")\n+\t(\"vec_nor_cv2df3\", \"ior_av2df3\", \"ior_cv2df3\", \"vec_nabs\")\n+\t(\"*vftcidb\", \"*vftcidb_cconly\", \"vftcidb\"): Remove definition.\n+\n+\t(\"vec_all_<fpcmpcc:code>v2df\", \"vec_any_<fpcmpcc:code>v2df\")\n+\t(\"vec_scatter_elementv4si_DI\", \"vec_cmp<fpcmp:code>v2df\")\n+\t(\"vec_di_to_df_s64\", \"vec_di_to_df_u64\", \"vec_df_to_di_u64\")\n+\t(\"vfidb\", \"*vldeb\", \"*vledb\", \"*vec_cmp<insn_cmp>v2df_cconly\")\n+\t(\"vec_cmpeqv2df_cc\", \"vec_cmpeqv2df_cc\", \"vec_cmphv2df_cc\")\n+\t(\"vec_cmphev2df_cc\", \"*vec_cmpeqv2df_cc\")\n+\t(\"*vec_cmphv2df_cc\", \"*vec_cmphev2df_cc\"): Enable new modes as ...\n+\n+\t(\"vec_all_<fpcmpcc:code><mode>\", \"vec_any_<fpcmpcc:code><mode>\")\n+\t(\"vec_scatter_element<V_HW_4:mode>_DI\")\n+\t(\"vec_cmp<fpcmp:code><mode>\", \"vcdgb\", \"vcdlgb\", \"vclgdb\")\n+\t(\"vec_fpint<mode>\", \"vflls\")\n+\t(\"vflrd\", \"*vec_cmp<insn_cmp><mode>_cconly\", \"vec_cmpeq<mode>_cc\")\n+\t(\"vec_cmpeq<mode>_cc\", \"vec_cmph<mode>_cc\", \"vec_cmphe<mode>_cc\")\n+\t(\"*vec_cmpeq<mode>_cc\", \"*vec_cmph<mode>_cc\")\n+\t(\"*vec_cmphe<mode>_cc\"): ... these.\n+\n+\t(\"vec_ctd_s64\", \"vec_ctsl\", \"vec_ctul\", \"vec_st2f\"): Use rounding\n+\tmode constant instead of magic value.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_vec_compare): Support other"}, {"sha": "b7f33030eb9d45bddb32b42811745bf7ee64ee78", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 99, "deletions": 30, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -54,73 +54,74 @@\n \t       s390_builtin_types[T6])\n DEF_TYPE (BT_INT, integer_type_node, 0)\n DEF_TYPE (BT_VOID, void_type_node, 0)\n-DEF_TYPE (BT_FLTCONST, float_type_node, 1)\n+DEF_TYPE (BT_ULONG, long_unsigned_type_node, 0)\n DEF_TYPE (BT_UINT64, c_uint64_type_node, 0)\n-DEF_TYPE (BT_FLT, float_type_node, 0)\n+DEF_TYPE (BT_INT128, intTI_type_node, 0)\n DEF_TYPE (BT_UINT, unsigned_type_node, 0)\n DEF_TYPE (BT_VOIDCONST, void_type_node, 1)\n-DEF_TYPE (BT_ULONG, long_unsigned_type_node, 0)\n-DEF_TYPE (BT_INT128, intTI_type_node, 0)\n DEF_TYPE (BT_USHORTCONST, short_unsigned_type_node, 1)\n DEF_TYPE (BT_SHORTCONST, short_integer_type_node, 1)\n-DEF_TYPE (BT_INTCONST, integer_type_node, 1)\n DEF_TYPE (BT_UCHARCONST, unsigned_char_type_node, 1)\n-DEF_TYPE (BT_UCHAR, unsigned_char_type_node, 0)\n+DEF_TYPE (BT_INTCONST, integer_type_node, 1)\n DEF_TYPE (BT_SCHARCONST, signed_char_type_node, 1)\n+DEF_TYPE (BT_UCHAR, unsigned_char_type_node, 0)\n DEF_TYPE (BT_SHORT, short_integer_type_node, 0)\n DEF_TYPE (BT_LONG, long_integer_type_node, 0)\n DEF_TYPE (BT_SCHAR, signed_char_type_node, 0)\n-DEF_TYPE (BT_ULONGLONGCONST, long_long_unsigned_type_node, 1)\n DEF_TYPE (BT_USHORT, short_unsigned_type_node, 0)\n-DEF_TYPE (BT_LONGLONG, long_long_integer_type_node, 0)\n-DEF_TYPE (BT_DBLCONST, double_type_node, 1)\n DEF_TYPE (BT_ULONGLONG, long_long_unsigned_type_node, 0)\n+DEF_TYPE (BT_DBLCONST, double_type_node, 1)\n+DEF_TYPE (BT_FLT, float_type_node, 0)\n DEF_TYPE (BT_DBL, double_type_node, 0)\n+DEF_TYPE (BT_FLTCONST, float_type_node, 1)\n+DEF_TYPE (BT_ULONGLONGCONST, long_long_unsigned_type_node, 1)\n+DEF_TYPE (BT_LONGLONG, long_long_integer_type_node, 0)\n DEF_TYPE (BT_LONGLONGCONST, long_long_integer_type_node, 1)\n DEF_TYPE (BT_UINTCONST, unsigned_type_node, 1)\n DEF_VECTOR_TYPE (BT_UV2DI, BT_ULONGLONG, 2)\n-DEF_VECTOR_TYPE (BT_V4SI, BT_INT, 4)\n+DEF_VECTOR_TYPE (BT_V2DI, BT_LONGLONG, 2)\n DEF_VECTOR_TYPE (BT_V8HI, BT_SHORT, 8)\n+DEF_VECTOR_TYPE (BT_V4SI, BT_INT, 4)\n DEF_VECTOR_TYPE (BT_UV4SI, BT_UINT, 4)\n DEF_VECTOR_TYPE (BT_V16QI, BT_SCHAR, 16)\n-DEF_VECTOR_TYPE (BT_V2DF, BT_DBL, 2)\n-DEF_VECTOR_TYPE (BT_V2DI, BT_LONGLONG, 2)\n DEF_VECTOR_TYPE (BT_UV8HI, BT_USHORT, 8)\n+DEF_VECTOR_TYPE (BT_V4SF, BT_FLT, 4)\n+DEF_VECTOR_TYPE (BT_V2DF, BT_DBL, 2)\n DEF_VECTOR_TYPE (BT_UV16QI, BT_UCHAR, 16)\n-DEF_POINTER_TYPE (BT_UCHARPTR, BT_UCHAR)\n-DEF_POINTER_TYPE (BT_DBLCONSTPTR, BT_DBLCONST)\n+DEF_POINTER_TYPE (BT_USHORTPTR, BT_USHORT)\n+DEF_POINTER_TYPE (BT_UINTCONSTPTR, BT_UINTCONST)\n DEF_POINTER_TYPE (BT_VOIDPTR, BT_VOID)\n-DEF_POINTER_TYPE (BT_FLTPTR, BT_FLT)\n+DEF_POINTER_TYPE (BT_ULONGLONGCONSTPTR, BT_ULONGLONGCONST)\n DEF_POINTER_TYPE (BT_UINT64PTR, BT_UINT64)\n+DEF_POINTER_TYPE (BT_FLTCONSTPTR, BT_FLTCONST)\n+DEF_POINTER_TYPE (BT_USHORTCONSTPTR, BT_USHORTCONST)\n DEF_POINTER_TYPE (BT_SCHARPTR, BT_SCHAR)\n-DEF_POINTER_TYPE (BT_UINTCONSTPTR, BT_UINTCONST)\n-DEF_POINTER_TYPE (BT_ULONGLONGCONSTPTR, BT_ULONGLONGCONST)\n+DEF_POINTER_TYPE (BT_UCHARPTR, BT_UCHAR)\n+DEF_POINTER_TYPE (BT_VOIDCONSTPTR, BT_VOIDCONST)\n DEF_POINTER_TYPE (BT_LONGLONGCONSTPTR, BT_LONGLONGCONST)\n DEF_POINTER_TYPE (BT_SHORTPTR, BT_SHORT)\n-DEF_POINTER_TYPE (BT_USHORTPTR, BT_USHORT)\n+DEF_POINTER_TYPE (BT_DBLCONSTPTR, BT_DBLCONST)\n DEF_POINTER_TYPE (BT_INTPTR, BT_INT)\n-DEF_POINTER_TYPE (BT_INTCONSTPTR, BT_INTCONST)\n+DEF_POINTER_TYPE (BT_UINTPTR, BT_UINT)\n DEF_POINTER_TYPE (BT_LONGLONGPTR, BT_LONGLONG)\n DEF_POINTER_TYPE (BT_ULONGLONGPTR, BT_ULONGLONG)\n+DEF_POINTER_TYPE (BT_INTCONSTPTR, BT_INTCONST)\n DEF_POINTER_TYPE (BT_DBLPTR, BT_DBL)\n-DEF_POINTER_TYPE (BT_VOIDCONSTPTR, BT_VOIDCONST)\n-DEF_POINTER_TYPE (BT_USHORTCONSTPTR, BT_USHORTCONST)\n DEF_POINTER_TYPE (BT_SHORTCONSTPTR, BT_SHORTCONST)\n DEF_POINTER_TYPE (BT_UCHARCONSTPTR, BT_UCHARCONST)\n-DEF_POINTER_TYPE (BT_FLTCONSTPTR, BT_FLTCONST)\n DEF_POINTER_TYPE (BT_SCHARCONSTPTR, BT_SCHARCONST)\n-DEF_POINTER_TYPE (BT_UINTPTR, BT_UINT)\n-DEF_DISTINCT_TYPE (BT_BLONGLONG, BT_ULONGLONG)\n-DEF_DISTINCT_TYPE (BT_BINT, BT_UINT)\n-DEF_DISTINCT_TYPE (BT_BSHORT, BT_USHORT)\n+DEF_POINTER_TYPE (BT_FLTPTR, BT_FLT)\n DEF_DISTINCT_TYPE (BT_BCHAR, BT_UCHAR)\n-DEF_OPAQUE_VECTOR_TYPE (BT_OV2DI, BT_LONGLONG, 2)\n-DEF_OPAQUE_VECTOR_TYPE (BT_BV16QI, BT_BCHAR, 16)\n+DEF_DISTINCT_TYPE (BT_BSHORT, BT_USHORT)\n+DEF_DISTINCT_TYPE (BT_BINT, BT_UINT)\n+DEF_DISTINCT_TYPE (BT_BLONGLONG, BT_ULONGLONG)\n+DEF_OPAQUE_VECTOR_TYPE (BT_BV8HI, BT_BSHORT, 8)\n DEF_OPAQUE_VECTOR_TYPE (BT_OV4SI, BT_INT, 4)\n+DEF_OPAQUE_VECTOR_TYPE (BT_BV16QI, BT_BCHAR, 16)\n+DEF_OPAQUE_VECTOR_TYPE (BT_BV2DI, BT_BLONGLONG, 2)\n+DEF_OPAQUE_VECTOR_TYPE (BT_OV2DI, BT_LONGLONG, 2)\n DEF_OPAQUE_VECTOR_TYPE (BT_OUV4SI, BT_UINT, 4)\n DEF_OPAQUE_VECTOR_TYPE (BT_BV4SI, BT_BINT, 4)\n-DEF_OPAQUE_VECTOR_TYPE (BT_BV2DI, BT_BLONGLONG, 2)\n-DEF_OPAQUE_VECTOR_TYPE (BT_BV8HI, BT_BSHORT, 8)\n DEF_FN_TYPE_0 (BT_FN_INT, BT_INT)\n DEF_FN_TYPE_0 (BT_FN_UINT, BT_UINT)\n DEF_FN_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)\n@@ -150,13 +151,20 @@ DEF_FN_TYPE_1 (BT_FN_V16QI_SCHAR, BT_V16QI, BT_SCHAR)\n DEF_FN_TYPE_1 (BT_FN_V16QI_UCHAR, BT_V16QI, BT_UCHAR)\n DEF_FN_TYPE_1 (BT_FN_V16QI_V16QI, BT_V16QI, BT_V16QI)\n DEF_FN_TYPE_1 (BT_FN_V2DF_DBL, BT_V2DF, BT_DBL)\n+DEF_FN_TYPE_1 (BT_FN_V2DF_DBLCONSTPTR, BT_V2DF, BT_DBLCONSTPTR)\n DEF_FN_TYPE_1 (BT_FN_V2DF_FLTCONSTPTR, BT_V2DF, BT_FLTCONSTPTR)\n+DEF_FN_TYPE_1 (BT_FN_V2DF_UV2DI, BT_V2DF, BT_UV2DI)\n DEF_FN_TYPE_1 (BT_FN_V2DF_V2DF, BT_V2DF, BT_V2DF)\n+DEF_FN_TYPE_1 (BT_FN_V2DF_V2DI, BT_V2DF, BT_V2DI)\n+DEF_FN_TYPE_1 (BT_FN_V2DF_V4SF, BT_V2DF, BT_V4SF)\n DEF_FN_TYPE_1 (BT_FN_V2DI_SHORT, BT_V2DI, BT_SHORT)\n DEF_FN_TYPE_1 (BT_FN_V2DI_V16QI, BT_V2DI, BT_V16QI)\n DEF_FN_TYPE_1 (BT_FN_V2DI_V2DI, BT_V2DI, BT_V2DI)\n DEF_FN_TYPE_1 (BT_FN_V2DI_V4SI, BT_V2DI, BT_V4SI)\n DEF_FN_TYPE_1 (BT_FN_V2DI_V8HI, BT_V2DI, BT_V8HI)\n+DEF_FN_TYPE_1 (BT_FN_V4SF_FLT, BT_V4SF, BT_FLT)\n+DEF_FN_TYPE_1 (BT_FN_V4SF_FLTCONSTPTR, BT_V4SF, BT_FLTCONSTPTR)\n+DEF_FN_TYPE_1 (BT_FN_V4SF_V4SF, BT_V4SF, BT_V4SF)\n DEF_FN_TYPE_1 (BT_FN_V4SI_SHORT, BT_V4SI, BT_SHORT)\n DEF_FN_TYPE_1 (BT_FN_V4SI_V4SI, BT_V4SI, BT_V4SI)\n DEF_FN_TYPE_1 (BT_FN_V4SI_V8HI, BT_V4SI, BT_V8HI)\n@@ -166,6 +174,7 @@ DEF_FN_TYPE_1 (BT_FN_V8HI_V8HI, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_1 (BT_FN_VOID_INT, BT_VOID, BT_INT)\n DEF_FN_TYPE_1 (BT_FN_VOID_UINT, BT_VOID, BT_UINT)\n DEF_FN_TYPE_2 (BT_FN_DBL_V2DF_INT, BT_DBL, BT_V2DF, BT_INT)\n+DEF_FN_TYPE_2 (BT_FN_FLT_V4SF_INT, BT_FLT, BT_V4SF, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_INT128_INT128_INT128, BT_INT128, BT_INT128, BT_INT128)\n DEF_FN_TYPE_2 (BT_FN_INT_OV4SI_INT, BT_INT, BT_OV4SI, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_INT_OV4SI_OV4SI, BT_INT, BT_OV4SI, BT_OV4SI)\n@@ -176,6 +185,7 @@ DEF_FN_TYPE_2 (BT_FN_INT_UV8HI_UV8HI, BT_INT, BT_UV8HI, BT_UV8HI)\n DEF_FN_TYPE_2 (BT_FN_INT_V16QI_V16QI, BT_INT, BT_V16QI, BT_V16QI)\n DEF_FN_TYPE_2 (BT_FN_INT_V2DF_V2DF, BT_INT, BT_V2DF, BT_V2DF)\n DEF_FN_TYPE_2 (BT_FN_INT_V2DI_V2DI, BT_INT, BT_V2DI, BT_V2DI)\n+DEF_FN_TYPE_2 (BT_FN_INT_V4SF_V4SF, BT_INT, BT_V4SF, BT_V4SF)\n DEF_FN_TYPE_2 (BT_FN_INT_V4SI_V4SI, BT_INT, BT_V4SI, BT_V4SI)\n DEF_FN_TYPE_2 (BT_FN_INT_V8HI_V8HI, BT_INT, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_2 (BT_FN_INT_VOIDPTR_INT, BT_INT, BT_VOIDPTR, BT_INT)\n@@ -204,6 +214,7 @@ DEF_FN_TYPE_2 (BT_FN_UV16QI_UV4SI_UV4SI, BT_UV16QI, BT_UV4SI, BT_UV4SI)\n DEF_FN_TYPE_2 (BT_FN_UV16QI_UV8HI_UV8HI, BT_UV16QI, BT_UV8HI, BT_UV8HI)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_UCHAR_UCHAR, BT_UV2DI, BT_UCHAR, BT_UCHAR)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_ULONGLONG_INT, BT_UV2DI, BT_ULONGLONG, BT_INT)\n+DEF_FN_TYPE_2 (BT_FN_UV2DI_UV16QI_UV16QI, BT_UV2DI, BT_UV16QI, BT_UV16QI)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_UV2DI_UCHAR, BT_UV2DI, BT_UV2DI, BT_UCHAR)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_UV2DI_UINT, BT_UV2DI, BT_UV2DI, BT_UINT)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_UV2DI_UV2DI, BT_UV2DI, BT_UV2DI, BT_UV2DI)\n@@ -235,6 +246,7 @@ DEF_FN_TYPE_2 (BT_FN_V16QI_V8HI_V8HI, BT_V16QI, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_2 (BT_FN_V2DF_DBL_INT, BT_V2DF, BT_DBL, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_V2DF_UV2DI_INT, BT_V2DF, BT_UV2DI, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_V2DF_UV4SI_INT, BT_V2DF, BT_UV4SI, BT_INT)\n+DEF_FN_TYPE_2 (BT_FN_V2DF_V2DF_UCHAR, BT_V2DF, BT_V2DF, BT_UCHAR)\n DEF_FN_TYPE_2 (BT_FN_V2DF_V2DF_V2DF, BT_V2DF, BT_V2DF, BT_V2DF)\n DEF_FN_TYPE_2 (BT_FN_V2DF_V2DI_INT, BT_V2DF, BT_V2DI, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_V2DI_BV2DI_V2DI, BT_V2DI, BT_BV2DI, BT_V2DI)\n@@ -243,10 +255,14 @@ DEF_FN_TYPE_2 (BT_FN_V2DI_V2DF_INT, BT_V2DI, BT_V2DF, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_V2DI_V2DF_V2DF, BT_V2DI, BT_V2DF, BT_V2DF)\n DEF_FN_TYPE_2 (BT_FN_V2DI_V2DI_V2DI, BT_V2DI, BT_V2DI, BT_V2DI)\n DEF_FN_TYPE_2 (BT_FN_V2DI_V4SI_V4SI, BT_V2DI, BT_V4SI, BT_V4SI)\n+DEF_FN_TYPE_2 (BT_FN_V4SF_FLT_INT, BT_V4SF, BT_FLT, BT_INT)\n+DEF_FN_TYPE_2 (BT_FN_V4SF_V4SF_UCHAR, BT_V4SF, BT_V4SF, BT_UCHAR)\n+DEF_FN_TYPE_2 (BT_FN_V4SF_V4SF_V4SF, BT_V4SF, BT_V4SF, BT_V4SF)\n DEF_FN_TYPE_2 (BT_FN_V4SI_BV4SI_V4SI, BT_V4SI, BT_BV4SI, BT_V4SI)\n DEF_FN_TYPE_2 (BT_FN_V4SI_INT_VOIDPTR, BT_V4SI, BT_INT, BT_VOIDPTR)\n DEF_FN_TYPE_2 (BT_FN_V4SI_UV4SI_UV4SI, BT_V4SI, BT_UV4SI, BT_UV4SI)\n DEF_FN_TYPE_2 (BT_FN_V4SI_V2DI_V2DI, BT_V4SI, BT_V2DI, BT_V2DI)\n+DEF_FN_TYPE_2 (BT_FN_V4SI_V4SF_V4SF, BT_V4SI, BT_V4SF, BT_V4SF)\n DEF_FN_TYPE_2 (BT_FN_V4SI_V4SI_V4SI, BT_V4SI, BT_V4SI, BT_V4SI)\n DEF_FN_TYPE_2 (BT_FN_V4SI_V8HI_V8HI, BT_V4SI, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_2 (BT_FN_V8HI_BV8HI_V8HI, BT_V8HI, BT_BV8HI, BT_V8HI)\n@@ -256,9 +272,12 @@ DEF_FN_TYPE_2 (BT_FN_V8HI_V4SI_V4SI, BT_V8HI, BT_V4SI, BT_V4SI)\n DEF_FN_TYPE_2 (BT_FN_V8HI_V8HI_V8HI, BT_V8HI, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_2 (BT_FN_VOID_UINT64PTR_UINT64, BT_VOID, BT_UINT64PTR, BT_UINT64)\n DEF_FN_TYPE_2 (BT_FN_VOID_V2DF_FLTPTR, BT_VOID, BT_V2DF, BT_FLTPTR)\n+DEF_FN_TYPE_3 (BT_FN_BV2DI_V2DF_USHORT_INTPTR, BT_BV2DI, BT_V2DF, BT_USHORT, BT_INTPTR)\n+DEF_FN_TYPE_3 (BT_FN_BV4SI_V4SF_USHORT_INTPTR, BT_BV4SI, BT_V4SF, BT_USHORT, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_INT128_INT128_INT128_INT128, BT_INT128, BT_INT128, BT_INT128, BT_INT128)\n DEF_FN_TYPE_3 (BT_FN_INT_OV4SI_OV4SI_INTPTR, BT_INT, BT_OV4SI, BT_OV4SI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_OV4SI_INT_OV4SI_INT, BT_OV4SI, BT_INT, BT_OV4SI, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_OV4SI_OV4SI_INT_INTPTR, BT_OV4SI, BT_OV4SI, BT_INT, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_OV4SI_OV4SI_OV4SI_INT, BT_OV4SI, BT_OV4SI, BT_OV4SI, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_OV4SI_OV4SI_OV4SI_INTPTR, BT_OV4SI, BT_OV4SI, BT_OV4SI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_OV4SI_OV4SI_OV4SI_OV4SI, BT_OV4SI, BT_OV4SI, BT_OV4SI, BT_OV4SI)\n@@ -273,6 +292,7 @@ DEF_FN_TYPE_3 (BT_FN_UV16QI_UV8HI_UV8HI_INTPTR, BT_UV16QI, BT_UV8HI, BT_UV8HI, B\n DEF_FN_TYPE_3 (BT_FN_UV2DI_UV2DI_ULONGLONG_INT, BT_UV2DI, BT_UV2DI, BT_ULONGLONG, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_UV2DI_UV2DI_UV2DI_INT, BT_UV2DI, BT_UV2DI, BT_UV2DI, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_UV2DI_UV4SI_UV4SI_UV2DI, BT_UV2DI, BT_UV4SI, BT_UV4SI, BT_UV2DI)\n+DEF_FN_TYPE_3 (BT_FN_UV2DI_V2DF_INT_INT, BT_UV2DI, BT_V2DF, BT_INT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_UV4SI_UV2DI_UV2DI_INTPTR, BT_UV4SI, BT_UV2DI, BT_UV2DI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_UV4SI_UV4SI_UINT_INT, BT_UV4SI, BT_UV4SI, BT_UINT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_UV4SI_UV4SI_UV4SI_INT, BT_UV4SI, BT_UV4SI, BT_UV4SI, BT_INT)\n@@ -289,16 +309,27 @@ DEF_FN_TYPE_3 (BT_FN_V16QI_UV16QI_UV16QI_INTPTR, BT_V16QI, BT_UV16QI, BT_UV16QI,\n DEF_FN_TYPE_3 (BT_FN_V16QI_V16QI_V16QI_INTPTR, BT_V16QI, BT_V16QI, BT_V16QI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V16QI_V16QI_V16QI_V16QI, BT_V16QI, BT_V16QI, BT_V16QI, BT_V16QI)\n DEF_FN_TYPE_3 (BT_FN_V16QI_V8HI_V8HI_INTPTR, BT_V16QI, BT_V8HI, BT_V8HI, BT_INTPTR)\n+DEF_FN_TYPE_3 (BT_FN_V2DF_UV2DI_INT_INT, BT_V2DF, BT_UV2DI, BT_INT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_DBL_INT, BT_V2DF, BT_V2DF, BT_DBL, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_UCHAR_UCHAR, BT_V2DF, BT_V2DF, BT_UCHAR, BT_UCHAR)\n+DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_V2DF_INT, BT_V2DF, BT_V2DF, BT_V2DF, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_V2DF_V2DF, BT_V2DF, BT_V2DF, BT_V2DF, BT_V2DF)\n+DEF_FN_TYPE_3 (BT_FN_V2DF_V2DI_INT_INT, BT_V2DF, BT_V2DI, BT_INT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V2DI_UV2DI_UV2DI_INTPTR, BT_V2DI, BT_UV2DI, BT_UV2DI, BT_INTPTR)\n+DEF_FN_TYPE_3 (BT_FN_V2DI_V2DF_INT_INT, BT_V2DI, BT_V2DF, BT_INT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V2DI_V2DF_INT_INTPTR, BT_V2DI, BT_V2DF, BT_INT, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V2DI_V2DF_V2DF_INTPTR, BT_V2DI, BT_V2DF, BT_V2DF, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V2DI_V2DI_V2DI_INTPTR, BT_V2DI, BT_V2DI, BT_V2DI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V2DI_V4SI_V4SI_V2DI, BT_V2DI, BT_V4SI, BT_V4SI, BT_V2DI)\n+DEF_FN_TYPE_3 (BT_FN_V4SF_V2DF_INT_INT, BT_V4SF, BT_V2DF, BT_INT, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_FLT_INT, BT_V4SF, BT_V4SF, BT_FLT, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_UCHAR_UCHAR, BT_V4SF, BT_V4SF, BT_UCHAR, BT_UCHAR)\n+DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_V4SF_INT, BT_V4SF, BT_V4SF, BT_V4SF, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_V4SF_V4SF, BT_V4SF, BT_V4SF, BT_V4SF, BT_V4SF)\n DEF_FN_TYPE_3 (BT_FN_V4SI_UV4SI_UV4SI_INTPTR, BT_V4SI, BT_UV4SI, BT_UV4SI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V4SI_V2DI_V2DI_INTPTR, BT_V4SI, BT_V2DI, BT_V2DI, BT_INTPTR)\n+DEF_FN_TYPE_3 (BT_FN_V4SI_V4SF_INT_INTPTR, BT_V4SI, BT_V4SF, BT_INT, BT_INTPTR)\n+DEF_FN_TYPE_3 (BT_FN_V4SI_V4SF_V4SF_INTPTR, BT_V4SI, BT_V4SF, BT_V4SF, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V4SI_V4SI_V4SI_INTPTR, BT_V4SI, BT_V4SI, BT_V4SI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V4SI_V4SI_V4SI_V4SI, BT_V4SI, BT_V4SI, BT_V4SI, BT_V4SI)\n DEF_FN_TYPE_3 (BT_FN_V4SI_V8HI_V8HI_V4SI, BT_V4SI, BT_V8HI, BT_V8HI, BT_V4SI)\n@@ -310,10 +341,12 @@ DEF_FN_TYPE_3 (BT_FN_V8HI_V8HI_V8HI_V8HI, BT_V8HI, BT_V8HI, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_3 (BT_FN_VOID_OV4SI_INT_VOIDPTR, BT_VOID, BT_OV4SI, BT_INT, BT_VOIDPTR)\n DEF_FN_TYPE_3 (BT_FN_VOID_OV4SI_VOIDPTR_UINT, BT_VOID, BT_OV4SI, BT_VOIDPTR, BT_UINT)\n DEF_FN_TYPE_3 (BT_FN_VOID_V16QI_UINT_VOIDPTR, BT_VOID, BT_V16QI, BT_UINT, BT_VOIDPTR)\n+DEF_FN_TYPE_4 (BT_FN_INT128_UV2DI_UV2DI_INT128_INT, BT_INT128, BT_UV2DI, BT_UV2DI, BT_INT128, BT_INT)\n DEF_FN_TYPE_4 (BT_FN_OV4SI_OV4SI_OUV4SI_INTCONSTPTR_UCHAR, BT_OV4SI, BT_OV4SI, BT_OUV4SI, BT_INTCONSTPTR, BT_UCHAR)\n DEF_FN_TYPE_4 (BT_FN_OV4SI_OV4SI_OV4SI_OV4SI_INTPTR, BT_OV4SI, BT_OV4SI, BT_OV4SI, BT_OV4SI, BT_INTPTR)\n DEF_FN_TYPE_4 (BT_FN_UV16QI_UV16QI_UV16QI_INT_INTPTR, BT_UV16QI, BT_UV16QI, BT_UV16QI, BT_INT, BT_INTPTR)\n DEF_FN_TYPE_4 (BT_FN_UV16QI_UV16QI_UV16QI_UV16QI_INT, BT_UV16QI, BT_UV16QI, BT_UV16QI, BT_UV16QI, BT_INT)\n+DEF_FN_TYPE_4 (BT_FN_UV16QI_UV2DI_UV2DI_UV16QI_INT, BT_UV16QI, BT_UV2DI, BT_UV2DI, BT_UV16QI, BT_INT)\n DEF_FN_TYPE_4 (BT_FN_UV2DI_UV2DI_UV2DI_ULONGLONGCONSTPTR_UCHAR, BT_UV2DI, BT_UV2DI, BT_UV2DI, BT_ULONGLONGCONSTPTR, BT_UCHAR)\n DEF_FN_TYPE_4 (BT_FN_UV2DI_UV2DI_UV2DI_UV2DI_INT, BT_UV2DI, BT_UV2DI, BT_UV2DI, BT_UV2DI, BT_INT)\n DEF_FN_TYPE_4 (BT_FN_UV4SI_UV4SI_UV4SI_INT_INTPTR, BT_UV4SI, BT_UV4SI, BT_UV4SI, BT_INT, BT_INTPTR)\n@@ -331,6 +364,7 @@ DEF_OV_TYPE (BT_OV_BV16QI_BV16QI, BT_BV16QI, BT_BV16QI)\n DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_BV16QI, BT_BV16QI, BT_BV16QI, BT_BV16QI)\n DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_BV16QI_BV16QI, BT_BV16QI, BT_BV16QI, BT_BV16QI, BT_BV16QI)\n DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_BV16QI_INTPTR, BT_BV16QI, BT_BV16QI, BT_BV16QI, BT_INTPTR)\n+DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_BV16QI_ULONGLONG, BT_BV16QI, BT_BV16QI, BT_BV16QI, BT_ULONGLONG)\n DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_BV16QI_UV16QI, BT_BV16QI, BT_BV16QI, BT_BV16QI, BT_UV16QI)\n DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_INTPTR, BT_BV16QI, BT_BV16QI, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_BV16QI_BV16QI_UCHAR, BT_BV16QI, BT_BV16QI, BT_UCHAR)\n@@ -347,6 +381,7 @@ DEF_OV_TYPE (BT_OV_BV16QI_V16QI_V16QI_INTPTR, BT_BV16QI, BT_V16QI, BT_V16QI, BT_\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_BV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_INT, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_INT)\n+DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_ULONGLONG, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_ULONGLONG)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_UV16QI, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_UV16QI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_BV2DI_UV2DI, BT_BV2DI, BT_BV2DI, BT_BV2DI, BT_UV2DI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_UCHAR, BT_BV2DI, BT_BV2DI, BT_UCHAR)\n@@ -356,13 +391,15 @@ DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_UV4SI, BT_BV2DI, BT_BV2DI, BT_UV4SI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV2DI_UV8HI, BT_BV2DI, BT_BV2DI, BT_UV8HI)\n DEF_OV_TYPE (BT_OV_BV2DI_BV4SI, BT_BV2DI, BT_BV4SI)\n DEF_OV_TYPE (BT_OV_BV2DI_UV2DI_UV2DI, BT_BV2DI, BT_UV2DI, BT_UV2DI)\n+DEF_OV_TYPE (BT_OV_BV2DI_V2DF_USHORT_INTPTR, BT_BV2DI, BT_V2DF, BT_USHORT, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_BV2DI_V2DF_V2DF, BT_BV2DI, BT_V2DF, BT_V2DF)\n DEF_OV_TYPE (BT_OV_BV2DI_V2DI_V2DI, BT_BV2DI, BT_V2DI, BT_V2DI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV2DI_BV2DI, BT_BV4SI, BT_BV2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI, BT_BV4SI, BT_BV4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_BV4SI, BT_BV4SI, BT_BV4SI, BT_BV4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_BV4SI_BV4SI, BT_BV4SI, BT_BV4SI, BT_BV4SI, BT_BV4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_BV4SI_INTPTR, BT_BV4SI, BT_BV4SI, BT_BV4SI, BT_INTPTR)\n+DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_BV4SI_ULONGLONG, BT_BV4SI, BT_BV4SI, BT_BV4SI, BT_ULONGLONG)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_BV4SI_UV16QI, BT_BV4SI, BT_BV4SI, BT_BV4SI, BT_UV16QI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_BV4SI_UV4SI, BT_BV4SI, BT_BV4SI, BT_BV4SI, BT_UV4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_BV4SI_INTPTR, BT_BV4SI, BT_BV4SI, BT_INTPTR)\n@@ -376,6 +413,8 @@ DEF_OV_TYPE (BT_OV_BV4SI_UV4SI_UV4SI, BT_BV4SI, BT_UV4SI, BT_UV4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_UV4SI_UV4SI_INTPTR, BT_BV4SI, BT_UV4SI, BT_UV4SI, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_BV4SI_UV4SI_UV4SI_UV4SI, BT_BV4SI, BT_UV4SI, BT_UV4SI, BT_UV4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_UV4SI_UV4SI_UV4SI_INTPTR, BT_BV4SI, BT_UV4SI, BT_UV4SI, BT_UV4SI, BT_INTPTR)\n+DEF_OV_TYPE (BT_OV_BV4SI_V4SF_USHORT_INTPTR, BT_BV4SI, BT_V4SF, BT_USHORT, BT_INTPTR)\n+DEF_OV_TYPE (BT_OV_BV4SI_V4SF_V4SF, BT_BV4SI, BT_V4SF, BT_V4SF)\n DEF_OV_TYPE (BT_OV_BV4SI_V4SI_V4SI, BT_BV4SI, BT_V4SI, BT_V4SI)\n DEF_OV_TYPE (BT_OV_BV4SI_V4SI_V4SI_INTPTR, BT_BV4SI, BT_V4SI, BT_V4SI, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_BV8HI_BV16QI, BT_BV8HI, BT_BV16QI)\n@@ -384,6 +423,7 @@ DEF_OV_TYPE (BT_OV_BV8HI_BV8HI, BT_BV8HI, BT_BV8HI)\n DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_BV8HI, BT_BV8HI, BT_BV8HI, BT_BV8HI)\n DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_BV8HI_BV8HI, BT_BV8HI, BT_BV8HI, BT_BV8HI, BT_BV8HI)\n DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_BV8HI_INTPTR, BT_BV8HI, BT_BV8HI, BT_BV8HI, BT_INTPTR)\n+DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_BV8HI_ULONGLONG, BT_BV8HI, BT_BV8HI, BT_BV8HI, BT_ULONGLONG)\n DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_BV8HI_UV16QI, BT_BV8HI, BT_BV8HI, BT_BV8HI, BT_UV16QI)\n DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_BV8HI_UV8HI, BT_BV8HI, BT_BV8HI, BT_BV8HI, BT_UV8HI)\n DEF_OV_TYPE (BT_OV_BV8HI_BV8HI_INTPTR, BT_BV8HI, BT_BV8HI, BT_INTPTR)\n@@ -398,6 +438,7 @@ DEF_OV_TYPE (BT_OV_BV8HI_UV8HI_UV8HI_UV8HI_INTPTR, BT_BV8HI, BT_UV8HI, BT_UV8HI,\n DEF_OV_TYPE (BT_OV_BV8HI_V8HI_V8HI, BT_BV8HI, BT_V8HI, BT_V8HI)\n DEF_OV_TYPE (BT_OV_BV8HI_V8HI_V8HI_INTPTR, BT_BV8HI, BT_V8HI, BT_V8HI, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_DBL_V2DF_INT, BT_DBL, BT_V2DF, BT_INT)\n+DEF_OV_TYPE (BT_OV_FLT_V4SF_INT, BT_FLT, BT_V4SF, BT_INT)\n DEF_OV_TYPE (BT_OV_INT_BV16QI_BV16QI, BT_INT, BT_BV16QI, BT_BV16QI)\n DEF_OV_TYPE (BT_OV_INT_BV16QI_UV16QI, BT_INT, BT_BV16QI, BT_UV16QI)\n DEF_OV_TYPE (BT_OV_INT_BV16QI_V16QI, BT_INT, BT_BV16QI, BT_V16QI)\n@@ -426,6 +467,8 @@ DEF_OV_TYPE (BT_OV_INT_V2DF_V2DF, BT_INT, BT_V2DF, BT_V2DF)\n DEF_OV_TYPE (BT_OV_INT_V2DI_BV2DI, BT_INT, BT_V2DI, BT_BV2DI)\n DEF_OV_TYPE (BT_OV_INT_V2DI_UV2DI, BT_INT, BT_V2DI, BT_UV2DI)\n DEF_OV_TYPE (BT_OV_INT_V2DI_V2DI, BT_INT, BT_V2DI, BT_V2DI)\n+DEF_OV_TYPE (BT_OV_INT_V4SF_UV4SI, BT_INT, BT_V4SF, BT_UV4SI)\n+DEF_OV_TYPE (BT_OV_INT_V4SF_V4SF, BT_INT, BT_V4SF, BT_V4SF)\n DEF_OV_TYPE (BT_OV_INT_V4SI_BV4SI, BT_INT, BT_V4SI, BT_BV4SI)\n DEF_OV_TYPE (BT_OV_INT_V4SI_INT, BT_INT, BT_V4SI, BT_INT)\n DEF_OV_TYPE (BT_OV_INT_V4SI_UV4SI, BT_INT, BT_V4SI, BT_UV4SI)\n@@ -616,6 +659,7 @@ DEF_OV_TYPE (BT_OV_V2DF_DBLCONSTPTR_USHORT, BT_V2DF, BT_DBLCONSTPTR, BT_USHORT)\n DEF_OV_TYPE (BT_OV_V2DF_DBL_INT, BT_V2DF, BT_DBL, BT_INT)\n DEF_OV_TYPE (BT_OV_V2DF_DBL_V2DF_INT, BT_V2DF, BT_DBL, BT_V2DF, BT_INT)\n DEF_OV_TYPE (BT_OV_V2DF_LONG_DBLPTR, BT_V2DF, BT_LONG, BT_DBLPTR)\n+DEF_OV_TYPE (BT_OV_V2DF_UV2DI, BT_V2DF, BT_UV2DI)\n DEF_OV_TYPE (BT_OV_V2DF_UV2DI_INT, BT_V2DF, BT_UV2DI, BT_INT)\n DEF_OV_TYPE (BT_OV_V2DF_V2DF, BT_V2DF, BT_V2DF)\n DEF_OV_TYPE (BT_OV_V2DF_V2DF_BV2DI, BT_V2DF, BT_V2DF, BT_BV2DI)\n@@ -628,7 +672,9 @@ DEF_OV_TYPE (BT_OV_V2DF_V2DF_V2DF_INT, BT_V2DF, BT_V2DF, BT_V2DF, BT_INT)\n DEF_OV_TYPE (BT_OV_V2DF_V2DF_V2DF_ULONGLONG, BT_V2DF, BT_V2DF, BT_V2DF, BT_ULONGLONG)\n DEF_OV_TYPE (BT_OV_V2DF_V2DF_V2DF_UV16QI, BT_V2DF, BT_V2DF, BT_V2DF, BT_UV16QI)\n DEF_OV_TYPE (BT_OV_V2DF_V2DF_V2DF_UV2DI, BT_V2DF, BT_V2DF, BT_V2DF, BT_UV2DI)\n+DEF_OV_TYPE (BT_OV_V2DF_V2DF_V2DF_V2DF, BT_V2DF, BT_V2DF, BT_V2DF, BT_V2DF)\n DEF_OV_TYPE (BT_OV_V2DF_V2DF_V2DI, BT_V2DF, BT_V2DF, BT_V2DI)\n+DEF_OV_TYPE (BT_OV_V2DF_V2DI, BT_V2DF, BT_V2DI)\n DEF_OV_TYPE (BT_OV_V2DF_V2DI_INT, BT_V2DF, BT_V2DI, BT_INT)\n DEF_OV_TYPE (BT_OV_V2DI_BV2DI_V2DI, BT_V2DI, BT_BV2DI, BT_V2DI)\n DEF_OV_TYPE (BT_OV_V2DI_LONGLONG, BT_V2DI, BT_LONGLONG)\n@@ -660,6 +706,26 @@ DEF_OV_TYPE (BT_OV_V2DI_V4SI, BT_V2DI, BT_V4SI)\n DEF_OV_TYPE (BT_OV_V2DI_V4SI_V4SI, BT_V2DI, BT_V4SI, BT_V4SI)\n DEF_OV_TYPE (BT_OV_V2DI_V4SI_V4SI_V2DI, BT_V2DI, BT_V4SI, BT_V4SI, BT_V2DI)\n DEF_OV_TYPE (BT_OV_V2DI_V8HI, BT_V2DI, BT_V8HI)\n+DEF_OV_TYPE (BT_OV_V4SF_BV4SI_V4SF, BT_V4SF, BT_BV4SI, BT_V4SF)\n+DEF_OV_TYPE (BT_OV_V4SF_FLT, BT_V4SF, BT_FLT)\n+DEF_OV_TYPE (BT_OV_V4SF_FLTCONSTPTR, BT_V4SF, BT_FLTCONSTPTR)\n+DEF_OV_TYPE (BT_OV_V4SF_FLTCONSTPTR_UINT, BT_V4SF, BT_FLTCONSTPTR, BT_UINT)\n+DEF_OV_TYPE (BT_OV_V4SF_FLTCONSTPTR_USHORT, BT_V4SF, BT_FLTCONSTPTR, BT_USHORT)\n+DEF_OV_TYPE (BT_OV_V4SF_FLT_INT, BT_V4SF, BT_FLT, BT_INT)\n+DEF_OV_TYPE (BT_OV_V4SF_FLT_V4SF_INT, BT_V4SF, BT_FLT, BT_V4SF, BT_INT)\n+DEF_OV_TYPE (BT_OV_V4SF_LONG_FLTPTR, BT_V4SF, BT_LONG, BT_FLTPTR)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF, BT_V4SF, BT_V4SF)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_BV4SI, BT_V4SF, BT_V4SF, BT_BV4SI)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_UCHAR, BT_V4SF, BT_V4SF, BT_UCHAR)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_UV4SI, BT_V4SF, BT_V4SF, BT_UV4SI)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_UV4SI_FLTCONSTPTR_UCHAR, BT_V4SF, BT_V4SF, BT_UV4SI, BT_FLTCONSTPTR, BT_UCHAR)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SF, BT_V4SF, BT_V4SF, BT_V4SF)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SF_BV4SI, BT_V4SF, BT_V4SF, BT_V4SF, BT_BV4SI)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SF_ULONGLONG, BT_V4SF, BT_V4SF, BT_V4SF, BT_ULONGLONG)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SF_UV16QI, BT_V4SF, BT_V4SF, BT_V4SF, BT_UV16QI)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SF_UV4SI, BT_V4SF, BT_V4SF, BT_V4SF, BT_UV4SI)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SF_V4SF, BT_V4SF, BT_V4SF, BT_V4SF, BT_V4SF)\n+DEF_OV_TYPE (BT_OV_V4SF_V4SF_V4SI, BT_V4SF, BT_V4SF, BT_V4SI)\n DEF_OV_TYPE (BT_OV_V4SI_BV4SI_V4SI, BT_V4SI, BT_BV4SI, BT_V4SI)\n DEF_OV_TYPE (BT_OV_V4SI_INT, BT_V4SI, BT_INT)\n DEF_OV_TYPE (BT_OV_V4SI_INTCONSTPTR, BT_V4SI, BT_INTCONSTPTR)\n@@ -745,6 +811,9 @@ DEF_OV_TYPE (BT_OV_VOID_V2DF_UV2DI_DBLPTR_ULONGLONG, BT_VOID, BT_V2DF, BT_UV2DI,\n DEF_OV_TYPE (BT_OV_VOID_V2DI_LONGLONGPTR_UINT, BT_VOID, BT_V2DI, BT_LONGLONGPTR, BT_UINT)\n DEF_OV_TYPE (BT_OV_VOID_V2DI_LONG_LONGLONGPTR, BT_VOID, BT_V2DI, BT_LONG, BT_LONGLONGPTR)\n DEF_OV_TYPE (BT_OV_VOID_V2DI_UV2DI_LONGLONGPTR_ULONGLONG, BT_VOID, BT_V2DI, BT_UV2DI, BT_LONGLONGPTR, BT_ULONGLONG)\n+DEF_OV_TYPE (BT_OV_VOID_V4SF_FLTPTR_UINT, BT_VOID, BT_V4SF, BT_FLTPTR, BT_UINT)\n+DEF_OV_TYPE (BT_OV_VOID_V4SF_LONG_FLTPTR, BT_VOID, BT_V4SF, BT_LONG, BT_FLTPTR)\n+DEF_OV_TYPE (BT_OV_VOID_V4SF_V4SF_FLTPTR_ULONGLONG, BT_VOID, BT_V4SF, BT_V4SF, BT_FLTPTR, BT_ULONGLONG)\n DEF_OV_TYPE (BT_OV_VOID_V4SI_INTPTR_UINT, BT_VOID, BT_V4SI, BT_INTPTR, BT_UINT)\n DEF_OV_TYPE (BT_OV_VOID_V4SI_LONG_INTPTR, BT_VOID, BT_V4SI, BT_LONG, BT_INTPTR)\n DEF_OV_TYPE (BT_OV_VOID_V4SI_UV4SI_INTPTR_ULONGLONG, BT_VOID, BT_V4SI, BT_UV4SI, BT_INTPTR, BT_ULONGLONG)"}, {"sha": "9046cb08f9481cbe770bad111c395fc5e5922ff3", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 1925, "deletions": 1576, "changes": 3501, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=76794c52216326ff16601d53a0f36d7b046c6f55"}, {"sha": "019aff95dd55aa55b4ba81f82e8d69b820fbe410", "filename": "gcc/config/s390/s390-builtins.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.h?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -144,6 +144,8 @@ extern const unsigned int opflags_builtin[S390_BUILTIN_MAX + 1];\n \n extern const unsigned int\n   bflags_overloaded_builtin[S390_OVERLOADED_BUILTIN_MAX + 1];\n+extern const unsigned int\n+  bflags_overloaded_builtin_var[S390_OVERLOADED_BUILTIN_VAR_MAX + 1];\n extern const unsigned int\n   opflags_overloaded_builtin_var[S390_OVERLOADED_BUILTIN_VAR_MAX + 1];\n "}, {"sha": "fb8d821922d68724b1efe15e35cd49fc5a8bfc2d", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -61,7 +61,7 @@ type_for_overloaded_builtin_var[S390_OVERLOADED_BUILTIN_VAR_MAX + 1] =\n #undef OB_DEF_VAR\n #define B_DEF(...)\n #define OB_DEF(...)\n-#define OB_DEF_VAR(NAME, PATTERN, FLAGS, FNTYPE) FNTYPE,\n+#define OB_DEF_VAR(NAME, PATTERN, FLAGS, OPFLAGS, FNTYPE) FNTYPE,\n #include \"s390-builtins.def\"\n     BT_OV_MAX\n   };\n@@ -259,6 +259,7 @@ s390_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n   if (rid_code == RID_UNSIGNED || rid_code == RID_LONG\n       || rid_code == RID_SHORT || rid_code == RID_SIGNED\n       || rid_code == RID_INT || rid_code == RID_CHAR\n+      || (rid_code == RID_FLOAT && TARGET_VXE)\n       || rid_code == RID_DOUBLE)\n     {\n       expand_this = C_CPP_HASHNODE (__vector_keyword);\n@@ -323,7 +324,7 @@ s390_cpu_cpp_builtins_internal (cpp_reader *pfile,\n   s390_def_or_undef_macro (pfile, MASK_OPT_VX, old_opts, opts,\n \t\t\t   \"__VX__\", \"__VX__\");\n   s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t   \"__VEC__=10301\", \"__VEC__\");\n+\t\t\t   \"__VEC__=10302\", \"__VEC__\");\n   s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n \t\t\t   \"__vector=__attribute__((vector_size(16)))\",\n \t\t\t   \"__vector__\");\n@@ -471,11 +472,13 @@ s390_expand_overloaded_builtin (location_t loc,\n \t}\n       return build_int_cst (NULL_TREE,\n \t\t\t    TYPE_VECTOR_SUBPARTS (TREE_TYPE ((*arglist)[0])));\n+    case S390_OVERLOADED_BUILTIN_s390_vec_xl:\n     case S390_OVERLOADED_BUILTIN_s390_vec_xld2:\n     case S390_OVERLOADED_BUILTIN_s390_vec_xlw4:\n       return build2 (MEM_REF, return_type,\n \t\t     fold_build_pointer_plus ((*arglist)[1], (*arglist)[0]),\n \t\t     build_int_cst (TREE_TYPE ((*arglist)[1]), 0));\n+    case S390_OVERLOADED_BUILTIN_s390_vec_xst:\n     case S390_OVERLOADED_BUILTIN_s390_vec_xstd2:\n     case S390_OVERLOADED_BUILTIN_s390_vec_xstw4:\n       return build2 (MODIFY_EXPR, TREE_TYPE((*arglist)[0]),\n@@ -848,6 +851,7 @@ s390_resolve_overloaded_builtin (location_t loc,\n   int last_match_type = INT_MAX;\n   int last_match_index = -1;\n   unsigned int all_op_flags;\n+  const unsigned int ob_flags = bflags_for_builtin(ob_fcode);\n   int num_matches = 0;\n   tree target_builtin_decl, b_arg_chain, return_type;\n   enum s390_builtin_ov_type_index last_match_fntype_index;\n@@ -861,7 +865,7 @@ s390_resolve_overloaded_builtin (location_t loc,\n   /* 0...S390_BUILTIN_MAX-1 is for non-overloaded builtins.  */\n   if (ob_fcode < S390_BUILTIN_MAX)\n     {\n-      if (bflags_for_builtin(ob_fcode) & B_INT)\n+      if (ob_flags & B_INT)\n \t{\n \t  error_at (loc,\n \t\t    \"builtin %qF is for GCC internal use only.\",\n@@ -871,6 +875,21 @@ s390_resolve_overloaded_builtin (location_t loc,\n       return NULL_TREE;\n     }\n \n+  if (ob_flags & B_DEP)\n+    warning_at (loc, 0, \"builtin %qF is deprecated.\", ob_fndecl);\n+\n+  if (!TARGET_VX && (ob_flags & B_VX))\n+    {\n+      error_at (loc, \"%qF requires -mvx\", ob_fndecl);\n+      return error_mark_node;\n+    }\n+\n+  if (!TARGET_VXE && (ob_flags & B_VXE))\n+    {\n+      error_at (loc, \"%qF requires -march=arch12 or higher\", ob_fndecl);\n+      return error_mark_node;\n+    }\n+\n   ob_fcode -= S390_BUILTIN_MAX;\n \n   for (b_arg_chain = TYPE_ARG_TYPES (TREE_TYPE (ob_fndecl));\n@@ -941,6 +960,20 @@ s390_resolve_overloaded_builtin (location_t loc,\n       return error_mark_node;\n     }\n \n+  if (!TARGET_VXE\n+      && bflags_overloaded_builtin_var[last_match_index] & B_VXE)\n+    {\n+      error_at (loc, \"%qs matching variant requires -march=arch12 or higher\",\n+\t\tIDENTIFIER_POINTER (DECL_NAME (ob_fndecl)));\n+      return error_mark_node;\n+    }\n+\n+  if (bflags_overloaded_builtin_var[last_match_index] & B_DEP)\n+    warning_at (loc, 0, \"%qs matching variant is deprecated.\",\n+\t\tIDENTIFIER_POINTER (DECL_NAME (ob_fndecl)));\n+\n+  /* Overloaded variants which have MAX set as low level builtin are\n+     supposed to be replaced during expansion with something else.  */\n   if (bt_for_overloaded_builtin_var[last_match_index] == S390_BUILTIN_MAX)\n     target_builtin_decl = ob_fndecl;\n   else"}, {"sha": "0b1a95f2dca0e10301d49aaa213f95fb375b7248", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -624,6 +624,19 @@ const unsigned int bflags_overloaded_builtin[S390_OVERLOADED_BUILTIN_MAX + 1] =\n     0\n   };\n \n+const unsigned int\n+bflags_overloaded_builtin_var[S390_OVERLOADED_BUILTIN_VAR_MAX + 1] =\n+  {\n+#undef B_DEF\n+#undef OB_DEF\n+#undef OB_DEF_VAR\n+#define B_DEF(...)\n+#define OB_DEF(...)\n+#define OB_DEF_VAR(NAME, PATTERN, FLAGS, OPFLAGS, FNTYPE) FLAGS,\n+#include \"s390-builtins.def\"\n+    0\n+  };\n+\n const unsigned int\n opflags_overloaded_builtin_var[S390_OVERLOADED_BUILTIN_VAR_MAX + 1] =\n   {\n@@ -632,7 +645,7 @@ opflags_overloaded_builtin_var[S390_OVERLOADED_BUILTIN_VAR_MAX + 1] =\n #undef OB_DEF_VAR\n #define B_DEF(...)\n #define OB_DEF(...)\n-#define OB_DEF_VAR(NAME, PATTERN, FLAGS, FNTYPE) FLAGS,\n+#define OB_DEF_VAR(NAME, PATTERN, FLAGS, OPFLAGS, FNTYPE) OPFLAGS,\n #include \"s390-builtins.def\"\n     0\n   };\n@@ -827,7 +840,7 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t}\n       if (((bflags & B_VX) || (bflags & B_VXE)) && !TARGET_VX)\n \t{\n-\t  error (\"builtin %qF is not supported without -mvx \"\n+\t  error (\"builtin %qF requires -mvx \"\n \t\t \"(default with -march=z13 and higher).\", fndecl);\n \t  return const0_rtx;\n \t}"}, {"sha": "59f189c5e974c2d36a47de67c18f5dc41db885ba", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -156,6 +156,7 @@\n    UNSPEC_VEC_INSERT_AND_ZERO\n    UNSPEC_VEC_LOAD_BNDRY\n    UNSPEC_VEC_LOAD_LEN\n+   UNSPEC_VEC_LOAD_LEN_R\n    UNSPEC_VEC_MERGEH\n    UNSPEC_VEC_MERGEL\n    UNSPEC_VEC_PACK\n@@ -169,6 +170,8 @@\n    UNSPEC_VEC_PERMI\n    UNSPEC_VEC_EXTEND\n    UNSPEC_VEC_STORE_LEN\n+   UNSPEC_VEC_STORE_LEN_R\n+   UNSPEC_VEC_VBPERM\n    UNSPEC_VEC_UNPACKH\n    UNSPEC_VEC_UNPACKH_L\n    UNSPEC_VEC_UNPACKL\n@@ -223,13 +226,18 @@\n    UNSPEC_VEC_VCGDB\n    UNSPEC_VEC_VCLGDB\n \n-   UNSPEC_VEC_VFIDB\n+   UNSPEC_VEC_VFI\n \n-   UNSPEC_VEC_VLDEB\n-   UNSPEC_VEC_VLEDB\n+   UNSPEC_VEC_VFLL        ; vector fp load lengthened\n+   UNSPEC_VEC_VFLR        ; vector fp load rounded\n \n-   UNSPEC_VEC_VFTCIDB\n-   UNSPEC_VEC_VFTCIDBCC\n+   UNSPEC_VEC_VFTCI\n+   UNSPEC_VEC_VFTCICC\n+\n+   UNSPEC_VEC_MSUM\n+\n+   UNSPEC_VEC_VFMIN\n+   UNSPEC_VEC_VFMAX\n ])\n \n ;;\n@@ -400,7 +408,7 @@\n ;; Used to determine defaults for length and other attribute values.\n \n (define_attr \"op_type\"\n-  \"NN,E,RR,RRE,RX,RS,RSI,RI,SI,S,SS,SSE,RXE,RSE,RIL,RIE,RXY,RSY,SIY,RRF,SIL,RRS,RIS,VRI,VRR,VRS,VRV,VRX\"\n+  \"NN,E,RR,RRE,RX,RS,RSI,RI,SI,S,SS,SSE,RXE,RSE,RIL,RIE,RXY,RSY,SIY,RRF,SIL,RRS,RIS,VRI,VRR,VRS,VRV,VRX,VSI\"\n   (const_string \"NN\"))\n \n ;; Instruction type attribute used for scheduling."}, {"sha": "38cc0692df8b1fea12ede87eacfce42af5f01e09", "filename": "gcc/config/s390/vecintrin.h", "status": "modified", "additions": 84, "deletions": 41, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvecintrin.h?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -21,18 +21,42 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef _VECINTRIN_H\n #define _VECINTRIN_H\n \n-#define __VFTCI_ZERO           1<<11\n-#define __VFTCI_ZERO_N         1<<10\n-#define __VFTCI_NORMAL          1<<9\n-#define __VFTCI_NORMAL_N        1<<8\n-#define __VFTCI_SUBNORMAL       1<<7\n-#define __VFTCI_SUBNORMAL_N     1<<6\n-#define __VFTCI_INF             1<<5\n-#define __VFTCI_INF_N           1<<4\n-#define __VFTCI_QNAN            1<<3\n-#define __VFTCI_QNAN_N          1<<2\n-#define __VFTCI_SNAN            1<<1\n-#define __VFTCI_SNAN_N          1<<0\n+#define __VEC_CLASS_FP_ZERO_P      (1<<11)\n+#define __VEC_CLASS_FP_ZERO_N      (1<<10)\n+#define __VEC_CLASS_FP_ZERO\t   (__VEC_CLASS_FP_ZERO_P\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_ZERO_N)\n+\n+#define __VEC_CLASS_FP_NORMAL_P    (1<<9)\n+#define __VEC_CLASS_FP_NORMAL_N    (1<<8)\n+#define __VEC_CLASS_FP_NORMAL      (__VEC_CLASS_FP_NORMAL_P\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_NORMAL_N)\n+\n+#define __VEC_CLASS_FP_SUBNORMAL_P (1<<7)\n+#define __VEC_CLASS_FP_SUBNORMAL_N (1<<6)\n+#define __VEC_CLASS_FP_SUBNORMAL   (__VEC_CLASS_FP_SUBNORMAL_P\t\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_SUBNORMAL_N)\n+\n+#define __VEC_CLASS_FP_INFINITY_P  (1<<5)\n+#define __VEC_CLASS_FP_INFINITY_N  (1<<4)\n+#define __VEC_CLASS_FP_INFINITY    (__VEC_CLASS_FP_INFINITY_P\t\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_INFINITY_N)\n+\n+#define __VEC_CLASS_FP_QNAN_P      (1<<3)\n+#define __VEC_CLASS_FP_QNAN_N      (1<<2)\n+#define __VEC_CLASS_FP_QNAN        (__VEC_CLASS_FP_QNAN_P\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_QNAN_N)\n+\n+#define __VEC_CLASS_FP_SNAN_P      (1<<1)\n+#define __VEC_CLASS_FP_SNAN_N      (1<<0)\n+#define __VEC_CLASS_FP_SNAN        (__VEC_CLASS_FP_SNAN_P\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_SNAN_N)\n+\n+#define __VEC_CLASS_FP_NAN         (__VEC_CLASS_FP_QNAN\t\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_SNAN)\n+#define __VEC_CLASS_FP_NOT_NORMAL  (__VEC_CLASS_FP_NAN\t\t\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_SUBNORMAL\t\t\\\n+\t\t\t\t    |__VEC_CLASS_FP_ZERO\t\t\\\n+\t\t\t\t    | __VEC_CLASS_FP_INFINITY)\n \n /* This also accepts a type for its parameter, so it is not enough\n    to #define vec_step to __builtin_vec_step.  */\n@@ -76,62 +100,69 @@ __lcbb(const void *ptr, int bndry)\n #define vec_checksum __builtin_s390_vcksm\n #define vec_gfmsum_128 __builtin_s390_vgfmg\n #define vec_gfmsum_accum_128 __builtin_s390_vgfmag\n-#define vec_ceil(X) __builtin_s390_vfidb((X), 4, 6)\n-#define vec_roundp(X) __builtin_s390_vfidb((X), 4, 6)\n-#define vec_floor(X) __builtin_s390_vfidb((X), 4, 7)\n-#define vec_roundm(X) __builtin_s390_vfidb((X), 4, 7)\n-#define vec_trunc(X) __builtin_s390_vfidb((X), 4, 5)\n-#define vec_roundz(X) __builtin_s390_vfidb((X), 4, 5)\n-#define vec_roundc(X) __builtin_s390_vfidb((X), 4, 0)\n-#define vec_round(X) __builtin_s390_vfidb((X), 4, 4)\n+#define vec_ceil(X)   __builtin_s390_vfi((X), 4, 6)\n+#define vec_roundp(X) __builtin_s390_vfi((X), 4, 6)\n+#define vec_floor(X)  __builtin_s390_vfi((X), 4, 7)\n+#define vec_roundm(X) __builtin_s390_vfi((X), 4, 7)\n+#define vec_trunc(X)  __builtin_s390_vfi((X), 4, 5)\n+#define vec_roundz(X) __builtin_s390_vfi((X), 4, 5)\n+#define vec_rint(X)   __builtin_s390_vfi((X), 0, 0)\n+#define vec_roundc(X) __builtin_s390_vfi((X), 4, 0)\n+#define vec_round(X)  __builtin_s390_vfi((X), 4, 4)\n+#define vec_signed(X) __builtin_s390_vcgdb((X), 0, 0)\n+#define vec_unsigned(X) __builtin_s390_vclgdb((X), 0, 0)\n+#define vec_doublee(X) __builtin_s390_vfll((X))\n+#define vec_floate(X) __builtin_s390_vflr((X), 0, 0)\n #define vec_madd __builtin_s390_vfmadb\n #define vec_msub __builtin_s390_vfmsdb\n+#define vec_load_len_r(X,Y) __builtin_s390_vlrl((Y),(X))\n+#define vec_store_len_r(X,Y) __builtin_s390_vstrl((Y),(X))\n \n #define vec_all_nan(a)\t\t\t\t\t\t\\\n   __extension__ ({\t\t\t\t\t\t\\\n       int __cc;\t\t\t\t\t\t\t\\\n-      __builtin_s390_vftcidb (a,\t\t\t\t\\\n-\t\t\t      __VFTCI_QNAN\t\t\t\\\n-\t\t\t      | __VFTCI_QNAN_N\t\t\t\\\n-\t\t\t      | __VFTCI_SNAN\t\t\t\\\n-\t\t\t      | __VFTCI_SNAN_N, &__cc);\t\t\\\n+      __builtin_s390_vec_fp_test_data_class (a,\t\t\t\\\n+\t\t\t    __VEC_CLASS_FP_QNAN\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_QNAN_N\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SNAN\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SNAN_N, &__cc);\t\t\\\n       __cc == 0 ? 1 : 0;\t\t\t\t\t\\\n     })\n \n #define vec_all_numeric(a)\t\t\t\t\t\\\n   __extension__ ({\t\t\t\t\t\t\\\n       int __cc;\t\t\t\t\t\t\t\\\n-      __builtin_s390_vftcidb (a,\t\t\t\t\\\n-\t\t\t      __VFTCI_NORMAL\t\t\t\\\n-\t\t\t      | __VFTCI_NORMAL_N\t\t\\\n-\t\t\t      | __VFTCI_SUBNORMAL\t\t\\\n-\t\t\t      | __VFTCI_SUBNORMAL_N, &__cc);\t\\\n+      __builtin_s390_vec_fp_test_data_class (a,\t\t\t\t\\\n+\t\t\t    __VEC_CLASS_FP_NORMAL\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_NORMAL_N\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SUBNORMAL\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SUBNORMAL_N, &__cc);\t\\\n       __cc == 0 ? 1 : 0;\t\t\t\t\t\\\n     })\n \n #define vec_any_nan(a)\t\t\t\t\t\t\\\n   __extension__ ({\t\t\t\t\t\t\\\n       int __cc;\t\t\t\t\t\t\t\\\n-      __builtin_s390_vftcidb (a,\t\t\t\t\\\n-\t\t\t      __VFTCI_QNAN\t\t\t\\\n-\t\t\t      | __VFTCI_QNAN_N\t\t\t\\\n-\t\t\t      | __VFTCI_SNAN\t\t\t\\\n-\t\t\t      | __VFTCI_SNAN_N, &cc);\t\t\\\n+      __builtin_s390_vec_fp_test_data_class (a,\t\t\t\\\n+\t\t\t    __VEC_CLASS_FP_QNAN\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_QNAN_N\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SNAN\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SNAN_N, &cc);\t\t\\\n       cc != 3 ? 1 : 0;\t\t\t\t\t\t\\\n     })\n \n #define vec_any_numeric(a)\t\t\t\t\t\\\n   __extension__ ({\t\t\t\t\t\t\\\n       int __cc;\t\t\t\t\t\t\t\\\n-      __builtin_s390_vftcidb (a,\t\t\t\t\\\n-\t\t\t      __VFTCI_NORMAL\t\t\t\\\n-\t\t\t      | __VFTCI_NORMAL_N\t\t\\\n-\t\t\t      | __VFTCI_SUBNORMAL\t\t\\\n-\t\t\t      | __VFTCI_SUBNORMAL_N, &cc);\t\\\n+      __builtin_s390_vec_fp_test_data_class (a,\t\t\t\t\\\n+\t\t\t    __VEC_CLASS_FP_NORMAL\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_NORMAL_N\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SUBNORMAL\t\t\t\\\n+\t\t\t    | __VEC_CLASS_FP_SUBNORMAL_N, &cc);\t\\\n       cc != 3 ? 1 : 0;\t\t\t\t\t\t\\\n     })\n-\n #define vec_gather_element __builtin_s390_vec_gather_element\n+#define vec_xl __builtin_s390_vec_xl\n #define vec_xld2 __builtin_s390_vec_xld2\n #define vec_xlw4 __builtin_s390_vec_xlw4\n #define vec_splats __builtin_s390_vec_splats\n@@ -155,9 +186,11 @@ __lcbb(const void *ptr, int bndry)\n #define vec_scatter_element __builtin_s390_vec_scatter_element\n #define vec_sel __builtin_s390_vec_sel\n #define vec_extend_s64 __builtin_s390_vec_extend_s64\n+#define vec_xst __builtin_s390_vec_xst\n #define vec_xstd2 __builtin_s390_vec_xstd2\n #define vec_xstw4 __builtin_s390_vec_xstw4\n #define vec_store_len __builtin_s390_vec_store_len\n+#define vec_bperm_u128 __builtin_s390_vec_bperm_u128\n #define vec_unpackh __builtin_s390_vec_unpackh\n #define vec_unpackl __builtin_s390_vec_unpackl\n #define vec_addc __builtin_s390_vec_addc\n@@ -223,6 +256,10 @@ __lcbb(const void *ptr, int bndry)\n #define vec_sum_u128 __builtin_s390_vec_sum_u128\n #define vec_sum4 __builtin_s390_vec_sum4\n #define vec_test_mask __builtin_s390_vec_test_mask\n+#define vec_msum_u128 __builtin_s390_vec_msum_u128\n+#define vec_eqv __builtin_s390_vec_eqv\n+#define vec_nand __builtin_s390_vec_nand\n+#define vec_orc __builtin_s390_vec_orc\n #define vec_find_any_eq_idx __builtin_s390_vec_find_any_eq_idx\n #define vec_find_any_ne_idx __builtin_s390_vec_find_any_ne_idx\n #define vec_find_any_eq_or_0_idx __builtin_s390_vec_find_any_eq_or_0_idx\n@@ -268,4 +305,10 @@ __lcbb(const void *ptr, int bndry)\n #define vec_ctul __builtin_s390_vec_ctul\n #define vec_ld2f __builtin_s390_vec_ld2f\n #define vec_st2f __builtin_s390_vec_st2f\n+#define vec_double __builtin_s390_vec_double\n+#define vec_nmadd __builtin_s390_vec_nmadd\n+#define vec_nmsub __builtin_s390_vec_nmsub\n+#define vec_nabs __builtin_s390_vec_nabs\n+#define vec_sqrt __builtin_s390_vec_sqrt\n+#define vec_fp_test_data_class __builtin_s390_vec_fp_test_data_class\n #endif /* _VECINTRIN_H */"}, {"sha": "cf79c7bc85942ece89d7975492ae467d2a790919", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 298, "deletions": 248, "changes": 546, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -20,9 +20,13 @@\n \n ; The patterns in this file are enabled with -mzvector\n \n-(define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF])\n+(define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n (define_mode_iterator VI_HW_SD [V4SI V2DI])\n (define_mode_iterator V_HW_HSD [V8HI V4SI V2DI V2DF])\n+(define_mode_iterator V_HW_4 [V4SI V4SF])\n+; Full size vector modes with more than one element which are directly supported in vector registers by the hardware.\n+(define_mode_iterator VEC_HW  [V16QI V8HI V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n+(define_mode_iterator VECF_HW [(V4SF \"TARGET_VXE\") V2DF])\n \n ; The element type of the vector with floating point modes translated\n ; to int modes of the same size.\n@@ -61,6 +65,11 @@\n    (VEC_RND_TO_INF                 6)\n    (VEC_RND_TO_MINF                7)])\n \n+; Inexact suppression facility flag as being used for e.g. VFI\n+(define_constants\n+  [(VEC_INEXACT                0)\n+   (VEC_NOINEXACT              4)])\n+\n \n ; Vector gather element\n \n@@ -142,36 +151,36 @@\n })\n \n (define_expand \"vec_splats<mode>\"\n-  [(set (match_operand:V_HW                          0 \"register_operand\" \"\")\n-\t(vec_duplicate:V_HW (match_operand:<non_vec> 1 \"general_operand\"  \"\")))]\n+  [(set (match_operand:VEC_HW                          0 \"register_operand\" \"\")\n+\t(vec_duplicate:VEC_HW (match_operand:<non_vec> 1 \"general_operand\"  \"\")))]\n   \"TARGET_VX\")\n \n (define_expand \"vec_insert<mode>\"\n-  [(set (match_operand:V_HW                    0 \"register_operand\" \"\")\n-\t(unspec:V_HW [(match_operand:<non_vec> 2 \"register_operand\" \"\")\n-\t\t      (match_operand:SI        3 \"nonmemory_operand\" \"\")\n-\t\t      (match_operand:V_HW      1 \"register_operand\" \"\")]\n-\t\t     UNSPEC_VEC_SET))]\n+  [(set (match_operand:VEC_HW                    0 \"register_operand\" \"\")\n+\t(unspec:VEC_HW [(match_operand:<non_vec> 2 \"register_operand\" \"\")\n+\t\t\t(match_operand:SI        3 \"nonmemory_operand\" \"\")\n+\t\t\t(match_operand:VEC_HW    1 \"register_operand\" \"\")]\n+\t\t       UNSPEC_VEC_SET))]\n   \"TARGET_VX\"\n   \"\")\n \n ; This is vec_set + modulo arithmetic on the element selector (op 2)\n (define_expand \"vec_promote<mode>\"\n-  [(set (match_operand:V_HW                    0 \"register_operand\" \"\")\n-\t(unspec:V_HW [(match_operand:<non_vec> 1 \"register_operand\" \"\")\n-\t\t      (match_operand:SI        2 \"nonmemory_operand\" \"\")\n-\t\t      (match_dup 0)]\n-\t\t     UNSPEC_VEC_SET))]\n+  [(set (match_operand:VEC_HW                    0 \"register_operand\" \"\")\n+\t(unspec:VEC_HW [(match_operand:<non_vec> 1 \"register_operand\" \"\")\n+\t\t\t(match_operand:SI        2 \"nonmemory_operand\" \"\")\n+\t\t\t(match_dup 0)]\n+\t\t       UNSPEC_VEC_SET))]\n   \"TARGET_VX\"\n   \"\")\n \n ; vec_extract is also an RTL standard name -> vector.md\n \n ; vllezb, vllezh, vllezf, vllezg\n (define_insn \"vec_insert_and_zero<mode>\"\n-  [(set (match_operand:V_HW                    0 \"register_operand\" \"=v\")\n-\t(unspec:V_HW [(match_operand:<non_vec> 1 \"memory_operand\"    \"R\")]\n-\t\t     UNSPEC_VEC_INSERT_AND_ZERO))]\n+  [(set (match_operand:VEC_HW                    0 \"register_operand\" \"=v\")\n+\t(unspec:VEC_HW [(match_operand:<non_vec> 1 \"memory_operand\"    \"R\")]\n+\t\t       UNSPEC_VEC_INSERT_AND_ZERO))]\n   \"TARGET_VX\"\n   \"vllez<bhfgq>\\t%v0,%1\"\n   [(set_attr \"op_type\" \"VRX\")])\n@@ -185,24 +194,36 @@\n   \"vlbb\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRX\")])\n \n+(define_insn \"vlrlrv16qi\"\n+  [(set (match_operand:V16QI              0 \"register_operand\"  \"=v,v\")\n+\t(unspec:V16QI [(match_operand:BLK 2 \"memory_operand\"     \"Q,Q\")\n+\t\t       (match_operand:SI  1 \"nonmemory_operand\"  \"d,C\")]\n+\t\t      UNSPEC_VEC_LOAD_LEN_R))]\n+  \"TARGET_VXE\"\n+  \"@\n+   vlrlr\\t%v0,%1,%2\n+   vlrl\\t%v0,%2,%1\"\n+  [(set_attr \"op_type\" \"VRS,VSI\")])\n+\n+\n ; FIXME: The following two patterns might using vec_merge. But what is\n ; the canonical form: (vec_select (vec_merge op0 op1)) or (vec_merge\n ; (vec_select op0) (vec_select op1)\n ; vmrhb, vmrhh, vmrhf, vmrhg\n (define_insn \"vec_mergeh<mode>\"\n-  [(set (match_operand:V_HW               0 \"register_operand\" \"=v\")\n-\t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:V_HW 2 \"register_operand\"  \"v\")]\n-\t\t     UNSPEC_VEC_MERGEH))]\n+  [(set (match_operand:VEC_HW                 0 \"register_operand\" \"=v\")\n+\t(unspec:VEC_HW [(match_operand:VEC_HW 1 \"register_operand\"  \"v\")\n+\t\t\t(match_operand:VEC_HW 2 \"register_operand\"  \"v\")]\n+\t\t       UNSPEC_VEC_MERGEH))]\n   \"TARGET_VX\"\n   \"vmrh<bhfgq>\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vmrlb, vmrlh, vmrlf, vmrlg\n (define_insn \"vec_mergel<mode>\"\n-  [(set (match_operand:V_HW               0 \"register_operand\" \"=v\")\n-\t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:V_HW 2 \"register_operand\"  \"v\")]\n+  [(set (match_operand:VEC_HW                 0 \"register_operand\" \"=v\")\n+\t(unspec:VEC_HW [(match_operand:VEC_HW 1 \"register_operand\"  \"v\")\n+\t\t\t(match_operand:VEC_HW 2 \"register_operand\"  \"v\")]\n \t\t     UNSPEC_VEC_MERGEL))]\n   \"TARGET_VX\"\n   \"vmrl<bhfgq>\\t%v0,%1,%2\"\n@@ -397,15 +418,15 @@\n ; vscef, vsceg\n \n ; A 64 bit target address generated from 32 bit elements\n-(define_insn \"vec_scatter_elementv4si_DI\"\n-  [(set (mem:SI\n+(define_insn \"vec_scatter_element<V_HW_4:mode>_DI\"\n+  [(set (mem:<non_vec>\n \t (plus:DI (zero_extend:DI\n \t\t   (unspec:SI [(match_operand:V4SI 1 \"register_operand\"   \"v\")\n \t\t\t       (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n \t\t\t      UNSPEC_VEC_EXTRACT))\n \t\t  (match_operand:SI                2 \"address_operand\"   \"ZQ\")))\n-\t(unspec:SI [(match_operand:V4SI            0 \"register_operand\"   \"v\")\n-\t\t    (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n+\t(unspec:<non_vec> [(match_operand:V_HW_4          0 \"register_operand\"   \"v\")\n+\t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n   \"TARGET_VX && TARGET_64BIT && UINTVAL (operands[3]) < 4\"\n   \"vscef\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n@@ -515,6 +536,31 @@\n   \"vstl\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRS\")])\n \n+; Vector store rightmost with length\n+\n+(define_insn \"vstrlrv16qi\"\n+  [(set (match_operand:BLK                2 \"memory_operand\"    \"=Q,Q\")\n+\t(unspec:BLK [(match_operand:V16QI 0 \"register_operand\"   \"v,v\")\n+\t\t     (match_operand:SI    1 \"nonmemory_operand\"  \"d,C\")]\n+\t\t    UNSPEC_VEC_STORE_LEN_R))]\n+  \"TARGET_VXE\"\n+  \"@\n+   vstrlr\\t%v0,%2,%1\n+   vstrl\\t%v0,%1,%2\"\n+  [(set_attr \"op_type\" \"VRS,VSI\")])\n+\n+\n+\n+; vector bit permute\n+\n+(define_insn \"vbpermv16qi\"\n+  [(set (match_operand:V2DI                0 \"register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V16QI 1 \"register_operand\"  \"v\")\n+\t\t      (match_operand:V16QI 2 \"register_operand\"  \"v\")]\n+\t\t     UNSPEC_VEC_VBPERM))]\n+  \"TARGET_VXE\"\n+  \"vbperm\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n ; Vector unpack high\n \n@@ -600,24 +646,6 @@\n \n ; Vector and\n \n-; The following two patterns allow mixed mode and's as required for the intrinsics.\n-(define_insn \"and_av2df3\"\n-  [(set (match_operand:V2DF                        0 \"register_operand\" \"=v\")\n-\t(and:V2DF (subreg:V2DF (match_operand:V2DI 1 \"register_operand\"  \"v\") 0)\n-\t\t  (match_operand:V2DF              2 \"register_operand\"  \"v\")))]\n-  \"TARGET_VX\"\n-  \"vn\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-(define_insn \"and_cv2df3\"\n-  [(set (match_operand:V2DF                        0 \"register_operand\" \"=v\")\n-\t(and:V2DF (match_operand:V2DF              1 \"register_operand\"  \"v\")\n-\t\t  (subreg:V2DF (match_operand:V2DI 2 \"register_operand\"  \"v\") 0)))]\n-  \"TARGET_VX\"\n-  \"vn\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-\n ; Vector and with complement\n \n ; vnc\n@@ -629,24 +657,6 @@\n   \"vnc\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-; The following two patterns allow mixed mode and's as required for the intrinsics.\n-(define_insn \"vec_andc_av2df3\"\n-  [(set (match_operand:V2DF                        0 \"register_operand\" \"=v\")\n-\t(and:V2DF (not:V2DF (match_operand:V2DF    2 \"register_operand\"  \"v\"))\n-\t\t  (subreg:V2DF (match_operand:V2DI 1 \"register_operand\"  \"v\") 0)))]\n-\n-  \"TARGET_VX\"\n-  \"vnc\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-(define_insn \"vec_andc_cv2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(and:V2DF (not:V2DF (subreg:V2DF (match_operand:V2DI 2 \"register_operand\" \"v\") 0))\n-\t\t  (match_operand:V2DF 1 \"register_operand\" \"v\")))]\n-  \"TARGET_VX\"\n-  \"vnc\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n \n ; Vector average\n \n@@ -720,10 +730,10 @@\n \n ; vec_all/any fp compares\n \n-(define_expand \"vec_all_<fpcmpcc:code>v2df\"\n-  [(match_operand:SI            0 \"register_operand\" \"\")\n-   (fpcmpcc (match_operand:V2DF 1 \"register_operand\" \"\")\n-\t    (match_operand:V2DF 2 \"register_operand\" \"\"))]\n+(define_expand \"vec_all_<fpcmpcc:code><mode>\"\n+  [(match_operand:SI               0 \"register_operand\" \"\")\n+   (fpcmpcc (match_operand:VECF_HW 1 \"register_operand\" \"\")\n+\t    (match_operand:VECF_HW 2 \"register_operand\" \"\"))]\n   \"TARGET_VX\"\n {\n   s390_expand_vec_compare_cc (operands[0],\n@@ -734,10 +744,10 @@\n   DONE;\n })\n \n-(define_expand \"vec_any_<fpcmpcc:code>v2df\"\n-  [(match_operand:SI            0 \"register_operand\" \"\")\n-   (fpcmpcc (match_operand:V2DF 1 \"register_operand\" \"\")\n-\t    (match_operand:V2DF 2 \"register_operand\" \"\"))]\n+(define_expand \"vec_any_<fpcmpcc:code><mode>\"\n+  [(match_operand:SI               0 \"register_operand\" \"\")\n+   (fpcmpcc (match_operand:VECF_HW 1 \"register_operand\" \"\")\n+\t    (match_operand:VECF_HW 2 \"register_operand\" \"\"))]\n   \"TARGET_VX\"\n {\n   s390_expand_vec_compare_cc (operands[0],\n@@ -761,10 +771,10 @@\n   DONE;\n })\n \n-(define_expand \"vec_cmp<fpcmp:code>v2df\"\n-  [(set (match_operand:V2DI             0 \"register_operand\" \"=v\")\n-\t(fpcmp:V2DI (match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t    (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n+(define_expand \"vec_cmp<fpcmp:code><mode>\"\n+  [(set (match_operand:<tointvec>              0 \"register_operand\" \"=v\")\n+\t(fpcmp:<tointvec> (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n+\t\t       (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n {\n   s390_expand_vec_compare (operands[0], <fpcmp:CODE>, operands[1], operands[2]);\n@@ -781,24 +791,6 @@\n \n ; vec_xor -> xor\n \n-; The following two patterns allow mixed mode xor's as required for the intrinsics.\n-(define_insn \"xor_av2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(xor:V2DF (subreg:V2DF (match_operand:V2DI 1 \"register_operand\" \"v\") 0)\n-\t\t  (match_operand:V2DF 2 \"register_operand\" \"v\")))]\n-  \"TARGET_VX\"\n-  \"vx\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-(define_insn \"xor_cv2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(xor:V2DF (match_operand:V2DF 1 \"register_operand\" \"v\")\n-\t\t  (subreg:V2DF (match_operand:V2DI 2 \"register_operand\" \"v\") 0)))]\n-  \"TARGET_VX\"\n-  \"vx\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-\n ; Vector Galois field multiply sum\n \n ; vgfmb, vgfmh, vgfmf\n@@ -971,50 +963,16 @@\n \n (define_insn \"vec_nor<mode>3\"\n   [(set (match_operand:VT_HW 0 \"register_operand\" \"=v\")\n-\t(not:VT_HW (ior:VT_HW (match_operand:VT_HW 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VT_HW 2 \"register_operand\" \"v\"))))]\n-  \"TARGET_VX\"\n-  \"vno\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-; The following two patterns allow mixed mode and's as required for the intrinsics.\n-(define_insn \"vec_nor_av2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(not:V2DF (ior:V2DF (subreg:V2DF (match_operand:V2DI 1 \"register_operand\" \"v\") 0)\n-\t\t\t    (match_operand:V2DF 2 \"register_operand\" \"v\"))))]\n-  \"TARGET_VX\"\n-  \"vno\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-(define_insn \"vec_nor_cv2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(not:V2DF (ior:V2DF (match_operand:V2DF 1 \"register_operand\" \"v\")\n-\t\t\t    (subreg:V2DF (match_operand:V2DI 2 \"register_operand\" \"v\") 0))))]\n+\t(not:VT_HW\n+\t (ior:VT_HW (match_operand:VT_HW 1 \"register_operand\" \"%v\")\n+\t\t    (match_operand:VT_HW 2 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\"\n   \"vno\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n \n ; Vector or\n \n-; The following two patterns allow mixed mode or's as required for the intrinsics.\n-(define_insn \"ior_av2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(ior:V2DF (subreg:V2DF (match_operand:V2DI 1 \"register_operand\" \"v\") 0)\n-\t\t  (match_operand:V2DF 2 \"register_operand\" \"v\")))]\n-  \"TARGET_VX\"\n-  \"vo\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-(define_insn \"ior_cv2df3\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n-\t(ior:V2DF (match_operand:V2DF 1 \"register_operand\" \"v\")\n-\t\t  (subreg:V2DF (match_operand:V2DI 2 \"register_operand\" \"v\") 0)))]\n-  \"TARGET_VX\"\n-  \"vo\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-\n ; Vector population count vec_popcnt -> popcount\n ; Vector element rotate left logical vec_rl -> vrotl, vec_rli -> rot\n \n@@ -1219,6 +1177,31 @@\n   [(set_attr \"op_type\" \"VRR\")])\n \n \n+; Vector multiply sum logical\n+\n+(define_insn \"vec_msumv2di\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V2DI  1 \"register_operand\"   \"v\")\n+\t\t       (match_operand:V2DI  2 \"register_operand\"   \"v\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\"   \"v\")\n+\t\t       (match_operand:QI    4 \"const_mask_operand\" \"C\")]\n+\t\t      UNSPEC_VEC_MSUM))]\n+  \"TARGET_VXE\"\n+  \"vmslg\\t%v0,%v1,%v2,%v3\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vmslg\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=v\")\n+\t(unspec:TI [(match_operand:V2DI  1 \"register_operand\"   \"v\")\n+\t\t    (match_operand:V2DI  2 \"register_operand\"   \"v\")\n+\t\t    (match_operand:TI    3 \"register_operand\"   \"v\")\n+\t\t    (match_operand:QI    4 \"const_mask_operand\" \"C\")]\n+\t\t   UNSPEC_VEC_MSUM))]\n+  \"TARGET_VXE\"\n+  \"vmslg\\t%v0,%v1,%v2,%v3\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+\n ; Vector find any element equal\n \n ; vfaeb, vfaeh, vfaef\n@@ -1609,22 +1592,23 @@\n   operands[4] = GEN_INT (INTVAL (operands[4]) | VSTRING_FLAG_CS | VSTRING_FLAG_ZS);\n })\n \n-\n-; Signed V2DI -> V2DF conversion - inexact exception disabled\n-(define_insn \"vec_di_to_df_s64\"\n+(define_insn \"vcdgb\"\n   [(set (match_operand:V2DF 0 \"register_operand\"                \"=v\")\n \t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\"   \"v\")\n-\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")]\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")  ; inexact suppression\n+\t\t      (match_operand:QI   3 \"const_mask_operand\" \"C\")] ; rounding mode\n \t\t     UNSPEC_VEC_VCDGB))]\n-  \"TARGET_VX && UINTVAL (operands[2]) != 2 && UINTVAL (operands[2]) <= 7\"\n-  \"vcdgb\\t%v0,%v1,4,%b2\"\n+  \"TARGET_VX && UINTVAL (operands[3]) != 2 && UINTVAL (operands[3]) <= 7\"\n+  \"vcdgb\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+\n ; The result needs to be multiplied with 2**-op2\n (define_expand \"vec_ctd_s64\"\n   [(set (match_operand:V2DF               0 \"register_operand\" \"\")\n \t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t      (const_int 0)] ; According to current BFP rounding mode\n+\t\t      (const_int 4) ; inexact suppressed\n+\t\t      (const_int VEC_RND_CURRENT)]\n \t\t     UNSPEC_VEC_VCDGB))\n    (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (set (match_dup 0) (mult:V2DF (match_dup 0) (match_dup 3)))]\n@@ -1640,21 +1624,22 @@\n   operands[3] = force_reg (V2DFmode, operands[3]);\n })\n \n-; Unsigned V2DI -> V2DF conversion - inexact exception disabled\n-(define_insn \"vec_di_to_df_u64\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"               \"=v\")\n-\t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"const_int_operand\" \"C\")]\n+(define_insn \"vcdlgb\"\n+  [(set (match_operand:V2DF 0 \"register_operand\"                 \"=v\")\n+\t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\"    \"v\")\n+\t\t      (match_operand:QI   2 \"const_mask_operand\"  \"C\")  ; inexact suppression\n+\t\t      (match_operand:QI   3 \"const_mask_operand\"  \"C\")] ; rounding mode\n \t\t     UNSPEC_VEC_VCDLGB))]\n-  \"TARGET_VX\"\n-  \"vcdlgb\\t%v0,%v1,4,%b2\"\n+  \"TARGET_VX && UINTVAL (operands[3]) != 2 && UINTVAL (operands[3]) <= 7\"\n+  \"vcdlgb\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; The result needs to be multiplied with 2**-op2\n (define_expand \"vec_ctd_u64\"\n   [(set (match_operand:V2DF               0 \"register_operand\" \"\")\n \t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t      (const_int 0)] ; According to current BFP rounding mode\n+\t\t      (const_int 4) ; inexact suppressed\n+\t\t      (const_int VEC_RND_CURRENT)]\n \t\t     UNSPEC_VEC_VCDLGB))\n    (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (set (match_dup 0) (mult:V2DF (match_dup 0) (match_dup 3)))]\n@@ -1670,15 +1655,14 @@\n   operands[3] = force_reg (V2DFmode, operands[3]);\n })\n \n-\n-; Signed V2DF -> V2DI conversion - inexact exception disabled\n-(define_insn \"vec_df_to_di_s64\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"               \"=v\")\n-\t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"const_int_operand\" \"C\")]\n+(define_insn \"vcgdb\"\n+  [(set (match_operand:V2DI 0 \"register_operand\"                \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"   \"v\")\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")\n+\t\t      (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VCGDB))]\n-  \"TARGET_VX\"\n-  \"vcgdb\\t%v0,%v1,4,%b2\"\n+  \"TARGET_VX && UINTVAL (operands[3]) != 2 && UINTVAL (operands[3]) <= 7\"\n+  \"vcgdb\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; The input needs to be multiplied with 2**op2\n@@ -1687,7 +1671,9 @@\n    (set (match_dup 4) (mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")\n \t\t\t\t (match_dup 3)))\n    (set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(unspec:V2DI [(match_dup 4) (const_int 0)] ; According to current BFP rounding mode\n+\t(unspec:V2DI [(match_dup 4)\n+\t\t      (const_int 4) ; inexact suppressed\n+\t\t      (const_int VEC_RND_CURRENT)]\n \t\t     UNSPEC_VEC_VCGDB))]\n   \"TARGET_VX\"\n {\n@@ -1702,14 +1688,14 @@\n   operands[4] = gen_reg_rtx (V2DFmode);\n })\n \n-; Unsigned V2DF -> V2DI conversion - inexact exception disabled\n-(define_insn \"vec_df_to_di_u64\"\n+(define_insn \"vclgdb\"\n   [(set (match_operand:V2DI 0 \"register_operand\"               \"=v\")\n \t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")]\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")\n+\t\t      (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VCLGDB))]\n-  \"TARGET_VX && UINTVAL (operands[2]) <= 7\"\n-  \"vclgdb\\t%v0,%v1,4,%b2\"\n+  \"TARGET_VX && UINTVAL (operands[3]) != 2 && UINTVAL (operands[3]) <= 7\"\n+  \"vclgdb\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; The input needs to be multiplied with 2**op2\n@@ -1718,7 +1704,9 @@\n    (set (match_dup 4) (mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")\n \t\t\t\t (match_dup 3)))\n    (set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(unspec:V2DI [(match_dup 4) (const_int 0)] ; According to current BFP rounding mode\n+\t(unspec:V2DI [(match_dup 4)\n+\t\t      (const_int 4) ; inexact suppressed\n+\t\t      (const_int VEC_RND_CURRENT)]\n \t\t     UNSPEC_VEC_VCLGDB))]\n   \"TARGET_VX\"\n {\n@@ -1734,23 +1722,24 @@\n })\n \n ; Vector load fp integer - IEEE inexact exception is suppressed\n-(define_insn \"vfidb\"\n-  [(set (match_operand:V2DI               0 \"register_operand\"  \"=v\")\n-\t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"   \"v\")\n-\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")\n-\t\t      (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n-\t\t     UNSPEC_VEC_VFIDB))]\n-  \"TARGET_VX && !(UINTVAL (operands[2]) & 3) && UINTVAL (operands[3]) <= 7\"\n-  \"vfidb\\t%v0,%v1,%b2,%b3\"\n+; vfisb, vfidb, wfisb, wfidb, wfixb\n+(define_insn \"vec_fpint<mode>\"\n+  [(set (match_operand:VFT              0 \"register_operand\"  \"=v\")\n+\t(unspec:VFT [(match_operand:VFT 1 \"register_operand\"   \"v\")\n+\t\t     (match_operand:QI  2 \"const_mask_operand\" \"C\")  ; inexact suppression control\n+\t\t     (match_operand:QI  3 \"const_mask_operand\" \"C\")] ; rounding mode\n+\t\t     UNSPEC_VEC_VFI))]\n+  \"TARGET_VX\"\n+  \"<vw>fi<sdx>b\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n \n ; Vector load lengthened - V4SF -> V2DF\n \n-(define_insn \"*vldeb\"\n+(define_insn \"vflls\"\n   [(set (match_operand:V2DF 0 \"register_operand\"               \"=v\")\n \t(unspec:V2DF [(match_operand:V4SF 1 \"register_operand\"  \"v\")]\n-\t\t     UNSPEC_VEC_VLDEB))]\n+\t\t     UNSPEC_VEC_VFLL))]\n   \"TARGET_VX\"\n   \"vldeb\\t%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -1769,7 +1758,7 @@\n \t\t\t\t    (match_dup 2)]\n \t\t\t\t    UNSPEC_VEC_SET))\n    (set (match_operand:V2DF 0 \"register_operand\" \"\")\n-\t(unspec:V2DF [(match_dup 2)] UNSPEC_VEC_VLDEB))]\n+\t(unspec:V2DF [(match_dup 2)] UNSPEC_VEC_VFLL))]\n   \"TARGET_VX\"\n {\n   operands[2] = gen_reg_rtx (V4SFmode);\n@@ -1780,18 +1769,22 @@\n \n ; Vector load rounded - V2DF -> V4SF\n \n-(define_insn \"*vledb\"\n-  [(set (match_operand:V4SF 0 \"register_operand\"               \"=v\")\n-\t(unspec:V4SF [(match_operand:V2DF 1 \"register_operand\"  \"v\")]\n-\t\t     UNSPEC_VEC_VLEDB))]\n+(define_insn \"vflrd\"\n+  [(set (match_operand:V4SF 0 \"register_operand\"                \"=v\")\n+\t(unspec:V4SF [(match_operand:V2DF 1 \"register_operand\"   \"v\")\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")\n+\t\t      (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n+\t\t     UNSPEC_VEC_VFLR))]\n   \"TARGET_VX\"\n-  \"vledb\\t%v0,%v1,0,0\"\n+  \"vledb\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_expand \"vec_st2f\"\n   [(set (match_dup 2)\n-\t(unspec:V4SF [(match_operand:V2DF 0 \"register_operand\" \"\")]\n-\t\t     UNSPEC_VEC_VLEDB))\n+\t(unspec:V4SF [(match_operand:V2DF 0 \"register_operand\" \"\")\n+\t\t      (const_int VEC_INEXACT)\n+\t\t      (const_int VEC_RND_CURRENT)]\n+\t\t     UNSPEC_VEC_VFLR))\n    (set (match_operand:SF 1 \"memory_operand\" \"\")\n \t(unspec:SF [(match_dup 2) (const_int 0)] UNSPEC_VEC_EXTRACT))\n    (set (match_dup 3)\n@@ -1803,46 +1796,59 @@\n })\n \n \n-; Vector load negated fp\n-\n-(define_expand \"vec_nabs\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n-\t(neg:V2DF (abs:V2DF (match_operand:V2DF 1 \"register_operand\" \"\"))))]\n-  \"TARGET_VX\")\n-\n ; Vector square root fp vec_sqrt -> sqrt rtx standard name\n \n-; Vector FP test data class immediate\n+;; Vector FP test data class immediate\n \n-(define_insn \"*vftcidb\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"  \"=v\")\n-\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:HI   2 \"const_int_operand\" \"J\")]\n-\t\t     UNSPEC_VEC_VFTCIDB))\n-   (set (reg:CCRAW CC_REGNUM)\n-\t(unspec:CCRAW [(match_dup 1) (match_dup 2)] UNSPEC_VEC_VFTCIDBCC))]\n+; vec_all_nan, vec_all_numeric, vec_any_nan, vec_any_numeric\n+; These ignore the vector result and only want CC stored to an int\n+; pointer.\n+\n+; vftcisb, vftcidb\n+(define_insn \"*vftci<mode>_cconly\"\n+  [(set (reg:CCRAW CC_REGNUM)\n+\t(unspec:CCRAW [(match_operand:VECF_HW 1 \"register_operand\")\n+\t\t       (match_operand:HI      2 \"const_int_operand\")]\n+\t\t      UNSPEC_VEC_VFTCICC))\n+   (clobber (match_scratch:<tointvec> 0))]\n   \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\"\n-  \"vftcidb\\t%v0,%v1,%x2\"\n+  \"vftci<sdx>b\\t%v0,%v1,%x2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-(define_insn \"*vftcidb_cconly\"\n-  [(set (reg:CCRAW CC_REGNUM)\n-\t(unspec:CCRAW [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t       (match_operand:HI   2 \"const_int_operand\" \"J\")]\n-\t\t      UNSPEC_VEC_VFTCIDBCC))\n-   (clobber (match_scratch:V2DI 0 \"=v\"))]\n+(define_expand \"vftci<mode>_intcconly\"\n+  [(parallel\n+    [(set (reg:CCRAW CC_REGNUM)\n+\t  (unspec:CCRAW [(match_operand:VECF_HW 0 \"register_operand\")\n+\t\t\t (match_operand:HI      1 \"const_int_operand\")]\n+\t\t\tUNSPEC_VEC_VFTCICC))\n+     (clobber (scratch:<tointvec>))])\n+   (set (match_operand:SI 2 \"register_operand\" \"\")\n+\t(unspec:SI [(reg:CCRAW CC_REGNUM)] UNSPEC_CC_TO_INT))]\n+  \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[1]), 'J', \\\"J\\\")\")\n+\n+; vec_fp_test_data_class wants the result vector and the CC stored to\n+; an int pointer.\n+\n+; vftcisb, vftcidb\n+(define_insn \"*vftci<mode>\"\n+  [(set (match_operand:VECF_HW                  0 \"register_operand\"  \"=v\")\n+\t(unspec:VECF_HW [(match_operand:VECF_HW 1 \"register_operand\"   \"v\")\n+\t\t\t (match_operand:HI      2 \"const_int_operand\"  \"J\")]\n+\t\t\tUNSPEC_VEC_VFTCI))\n+   (set (reg:CCRAW CC_REGNUM)\n+\t(unspec:CCRAW [(match_dup 1) (match_dup 2)] UNSPEC_VEC_VFTCICC))]\n   \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\"\n-  \"vftcidb\\t%v0,%v1,%x2\"\n+  \"vftci<sdx>b\\t%v0,%v1,%x2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-(define_expand \"vftcidb\"\n+(define_expand \"vftci<mode>_intcc\"\n   [(parallel\n-    [(set (match_operand:V2DF               0 \"register_operand\"  \"\")\n-\t  (unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"\")\n-\t\t\t(match_operand:HI   2 \"const_int_operand\" \"\")]\n-\t\t       UNSPEC_VEC_VFTCIDB))\n+    [(set (match_operand:VECF_HW                  0 \"register_operand\")\n+\t  (unspec:VECF_HW [(match_operand:VECF_HW 1 \"register_operand\")\n+\t\t\t   (match_operand:HI      2 \"const_int_operand\")]\n+\t\t\t  UNSPEC_VEC_VFTCI))\n      (set (reg:CCRAW CC_REGNUM)\n-\t  (unspec:CCRAW [(match_dup 1) (match_dup 2)] UNSPEC_VEC_VFTCIDBCC))])\n+\t  (unspec:CCRAW [(match_dup 1) (match_dup 2)] UNSPEC_VEC_VFTCICC))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCRAW CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\")\n@@ -1933,79 +1939,123 @@\n   [(set_attr \"op_type\" \"VRR\")])\n \n ;;\n-;; Floating point comparesg\n+;; Floating point compares\n ;;\n \n-(define_insn \"*vec_cmp<insn_cmp>v2df_cconly\"\n+; vfcesbs, vfcedbs, wfcexbs, vfchsbs, vfchdbs, wfchxbs, vfchesbs, vfchedbs, wfchexbs\n+(define_insn \"*vec_cmp<insn_cmp><mode>_cconly\"\n   [(set (reg:VFCMP CC_REGNUM)\n-\t(compare:VFCMP (match_operand:V2DF 0 \"register_operand\" \"v\")\n-\t\t       (match_operand:V2DF 1 \"register_operand\" \"v\")))\n-   (clobber (match_scratch:V2DI 2 \"=v\"))]\n+\t(compare:VFCMP (match_operand:VF_HW 0 \"register_operand\" \"v\")\n+\t\t       (match_operand:VF_HW 1 \"register_operand\" \"v\")))\n+   (clobber (match_scratch:<tointvec> 2 \"=v\"))]\n   \"TARGET_VX\"\n-  \"vfc<asm_fcmp>dbs\\t%v2,%v0,%v1\"\n+  \"<vw>fc<asm_fcmp><sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; FIXME: Merge the following 2x3 patterns with VFCMP\n-(define_expand \"vec_cmpeqv2df_cc\"\n+(define_expand \"vec_cmpeq<mode>_cc\"\n   [(parallel\n     [(set (reg:CCVEQ CC_REGNUM)\n-\t  (compare:CCVEQ (match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t\t (match_operand:V2DF 2 \"register_operand\"  \"v\")))\n-     (set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n-\t  (eq:V2DI (match_dup 1) (match_dup 2)))])\n+\t  (compare:CCVEQ (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n+\t\t\t (match_operand:VF_HW 2 \"register_operand\"  \"v\")))\n+     (set (match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n+\t  (eq:<tointvec> (match_dup 1) (match_dup 2)))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCVEQ CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX\")\n \n-(define_expand \"vec_cmphv2df_cc\"\n+(define_expand \"vec_cmph<mode>_cc\"\n   [(parallel\n-    [(set (reg:CCVIH CC_REGNUM)\n-\t  (compare:CCVIH (match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t\t (match_operand:V2DF 2 \"register_operand\"  \"v\")))\n-     (set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n-\t  (gt:V2DI (match_dup 1) (match_dup 2)))])\n+    [(set (reg:CCVFH CC_REGNUM)\n+\t  (compare:CCVFH (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n+\t\t\t (match_operand:VF_HW 2 \"register_operand\"  \"v\")))\n+     (set (match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n+\t  (gt:<tointvec> (match_dup 1) (match_dup 2)))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCVIH CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX\")\n \n-(define_expand \"vec_cmphev2df_cc\"\n+(define_expand \"vec_cmphe<mode>_cc\"\n   [(parallel\n     [(set (reg:CCVFHE CC_REGNUM)\n-\t  (compare:CCVFHE (match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t\t  (match_operand:V2DF 2 \"register_operand\"  \"v\")))\n-     (set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n-\t  (ge:V2DI (match_dup 1) (match_dup 2)))])\n+\t  (compare:CCVFHE (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n+\t\t\t  (match_operand:VF_HW 2 \"register_operand\"  \"v\")))\n+     (set (match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n+\t  (ge:<tointvec> (match_dup 1) (match_dup 2)))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCVFHE CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX\")\n \n+; These 3 cannot be merged as the insn defintion above since it also\n+; requires to rewrite the RTL equality operator that the same time as\n+; the CC mode.\n \n-(define_insn \"*vec_cmpeqv2df_cc\"\n+; vfcesbs, vfcedbs, wfcexbs\n+(define_insn \"*vec_cmpeq<mode>_cc\"\n   [(set (reg:CCVEQ CC_REGNUM)\n-\t(compare:CCVEQ (match_operand:V2DF 0 \"register_operand\"  \"v\")\n-\t\t       (match_operand:V2DF 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:V2DI                2 \"register_operand\" \"=v\")\n-\t(eq:V2DI (match_dup 0) (match_dup 1)))]\n+\t(compare:CCVEQ (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n+\t\t       (match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n+   (set (match_operand:<tointvec>              2 \"register_operand\" \"=v\")\n+\t(eq:<tointvec> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n-  \"vfcedbs\\t%v2,%v0,%v1\"\n+  \"<vw>fce<sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-(define_insn \"*vec_cmphv2df_cc\"\n-  [(set (reg:CCVIH CC_REGNUM)\n-\t(compare:CCVIH (match_operand:V2DF 0 \"register_operand\"  \"v\")\n-\t\t       (match_operand:V2DF 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:V2DI               2 \"register_operand\" \"=v\")\n-\t(gt:V2DI (match_dup 0) (match_dup 1)))]\n+; vfchsbs, vfchdbs, wfchxbs\n+(define_insn \"*vec_cmph<mode>_cc\"\n+  [(set (reg:CCVFH CC_REGNUM)\n+\t(compare:CCVFH (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n+\t\t       (match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n+   (set (match_operand:<tointvec>              2 \"register_operand\" \"=v\")\n+\t(gt:<tointvec> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n-  \"vfchdbs\\t%v2,%v0,%v1\"\n+  \"<vw>fch<sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-(define_insn \"*vec_cmphev2df_cc\"\n+; vfchesbs, vfchedbs, wfchexbs\n+(define_insn \"*vec_cmphe<mode>_cc\"\n   [(set (reg:CCVFHE CC_REGNUM)\n-\t(compare:CCVFHE (match_operand:V2DF 0 \"register_operand\"  \"v\")\n-\t\t\t(match_operand:V2DF 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:V2DI                 2 \"register_operand\" \"=v\")\n-\t(ge:V2DI (match_dup 0) (match_dup 1)))]\n+\t(compare:CCVFHE (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n+\t\t\t(match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n+   (set (match_operand:<tointvec>               2 \"register_operand\" \"=v\")\n+\t(ge:<tointvec> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n-  \"vfchedbs\\t%v2,%v0,%v1\"\n+  \"<vw>fche<sdx>bs\\t%v2,%v0,%v1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_expand \"vec_double_s64\"\n+  [(set (match_operand:V2DF               0 \"register_operand\")\n+\t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\")\n+\t\t      (const_int 0)  ; inexact suppression disabled\n+\t\t      (const_int VEC_RND_CURRENT)]\n+\t\t     UNSPEC_VEC_VCDGB))]\n+  \"TARGET_VX\")\n+\n+(define_expand \"vec_double_u64\"\n+  [(set (match_operand:V2DF               0 \"register_operand\")\n+\t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\")\n+\t\t      (const_int 0)  ; inexact suppression disabled\n+\t\t      (const_int VEC_RND_CURRENT)]\n+\t\t     UNSPEC_VEC_VCDLGB))]\n+  \"TARGET_VX\")\n+\n+\n+(define_insn \"vfmin<mode>\"\n+  [(set (match_operand:VF_HW                0 \"register_operand\" \"=v\")\n+\t(unspec:VF_HW [(match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t\t       (match_operand:VF_HW 2 \"register_operand\"  \"v\")\n+\t\t       (match_operand:QI    3 \"const_mask_operand\" \"C\")]\n+\t\t      UNSPEC_VEC_VFMIN))]\n+  \"TARGET_VXE\"\n+  \"<vw>fmin<sdx>b\\t%v0,%v1,%v2,%b3\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vfmax<mode>\"\n+  [(set (match_operand:VF_HW                0 \"register_operand\" \"=v\")\n+\t(unspec:VF_HW [(match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t\t       (match_operand:VF_HW 2 \"register_operand\"  \"v\")\n+\t\t       (match_operand:QI    3 \"const_mask_operand\" \"C\")]\n+\t\t      UNSPEC_VEC_VFMAX))]\n+  \"TARGET_VXE\"\n+  \"<vw>fmax<sdx>b\\t%v0,%v1,%v2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])"}, {"sha": "886a0f04cafc6f3e6bd96f24ad9a53e7aaf3aa56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -1,3 +1,10 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/target-attribute/tattr-3.c: Adjust error message\n+\tand remove the high-level builtin.  The error message for the\n+\twould prevent compilation from reaching the second.\n+\t* gcc.target/s390/target-attribute/tattr-4.c: Likewise.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vxe/negfma-1.c: New test."}, {"sha": "1af2274120de1d748e80f976dc09e0bea5a431df", "filename": "gcc/testsuite/gcc.target/s390/target-attribute/tattr-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-3.c?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -16,8 +16,7 @@ void vx1(void)\n __attribute__ ((target(\"arch=z10\")))\n void vx0(void)\n {\n-  vec_load_bndry ((const signed char *)0, 64); /* { dg-error \"is not supported without -mvx\" } */\n-  __builtin_s390_vll ((unsigned int)0, (const void *)8); /* { dg-error \"is not supported without -mvx\" } */\n+  __builtin_s390_vll ((unsigned int)0, (const void *)8); /* { dg-error \"requires -mvx\" } */\n }\n \n void vxd(void)"}, {"sha": "c501eca2ca675d193366ded0d1cc8b75710161ec", "filename": "gcc/testsuite/gcc.target/s390/target-attribute/tattr-4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76794c52216326ff16601d53a0f36d7b046c6f55/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-4.c?ref=76794c52216326ff16601d53a0f36d7b046c6f55", "patch": "@@ -24,15 +24,13 @@ void a0(void)\n #ifdef __VEC__\n #error __VEC__ is defined\n #endif\n-  vec_load_bndry ((const signed char *)0, 64); /* { dg-error \"is not supported without -mvx\" } */\n-  __builtin_s390_vll ((unsigned int)0, (const void *)8); /* { dg-error \"is not supported without -mvx\" } */\n+  __builtin_s390_vll ((unsigned int)0, (const void *)8); /* { dg-error \"requires -mvx\" } */\n }\n \n void d(void)\n {\n #ifdef __VEC__\n #error __VEC__ is defined\n #endif\n-  vec_load_bndry ((const signed char *)0, 64); /* { dg-error \"is not supported without -mvx\" } */\n-  __builtin_s390_vll ((unsigned int)0, (const void *)8); /* { dg-error \"is not supported without -mvx\" } */\n+  __builtin_s390_vll ((unsigned int)0, (const void *)8); /* { dg-error \"requires -mvx\" } */\n }"}]}