{"sha": "01216d27de7de69ce1f09697e5f61ab414113824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyMTZkMjdkZTdkZTY5Y2UxZjA5Njk3ZTVmNjFhYjQxNDExMzgyNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-09T11:44:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-09T11:44:52Z"}, "message": "re PR tree-optimization/78938 (ICE in expand_vec_cond_expr, at optabs.c:5636 w/ -mavx512bw -ftree-loop-vectorize -O1)\n\n\tPR tree-optimization/78938\n\t* tree-vect-stmts.c (vectorizable_condition): For non-masked COND_EXPR\n\twhere comp_vectype is VECTOR_BOOLEAN_TYPE_P, use\n\tBIT_{NOT,XOR,AND,IOR}_EXPR on the comparison operands instead of\n\t{EQ,NE,GE,GT,LE,LT}_EXPR directly inside of VEC_COND_EXPR.  Formatting\n\tfixes.\n\n\t* gcc.dg/vect/pr78938.c: New test.\n\nFrom-SVN: r244223", "tree": {"sha": "82b6b86b69584e061f97412f8629d6a14f5e0b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82b6b86b69584e061f97412f8629d6a14f5e0b9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01216d27de7de69ce1f09697e5f61ab414113824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01216d27de7de69ce1f09697e5f61ab414113824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01216d27de7de69ce1f09697e5f61ab414113824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01216d27de7de69ce1f09697e5f61ab414113824/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0d4fec75c36e60c0305c585310a8feb89a04a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d4fec75c36e60c0305c585310a8feb89a04a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d4fec75c36e60c0305c585310a8feb89a04a1d"}], "stats": {"total": 163, "additions": 144, "deletions": 19}, "files": [{"sha": "860d7c3fa0540b314d5f37f6bc52cb4b6461ec2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01216d27de7de69ce1f09697e5f61ab414113824", "patch": "@@ -1,3 +1,12 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/78938\n+\t* tree-vect-stmts.c (vectorizable_condition): For non-masked COND_EXPR\n+\twhere comp_vectype is VECTOR_BOOLEAN_TYPE_P, use\n+\tBIT_{NOT,XOR,AND,IOR}_EXPR on the comparison operands instead of\n+\t{EQ,NE,GE,GT,LE,LT}_EXPR directly inside of VEC_COND_EXPR.  Formatting\n+\tfixes.\n+\n 2017-01-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* tree-ssa-address.c (gen_addr_rtx): Don't handle index if it"}, {"sha": "854121ec921fb969a8534e7555b6735a945096be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01216d27de7de69ce1f09697e5f61ab414113824", "patch": "@@ -1,3 +1,8 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/78938\n+\t* gcc.dg/vect/pr78938.c: New test.\n+\n 2017-01-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.dg/20161219.c: New test."}, {"sha": "095e674adf5312208b57d618f3b7d69e03214792", "filename": "gcc/testsuite/gcc.dg/vect/pr78938.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr78938.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr78938.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr78938.c?ref=01216d27de7de69ce1f09697e5f61ab414113824", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/78938 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mavx512bw\" { target i?86-*-* x86_64-*-* } } */\n+\n+short int v;\n+\n+int\n+foo (char x, int *b)\n+{\n+  int a = 1;\n+  for (; x < 1; x++)\n+    {\n+      int c = *b != v;\n+      int d = x != 0;\n+      a = c == d ? 2 : 0;\n+    }\n+  return a;\n+}"}, {"sha": "e8b454b7eff128cf3704e83b2908a7ce8d6aeb7c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 112, "deletions": 19, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01216d27de7de69ce1f09697e5f61ab414113824/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=01216d27de7de69ce1f09697e5f61ab414113824", "patch": "@@ -7731,7 +7731,8 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n {\n   tree scalar_dest = NULL_TREE;\n   tree vec_dest = NULL_TREE;\n-  tree cond_expr, then_clause, else_clause;\n+  tree cond_expr, cond_expr0 = NULL_TREE, cond_expr1 = NULL_TREE;\n+  tree then_clause, else_clause;\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   tree comp_vectype = NULL_TREE;\n   tree vec_cond_lhs = NULL_TREE, vec_cond_rhs = NULL_TREE;\n@@ -7741,7 +7742,7 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   enum vect_def_type dt, dts[4];\n   int ncopies;\n-  enum tree_code code;\n+  enum tree_code code, cond_code, bitop1 = NOP_EXPR, bitop2 = NOP_EXPR;\n   stmt_vec_info prev_stmt_info = NULL;\n   int i, j;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n@@ -7825,11 +7826,76 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (vec_cmp_type == NULL_TREE)\n     return false;\n \n+  cond_code = TREE_CODE (cond_expr);\n+  if (!masked)\n+    {\n+      cond_expr0 = TREE_OPERAND (cond_expr, 0);\n+      cond_expr1 = TREE_OPERAND (cond_expr, 1);\n+    }\n+\n+  if (!masked && VECTOR_BOOLEAN_TYPE_P (comp_vectype))\n+    {\n+      /* Boolean values may have another representation in vectors\n+\t and therefore we prefer bit operations over comparison for\n+\t them (which also works for scalar masks).  We store opcodes\n+\t to use in bitop1 and bitop2.  Statement is vectorized as\n+\t BITOP2 (rhs1 BITOP1 rhs2) or rhs1 BITOP2 (BITOP1 rhs2)\n+\t depending on bitop1 and bitop2 arity.  */\n+      switch (cond_code)\n+\t{\n+\tcase GT_EXPR:\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_AND_EXPR;\n+\t  break;\n+\tcase GE_EXPR:\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_IOR_EXPR;\n+\t  break;\n+\tcase LT_EXPR:\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_AND_EXPR;\n+\t  std::swap (cond_expr0, cond_expr1);\n+\t  break;\n+\tcase LE_EXPR:\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_IOR_EXPR;\n+\t  std::swap (cond_expr0, cond_expr1);\n+\t  break;\n+\tcase NE_EXPR:\n+\t  bitop1 = BIT_XOR_EXPR;\n+\t  break;\n+\tcase EQ_EXPR:\n+\t  bitop1 = BIT_XOR_EXPR;\n+\t  bitop2 = BIT_NOT_EXPR;\n+\t  break;\n+\tdefault:\n+\t  return false;\n+\t}\n+      cond_code = SSA_NAME;\n+    }\n+\n   if (!vec_stmt)\n     {\n       STMT_VINFO_TYPE (stmt_info) = condition_vec_info_type;\n+      if (bitop1 != NOP_EXPR)\n+\t{\n+\t  machine_mode mode = TYPE_MODE (comp_vectype);\n+\t  optab optab;\n+\n+\t  optab = optab_for_tree_code (bitop1, comp_vectype, optab_default);\n+\t  if (!optab || optab_handler (optab, mode) == CODE_FOR_nothing)\n+\t    return false;\n+\n+\t  if (bitop2 != NOP_EXPR)\n+\t    {\n+\t      optab = optab_for_tree_code (bitop2, comp_vectype,\n+\t\t\t\t\t   optab_default);\n+\t      if (!optab || optab_handler (optab, mode) == CODE_FOR_nothing)\n+\t\treturn false;\n+\t    }\n+\t}\n       return expand_vec_cond_expr_p (vectype, comp_vectype,\n-\t\t\t\t     TREE_CODE (cond_expr));\n+\t\t\t\t     cond_code);\n     }\n \n   /* Transform.  */\n@@ -7858,11 +7924,11 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n \t      auto_vec<vec<tree>, 4> vec_defs;\n \n \t      if (masked)\n-\t\t  ops.safe_push (cond_expr);\n+\t\tops.safe_push (cond_expr);\n \t      else\n \t\t{\n-\t\t  ops.safe_push (TREE_OPERAND (cond_expr, 0));\n-\t\t  ops.safe_push (TREE_OPERAND (cond_expr, 1));\n+\t\t  ops.safe_push (cond_expr0);\n+\t\t  ops.safe_push (cond_expr1);\n \t\t}\n               ops.safe_push (then_clause);\n               ops.safe_push (else_clause);\n@@ -7886,17 +7952,15 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t}\n \t      else\n \t\t{\n-\t\t  vec_cond_lhs =\n-\t\t    vect_get_vec_def_for_operand (TREE_OPERAND (cond_expr, 0),\n-\t\t\t\t\t\t  stmt, comp_vectype);\n-\t\t  vect_is_simple_use (TREE_OPERAND (cond_expr, 0),\n-\t\t\t\t      loop_vinfo, &gtemp, &dts[0]);\n-\n-\t\t  vec_cond_rhs =\n-\t\t    vect_get_vec_def_for_operand (TREE_OPERAND (cond_expr, 1),\n-\t\t\t\t\t\t  stmt, comp_vectype);\n-\t\t  vect_is_simple_use (TREE_OPERAND (cond_expr, 1),\n-\t\t\t\t      loop_vinfo, &gtemp, &dts[1]);\n+\t\t  vec_cond_lhs\n+\t\t    = vect_get_vec_def_for_operand (cond_expr0,\n+\t\t\t\t\t\t    stmt, comp_vectype);\n+\t\t  vect_is_simple_use (cond_expr0, loop_vinfo, &gtemp, &dts[0]);\n+\n+\t\t  vec_cond_rhs\n+\t\t    = vect_get_vec_def_for_operand (cond_expr1,\n+\t\t\t\t\t\t    stmt, comp_vectype);\n+\t\t  vect_is_simple_use (cond_expr1, loop_vinfo, &gtemp, &dts[1]);\n \t\t}\n \t      if (reduc_index == 1)\n \t\tvec_then_clause = reduc_def;\n@@ -7953,8 +8017,37 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n \t  else\n \t    {\n \t      vec_cond_rhs = vec_oprnds1[i];\n-\t      vec_compare = build2 (TREE_CODE (cond_expr), vec_cmp_type,\n-\t\t\t\t    vec_cond_lhs, vec_cond_rhs);\n+\t      if (bitop1 == NOP_EXPR)\n+\t\tvec_compare = build2 (cond_code, vec_cmp_type,\n+\t\t\t\t      vec_cond_lhs, vec_cond_rhs);\n+\t      else\n+\t\t{\n+\t\t  new_temp = make_ssa_name (vec_cmp_type);\n+\t\t  if (bitop1 == BIT_NOT_EXPR)\n+\t\t    new_stmt = gimple_build_assign (new_temp, bitop1,\n+\t\t\t\t\t\t    vec_cond_rhs);\n+\t\t  else\n+\t\t    new_stmt\n+\t\t      = gimple_build_assign (new_temp, bitop1, vec_cond_lhs,\n+\t\t\t\t\t     vec_cond_rhs);\n+\t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t\t  if (bitop2 == NOP_EXPR)\n+\t\t    vec_compare = new_temp;\n+\t\t  else if (bitop2 == BIT_NOT_EXPR)\n+\t\t    {\n+\t\t      /* Instead of doing ~x ? y : z do x ? z : y.  */\n+\t\t      vec_compare = new_temp;\n+\t\t      std::swap (vec_then_clause, vec_else_clause);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      vec_compare = make_ssa_name (vec_cmp_type);\n+\t\t      new_stmt\n+\t\t\t= gimple_build_assign (vec_compare, bitop2,\n+\t\t\t\t\t       vec_cond_lhs, new_temp);\n+\t\t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t\t    }\n+\t\t}\n \t    }\n           new_temp = make_ssa_name (vec_dest);\n           new_stmt = gimple_build_assign (new_temp, VEC_COND_EXPR,"}]}