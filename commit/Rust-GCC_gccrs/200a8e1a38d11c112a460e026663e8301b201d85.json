{"sha": "200a8e1a38d11c112a460e026663e8301b201d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwYThlMWEzOGQxMWMxMTJhNDYwZTAyNjY2M2U4MzAxYjIwMWQ4NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-02-20T20:07:20Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-02-20T20:07:20Z"}, "message": "Fix ICE with #line directive (PR c/89410)\n\nPR c/89410 reports various issues with #line directives with very\nlarge numbers; one of them is an ICE inside diagnostic-show-locus.c\nwhen emitting a diagnostic at line 0xffffffff.\n\nThe issue is that the arithmetic in layout::calculate_line_spans to\ndetermine if two line spans are sufficiently close to consolidate\nwas using the unsigned 32-bit linenum_type, which was overflowing\nwhen comparing the line for the expanded location with those of\nthe location range (all on line 0xffffffff), leading to it\nerroneously adding two spans for the same line, leading to an\nassertion failure.\n\nThis patch fixes the ICE by generalizing the use of long long in\nline-map.h's comparison function for linenum_type into a new\nlinenum_arith_t typedef, and using it here.\n\nDoing so uncovered a second problem: the loop to print the lines\nwithin the line_span for this case is infinite: looping from\n0xfffffff upwards, overflowing to 0, and then never becoming\ngreater than 0xfffffff.  The patch fixes this by using linenum_arith_t\nthere also.\n\ngcc/ChangeLog:\n\tPR c/89410\n\t* diagnostic-show-locus.c (layout::calculate_line_spans): Use\n\tlinenum_arith_t when determining if two adjacent line spans are\n\tclose enough to merge.\n\t(diagnostic_show_locus): Use linenum_arith_t when iterating over\n\tlines within each line_span.\n\ngcc/testsuite/ChangeLog:\n\tPR c/89410\n\t* gcc.dg/pr89410-1.c: New test.\n\t* gcc.dg/pr89410-2.c: New test.\n\nlibcpp/ChangeLog:\n\tPR c/89410\n\t* include/line-map.h (linenum_arith_t): New typedef.\n\t(compare): Use it.\n\nFrom-SVN: r269050", "tree": {"sha": "95cf9e2472514f059dbf50ec176a47c6b017d7ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95cf9e2472514f059dbf50ec176a47c6b017d7ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/200a8e1a38d11c112a460e026663e8301b201d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200a8e1a38d11c112a460e026663e8301b201d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200a8e1a38d11c112a460e026663e8301b201d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200a8e1a38d11c112a460e026663e8301b201d85/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b054705ae6b841b297e621ac20e9023a671d33bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b054705ae6b841b297e621ac20e9023a671d33bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b054705ae6b841b297e621ac20e9023a671d33bd"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "75ff13427137639da90faa4e93475aae8d7837af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -1,3 +1,12 @@\n+2019-02-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/89410\n+\t* diagnostic-show-locus.c (layout::calculate_line_spans): Use\n+\tlinenum_arith_t when determining if two adjacent line spans are\n+\tclose enough to merge.\n+\t(diagnostic_show_locus): Use linenum_arith_t when iterating over\n+\tlines within each line_span.\n+\n 2019-02-20 Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tPR target/86487"}, {"sha": "205ee56f4099331bc33438b7fc9717e4b5de13a5", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -1211,7 +1211,8 @@ layout::calculate_line_spans ()\n       const line_span *next = &tmp_spans[i];\n       gcc_assert (next->m_first_line >= current->m_first_line);\n       const int merger_distance = m_show_line_numbers_p ? 1 : 0;\n-      if (next->m_first_line <= current->m_last_line + 1 + merger_distance)\n+      if ((linenum_arith_t)next->m_first_line\n+\t  <= (linenum_arith_t)current->m_last_line + 1 + merger_distance)\n \t{\n \t  /* We can merge them. */\n \t  if (next->m_last_line > current->m_last_line)\n@@ -2301,8 +2302,10 @@ diagnostic_show_locus (diagnostic_context * context,\n \t      context->start_span (context, exploc);\n \t    }\n \t}\n-      linenum_type last_line = line_span->get_last_line ();\n-      for (linenum_type row = line_span->get_first_line ();\n+      /* Iterate over the lines within this span (using linenum_arith_t to\n+\t avoid overflow with 0xffffffff causing an infinite loop).  */\n+      linenum_arith_t last_line = line_span->get_last_line ();\n+      for (linenum_arith_t row = line_span->get_first_line ();\n \t   row <= last_line; row++)\n \tlayout.print_line (row);\n     }"}, {"sha": "9d344ba7c2d8bf880db60c3c910eacfc4eb5a6f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -1,3 +1,9 @@\n+2019-02-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/89410\n+\t* gcc.dg/pr89410-1.c: New test.\n+\t* gcc.dg/pr89410-2.c: New test.\n+\n 2019-02-20  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_usad_char):"}, {"sha": "73dc6d4de3f40e6762ef8951a744ffb872858a97", "filename": "gcc/testsuite/gcc.dg/pr89410-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89410-1.c?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"\" } */\n+\n+int main(void)\n+{\n+  /* This is 0xffffffff.  */\n+#line 4294967295\n+#warning msg\n+  /* { dg-warning \"msg\" \"\" { target *-*-* } -1 } */\n+}"}, {"sha": "76e781b09dfa71d6b66fca1b6fa428203a456799", "filename": "gcc/testsuite/gcc.dg/pr89410-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89410-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89410-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89410-2.c?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+int main(void)\n+{\n+  /* This is 0x7fffffffffffffff, which truncates to 0xffffffff.  */\n+#line 9223372036854775807 /* { dg-warning \"line number out of range\" } */\n+#warning msg\n+  /* { dg-begin-multiline-output \"\" }\n+ #line 9223372036854775807\n+       ^~~~~~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-warning \"msg\" \"\" { target *-*-* } -1 } */\n+}"}, {"sha": "355b4cb0f739560228d14826d8298a53ad02874d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -1,3 +1,9 @@\n+2019-02-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/89410\n+\t* include/line-map.h (linenum_arith_t): New typedef.\n+\t(compare): Use it.\n+\n 2019-02-18  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/89383"}, {"sha": "6c77c2888550d05ef0f270890cf5086647aafbd5", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200a8e1a38d11c112a460e026663e8301b201d85/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200a8e1a38d11c112a460e026663e8301b201d85/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=200a8e1a38d11c112a460e026663e8301b201d85", "patch": "@@ -49,13 +49,16 @@ along with this program; see the file COPYING3.  If not see\n /* The type of line numbers.  */\n typedef unsigned int linenum_type;\n \n+/* A type for doing arithmetic on line numbers.  */\n+typedef long long linenum_arith_t;\n+\n /* A function for for use by qsort for comparing line numbers.  */\n \n inline int compare (linenum_type lhs, linenum_type rhs)\n {\n-  /* Avoid truncation issues by using long long for the comparison,\n+  /* Avoid truncation issues by using linenum_arith_t for the comparison,\n      and only consider the sign of the result.  */\n-  long long diff = (long long)lhs - (long long)rhs;\n+  linenum_arith_t diff = (linenum_arith_t)lhs - (linenum_arith_t)rhs;\n   if (diff)\n     return diff > 0 ? 1 : -1;\n   return 0;"}]}