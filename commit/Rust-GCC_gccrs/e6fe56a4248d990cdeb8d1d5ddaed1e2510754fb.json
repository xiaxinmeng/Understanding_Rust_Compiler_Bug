{"sha": "e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmZTU2YTQyNDhkOTkwY2RlYjhkMWQ1ZGRhZWQxZTI1MTA3NTRmYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-20T12:36:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-20T12:36:23Z"}, "message": "(init_expr_once): Set direct_load and direct_store if SOME hard register can be loaded or stored...\n\n(init_expr_once): Set direct_load and direct_store if SOME hard\nregister can be loaded or stored; not just if the first one we pick\ncan be.\n\nFrom-SVN: r1910", "tree": {"sha": "ef8fc8090560351e672708311cc1393d0fbd4492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8fc8090560351e672708311cc1393d0fbd4492"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb/comments", "author": null, "committer": null, "parents": [{"sha": "1b238f1c06364a492a314e550a8a4c8efff29dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b238f1c06364a492a314e550a8a4c8efff29dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b238f1c06364a492a314e550a8a4c8efff29dad"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "2a94dcac4d76f41825c1bfb709b1b402da1a62af", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e6fe56a4248d990cdeb8d1d5ddaed1e2510754fb", "patch": "@@ -155,23 +155,28 @@ init_expr_once ()\n       direct_load[(int) mode] = direct_store[(int) mode] = 0;\n       PUT_MODE (mem, mode);\n \n-      /* Find a register that can be used in this mode, if any.  */\n-      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\tif (HARD_REGNO_MODE_OK (regno, mode))\n-\t  break;\n+      /* See if there is some register that can be used in this mode and\n+\t directly loaded or stored from memory.  */\n \n-      if (regno == FIRST_PSEUDO_REGISTER)\n-\tcontinue;\n+      for (regno = 0; regno < FIRST_PSEUDO_REGISTER\n+\t   && (direct_load[(int) mode] == 0 || direct_store[(int) mode] == 0);\n+\t   regno++)\n+\t{\n+\t  if (! HARD_REGNO_MODE_OK (regno, mode))\n+\t    continue;\n \n-      reg = gen_rtx (REG, mode, regno);\n+\t  reg = gen_rtx (REG, mode, regno);\n \n-      SET_SRC (pat) = mem;\n-      SET_DEST (pat) = reg;\n-      direct_load[(int) mode] = (recog (pat, insn, &num_clobbers)) >= 0;\n+\t  SET_SRC (pat) = mem;\n+\t  SET_DEST (pat) = reg;\n+\t  if (recog (pat, insn, &num_clobbers) >= 0)\n+\t    direct_load[(int) mode] = 1;\n \n-      SET_SRC (pat) = reg;\n-      SET_DEST (pat) = mem;\n-      direct_store[(int) mode] = (recog (pat, insn, &num_clobbers)) >= 0;\n+\t  SET_SRC (pat) = reg;\n+\t  SET_DEST (pat) = mem;\n+\t  if (recog (pat, insn, &num_clobbers) >= 0)\n+\t    direct_store[(int) mode] = 1;\n+\t}\n \n       movstr_optab[(int) mode] = CODE_FOR_nothing;\n     }"}]}