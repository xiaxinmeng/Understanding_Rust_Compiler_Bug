{"sha": "750491fc108a82d74c1af8bd4438f39eb4feebc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwNDkxZmMxMDhhODJkNzRjMWFmOGJkNDQzOGYzOWViNGZlZWJjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-16T19:09:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-16T19:09:30Z"}, "message": "c-common.c (flag_ms_extensions): Move from c++ front end.\n\n        * c-common.c (flag_ms_extensions): Move from c++ front end.\n        * c-common.h (flag_ms_extensions): Declare.\n        * c-decl.c (c_decode_option): Add -fms-extensions.\n        (grokfield): Don't accept anonymous structures in ISO C mode;\n        accept only unnamed anonymous structures in GNU C mode; accept\n        Plan 9 extensions in MS mode.\n        * c-parse.in (SAVE_EXT_FLAGS, RESTORE_EXT_FLAGS): Rename from\n        SAVE/RESTORE_WARN_FLAGS; add flag_iso frobbing; update all callers.\n        (extension): Clear flag_iso.\n        * doc/invoke.texi (C Dialect Options): Add -fms-extensions.\n\n        * cp-tree.h, decl2.c (flag_ms_extensions): Move to c-common.\n\n        * g++.dg/ext/anon-struct1.C: New.\n        * g++.dg/ext/anon-struct2.C: New.\n        * g++.dg/ext/anon-struct3.C: New.\n        * gcc.dg/anon-struct-1.c: New.\n        * gcc.dg/anon-struct-2.c: New.\n        * gcc.dg/anon-struct-3.c: New.\n        * gcc.dg/20011008-1.c: Adjust warning text.\n        * gcc.dg/20020527-1.c: Add -fms-extensions.\n\nFrom-SVN: r54670", "tree": {"sha": "347f17f792ce0f731598ef624fd0f14c6484bffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347f17f792ce0f731598ef624fd0f14c6484bffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/750491fc108a82d74c1af8bd4438f39eb4feebc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750491fc108a82d74c1af8bd4438f39eb4feebc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750491fc108a82d74c1af8bd4438f39eb4feebc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750491fc108a82d74c1af8bd4438f39eb4feebc2/comments", "author": null, "committer": null, "parents": [{"sha": "0931db714190ac7983d6f67760103b03d64e89a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0931db714190ac7983d6f67760103b03d64e89a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0931db714190ac7983d6f67760103b03d64e89a4"}], "stats": {"total": 381, "additions": 357, "deletions": 24}, "files": [{"sha": "61b694dc278b04273f5af78283a2acca2f9ffc29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -1,3 +1,16 @@\n+2002-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (flag_ms_extensions): Move from c++ front end.\n+\t* c-common.h (flag_ms_extensions): Declare.\n+\t* c-decl.c (c_decode_option): Add -fms-extensions.\n+\t(grokfield): Don't accept anonymous structures in ISO C mode;\n+\taccept only unnamed anonymous structures in GNU C mode; accept\n+\tPlan 9 extensions in MS mode.\n+\t* c-parse.in (SAVE_EXT_FLAGS, RESTORE_EXT_FLAGS): Rename from\n+\tSAVE/RESTORE_WARN_FLAGS; add flag_iso frobbing; update all callers.\n+\t(extension): Clear flag_iso.\n+\t* doc/invoke.texi (C Dialect Options): Add -fms-extensions.\n+\n 2002-06-16  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/7042"}, {"sha": "b58ba4ef47497528dce3cc0ecc40d719e9791d7a", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -220,6 +220,9 @@ int flag_short_double;\n \n int flag_short_wchar;\n \n+/* Nonzero means allow Microsoft extensions without warnings or errors.  */\n+int flag_ms_extensions;\n+\n /* Nonzero means warn about use of multicharacter literals.  */\n \n int warn_multichar = 1;"}, {"sha": "b1fd9764a332ace54861e42fae0c322f2dc8c313", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -396,6 +396,9 @@ extern int flag_short_double;\n \n extern int flag_short_wchar;\n \n+/* Nonzero means allow Microsoft extensions without warnings or errors.  */\n+extern int flag_ms_extensions;\n+\n /* Nonzero means warn about use of multicharacter literals.  */\n extern int warn_multichar;\n "}, {"sha": "96233e34230cc8474153a6acdc68dc469299ffeb", "filename": "gcc/c-decl.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -629,6 +629,10 @@ c_decode_option (argc, argv)\n     flag_no_asm = 0;\n   else if (!strcmp (p, \"-fno-asm\"))\n     flag_no_asm = 1;\n+  else if (!strcmp (p, \"-fms-extensions\"))\n+    flag_ms_extensions = 1;\n+  else if (!strcmp (p, \"-fno-ms-extensions\"))\n+    flag_ms_extensions = 0;\n   else if (!strcmp (p, \"-fbuiltin\"))\n     flag_no_builtin = 0;\n   else if (!strcmp (p, \"-fno-builtin\"))\n@@ -5359,15 +5363,44 @@ grokfield (filename, line, declarator, declspecs, width)\n \n   if (declarator == NULL_TREE && width == NULL_TREE)\n     {\n-      /* This is an unnamed decl.  We only support unnamed\n-\t structs/unions, so check for other things and refuse them.  */\n+      /* This is an unnamed decl.\n+\n+\t If we have something of the form \"union { list } ;\" then this\n+\t is the anonymous union extension.  Similarly for struct.\n+\n+\t If this is something of the form \"struct foo;\", then\n+\t   If MS extensions are enabled, this is handled as an\n+\t     anonymous struct.\n+\t   Otherwise this is a forward declaration of a structure tag.\n+\n+\t If this is something of the form \"foo;\" and foo is a TYPE_DECL, then\n+\t   If MS extensions are enabled and foo names a structure, then\n+\t     again this is an anonymous struct.\n+\t   Otherwise this is an error.\n+\n+\t Oh what a horrid tangled web we weave.  I wonder if MS consiously\n+\t took this from Plan 9 or if it was an accident of implementation\n+\t that took root before someone noticed the bug...  */\n+\n       tree type = TREE_VALUE (declspecs);\n \n-      if (TREE_CODE (type) == TYPE_DECL)\n+      if (flag_ms_extensions && TREE_CODE (type) == TYPE_DECL)\n \ttype = TREE_TYPE (type);\n-      if (TREE_CODE (type) != RECORD_TYPE && TREE_CODE (type) != UNION_TYPE)\n+      if (TREE_CODE (type) == RECORD_TYPE || TREE_CODE (type) == UNION_TYPE)\n+\t{\n+\t  if (flag_ms_extensions)\n+\t    ; /* ok */\n+\t  else if (flag_iso)\n+\t    goto warn_unnamed_field;\n+\t  else if (TYPE_NAME (type) == NULL)\n+\t    ; /* ok */\n+\t  else\n+\t    goto warn_unnamed_field;\n+\t}\n+      else\n \t{\n-\t  error (\"unnamed fields of type other than struct or union are not allowed\");\n+\twarn_unnamed_field:\n+\t  warning (\"declaration does not declare anything\");\n \t  return NULL_TREE;\n \t}\n     }"}, {"sha": "5dfecb8741f619ffbe53c6329bb7a3b2f6cf07f6", "filename": "gcc/c-parse.in", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -298,17 +298,19 @@ static GTY(()) tree declspec_stack;\n \n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n-#define SAVE_WARN_FLAGS()\t\t\t\\\n+#define SAVE_EXT_FLAGS()\t\t\t\\\n \tsize_int (pedantic\t\t\t\\\n \t\t  | (warn_pointer_arith << 1)\t\\\n-\t\t  | (warn_traditional << 2))\n+\t\t  | (warn_traditional << 2)\t\\\n+\t\t  | (flag_iso << 3))\n \n-#define RESTORE_WARN_FLAGS(tval)\t\t\\\n+#define RESTORE_EXT_FLAGS(tval)\t\t\t\\\n   do {\t\t\t\t\t\t\\\n     int val = tree_low_cst (tval, 0);\t\t\\\n     pedantic = val & 1;\t\t\t\t\\\n     warn_pointer_arith = (val >> 1) & 1;\t\\\n     warn_traditional = (val >> 2) & 1;\t\t\\\n+    flag_iso = (val >> 3) & 1;\t\t\t\\\n   } while (0)\n \n ifobjc\n@@ -394,7 +396,7 @@ end ifobjc\n \t\t  else\n \t\t    error (\"argument of `asm' is not a constant string\"); }\n \t| extension extdef\n-\t\t{ RESTORE_WARN_FLAGS ($1); }\n+\t\t{ RESTORE_EXT_FLAGS ($1); }\n \t;\n \n datadef:\n@@ -517,7 +519,7 @@ unary_expr:\n \t/* __extension__ turns off -pedantic for following primary.  */\n \t| extension cast_expr\t  %prec UNARY\n \t\t{ $$ = $2;\n-\t\t  RESTORE_WARN_FLAGS ($1); }\n+\t\t  RESTORE_EXT_FLAGS ($1); }\n \t| unop cast_expr  %prec UNARY\n \t\t{ $$ = build_unary_op ($1, $2, 0);\n \t\t  overflow_warning ($$); }\n@@ -865,7 +867,7 @@ decl:\n \t| declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| extension decl\n-\t\t{ RESTORE_WARN_FLAGS ($1); }\n+\t\t{ RESTORE_EXT_FLAGS ($1); }\n \t;\n \n /* A list of declaration specifiers.  These are:\n@@ -1863,7 +1865,7 @@ component_decl:\n \t\t{ $$ = NULL_TREE; }\n \t| extension component_decl\n \t\t{ $$ = $2;\n-\t\t  RESTORE_WARN_FLAGS ($1); }\n+\t\t  RESTORE_EXT_FLAGS ($1); }\n \t;\n \n components:\n@@ -2664,10 +2666,11 @@ identifiers_or_typenames:\n \n extension:\n \tEXTENSION\n-\t\t{ $$ = SAVE_WARN_FLAGS();\n+\t\t{ $$ = SAVE_EXT_FLAGS();\n \t\t  pedantic = 0;\n \t\t  warn_pointer_arith = 0;\n-\t\t  warn_traditional = 0; }\n+\t\t  warn_traditional = 0;\n+\t\t  flag_iso = 0; }\n \t;\n \f\n ifobjc"}, {"sha": "707ee6f04e3f610ac1032a8772d8c5f0309d9b67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -1,3 +1,7 @@\n+2002-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-tree.h, decl2.c (flag_ms_extensions): Move to c-common.\n+\n 2002-06-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* cp-tree.h (compiler_error): Remove declaration."}, {"sha": "04f0e1bb5e18d07f5422098b2c576807ee31b697", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -3200,9 +3200,6 @@ typedef enum base_kind {\n \t\t\t     binfo. */\n } base_kind;\n \n-/* Nonzero means allow Microsoft extensions without a pedwarn.  */\n-extern int flag_ms_extensions;\n-\n /* Non-zero means warn in function declared in derived class has the\n    same name as a virtual in the base class, but fails to match the\n    type signature of any virtual function in the base class.  */"}, {"sha": "1188bb2acc89f377bf66af40002803a9fd880eae", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -299,10 +299,6 @@ int warn_deprecated = 1;\n #endif\n int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n \n-/* Nonzero means allow Microsoft extensions without a pedwarn.  */\n-\n-int flag_ms_extensions;\n-\n /* C++ specific flags.  */   \n \n /* Nonzero means we should attempt to elide constructors when possible.  */"}, {"sha": "d81c4baae3294f54371eca2814a7e300e47e040d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -164,7 +164,7 @@ in the following sections.\n @gccoptlist{\n -ansi  -std=@var{standard}  -aux-info @var{filename} @gol\n -fno-asm  -fno-builtin -fno-builtin-@var{function} @gol\n--fhosted  -ffreestanding @gol\n+-fhosted  -ffreestanding  -fms-extensions @gol\n -trigraphs  -traditional  -traditional-cpp @gol\n -fallow-single-precision  -fcond-mismatch @gol\n -fsigned-bitfields  -fsigned-char @gol\n@@ -1141,6 +1141,10 @@ This is equivalent to @option{-fno-hosted}.\n @xref{Standards,,Language Standards Supported by GCC}, for details of\n freestanding and hosted environments.\n \n+@item -fms-extensions\n+@opindex fms-extensions\n+Accept some non-standard constructs used in Microsoft header files.\n+\n @item -trigraphs\n @opindex trigraphs\n Support ISO C trigraphs.  The @option{-ansi} option (and @option{-std}"}, {"sha": "df9ccd2c924a3a881a419a3b179b8f2486aab786", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -1,3 +1,14 @@\n+2002-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.dg/ext/anon-struct1.C: New.\n+\t* g++.dg/ext/anon-struct2.C: New.\n+\t* g++.dg/ext/anon-struct3.C: New.\n+\t* gcc.dg/anon-struct-1.c: New.\n+\t* gcc.dg/anon-struct-2.c: New.\n+\t* gcc.dg/anon-struct-3.c: New.\n+\t* gcc.dg/20011008-1.c: Adjust warning text.\n+\t* gcc.dg/20020527-1.c: Add -fms-extensions.\n+\n 2002-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/20020531-1.c: Add LL specifier to avoid warning."}, {"sha": "0a682db1ae231cf11dced5e0b0a3e64fd3d581c8", "filename": "gcc/testsuite/g++.dg/ext/anon-struct1.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct1.C?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-options \"-ansi -pedantic -pedantic-errors\" } */\n+/* In strict ISO C++ mode, we don't recognize the anonymous struct\n+   extension or any Microsoft C extensions.  */\n+\n+struct A { char a; };\n+\n+struct B {\n+  struct A;\t\t\t/* forward decl of B::A.  */\n+  char b;\n+};\n+char testB[sizeof(B) == sizeof(A) ? 1 : -1];\n+\n+struct C {\n+  struct D { char d; };\t\t/* decl of C::D.  */\n+  char c;\n+};\n+char testC[sizeof(C) == sizeof(A) ? 1 : -1];\n+char testD[sizeof(C::D) == sizeof(A) ? 1 : -1];\n+\n+/* GNU extension.  */\n+struct E {\n+  struct { char z; };\t\t/* { dg-error \"prohibits anonymous structs\" } */\n+  char e;\n+};\n+\n+typedef struct A typedef_A;\n+struct F {\n+  typedef_A;\t\t\t/* { dg-error \"does not declare anything\" } */\n+  char f;\n+};\n+char testF[sizeof(struct F) == sizeof(struct A) ? 1 : -1];\n+\n+/* __extension__ enables GNU C mode for the duration of the declaration.  */\n+__extension__ struct G {\n+  struct { char z; };\n+  char g;\n+};\n+char testG[sizeof(G) == 2 * sizeof(A) ? 1 : -1];\n+\n+struct H {\n+  __extension__ struct { char z; };\n+  char h;\n+};\n+char testH[sizeof(H) == 2 * sizeof(A) ? 1 : -1];\n+\n+/* Make sure __extension__ gets turned back off.  */\n+struct I {\n+  struct { char z; };\t\t/* { dg-error \"prohibits anonymous structs\" } */\n+  char i;\n+};"}, {"sha": "0c629ed482fda8530f28b33ac704d06701a8d38e", "filename": "gcc/testsuite/g++.dg/ext/anon-struct2.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct2.C?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-options \"\" } */\n+/* In GNU C++ mode, we recognize the anonymous struct extension,\n+   but not Microsoft C extensions.  */\n+\n+struct A { char a; };\n+\n+struct B {\n+  struct A;\t\t\t/* forward decl of B::A.  */\n+  char b;\n+};\n+char testB[sizeof(B) == sizeof(A) ? 1 : -1];\n+\n+struct C {\n+  struct D { char d; };\t\t/* decl of C::D.  */\n+  char c;\n+};\n+char testC[sizeof(C) == sizeof(A) ? 1 : -1];\n+char testD[sizeof(C::D) == sizeof(A) ? 1 : -1];\n+\n+/* GNU extension.  */\n+struct E {\n+  struct { char z; };\n+  char e;\n+};\n+char testE[sizeof(E) == 2 * sizeof(A) ? 1 : -1];\n+char testEz[sizeof( ((E *)0)->z )];\n+\n+typedef struct A typedef_A;\n+struct F {\n+  typedef_A;\t\t\t/* { dg-error \"does not declare anything\" } */\n+  char f;\n+};\n+char testF[sizeof(F) == sizeof(A) ? 1 : -1];\n+\n+/* Test that __extension__ does the right thing coming _from_ GNU C mode.  */\n+__extension__ struct G {\n+  struct { char z; };\n+  char g;\n+};\n+char testG[sizeof(G) == 2 * sizeof(A) ? 1 : -1];\n+\n+struct H {\n+  struct { char z; };\n+  char h;\n+};\n+char testH[sizeof(H) == 2 * sizeof(A) ? 1 : -1];"}, {"sha": "1460d6c12f605daa458ada94e03abcec90f9062f", "filename": "gcc/testsuite/g++.dg/ext/anon-struct3.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct3.C?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-fms-extensions\" } */\n+/* Verify that enabling Microsoft mode doesn't twist C++ as much as\n+   their corresponding C extensions.  Checked vs\n+   Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 12.00.8168 for 80x86\n+ */\n+\n+struct A { char a; };\n+\n+struct B {\n+  struct A;\t\t\t/* forward decl of B::A.  */\n+  char b;\n+};\n+char testB[sizeof(B) == sizeof(A) ? 1 : -1];\n+\n+struct C {\n+  struct D { char d; };\t\t/* decl of C::D.  */\n+  char c;\n+};\n+char testC[sizeof(C) == sizeof(A) ? 1 : -1];\n+char testD[sizeof(C::D) == sizeof(A) ? 1 : -1];\n+\n+struct E {\n+  struct { char z; };\n+  char e;\n+};\n+char testE[sizeof(E) == 2 * sizeof(A) ? 1 : -1];\n+char testEz[sizeof( ((E *)0)->z )];\n+\n+typedef struct A typedef_A;\n+struct F {\n+  typedef_A;\t\t\t/* { dg-error \"does not declare anything\" } */\n+  char f;\n+};\n+char testF[sizeof(F) == sizeof(A) ? 1 : -1];"}, {"sha": "e5c9e2cf0ee039a5c0cd8ceead4dac400978c293", "filename": "gcc/testsuite/gcc.dg/20011008-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2F20011008-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2F20011008-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011008-1.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0\" } */\n \n-struct { int; int q; } a; /* { dg-error \"unnamed\" } */\n+struct { int; int q; } a; /* { dg-warning \"does not declare anything\" } */\n struct { union {int x;}; int q; } b;\n struct { struct {int x;}; int q; } c;\n union { union {int x;}; int q; } d;"}, {"sha": "6f963ed9f78995b3688dc40d6528db2cdc309dc6", "filename": "gcc/testsuite/gcc.dg/20020527-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2F20020527-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2F20020527-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020527-1.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -2,7 +2,7 @@\n    Test whether an unnamed field with user defined type - struct or union is\n    accepted.  */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-fms-extensions\" } */\n \n typedef struct {\n   unsigned short a;"}, {"sha": "587d59d72204178ae558c293ce8c7f0d964d445b", "filename": "gcc/testsuite/gcc.dg/anon-struct-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-1.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-options \"-std=iso9899:1990\" } */\n+/* In strict ISO C mode, we don't recognize the anonymous struct/union\n+   extension or any Microsoft extensions.  */\n+\n+struct A { char a; };\n+\n+/* MS extension.  */\n+struct B {\n+  struct A;\t\t\t/* { dg-warning \"does not declare anything\" } */\n+  char b;\n+};\n+char testB[sizeof(struct B) == sizeof(struct A) ? 1 : -1];\n+\n+/* MS extension.  */\n+struct C {\n+  struct D { char d; };\t\t/* { dg-warning \"does not declare anything\" } */\n+  char c;\n+};\n+char testC[sizeof(struct C) == sizeof(struct A) ? 1 : -1];\n+char testD[sizeof(struct D) == sizeof(struct A) ? 1 : -1];\n+\n+/* GNU extension.  */\n+struct E {\n+  struct { char z; };\t\t/* { dg-warning \"does not declare anything\" } */\n+  char e;\n+};\n+char testE[sizeof(struct E) == sizeof(struct A) ? 1 : -1];\n+\n+/* MS extension.  */\n+typedef struct A typedef_A;\n+struct F {\n+  typedef_A;\t\t\t/* { dg-warning \"does not declare anything\" } */\n+  char f;\n+};\n+char testF[sizeof(struct F) == sizeof(struct A) ? 1 : -1];\n+\n+/* __extension__ enables GNU C mode for the duration of the declaration.  */\n+__extension__ struct G {\n+  struct { char z; };\n+  char g;\n+};\n+char testG[sizeof(struct G) == 2 * sizeof(struct A) ? 1 : -1];\n+\n+struct H {\n+  __extension__ struct { char z; };\n+  char h;\n+};\n+char testH[sizeof(struct H) == 2 * sizeof(struct A) ? 1 : -1];\n+\n+/* Make sure __extension__ gets turned back off.  */\n+struct I {\n+  struct { char z; };\t\t/* { dg-warning \"does not declare anything\" } */\n+  char i;\n+};\n+char testI[sizeof(struct I) == sizeof(struct A) ? 1 : -1];\n+"}, {"sha": "4bd2d0f337c51463ff7306706c5d12e755ef29d1", "filename": "gcc/testsuite/gcc.dg/anon-struct-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-2.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-options \"-std=gnu89\" } */\n+/* In GNU C mode, we recognize the anonymous struct/union extension,\n+   but not Microsoft extensions.  */\n+\n+struct A { char a; };\n+\n+/* MS extension.  */\n+struct B {\n+  struct A;\t\t\t/* { dg-warning \"does not declare anything\" } */\n+  char b;\n+};\n+char testB[sizeof(struct B) == sizeof(struct A) ? 1 : -1];\n+\n+/* MS extension.  */\n+struct C {\n+  struct D { char d; };\t\t/* { dg-warning \"does not declare anything\" } */\n+  char c;\n+};\n+char testC[sizeof(struct C) == sizeof(struct A) ? 1 : -1];\n+char testD[sizeof(struct D) == sizeof(struct A) ? 1 : -1];\n+\n+/* GNU extension.  */\n+struct E {\n+  struct { char z; };\n+  char e;\n+};\n+char testE[sizeof(struct E) == 2 * sizeof(struct A) ? 1 : -1];\n+\n+/* MS extension.  */\n+typedef struct A typedef_A;\n+struct F {\n+  typedef_A;\t\t\t/* { dg-warning \"does not declare anything\" } */\n+  char f;\n+};\n+char testF[sizeof(struct F) == sizeof(struct A) ? 1 : -1];\n+\n+/* Test that __extension__ does the right thing coming _from_ GNU C mode.  */\n+__extension__ struct G {\n+  struct { char z; };\n+  char g;\n+};\n+char testG[sizeof(struct G) == 2 * sizeof(struct A) ? 1 : -1];\n+\n+struct H {\n+  struct { char z; };\n+  char h;\n+};\n+char testH[sizeof(struct H) == 2 * sizeof(struct A) ? 1 : -1];"}, {"sha": "3ed6e672bd5aecbd0f96fd8e2161163f1b6a7d8d", "filename": "gcc/testsuite/gcc.dg/anon-struct-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750491fc108a82d74c1af8bd4438f39eb4feebc2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-3.c?ref=750491fc108a82d74c1af8bd4438f39eb4feebc2", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options \"-std=gnu89 -fms-extensions\" } */\n+/* Enabling Microsoft mode makes all of the tests equivalent.  Checked vs\n+   Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 12.00.8168 for 80x86\n+ */\n+\n+struct A { char a; };\n+\n+struct B {\n+  struct A;\n+  char b;\n+};\n+char testB[sizeof(struct B) == 2 * sizeof(struct A) ? 1 : -1];\n+\n+struct C {\n+  struct D { char d; };\n+  char c;\n+};\n+char testC[sizeof(struct C) == 2 * sizeof(struct A) ? 1 : -1];\n+char testD[sizeof(struct D) == sizeof(struct A) ? 1 : -1];\n+\n+struct E {\n+  struct { char z; };\n+  char e;\n+};\n+char testE[sizeof(struct E) == 2 * sizeof(struct A) ? 1 : -1];\n+\n+typedef struct A typedef_A;\n+struct F {\n+  typedef_A;\n+  char f;\n+};\n+char testF[sizeof(struct F) == 2 * sizeof(struct A) ? 1 : -1];"}]}