{"sha": "7fcdf4c26b5181466cec06573b45580eb686a22b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjZGY0YzI2YjUxODE0NjZjZWMwNjU3M2I0NTU4MGViNjg2YTIyYg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-09-18T17:20:21Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-09-18T17:20:21Z"}, "message": "89th Cygnus<->FSF quick merge\n\nFrom-SVN: r12738", "tree": {"sha": "fc47233cd08ae0a07b5e0ae900f6f6a42caae953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc47233cd08ae0a07b5e0ae900f6f6a42caae953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fcdf4c26b5181466cec06573b45580eb686a22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcdf4c26b5181466cec06573b45580eb686a22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcdf4c26b5181466cec06573b45580eb686a22b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcdf4c26b5181466cec06573b45580eb686a22b/comments", "author": null, "committer": null, "parents": [{"sha": "4a1b3b10c8913cdcbae077b495891c80aef72796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1b3b10c8913cdcbae077b495891c80aef72796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1b3b10c8913cdcbae077b495891c80aef72796"}], "stats": {"total": 159, "additions": 87, "deletions": 72}, "files": [{"sha": "1888c1bec00528ed5457a408133f63e58c3005d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7fcdf4c26b5181466cec06573b45580eb686a22b", "patch": "@@ -1,3 +1,36 @@\n+Wed Sep 18 04:24:07 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (make_thunk): Call comdat_linkage before setting the\n+ \tTREE_CODE.\n+\n+\t* decl2.c (comdat_linkage): Use make_decl_one_only.\n+\t(import_export_decl): Likewise.\n+\t* decl.c (init_decl_processing): Check supports_one_only instead of\n+\tSUPPORTS_WEAK.\n+\n+Sat Sep 14 08:34:41 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (grokfield): Tighten checking for access decls.\n+\n+\t* decl.c (make_typename_type): Resolve references to\n+ \tcurrent_class_type.  Set CLASSTYPE_GOT_SEMICOLON.\n+\t(lookup_name_real): Types that depend on a template parameter get\n+ \tan implicit 'typename' unless they're in the current scope.\n+\t(start_decl_1): We don't care about incomplete types that depend\n+ \ton a template parm.\n+\t(grokdeclarator): Resolve 'typename's in the type specifier that\n+ \trefer to members of the current scope.\n+\n+\t* call.c (build_over_call): Remove 'inline called before\n+ \tdefinition' diagnostic.\n+\t(build_method_call): Likewise.\n+\t* decl.c (duplicate_decls): Downgrade 'used before declared\n+ \tinline' to a warning, only with -Winline.\n+\n+Fri Sep 13 17:31:40 1996  Stan Shebs  <shebs@andros.cygnus.com>\n+\n+\t* mpw-make.sed: Fix include paths, add @DASH_C_FLAG@ to compile.\n+\n Wed Sep 11 22:38:13 1996  Gerald Baumgartner  <gb@cs.purdue.edu>\n \n \t* call.c (build_method_call): When calling a signature"}, {"sha": "0b749f68fb3957098f57bb85919008846c93a620", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7fcdf4c26b5181466cec06573b45580eb686a22b", "patch": "@@ -2449,12 +2449,6 @@ build_method_call (instance, name, parms, basetype_path, flags)\n   function = DECL_MAIN_VARIANT (function);\n   mark_used (function);\n \n-  if (pedantic && DECL_THIS_INLINE (function) && ! DECL_ARTIFICIAL (function)\n-      && ! DECL_INITIAL (function) && ! DECL_PENDING_INLINE_INFO (function)\n-      && ! (DECL_TEMPLATE_INFO (function)\n-\t    && TREE_LANG_FLAG_0 (DECL_TEMPLATE_INFO (function))))\n-    cp_warning (\"inline function `%#D' called before definition\", function);\n-\n   fntype = TREE_TYPE (function);\n   if (TREE_CODE (fntype) == POINTER_TYPE)\n     fntype = TREE_TYPE (fntype);\n@@ -5123,12 +5117,6 @@ build_over_call (fn, convs, args, flags)\n \n   mark_used (fn);\n \n-  if (pedantic && DECL_THIS_INLINE (fn) && ! DECL_ARTIFICIAL (fn)\n-      && ! DECL_INITIAL (fn) && ! DECL_PENDING_INLINE_INFO (fn)\n-      && ! (DECL_TEMPLATE_INFO (fn)\n-\t    && TREE_LANG_FLAG_0 (DECL_TEMPLATE_INFO (fn))))\n-    cp_warning (\"inline function `%#D' called before definition\", fn);\n-\n   if (DECL_CONTEXT (fn) && IS_SIGNATURE (DECL_CONTEXT (fn)))\n     return build_signature_method_call (fn, converted_args);\n   else if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0)"}, {"sha": "01af1a56a86d850e24f8cced03297803c2ee2b70", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7fcdf4c26b5181466cec06573b45580eb686a22b", "patch": "@@ -2594,27 +2594,13 @@ duplicate_decls (newdecl, olddecl)\n \t\t  }\n \t      }\n \n-\t  if (DECL_THIS_INLINE (newdecl) && ! DECL_THIS_INLINE (olddecl))\n+\t  if (DECL_THIS_INLINE (newdecl) && ! DECL_THIS_INLINE (olddecl)\n+\t      && TREE_ADDRESSABLE (olddecl) && warn_inline)\n \t    {\n-#if 0 /* I think this will be correct, but it's really annoying.  We should\n-\t fix the compiler to find vtables by indirection so it isn't\n-\t necessary.  (jason 8/25/95) */\n-\t      if (DECL_VINDEX (olddecl) && ! DECL_ABSTRACT_VIRTUAL_P (olddecl))\n-\t\t{\n-\t\t  cp_pedwarn (\"virtual function `%#D' redeclared inline\",\n-\t\t\t      newdecl);\n-\t\t  cp_pedwarn_at (\"previous non-inline declaration here\",\n-\t\t\t\t olddecl);\n-\t\t}\n-\t      else\n-#endif\n-\t      if (TREE_ADDRESSABLE (olddecl))\n-\t\t{\n-\t\t  cp_pedwarn (\"`%#D' was used before it was declared inline\",\n-\t\t\t      newdecl);\n-\t\t  cp_pedwarn_at (\"previous non-inline declaration here\",\n-\t\t\t\t olddecl);\n-\t\t}\n+\t      cp_warning (\"`%#D' was used before it was declared inline\",\n+\t\t\t  newdecl);\n+\t      cp_warning_at (\"previous non-inline declaration here\",\n+\t\t\t     olddecl);\n \t    }\n \t}\n       /* These bits are logically part of the type for non-functions.  */\n@@ -2796,9 +2782,7 @@ duplicate_decls (newdecl, olddecl)\n \n   /* Merge the storage class information.  */\n   DECL_WEAK (newdecl) |= DECL_WEAK (olddecl);\n-#ifdef DECL_ONE_ONLY\n   DECL_ONE_ONLY (newdecl) |= DECL_ONE_ONLY (olddecl);\n-#endif\n   TREE_PUBLIC (newdecl) = TREE_PUBLIC (olddecl);\n   TREE_STATIC (olddecl) = TREE_STATIC (newdecl) |= TREE_STATIC (olddecl);\n   if (! DECL_EXTERNAL (olddecl))\n@@ -4329,7 +4313,8 @@ make_typename_type (context, name)\n     my_friendly_abort (2000);\n \n   if (! current_template_parms\n-      || ! uses_template_parms (context))\n+      || ! uses_template_parms (context)\n+      || context == current_class_type)\n     {\n       t = lookup_field (context, name, 0, 1);\n       if (t == NULL_TREE)\n@@ -4350,6 +4335,7 @@ make_typename_type (context, name)\n   TYPE_CONTEXT (t) = context;\n   TYPE_MAIN_DECL (TREE_TYPE (d)) = d;\n   DECL_CONTEXT (d) = context;\n+  CLASSTYPE_GOT_SEMICOLON (t) = 1;\n \n   return t;\n }\n@@ -4434,8 +4420,9 @@ lookup_name_real (name, prefer_type, nonclass)\n       else\n \tval = NULL_TREE;\n \n-#if 0\n+#if 1\n       if (got_scope && current_template_parms\n+\t  && got_scope != current_class_type\n \t  && uses_template_parms (got_scope)\n \t  && val && TREE_CODE (val) == TYPE_DECL\n \t  && ! DECL_ARTIFICIAL (val))\n@@ -5507,7 +5494,7 @@ init_decl_processing ()\n       flag_inline_functions = 0;\n     }\n \n-  if (! SUPPORTS_WEAK)\n+  if (! supports_one_only ())\n     flag_weak = 0;\n \n   /* Create the global bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */\n@@ -6015,7 +6002,8 @@ start_decl_1 (decl)\n       && TREE_CODE (decl) != TEMPLATE_DECL\n       && IS_AGGR_TYPE (type) && ! DECL_EXTERNAL (decl))\n     {\n-      if (TYPE_SIZE (complete_type (type)) == NULL_TREE)\n+      if ((! current_template_parms || ! uses_template_parms (type))\n+\t  && TYPE_SIZE (complete_type (type)) == NULL_TREE)\n \t{\n \t  cp_error (\"aggregate `%#D' has incomplete type and cannot be initialized\",\n \t\t decl);\n@@ -7864,6 +7852,18 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  else\n \t    {\n \t      type = TREE_TYPE (id);\n+\t      if (TREE_CODE (type) == TYPENAME_TYPE\n+\t\t  && TYPE_CONTEXT (type) == current_class_type)\n+\t\t{\n+\t\t  /* Members of the current class get resolved immediately;\n+\t\t     we couldn't catch this one earlier because we hadn't\n+\t\t     pushed into the class yet.  */\n+\t\t  if (TREE_TYPE (type))\n+\t\t    type = TREE_TYPE (type);\n+\t\t  else\n+\t\t    type = make_typename_type (TYPE_CONTEXT (type),\n+\t\t\t\t\t       TYPE_IDENTIFIER (type));\n+\t\t}\n \t      TREE_VALUE (spec) = type;\n \t    }\n \t  goto found;\n@@ -8862,6 +8862,19 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      }\n \t    ctype = TREE_OPERAND (declarator, 0);\n \n+\t    if (TREE_CODE (ctype) == TYPENAME_TYPE\n+\t\t&& TYPE_CONTEXT (ctype) == current_class_type)\n+\t      {\n+\t\t/* Members of the current class get resolved immediately;\n+\t\t   we couldn't catch this one earlier because we hadn't\n+\t\t   pushed into the class yet.  */\n+\t\tif (TREE_TYPE (ctype))\n+\t\t  ctype = TREE_TYPE (ctype);\n+\t\telse\n+\t\t  ctype = make_typename_type (TYPE_CONTEXT (ctype),\n+\t\t\t\t\t      TYPE_IDENTIFIER (ctype));\n+\t      }\n+\n \t    if (sname == NULL_TREE)\n \t      goto done_scoping;\n "}, {"sha": "39a25729286633dac27cb78579069617c8711134", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7fcdf4c26b5181466cec06573b45580eb686a22b", "patch": "@@ -1356,7 +1356,8 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n     }\n \n   if (declspecs == NULL_TREE\n-      && TREE_CODE (declarator) == SCOPE_REF)\n+      && TREE_CODE (declarator) == SCOPE_REF\n+      && TREE_CODE (TREE_OPERAND (declarator, 1)) == IDENTIFIER_NODE)\n     {\n       /* Access declaration */\n       if (! IS_AGGR_TYPE_CODE (TREE_CODE (TREE_OPERAND (declarator, 0))))\n@@ -2296,18 +2297,10 @@ void\n comdat_linkage (decl)\n      tree decl;\n {\n-  TREE_PUBLIC (decl) = 0;\n-\n-#ifdef MAKE_DECL_ONE_ONLY\n-  MAKE_DECL_ONE_ONLY (decl);\n-  TREE_PUBLIC (decl) = 1;\n-#endif\n-\n   if (flag_weak)\n-    {\n-      DECL_WEAK (decl) = 1;\n-      TREE_PUBLIC (decl) = 1;\n-    }\n+    make_decl_one_only (decl);\n+  else\n+    TREE_PUBLIC (decl) = 0;\n }\n \n /* Set TREE_PUBLIC and/or DECL_EXTERN on the vtable DECL,\n@@ -2424,11 +2417,7 @@ finish_vtable_vardecl (prev, vars)\n {\n   if (write_virtuals >= 0\n       && ! DECL_EXTERNAL (vars)\n-      && ((TREE_PUBLIC (vars) && ! DECL_WEAK (vars)\n-#ifdef DECL_ONE_ONLY\n-\t   && ! DECL_ONE_ONLY (vars)\n-#endif\n-\t   )\n+      && ((TREE_PUBLIC (vars) && ! DECL_WEAK (vars) && ! DECL_ONE_ONLY (vars))\n \t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars))\n \t  || (hack_decl_function_context (vars) && TREE_USED (vars)))\n       && ! TREE_ASM_WRITTEN (vars))\n@@ -2594,11 +2583,8 @@ import_export_decl (decl)\n \t    {\n \t      /* Statically initialized vars are weak or comdat, if\n                  supported.  */\n-#ifdef MAKE_DECL_ONE_ONLY\n-\t      MAKE_DECL_ONE_ONLY (decl);\n-#endif\n \t      if (flag_weak)\n-\t\tDECL_WEAK (decl) = 1;\n+\t\tmake_decl_one_only (decl);\n \t      /* else leave vars public so multiple defs will break.  */\n \t    }\n \t}\n@@ -2851,9 +2837,7 @@ finish_file ()\n \t  && ! DECL_EXTERNAL (decl))\n \t{\n \t  int protect = (TREE_PUBLIC (decl) && (DECL_COMMON (decl)\n-#ifdef DECL_ONE_ONLY\n \t\t\t\t\t\t|| DECL_ONE_ONLY (decl)\n-#endif\n \t\t\t\t\t\t|| DECL_WEAK (decl)));\n \n \t  temp = build_cleanup (decl);\n@@ -2932,9 +2916,7 @@ finish_file ()\n \t  if (TREE_CODE (decl) == VAR_DECL)\n \t    {\n \t  int protect = (TREE_PUBLIC (decl) && (DECL_COMMON (decl)\n-#ifdef DECL_ONE_ONLY\n \t\t\t\t\t\t|| DECL_ONE_ONLY (decl)\n-#endif\n \t\t\t\t\t\t|| DECL_WEAK (decl)));\n \n \t      /* Set these global variables so that GDB at least puts\n@@ -3085,10 +3067,7 @@ finish_file ()\n \t    else if (DECL_INITIAL (decl) == 0)\n \t      p = &TREE_CHAIN (*p);\n \t    else if ((TREE_PUBLIC (decl) && ! DECL_WEAK (decl)\n-#ifdef DECL_ONE_ONLY\n-\t\t      && ! DECL_ONE_ONLY (decl)\n-#endif\n-\t\t      )\n+\t\t      && ! DECL_ONE_ONLY (decl))\n \t\t     || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n \t\t     || flag_keep_inline_functions)\n \t      {"}, {"sha": "c7c63d7cdd0a018ae484b4ce6f0fb6fc6ea2eef2", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7fcdf4c26b5181466cec06573b45580eb686a22b", "patch": "@@ -1705,11 +1705,11 @@ make_thunk (function, delta)\n       TREE_READONLY (thunk) = TYPE_READONLY (TREE_TYPE (vtable_entry_type));\n       TREE_THIS_VOLATILE (thunk) = TYPE_VOLATILE (TREE_TYPE (vtable_entry_type));\n       make_function_rtl (thunk);\n+      comdat_linkage (thunk);\n       TREE_SET_CODE (thunk, THUNK_DECL);\n       DECL_INITIAL (thunk) = function;\n       THUNK_DELTA (thunk) = delta;\n       DECL_EXTERNAL (thunk) = 1;\n-      comdat_linkage (thunk);\n       /* So that finish_file can write out any thunks that need to be: */\n       pushdecl_top_level (thunk);\n     }"}, {"sha": "120b5a1fa3a5aa230c61c1006d7e0355ea464c97", "filename": "gcc/cp/mpw-make.sed", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fmpw-make.sed", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcdf4c26b5181466cec06573b45580eb686a22b/gcc%2Fcp%2Fmpw-make.sed", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmpw-make.sed?ref=7fcdf4c26b5181466cec06573b45580eb686a22b", "patch": "@@ -43,11 +43,13 @@ LIBDEPS = \\\n /^SUBDIR_MALLOC/s/`.*`//\n \n # Point includes at parent directly correctly.\n-/^INCLUDES = .*$/s/:\\./::/g\n-/^INCLUDES = .*$/s/\"{srcdir}\"\\.\\./\"{topsrcdir}\"gcc:/g\n+/^INCLUDES = /s/:\\./::/g\n+/^INCLUDES = /s/\"{srcdir}\"\\.\\./\"{topsrcdir}\"gcc:/g\n+/^INCLUDES = /s,\"{srcdir}\"/\\.\\.,\"{topsrcdir}\"gcc:,g\n+/^INCLUDES = /s,\"{srcdir}\":config,\"{topsrcdir}\"gcc:config:,g\n \n # Add the special MPW include dirs.\n-/^INCLUDES = .*$/s/$/ -i \"{topsrcdir}\"include:mpw: -i :::extra-include:/\n+/^INCLUDES = /s/$/ -i \"{topsrcdir}\"include:mpw: -i :::extra-include:/\n \n # A nasty hack to reduce confusion.\n /true/s/ ; @true$//\n@@ -101,7 +103,7 @@ LIBDEPS = \\\n \n # Fix the compile line for the generated parser.\n /{CC} -c/,/echo {PARSE_C}/c\\\n-\t{CC} {ALL_CFLAGS} {ALL_CPPFLAGS} {INCLUDES} {BIG_SWITCHFLAG} \"{o}\"parse.c -o \"{o}\"parse.c.o\\\n+\t{CC} @DASH_C_FLAG@ {ALL_CFLAGS} {ALL_CPPFLAGS} {INCLUDES} {BIG_SWITCHFLAG} \"{o}\"parse.c -o \"{o}\"parse.c.o\\\n \n # Change all Rez commands to use mac-gcc.r.\n /{REZ}/s/\"{s}\"[-a-zA-Z{}]*\\.r/\"{topsrcdir}\"gcc:mac-gcc.r/"}]}