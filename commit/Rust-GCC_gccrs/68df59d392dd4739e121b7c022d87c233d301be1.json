{"sha": "68df59d392dd4739e121b7c022d87c233d301be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkZjU5ZDM5MmRkNDczOWUxMjFiN2MwMjJkODdjMjMzZDMwMWJlMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-03T13:18:24Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-03T13:18:24Z"}, "message": "(all patterns): Update instruction generation to reflect new meanings of constraints 'K' and 'L'.\n\n(all patterns): Update instruction generation to reflect new meanings of\nconstraints 'K' and 'L'.  Use output type 'B' to generate an inverted\nconstant.  Use output type 'N' to generate a negated floating point\nconstant.\n\nFrom-SVN: r7436", "tree": {"sha": "4c366378bafef357d088d081e15974eec52a10ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c366378bafef357d088d081e15974eec52a10ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68df59d392dd4739e121b7c022d87c233d301be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68df59d392dd4739e121b7c022d87c233d301be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68df59d392dd4739e121b7c022d87c233d301be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68df59d392dd4739e121b7c022d87c233d301be1/comments", "author": null, "committer": null, "parents": [{"sha": "aef1764cb384995a9a5c64abe2b5869cfd1ff37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef1764cb384995a9a5c64abe2b5869cfd1ff37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef1764cb384995a9a5c64abe2b5869cfd1ff37c"}], "stats": {"total": 956, "additions": 315, "deletions": 641}, "files": [{"sha": "a69bcad5043ceec6371801efb1f584577bc26d47", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 315, "deletions": 641, "changes": 956, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68df59d392dd4739e121b7c022d87c233d301be1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68df59d392dd4739e121b7c022d87c233d301be1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=68df59d392dd4739e121b7c022d87c233d301be1", "patch": "@@ -170,46 +170,38 @@\n  (set_attr \"length\" \"8\")])\n \n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t (match_operand:SI 2 \"arm_add_operand\" \"rL\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t (match_operand:SI 2 \"arm_add_operand\" \"rI,L\")))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[2])))\n-    return \\\"sub%?\\\\t%0, %1, #%n2\\\";\n-  return \\\"add%?\\\\t%0, %1, %2\\\";\n-\")\n+  \"@\n+   add%?\\\\t%0, %1, %2\n+   sub%?\\\\t%0, %1, #%n2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t \t\t  (match_operand:SI 2 \"arm_add_operand\" \"rL\"))\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(compare:CC_NOOV\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[2])))\n-    return \\\"sub%?s\\\\t%0, %1, #%n2\\\";\n-  return \\\"add%?s\\\\t%0, %1, %2\\\";\n-\"\n+  \"@\n+   add%?s\\\\t%0, %1, %2\n+   sub%?s\\\\t%0, %1, #%n2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC 24)\n-\t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t    (neg:SI (match_operand:SI 2 \"arm_add_operand\" \"rL\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t    (neg:SI (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[2])))\n-    return \\\"sub%?s\\\\t%0, %1, #%n2\\\";\n-  return \\\"add%?s\\\\t%0, %1, %2\\\";\n-\"\n+  \"@\n+   add%?s\\\\t%0, %1, %2\n+   sub%?s\\\\t%0, %1, #%n2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"incscc\"\n@@ -218,13 +210,11 @@\n                     [(reg 24) (const_int 0)])\n                  (match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n   \"\"\n-  \"*\n-  if (which_alternative == 1)\n-    output_asm_insn (\\\"mov%D2\\\\t%0, %1\\\", operands);\n-  return \\\"add%d2\\\\t%0, %1, #1\\\";\n-\"\n+  \"@\n+  add%d2\\\\t%0, %1, #1\n+  mov%D2\\\\t%0, %1\\;add%d2\\\\t%0, %1, #1\"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"*,8\")])\n+ (set_attr \"length\" \"4,8\")])\n \n ; If a constant is too big to fit in a single instruction then the constant\n ; will be pre-loaded into a register taking at least two insns, we might be\n@@ -287,47 +277,19 @@\n \t(plus:SF (match_operand:SF 1 \"s_register_operand\" \"f,f\")\n \t\t (match_operand:SF 2 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"adf%?s\\\\t%0, %1, %2\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"suf%?s\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   adf%?s\\\\t%0, %1, %2\n+   suf%?s\\\\t%0, %1, #%N2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"adddf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n \t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"f,f\")\n \t\t (match_operand:DF 2 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"adf%?d\\\\t%0, %1, %2\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"suf%?d\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   adf%?d\\\\t%0, %1, %2\n+   suf%?d\\\\t%0, %1, #%N2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -336,23 +298,9 @@\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f,f\"))\n \t\t (match_operand:DF 2 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"adf%?d\\\\t%0, %1, %2\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"suf%?d\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   adf%?d\\\\t%0, %1, %2\n+   suf%?d\\\\t%0, %1, #%N2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -379,23 +327,9 @@\n \t(plus:XF (match_operand:XF 1 \"s_register_operand\" \"f,f\")\n \t\t (match_operand:XF 2 \"fpu_add_operand\" \"fG,H\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"adf%?e\\\\t%0, %1, %2\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"suf%?e\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   adf%?e\\\\t%0, %1, %2\n+   suf%?e\\\\t%0, %1, #%N2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"subdi3\"\n@@ -825,62 +759,39 @@\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"arm_not_operand\" \"rK\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t(match_operand:SI 2 \"arm_not_operand\" \"rI,K\")))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[2])))\n-    {\n-      operands[2] = GEN_INT (~INTVAL (operands[2]));\n-      output_asm_insn (\\\"bic%?\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-  return \\\"and%?\\\\t%0, %1, %2\\\";\n-\")\n+  \"@\n+   and%?\\\\t%0, %1, %2\n+   bic%?\\\\t%0, %1, #%B2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (and:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t \t\t (match_operand:SI 2 \"arm_not_operand\" \"rK\"))\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(compare:CC_NOOV\n+\t (and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t (match_operand:SI 2 \"arm_not_operand\" \"rI,K\"))\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(and:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[2])))\n-    {\n-      operands[2] = GEN_INT (~INTVAL (operands[2]));\n-      output_asm_insn (\\\"bic%?s\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-  return \\\"and%?s\\\\t%0, %1, %2\\\";\n-\"\n+  \"@\n+   and%?s\\\\t%0, %1, %2\n+   bic%?s\\\\t%0, %1, #%B2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (and:SI (match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t \t\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))\n-\t\t\t (const_int 0)))]\n+\t(compare:CC_NOOV\n+\t (and:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n+\t\t (match_operand:SI 1 \"arm_not_operand\" \"rI,K\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:SI 3 \"=X,r\"))]\n   \"\"\n-  \"tst%?\\\\t%0, %1\"\n-[(set_attr \"conds\" \"set\")])\n-\n-(define_insn \"\"\n-  [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (and:SI (match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t \t\t (match_operand:SI 1 \"immediate_operand\" \"K\"))\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"const_ok_for_arm (~INTVAL (operands[1]))\"\n-  \"*\n-  operands[1] = GEN_INT (~INTVAL (operands[1]));\n-  output_asm_insn (\\\"bic%?s\\\\t%3, %0, %1\\\", operands);\n-  return \\\"\\\";\n-\"\n+  \"@\n+   tst%?\\\\t%0, %1\n+   bic%?s\\\\t%3, %0, #%B1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1843,7 +1754,7 @@\n \n (define_insn \"movdi\"\n   [(set (match_operand:DI 0 \"di_operand\" \"=r,r,r,o<>,r\")\n-\t(match_operand:DI 1 \"di_operand\" \"rK,n,o<>,r,F\"))]\n+\t(match_operand:DI 1 \"di_operand\" \"rIK,n,o<>,r,F\"))]\n   \"\"\n   \"*\n   return (output_move_double (operands));\n@@ -1966,7 +1877,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,m,r\")\n-\t(match_operand:SI 1 \"general_operand\"  \"R,m,K,r,r,S\"))]\n+\t(match_operand:SI 1 \"general_operand\"  \"R,m,K,rI,r,S\"))]\n   \"(register_operand (operands[0], SImode)\n     && (GET_CODE (operands[1]) != CONST_INT\n         || const_ok_for_arm (INTVAL (operands[1]))\n@@ -2005,13 +1916,7 @@\n     case 3:\n       return \\\"mov%?\\\\t%0, %1\\\";\n     case 2:\n-      if (!const_ok_for_arm (INTVAL (operands[1])))\n-\t{\n-\t  operands[1] = GEN_INT (~INTVAL (operands[1]));\n-\t  output_asm_insn (\\\"mvn%?\\\\t%0, %1\\\", operands);\n-\t  return \\\"\\\";\n-\t}\n-      return \\\"mov%?\\\\t%0, %1\\\";\n+      return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 4:\n       return \\\"str%?\\\\t%1, %0\\\";\n     case 5:\n@@ -2169,31 +2074,17 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,m\")\n-\t(match_operand:HI 1 \"general_operand\"  \"r,K,m,r\"))]\n+\t(match_operand:HI 1 \"general_operand\"  \"rI,K,m,r\"))]\n   \"(register_operand (operands[0], HImode)\n     && (GET_CODE (operands[1]) != CONST_INT\n \t|| const_ok_for_arm (INTVAL (operands[1]))\n \t|| const_ok_for_arm (~INTVAL (operands[1]))))\n    || register_operand (operands[1], HImode)\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-      case 1:\n-\tif (!const_ok_for_arm (INTVAL (operands[1])))\n-\t  {\n-\t    operands[1] = GEN_INT (~INTVAL (operands[1]));\n-\t    output_asm_insn (\\\"mvn%?\\\\t%0, %1\\\", operands);\n-\t    return \\\"\\\";\n-\t  }\n-\t/* fall through */\n-      case 0:\n-\treturn \\\"mov%?\\\\t%0, %1\\\\t%@ movhi\\\";\n-      case 2:\n-\treturn \\\"ldr%?\\\\t%0, %1\\\\t%@ movhi\\\";\n-      case 3:\n-\treturn \\\"str%?\\\\t%1, %0\\\\t%@ movhi\\\";\n-    }\n-\"\n+  \"@\n+   mov%?\\\\t%0, %1\\\\t%@ movhi\n+   mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n+   ldr%?\\\\t%0, %1\\\\t%@ movhi\n+   bogus code str%?\\\\t%1, %0\\\\t%@ movhi\"\n [(set_attr \"type\" \"*,*,load,store1\")])\n \n (define_expand \"reload_outhi\"\n@@ -2229,64 +2120,30 @@\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,m\")\n-\t(match_operand:QI 1 \"general_operand\" \"r,K,m,r\"))]\n+\t(match_operand:QI 1 \"general_operand\" \"rI,K,m,r\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    case 1:\n-      if (INTVAL (operands[1]) < 0)\n-\t{\n-\t  operands[1] = GEN_INT (~INTVAL (operands[1]));\n-\t  output_asm_insn (\\\"mvn%?\\\\t%0, %1\\\", operands);\n-\t  return \\\"\\\";\n-\t}\n-    case 0:\n-      return \\\"mov%?\\\\t%0, %1\\\";\n-    case 2:\n-      return \\\"ldr%?b\\\\t%0, %1\\\";\n-    case 3:\n-      return \\\"str%?b\\\\t%1, %0\\\";\n-    }\n-\"\n+  \"@\n+   mov%?\\\\t%0, %1\n+   mvn%?\\\\t%0, #%B1\n+   ldr%?b\\\\t%0, %1\n+   str%?b\\\\t%1, %0\"\n [(set_attr \"type\" \"*,*,load,store1\")])\n \n (define_insn \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=f,f,f,m,f,r,r,r,m\")\n \t(match_operand:SF 1 \"general_operand\" \"fG,H,m,f,r,f,r,m,r\"))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"mvf%?s\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"mnf%?s\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    case 2:\n-      return \\\"ldf%?s\\\\t%0, %1\\\";\n-    case 3:\n-      return \\\"stf%?s\\\\t%1, %0\\\";\n-    case 4:\n-      return \\\"str%?\\\\t%1, [sp, #-4]!\\;ldf%?s\\\\t%0, [sp], #4\\\";\n-    case 5:\n-      return \\\"stf%?s\\\\t%1, [sp, #-4]!\\;ldr%?\\\\t%0, [sp], #4\\\";\n-    case 6:\n-      return \\\"mov%?\\\\t%0, %1\\\";\n-    case 7:\n-      return \\\"ldr%?\\\\t%0, %1\\\\t%@ float\\\";\n-    case 8:\n-      return \\\"str%?\\\\t%1, %0\\\\t%@ float\\\";\n-  }\n-}\n-\"\n+  \"@\n+   mvf%?s\\\\t%0, %1\n+   mnf%?s\\\\t%0, #%N1\n+   ldf%?s\\\\t%0, %1\n+   stf%?s\\\\t%1, %0\n+   str%?\\\\t%1, [sp, #-4]!\\;ldf%?s\\\\t%0, [sp], #4\n+   stf%?s\\\\t%1, [sp, #-4]!\\;ldr%?\\\\t%0, [sp], #4\n+   mov%?\\\\t%0, %1\n+   ldr%?\\\\t%0, %1\\\\t%@ float\n+   str%?\\\\t%1, %0\\\\t%@ float\"\n [(set_attr \"length\" \"4,4,4,4,8,8,4,4,4\")\n  (set_attr \"type\" \"float,float,f_load,f_store,r_mem_f,f_mem_r,*,load,store1\")])\n \n@@ -2317,7 +2174,6 @@\n   \"GET_CODE (operands[0]) != MEM || register_operand (operands[1], DFmode)\"\n   \"*\n {\n-  REAL_VALUE_TYPE r;\n   rtx ops[3];\n \n   switch (which_alternative)\n@@ -2352,13 +2208,7 @@\n     case 5:\n       return \\\"mvf%?d\\\\t%0, %1\\\";\n \n-    case 6:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"mnf%?d\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-\n+    case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n     case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n     case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n     case 9: return output_mov_double_fpu_from_arm (operands);\n@@ -2376,26 +2226,16 @@\n \t(match_operand:XF 1 \"general_operand\" \"fG,H,m,f,r,f,r\"))]\n   \"ENABLE_XF_PATTERNS\"\n   \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n   switch (which_alternative)\n     {\n     case 0: return \\\"mvf%?e\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"mnf%?e\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-\n+    case 1: return \\\"mnf%?e\\\\t%0, #%N1\\\";\n     case 2: return \\\"ldf%?e\\\\t%0, %1\\\";\n     case 3: return \\\"stf%?e\\\\t%1, %0\\\";\n     case 4: return output_mov_long_double_fpu_from_arm (operands);\n     case 5: return output_mov_long_double_arm_from_fpu (operands);\n     case 6: return output_mov_long_double_arm_from_arm (operands);\n     }\n-}\n \"\n [(set_attr \"length\" \"4,4,4,4,8,8,12\")\n  (set_attr \"type\" \"float,float,f_load,f_store,r_mem_f,f_mem_r,*\")])\n@@ -2707,15 +2547,12 @@\n \n (define_insn \"\"\n   [(set (match_operand 0 \"cc_register\" \"\")\n-\t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t (match_operand:SI 2 \"arm_add_operand\" \"rL\")))]\n+\t(compare (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t (match_operand:SI 2 \"arm_add_operand\" \"rI,L\")))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[2])))\n-    return \\\"cmn%?\\\\t%1, #%n2\\\";\n-  return \\\"cmp%?\\\\t%1, %2\\\";\n-\"\n+  \"@\n+   cmp%?\\\\t%1, %2\n+   cmn%?\\\\t%1, #%n2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -2751,23 +2588,9 @@\n \t(compare:CCFP (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n \t\t      (match_operand:SF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?\\\\t%0, %1\n+   cnf%?\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2776,23 +2599,9 @@\n \t(compare:CCFP (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n \t\t      (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?\\\\t%0, %1\n+   cnf%?\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2802,23 +2611,9 @@\n \t\t       (match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n \t\t      (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?\\\\t%0, %1\n+   cnf%?\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2837,23 +2632,9 @@\n \t(compare:CCFP (match_operand:XF 0 \"s_register_operand\" \"f,f\")\n \t\t      (match_operand:XF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?\\\\t%0, %1\n+   cnf%?\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2862,23 +2643,9 @@\n \t(compare:CCFPE (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n \t\t       (match_operand:SF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?e\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?\\\\t%0, %1\n+   cnf%?\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2887,23 +2654,9 @@\n \t(compare:CCFPE (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n \t\t       (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?e\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?e\\\\t%0, %1\n+   cnf%?e\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2913,23 +2666,9 @@\n \t\t\t(match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n \t\t       (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?e\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?e\\\\t%0, %1\n+   cnf%?e\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2948,23 +2687,9 @@\n \t(compare:CCFPE (match_operand:XF 0 \"s_register_operand\" \"f,f\")\n \t\t       (match_operand:XF 1 \"fpu_add_operand\" \"fG,H\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"*\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"cmf%?e\\\\t%0, %1\\\";\n-    case 1:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      r = REAL_VALUE_NEGATE (r);\n-      operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-}\n-\"\n+  \"@\n+   cmf%?e\\\\t%0, %1\n+   cnf%?e\\\\t%0, #%N1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -3327,7 +3052,7 @@\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n-  return (output_call (operands));\n+  return output_call (operands);\n \"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -3343,7 +3068,7 @@\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n-  return (output_call_mem (operands));\n+  return output_call_mem (operands);\n \"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -3367,7 +3092,7 @@\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n-  return (output_call (&operands[1]));\n+  return output_call (&operands[1]);\n \"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -3383,7 +3108,7 @@\n    (clobber (reg:SI 14))]\n   \"! CONSTANT_ADDRESS_P (XEXP (operands[1], 0))\"\n   \"*\n-  return (output_call_mem (&operands[1]));\n+  return output_call_mem (&operands[1]);\n \"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -3781,10 +3506,10 @@\n  (set_attr \"length\" \"4,8\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_operator 1 \"comparison_operator\"\n-\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t  (match_operand:SI 3 \"arm_add_operand\" \"rL\")]))\n+\t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L\")]))\n    (clobber (reg 24))]\n   \"\"\n   \"*\n@@ -3796,13 +3521,11 @@\n \n   if (GET_CODE (operands[1]) == NE)\n     {\n-      if (GET_CODE (operands[3]) == CONST_INT\n-\t  && !const_ok_for_arm (INTVAL (operands[3])))\n+      if (which_alternative == 1)\n \treturn \\\"adds\\\\t%0, %2, #%n3\\;movne\\\\t%0, #1\\\";\n       return \\\"subs\\\\t%0, %2, %3\\;movne\\\\t%0, #1\\\";\n     }\n-  if (GET_CODE (operands[3]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[3])))\n+  if (which_alternative == 1)\n     output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n@@ -3846,16 +3569,17 @@\n \n (define_split\n   [(set (pc)\n-\t(if_then_else (match_operator 5 \"equality_operator\"\n-\t\t       [(ior:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t\t [(match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t\t\t  (match_operand:SI 1 \"arm_add_operand\" \"rL\")])\n-\t\t\t\t(match_operator 7 \"comparison_operator\"\n-\t\t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rL\")]))\n-\t\t\t(const_int 0)])\n-\t\t      (label_ref (match_operand 4 \"\" \"\"))\n-\t\t      (pc)))\n+\t(if_then_else\n+\t (match_operator 5 \"equality_operator\"\n+\t  [(ior:SI (match_operator 6 \"comparison_operator\"\n+\t\t    [(match_operand:SI 0 \"s_register_operand\" \"\")\n+\t\t     (match_operand:SI 1 \"arm_add_operand\" \"\")])\n+\t\t   (match_operator 7 \"comparison_operator\"\n+\t\t    [(match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t     (match_operand:SI 3 \"arm_add_operand\" \"\")]))\n+\t  (const_int 0)])\n+\t (label_ref (match_operand 4 \"\" \"\"))\n+\t (pc)))\n    (clobber (reg 24))]\n   \"(GET_CODE (operands[6]) == GET_CODE (operands[7])\n     || comparison_dominates_p (GET_CODE (operands[6]), GET_CODE (operands[7]))\n@@ -3891,16 +3615,16 @@\n \n (define_insn \"\"\n   [(set (pc)\n-\t(if_then_else (ne\n-\t\t       (ior:SI (match_operator 5 \"comparison_operator\"\n-\t\t\t\t[(match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t\t\t (match_operand:SI 1 \"arm_add_operand\" \"rL\")])\n-\t\t\t       (match_operator 6 \"comparison_operator\"\n-\t\t\t\t[(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t\t (match_operand:SI 3 \"arm_rhs_operand\" \"rL\")]))\n-\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 4 \"\" \"\"))\n-\t\t      (pc)))\n+\t(if_then_else\n+\t (ne (ior:SI (match_operator 5 \"comparison_operator\"\n+\t\t      [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n+\t\t       (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t\t     (match_operator 6 \"comparison_operator\"\n+\t\t      [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n+\t\t       (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI,L,L\")]))\n+\t     (const_int 0))\n+\t (label_ref (match_operand 4 \"\" \"\"))\n+\t (pc)))\n    (clobber (reg 24))]\n   \"!(GET_CODE (operands[5]) == GET_CODE (operands[6])\n      || comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[6]))\n@@ -3909,15 +3633,12 @@\n {\n   extern int arm_ccfsm_state;\n \n-  if (GET_CODE (operands[1]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[1])))\n-    output_asm_insn (\\\"cmn\\\\t%0, #%n1\\\", operands);\n+  if (which_alternative & 1)\n+    output_asm_insn (\\\"cmn\\\\t%0, #%n1\\;b%d5\\\\t%l4\\\", operands);\n   else\n-    output_asm_insn (\\\"cmp\\\\t%0, %1\\\", operands);\n+    output_asm_insn (\\\"cmp\\\\t%0, %1\\;b%d5\\\\t%l4\\\", operands);\n \n-  output_asm_insn (\\\"b%d5\\\\t%l4\\\", operands);\n-  if (GET_CODE (operands[3]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[3])))\n+  if (which_alternative >= 2)\n     output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n@@ -3934,39 +3655,36 @@\n \n (define_insn \"\"\n   [(set (reg:CC 24)\n-\t(compare:CC (ior:CC (match_operator 4 \"comparison_operator\"\n-\t\t\t     [(match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t\t      (match_operand:SI 1 \"arm_add_operand\" \"rL\")])\n-\t\t\t    (match_operator 5 \"comparison_operator\"\n-\t\t\t     [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t      (match_operand:SI 3 \"arm_add_operand\" \"rL\")]))\n-\t\t    (const_int 0)))]\n+\t(compare:CC\n+\t (ior:CC (match_operator 4 \"comparison_operator\"\n+\t\t  [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n+\t\t   (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t\t (match_operator 5 \"comparison_operator\"\n+\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n+\t\t   (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")]))\n+\t (const_int 0)))]\n   \"(GET_CODE (operands[4]) == GET_CODE (operands[5])\n     || comparison_dominates_p (GET_CODE (operands[4]), GET_CODE (operands[5]))\n     || comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4])))\"\n   \"*\n   if (comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4])))\n     {\n-      if (GET_CODE (operands[3]) == CONST_INT\n-\t  && !const_ok_for_arm (INTVAL (operands[3])))\n+      if (which_alternative >= 2)\n \toutput_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n       else\n \toutput_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n \n-      if (GET_CODE (operands[1]) == CONST_INT\n-\t  && !const_ok_for_arm (INTVAL (operands[1])))\n+      if (which_alternative & 1)\n \treturn \\\"cmn%D5\\\\t%0, #%n1\\\";\n       return \\\"cmp%D5\\\\t%0, %1\\\";\n     }\n \n-  if (GET_CODE (operands[1]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[1])))\n+  if (which_alternative & 1)\n     output_asm_insn (\\\"cmn\\\\t%0, #%n1\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%0, %1\\\", operands);\n \n-  if (GET_CODE (operands[3]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[3])))\n+  if (which_alternative >= 2)\n     return \\\"cmn%D4\\\\t%2, #%n3\\\";\n   return \\\"cmp%D4\\\\t%2, %3\\\";\n \"\n@@ -4082,11 +3800,11 @@\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"equality_operator\"\n \t\t       [(and:SI (match_operator 2 \"comparison_operator\"\n-\t\t\t\t [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t\t  (match_operand:SI 4 \"arm_add_operand\" \"rL\")])\n+\t\t\t\t [(match_operand:SI 3 \"s_register_operand\" \"\")\n+\t\t\t\t  (match_operand:SI 4 \"arm_add_operand\" \"\")])\n \t\t\t\t(match_operator 0 \"comparison_operator\"\n-\t\t\t\t [(match_operand:SI 5 \"s_register_operand\" \"r\")\n-\t\t\t\t  (match_operand:SI 6 \"arm_add_operand\" \"rL\")]))\n+\t\t\t\t [(match_operand:SI 5 \"s_register_operand\" \"\")\n+\t\t\t\t  (match_operand:SI 6 \"arm_add_operand\" \"\")]))\n \t\t\t(const_int 0)])\n \t\t      (label_ref (match_operand 7 \"\" \"\"))\n \t\t      (pc)))\n@@ -4134,16 +3852,16 @@\n \n (define_insn \"\"\n   [(set (pc)\n-\t(if_then_else (eq\n-\t\t       (and:SI (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t\t (match_operand:SI 3 \"arm_add_operand\" \"rL\")])\n-\t\t\t       (match_operator 4 \"comparison_operator\"\n-\t\t\t\t[(match_operand:SI 5 \"s_register_operand\" \"r\")\n-\t\t\t\t (match_operand:SI 6 \"arm_rhs_operand\" \"rL\")]))\n-\t\t       (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))\n+\t(if_then_else\n+\t (eq (and:SI (match_operator 1 \"comparison_operator\"\n+\t\t      [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n+\t\t       (match_operand:SI 3 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t\t     (match_operator 4 \"comparison_operator\"\n+\t\t      [(match_operand:SI 5 \"s_register_operand\" \"r,r,r,r\")\n+\t\t       (match_operand:SI 6 \"arm_rhs_operand\" \"rI,rI,L,L\")]))\n+\t     (const_int 0))\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))\n    (clobber (reg 24))]\n   \"!(GET_CODE (operands[1]) == GET_CODE (operands[4])\n      || comparison_dominates_p (reverse_condition (GET_CODE (operands[1])),\n@@ -4154,17 +3872,16 @@\n {\n   extern int arm_ccfsm_state;\n \n-  if (GET_CODE (operands[3]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[3])))\n-    output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n+  if (which_alternative & 1)\n+    output_asm_insn (\\\"cmn\\\\t%2, #%n3\\;b%D1\\\\t%l0\\\", operands);\n   else\n-    output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  output_asm_insn (\\\"b%D1\\\\t%l0\\\", operands);\n-  if (GET_CODE (operands[6]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[6])))\n+    output_asm_insn (\\\"cmp\\\\t%2, %3\\;b%D1\\\\t%l0\\\", operands);\n+\n+  if (which_alternative >= 2)\n     output_asm_insn (\\\"cmn\\\\t%5, #%n6\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%5, %6\\\", operands);\n+\n   if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n   {\n     arm_ccfsm_state += 2;\n@@ -4201,18 +3918,19 @@\n \n (define_insn \"movcond\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n-\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rL,rL,rL\")])\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,rI,?rI\")\n-\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL,rIL\")])\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,rI,?rI\")\n+\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n    (clobber (reg 24))]\n   \"\"\n   \"*\n   if (GET_CODE (operands[5]) == LT\n       && (operands[4] == const0_rtx))\n     {\n-      if (which_alternative != 1 && GET_CODE (operands[4]) == REG)\n+      if (which_alternative != 1 && GET_CODE (operands[1]) == REG)\n \t{\n \t  if (operands[2] == const0_rtx)\n \t    return \\\"and\\\\t%0, %1, %3, asr #31\\\";\n@@ -4261,34 +3979,29 @@\n  (set_attr \"length\" \"8,8,12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 9 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 6 \"arm_add_operand\" \"rL\")])\n+\t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 6 \"arm_add_operand\" \"rI,L\")])\n \t\t\t (match_operator:SI 8 \"shiftable_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rI,rI\")])\n \t\t\t (match_operator:SI 7 \"shiftable_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI\")])))\n+\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI,rI\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[6]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[6])))\n-    output_asm_insn (\\\"cmn\\\\t%5, #%n6\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%5, %6\\\", operands);\n-  return \\\"%I8%d9\\\\t%0, %1, %2\\;%I7%D9\\\\t%0, %3, %4\\\";\n-\"\n+  \"@\n+   cmp\\\\t%5, %6\\;%I8%d9\\\\t%0, %1, %2\\;%I7%D9\\\\t%0, %3, %4\n+   cmn\\\\t%5, #%n6\\;%I8%d9\\\\t%0, %1, %2\\;%I7%D9\\\\t%0, %3, %4\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 3 \"arm_add_operand\" \"rL,rL\")])\n+\t\t\t   (match_operand:SI 3 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operator:SI 7 \"shiftable_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 5 \"arm_rhs_operand\" \"rI,rI\")])\n@@ -4333,7 +4046,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL,rL\")])\n+\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rIm\")\n \t\t\t (match_operator:SI 7 \"shiftable_operator\"\n \t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n@@ -4379,7 +4092,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL,rL\")])\n+\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (plus:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rL,rL\"))\n@@ -4415,11 +4128,11 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL,rL\")])\n+\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rIm\")\n \t\t\t (plus:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rL,rL\"))))\n+\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rIL,rIL\"))))\n    (clobber (reg 24))]\n   \"\"\n   \"*\n@@ -4451,7 +4164,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rL,rL\")])\n+\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n \t\t\t (not:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))\n@@ -4462,194 +4175,155 @@\n  (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rL,rL\")])\n-\t\t\t (not:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:SI \n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t (not:SI\n+\t  (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\"))\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-{\n-  char pattern[100];\n-\n-  if (GET_CODE (operands[30]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[4])))\n-    output_asm_insn (\\\"cmn\\\\t%3, #%n4\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%3, %4\\\", operands);\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%D5\\\\t%0, %1\\\", operands);\n-  return \\\"mvn%d5\\\\t%0, %2\\\";\n-\n-}\n-\"\n+  \"@\n+   cmp\\\\t%3, %4\\;mvn%d5\\\\t%0, %2\n+   cmn\\\\t%3, #%n4\\;mvn%d5\\\\t%0, %2\n+   cmp\\\\t%3, %4\\;mov%D5\\\\t%0, %1\\;mvn%d5\\\\t%0, %2\n+   cmn\\\\t%3, #%n4\\;mov%D5\\\\t%0, %1\\;mvn%d5\\\\t%0, %2\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL,rL\")])\n-\t\t\t (match_operator:SI 7 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn,rn\")])\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")))\n+ (set_attr \"length\" \"8,8,12,12\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 6 \"comparison_operator\"\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t (match_operator:SI 7 \"shift_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn,rn,rn,rn\")])\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[5]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[5])))\n-    output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%D6\\\\t%0, %1\\\", operands);\n-  return \\\"mov%d6\\\\t%0, %2, %S7\\\";\n-\"\n+  \"@\n+   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %2, %S7\n+   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %2, %S7\n+   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2, %S7\n+   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2, %S7\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL,rL\")])\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n-\t\t\t (match_operator:SI 7 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn,rn\")])))\n+ (set_attr \"length\" \"8,8,12,12\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 6 \"comparison_operator\"\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")\n+\t (match_operator:SI 7 \"shift_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn,rn,rn,rn\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[5]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[5])))\n-    output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%d6\\\\t%0, %1\\\", operands);\n-  return \\\"mov%D6\\\\t%0, %2, %S7\\\";\n-\"\n+  \"@\n+   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %2, %S7\n+   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %2, %S7\n+   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2, %S7\n+   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2, %S7\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+ (set_attr \"length\" \"8,8,12,12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(if_then_else:SI (match_operator 7 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 6 \"arm_add_operand\" \"rL\")])\n-\t\t\t (match_operator:SI 8 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")])\n-\t\t\t (match_operator:SI 9 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI\")])))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 7 \"comparison_operator\"\n+\t  [(match_operand:SI 5 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 6 \"arm_add_operand\" \"rI,L\")])\n+\t (match_operator:SI 8 \"shift_operator\"\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rn,rn\")])\n+\t (match_operator:SI 9 \"shift_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI,rI\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[6]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[6])))\n-    output_asm_insn (\\\"cmn\\\\t%5, #%n6\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%5, %6\\\", operands);\n-  return \\\"mov%d7\\\\t%0, %1, %S8\\;mov%D7\\\\t%0, %3, %S9\\\";\n-\"\n+  \"@\n+   cmp\\\\t%5, %6\\;mov%d7\\\\t%0, %1, %S8\\;mov%D7\\\\t%0, %3, %S9\n+   cmn\\\\t%5, #%n6\\;mov%d7\\\\t%0, %1, %S8\\;mov%D7\\\\t%0, %3, %S9\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL\")])\n-\t\t\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n-\t\t\t (match_operator:SI 7 \"shiftable_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 6 \"comparison_operator\"\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L\")])\n+\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\"))\n+\t (match_operator:SI 7 \"shiftable_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[5]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[5])))\n-    output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  return \\\"mvn%d6\\\\t%0, %1\\;%I7%D6\\\\t%0, %2, %3\\\";\n-\"\n+  \"@\n+   cmp\\\\t%4, %5\\;mvn%d6\\\\t%0, %1\\;%I7%D6\\\\t%0, %2, %3\n+   cmn\\\\t%4, #%n5\\;mvn%d6\\\\t%0, %1\\;%I7%D6\\\\t%0, %2, %3\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rL\")])\n-\t\t\t (match_operator:SI 7 \"shiftable_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])\n-\t\t\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 6 \"comparison_operator\"\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L\")])\n+\t (match_operator:SI 7 \"shiftable_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])\n+\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\"))))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[5]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[5])))\n-    output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  return \\\"mvn%D6\\\\t%0, %1\\;%I7%d6\\\\t%0, %2, %3\\\";\n-\"\n+  \"@\n+  cmp\\\\t%4, %5\\;mvn%D6\\\\t%0, %1\\;%I7%d6\\\\t%0, %2, %3\n+  cmn\\\\t%4, #%n5\\;mvn%D6\\\\t%0, %1\\;%I7%d6\\\\t%0, %2, %3\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rL,rL\")])\n-\t\t\t (neg:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\"))\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[4]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[4])))\n-    output_asm_insn (\\\"cmn\\\\t%3, #%n4\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%3, %4\\\", operands);\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%D5\\\\t%0, %1\\\", operands);\n-  return \\\"rsb%d5\\\\t%0, %2, #0\\\";\n-\"\n+  \"@\n+   cmp\\\\t%3, %4\\;rsb%d5\\\\t%0, %2, #0\n+   cmn\\\\t%3, #%n4\\;rsb%d5\\\\t%0, %2, #0\n+   cmp\\\\t%3, %4\\;mov%D5\\\\t%0, %1\\;rsb%d5\\\\t%0, %2, #0\n+   cmn\\\\t%3, #%n4\\;mov%D5\\\\t%0, %1\\;rsb%d5\\\\t%0, %2, #0\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+ (set_attr \"length\" \"8,8,12,12\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rL,rL\")])\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n-\t\t\t (neg:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")\n+\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\"))))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"*\n-  if (GET_CODE (operands[4]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[4])))\n-    output_asm_insn (\\\"cmn\\\\t%3, #%n4\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%3, %4\\\", operands);\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%d5\\\\t%0, %1\\\", operands);\n-  return \\\"rsb%D5\\\\t%0, %2, #0\\\";\n-\"\n+  \"@\n+   cmp\\\\t%3, %4\\;rsb%D5\\\\t%0, %2, #0\n+   cmn\\\\t%3, #%n4\\;rsb%D5\\\\t%0, %2, #0\n+   cmp\\\\t%3, %4\\;mov%d5\\\\t%0, %1\\;rsb%D5\\\\t%0, %2, #0\n+   cmn\\\\t%3, #%n4\\;mov%d5\\\\t%0, %1\\;rsb%D5\\\\t%0, %2, #0\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+ (set_attr \"length\" \"8,8,12,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")"}]}