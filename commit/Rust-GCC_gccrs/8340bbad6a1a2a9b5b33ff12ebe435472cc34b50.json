{"sha": "8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "node_id": "C_kwDOANBUbNoAKDgzNDBiYmFkNmExYTJhOWI1YjMzZmYxMmViZTQzNTQ3MmNjMzRiNTA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-06T11:51:13Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:57:54Z"}, "message": "RISC-V: Add vmulh C/C++ support\n\nCo-authored-by: kito-cheng <kito.cheng@sifive.com>\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.cc: Add flag for 'V' extension.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class vmulh): New class.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vmulh): Add vmulh\n\tAPI support.\n\t(vmulhu): Ditto.\n\t(vmulhsu): Ditto.\n\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_FULL_V_I_OPS):\n\tNew macro.\n\t(DEF_RVV_FULL_V_U_OPS): Ditto.\n\t(vint8mf8_t): Ditto.\n\t(vint8mf4_t): Ditto.\n\t(vint8mf2_t): Ditto.\n\t(vint8m1_t): Ditto.\n\t(vint8m2_t): Ditto.\n\t(vint8m4_t): Ditto.\n\t(vint8m8_t): Ditto.\n\t(vint16mf4_t): Ditto.\n\t(vint16mf2_t): Ditto.\n\t(vint16m1_t): Ditto.\n\t(vint16m2_t): Ditto.\n\t(vint16m4_t): Ditto.\n\t(vint16m8_t): Ditto.\n\t(vint32mf2_t): Ditto.\n\t(vint32m1_t): Ditto.\n\t(vint32m2_t): Ditto.\n\t(vint32m4_t): Ditto.\n\t(vint32m8_t): Ditto.\n\t(vint64m1_t): Ditto.\n\t(vint64m2_t): Ditto.\n\t(vint64m4_t): Ditto.\n\t(vint64m8_t): Ditto.\n\t(vuint8mf8_t): Ditto.\n\t(vuint8mf4_t): Ditto.\n\t(vuint8mf2_t): Ditto.\n\t(vuint8m1_t): Ditto.\n\t(vuint8m2_t): Ditto.\n\t(vuint8m4_t): Ditto.\n\t(vuint8m8_t): Ditto.\n\t(vuint16mf4_t): Ditto.\n\t(vuint16mf2_t): Ditto.\n\t(vuint16m1_t): Ditto.\n\t(vuint16m2_t): Ditto.\n\t(vuint16m4_t): Ditto.\n\t(vuint16m8_t): Ditto.\n\t(vuint32mf2_t): Ditto.\n\t(vuint32m1_t): Ditto.\n\t(vuint32m2_t): Ditto.\n\t(vuint32m4_t): Ditto.\n\t(vuint32m8_t): Ditto.\n\t(vuint64m1_t): Ditto.\n\t(vuint64m2_t): Ditto.\n\t(vuint64m4_t): Ditto.\n\t(vuint64m8_t): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_FULL_V_I_OPS): Ditto.\n\t(DEF_RVV_FULL_V_U_OPS): Ditto.\n\t(check_required_extensions): Add vmulh support.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t* config/riscv/riscv-vector-builtins.h (RVV_REQUIRE_FULL_V): Ditto.\n\t(enum rvv_base_type): Ditto.\n\t* config/riscv/riscv.opt: Add 'V' extension flag.\n\t* config/riscv/vector-iterators.md (su): New iterator.\n\t* config/riscv/vector.md (@pred_mulh<v_su><mode>): New pattern.\n\t(@pred_mulh<v_su><mode>_scalar): Ditto.\n\t(*pred_mulh<v_su><mode>_scalar): Ditto.\n\t(*pred_mulh<v_su><mode>_extended_scalar): Ditto.", "tree": {"sha": "c098d6d3afd89c1025582b7816475212fda26668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c098d6d3afd89c1025582b7816475212fda26668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74595dd5181813e6cca9464ec7ca04dccf029d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74595dd5181813e6cca9464ec7ca04dccf029d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74595dd5181813e6cca9464ec7ca04dccf029d4e"}], "stats": {"total": 347, "additions": 347, "deletions": 0}, "files": [{"sha": "ebc1ed7d7e4cc75a0e73d9eef1ce4de489421a62", "filename": "gcc/common/config/riscv/riscv-common.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -1177,6 +1177,7 @@ static const riscv_ext_flag_table_t riscv_ext_flag_table[] =\n   {\"f\", &gcc_options::x_target_flags, MASK_HARD_FLOAT},\n   {\"d\", &gcc_options::x_target_flags, MASK_DOUBLE_FLOAT},\n   {\"c\", &gcc_options::x_target_flags, MASK_RVC},\n+  {\"v\", &gcc_options::x_target_flags, MASK_FULL_V},\n   {\"v\", &gcc_options::x_target_flags, MASK_VECTOR},\n \n   {\"zicsr\",    &gcc_options::x_riscv_zi_subext, MASK_ZICSR},"}, {"sha": "43f815156d8523fd22a57897199a3545d7e60af3", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -218,6 +218,27 @@ class ext : public function_base\n   }\n };\n \n+/* Implements vmulh/vmulhu/vmulhsu.  */\n+template<int UNSPEC>\n+class vmulh : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_mulh_scalar (UNSPEC, e.vector_mode ()));\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_mulh (UNSPEC, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -256,6 +277,9 @@ static CONSTEXPR const binop<SMAX> vmax_obj;\n static CONSTEXPR const binop<UMIN> vminu_obj;\n static CONSTEXPR const binop<UMAX> vmaxu_obj;\n static CONSTEXPR const binop<MULT> vmul_obj;\n+static CONSTEXPR const vmulh<UNSPEC_VMULHS> vmulh_obj;\n+static CONSTEXPR const vmulh<UNSPEC_VMULHU> vmulhu_obj;\n+static CONSTEXPR const vmulh<UNSPEC_VMULHSU> vmulhsu_obj;\n static CONSTEXPR const binop<DIV> vdiv_obj;\n static CONSTEXPR const binop<MOD> vrem_obj;\n static CONSTEXPR const binop<UDIV> vdivu_obj;\n@@ -312,6 +336,9 @@ BASE (vmax)\n BASE (vminu)\n BASE (vmaxu)\n BASE (vmul)\n+BASE (vmulh)\n+BASE (vmulhu)\n+BASE (vmulhsu)\n BASE (vdiv)\n BASE (vrem)\n BASE (vdivu)"}, {"sha": "96cfdd85659acc1fe45af09464b52ff6f4d5368b", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -62,6 +62,9 @@ extern const function_base *const vmax;\n extern const function_base *const vminu;\n extern const function_base *const vmaxu;\n extern const function_base *const vmul;\n+extern const function_base *const vmulh;\n+extern const function_base *const vmulhu;\n+extern const function_base *const vmulhsu;\n extern const function_base *const vdiv;\n extern const function_base *const vrem;\n extern const function_base *const vdivu;"}, {"sha": "418268f1279f22940ec9c549cd8f4a6fae2f01a5", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -76,6 +76,9 @@ DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvv_ops)\n DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvv_ops)\n DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vmulh, alu, full_preds, full_v_i_vvv_ops)\n+DEF_RVV_FUNCTION (vmulhu, alu, full_preds, full_v_u_vvv_ops)\n+DEF_RVV_FUNCTION (vmulhsu, alu, full_preds, full_v_i_su_vvv_ops)\n DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvv_ops)\n@@ -94,6 +97,9 @@ DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vmulh, alu, full_preds, full_v_i_vvx_ops)\n+DEF_RVV_FUNCTION (vmulhu, alu, full_preds, full_v_u_vvx_ops)\n+DEF_RVV_FUNCTION (vmulhsu, alu, full_preds, full_v_i_su_vvx_ops)\n DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvx_ops)"}, {"sha": "0a562bd283fa533df0e89b60a55f3a544644f621", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -78,6 +78,20 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_OEXTU_OPS(TYPE, REQUIRE)\n #endif\n \n+/* Use \"DEF_RVV_FULL_V_I_OPS\" macro include all signed integer that require full\n+   'V' extension which will be iterated and registered as intrinsic functions.\n+ */\n+#ifndef DEF_RVV_FULL_V_I_OPS\n+#define DEF_RVV_FULL_V_I_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_FULL_V_U_OPS\" macro include all unsigned integer that require\n+   full 'V' extension which will be iterated and registered as intrinsic\n+   functions.  */\n+#ifndef DEF_RVV_FULL_V_U_OPS\n+#define DEF_RVV_FULL_V_U_OPS(TYPE, REQUIRE)\n+#endif\n+\n DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n@@ -204,6 +218,52 @@ DEF_RVV_OEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_OEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n \n+DEF_RVV_FULL_V_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint8mf4_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint8mf2_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint8m1_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint8m2_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint8m4_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint8m8_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint16mf2_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint16m1_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint16m2_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint16m4_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint16m8_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint32m1_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint32m2_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint32m4_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint32m8_t, 0)\n+DEF_RVV_FULL_V_I_OPS (vint64m1_t, RVV_REQUIRE_FULL_V)\n+DEF_RVV_FULL_V_I_OPS (vint64m2_t, RVV_REQUIRE_FULL_V)\n+DEF_RVV_FULL_V_I_OPS (vint64m4_t, RVV_REQUIRE_FULL_V)\n+DEF_RVV_FULL_V_I_OPS (vint64m8_t, RVV_REQUIRE_FULL_V)\n+\n+DEF_RVV_FULL_V_U_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint8mf4_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint8mf2_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint8m1_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint8m2_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint8m4_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint8m8_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint16mf2_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint16m1_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint16m2_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint16m4_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint16m8_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint32m1_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint32m2_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint32m4_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint32m8_t, 0)\n+DEF_RVV_FULL_V_U_OPS (vuint64m1_t, RVV_REQUIRE_FULL_V)\n+DEF_RVV_FULL_V_U_OPS (vuint64m2_t, RVV_REQUIRE_FULL_V)\n+DEF_RVV_FULL_V_U_OPS (vuint64m4_t, RVV_REQUIRE_FULL_V)\n+DEF_RVV_FULL_V_U_OPS (vuint64m8_t, RVV_REQUIRE_FULL_V)\n+\n #undef DEF_RVV_I_OPS\n #undef DEF_RVV_U_OPS\n #undef DEF_RVV_F_OPS\n@@ -214,3 +274,5 @@ DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n #undef DEF_RVV_WEXTU_OPS\n #undef DEF_RVV_QEXTU_OPS\n #undef DEF_RVV_OEXTU_OPS\n+#undef DEF_RVV_FULL_V_I_OPS\n+#undef DEF_RVV_FULL_V_U_OPS"}, {"sha": "d9b2c4775e8a1c95a75571a19eebef191d10e76a", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -133,6 +133,20 @@ static const rvv_type_info i_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all signed integer that SEW = 64 require full 'V' extension will be\n+   registered for intrinsic functions.  */\n+static const rvv_type_info full_v_i_ops[] = {\n+#define DEF_RVV_FULL_V_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all unsigned integer that SEW = 64 require full 'V' extension will\n+   be registered for intrinsic functions.  */\n+static const rvv_type_info full_v_u_ops[] = {\n+#define DEF_RVV_FULL_V_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of all signed integer will be registered for intrinsic functions.  */\n static const rvv_type_info u_ops[] = {\n #define DEF_RVV_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n@@ -292,11 +306,23 @@ static CONSTEXPR const rvv_arg_type_info vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (signed vector_type, unsigned\n+ * vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info su_vv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_unsigned_vector), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type, scalar_type) function.  */\n static CONSTEXPR const rvv_arg_type_info vx_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_scalar),\n      rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (signed vector_type, unsigned\n+ * scalar_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info su_vx_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_unsigned_scalar), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type, shift_type) function.  */\n static CONSTEXPR const rvv_arg_type_info shift_vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector),\n@@ -487,6 +513,30 @@ static CONSTEXPR const rvv_op_info u_vvv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info full_v_i_vvv_ops\n+  = {full_v_i_ops,\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info full_v_u_vvv_ops\n+  = {full_v_u_ops,\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (signed vector_type,\n+ * unsigned vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info full_v_i_su_vvv_ops\n+  = {full_v_i_ops,\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     su_vv_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, scalar_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info iu_vvx_ops\n@@ -511,6 +561,31 @@ static CONSTEXPR const rvv_op_info u_vvx_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vx_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, scalar_type)\n+ * function registration that require full 'V' extension. */\n+static CONSTEXPR const rvv_op_info full_v_i_vvx_ops\n+  = {full_v_i_ops,\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vx_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, scalar_type)\n+ * function registration that require full 'V' extension. */\n+static CONSTEXPR const rvv_op_info full_v_u_vvx_ops\n+  = {full_v_u_ops,\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vx_args /* Args */};\n+\n+/* A static operand information for vector_type func (signed vector_type,\n+ * unsigned scalar_type) function registration that require full 'V' extension.\n+ */\n+static CONSTEXPR const rvv_op_info full_v_i_su_vvx_ops\n+  = {full_v_i_ops,\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     su_vx_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, shift_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info iu_shift_vvv_ops\n@@ -816,6 +891,8 @@ check_required_extensions (const function_instance &instance)\n     riscv_isa_flags |= RVV_REQUIRE_ZVE64;\n   if (TARGET_64BIT)\n     riscv_isa_flags |= RVV_REQUIRE_RV64BIT;\n+  if (TARGET_FULL_V)\n+    riscv_isa_flags |= RVV_REQUIRE_FULL_V;\n \n   uint64_t missing_extensions = required_extensions & ~riscv_isa_flags;\n   if (missing_extensions != 0)\n@@ -940,12 +1017,28 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n tree\n rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n {\n+  /* If the builtin type is not registered means '-march' doesn't\n+     satisfy the require extension of the type. For example,\n+     vfloat32m1_t require floating-point extension. In this case,\n+     just return NULL_TREE.  */\n+  if (!builtin_types[type_idx].vector)\n+    return NULL_TREE;\n   switch (base_type)\n     {\n     case RVV_BASE_vector:\n       return builtin_types[type_idx].vector;\n     case RVV_BASE_scalar:\n       return builtin_types[type_idx].scalar;\n+    /* According to riscv-vector-builtins-types.def, the unsigned\n+       type is always the signed type + 1 (They have same SEW and LMUL).\n+       For example 'vuint8mf8_t' enum = 'vint8mf8_t' enum + 1.\n+       Note: We dont't allow type_idx to be unsigned type.  */\n+    case RVV_BASE_unsigned_vector:\n+      gcc_assert (!TYPE_UNSIGNED (builtin_types[type_idx].vector));\n+      return builtin_types[type_idx + 1].vector;\n+    case RVV_BASE_unsigned_scalar:\n+      gcc_assert (!TYPE_UNSIGNED (builtin_types[type_idx].scalar));\n+      return builtin_types[type_idx + 1].scalar;\n     case RVV_BASE_vector_ptr:\n       return builtin_types[type_idx].vector_ptr;\n     case RVV_BASE_scalar_ptr:"}, {"sha": "fc9d405784c75235041eaea68683e3e9e27c86fc", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -106,6 +106,7 @@ static const unsigned int CP_WRITE_CSR = 1U << 5;\n #define RVV_REQUIRE_ZVE64 (1 << 1)\t/* Require TARGET_MIN_VLEN > 32.  */\n #define RVV_REQUIRE_ELEN_FP_32 (1 << 2) /* Require FP ELEN >= 32.  */\n #define RVV_REQUIRE_ELEN_FP_64 (1 << 3) /* Require FP ELEN >= 64.  */\n+#define RVV_REQUIRE_FULL_V (1 << 4) /* Require Full 'V' extension.  */\n \n /* Enumerates the RVV operand types.  */\n enum operand_type_index\n@@ -139,6 +140,8 @@ enum rvv_base_type\n {\n   RVV_BASE_vector,\n   RVV_BASE_scalar,\n+  RVV_BASE_unsigned_vector,\n+  RVV_BASE_unsigned_scalar,\n   RVV_BASE_vector_ptr,\n   RVV_BASE_scalar_ptr,\n   RVV_BASE_scalar_const_ptr,"}, {"sha": "95535235354500ead9a66b74ed14206e5d3de9e0", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -154,6 +154,8 @@ Mask(RVE)\n \n Mask(VECTOR)\n \n+Mask(FULL_V)\n+\n mriscv-attribute\n Target Var(riscv_emit_attribute_p) Init(-1)\n Emit RISC-V ELF attribute."}, {"sha": "7f5de072215b191b4dd8a09d2ca3a1931dce10b0", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -28,6 +28,11 @@\n   ;; It's used to specify ordered/unorderd operation.\n   UNSPEC_ORDERED\n   UNSPEC_UNORDERED\n+\n+  ;; vmulh/vmulhu/vmulhsu\n+  UNSPEC_VMULHS\n+  UNSPEC_VMULHU\n+  UNSPEC_VMULHSU\n ])\n \n (define_mode_iterator V [\n@@ -55,6 +60,14 @@\n   (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VFULLI [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_FULL_V\") (VNx2DI \"TARGET_FULL_V\")\n+  (VNx4DI \"TARGET_FULL_V\") (VNx8DI \"TARGET_FULL_V\")\n+])\n+\n (define_mode_iterator VI_QHS [\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n@@ -66,6 +79,11 @@\n   (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VFULLI_D [\n+  (VNx1DI \"TARGET_FULL_V\") (VNx2DI \"TARGET_FULL_V\")\n+  (VNx4DI \"TARGET_FULL_V\") (VNx8DI \"TARGET_FULL_V\")\n+])\n+\n (define_mode_iterator VNX1_QHSD [\n   VNx1QI VNx1HI VNx1SI\n   (VNx1DI \"TARGET_MIN_VLEN > 32\")\n@@ -238,10 +256,14 @@\n \n (define_int_iterator ORDER [UNSPEC_ORDERED UNSPEC_UNORDERED])\n \n+(define_int_iterator VMULH [UNSPEC_VMULHS UNSPEC_VMULHU UNSPEC_VMULHSU])\n+\n (define_int_attr order [\n   (UNSPEC_ORDERED \"o\") (UNSPEC_UNORDERED \"u\")\n ])\n \n+(define_int_attr v_su [(UNSPEC_VMULHS \"\") (UNSPEC_VMULHU \"u\") (UNSPEC_VMULHSU \"su\")])\n+\n (define_code_iterator any_int_binop [plus minus and ior xor ashift ashiftrt lshiftrt\n   smax umax smin umin mult div udiv mod umod\n ])"}, {"sha": "40a0bbea71a74609479ff52b8f6f0d41620b2dbd", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340bbad6a1a2a9b5b33ff12ebe435472cc34b50/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=8340bbad6a1a2a9b5b33ff12ebe435472cc34b50", "patch": "@@ -1148,6 +1148,7 @@\n ;; - 11.5 Vector Bitwise Logical Instructions\n ;; - 11.6 Vector Single-Width Bit Shift Instructions\n ;; - 11.9 Vector Integer Min/Max Instructions\n+;; - 11.10 Vector Single-Width Integer Multiply Instructions\n ;; - 11.11 Vector Integer Divide Instructions\n ;; - 12.1 Vector Single-Width Saturating Add and Subtract\n ;; -------------------------------------------------------------------------------\n@@ -1775,6 +1776,133 @@\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Multiply High instructions.\n+(define_insn \"@pred_mulh<v_su><mode>\"\n+  [(set (match_operand:VFULLI 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VFULLI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VFULLI\n+\t    [(match_operand:VFULLI 3 \"register_operand\"  \" vr, vr\")\n+\t     (match_operand:VFULLI 4 \"register_operand\"  \" vr, vr\")] VMULH)\n+\t  (match_operand:VFULLI 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmulh<v_su>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vimul\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_mulh<v_su><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_QHS\n+\t    [(vec_duplicate:VI_QHS\n+\t       (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t     (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")] VMULH)\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\"  \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmulh<v_su>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vimul\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_mulh<v_su><mode>_scalar\"\n+  [(set (match_operand:VFULLI_D 0 \"register_operand\")\n+\t(if_then_else:VFULLI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VFULLI_D\n+\t    [(vec_duplicate:VFULLI_D\n+\t       (match_operand:<VEL> 4 \"reg_or_int_operand\"))\n+\t     (match_operand:VFULLI_D 3 \"register_operand\")] VMULH)\n+\t  (match_operand:VFULLI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_mulh<v_su><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_mulh<v_su><mode>_scalar\"\n+  [(set (match_operand:VFULLI_D 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VFULLI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"      \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"          \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"          \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"          \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VFULLI_D\n+\t    [(vec_duplicate:VFULLI_D\n+\t       (match_operand:<VEL> 4 \"register_operand\"   \"  r,  r\"))\n+\t     (match_operand:VFULLI_D 3 \"register_operand\"  \" vr, vr\")] VMULH)\n+\t  (match_operand:VFULLI_D 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmulh<v_su>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vimul\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_mulh<v_su><mode>_extended_scalar\"\n+  [(set (match_operand:VFULLI_D 0 \"register_operand\"          \"=vd, vr\")\n+\t(if_then_else:VFULLI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"         \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"             \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"             \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VFULLI_D\n+\t    [(vec_duplicate:VFULLI_D\n+\t       (sign_extend:<VEL>\n+\t         (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t     (match_operand:VFULLI_D 3 \"register_operand\"     \" vr, vr\")] VMULH)\n+\t  (match_operand:VFULLI_D 2 \"vector_merge_operand\"    \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmulh<v_su>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vimul\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated integer unary operations\n ;; -------------------------------------------------------------------------------"}]}