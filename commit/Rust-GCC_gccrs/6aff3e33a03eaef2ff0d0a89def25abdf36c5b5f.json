{"sha": "6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmZjNlMzNhMDNlYWVmMmZmMGQwYTg5ZGVmMjVhYmRmMzZjNWI1Zg==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-30T22:47:44Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-09-06T14:25:13Z"}, "message": "module: Load items if module is unloaded and not marked for strip", "tree": {"sha": "cf1535e1ca97f71f121b5e723d0f139c6e23d605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf1535e1ca97f71f121b5e723d0f139c6e23d605"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe5d6c32a959c4a2958459a70effa03dab51e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe5d6c32a959c4a2958459a70effa03dab51e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe5d6c32a959c4a2958459a70effa03dab51e0d"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "89b24c13d77e372b7d76a951707d827617185ab2", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "patch": "@@ -4027,14 +4027,15 @@ filename_from_path_attribute (std::vector<Attribute> &outer_attrs)\n   return path_attr.get_attr_input ().as_string ();\n }\n \n-std::string\n+void\n Module::get_filename ()\n {\n   rust_assert (kind == Module::ModuleKind::UNLOADED);\n+  rust_assert (module_file.empty ());\n \n   auto path_string = filename_from_path_attribute (get_outer_attrs ());\n   if (!path_string.empty ())\n-    return path_string;\n+    return;\n \n   // This corresponds to the path of the file 'including' the module. So the\n   // file that contains the 'mod <file>;' directive\n@@ -4080,38 +4081,41 @@ Module::get_filename ()\n     rust_error_at (locus, \"no candidate found for module %s\",\n \t\t   module_name.c_str ());\n \n-  return file_mod_found ? expected_file_path\n-\t\t\t: current_directory_name + expected_dir_path;\n+  module_file = file_mod_found ? expected_file_path\n+\t\t\t       : current_directory_name + expected_dir_path;\n }\n \n void\n Module::load_items ()\n {\n-  std::string mod_file = get_filename ();\n+  get_filename ();\n \n   // We will already have errored out appropriately in the get_filename ()\n   // method\n-  if (mod_file.empty ())\n+  if (module_file.empty ())\n     return;\n \n-  RAIIFile file_wrap (mod_file.c_str ());\n+  RAIIFile file_wrap (module_file.c_str ());\n   Linemap *linemap = Session::get_instance ().linemap;\n \n   if (file_wrap.get_raw () == nullptr)\n-    rust_fatal_error (Location (), \"cannot open module file %s: %m\",\n-\t\t      mod_file.c_str ());\n+    {\n+      rust_error_at (Location (), \"cannot open module file %s: %m\",\n+\t\t     module_file.c_str ());\n+      return;\n+    }\n \n-  rust_debug (\"Attempting to parse file %s\", mod_file.c_str ());\n+  rust_debug (\"Attempting to parse file %s\", module_file.c_str ());\n \n-  Lexer lex (mod_file.c_str (), std::move (file_wrap), linemap);\n+  Lexer lex (module_file.c_str (), std::move (file_wrap), linemap);\n   Parser<Lexer> parser (std::move (lex));\n \n-  auto items = parser.parse_items ();\n+  auto parsed_items = parser.parse_items ();\n \n   for (const auto &error : parser.get_errors ())\n     error.emit_error ();\n \n-  items = std::move(items);\n+  items = std::move (parsed_items);\n   kind = ModuleKind::LOADED;\n }\n "}, {"sha": "4886992c1670650fc0f21315204a285796a9aeaf", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "patch": "@@ -982,6 +982,10 @@ class Module : public VisItem\n   // bool has_items;\n   std::vector<std::unique_ptr<Item>> items;\n \n+  // Filename the module refers to. Empty string on LOADED modules or if an\n+  // error occured when dealing with UNLOADED modules\n+  std::string module_file;\n+\n   void clone_items (const std::vector<std::unique_ptr<Item>> &other_items)\n   {\n     items.reserve (other_items.size ());\n@@ -1051,8 +1055,9 @@ class Module : public VisItem\n     return *this;\n   }\n \n-  // Search for the filename associated with an external module\n-  std::string get_filename ();\n+  // Search for the filename associated with an external module, storing it in\n+  // module_file\n+  void get_filename ();\n   // Load the items contained in an external module\n   void load_items ();\n "}, {"sha": "e531b21d09f24a7ad75ea43b7dd9cb8d12d26ef6", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=6aff3e33a03eaef2ff0d0a89def25abdf36c5b5f", "patch": "@@ -1896,11 +1896,14 @@ class AttrVisitor : public AST::ASTVisitor\n \t    return;\n \t  }\n       }\n-    else\n+\n+    // Parse the module's items if they haven't been expanded and the file\n+    // should be parsed (i.e isn't hidden behind an untrue or impossible cfg\n+    // directive)\n+    if (!module.is_marked_for_strip ()\n+\t&& module.get_kind () == AST::Module::ModuleKind::UNLOADED)\n       {\n-\tstd::string mod_file = module.get_filename ();\n-\tif (!mod_file.empty ())\n-\t  rust_debug (\"Module filename found: %s\", mod_file.c_str ());\n+\tmodule.load_items ();\n       }\n \n     // strip items if required"}]}