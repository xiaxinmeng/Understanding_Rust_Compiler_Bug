{"sha": "ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2N2ZlNzFlZDU5ZTk4NjBlYWZiMmM5MWI2ZjRiODdkMzY2ZThkNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-08-04T16:21:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-08-04T16:21:02Z"}, "message": "gcc.c (cc1_options): Pass output file as auxbase when appropriate.\n\n\t* gcc.c (cc1_options): Pass output file as auxbase when\n\tappropriate.\n\t* profile.c (init_branch_prob): FILENAME has already had ending\n\tstripped.\n\t* final.c (end_final): Likewise.\n\t* toplev.c (aux_base_name): New global.\n\t(compile_file): Pass aux_base_name to init init_branch_prob and\n\tend_final.\n\t(independent_decode_option, case 'a'): New auxinfo options.\n\t(case 'd'): Protect against mising basename.\n\t(do_compile): Initialize aux_base_name.\n\t* toplev.h (aux_base_name): New global.\n\t* doc/invoke.texi: Adjust documentation.\n\nFrom-SVN: r56025", "tree": {"sha": "07c681d0f4e663e8dd4fd57fe86b3493b6eabc0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c681d0f4e663e8dd4fd57fe86b3493b6eabc0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/comments", "author": null, "committer": null, "parents": [{"sha": "b23c054d0b5ccb227380655d58e7c6a4644491c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23c054d0b5ccb227380655d58e7c6a4644491c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23c054d0b5ccb227380655d58e7c6a4644491c2"}], "stats": {"total": 107, "additions": 87, "deletions": 20}, "files": [{"sha": "135fac49569d32f7c27aacf6d4e9b1f9f57ec639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -1,3 +1,19 @@\n+2002-08-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.c (cc1_options): Pass output file as auxbase when\n+\tappropriate.\n+\t* profile.c (init_branch_prob): FILENAME has already had ending\n+\tstripped.\n+\t* final.c (end_final): Likewise.\n+\t* toplev.c (aux_base_name): New global.\n+\t(compile_file): Pass aux_base_name to init init_branch_prob and\n+\tend_final.\n+\t(independent_decode_option, case 'a'): New auxinfo options.\n+\t(case 'd'): Protect against mising basename.\n+\t(do_compile): Initialize aux_base_name.\n+\t* toplev.h (aux_base_name): New global.\n+\t* doc/invoke.texi: Adjust documentation.\n+\n 2002-08-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/i386/i386.c (x86_field_alignment): Remove duplicate test"}, {"sha": "2bd64500a8a3043a462587281ca4adcfcaa3e5b0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -2818,11 +2818,16 @@ allocation when it finishes.\n \n @item -fprofile-arcs\n @opindex fprofile-arcs\n-Instrument @dfn{arcs} during compilation to generate coverage data\n-or for profile-directed block ordering.  During execution the program\n+Instrument @dfn{arcs} during compilation to generate coverage data or\n+for profile-directed block ordering.  During execution the program\n records how many times each branch is executed and how many times it is\n taken.  When the compiled program exits it saves this data to a file\n-called @file{@var{sourcename}.da} for each source file.\n+called @file{@var{auxname}.da} for each source file.  @var{auxname} is\n+generated from the name of the output file, if explicitly specified and\n+it is not the final executable, otherwise it is the basename of the\n+source file. In both cases any suffix is removed (e.g.  @file{foo.da}\n+for input file @file{dir/foo.c}, or @file{dir/foo.da} for output file\n+specified as @option{-o dir/foo.o}).\n \n For profile-directed block ordering, compile the program with\n @option{-fprofile-arcs} plus optimization and code generation options,\n@@ -2863,29 +2868,29 @@ information to estimate all branch probabilities.\n @item -ftest-coverage\n @opindex ftest-coverage\n Create data files for the @code{gcov} code-coverage utility\n-(@pxref{Gcov,, @code{gcov}: a GCC Test Coverage Program}).\n-The data file names begin with the name of your source file:\n+(@pxref{Gcov,, @code{gcov}: a GCC Test Coverage Program}).  See\n+@option{-fprofile-arcs} option above for a description of @var{auxname}.\n \n @table @gcctabopt\n-@item @var{sourcename}.bb\n+@item @var{auxname}.bb\n A mapping from basic blocks to line numbers, which @code{gcov} uses to\n associate basic block execution counts with line numbers.\n \n-@item @var{sourcename}.bbg\n+@item @var{auxname}.bbg\n A list of all arcs in the program flow graph.  This allows @code{gcov}\n to reconstruct the program flow graph, so that it can compute all basic\n block and arc execution counts from the information in the\n-@code{@var{sourcename}.da} file.\n+@file{@var{auxname}.da} file.\n @end table\n \n Use @option{-ftest-coverage} with @option{-fprofile-arcs}; the latter\n option adds instrumentation to the program, which then writes\n execution counts to another data file:\n \n @table @gcctabopt\n-@item @var{sourcename}.da\n+@item @var{auxname}.da\n Runtime arc execution counts, used in conjunction with the arc\n-information in the file @code{@var{sourcename}.bbg}.\n+information in the file @file{@var{auxname}.bbg}.\n @end table\n \n Coverage data will map better to the source files if\n@@ -2896,8 +2901,12 @@ Coverage data will map better to the source files if\n Says to make debugging dumps during compilation at times specified by\n @var{letters}.  This is used for debugging the compiler.  The file names\n for most of the dumps are made by appending a pass number and a word to\n-the source file name (e.g.  @file{foo.c.00.rtl} or @file{foo.c.01.sibling}).\n-Here are the possible letters for use in @var{letters}, and their meanings:\n+the @var{dumpname}. @var{dumpname} is generated from the name of the\n+output file, if explicitly specified and it is not an executable,\n+otherwise it is the basename of the source file. In both cases any\n+suffix is removed (e.g.  @file{foo.00.rtl} or @file{foo.01.sibling}).\n+Here are the possible letters for use in @var{letters}, and their\n+meanings:\n \n @table @samp\n @item A"}, {"sha": "1b009c6752eb6220c5c29a9e7c3d833f6e3d3899", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -311,7 +311,6 @@ end_final (filename)\n \tstrcpy (da_filename, cwd);\n \tstrcat (da_filename, \"/\");\n \tstrcat (da_filename, filename);\n-\tstrip_off_ending (da_filename, da_filename_len - 3);\n \tstrcat (da_filename, \".da\");\n \tda_filename_len = strlen (da_filename);\n \tstring_cst = build_string (da_filename_len + 1, da_filename);"}, {"sha": "5e1d3caac5d4401ccffdb55c3b56ab831997e195", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -697,6 +697,7 @@ static const char *cpp_debug_options = \"%{d*}\";\n static const char *cc1_options =\n \"%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n  %1 %{!Q:-quiet} -dumpbase %B %{d*} %{m*} %{a*}\\\n+ -auxbase%{c|S:%{o*:-strip%*}%{!o*: %b}}%{!c:%{!S: %b}}\\\n  %{g*} %{O*} %{W*&pedantic*} %{w} %{std*} %{ansi}\\\n  %{v:-version} %{pg:-p} %{p} %{f*} %{undef}\\\n  %{Qn:-fno-ident} %{--help:--help}\\"}, {"sha": "36ce8a359c7e69d5994be2c776cdeb8fe528bad2", "filename": "gcc/profile.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -1196,15 +1196,13 @@ init_branch_prob (filename)\n       /* Open an output file for the basic block/line number map.  */\n       data_file = (char *) alloca (len + 4);\n       strcpy (data_file, filename);\n-      strip_off_ending (data_file, len);\n       strcat (data_file, \".bb\");\n       if ((bb_file = fopen (data_file, \"wb\")) == 0)\n \tfatal_io_error (\"can't open %s\", data_file);\n \n       /* Open an output file for the program flow graph.  */\n       bbg_file_name = (char *) alloca (len + 5);\n       strcpy (bbg_file_name, filename);\n-      strip_off_ending (bbg_file_name, len);\n       strcat (bbg_file_name, \".bbg\");\n       if ((bbg_file = fopen (bbg_file_name, \"wb\")) == 0)\n \tfatal_io_error (\"can't open %s\", bbg_file_name);\n@@ -1221,7 +1219,6 @@ init_branch_prob (filename)\n       len = strlen (filename);\n       da_file_name = (char *) alloca (len + 4);\n       strcpy (da_file_name, filename);\n-      strip_off_ending (da_file_name, len);\n       strcat (da_file_name, \".da\");\n       if ((da_file = fopen (da_file_name, \"rb\")) == 0)\n \twarning (\"file %s not found, execution counts assumed to be zero\","}, {"sha": "719b48d3df961bcbc03206b61e46a723f6c0e4a9", "filename": "gcc/toplev.c", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -168,6 +168,10 @@ int input_file_stack_tick;\n \n const char *dump_base_name;\n \n+/* Name to use as a base for auxiliary output files.  */\n+\n+const char *aux_base_name;\n+\n /* Format to use to print dumpfile index value */\n #ifndef DUMPFILE_FORMAT\n #define DUMPFILE_FORMAT \".%02d.\"\n@@ -2117,7 +2121,7 @@ compile_file ()\n   /* Initialize yet another pass.  */\n \n   init_final (main_input_filename);\n-  init_branch_prob (dump_base_name);\n+  init_branch_prob (aux_base_name);\n \n   timevar_push (TV_PARSE);\n \n@@ -2190,7 +2194,7 @@ compile_file ()\n \n   dw2_output_indirect_constants ();\n \n-  end_final (dump_base_name);\n+  end_final (aux_base_name);\n \n   if (profile_arc_flag || flag_test_coverage || flag_branch_probabilities)\n     {\n@@ -4297,7 +4301,9 @@ independent_decode_option (argc, argv)\n \t  if (argc == 1)\n \t    return 0;\n \n-\t  dump_base_name = argv[1];\n+\t  if (argv[1][0])\n+\t    dump_base_name = argv[1];\n+\t  \n \t  return 2;\n \t}\n       else\n@@ -4370,6 +4376,30 @@ independent_decode_option (argc, argv)\n \t  else\n \t    return 0;\n \t}\n+      else if (!strcmp (arg, \"auxbase\"))\n+\t{\n+\t  if (argc == 1)\n+\t    return 0;\n+\n+\t  if (argv[1][0])\n+\t    aux_base_name = argv[1];\n+\t  \n+\t  return 2;\n+\t}\n+      else if (!strcmp (arg, \"auxbase-strip\"))\n+\t{\n+\t  if (argc == 1)\n+\t    return 0;\n+\n+\t  if (argv[1][0])\n+\t    {\n+\t      strip_off_ending (argv[1], strlen (argv[1]));\n+\t      if (argv[1][0])\n+\t\taux_base_name = argv[1];\n+\t    }\n+\t  \n+\t  return 2;\n+\t}\n       else\n \treturn 0;\n       break;\n@@ -5170,7 +5200,7 @@ lang_dependent_init (name)\n {\n   if (dump_base_name == 0)\n     dump_base_name = name ? name : \"gccdump\";\n-\n+  \n   /* Front-end initialization.  This hook can assume that GC,\n      identifier hashes etc. are set up, but debug initialization is\n      not done yet.  This routine must return the original filename\n@@ -5281,6 +5311,19 @@ do_compile (no_backend)\n   /* The bulk of command line switch processing.  */\n   process_options ();\n \n+  if (aux_base_name)\n+    /*NOP*/;\n+  else if (filename)\n+    {\n+      char *name = xstrdup (lbasename (filename));\n+      \n+      aux_base_name = name;\n+      strip_off_ending (name, strlen (name));\n+    }\n+  \n+  else\n+    aux_base_name = \"gccaux\";\n+\n   /* We cannot start timing until after options are processed since that\n      says if we run timers or not.  */\n   init_timevar ();"}, {"sha": "2dab2447a8571531288b70fdaf5bb0bfd8de5ad6", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=ea67fe71ed59e9860eafb2c91b6f4b87d366e8d6", "patch": "@@ -108,6 +108,8 @@ extern void check_global_declarations   PARAMS ((union tree_node **, int));\n \n extern const char *progname;\n extern const char *dump_base_name;\n+extern const char *aux_base_name;\n+\n extern int target_flags_explicit;\n \n /* The hashtable, so that the C front ends can pass it to cpplib.  */"}]}