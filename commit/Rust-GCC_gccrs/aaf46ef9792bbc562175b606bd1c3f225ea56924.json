{"sha": "aaf46ef9792bbc562175b606bd1c3f225ea56924", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmNDZlZjk3OTJiYmM1NjIxNzViNjA2YmQxYzNmMjI1ZWE1NjkyNA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2006-01-26T02:53:01Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-01-26T02:53:01Z"}, "message": "re PR middle-end/25886 (up to 256 tree codes for Objective-C++)\n\n\n\t* tree.h (TREE_RANGE_CHECK): Fix range predicate.\n\t(TREE_BLOCK): Add call to EXPR_CHECK.\n\n\n\tPR 25886\n\t* tree-dump.c (dequeue_and_dump): Handle OMP_CLAUSE.\n\t* tree-pretty-print.c (dump_omp_clause): Extract from ...\n\t(dump_omp_clauses): ... here.\n\t(dump_generic_node): Handle OMP_CLAUSE.\n\t* tree.c (omp_clause_num_ops): New.\n\t(omp_clause_code_name): New.\n\t(tree_code_size): Handle OMP_CLAUSE.\n\t(tree_size): Likewise.\n\t(make_node): Document handling of OMP_CLAUSE.\n\t(tree_node_structure): Handle OMP_CLAUSE.\n\t(omp_clause_check_failed): New.\n\t(omp_clause_range_check_failed): New.\n\t(omp_clause_operand_check_failed): New.\n\t(build_omp_clause): New.\n\t(walk_tree): Adjust handling of OMP_CLAUSE_* nodes.\n\t* tree.h (enum omp_clause_code): Declare.\n\t(OMP_CLAUSE_SUBCODE): Define.\n\t(OMP_CLAUSE_RANGE_CHECK): Define.\n\t(OMP_CLAUSE_ELT_CHECK): Define.\n\t(omp_clause_check_failed): Declare.\n\t(omp_clause_operand_check_failed): Declare.\n\t(omp_clause_range_check_failed): Declare.\n\t(OMP_CLAUSE_CHAIN): Do not use TREE_RANGE_CHECK.\n\t(OMP_CLAUSE_OPERAND): Use OMP_CLAUSE_RANGE_CHECK.\n\t(OMP_CLAUSE_PRIVATE_DEBUG): Use OMP_CLAUSE_SUBCODE_CHECK.\n\t(OMP_CLAUSE_LASTPRIVATE): Likewise.\n\t(OMP_CLAUSE_IF_EXPR): Likewise.\n\t(OMP_CLAUSE_NUM_THREADS_EXPR): Likewise.\n\t(OMP_CLAUSE_SCHEDULE_CHUNK_EXPR): Likewise.\n\t(OMP_CLAUSE_REDUCTION_CODE): Likewise.\n\t(OMP_CLAUSE_REDUCTION_INIT): Likewise.\n\t(OMP_CLAUSE_REDUCTION_MERGE): Likewise.\n\t(OMP_CLAUSE_REDUCTION_PLACEHOLDER): Likewise.\n\tUse tree_node.omp_clause.subcode instead of TREE_COMPLEXITY.\n\t(OMP_CLAUSE_SCHEDULE_KIND): Likewise.\n\t(OMP_CLAUSE_DEFAULT_KIND): Likewise.\n\t(OMP_CLAUSE_CODE): Define.\n\t(OMP_CLAUSE_SET_CODE): Define.\n\t(OMP_CLAUSE_CODE): Define.\n\t(OMP_CLAUSE_OPERAND): Define.\n\t(struct tree_omp_clause): Declare.\n\t(union tree_node): Add field 'omp_clause'.\n\t* treestruct.def (TS_OMP_CLAUSE): Define.\n\t* tree.def (OMP_CLAUSE_PRIVATE, OMP_CLAUSE_SHARED\n\tOMP_CLAUSE_FIRSTPRIVATE, OMP_CLAUSE_LASTPRIVATE,\n\tOMP_CLAUSE_REDUCTION, OMP_CLAUSE_COPYIN,\n\tOMP_CLAUSE_COPYPRIVATE, OMP_CLAUSE_IF,\n\tOMP_CLAUSE_NUM_THREADS, OMP_CLAUSE_SCHEDULE,\n\tOMP_CLAUSE_NOWAIT, OMP_CLAUSE_ORDERED, OMP_CLAUSE_DEFAULT): Remove.\n\t(OMP_CLAUSE): Define.\n\t* print-tree.c (print_node): Handle OMP_CLAUSE.\n\t* omp-low.c: Adapt all uses of OMP_CLAUSE_* nodes.\n\t* c-typeck.c: Likewise.\n\t* gimplify.c: Likewise.\n\t* c-omp.c: Likewise.\n\t* tree-nested.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* c-parser.c: Likewise.\n\t* gimple-low.c (lower_omp_directive): Do not set TREE_BLOCK on\n\tclauses.\n\nFrom-SVN: r110243", "tree": {"sha": "6b35ae8b0d86fdf04a2e7d85a967d4e8e0d276fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b35ae8b0d86fdf04a2e7d85a967d4e8e0d276fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf46ef9792bbc562175b606bd1c3f225ea56924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf46ef9792bbc562175b606bd1c3f225ea56924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf46ef9792bbc562175b606bd1c3f225ea56924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf46ef9792bbc562175b606bd1c3f225ea56924/comments", "author": null, "committer": null, "parents": [{"sha": "d89b36e1a2179df76edf089cc2a11f5f3409cb72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89b36e1a2179df76edf089cc2a11f5f3409cb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89b36e1a2179df76edf089cc2a11f5f3409cb72"}], "stats": {"total": 870, "additions": 591, "deletions": 279}, "files": [{"sha": "80c94b3cc86096923ef987d9f23cbae3ddfdae39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -1,3 +1,72 @@\n+2006-01-25  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree.h (TREE_RANGE_CHECK): Fix range predicate.\n+\t(TREE_BLOCK): Add call to EXPR_CHECK.\n+\n+2006-01-25  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 25886\n+\t* tree-dump.c (dequeue_and_dump): Handle OMP_CLAUSE.\n+\t* tree-pretty-print.c (dump_omp_clause): Extract from ...\n+\t(dump_omp_clauses): ... here.\n+\t(dump_generic_node): Handle OMP_CLAUSE.\n+\t* tree.c (omp_clause_num_ops): New.\n+\t(omp_clause_code_name): New.\n+\t(tree_code_size): Handle OMP_CLAUSE.\n+\t(tree_size): Likewise.\n+\t(make_node): Document handling of OMP_CLAUSE.\n+\t(tree_node_structure): Handle OMP_CLAUSE.\n+\t(omp_clause_check_failed): New.\n+\t(omp_clause_range_check_failed): New.\n+\t(omp_clause_operand_check_failed): New.\n+\t(build_omp_clause): New.\n+\t(walk_tree): Adjust handling of OMP_CLAUSE_* nodes.\n+\t* tree.h (enum omp_clause_code): Declare.\n+\t(OMP_CLAUSE_SUBCODE): Define.\n+\t(OMP_CLAUSE_RANGE_CHECK): Define.\n+\t(OMP_CLAUSE_ELT_CHECK): Define.\n+\t(omp_clause_check_failed): Declare.\n+\t(omp_clause_operand_check_failed): Declare.\n+\t(omp_clause_range_check_failed): Declare.\n+\t(OMP_CLAUSE_CHAIN): Do not use TREE_RANGE_CHECK.\n+\t(OMP_CLAUSE_OPERAND): Use OMP_CLAUSE_RANGE_CHECK.\n+\t(OMP_CLAUSE_PRIVATE_DEBUG): Use OMP_CLAUSE_SUBCODE_CHECK.\n+\t(OMP_CLAUSE_LASTPRIVATE): Likewise.\n+\t(OMP_CLAUSE_IF_EXPR): Likewise.\n+\t(OMP_CLAUSE_NUM_THREADS_EXPR): Likewise.\n+\t(OMP_CLAUSE_SCHEDULE_CHUNK_EXPR): Likewise.\n+\t(OMP_CLAUSE_REDUCTION_CODE): Likewise.\n+\t(OMP_CLAUSE_REDUCTION_INIT): Likewise.\n+\t(OMP_CLAUSE_REDUCTION_MERGE): Likewise.\n+\t(OMP_CLAUSE_REDUCTION_PLACEHOLDER): Likewise.\n+\tUse tree_node.omp_clause.subcode instead of TREE_COMPLEXITY.\n+\t(OMP_CLAUSE_SCHEDULE_KIND): Likewise.\n+\t(OMP_CLAUSE_DEFAULT_KIND): Likewise.\n+\t(OMP_CLAUSE_CODE): Define.\n+\t(OMP_CLAUSE_SET_CODE): Define.\n+\t(OMP_CLAUSE_CODE): Define.\n+\t(OMP_CLAUSE_OPERAND): Define.\n+\t(struct tree_omp_clause): Declare.\n+\t(union tree_node): Add field 'omp_clause'.\n+\t* treestruct.def (TS_OMP_CLAUSE): Define.\n+\t* tree.def (OMP_CLAUSE_PRIVATE, OMP_CLAUSE_SHARED\n+\tOMP_CLAUSE_FIRSTPRIVATE, OMP_CLAUSE_LASTPRIVATE,\n+\tOMP_CLAUSE_REDUCTION, OMP_CLAUSE_COPYIN,\n+\tOMP_CLAUSE_COPYPRIVATE, OMP_CLAUSE_IF,\n+\tOMP_CLAUSE_NUM_THREADS, OMP_CLAUSE_SCHEDULE,\n+\tOMP_CLAUSE_NOWAIT, OMP_CLAUSE_ORDERED, OMP_CLAUSE_DEFAULT): Remove.\n+\t(OMP_CLAUSE): Define.\n+\t* print-tree.c (print_node): Handle OMP_CLAUSE.\n+\t* omp-low.c: Adapt all uses of OMP_CLAUSE_* nodes.\n+\t* c-typeck.c: Likewise.\n+\t* gimplify.c: Likewise.\n+\t* c-omp.c: Likewise.\n+\t* tree-nested.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* c-parser.c: Likewise.\n+\t* gimple-low.c (lower_omp_directive): Do not set TREE_BLOCK on\n+\tclauses.\n+\n 2006-01-25  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/25703"}, {"sha": "ac107e6773743c8b0f7408f24ce8ac942251f626", "filename": "gcc/c-omp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -382,13 +382,13 @@ c_split_parallel_clauses (tree clauses, tree *par_clauses, tree *ws_clauses)\n   tree next;\n \n   *par_clauses = NULL;\n-  *ws_clauses = make_node (OMP_CLAUSE_NOWAIT);\n+  *ws_clauses = build_omp_clause (OMP_CLAUSE_NOWAIT);\n \n   for (; clauses ; clauses = next)\n     {\n       next = OMP_CLAUSE_CHAIN (clauses);\n \n-      switch (TREE_CODE (clauses))\n+      switch (OMP_CLAUSE_CODE (clauses))\n \t{\n \tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_SHARED:"}, {"sha": "b5722738ac90c09ae15b2e5110645c0e6ca80ec7", "filename": "gcc/c-parser.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -6625,7 +6625,7 @@ check_no_duplicate_clause (tree clauses, enum tree_code code, const char *name)\n   tree c;\n \n   for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n-    if (TREE_CODE (c) == code)\n+    if (OMP_CLAUSE_CODE (c) == code)\n       {\n \terror (\"too many %qs clauses\", name);\n \tbreak;\n@@ -6644,7 +6644,8 @@ check_no_duplicate_clause (tree clauses, enum tree_code code, const char *name)\n    return the list created.  */\n \n static tree\n-c_parser_omp_variable_list (c_parser *parser, enum tree_code kind, tree list)\n+c_parser_omp_variable_list (c_parser *parser, enum omp_clause_code kind,\n+                            tree list)\n {\n   if (c_parser_next_token_is_not (parser, CPP_NAME)\n       || c_parser_peek_token (parser)->id_kind != C_ID_ID)\n@@ -6662,7 +6663,7 @@ c_parser_omp_variable_list (c_parser *parser, enum tree_code kind, tree list)\n \t;\n       else if (kind != 0)\n \t{\n-\t  tree u = make_node (kind);\n+\t  tree u = build_omp_clause (kind);\n \t  OMP_CLAUSE_DECL (u) = t;\n \t  OMP_CLAUSE_CHAIN (u) = list;\n \t  list = u;\n@@ -6759,7 +6760,7 @@ c_parser_omp_clause_default (c_parser *parser, tree list)\n     return list;\n \n   check_no_duplicate_clause (list, OMP_CLAUSE_DEFAULT, \"default\");\n-  c = make_node (OMP_CLAUSE_DEFAULT);\n+  c = build_omp_clause (OMP_CLAUSE_DEFAULT);\n   OMP_CLAUSE_CHAIN (c) = list;\n   OMP_CLAUSE_DEFAULT_KIND (c) = kind;\n \n@@ -6788,7 +6789,7 @@ c_parser_omp_clause_if (c_parser *parser, tree list)\n \n       check_no_duplicate_clause (list, OMP_CLAUSE_IF, \"if\");\n \n-      c = make_node (OMP_CLAUSE_IF);\n+      c = build_omp_clause (OMP_CLAUSE_IF);\n       OMP_CLAUSE_IF_EXPR (c) = t;\n       OMP_CLAUSE_CHAIN (c) = list;\n       list = c;\n@@ -6818,7 +6819,7 @@ c_parser_omp_clause_nowait (c_parser *parser ATTRIBUTE_UNUSED, tree list)\n \n   check_no_duplicate_clause (list, OMP_CLAUSE_NOWAIT, \"nowait\");\n \n-  c = make_node (OMP_CLAUSE_NOWAIT);\n+  c = build_omp_clause (OMP_CLAUSE_NOWAIT);\n   OMP_CLAUSE_CHAIN (c) = list;\n   return c;\n }\n@@ -6852,7 +6853,7 @@ c_parser_omp_clause_num_threads (c_parser *parser, tree list)\n \n       check_no_duplicate_clause (list, OMP_CLAUSE_NUM_THREADS, \"num_threads\");\n \n-      c = make_node (OMP_CLAUSE_NUM_THREADS);\n+      c = build_omp_clause (OMP_CLAUSE_NUM_THREADS);\n       OMP_CLAUSE_NUM_THREADS_EXPR (c) = t;\n       OMP_CLAUSE_CHAIN (c) = list;\n       list = c;\n@@ -6871,7 +6872,7 @@ c_parser_omp_clause_ordered (c_parser *parser ATTRIBUTE_UNUSED, tree list)\n \n   check_no_duplicate_clause (list, OMP_CLAUSE_ORDERED, \"ordered\");\n \n-  c = make_node (OMP_CLAUSE_ORDERED);\n+  c = build_omp_clause (OMP_CLAUSE_ORDERED);\n   OMP_CLAUSE_CHAIN (c) = list;\n   return c;\n }\n@@ -6963,7 +6964,7 @@ c_parser_omp_clause_schedule (c_parser *parser, tree list)\n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return list;\n \n-  c = make_node (OMP_CLAUSE_SCHEDULE);\n+  c = build_omp_clause (OMP_CLAUSE_SCHEDULE);\n \n   if (c_parser_next_token_is (parser, CPP_NAME))\n     {"}, {"sha": "e1f7845814633a45a1a11c0a5a438519b910aeb7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -8482,7 +8482,7 @@ c_finish_omp_clauses (tree clauses)\n       bool need_complete = false;\n       bool need_implicitly_determined = false;\n \n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_SHARED:\n \t  name = \"shared\";"}, {"sha": "a298cbb58decd96c2bf4931d0a17f58e850037b9", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -166,9 +166,6 @@ lower_omp_directive (tree_stmt_iterator *tsi, struct lower_data *data)\n \t   ? OMP_CLAUSES (stmt)\n \t   : NULL_TREE;\n \n-  for (; clause; clause = OMP_CLAUSE_CHAIN (clause))\n-    TREE_BLOCK (clause) = TREE_BLOCK (stmt);\n-\n   lower_stmt_body (OMP_BODY (stmt), data);\n   tsi_link_before (tsi, stmt, TSI_SAME_STMT);\n   tsi_link_before (tsi, OMP_BODY (stmt), TSI_SAME_STMT);"}, {"sha": "cb1b95eebaa008ef3ff4daf89ae45288644709e9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -4443,7 +4443,7 @@ gimplify_scan_omp_clauses (tree *list_p, tree *pre_p, bool in_parallel)\n       unsigned int flags;\n       tree decl;\n \n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_PRIVATE:\n \t  flags = GOVD_PRIVATE | GOVD_EXPLICIT;\n@@ -4504,7 +4504,7 @@ gimplify_scan_omp_clauses (tree *list_p, tree *pre_p, bool in_parallel)\n \tcase OMP_CLAUSE_SCHEDULE:\n \tcase OMP_CLAUSE_IF:\n \tcase OMP_CLAUSE_NUM_THREADS:\n-\t  gs = gimplify_expr (&TREE_OPERAND (c, 0), pre_p, NULL,\n+\t  gs = gimplify_expr (&OMP_CLAUSE_OPERAND (c, 0), pre_p, NULL,\n \t\t\t      is_gimple_val, fb_rvalue);\n \t  if (gs == GS_ERROR)\n \t    remove = true;\n@@ -4540,7 +4540,7 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n   tree *list_p = (tree *) data;\n   tree decl = (tree) n->key;\n   unsigned flags = n->value;\n-  enum tree_code code;\n+  enum omp_clause_code code;\n   tree clause;\n   bool private_debug;\n \n@@ -4572,7 +4572,8 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n   else\n     gcc_unreachable ();\n \n-  clause = build1 (code, void_type_node, decl);\n+  clause = build_omp_clause (code);\n+  OMP_CLAUSE_DECL (clause) = decl;\n   OMP_CLAUSE_CHAIN (clause) = *list_p;\n   if (private_debug)\n     OMP_CLAUSE_PRIVATE_DEBUG (clause) = 1;\n@@ -4592,7 +4593,7 @@ gimplify_adjust_omp_clauses (tree *list_p)\n       splay_tree_node n;\n       bool remove = false;\n \n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_SHARED:\n@@ -4602,14 +4603,14 @@ gimplify_adjust_omp_clauses (tree *list_p)\n \t  remove = !(n->value & GOVD_SEEN);\n \t  if (! remove)\n \t    {\n-\t      bool shared = TREE_CODE (c) == OMP_CLAUSE_SHARED;\n+\t      bool shared = OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED;\n \t      if ((n->value & GOVD_DEBUG_PRIVATE)\n \t\t  || lang_hooks.decls.omp_private_debug_clause (decl, shared))\n \t\t{\n \t\t  gcc_assert ((n->value & GOVD_DEBUG_PRIVATE) == 0\n \t\t\t      || ((n->value & GOVD_DATA_SHARE_CLASS)\n \t\t\t\t  == GOVD_PRIVATE));\n-\t\t  TREE_SET_CODE (c, OMP_CLAUSE_PRIVATE);\n+\t\t  OMP_CLAUSE_SET_CODE (c, OMP_CLAUSE_PRIVATE);\n \t\t  OMP_CLAUSE_PRIVATE_DEBUG (c) = 1;\n \t\t}\n \t    }"}, {"sha": "93ceb8e2302a9a4ad2151f32276346dad4b46fc7", "filename": "gcc/omp-low.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -154,7 +154,7 @@ static tree\n find_omp_clause (tree clauses, enum tree_code kind)\n {\n   for (; clauses ; clauses = OMP_CLAUSE_CHAIN (clauses))\n-    if (TREE_CODE (clauses) == kind)\n+    if (OMP_CLAUSE_CODE (clauses) == kind)\n       return clauses;\n \n   return NULL_TREE;\n@@ -242,7 +242,7 @@ extract_omp_for_data (tree for_stmt, struct omp_for_data *fd)\n   fd->chunk_size = NULL_TREE;\n \n   for (t = OMP_FOR_CLAUSES (for_stmt); t ; t = OMP_CLAUSE_CHAIN (t))\n-    switch (TREE_CODE (t))\n+    switch (OMP_CLAUSE_CODE (t))\n       {\n       case OMP_CLAUSE_NOWAIT:\n \tfd->have_nowait = true;\n@@ -943,7 +943,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n     {\n       bool by_ref;\n \n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_PRIVATE:\n \t  decl = OMP_CLAUSE_DECL (c);\n@@ -966,7 +966,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      break;\n \t    }\n \t  /* We don't need to copy const scalar vars back.  */\n-\t  TREE_SET_CODE (c, OMP_CLAUSE_FIRSTPRIVATE);\n+\t  OMP_CLAUSE_SET_CODE (c, OMP_CLAUSE_FIRSTPRIVATE);\n \t  goto do_private;\n \n \tcase OMP_CLAUSE_LASTPRIVATE:\n@@ -1009,7 +1009,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_NUM_THREADS:\n \tcase OMP_CLAUSE_SCHEDULE:\n \t  if (ctx->outer)\n-\t    scan_omp (&TREE_OPERAND (c, 0), ctx->outer);\n+\t    scan_omp (&OMP_CLAUSE_OPERAND (c, 0), ctx->outer);\n \t  break;\n \n \tcase OMP_CLAUSE_NOWAIT:\n@@ -1023,7 +1023,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \n   for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n     {\n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_LASTPRIVATE:\n \t  /* Let the corresponding firstprivate clause create\n@@ -1039,9 +1039,9 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  if (is_variable_sized (decl))\n \t    install_var_local (decl, ctx);\n \t  fixup_remapped_decl (decl, ctx,\n-\t\t\t       TREE_CODE (c) == OMP_CLAUSE_PRIVATE\n+\t\t\t       OMP_CLAUSE_CODE (c) == OMP_CLAUSE_PRIVATE\n \t\t\t       && OMP_CLAUSE_PRIVATE_DEBUG (c));\n-\t  if (TREE_CODE (c) == OMP_CLAUSE_REDUCTION\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t      && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n \t    scan_array_reductions = true;\n \t  break;\n@@ -1068,7 +1068,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \n   if (scan_array_reductions)\n     for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n-      if (TREE_CODE (c) == OMP_CLAUSE_REDUCTION\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t  && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n \t{\n \t  scan_omp (&OMP_CLAUSE_REDUCTION_INIT (c), ctx);\n@@ -1525,7 +1525,7 @@ lower_rec_input_clauses (tree clauses, tree *ilist, tree *dlist,\n     {\n       for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n \t{\n-\t  enum tree_code c_kind = TREE_CODE (c);\n+\t  enum omp_clause_code c_kind = OMP_CLAUSE_CODE (c);\n \t  tree var, new_var;\n \t  bool by_ref;\n \n@@ -1619,7 +1619,7 @@ lower_rec_input_clauses (tree clauses, tree *ilist, tree *dlist,\n \t  else if (pass != 0)\n \t    continue;\n \n-\t  switch (TREE_CODE (c))\n+\t  switch (OMP_CLAUSE_CODE (c))\n \t    {\n \t    case OMP_CLAUSE_SHARED:\n \t      /* Set up the DECL_VALUE_EXPR for shared variables now.  This\n@@ -1753,7 +1753,7 @@ lower_lastprivate_clauses (tree clauses, tree predicate, tree *stmt_list,\n     {\n       tree var, new_var;\n \n-      if (TREE_CODE (c) != OMP_CLAUSE_LASTPRIVATE)\n+      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_LASTPRIVATE)\n \tcontinue;\n \n       var = OMP_CLAUSE_DECL (c);\n@@ -1786,7 +1786,7 @@ lower_reduction_clauses (tree clauses, tree *stmt_list, omp_context *ctx)\n   /* First see if there is exactly one reduction clause.  Use OMP_ATOMIC\n      update in that case, otherwise use a lock.  */\n   for (c = clauses; c && count < 2; c = OMP_CLAUSE_CHAIN (c))\n-    if (TREE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n       {\n \tif (OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n \t  {\n@@ -1805,7 +1805,7 @@ lower_reduction_clauses (tree clauses, tree *stmt_list, omp_context *ctx)\n       tree var, ref, new_var;\n       enum tree_code code;\n \n-      if (TREE_CODE (c) != OMP_CLAUSE_REDUCTION)\n+      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_REDUCTION)\n \tcontinue;\n \n       var = OMP_CLAUSE_DECL (c);\n@@ -1878,7 +1878,7 @@ lower_copyprivate_clauses (tree clauses, tree *slist, tree *rlist,\n       tree var, ref, x;\n       bool by_ref;\n \n-      if (TREE_CODE (c) != OMP_CLAUSE_COPYPRIVATE)\n+      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_COPYPRIVATE)\n \tcontinue;\n \n       var = OMP_CLAUSE_DECL (c);\n@@ -1915,7 +1915,7 @@ lower_send_clauses (tree clauses, tree *ilist, tree *olist, omp_context *ctx)\n       tree val, ref, x, var;\n       bool by_ref, do_in = false, do_out = false;\n \n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n \tcase OMP_CLAUSE_COPYIN:\n@@ -1934,7 +1934,7 @@ lower_send_clauses (tree clauses, tree *ilist, tree *olist, omp_context *ctx)\n \tcontinue;\n       by_ref = use_pointer_for_field (val, false);\n \n-      switch (TREE_CODE (c))\n+      switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n \tcase OMP_CLAUSE_COPYIN:"}, {"sha": "65587ae2d5da86f1f3513a2b98e45a7c0f65bc54", "filename": "gcc/print-tree.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -825,6 +825,20 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    }\n \t  break;\n \n+\tcase OMP_CLAUSE:\n+\t    {\n+\t      int i;\n+\t      fprintf (file, \" %s\",\n+\t\t       omp_clause_code_name[OMP_CLAUSE_CODE (node)]);\n+\t      for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (node)]; i++)\n+\t\t{\n+\t\t  indent_to (file, indent + 4);\n+\t\t  fprintf (file, \"op %d:\", i);\n+\t\t  print_node_brief (file, \"\", OMP_CLAUSE_OPERAND (node, i), 0);\n+\t\t}\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  if (EXCEPTIONAL_CLASS_P (node))\n \t    lang_hooks.print_xnode (file, node, indent);"}, {"sha": "a76486c715382252d545ac2c6e2fea7436b7fe4c", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -653,6 +653,14 @@ dequeue_and_dump (dump_info_p di)\n       \t  dump_child (\"labl\", TREE_OPERAND (t,2));\n         }\n       break;\n+    case OMP_CLAUSE:\n+      {\n+\tint i;\n+\tfprintf (di->stream, \"%s\\n\", omp_clause_code_name[OMP_CLAUSE_CODE (t)]);\n+\tfor (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (t)]; i++)\n+\t  dump_child (\"op: \", OMP_CLAUSE_OPERAND (t, i));\n+      }\n+      break;\n     default:\n       /* There are no additional fields to print.  */\n       break;"}, {"sha": "012ef6836f0ec50cfa75c1faabc0c712d3a0c6a0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -1607,19 +1607,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case OMP_ORDERED:\n     case OMP_CRITICAL:\n     case OMP_ATOMIC:\n-    case OMP_CLAUSE_PRIVATE:\n-    case OMP_CLAUSE_SHARED:\n-    case OMP_CLAUSE_FIRSTPRIVATE:\n-    case OMP_CLAUSE_LASTPRIVATE:\n-    case OMP_CLAUSE_REDUCTION:\n-    case OMP_CLAUSE_COPYIN:\n-    case OMP_CLAUSE_COPYPRIVATE:\n-    case OMP_CLAUSE_IF:\n-    case OMP_CLAUSE_NUM_THREADS:\n-    case OMP_CLAUSE_SCHEDULE:\n-    case OMP_CLAUSE_NOWAIT:\n-    case OMP_CLAUSE_ORDERED:\n-    case OMP_CLAUSE_DEFAULT:\n+    case OMP_CLAUSE:\n     case OMP_RETURN_EXPR:\n       break;\n \n@@ -2310,20 +2298,7 @@ copy_tree_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t walk_tree to walk into the chain as well.  */\n       if (code == PARM_DECL\n \t  || code == TREE_LIST\n-\t  /* OpenMP clauses are linked through TREE_CHAIN.  */\n-\t  || code == OMP_CLAUSE_PRIVATE\n-\t  || code == OMP_CLAUSE_SHARED\n-\t  || code == OMP_CLAUSE_FIRSTPRIVATE\n-\t  || code == OMP_CLAUSE_LASTPRIVATE\n-\t  || code == OMP_CLAUSE_REDUCTION\n-\t  || code == OMP_CLAUSE_COPYIN\n-\t  || code == OMP_CLAUSE_COPYPRIVATE\n-\t  || code == OMP_CLAUSE_IF\n-\t  || code == OMP_CLAUSE_NUM_THREADS\n-\t  || code == OMP_CLAUSE_SCHEDULE\n-\t  || code == OMP_CLAUSE_NOWAIT\n-\t  || code == OMP_CLAUSE_ORDERED\n-\t  || code == OMP_CLAUSE_DEFAULT)\n+\t  || code == OMP_CLAUSE)\n \tTREE_CHAIN (*tp) = chain;\n \n       /* For now, we don't update BLOCKs when we make copies.  So, we"}, {"sha": "886681983ee49eb1aa40e3f87b3ae6ffe829be5b", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -1034,9 +1034,10 @@ convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)\n       save_suppress = info->suppress_expansion;\n       if (convert_nonlocal_omp_clauses (&OMP_PARALLEL_CLAUSES (t), wi))\n \t{\n-\t  tree c;\n-\t  c = get_chain_decl (info);\n-\t  c = build1 (OMP_CLAUSE_FIRSTPRIVATE, void_type_node, c);\n+\t  tree c, decl;\n+\t  decl = get_chain_decl (info);\n+\t  c = build_omp_clause (OMP_CLAUSE_FIRSTPRIVATE);\n+\t  OMP_CLAUSE_DECL (c) = decl;\n \t  OMP_CLAUSE_CHAIN (c) = OMP_PARALLEL_CLAUSES (t);\n \t  OMP_PARALLEL_CLAUSES (t) = c;\n \t}\n@@ -1094,7 +1095,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \n   for (clause = *pclauses; clause ; clause = OMP_CLAUSE_CHAIN (clause))\n     {\n-      switch (TREE_CODE (clause))\n+      switch (OMP_CLAUSE_CODE (clause))\n \t{\n \tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n@@ -1119,7 +1120,8 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_NUM_THREADS:\n \t  wi->val_only = true;\n \t  wi->is_lhs = false;\n-\t  convert_nonlocal_reference (&TREE_OPERAND (clause, 0), &dummy, wi);\n+\t  convert_nonlocal_reference (&OMP_CLAUSE_OPERAND (clause, 0), &dummy,\n+\t                              wi);\n \t  break;\n \n \tcase OMP_CLAUSE_NOWAIT:\n@@ -1317,7 +1319,8 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n \t{\n \t  tree c;\n \t  (void) get_frame_type (info);\n-\t  c = build1 (OMP_CLAUSE_SHARED, void_type_node, info->frame_decl);\n+\t  c = build_omp_clause (OMP_CLAUSE_SHARED);\n+\t  OMP_CLAUSE_DECL (c) = info->frame_decl;\n \t  OMP_CLAUSE_CHAIN (c) = OMP_PARALLEL_CLAUSES (t);\n \t  OMP_PARALLEL_CLAUSES (t) = c;\n \t}\n@@ -1375,7 +1378,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \n   for (clause = *pclauses; clause ; clause = OMP_CLAUSE_CHAIN (clause))\n     {\n-      switch (TREE_CODE (clause))\n+      switch (OMP_CLAUSE_CODE (clause))\n \t{\n \tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n@@ -1406,7 +1409,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_NUM_THREADS:\n \t  wi->val_only = true;\n \t  wi->is_lhs = false;\n-\t  convert_local_reference (&TREE_OPERAND (clause, 0), &dummy, wi);\n+\t  convert_local_reference (&OMP_CLAUSE_OPERAND (clause, 0), &dummy, wi);\n \t  break;\n \n \tcase OMP_CLAUSE_NOWAIT:"}, {"sha": "62b58992460a2d923bd01285efae8970b783053f", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 130, "deletions": 113, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -263,140 +263,152 @@ dump_array_domain (pretty_printer *buffer, tree domain, int spc, int flags)\n   pp_character (buffer, ']');\n }\n \n-/* Dump the list of OpenMP clauses.  */\n+\n+/* Dump OpenMP clause CLAUSE.  BUFFER, CLAUSE, SPC and FLAGS are as in\n+   dump_generic_node.  */\n \n static void\n-dump_omp_clauses (pretty_printer *buffer, tree clause, int spc, int flags)\n+dump_omp_clause (pretty_printer *buffer, tree clause, int spc, int flags)\n {\n   const char *name;\n \n-  if (clause == NULL)\n-    return;\n-\n-  pp_space (buffer);\n-  while (1)\n+  switch (OMP_CLAUSE_CODE (clause))\n     {\n-      switch (TREE_CODE (clause))\n-\t{\n-\tcase OMP_CLAUSE_PRIVATE:\n-\t  name = \"private\";\n-\t  goto print_remap;\n-\tcase OMP_CLAUSE_SHARED:\n-\t  name = \"shared\";\n-\t  goto print_remap;\n-\tcase OMP_CLAUSE_FIRSTPRIVATE:\n-\t  name = \"firstprivate\";\n-\t  goto print_remap;\n-\tcase OMP_CLAUSE_LASTPRIVATE:\n-\t  name = \"lastprivate\";\n-\t  goto print_remap;\n-\tcase OMP_CLAUSE_COPYIN:\n-\t  name = \"copyin\";\n-\t  goto print_remap;\n-\tcase OMP_CLAUSE_COPYPRIVATE:\n-\t  name = \"copyprivate\";\n-\t  goto print_remap;\n-\tprint_remap:\n-\t  pp_string (buffer, name);\n-\t  pp_character (buffer, '(');\n-\t  dump_generic_node (buffer, OMP_CLAUSE_DECL (clause),\n-\t\t\t     spc, flags, false);\n-\t  pp_character (buffer, ')');\n-\t  break;\n-\n-\tcase OMP_CLAUSE_REDUCTION:\n-\t  pp_string (buffer, \"reduction(\");\n-\t  pp_string (buffer, op_symbol_1 (OMP_CLAUSE_REDUCTION_CODE (clause)));\n-\t  pp_character (buffer, ':');\n-\t  dump_generic_node (buffer, OMP_CLAUSE_DECL (clause),\n-\t\t\t     spc, flags, false);\n-\t  pp_character (buffer, ')');\n-\t  break;\n+    case OMP_CLAUSE_PRIVATE:\n+      name = \"private\";\n+      goto print_remap;\n+    case OMP_CLAUSE_SHARED:\n+      name = \"shared\";\n+      goto print_remap;\n+    case OMP_CLAUSE_FIRSTPRIVATE:\n+      name = \"firstprivate\";\n+      goto print_remap;\n+    case OMP_CLAUSE_LASTPRIVATE:\n+      name = \"lastprivate\";\n+      goto print_remap;\n+    case OMP_CLAUSE_COPYIN:\n+      name = \"copyin\";\n+      goto print_remap;\n+    case OMP_CLAUSE_COPYPRIVATE:\n+      name = \"copyprivate\";\n+      goto print_remap;\n+  print_remap:\n+      pp_string (buffer, name);\n+      pp_character (buffer, '(');\n+      dump_generic_node (buffer, OMP_CLAUSE_DECL (clause),\n+\t  spc, flags, false);\n+      pp_character (buffer, ')');\n+      break;\n \n-\tcase OMP_CLAUSE_IF:\n-\t  pp_string (buffer, \"if(\");\n-\t  dump_generic_node (buffer, OMP_CLAUSE_IF_EXPR (clause),\n-\t\t\t     spc, flags, false);\n-\t  pp_character (buffer, ')');\n-\t  break;\n+    case OMP_CLAUSE_REDUCTION:\n+      pp_string (buffer, \"reduction(\");\n+      pp_string (buffer, op_symbol_1 (OMP_CLAUSE_REDUCTION_CODE (clause)));\n+      pp_character (buffer, ':');\n+      dump_generic_node (buffer, OMP_CLAUSE_DECL (clause),\n+\t  spc, flags, false);\n+      pp_character (buffer, ')');\n+      break;\n \n-\tcase OMP_CLAUSE_NUM_THREADS:\n-\t  pp_string (buffer, \"num_threads(\");\n-\t  dump_generic_node (buffer, OMP_CLAUSE_NUM_THREADS_EXPR (clause),\n-\t\t\t     spc, flags, false);\n-\t  pp_character (buffer, ')');\n-\t  break;\n+    case OMP_CLAUSE_IF:\n+      pp_string (buffer, \"if(\");\n+      dump_generic_node (buffer, OMP_CLAUSE_IF_EXPR (clause),\n+\t  spc, flags, false);\n+      pp_character (buffer, ')');\n+      break;\n \n-\tcase OMP_CLAUSE_NOWAIT:\n-\t  pp_string (buffer, \"nowait\");\n-\t  break;\n-\tcase OMP_CLAUSE_ORDERED:\n-\t  pp_string (buffer, \"ordered\");\n-\t  break;\n+    case OMP_CLAUSE_NUM_THREADS:\n+      pp_string (buffer, \"num_threads(\");\n+      dump_generic_node (buffer, OMP_CLAUSE_NUM_THREADS_EXPR (clause),\n+\t  spc, flags, false);\n+      pp_character (buffer, ')');\n+      break;\n \n-\tcase OMP_CLAUSE_DEFAULT:\n-\t  pp_string (buffer, \"default(\");\n-\t  switch (OMP_CLAUSE_DEFAULT_KIND (clause))\n-\t    {\n-\t    case OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n-\t      break;\n-\t    case OMP_CLAUSE_DEFAULT_SHARED:\n-\t      pp_string (buffer, \"shared\");\n-\t      break;\n-\t    case OMP_CLAUSE_DEFAULT_NONE:\n-\t      pp_string (buffer, \"none\");\n-\t      break;\n-\t    case OMP_CLAUSE_DEFAULT_PRIVATE:\n-\t      pp_string (buffer, \"private\");\n-\t      break;\n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\t  pp_character (buffer, ')');\n-\t  break;\n+    case OMP_CLAUSE_NOWAIT:\n+      pp_string (buffer, \"nowait\");\n+      break;\n+    case OMP_CLAUSE_ORDERED:\n+      pp_string (buffer, \"ordered\");\n+      break;\n \n-\tcase OMP_CLAUSE_SCHEDULE:\n-\t  pp_string (buffer, \"schedule(\");\n-\t  switch (OMP_CLAUSE_SCHEDULE_KIND (clause))\n-\t    {\n-\t    case OMP_CLAUSE_SCHEDULE_STATIC:\n-\t      pp_string (buffer, \"static\");\n-\t      break;\n-\t    case OMP_CLAUSE_SCHEDULE_DYNAMIC:\n-\t      pp_string (buffer, \"dynamic\");\n-\t      break;\n-\t    case OMP_CLAUSE_SCHEDULE_GUIDED:\n-\t      pp_string (buffer, \"guided\");\n-\t      break;\n-\t    case OMP_CLAUSE_SCHEDULE_RUNTIME:\n-\t      pp_string (buffer, \"runtime\");\n-\t      break;\n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\t  if (OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clause))\n-\t    {\n-\t      pp_character (buffer, ',');\n-\t      dump_generic_node (buffer,\n-\t\t\t\t OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clause),\n-\t\t\t\t spc, flags, false);\n-\t    }\n-\t  pp_character (buffer, ')');\n-\t  break;\n+    case OMP_CLAUSE_DEFAULT:\n+      pp_string (buffer, \"default(\");\n+      switch (OMP_CLAUSE_DEFAULT_KIND (clause))\n+\t{\n+      case OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n+\tbreak;\n+      case OMP_CLAUSE_DEFAULT_SHARED:\n+\tpp_string (buffer, \"shared\");\n+\tbreak;\n+      case OMP_CLAUSE_DEFAULT_NONE:\n+\tpp_string (buffer, \"none\");\n+\tbreak;\n+      case OMP_CLAUSE_DEFAULT_PRIVATE:\n+\tpp_string (buffer, \"private\");\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+\t}\n+      pp_character (buffer, ')');\n+      break;\n \n-\tdefault:\n-\t  /* Should never happen.  */\n-\t  dump_generic_node (buffer, clause, spc, flags, false);\n-\t  break;\n+    case OMP_CLAUSE_SCHEDULE:\n+      pp_string (buffer, \"schedule(\");\n+      switch (OMP_CLAUSE_SCHEDULE_KIND (clause))\n+\t{\n+      case OMP_CLAUSE_SCHEDULE_STATIC:\n+\tpp_string (buffer, \"static\");\n+\tbreak;\n+      case OMP_CLAUSE_SCHEDULE_DYNAMIC:\n+\tpp_string (buffer, \"dynamic\");\n+\tbreak;\n+      case OMP_CLAUSE_SCHEDULE_GUIDED:\n+\tpp_string (buffer, \"guided\");\n+\tbreak;\n+      case OMP_CLAUSE_SCHEDULE_RUNTIME:\n+\tpp_string (buffer, \"runtime\");\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+\t}\n+      if (OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clause))\n+\t{\n+\t  pp_character (buffer, ',');\n+\t  dump_generic_node (buffer,\n+\t      OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clause),\n+\t      spc, flags, false);\n \t}\n+      pp_character (buffer, ')');\n+      break;\n+\n+    default:\n+      /* Should never happen.  */\n+      dump_generic_node (buffer, clause, spc, flags, false);\n+      break;\n+    }\n+}\n+\n \n+/* Dump the list of OpenMP clauses.  BUFFER, SPC and FLAGS are as in\n+   dump_generic_node.  */\n+\n+static void\n+dump_omp_clauses (pretty_printer *buffer, tree clause, int spc, int flags)\n+{\n+  if (clause == NULL)\n+    return;\n+\n+  pp_space (buffer);\n+  while (1)\n+    {\n+      dump_omp_clause (buffer, clause, spc, flags);\n       clause = OMP_CLAUSE_CHAIN (clause);\n       if (clause == NULL)\n \treturn;\n       pp_space (buffer);\n     }\n }\n \n+\n /* Dump the node NODE on the pretty_printer BUFFER, SPC spaces of indent.\n    FLAGS specifies details to show in the dump (see TDF_* in tree.h).  If\n    IS_STMT is true, the object printed is considered to be a statement\n@@ -1823,6 +1835,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       is_expr = false;\n       break;\n \n+    case OMP_CLAUSE:\n+      dump_omp_clause (buffer, node, spc, flags);\n+      is_expr = false;\n+      break;\n+\n     case REDUC_MAX_EXPR:\n       pp_string (buffer, \" REDUC_MAX_EXPR < \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);"}, {"sha": "a4c8822446b337b2e2bf478d6bf1262ae524ffdc", "filename": "gcc/tree.c", "status": "modified", "additions": 167, "deletions": 28, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -96,7 +96,8 @@ static const char * const tree_node_kind_names[] = {\n   \"constructors\",\n   \"random kinds\",\n   \"lang_decl kinds\",\n-  \"lang_type kinds\"\n+  \"lang_type kinds\",\n+  \"omp clauses\"\n };\n #endif /* GATHER_STATISTICS */\n \n@@ -172,13 +173,49 @@ tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n \n unsigned char tree_contains_struct[256][64];\n+\n+/* Number of operands for each OpenMP clause.  */\n+unsigned const char omp_clause_num_ops[] =\n+{\n+  0, /* OMP_CLAUSE_ERROR  */\n+  1, /* OMP_CLAUSE_PRIVATE  */\n+  1, /* OMP_CLAUSE_SHARED  */\n+  1, /* OMP_CLAUSE_FIRSTPRIVATE  */\n+  1, /* OMP_CLAUSE_LASTPRIVATE  */\n+  4, /* OMP_CLAUSE_REDUCTION  */\n+  1, /* OMP_CLAUSE_COPYIN  */\n+  1, /* OMP_CLAUSE_COPYPRIVATE  */\n+  1, /* OMP_CLAUSE_IF  */\n+  1, /* OMP_CLAUSE_NUM_THREADS  */\n+  1, /* OMP_CLAUSE_SCHEDULE  */\n+  0, /* OMP_CLAUSE_NOWAIT  */\n+  0, /* OMP_CLAUSE_ORDERED  */\n+  0  /* OMP_CLAUSE_DEFAULT  */\n+};\n+\n+const char * const omp_clause_code_name[] =\n+{\n+  \"error_clause\",\n+  \"private\",\n+  \"shared\",\n+  \"firstprivate\",\n+  \"lastprivate\",\n+  \"reduction\",\n+  \"copyin\",\n+  \"copyprivate\",\n+  \"if\",\n+  \"num_threads\",\n+  \"schedule\",\n+  \"nowait\",\n+  \"ordered\",\n+  \"default\"\n+};\n \f\n /* Init tree.c.  */\n \n void\n init_ttree (void)\n {\n-\n   /* Initialize the hash table of types.  */\n   type_hash_table = htab_create_ggc (TYPE_HASH_INITIAL_SIZE, type_hash_hash,\n \t\t\t\t     type_hash_eq, 0);\n@@ -338,6 +375,7 @@ tree_code_size (enum tree_code code)\n \tcase PLACEHOLDER_EXPR:\treturn sizeof (struct tree_common);\n \n \tcase TREE_VEC:\n+\tcase OMP_CLAUSE:\n \tcase PHI_NODE:\t\tgcc_unreachable ();\n \n \tcase SSA_NAME:\t\treturn sizeof (struct tree_ssa_name);\n@@ -379,15 +417,21 @@ tree_size (tree node)\n     case STRING_CST:\n       return sizeof (struct tree_string) + TREE_STRING_LENGTH (node) - 1;\n \n+    case OMP_CLAUSE:\n+      return (sizeof (struct tree_omp_clause)\n+\t      + (omp_clause_num_ops[OMP_CLAUSE_CODE (node)] - 1)\n+\t        * sizeof (tree));\n+\n     default:\n       return tree_code_size (code);\n     }\n }\n \n /* Return a newly allocated node of code CODE.  For decl and type\n    nodes, some other fields are initialized.  The rest of the node is\n-   initialized to zero.  This function cannot be used for PHI_NODE or\n-   TREE_VEC nodes, which is enforced by asserts in tree_code_size.\n+   initialized to zero.  This function cannot be used for PHI_NODE,\n+   TREE_VEC or OMP_CLAUSE nodes, which is enforced by asserts in\n+   tree_code_size.\n \n    Achoo!  I got a code in the node.  */\n \n@@ -2036,6 +2080,7 @@ tree_node_structure (tree t)\n     case CONSTRUCTOR:\t\treturn TS_CONSTRUCTOR;\n     case TREE_BINFO:\t\treturn TS_BINFO;\n     case VALUE_HANDLE:\t\treturn TS_VALUE_HANDLE;\n+    case OMP_CLAUSE:\t\treturn TS_OMP_CLAUSE;\n \n     default:\n       gcc_unreachable ();\n@@ -6109,6 +6154,53 @@ tree_not_class_check_failed (const tree node, const enum tree_code_class cl,\n      tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n }\n \n+\n+/* Similar to tree_check_failed but applied to OMP_CLAUSE codes.  */\n+\n+void\n+omp_clause_check_failed (const tree node, const char *file, int line,\n+                         const char *function, enum omp_clause_code code)\n+{\n+  internal_error (\"tree check: expected omp_clause %s, have %s in %s, at %s:%d\",\n+\t\t  omp_clause_code_name[code], tree_code_name[TREE_CODE (node)],\n+\t\t  function, trim_filename (file), line);\n+}\n+\n+\n+/* Similar to tree_range_check_failed but applied to OMP_CLAUSE codes.  */\n+\n+void\n+omp_clause_range_check_failed (const tree node, const char *file, int line,\n+\t\t\t       const char *function, enum omp_clause_code c1,\n+\t\t\t       enum omp_clause_code c2)\n+{\n+  char *buffer;\n+  unsigned length = 0;\n+  enum omp_clause_code c;\n+\n+  for (c = c1; c <= c2; ++c)\n+    length += 4 + strlen (omp_clause_code_name[c]);\n+\n+  length += strlen (\"expected \");\n+  buffer = alloca (length);\n+  length = 0;\n+\n+  for (c = c1; c <= c2; ++c)\n+    {\n+      const char *prefix = length ? \" or \" : \"expected \";\n+\n+      strcpy (buffer + length, prefix);\n+      length += strlen (prefix);\n+      strcpy (buffer + length, omp_clause_code_name[c]);\n+      length += strlen (omp_clause_code_name[c]);\n+    }\n+\n+  internal_error (\"tree check: %s, have %s in %s, at %s:%d\",\n+\t\t  buffer, omp_clause_code_name[TREE_CODE (node)],\n+\t\t  function, trim_filename (file), line);\n+}\n+\n+\n #undef DEFTREESTRUCT\n #define DEFTREESTRUCT(VAL, NAME) NAME,\n \n@@ -6171,6 +6263,20 @@ tree_operand_check_failed (int idx, enum tree_code code, const char *file,\n      idx + 1, tree_code_name[code], TREE_CODE_LENGTH (code),\n      function, trim_filename (file), line);\n }\n+\n+/* Similar to above, except that the check is for the number of\n+   operands of an OMP_CLAUSE node.  */\n+\n+void\n+omp_clause_operand_check_failed (int idx, tree t, const char *file,\n+\t\t\t         int line, const char *function)\n+{\n+  internal_error\n+    (\"tree check: accessed operand %d of omp_clause %s with %d operands \"\n+     \"in %s, at %s:%d\", idx + 1, omp_clause_code_name[OMP_CLAUSE_CODE (t)],\n+     omp_clause_num_ops [OMP_CLAUSE_CODE (t)], function,\n+     trim_filename (file), line);\n+}\n #endif /* ENABLE_TREE_CHECKING */\n \f\n /* Create a new vector type node holding SUBPARTS units of type INNERTYPE,\n@@ -6733,6 +6839,31 @@ build_empty_stmt (void)\n }\n \n \n+/* Build an OpenMP clause with code CODE.  */\n+\n+tree\n+build_omp_clause (enum omp_clause_code code)\n+{\n+  tree t;\n+  int size, length;\n+\n+  length = omp_clause_num_ops[code];\n+  size = (sizeof (struct tree_omp_clause) + (length - 1) * sizeof (tree));\n+\n+  t = ggc_alloc (size);\n+  memset (t, 0, size);\n+  TREE_SET_CODE (t, OMP_CLAUSE);\n+  OMP_CLAUSE_SET_CODE (t, code);\n+\n+#ifdef GATHER_STATISTICS\n+  tree_node_counts[(int) omp_clause_kind]++;\n+  tree_node_sizes[(int) omp_clause_kind] += size;\n+#endif\n+  \n+  return t;\n+}\n+\n+\n /* Returns true if it is possible to prove that the index of\n    an array access REF (an ARRAY_REF expression) falls into the\n    array bounds.  */\n@@ -7211,7 +7342,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n       /* But we still need to check our siblings.  */\n       if (code == TREE_LIST)\n \tWALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n-      else if (code >= OMP_CLAUSE_PRIVATE && code <= OMP_CLAUSE_DEFAULT)\n+      else if (code == OMP_CLAUSE)\n \tWALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n       else\n \treturn NULL_TREE;\n@@ -7303,30 +7434,38 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n       }\n       break;\n \n-    case OMP_CLAUSE_PRIVATE:\n-    case OMP_CLAUSE_SHARED:\n-    case OMP_CLAUSE_FIRSTPRIVATE:\n-    case OMP_CLAUSE_LASTPRIVATE:\n-    case OMP_CLAUSE_COPYIN:\n-    case OMP_CLAUSE_COPYPRIVATE:\n-    case OMP_CLAUSE_IF:\n-    case OMP_CLAUSE_NUM_THREADS:\n-    case OMP_CLAUSE_SCHEDULE:\n-      WALK_SUBTREE (TREE_OPERAND (*tp, 0));\n-      /* FALLTHRU */\n-\n-    case OMP_CLAUSE_NOWAIT:\n-    case OMP_CLAUSE_ORDERED:\n-    case OMP_CLAUSE_DEFAULT:\n-      WALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n+    case OMP_CLAUSE:\n+      switch (OMP_CLAUSE_CODE (*tp))\n+\t{\n+\tcase OMP_CLAUSE_PRIVATE:\n+\tcase OMP_CLAUSE_SHARED:\n+\tcase OMP_CLAUSE_FIRSTPRIVATE:\n+\tcase OMP_CLAUSE_LASTPRIVATE:\n+\tcase OMP_CLAUSE_COPYIN:\n+\tcase OMP_CLAUSE_COPYPRIVATE:\n+\tcase OMP_CLAUSE_IF:\n+\tcase OMP_CLAUSE_NUM_THREADS:\n+\tcase OMP_CLAUSE_SCHEDULE:\n+\t  WALK_SUBTREE (OMP_CLAUSE_OPERAND (*tp, 0));\n+\t  /* FALLTHRU */\n+\n+\tcase OMP_CLAUSE_NOWAIT:\n+\tcase OMP_CLAUSE_ORDERED:\n+\tcase OMP_CLAUSE_DEFAULT:\n+\t  WALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n+\n+\tcase OMP_CLAUSE_REDUCTION:\n+\t  {\n+\t    int i;\n+\t    for (i = 0; i < 4; i++)\n+\t      WALK_SUBTREE (OMP_CLAUSE_OPERAND (*tp, i));\n+\t    WALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n+\t  }\n \n-    case OMP_CLAUSE_REDUCTION:\n-      {\n-\tint i;\n-\tfor (i = 0; i < 4; i++)\n-\t  WALK_SUBTREE (TREE_OPERAND (*tp, i));\n-\tWALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n-      }\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n \n     case TARGET_EXPR:\n       {"}, {"sha": "5810a29c3a4df09a829dd3bfaa0c97e8eb31fb52", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -1025,52 +1025,8 @@ DEFTREECODE (OMP_CRITICAL, \"omp_critical\", tcc_statement, 2)\n \tbuild_fold_indirect_ref of the address.  */\n DEFTREECODE (OMP_ATOMIC, \"omp_atomic\", tcc_statement, 2)\n \n-/* The ordering of the codes between OMP_CLAUSE_PRIVATE and\n-   OMP_CLAUSE_DEFAULT is exposed to TREE_RANGE_CHECK.  */\n-/* OpenMP clause: private (variable_list).  */\n-DEFTREECODE (OMP_CLAUSE_PRIVATE, \"private\", tcc_expression, 1)\n-\n-/* OpenMP clause: shared (variable_list).  */\n-DEFTREECODE (OMP_CLAUSE_SHARED, \"shared\", tcc_expression, 1)\n-\n-/* OpenMP clause: firstprivate (variable_list).  */\n-DEFTREECODE (OMP_CLAUSE_FIRSTPRIVATE, \"firstprivate\", tcc_expression, 1)\n-\n-/* OpenMP clause: lastprivate (variable_list).  */\n-DEFTREECODE (OMP_CLAUSE_LASTPRIVATE, \"lastprivate\", tcc_expression, 1)\n-\n-/* OpenMP clause: reduction (operator:variable_list).\n-   OMP_CLAUSE_REDUCTION_CODE: The tree_code of the operator.\n-   Operand 1: OMP_CLAUSE_REDUCTION_INIT: Stmt-list to initialize the var.\n-   Operand 2: OMP_CLAUSE_REDUCTION_MERGE:\n-     Stmt-list to merge private var into the shared one.\n-   Operand 3: OMP_CLAUSE_REDUCTION_PLACEHOLDER:\n-     A dummy VAR_DECL placeholder used in OMP_CLAUSE_REDUCTION_MERGE.  */\n-DEFTREECODE (OMP_CLAUSE_REDUCTION, \"reduction\", tcc_expression, 4)\n-\n-/* OpenMP clause: copyin (variable_list).  */\n-DEFTREECODE (OMP_CLAUSE_COPYIN, \"copyin\", tcc_expression, 1)\n-\n-/* OpenMP clause: copyprivate (variable_list).  */\n-DEFTREECODE (OMP_CLAUSE_COPYPRIVATE, \"copyprivate\", tcc_expression, 1)\n-\n-/* OpenMP clause: if (scalar-expression).  */\n-DEFTREECODE (OMP_CLAUSE_IF, \"if\", tcc_expression, 1)\n-\n-/* OpenMP clause: num_threads (integer-expression).  */\n-DEFTREECODE (OMP_CLAUSE_NUM_THREADS, \"num_threads\", tcc_expression, 1)\n-\n-/* OpenMP clause: schedule.  */\n-DEFTREECODE (OMP_CLAUSE_SCHEDULE, \"schedule\", tcc_expression, 1)\n-\n-/* OpenMP clause: nowait.  */\n-DEFTREECODE (OMP_CLAUSE_NOWAIT, \"nowait\", tcc_expression, 0)\n-\n-/* OpenMP clause: ordered.  */\n-DEFTREECODE (OMP_CLAUSE_ORDERED, \"ordered\", tcc_expression, 0)\n-\n-/* OpenMP clause: default.  */\n-DEFTREECODE (OMP_CLAUSE_DEFAULT, \"default\", tcc_expression, 0)\n+/* OpenMP clauses.  */\n+DEFTREECODE (OMP_CLAUSE, \"omp_clause\", tcc_exceptional, 0)\n \n /* Return from an OpenMP directive.  */\n DEFTREECODE (OMP_RETURN_EXPR, \"omp_return\", tcc_statement, 0)"}, {"sha": "f93a7644bb28e1b28373bbcbda812e5f6e6a1aaa", "filename": "gcc/tree.h", "status": "modified", "additions": 149, "deletions": 18, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -262,6 +262,66 @@ extern const char * built_in_names[(int) END_BUILTINS];\n extern GTY(()) tree built_in_decls[(int) END_BUILTINS];\n extern GTY(()) tree implicit_built_in_decls[(int) END_BUILTINS];\n \f\n+/* In an OMP_CLAUSE node.  */\n+\n+/* Number of operands and names for each clause.  */\n+extern unsigned const char omp_clause_num_ops[];\n+extern const char * const omp_clause_code_name[];\n+\n+/* Clause codes.  Do not reorder, as this is used to index into the tables\n+   omp_clause_num_ops and omp_clause_code_name.  */\n+enum omp_clause_code\n+{\n+  /* Clause zero is special-cased inside the parser\n+     (c_parser_omp_variable_list).  */\n+  OMP_CLAUSE_ERROR = 0,\n+\n+  /* OpenMP clause: private (variable_list).  */\n+  OMP_CLAUSE_PRIVATE,\n+\n+  /* OpenMP clause: shared (variable_list).  */\n+  OMP_CLAUSE_SHARED,\n+\n+  /* OpenMP clause: firstprivate (variable_list).  */\n+  OMP_CLAUSE_FIRSTPRIVATE,\n+\n+  /* OpenMP clause: lastprivate (variable_list).  */\n+  OMP_CLAUSE_LASTPRIVATE,\n+\n+  /* OpenMP clause: reduction (operator:variable_list).\n+     OMP_CLAUSE_REDUCTION_CODE: The tree_code of the operator.\n+     Operand 1: OMP_CLAUSE_REDUCTION_INIT: Stmt-list to initialize the var.\n+     Operand 2: OMP_CLAUSE_REDUCTION_MERGE: Stmt-list to merge private var \n+                into the shared one.\n+     Operand 3: OMP_CLAUSE_REDUCTION_PLACEHOLDER: A dummy VAR_DECL\n+                placeholder used in OMP_CLAUSE_REDUCTION_MERGE.  */\n+  OMP_CLAUSE_REDUCTION,\n+\n+  /* OpenMP clause: copyin (variable_list).  */\n+  OMP_CLAUSE_COPYIN,\n+\n+  /* OpenMP clause: copyprivate (variable_list).  */\n+  OMP_CLAUSE_COPYPRIVATE,\n+\n+  /* OpenMP clause: if (scalar-expression).  */\n+  OMP_CLAUSE_IF,\n+\n+  /* OpenMP clause: num_threads (integer-expression).  */\n+  OMP_CLAUSE_NUM_THREADS,\n+\n+  /* OpenMP clause: schedule.  */\n+  OMP_CLAUSE_SCHEDULE,\n+\n+  /* OpenMP clause: nowait.  */\n+  OMP_CLAUSE_NOWAIT,\n+\n+  /* OpenMP clause: ordered.  */\n+  OMP_CLAUSE_ORDERED,\n+\n+  /* OpenMP clause: default.  */\n+  OMP_CLAUSE_DEFAULT\n+};\n+\f\n /* The definition of tree nodes fills the next several pages.  */\n \n /* A tree node can represent a data type, a variable, an expression\n@@ -598,11 +658,32 @@ enum tree_node_structure_enum {\n \n #define TREE_RANGE_CHECK(T, CODE1, CODE2) __extension__\t\t\t\\\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n-    if (TREE_CODE (__t) < (CODE1) && TREE_CODE (__t) > (CODE2))\t\t\\\n+    if (TREE_CODE (__t) < (CODE1) || TREE_CODE (__t) > (CODE2))\t\t\\\n       tree_range_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n \t\t\t       (CODE1), (CODE2));\t\t\t\\\n     __t; })\n \n+#define OMP_CLAUSE_SUBCODE_CHECK(T, CODE) __extension__\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != OMP_CLAUSE)\t\t\t\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n+\t\t\t OMP_CLAUSE, 0);\t\t\t\t\\\n+    if (__t->omp_clause.code != (CODE))\t\t\t\t\t\\\n+      omp_clause_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, \t\\\n+\t\t\t       (CODE));\t\t\t\t\t\\\n+    __t; })\n+\n+#define OMP_CLAUSE_RANGE_CHECK(T, CODE1, CODE2) __extension__\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != OMP_CLAUSE)\t\t\t\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n+\t\t\t OMP_CLAUSE, 0);\t\t\t\t\\\n+    if ((int) __t->omp_clause.code < (int) (CODE1)\t\t\t\\\n+        || (int) __t->omp_clause.code > (int) (CODE2))\t\t\t\\\n+      omp_clause_range_check_failed (__t, __FILE__, __LINE__,\t\t\\\n+\t\t\t\t     __FUNCTION__, (CODE1), (CODE2));\t\\\n+    __t; })\n+\n /* These checks have to be special cased.  */\n #define EXPR_CHECK(T) __extension__\t\t\t\t\t\\\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n@@ -642,6 +723,17 @@ enum tree_node_structure_enum {\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->phi.a[__i]; }))\n \n+#define OMP_CLAUSE_ELT_CHECK(t, i) __extension__\t\t\t\\\n+(*({const tree __t = t;\t\t\t\t\t\t\t\\\n+    const int __i = (i);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != OMP_CLAUSE)\t\t\t\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n+\t\t\t OMP_CLAUSE, 0);\t\t\t\t\\\n+    if (__i < 0 || __i >= omp_clause_num_ops [__t->omp_clause.code])\t\\\n+      omp_clause_operand_check_failed (__i, __t, __FILE__, __LINE__,\t\\\n+\t                               __FUNCTION__);\t\t\t\\\n+    &__t->omp_clause.ops[__i]; }))\n+\n /* Special checks for TREE_OPERANDs.  */\n #define TREE_OPERAND_CHECK(T, I) __extension__\t\t\t\t\\\n (*({const tree __t = EXPR_CHECK (T);\t\t\t\t\t\\\n@@ -700,6 +792,16 @@ extern void phi_node_elt_check_failed (int, int, const char *,\n extern void tree_operand_check_failed (int, enum tree_code,\n \t\t\t\t       const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n+extern void omp_clause_check_failed (const tree, const char *, int,\n+\t\t\t\t     const char *, enum omp_clause_code)\n+    ATTRIBUTE_NORETURN;\n+extern void omp_clause_operand_check_failed (int, tree, const char *,\n+\t\t\t\t             int, const char *)\n+    ATTRIBUTE_NORETURN;\n+extern void omp_clause_range_check_failed (const tree, const char *, int,\n+\t\t\t       const char *, enum omp_clause_code,\n+\t\t\t       enum omp_clause_code)\n+    ATTRIBUTE_NORETURN;\n \n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n \n@@ -723,10 +825,12 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #define TREE_OPERAND_CHECK_CODE(T, CODE, I)\t((T)->exp.operands[I])\n #define TREE_RTL_OPERAND_CHECK(T, CODE, I)  (*(rtx *) &((T)->exp.operands[I]))\n #define PHI_NODE_ELT_CHECK(T, i)\t((T)->phi.a[i])\n+#define OMP_CLAUSE_ELT_CHECK(T, i)\t        ((T)->omp_clause.ops[i])\n+#define OMP_CLAUSE_RANGE_CHECK(T, CODE1, CODE2)\t(T)\n \n #endif\n \n-#define TREE_BLOCK(NODE)\t\t((NODE)->exp.block)\n+#define TREE_BLOCK(NODE)\t\t(EXPR_CHECK (NODE)->exp.block)\n \n #include \"tree-check.h\"\n \n@@ -1463,38 +1567,38 @@ struct tree_constructor GTY(())\n #define OMP_CRITICAL_BODY(NODE)    TREE_OPERAND (OMP_CRITICAL_CHECK (NODE), 0)\n #define OMP_CRITICAL_NAME(NODE)    TREE_OPERAND (OMP_CRITICAL_CHECK (NODE), 1)\n \n-#define OMP_CLAUSE_CHAIN(NODE) \\\n-  TREE_CHAIN (TREE_RANGE_CHECK (NODE, OMP_CLAUSE_PRIVATE, OMP_CLAUSE_DEFAULT))\n-#define OMP_CLAUSE_DECL(NODE) \\\n-  TREE_OPERAND (TREE_RANGE_CHECK (NODE, OMP_CLAUSE_PRIVATE, \\\n-\t\t\t\t  OMP_CLAUSE_COPYPRIVATE), 0)\n+#define OMP_CLAUSE_CHAIN(NODE)     TREE_CHAIN (OMP_CLAUSE_CHECK (NODE))\n+#define OMP_CLAUSE_DECL(NODE)      \t\t\t\t\t\\\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_RANGE_CHECK (OMP_CLAUSE_CHECK (NODE),\t\\\n+\t\t\t\t\t      OMP_CLAUSE_PRIVATE,\t\\\n+\t                                      OMP_CLAUSE_COPYPRIVATE), 0)\n \n /* True on a PRIVATE clause if its decl is kept around for debugging\n    information only and its DECL_VALUE_EXPR is supposed to point\n    to what it has been remapped to.  */\n #define OMP_CLAUSE_PRIVATE_DEBUG(NODE) \\\n-  TREE_PUBLIC (OMP_CLAUSE_PRIVATE_CHECK (NODE))\n+  TREE_PUBLIC (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PRIVATE))\n \n /* True on a LASTPRIVATE clause if a FIRSTPRIVATE clause for the same\n    decl is present in the chain.  */\n #define OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE(NODE) \\\n-  TREE_PUBLIC (OMP_CLAUSE_LASTPRIVATE_CHECK (NODE))\n+  TREE_PUBLIC (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_LASTPRIVATE))\n \n #define OMP_CLAUSE_IF_EXPR(NODE) \\\n-  TREE_OPERAND (OMP_CLAUSE_IF_CHECK (NODE), 0)\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_IF), 0)\n #define OMP_CLAUSE_NUM_THREADS_EXPR(NODE) \\\n-  TREE_OPERAND (OMP_CLAUSE_NUM_THREADS_CHECK (NODE), 0)\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_NUM_THREADS),0)\n #define OMP_CLAUSE_SCHEDULE_CHUNK_EXPR(NODE) \\\n-  TREE_OPERAND (OMP_CLAUSE_SCHEDULE_CHECK (NODE), 0)\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_SCHEDULE), 0)\n \n #define OMP_CLAUSE_REDUCTION_CODE(NODE)\t\\\n-  (OMP_CLAUSE_REDUCTION_CHECK (NODE)->exp.complexity)\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_REDUCTION)->omp_clause.subcode.reduction_code)\n #define OMP_CLAUSE_REDUCTION_INIT(NODE) \\\n-  TREE_OPERAND (OMP_CLAUSE_REDUCTION_CHECK (NODE), 1)\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_REDUCTION), 1)\n #define OMP_CLAUSE_REDUCTION_MERGE(NODE) \\\n-  TREE_OPERAND (OMP_CLAUSE_REDUCTION_CHECK (NODE), 2)\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_REDUCTION), 2)\n #define OMP_CLAUSE_REDUCTION_PLACEHOLDER(NODE) \\\n-  TREE_OPERAND (OMP_CLAUSE_REDUCTION_CHECK (NODE), 3)\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_REDUCTION), 3)\n \n enum omp_clause_schedule_kind\n {\n@@ -1505,7 +1609,7 @@ enum omp_clause_schedule_kind\n };\n \n #define OMP_CLAUSE_SCHEDULE_KIND(NODE) \\\n-  (OMP_CLAUSE_SCHEDULE_CHECK (NODE)->exp.complexity)\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_SCHEDULE)->omp_clause.subcode.schedule_kind)\n \n enum omp_clause_default_kind\n {\n@@ -1516,7 +1620,7 @@ enum omp_clause_default_kind\n };\n \n #define OMP_CLAUSE_DEFAULT_KIND(NODE) \\\n-  (OMP_CLAUSE_DEFAULT_CHECK (NODE)->exp.complexity)\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_DEFAULT)->omp_clause.subcode.default_kind)\n \n struct tree_exp GTY(())\n {\n@@ -1662,6 +1766,30 @@ struct tree_phi_node GTY(())\n   struct phi_arg_d GTY ((length (\"((tree)&%h)->phi.num_args\"))) a[1];\n };\n \f\n+#define OMP_CLAUSE_CODE(NODE)\t\t\t\t\t\\\n+\t(OMP_CLAUSE_CHECK (NODE))->omp_clause.code\n+\n+#define OMP_CLAUSE_SET_CODE(NODE, CODE)\t\t\t\t\\\n+\t((OMP_CLAUSE_CHECK (NODE))->omp_clause.code = (CODE))\n+\n+#define OMP_CLAUSE_CODE(NODE)\t\t\t\t\t\\\n+\t(OMP_CLAUSE_CHECK (NODE))->omp_clause.code\n+\n+#define OMP_CLAUSE_OPERAND(NODE, I)\t\t\t\t\\\n+\tOMP_CLAUSE_ELT_CHECK (NODE, I)\n+\n+struct tree_omp_clause GTY(())\n+{\n+  struct tree_common common;\n+  enum omp_clause_code code;\n+  union omp_clause_subcode {\n+    enum omp_clause_default_kind  default_kind;\n+    enum omp_clause_schedule_kind schedule_kind;\n+    enum tree_code                reduction_code;\n+  } GTY ((skip)) subcode;\n+  tree GTY ((length (\"omp_clause_num_ops[TREE_CODE ((tree)&%h)]\"))) ops[1];\n+};\n+\f\n \n struct varray_head_tag;\n \n@@ -2997,6 +3125,7 @@ union tree_node GTY ((ptr_alias (union lang_tree_node),\n   struct tree_value_handle GTY ((tag (\"TS_VALUE_HANDLE\"))) value_handle;\n   struct tree_constructor GTY ((tag (\"TS_CONSTRUCTOR\"))) constructor;\n   struct tree_memory_tag GTY ((tag (\"TS_MEMORY_TAG\"))) mtag;\n+  struct tree_omp_clause GTY ((tag (\"TS_OMP_CLAUSE\"))) omp_clause;\n };\n \f\n /* Standard named or nameless data types of the C compiler.  */\n@@ -3359,6 +3488,7 @@ extern void annotate_with_file_line (tree, const char *, int);\n extern void annotate_with_locus (tree, location_t);\n #endif\n extern tree build_empty_stmt (void);\n+extern tree build_omp_clause (enum omp_clause_code);\n \n /* Construct various nodes representing data types.  */\n \n@@ -4341,6 +4471,7 @@ typedef enum\n   x_kind,\n   lang_decl,\n   lang_type,\n+  omp_clause_kind,\n   all_kinds\n } tree_node_kind;\n "}, {"sha": "3131d4be1d9926d8a625c30b19df2c7a36c406d4", "filename": "gcc/treestruct.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftreestruct.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf46ef9792bbc562175b606bd1c3f225ea56924/gcc%2Ftreestruct.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreestruct.def?ref=aaf46ef9792bbc562175b606bd1c3f225ea56924", "patch": "@@ -60,3 +60,4 @@ DEFTREESTRUCT(TS_STATEMENT_LIST, \"statement list\")\n DEFTREESTRUCT(TS_VALUE_HANDLE, \"value handle\")\n DEFTREESTRUCT(TS_CONSTRUCTOR, \"constructor\")\n DEFTREESTRUCT(TS_MEMORY_TAG, \"memory tag\")\n+DEFTREESTRUCT(TS_OMP_CLAUSE, \"omp clause\")"}]}