{"sha": "91ea548a25908e9f6f610b1e8e743a56418c352f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlYTU0OGEyNTkwOGU5ZjZmNjEwYjFlOGU3NDNhNTY0MThjMzUyZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-05-20T12:49:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-05-20T12:49:31Z"}, "message": "re PR c/2291 (Pedantic may be too pedantic)\n\n\t* invoke.texi: Document meaning of -pedantic when -std=gnu* is\n\tused.  Fixes PR c/2291.\n\t* gcc.1: Regenerate.\n\nFrom-SVN: r42340", "tree": {"sha": "4146fb4f54dcdef4f8dfa42f136c3e2da8e29682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4146fb4f54dcdef4f8dfa42f136c3e2da8e29682"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91ea548a25908e9f6f610b1e8e743a56418c352f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ea548a25908e9f6f610b1e8e743a56418c352f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ea548a25908e9f6f610b1e8e743a56418c352f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ea548a25908e9f6f610b1e8e743a56418c352f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf03ee31b88812a72359b625f6f261f32a21fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf03ee31b88812a72359b625f6f261f32a21fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf03ee31b88812a72359b625f6f261f32a21fa5"}], "stats": {"total": 308, "additions": 207, "deletions": 101}, "files": [{"sha": "98651ea719ad0e2486affb4322b3eca579127fce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea548a25908e9f6f610b1e8e743a56418c352f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea548a25908e9f6f610b1e8e743a56418c352f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91ea548a25908e9f6f610b1e8e743a56418c352f", "patch": "@@ -1,3 +1,9 @@\n+2001-05-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* invoke.texi: Document meaning of -pedantic when -std=gnu* is\n+\tused.  Fixes PR c/2291.\n+\t* gcc.1: Regenerate.\n+\n 2001-05-20  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_override_options): Ignore"}, {"sha": "98fbab9b6592ad06b8e61738bf96bc3d6ee6e530", "filename": "gcc/gcc.1", "status": "modified", "additions": 191, "deletions": 101, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea548a25908e9f6f610b1e8e743a56418c352f/gcc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea548a25908e9f6f610b1e8e743a56418c352f/gcc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.1?ref=91ea548a25908e9f6f610b1e8e743a56418c352f", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.15\n-.\\\" Wed Apr 25 21:39:15 2001\n+.\\\" Sun May 20 12:45:49 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"GCC 1\"\n-.TH GCC 1 \"gcc-3.1\" \"2001-04-25\" \"GNU\"\n+.TH GCC 1 \"gcc-3.1\" \"2001-05-20\" \"GNU\"\n .UC\n .SH \"NAME\"\n gcc \\- \\s-1GNU\\s0 project C and \\*(C+ compiler\n@@ -227,6 +227,11 @@ in the following sections.\n \\&\\-Wno-non-template-friend  \\-Wold-style-cast \n \\&\\-Woverloaded-virtual  \\-Wno-pmf-conversions \n \\&\\-Wsign-promo  \\-Wsynth\\fR\n+.Ip \"\\fIObjective-C Language Options\\fR\" 4\n+.IX Item \"Objective-C Language Options\"\n+\\&\\fB\\-fconstant-string-class=\\fR\\fIclass name\\fR \n+\\&\\fB\\-fgnu-runtime  \\-fnext-runtime  \\-gen-decls\n+\\&\\-Wno-protocol  \\-Wselector\\fR\n .Ip \"\\fILanguage Independent Options\\fR\" 4\n .IX Item \"Language Independent Options\"\n \\&\\fB\\-fmessage-length=\\fR\\fIn\\fR  \n@@ -486,11 +491,10 @@ in the following sections.\n \\&\\fB\\-mintel-syntax \\-mieee-fp  \\-mno-fancy-math-387 \n \\&\\-mno-fp-ret-in-387  \\-msoft-float  \\-msvr3\\-shlib \n \\&\\-mno-wide-multiply  \\-mrtd  \\-malign-double \n-\\&\\-malign-jumps=\\fR\\fInum\\fR  \\fB\\-malign-loops=\\fR\\fInum\\fR \n-\\&\\fB\\-malign-functions=\\fR\\fInum\\fR \\fB\\-mpreferred-stack-boundary=\\fR\\fInum\\fR \n+\\&\\-mpreferred-stack-boundary=\\fR\\fInum\\fR \n \\&\\fB\\-mthreads \\-mno-align-stringops \\-minline-all-stringops \n \\&\\-mpush-args \\-maccumulate-outgoing-args \\-m128bit-long-double \n-\\&\\-m96bit-long-double \\-mregparm=\\fR\\fInum\\fR\n+\\&\\-m96bit-long-double \\-mregparm=\\fR\\fInum\\fR \\fB\\-momit-leaf-frame-pointer\\fR\n .Sp\n \\&\\fI\\s-1HPPA\\s0 Options\\fR\n .Sp\n@@ -833,7 +837,7 @@ C (when compiling C code), or of standard \\*(C+ (when compiling \\*(C+ code),\n such as the \\f(CW\\*(C`asm\\*(C'\\fR and \\f(CW\\*(C`typeof\\*(C'\\fR keywords, and\n predefined macros such as \\f(CW\\*(C`unix\\*(C'\\fR and \\f(CW\\*(C`vax\\*(C'\\fR that identify the\n type of system you are using.  It also enables the undesirable and\n-rarely used \\s-1ISO\\s0 trigraph feature.  For the C compiler, \n+rarely used \\s-1ISO\\s0 trigraph feature.  For the C compiler,\n it disables recognition of \\*(C+ style \\fB//\\fR comments as well as\n the \\f(CW\\*(C`inline\\*(C'\\fR keyword.\n .Sp\n@@ -861,7 +865,7 @@ functions with \\fB\\-ansi\\fR is used.\n .Ip \"\\fB\\-std=\\fR\" 4\n .IX Item \"-std=\"\n Determine the language standard.  A value for this option must be provided;\n-possible values are \n+possible values are\n .RS 4\n .Ip \"\\fBiso9899:1990\\fR\" 4\n .IX Item \"iso9899:1990\"\n@@ -1160,6 +1164,17 @@ two definitions were merged.\n .Sp\n This option is no longer useful on most targets, now that support has\n been added for putting variables into \\s-1BSS\\s0 without making them common.\n+.Ip \"\\fB\\-fno-const-strings\\fR\" 4\n+.IX Item \"-fno-const-strings\"\n+Give string constants type \\f(CW\\*(C`char *\\*(C'\\fR instead of type \\f(CW\\*(C`const\n+char *\\*(C'\\fR.  By default, G++ uses type \\f(CW\\*(C`const char *\\*(C'\\fR as required by\n+the standard.  Even if you use \\fB\\-fno-const-strings\\fR, you cannot\n+actually modify the value of a string constant, unless you also use\n+\\&\\fB\\-fwritable-strings\\fR.\n+.Sp\n+This option might be removed in a future release of G++.  For maximum\n+portability, you should structure your code so that it works with\n+string constants that have type \\f(CW\\*(C`const char *\\*(C'\\fR.\n .Ip \"\\fB\\-fdollars-in-identifiers\\fR\" 4\n .IX Item \"-fdollars-in-identifiers\"\n Accept \\fB$\\fR in identifiers.  You can also explicitly prohibit use of\n@@ -1212,7 +1227,7 @@ otherwise be invalid, or have different behavior.\n .Ip \"\\fB\\-fno-gnu-keywords\\fR\" 4\n .IX Item \"-fno-gnu-keywords\"\n Do not recognize \\f(CW\\*(C`typeof\\*(C'\\fR as a keyword, so that code can use this\n-word as an identifier. You can use the keyword \\f(CW\\*(C`_\\|_typeof_\\|_\\*(C'\\fR instead.  \n+word as an identifier. You can use the keyword \\f(CW\\*(C`_\\|_typeof_\\|_\\*(C'\\fR instead.\n \\&\\fB\\-ansi\\fR implies \\fB\\-fno-gnu-keywords\\fR.\n .Ip \"\\fB\\-fhonor-std\\fR\" 4\n .IX Item \"-fhonor-std\"\n@@ -1249,6 +1264,11 @@ errors if these functions are not inlined everywhere they are called.\n .IX Item \"-fms-extensions\"\n Disable pedantic warnings about constructs used in \\s-1MFC\\s0, such as implicit\n int and getting a pointer to member function via non-standard syntax.\n+.Ip \"\\fB\\-fno-nonansi-builtins\\fR\" 4\n+.IX Item \"-fno-nonansi-builtins\"\n+Disable builtin declarations of functions that are not mandated by\n+\\&\\s-1ANSI/ISO\\s0 C.  These include \\f(CW\\*(C`ffs\\*(C'\\fR, \\f(CW\\*(C`alloca\\*(C'\\fR, \\f(CW\\*(C`_exit\\*(C'\\fR,\n+\\&\\f(CW\\*(C`index\\*(C'\\fR, \\f(CW\\*(C`bzero\\*(C'\\fR, \\f(CW\\*(C`conjf\\*(C'\\fR, and other related functions.\n .Ip \"\\fB\\-fno-operator-names\\fR\" 4\n .IX Item \"-fno-operator-names\"\n Do not treat the operator name keywords \\f(CW\\*(C`and\\*(C'\\fR, \\f(CW\\*(C`bitand\\*(C'\\fR,\n@@ -1277,6 +1297,10 @@ functions for use by the \\*(C+ runtime type identification features\n of the language, you can save some space by using this flag.  Note that\n exception handling uses the same information, but it will generate it as\n needed.\n+.Ip \"\\fB\\-fstats\\fR\" 4\n+.IX Item \"-fstats\"\n+Emit statistics about front-end processing at the end of the compilation.\n+This information is generally only useful to the G++ development team.\n .Ip \"\\fB\\-ftemplate-depth-\\fR\\fIn\\fR\" 4\n .IX Item \"-ftemplate-depth-n\"\n Set the maximum instantiation depth for template classes to \\fIn\\fR.\n@@ -1306,6 +1330,13 @@ those.\n .Sp\n Like all options that change the \\s-1ABI\\s0, all \\*(C+ code, \\fIincluding\n libgcc.a\\fR must be built with the same setting of this option.\n+.Ip \"\\fB\\-fno-weak\\fR\" 4\n+.IX Item \"-fno-weak\"\n+Do not use weak symbol support, even if it is provied by the linker.\n+By default, G++ will use weak symbols if they are available.  This\n+option exists only for testing, and should not be used by end-users;\n+it will result in inferior code and has no benefits.  This option may\n+be removed in a future release of G++.\n .Ip \"\\fB\\-nostdinc++\\fR\" 4\n .IX Item \"-nostdinc++\"\n Do not search for header files in the standard directories specific to\n@@ -1428,6 +1459,46 @@ instance:\n .Ve\n In this example, g++ will synthesize a default \\fBA& operator =\n (const A&);\\fR, while cfront will use the user-defined \\fBoperator =\\fR.\n+.Sh \"Options Controlling Objective-C Dialect\"\n+.IX Subsection \"Options Controlling Objective-C Dialect\"\n+This section describes the command-line options that are only meaningful\n+for Objective-C programs; but you can also use most of the \\s-1GNU\\s0 compiler\n+options regardless of what language your program is in.  For example,\n+you might compile a file \\f(CW\\*(C`some_class.m\\*(C'\\fR like this:\n+.PP\n+.Vb 1\n+\\&        gcc -g -fgnu-runtime -O -c some_class.m\n+.Ve\n+In this example, only \\fB\\-fgnu-runtime\\fR is an option meant only for\n+Objective-C programs; you can use the other options with any language\n+supported by \\s-1GCC\\s0.\n+.PP\n+Here is a list of options that are \\fIonly\\fR for compiling Objective-C\n+programs:\n+.Ip \"\\fB\\-fconstant-string-class=\\fR\\fIclass name\\fR\" 4\n+.IX Item \"-fconstant-string-class=class name\"\n+Use \\fIclass name\\fR as the name of the class to instantiate for each\n+literal string specified with the syntax \\f(CW\\*(C`@\"...\"\\*(C'\\fR.  The default\n+class name is \\f(CW\\*(C`NXConstantString\\*(C'\\fR.\n+.Ip \"\\fB\\-fgnu-runtime\\fR\" 4\n+.IX Item \"-fgnu-runtime\"\n+Generate object code compatible with the standard \\s-1GNU\\s0 Objective-C\n+runtime.  This is the default for most types of systems.\n+.Ip \"\\fB\\-fnext-runtime\\fR\" 4\n+.IX Item \"-fnext-runtime\"\n+Generate output compatible with the NeXT runtime.  This is the default\n+for NeXT-based systems, including Darwin and Mac \\s-1OS\\s0 X.\n+.Ip \"\\fB\\-gen-decls\\fR\" 4\n+.IX Item \"-gen-decls\"\n+Dump interface declarations for all classes seen in the source file to a\n+file named \\fI\\fIsourcename\\fI.decl\\fR.\n+.Ip \"\\fB\\-Wno-protocol\\fR\" 4\n+.IX Item \"-Wno-protocol\"\n+Do not warn if methods required by a protocol are not implemented\n+in the class adopting it.\n+.Ip \"\\fB\\-Wselector\\fR\" 4\n+.IX Item \"-Wselector\"\n+Warn if a selector has multiple methods of different types defined.\n .Sh \"Options to Control Diagnostic Messages Formatting\"\n .IX Subsection \"Options to Control Diagnostic Messages Formatting\"\n Traditionally, diagnostic messages have been formatted irrespective of\n@@ -1436,13 +1507,13 @@ below can be used to control the diagnostic messages formatting\n algorithm, e.g. how many characters per line, how often source location\n information should be reported.  Right now, only the \\*(C+ front-end can\n honor these options.  However it is expected, in the near future, that\n-the remaining front-ends would be able to digest them correctly. \n+the remaining front-ends would be able to digest them correctly.\n .Ip \"\\fB\\-fmessage-length=\\fR\\fIn\\fR\" 4\n .IX Item \"-fmessage-length=n\"\n Try to format error messages so that they fit on lines of about \\fIn\\fR\n characters.  The default is 72 characters for g++ and 0 for the rest of\n the front-ends supported by \\s-1GCC\\s0.  If \\fIn\\fR is zero, then no\n-line-wrapping will be done; each error message will appear on a single \n+line-wrapping will be done; each error message will appear on a single\n line.\n .Ip \"\\fB\\-fdiagnostics-show-location=once\\fR\" 4\n .IX Item \"-fdiagnostics-show-location=once\"\n@@ -1451,7 +1522,7 @@ reporter to emit \\fIonce\\fR source location information; that is, in\n case the message is too long to fit on a single physical line and has to\n be wrapped, the source location won't be emitted (as prefix) again,\n over and over, in subsequent continuation lines.  This is the default\n-behaviour. \n+behaviour.\n .Ip \"\\fB\\-fdiagnostics-show-location=every-line\\fR\" 4\n .IX Item \"-fdiagnostics-show-location=every-line\"\n Only meaningful in line-wrapping mode.  Instructs the diagnostic\n@@ -1504,6 +1575,16 @@ A feature to report any failure to conform to \\s-1ISO\\s0 C might be useful in\n some instances, but would require considerable additional work and would\n be quite different from \\fB\\-pedantic\\fR.  We don't have plans to\n support such a feature in the near future.\n+.Sp\n+Where the standard specified with \\fB\\-std\\fR represents a \\s-1GNU\\s0\n+extended dialect of C, such as \\fBgnu89\\fR or \\fBgnu99\\fR, there is a\n+corresponding \\fIbase standard\\fR, the version of \\s-1ISO\\s0 C on which the \\s-1GNU\\s0\n+extended dialect is based.  Warnings from \\fB\\-pedantic\\fR are given\n+where they are required by the base standard.  (It would not make sense\n+for such warnings to be given only for features not in the specified \\s-1GNU\\s0\n+C dialect, since by definition the \\s-1GNU\\s0 dialects of C include all\n+features the compiler supports with the given option, and there would be\n+nothing to warn about.)\n .Ip \"\\fB\\-pedantic-errors\\fR\" 4\n .IX Item \"-pedantic-errors\"\n Like \\fB\\-pedantic\\fR, except that errors are produced rather than\n@@ -1706,7 +1787,7 @@ D. Hugh Redelmeier\n .IX Item \"-Wreturn-type\"\n Warn whenever a function is defined with a return-type that defaults to\n \\&\\f(CW\\*(C`int\\*(C'\\fR.  Also warn about any \\f(CW\\*(C`return\\*(C'\\fR statement with no\n-return-value in a function whose return-type is not \\f(CW\\*(C`void\\*(C'\\fR. \n+return-value in a function whose return-type is not \\f(CW\\*(C`void\\*(C'\\fR.\n .Sp\n For \\*(C+, a function without return type always produces a diagnostic\n message, even when \\fB\\-Wno-return-type\\fR is specified. The only\n@@ -2107,7 +2188,7 @@ appropriate may not be detected.  This option has no effect unless\n .Ip \"\\fB\\-Wpacked\\fR\" 4\n .IX Item \"-Wpacked\"\n Warn if a structure is given the packed attribute, but the packed\n-attribute has no effect on the layout or size of the structure.  \n+attribute has no effect on the layout or size of the structure.\n Such structures may be mis-aligned for little benefit.  For\n instance, in this code, the variable \\f(CW\\*(C`f.x\\*(C'\\fR in \\f(CW\\*(C`struct bar\\*(C'\\fR\n will be misaligned even though \\f(CW\\*(C`struct bar\\*(C'\\fR does not itself\n@@ -2150,7 +2231,7 @@ are circumstances under which part of the affected line can be executed,\n so care should be taken when removing apparently-unreachable code.\n .Sp\n For instance, when a function is inlined, a warning may mean that the\n-line is unreachable in only one inlined copy of the function.  \n+line is unreachable in only one inlined copy of the function.\n .Sp\n This option is not made part of \\fB\\-Wall\\fR because in a debugging\n version of a program there is often substantial code which checks\n@@ -2456,7 +2537,7 @@ block and arc execution counts from the information in the\n Says to make debugging dumps during compilation at times specified by\n \\&\\fIletters\\fR.  This is used for debugging the compiler.  The file names\n for most of the dumps are made by appending a pass number and a word to\n-the source file name (e.g.  \\fIfoo.c.00.rtl\\fR or \\fIfoo.c.01.sibling\\fR). \n+the source file name (e.g.  \\fIfoo.c.00.rtl\\fR or \\fIfoo.c.01.sibling\\fR).\n Here are the possible letters for use in \\fIletters\\fR, and their meanings:\n .RS 4\n .Ip \"\\fBA\\fR\" 4\n@@ -2524,7 +2605,7 @@ Dump after loop optimization, to \\fI\\fIfile\\fI.09.loop\\fR.\n .Ip \"\\fBM\\fR\" 4\n .IX Item \"M\"\n Dump after performing the machine dependent reorganisation pass, to\n-\\&\\fI\\fIfile\\fI.28.mach\\fR. \n+\\&\\fI\\fIfile\\fI.28.mach\\fR.\n .Ip \"\\fBn\\fR\" 4\n .IX Item \"n\"\n Dump after register renumbering, to \\fI\\fIfile\\fI.23.rnreg\\fR.\n@@ -2541,7 +2622,7 @@ Dump after the second instruction scheduling pass, to\n .Ip \"\\fBs\\fR\" 4\n .IX Item \"s\"\n Dump after \\s-1CSE\\s0 (including the jump optimization that sometimes follows\n-\\&\\s-1CSE\\s0), to \\fI\\fIfile\\fI.03.cse\\fR. \n+\\&\\s-1CSE\\s0), to \\fI\\fIfile\\fI.03.cse\\fR.\n .Ip \"\\fBS\\fR\" 4\n .IX Item \"S\"\n Dump after the first instruction scheduling pass, to\n@@ -2822,13 +2903,13 @@ assembler code in its own right.\n .IX Item \"-finline-limit=n\"\n By default, gcc limits the size of functions that can be inlined.  This flag\n allows the control of this limit for functions that are explicitly marked as\n-inline (ie marked with the inline keyword or defined within the class \n-definition in c++).  \\fIn\\fR is the size of functions that can be inlined in \n+inline (ie marked with the inline keyword or defined within the class\n+definition in c++).  \\fIn\\fR is the size of functions that can be inlined in\n number of pseudo instructions (not counting parameter handling).  The default\n value of n is 10000.  Increasing this value can result in more inlined code at\n the cost of compilation time and memory consumption.  Decreasing usually makes\n-the compilation faster and less code will be inlined (which presumably \n-means slower programs).  This option is particularly useful for programs that \n+the compilation faster and less code will be inlined (which presumably\n+means slower programs).  This option is particularly useful for programs that\n use inlining heavily such as those based on recursive templates with c++.\n .Sp\n \\&\\fINote:\\fR pseudo instruction represents, in this particular context, an\n@@ -2886,7 +2967,7 @@ sets \\fB\\-fno-math-errno\\fR.\n .IX Item \"-funsafe-math-optimizations\"\n Allow optimizations for floating-point arithmetic that (a) assume\n that arguments and results are valid and (b) may violate \\s-1IEEE\\s0 or\n-\\&\\s-1ANSI\\s0 standards.  \n+\\&\\s-1ANSI\\s0 standards.\n .Sp\n This option should never be turned on by any \\fB\\-O\\fR option since\n it can result in incorrect output for programs which depend on\n@@ -2958,10 +3039,10 @@ This pass also performs global constant and copy propagation.\n When \\-fgcse-lm is enabled, global common subexpression elimination will\n attempt to move loads which are only killed by stores into themselves. This\n allows a loop containing a load/store sequence to be changed to a load outside\n-the loop, and a copy/store within the loop. \n+the loop, and a copy/store within the loop.\n .Ip \"\\fB\\-fgcse-sm\\fR\" 4\n .IX Item \"-fgcse-sm\"\n-When \\-fgcse-sm is enabled, A store motion pass is run after global common \n+When \\-fgcse-sm is enabled, A store motion pass is run after global common\n subexpression elimination. This pass will attempt to move stores out of loops.\n When used in conjunction with \\-fgcse-lm, loops containing a load/store sequence\n can be changed to a load before the loop and a store after the loop.\n@@ -3104,12 +3185,12 @@ object of one type is assumed never to reside at the same address as an\n object of a different type, unless the types are almost the same.  For\n example, an \\f(CW\\*(C`unsigned int\\*(C'\\fR can alias an \\f(CW\\*(C`int\\*(C'\\fR, but not a\n \\&\\f(CW\\*(C`void*\\*(C'\\fR or a \\f(CW\\*(C`double\\*(C'\\fR.  A character type may alias any other\n-type.  \n+type.\n .Sp\n Pay special attention to code like this:\n .Sp\n .Vb 4\n-\\&        union a_union { \n+\\&        union a_union {\n \\&          int i;\n \\&          double d;\n \\&        };\n@@ -3128,7 +3209,7 @@ is accessed through the union type.  So, the code above will work as\n expected.  However, this code might not:\n .Sp\n .Vb 7\n-\\&        int f() { \n+\\&        int f() {\n \\&          a_union t;\n \\&          int* ip;\n \\&          t.d = 3.0;\n@@ -3222,22 +3303,38 @@ In some places, \\s-1GCC\\s0 uses various constants to control the amount of\n optimization that is done.  For example, \\s-1GCC\\s0 will not inline functions\n that contain more that a certain number of instructions.  You can\n control some of these constants on the command-line using the\n-\\&\\fB\\*(--param\\fR option.  \n+\\&\\fB\\*(--param\\fR option.\n .Sp\n In each case, the \\fIvalue\\fR is a integer.  The allowable choices for\n \\&\\fIname\\fR are given in the following table:\n .RS 4\n-.Ip \"\\fBmax-inline-insns\\fR\" 4\n-.IX Item \"max-inline-insns\"\n-If an function contains more than this many instructions, it\n-will not be inlined.  This option is precisely equivalent to\n-\\&\\fB\\-finline-limit\\fR.\n+.Ip \"\\fBmax-delay-slot-insn-search\\fR\" 4\n+.IX Item \"max-delay-slot-insn-search\"\n+The maximum number of instructions to consider when looking for an\n+instruction to fill a delay slot.  If more than this arbitrary number of\n+instructions is searched, the time savings from filling the delay slot\n+will be minimal so stop searching.  Increasing values mean more\n+aggressive optimization, making the compile time increase with probably\n+small improvement in executable run time.\n+.Ip \"\\fBmax-delay-slot-live-search\\fR\" 4\n+.IX Item \"max-delay-slot-live-search\"\n+When trying to fill delay slots, the maximum number of instructions to\n+consider when searching for a block with valid live register\n+information.  Increasing this arbitrarily chosen value means more\n+aggressive optimization, increasing the compile time.  This parameter\n+should be removed when the delay slot code is rewritten to maintain the\n+control-flow graph.\n .Ip \"\\fBmax-gcse-memory\\fR\" 4\n .IX Item \"max-gcse-memory\"\n The approximate maximum amount of memory that will be allocated in\n order to perform the global common subexpression elimination\n optimization.  If more memory than specified is required, the\n optimization will not be done.\n+.Ip \"\\fBmax-inline-insns\\fR\" 4\n+.IX Item \"max-inline-insns\"\n+If an function contains more than this many instructions, it\n+will not be inlined.  This option is precisely equivalent to\n+\\&\\fB\\-finline-limit\\fR.\n .RE\n .RS 4\n .RE\n@@ -3547,10 +3644,16 @@ If any of these options is used, then the linker is not run, and\n object file names should not be used as arguments.  \n .Ip \"\\fB\\-l\\fR\\fIlibrary\\fR\" 4\n .IX Item \"-llibrary\"\n-Search the library named \\fIlibrary\\fR when linking.\n+.PD 0\n+.Ip \"\\fB\\-l\\fR \\fIlibrary\\fR\" 4\n+.IX Item \"-l library\"\n+.PD\n+Search the library named \\fIlibrary\\fR when linking.  (The second\n+alternative with the library as a separate argument is only for\n+\\&\\s-1POSIX\\s0 compliance and is not recommended.)\n .Sp\n It makes a difference where in the command you write this option; the\n-linker searches processes libraries and object files in the order they\n+linker searches and processes libraries and object files in the order they\n are specified.  Thus, \\fBfoo.o \\-lz bar.o\\fR searches library \\fBz\\fR\n after file \\fIfoo.o\\fR but before \\fIbar.o\\fR.  If \\fIbar.o\\fR refers\n to functions in \\fBz\\fR, those functions may not be loaded.\n@@ -3621,7 +3724,7 @@ libraries.  On other systems, this option has no effect.\n .IX Item \"-shared\"\n Produce a shared object which can then be linked with other objects to\n form an executable.  Not all systems support this option.  For predictable\n-results, you must also specify the same set of options that were used to \n+results, you must also specify the same set of options that were used to\n generate code (\\fB\\-fpic\\fR, \\fB\\-fPIC\\fR, or model suboptions)\n when you specify this option.[1]\n .Ip \"\\fB\\-shared-libgcc\\fR\" 4\n@@ -3915,7 +4018,7 @@ Use this option for microcontrollers with a\n Generate output for a 520X \\*(L\"coldfire\\*(R\" family cpu.  This is the default\n when the compiler is configured for 520X-based systems.\n .Sp\n-Use this option for microcontroller with a 5200 core, including \n+Use this option for microcontroller with a 5200 core, including\n the \\s-1MCF5202\\s0, \\s-1MCF5203\\s0, \\s-1MCF5204\\s0 and \\s-1MCF5202\\s0.\n .Ip \"\\fB\\-m68020\\-40\\fR\" 4\n .IX Item \"-m68020-40\"\n@@ -3982,7 +4085,7 @@ The \\f(CW\\*(C`rtd\\*(C'\\fR instruction is supported by the 68010, 68020, 68030,\n .Ip \"\\fB\\-mno-align-int\\fR\" 4\n .IX Item \"-mno-align-int\"\n .PD\n-Control whether \\s-1GCC\\s0 aligns \\f(CW\\*(C`int\\*(C'\\fR, \\f(CW\\*(C`long\\*(C'\\fR, \\f(CW\\*(C`long long\\*(C'\\fR, \n+Control whether \\s-1GCC\\s0 aligns \\f(CW\\*(C`int\\*(C'\\fR, \\f(CW\\*(C`long\\*(C'\\fR, \\f(CW\\*(C`long long\\*(C'\\fR,\n \\&\\f(CW\\*(C`float\\*(C'\\fR, \\f(CW\\*(C`double\\*(C'\\fR, and \\f(CW\\*(C`long double\\*(C'\\fR variables on a 32\\-bit\n boundary (\\fB\\-malign-int\\fR) or a 16\\-bit boundary (\\fB\\-mno-align-int\\fR).\n Aligning variables on 32\\-bit boundaries produces code that runs somewhat\n@@ -4011,7 +4114,7 @@ the system.\n .IX Subsection \"M68hc1x Options\"\n .PP\n These are the \\fB\\-m\\fR options defined for the 68hc11 and 68hc12\n-microcontrollers.  The default values for these options depends on \n+microcontrollers.  The default values for these options depends on\n which style of microcontroller was selected when the compiler was configured;\n the defaults for the most common choices are given below.\n .Ip \"\\fB\\-m6811\\fR\" 4\n@@ -4272,7 +4375,7 @@ overflow trap handler will properly handle this case as will interrupt\n handlers.\n .PP\n These \\fB\\-m\\fR switches are supported in addition to the above\n-on \\s-1SPARC\\s0 V9 processors in 64 bit environments.\n+on \\s-1SPARC\\s0 V9 processors in 64\\-bit environments.\n .Ip \"\\fB\\-mlittle-endian\\fR\" 4\n .IX Item \"-mlittle-endian\"\n Generate code for a processor running in little-endian mode.\n@@ -4282,9 +4385,9 @@ Generate code for a processor running in little-endian mode.\n .Ip \"\\fB\\-m64\\fR\" 4\n .IX Item \"-m64\"\n .PD\n-Generate code for a 32 bit or 64 bit environment.\n-The 32 bit environment sets int, long and pointer to 32 bits.\n-The 64 bit environment sets int to 32 bits and long and pointer\n+Generate code for a 32\\-bit or 64\\-bit environment.\n+The 32\\-bit environment sets int, long and pointer to 32 bits.\n+The 64\\-bit environment sets int to 32 bits and long and pointer\n to 64 bits.\n .Ip \"\\fB\\-mcmodel=medlow\\fR\" 4\n .IX Item \"-mcmodel=medlow\"\n@@ -4306,9 +4409,9 @@ Pointers are 64 bits.\n .Ip \"\\fB\\-mcmodel=embmedany\\fR\" 4\n .IX Item \"-mcmodel=embmedany\"\n Generate code for the Medium/Anywhere code model for embedded systems:\n-assume a 32 bit text and a 32 bit data segment, both starting anywhere\n+assume a 32\\-bit text and a 32\\-bit data segment, both starting anywhere\n (determined at link time).  Register \\f(CW%g4\\fR points to the base of the\n-data segment.  Pointers still 64 bits.\n+data segment.  Pointers are still 64 bits.\n Programs are statically linked, \\s-1PIC\\s0 is not supported.\n .Ip \"\\fB\\-mstack-bias\\fR\" 4\n .IX Item \"-mstack-bias\"\n@@ -4591,21 +4694,21 @@ address is aligned to a word boundary.\n .Sp\n This option is ignored when compiling for \\s-1ARM\\s0 architecture 4 or later,\n since these processors have instructions to directly access half-word\n-objects in memory. \n+objects in memory.\n .Ip \"\\fB\\-mno-alignment-traps\\fR\" 4\n .IX Item \"-mno-alignment-traps\"\n Generate code that assumes that the \\s-1MMU\\s0 will not trap unaligned\n accesses.  This produces better code when the target instruction set\n does not have half-word memory operations (implementations prior to\n-ARMv4). \n+ARMv4).\n .Sp\n Note that you cannot use this option to access unaligned word objects,\n since the processor will only fetch one 32\\-bit aligned object from\n-memory. \n+memory.\n .Sp\n The default setting for most targets is \\-mno-alignment-traps, since\n this produces better code when there are no half-word memory\n-instructions available. \n+instructions available.\n .Ip \"\\fB\\-mshort-load-bytes\\fR\" 4\n .IX Item \"-mshort-load-bytes\"\n This is a deprecated alias for \\fB\\-malignment-traps\\fR.\n@@ -4695,7 +4798,7 @@ Tells the compiler to perform function calls by first loading the\n address of the function into a register and then performing a subroutine\n call on this register.  This switch is needed if the target function\n will lie outside of the 64 megabyte addressing range of the offset based\n-version of subroutine call instruction. \n+version of subroutine call instruction.\n .Sp\n Even if this switch is enabled, not all function calls will be turned\n into long calls.  The heuristic is that static functions, functions\n@@ -4713,7 +4816,7 @@ This feature is not enabled by default.  Specifying\n placing the function calls within the scope of a \\fB#pragma\n long_calls_off\\fR directive.  Note these switches have no effect on how\n the compiler generates code to handle function calls via function\n-pointers.  \n+pointers.\n .Ip \"\\fB\\-mnop-fun-dllimport\\fR\" 4\n .IX Item \"-mnop-fun-dllimport\"\n Disable the support for the \\fIdllimport\\fR attribute.\n@@ -4741,12 +4844,12 @@ with this option.\n .IX Item \"-mtpcs-frame\"\n Generate a stack frame that is compliant with the Thumb Procedure Call\n Standard for all non-leaf functions.  (A leaf function is one that does\n-not call any other functions).  The default is \\fB\\-mno-apcs-frame\\fR. \n+not call any other functions).  The default is \\fB\\-mno-apcs-frame\\fR.\n .Ip \"\\fB\\-mtpcs-leaf-frame\\fR\" 4\n .IX Item \"-mtpcs-leaf-frame\"\n Generate a stack frame that is compliant with the Thumb Procedure Call\n Standard for all leaf functions.  (A leaf function is one that does\n-not call any other functions).  The default is \\fB\\-mno-apcs-leaf-frame\\fR. \n+not call any other functions).  The default is \\fB\\-mno-apcs-leaf-frame\\fR.\n .Ip \"\\fB\\-mlittle-endian\\fR\" 4\n .IX Item \"-mlittle-endian\"\n Generate code for a processor running in little-endian mode.  This is\n@@ -4801,7 +4904,7 @@ Indicate to the linker that it should perform a relaxation optimization pass\n to shorten branches, calls and absolute memory addresses.  This option only\n has an effect when used on the command line for the final link step.\n .Sp\n-This option makes symbolic debugging impossible. \n+This option makes symbolic debugging impossible.\n .PP\n .I \"\\s-1MN10300\\s0 Options\"\n .IX Subsection \"MN10300 Options\"\n@@ -4828,7 +4931,7 @@ Indicate to the linker that it should perform a relaxation optimization pass\n to shorten branches, calls and absolute memory addresses.  This option only\n has an effect when used on the command line for the final link step.\n .Sp\n-This option makes symbolic debugging impossible. \n+This option makes symbolic debugging impossible.\n .PP\n .I \"M32R/D Options\"\n .IX Subsection \"M32R/D Options\"\n@@ -4845,12 +4948,12 @@ The addressability of a particular object can be set with the\n \\&\\f(CW\\*(C`model\\*(C'\\fR attribute.\n .Ip \"\\fB\\-mcode-model=medium\\fR\" 4\n .IX Item \"-mcode-model=medium\"\n-Assume objects may be anywhere in the 32 bit address space (the compiler\n+Assume objects may be anywhere in the 32\\-bit address space (the compiler\n will generate \\f(CW\\*(C`seth/add3\\*(C'\\fR instructions to load their addresses), and\n assume all subroutines are reachable with the \\f(CW\\*(C`bl\\*(C'\\fR instruction.\n .Ip \"\\fB\\-mcode-model=large\\fR\" 4\n .IX Item \"-mcode-model=large\"\n-Assume objects may be anywhere in the 32 bit address space (the compiler\n+Assume objects may be anywhere in the 32\\-bit address space (the compiler\n will generate \\f(CW\\*(C`seth/add3\\*(C'\\fR instructions to load their addresses), and\n assume subroutines may not be reachable with the \\f(CW\\*(C`bl\\*(C'\\fR instruction\n (the compiler will generate the much slower \\f(CW\\*(C`seth/add3/jl\\*(C'\\fR\n@@ -5193,19 +5296,19 @@ specify generic \\s-1POWER\\s0, \\s-1POWER2\\s0, pure 32\\-bit PowerPC (i.e., not \\s-\n and 64\\-bit PowerPC architecture machine types, with an appropriate,\n generic processor model assumed for scheduling purposes.\n .Sp\n-Specifying any of the following options: \n+Specifying any of the following options:\n \\&\\fB\\-mcpu=rios1\\fR, \\fB\\-mcpu=rios2\\fR, \\fB\\-mcpu=rsc\\fR,\n-\\&\\fB\\-mcpu=power\\fR, or \\fB\\-mcpu=power2\\fR  \n-enables the \\fB\\-mpower\\fR option and disables the \\fB\\-mpowerpc\\fR option; \n+\\&\\fB\\-mcpu=power\\fR, or \\fB\\-mcpu=power2\\fR\n+enables the \\fB\\-mpower\\fR option and disables the \\fB\\-mpowerpc\\fR option;\n \\&\\fB\\-mcpu=601\\fR enables both the \\fB\\-mpower\\fR and \\fB\\-mpowerpc\\fR options.\n All of \\fB\\-mcpu=rs64a\\fR, \\fB\\-mcpu=602\\fR, \\fB\\-mcpu=603\\fR,\n \\&\\fB\\-mcpu=603e\\fR, \\fB\\-mcpu=604\\fR, \\fB\\-mcpu=620\\fR, \\fB\\-mcpu=630\\fR,\n \\&\\fB\\-mcpu=740\\fR, and \\fB\\-mcpu=750\\fR\n-enable the \\fB\\-mpowerpc\\fR option and disable the \\fB\\-mpower\\fR option.  \n+enable the \\fB\\-mpowerpc\\fR option and disable the \\fB\\-mpower\\fR option.\n Exactly similarly, all of \\fB\\-mcpu=403\\fR,\n-\\&\\fB\\-mcpu=505\\fR, \\fB\\-mcpu=821\\fR, \\fB\\-mcpu=860\\fR and \\fB\\-mcpu=powerpc\\fR \n+\\&\\fB\\-mcpu=505\\fR, \\fB\\-mcpu=821\\fR, \\fB\\-mcpu=860\\fR and \\fB\\-mcpu=powerpc\\fR\n enable the \\fB\\-mpowerpc\\fR option and disable the \\fB\\-mpower\\fR option.\n-\\&\\fB\\-mcpu=common\\fR disables both the \n+\\&\\fB\\-mcpu=common\\fR disables both the\n \\&\\fB\\-mpower\\fR and \\fB\\-mpowerpc\\fR options.\n .Sp\n \\&\\s-1AIX\\s0 versions 4 or greater selects \\fB\\-mcpu=common\\fR by default, so\n@@ -5656,7 +5759,7 @@ root instructions).  \\fBr6000\\fR is the default \\fIcpu type\\fR at this\n \\&\\s-1ISA\\s0 level.\n .Ip \"\\fB\\-mips3\\fR\" 4\n .IX Item \"-mips3\"\n-Issue instructions from level 3 of the \\s-1MIPS\\s0 \\s-1ISA\\s0 (64 bit instructions).\n+Issue instructions from level 3 of the \\s-1MIPS\\s0 \\s-1ISA\\s0 (64\\-bit instructions).\n \\&\\fBr4000\\fR is the default \\fIcpu type\\fR at this \\s-1ISA\\s0 level.\n .Ip \"\\fB\\-mips4\\fR\" 4\n .IX Item \"-mips4\"\n@@ -5950,7 +6053,7 @@ is equivalent to \\fBpentiumpro\\fR.  \\fBk6\\fR and \\fBathlon\\fR are the\n .Ip \"\\fB\\-march=\\fR\\fIcpu type\\fR\" 4\n .IX Item \"-march=cpu type\"\n Generate instructions for the machine type \\fIcpu type\\fR.  The choices\n-for \\fIcpu type\\fR are the same as for \\fB\\-mcpu\\fR.  Moreover, \n+for \\fIcpu type\\fR are the same as for \\fB\\-mcpu\\fR.  Moreover,\n specifying \\fB\\-march=\\fR\\fIcpu type\\fR implies \\fB\\-mcpu=\\fR\\fIcpu type\\fR.\n .Ip \"\\fB\\-m386\\fR\" 4\n .IX Item \"-m386\"\n@@ -6031,7 +6134,7 @@ impossible to reach with 12 byte long doubles in the array accesses.\n \\&\\fBWarning:\\fR if you use the \\fB\\-m128bit-long-double\\fR switch, the\n structures and arrays containing \\f(CW\\*(C`long double\\*(C'\\fR will change their size as\n well as function calling convention for function taking \\f(CW\\*(C`long double\\*(C'\\fR\n-will be modified. \n+will be modified.\n .Ip \"\\fB\\-m96bit-long-double\\fR\" 4\n .IX Item \"-m96bit-long-double\"\n .PD 0\n@@ -6056,7 +6159,7 @@ These options are meaningful only on System V Release 3.\n .IX Item \"-mwide-multiply\"\n .PD\n Control whether \\s-1GCC\\s0 uses the \\f(CW\\*(C`mul\\*(C'\\fR and \\f(CW\\*(C`imul\\*(C'\\fR that produce\n-64 bit results in \\f(CW\\*(C`eax:edx\\*(C'\\fR from 32 bit operands to do \\f(CW\\*(C`long\n+64\\-bit results in \\f(CW\\*(C`eax:edx\\*(C'\\fR from 32\\-bit operands to do \\f(CW\\*(C`long\n long\\*(C'\\fR multiplies and 32\\-bit division by constants.\n .Ip \"\\fB\\-mrtd\\fR\" 4\n .IX Item \"-mrtd\"\n@@ -6094,26 +6197,6 @@ function by using the function attribute \\fBregparm\\fR.\n \\&\\fInum\\fR is nonzero, then you must build all modules with the same\n value, including any libraries.  This includes the system libraries and\n startup modules.\n-.Ip \"\\fB\\-malign-loops=\\fR\\fInum\\fR\" 4\n-.IX Item \"-malign-loops=num\"\n-Align loops to a 2 raised to a \\fInum\\fR byte boundary.  If\n-\\&\\fB\\-malign-loops\\fR is not specified, the default is 2 unless\n-gas 2.8 (or later) is being used in which case the default is\n-to align the loop on a 16 byte boundary if it is less than 8\n-bytes away.\n-.Ip \"\\fB\\-malign-jumps=\\fR\\fInum\\fR\" 4\n-.IX Item \"-malign-jumps=num\"\n-Align instructions that are only jumped to to a 2 raised to a \\fInum\\fR\n-byte boundary.  If \\fB\\-malign-jumps\\fR is not specified, the default is\n-2 if optimizing for a 386, and 4 if optimizing for a 486 unless\n-gas 2.8 (or later) is being used in which case the default is\n-to align the instruction on a 16 byte boundary if it is less\n-than 8 bytes away.\n-.Ip \"\\fB\\-malign-functions=\\fR\\fInum\\fR\" 4\n-.IX Item \"-malign-functions=num\"\n-Align the start of functions to a 2 raised to \\fInum\\fR byte boundary.\n-If \\fB\\-malign-functions\\fR is not specified, the default is 2 if optimizing\n-for a 386, and 4 if optimizing for a 486.\n .Ip \"\\fB\\-mpreferred-stack-boundary=\\fR\\fInum\\fR\" 4\n .IX Item \"-mpreferred-stack-boundary=num\"\n Attempt to keep the stack boundary aligned to a 2 raised to \\fInum\\fR\n@@ -6128,7 +6211,7 @@ Streaming \\s-1SIMD\\s0 Extension (\\s-1SSE\\s0) data type \\f(CW\\*(C`_\\|_m128\\*(C'\\f\n penalties if it is not 16 byte aligned.\n .Sp\n To ensure proper alignment of this values on the stack, the stack boundary\n-must be as aligned as that required by any value stored on the stack. \n+must be as aligned as that required by any value stored on the stack.\n Further, every function must be generated such that it keeps the stack\n aligned.  Thus calling a function compiled with a higher preferred\n stack boundary from a function compiled with a lower preferred stack\n@@ -6154,10 +6237,10 @@ when preferred stack boundary is not equal to 2.  The drawback is a notable\n increase in code size. This switch implies \\-mno-push-args.\n .Ip \"\\fB\\-mthreads\\fR\" 4\n .IX Item \"-mthreads\"\n-Support thread-safe exception handling on \\fBMingw32\\fR. Code that relies \n-on thread-safe exception handling must compile and link all code with the \n-\\&\\fB\\-mthreads\\fR option. When compiling, \\fB\\-mthreads\\fR defines \n-\\&\\fB\\-D_MT\\fR; when linking, it links in a special thread helper library \n+Support thread-safe exception handling on \\fBMingw32\\fR. Code that relies\n+on thread-safe exception handling must compile and link all code with the\n+\\&\\fB\\-mthreads\\fR option. When compiling, \\fB\\-mthreads\\fR defines\n+\\&\\fB\\-D_MT\\fR; when linking, it links in a special thread helper library\n \\&\\fB\\-lmingwthrd\\fR which cleans up per thread exception handling data.\n .Ip \"\\fB\\-mno-align-stringops\\fR\" 4\n .IX Item \"-mno-align-stringops\"\n@@ -6170,6 +6253,13 @@ By default \\s-1GCC\\s0 inlines string operations only when destination is known t\n aligned at least to 4 byte boundary. This enables more inlining, increase code\n size, but may improve performance of code that depends on fast memcpy, strlen\n and memset for short lengths.\n+.Ip \"\\fB\\-momit-leaf-frame-pointer\\fR\" 4\n+.IX Item \"-momit-leaf-frame-pointer\"\n+Don't keep the frame pointer in a register for leaf functions.  This\n+avoids the instructions to save, set up and restore frame pointers and\n+makes an extra register available in leaf functions.  The option\n+\\&\\fB\\-fomit-frame-pointer\\fR removes the frame pointer for all functions\n+which might make debugging harder.\n .PP\n .I \"\\s-1HPPA\\s0 Options\"\n .IX Subsection \"HPPA Options\"\n@@ -6187,7 +6277,7 @@ other way around.\n .Sp\n \\&\\s-1PA\\s0 2.0 support currently requires gas snapshot 19990413 or later.  The\n next release of binutils (current is 2.9.1) will probably contain \\s-1PA\\s0 2.0\n-support.  \n+support.\n .Ip \"\\fB\\-mpa-risc-1\\-0\\fR\" 4\n .IX Item \"-mpa-risc-1-0\"\n .PD 0\n@@ -6244,8 +6334,8 @@ Enable the use of assembler directives only \\s-1GAS\\s0 understands.\n .Ip \"\\fB\\-mschedule=\\fR\\fIcpu type\\fR\" 4\n .IX Item \"-mschedule=cpu type\"\n Schedule code according to the constraints for the machine type\n-\\&\\fIcpu type\\fR.  The choices for \\fIcpu type\\fR are \\fB700\\fR \n-\\&\\fB7100\\fR, \\fB7100LC\\fR, \\fB7200\\fR, and \\fB8000\\fR.  Refer to \n+\\&\\fIcpu type\\fR.  The choices for \\fIcpu type\\fR are \\fB700\\fR\n+\\&\\fB7100\\fR, \\fB7100LC\\fR, \\fB7200\\fR, and \\fB8000\\fR.  Refer to\n \\&\\fI/usr/lib/sched.models\\fR on an \\s-1HP-UX\\s0 system to determine the\n proper scheduling option for your machine.\n .Ip \"\\fB\\-mlinker-opt\\fR\" 4\n@@ -6381,7 +6471,7 @@ These \\fB\\-m\\fR options are defined for the \\s-1DEC\\s0 Alpha implementations:\n .PD\n Use (do not use) the hardware floating-point instructions for\n floating-point operations.  When \\fB\\-msoft-float\\fR is specified,\n-functions in \\fIlibgcc1.c\\fR will be used to perform floating-point\n+functions in \\fIlibgcc.a\\fR will be used to perform floating-point\n operations.  Unless they are replaced by routines that emulate the\n floating-point operations, or compiled in such a way as to call such\n emulations routines, these routines will issue floating-point\n@@ -6429,8 +6519,8 @@ This is like \\fB\\-mieee\\fR except the generated code also maintains the\n code to implement fully-compliant \\s-1IEEE\\s0 math.  The option is a shorthand\n for \\fB\\-D_IEEE_FP \\-D_IEEE_FP_INEXACT\\fR plus the three following:\n \\&\\fB\\-mieee-conformant\\fR,\n-\\&\\fB\\-mfp-trap-mode=sui\\fR, \n-and \\fB\\-mtrap-precision=i\\fR.  \n+\\&\\fB\\-mfp-trap-mode=sui\\fR,\n+and \\fB\\-mtrap-precision=i\\fR.\n On some Alpha implementations the resulting code may execute\n significantly slower than the code generated by default.  Since there\n is very little code that depends on the \\fIinexact flag\\fR, you should\n@@ -6724,7 +6814,7 @@ Compile code for the processor in big endian mode.\n Compile code for the processor in little endian mode.\n .Ip \"\\fB\\-mdalign\\fR\" 4\n .IX Item \"-mdalign\"\n-Align doubles at 64 bit boundaries.  Note that this changes the calling\n+Align doubles at 64\\-bit boundaries.  Note that this changes the calling\n conventions, and thus some functions from the standard C library will\n not work unless you recompile it first with \\-mdalign.\n .Ip \"\\fB\\-mrelax\\fR\" 4\n@@ -6826,7 +6916,7 @@ memory access.\n .IX Item \"-mno-bk\"\n .PD\n Allow (disallow) allocation of general integer operands into the block\n-count register \\s-1BK\\s0. \n+count register \\s-1BK\\s0.\n .Ip \"\\fB\\-mdb\\fR\" 4\n .IX Item \"-mdb\"\n .PD 0\n@@ -7213,7 +7303,7 @@ Change only the low 8 bits of the stack pointer.\n .IX Subsection \"MCore Options\"\n .PP\n These are the \\fB\\-m\\fR options defined for the Motorola M*Core\n-processors.  \n+processors.\n .Ip \"\\fB\\-mhardlit\\fR\" 4\n .IX Item \"-mhardlit\"\n .PD 0"}, {"sha": "63b31152885b85339e22be03da8634c6ca73a914", "filename": "gcc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea548a25908e9f6f610b1e8e743a56418c352f/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea548a25908e9f6f610b1e8e743a56418c352f/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=91ea548a25908e9f6f610b1e8e743a56418c352f", "patch": "@@ -1695,6 +1695,16 @@ some instances, but would require considerable additional work and would\n be quite different from @samp{-pedantic}.  We don't have plans to\n support such a feature in the near future.\n \n+Where the standard specified with @option{-std} represents a GNU\n+extended dialect of C, such as @samp{gnu89} or @samp{gnu99}, there is a\n+corresponding @dfn{base standard}, the version of ISO C on which the GNU\n+extended dialect is based.  Warnings from @option{-pedantic} are given\n+where they are required by the base standard.  (It would not make sense\n+for such warnings to be given only for features not in the specified GNU\n+C dialect, since by definition the GNU dialects of C include all\n+features the compiler supports with the given option, and there would be\n+nothing to warn about.)\n+\n @item -pedantic-errors\n Like @samp{-pedantic}, except that errors are produced rather than\n warnings."}]}