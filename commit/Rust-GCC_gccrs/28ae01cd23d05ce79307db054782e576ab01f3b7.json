{"sha": "28ae01cd23d05ce79307db054782e576ab01f3b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhZTAxY2QyM2QwNWNlNzkzMDdkYjA1NDc4MmU1NzZhYjAxZjNiNw==", "commit": {"author": {"name": "Nicolas Koenig", "email": "koenigni@student.ethz.ch", "date": "2017-05-13T23:38:36Z"}, "committer": {"name": "Nicolas Koenig", "email": "koenigni@gcc.gnu.org", "date": "2017-05-13T23:38:36Z"}, "message": "re PR fortran/80442 (Rejects DATA statement with array slice)\n\n\n2017-05-09  Nicolas Koenig  <koenigni@student.ethz.ch>\n\n\tPR fortran/80442\n\t* array.c (gfc_ref_dimen_size): Simplify stride\n\texpression\n\t* data.c (gfc_advance_section): Simplify start,\n\tend and stride expressions\n\t(gfc_advance_section): Simplify start and end\n\texpressions\n\t(gfc_get_section_index): Simplify start expression \n\n2017-05-09  Nicolas Koenig  <koenigni@student.ethz.ch>\n\n\tPR fortran/80442\n\t* gfortran.dg/impl_do_var_data.f90: New Test\n\nFrom-SVN: r248012", "tree": {"sha": "3ca978cfd162f79396bf4315f9080c971680cedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ca978cfd162f79396bf4315f9080c971680cedb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28ae01cd23d05ce79307db054782e576ab01f3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ae01cd23d05ce79307db054782e576ab01f3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ae01cd23d05ce79307db054782e576ab01f3b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ae01cd23d05ce79307db054782e576ab01f3b7/comments", "author": null, "committer": null, "parents": [{"sha": "364490206eaee4e4da9f66e63169cc0c0ddfe40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364490206eaee4e4da9f66e63169cc0c0ddfe40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364490206eaee4e4da9f66e63169cc0c0ddfe40e"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "f962ca93f29f84b5eff7634fc35e67d78f3591df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=28ae01cd23d05ce79307db054782e576ab01f3b7", "patch": "@@ -1,3 +1,14 @@\n+2017-05-14  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/80442\n+\t* array.c (gfc_ref_dimen_size): Simplify stride\n+\texpression\n+\t* data.c (gfc_advance_section): Simplify start,\n+\tend and stride expressions\n+\t(gfc_advance_section): Simplify start and end\n+\texpressions\n+\t(gfc_get_section_index): Simplify start expression \n+\n 2017-05-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* io.c (gfc_resolve_dt): Fix returns to bool type."}, {"sha": "30656c197d07ce30a888ff01682afdd40ca46ed1", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=28ae01cd23d05ce79307db054782e576ab01f3b7", "patch": "@@ -2201,6 +2201,7 @@ gfc_ref_dimen_size (gfc_array_ref *ar, int dimen, mpz_t *result, mpz_t *end)\n   mpz_t upper, lower, stride;\n   mpz_t diff;\n   bool t;\n+  gfc_expr *stride_expr = NULL;\n \n   if (dimen < 0 || ar == NULL || dimen > ar->dimen - 1)\n     gfc_internal_error (\"gfc_ref_dimen_size(): Bad dimension\");\n@@ -2225,12 +2226,16 @@ gfc_ref_dimen_size (gfc_array_ref *ar, int dimen, mpz_t *result, mpz_t *end)\n \tmpz_set_ui (stride, 1);\n       else\n \t{\n-\t  if (ar->stride[dimen]->expr_type != EXPR_CONSTANT)\n+\t  stride_expr = gfc_copy_expr(ar->stride[dimen]); \n+\t  if(!gfc_simplify_expr(stride_expr, 1))\n+\t    gfc_internal_error(\"Simplification error\");\n+\t  if (stride_expr->expr_type != EXPR_CONSTANT)\n \t    {\n \t      mpz_clear (stride);\n \t      return false;\n \t    }\n-\t  mpz_set (stride, ar->stride[dimen]->value.integer);\n+\t  mpz_set (stride, stride_expr->value.integer);\n+\t  gfc_free_expr(stride_expr);\n \t}\n \n       /* Calculate the number of elements via gfc_dep_differce, but only if"}, {"sha": "587161ff09dd1354efde0b81e81cc1940c6ab6d6", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=28ae01cd23d05ce79307db054782e576ab01f3b7", "patch": "@@ -539,6 +539,7 @@ gfc_advance_section (mpz_t *section_index, gfc_array_ref *ar,\n   mpz_t tmp; \n   bool forwards;\n   int cmp;\n+  gfc_expr *start, *end, *stride;\n \n   for (i = 0; i < ar->dimen; i++)\n     {\n@@ -547,12 +548,16 @@ gfc_advance_section (mpz_t *section_index, gfc_array_ref *ar,\n \n       if (ar->stride[i])\n \t{\n+\t  stride = gfc_copy_expr(ar->stride[i]);\n+\t  if(!gfc_simplify_expr(stride, 1))\n+\t    gfc_internal_error(\"Simplification error\");\n \t  mpz_add (section_index[i], section_index[i],\n-\t\t   ar->stride[i]->value.integer);\n-\tif (mpz_cmp_si (ar->stride[i]->value.integer, 0) >= 0)\n-\t  forwards = true;\n-\telse\n-\t  forwards = false;\n+\t\t   stride->value.integer);\n+\t  if (mpz_cmp_si (stride->value.integer, 0) >= 0)\n+\t    forwards = true;\n+\t  else\n+\t    forwards = false;\n+\t  gfc_free_expr(stride);\t\n \t}\n       else\n \t{\n@@ -561,15 +566,27 @@ gfc_advance_section (mpz_t *section_index, gfc_array_ref *ar,\n \t}\n       \n       if (ar->end[i])\n-\tcmp = mpz_cmp (section_index[i], ar->end[i]->value.integer);\n+        {\n+\t  end = gfc_copy_expr(ar->end[i]);\n+\t  if(!gfc_simplify_expr(end, 1))\n+\t    gfc_internal_error(\"Simplification error\");\n+\t  cmp = mpz_cmp (section_index[i], end->value.integer);\n+\t  gfc_free_expr(end);\t\n+\t}\n       else\n \tcmp = mpz_cmp (section_index[i], ar->as->upper[i]->value.integer);\n \n       if ((cmp > 0 && forwards) || (cmp < 0 && !forwards))\n \t{\n \t  /* Reset index to start, then loop to advance the next index.  */\n \t  if (ar->start[i])\n-\t    mpz_set (section_index[i], ar->start[i]->value.integer);\n+\t    {\n+\t      start = gfc_copy_expr(ar->start[i]);\n+\t      if(!gfc_simplify_expr(start, 1))\n+\t        gfc_internal_error(\"Simplification error\");\n+\t      mpz_set (section_index[i], start->value.integer);\n+\t      gfc_free_expr(start); \n+\t    }\n \t  else\n \t    mpz_set (section_index[i], ar->as->lower[i]->value.integer);\n \t}\n@@ -679,6 +696,7 @@ gfc_get_section_index (gfc_array_ref *ar, mpz_t *section_index, mpz_t *offset)\n   int i;\n   mpz_t delta;\n   mpz_t tmp;\n+  gfc_expr *start;\n \n   mpz_set_si (*offset, 0);\n   mpz_init (tmp);\n@@ -692,11 +710,15 @@ gfc_get_section_index (gfc_array_ref *ar, mpz_t *section_index, mpz_t *offset)\n \tcase DIMEN_RANGE:\n \t  if (ar->start[i])\n \t    {\n-\t      mpz_sub (tmp, ar->start[i]->value.integer,\n+\t      start = gfc_copy_expr(ar->start[i]);\n+\t      if(!gfc_simplify_expr(start, 1))\n+\t        gfc_internal_error(\"Simplification error\");\n+\t      mpz_sub (tmp, start->value.integer,\n \t\t       ar->as->lower[i]->value.integer);\n \t      mpz_mul (tmp, tmp, delta);\n \t      mpz_add (*offset, tmp, *offset);\n-\t      mpz_set (section_index[i], ar->start[i]->value.integer);\n+\t      mpz_set (section_index[i], start->value.integer);\n+\t      gfc_free_expr(start);\n \t    }\n \t  else\n \t      mpz_set (section_index[i], ar->as->lower[i]->value.integer);"}, {"sha": "4713ecdf534bb28c1f28f2ddcac8e5f9db9360b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28ae01cd23d05ce79307db054782e576ab01f3b7", "patch": "@@ -1,3 +1,8 @@\n+2017-05-14  Nicolas Koenig  <koenigni@student.ethz.ch>\n+\n+\tPR fortran/80442\n+\t* gfortran.dg/impl_do_var_data.f90: New Test\n+\n 2017-05-13  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n \n \t* brig.dg/test/gimple/priv-array-offset-access.hsail:"}, {"sha": "191562d61fd3c04d26760db3bb4779fa15071893", "filename": "gcc/testsuite/gfortran.dg/impl_do_var_data.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpl_do_var_data.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ae01cd23d05ce79307db054782e576ab01f3b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpl_do_var_data.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpl_do_var_data.f90?ref=28ae01cd23d05ce79307db054782e576ab01f3b7", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! PR 80442\n+! This test case used to produce an bogus error\n+! about the variables being below the lower\n+! array bounds\n+program main\n+    implicit none\n+    integer:: i\n+    integer, dimension(3):: A\n+    data (A(i:i+2:i+1), i=1,2) /1, 2, 3/\n+    if(any(A .ne. [1,3,2])) call abort()\n+end program"}]}