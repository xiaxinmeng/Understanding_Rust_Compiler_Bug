{"sha": "d8265d2995912b37d74cd9a9dd18f5beff04e66d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyNjVkMjk5NTkxMmIzN2Q3NGNkOWE5ZGQxOGY1YmVmZjA0ZTY2ZA==", "commit": {"author": {"name": "Catherine Moore", "email": "clm@cygnus.com", "date": "1999-04-14T10:46:50Z"}, "committer": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "1999-04-14T10:46:50Z"}, "message": "Wed Apr 14 10:48:03 1999  Catherine Moore  <clm@cygnus.com>\n        * config/mips/elf.h, config/mips/elf64.h\n        (CTORS_SECTION_ASM_OP): Define.\n        (DTORS_SECTION_ASM_OP): Define.\n        (EXTRA_SECTIONS): Define.\n        (INVOKE__main): Define.\n        (NAME__MAIN): Define.\n        (SYMBOL__MAIN): Define.\n        (EXTRA_SECTIONS_FUNCTIONS): Define.\n        (SECTION_FUNCTION_TEMPLATE): Define.\n        (ASM_OUTPUT_CONSTRUCTOR): Define.\n        (ASM_OUTPUT_DESTRUCTOR): Define.\n        (CTOR_LIST_BEGIN): Define.\n        (CTOR_LIST_END): Define.\n        (DTOR_LIST_BEGIN): Define.\n        (DTOR_LIST_END): Define.\n        (LIB_SPEC): Define.\n        (STARTFILE_SPEC): Define.\n        (ENDFILE_SPEC): Define.\n        * config/mips/linux.h:  Undefine all of the above.\n        * config/mips/rtems64.h: Likewise.\n        * config/mips/t-r3900: Likewise.\n        * config/mips/t-elf: New file.\n        * config/mips/vxworks.h: New file.\n        * configure.in (mips-wrs-vxworks): Use mips/vxworks.h.\n        (mips*-*-*elf*):  Use t-elf instead of t-ecoff.\n        * configure: Regenerate.\n\nFrom-SVN: r26446", "tree": {"sha": "1e5592b544936dacfc7a9952467ed24b511b0c29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5592b544936dacfc7a9952467ed24b511b0c29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8265d2995912b37d74cd9a9dd18f5beff04e66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8265d2995912b37d74cd9a9dd18f5beff04e66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8265d2995912b37d74cd9a9dd18f5beff04e66d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8265d2995912b37d74cd9a9dd18f5beff04e66d/comments", "author": null, "committer": null, "parents": [{"sha": "4e46365be1d700724ebf25f3f86ac069a4b32915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e46365be1d700724ebf25f3f86ac069a4b32915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e46365be1d700724ebf25f3f86ac069a4b32915"}], "stats": {"total": 484, "additions": 455, "deletions": 29}, "files": [{"sha": "0e971bc18f4a443901df310aca7cf7480859733d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -1,3 +1,32 @@\n+Wed Apr 14 10:48:03 1999  Catherine Moore  <clm@cygnus.com>\n+ \n+        * config/mips/elf.h, config/mips/elf64.h\n+        (CTORS_SECTION_ASM_OP): Define.\n+        (DTORS_SECTION_ASM_OP): Define.\n+        (EXTRA_SECTIONS): Define.\n+        (INVOKE__main): Define.\n+        (NAME__MAIN): Define.\n+        (SYMBOL__MAIN): Define.\n+        (EXTRA_SECTIONS_FUNCTIONS): Define.\n+        (SECTION_FUNCTION_TEMPLATE): Define.\n+        (ASM_OUTPUT_CONSTRUCTOR): Define.\n+        (ASM_OUTPUT_DESTRUCTOR): Define.\n+        (CTOR_LIST_BEGIN): Define.\n+        (CTOR_LIST_END): Define.\n+        (DTOR_LIST_BEGIN): Define.\n+        (DTOR_LIST_END): Define.\n+        (LIB_SPEC): Define.\n+        (STARTFILE_SPEC): Define.\n+        (ENDFILE_SPEC): Define.\n+        * config/mips/linux.h:  Undefine all of the above.\n+        * config/mips/rtems64.h: Likewise.\n+        * config/mips/t-r3900: Likewise.\n+        * config/mips/t-elf: New file.\n+        * config/mips/vxworks.h: New file.\n+        * configure.in (mips-wrs-vxworks): Use mips/vxworks.h.\n+        (mips*-*-*elf*):  Use t-elf instead of t-ecoff.\n+        * configure: Regenerate.\n+\n Wed Apr 14 09:59:38 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* reload1.c (emit_reload_insns): Also find equivalent mems"}, {"sha": "c6ec87179e5a3f7e4e4f8adc159212c979910713", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS R3000 version with\n    GOFAST floating point library.\n-   Copyright (C) 1994, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1997, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -232,3 +232,97 @@ do {\t\t\t\t\t\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t   \\\n } while (0)\n+\n+/* Support the ctors/dtors and other sections.  */\n+ \n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+\n+#define CTORS_SECTION_ASM_OP    \"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP    \"\\t.section\\t.dtors,\\\"aw\\\"\"\n+ \n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_rdata, in_ctors, in_dtors\n+ \n+#define INVOKE__main\n+#define NAME__MAIN \"__gccmain\"\n+#define SYMBOL__MAIN __gccmain\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS                                         \\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(dtors_section, in_dtors, DTORS_SECTION_ASM_OP)\n+\n+#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n+void FN ()                                                            \\\n+{                                                                     \\\n+  if (in_section != ENUM)                                             \\\n+    {                                                                 \\\n+      fprintf (asm_out_file, \"%s\\n\", OP);                             \\\n+      in_section = ENUM;                                              \\\n+    }                                                                 \\\n+}\n+\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)                             \\\n+  do {                                                                \\\n+    ctors_section ();                                                 \\\n+    fprintf (FILE, \"\\t%s\\t\", TARGET_LONG64 ? \".dword\" : \".word\");     \\\n+    assemble_name (FILE, NAME);                                       \\\n+    fprintf (FILE, \"\\n\");                                             \\\n+  } while (0)\n+\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)                              \\\n+  do {                                                                \\\n+    dtors_section ();                                                 \\\n+    fprintf (FILE, \"\\t%s\\t\", TARGET_LONG64 ? \".dword\" : \".word\");     \\\n+    assemble_name (FILE, NAME);                                       \\\n+    fprintf (FILE, \"\\n\");                                             \\\n+  } while (0)\n+\n+#define CTOR_LIST_BEGIN                                 \\\n+asm (CTORS_SECTION_ASM_OP);                             \\\n+func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) }\n+ \n+#define CTOR_LIST_END                                   \\\n+asm (CTORS_SECTION_ASM_OP);                             \\\n+func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+ \n+#define DTOR_LIST_BEGIN                                 \\\n+asm (DTORS_SECTION_ASM_OP);                             \\\n+func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) }\n+\n+#define DTOR_LIST_END                                   \\\n+asm (DTORS_SECTION_ASM_OP);                             \\\n+func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n+\n+/* Don't set the target flags, this is done by the linker script */\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \"crtbegin%O%s crt0%O%s\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend%O%s\""}, {"sha": "cb02f9c365f5b893134f9d75dd755bbc88e37d47", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS R4000 version with\n    GOFAST floating point library.\n-   Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -256,3 +256,97 @@ do {\t\t\t\t\t\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t   \\\n } while (0)\n+\n+/* Support the ctors/dtors and other sections.  */\n+ \n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  (Note that on SVR4, you may wish to use the\n+   `-z text' option to the ELF linker, when building a shared library, as\n+   an additional check that you are doing everything right.  But if you do\n+   use the `-z text' option when building a shared library, you will get\n+   errors unless the .ctors and .dtors sections are marked as writable\n+   via the SHF_WRITE attribute.)  */\n+\n+#define CTORS_SECTION_ASM_OP    \"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP    \"\\t.section\\t.dtors,\\\"aw\\\"\"\n+ \n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_rdata, in_ctors, in_dtors\n+ \n+#define INVOKE__main\n+#define NAME__MAIN \"__gccmain\"\n+#define SYMBOL__MAIN __gccmain\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS                                         \\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(dtors_section, in_dtors, DTORS_SECTION_ASM_OP)\n+\n+#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n+void FN ()                                                            \\\n+{                                                                     \\\n+  if (in_section != ENUM)                                             \\\n+    {                                                                 \\\n+      fprintf (asm_out_file, \"%s\\n\", OP);                             \\\n+      in_section = ENUM;                                              \\\n+    }                                                                 \\\n+}\n+\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)                             \\\n+  do {                                                                \\\n+    ctors_section ();                                                 \\\n+    fprintf (FILE, \"\\t%s\\t\", TARGET_LONG64 ? \".dword\" : \".word\");     \\\n+    assemble_name (FILE, NAME);                                       \\\n+    fprintf (FILE, \"\\n\");                                             \\\n+  } while (0)\n+\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)                              \\\n+  do {                                                                \\\n+    dtors_section ();                                                 \\\n+    fprintf (FILE, \"\\t%s\\t\", TARGET_LONG64 ? \".dword\" : \".word\");     \\\n+    assemble_name (FILE, NAME);                                       \\\n+    fprintf (FILE, \"\\n\");                                             \\\n+  } while (0)\n+\n+#define CTOR_LIST_BEGIN                                 \\\n+asm (CTORS_SECTION_ASM_OP);                             \\\n+func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) }\n+ \n+#define CTOR_LIST_END                                   \\\n+asm (CTORS_SECTION_ASM_OP);                             \\\n+func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+ \n+#define DTOR_LIST_BEGIN                                 \\\n+asm (DTORS_SECTION_ASM_OP);                             \\\n+func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) }\n+\n+#define DTOR_LIST_END                                   \\\n+asm (DTORS_SECTION_ASM_OP);                             \\\n+func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n+\n+/* Don't set the target flags, this is done by the linker script */\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \"crtbegin%O%s crt0%O%s\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend%O%s\""}, {"sha": "f4ed424a60564a6d3667227d5b711f1b06129537", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -68,3 +68,32 @@ Boston, MA 02111-1307, USA.  */\n \n #undef SUBTARGET_ASM_SPEC\n #define SUBTARGET_ASM_SPEC \"-KPIC\"\n+\n+/* Undefine the following which were defined in elf.h.  This will cause the linux\n+   port to continue to use collect2 for constructors/destructors.  These may be removed\n+   when .ctor/.dtor section support is desired. */\n+\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_rdata\n+\n+#undef INVOKE__main\n+#undef NAME__MAIN\n+#undef SYMBOL__MAIN\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS                                         \\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#undef ASM_OUTPUT_DESTRUCTOR\n+\n+#undef CTOR_LIST_BEGIN\n+#undef CTOR_LIST_END\n+#undef DTOR_LIST_BEGIN\n+#undef DTOR_LIST_END\n+\n+/*  End of undefines to turn off .ctor/.dtor section support */"}, {"sha": "cd799708638517125761a721ef8984c2608d9123", "filename": "gcc/config/mips/rtems64.h", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Frtems64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Frtems64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems64.h?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for rtems targeting a MIPS ORION using ecoff.\n-   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Joel Sherrill (joel@OARcorp.com).\n \n This file is part of GNU CC.\n@@ -29,3 +29,35 @@ Boston, MA 02111-1307, USA.  */\n #ifndef TARGET_MEM_FUNCTIONS\n #define TARGET_MEM_FUNCTIONS\n #endif\n+\n+/* Undefine the following which were defined in elf64.h.  This will cause the rtems64\n+   port to continue to use collect2 for constructors/destructors.  These may be removed\n+   when .ctor/.dtor section support is desired. */\n+\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_rdata\n+\n+#undef INVOKE__main\n+#undef NAME__MAIN\n+#undef SYMBOL__MAIN\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS                                         \\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#undef ASM_OUTPUT_DESTRUCTOR\n+\n+#undef CTOR_LIST_BEGIN\n+#undef CTOR_LIST_END\n+#undef DTOR_LIST_BEGIN\n+#undef DTOR_LIST_END\n+\n+#undef STARTFILE_SPEC\n+#undef ENDFILE_SPEC\n+\n+/*  End of undefines to turn off .ctor/.dtor section support */"}, {"sha": "dd01b7fd4a71d5bcd0c6a088eac789aa051f1ef8", "filename": "gcc/config/mips/t-elf", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -0,0 +1,96 @@\n+CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n+\n+# We have a premade insn-attrtab.c to save the hour it takes to run genattrtab.\n+# PREMADE_ATTRTAB = $(srcdir)/config/mips/mips-at.c\n+# PREMADE_ATTRTAB_MD = $(srcdir)/config/mips/mips-at.md\n+\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n+# and does not need anything from libgcc1.a.\n+LIBGCC1 =\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n+# Don't let CTOR_LIST end up in sdata section.\n+CRTSTUFF_T_CFLAGS = -G 0\n+\n+# When building a cross compiler, put the mips16 support functions in\n+# libgcc1.a.\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = mips/mips16.S\n+LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n+\t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n+\t_m16fltsisf _m16fixsfsi \\\n+\t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n+\t_m16extsfdf2 _m16trdfsf2 \\\n+\t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n+\t_m16fltsidf _m16fixdfsi \\\n+\t_m16retsf _m16retdf \\\n+\t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n+\t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\\n+\t_m16stubsf9 _m16stubsf10 \\\n+\t_m16stubdf0 _m16stubdf1 _m16stubdf2 _m16stubdf5 _m16stubdf6 \\\n+\t_m16stubdf9 _m16stubdf10\n+\n+# We must build libgcc2.a with -G 0, in case the user wants to link\n+# without the $gp register.\n+TARGET_LIBGCC2_CFLAGS = -G 0\n+\n+# fp-bit and dp-bit are really part of libgcc1, but this will cause\n+# them to be built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifdef __MIPSEL__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifdef __MIPSEL__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build the libraries for both hard and soft floating point\n+\n+MULTILIB_OPTIONS = msoft-float/msingle-float EL/EB mips1/mips3\n+MULTILIB_DIRNAMES = soft-float single el eb mips1 mips3\n+MULTILIB_MATCHES = msingle-float=m4650\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+# Add additional dependencies to recompile selected modules whenever the\n+# tm.h file changes.  The files compiled are:\n+#\n+#\tgcc.c\t\t(*_SPEC changes)\n+#\ttoplev.c\t(new switches + assembly output changes)\n+#\tsdbout.c\t(debug format changes)\n+#\tdbxout.c\t(debug format changes)\n+#\tdwarfout.c\t(debug format changes)\n+#\tfinal.c\t\t(assembly output changes)\n+#\tvarasm.c\t(assembly output changes)\n+#\tcse.c\t\t(cost functions)\n+#\tinsn-output.c\t(possible ifdef changes in tm.h)\n+#\tregclass.c\t(fixed/call used register changes)\n+#\tcccp.c\t\t(new preprocessor macros, -v version #)\n+#\texplow.c\t(GO_IF_LEGITIMATE_ADDRESS)\n+#\trecog.c\t\t(GO_IF_LEGITIMATE_ADDRESS)\n+#\treload.c\t(GO_IF_LEGITIMATE_ADDRESS)\n+\n+gcc.o: $(CONFIG2_H)\n+toplev.o: $(CONFIG2_H)\n+sdbout.o: $(CONFIG2_H)\n+dbxout.o: $(CONFIG2_H)\n+dwarfout.o: $(CONFIG2_H)\n+final.o: $(CONFIG2_H)\n+varasm.o: $(CONFIG2_H)\n+cse.o: $(CONFIG2_H)\n+insn-output.o: $(CONFIG2_H)\n+regclass.o: $(CONFIG2_H)\n+cccp.o: $(CONFIG2_H)\n+explow.o: $(CONFIG2_H)\n+recog.o: $(CONFIG2_H)\n+reload.o: $(CONFIG2_H)"}, {"sha": "055143ff05c781a11122d9e21c366d095126f7de", "filename": "gcc/config/mips/t-r3900", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Ft-r3900", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Ft-r3900", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-r3900?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -49,6 +49,10 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n+# Don't let CTOR_LIST end up in sdata section.\n+CRTSTUFF_T_CFLAGS = -G 0\n+\n # Build the libraries for both hard and soft floating point\n \n MULTILIB_OPTIONS = msoft-float/msingle-float EL/EB"}, {"sha": "0856c37343a73a6852b595b0fed393e6608f9c0a", "filename": "gcc/config/mips/vxworks.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 1999 Free Software Foundation, Inc. */\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Undefine the following which were defined in elf.h.  Thise will cause the mips-vxworks\n+   port to continue to use collect2 for constructors/destructors.  This entire file may\n+   be removed when .ctor/.dtor section support is desired. */\n+\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_rdata\n+\n+#undef INVOKE__main\n+#undef NAME__MAIN\n+#undef SYMBOL__MAIN\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS                                         \\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#undef ASM_OUTPUT_DESTRUCTOR\n+\n+#undef CTOR_LIST_BEGIN\n+#undef CTOR_LIST_END\n+#undef DTOR_LIST_BEGIN\n+#undef DTOR_LIST_END\n+\n+#undef STARTFILE_SPEC\n+#undef ENDFILE_SPEC\n+\n+/*  End of undefines to turn off .ctor/.dtor section support */"}, {"sha": "8c3a82a3a9504fc9f6e655c8399639c7ab999a51", "filename": "gcc/configure", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -4434,7 +4434,7 @@ for machine in $build $host $target; do\n #\t\tfi\n \t\t;;\n \tmips-wrs-vxworks)\n-\t\ttm_file=\"mips/elf.h libgloss.h\"\n+\t\ttm_file=\"mips/elf.h libgloss.h mips/vxworks.h\"\n  \t\ttmake_file=mips/t-ecoff\n  \t\tgas=yes\n \t\tgnu_ld=yes\n@@ -4841,38 +4841,38 @@ for machine in $build $host $target; do\n \t\t;;\n \tmipsel-*-elf*)\n \t\ttm_file=\"mips/elfl.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips-*-elf*)\n-\t\ttm_file=\"mips/elf.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttm_file=\"mips/elf.h\"\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64el-*-elf*)\n-\t\ttm_file=\"mips/elfl64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttm_file=\"mips/elfl64.h\"\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64orionel-*-elf*)\n \t\ttm_file=\"mips/elforion.h mips/elfl64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64-*-elf*)\n-\t\ttm_file=\"mips/elf64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttm_file=\"mips/elf64.h\"\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64orion-*-elf*)\n \t\ttm_file=\"mips/elforion.h mips/elf64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64orion-*-rtems*)\n \t\ttm_file=\"mips/elforion.h mips/elf64.h mips/rtems64.h\"\n \t\ttmake_file=\"mips/t-ecoff t-rtems\"\n \t\t;;\n \tmipstx39el-*-elf*)\n-\t\ttm_file=\"mips/r3900.h mips/elfl.h mips/abi64.h libgloss.h\"\n+\t\ttm_file=\"mips/r3900.h mips/elfl.h mips/abi64.h\"\n \t\ttmake_file=mips/t-r3900\n \t\t;;\n \tmipstx39-*-elf*)\n-\t\ttm_file=\"mips/r3900.h mips/elf.h mips/abi64.h libgloss.h\"\n+\t\ttm_file=\"mips/r3900.h mips/elf.h mips/abi64.h\"\n \t\ttmake_file=mips/t-r3900\n \t\t# FIXME mips-elf should be fixed to use crtstuff.\n \t\tuse_collect2=yes"}, {"sha": "464e89568921fc5533ecc9b94d9e813aee41c57f", "filename": "gcc/configure.in", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8265d2995912b37d74cd9a9dd18f5beff04e66d/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=d8265d2995912b37d74cd9a9dd18f5beff04e66d", "patch": "@@ -2166,7 +2166,7 @@ changequote([,])dnl\n #\t\tfi\n \t\t;;\n \tmips-wrs-vxworks)\n-\t\ttm_file=\"mips/elf.h libgloss.h\"\n+\t\ttm_file=\"mips/elf.h libgloss.h mips/vxworks.h\"\n  \t\ttmake_file=mips/t-ecoff\n  \t\tgas=yes\n \t\tgnu_ld=yes\n@@ -2585,41 +2585,39 @@ changequote([,])dnl\n \t\t;;\n \tmipsel-*-elf*)\n \t\ttm_file=\"mips/elfl.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips-*-elf*)\n-\t\ttm_file=\"mips/elf.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttm_file=\"mips/elf.h\"\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64el-*-elf*)\n-\t\ttm_file=\"mips/elfl64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttm_file=\"mips/elfl64.h\"\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64orionel-*-elf*)\n \t\ttm_file=\"mips/elforion.h mips/elfl64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64-*-elf*)\n-\t\ttm_file=\"mips/elf64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttm_file=\"mips/elf64.h\"\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64orion-*-elf*)\n \t\ttm_file=\"mips/elforion.h mips/elf64.h libgloss.h\"\n-\t\ttmake_file=mips/t-ecoff\n+\t\ttmake_file=mips/t-elf\n \t\t;;\n \tmips64orion-*-rtems*)\n \t\ttm_file=\"mips/elforion.h mips/elf64.h mips/rtems64.h\"\n \t\ttmake_file=\"mips/t-ecoff t-rtems\"\n \t\t;;\n \tmipstx39el-*-elf*)\n-\t\ttm_file=\"mips/r3900.h mips/elfl.h mips/abi64.h libgloss.h\"\n+\t\ttm_file=\"mips/r3900.h mips/elfl.h mips/abi64.h\"\n \t\ttmake_file=mips/t-r3900\n \t\t;;\n \tmipstx39-*-elf*)\n-\t\ttm_file=\"mips/r3900.h mips/elf.h mips/abi64.h libgloss.h\"\n+\t\ttm_file=\"mips/r3900.h mips/elf.h mips/abi64.h\"\n \t\ttmake_file=mips/t-r3900\n-\t\t# FIXME mips-elf should be fixed to use crtstuff.\n-\t\tuse_collect2=yes\n \t\t;;\n \tmips-*-*)\t\t\t\t# Default MIPS RISC-OS 4.0.\n \t\tif test x$stabs = xyes; then"}]}