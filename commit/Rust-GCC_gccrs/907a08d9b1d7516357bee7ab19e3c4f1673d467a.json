{"sha": "907a08d9b1d7516357bee7ab19e3c4f1673d467a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3YTA4ZDliMWQ3NTE2MzU3YmVlN2FiMTllM2M0ZjE2NzNkNDY3YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-05-05T11:49:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-05T11:49:05Z"}, "message": "tree.h (get_pending_sizes): Remove prototype.\n\n\t* tree.h (get_pending_sizes): Remove prototype.\n\t(put_pending_size): Likewise.\n\t(put_pending_sizes): Likewise.\n\t* stor-layout.c (pending_sizes): Delete.\n\t(get_pending_sizes): Likewise.\n\t(put_pending_size): Likewise.\n\t(put_pending_sizes): Likewise.\n\t(variable_size): Do not call put_pending_size and tidy up.\n\t* function.h (struct function): Remove dont_save_pending_sizes_p.\n\t* lto-streamer-in.c (input_function): Do not stream it.\n\t* lto-streamer-out.c (output_function): Likewise.\n\t* tree-inline.c (initialize_cfun): Do not copy it.\n\t* c-decl.c (store_parm_decls): Do not set it.\n\t* omp-low.c (create_task_copyfn): Likewise.\n\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\ncp/\n\t* decl.c (start_preparsed_function): Likewise.\nfortran/\n\t* trans-decl.c (trans_function_start): Likewise.\nada/\n\t* gcc-interface/utils.c (begin_subprog_body): Do not call\n\tget_pending_sizes.\n\t(end_subprog_body): Likewise.\n\nFrom-SVN: r173424", "tree": {"sha": "24bcb4ab05984024b910b92fe87d6d7837f482af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24bcb4ab05984024b910b92fe87d6d7837f482af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907a08d9b1d7516357bee7ab19e3c4f1673d467a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907a08d9b1d7516357bee7ab19e3c4f1673d467a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907a08d9b1d7516357bee7ab19e3c4f1673d467a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907a08d9b1d7516357bee7ab19e3c4f1673d467a/comments", "author": null, "committer": null, "parents": [{"sha": "386d9c5719c64ff748fcdaa2c0b5452c2180cec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386d9c5719c64ff748fcdaa2c0b5452c2180cec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386d9c5719c64ff748fcdaa2c0b5452c2180cec7"}], "stats": {"total": 144, "additions": 35, "deletions": 109}, "files": [{"sha": "88b6008244fb2d45a31a9091792c09833da66910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1,3 +1,21 @@\n+2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (get_pending_sizes): Remove prototype.\n+\t(put_pending_size): Likewise.\n+\t(put_pending_sizes): Likewise.\n+\t* stor-layout.c (pending_sizes): Delete.\n+\t(get_pending_sizes): Likewise.\n+\t(put_pending_size): Likewise.\n+\t(put_pending_sizes): Likewise.\n+\t(variable_size): Do not call put_pending_size and tidy up.\n+\t* function.h (struct function): Remove dont_save_pending_sizes_p.\n+\t* lto-streamer-in.c (input_function): Do not stream it.\n+\t* lto-streamer-out.c (output_function): Likewise.\n+\t* tree-inline.c (initialize_cfun): Do not copy it.\n+\t* c-decl.c (store_parm_decls): Do not set it.\n+\t* omp-low.c (create_task_copyfn): Likewise.\n+\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n+\n 2011-05-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movdf_internal_rex64): Simplify nested \"if\""}, {"sha": "315472e80810d01b20a73d749e6bed0a2b09b2b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1,3 +1,9 @@\n+2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (begin_subprog_body): Do not call\n+\tget_pending_sizes.\n+\t(end_subprog_body): Likewise.\n+\n 2011-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Remove zero notrunc argument to"}, {"sha": "57a62ab9bb6b530675130bffe604081824ba44f0", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1954,11 +1954,6 @@ begin_subprog_body (tree subprog_decl)\n     DECL_CONTEXT (param_decl) = subprog_decl;\n \n   make_decl_rtl (subprog_decl);\n-\n-  /* We handle pending sizes via the elaboration of types, so we don't need to\n-     save them.  This causes them to be marked as part of the outer function\n-     and then discarded.  */\n-  get_pending_sizes ();\n }\n \n /* Finish the definition of the current subprogram BODY and finalize it.  */\n@@ -1973,10 +1968,6 @@ end_subprog_body (tree body)\n   DECL_INITIAL (fndecl) = current_binding_level->block;\n   gnat_poplevel ();\n \n-  /* We handle pending sizes via the elaboration of types, so we don't\n-     need to save them.  */\n-  get_pending_sizes ();\n-\n   /* Mark the RESULT_DECL as being in this subprogram. */\n   DECL_CONTEXT (DECL_RESULT (fndecl)) = fndecl;\n "}, {"sha": "cea26052a9e060421d3b36345c2f196c1feae1fb", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -8173,12 +8173,6 @@ store_parm_decls (void)\n      other pending sizes would be handled by gimplify_parameters.  */\n   if (arg_info->pending_sizes)\n     add_stmt (arg_info->pending_sizes);\n-\n-  /* Even though we're inside a function body, we still don't want to\n-     call expand_expr to calculate the size of a variable-sized array.\n-     We haven't necessarily assigned RTL to all variables yet, so it's\n-     not safe to try to expand expressions involving them.  */\n-  cfun->dont_save_pending_sizes_p = 1;\n }\n \f\n "}, {"sha": "856e8c762b419a8397dc40e30357290babece6af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (start_preparsed_function): Do not set\n+\tdont_save_pending_sizes_p.\n+\n 2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* parser.c (cp_parser_objc_method_definition_list): Update call to"}, {"sha": "c5184e067731e976dd21008bbb82c78b63a5669c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -12494,12 +12494,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n   current_binding_level = bl;\n \n-  /* Even though we're inside a function body, we still don't want to\n-     call expand_expr to calculate the size of a variable-sized array.\n-     We haven't necessarily assigned RTL to all variables yet, so it's\n-     not safe to try to expand expressions involving them.  */\n-  cfun->dont_save_pending_sizes_p = 1;\n-\n   /* Start the statement-tree, start the tree now.  */\n   DECL_SAVED_TREE (decl1) = push_stmt_list ();\n "}, {"sha": "00774f4f7797cbf46beda6a6b2c47f54170eeaad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans-decl.c (trans_function_start): Do not set\n+\tdont_save_pending_sizes_p.\n+\n 2011-05-04  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* trans.h (gfc_chainon_list): Delete."}, {"sha": "2452927628e34ea33e872c20107d932452315941", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -2116,12 +2116,6 @@ trans_function_start (gfc_symbol * sym)\n \n   init_function_start (fndecl);\n \n-  /* Even though we're inside a function body, we still don't want to\n-     call expand_expr to calculate the size of a variable-sized array.\n-     We haven't necessarily assigned RTL to all variables yet, so it's\n-     not safe to try to expand expressions involving them.  */\n-  cfun->dont_save_pending_sizes_p = 1;\n-\n   /* function.c requires a push at the start of the function.  */\n   pushlevel (0);\n }"}, {"sha": "0e8bc74aaa59d6d8ec5df24cd6a1a3b41e638aae", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -597,15 +597,6 @@ struct GTY(()) function {\n   /* Nonzero if current function uses stdarg.h or equivalent.  */\n   unsigned int stdarg : 1;\n \n-  /* Nonzero if the back-end should not keep track of expressions that\n-     determine the size of variable-sized objects.  Normally, such\n-     expressions are saved away, and then expanded when the next\n-     function is started.  For example, if a parameter has a\n-     variable-sized type, then the size of the parameter is computed\n-     when the function body is entered.  However, some front-ends do\n-     not desire this behavior.  */\n-  unsigned int dont_save_pending_sizes_p : 1;\n-\n   unsigned int after_inlining : 1;\n   unsigned int always_inline_functions_inlined : 1;\n "}, {"sha": "4070299f46cd4118c50429ac17733987f6d8c61d", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1251,7 +1251,6 @@ input_function (tree fn_decl, struct data_in *data_in,\n   fn->can_throw_non_call_exceptions = bp_unpack_value (&bp, 1);\n   fn->always_inline_functions_inlined = bp_unpack_value (&bp, 1);\n   fn->after_inlining = bp_unpack_value (&bp, 1);\n-  fn->dont_save_pending_sizes_p = bp_unpack_value (&bp, 1);\n   fn->stdarg = bp_unpack_value (&bp, 1);\n   fn->has_nonlocal_label = bp_unpack_value (&bp, 1);\n   fn->calls_alloca = bp_unpack_value (&bp, 1);"}, {"sha": "858bbf074621e00ebb59ea67d45eb059c91ac1ca", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -1929,7 +1929,6 @@ output_function (struct cgraph_node *node)\n   bp_pack_value (&bp, fn->can_throw_non_call_exceptions, 1);\n   bp_pack_value (&bp, fn->always_inline_functions_inlined, 1);\n   bp_pack_value (&bp, fn->after_inlining, 1);\n-  bp_pack_value (&bp, fn->dont_save_pending_sizes_p, 1);\n   bp_pack_value (&bp, fn->stdarg, 1);\n   bp_pack_value (&bp, fn->has_nonlocal_label, 1);\n   bp_pack_value (&bp, fn->calls_alloca, 1);"}, {"sha": "fc2cff8548806797b28f3128e79c8185c299e55c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -6230,7 +6230,6 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n   child_fn = gimple_omp_task_copy_fn (task_stmt);\n   child_cfun = DECL_STRUCT_FUNCTION (child_fn);\n   gcc_assert (child_cfun->cfg == NULL);\n-  child_cfun->dont_save_pending_sizes_p = 1;\n   DECL_SAVED_TREE (child_fn) = alloc_stmt_list ();\n \n   /* Reset DECL_CONTEXT on function arguments.  */"}, {"sha": "9ad0d0ae2f36e25932607034b947f399acf8f66f", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -65,10 +65,6 @@ static int excess_unit_span (HOST_WIDE_INT, HOST_WIDE_INT, HOST_WIDE_INT,\n #endif\n extern void debug_rli (record_layout_info);\n \f\n-/* SAVE_EXPRs for sizes of types and decls, waiting to be expanded.  */\n-\n-static GTY(()) VEC(tree,gc) *pending_sizes;\n-\n /* Show that REFERENCE_TYPES are internal and should use address_mode.\n    Called only by front end.  */\n \n@@ -78,48 +74,12 @@ internal_reference_types (void)\n   reference_types_internal = 1;\n }\n \n-/* Get a VEC of all the objects put on the pending sizes list.  */\n-\n-VEC(tree,gc) *\n-get_pending_sizes (void)\n-{\n-  VEC(tree,gc) *chain = pending_sizes;\n-\n-  pending_sizes = 0;\n-  return chain;\n-}\n-\n-/* Add EXPR to the pending sizes list.  */\n-\n-void\n-put_pending_size (tree expr)\n-{\n-  /* Strip any simple arithmetic from EXPR to see if it has an underlying\n-     SAVE_EXPR.  */\n-  expr = skip_simple_arithmetic (expr);\n-\n-  if (TREE_CODE (expr) == SAVE_EXPR)\n-    VEC_safe_push (tree, gc, pending_sizes, expr);\n-}\n-\n-/* Put a chain of objects into the pending sizes list, which must be\n-   empty.  */\n-\n-void\n-put_pending_sizes (VEC(tree,gc) *chain)\n-{\n-  gcc_assert (!pending_sizes);\n-  pending_sizes = chain;\n-}\n-\n /* Given a size SIZE that may not be a constant, return a SAVE_EXPR\n    to serve as the actual size-expression for a type or decl.  */\n \n tree\n variable_size (tree size)\n {\n-  tree save;\n-\n   /* Obviously.  */\n   if (TREE_CONSTANT (size))\n     return size;\n@@ -135,26 +95,7 @@ variable_size (tree size)\n   if (lang_hooks.decls.global_bindings_p () < 0)\n     return size;\n \n-  size = save_expr (size);\n-\n-  /* If an array with a variable number of elements is declared, and\n-     the elements require destruction, we will emit a cleanup for the\n-     array.  That cleanup is run both on normal exit from the block\n-     and in the exception-handler for the block.  Normally, when code\n-     is used in both ordinary code and in an exception handler it is\n-     `unsaved', i.e., all SAVE_EXPRs are recalculated.  However, we do\n-     not wish to do that here; the array-size is the same in both\n-     places.  */\n-  save = skip_simple_arithmetic (size);\n-\n-  if (cfun && cfun->dont_save_pending_sizes_p)\n-    /* The front-end doesn't want us to keep a list of the expressions\n-       that determine sizes for variable size objects.  Trust it.  */\n-    return size;\n-\n-  put_pending_size (save);\n-\n-  return size;\n+  return save_expr (size);\n }\n \n /* An array of functions used for self-referential size computation.  */"}, {"sha": "49488d4158b799c150b12b800a414413492544c2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -2080,7 +2080,6 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count)\n   cfun->va_list_fpr_size = src_cfun->va_list_fpr_size;\n   cfun->has_nonlocal_label = src_cfun->has_nonlocal_label;\n   cfun->stdarg = src_cfun->stdarg;\n-  cfun->dont_save_pending_sizes_p = src_cfun->dont_save_pending_sizes_p;\n   cfun->after_inlining = src_cfun->after_inlining;\n   cfun->can_throw_non_call_exceptions\n     = src_cfun->can_throw_non_call_exceptions;"}, {"sha": "c46cf6c5458f569abae6c016f71eb880928aaf8f", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -403,12 +403,6 @@ tree_rest_of_compilation (tree fndecl)\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n   init_function_start (fndecl);\n \n-  /* Even though we're inside a function body, we still don't want to\n-     call expand_expr to calculate the size of a variable-sized array.\n-     We haven't necessarily assigned RTL to all variables yet, so it's\n-     not safe to try to expand expressions involving them.  */\n-  cfun->dont_save_pending_sizes_p = 1;\n-\n   gimple_register_cfg_hooks ();\n \n   bitmap_obstack_initialize (&reg_obstack); /* FIXME, only at RTL generation*/"}, {"sha": "ef427606cde8a873dd08160f90c7329122ccc76c", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907a08d9b1d7516357bee7ab19e3c4f1673d467a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=907a08d9b1d7516357bee7ab19e3c4f1673d467a", "patch": "@@ -4638,9 +4638,6 @@ extern tree size_diffop_loc (location_t, tree, tree);\n extern tree round_up_loc (location_t, tree, int);\n #define round_down(T,N) round_down_loc (UNKNOWN_LOCATION, T, N)\n extern tree round_down_loc (location_t, tree, int);\n-extern VEC(tree,gc) *get_pending_sizes (void);\n-extern void put_pending_size (tree);\n-extern void put_pending_sizes (VEC(tree,gc) *);\n extern void finalize_size_functions (void);\n \n /* Type for sizes of data-type.  */"}]}