{"sha": "83bacaa9b5d8b652f311633ca9584ea56cd71d86", "node_id": "C_kwDOANBUbNoAKDgzYmFjYWE5YjVkOGI2NTJmMzExNjMzY2E5NTg0ZWE1NmNkNzFkODY", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-02-09T21:32:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-13T08:04:30Z"}, "message": "[Ada] Remove obsolete uses of Unchecked_Conversion from Ada 83\n\nSimilar to a recent removal of obsolete uses of Unchecked_Deallocation.\n\nIn Ada 83 the Unchecked_Conversion was a top-level unit; since Ada 95 it\nis an obsolete renaming of Ada.Unchecked_Conversion. GNAT doesn't warn\nyet about uses of these obsolete renamings, but it still seems better to\navoid them.\n\ngcc/ada/\n\n\t* atree.adb, gen_il-gen.adb, osint.adb, set_targ.adb,\n\tsinput.adb, table.adb, treepr.adb, types.ads: Replace uses of\n\tUnchecked_Conversion in the compiler itself.\n\t* libgnarl/a-reatim.adb, libgnarl/s-osinte__gnu.ads,\n\tlibgnarl/s-osinte__kfreebsd-gnu.ads, libgnat/a-coboho.adb,\n\tlibgnat/a-stuten.ads, libgnat/s-putima.adb: Likewise in the\n\truntime.\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Likewise in\n\tdocumentation.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "afbcec35ce9fd431e99c4e94e616b785dd199f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afbcec35ce9fd431e99c4e94e616b785dd199f56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83bacaa9b5d8b652f311633ca9584ea56cd71d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bacaa9b5d8b652f311633ca9584ea56cd71d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83bacaa9b5d8b652f311633ca9584ea56cd71d86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bacaa9b5d8b652f311633ca9584ea56cd71d86/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb50998584eda9bbd3377d3dca6a8d264d6c4891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb50998584eda9bbd3377d3dca6a8d264d6c4891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb50998584eda9bbd3377d3dca6a8d264d6c4891"}], "stats": {"total": 129, "additions": 65, "deletions": 64}, "files": [{"sha": "a949761085ed4df06c8facac27ce028e146cc7b0", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Unchecked_Conversion;\n with Aspects;        use Aspects;\n with Debug;          use Debug;\n with Namet;          use Namet;\n@@ -31,7 +32,6 @@ with Opt;            use Opt;\n with Output;         use Output;\n with Sinfo.Utils;    use Sinfo.Utils;\n with System.Storage_Elements;\n-with Unchecked_Conversion;\n \n package body Atree is\n \n@@ -505,7 +505,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 1);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Size_1_Bit, Field_Type);\n+           Ada.Unchecked_Conversion (Field_Size_1_Bit, Field_Type);\n          Val : constant Field_Size_1_Bit := Get_1_Bit_Val (N, Offset);\n       begin\n          return Cast (Val);\n@@ -517,7 +517,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 2);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Size_2_Bit, Field_Type);\n+           Ada.Unchecked_Conversion (Field_Size_2_Bit, Field_Type);\n          Val : constant Field_Size_2_Bit := Get_2_Bit_Val (N, Offset);\n       begin\n          return Cast (Val);\n@@ -529,7 +529,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 4);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Size_4_Bit, Field_Type);\n+           Ada.Unchecked_Conversion (Field_Size_4_Bit, Field_Type);\n          Val : constant Field_Size_4_Bit := Get_4_Bit_Val (N, Offset);\n       begin\n          return Cast (Val);\n@@ -541,7 +541,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 8);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Size_8_Bit, Field_Type);\n+           Ada.Unchecked_Conversion (Field_Size_8_Bit, Field_Type);\n          Val : constant Field_Size_8_Bit := Get_8_Bit_Val (N, Offset);\n       begin\n          return Cast (Val);\n@@ -553,7 +553,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 32);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Size_32_Bit, Field_Type);\n+           Ada.Unchecked_Conversion (Field_Size_32_Bit, Field_Type);\n \n          Val : constant Field_Size_32_Bit := Get_32_Bit_Val (N, Offset);\n          Result : constant Field_Type := Cast (Val);\n@@ -605,7 +605,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 1);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Type, Field_Size_1_Bit);\n+           Ada.Unchecked_Conversion (Field_Type, Field_Size_1_Bit);\n       begin\n          Set_1_Bit_Val (N, Offset, Cast (Val));\n       end Set_1_Bit_Field;\n@@ -616,7 +616,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 2);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Type, Field_Size_2_Bit);\n+           Ada.Unchecked_Conversion (Field_Type, Field_Size_2_Bit);\n       begin\n          Set_2_Bit_Val (N, Offset, Cast (Val));\n       end Set_2_Bit_Field;\n@@ -627,7 +627,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 4);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Type, Field_Size_4_Bit);\n+           Ada.Unchecked_Conversion (Field_Type, Field_Size_4_Bit);\n       begin\n          Set_4_Bit_Val (N, Offset, Cast (Val));\n       end Set_4_Bit_Field;\n@@ -638,7 +638,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 8);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Type, Field_Size_8_Bit);\n+           Ada.Unchecked_Conversion (Field_Type, Field_Size_8_Bit);\n       begin\n          Set_8_Bit_Val (N, Offset, Cast (Val));\n       end Set_8_Bit_Field;\n@@ -649,7 +649,7 @@ package body Atree is\n          pragma Assert (Field_Type'Size = 32);\n \n          function Cast is new\n-           Unchecked_Conversion (Field_Type, Field_Size_32_Bit);\n+           Ada.Unchecked_Conversion (Field_Type, Field_Size_32_Bit);\n       begin\n          Set_32_Bit_Val (N, Offset, Cast (Val));\n       end Set_32_Bit_Field;\n@@ -854,7 +854,7 @@ package body Atree is\n       ----------------------\n \n       procedure Print_Atree_Info (N : Node_Or_Entity_Id) is\n-         function Cast is new Unchecked_Conversion (Slot, Int);\n+         function Cast is new Ada.Unchecked_Conversion (Slot, Int);\n       begin\n          Write_Int (Int (Size_In_Slots (N)));\n          Write_Str (\" slots (\");"}, {"sha": "c514678eba9f0ab85d0fc00eece2dffd74d17098", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -2101,11 +2101,11 @@ the typing system. Consider the following complete program example:\n          function to_a2 (Input : a1) return a2;\n       end p2;\n \n-      with Unchecked_Conversion;\n+      with Ada.Unchecked_Conversion;\n       package body p2 is\n          function to_a2 (Input : a1) return a2 is\n             function to_a2u is\n-              new Unchecked_Conversion (a1, a2);\n+              new Ada.Unchecked_Conversion (a1, a2);\n          begin\n             return to_a2u (Input);\n          end to_a2;\n@@ -2198,7 +2198,7 @@ the warning off:\n \n      pragma Warnings (Off);\n      function to_a2u is\n-       new Unchecked_Conversion (a1, a2);\n+       new Ada.Unchecked_Conversion (a1, a2);\n      pragma Warnings (On);\n \n Of course that approach is not appropriate for this particular"}, {"sha": "0ecc696c3f16dc086dc096d7b9784917ee81fea0", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -1425,7 +1425,7 @@ package body Gen_IL.Gen is\n         (S : in out Sink; T : Type_Enum)\n       is\n          Pre : constant String :=\n-           \"function Cast is new Unchecked_Conversion (\";\n+           \"function Cast is new Ada.Unchecked_Conversion (\";\n          Lo_Type : constant String := \"Field_Size_\" & Image (Field_Size (T)) & \"_Bit\";\n          Hi_Type : constant String := Get_Set_Id_Image (T);\n       begin\n@@ -2338,7 +2338,7 @@ package body Gen_IL.Gen is\n          Decrease_Indent (S, 3);\n          Put (S, LF & \"end Sinfo.Nodes;\" & LF);\n \n-         Put (B, \"with Unchecked_Conversion;\" & LF);\n+         Put (B, \"with Ada.Unchecked_Conversion;\" & LF);\n          Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\" & LF);\n          Put (B, \"with Nlists; use Nlists;\" & LF);\n          Put (B, \"pragma Warnings (Off);\" & LF);\n@@ -2394,7 +2394,7 @@ package body Gen_IL.Gen is\n          Decrease_Indent (S, 3);\n          Put (S, LF & \"end Einfo.Entities;\" & LF);\n \n-         Put (B, \"with Unchecked_Conversion;\" & LF);\n+         Put (B, \"with Ada.Unchecked_Conversion;\" & LF);\n          Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\" & LF);\n          Put (B, \"with Einfo.Utils; use Einfo.Utils;\" & LF);\n          --  This forms a cycle between packages (via bodies, which is OK)"}, {"sha": "218c375c361b39336787378e7bb911b54bf2ad5e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -20478,11 +20478,11 @@ package p2 is\n    function to_a2 (Input : a1) return a2;\n end p2;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n package body p2 is\n    function to_a2 (Input : a1) return a2 is\n       function to_a2u is\n-        new Unchecked_Conversion (a1, a2);\n+        new Ada.Unchecked_Conversion (a1, a2);\n    begin\n       return to_a2u (Input);\n    end to_a2;\n@@ -20581,7 +20581,7 @@ the warning off:\n @example\n pragma Warnings (Off);\n function to_a2u is\n-  new Unchecked_Conversion (a1, a2);\n+  new Ada.Unchecked_Conversion (a1, a2);\n pragma Warnings (On);\n @end example\n @end quotation"}, {"sha": "fda2d63a934f3e062327927e35a4b494797b4aa8", "filename": "gcc/ada/libgnarl/a-reatim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnarl%2Fa-reatim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnarl%2Fa-reatim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-reatim.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -30,8 +30,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Unchecked_Conversion;\n with System.Tasking;\n-with Unchecked_Conversion;\n \n package body Ada.Real_Time with\n   SPARK_Mode => Off\n@@ -128,7 +128,7 @@ is\n       type Duration_Rep is range -(2 ** 63) .. +((2 ** 63 - 1));\n \n       function To_Integer is\n-        new Unchecked_Conversion (Duration, Duration_Rep);\n+        new Ada.Unchecked_Conversion (Duration, Duration_Rep);\n    begin\n       return Integer\n                (To_Integer (Duration (Left)) / To_Integer (Duration (Right)));"}, {"sha": "39e20f2d21b134193d6b7853e0b4a11019dd976c", "filename": "gcc/ada/libgnarl/s-osinte__gnu.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnarl%2Fs-osinte__gnu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnarl%2Fs-osinte__gnu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__gnu.ads?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -40,7 +40,7 @@\n \n with Interfaces.C;\n with System.Parameters;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -288,14 +288,14 @@ package System.OS_Interface is\n    pragma Convention (C, Thread_Body);\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    --  From: /usr/include/bits/pthread.h:typedef int __pthread_t;\n    --  /usr/include/pthread/pthreadtypes.h:typedef __pthread_t pthread_t;\n    type pthread_t is new unsigned_long;\n    subtype Thread_Id        is pthread_t;\n \n-   function To_pthread_t is new Unchecked_Conversion\n+   function To_pthread_t is new Ada.Unchecked_Conversion\n      (unsigned_long, pthread_t);\n \n    type pthread_mutex_t     is limited private;"}, {"sha": "ad1a1b5d4e89add00ad78722e62cecda13dc54af", "filename": "gcc/ada/libgnarl/s-osinte__kfreebsd-gnu.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnarl%2Fs-osinte__kfreebsd-gnu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnarl%2Fs-osinte__kfreebsd-gnu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__kfreebsd-gnu.ads?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -38,9 +38,9 @@\n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package\n \n+with Ada.Unchecked_Conversion;\n with Interfaces.C;\n with System.Parameters;\n-with Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -276,12 +276,12 @@ package System.OS_Interface is\n    pragma Convention (C, Thread_Body);\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t is new unsigned_long;\n    subtype Thread_Id        is pthread_t;\n \n-   function To_pthread_t is new Unchecked_Conversion\n+   function To_pthread_t is new Ada.Unchecked_Conversion\n      (unsigned_long, pthread_t);\n \n    type pthread_mutex_t     is limited private;"}, {"sha": "25d0777ba17a5d9f6e368b1bfca6ba79ca9bb474", "filename": "gcc/ada/libgnat/a-coboho.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnat%2Fa-coboho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnat%2Fa-coboho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coboho.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -25,7 +25,7 @@\n -- <http://www.gnu.org/licenses/>.                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n with System.Put_Images;\n \n package body Ada.Containers.Bounded_Holders is\n@@ -54,7 +54,7 @@ package body Ada.Containers.Bounded_Holders is\n    end Size_In_Storage_Elements;\n \n    function Cast is new\n-     Unchecked_Conversion (System.Address, Element_Access);\n+     Ada.Unchecked_Conversion (System.Address, Element_Access);\n \n    ---------\n    -- \"=\" --"}, {"sha": "618f5b0811cc76d61664d425c2d29180f26a1084", "filename": "gcc/ada/libgnat/a-stuten.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnat%2Fa-stuten.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnat%2Fa-stuten.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stuten.ads?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -36,8 +36,8 @@\n --  UTF encoded strings. Note: this package is consistent with Ada 95, and may\n --  be used in Ada 95 or Ada 2005 mode.\n \n+with Ada.Unchecked_Conversion;\n with Interfaces;\n-with Unchecked_Conversion;\n \n package Ada.Strings.UTF_Encoding is\n    pragma Pure (UTF_Encoding);\n@@ -106,13 +106,13 @@ package Ada.Strings.UTF_Encoding is\n \n private\n    function To_Unsigned_8 is new\n-     Unchecked_Conversion (Character, Interfaces.Unsigned_8);\n+     Ada.Unchecked_Conversion (Character, Interfaces.Unsigned_8);\n \n    function To_Unsigned_16 is new\n-     Unchecked_Conversion (Wide_Character, Interfaces.Unsigned_16);\n+     Ada.Unchecked_Conversion (Wide_Character, Interfaces.Unsigned_16);\n \n    function To_Unsigned_32 is new\n-     Unchecked_Conversion (Wide_Wide_Character, Interfaces.Unsigned_32);\n+     Ada.Unchecked_Conversion (Wide_Wide_Character, Interfaces.Unsigned_32);\n \n    subtype UTF_XE_Encoding is Encoding_Scheme range UTF_16BE .. UTF_16LE;\n    --  Subtype containing only UTF_16BE and UTF_16LE entries"}, {"sha": "10d8b8475eaedfaf63703a723e0dc5bda2c756c7", "filename": "gcc/ada/libgnat/s-putima.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-putima.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -32,7 +32,7 @@\n with Ada.Strings.Text_Buffers.Utils;\n use Ada.Strings.Text_Buffers;\n use Ada.Strings.Text_Buffers.Utils;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Put_Images is\n \n@@ -133,7 +133,7 @@ package body System.Put_Images is\n    procedure Put_Image_Pointer\n      (S : in out Sink'Class; X : Pointer; Type_Kind : String)\n    is\n-      function Cast is new Unchecked_Conversion\n+      function Cast is new Ada.Unchecked_Conversion\n         (System.Address, Unsigned_Address);\n    begin\n       if X = null then"}, {"sha": "15f0692ab0591f2b4a61c55914cf78850a14e9e4", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -34,7 +34,7 @@ with Sdefault; use Sdefault;\n with Table;\n with Targparm; use Targparm;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n pragma Warnings (Off);\n --  This package is used also by gnatcoll\n@@ -2216,9 +2216,9 @@ package body Osint is\n       --  GNAT releases are available with these functions.\n \n       function To_Int is\n-        new Unchecked_Conversion (OS_Time, Underlying_OS_Time);\n+        new Ada.Unchecked_Conversion (OS_Time, Underlying_OS_Time);\n       function From_Int is\n-        new Unchecked_Conversion (Underlying_OS_Time, OS_Time);\n+        new Ada.Unchecked_Conversion (Underlying_OS_Time, OS_Time);\n \n       TI : Underlying_OS_Time := To_Int (T);\n       Y  : Year_Type;\n@@ -3085,8 +3085,8 @@ package body Osint is\n       type Path_String_Access is access Path_String;\n \n       function Address_To_Access is new\n-        Unchecked_Conversion (Source => Address,\n-                              Target => Path_String_Access);\n+        Ada.Unchecked_Conversion (Source => Address,\n+                                  Target => Path_String_Access);\n \n       Path_Access : constant Path_String_Access :=\n                       Address_To_Access (Path_Addr);"}, {"sha": "160f510c8032418786a3cfd206a2e1dbfaa1b5dc", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -31,7 +31,7 @@ with Output;   use Output;\n with System;        use System;\n with System.OS_Lib; use System.OS_Lib;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Set_Targ is\n \n@@ -404,7 +404,7 @@ package body Set_Targ is\n       --  Pointer to Nat or Pos value (it is harmless to treat Pos values and\n       --  Nat values as Natural via Unchecked_Conversion).\n \n-      function To_ANat is new Unchecked_Conversion (Address, ANat);\n+      function To_ANat is new Ada.Unchecked_Conversion (Address, ANat);\n \n       procedure AddC (C : Character);\n       --  Add one character to buffer\n@@ -566,7 +566,7 @@ package body Set_Targ is\n       --  Pointer to Nat or Pos value (it is harmless to treat Pos values\n       --  as Nat via Unchecked_Conversion).\n \n-      function To_ANat is new Unchecked_Conversion (Address, ANat);\n+      function To_ANat is new Ada.Unchecked_Conversion (Address, ANat);\n \n       VP : ANat;\n "}, {"sha": "8e80213e314b9d6d46fffff252eae5f444294064", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -41,8 +41,8 @@ with System.Storage_Elements;\n with System.Memory;\n with System.WCh_Con; use System.WCh_Con;\n \n+with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n-with Unchecked_Conversion;\n \n package body Sinput is\n \n@@ -56,16 +56,16 @@ package body Sinput is\n    --  used to construct improperly aliased pointer values.\n \n    function To_Address is\n-     new Unchecked_Conversion (Lines_Table_Ptr, Address);\n+     new Ada.Unchecked_Conversion (Lines_Table_Ptr, Address);\n \n    function To_Address is\n-     new Unchecked_Conversion (Logical_Lines_Table_Ptr, Address);\n+     new Ada.Unchecked_Conversion (Logical_Lines_Table_Ptr, Address);\n \n    function To_Pointer is\n-     new Unchecked_Conversion (Address, Lines_Table_Ptr);\n+     new Ada.Unchecked_Conversion (Address, Lines_Table_Ptr);\n \n    function To_Pointer is\n-     new Unchecked_Conversion (Address, Logical_Lines_Table_Ptr);\n+     new Ada.Unchecked_Conversion (Address, Logical_Lines_Table_Ptr);\n \n    pragma Warnings (On);\n \n@@ -378,7 +378,7 @@ package body Sinput is\n       --  to first Unchecked_Convert to access-to-variable.\n \n       function To_Source_Buffer_Ptr_Var is new\n-        Unchecked_Conversion (Source_Buffer_Ptr, Source_Buffer_Ptr_Var);\n+        Ada.Unchecked_Conversion (Source_Buffer_Ptr, Source_Buffer_Ptr_Var);\n \n       Temp : Source_Buffer_Ptr_Var := To_Source_Buffer_Ptr_Var (Src);\n "}, {"sha": "df467f4ca03880c1b15d71300843332f57cb1539", "filename": "gcc/ada/table.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Ftable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Ftable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -30,7 +30,7 @@ with System;  use System;\n \n with System.Memory; use System.Memory;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n pragma Elaborate_All (Output);\n \n@@ -58,8 +58,8 @@ package body Table is\n       --  internally in this package, and cannot never result in any instances\n       --  of improperly aliased pointers for the client of the package.\n \n-      function To_Address is new Unchecked_Conversion (Table_Ptr, Address);\n-      function To_Pointer is new Unchecked_Conversion (Address, Table_Ptr);\n+      function To_Address is new Ada.Unchecked_Conversion (Table_Ptr, Address);\n+      function To_Pointer is new Ada.Unchecked_Conversion (Address, Table_Ptr);\n \n       pragma Warnings (On);\n "}, {"sha": "32f6e81d1d3024af8ff070136316258628030192", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Unchecked_Conversion;\n with Aspects;              use Aspects;\n with Atree;                use Atree;\n with Debug;                use Debug;\n@@ -49,7 +50,6 @@ with SCIL_LL;              use SCIL_LL;\n with Uintp;                use Uintp;\n with Urealp;               use Urealp;\n with Uname;                use Uname;\n-with Unchecked_Conversion;\n \n package body Treepr is\n \n@@ -132,8 +132,8 @@ package body Treepr is\n    -- Local Procedures --\n    ----------------------\n \n-   function From_Union is new Unchecked_Conversion (Union_Id, Uint);\n-   function From_Union is new Unchecked_Conversion (Union_Id, Ureal);\n+   function From_Union is new Ada.Unchecked_Conversion (Union_Id, Uint);\n+   function From_Union is new Ada.Unchecked_Conversion (Union_Id, Ureal);\n \n    function To_Mixed (S : String) return String;\n    --  Turns an identifier into Mixed_Case. For bootstrap reasons, we cannot\n@@ -260,7 +260,7 @@ package body Treepr is\n    ----------\n \n    function Hash (Key : Int) return GNAT.Bucket_Range_Type is\n-      function Cast is new Unchecked_Conversion\n+      function Cast is new Ada.Unchecked_Conversion\n         (Source => Int, Target => GNAT.Bucket_Range_Type);\n    begin\n       return Cast (Key);\n@@ -880,7 +880,7 @@ package body Treepr is\n          when Uint_Field =>\n             declare\n                Val : constant Uint := Get_Uint (N, FD.Offset);\n-               function Cast is new Unchecked_Conversion (Uint, Int);\n+               function Cast is new Ada.Unchecked_Conversion (Uint, Int);\n             begin\n                if Present (Val) then\n                   Print_Initial;\n@@ -895,7 +895,7 @@ package body Treepr is\n             | Nonzero_Uint_Field =>\n             declare\n                Val : constant Uint := Get_Valid_Uint (N, FD.Offset);\n-               function Cast is new Unchecked_Conversion (Uint, Int);\n+               function Cast is new Ada.Unchecked_Conversion (Uint, Int);\n             begin\n                Print_Initial;\n                UI_Write (Val, Format);\n@@ -916,7 +916,7 @@ package body Treepr is\n          when Ureal_Field =>\n             declare\n                Val : constant Ureal := Get_Ureal (N, FD.Offset);\n-               function Cast is new Unchecked_Conversion (Ureal, Int);\n+               function Cast is new Ada.Unchecked_Conversion (Ureal, Int);\n             begin\n                if Val /= No_Ureal then\n                   Print_Initial;\n@@ -980,7 +980,8 @@ package body Treepr is\n    exception\n       when others =>\n          declare\n-            function Cast is new Unchecked_Conversion (Field_Size_32_Bit, Int);\n+            function Cast is new\n+              Ada.Unchecked_Conversion (Field_Size_32_Bit, Int);\n          begin\n             Write_Eol;\n             Print_Initial;"}, {"sha": "3b226e178facdf6b53215e9f02f3547f04e48741", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bacaa9b5d8b652f311633ca9584ea56cd71d86/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=83bacaa9b5d8b652f311633ca9584ea56cd71d86", "patch": "@@ -39,9 +39,9 @@\n --  2s-complement. If there are any machines for which this is not a correct\n --  assumption, a significant number of changes will be required.\n \n+with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n with System;\n-with Unchecked_Conversion;\n \n package Types is\n    pragma Preelaborate;\n@@ -127,7 +127,7 @@ package Types is\n    --  size of zero, since there are legitimate deallocations going on.\n \n    function To_Big_String_Ptr is\n-     new Unchecked_Conversion (System.Address, Big_String_Ptr);\n+     new Ada.Unchecked_Conversion (System.Address, Big_String_Ptr);\n    --  Used to obtain Big_String_Ptr values from external addresses\n \n    subtype Word_Hex_String is String (1 .. 8);"}]}