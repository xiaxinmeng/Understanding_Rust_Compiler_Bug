{"sha": "9d9bd40fb67d65bc99b142f66128b3ad07e63330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5YmQ0MGZiNjdkNjViYzk5YjE0MmY2NjEyOGIzYWQwN2U2MzMzMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-05-17T01:52:02Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-05-17T01:52:02Z"}, "message": "Charset.java (encode, decode): Synchronize on 'this', not the class.\n\n\t* java/nio/charset/Charset.java (encode, decode): Synchronize on\n\t'this', not the class.\n\nFrom-SVN: r99810", "tree": {"sha": "9e725d3de52f3724939de6899c9e60f4d9a069aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e725d3de52f3724939de6899c9e60f4d9a069aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d9bd40fb67d65bc99b142f66128b3ad07e63330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9bd40fb67d65bc99b142f66128b3ad07e63330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9bd40fb67d65bc99b142f66128b3ad07e63330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9bd40fb67d65bc99b142f66128b3ad07e63330/comments", "author": null, "committer": null, "parents": [{"sha": "e5b58ee301591519efb761c01b0a0938139b7164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b58ee301591519efb761c01b0a0938139b7164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b58ee301591519efb761c01b0a0938139b7164"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "9c9e466603e3369bdb9004e515188911e47aab4e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9bd40fb67d65bc99b142f66128b3ad07e63330/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9bd40fb67d65bc99b142f66128b3ad07e63330/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9d9bd40fb67d65bc99b142f66128b3ad07e63330", "patch": "@@ -1,3 +1,8 @@\n+2005-05-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/nio/charset/Charset.java (encode, decode): Synchronize on\n+\t'this', not the class.\n+\n 2005-05-16  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/java/net/protocol/http/Headers.java (parse): Include final"}, {"sha": "8c6286db9ca26353d531b1f5aa2f66d00a8eef17", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9bd40fb67d65bc99b142f66128b3ad07e63330/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9bd40fb67d65bc99b142f66128b3ad07e63330/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=9d9bd40fb67d65bc99b142f66128b3ad07e63330", "patch": "@@ -289,25 +289,22 @@ public boolean canEncode ()\n     return true;\n   }\n \n-  public final ByteBuffer encode (CharBuffer cb)\n+  // NB: This implementation serializes different threads calling\n+  // Charset.encode(), a potential performance problem.  It might\n+  // be better to remove the cache, or use ThreadLocal to cache on\n+  // a per-thread basis.\n+  public final synchronized ByteBuffer encode (CharBuffer cb)\n   {\n     try\n       {\n-        // NB: This implementation serializes different threads calling\n-        // Charset.encode(), a potential performance problem.  It might\n-        // be better to remove the cache, or use ThreadLocal to cache on\n-        // a per-thread basis.\n-        synchronized (Charset.class)\n-          {\n-            if (cachedEncoder == null)\n-              {\n-                cachedEncoder = newEncoder ()\n-                  .onMalformedInput (CodingErrorAction.REPLACE)\n-                  .onUnmappableCharacter (CodingErrorAction.REPLACE);\n-              } else\n- \t        cachedEncoder.reset();\n-            return cachedEncoder.encode (cb);\n-          }\n+\tif (cachedEncoder == null)\n+\t  {\n+\t    cachedEncoder = newEncoder ()\n+\t      .onMalformedInput (CodingErrorAction.REPLACE)\n+\t      .onUnmappableCharacter (CodingErrorAction.REPLACE);\n+\t  } else\n+\t  cachedEncoder.reset();\n+\treturn cachedEncoder.encode (cb);\n       }\n     catch (CharacterCodingException e)\n       {\n@@ -320,26 +317,23 @@ public final ByteBuffer encode (String str)\n     return encode (CharBuffer.wrap (str));\n   }\n \n-  public final CharBuffer decode (ByteBuffer bb)\n+  // NB: This implementation serializes different threads calling\n+  // Charset.decode(), a potential performance problem.  It might\n+  // be better to remove the cache, or use ThreadLocal to cache on\n+  // a per-thread basis.\n+  public final synchronized CharBuffer decode (ByteBuffer bb)\n   {\n     try\n       {\n-        // NB: This implementation serializes different threads calling\n-        // Charset.decode(), a potential performance problem.  It might\n-        // be better to remove the cache, or use ThreadLocal to cache on\n-        // a per-thread basis.\n-        synchronized (Charset.class)\n-          {\n-            if (cachedDecoder == null)\n-              {\n-                cachedDecoder = newDecoder ()\n-                  .onMalformedInput (CodingErrorAction.REPLACE)\n-                  .onUnmappableCharacter (CodingErrorAction.REPLACE);\n-              } else\n- \t        cachedDecoder.reset();\n+\tif (cachedDecoder == null)\n+\t  {\n+\t    cachedDecoder = newDecoder ()\n+\t      .onMalformedInput (CodingErrorAction.REPLACE)\n+\t      .onUnmappableCharacter (CodingErrorAction.REPLACE);\n+\t  } else\n+\t  cachedDecoder.reset();\n \n-            return cachedDecoder.decode (bb);\n-          }\n+\treturn cachedDecoder.decode (bb);\n       }\n     catch (CharacterCodingException e)\n       {"}]}