{"sha": "1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIwOGI3MzQzOTViOWVkNWUxOWNkMjRjYzdlMzczZGM2N2E0OTRiMQ==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2013-08-28T18:11:33Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2013-08-28T18:11:33Z"}, "message": "ipa-inline.c (edge_badness): Fix integer underflow.\n\n2013-08-28  Dehao Chen  <dehao@google.com>\n\n\t* ipa-inline.c (edge_badness): Fix integer underflow.\n\nFrom-SVN: r202059", "tree": {"sha": "7f87a14a6a1787f530faf7553847e01964c5c1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f87a14a6a1787f530faf7553847e01964c5c1b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48a3fa6902673ec0f484d52baba7d3db21878673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a3fa6902673ec0f484d52baba7d3db21878673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a3fa6902673ec0f484d52baba7d3db21878673"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "c9658fd681313872218e1c5ab5c306d4172ac960", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "patch": "@@ -1,3 +1,7 @@\n+2013-08-28  Dehao Chen  <dehao@google.com>\n+\n+\t* ipa-inline.c (edge_badness): Fix integer underflow.\n+\n 2013-08-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gtm-builtins.def (_ITM_free): Declare leaf."}, {"sha": "064e7c3a389f8d60b9dc82836c7a659083350033", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "patch": "@@ -2972,7 +2972,7 @@ ipa-inline.o : ipa-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(DIAGNOSTIC_H) $(FIBHEAP_H) $(PARAMS_H) $(TREE_PASS_H) \\\n    $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(RTL_H) $(IPA_PROP_H) \\\n    $(EXCEPT_H) $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H) $(TARGET_H) \\\n-   $(IPA_UTILS_H)\n+   $(IPA_UTILS_H) sreal.h\n ipa-inline-analysis.o : ipa-inline-analysis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(PARAMS_H) $(TREE_PASS_H) $(CFGLOOP_H) \\"}, {"sha": "115269571909912df27506d75576482bfdd06416", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b08b734395b9ed5e19cd24cc7e373dc67a494b1/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "patch": "@@ -113,10 +113,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\"\n+#include \"sreal.h\"\n \n /* Statistics we collect about inlining algorithm.  */\n static int overall_size;\n static gcov_type max_count;\n+static sreal max_count_real, max_relbenefit_real, half_int_min_real;\n \n /* Return false when inlining edge E would lead to violating\n    limits on function unit growth or stack usage growth.  \n@@ -891,12 +893,26 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \n   else if (max_count)\n     {\n+      sreal tmp, relbenefit_real, growth_real;\n       int relbenefit = relative_time_benefit (callee_info, edge, edge_time);\n-      badness =\n-\t((int)\n-\t ((double) edge->count * INT_MIN / 2 / max_count / RELATIVE_TIME_BENEFIT_RANGE) *\n-\t relbenefit) / growth;\n-      \n+\n+      sreal_init(&relbenefit_real, relbenefit, 0);\n+      sreal_init(&growth_real, growth, 0);\n+\n+      /* relative_edge_count.  */\n+      sreal_init (&tmp, edge->count, 0);\n+      sreal_div (&tmp, &tmp, &max_count_real);\n+\n+      /* relative_time_benefit.  */\n+      sreal_mul (&tmp, &tmp, &relbenefit_real);\n+      sreal_div (&tmp, &tmp, &max_relbenefit_real);\n+\n+      /* growth_f_caller.  */\n+      sreal_mul (&tmp, &tmp, &half_int_min_real);\n+      sreal_div (&tmp, &tmp, &growth_real);\n+\n+      badness = -1 * sreal_to_int (&tmp);\n+ \n       /* Be sure that insanity of the profile won't lead to increasing counts\n \t in the scalling and thus to overflow in the computation above.  */\n       gcc_assert (max_count >= edge->count);\n@@ -1542,6 +1558,9 @@ inline_small_functions (void)\n \t  if (max_count < edge->count)\n \t    max_count = edge->count;\n       }\n+  sreal_init (&max_count_real, max_count, 0);\n+  sreal_init (&max_relbenefit_real, RELATIVE_TIME_BENEFIT_RANGE, 0);\n+  sreal_init (&half_int_min_real, INT_MAX / 2, 0);\n   ipa_free_postorder_info ();\n   initialize_growth_caches ();\n "}]}