{"sha": "d303c992f61f5f94aaa314e914b1e27280940de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwM2M5OTJmNjFmNWY5NGFhYTMxNGU5MTRiMWUyNzI4MDk0MGRlMg==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2011-10-28T06:35:31Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2011-10-28T06:35:31Z"}, "message": "re PR rtl-optimization/49720 (Infinite recursion compiling gold binary_test.cc testcase)\n\n2011-10-28  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tPR rtl-optimization/49720\n\t* simplify-rtx.c (simplify_relational_operation_1): Detect\n\tinfinite recursion condition in \"(eq/ne (plus x cst1) cst2)\n\tsimplifies to (eq/ne x (cst2 - cst1))\" case.\n\n\ttestsuite/\n\t* g++.dg/torture/pr49720.C: New test.\n\nFrom-SVN: r180604", "tree": {"sha": "d232dac52ca30a6d4f292333f0379ec8ced66e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d232dac52ca30a6d4f292333f0379ec8ced66e41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d303c992f61f5f94aaa314e914b1e27280940de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d303c992f61f5f94aaa314e914b1e27280940de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d303c992f61f5f94aaa314e914b1e27280940de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d303c992f61f5f94aaa314e914b1e27280940de2/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2df19a351fc63643a15629cd3368d16ab20844b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df19a351fc63643a15629cd3368d16ab20844b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df19a351fc63643a15629cd3368d16ab20844b4"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "61320f852ab756dc66cb489ecb199eabd6819095", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d303c992f61f5f94aaa314e914b1e27280940de2", "patch": "@@ -1,3 +1,10 @@\n+2011-10-28  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR rtl-optimization/49720\n+\t* simplify-rtx.c (simplify_relational_operation_1): Detect\n+\tinfinite recursion condition in \"(eq/ne (plus x cst1) cst2)\n+\tsimplifies to (eq/ne x (cst2 - cst1))\" case.\n+\n 2011-10-27  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.md (snedi_special): Only match when not VIS3."}, {"sha": "ab888a96db84af0c5dead26100336a9a28a36142", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d303c992f61f5f94aaa314e914b1e27280940de2", "patch": "@@ -4352,10 +4352,20 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n     {\n       rtx x = XEXP (op0, 0);\n       rtx c = XEXP (op0, 1);\n+      enum rtx_code invcode = op0code == PLUS ? MINUS : PLUS;\n+      rtx tem = simplify_gen_binary (invcode, cmp_mode, op1, c);\n+\n+      /* Detect an infinite recursive condition, where we oscillate at this\n+\t simplification case between:\n+\t    A + B == C  <--->  C - B == A,\n+\t where A, B, and C are all constants with non-simplifiable expressions,\n+\t usually SYMBOL_REFs.  */\n+      if (GET_CODE (tem) == invcode\n+\t  && CONSTANT_P (x)\n+\t  && rtx_equal_p (c, XEXP (tem, 1)))\n+\treturn NULL_RTX;\n \n-      c = simplify_gen_binary (op0code == PLUS ? MINUS : PLUS,\n-\t\t\t       cmp_mode, op1, c);\n-      return simplify_gen_relational (code, mode, cmp_mode, x, c);\n+      return simplify_gen_relational (code, mode, cmp_mode, x, tem);\n     }\n \n   /* (ne:SI (zero_extract:SI FOO (const_int 1) BAR) (const_int 0))) is"}, {"sha": "c63184cbd1b1d91138195fa649b6e6969fc3af6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d303c992f61f5f94aaa314e914b1e27280940de2", "patch": "@@ -1,3 +1,8 @@\n+2011-10-28  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR rtl-optimization/49720\n+\t* g++.dg/torture/pr49720.C: New test.\n+\n 2011-10-27  David S. Miller  <davem@davemloft.net>\n \n \t* gcc.target/sparc/setcc-3.c: New test."}, {"sha": "c5da7ba670f1c831531d30ea279e6b384826a781", "filename": "gcc/testsuite/g++.dg/torture/pr49720.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49720.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d303c992f61f5f94aaa314e914b1e27280940de2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49720.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49720.C?ref=d303c992f61f5f94aaa314e914b1e27280940de2", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+\n+extern char t_start[], t_end[], t_size[];\n+bool foo (void)\n+{\n+  long size = reinterpret_cast<long>(t_size);\n+  return (size == t_end - t_start);\n+}"}]}