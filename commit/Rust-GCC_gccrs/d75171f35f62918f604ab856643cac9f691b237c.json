{"sha": "d75171f35f62918f604ab856643cac9f691b237c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1MTcxZjM1ZjYyOTE4ZjYwNGFiODU2NjQzY2FjOWY2OTFiMjM3Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-09-10T13:08:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-09-10T13:08:18Z"}, "message": "* config/alpha/predicates.md (small_symbolic_operand): Disallow large offsets.\n\nFrom-SVN: r191138", "tree": {"sha": "87194a56f45c6d8088d3a324d8034315f468c6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87194a56f45c6d8088d3a324d8034315f468c6ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d75171f35f62918f604ab856643cac9f691b237c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75171f35f62918f604ab856643cac9f691b237c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75171f35f62918f604ab856643cac9f691b237c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75171f35f62918f604ab856643cac9f691b237c/comments", "author": null, "committer": null, "parents": [{"sha": "30d32ae6b63e34152700a9b7b8b41cc85a5774c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d32ae6b63e34152700a9b7b8b41cc85a5774c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d32ae6b63e34152700a9b7b8b41cc85a5774c8"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "6e7175afd3fdbd56d2a365e96a5cd7803e3db235", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75171f35f62918f604ab856643cac9f691b237c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75171f35f62918f604ab856643cac9f691b237c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d75171f35f62918f604ab856643cac9f691b237c", "patch": "@@ -1,3 +1,8 @@\n+2012-09-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/predicates.md (small_symbolic_operand): Disallow\n+\tlarge offsets.\n+\n 2012-09-10  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54536"}, {"sha": "0a1885bd5f929e6923b59c6874abebafd8ff7c48", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75171f35f62918f604ab856643cac9f691b237c/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75171f35f62918f604ab856643cac9f691b237c/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=d75171f35f62918f604ab856643cac9f691b237c", "patch": "@@ -328,26 +328,50 @@\n (define_predicate \"small_symbolic_operand\"\n   (match_code \"const,symbol_ref\")\n {\n+  HOST_WIDE_INT ofs = 0, max_ofs = 0;\n+\n   if (! TARGET_SMALL_DATA)\n-    return 0;\n+    return false;\n \n   if (GET_CODE (op) == CONST\n       && GET_CODE (XEXP (op, 0)) == PLUS\n       && CONST_INT_P (XEXP (XEXP (op, 0), 1)))\n-    op = XEXP (XEXP (op, 0), 0);\n+    {\n+      ofs = INTVAL (XEXP (XEXP (op, 0), 1));\n+      op = XEXP (XEXP (op, 0), 0);\n+    }\n \n   if (GET_CODE (op) != SYMBOL_REF)\n-    return 0;\n+    return false;\n \n   /* ??? There's no encode_section_info equivalent for the rtl\n      constant pool, so SYMBOL_FLAG_SMALL never gets set.  */\n   if (CONSTANT_POOL_ADDRESS_P (op))\n-    return GET_MODE_SIZE (get_pool_mode (op)) <= g_switch_value;\n+    {\n+      max_ofs = GET_MODE_SIZE (get_pool_mode (op));\n+      if (max_ofs > g_switch_value)\n+\treturn false;\n+    }\n+  else if (SYMBOL_REF_LOCAL_P (op)\n+\t    && SYMBOL_REF_SMALL_P (op)\n+\t    && !SYMBOL_REF_WEAK (op)\n+\t    && !SYMBOL_REF_TLS_MODEL (op))\n+    {\n+      if (SYMBOL_REF_DECL (op))\n+        max_ofs = tree_low_cst (DECL_SIZE_UNIT (SYMBOL_REF_DECL (op)), 1);\n+    }\n+  else\n+    return false;\n \n-  return (SYMBOL_REF_LOCAL_P (op)\n-\t  && SYMBOL_REF_SMALL_P (op)\n-\t  && !SYMBOL_REF_WEAK (op)\n-\t  && !SYMBOL_REF_TLS_MODEL (op));\n+  /* Given that we know that the GP is always 8 byte aligned, we can\n+     always adjust by 7 without overflowing.  */\n+  if (max_ofs < 8)\n+    max_ofs = 8;\n+\n+  /* Since we know this is an object in a small data section, we know the\n+     entire section is addressable via GP.  We don't know where the section\n+     boundaries are, but we know the entire object is within.  */\n+  return IN_RANGE (ofs, 0, max_ofs - 1);\n })\n \n ;; Return true if OP is a SYMBOL_REF or CONST referencing a variable"}]}