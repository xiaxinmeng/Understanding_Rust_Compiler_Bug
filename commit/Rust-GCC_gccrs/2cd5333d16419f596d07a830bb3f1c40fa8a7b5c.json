{"sha": "2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNkNTMzM2QxNjQxOWY1OTZkMDdhODMwYmIzZjFjNDBmYThhN2I1Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-07T20:44:24Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-08T11:44:44Z"}, "message": "c++: Fix ICE with unexpanded parameter pack [PR99844]\n\nIn explicit17.C, we weren't detecting an unexpanded parameter pack in\nexplicit(bool), so we crashed on a TEMPLATE_PARM_INDEX in constexpr.\n\nI noticed the same is true for noexcept(), but only since my patch to\nimplement delayed parsing of noexcept.  Previously, we would detect the\nunexpanded pack in push_template_decl but now the noexcept expression\nhas not yet been parsed, so we need to do it a bit later.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99844\n\t* decl.c (build_explicit_specifier): Call\n\tcheck_for_bare_parameter_packs.\n\t* except.c (build_noexcept_spec): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99844\n\t* g++.dg/cpp2a/explicit16.C: Use c++20.\n\t* g++.dg/cpp0x/noexcept66.C: New test.\n\t* g++.dg/cpp2a/explicit17.C: New test.", "tree": {"sha": "8cb3dd03be101b1c26c6ef8760fd30a6cf0adb18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cb3dd03be101b1c26c6ef8760fd30a6cf0adb18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e34f88c955b417ea0ce0d5892cc4f83720b818d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34f88c955b417ea0ce0d5892cc4f83720b818d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34f88c955b417ea0ce0d5892cc4f83720b818d5"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "3294b4fa943c86136e94b75db1caa93c16e2dbb4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "patch": "@@ -17991,6 +17991,9 @@ require_deduced_type (tree decl, tsubst_flags_t complain)\n tree\n build_explicit_specifier (tree expr, tsubst_flags_t complain)\n {\n+  if (check_for_bare_parameter_packs (expr))\n+    return error_mark_node;\n+\n   if (instantiation_dependent_expression_p (expr))\n     /* Wait for instantiation, tsubst_function_decl will handle it.  */\n     return expr;"}, {"sha": "cbafc09629b8ddcf608579b9419e6f155506b69b", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "patch": "@@ -1228,6 +1228,8 @@ type_throw_all_p (const_tree type)\n tree\n build_noexcept_spec (tree expr, tsubst_flags_t complain)\n {\n+  if (check_for_bare_parameter_packs (expr))\n+    return error_mark_node;\n   if (TREE_CODE (expr) != DEFERRED_NOEXCEPT\n       && !value_dependent_expression_p (expr))\n     {"}, {"sha": "6c76d9146ad2057d1fdd10991ba4ad99617ceee1", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept66.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept66.C?ref=2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/99844\n+// { dg-do compile { target c++11 } }\n+\n+template <bool... B>\n+struct S {\n+ void fn() noexcept(B); // { dg-error \"parameter packs not expanded\" }\n+};\n+\n+void fn ()\n+{\n+  S<true> s;\n+  s.fn();\n+}"}, {"sha": "9c20f6332e94b88060eecf9453666e6145c5b971", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit16.C?ref=2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "patch": "@@ -1,5 +1,5 @@\n // PR c++/95066 - explicit malfunction with dependent expression.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T>\n struct Foo {"}, {"sha": "38a61f4a273d0ab6ee042ef749d60ddf510308ab", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit17.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit17.C?ref=2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/99844\n+// { dg-do compile { target c++20 } }\n+\n+template <bool... B>\n+struct S {\n+  constexpr explicit(B) S() {} // { dg-error \"parameter packs not expanded\" }\n+};\n+\n+constexpr S<true> s;"}]}