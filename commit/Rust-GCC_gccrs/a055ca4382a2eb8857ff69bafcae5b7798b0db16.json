{"sha": "a055ca4382a2eb8857ff69bafcae5b7798b0db16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1NWNhNDM4MmEyZWI4ODU3ZmY2OWJhZmNhZTViNzc5OGIwZGIxNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-12-27T09:40:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-12-27T09:40:23Z"}, "message": "re PR libgcj/49193 (__sync_xxxx builtins aren't used in sysdep/*/locks.h)\n\n\tPR libgcj/49193\n\t* sysdep/alpha/locks.h (compare_and_swap): Call\n\t__sync_bool_compare_and_swap.\n\t(release_set): Call __sync_synchronize.\n\nFrom-SVN: r182692", "tree": {"sha": "2e90142c8e00550b43cd89074295f2ca7ba0dec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e90142c8e00550b43cd89074295f2ca7ba0dec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a055ca4382a2eb8857ff69bafcae5b7798b0db16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a055ca4382a2eb8857ff69bafcae5b7798b0db16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a055ca4382a2eb8857ff69bafcae5b7798b0db16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a055ca4382a2eb8857ff69bafcae5b7798b0db16/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6231d28e0b83a7c06f71af45d0d64bf54f8fac39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6231d28e0b83a7c06f71af45d0d64bf54f8fac39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6231d28e0b83a7c06f71af45d0d64bf54f8fac39"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "841dfb753aebee48f11de558e0112f54dba95ecb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a055ca4382a2eb8857ff69bafcae5b7798b0db16/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a055ca4382a2eb8857ff69bafcae5b7798b0db16/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a055ca4382a2eb8857ff69bafcae5b7798b0db16", "patch": "@@ -1,3 +1,10 @@\n+2011-12-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR libgcj/49193\n+\t* sysdep/alpha/locks.h (compare_and_swap): Call\n+\t__sync_bool_compare_and_swap.\n+\t(release_set): Call __sync_synchronize.\n+\n 2011-12-20  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (i?86-*-linux*): Set SIGNAL_HANDLER_AUX."}, {"sha": "993afca06d4fba50621beec15150c2722f02521f", "filename": "libjava/sysdep/alpha/locks.h", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a055ca4382a2eb8857ff69bafcae5b7798b0db16/libjava%2Fsysdep%2Falpha%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a055ca4382a2eb8857ff69bafcae5b7798b0db16/libjava%2Fsysdep%2Falpha%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Falpha%2Flocks.h?ref=a055ca4382a2eb8857ff69bafcae5b7798b0db16", "patch": "@@ -1,6 +1,6 @@\n // locks.h - Thread synchronization primitives. Alpha implementation.\n \n-/* Copyright (C) 2002  Free Software Foundation\n+/* Copyright (C) 2002, 2011  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,41 +11,38 @@ details.  */\n #ifndef __SYSDEP_LOCKS_H__\n #define __SYSDEP_LOCKS_H__\n \n-typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n-\t\t\t\t/* address.\t\t\t\t*/\n+/* Integer type big enough for object address.\t*/\n+typedef size_t obj_addr_t;\n \n+// Atomically replace *addr by new_val if it was initially equal to old.\n+// Return true if the comparison succeeded.\n+// Assumed to have acquire semantics, i.e. later memory operations\n+// cannot execute before the compare_and_swap finishes.\n inline static bool\n compare_and_swap(volatile obj_addr_t *addr,\n-\t\t  \t\t\t      obj_addr_t old,\n-\t\t\t\t\t      obj_addr_t new_val) \n+\t\t obj_addr_t old,\n+\t\t obj_addr_t new_val) \n {\n-  unsigned long oldval;\n-  char result;\n-  __asm__ __volatile__(\n-      \"1:ldq_l %0, %1\\n\\t\" \\\n-      \"cmpeq %0, %5, %2\\n\\t\" \\\n-      \"beq %2, 2f\\n\\t\" \\\n-      \"mov %3, %0\\n\\t\" \\\n-      \"stq_c %0, %1\\n\\t\" \\\n-      \"bne %0, 2f\\n\\t\" \\\n-      \"br 1b\\n\\t\" \\\n-      \"2:mb\"\n-\t      : \"=&r\"(oldval), \"=m\"(*addr), \"=&r\"(result)\n-\t      : \"r\" (new_val), \"m\"(*addr), \"r\"(old) : \"memory\");\n-  return (bool) result;\n+  return __sync_bool_compare_and_swap(addr, old, new_val);\n }\n \n+// Set *addr to new_val with release semantics, i.e. making sure\n+// that prior loads and stores complete before this\n+// assignment.\n inline static void\n release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n {\n-  __asm__ __volatile__(\"mb\" : : : \"memory\");\n+  __sync_synchronize();\n   *(addr) = new_val;\n }\n \n+// Compare_and_swap with release semantics instead of acquire semantics.\n+// On many architecture, the operation makes both guarantees, so the\n+// implementation can be the same.\n inline static bool\n compare_and_swap_release(volatile obj_addr_t *addr,\n-\t\t  \t\t\t\t     obj_addr_t old,\n-\t\t\t\t\t\t     obj_addr_t new_val)\n+\t\t\t obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n {\n   return compare_and_swap(addr, old, new_val);\n }"}]}