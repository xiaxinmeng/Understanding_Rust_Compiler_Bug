{"sha": "ca06e09f3dd96a340b58aaee76a235458bab4325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwNmUwOWYzZGQ5NmEzNDBiNThhYWVlNzZhMjM1NDU4YmFiNDMyNQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:55:37Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:55:37Z"}, "message": "vset_lane.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vset_lane.c: New file.\n\nFrom-SVN: r224661", "tree": {"sha": "30a1387885b50821fa5dd5d659cd7df63ba26b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30a1387885b50821fa5dd5d659cd7df63ba26b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca06e09f3dd96a340b58aaee76a235458bab4325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca06e09f3dd96a340b58aaee76a235458bab4325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca06e09f3dd96a340b58aaee76a235458bab4325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca06e09f3dd96a340b58aaee76a235458bab4325/comments", "author": null, "committer": null, "parents": [{"sha": "364c52153d057decd7b2762430b3db77f842efc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364c52153d057decd7b2762430b3db77f842efc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364c52153d057decd7b2762430b3db77f842efc0"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "8189272857d1ee94faccbf8cbfd110b415bf8c1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06e09f3dd96a340b58aaee76a235458bab4325/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06e09f3dd96a340b58aaee76a235458bab4325/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca06e09f3dd96a340b58aaee76a235458bab4325", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vset_lane.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrsra_n.c: New file."}, {"sha": "51594068364676f04661f4ed442934bb0c0c9652", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vset_lane.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06e09f3dd96a340b58aaee76a235458bab4325/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvset_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06e09f3dd96a340b58aaee76a235458bab4325/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvset_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvset_lane.c?ref=ca06e09f3dd96a340b58aaee76a235458bab4325", "patch": "@@ -0,0 +1,99 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t       0xf4, 0xf5, 0xf6, 0x11 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0x22 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0x33 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x44 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0x55, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff1, 0x66, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0x77 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x88 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0x55, 0xf7 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff1, 0x66, 0xfff3 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0x4204cccd };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t0xfc, 0xfd, 0xfe, 0x99 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff4, 0xaa, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t0xfffffff2, 0xbb };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff0, 0xcc };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t 0xfc, 0xfd, 0xdd, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0xfff4, 0xfff5, 0xee, 0xfff7 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t 0xff, 0xfffffff3 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff0, 0x11 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t 0xfc, 0xfd, 0xdd, 0xff };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0xfff4, 0xfff5, 0xee, 0xfff7 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t   0xc1600000, 0x41333333 };\n+\n+#define TEST_MSG \"VSET_LANE/VSET_LANEQ\"\n+void exec_vset_lane (void)\n+{\n+  /* vec=vset_lane(val, vec, lane), then store the result.  */\n+#define TEST_VSET_LANE(Q, T1, T2, W, N, V, L)\t\t\t\t\\\n+  VECT_VAR(vector, T1, W, N) =\t\t\t\t\t\t\\\n+    vset##Q##_lane_##T2##W(V,\t\t\t\t\t\t\\\n+\t\t\t   VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\t   L);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+\n+  /* Choose value and lane arbitrarily.  */\n+  TEST_VSET_LANE(, int, s, 8, 8, 0x11, 7);\n+  TEST_VSET_LANE(, int, s, 16, 4, 0x22, 3);\n+  TEST_VSET_LANE(, int, s, 32, 2, 0x33, 1);\n+  TEST_VSET_LANE(, int, s, 64, 1, 0x44, 0);\n+  TEST_VSET_LANE(, uint, u, 8, 8, 0x55, 6);\n+  TEST_VSET_LANE(, uint, u, 16, 4, 0x66, 2);\n+  TEST_VSET_LANE(, uint, u, 32, 2, 0x77, 1);\n+  TEST_VSET_LANE(, uint, u, 64, 1, 0x88, 0);\n+  TEST_VSET_LANE(, poly, p, 8, 8, 0x55, 6);\n+  TEST_VSET_LANE(, poly, p, 16, 4, 0x66, 2);\n+  TEST_VSET_LANE(, float, f, 32, 2, 33.2f, 1);\n+\n+  TEST_VSET_LANE(q, int, s, 8, 16, 0x99, 15);\n+  TEST_VSET_LANE(q, int, s, 16, 8, 0xAA, 5);\n+  TEST_VSET_LANE(q, int, s, 32, 4, 0xBB, 3);\n+  TEST_VSET_LANE(q, int, s, 64, 2, 0xCC, 1);\n+  TEST_VSET_LANE(q, uint, u, 8, 16, 0xDD, 14);\n+  TEST_VSET_LANE(q, uint, u, 16, 8, 0xEE, 6);\n+  TEST_VSET_LANE(q, uint, u, 32, 4, 0xFF, 2);\n+  TEST_VSET_LANE(q, uint, u, 64, 2, 0x11, 1);\n+  TEST_VSET_LANE(q, poly, p, 8, 16, 0xDD, 14);\n+  TEST_VSET_LANE(q, poly, p, 16, 8, 0xEE, 6);\n+  TEST_VSET_LANE(q, float, f, 32, 4, 11.2f, 3);\n+\n+  CHECK_RESULTS(TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vset_lane ();\n+  return 0;\n+}"}]}