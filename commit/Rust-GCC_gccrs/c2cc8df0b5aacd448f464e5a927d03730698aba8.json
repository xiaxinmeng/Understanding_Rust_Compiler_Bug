{"sha": "c2cc8df0b5aacd448f464e5a927d03730698aba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJjYzhkZjBiNWFhY2Q0NDhmNDY0ZTVhOTI3ZDAzNzMwNjk4YWJhOA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-05T13:26:47Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-06T10:28:45Z"}, "message": "Add in support to compile static variables. Still requires name mangling\nfor the ASM name similar to functions.", "tree": {"sha": "e6e833c0a14708a3e7f7b41061a7e9b2b2576c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6e833c0a14708a3e7f7b41061a7e9b2b2576c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2cc8df0b5aacd448f464e5a927d03730698aba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cc8df0b5aacd448f464e5a927d03730698aba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2cc8df0b5aacd448f464e5a927d03730698aba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cc8df0b5aacd448f464e5a927d03730698aba8/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d80bf20ec46fc9a1e5b44a5f1231b584bcb28e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d80bf20ec46fc9a1e5b44a5f1231b584bcb28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d80bf20ec46fc9a1e5b44a5f1231b584bcb28e"}], "stats": {"total": 104, "additions": 102, "deletions": 2}, "files": [{"sha": "ef213607f0120916cad66014870f3ce0cd8a9197", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -437,7 +437,7 @@ StaticItem::as_string () const\n       str += \" mut\";\n     }\n \n-  str += name;\n+  str += \" \" + name;\n \n   // DEBUG: null pointer check\n   if (type == nullptr)"}, {"sha": "6ebb2e9c9934941dab12db84f7d2bb264b75e76b", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -2658,6 +2658,10 @@ class StaticItem : public VisItem\n     return type;\n   }\n \n+  bool is_mutable () const { return has_mut; }\n+\n+  Identifier get_identifier () const { return name; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "90630bb670f7d2c9fe687533597905bb5210356e", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -68,6 +68,34 @@ class CompileItem : public HIRCompileBase\n \t\t\t       named_struct);\n   }\n \n+  void visit (HIR::StaticItem &var)\n+  {\n+    TyTy::TyBase *resolved_type = nullptr;\n+    bool ok = ctx->get_tyctx ()->lookup_type (var.get_mappings ().get_hirid (),\n+\t\t\t\t\t      &resolved_type);\n+    rust_assert (ok);\n+\n+    Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    Bexpression *value = CompileExpr::Compile (var.get_expr (), ctx);\n+\n+    std::string name = var.get_identifier ();\n+    // FIXME need name mangling\n+    std::string asm_name = \"__\" + var.get_identifier ();\n+\n+    bool is_external = false;\n+    bool is_hidden = false;\n+    bool in_unique_section = true;\n+\n+    Bvariable *static_global\n+      = ctx->get_backend ()->global_variable (name, asm_name, type, is_external,\n+\t\t\t\t\t      is_hidden, in_unique_section,\n+\t\t\t\t\t      var.get_locus ());\n+    ctx->get_backend ()->global_variable_set_init (static_global, value);\n+\n+    ctx->insert_var_decl (var.get_mappings ().get_hirid (), static_global);\n+    ctx->push_var (static_global);\n+  }\n+\n   void visit (HIR::ConstantItem &constant)\n   {\n     TyTy::TyBase *resolved_type = nullptr;"}, {"sha": "2a1788030c28d7527f20be9bc693cd8e7600b75b", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -94,6 +94,32 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       struct_decl.get_locus ());\n   }\n \n+  void visit (AST::StaticItem &var)\n+  {\n+    std::vector<HIR::Attribute> outer_attrs;\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    HIR::Type *type = ASTLoweringType::translate (var.get_type ().get ());\n+    HIR::Expr *expr = ASTLoweringExpr::translate (var.get_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, var.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated\n+      = new HIR::StaticItem (mapping, var.get_identifier (), var.is_mutable (),\n+\t\t\t     std::unique_ptr<HIR::Type> (type),\n+\t\t\t     std::unique_ptr<HIR::Expr> (expr), vis,\n+\t\t\t     outer_attrs, var.get_locus ());\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       var.get_locus ());\n+  }\n+\n   void visit (AST::ConstantItem &constant)\n   {\n     std::vector<HIR::Attribute> outer_attrs;"}, {"sha": "69e39c8731dadde7a125166a46916434e1897f25", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -2157,6 +2157,14 @@ class StaticItem : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  Identifier get_identifier () const { return name; }\n+\n+  bool is_mutable () const { return has_mut; }\n+\n+  Expr *get_expr () { return expr.get (); }\n+\n+  Type *get_type () { return type.get (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "c3b23120ee960279d65944b04d3037618aa42baa", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -47,6 +47,12 @@ class ResolveItem : public ResolverBase\n     });\n   }\n \n+  void visit (AST::StaticItem &var)\n+  {\n+    ResolveType::go (var.get_type ().get (), var.get_node_id ());\n+    ResolveExpr::go (var.get_expr ().get (), var.get_node_id ());\n+  }\n+\n   void visit (AST::ConstantItem &constant)\n   {\n     ResolveType::go (constant.get_type ().get (), constant.get_node_id ());"}, {"sha": "6a4395fde8b059db63d49caeead409dc64fee568", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -42,6 +42,15 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\tstruct_decl.get_node_id ());\n   }\n \n+  void visit (AST::StaticItem &var)\n+  {\n+    resolver->get_name_scope ().insert (var.get_identifier (),\n+\t\t\t\t\tvar.get_node_id ());\n+    resolver->insert_new_definition (var.get_node_id (),\n+\t\t\t\t     Definition{var.get_node_id (),\n+\t\t\t\t\t\tvar.get_node_id ()});\n+  }\n+\n   void visit (AST::ConstantItem &constant)\n   {\n     resolver->get_name_scope ().insert (constant.get_identifier (),"}, {"sha": "bfa760946d3bd67a365041df82c2cb28d4772a56", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -2527,7 +2527,7 @@ Gcc_backend::global_variable_set_init (Bvariable *var, Bexpression *expr)\n     return;\n   DECL_INITIAL (var_decl) = expr_tree;\n \n-  // If this variable rustes in a unique section, it may need to rust into\n+  // If this variable goes in a unique section, it may need to go into\n   // a different one now that DECL_INITIAL is set.\n   if (symtab_node::get (var_decl)\n       && symtab_node::get (var_decl)->implicit_section)"}, {"sha": "34e702065192e4e90480f337eff2ca20752097c1", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -59,6 +59,15 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (struct_decl.get_mappings ().get_hirid (), type);\n   }\n \n+  void visit (HIR::StaticItem &var)\n+  {\n+    TyTy::TyBase *type = TypeCheckType::Resolve (var.get_type ());\n+    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (var.get_expr ());\n+\n+    context->insert_type (var.get_mappings ().get_hirid (),\n+\t\t\t  type->combine (expr_type));\n+  }\n+\n   void visit (HIR::ConstantItem &constant)\n   {\n     TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());"}, {"sha": "8464f413b602433bfedfbcbddbd825bab2b8b295", "filename": "gcc/testsuite/rust.test/compilable/static_var1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstatic_var1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstatic_var1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstatic_var1.rs?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -0,0 +1,5 @@\n+static x:i32 = 3;\n+\n+fn main() {\n+    let y = x +1;\n+}"}, {"sha": "d94c8c15eddbeceb9d746d8f14ac3191ad819659", "filename": "gcc/testsuite/rust.test/fail_compilation/static_var1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fstatic_var1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cc8df0b5aacd448f464e5a927d03730698aba8/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fstatic_var1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fstatic_var1.rs?ref=c2cc8df0b5aacd448f464e5a927d03730698aba8", "patch": "@@ -0,0 +1,5 @@\n+static x = 3;\n+\n+fn main() {\n+    let y = x +1;\n+}"}]}