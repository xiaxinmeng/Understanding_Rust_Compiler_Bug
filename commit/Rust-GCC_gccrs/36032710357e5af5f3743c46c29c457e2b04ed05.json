{"sha": "36032710357e5af5f3743c46c29c457e2b04ed05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwMzI3MTAzNTdlNWFmNWYzNzQzYzQ2YzI5YzQ1N2UyYjA0ZWQwNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-25T06:34:10Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-25T06:34:10Z"}, "message": "re PR fortran/32047 (ICE (segfault) for pure function without argument)\n\n2007-05-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32047\n\t* trans-expr.c (gfc_apply_interface_mapping_to_expr): Change\n\torder in logic under EXPR_FUNCTION to handle functions with\n\tno arguments.\n\n2007-05-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32047\n\t* gfortran.dg/result_in_spec_2.f90: New test.\n\nFrom-SVN: r125057", "tree": {"sha": "c4eb7560188e5880308cc156ac189df846efb9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4eb7560188e5880308cc156ac189df846efb9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36032710357e5af5f3743c46c29c457e2b04ed05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36032710357e5af5f3743c46c29c457e2b04ed05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36032710357e5af5f3743c46c29c457e2b04ed05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36032710357e5af5f3743c46c29c457e2b04ed05/comments", "author": null, "committer": null, "parents": [{"sha": "03fd30b180feb36cff3ae49be196c821d14b76c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fd30b180feb36cff3ae49be196c821d14b76c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fd30b180feb36cff3ae49be196c821d14b76c1"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "7ceb0ee1d81d9572aad59bf44698a4692972487d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=36032710357e5af5f3743c46c29c457e2b04ed05", "patch": "@@ -1,3 +1,10 @@\n+2007-05-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32047\n+\t* trans-expr.c (gfc_apply_interface_mapping_to_expr): Change\n+\torder in logic under EXPR_FUNCTION to handle functions with\n+\tno arguments.\n+\n 2007-05-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/31716"}, {"sha": "e621a6a2699ced2e1a8a3a0c89be8f12fcff5701", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=36032710357e5af5f3743c46c29c457e2b04ed05", "patch": "@@ -1653,12 +1653,12 @@ gfc_apply_interface_mapping_to_expr (gfc_interface_mapping * mapping,\n       break;\n \n     case EXPR_FUNCTION:\n-      if (expr->value.function.actual->expr->expr_type == EXPR_VARIABLE\n-\t    && gfc_apply_interface_mapping_to_expr (mapping,\n-\t\t\texpr->value.function.actual->expr)\n-\t    && expr->value.function.esym == NULL\n+      if (expr->value.function.esym == NULL\n \t    && expr->value.function.isym != NULL\n-\t    && expr->value.function.isym->generic_id == GFC_ISYM_LEN)\n+\t    && expr->value.function.isym->generic_id == GFC_ISYM_LEN\n+\t    && expr->value.function.actual->expr->expr_type == EXPR_VARIABLE\n+\t    && gfc_apply_interface_mapping_to_expr (mapping,\n+\t\t\texpr->value.function.actual->expr))\n \t{\n \t  gfc_expr *new_expr;\n \t  new_expr = gfc_copy_expr (expr->value.function.actual->expr->ts.cl->length);"}, {"sha": "47f40dff2bffd72283962b1bc8ac2df5925fc988", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36032710357e5af5f3743c46c29c457e2b04ed05", "patch": "@@ -1,3 +1,8 @@\n+2007-05-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32047\n+\t* gfortran.dg/result_in_spec_2.f90: New test.\n+\n 2007-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-math-4.c: Fix dg-xfail-if."}, {"sha": "cffa2300c20dd6a44b12bdda132a59e994052893", "filename": "gcc/testsuite/gfortran.dg/result_in_spec_2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_in_spec_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36032710357e5af5f3743c46c29c457e2b04ed05/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_in_spec_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_in_spec_2.f90?ref=36032710357e5af5f3743c46c29c457e2b04ed05", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! Tests the fix for PR32047, in which the null agument\n+! function for the character length would cause an ICE.\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org >\n+!\n+module test1\n+  implicit none\n+contains\n+  character(f()) function test2() result(r)\n+    interface\n+      pure function f()\n+        integer f\n+      end function f\n+    end interface\n+    r = '123'\n+  end function test2\n+end module test1\n+\n+pure function f()\n+  integer :: f\n+  f = 3\n+end function f\n+\n+program test\n+  use test1\n+  implicit none\n+  if(len (test2()) /= 3) call abort ()\n+  if(test2() /= '123') call abort ()\n+end program test\n+! { dg-final { cleanup-modules \"test1\" } }"}]}