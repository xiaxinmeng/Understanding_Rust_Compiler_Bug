{"sha": "d05b99205d244d9efd2758f80554b926d47972e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1Yjk5MjA1ZDI0NGQ5ZWZkMjc1OGY4MDU1NGI5MjZkNDc5NzJlNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-09T11:52:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-09T11:52:43Z"}, "message": "re PR fortran/45586 (ICE non-trivial conversion at assignment)\n\n2014-01-09  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/45586\n\t* lto.c (hash_canonical_type): Do not hash TREE_ADDRESSABLE,\n\tTYPE_ALIGN, TYPE_RESTRICT or TYPE_REF_CAN_ALIAS_ALL.\n\t(gimple_canonical_types_compatible_p): Do not compare them either.\n\nFrom-SVN: r206461", "tree": {"sha": "f5e9972462f41a60dcb3df08c1ad9eed213401b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5e9972462f41a60dcb3df08c1ad9eed213401b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d05b99205d244d9efd2758f80554b926d47972e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05b99205d244d9efd2758f80554b926d47972e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05b99205d244d9efd2758f80554b926d47972e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05b99205d244d9efd2758f80554b926d47972e6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2aaed0f3046ddb9c1e09d52db174718528245fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aaed0f3046ddb9c1e09d52db174718528245fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aaed0f3046ddb9c1e09d52db174718528245fa4"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "3830cdbf46c303ed744c34ca809b5755443b2ddb", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05b99205d244d9efd2758f80554b926d47972e6/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05b99205d244d9efd2758f80554b926d47972e6/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=d05b99205d244d9efd2758f80554b926d47972e6", "patch": "@@ -1,3 +1,10 @@\n+2014-01-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/45586\n+\t* lto.c (hash_canonical_type): Do not hash TREE_ADDRESSABLE,\n+\tTYPE_ALIGN, TYPE_RESTRICT or TYPE_REF_CAN_ALIAS_ALL.\n+\t(gimple_canonical_types_compatible_p): Do not compare them either.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "f78268344b7731b79d0d2e64be784b2821c4c135", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05b99205d244d9efd2758f80554b926d47972e6/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05b99205d244d9efd2758f80554b926d47972e6/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=d05b99205d244d9efd2758f80554b926d47972e6", "patch": "@@ -280,8 +280,6 @@ hash_canonical_type (tree type)\n      only existing types having the same features as the new type will be\n      checked.  */\n   v = iterative_hash_hashval_t (TREE_CODE (type), 0);\n-  v = iterative_hash_hashval_t (TREE_ADDRESSABLE (type), v);\n-  v = iterative_hash_hashval_t (TYPE_ALIGN (type), v);\n   v = iterative_hash_hashval_t (TYPE_MODE (type), v);\n \n   /* Incorporate common features of numerical types.  */\n@@ -308,9 +306,7 @@ hash_canonical_type (tree type)\n      pointed to but do not recurse to the pointed-to type.  */\n   if (POINTER_TYPE_P (type))\n     {\n-      v = iterative_hash_hashval_t (TYPE_REF_CAN_ALIAS_ALL (type), v);\n       v = iterative_hash_hashval_t (TYPE_ADDR_SPACE (TREE_TYPE (type)), v);\n-      v = iterative_hash_hashval_t (TYPE_RESTRICT (type), v);\n       v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n     }\n \n@@ -447,9 +443,6 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n   if (TREE_CODE (t1) != TREE_CODE (t2))\n     return false;\n \n-  if (TREE_ADDRESSABLE (t1) != TREE_ADDRESSABLE (t2))\n-    return false;\n-\n   /* Qualifiers do not matter for canonical type comparison purposes.  */\n \n   /* Void types and nullptr types are always the same.  */\n@@ -458,8 +451,7 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n     return true;\n \n   /* Can't be the same type if they have different alignment, or mode.  */\n-  if (TYPE_ALIGN (t1) != TYPE_ALIGN (t2)\n-      || TYPE_MODE (t1) != TYPE_MODE (t2))\n+  if (TYPE_MODE (t1) != TYPE_MODE (t2))\n     return false;\n \n   /* Non-aggregate types can be handled cheaply.  */\n@@ -486,18 +478,10 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t useless_type_conversion_p would do.  */\n       if (POINTER_TYPE_P (t1))\n \t{\n-\t  /* If the two pointers have different ref-all attributes,\n-\t     they can't be the same type.  */\n-\t  if (TYPE_REF_CAN_ALIAS_ALL (t1) != TYPE_REF_CAN_ALIAS_ALL (t2))\n-\t    return false;\n-\n \t  if (TYPE_ADDR_SPACE (TREE_TYPE (t1))\n \t      != TYPE_ADDR_SPACE (TREE_TYPE (t2)))\n \t    return false;\n \n-\t  if (TYPE_RESTRICT (t1) != TYPE_RESTRICT (t2))\n-\t    return false;\n-\n \t  if (TREE_CODE (TREE_TYPE (t1)) != TREE_CODE (TREE_TYPE (t2)))\n \t    return false;\n \t}"}]}