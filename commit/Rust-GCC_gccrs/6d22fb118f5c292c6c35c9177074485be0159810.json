{"sha": "6d22fb118f5c292c6c35c9177074485be0159810", "node_id": "C_kwDOANBUbNoAKDZkMjJmYjExOGY1YzI5MmM2YzM1YzkxNzcwNzQ0ODViZTAxNTk4MTA", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-02-27T11:42:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-13T08:04:39Z"}, "message": "[Ada] Ada ABI change when building with assertions\n\nCompiling with and without assertions enabled the name of some generated\nsymbols differ; this is an issue when using pre-built libraries.\n\ngcc/ada/\n\n\t* freeze.adb (Check_Inherited_Conditions): Dispatch table\n\twrappers must be placed in the list of entities of their scope\n\tat the same place of their wrapped primitive. This is required\n\tfor private types since these wrappers are built when their full\n\ttagged type declaration is frozen but they may override a\n\tprimitive defined in the public part of the package (and it is\n\timportant to maintain the wrapper in the list of public entities\n\tof the package to ensure their correct visibility).", "tree": {"sha": "69a5efff7c73daaa761a5730856004b79e549ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69a5efff7c73daaa761a5730856004b79e549ecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d22fb118f5c292c6c35c9177074485be0159810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d22fb118f5c292c6c35c9177074485be0159810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d22fb118f5c292c6c35c9177074485be0159810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d22fb118f5c292c6c35c9177074485be0159810/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a89d82142be1fd9d9a8a584977f41204e13463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a89d82142be1fd9d9a8a584977f41204e13463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a89d82142be1fd9d9a8a584977f41204e13463"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "bc8d958f440c3ae41eec33be9e86b9a76dd3266c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d22fb118f5c292c6c35c9177074485be0159810/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d22fb118f5c292c6c35c9177074485be0159810/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6d22fb118f5c292c6c35c9177074485be0159810", "patch": "@@ -1981,6 +1981,9 @@ package body Freeze is\n                DTW_Id   : Entity_Id;\n                DTW_Spec : Node_Id;\n \n+               Prim_Next_E : constant Entity_Id := Next_Entity (Prim);\n+               Prim_Prev_E : constant Entity_Id := Prev_Entity (Prim);\n+\n             begin\n                --  The wrapper must be analyzed in the scope of its wrapped\n                --  primitive (to ensure its correct decoration).\n@@ -2049,9 +2052,46 @@ package body Freeze is\n                   Insert_Before_And_Analyze (Freeze_Node (R), DTW_Decl);\n                else\n                   Append_Freeze_Action (R, DTW_Decl);\n+                  Analyze (DTW_Decl);\n                end if;\n \n-               Analyze (DTW_Decl);\n+               --  The analyis of DTW_Decl has removed Prim from its scope\n+               --  chain and added DTW_Id at the end of the scope chain. Move\n+               --  DTW_Id to its correct place in the scope chain: the analysis\n+               --  of the wrapper declaration has just added DTW_Id at the end\n+               --  of the list of entities of its scope. However, given that\n+               --  this wrapper overrides Prim, we must move DTW_Id to the\n+               --  original place of Prim in its scope chain. This is required\n+               --  for wrappers of private type primitives to ensure their\n+               --  correct visibility since wrappers are built when the full\n+               --  tagged type declaration is frozen (in the private part of\n+               --  the package) but they may override primitives defined in the\n+               --  public part of the package.\n+\n+               declare\n+                  DTW_Prev_E : constant Entity_Id := Prev_Entity (DTW_Id);\n+\n+               begin\n+                  pragma Assert (Last_Entity (Current_Scope) = DTW_Id);\n+                  pragma Assert\n+                    (Ekind (Current_Scope) not in E_Package | E_Generic_Package\n+                       or else No (First_Private_Entity (Current_Scope))\n+                       or else First_Private_Entity (Current_Scope) /= DTW_Id);\n+\n+                  --  Remove DTW_Id from the end of the doubly-linked list of\n+                  --  entities of this scope; no need to handle removing it\n+                  --  from the beginning of the chain since such case can never\n+                  --  occur for this entity.\n+\n+                  Set_Last_Entity (Current_Scope, DTW_Prev_E);\n+                  Set_Next_Entity (DTW_Prev_E, Empty);\n+\n+                  --  Place DTW_Id back in the original place of its wrapped\n+                  --  primitive in the list of entities of this scope.\n+\n+                  Link_Entities (Prim_Prev_E, DTW_Id);\n+                  Link_Entities (DTW_Id, Prim_Next_E);\n+               end;\n \n                --  Insert the body of the wrapper in the freeze actions of\n                --  its record type declaration to ensure that it is placed"}]}