{"sha": "d07daca1e5d1cef8c5249be10ba0ed6809c38330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3ZGFjYTFlNWQxY2VmOGM1MjQ5YmUxMGJhMGVkNjgwOWMzODMzMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-12-05T03:06:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-12-05T03:06:17Z"}, "message": "except.c (get_dynamic_handler_chain): Only make the call once per function.\n\n\t* except.c (get_dynamic_handler_chain): Only make the call once per\n \tfunction.\n\nFrom-SVN: r16955", "tree": {"sha": "efe76946688e2757c1873863e5b29032902309f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efe76946688e2757c1873863e5b29032902309f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07daca1e5d1cef8c5249be10ba0ed6809c38330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07daca1e5d1cef8c5249be10ba0ed6809c38330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07daca1e5d1cef8c5249be10ba0ed6809c38330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07daca1e5d1cef8c5249be10ba0ed6809c38330/comments", "author": null, "committer": null, "parents": [{"sha": "0609f0216fce8319c76cefff768d82693d9c1d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0609f0216fce8319c76cefff768d82693d9c1d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0609f0216fce8319c76cefff768d82693d9c1d4d"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "da734b73915a5913038fa36a004ad1c9a3bdd024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07daca1e5d1cef8c5249be10ba0ed6809c38330/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07daca1e5d1cef8c5249be10ba0ed6809c38330/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d07daca1e5d1cef8c5249be10ba0ed6809c38330", "patch": "@@ -1,5 +1,8 @@\n Thu Dec  4 11:51:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* except.c (get_dynamic_handler_chain): Only make the call once per\n+ \tfunction.\n+\n \t* except.c (expand_end_all_catch): Fix for sjlj exceptions.\n \n Thu Dec  4 12:30:40 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>"}, {"sha": "0e9e8142ce51c8244c2e5c49d1c8ba56b61ab1b7", "filename": "gcc/except.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07daca1e5d1cef8c5249be10ba0ed6809c38330/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07daca1e5d1cef8c5249be10ba0ed6809c38330/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=d07daca1e5d1cef8c5249be10ba0ed6809c38330", "patch": "@@ -728,31 +728,20 @@ add_partial_entry (handler)\n    This routine is here to facilitate the porting of this code to\n    systems with threads.  One can either replace the routine we emit a\n    call for here in libgcc2.c, or one can modify this routine to work\n-   with their thread system.  */\n+   with their thread system.\n+\n+   Ideally, we really only want one per real function, not one\n+   per inlined function.  */\n \n rtx\n get_dynamic_handler_chain ()\n {\n-#if 0\n-  /* Do this once we figure out how to get this to the front of the\n-     function, and we really only want one per real function, not one\n-     per inlined function.  */\n-  if (current_function_dhc == 0)\n-    {\n-      rtx dhc, insns;\n-      start_sequence ();\n-\n-      /* ... */\n-      insns = get_insns ();\n-      end_sequence ();\n-      emit_insns_before (insns, get_first_nonparm_insn ());\n-    }\n-  /* We don't want a copy of the dhc, but rather, the single dhc.  */\n-  return gen_rtx (MEM, Pmode, current_function_dhc);\n-#endif\n-\n   static tree fn;\n   tree expr;\n+  rtx insns;\n+\n+  if (current_function_dhc)\n+    return current_function_dhc;\n \n   if (fn == NULL_TREE)\n     {\n@@ -779,7 +768,13 @@ get_dynamic_handler_chain ()\n   TREE_SIDE_EFFECTS (expr) = 1;\n   expr = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (expr)), expr);\n \n-  return expand_expr (expr, NULL_RTX, VOIDmode, 0);\n+  start_sequence ();\n+  current_function_dhc = expand_expr (expr, NULL_RTX, VOIDmode, 0);\n+  insns = get_insns ();\n+  end_sequence ();\n+  emit_insns_before (insns, get_first_nonparm_insn ());\n+\n+  return current_function_dhc;\n }\n \n /* Get a reference to the dynamic cleanup chain.  It points to the"}]}