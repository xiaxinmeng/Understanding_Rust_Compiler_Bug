{"sha": "ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM5ZmFjZThkMjZlYTRiNmFhNzI5MDJlY2MyMmU4OWVmMDA3NjNjNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-27T13:50:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-27T13:58:48Z"}, "message": "c++: Revert alias template change [pr95263]\n\nTurns out templates are more complicated than you think, even when you\nknow they are more complicated than you think.  Reverting this change.\n\n\tPR c++/95263\n\t* pt.c (lookup_template_class_1): Restore alias template mutation.", "tree": {"sha": "f9b99167a3a91f8d0b0e1cbecf079a1267e37581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b99167a3a91f8d0b0e1cbecf079a1267e37581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9face8d26ea4b6aa72902ecc22e89ef00763c5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8e16aea85286721eb5689f9bcae09d36003cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e16aea85286721eb5689f9bcae09d36003cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8e16aea85286721eb5689f9bcae09d36003cb1"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "4d9651acee65be392a53fc004cbb9cb94c0ed88d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9face8d26ea4b6aa72902ecc22e89ef00763c5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9face8d26ea4b6aa72902ecc22e89ef00763c5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "patch": "@@ -10062,21 +10062,8 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t    }\n \t}\n \n-      /* Build template info for the new specialization.  This can\n-\t overwrite the existing TEMPLATE_INFO for T (that points to\n-\t its instantiated TEMPLATE_DECL), with this one that points to\n-\t the most general template, but that's what we want.  */\n-\n-      if (TYPE_ALIAS_P (t))\n-\t{\n-\t  /* This should already have been constructed during\n-\t     instantiation of the alias decl.  */\n-\t  tree ti = DECL_TEMPLATE_INFO (TYPE_NAME (t));\n-\t  gcc_checking_assert (template_args_equal (TI_ARGS (ti), arglist)\n-\t\t\t       && TI_TEMPLATE (ti) == found);\n-\t}\n-      else\n-\tSET_TYPE_TEMPLATE_INFO (t, build_template_info (found, arglist));\n+      // Build template info for the new specialization.\n+      SET_TYPE_TEMPLATE_INFO (t, build_template_info (found, arglist));\n \n       elt.spec = t;\n       slot = type_specializations->find_slot_with_hash (&elt, hash, INSERT);"}, {"sha": "08a1b8730c0507f9095725b61f55bfc2d110ffe7", "filename": "gcc/testsuite/g++.dg/template/pr95263.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9face8d26ea4b6aa72902ecc22e89ef00763c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr95263.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9face8d26ea4b6aa72902ecc22e89ef00763c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr95263.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr95263.C?ref=ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11 } }\n+// PR C++/95263\n+// ICE on alias template instantiation\n+\n+template <typename> class TPL {\n+  template <int> using INT = int;\n+};\n+\n+template <typename T> class Klass\n+{\n+public:\n+  template <int I> using ALIAS = typename TPL<T>::INT<I>;\n+\n+  template <int> static void FUNC (); // OK\n+\n+  template <int I, typename> static ALIAS<I> FUNC (); // SFINAE ICE\n+};\n+\n+void Fn ()\n+{\n+  Klass<int>::FUNC<0> ();\n+}\n+"}]}