{"sha": "d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiMDZlZjkwMThlODVlYjYyMWQ1YmExMGEyNDE2YTJjNmNiZGRkNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-23T15:05:40Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-23T15:05:40Z"}, "message": "tree-ssa-live.c (live_worklist): Take a stack allocated on heap as an argument.\n\n\t* tree-ssa-live.c (live_worklist): Take a stack allocated on\n\theap as an argument.  Update uses of stack.\n\t(calculate_live_on_entry): Allocate stack on heap.\n\nFrom-SVN: r98616", "tree": {"sha": "ace4bcbd8cce1681a56292c7770f86af12a0ce7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace4bcbd8cce1681a56292c7770f86af12a0ce7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5/comments", "author": null, "committer": null, "parents": [{"sha": "3d20d4d843d62e0bc37b4edc232c44be04400377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d20d4d843d62e0bc37b4edc232c44be04400377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d20d4d843d62e0bc37b4edc232c44be04400377"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "10fa8b16213fdfeeddaffeb289f6517f9b486359", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5", "patch": "@@ -1,3 +1,9 @@\n+2005-04-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-live.c (live_worklist): Take a stack allocated on\n+\theap as an argument.  Update uses of stack.\n+\t(calculate_live_on_entry): Allocate stack on heap.\n+\n 2005-04-23  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin.c (machopic_indirection_name): Don't use"}, {"sha": "53ab28b07afb4b77b533a9bd2be11cc936cb6fd8", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=d0b06ef9018e85eb621d5ba10a2416a2c6cbddd5", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree-ssa-live.h\"\n #include \"errors.h\"\n \n-static void live_worklist (tree_live_info_p, varray_type, int);\n+static void live_worklist (tree_live_info_p, int *, int);\n static tree_live_info_p new_tree_live_info (var_map);\n static inline void set_if_valid (var_map, bitmap, tree);\n static inline void add_livein_if_notdef (tree_live_info_p, bitmap,\n@@ -478,7 +478,7 @@ delete_tree_live_info (tree_live_info_p live)\n    passed in rather than being allocated on every call.  */\n \n static void\n-live_worklist (tree_live_info_p live, varray_type stack, int i)\n+live_worklist (tree_live_info_p live, int *stack, int i)\n {\n   unsigned b;\n   tree var;\n@@ -487,20 +487,20 @@ live_worklist (tree_live_info_p live, varray_type stack, int i)\n   var_map map = live->map;\n   edge_iterator ei;\n   bitmap_iterator bi;\n+  int *tos = stack;\n \n   var = partition_to_var (map, i);\n   if (SSA_NAME_DEF_STMT (var))\n     def_bb = bb_for_stmt (SSA_NAME_DEF_STMT (var));\n \n   EXECUTE_IF_SET_IN_BITMAP (live->livein[i], 0, b, bi)\n     {\n-      VARRAY_PUSH_INT (stack, b);\n+      *tos++ = b;\n     }\n \n-  while (VARRAY_ACTIVE_SIZE (stack) > 0)\n+  while (tos != stack)\n     {\n-      b = VARRAY_TOP_INT (stack);\n-      VARRAY_POP (stack);\n+      b = *--tos;\n \n       FOR_EACH_EDGE (e, ei, BASIC_BLOCK (b)->preds)\n \tif (e->src != ENTRY_BLOCK_PTR)\n@@ -511,7 +511,7 @@ live_worklist (tree_live_info_p live, varray_type stack, int i)\n \t    if (!bitmap_bit_p (live->livein[i], e->src->index))\n \t      {\n \t\tbitmap_set_bit (live->livein[i], e->src->index);\n-\t\tVARRAY_PUSH_INT (stack, e->src->index);\n+\t\t*tos++ = e->src->index;\n \t      }\n \t  }\n     }\n@@ -560,7 +560,7 @@ calculate_live_on_entry (var_map map)\n   tree phi, var, stmt;\n   tree op;\n   edge e;\n-  varray_type stack;\n+  int *stack;\n   block_stmt_iterator bsi;\n   ssa_op_iter iter;\n   bitmap_iterator bi;\n@@ -624,11 +624,12 @@ calculate_live_on_entry (var_map map)\n \t}\n     }\n \n-  VARRAY_INT_INIT (stack, last_basic_block, \"stack\");\n+  stack = xmalloc (sizeof (int) * last_basic_block);\n   EXECUTE_IF_SET_IN_BITMAP (live->global, 0, i, bi)\n     {\n       live_worklist (live, stack, i);\n     }\n+  free (stack);\n \n #ifdef ENABLE_CHECKING\n    /* Check for live on entry partitions and report those with a DEF in"}]}