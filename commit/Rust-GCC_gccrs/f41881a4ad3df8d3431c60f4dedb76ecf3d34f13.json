{"sha": "f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxODgxYTRhZDNkZjhkMzQzMWM2MGY0ZGVkYjc2ZWNmM2QzNGYxMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-02-26T16:29:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-02-26T16:29:30Z"}, "message": "re PR rtl-optimization/83496 (wrong code generated with -Os -mbranch-cost=1)\n\n\tPR rtl-optimization/83496\n\t* reorg.c (steal_delay_list_from_target): Change REDUNDANT array from\n\tbooleans to RTXes.  Call fix_reg_dead_note on every non-null element.\n\t(steal_delay_list_from_fallthrough): Call fix_reg_dead_note on a\n\tredundant insn, if any.\n\t(relax_delay_slots): Likewise.\n\t(update_reg_unused_notes): Rename REDUNDANT_INSN to OTHER_INSN.\n\nFrom-SVN: r257996", "tree": {"sha": "4bb90f08dccd078e84677fabd28db0a9faf0d619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bb90f08dccd078e84677fabd28db0a9faf0d619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/comments", "author": null, "committer": null, "parents": [{"sha": "d99dcb77bbbfdaf30c5993ea917001da259f47ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99dcb77bbbfdaf30c5993ea917001da259f47ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99dcb77bbbfdaf30c5993ea917001da259f47ba"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "813138aad64cfd812a189edba4dc47f1487db669", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "patch": "@@ -1,3 +1,13 @@\n+2018-02-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/83496\n+\t* reorg.c (steal_delay_list_from_target): Change REDUNDANT array from\n+\tbooleans to RTX.  Call fix_reg_dead_note on every non-null element.\n+\t(steal_delay_list_from_fallthrough): Call fix_reg_dead_note on a\n+\tredundant insn, if any.\n+\t(relax_delay_slots): Likewise.\n+\t(update_reg_unused_notes): Rename REDUNDANT_INSN to OTHER_INSN.\n+\n 2018-02-26  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83965"}, {"sha": "ecdc3752af3c5cb5cf5fae4b2bc507802740e090", "filename": "gcc/reorg.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "patch": "@@ -1036,7 +1036,8 @@ check_annul_list_true_false (int annul_true_p,\n \n static void\n steal_delay_list_from_target (rtx_insn *insn, rtx condition, rtx_sequence *seq,\n-\t\t\t      vec<rtx_insn *> *delay_list, resources *sets,\n+\t\t\t      vec<rtx_insn *> *delay_list,\n+\t\t\t      struct resources *sets,\n \t\t\t      struct resources *needed,\n \t\t\t      struct resources *other_needed,\n \t\t\t      int slots_to_fill, int *pslots_filled,\n@@ -1049,7 +1050,7 @@ steal_delay_list_from_target (rtx_insn *insn, rtx condition, rtx_sequence *seq,\n   int used_annul = 0;\n   int i;\n   struct resources cc_set;\n-  bool *redundant;\n+  rtx_insn **redundant;\n \n   /* We can't do anything if there are more delay slots in SEQ than we\n      can handle, or if we don't know that it will be a taken branch.\n@@ -1088,7 +1089,7 @@ steal_delay_list_from_target (rtx_insn *insn, rtx condition, rtx_sequence *seq,\n   if (! targetm.can_follow_jump (insn, seq->insn (0)))\n     return;\n \n-  redundant = XALLOCAVEC (bool, XVECLEN (seq, 0));\n+  redundant = XALLOCAVEC (rtx_insn *, XVECLEN (seq, 0));\n   for (i = 1; i < seq->len (); i++)\n     {\n       rtx_insn *trial = seq->insn (i);\n@@ -1152,7 +1153,10 @@ steal_delay_list_from_target (rtx_insn *insn, rtx condition, rtx_sequence *seq,\n      we therefore decided not to copy.  */\n   for (i = 1; i < seq->len (); i++)\n     if (redundant[i])\n-      update_block (seq->insn (i), insn);\n+      {\n+\tfix_reg_dead_note (redundant[i], insn);\n+\tupdate_block (seq->insn (i), insn);\n+      }\n \n   /* Show the place to which we will be branching.  */\n   *pnew_thread = first_active_target_insn (JUMP_LABEL (seq->insn (0)));\n@@ -1199,6 +1203,7 @@ steal_delay_list_from_fallthrough (rtx_insn *insn, rtx condition,\n   for (i = 1; i < seq->len (); i++)\n     {\n       rtx_insn *trial = seq->insn (i);\n+      rtx_insn *prior_insn;\n \n       /* If TRIAL sets CC0, stealing it will move it too far from the use\n \t of CC0.  */\n@@ -1210,8 +1215,9 @@ steal_delay_list_from_fallthrough (rtx_insn *insn, rtx condition,\n \tbreak;\n \n       /* If this insn was already done, we don't need it.  */\n-      if (redundant_insn (trial, insn, *delay_list))\n+      if ((prior_insn = redundant_insn (trial, insn, *delay_list)))\n \t{\n+\t  fix_reg_dead_note (prior_insn, insn);\n \t  update_block (trial, insn);\n \t  delete_from_delay_slot (trial);\n \t  continue;\n@@ -1791,15 +1797,14 @@ fix_reg_dead_note (rtx_insn *start_insn, rtx stop_insn)\n       }\n }\n \n-/* Delete any REG_UNUSED notes that exist on INSN but not on REDUNDANT_INSN.\n+/* Delete any REG_UNUSED notes that exist on INSN but not on OTHER_INSN.\n \n    This handles the case of udivmodXi4 instructions which optimize their\n-   output depending on whether any REG_UNUSED notes are present.\n-   we must make sure that INSN calculates as many results as REDUNDANT_INSN\n-   does.  */\n+   output depending on whether any REG_UNUSED notes are present.  We must\n+   make sure that INSN calculates as many results as OTHER_INSN does.  */\n \n static void\n-update_reg_unused_notes (rtx_insn *insn, rtx redundant_insn)\n+update_reg_unused_notes (rtx_insn *insn, rtx other_insn)\n {\n   rtx link, next;\n \n@@ -1811,8 +1816,7 @@ update_reg_unused_notes (rtx_insn *insn, rtx redundant_insn)\n \t  || !REG_P (XEXP (link, 0)))\n \tcontinue;\n \n-      if (! find_regno_note (redundant_insn, REG_UNUSED,\n-\t\t\t     REGNO (XEXP (link, 0))))\n+      if (!find_regno_note (other_insn, REG_UNUSED, REGNO (XEXP (link, 0))))\n \tremove_note (insn, link);\n     }\n }\n@@ -2325,9 +2329,8 @@ follow_jumps (rtx label, rtx_insn *jump, bool *crossing)\n    taken and THREAD_IF_TRUE is set.  This is used for the branch at the\n    end of a loop back up to the top.\n \n-   OWN_THREAD and OWN_OPPOSITE_THREAD are true if we are the only user of the\n-   thread.  I.e., it is the fallthrough code of our jump or the target of the\n-   jump when we are the only jump going there.\n+   OWN_THREAD is true if we are the only user of the thread, i.e. it is\n+   the target of the jump when we are the only jump going there.\n \n    If OWN_THREAD is false, it must be the \"true\" thread of a jump.  In that\n    case, we can only take insns from the head of the thread for our delay\n@@ -3118,7 +3121,7 @@ relax_delay_slots (rtx_insn *first)\n   /* Look at every JUMP_INSN and see if we can improve it.  */\n   for (insn = first; insn; insn = next)\n     {\n-      rtx_insn *other;\n+      rtx_insn *other, *prior_insn;\n       bool crossing;\n \n       next = next_active_insn (insn);\n@@ -3224,8 +3227,9 @@ relax_delay_slots (rtx_insn *first)\n       /* See if the first insn in the delay slot is redundant with some\n \t previous insn.  Remove it from the delay slot if so; then set up\n \t to reprocess this insn.  */\n-      if (redundant_insn (pat->insn (1), delay_insn, vNULL))\n+      if ((prior_insn = redundant_insn (pat->insn (1), delay_insn, vNULL)))\n \t{\n+\t  fix_reg_dead_note (prior_insn, insn);\n \t  update_block (pat->insn (1), insn);\n \t  delete_from_delay_slot (pat->insn (1));\n \t  next = prev_active_insn (next);"}, {"sha": "85cf234b2831e790bfa782745936dab0304e497c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "patch": "@@ -1,3 +1,7 @@\n+2018-02-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20180226-1.c: New test.\n+\n 2018-02-26  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83965"}, {"sha": "bfd0035a11b581be9e8e70c98302606fb646af97", "filename": "gcc/testsuite/gcc.c-torture/execute/20180226-1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41881a4ad3df8d3431c60f4dedb76ecf3d34f13/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180226-1.c?ref=f41881a4ad3df8d3431c60f4dedb76ecf3d34f13", "patch": "@@ -0,0 +1 @@\n+/home/eric/build/gcc/mips-linux/pr83496.c\n\\ No newline at end of file"}]}