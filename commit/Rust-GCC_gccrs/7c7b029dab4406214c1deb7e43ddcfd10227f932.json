{"sha": "7c7b029dab4406214c1deb7e43ddcfd10227f932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3YjAyOWRhYjQ0MDYyMTRjMWRlYjdlNDNkZGNmZDEwMjI3ZjkzMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-24T04:30:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-24T04:30:40Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1070", "tree": {"sha": "4dc0932b72c3b6a767d2541c4cea1b78ef428747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dc0932b72c3b6a767d2541c4cea1b78ef428747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c7b029dab4406214c1deb7e43ddcfd10227f932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7b029dab4406214c1deb7e43ddcfd10227f932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c7b029dab4406214c1deb7e43ddcfd10227f932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7b029dab4406214c1deb7e43ddcfd10227f932/comments", "author": null, "committer": null, "parents": [{"sha": "329d2160a4f77a1409ae55f0067d699542498fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329d2160a4f77a1409ae55f0067d699542498fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329d2160a4f77a1409ae55f0067d699542498fa3"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "fcabebd071a1b3bb1131aa78710d795a6721e525", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7b029dab4406214c1deb7e43ddcfd10227f932/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7b029dab4406214c1deb7e43ddcfd10227f932/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7c7b029dab4406214c1deb7e43ddcfd10227f932", "patch": "@@ -45,6 +45,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"flags.h\"\n #include \"tree.h\"\n \n+/* Handle floating overflow for `const_binop'.  */\n+static jmp_buf float_error;\n+\n void lshift_double ();\n void rshift_double ();\n void lrotate_double ();\n@@ -938,9 +941,6 @@ split_tree (in, code, varp, conp, varsignp)\n    We assume ARG1 and ARG2 have the same data type,\n    or at least are the same kind of constant and the same machine mode.  */\n \n-/* Handle floating overflow for `const_binop'.  */\n-static jmp_buf const_binop_error;\n-\n static tree\n const_binop (code, arg1, arg2)\n      enum tree_code code;\n@@ -1165,15 +1165,16 @@ const_binop (code, arg1, arg2)\n       register REAL_VALUE_TYPE d1;\n       register REAL_VALUE_TYPE d2;\n       register REAL_VALUE_TYPE value;\n+      tree t;\n \n       d1 = TREE_REAL_CST (arg1);\n       d2 = TREE_REAL_CST (arg2);\n-      if (setjmp (const_binop_error))\n+      if (setjmp (float_error))\n \t{\n \t  warning (\"floating overflow in constant folding\");\n \t  return build (code, TREE_TYPE (arg1), arg1, arg2);\n \t}\n-      set_float_handler (const_binop_error);\n+      set_float_handler (float_error);\n \n #ifdef REAL_ARITHMETIC\n       REAL_ARITHMETIC (value, code, d1, d2);\n@@ -1213,9 +1214,10 @@ const_binop (code, arg1, arg2)\n \t  abort ();\n \t}\n #endif /* no REAL_ARITHMETIC */\n+      t = build_real (TREE_TYPE (arg1),\n+\t\t      REAL_VALUE_TRUNCATE (TYPE_MODE (TREE_TYPE (arg1)), value));\n       set_float_handler (0);\n-      return build_real (TREE_TYPE (arg1),\n-\t\t\t REAL_VALUE_TRUNCATE (TYPE_MODE (TREE_TYPE (arg1)), value));\n+      return t;\n     }\n #endif /* not REAL_IS_NOT_DOUBLE, or REAL_ARITHMETIC */\n   if (TREE_CODE (arg1) == COMPLEX_CST)\n@@ -1413,8 +1415,19 @@ fold_convert (t, arg1)\n \treturn build_real_from_int_cst (type, arg1);\n #endif /* not REAL_IS_NOT_DOUBLE, or REAL_ARITHMETIC */\n       if (TREE_CODE (arg1) == REAL_CST)\n-\treturn build_real (type, REAL_VALUE_TRUNCATE (TYPE_MODE (type),\n-\t\t\t\t\t\t      TREE_REAL_CST (arg1)));\n+\t{\n+\t  if (setjmp (float_error))\n+\t    {\n+\t      warning (\"floating overflow in constant folding\");\n+\t      return t;\n+\t    }\n+\t  set_float_handler (float_error);\n+\n+\t  t = build_real (type, REAL_VALUE_TRUNCATE (TYPE_MODE (type),\n+\t\t\t\t\t\t     TREE_REAL_CST (arg1)));\n+\t  set_float_handler (0);\n+\t  return t;\n+\t}\n     }\n   TREE_CONSTANT (t) = 1;\n   return t;"}]}