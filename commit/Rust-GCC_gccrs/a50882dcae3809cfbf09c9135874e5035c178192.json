{"sha": "a50882dcae3809cfbf09c9135874e5035c178192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUwODgyZGNhZTM4MDljZmJmMDljOTEzNTg3NGU1MDM1YzE3ODE5Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-05-16T21:55:14Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-05-16T21:55:14Z"}, "message": "* cpplib.h: Undo mistaken commit.\n\nFrom-SVN: r42173", "tree": {"sha": "f80036f3d54c6bbfbfd17b1eb831882b7064e6d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80036f3d54c6bbfbfd17b1eb831882b7064e6d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a50882dcae3809cfbf09c9135874e5035c178192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50882dcae3809cfbf09c9135874e5035c178192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50882dcae3809cfbf09c9135874e5035c178192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50882dcae3809cfbf09c9135874e5035c178192/comments", "author": null, "committer": null, "parents": [{"sha": "608477bd7b7fd7bf1877bcd990d9d3579b3d9ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608477bd7b7fd7bf1877bcd990d9d3579b3d9ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608477bd7b7fd7bf1877bcd990d9d3579b3d9ca1"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "dc4c763ed19b1f714dce2dca33f5232bb503f8f0", "filename": "gcc/cpplib.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50882dcae3809cfbf09c9135874e5035c178192/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50882dcae3809cfbf09c9135874e5035c178192/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=a50882dcae3809cfbf09c9135874e5035c178192", "patch": "@@ -37,7 +37,7 @@ typedef struct cpp_buffer cpp_buffer;\n typedef struct cpp_options cpp_options;\n typedef struct cpp_token cpp_token;\n typedef struct cpp_string cpp_string;\n-typedef struct c_common_identifier cpp_hashnode;\n+typedef struct cpp_hashnode cpp_hashnode;\n typedef struct cpp_macro cpp_macro;\n typedef struct cpp_lexer_pos cpp_lexer_pos;\n typedef struct cpp_lookahead cpp_lookahead;\n@@ -177,7 +177,7 @@ struct cpp_token\n \n   union\n   {\n-    cpp_hashnode *node;\t\t/* An identifier.  */\n+    struct cpp_hashnode *node;\t/* An identifier.  */\n     struct cpp_string str;\t/* A string, or number.  */\n     unsigned int arg_no;\t/* Argument no. for a CPP_MACRO_ARG.  */\n     unsigned char c;\t\t/* Character represented by CPP_OTHER.  */\n@@ -466,21 +466,21 @@ enum builtin_type\n   BT_STDC\t\t\t/* `__STDC__' */\n };\n \n-#include \"c-rid.h\"\n+/* There is a slot in the hashnode for use by front ends when integrated\n+   with cpplib.  It holds a tree (see tree.h) but we mustn't drag that\n+   header into every user of cpplib.h.  cpplib does not do anything with\n+   this slot except clear it when a new node is created.  */\n+union tree_node;\n \n-#define C_RID_CODE(id) (((struct c_common_identifier *) (id))->rid_code)\n-\n-/* The common part of an identifier node shared amongst all 3 C front\n-   ends.  Also used to store CPP identifiers, which are a superset of\n-   identifiers in the grammatical sense.  */\n-struct c_common_identifier\n+struct cpp_hashnode\n {\n-  struct tree_identifier ident;\t\t/* See tree-core.h.  */\n+  const unsigned char *name;\t\t/* Null-terminated name.  */\n+  unsigned int hash;\t\t\t/* Cached hash value.  */\n+  unsigned short length;\t\t/* Length of name excluding null.  */\n   unsigned short arg_index;\t\t/* Macro argument index.  */\n   unsigned char directive_index;\t/* Index into directive table.  */\n-  ENUM_BITFIELD(rid) rid_code : 8;\t/* Rid code - for front ends.  */\n-  ENUM_BITFIELD(node_type) type : 8;\t/* CPP node type.  */\n-  unsigned char flags;\t\t\t/* CPP flags.  */\n+  ENUM_BITFIELD(node_type) type : 8;\t/* Node type.  */\n+  unsigned char flags;\t\t\t/* Node flags.  */\n \n   union\n   {"}]}