{"sha": "764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY0ZGJiZjJkZGIwYjU2MDJhZTAzZjBlY2IyYzgwNzg1ODdlNDFkZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-06-06T20:11:40Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-06-06T20:11:40Z"}, "message": "diagnostic.c (output_maximum_width): Remove.\n\n2000-06-06  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * diagnostic.c (output_maximum_width): Remove.\n        (doing_line_wrapping): Tweak.\n        (diagnostic_buffer): New object.\n        (global_output_buffer): New object.\n        (output_destroy_prefix): New function.\n        (default_initialize_buffer): Likewise.\n        (reshape_diagnostic_buffer): Likewise.\n        (initialize_diagnostics): Likewise.\n        (output_clear): Tweak.\n        (line_wrapper_printf): Adjust call to init_output_buffer.\n        (vline_wrapper_message_with_location): Likewise.  Use\n        output_destroy_prefix.\n        (v_message_with_decl): Likewise.\n\n        * diagnostic.h (struct output_buffer): Constify prefix.\n        (init_output_buffer, output_get_prefix): Constify.\n        (diagnostic_message_length_per_line): Likewise.\n        (reshape_diagnostic_buffer): Declare.\n        (default_initialize_buffer): Declare.\n        (initialize_diagnostics): Declare.\n        (diagnostic_buffer): Declare new obbject.\n\n        * toplev.c: #include diagnostic.h\n        (display_help): Document diagnostic formatting options.\n        (decode_f_option): Handle diagnostic formatting options.\n        (main): Setup initialization for diagnostic messages outputter.\n\n        * toplev.h (set_message_length): Remove.\n\n        * Makefile.in (toplev.o): Depends upon diagnostic.h\n\n        * invoke.texi : Document diagnostics formatting options.\n\ncp/\n2000-06-06  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * lex.c (lang_init_options): Tweak.\n\n        * decl2.c: Remove #inclusion of diagnostic.h\n        (lang_decode_option): Move diagnostic formatting options to\n        toplevel.\n\n        * lang-options.h: Remove documentation for diagnostic options.\n\n        * Makefile.in (lex.o): Depends upon diagnostic.h\n\nFrom-SVN: r34435", "tree": {"sha": "426d57102b49f5aa4ea84d91a2b883687998bed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/426d57102b49f5aa4ea84d91a2b883687998bed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/comments", "author": null, "committer": null, "parents": [{"sha": "93136754c17836b592089e2c335108870344aead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93136754c17836b592089e2c335108870344aead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93136754c17836b592089e2c335108870344aead"}], "stats": {"total": 253, "additions": 201, "deletions": 52}, "files": [{"sha": "d0986da6a6933143e5da7ce29ce3791a4a1e5324", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -1,3 +1,38 @@\n+2000-06-06  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.c (output_maximum_width): Remove.\n+\t(doing_line_wrapping): Tweak.\n+\t(diagnostic_buffer): New object.\n+\t(global_output_buffer): New object.\n+\t(output_destroy_prefix): New function.\n+\t(default_initialize_buffer): Likewise.\n+\t(reshape_diagnostic_buffer): Likewise.\n+\t(initialize_diagnostics): Likewise.\n+\t(output_clear): Tweak.\n+\t(line_wrapper_printf): Adjust call to init_output_buffer.\n+\t(vline_wrapper_message_with_location): Likewise.  Use\n+\toutput_destroy_prefix. \n+\t(v_message_with_decl): Likewise.\n+\n+\t* diagnostic.h (struct output_buffer): Constify prefix.\n+\t(init_output_buffer, output_get_prefix): Constify.\n+\t(diagnostic_message_length_per_line): Likewise.\n+\t(reshape_diagnostic_buffer): Declare.\n+\t(default_initialize_buffer): Declare.\n+\t(initialize_diagnostics): Declare.\n+\t(diagnostic_buffer): Declare new obbject.\n+\n+\t* toplev.c: #include diagnostic.h\n+\t(display_help): Document diagnostic formatting options.\n+\t(decode_f_option): Handle diagnostic formatting options.\n+\t(main): Setup initialization for diagnostic messages outputter.\n+\n+\t* toplev.h (set_message_length): Remove.\n+\n+\t* Makefile.in (toplev.o): Depends upon diagnostic.h\n+\n+\t* invoke.texi : Document diagnostics formatting options.\n+\n Tue Jun  6 19:25:32 2000  Philippe De Muyter  <phdm@macqel.be>\n \n \t* configure.in (Make the links): Typo fix : the file that must be"}, {"sha": "f4d31af2338d8105badb0192285d1cd587126375", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -1231,7 +1231,7 @@ diagnostic.o : diagnostic.c diagnostic.h \\\n    $(CONFIG_H) system.h $(TREE_H) $(RTL_H) tm_p.h flags.h \\\n    $(GGC_H) input.h insn-attr.h insn-codes.h insn-config.h toplev.h intl.h \n toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n-   flags.h input.h insn-attr.h xcoffout.h defaults.h output.h \\\n+   flags.h input.h insn-attr.h xcoffout.h defaults.h output.h diagnostic.h \\\n    insn-codes.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h loop.h  except.h regs.h $(TIMEVAR_H) $(lang_options_files)"}, {"sha": "48b861fbab34195c2cccb4ac2dcfad88b577b06d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -1,3 +1,15 @@\n+2000-06-06  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* lex.c (lang_init_options): Tweak.\n+\n+\t* decl2.c: Remove #inclusion of diagnostic.h\n+\t(lang_decode_option): Move diagnostic formatting options to\n+\ttoplevel. \n+\n+\t* lang-options.h: Remove documentation for diagnostic options.\n+\n+\t* Makefile.in (lex.o): Depends upon diagnostic.h\n+\n 2000-06-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (redeclaration_error_message): If two TEMPLATE_DECLs have"}, {"sha": "2e437cb67dbf20d8b48bf1411bbe0526f697b0b4", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -254,7 +254,7 @@ lex.o : lex.c $(CXX_TREE_H) \\\n   $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h \\\n   $(srcdir)/../c-pragma.h $(srcdir)/../toplev.h \\\n   $(srcdir)/../output.h $(srcdir)/../mbchar.h $(GGC_H) \\\n-  $(srcdir)/../input.h operators.def\n+  $(srcdir)/../input.h $(srcdir)/../diagnostic.h operators.def\n decl.o : decl.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(srcdir)/../stack.h $(srcdir)/../output.h $(srcdir)/../expr.h \\\n   $(srcdir)/../except.h $(srcdir)/../toplev.h \\"}, {"sha": "f23512c9718ef74052e75e6390a6e27f63f679aa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -45,7 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarfout.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n-#include \"diagnostic.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -678,21 +677,6 @@ lang_decode_option (argc, argv)\n                 = skip_leading_substring (p, \"name-mangling-version-\")))\n \tname_mangling_version \n \t  = read_integral_parameter (option_value, p - 2, name_mangling_version);\n-      else if ((option_value\n-                = skip_leading_substring (p, \"message-length=\")))\n-\tset_message_length\n-\t  (read_integral_parameter (option_value, p - 2,\n-\t\t\t\t    /* default line-wrap length */ 72));\n-      else if ((option_value\n-                = skip_leading_substring (p, \"diagnostics-show-location=\")))\n-        {\n-          if (!strcmp (option_value, \"once\"))\n-            set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n-          else if (!strcmp (option_value, \"every-line\"))\n-            set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE);\n-          else\n-            error (\"Unrecognized option `%s'\", p - 2);\n-        }\n       else if ((option_value\n                 = skip_leading_substring (p, \"dump-translation-unit-\")))\n \t{"}, {"sha": "623cee2854d5b7aa7e312b9b6a765050e1c6beb6", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -74,8 +74,6 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-flabels-ok\", \"Labels can be used as first class objects\" },\n   { \"-fno-labels-ok\", \"\" },\n   { \"-fmemoize-lookups\", \"\" },\n-  { \"-fmessage-length=\", \"\" },\n-  { \"-fdiagnostics-show-location=\", \"\" },  \n   { \"-fno-memoize-lookups\", \"\" },\n   { \"-fms-extensions\", \"Don't pedwarn about uses of Microsoft extensions\" },\n   { \"-fno-ms-extensions\", \"\" },"}, {"sha": "99e7a45a67c8643392501a0b41411dc70c6e81c3", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -392,7 +392,7 @@ lang_init_options ()\n   /* Mark as \"unspecified\".  */\n   flag_bounds_check = -1;\n   /* By default wrap lines at 72 characters.  */\n-  set_message_length (72);\n+  diagnostic_message_length_per_line = 72;\n   /* By default, emit location information once for every\n      diagnostic message.  */\n   set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);"}, {"sha": "36d4b4037459665634d3ac1bbf7e8ab01c0bd97b", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -89,6 +89,10 @@ extern int errorcount;\n /* Front-end specific tree formatter, if non-NULL.  */\n printer_fn lang_printer = NULL;\n \n+/* An output_buffer surrogate for stderr.  */\n+static output_buffer global_output_buffer;\n+output_buffer *diagnostic_buffer = &global_output_buffer;\n+\n static int need_error_newline;\n \n /* Function of last error message;\n@@ -108,27 +112,30 @@ void (*print_error_function) PARAMS ((const char *)) =\n /* Maximum characters per line in automatic line wrapping mode.\n    Zero means don't wrap lines. */\n \n-static int output_maximum_width = 0;\n+int diagnostic_message_length_per_line;\n \n /* Used to control every diagnostic message formatting.  Front-ends should\n    call set_message_prefixing_rule to set up their politics.  */\n-static int current_prefixing_rule = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n+static int current_prefixing_rule;\n \f\n-/* Predicate. Return 1 if we're in automatic line wrapping mode.  */\n+/* Initialize the diagnostic message outputting machinery.  */\n \n-static int\n-doing_line_wrapping ()\n+void\n+initialize_diagnostics ()\n {\n-  return output_maximum_width > 0;\n+  /* By default, we don't line-wrap messages.  */\n+  diagnostic_message_length_per_line = 0;\n+  set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+  /* Proceed to actual initialization.  */\n+  default_initialize_buffer (diagnostic_buffer);\n }\n \n-/* Set Maximum characters per line in automatic line wrapping mode.  */\n+/* Predicate. Return 1 if we're in automatic line wrapping mode.  */\n \n-void\n-set_message_length (n)\n-     int n;\n+static int\n+doing_line_wrapping ()\n {\n-    output_maximum_width = n;\n+  return diagnostic_message_length_per_line > 0;\n }\n \n void\n@@ -147,7 +154,7 @@ output_is_line_wrapping (buffer)\n }\n \n /* Return BUFFER's prefix.  */\n-char *\n+const char *\n output_get_prefix (buffer)\n      const output_buffer *buffer;\n {\n@@ -190,19 +197,32 @@ output_set_maximum_length (buffer, length)\n void\n output_set_prefix (buffer, prefix)\n      output_buffer *buffer;\n-     char *prefix;\n+     const char *prefix;\n {\n   buffer->prefix = prefix;\n   set_real_maximum_length (buffer);\n   buffer->emitted_prefix_p = 0;\n }\n \n+/* Free BUFFER's prefix, a previously malloc()'d string.  */\n+\n+void\n+output_destroy_prefix (buffer)\n+     output_buffer *buffer;\n+{\n+  if (buffer->prefix)\n+    {\n+      free ((char *) buffer->prefix);\n+      buffer->prefix = NULL;\n+    }\n+}\n+\n /* Construct an output BUFFER with PREFIX and of MAXIMUM_LENGTH\n    characters per line.  */\n void\n init_output_buffer (buffer, prefix, maximum_length)\n      output_buffer *buffer;\n-     char *prefix;\n+     const char *prefix;\n      int maximum_length;\n {\n   obstack_init (&buffer->obstack);\n@@ -215,6 +235,25 @@ init_output_buffer (buffer, prefix, maximum_length)\n   buffer->cursor = NULL;\n }\n \n+/* Initialize BUFFER with a NULL prefix and current diagnostic message\n+   length cutoff.  */\n+void\n+default_initialize_buffer (buffer)\n+     output_buffer *buffer;\n+{\n+  init_output_buffer (buffer, NULL, diagnostic_message_length_per_line);\n+}\n+\n+/* Recompute diagnostic_buffer's attributes to reflect any change\n+   in diagnostic formatting global options.  */\n+void\n+reshape_diagnostic_buffer ()\n+{\n+  diagnostic_buffer->ideal_maximum_length = diagnostic_message_length_per_line;\n+  diagnostic_buffer->prefixing_rule = current_prefixing_rule;\n+  set_real_maximum_length (diagnostic_buffer);\n+}\n+\n /* Reinitialize BUFFER.  */\n void\n output_clear (buffer)\n@@ -223,6 +262,7 @@ output_clear (buffer)\n   obstack_free (&buffer->obstack, obstack_base (&buffer->obstack));\n   buffer->line_length = 0;\n   buffer->cursor = NULL;\n+  buffer->emitted_prefix_p = 0;\n }\n \n /* Finishes to construct a NULL-terminated character string representing\n@@ -541,7 +581,7 @@ line_wrapper_printf VPARAMS ((FILE *file, const char *msgid, ...))\n #endif\n   output_buffer buffer;\n   \n-  init_output_buffer (&buffer, NULL, output_maximum_width);\n+  init_output_buffer (&buffer, NULL, diagnostic_message_length_per_line);\n   VA_START (buffer.format_args, msgid);\n \n #ifndef ANSI_PROTOTYPES\n@@ -567,12 +607,12 @@ vline_wrapper_message_with_location (file, line, warn, msgid, ap)\n   output_buffer buffer;\n   \n   init_output_buffer (&buffer, build_location_prefix (file, line, warn),\n-\t\t      output_maximum_width);\n+\t\t      diagnostic_message_length_per_line);\n   va_copy (buffer.format_args, ap);\n   output_notice (&buffer, msgid);\n   output_flush_on (&buffer, stderr);\n \n-  free (output_get_prefix (&buffer));\n+  output_destroy_prefix (&buffer);\n   fputc ('\\n', stderr);\n }\n \n@@ -657,7 +697,7 @@ v_message_with_decl (decl, warn, msgid, ap)\n       init_output_buffer\n         (&buffer, build_location_prefix\n          (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn),\n-         output_maximum_width);\n+         diagnostic_message_length_per_line);\n     }\n   else\n     report_file_and_line (DECL_SOURCE_FILE (decl),\n@@ -720,7 +760,7 @@ v_message_with_decl (decl, warn, msgid, ap)\n   if (doing_line_wrapping())\n     {\n       output_flush_on (&buffer, stderr);\n-      free (output_get_prefix (&buffer));\n+      output_destroy_prefix (&buffer);\n     }\n   \n   fputc ('\\n', stderr);\n@@ -1176,7 +1216,8 @@ default_print_error_function (file)\n         prefix = build_message_string (\"%s: \", file);\n \n       if (doing_line_wrapping ())\n-        init_output_buffer (&buffer, prefix, output_maximum_width);\n+        init_output_buffer\n+          (&buffer, prefix, diagnostic_message_length_per_line);\n       else\n         {\n           if (file)"}, {"sha": "e8a2d67af90b43bac405ab2c795978ca9ba947e4", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -44,7 +44,7 @@ struct output_buffer\n   /* The obstack where the text is built up.  */  \n   struct obstack obstack;\n   /* The prefix for each new line.   */\n-  char *prefix;\n+  const char *prefix;\n   /* The amount of characters output so far.  */  \n   int line_length;\n   /* The real upper bound of number of characters per line, taking into\n@@ -83,11 +83,24 @@ struct output_buffer\n \n extern printer_fn lang_printer;\n \n+extern int diagnostic_message_length_per_line;\n+\n+/* This output buffer is used by front-ends that directly output\n+   diagnostic messages without going through `error', `warning',\n+   and simillar functions.  In general, such usage should be\n+   avoided.  This global buffer will go away, once all such usage\n+   has been removed.  */\n+extern output_buffer *diagnostic_buffer;\n+\n /* Prototypes */\n-void init_output_buffer\t\tPARAMS ((output_buffer *, char *, int));\n+void initialize_diagnostics     PARAMS ((void));\n+void reshape_diagnostic_buffer  PARAMS ((void));\n+void default_initialize_buffer  PARAMS ((output_buffer *));\n+void init_output_buffer\t\tPARAMS ((output_buffer *, const char *, int));\n void output_clear\t\tPARAMS ((output_buffer *));\n-char *output_get_prefix\t\tPARAMS ((const output_buffer *));\n-void output_set_prefix\t\tPARAMS ((output_buffer *, char *));\n+const char *output_get_prefix\tPARAMS ((const output_buffer *));\n+void output_set_prefix\t\tPARAMS ((output_buffer *, const char *));\n+void output_destroy_prefix      PARAMS ((output_buffer *));\n void output_set_maximum_length  PARAMS ((output_buffer *, int));\n void output_emit_prefix\t\tPARAMS ((output_buffer *));\n void output_add_newline\t\tPARAMS ((output_buffer *));"}, {"sha": "39989b6010a4689f6a41efcf799f4ed098ded208", "filename": "gcc/invoke.texi", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -59,6 +59,8 @@ only one of these two forms, whichever one is not the default.\n * Invoking G++::\tCompiling C++ programs.\n * C Dialect Options::   Controlling the variant of C language compiled.\n * C++ Dialect Options:: Variations on C++.\n+* Language Independent Options:: Controlling how diagnostics should be\n+                        formatted. \n * Warning Options::     How picky should the compiler be?\n * Debugging Options::   Symbol tables, measurements, and debugging dumps.\n * Optimize Options::    How much optimization?\n@@ -116,6 +118,13 @@ in the following sections.\n -Wsign-promo -Wsynth\n @end smallexample\n \n+@item Language Independent Options\n+@xref{Language Independent Options,,Options to Control Diagnostic Messages Formatting}.\n+@smallexample\n+-fmessage-length=@var{n} \n+-fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}\n+@end smallexample\n+\n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @smallexample\n@@ -467,6 +476,8 @@ in the following sections.\n                         or preprocessed source.\n * C Dialect Options::   Controlling the variant of C language compiled.\n * C++ Dialect Options:: Variations on C++.\n+* Language Independent Options:: Controlling how diagnostics should be\n+                        formatted. \n * Warning Options::     How picky should the compiler be?\n * Debugging Options::   Symbol tables, measurements, and debugging dumps.\n * Optimize Options::    How much optimization?\n@@ -1120,12 +1131,6 @@ This flag is not useful when compiling with -fvtable-thunks.\n Like all options that change the ABI, all C++ code, @emph{including\n libgcc} must be built with the same setting of this option.\n \n-@item -fmessage-length=@var{n}\n-Try to format error messages so that they fit on lines of about @var{n}\n-characters.  The default is 72 characters.  If @var{n} is zero, then no\n-line-wrapping will be done; each error message will appear on a single\n-line.\n-\n @item -fno-implicit-templates\n Never emit code for non-inline templates which are instantiated\n implicitly (i.e. by use); only emit code for explicit instantiations.\n@@ -1367,6 +1372,44 @@ In this example, g++ will synthesize a default @samp{A& operator =\n (const A&);}, while cfront will use the user-defined @samp{operator =}.\n @end table\n \n+@node Language Independent Options\n+@section Options to Control Diagnostic Messages Formatting\n+@cindex options to control diagnostics formatting\n+@cindex diagnostic messages\n+@cindex message formatting\n+\n+Traditionally, diagnostic messages have been formatted irrespetive of\n+the output device's aspect (e.g. its width, ...).  The options described\n+below can be used to control the diagnostic messages formatting\n+algorithm, e.g. how many characters per line, how often source location\n+information should be reported.  Right now, only the C++ front-end can\n+honor these options.  However it is expected, in the near future, that\n+the remaining front-ends would be able to digest them correctly. \n+\n+@table @code\n+@item -fmessage-length=@var{n}\n+Try to format error messages so that they fit on lines of about @var{n}\n+characters.  The default is 72 characters for g++ and 0 for the rest of\n+the front-ends supported by GCC.  If @var{n} is zero, then no\n+line-wrapping will be done; each error message will appear on a single \n+line.\n+\n+@item -fdiagnostics-show-location=once\n+Only meaningful in line-wrapping mode.  Intructs the diagnostic messages\n+reporter to emit @emph{once} source location information; that is, in\n+case the message is too long to fit on a single physical line and has to\n+be wrapped, the source location won't be emitted (as prefix) again,\n+over and over, in subsequent continuation lines.  This is the default\n+behaviour. \n+\n+@item -fdiagnostics-show-location=every-line\n+Only meaningful in line-wrapping mode.  Instructs the diagnostic\n+messages reporter to emit the same source location information (as\n+prefix) for physical lines that result from the process of breaking a\n+a message which is too long to fit on a signe line.\n+\n+@end table\n+\n @node Warning Options\n @section Options to Request or Suppress Warnings\n @cindex options to control warnings"}, {"sha": "275793204ed8b837893311403e6933ffc6a8a824", "filename": "gcc/toplev.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -62,6 +62,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"loop.h\"\n #include \"regs.h\"\n #include \"timevar.h\"\n+#include \"diagnostic.h\"\n \n #ifndef ACCUMULATE_OUTGOING_ARGS\n #define ACCUMULATE_OUTGOING_ARGS 0\n@@ -3703,6 +3704,8 @@ display_help ()\n   printf (\"  -fcall-used-<register>  Mark <register> as being corrupted by function calls\\n\");\n   printf (\"  -fcall-saved-<register> Mark <register> as being preserved across functions\\n\");\n   printf (\"  -finline-limit=<number> Limits the size of inlined functions to <number>\\n\");\n+  printf (\"  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\\n\");\n+  printf (\"  -fdiagnostics-show-location=[once | never] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\\n\");\n \n   for (i = NUM_ELEM (f_options); i--;)\n     {\n@@ -3990,6 +3993,21 @@ decode_f_option (arg)\n \tnm = xstrdup (option_value);\n       stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, nm);\n     }\n+  else if ((option_value\n+            = skip_leading_substring (arg, \"message-length=\")))\n+    diagnostic_message_length_per_line = \n+      read_integral_parameter (option_value, arg - 2,\n+                               diagnostic_message_length_per_line);\n+  else if ((option_value\n+            = skip_leading_substring (arg, \"diagnostics-show-location=\")))\n+    {\n+      if (!strcmp (option_value, \"once\"))\n+        set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+      else if (!strcmp (option_value, \"every-line\"))\n+        set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE);\n+      else\n+        error (\"Unrecognized option `%s'\", arg - 2);\n+    }\n   else if (!strcmp (arg, \"no-stack-limit\"))\n     stack_limit_rtx = NULL_RTX;\n   else if (!strcmp (arg, \"preprocessed\"))\n@@ -4433,6 +4451,9 @@ main (argc, argv)\n   ggc_add_tree_root (&current_function_decl, 1);\n   ggc_add_tree_root (&current_function_func_begin_label, 1);\n \n+  /* Initialize the diagnostics reporting machinery.  */\n+  initialize_diagnostics();\n+\n   /* Perform language-specific options intialization.  */\n   lang_init_options ();\n \n@@ -4589,6 +4610,9 @@ main (argc, argv)\n \t  i++;\n \t}\n     }\n+  \n+  /* Reflect any language-specific diagnostic option setting.  */\n+  reshape_diagnostic_buffer ();\n \n   /* Checker uses the frame pointer.  */\n   if (flag_check_memory_usage)"}, {"sha": "952d3631bb36abf1d3004ef3bb7229e946ae181c", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "patch": "@@ -134,7 +134,6 @@ extern void fnotice\t\t\tPARAMS ((FILE *, const char *, ...))\n extern int wrapup_global_declarations   PARAMS ((union tree_node **, int));\n extern void check_global_declarations   PARAMS ((union tree_node **, int));\n extern void note_deferral_of_defined_inline_function PARAMS ((union tree_node *));\n-extern void set_message_length\t\tPARAMS ((int));\n extern int errorcount;\n extern int warningcount;\n extern int sorrycount;"}]}