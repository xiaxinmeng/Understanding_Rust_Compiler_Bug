{"sha": "07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "node_id": "C_kwDOANBUbNoAKDA3ZGQzYmNkYTE3Zjk3Y2Y1NDc2YzNkNmYyZjI1MDFjMWUwNzEyZTY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-11T10:02:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-11T10:20:22Z"}, "message": "openmp: Add omp_set_num_teams, omp_get_max_teams, omp_[gs]et_teams_thread_limit\n\nOpenMP 5.1 adds env vars and functions to set and query new ICVs used\nas fallback if thread_limit or num_teams clauses aren't specified on\nteams construct.\n\nThe following patch implements those, though further work will be needed:\n1) OpenMP 5.1 also changed the num_teams clause, so that it can specify\n   both lower and upper limit for how many teams should be created and\n   changed the meaning when only one expression is provided, instead of\n   num_teams(expr) in 5.0 meaning num_teams(1:expr) in 5.1, it now means\n   num_teams(expr:expr), i.e. while previously we could create 1 to expr\n   teams, in 5.1 we have some low limit by default equal to the single\n   expression provided and may not create fewer teams.\n   For host teams (which we don't currently implement efficiently for\n   NUMA hosts) we trivially satisfy it now by always honoring what the\n   user asked for, but for the offloading teams I think we'll need to\n   rethink the APIs; currently teams construct is just a call that returns\n   and possibly lowers the number of teams; and whenever possible we try\n   to evaluate num_teams/thread_limit already on the target construct\n   and the GOMP_teams call just sets the number of teams to the minimum\n   of provided and requested teams; for some cases e.g. where target\n   is not combined with teams and num_teams expression calls some functions\n   etc., we need to call those functions in the target region and so it is\n   late to figure number of teams, but also hw could just limit what it\n   is willing to create; in that case I'm afraid we need to run the target\n   body multiple times and arrange for omp_get_team_num () returning the\n   right values\n2) we need to finally implement the NUMA handling for GOMP_teams_reg\n3) I now realize I haven't added some testcase coverage, will do that\n   incrementally\n4) libgomp.texi needs updates for these new APIs, but also others like\n   the allocator\n\n2021-10-11  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* omp-low.c (omp_runtime_api_call): Handle omp_get_max_teams,\n\tomp_[sg]et_teams_thread_limit and omp_set_num_teams.\nlibgomp/\n\t* omp.h.in (omp_set_num_teams, omp_get_max_teams,\n\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Declare.\n\t* omp_lib.f90.in (omp_set_num_teams, omp_get_max_teams,\n\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Declare.\n\t* omp_lib.h.in (omp_set_num_teams, omp_get_max_teams,\n\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Declare.\n\t* libgomp.h (gomp_nteams_var, gomp_teams_thread_limit_var): Declare.\n\t* libgomp.map (OMP_5.1): Export omp_get_max_teams{,_},\n\tomp_get_teams_thread_limit{,_}, omp_set_num_teams{,_,_8_} and\n\tomp_set_teams_thread_limit{,_,_8_}.\n\t* icv.c (omp_set_num_teams, omp_get_max_teams,\n\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): New\n\tfunctions.\n\t* env.c (gomp_nteams_var, gomp_teams_thread_limit_var): Define.\n\t(omp_display_env): Print OMP_NUM_TEAMS and OMP_TEAMS_THREAD_LIMIT.\n\t(initialize_env): Handle OMP_NUM_TEAMS and OMP_TEAMS_THREAD_LIMIT env\n\tvars.\n\t* teams.c (GOMP_teams_reg): If thread_limit is not specified, use\n\tgomp_teams_thread_limit_var as fallback if not zero.  If num_teams\n\tis not specified, use gomp_nteams_var.\n\t* fortran.c (omp_set_num_teams, omp_get_max_teams,\n\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Add\n\tialias_redirect.\n\t(omp_set_num_teams_, omp_set_num_teams_8_, omp_get_max_teams_,\n\tomp_set_teams_thread_limit_, omp_set_teams_thread_limit_8_,\n\tomp_get_teams_thread_limit_): New functions.", "tree": {"sha": "4ea465dae416e2a06d9765298bb36b7a88a49272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea465dae416e2a06d9765298bb36b7a88a49272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3c4bfd0c0a75b805425f10fd593ee3df47fbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3c4bfd0c0a75b805425f10fd593ee3df47fbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3c4bfd0c0a75b805425f10fd593ee3df47fbf6"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "057b7ae4866ff1b7c0eee58c83354399cb015884", "filename": "gcc/omp-low.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -3953,6 +3953,7 @@ omp_runtime_api_call (const_tree fndecl)\n       \"get_level\",\n       \"get_max_active_levels\",\n       \"get_max_task_priority\",\n+      \"get_max_teams\",\n       \"get_max_threads\",\n       \"get_nested\",\n       \"get_num_devices\",\n@@ -3965,6 +3966,7 @@ omp_runtime_api_call (const_tree fndecl)\n       \"get_proc_bind\",\n       \"get_supported_active_levels\",\n       \"get_team_num\",\n+      \"get_teams_thread_limit\",\n       \"get_thread_limit\",\n       \"get_thread_num\",\n       \"get_wtick\",\n@@ -3998,8 +4000,10 @@ omp_runtime_api_call (const_tree fndecl)\n       \"set_dynamic\",\n       \"set_max_active_levels\",\n       \"set_nested\",\n+      \"set_num_teams\",\n       \"set_num_threads\",\n-      \"set_schedule\"\n+      \"set_schedule\",\n+      \"set_teams_thread_limit\"\n     };\n \n   int mode = 0;"}, {"sha": "de45c25d540ef02eca74c5e6110ab440d5f8d8d1", "filename": "libgomp/env.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -90,6 +90,8 @@ unsigned long gomp_places_list_len;\n uintptr_t gomp_def_allocator = omp_default_mem_alloc;\n int gomp_debug_var;\n unsigned int gomp_num_teams_var;\n+int gomp_nteams_var;\n+int gomp_teams_thread_limit_var;\n bool gomp_display_affinity_var;\n char *gomp_affinity_format_var = \"level %L thread %i affinity %A\";\n size_t gomp_affinity_format_len;\n@@ -1319,6 +1321,9 @@ omp_display_env (int verbose)\n \t   gomp_global_icv.thread_limit_var);\n   fprintf (stderr, \"  OMP_MAX_ACTIVE_LEVELS = '%u'\\n\",\n \t   gomp_global_icv.max_active_levels_var);\n+  fprintf (stderr, \"  OMP_NUM_TEAMS = '%u'\\n\", gomp_nteams_var);\n+  fprintf (stderr, \"  OMP_TEAMS_THREAD_LIMIT = '%u'\\n\",\n+\t   gomp_teams_thread_limit_var);\n \n   fprintf (stderr, \"  OMP_CANCELLATION = '%s'\\n\",\n \t   gomp_cancel_var ? \"TRUE\" : \"FALSE\");\n@@ -1453,6 +1458,8 @@ initialize_env (void)\n \t\t\t\t &gomp_nthreads_var_list,\n \t\t\t\t &gomp_nthreads_var_list_len))\n     gomp_global_icv.nthreads_var = gomp_available_cpus;\n+  parse_int (\"OMP_NUM_TEAMS\", &gomp_nteams_var, false);\n+  parse_int (\"OMP_TEAMS_THREAD_LIMIT\", &gomp_teams_thread_limit_var, false);\n   bool ignore = false;\n   if (parse_bind_var (\"OMP_PROC_BIND\",\n \t\t      &gomp_global_icv.bind_var,"}, {"sha": "14b5c8d51dd65b0905ec82621086add96f97fa00", "filename": "libgomp/fortran.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Ffortran.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Ffortran.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ffortran.c?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -67,6 +67,10 @@ ialias_redirect (omp_get_thread_limit)\n ialias_redirect (omp_set_max_active_levels)\n ialias_redirect (omp_get_max_active_levels)\n ialias_redirect (omp_get_supported_active_levels)\n+ialias_redirect (omp_set_num_teams)\n+ialias_redirect (omp_get_max_teams)\n+ialias_redirect (omp_set_teams_thread_limit)\n+ialias_redirect (omp_get_teams_thread_limit)\n ialias_redirect (omp_get_level)\n ialias_redirect (omp_get_ancestor_thread_num)\n ialias_redirect (omp_get_team_size)\n@@ -478,6 +482,42 @@ omp_in_final_ (void)\n   return omp_in_final ();\n }\n \n+void\n+omp_set_num_teams_ (const int32_t *num_teams)\n+{\n+  omp_set_num_teams (*num_teams);\n+}\n+\n+void\n+omp_set_num_teams_8_ (const int64_t *num_teams)\n+{\n+  omp_set_max_active_levels (TO_INT (*num_teams));\n+}\n+\n+int32_t\n+omp_get_max_teams_ (void)\n+{\n+  return omp_get_max_teams ();\n+}\n+\n+void\n+omp_set_teams_thread_limit_ (const int32_t *thread_limit)\n+{\n+  omp_set_teams_thread_limit (*thread_limit);\n+}\n+\n+void\n+omp_set_teams_thread_limit_8_ (const int64_t *thread_limit)\n+{\n+  omp_set_teams_thread_limit (TO_INT (*thread_limit));\n+}\n+\n+int32_t\n+omp_get_teams_thread_limit_ (void)\n+{\n+  return omp_get_teams_thread_limit ();\n+}\n+\n int32_t\n omp_get_cancellation_ (void)\n {"}, {"sha": "b7fad42e5c1d71395bd7bdbd5d4f14687360e0fb", "filename": "libgomp/icv.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Ficv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Ficv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ficv.c?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -148,6 +148,32 @@ omp_get_supported_active_levels (void)\n   return gomp_supported_active_levels;\n }\n \n+void\n+omp_set_num_teams (int num_teams)\n+{\n+  if (num_teams >= 0)\n+    gomp_nteams_var = num_teams;\n+}\n+\n+int\n+omp_get_max_teams (void)\n+{\n+  return gomp_nteams_var;\n+}\n+\n+void\n+omp_set_teams_thread_limit (int thread_limit)\n+{\n+  if (thread_limit >= 0)\n+    gomp_teams_thread_limit_var = thread_limit;\n+}\n+\n+int\n+omp_get_teams_thread_limit (void)\n+{\n+  return gomp_teams_thread_limit_var;\n+}\n+\n int\n omp_get_cancellation (void)\n {\n@@ -248,6 +274,10 @@ ialias (omp_get_thread_limit)\n ialias (omp_set_max_active_levels)\n ialias (omp_get_max_active_levels)\n ialias (omp_get_supported_active_levels)\n+ialias (omp_set_num_teams)\n+ialias (omp_get_max_teams)\n+ialias (omp_set_teams_thread_limit)\n+ialias (omp_get_teams_thread_limit)\n ialias (omp_get_cancellation)\n ialias (omp_get_proc_bind)\n ialias (omp_get_max_task_priority)"}, {"sha": "33a9591285fea104a48faecb04106ca760929f9d", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -458,6 +458,8 @@ extern unsigned long gomp_bind_var_list_len;\n extern void **gomp_places_list;\n extern unsigned long gomp_places_list_len;\n extern unsigned int gomp_num_teams_var;\n+extern int gomp_nteams_var;\n+extern int gomp_teams_thread_limit_var;\n extern int gomp_debug_var;\n extern bool gomp_display_affinity_var;\n extern char *gomp_affinity_format_var;"}, {"sha": "4e5397a39a58801e73e6125aeb7353106defa44c", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -214,6 +214,16 @@ OMP_5.1 {\n \tomp_display_env;\n \tomp_display_env_;\n \tomp_display_env_8_;\n+\tomp_set_num_teams;\n+\tomp_set_num_teams_;\n+\tomp_set_num_teams_8_;\n+\tomp_get_max_teams;\n+\tomp_get_max_teams_;\n+\tomp_set_teams_thread_limit;\n+\tomp_set_teams_thread_limit_;\n+\tomp_set_teams_thread_limit_8_;\n+\tomp_get_teams_thread_limit;\n+\tomp_get_teams_thread_limit_;\n } OMP_5.0.2;\n \n GOMP_1.0 {"}, {"sha": "e0177dca6fbb7ac849d1c9ab2cc7d141da6d14c8", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -261,6 +261,11 @@ extern int omp_get_max_task_priority (void) __GOMP_NOTHROW;\n \n extern void omp_fulfill_event (omp_event_handle_t) __GOMP_NOTHROW;\n \n+extern void omp_set_num_teams (int) __GOMP_NOTHROW;\n+extern int omp_get_max_teams (void) __GOMP_NOTHROW;\n+extern void omp_set_teams_thread_limit (int) __GOMP_NOTHROW;\n+extern int omp_get_teams_thread_limit (void) __GOMP_NOTHROW;\n+\n extern void *omp_target_alloc (__SIZE_TYPE__, int) __GOMP_NOTHROW;\n extern void omp_target_free (void *, int) __GOMP_NOTHROW;\n extern int omp_target_is_present (const void *, int) __GOMP_NOTHROW;"}, {"sha": "973b87be80aa22fcfc1d377d95b57672575fdf1a", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -564,6 +564,36 @@\n           end function omp_get_max_task_priority\n         end interface\n \n+        interface omp_set_num_teams\n+          subroutine omp_set_num_teams (num_teams)\n+            integer (4), intent (in) :: num_teams\n+          end subroutine omp_set_num_teams\n+          subroutine omp_set_num_teams_8 (num_teams)\n+            integer (8), intent (in) :: num_teams\n+          end subroutine omp_set_num_teams_8\n+        end interface\n+\n+        interface\n+          function omp_get_max_teams ()\n+            integer (4) :: omp_get_max_teams\n+          end function omp_get_max_teams\n+        end interface\n+\n+        interface omp_set_teams_thread_limit\n+          subroutine omp_set_teams_thread_limit (thread_limit)\n+            integer (4), intent (in) :: thread_limit\n+          end subroutine omp_set_teams_thread_limit\n+          subroutine omp_set_teams_thread_limit_8 (thread_limit)\n+            integer (8), intent (in) :: thread_limit\n+          end subroutine omp_set_teams_thread_limit_8\n+        end interface\n+\n+        interface\n+          function omp_get_teams_thread_limit ()\n+            integer (4) :: omp_get_teams_thread_limit\n+          end function omp_get_teams_thread_limit\n+        end interface\n+\n         interface\n           subroutine omp_fulfill_event (event)\n             use omp_lib_kinds"}, {"sha": "d5c02605dd70f2583accf6194b024e8ce9c27f10", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -252,6 +252,10 @@\n       external omp_get_max_task_priority\n       integer(4) omp_get_max_task_priority\n \n+      external omp_set_num_teams, omp_set_teams_thread_limit\n+      external omp_get_max_teams, omp_get_teams_thread_limit\n+      integer(4) omp_get_max_teams, omp_get_teams_thread_limit\n+\n       external omp_fulfill_event\n \n       external omp_set_affinity_format, omp_get_affinity_format"}, {"sha": "9409f8ee6aa7502cf5b20d6ca324862c339d751f", "filename": "libgomp/teams.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fteams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6/libgomp%2Fteams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteams.c?ref=07dd3bcda17f97cf5476c3d6f2f2501c1e0712e6", "patch": "@@ -37,6 +37,8 @@ GOMP_teams_reg (void (*fn) (void *), void *data, unsigned int num_teams,\n   (void) flags;\n   (void) num_teams;\n   unsigned old_thread_limit_var = 0;\n+  if (thread_limit == 0)\n+    thread_limit = gomp_teams_thread_limit_var;\n   if (thread_limit)\n     {\n       struct gomp_task_icv *icv = gomp_icv (true);\n@@ -45,7 +47,7 @@ GOMP_teams_reg (void (*fn) (void *), void *data, unsigned int num_teams,\n \t= thread_limit > INT_MAX ? UINT_MAX : thread_limit;\n     }\n   if (num_teams == 0)\n-    num_teams = 3;\n+    num_teams = gomp_nteams_var ? gomp_nteams_var : 3;\n   gomp_num_teams = num_teams;\n   for (gomp_team_num = 0; gomp_team_num < num_teams; gomp_team_num++)\n     fn (data);"}]}