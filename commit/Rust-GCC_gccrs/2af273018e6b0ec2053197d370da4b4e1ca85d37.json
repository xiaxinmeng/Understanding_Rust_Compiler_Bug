{"sha": "2af273018e6b0ec2053197d370da4b4e1ca85d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmMjczMDE4ZTZiMGVjMjA1MzE5N2QzNzBkYTRiNGUxY2E4NWQzNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-09T08:56:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-09T08:56:25Z"}, "message": "stor-layout.c (bit_from_pos): Document.\n\n2012-05-09  Richard Guenther  <rguenther@suse.de>\n\n\t* stor-layout.c (bit_from_pos): Document.\n\t(byte_from_pos): Likewise.  Optimize.\n\t(pos_from_bit): Likewise.\n\t(normalize_offset): Use pos_from_bit instead of replicating it.\n\nFrom-SVN: r187317", "tree": {"sha": "995b14c92a109cf36a66ce3adab16fa988b2958d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/995b14c92a109cf36a66ce3adab16fa988b2958d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af273018e6b0ec2053197d370da4b4e1ca85d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af273018e6b0ec2053197d370da4b4e1ca85d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af273018e6b0ec2053197d370da4b4e1ca85d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af273018e6b0ec2053197d370da4b4e1ca85d37/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "570a374aa5f8281b261a7e4152492061d8786a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570a374aa5f8281b261a7e4152492061d8786a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570a374aa5f8281b261a7e4152492061d8786a2e"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "86a59eff84678742e8718180f3d0c0d05705306f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af273018e6b0ec2053197d370da4b4e1ca85d37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af273018e6b0ec2053197d370da4b4e1ca85d37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2af273018e6b0ec2053197d370da4b4e1ca85d37", "patch": "@@ -1,3 +1,10 @@\n+2012-05-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* stor-layout.c (bit_from_pos): Document.\n+\t(byte_from_pos): Likewise.  Optimize.\n+\t(pos_from_bit): Likewise.\n+\t(normalize_offset): Use pos_from_bit instead of replicating it.\n+\n 2012-05-09  Alan Modra  <amodra@gmail.com>\n \n \tPR target/53271"}, {"sha": "fb00b5f4bb22b5825c10846a51119f18e03af790", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af273018e6b0ec2053197d370da4b4e1ca85d37/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af273018e6b0ec2053197d370da4b4e1ca85d37/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=2af273018e6b0ec2053197d370da4b4e1ca85d37", "patch": "@@ -785,8 +785,8 @@ start_record_layout (tree t)\n   return rli;\n }\n \n-/* These four routines perform computations that convert between\n-   the offset/bitpos forms and byte and bit offsets.  */\n+/* Return the combined bit position for the byte offset OFFSET and the\n+   bit position BITPOS.  */\n \n tree\n bit_from_pos (tree offset, tree bitpos)\n@@ -797,25 +797,46 @@ bit_from_pos (tree offset, tree bitpos)\n \t\t\t\t bitsize_unit_node));\n }\n \n+/* Return the combined truncated byte position for the byte offset OFFSET and\n+   the bit position BITPOS.  */\n+\n tree\n byte_from_pos (tree offset, tree bitpos)\n {\n-  return size_binop (PLUS_EXPR, offset,\n-\t\t     fold_convert (sizetype,\n-\t\t\t\t   size_binop (TRUNC_DIV_EXPR, bitpos,\n-\t\t\t\t\t       bitsize_unit_node)));\n+  tree bytepos;\n+  if (TREE_CODE (bitpos) == MULT_EXPR\n+      && tree_int_cst_equal (TREE_OPERAND (bitpos, 1), bitsize_unit_node))\n+    bytepos = TREE_OPERAND (bitpos, 0);\n+  else\n+    bytepos = size_binop (TRUNC_DIV_EXPR, bitpos, bitsize_unit_node);\n+  return size_binop (PLUS_EXPR, offset, fold_convert (sizetype, bytepos));\n }\n \n+/* Split the bit position POS into a byte offset *POFFSET and a bit\n+   position *PBITPOS with the byte offset aligned to OFF_ALIGN bits.  */\n+\n void\n pos_from_bit (tree *poffset, tree *pbitpos, unsigned int off_align,\n \t      tree pos)\n {\n-  *poffset = size_binop (MULT_EXPR,\n-\t\t\t fold_convert (sizetype,\n-\t\t\t\t       size_binop (FLOOR_DIV_EXPR, pos,\n-\t\t\t\t\t\t   bitsize_int (off_align))),\n-\t\t\t size_int (off_align / BITS_PER_UNIT));\n-  *pbitpos = size_binop (FLOOR_MOD_EXPR, pos, bitsize_int (off_align));\n+  tree toff_align = bitsize_int (off_align);\n+  if (TREE_CODE (pos) == MULT_EXPR\n+      && tree_int_cst_equal (TREE_OPERAND (pos, 1), toff_align))\n+    {\n+      *poffset = size_binop (MULT_EXPR,\n+\t\t\t     fold_convert (sizetype, TREE_OPERAND (pos, 0)),\n+\t\t\t     size_int (off_align / BITS_PER_UNIT));\n+      *pbitpos = bitsize_zero_node;\n+    }\n+  else\n+    {\n+      *poffset = size_binop (MULT_EXPR,\n+\t\t\t     fold_convert (sizetype,\n+\t\t\t\t\t   size_binop (FLOOR_DIV_EXPR, pos,\n+\t\t\t\t\t\t       toff_align)),\n+\t\t\t     size_int (off_align / BITS_PER_UNIT));\n+      *pbitpos = size_binop (FLOOR_MOD_EXPR, pos, toff_align);\n+    }\n }\n \n /* Given a pointer to bit and byte offsets and an offset alignment,\n@@ -828,17 +849,10 @@ normalize_offset (tree *poffset, tree *pbitpos, unsigned int off_align)\n      downwards.  */\n   if (compare_tree_int (*pbitpos, off_align) >= 0)\n     {\n-      tree extra_aligns = size_binop (FLOOR_DIV_EXPR, *pbitpos,\n-\t\t\t\t      bitsize_int (off_align));\n-\n-      *poffset\n-\t= size_binop (PLUS_EXPR, *poffset,\n-\t\t      size_binop (MULT_EXPR,\n-\t\t\t\t  fold_convert (sizetype, extra_aligns),\n-\t\t\t\t  size_int (off_align / BITS_PER_UNIT)));\n-\n-      *pbitpos\n-\t= size_binop (FLOOR_MOD_EXPR, *pbitpos, bitsize_int (off_align));\n+      tree offset, bitpos;\n+      pos_from_bit (&offset, &bitpos, off_align, *pbitpos);\n+      *poffset = size_binop (PLUS_EXPR, *poffset, offset);\n+      *pbitpos = bitpos;\n     }\n }\n "}]}