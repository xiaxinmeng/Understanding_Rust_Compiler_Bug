{"sha": "b81a5940b446f84086ec6dbf536c516ee117b250", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxYTU5NDBiNDQ2Zjg0MDg2ZWM2ZGJmNTM2YzUxNmVlMTE3YjI1MA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2010-06-22T13:32:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T13:32:54Z"}, "message": "sem_prag.adb, [...]: Code cleanup...\n\n2010-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_prag.adb, sem_util.adb, sem_util.ads, sem_attr.adb, exp_ch6.adb,\n\texp_disp.adb, sem_eval.adb, exp_dist.adb lib-xref.adb: Code cleanup,\n\tthis patch replaces duplication of code that traverses the chain of\n\taliased primitives by a call to routine Ultimate_Alias that\n\tprovides this functionality.\n\nFrom-SVN: r161184", "tree": {"sha": "63f5104e221b8cd64fe35833a7207b87a30200e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f5104e221b8cd64fe35833a7207b87a30200e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b81a5940b446f84086ec6dbf536c516ee117b250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81a5940b446f84086ec6dbf536c516ee117b250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81a5940b446f84086ec6dbf536c516ee117b250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81a5940b446f84086ec6dbf536c516ee117b250/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e9df9da7b83a6591d43c5298958dd20db3c6e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9df9da7b83a6591d43c5298958dd20db3c6e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9df9da7b83a6591d43c5298958dd20db3c6e73"}], "stats": {"total": 180, "additions": 63, "deletions": 117}, "files": [{"sha": "6adafcc79816f0bdc24b53bd73127ce5acb15a65", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -1,3 +1,11 @@\n+2010-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb, sem_util.adb, sem_util.ads, sem_attr.adb, exp_ch6.adb,\n+\texp_disp.adb, sem_eval.adb, exp_dist.adb lib-xref.adb: Code cleanup,\n+\tthis patch replaces duplication of code that traverses the chain of\n+\taliased primitives by a call to routine Ultimate_Alias that\n+\tprovides this functionality.\n+\n 2010-06-22  Arnaud Charlet  <charlet@adacore.com>\n \n \t* fmap.adb, opt.ads, osint.adb, osint.ads, output.ads, scng.adb,"}, {"sha": "351d18e2bb053a1858eaabff64430d4c1230a064", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -2668,9 +2668,7 @@ package body Exp_Ch6 is\n          if Present (Inherited_From_Formal (Subp)) then\n             Parent_Subp := Inherited_From_Formal (Subp);\n          else\n-            while Present (Alias (Parent_Subp)) loop\n-               Parent_Subp := Alias (Parent_Subp);\n-            end loop;\n+            Parent_Subp := Ultimate_Alias (Parent_Subp);\n          end if;\n \n          --  The below setting of Entity is suspect, see F109-018 discussion???"}, {"sha": "c05b057edc3f86ed01ef222239871167865691e3", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 11, "deletions": 48, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -1843,23 +1843,10 @@ package body Exp_Disp is\n \n    function Is_Predefined_Dispatching_Alias (Prim : Entity_Id) return Boolean\n    is\n-      E : Entity_Id;\n-\n    begin\n-      if not Is_Predefined_Dispatching_Operation (Prim)\n+      return not Is_Predefined_Dispatching_Operation (Prim)\n         and then Present (Alias (Prim))\n-      then\n-         E := Prim;\n-         while Present (Alias (E)) loop\n-            E := Alias (E);\n-         end loop;\n-\n-         if Is_Predefined_Dispatching_Operation (E) then\n-            return True;\n-         end if;\n-      end if;\n-\n-      return False;\n+        and then Is_Predefined_Dispatching_Operation (Ultimate_Alias (Prim));\n    end Is_Predefined_Dispatching_Alias;\n \n    ---------------------------------------\n@@ -3703,11 +3690,8 @@ package body Exp_Disp is\n                           Alias (Prim);\n \n                      else\n-                        while Present (Alias (Prim)) loop\n-                           Prim := Alias (Prim);\n-                        end loop;\n-\n-                        Expand_Interface_Thunk (Prim, Thunk_Id, Thunk_Code);\n+                        Expand_Interface_Thunk\n+                          (Ultimate_Alias (Prim), Thunk_Id, Thunk_Code);\n \n                         if Present (Thunk_Id) then\n                            Append_To (Result, Thunk_Code);\n@@ -3874,12 +3858,7 @@ package body Exp_Disp is\n                                (Interface_Alias (Prim)) = Iface\n                   then\n                      Prim_Alias := Interface_Alias (Prim);\n-\n-                     E := Prim;\n-                     while Present (Alias (E)) loop\n-                        E := Alias (E);\n-                     end loop;\n-\n+                     E   := Ultimate_Alias (Prim);\n                      Pos := UI_To_Int (DT_Position (Prim_Alias));\n \n                      if Present (Prim_Table (Pos)) then\n@@ -4933,9 +4912,7 @@ package body Exp_Disp is\n                   Prim := Node (Prim_Elmt);\n \n                   if Chars (Prim) = Name_uSize then\n-                     while Present (Alias (Prim)) loop\n-                        Prim := Alias (Prim);\n-                     end loop;\n+                     Prim := Ultimate_Alias (Prim);\n \n                      if Is_Abstract_Subprogram (Prim) then\n                         Append_To (TSD_Aggr_List,\n@@ -5396,11 +5373,7 @@ package body Exp_Disp is\n                        and then not Present (Prim_Table\n                                               (UI_To_Int (DT_Position (Prim))))\n                      then\n-                        E := Prim;\n-                        while Present (Alias (E)) loop\n-                           E := Alias (E);\n-                        end loop;\n-\n+                        E := Ultimate_Alias (Prim);\n                         pragma Assert (not Is_Abstract_Subprogram (E));\n                         Prim_Table (UI_To_Int (DT_Position (Prim))) := E;\n                      end if;\n@@ -6121,10 +6094,7 @@ package body Exp_Disp is\n \n                --  Retrieve the root of the alias chain\n \n-               Prim_Als := Prim;\n-               while Present (Alias (Prim_Als)) loop\n-                  Prim_Als := Alias (Prim_Als);\n-               end loop;\n+               Prim_Als := Ultimate_Alias (Prim);\n \n                --  In the case of an entry wrapper, set the entry index\n \n@@ -6656,10 +6626,7 @@ package body Exp_Disp is\n    begin\n       --  Retrieve the original primitive operation\n \n-      Prim_Op := Prim;\n-      while Present (Alias (Prim_Op)) loop\n-         Prim_Op := Alias (Prim_Op);\n-      end loop;\n+      Prim_Op := Ultimate_Alias (Prim);\n \n       if Ekind (Typ) = E_Record_Type\n         and then Present (Corresponding_Concurrent_Type (Typ))\n@@ -7179,12 +7146,8 @@ package body Exp_Disp is\n                Set_DT_Position (Prim, Default_Prim_Op_Position (Prim));\n \n             elsif Is_Predefined_Dispatching_Alias (Prim) then\n-               E := Alias (Prim);\n-               while Present (Alias (E)) loop\n-                  E := Alias (E);\n-               end loop;\n-\n-               Set_DT_Position (Prim, Default_Prim_Op_Position (E));\n+               Set_DT_Position (Prim,\n+                 Default_Prim_Op_Position (Ultimate_Alias (Prim)));\n \n             --  Overriding primitives of ancestor abstract interfaces\n "}, {"sha": "5817d7ac73e80d85b9f95d3a4161f180943fcc82", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1346,13 +1346,7 @@ package body Exp_Dist is\n                --  primitive may have been inherited, go back the alias chain\n                --  until the real primitive has been found.\n \n-               Current_Primitive_Alias := Current_Primitive;\n-               while Present (Alias (Current_Primitive_Alias)) loop\n-                  pragma Assert\n-                    (Current_Primitive_Alias\n-                      /= Alias (Current_Primitive_Alias));\n-                  Current_Primitive_Alias := Alias (Current_Primitive_Alias);\n-               end loop;\n+               Current_Primitive_Alias := Ultimate_Alias (Current_Primitive);\n \n                --  Copy the spec from the original declaration for the purpose\n                --  of declaring an overriding subprogram: we need to replace"}, {"sha": "5283023a8561b57e8472bae31cfb825faa6e4240", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -214,7 +214,6 @@ package body Lib.Xref is\n       Base_T    : Entity_Id;\n       Prim      : Elmt_Id;\n       Prim_List : Elist_Id;\n-      Ent       : Entity_Id;\n \n    begin\n       --  Handle subtypes of synchronized types\n@@ -262,12 +261,8 @@ package body Lib.Xref is\n          --  reference purposes (it is the original for which we want the xref\n          --  and for which the comes_from_source test must be performed).\n \n-         Ent := Node (Prim);\n-         while Present (Alias (Ent)) loop\n-            Ent := Alias (Ent);\n-         end loop;\n-\n-         Generate_Reference (Typ, Ent, 'p', Set_Ref => False);\n+         Generate_Reference\n+           (Typ, Ultimate_Alias (Node (Prim)), 'p', Set_Ref => False);\n          Next_Elmt (Prim);\n       end loop;\n    end Generate_Prim_Op_References;\n@@ -1704,10 +1699,7 @@ package body Lib.Xref is\n                      --  through several levels of derivation, so find the\n                      --  ultimate (source) ancestor.\n \n-                     Op := Alias (Old_E);\n-                     while Present (Alias (Op)) loop\n-                        Op := Alias (Op);\n-                     end loop;\n+                     Op := Ultimate_Alias (Old_E);\n \n                   --  Normal case of no alias present\n "}, {"sha": "2efd558f99dbd99a33163b12392fb9979d4cc398", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -3545,13 +3545,9 @@ package body Sem_Attr is\n          ----------------------\n \n          procedure Must_Be_Imported (Proc_Ent : Entity_Id) is\n-            Pent : Entity_Id := Proc_Ent;\n+            Pent : constant Entity_Id := Ultimate_Alias (Proc_Ent);\n \n          begin\n-            while Present (Alias (Pent)) loop\n-               Pent := Alias (Pent);\n-            end loop;\n-\n             --  Ignore check if procedure not frozen yet (we will get\n             --  another chance when the default parameter is reanalyzed)\n "}, {"sha": "84bb34a66f23ba40dc9d94c14dd8eb59f83dac61", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -1674,10 +1674,7 @@ package body Sem_Eval is\n         and then Present (Alias (Entity (Name (N))))\n         and then Is_Enumeration_Type (Base_Type (Typ))\n       then\n-         Lit := Alias (Entity (Name (N)));\n-         while Present (Alias (Lit)) loop\n-            Lit := Alias (Lit);\n-         end loop;\n+         Lit := Ultimate_Alias (Entity (Name (N)));\n \n          if Ekind (Lit) = E_Enumeration_Literal then\n             if Base_Type (Etype (Lit)) /= Base_Type (Typ) then"}, {"sha": "0fb0adeeddd933a78744d4938f17f6d59c79e7bc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -3956,9 +3956,7 @@ package body Sem_Prag is\n             --  entity (if declared in the same unit) is inlined.\n \n             if Is_Subprogram (Subp) then\n-               while Present (Alias (Inner_Subp)) loop\n-                  Inner_Subp := Alias (Inner_Subp);\n-               end loop;\n+               Inner_Subp := Ultimate_Alias (Inner_Subp);\n \n                if In_Same_Source_Unit (Subp, Inner_Subp) then\n                   Set_Inline_Flags (Inner_Subp);"}, {"sha": "c8a98b88f45dcce640b8b262b9c667cd6beac1b0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -11128,13 +11128,13 @@ package body Sem_Util is\n    --------------------\n    -- Ultimate_Alias --\n    --------------------\n-   --  To do: add occurrences calling this new subprogram\n \n    function Ultimate_Alias (Prim : Entity_Id) return Entity_Id is\n       E : Entity_Id := Prim;\n \n    begin\n       while Present (Alias (E)) loop\n+         pragma Assert (Alias (E) /= E);\n          E := Alias (E);\n       end loop;\n "}, {"sha": "8da6b52223e0a4773bf93381bca28b8ff0027736", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81a5940b446f84086ec6dbf536c516ee117b250/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b81a5940b446f84086ec6dbf536c516ee117b250", "patch": "@@ -216,6 +216,7 @@ package Sem_Util is\n    --  for stubbed subprograms.\n \n    function Current_Entity (N : Node_Id) return Entity_Id;\n+   pragma Inline (Current_Entity);\n    --  Find the currently visible definition for a given identifier, that is to\n    --  say the first entry in the visibility chain for the Chars of N.\n \n@@ -464,6 +465,7 @@ package Sem_Util is\n    --  Decl_Node into the name buffer.\n \n    function Get_Name_Entity_Id (Id : Name_Id) return Entity_Id;\n+   pragma Inline (Get_Name_Entity_Id);\n    --  An entity value is associated with each name in the name table. The\n    --  Get_Name_Entity_Id function fetches the Entity_Id of this entity,\n    --  which is the innermost visible entity with the given name. See the\n@@ -696,9 +698,10 @@ package Sem_Util is\n    --  it is of protected, synchronized or task kind.\n \n    function Is_False (U : Uint) return Boolean;\n-   --  The argument is a Uint value which is the Boolean'Pos value of a\n-   --  Boolean operand (i.e. is either 0 for False, or 1 for True). This\n-   --  function simply tests if it is False (i.e. zero)\n+   pragma Inline (Is_False);\n+   --  The argument is a Uint value which is the Boolean'Pos value of a Boolean\n+   --  operand (i.e. is either 0 for False, or 1 for True). This function tests\n+   --  if it is False (i.e. zero).\n \n    function Is_Fixed_Model_Number (U : Ureal; T : Entity_Id) return Boolean;\n    --  Returns True iff the number U is a model number of the fixed-\n@@ -734,11 +737,11 @@ package Sem_Util is\n    --  variable and constant objects return True (compare Is_Variable).\n \n    function Is_OK_Variable_For_Out_Formal (AV : Node_Id) return Boolean;\n-   --  Used to test if AV is an acceptable formal for an OUT or IN OUT\n-   --  formal. Note that the Is_Variable function is not quite the right\n-   --  test because this is a case in which conversions whose expression\n-   --  is a variable (in the Is_Variable sense) with a non-tagged type\n-   --  target are considered view conversions and hence variables.\n+   --  Used to test if AV is an acceptable formal for an OUT or IN OUT formal.\n+   --  Note that the Is_Variable function is not quite the right test because\n+   --  this is a case in which conversions whose expression is a variable (in\n+   --  the Is_Variable sense) with a non-tagged type target are considered view\n+   --  conversions and hence variables.\n \n    function Is_Partially_Initialized_Type (Typ : Entity_Id) return Boolean;\n    --  Typ is a type entity. This function returns true if this type is partly\n@@ -782,6 +785,7 @@ package Sem_Util is\n    --  normally such nodes represent a direct name.\n \n    function Is_Statement (N : Node_Id) return Boolean;\n+   pragma Inline (Is_Statement);\n    --  Check if the node N is a statement node. Note that this includes\n    --  the case of procedure call statements (unlike the direct use of\n    --  the N_Statement_Other_Than_Procedure_Call subtype from Sinfo).\n@@ -791,14 +795,15 @@ package Sem_Util is\n    --  Returns True if E is a synchronized tagged type (AARM 3.9.4 (6/2))\n \n    function Is_Transfer (N : Node_Id) return Boolean;\n-   --  Returns True if the node N is a statement which is known to cause\n-   --  an unconditional transfer of control at runtime, i.e. the following\n+   --  Returns True if the node N is a statement which is known to cause an\n+   --  unconditional transfer of control at runtime, i.e. the following\n    --  statement definitely will not be executed.\n \n    function Is_True (U : Uint) return Boolean;\n-   --  The argument is a Uint value which is the Boolean'Pos value of a\n-   --  Boolean operand (i.e. is either 0 for False, or 1 for True). This\n-   --  function simply tests if it is True (i.e. non-zero)\n+   pragma Inline (Is_True);\n+   --  The argument is a Uint value which is the Boolean'Pos value of a Boolean\n+   --  operand (i.e. is either 0 for False, or 1 for True). This function tests\n+   --  if it is True (i.e. non-zero).\n \n    function Is_Universal_Numeric_Type (T : Entity_Id) return Boolean;\n    pragma Inline (Is_Universal_Numeric_Type);\n@@ -1004,7 +1009,8 @@ package Sem_Util is\n \n    procedure Next_Actual (Actual_Id : in out Node_Id);\n    pragma Inline (Next_Actual);\n-   --  Next_Actual (N) is equivalent to N := Next_Actual (N)\n+   --  Next_Actual (N) is equivalent to N := Next_Actual (N). Note that we\n+   --  inline this procedural form, but not the functional form that follows.\n \n    function Next_Actual (Actual_Id : Node_Id) return Node_Id;\n    --  Find next actual parameter in declaration order. As described for\n@@ -1172,6 +1178,7 @@ package Sem_Util is\n    --  foreign convention, then we set Can_Use_Internal_Rep to False on E.\n \n    procedure Set_Current_Entity (E : Entity_Id);\n+   pragma Inline (Set_Current_Entity);\n    --  Establish the entity E as the currently visible definition of its\n    --  associated name (i.e. the Node_Id associated with its name)\n \n@@ -1189,6 +1196,7 @@ package Sem_Util is\n    --  can check identifier spelling style.\n \n    procedure Set_Name_Entity_Id (Id : Name_Id; Val : Entity_Id);\n+   pragma Inline (Set_Name_Entity_Id);\n    --  Sets the Entity_Id value associated with the given name, which is the\n    --  Id of the innermost visible entity with the given name. See the body\n    --  of package Sem_Ch8 for further details on the handling of visibility.\n@@ -1219,6 +1227,7 @@ package Sem_Util is\n    --  Set the flag Is_Transient of the current scope\n \n    procedure Set_Size_Info (T1, T2 : Entity_Id);\n+   pragma Inline (Set_Size_Info);\n    --  Copies the Esize field and Has_Biased_Representation flag from sub(type)\n    --  entity T2 to (sub)type entity T1. Also copies the Is_Unsigned_Type flag\n    --  in the fixed-point and discrete cases, and also copies the alignment\n@@ -1252,8 +1261,9 @@ package Sem_Util is\n    --  Return the accessibility level of Typ\n \n    function Ultimate_Alias (Prim : Entity_Id) return Entity_Id;\n-   --  Return the last entity in the chain of aliased entities of Prim.\n-   --  If Prim has no alias return Prim.\n+   pragma Inline (Ultimate_Alias);\n+   --  Return the last entity in the chain of aliased entities of Prim. If Prim\n+   --  has no alias return Prim.\n \n    function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id;\n    --  Unit_Id is the simple name of a program unit, this function returns the\n@@ -1266,28 +1276,18 @@ package Sem_Util is\n    --  Yields Universal_Integer or Universal_Real if this is a candidate\n \n    function Unqualify (Expr : Node_Id) return Node_Id;\n-   --  Removes any qualifications from Expr. For example, for T1'(T2'(X)),\n-   --  this returns X. If Expr is not a qualified expression, returns Expr.\n+   pragma Inline (Unqualify);\n+   --  Removes any qualifications from Expr. For example, for T1'(T2'(X)), this\n+   --  returns X. If Expr is not a qualified expression, returns Expr.\n \n    function Within_Init_Proc return Boolean;\n    --  Determines if Current_Scope is within an init proc\n \n    procedure Wrong_Type (Expr : Node_Id; Expected_Type : Entity_Id);\n-   --  Output error message for incorrectly typed expression. Expr is the\n-   --  node for the incorrectly typed construct (Etype (Expr) is the type\n-   --  found), and Expected_Type is the entity for the expected type. Note\n-   --  that Expr does not have to be a subexpression, anything with an\n-   --  Etype field may be used.\n-\n-private\n-   pragma Inline (Current_Entity);\n-   pragma Inline (Get_Name_Entity_Id);\n-   pragma Inline (Is_False);\n-   pragma Inline (Is_Statement);\n-   pragma Inline (Is_True);\n-   pragma Inline (Set_Current_Entity);\n-   pragma Inline (Set_Name_Entity_Id);\n-   pragma Inline (Set_Size_Info);\n-   pragma Inline (Unqualify);\n+   --  Output error message for incorrectly typed expression. Expr is the node\n+   --  for the incorrectly typed construct (Etype (Expr) is the type found),\n+   --  and Expected_Type is the entity for the expected type. Note that Expr\n+   --  does not have to be a subexpression, anything with an Etype field may\n+   --  be used.\n \n end Sem_Util;"}]}