{"sha": "52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJiOTQ2OGYxNTc1Yjg3ZTQ5MGNjM2ZkY2ZmNGM1MWYyNWZiNDljMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T17:40:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T17:40:03Z"}, "message": "PR jit/63854: Fix leaks in toyvm.c\n\ngcc/jit/ChangeLog:\n\tPR jit/63854\n\t* docs/examples/tut04-toyvm/toyvm.c\n\t(toyvm_compiled_function): New typedef.\n\t(toyvm_compiled_func) Rename to...\n\t(toyvm_compiled_code) ...this.\n\t(struct toyvm_compiled_function): New struct.\n\t(toyvm_function_compile): Return a toyvm_compiled_function *\n\trather than a toyvm_compiled_func, so that the caller can fully\n\tclean things up.  Free \"funcname\".\n\t(test_script): Update for change to toyvm_function_compile.\n\tClean up the toyvm_compiled_function.\n\t(main): Likewise.\n\t(docs/intro/tutorial04.rst): Update to reflect the above changes,\n\tand to better spell out the lifetime of the compiled code.\n\nFrom-SVN: r218234", "tree": {"sha": "f16b19ca2feb631733943e067ce5d2a3f52f9b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f16b19ca2feb631733943e067ce5d2a3f52f9b23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33b625ed6060fea016d99cf268cc68287a93ca0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b625ed6060fea016d99cf268cc68287a93ca0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b625ed6060fea016d99cf268cc68287a93ca0c"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "210dcb0c8eaf11feabcc4e8f6745df7eb2db9714", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "patch": "@@ -1,3 +1,20 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/63854\n+\t* docs/examples/tut04-toyvm/toyvm.c\n+\t(toyvm_compiled_function): New typedef.\n+\t(toyvm_compiled_func) Rename to...\n+\t(toyvm_compiled_code) ...this.\n+\t(struct toyvm_compiled_function): New struct.\n+\t(toyvm_function_compile): Return a toyvm_compiled_function *\n+\trather than a toyvm_compiled_func, so that the caller can fully\n+\tclean things up.  Free \"funcname\".\n+\t(test_script): Update for change to toyvm_function_compile.\n+\tClean up the toyvm_compiled_function.\n+\t(main): Likewise.\n+\t(docs/intro/tutorial04.rst): Update to reflect the above changes,\n+\tand to better spell out the lifetime of the compiled code.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/63854"}, {"sha": "07de507a132b826b276a8f48b3a9ed703d31f4ab", "filename": "gcc/jit/docs/examples/tut04-toyvm/toyvm.c", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c?ref=52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "patch": "@@ -33,9 +33,10 @@ typedef struct toyvm_op toyvm_op;\n typedef struct toyvm_function toyvm_function;\n typedef struct toyvm_frame toyvm_frame;\n typedef struct compilation_state compilation_state;\n+typedef struct toyvm_compiled_function toyvm_compiled_function;\n \n /* Functions are compiled to this function ptr type.  */\n-typedef int (*toyvm_compiled_func) (int);\n+typedef int (*toyvm_compiled_code) (int);\n \n enum opcode {\n   /* Ops taking no operand.  */\n@@ -440,9 +441,17 @@ add_pop (compilation_state *state,\n \tgcc_jit_lvalue_as_rvalue (state->stack_depth))));\n }\n \n+/* A struct to hold the compilation results.  */\n+\n+struct toyvm_compiled_function\n+{\n+  gcc_jit_result *cf_jit_result;\n+  toyvm_compiled_code cf_code;\n+};\n+\n /* The main compilation hook.  */\n \n-static toyvm_compiled_func\n+static toyvm_compiled_function *\n toyvm_function_compile (toyvm_function *fn)\n {\n   compilation_state state;\n@@ -724,12 +733,26 @@ toyvm_function_compile (toyvm_function *fn)\n     } /* end of loop on PC locations.  */\n \n   /* We've now finished populating the context.  Compile it.  */\n-  gcc_jit_result *result = gcc_jit_context_compile (state.ctxt);\n+  gcc_jit_result *jit_result = gcc_jit_context_compile (state.ctxt);\n   gcc_jit_context_release (state.ctxt);\n \n-  return (toyvm_compiled_func)gcc_jit_result_get_code (result,\n-\t\t\t\t\t\t       funcname);\n-  /* (this leaks \"result\" and \"funcname\") */\n+  toyvm_compiled_function *toyvm_result =\n+    (toyvm_compiled_function *)calloc (1, sizeof (toyvm_compiled_function));\n+  if (!toyvm_result)\n+    {\n+      fprintf (stderr, \"out of memory allocating toyvm_compiled_function\\n\");\n+      gcc_jit_result_release (jit_result);\n+      return NULL;\n+    }\n+\n+  toyvm_result->cf_jit_result = jit_result;\n+  toyvm_result->cf_code =\n+    (toyvm_compiled_code)gcc_jit_result_get_code (jit_result,\n+\t\t\t\t\t\t  funcname);\n+\n+  free (funcname);\n+\n+  return toyvm_result;\n }\n \n char test[1024];\n@@ -768,7 +791,8 @@ test_script (const char *scripts_dir, const char *script_name, int input,\n   char *script_path;\n   toyvm_function *fn;\n   int interpreted_result;\n-  toyvm_compiled_func code;\n+  toyvm_compiled_function *compiled_fn;\n+  toyvm_compiled_code code;\n   int compiled_result;\n \n   snprintf (test, sizeof (test), \"toyvm.c: %s\", script_name);\n@@ -784,12 +808,18 @@ test_script (const char *scripts_dir, const char *script_name, int input,\n   interpreted_result = toyvm_function_interpret (fn, input, NULL);\n   CHECK_VALUE (interpreted_result, expected_result);\n \n-  code = toyvm_function_compile (fn);\n+  compiled_fn = toyvm_function_compile (fn);\n+  CHECK_NON_NULL (compiled_fn);\n+\n+  code = (toyvm_compiled_code)compiled_fn->cf_code;\n   CHECK_NON_NULL (code);\n \n   compiled_result = code (input);\n   CHECK_VALUE (compiled_result, expected_result);\n \n+  gcc_jit_result_release (compiled_fn->cf_jit_result);\n+  free (compiled_fn);\n+  free (fn);\n   free (script_path);\n }\n \n@@ -853,9 +883,15 @@ main (int argc, char **argv)\n \t  toyvm_function_interpret (fn, atoi (argv[2]), NULL));\n \n   /* JIT-compilation.  */\n-  toyvm_compiled_func code = toyvm_function_compile (fn);\n+  toyvm_compiled_function *compiled_fn\n+    = toyvm_function_compile (fn);\n+\n+  toyvm_compiled_code code = compiled_fn->cf_code;\n   printf (\"compiler result: %d\\n\",\n \t  code (atoi (argv[2])));\n \n+  gcc_jit_result_release (compiled_fn->cf_jit_result);\n+  free (compiled_fn);\n+\n  return 0;\n }"}, {"sha": "3aac6703b4c634abb615e2fc148833a93293e86e", "filename": "gcc/jit/docs/intro/tutorial04.rst", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b9468f1575b87e490cc3fdcff4c51f25fb49c1/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst?ref=52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "patch": "@@ -101,6 +101,15 @@ then directly executed in-process:\n     :end-before: enum opcode\n     :language: c\n \n+The lifetime of the code is tied to that of a :c:type:`gcc_jit_result *`.\n+We'll handle this by bundling them up in a structure, so that we can\n+clean them up together by calling :c:func:`gcc_jit_result_release`:\n+\n+   .. literalinclude:: ../examples/tut04-toyvm/toyvm.c\n+    :start-after: /* A struct to hold the compilation results.  */\n+    :end-before: /* The main compilation hook.  */\n+    :language: c\n+\n Our compiler isn't very sophisticated; it takes the implementation of\n each opcode above, and maps it directly to the operations supported by\n the libgccjit API.\n@@ -155,7 +164,7 @@ a block, implementing pushing and popping values:\n \n    .. literalinclude:: ../examples/tut04-toyvm/toyvm.c\n     :start-after: /* Stack manipulation.  */\n-    :end-before: /* The main compilation hook.  */\n+    :end-before: /* A struct to hold the compilation results.  */\n     :language: c\n \n We will support single-stepping through the generated code in the"}]}