{"sha": "3c760f4a79c221408122b3f265a8039b04ce697e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NjBmNGE3OWMyMjE0MDgxMjJiM2YyNjVhODAzOWIwNGNlNjk3ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-14T15:17:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-14T15:17:57Z"}, "message": "Make printers detect invalid debug mode iterators\n\n\tPR libstdc++/59170\n\t* python/libstdcxx/v6/printers.py (StdDebugIteratorPrinter): Use\n\t_M_sequence and _M_version to detect invalid iterators.\n\t* testsuite/libstdc++-prettyprinters/debug.cc: Test debug mode vector\n\tand test invalid iterators.\n\t* testsuite/libstdc++-prettyprinters/debug_cxx11.cc: New test.\n\nFrom-SVN: r243650", "tree": {"sha": "20800d1ea3a325b165b20be26c3762f54fabd9ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20800d1ea3a325b165b20be26c3762f54fabd9ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c760f4a79c221408122b3f265a8039b04ce697e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c760f4a79c221408122b3f265a8039b04ce697e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c760f4a79c221408122b3f265a8039b04ce697e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c760f4a79c221408122b3f265a8039b04ce697e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54601417cebb474d8b941ccf4e0502624500a11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54601417cebb474d8b941ccf4e0502624500a11c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54601417cebb474d8b941ccf4e0502624500a11c"}], "stats": {"total": 103, "additions": 101, "deletions": 2}, "files": [{"sha": "635629b78378fdac184138aea261e6be526d9432", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c760f4a79c221408122b3f265a8039b04ce697e", "patch": "@@ -1,3 +1,12 @@\n+2016-12-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59170\n+\t* python/libstdcxx/v6/printers.py (StdDebugIteratorPrinter): Use\n+\t_M_sequence and _M_version to detect invalid iterators.\n+\t* testsuite/libstdc++-prettyprinters/debug.cc: Test debug mode vector\n+\tand test invalid iterators.\n+\t* testsuite/libstdc++-prettyprinters/debug_cxx11.cc: New test.\n+\n 2016-12-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc:"}, {"sha": "8ac4a3757cb12bb7e28052e274ec7039a8db6001", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=3c760f4a79c221408122b3f265a8039b04ce697e", "patch": "@@ -501,6 +501,10 @@ def __init__ (self, typename, val):\n     # Just strip away the encapsulating __gnu_debug::_Safe_iterator\n     # and return the wrapped iterator value.\n     def to_string (self):\n+        base_type = gdb.lookup_type('__gnu_debug::_Safe_iterator_base')\n+        safe_seq = self.val.cast(base_type)['_M_sequence']\n+        if not safe_seq or self.val['_M_version'] != safe_seq['_M_version']:\n+            return \"invalid iterator\"\n         itype = self.val.type.template_argument(0)\n         return self.val.cast(itype)\n \n@@ -1507,8 +1511,8 @@ def build_libstdcxx_dictionary ():\n                                   Tr1UnorderedSetPrinter)\n \n     # These are the C++11 printer registrations for -D_GLIBCXX_DEBUG cases.\n-    # The tr1 namespace printers do not seem to have any debug\n-    # equivalents, so do no register them.\n+    # The tr1 namespace containers do not have any debug equivalents,\n+    # so do not register printers for them.\n     libstdcxx_printer.add('std::__debug::unordered_map',\n                           Tr1UnorderedMapPrinter)\n     libstdcxx_printer.add('std::__debug::unordered_set',"}, {"sha": "cff71132ceca60442166af2cbfdb879e3bac8272", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc?ref=3c760f4a79c221408122b3f265a8039b04ce697e", "patch": "@@ -27,6 +27,7 @@\n #include <list>\n #include <map>\n #include <set>\n+#include <vector>\n #include <ext/slist>\n \n int\n@@ -90,6 +91,20 @@ main()\n   sll.push_front(47);\n // { dg-final { note-test sll {__gnu_cxx::slist = {[0] = 47, [1] = 23}} } }\n \n+  std::vector<int> v;\n+  v.push_back(1);\n+  v.push_back(2);\n+  std::vector<int>::iterator viter0;\n+// { dg-final { note-test viter0 {invalid iterator} } }\n+  std::vector<int>::iterator viter1 = v.begin();\n+  std::vector<int>::iterator viter2 = viter1 + 1;\n+  v.erase(viter1);\n+// { dg-final { note-test v {std::__debug::vector of length 1, capacity 2 = {2}} } }\n+// { dg-final { note-test viter1 {invalid iterator} } }\n+// { dg-final { note-test viter2 {invalid iterator} } }\n+  std::vector<int>::iterator viter3 = v.begin();\n+// { dg-final { note-test viter3 {2} } }\n+\n   __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n // { dg-final { note-test slliter {47} } }\n "}, {"sha": "65f187c2ce331243eace2c18cc6866f1ddb8e46f", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug_cxx11.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c760f4a79c221408122b3f265a8039b04ce697e/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc?ref=3c760f4a79c221408122b3f265a8039b04ce697e", "patch": "@@ -0,0 +1,71 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-g -O0\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define _GLIBCXX_DEBUG\n+\n+#include <forward_list>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <iostream>\n+\n+int\n+main()\n+{\n+  std::forward_list<std::string> flst;\n+  std::forward_list<std::string>::iterator flstiter0;\n+// { dg-final { note-test flstiter0 {invalid iterator}} }\n+  flst.push_front(\"dum\");\n+  std::forward_list<std::string>::iterator flstiter1 = flst.begin();\n+// { dg-final { note-test *flstiter1 {\"dum\"}} }\n+  flst.push_front(\"dee\");\n+  std::forward_list<std::string>::iterator flstiter2 = flst.begin();\n+// { dg-final { note-test *flstiter2 {\"dee\"}} }\n+// { dg-final { note-test flst {std::__debug::forward_list = {[0] = \"dee\", [1] = \"dum\"}} } }\n+\n+  std::forward_list<std::string>::const_iterator flstciter = flst.begin();\n+// { dg-final { note-test *flstciter {\"dee\"}} }\n+\n+  std::unordered_map<std::string, int> um{ {\"zardoz\", 23} };\n+// { dg-final { note-test um {std::__debug::unordered_map with 1 elements = {[\"zardoz\"] = 23}} } }\n+\n+  std::unordered_map<std::string, int>::iterator umiter = um.begin();\n+// { dg-final { note-test umiter->first {\"zardoz\"} } }\n+\n+  std::unordered_set<std::string> us{\"barrel\"};\n+// { dg-final { note-test us {std::__debug::unordered_set with 1 elements = {[0] = \"barrel\"}} } }\n+\n+  std::unordered_set<std::string>::const_iterator usciter = us.begin();\n+// { dg-final { note-test *usciter {\"barrel\"} } }\n+\n+  // N.B. printers.py does not define printers for the iterator types\n+  // that belong to C++11 containers, so tests above dereference the\n+  // iterators, and to make that work we need to ensure the operator\n+  // definitions are in the debug info:\n+  std::string tem;\n+  tem = *flstiter1;\n+  tem = *flstciter;\n+  tem = umiter->first;\n+  tem = *usciter;\n+\n+  std::cout << \"\\n\";\n+  return 0;\t\t\t// Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}