{"sha": "ccfd729622bed7e213dccdc07bbc60903e1ad65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmZDcyOTYyMmJlZDdlMjEzZGNjZGMwN2JiYzYwOTAzZTFhZDY1Yg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-12-17T09:28:25Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-12-17T09:28:25Z"}, "message": "re PR fortran/42144 ([OOP] deferred TBPs do not work)\n\ngcc/fortran/\n2009-12-17 Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42144\n\t* trans-expr.c (select_class_proc): Skip abstract base types.\n\ngcc/testsuite/\n2009-12-17  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42144\n\t* gfortran.dg/dynamic_dispatch_6.f03: New test.\n\nFrom-SVN: r155305", "tree": {"sha": "67a42f93e82c2ff8732c25d8eb34371aa5ea7f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67a42f93e82c2ff8732c25d8eb34371aa5ea7f97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccfd729622bed7e213dccdc07bbc60903e1ad65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfd729622bed7e213dccdc07bbc60903e1ad65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccfd729622bed7e213dccdc07bbc60903e1ad65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfd729622bed7e213dccdc07bbc60903e1ad65b/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca43f0efca4d2a74447d0e150730f6869877f374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca43f0efca4d2a74447d0e150730f6869877f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca43f0efca4d2a74447d0e150730f6869877f374"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "f65bcd0c718c5ce3de81e6603d252486542db18b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ccfd729622bed7e213dccdc07bbc60903e1ad65b", "patch": "@@ -1,3 +1,8 @@\n+2009-12-17 Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42144\n+\t* trans-expr.c (select_class_proc): Skip abstract base types.\n+\n 2009-12-16  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gfc-internals.texi, gfortran.texi, invoke.texi: Fix typos."}, {"sha": "b0c19c9627cc675fa11b31a4508aa8e024514423", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=ccfd729622bed7e213dccdc07bbc60903e1ad65b", "patch": "@@ -1556,6 +1556,10 @@ select_class_proc (gfc_se *se, gfc_class_esym_list *elist,\n       if (elist->derived == NULL)\n \tgoto free_elist;\n \n+      /* Skip abstract base types.  */\n+      if (elist->derived->attr.abstract)\n+       goto free_elist;\n+\n       /* Run through the chain picking up all the cases that call the\n \t same procedure.  */\n       tmp_elist = elist;"}, {"sha": "77bd4ee13341990f34fe8a31c28992cf1acbc289", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccfd729622bed7e213dccdc07bbc60903e1ad65b", "patch": "@@ -1,3 +1,8 @@\n+2009-12-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42144\n+\t* gfortran.dg/dynamic_dispatch_6.f03: New test.\n+\n 2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n \n \t* g++.old-deja/g++.mike/net31.C: Make expected dg-error strings"}, {"sha": "e2d880e0efa03efd791a200545aa5b1864f8ead4", "filename": "gcc/testsuite/gfortran.dg/dynamic_dispatch_6.f03", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfd729622bed7e213dccdc07bbc60903e1ad65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_6.f03?ref=ccfd729622bed7e213dccdc07bbc60903e1ad65b", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do run }\n+!\n+! PR 42144: [OOP] deferred TBPs do not work\n+!\n+! Contributed by Damian Rouson <damian@rouson.net>\n+\n+module field_module\n+  implicit none\n+  private\n+  public :: field\n+  type ,abstract :: field \n+  end type\n+end module\n+\n+module periodic_5th_order_module\n+  use field_module ,only : field\n+  implicit none\n+  type ,extends(field) :: periodic_5th_order\n+  end type\n+end module\n+\n+module field_factory_module\n+  implicit none\n+  private\n+  public :: field_factory\n+  type, abstract :: field_factory \n+  contains \n+    procedure(create_interface), deferred :: create \n+  end type \n+  abstract interface \n+    function create_interface(this) \n+      use field_module ,only : field\n+      import :: field_factory\n+      class(field_factory), intent(in) :: this \n+      class(field) ,pointer :: create_interface\n+    end function\n+  end interface \n+end module\n+\n+module periodic_5th_factory_module\n+  use field_factory_module , only : field_factory\n+  implicit none\n+  private\n+  public :: periodic_5th_factory\n+  type, extends(field_factory) :: periodic_5th_factory \n+  contains \n+    procedure :: create=>new_periodic_5th_order\n+  end type \n+contains\n+  function new_periodic_5th_order(this) \n+    use field_module ,only : field\n+    use periodic_5th_order_module ,only : periodic_5th_order\n+    class(periodic_5th_factory), intent(in) :: this\n+    class(field) ,pointer :: new_periodic_5th_order\n+  end function\n+end module\n+\n+program main \n+  use field_module ,only : field \n+  use field_factory_module ,only : field_factory\n+  use periodic_5th_factory_module ,only : periodic_5th_factory\n+  implicit none \n+  class(field) ,pointer :: u\n+  class(field_factory), allocatable :: field_creator \n+  allocate (periodic_5th_factory ::  field_creator) \n+  u => field_creator%create() \n+end program\n+\n+! { dg-final { cleanup-modules \"field_module periodic_5th_order_module field_factory_module periodic_5th_factory_module\" } }"}]}