{"sha": "c331eabed629d872f9e5d8e1295905ec0aabde63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzMWVhYmVkNjI5ZDg3MmY5ZTVkOGUxMjk1OTA1ZWMwYWFiZGU2Mw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-08-25T13:51:38Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-08-25T13:51:38Z"}, "message": "avr-protos.h (byte_immediate_operand): Remove Prototype.\n\n\t* config/avr-protos.h (byte_immediate_operand): Remove Prototype.\n\t(secondary_input_reload_class): Remove Prototype.\n\t* config/avr/avr.c (byte_immediate_operand): Remove Function.\n\t* config/avr/avr.md (setmemhi): Use u8_operand.\n\t(strlenhi): Use const0_rtx for comparison.\n\t* config/avr/avr.h (avr_reg_order): Remove Declaration.\n\nFrom-SVN: r178064", "tree": {"sha": "1876011b8f9827a9b9261c74efd0c506c38622bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1876011b8f9827a9b9261c74efd0c506c38622bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c331eabed629d872f9e5d8e1295905ec0aabde63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c331eabed629d872f9e5d8e1295905ec0aabde63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c331eabed629d872f9e5d8e1295905ec0aabde63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c331eabed629d872f9e5d8e1295905ec0aabde63/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61af7eb4d1466f5cf325b3e041386050a45709c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61af7eb4d1466f5cf325b3e041386050a45709c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61af7eb4d1466f5cf325b3e041386050a45709c9"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "e24202f913a2ca87e2e7a436265344db4a33eae2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c331eabed629d872f9e5d8e1295905ec0aabde63", "patch": "@@ -1,3 +1,12 @@\n+2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr-protos.h (byte_immediate_operand): Remove Prototype.\n+\t(secondary_input_reload_class): Remove Prototype.\n+\t* config/avr/avr.c (byte_immediate_operand): Remove Function.\n+\t* config/avr/avr.md (setmemhi): Use u8_operand.\n+\t(strlenhi): Use const0_rtx for comparison.\n+\t* config/avr/avr.h (avr_reg_order): Remove Declaration.\n+\n 2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (reg_class_tab): Make local to"}, {"sha": "ba7da70d1e8cbd827542a038a8c6a240faa2ae69", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=c331eabed629d872f9e5d8e1295905ec0aabde63", "patch": "@@ -86,16 +86,12 @@ extern int extra_constraint_Q (rtx x);\n extern int adjust_insn_length (rtx insn, int len);\n extern const char *output_reload_inhi (rtx insn, rtx *operands, int *len);\n extern const char *output_reload_insisf (rtx insn, rtx *operands, rtx clobber, int *len);\n-extern enum reg_class secondary_input_reload_class (enum reg_class,\n-\t\t\t\t\t\t    enum machine_mode,\n-\t\t\t\t\t\t    rtx);\n extern void notice_update_cc (rtx body, rtx insn);\n extern void print_operand (FILE *file, rtx x, int code);\n extern void print_operand_address (FILE *file, rtx addr);\n extern int reg_unused_after (rtx insn, rtx reg);\n extern int _reg_unused_after (rtx insn, rtx reg);\n extern int avr_jump_mode (rtx x, rtx insn);\n-extern int byte_immediate_operand (rtx op, enum machine_mode mode);\n extern int test_hard_reg_class (enum reg_class rclass, rtx x);\n extern int jump_over_one_insn_p (rtx insn, rtx dest);\n "}, {"sha": "2af94030f59eb32175c98d2c6364b617bf960618", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c331eabed629d872f9e5d8e1295905ec0aabde63", "patch": "@@ -376,8 +376,6 @@ typedef struct avr_args {\n \n #define FUNCTION_ARG_REGNO_P(r) function_arg_regno_p(r)\n \n-extern int avr_reg_order[];\n-\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n #define EPILOGUE_USES(REGNO) avr_epilogue_uses(REGNO)"}, {"sha": "c120afdb026611012cac1010155ef384b68b07d2", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c331eabed629d872f9e5d8e1295905ec0aabde63/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=c331eabed629d872f9e5d8e1295905ec0aabde63", "patch": "@@ -591,18 +591,16 @@\n   \"\"\n   \"{\n   rtx addr0;\n-  int cnt8;\n   enum machine_mode mode;\n \n   /* If value to set is not zero, use the library routine.  */\n   if (operands[2] != const0_rtx)\n     FAIL;\n \n-  if (GET_CODE (operands[1]) != CONST_INT)\n+  if (!CONST_INT_P (operands[1]))\n     FAIL;\n \n-  cnt8 = byte_immediate_operand (operands[1], GET_MODE (operands[1]));\n-  mode = cnt8 ? QImode : HImode;\n+  mode = u8_operand (operands[1], VOIDmode) ? QImode : HImode;\n   operands[5] = gen_rtx_SCRATCH (mode);\n   operands[1] = copy_to_mode_reg (mode,\n                                   gen_int_mode (INTVAL (operands[1]), mode));\n@@ -660,7 +658,7 @@\n    \"\"\n    \"{\n   rtx addr;\n-  if (! (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 0))\n+  if (operands[2] != const0_rtx)\n     FAIL;\n   addr = copy_to_mode_reg (Pmode, XEXP (operands[1],0));\n   operands[1] = gen_rtx_MEM (BLKmode, addr); "}]}