{"sha": "b06df5d4a95ec728ade9230bec945d5d3661f87d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2ZGY1ZDRhOTVlYzcyOGFkZTkyMzBiZWM5NDVkNWQzNjYxZjg3ZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-16T17:25:12Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-17T14:20:45Z"}, "message": "This adds supports for tuples\n\nMore testing is required but this adds tuples apart from TupleStructs\nwhich are parsed as CallExpr. This will be the primitives required to\nfinish that work.", "tree": {"sha": "51a94e9f8118c84893b10ed61d46fd7fd9f30323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a94e9f8118c84893b10ed61d46fd7fd9f30323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b06df5d4a95ec728ade9230bec945d5d3661f87d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06df5d4a95ec728ade9230bec945d5d3661f87d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06df5d4a95ec728ade9230bec945d5d3661f87d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06df5d4a95ec728ade9230bec945d5d3661f87d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a2a52b35e99a40f8bd3992a6b53650908fd188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a2a52b35e99a40f8bd3992a6b53650908fd188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a2a52b35e99a40f8bd3992a6b53650908fd188"}], "stats": {"total": 206, "additions": 184, "deletions": 22}, "files": [{"sha": "5288e516823812c59fe50b9c593c832b07265d24", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -238,10 +238,34 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ADTType &type) override\n   {\n-    ::Btype *compiled_type = nullptr;\n-    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n-    rust_assert (ok);\n-    translated = compiled_type;\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &translated);\n+    if (ok)\n+      return;\n+\n+    // create implicit struct\n+    std::vector<Backend::Btyped_identifier> fields;\n+    for (size_t i = 0; i < type.num_fields (); i++)\n+      {\n+\tTyTy::StructFieldType *field = type.get_field (i);\n+\tBtype *compiled_field_ty\n+\t  = TyTyCompile::compile (ctx->get_backend (),\n+\t\t\t\t  field->get_field_type ());\n+\n+\tBackend::Btyped_identifier f (field->get_name (), compiled_field_ty,\n+\t\t\t\t      ctx->get_mappings ()->lookup_location (\n+\t\t\t\t\ttype.get_ty_ref ()));\n+\tfields.push_back (std::move (f));\n+      }\n+\n+    Btype *struct_type_record = ctx->get_backend ()->struct_type (fields);\n+    Btype *named_struct\n+      = ctx->get_backend ()->named_type (type.get_name (), struct_type_record,\n+\t\t\t\t\t ctx->get_mappings ()->lookup_location (\n+\t\t\t\t\t   type.get_ty_ref ()));\n+\n+    ctx->push_type (named_struct);\n+    ctx->insert_compiled_type (type.get_ty_ref (), named_struct);\n+    translated = named_struct;\n   }\n \n   void visit (TyTy::ArrayType &type) override"}, {"sha": "0d3d9e8e860f9c8275768113801488a5b78c99a3", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -46,7 +46,29 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n       }\n \n-    gcc_unreachable ();\n+    TyTy::TyBase *tyty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t &tyty))\n+      {\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"did not resolve type for this TupleExpr\");\n+\treturn;\n+      }\n+\n+    Btype *tuple_type = TyTyResolveCompile::compile (ctx, tyty);\n+    rust_assert (tuple_type != nullptr);\n+\n+    // this assumes all fields are in order from type resolution\n+    std::vector<Bexpression *> vals;\n+    for (auto &elem : expr.get_tuple_elems ())\n+      {\n+\tauto e = CompileExpr::Compile (elem.get (), ctx);\n+\tvals.push_back (e);\n+      }\n+\n+    translated\n+      = ctx->get_backend ()->constructor_expression (tuple_type, vals,\n+\t\t\t\t\t\t     expr.get_locus ());\n   }\n \n   void visit (HIR::ReturnExpr &expr)"}, {"sha": "fc369c3a9fd8261d2e12f2a5b693d29c4ff4c6a1", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -393,6 +393,12 @@ class TupleType : public TypeNoBounds\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<Type> > &get_elems () { return elems; }\n+  const std::vector<std::unique_ptr<Type> > &get_elems () const\n+  {\n+    return elems;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "83fb93586d92607022f47f6e67e2b01e04b1f996", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -40,7 +40,8 @@ class ResolveExpr : public ResolverBase\n     if (expr.is_unit ())\n       return;\n \n-    gcc_unreachable ();\n+    for (auto &elem : expr.get_tuple_elems ())\n+      ResolveExpr::go (elem.get (), expr.get_node_id ());\n   }\n \n   void visit (AST::PathInExpression &expr)"}, {"sha": "20fb0b64ba73ea87cec29e1c15a3f526a43172cd", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -31,13 +31,7 @@ class ResolveType : public ResolverBase\n   static void go (AST::Type *type, NodeId parent)\n   {\n     ResolveType resolver (parent);\n-\n     type->accept_vis (resolver);\n-    if (resolver.resolved_node == UNKNOWN_NODEID)\n-      {\n-\trust_error_at (resolver.locus, \"failed to resolve type %s\",\n-\t\t       type->as_string ().c_str ());\n-      }\n   };\n \n   void visit (AST::TupleType &tuple)\n@@ -48,21 +42,23 @@ class ResolveType : public ResolverBase\n \treturn;\n       }\n \n-    // TODO see github #78\n-    gcc_unreachable ();\n+    for (auto &elem : tuple.get_elems ())\n+      ResolveType::go (elem.get (), tuple.get_node_id ());\n   }\n \n   void visit (AST::TypePath &path)\n   {\n     // this will need changed to handle mod/crate/use globs and look\n     // at the segments in granularity\n-    if (resolver->get_type_scope ().lookup (path.as_string (), &resolved_node))\n+    if (!resolver->get_type_scope ().lookup (path.as_string (), &resolved_node))\n       {\n-\tresolver->insert_resolved_type (path.get_node_id (), resolved_node);\n-\tresolver->insert_new_definition (path.get_node_id (),\n-\t\t\t\t\t Definition{path.get_node_id (),\n-\t\t\t\t\t\t    parent});\n+\trust_error_at (path.get_locus (), \"failed to resolve TypePath: %s\",\n+\t\t       path.as_string ().c_str ());\n+\treturn;\n       }\n+    resolver->insert_resolved_type (path.get_node_id (), resolved_node);\n+    resolver->insert_new_definition (path.get_node_id (),\n+\t\t\t\t     Definition{path.get_node_id (), parent});\n   }\n \n   void visit (AST::ArrayType &type)"}, {"sha": "19c6ed4b5c6253fea1626d69b4e16a6fc85b4542", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -59,7 +59,25 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    gcc_unreachable ();\n+    size_t index = 0;\n+    std::string identifier = \"(\";\n+    std::vector<TyTy::StructFieldType *> fields;\n+    for (auto &elem : expr.get_tuple_elems ())\n+      {\n+\tauto field_ty = TypeCheckExpr::Resolve (elem.get ());\n+\tidentifier += field_ty->as_string ();\n+\tif ((index + 1) < expr.get_tuple_elems ().size ())\n+\t  identifier += \",\";\n+\n+\tauto field_tyty\n+\t  = new TyTy::StructFieldType (elem->get_mappings ().get_hirid (),\n+\t\t\t\t       std::to_string (index), field_ty);\n+\tfields.push_back (field_tyty);\n+\tindex++;\n+      }\n+    identifier += \")\";\n+    infered = new TyTy::ADTType (expr.get_mappings ().get_hirid (), identifier,\n+\t\t\t\t fields);\n   }\n \n   void visit (HIR::ReturnExpr &expr)"}, {"sha": "8b9a77c4ae7966787bdd583728debc0e57acaf29", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -89,7 +89,25 @@ class TypeCheckType : public TypeCheckBase\n \treturn;\n       }\n \n-    gcc_unreachable ();\n+    size_t index = 0;\n+    std::string identifier = \"(\";\n+    std::vector<TyTy::StructFieldType *> fields;\n+    for (auto &elem : tuple.get_elems ())\n+      {\n+\tauto field_ty = TypeCheckType::Resolve (elem.get ());\n+\tidentifier += field_ty->as_string ();\n+\tif ((index + 1) < tuple.get_elems ().size ())\n+\t  identifier += \",\";\n+\n+\tauto field_tyty\n+\t  = new TyTy::StructFieldType (elem->get_mappings ().get_hirid (),\n+\t\t\t\t       std::to_string (index), field_ty);\n+\tfields.push_back (field_tyty);\n+\tindex++;\n+      }\n+    identifier += \")\";\n+    translated = new TyTy::ADTType (tuple.get_mappings ().get_hirid (),\n+\t\t\t\t    identifier, fields);\n   }\n \n   void visit (HIR::TypePath &path)"}, {"sha": "535300453abb5e18f828f3b194c31a2dc9ef933d", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -198,6 +198,16 @@ class StructFieldTypeRules : protected BaseRules\n     return resolved;\n   }\n \n+  void visit (StructFieldType &type)\n+  {\n+    TyBase *ty = base->get_field_type ()->combine (type.get_field_type ());\n+    if (ty == nullptr)\n+      return;\n+\n+    resolved = new TyTy::StructFieldType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t\t\t  type.get_name (), ty);\n+  }\n+\n private:\n   StructFieldType *base;\n };\n@@ -387,6 +397,55 @@ class FloatRules : protected BaseRules\n   FloatType *base;\n };\n \n+class ADTRules : protected BaseRules\n+{\n+public:\n+  ADTRules (ADTType *base) : BaseRules (base), base (base) {}\n+\n+  TyBase *combine (TyBase *other)\n+  {\n+    other->accept_vis (*this);\n+    return resolved;\n+  }\n+\n+  void visit (ADTType &type)\n+  {\n+    if (base->num_fields () != type.num_fields ())\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    if (base->get_name ().compare (type.get_name ()) != 0)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    std::vector<TyTy::StructFieldType *> fields;\n+    for (size_t i = 0; i < type.num_fields (); ++i)\n+      {\n+\tTyTy::StructFieldType *base_field = base->get_field (i);\n+\tTyTy::StructFieldType *other_field = type.get_field (i);\n+\n+\tTyBase *combined = base_field->combine (other_field);\n+\tif (combined == nullptr)\n+\t  {\n+\t    BaseRules::visit (type);\n+\t    return;\n+\t  }\n+\n+\tfields.push_back ((TyTy::StructFieldType *) combined);\n+      }\n+\n+    resolved = new TyTy::ADTType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t\t  type.get_name (), fields);\n+  }\n+\n+private:\n+  ADTType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "e007c1f7bad2e83b50cbfca00bba912a08ee9376", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -146,7 +146,8 @@ ADTType::as_string () const\n TyBase *\n ADTType::combine (TyBase *other)\n {\n-  return nullptr;\n+  ADTRules r (this);\n+  return r.combine (other);\n }\n \n TyBase *"}, {"sha": "1e529bd78244621674bbbfad099ae6e5b8463970", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -206,6 +206,9 @@ class ADTType : public TyBase\n \n   TyBase *clone () final override;\n \n+  std::vector<StructFieldType *> &get_fields () { return fields; }\n+  const std::vector<StructFieldType *> &get_fields () const { return fields; }\n+\n private:\n   std::string identifier;\n   std::vector<StructFieldType *> fields;"}, {"sha": "8b8960170f9ef9f4d013547ffc37d4abec367f39", "filename": "gcc/testsuite/rust.test/compilable/tuple1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple1.rs?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a: (i32, bool) = (123, true);\n+    let b;\n+    b = (456, 5f32);\n+}"}, {"sha": "51333d8bcf209b9db994822caaa99950b633f346", "filename": "gcc/testsuite/rust.test/compilable/tuple2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple2.rs?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a = 123;\n+    let b = (a,);\n+}"}, {"sha": "d551365200361160659f0688cbd9781381451a49", "filename": "gcc/testsuite/rust.test/fail_compilation/tuple1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Ftuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df5d4a95ec728ade9230bec945d5d3661f87d/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Ftuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Ftuple1.rs?ref=b06df5d4a95ec728ade9230bec945d5d3661f87d", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a: (i32, bool) = (123, 123);\n+    let b;\n+    b = (456, 5f32);\n+}"}]}