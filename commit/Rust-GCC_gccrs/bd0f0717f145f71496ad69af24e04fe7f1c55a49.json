{"sha": "bd0f0717f145f71496ad69af24e04fe7f1c55a49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwZjA3MTdmMTQ1ZjcxNDk2YWQ2OWFmMjRlMDRmZTdmMWM1NWE0OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-14T11:22:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-14T11:22:12Z"}, "message": "ggc-page.c (alloc_annon): Call perror and correctly call exit.\n\n\t* ggc-page.c (alloc_annon): Call perror and correctly call exit.\n\t(alloc_page, ggc_alloc): Add casts to remove warnings.\n\nFrom-SVN: r39008", "tree": {"sha": "bbddce40208813a90120061eb72c001f16ace4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbddce40208813a90120061eb72c001f16ace4eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd0f0717f145f71496ad69af24e04fe7f1c55a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0f0717f145f71496ad69af24e04fe7f1c55a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0f0717f145f71496ad69af24e04fe7f1c55a49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0f0717f145f71496ad69af24e04fe7f1c55a49/comments", "author": null, "committer": null, "parents": [{"sha": "aa6683f7f16af36263b28faf4cfc947cf4304c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6683f7f16af36263b28faf4cfc947cf4304c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6683f7f16af36263b28faf4cfc947cf4304c97"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "b1091ce0441b56009059fce399e9939b186f2c85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0f0717f145f71496ad69af24e04fe7f1c55a49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0f0717f145f71496ad69af24e04fe7f1c55a49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd0f0717f145f71496ad69af24e04fe7f1c55a49", "patch": "@@ -1,3 +1,8 @@\n+Sun Jan 14 06:20:49 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* ggc-page.c (alloc_annon): Call perror and correctly call exit.\n+\t(alloc_page, ggc_alloc): Add casts to remove warnings.\n+\n 2001-01-14  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* combine.c (simplify_comparison): Don't change `code' when"}, {"sha": "4738ed248dd029effeddf78d8ce2df8afafbebd9", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0f0717f145f71496ad69af24e04fe7f1c55a49/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0f0717f145f71496ad69af24e04fe7f1c55a49/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=bd0f0717f145f71496ad69af24e04fe7f1c55a49", "patch": "@@ -355,7 +355,6 @@ static struct globals\n    free list.  This cannot be larger than HOST_BITS_PER_INT for the\n    in_use bitmask for page_group.  */\n #define GGC_QUIRE_SIZE 16\n-\n \f\n static int ggc_allocated_p PARAMS ((const void *));\n static page_entry *lookup_page_table_entry PARAMS ((const void *));\n@@ -519,8 +518,8 @@ alloc_anon (pref, size)\n \n   if (page == (char *) MAP_FAILED)\n     {\n-      fputs (\"Virtual memory exhausted!\\n\", stderr);\n-      exit(1);\n+      perror (\"Virtual memory exhausted\");\n+      exit (FATAL_EXIT_CODE);\n     }\n \n   /* Remember that we allocated this memory.  */\n@@ -587,7 +586,7 @@ alloc_page (order)\n   page = NULL;\n \n   /* Check the list of free pages for one we can use.  */\n-  for (pp = &G.free_pages, p = *pp; p ; pp = &p->next, p = *pp)\n+  for (pp = &G.free_pages, p = *pp; p; pp = &p->next, p = *pp)\n     if (p->bytes == entry_size)\n       break;\n \n@@ -596,9 +595,11 @@ alloc_page (order)\n       /* Recycle the allocated memory from this page ... */\n       *pp = p->next;\n       page = p->page;\n+\n #ifdef USING_MALLOC_PAGE_GROUPS\n       group = p->group;\n #endif\n+\n       /* ... and, if possible, the page entry itself.  */\n       if (p->order == order)\n \t{\n@@ -618,6 +619,7 @@ alloc_page (order)\n       int i;\n \n       page = alloc_anon (NULL, G.pagesize * GGC_QUIRE_SIZE);\n+\n       /* This loop counts down so that the chain will be in ascending\n \t memory order.  */\n       for (i = GGC_QUIRE_SIZE - 1; i >= 1; i--)\n@@ -629,6 +631,7 @@ alloc_page (order)\n \t  e->next = f;\n \t  f = e;\n \t}\n+\n       G.free_pages = f;\n     }\n   else\n@@ -730,8 +733,9 @@ alloc_page (order)\n \n   if (GGC_DEBUG_LEVEL >= 2)\n     fprintf (G.debug_file, \n-\t     \"Allocating page at %p, object size=%d, data %p-%p\\n\",\n-\t     (PTR) entry, OBJECT_SIZE (order), page, page + entry_size - 1);\n+\t     \"Allocating page at %p, object size=%ld, data %p-%p\\n\",\n+\t     (PTR) entry, (long) OBJECT_SIZE (order), page,\n+\t     page + entry_size - 1);\n \n   return entry;\n }\n@@ -951,8 +955,8 @@ ggc_alloc (size)\n \n   if (GGC_DEBUG_LEVEL >= 3)\n     fprintf (G.debug_file, \n-\t     \"Allocating object, requested size=%d, actual=%d at %p on %p\\n\",\n-\t     (int) size, OBJECT_SIZE (order), result, (PTR) entry);\n+\t     \"Allocating object, requested size=%ld, actual=%ld at %p on %p\\n\",\n+\t     (long) size, (long) OBJECT_SIZE (order), result, (PTR) entry);\n \n   return result;\n }"}]}