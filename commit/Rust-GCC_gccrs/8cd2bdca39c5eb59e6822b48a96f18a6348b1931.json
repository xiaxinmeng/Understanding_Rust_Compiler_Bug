{"sha": "8cd2bdca39c5eb59e6822b48a96f18a6348b1931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkMmJkY2EzOWM1ZWI1OWU2ODIyYjQ4YTk2ZjE4YTYzNDhiMTkzMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-24T20:56:47Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-24T20:56:47Z"}, "message": "2004-01-24  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/jar/Connection.java\n\t(hdrHash): Removed.\n\t(hdrVec): Removed.\n\t(gotHeaders): Removed.\n\t(getHeaderField): Removed.\n\t(getHeaderFields): Removed.\n\t(getHeaderFieldKey): Removed.\n\t(getKey): Removed.\n\t(getField): Removed.\n\t(getHeaders): Removed.\n\nFrom-SVN: r76523", "tree": {"sha": "d2da75cab5e09e82542776b6f1294ebdcb7b7ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2da75cab5e09e82542776b6f1294ebdcb7b7ea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd2bdca39c5eb59e6822b48a96f18a6348b1931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd2bdca39c5eb59e6822b48a96f18a6348b1931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd2bdca39c5eb59e6822b48a96f18a6348b1931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd2bdca39c5eb59e6822b48a96f18a6348b1931/comments", "author": null, "committer": null, "parents": [{"sha": "1f44254ccf5dca2edde504b4b1aa27715cf30717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f44254ccf5dca2edde504b4b1aa27715cf30717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f44254ccf5dca2edde504b4b1aa27715cf30717"}], "stats": {"total": 146, "additions": 16, "deletions": 130}, "files": [{"sha": "204df5aa8f28794d26d10dbcca5a5fd3849a203a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd2bdca39c5eb59e6822b48a96f18a6348b1931/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd2bdca39c5eb59e6822b48a96f18a6348b1931/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8cd2bdca39c5eb59e6822b48a96f18a6348b1931", "patch": "@@ -1,3 +1,16 @@\n+2004-01-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/jar/Connection.java\n+\t(hdrHash): Removed.\n+\t(hdrVec): Removed.\n+\t(gotHeaders): Removed.\n+\t(getHeaderField): Removed.\n+\t(getHeaderFields): Removed.\n+\t(getHeaderFieldKey): Removed.\n+\t(getKey): Removed.\n+\t(getField): Removed.\n+\t(getHeaders): Removed.\n+\n 2004-01-24  Michael Koch  <konqueror@gmx.de>\n \n \t* Makefile.am: Added library version to gtk peer lib."}, {"sha": "c14e3fd0776b61a2f78abad67ce3ab865030e35f", "filename": "libjava/gnu/java/net/protocol/jar/Connection.java", "status": "modified", "additions": 3, "deletions": 130, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd2bdca39c5eb59e6822b48a96f18a6348b1931/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd2bdca39c5eb59e6822b48a96f18a6348b1931/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java?ref=8cd2bdca39c5eb59e6822b48a96f18a6348b1931", "patch": "@@ -49,15 +49,13 @@\n import java.net.ProtocolException;\n import java.net.URL;\n import java.net.URLConnection;\n-import java.util.Map;\n-import java.util.Vector;\n import java.util.HashMap;\n import java.util.Hashtable;\n-import java.util.jar.JarFile;\n import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n import java.util.jar.JarInputStream;\n-import java.util.zip.ZipFile;\n import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n \n /**\n  * This subclass of java.net.JarURLConnection models a URLConnection via\n@@ -71,7 +69,7 @@ public final class Connection extends JarURLConnection\n   private JarFile jar_file;\n \n   /**\n-   * Cached JarURLConnection objects .\n+   * Cached JarURLConnection objects.\n    */\n   static HashMap connectionCache = new HashMap();\n \n@@ -220,129 +218,4 @@ public synchronized JarFile getJarFile() throws IOException\n \n     return jar_file;\n   }\n-\n-  // Steal and borrow from protocol/file/Connection.java\n-\n-  private Hashtable hdrHash = new Hashtable();\n-  private Vector hdrVec = new Vector();\n-  private boolean gotHeaders = false;\n-\n-  // Override default method in URLConnection.\n-  public String getHeaderField(String name)\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n-    return (String) hdrHash.get(name.toLowerCase());\n-  }\n-\n-  // Override default method in URLConnection.\n-  public Map getHeaderFields()\n-  {\n-    try\n-      {\n-        getHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-        return null;\n-      }\n-    return hdrHash;\n-  }\n-\n-  // Override default method in URLConnection.\n-  public String getHeaderField(int n)\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n-    if (n < hdrVec.size())\n-      return getField((String) hdrVec.elementAt(n));\n-\n-    return null;\n-  }\n-\n-  // Override default method in URLConnection.\n-  public String getHeaderFieldKey(int n)\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n-    if (n < hdrVec.size())\n-      return getKey((String) hdrVec.elementAt(n));\n-\n-    return null;\n-  }\n-\n-  private String getKey(String str)\n-  {\n-    if (str == null)\n-      return null;\n-    int index = str.indexOf(':');\n-    if (index >= 0)\n-      return str.substring(0, index);\n-    else\n-      return null;\n-  }\n-\n-  private String getField(String str)\n-  {\n-    if (str == null)\n-      return null;\n-    int index = str.indexOf(':');\n-    if (index >= 0)\n-      return str.substring(index + 1).trim();\n-    else\n-      return str;\n-  }\n-\n-  private void getHeaders() throws IOException\n-  {\n-    if (gotHeaders)\n-      return;\n-    gotHeaders = true;\n-\n-    connect();\n-\n-    // Yes, it is overkill to use the hash table and vector here since\n-    // we're only putting one header in the file, but in case we need\n-    // to add others later and for consistency, we'll implement it this way.\n-\n-    // Add the only header we know about right now:  Content-length.\n-    long len = -1;\n-\n-    if (getEntryName() == null)\n-      if (jarFileURLConnection != null)\n-\tlen = jarFileURLConnection.getContentLength ();\n-    else\n-      {\n-\tJarEntry entry = getJarEntry();\n-\tif (entry != null)\n-\t  len = entry.getSize ();\n-      }\n-\n-    String line = \"Content-length: \" + len;\n-    hdrVec.addElement(line);\n-\n-    // The key will never be null in this scenario since we build up the\n-    // headers ourselves.  If we ever rely on getting a header from somewhere\n-    // else, then we may have to check if the result of getKey() is null.\n-    String key = getKey(line);\n-    hdrHash.put(key.toLowerCase(), Long.toString(len));\n-  }\n }"}]}