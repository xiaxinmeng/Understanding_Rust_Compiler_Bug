{"sha": "e1521b170b44be5cd5d36a98b6b760457b68f566", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1MjFiMTcwYjQ0YmU1Y2Q1ZDM2YTk4YjZiNzYwNDU3YjY4ZjU2Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-07T07:28:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-07T07:28:31Z"}, "message": "fold-const: Fix up fold_read_from_vector [PR100887]\n\nThe callers of fold_read_from_vector expect that the index they pass is\nan index of an element in the vector and the function does that most of the\ntime.  But we allow CONSTRUCTORs with VECTOR_TYPE to have VECTOR_TYPE\nelements and in that case every CONSTRUCTOR element represents not just one\nindex (with the exception of V1 vectors), but multiple.\nSo returning zero vector if i >= CONSTRUCTOR_NELTS or returning some\nCONSTRUCTOR_ELT's value might not be what the callers expect.\n\nFixed by punting if the first element has vector type.\nBootstrapped/regtested on x86_64-linux and i686-linux, ok for trunk?\n\nIn theory we could instead recurse (and assert that for CONSTRUCTORs of\nvector elements we have always all elements specified like tree-cfg.c\nverifies?) after adjusting the index appropriately.\n\n2021-06-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100887\n\t* fold-const.c (fold_read_from_vector): Return NULL if trying to\n\tread from a CONSTRUCTOR with vector type elements.\n\n\t* gcc.dg/pr100887.c: New test.", "tree": {"sha": "bb1499279036f76a3606b9721109903151cb9e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb1499279036f76a3606b9721109903151cb9e79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1521b170b44be5cd5d36a98b6b760457b68f566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1521b170b44be5cd5d36a98b6b760457b68f566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1521b170b44be5cd5d36a98b6b760457b68f566", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1521b170b44be5cd5d36a98b6b760457b68f566/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d66a703c8ba86f3ca04cc10c3071696e6d014de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66a703c8ba86f3ca04cc10c3071696e6d014de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66a703c8ba86f3ca04cc10c3071696e6d014de6"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "6e5835aefaf5272d8feb83176f5cf9178baa5848", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1521b170b44be5cd5d36a98b6b760457b68f566/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1521b170b44be5cd5d36a98b6b760457b68f566/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e1521b170b44be5cd5d36a98b6b760457b68f566", "patch": "@@ -15471,6 +15471,9 @@ fold_read_from_vector (tree arg, poly_uint64 idx)\n \treturn VECTOR_CST_ELT (arg, i);\n       else if (TREE_CODE (arg) == CONSTRUCTOR)\n \t{\n+\t  if (CONSTRUCTOR_NELTS (arg)\n+\t      && VECTOR_TYPE_P (TREE_TYPE (CONSTRUCTOR_ELT (arg, 0)->value)))\n+\t    return NULL_TREE;\n \t  if (i >= CONSTRUCTOR_NELTS (arg))\n \t    return build_zero_cst (TREE_TYPE (TREE_TYPE (arg)));\n \t  return CONSTRUCTOR_ELT (arg, i)->value;"}, {"sha": "de6b3effe13a5d98f9dbaf9603186e54ec9afb85", "filename": "gcc/testsuite/gcc.dg/pr100887.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1521b170b44be5cd5d36a98b6b760457b68f566/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100887.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1521b170b44be5cd5d36a98b6b760457b68f566/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100887.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100887.c?ref=e1521b170b44be5cd5d36a98b6b760457b68f566", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/100887 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-additional-options \"-mavx512f\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+typedef unsigned long long __attribute__((__vector_size__ (2 * sizeof (long long)))) U;\n+typedef unsigned long long __attribute__((__vector_size__ (4 * sizeof (long long)))) V;\n+typedef unsigned long long __attribute__((__vector_size__ (8 * sizeof (long long)))) W;\n+\n+U\n+foo (V v)\n+{\n+  return __builtin_shufflevector ((W){}, v, 0, 8);\n+}"}]}