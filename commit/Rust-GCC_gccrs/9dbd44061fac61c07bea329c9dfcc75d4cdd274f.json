{"sha": "9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRiZDQ0MDYxZmFjNjFjMDdiZWEzMjljOWRmY2M3NWQ0Y2RkMjc0Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-11-28T23:35:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-11-28T23:35:37Z"}, "message": "re PR c++/38233 ('map' value type + new uninitted const member warnings causes error)\n\n        PR c++/38233\n        * init.c (perform_member_init): Fix value-initialization.\n        (build_value_init_1): Add assert to catch cases that will break\n        in the gimplifier.\n        (build_default_init): Remove.\n        * cp-tree.h: Remove its prototype.\n        * pt.c (tsubst_expr) [DECL_EXPR]: Use build_value_init for\n        value-initialization.\n\nFrom-SVN: r142265", "tree": {"sha": "af46d0e75bd9fe9b716cf4cc892d56f23817d241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af46d0e75bd9fe9b716cf4cc892d56f23817d241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68d3564a41166f3378811ab5bfc5727248c1dd3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d3564a41166f3378811ab5bfc5727248c1dd3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d3564a41166f3378811ab5bfc5727248c1dd3a"}], "stats": {"total": 192, "additions": 124, "deletions": 68}, "files": [{"sha": "1c53d89ffc8e2fe61f0c9dd2618d8af0dd87d4a3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -1,5 +1,14 @@\n 2008-11-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/38233\n+\t* init.c (perform_member_init): Fix value-initialization.\n+\t(build_value_init_1): Add assert to catch cases that will break\n+\tin the gimplifier.\n+\t(build_default_init): Remove.\n+\t* cp-tree.h: Remove its prototype.\n+\t* pt.c (tsubst_expr) [DECL_EXPR]: Use build_value_init for\n+\tvalue-initialization.\n+\n \tPR c++/38278\n \t* parser.c (cp_parser_class_name): Only call \n \tmaybe_note_name_used_in_class if we actually found a class name."}, {"sha": "a03fe9bfae587634e6488a5b5758b7c992f4be93", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -4468,7 +4468,6 @@ extern tree build_new\t\t\t\t(tree, tree, tree, tree, int,\n                                                  tsubst_flags_t);\n extern tree build_vec_init\t\t\t(tree, tree, tree, bool, int,\n                                                  tsubst_flags_t);\n-extern tree build_default_init                  (tree, tree);\n extern tree build_delete\t\t\t(tree, tree,\n \t\t\t\t\t\t special_function_kind,\n \t\t\t\t\t\t int, int);"}, {"sha": "39d87e3669f0dcd4870782925c8e53e5a1740355", "filename": "gcc/cp/init.c", "status": "modified", "additions": 26, "deletions": 65, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -266,52 +266,6 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n   return init;\n }\n \n-/* Build an expression for the default-initialization of an object of\n-   the indicated TYPE.  If NELTS is non-NULL, and TYPE is an\n-   ARRAY_TYPE, NELTS is the number of elements in the array.  If\n-   initialization of TYPE requires calling constructors, this function\n-   returns NULL_TREE; the caller is responsible for arranging for the\n-   constructors to be called.  */\n-\n-tree\n-build_default_init (tree type, tree nelts)\n-{\n-  /* [dcl.init]:\n-\n-    To default-initialize an object of type T means:\n-\n-    --if T is a non-POD class type (clause _class_), the default construc-\n-      tor  for  T is called (and the initialization is ill-formed if T has\n-      no accessible default constructor);\n-\n-    --if T is an array type, each element is default-initialized;\n-\n-    --otherwise, the storage for the object is zero-initialized.\n-\n-    A program that calls for default-initialization of an entity of refer-\n-    ence type is ill-formed.  */\n-\n-  /* If TYPE_NEEDS_CONSTRUCTING is true, the caller is responsible for\n-     performing the initialization.  This is confusing in that some\n-     non-PODs do not have TYPE_NEEDS_CONSTRUCTING set.  (For example,\n-     a class with a pointer-to-data member as a non-static data member\n-     does not have TYPE_NEEDS_CONSTRUCTING set.)  Therefore, we end up\n-     passing non-PODs to build_zero_init below, which is contrary to\n-     the semantics quoted above from [dcl.init].\n-\n-     It happens, however, that the behavior of the constructor the\n-     standard says we should have generated would be precisely the\n-     same as that obtained by calling build_zero_init below, so things\n-     work out OK.  */\n-  if (TYPE_NEEDS_CONSTRUCTING (type)\n-      || (nelts && TREE_CODE (nelts) != INTEGER_CST))\n-    return NULL_TREE;\n-\n-  /* At this point, TYPE is either a POD class type, an array of POD\n-     classes, or something even more innocuous.  */\n-  return build_zero_init (type, nelts, /*static_storage_p=*/false);\n-}\n-\n /* Return a suitable initializer for value-initializing an object of type\n    TYPE, as described in [dcl.init].  If HAVE_CTOR is true, the initializer\n    for an enclosing object is already calling the constructor for this\n@@ -442,6 +396,10 @@ build_value_init_1 (tree type, bool have_ctor)\n \t\t\t\tmax_index);\n \n \t  ce->value = build_value_init_1 (TREE_TYPE (type), have_ctor);\n+\n+\t  /* The gimplifier can't deal with a RANGE_EXPR of TARGET_EXPRs.  */\n+\t  gcc_assert (TREE_CODE (ce->value) != TARGET_EXPR\n+\t\t      && TREE_CODE (ce->value) != AGGR_INIT_EXPR);\n \t}\n \n       /* Build a constructor to contain the initializations.  */\n@@ -469,19 +427,13 @@ perform_member_init (tree member, tree init)\n {\n   tree decl;\n   tree type = TREE_TYPE (member);\n-  bool is_explicit;\n-\n-  is_explicit = (init != NULL_TREE);\n \n   /* Effective C++ rule 12 requires that all data members be\n      initialized.  */\n-  if (warn_ecpp && !is_explicit && TREE_CODE (type) != ARRAY_TYPE)\n+  if (warn_ecpp && init == NULL_TREE && TREE_CODE (type) != ARRAY_TYPE)\n     warning (OPT_Weffc__, \"%J%qD should be initialized in the member initialization \"\n \t     \"list\", current_function_decl, member);\n \n-  if (init == void_type_node)\n-    init = NULL_TREE;\n-\n   /* Get an lvalue for the data member.  */\n   decl = build_class_member_access_expr (current_class_ref, member,\n \t\t\t\t\t /*access_path=*/NULL_TREE,\n@@ -490,10 +442,28 @@ perform_member_init (tree member, tree init)\n   if (decl == error_mark_node)\n     return;\n \n+  if (init == void_type_node)\n+    {\n+      /* mem() means value-initialization.  */\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n+\tinit = build_vec_init (decl, NULL_TREE, NULL_TREE,\n+\t\t\t       /*explicit_value_init_p=*/true,\n+\t\t\t       /* from_array=*/0,\n+\t\t\t       tf_warning_or_error);\n+      else\n+\t{\n+\t  if (TREE_CODE (type) == REFERENCE_TYPE)\n+\t    warning (0, \"%Jdefault-initialization of %q#D, \"\n+\t\t     \"which has reference type\",\n+\t\t     current_function_decl, member);\n+\t  init = build2 (INIT_EXPR, type, decl, build_value_init (type));\n+\t}\n+      finish_expr_stmt (init);\n+    }\n   /* Deal with this here, as we will get confused if we try to call the\n      assignment op for an anonymous union.  This can happen in a\n      synthesized copy constructor.  */\n-  if (ANON_AGGR_TYPE_P (type))\n+  else if (ANON_AGGR_TYPE_P (type))\n     {\n       if (init)\n \t{\n@@ -503,9 +473,8 @@ perform_member_init (tree member, tree init)\n     }\n   else if (TYPE_NEEDS_CONSTRUCTING (type))\n     {\n-      if (is_explicit\n+      if (init != NULL_TREE\n \t  && TREE_CODE (type) == ARRAY_TYPE\n-\t  && init != NULL_TREE\n \t  && TREE_CHAIN (init) == NULL_TREE\n \t  && TREE_CODE (TREE_TYPE (TREE_VALUE (init))) == ARRAY_TYPE)\n \t{\n@@ -532,16 +501,8 @@ perform_member_init (tree member, tree init)\n     {\n       if (init == NULL_TREE)\n \t{\n-\t  if (is_explicit)\n-\t    {\n-\t      init = build_default_init (type, /*nelts=*/NULL_TREE);\n-\t      if (TREE_CODE (type) == REFERENCE_TYPE)\n-\t\twarning (0, \"%Jdefault-initialization of %q#D, \"\n-\t\t\t \"which has reference type\",\n-\t\t\t current_function_decl, member);\n-\t    }\n \t  /* member traversal: note it leaves init NULL */\n-\t  else if (TREE_CODE (type) == REFERENCE_TYPE)\n+\t  if (TREE_CODE (type) == REFERENCE_TYPE)\n \t    permerror (input_location, \"%Juninitialized reference member %qD\",\n \t\t       current_function_decl, member);\n \t  else if (CP_TYPE_CONST_P (type))"}, {"sha": "241cea6423ae525f616faed876a6e15d8947f7aa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -10560,8 +10560,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t\t     pack expansion where the parameter packs\n \t\t\t     used in that expansion were of length\n \t\t\t     zero.  */\n-\t\t\t  init = build_default_init (TREE_TYPE (decl),\n-                                                     NULL_TREE);\n+\t\t\t  init = build_value_init (TREE_TYPE (decl));\n \t\t\telse\n \t\t\t  init = t;\n \t\t      }"}, {"sha": "7f8786bb3ea8ea3de0425bf8b4592f4de1b5aba3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -1,5 +1,9 @@\n 2008-11-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/38233\n+\t* g++.dg/init/array25.C: New test.\n+\t* g++.dg/init/value4.C: New test.\n+\n \tPR c++/38278\n \t* g++.dg/lookup/name-clash8.C: New test.\n "}, {"sha": "1ab2725d7cf5985c67bbadf877d5e2c3731b15d0", "filename": "gcc/testsuite/g++.dg/init/array25.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray25.C?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -0,0 +1,49 @@\n+// related to PR c++/38233\n+// test for value-init of a member array\n+// { dg-do run }\n+\n+struct elt \n+{\n+  virtual void f();\n+  char c;\n+};\n+\n+void elt::f() { }\n+\n+struct foo {\n+  elt buffer[500];\n+  foo() ;\n+  bool check () const;\n+};\n+\n+foo::foo ()\n+  : buffer()\n+{}\n+\n+bool foo::check () const\n+{\n+  for (unsigned ix = sizeof (buffer)/ sizeof (buffer[0]); ix--;)\n+    if (buffer[ix].c)\n+      return false;\n+  return true;\n+}\n+\n+inline void *operator new (__SIZE_TYPE__ size, void *p)\n+{\n+  return p;\n+}\n+\n+char heap[sizeof(elt[500])];\n+\n+int main ()\n+{\n+  for (unsigned ix = sizeof (heap); ix--;)\n+    heap[ix] = ix;\n+\n+  foo *f = new (heap) foo ();\n+  if (!f->check ())\n+    return 3;\n+  return 0;\n+}\n+\n+  "}, {"sha": "fa7a02cc7c60c6cd00cc52939bdeb5e197948a5c", "filename": "gcc/testsuite/g++.dg/init/value4.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbd44061fac61c07bea329c9dfcc75d4cdd274f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue4.C?ref=9dbd44061fac61c07bea329c9dfcc75d4cdd274f", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/38233\n+\n+template<class _T1, class _T2>\n+  struct pair\n+  {\n+    _T1 first;\n+    _T2 second;\n+\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 265.  std::pair::pair() effects overly restrictive\n+    /** The default constructor creates @c first and @c second using their\n+     *  respective default constructors.  */\n+    pair()\n+    : first(), second() { }\n+};\n+\n+class a {\n+ public:\n+  a();\n+};\n+\n+class b {\n+ public:\n+  // implicit default ctor\n+  bool operator<(const b& rhs) const;\n+\n+ private:\n+  a a_val;\n+};\n+\n+typedef pair<const b, int> my_pair;\n+\n+void func() {\n+  my_pair x;\n+}"}]}