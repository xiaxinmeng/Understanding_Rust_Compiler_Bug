{"sha": "8b5e2ce419f45844ad69a224d60b16d97d31b481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZTJjZTQxOWY0NTg0NGFkNjlhMjI0ZDYwYjE2ZDk3ZDMxYjQ4MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-05-08T05:58:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-05-08T05:58:44Z"}, "message": "init.c (build_new_1): Don't reuse a TARGET_EXPR in an expression.\n\n        * init.c (build_new_1): Don't reuse a TARGET_EXPR in an\n        expression.  Undo some of the recent reorg.\n\nFrom-SVN: r66594", "tree": {"sha": "805f267baf2a114adad0487665ee32928abbfa44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/805f267baf2a114adad0487665ee32928abbfa44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5e2ce419f45844ad69a224d60b16d97d31b481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5e2ce419f45844ad69a224d60b16d97d31b481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5e2ce419f45844ad69a224d60b16d97d31b481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5e2ce419f45844ad69a224d60b16d97d31b481/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "044075ac2923a8074a90f8e0dfce0f3d67f8b798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044075ac2923a8074a90f8e0dfce0f3d67f8b798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044075ac2923a8074a90f8e0dfce0f3d67f8b798"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "b826fff3202f0b87d42528d86876ecea7196b0fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e2ce419f45844ad69a224d60b16d97d31b481/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e2ce419f45844ad69a224d60b16d97d31b481/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b5e2ce419f45844ad69a224d60b16d97d31b481", "patch": "@@ -1,3 +1,8 @@\n+2003-05-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c (build_new_1): Don't reuse a TARGET_EXPR in an\n+\texpression.  Undo some of the recent reorg.\n+\n 2003-05-07  Richard Henderson  <rth@redhat.com>\n \n         PR c++/10570"}, {"sha": "f26fde4a7f5ba0e573f5f715cd09f3af3596afea", "filename": "gcc/cp/init.c", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e2ce419f45844ad69a224d60b16d97d31b481/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e2ce419f45844ad69a224d60b16d97d31b481/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8b5e2ce419f45844ad69a224d60b16d97d31b481", "patch": "@@ -2172,6 +2172,7 @@ build_new_1 (exp)\n      a VAR_DECL and is therefore reusable.  */\n   tree alloc_node;\n   tree alloc_fn;\n+  tree cookie_expr, init_expr;\n   int has_array = 0;\n   enum tree_code code;\n   int nothrow, check_new;\n@@ -2357,13 +2358,11 @@ build_new_1 (exp)\n      can use it more than once.  */\n   full_pointer_type = build_pointer_type (full_type);\n   alloc_expr = get_target_expr (build_nop (full_pointer_type, alloc_call));\n-  alloc_node = TREE_OPERAND (alloc_expr, 0);\n-  rval = NULL_TREE;\n+  alloc_node = TARGET_EXPR_SLOT (alloc_expr);\n \n   if (cookie_size)\n     {\n       tree cookie;\n-      tree cookie_expr;\n \n       /* Adjust so we're pointing to the start of the object.  */\n       data_addr = get_target_expr (build (PLUS_EXPR, full_pointer_type,\n@@ -2377,18 +2376,17 @@ build_new_1 (exp)\n       cookie = build_indirect_ref (cookie, NULL);\n \n       cookie_expr = build (MODIFY_EXPR, sizetype, cookie, nelts);\n-      TREE_SIDE_EFFECTS (cookie_expr) = 1;\n-      rval = build (COMPOUND_EXPR, void_type_node, data_addr, cookie_expr);\n-      data_addr = TREE_OPERAND (data_addr, 0);\n+      data_addr = TARGET_EXPR_SLOT (data_addr);\n     }\n   else\n-    data_addr = alloc_node;\n+    {\n+      cookie_expr = NULL_TREE;\n+      data_addr = alloc_node;\n+    }\n \n   /* Now initialize the allocated object.  */\n   if (is_initialized)\n     {\n-      tree init_expr;\n-\n       init_expr = build_indirect_ref (data_addr, NULL);\n \n       if (init == void_zero_node)\n@@ -2502,24 +2500,36 @@ build_new_1 (exp)\n \t\t\t\tend));\n \t    }\n \t}\n-\n-      if (rval)\n-\trval = build (COMPOUND_EXPR, TREE_TYPE (init_expr), rval, init_expr);\n-      else\n-\trval = init_expr;\n     }\n+  else\n+    init_expr = NULL_TREE;\n+\n+  /* Now build up the return value in reverse order.  */\n \n-  rval = build (COMPOUND_EXPR, TREE_TYPE (alloc_node), rval, data_addr);\n+  rval = data_addr;\n \n-  if (check_new)\n+  if (init_expr)\n+    rval = build (COMPOUND_EXPR, TREE_TYPE (rval), init_expr, rval);\n+  if (cookie_expr)\n+    rval = build (COMPOUND_EXPR, TREE_TYPE (rval), cookie_expr, rval);\n+\n+  if (rval == alloc_node)\n+    /* If we don't have an initializer or a cookie, strip the TARGET_EXPR\n+       and return the call (which doesn't need to be adjusted).  */\n+    rval = TARGET_EXPR_INITIAL (alloc_expr);\n+  else\n     {\n-      tree ifexp = cp_build_binary_op (NE_EXPR, alloc_node, integer_zero_node);\n-      rval = build_conditional_expr (ifexp, rval, alloc_node);\n-    }\n+      if (check_new)\n+\t{\n+\t  tree ifexp = cp_build_binary_op (NE_EXPR, alloc_node,\n+\t\t\t\t\t   integer_zero_node);\n+\t  rval = build_conditional_expr (ifexp, rval, alloc_node);\n+\t}\n \n-  /* Perform the allocation before anything else, so that ALLOC_NODE\n-     has been initialized before we start using it.  */\n-  rval = build (COMPOUND_EXPR, TREE_TYPE (rval), alloc_expr, rval);\n+      /* Perform the allocation before anything else, so that ALLOC_NODE\n+\t has been initialized before we start using it.  */\n+      rval = build (COMPOUND_EXPR, TREE_TYPE (rval), alloc_expr, rval);\n+    }\n \n   /* Convert to the final type.  */\n   return build_nop (pointer_type, rval);"}]}