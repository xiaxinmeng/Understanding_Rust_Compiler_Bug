{"sha": "d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "node_id": "C_kwDOANBUbNoAKGQzM2EyNTBmNzA4ZTg4YzZjYjQ0N2I2ZDBhMjAyNTkwZmJjMGI0YjY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T01:15:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T23:34:26Z"}, "message": "libstdc++: Add GDB printers for <chrono> types\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (StdChronoDurationPrinter)\n\t(StdChronoTimePointPrinter, StdChronoZonedTimePrinter)\n\t(StdChronoCalendarPrinter, StdChronoTimeZonePrinter)\n\t(StdChronoLeapSecondPrinter, StdChronoTzdbPrinter)\n\t(StdChronoTimeZoneRulePrinter): New printers.", "tree": {"sha": "1f31a36d0426ae100aff98cb330b3b014b4ab76a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f31a36d0426ae100aff98cb330b3b014b4ab76a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33a250f708e88c6cb447b6d0a202590fbc0b4b6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc61d45fa15fdd3b084d30998ecda164af33e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc61d45fa15fdd3b084d30998ecda164af33e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc61d45fa15fdd3b084d30998ecda164af33e95"}], "stats": {"total": 265, "additions": 261, "deletions": 4}, "files": [{"sha": "7e694f48f28d9a1b835fcf569e4600909a054ffe", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 261, "deletions": 4, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33a250f708e88c6cb447b6d0a202590fbc0b4b6/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33a250f708e88c6cb447b6d0a202590fbc0b4b6/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "patch": "@@ -19,6 +19,7 @@\n import itertools\n import re\n import sys, os, errno\n+from datetime import datetime, timezone\n \n ### Python 2 + Python 3 compatibility code\n \n@@ -1871,6 +1872,239 @@ def to_string(self):\n             size = self.val['_M_unpacked_size']\n         return \"%s with %d arguments\" % (typ, size)\n \n+def std_ratio_t_tuple(ratio_type):\n+    # TODO use reduced period i.e. duration::period\n+    period = self.val.type.template_argument(1)\n+    num = period.template_argument(0)\n+    den = period.template_argument(1)\n+    return (num, den)\n+\n+class StdChronoDurationPrinter:\n+    \"Print a std::chrono::duration\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def _ratio(self):\n+        # TODO use reduced period i.e. duration::period\n+        period = self.val.type.template_argument(1)\n+        num = period.template_argument(0)\n+        den = period.template_argument(1)\n+        return (num, den)\n+\n+    def _suffix(self):\n+        num, den = self._ratio()\n+        if num == 1:\n+            if den == 1:\n+                return 's'\n+            if den == 1000:\n+                return 'ms'\n+            if den == 1000000:\n+                return 'us'\n+            if den == 1000000000:\n+                return 'ns'\n+        elif den == 1:\n+            if num == 60:\n+                return 'min'\n+            if num == 3600:\n+                return 'h'\n+            if num == 86400:\n+                return 'd'\n+            return '[{}]s'.format(num)\n+        return \"[{}/{}]s\".format(num, den)\n+\n+    def to_string(self):\n+        return \"std::chrono::duration = { %d%s }\" % (self.val['__r'], self._suffix())\n+\n+\n+class StdChronoTimePointPrinter:\n+    \"Print a std::chrono::time_point\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def _clock(self):\n+        clock = self.val.type.template_argument(0)\n+        name = strip_versioned_namespace(clock.name)\n+        if name == 'std::chrono::_V2::system_clock' \\\n+                or name == 'std::chrono::system_clock':\n+            return ('std::chrono::sys_time', 0)\n+        # XXX need to remove leap seconds from utc, gps, and tai\n+        #if name == 'std::chrono::utc_clock':\n+        #    return ('std::chrono::utc_time', 0)\n+        #if name == 'std::chrono::gps_clock':\n+        #    return ('std::chrono::gps_clock time_point', 315964809)\n+        #if name == 'std::chrono::tai_clock':\n+        #    return ('std::chrono::tai_clock time_point', -378691210)\n+        if name == 'std::filesystem::__file_clock':\n+            return ('std::chrono::file_time', 6437664000)\n+        if name == 'std::chrono::local_t':\n+            return ('std::chrono::local_time', 0)\n+        return ('{} time_point'.format(name), None)\n+\n+    def to_string(self):\n+        clock, offset = self._clock()\n+        d = self.val['__d']\n+        r = d['__r']\n+        printer = StdChronoDurationPrinter(d.type.name, d)\n+        suffix = printer._suffix()\n+        time = ''\n+        if offset is not None:\n+            num, den = printer._ratio()\n+            secs = (r * num / den) + offset\n+            try:\n+                dt = datetime.fromtimestamp(secs, timezone.utc)\n+                time = ' [{:%Y-%m-%d %H:%M:%S}]'.format(dt)\n+            except:\n+                pass\n+        return '%s = {%d%s%s}' % (clock, r, suffix, time)\n+\n+class StdChronoZonedTimePrinter:\n+    \"Print a std::chrono::zoned_time\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def to_string(self):\n+        zone = self.val['_M_zone'].dereference()\n+        time = self.val['_M_tp']\n+        return 'std::chrono::zoned_time = {{{} {}}}'.format(zone, time)\n+\n+\n+months = [None, 'January', 'February', 'March', 'April', 'May', 'June',\n+          'July', 'August', 'September', 'October', 'November', 'December']\n+\n+weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n+            'Saturday', 'Sunday']\n+\n+class StdChronoCalendarPrinter:\n+    \"Print a std::chrono::day, std::chrono::month, std::chrono::year etc.\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def to_string(self):\n+        val = self.val\n+        typ = self.typename\n+        if 'month' in typ and typ != 'std::chrono::year_month_day_last':\n+            m = val['_M_m']\n+        if typ.startswith('std::chrono::year'):\n+            y = val['_M_y']\n+\n+        if typ == 'std::chrono::day':\n+            return '{}'.format(int(val['_M_d']))\n+        if typ == 'std::chrono::month':\n+            return months[m]\n+        if typ == 'std::chrono::year':\n+            return '{}y'.format(y)\n+        if typ == 'std::chrono::weekday':\n+            return '{}'.format(weekdays[val['_M_wd']])\n+        if typ == 'std::chrono::weekday_indexed':\n+            return '{}[{}]'.format(val['_M_wd'], int(val['_M_index']))\n+        if typ == 'std::chrono::weekday_last':\n+            return '{}[last]'.format(val['_M_wd'])\n+        if typ == 'std::chrono::month_day':\n+            return '{}/{}'.format(m, val['_M_d'])\n+        if typ == 'std::chrono::month_day_last':\n+            return '{}/last'.format(m)\n+        if typ == 'std::chrono::month_weekday':\n+            return '{}/{}'.format(m, val['_M_wdi'])\n+        if typ == 'std::chrono::month_weekday_last':\n+            return '{}/{}'.format(m, val['_M_wdl'])\n+        if typ == 'std::chrono::year_month':\n+            return '{}/{}'.format(y, m)\n+        if typ == 'std::chrono::year_month_day':\n+            return '{}/{}/{}'.format(y, m, val['_M_d'])\n+        if typ == 'std::chrono::year_month_day_last':\n+            return '{}/{}'.format(y, val['_M_mdl'])\n+        if typ == 'std::chrono::year_month_weekday':\n+            return '{}/{}'.format(y, m, val['_M_wdi'])\n+        if typ == 'std::chrono::year_month_weekday_last':\n+            return '{}/{}'.format(y, m, val['_M_wdl'])\n+        if typ.startswith('std::chrono::hh_mm_ss'):\n+            fract = ''\n+            if val['fractional_width'] != 0:\n+                fract = '.{:0{}d}'.format(int(val['_M_ss']['__r']),\n+                                          int(val['fractional_width']))\n+            h = int(val['_M_h']['__r'])\n+            m = int(val['_M_m']['__r'])\n+            s = int(val['_M_s']['__r'])\n+            if val['_M_is_neg']:\n+                h = -h\n+            return '{:02}:{:02}:{:02}{}'.format(h, m, s, fract)\n+\n+class StdChronoTimeZonePrinter:\n+    \"Print a chrono::time_zone or chrono::time_zone_link\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def to_string(self):\n+        str = '%s %s' % (self.typename, self.val['_M_name'])\n+        if self.typename.endswith(\"_link\"):\n+            str += ' -> %s' % (self.val['_M_target'])\n+        return str\n+\n+class StdChronoLeapSecondPrinter:\n+    \"Print a chrono::leap_second\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def to_string(self):\n+        date = self.val['_M_s']['__r']\n+        neg = '+-'[date < 0]\n+        return '%s %d (%c)' % (self.typename, abs(date), neg)\n+\n+class StdChronoTzdbPrinter:\n+    \"Print a chrono::tzdb\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def to_string(self):\n+        return '%s %s' % (self.typename, self.val['version'])\n+\n+class StdChronoTimeZoneRulePrinter:\n+    \"Print a chrono::time_zone rule\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = strip_versioned_namespace(typename)\n+        self.val = val\n+\n+    def to_string(self):\n+        on = self.val['on']\n+        kind = on['kind']\n+        month = months[on['month']]\n+        suffixes = {1:'st', 2:'nd', 3:'rd', 21:'st', 22:'nd', 23:'rd', 31:'st'}\n+        day = on['day_of_month']\n+        ordinal_day = '{}{}'.format(day, suffixes.get(day, 'th'))\n+        if kind == 0: # DayOfMonth\n+                start = '{} {}{}'.format(month, ordinal_day)\n+        else:\n+            weekday = weekdays[on['day_of_week']]\n+            if kind == 1: # LastWeekDay\n+                start = 'last {} in {}'.format(weekday, month)\n+            else:\n+                if kind == 2: # LessEq\n+                    direction = ('last', '<=')\n+                else:\n+                    direction = ('first', '>=')\n+                day = on['day_of_month']\n+                start = '{} {} {} {} {}'.format(direction[0], weekday,\n+                                                direction[1], month,\n+                                                ordinal_day)\n+        return 'time_zone rule {} from {} to {} starting on {}'.format(\n+                self.val['name'], self.val['from'], self.val['to'], start)\n+\n+\n # A \"regular expression\" printer which conforms to the\n # \"SubPrettyPrinter\" protocol from gdb.printing.\n class RxPrinter(object):\n@@ -2222,9 +2456,9 @@ def register_type_printers(obj):\n     add_one_type_printer(obj, 'fpos', 'streampos')\n \n     # Add type printers for <chrono> typedefs.\n-    for dur in ('nanoseconds', 'microseconds', 'milliseconds',\n-                'seconds', 'minutes', 'hours'):\n-        add_one_type_printer(obj, 'duration', dur)\n+    for dur in ('nanoseconds', 'microseconds', 'milliseconds', 'seconds',\n+                'minutes', 'hours', 'days', 'weeks', 'years', 'months'):\n+        add_one_type_printer(obj, 'chrono::duration', 'chrono::' + dur)\n \n     # Add type printers for <random> typedefs.\n     add_one_type_printer(obj, 'linear_congruential_engine', 'minstd_rand0')\n@@ -2376,6 +2610,11 @@ def build_libstdcxx_dictionary ():\n         libstdcxx_printer.add_version('std::', 'basic_' + sstream, StdStringStreamPrinter)\n         libstdcxx_printer.add_version('std::__cxx11::', 'basic_' + sstream, StdStringStreamPrinter)\n \n+    libstdcxx_printer.add_version('std::chrono::', 'duration',\n+                                  StdChronoDurationPrinter)\n+    libstdcxx_printer.add_version('std::chrono::', 'time_point',\n+                                  StdChronoTimePointPrinter)\n+\n     # std::regex components\n     libstdcxx_printer.add_version('std::__detail::', '_State',\n                                   StdRegexStatePrinter)\n@@ -2428,7 +2667,25 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_version('std::', 'weak_ordering', StdCmpCatPrinter)\n     libstdcxx_printer.add_version('std::', 'strong_ordering', StdCmpCatPrinter)\n     libstdcxx_printer.add_version('std::', 'span', StdSpanPrinter)\n-    libstdcxx_printer.add_version('std::', 'basic_format_args', StdFormatArgsPrinter)\n+    libstdcxx_printer.add_version('std::', 'basic_format_args',\n+                                  StdFormatArgsPrinter)\n+    for c in ['day','month','year','weekday','weekday_indexed','weekday_last',\n+              'month_day','month_day_last','month_weekday','month_weekday_last',\n+              'year_month','year_month_day','year_month_day_last',\n+              'year_month_weekday','year_month_weekday_last', 'hh_mm_ss']:\n+        libstdcxx_printer.add_version('std::chrono::', c,\n+                                      StdChronoCalendarPrinter)\n+    libstdcxx_printer.add_version('std::chrono::', 'time_zone',\n+                                  StdChronoTimeZonePrinter)\n+    libstdcxx_printer.add_version('std::chrono::', 'time_zone_link',\n+                                  StdChronoTimeZonePrinter)\n+    libstdcxx_printer.add_version('std::chrono::', 'zoned_time',\n+                                  StdChronoZonedTimePrinter)\n+    libstdcxx_printer.add_version('std::chrono::', 'leap_second',\n+                                  StdChronoLeapSecondPrinter)\n+    libstdcxx_printer.add_version('std::chrono::', 'tzdb', StdChronoTzdbPrinter)\n+    #libstdcxx_printer.add_version('std::chrono::(anonymous namespace)', 'Rule',\n+    #                              StdChronoTimeZoneRulePrinter)\n \n     # Extensions.\n     libstdcxx_printer.add_version('__gnu_cxx::', 'slist', StdSlistPrinter)"}]}