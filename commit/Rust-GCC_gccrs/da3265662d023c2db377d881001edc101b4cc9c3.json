{"sha": "da3265662d023c2db377d881001edc101b4cc9c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEzMjY1NjYyZDAyM2MyZGIzNzdkODgxMDAxZWRjMTAxYjRjYzljMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-12-14T22:26:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-14T22:26:24Z"}, "message": "re PR c++/51554 (ICE in cp/semantics.c:cxx_eval_indirect_ref with -Wall)\n\n\tPR c++/51554\n\t* semantics.c (cxx_eval_indirect_ref): Fix sanity check.\n\nFrom-SVN: r182346", "tree": {"sha": "729abfedb42e63715230e8737c21f24feefcc8ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729abfedb42e63715230e8737c21f24feefcc8ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da3265662d023c2db377d881001edc101b4cc9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3265662d023c2db377d881001edc101b4cc9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da3265662d023c2db377d881001edc101b4cc9c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3265662d023c2db377d881001edc101b4cc9c3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f074b08d4b008177d3ed6304fc33932e099e43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f074b08d4b008177d3ed6304fc33932e099e43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f074b08d4b008177d3ed6304fc33932e099e43d"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "07816eb5c4ff68806fff7b201e50a7ea164934f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da3265662d023c2db377d881001edc101b4cc9c3", "patch": "@@ -1,5 +1,8 @@\n 2011-12-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/51554\n+\t* semantics.c (cxx_eval_indirect_ref): Fix sanity check.\n+\n \tPR c++/51248\n \t* decl.c (copy_type_enum): Also update variants.\n \t(finish_enum): Allow variants of complete enums."}, {"sha": "ef85e453ad3628378aa7d9f90cb27626259fdc1d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=da3265662d023c2db377d881001edc101b4cc9c3", "patch": "@@ -7329,9 +7329,15 @@ cxx_eval_indirect_ref (const constexpr_call *call, tree t,\n     {\n       tree sub = op0;\n       STRIP_NOPS (sub);\n-      if (TREE_CODE (sub) == ADDR_EXPR\n-\t  || TREE_CODE (sub) == POINTER_PLUS_EXPR)\n+      if (TREE_CODE (sub) == POINTER_PLUS_EXPR)\n \t{\n+\t  sub = TREE_OPERAND (sub, 0);\n+\t  STRIP_NOPS (sub);\n+\t}\n+      if (TREE_CODE (sub) == ADDR_EXPR)\n+\t{\n+\t  /* We couldn't fold to a constant value.  Make sure it's not\n+\t     something we should have been able to fold.  */\n \t  gcc_assert (!same_type_ignoring_top_level_qualifiers_p\n \t\t      (TREE_TYPE (TREE_TYPE (sub)), TREE_TYPE (t)));\n \t  /* DR 1188 says we don't have to deal with this.  */"}, {"sha": "f9d8abd887a2e96d4a9822141054f675c350ee0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da3265662d023c2db377d881001edc101b4cc9c3", "patch": "@@ -1,5 +1,8 @@\n 2011-12-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/51554\n+\t* g++.dg/init/constant1.C: New.\n+\n \tPR c++/51248\n \t* g++.dg/other/enum2.C: New.\n "}, {"sha": "386b926100664ac16c98318d1bcb9b3abd2128fc", "filename": "gcc/testsuite/g++.dg/init/constant1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconstant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3265662d023c2db377d881001edc101b4cc9c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconstant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconstant1.C?ref=da3265662d023c2db377d881001edc101b4cc9c3", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/51554\n+\n+typedef unsigned char uint8;\n+typedef unsigned int uint32;\n+\n+const uint32 XX[] = { 1, 3, 7 };\n+\n+const uint8 V[] = {\n+  *(((const uint8*)&XX[0]) + 0),\n+  *(((const uint8*)&XX[0]) + 1),\n+  *(((const uint8*)&XX[0]) + 2),\n+  *(((const uint8*)&XX[0]) + 3),\n+  *(((const uint8*)&XX[1]) + 0),\n+  *(((const uint8*)&XX[1]) + 1),\n+  *(((const uint8*)&XX[1]) + 2),\n+  *(((const uint8*)&XX[1]) + 3),\n+};"}]}