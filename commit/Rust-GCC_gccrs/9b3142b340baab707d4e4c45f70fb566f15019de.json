{"sha": "9b3142b340baab707d4e4c45f70fb566f15019de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzMTQyYjM0MGJhYWI3MDdkNGU0YzQ1ZjcwZmI1NjZmMTUwMTlkZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-01-23T19:45:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-01-23T19:45:50Z"}, "message": "final.c (bb_str): Qualify a char* with the keyword `const'.\n\n        * final.c (bb_str): Qualify a char* with the keyword `const'.\n        (add_bb_string, final_scan_insn, output_asm_insn): Likewise.\n        * fix-header.c (read_scan_file): Likewise.\n        * genoutput.c (output_epilogue, process_template): Likewise.\n        * local-alloc.c (requires_inout, block_alloc): Likewise.\n        * output.h (output_asm_insn, assemble_string): Likewise.\n        * recog.c (recog_constraints, check_asm_operands,\n        decode_asm_operands, extract_insn, preprocess_constraints,\n        constrain_operands): Likewise.\n        * recog.h (operand_alternative, recog_constraints, insn_template,\n        insn_outfun, insn_operand_constraint, insn_name): Likewise.\n        * regclass.c (record_reg_classes, scan_one_insn): Likewise.\n        * regmove.c (find_matches): Likewise.\n        * reload.c (alternative_allows_memconst): Likewise.\n        * reload1.c (constraint_accepts_reg_p,\n        reload_cse_simplify_operands): Likewise.\n        * rtl.h (decode_asm_operands): Likewise.\n        * scan.h (fn_decl): Likewise.\n        * varasm.c (assemble_string): Likewise.\n\nFrom-SVN: r24834", "tree": {"sha": "55c79465cdc5b1c6462772036b913316f9fc2f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c79465cdc5b1c6462772036b913316f9fc2f6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b3142b340baab707d4e4c45f70fb566f15019de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3142b340baab707d4e4c45f70fb566f15019de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3142b340baab707d4e4c45f70fb566f15019de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3142b340baab707d4e4c45f70fb566f15019de/comments", "author": null, "committer": null, "parents": [{"sha": "5949a9fc20d8cfeff1a4174cd6c433a5bd753ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5949a9fc20d8cfeff1a4174cd6c433a5bd753ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5949a9fc20d8cfeff1a4174cd6c433a5bd753ae6"}], "stats": {"total": 140, "additions": 89, "deletions": 51}, "files": [{"sha": "2f963f24c1b46ca538fe9668f7ad82785c1b5acf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -1,3 +1,38 @@\n+Sat Jan 23 22:34:57 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* final.c (bb_str): Qualify a char* with the keyword `const'.\n+\t(add_bb_string, final_scan_insn, output_asm_insn): Likewise.\n+\n+\t* fix-header.c (read_scan_file): Likewise.\n+\n+\t* genoutput.c (output_epilogue, process_template): Likewise.\n+\t\n+\t* local-alloc.c (requires_inout, block_alloc): Likewise.\n+\n+\t* output.h (output_asm_insn, assemble_string): Likewise.\n+\n+\t* recog.c (recog_constraints, check_asm_operands,\n+\tdecode_asm_operands, extract_insn, preprocess_constraints,\n+\tconstrain_operands): Likewise.\n+\n+\t* recog.h (operand_alternative, recog_constraints, insn_template,\n+\tinsn_outfun, insn_operand_constraint, insn_name): Likewise.\n+\n+\t* regclass.c (record_reg_classes, scan_one_insn): Likewise.\n+\n+\t* regmove.c (find_matches): Likewise.\n+\n+\t* reload.c (alternative_allows_memconst): Likewise.\n+\n+\t* reload1.c (constraint_accepts_reg_p,\n+\treload_cse_simplify_operands): Likewise.\n+\n+\t* rtl.h (decode_asm_operands): Likewise.\n+\n+\t* scan.h (fn_decl): Likewise.\n+\n+\t* varasm.c (assemble_string): Likewise.\n+\n Sat Jan 23 01:37:36 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (gcc_tooldir): Handle case where exec_prefix has"}, {"sha": "08487c7ce048ce56e8336a1c00201a1ae0eadb31", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -282,7 +282,7 @@ static int bb_func_label_num\t= -1;\t\t/* Current label # for func */\n \n struct bb_str {\n   struct bb_str *next;\t\t/* pointer to next string */\n-  char *string;\t\t\t/* string */\n+  const char *string;\t\t/* string */\n   int label_num;\t\t/* label number */\n   int length;\t\t\t/* string length */\n };\n@@ -299,7 +299,7 @@ static int asm_insn_count\tPROTO((rtx));\n static void profile_function\tPROTO((FILE *));\n static void profile_after_prologue PROTO((FILE *));\n static void add_bb\t\tPROTO((FILE *));\n-static int add_bb_string\tPROTO((char *, int));\n+static int add_bb_string\tPROTO((const char *, int));\n static void output_source_line\tPROTO((FILE *, rtx));\n static rtx walk_alter_subreg\tPROTO((rtx));\n static void output_asm_name\tPROTO((void));\n@@ -1866,7 +1866,7 @@ add_bb (file)\n \n static int\n add_bb_string (string, perm_p)\n-     char *string;\n+     const char *string;\n      int perm_p;\n {\n   int len;\n@@ -2395,7 +2395,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       {\n \tregister rtx body = PATTERN (insn);\n \tint insn_code_number;\n-\tchar *template;\n+\tconst char *template;\n #ifdef HAVE_cc0\n \trtx note;\n #endif\n@@ -3351,10 +3351,10 @@ output_asm_name ()\n \n void\n output_asm_insn (template, operands)\n-     char *template;\n+     const char *template;\n      rtx *operands;\n {\n-  register char *p;\n+  register const char *p;\n   register int c;\n \n   /* An insn may return a null string template"}, {"sha": "416ec7e2a1c2248e3979af3583e482cee50c3b20", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -692,7 +692,7 @@ read_scan_file (in_fname, argc, argv)\n \t  /* Append \"_filbuf\" and/or \"_flsbuf\" to the required functions.  */\n \t  if (need_filbuf + need_flsbuf)\n \t    {\n-\t      char *new_list;\n+\t      const char *new_list;\n \t      if (need_filbuf)\n \t\tSET_REQUIRED (fn);\n \t      if (need_flsbuf)"}, {"sha": "30d1280b76d733eb0c667c7b5beed181fde4bdeb", "filename": "gcc/genoutput.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -233,7 +233,7 @@ output_epilogue ()\n {\n   register struct data *d;\n \n-  printf (\"\\nchar * const insn_template[] =\\n  {\\n\");\n+  printf (\"\\nconst char * const insn_template[] =\\n  {\\n\");\n   for (d = insn_data; d; d = d->next)\n     {\n       if (d->template)\n@@ -243,7 +243,7 @@ output_epilogue ()\n     }\n   printf (\"  };\\n\");\n \n-  printf (\"\\nchar *(*const insn_outfun[])() =\\n  {\\n\");\n+  printf (\"\\nconst char *(*const insn_outfun[])() =\\n  {\\n\");\n   for (d = insn_data; d; d = d->next)\n     {\n       if (d->outfun)\n@@ -263,7 +263,7 @@ output_epilogue ()\n     }\n   printf (\"  };\\n\");\n \n-  printf (\"\\nchar *insn_name[] =\\n  {\\n\");\n+  printf (\"\\nconst char *insn_name[] =\\n  {\\n\");\n   {\n     int offset = 0;\n     int next;\n@@ -304,7 +304,7 @@ output_epilogue ()\n       }\n   }\n   printf (\"  };\\n\");\n-  printf (\"char **insn_name_ptr = insn_name;\\n\");\n+  printf (\"const char **insn_name_ptr = insn_name;\\n\");\n \n   printf (\"\\nconst int insn_n_operands[] =\\n  {\\n\");\n   for (d = insn_data; d; d = d->next)\n@@ -318,7 +318,7 @@ output_epilogue ()\n \n   if (have_constraints)\n     {\n-      printf (\"\\nchar *const insn_operand_constraint[][MAX_RECOG_OPERANDS] =\\n  {\\n\");\n+      printf (\"\\nconst char *const insn_operand_constraint[][MAX_RECOG_OPERANDS] =\\n  {\\n\");\n       for (d = insn_data; d; d = d->next)\n \t{\n \t  register int i;\n@@ -595,7 +595,7 @@ process_template (d, template)\n   d->template = 0;\n   d->outfun = 1;\n \n-  printf (\"\\nstatic char *\\n\");\n+  printf (\"\\nstatic const char *\\n\");\n   printf (\"output_%d (operands, insn)\\n\", d->code_number);\n   printf (\"     rtx *operands ATTRIBUTE_UNUSED;\\n\");\n   printf (\"     rtx insn ATTRIBUTE_UNUSED;\\n\");\n@@ -608,7 +608,7 @@ process_template (d, template)\n   if (template[0] == '@')\n     {\n \n-      printf (\"  static /*const*/ char *const strings_%d[] = {\\n\",\n+      printf (\"  static const char *const strings_%d[] = {\\n\",\n \t      d->code_number);\n \n       for (i = 0, cp = &template[1]; *cp; )"}, {"sha": "127023daae44a157e93bfe9c2c64f760f0bf0879", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -261,7 +261,7 @@ static int find_free_reg\tPROTO((enum reg_class, enum machine_mode,\n static void mark_life\t\tPROTO((int, enum machine_mode, int));\n static void post_mark_life\tPROTO((int, enum machine_mode, int, int, int));\n static int no_conflict_p\tPROTO((rtx, rtx, rtx));\n-static int requires_inout\tPROTO((char *));\n+static int requires_inout\tPROTO((const char *));\n \f\n /* Allocate a new quantity (new within current basic block)\n    for register number REGNO which is born at index BIRTH\n@@ -1105,7 +1105,7 @@ block_alloc (b)\n \n \t      for (i = 1; i < recog_n_operands; i++)\n \t\t{\n-\t\t  char *p = recog_constraints[i];\n+\t\t  const char *p = recog_constraints[i];\n \t\t  int this_match = (requires_inout (p));\n \n \t\t  n_matching_alts += this_match;\n@@ -2177,7 +2177,7 @@ no_conflict_p (insn, r0, r1)\n \n static int\n requires_inout (p)\n-     char *p;\n+  const char *p;\n {\n   char c;\n   int found_zero = 0;"}, {"sha": "a7fe6937210914678aafbabefa8f271bf49a4cd6", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -81,7 +81,7 @@ extern void output_operand_lossage  PROTO((const char *));\n \n /* Output a string of assembler code, substituting insn operands.\n    Defined in final.c.  */\n-extern void output_asm_insn\tPROTO((char *, rtx *));\n+extern void output_asm_insn\tPROTO((const char *, rtx *));\n \n /* Compute a worst-case reference address of a branch so that it\n    can be safely used in the presence of aligned labels.\n@@ -245,7 +245,7 @@ extern void assemble_zeros\t\tPROTO((int));\n extern void assemble_align\t\tPROTO((int));\n \n /* Assemble a string constant with the specified C string as contents.  */\n-extern void assemble_string\t\tPROTO((char *, int));\n+extern void assemble_string\t\tPROTO((const char *, int));\n /* Assemble everything that is needed for a variable or function declaration.\n    Not used for automatic variables, and not used for function definitions.\n    Should not be called for variables of incomplete structure type."}, {"sha": "a0dafd5ccbf91b34bb78a6b9d4787d3f84303f2d", "filename": "gcc/recog.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -94,7 +94,7 @@ int recog_n_alternatives;\n enum machine_mode recog_operand_mode[MAX_RECOG_OPERANDS];\n \n /* Indexed by N, gives the constraint string for operand N.  */\n-char *recog_constraints[MAX_RECOG_OPERANDS];\n+const char *recog_constraints[MAX_RECOG_OPERANDS];\n \n /* Indexed by N, gives the type (in, out, inout) for operand N.  */\n enum op_type recog_op_type[MAX_RECOG_OPERANDS];\n@@ -162,7 +162,7 @@ check_asm_operands (x)\n {\n   int noperands;\n   rtx *operands;\n-  char **constraints;\n+  const char **constraints;\n   int i;\n \n   /* Post-reload, be more strict with things.  */\n@@ -181,13 +181,13 @@ check_asm_operands (x)\n     return 1;\n \n   operands = (rtx *) alloca (noperands * sizeof (rtx));\n-  constraints = (char **) alloca (noperands * sizeof (char *));\n+  constraints = (const char **) alloca (noperands * sizeof (char *));\n \n   decode_asm_operands (x, operands, NULL_PTR, constraints, NULL_PTR);\n \n   for (i = 0; i < noperands; i++)\n     {\n-      char *c = constraints[i];\n+      const char *c = constraints[i];\n       if (ISDIGIT ((unsigned char)c[0]))\n \tc = constraints[c[0] - '0'];\n \n@@ -1422,7 +1422,7 @@ decode_asm_operands (body, operands, operand_locs, constraints, modes)\n      rtx body;\n      rtx *operands;\n      rtx **operand_locs;\n-     char **constraints;\n+     const char **constraints;\n      enum machine_mode *modes;\n {\n   register int i;\n@@ -2022,7 +2022,7 @@ extract_insn (insn)\n \t\t\t       recog_constraints, recog_operand_mode);\n \t  if (noperands > 0)\n \t    {\n-\t      char *p =  recog_constraints[0];\n+\t      const char *p =  recog_constraints[0];\n \t      recog_n_alternatives = 1;\n \t      while (*p)\n \t\trecog_n_alternatives += (*p++ == ',');\n@@ -2080,7 +2080,7 @@ preprocess_constraints ()\n     {\n       int j;\n       struct operand_alternative *op_alt;\n-      char *p = recog_constraints[i];\n+      const char *p = recog_constraints[i];\n \n       op_alt = recog_op_alt[i];\n \n@@ -2210,7 +2210,7 @@ int\n constrain_operands (strict)\n      int strict;\n {\n-  char *constraints[MAX_RECOG_OPERANDS];\n+  const char *constraints[MAX_RECOG_OPERANDS];\n   int matching_operands[MAX_RECOG_OPERANDS];\n   int earlyclobber[MAX_RECOG_OPERANDS];\n   register int c;\n@@ -2239,7 +2239,7 @@ constrain_operands (strict)\n \t{\n \t  register rtx op = recog_operand[opno];\n \t  enum machine_mode mode = GET_MODE (op);\n-\t  register char *p = constraints[opno];\n+\t  register const char *p = constraints[opno];\n \t  int offset = 0;\n \t  int win = 0;\n \t  int val;"}, {"sha": "79f22f9135a7111f96c6a6b8d1682cb1f3dd8370", "filename": "gcc/recog.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -32,7 +32,7 @@ struct operand_alternative\n {\n   /* Pointer to the beginning of the constraint string for this alternative,\n      for easier access by alternative number.  */\n-  char *constraint;\n+  const char *constraint;\n \n   /* The register class valid for this alternative (possibly NO_REGS).  */\n   enum reg_class class;\n@@ -153,7 +153,7 @@ extern int recog_n_alternatives;\n extern enum machine_mode recog_operand_mode[];\n \n /* Indexed by N, gives the constraint string for operand N.  */\n-extern char *recog_constraints[];\n+extern const char *recog_constraints[];\n \n /* Indexed by N, gives the type (in, out, inout) for operand N.  */\n extern enum op_type recog_op_type[];\n@@ -176,9 +176,9 @@ extern struct operand_alternative recog_op_alt[MAX_RECOG_OPERANDS][MAX_RECOG_ALT\n \n /* These are vectors indexed by insn-code.  Details in genoutput.c.  */\n \n-extern char *const insn_template[];\n+extern const char *const insn_template[];\n \n-extern char *(*const insn_outfun[]) ();\n+extern const char *(*const insn_outfun[]) ();\n \n extern const int insn_n_operands[];\n \n@@ -192,7 +192,7 @@ extern const int insn_n_alternatives[];\n    and second by the operand number.  Details in genoutput.c.  */\n \n #ifdef REGISTER_CONSTRAINTS  /* Avoid undef sym in certain broken linkers.  */\n-extern char *const insn_operand_constraint[][MAX_RECOG_OPERANDS];\n+extern const char *const insn_operand_constraint[][MAX_RECOG_OPERANDS];\n #endif\n \n #ifndef REGISTER_CONSTRAINTS  /* Avoid undef sym in certain broken linkers.  */\n@@ -205,4 +205,4 @@ extern const char insn_operand_strict_low[][MAX_RECOG_OPERANDS];\n \n extern int (*const insn_operand_predicate[][MAX_RECOG_OPERANDS]) ();\n \n-extern char * insn_name[];\n+extern const char * insn_name[];"}, {"sha": "f1761206143a442580a478b5d935776b74974fd4", "filename": "gcc/regclass.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -693,7 +693,7 @@ static int loop_cost;\n \n static rtx scan_one_insn\tPROTO((rtx, int));\n static void record_reg_classes\tPROTO((int, int, rtx *, enum machine_mode *,\n-\t\t\t\t       char **, rtx));\n+\t\t\t\t       const char **, rtx));\n static int copy_cost\t\tPROTO((rtx, enum machine_mode, \n \t\t\t\t       enum reg_class, int));\n static void record_address_regs\tPROTO((rtx, enum reg_class, int));\n@@ -755,7 +755,7 @@ scan_one_insn (insn, pass)\n {\n   enum rtx_code code = GET_CODE (insn);\n   enum rtx_code pat_code;\n-  char *constraints[MAX_RECOG_OPERANDS];\n+  const char *constraints[MAX_RECOG_OPERANDS];\n   enum machine_mode modes[MAX_RECOG_OPERANDS];\n   rtx set, note;\n   int i, j;\n@@ -898,7 +898,7 @@ scan_one_insn (insn, pass)\n   for (i = 0; i < recog_n_operands - 1; i++)\n     if (constraints[i][0] == '%')\n       {\n-\tchar *xconstraints[MAX_RECOG_OPERANDS];\n+\tconst char *xconstraints[MAX_RECOG_OPERANDS];\n \tint j;\n \n \t/* Handle commutative operands by swapping the constraints.\n@@ -1136,7 +1136,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n      int n_ops;\n      rtx *ops;\n      enum machine_mode *modes;\n-     char **constraints;\n+     const char **constraints;\n      rtx insn;\n {\n   int alt;\n@@ -1156,7 +1156,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \n       for (i = 0; i < n_ops; i++)\n \t{\n-\t  char *p = constraints[i];\n+\t  const char *p = constraints[i];\n \t  rtx op = ops[i];\n \t  enum machine_mode mode = modes[i];\n \t  int allows_mem = 0;"}, {"sha": "70071ac71623befbeff6631eefaac84c525376dd", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -1405,7 +1405,8 @@ find_matches (insn, matchp)\n \n   for (op_no = 0; op_no < recog_n_operands; op_no++)\n     {\n-      char *p, c;\n+      const char *p;\n+      char c;\n       int i = 0;\n \n       p = recog_constraints[op_no];"}, {"sha": "06c34cb79799281be25e22cc1d867aad97c46517", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -324,7 +324,7 @@ static int earlyclobber_operand_p PROTO((rtx));\n static int hard_reg_set_here_p\tPROTO((int, int, rtx));\n static struct decomposition decompose PROTO((rtx));\n static int immune_p\t\tPROTO((rtx, rtx, struct decomposition));\n-static int alternative_allows_memconst PROTO((char *, int));\n+static int alternative_allows_memconst PROTO((const char *, int));\n static rtx find_reloads_toplev\tPROTO((rtx, int, enum reload_type, int, int, rtx));\n static rtx make_memloc\t\tPROTO((rtx, int));\n static int find_reloads_address\tPROTO((enum machine_mode, rtx *, rtx, rtx *,\n@@ -4272,7 +4272,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \n static int\n alternative_allows_memconst (constraint, altnum)\n-     char *constraint;\n+     const char *constraint;\n      int altnum;\n {\n   register int c;"}, {"sha": "d86c4069795a5af7e166754ac4a3ebfa2142bf1b", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -426,7 +426,7 @@ static void delete_output_reload\tPROTO((rtx, int, int));\n static void delete_address_reloads\tPROTO((rtx, rtx));\n static void delete_address_reloads_1\tPROTO((rtx, rtx, rtx));\n static rtx inc_for_reload\t\tPROTO((rtx, rtx, rtx, int));\n-static int constraint_accepts_reg_p\tPROTO((char *, rtx));\n+static int constraint_accepts_reg_p\tPROTO((const char *, rtx));\n static void reload_cse_regs_1\t\tPROTO((rtx));\n static void reload_cse_invalidate_regno\tPROTO((int, enum machine_mode, int));\n static int reload_cse_mem_conflict_p\tPROTO((rtx, rtx));\n@@ -8238,7 +8238,7 @@ inc_for_reload (reloadreg, in, value, inc_amount)\n \n static int\n constraint_accepts_reg_p (string, reg)\n-     char *string;\n+     const char *string;\n      rtx reg;\n {\n   int value = 0;\n@@ -9012,7 +9012,7 @@ reload_cse_simplify_operands (insn)\n #ifdef REGISTER_CONSTRAINTS\n   int i,j;\n \n-  char *constraints[MAX_RECOG_OPERANDS];\n+  const char *constraints[MAX_RECOG_OPERANDS];\n   \n   /* Vector recording how bad an alternative is.  */\n   int *alternative_reject;\n@@ -9046,7 +9046,7 @@ reload_cse_simplify_operands (insn)\n     {\n       enum machine_mode mode;\n       int regno;\n-      char *p;\n+      const char *p;\n \n       op_alt_regno[i] = (int *) alloca (recog_n_alternatives * sizeof (int));\n       for (j = 0; j < recog_n_alternatives; j++)"}, {"sha": "c7b59093afa98f5b3816e710f4368bd5ad7971d4", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -1052,7 +1052,9 @@ extern void free_reg_info\t\tPROTO((void));\n \n /* recog.c */\n extern int asm_noperands\t\tPROTO((rtx));\n-extern char *decode_asm_operands\tPROTO((rtx, rtx *, rtx **, char **, enum machine_mode *));\n+extern char *decode_asm_operands\tPROTO((rtx, rtx *, rtx **,\n+\t\t\t\t\t       const char **,\n+\t\t\t\t\t       enum machine_mode *));\n \n extern enum reg_class reg_preferred_class PROTO((int));\n extern enum reg_class reg_alternate_class PROTO((int));"}, {"sha": "67ee674fe82395e2e9b3d2bea53975de5a8a0ba5", "filename": "gcc/scan.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fscan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fscan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.h?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -44,9 +44,9 @@ typedef struct sstring\n struct partial_proto;\n struct fn_decl\n {\n-  char *fname;\n-  char *rtype;\n-  char *params;\n+  const char *fname;\n+  const char *rtype;\n+  const char *params;\n   struct partial_proto *partial;\n };\n "}, {"sha": "4dc474536d33b3cf1bf05dd69cbf02f5bf3bc5d8", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3142b340baab707d4e4c45f70fb566f15019de/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9b3142b340baab707d4e4c45f70fb566f15019de", "patch": "@@ -1108,7 +1108,7 @@ assemble_align (align)\n \n void\n assemble_string (p, size)\n-     char *p;\n+     const char *p;\n      int size;\n {\n   int pos = 0;"}]}