{"sha": "1a17bd35048b702b3c5eb2ece720588a77e842c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExN2JkMzUwNDhiNzAyYjNjNWViMmVjZTcyMDU4OGE3N2U4NDJjMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-10-18T15:46:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-18T15:46:04Z"}, "message": "loop-invariant.c: Include target.h.\n\n\t* loop-invariant.c: Include target.h.\n\t(check_dependency): Return false for an uninitialized argument register\n\tthat is likely to be spilled.\n\t* Makefile.in (loop-invariant.o): Add $(TARGET_H).\n\nFrom-SVN: r192566", "tree": {"sha": "d84b88ed326331e10e4d041c61d14b4c0fbe5bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84b88ed326331e10e4d041c61d14b4c0fbe5bb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a17bd35048b702b3c5eb2ece720588a77e842c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a17bd35048b702b3c5eb2ece720588a77e842c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a17bd35048b702b3c5eb2ece720588a77e842c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a17bd35048b702b3c5eb2ece720588a77e842c1/comments", "author": null, "committer": null, "parents": [{"sha": "27a9462d4f83c099758d1cd3c176a1f8198e90a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a9462d4f83c099758d1cd3c176a1f8198e90a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a9462d4f83c099758d1cd3c176a1f8198e90a1"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "146355041d70123ef0520b770f35ca95914e1928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -1,3 +1,10 @@\n+2012-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* loop-invariant.c: Include target.h.\n+\t(check_dependency): Return false for an uninitialized argument register\n+\tthat is likely to be spilled.\n+\t* Makefile.in (loop-invariant.o): Add $(TARGET_H).\n+\n 2012-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* except.c (sjlj_emit_function_enter): Remove unused variable."}, {"sha": "7ae3bb9bdbc935833f58fcbee7fbe9aeaa8c9139", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -3101,7 +3101,7 @@ loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n    intl.h $(DIAGNOSTIC_CORE_H) $(DF_H) $(HASHTAB_H)\n loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n    $(RTL_H) $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) $(RECOG_H) \\\n-   $(TM_H) $(TM_P_H) $(FUNCTION_H) $(FLAGS_H) $(DF_H) \\\n+   $(TM_H) $(TM_P_H) $(FUNCTION_H) $(FLAGS_H) $(DF_H) $(TARGET_H) \\\n    $(OBSTACK_H) $(HASHTAB_H) $(EXCEPT_H) $(PARAMS_H) $(REGS_H) ira.h\n cfgloopmanip.o : cfgloopmanip.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) \\"}, {"sha": "854b41c2ed6297ea4196091a7c9cd29e294e8c33", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"expr.h\"\n #include \"recog.h\"\n+#include \"target.h\"\n #include \"function.h\"\n #include \"flags.h\"\n #include \"df.h\"\n@@ -784,7 +785,22 @@ check_dependency (basic_block bb, df_ref use, bitmap depends_on)\n \n   defs = DF_REF_CHAIN (use);\n   if (!defs)\n-    return true;\n+    {\n+      unsigned int regno = DF_REF_REGNO (use);\n+\n+      /* If this is the use of an uninitialized argument register that is\n+\t likely to be spilled, do not move it lest this might extend its\n+\t lifetime and cause reload to die.  This can occur for a call to\n+\t a function taking complex number arguments and moving the insns\n+\t preparing the arguments without moving the call itself wouldn't\n+\t gain much in practice.  */\n+      if ((DF_REF_FLAGS (use) & DF_HARD_REG_LIVE)\n+\t  && FUNCTION_ARG_REGNO_P (regno)\n+\t  && targetm.class_likely_spilled_p (REGNO_REG_CLASS (regno)))\n+\treturn false;\n+\n+      return true;\n+    }\n \n   if (defs->next)\n     return false;"}, {"sha": "7ed81b9f5e7a2279fb2bdae8c5b94335f2cf49b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -1,3 +1,8 @@\n+2012-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization13.ad[sb]: New test.\n+\t* gnat.dg/loop_optimization13_pkg.ads: New helper.\n+\n 2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n         * gcc.target/arm/neon/vfmaQf32.c: New testcase."}, {"sha": "ffc516ff7baa2d83f2289cf4d07660523b9a1013", "filename": "gcc/testsuite/gnat.dg/loop_optimization13.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13.adb?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-O\" }\r\n+\r\n+with Loop_Optimization13_Pkg; use Loop_Optimization13_Pkg;\r\n+\r\n+package body Loop_Optimization13 is\r\n+\r\n+   function F (A : Rec) return Rec is\r\n+      N : constant Integer := A.V'Length / L;\r\n+      Res : Rec\r\n+        := (True, new Complex_Vector' (0 .. A.V'Length / L - 1 => (0.0, 0.0)));\r\n+   begin\r\n+      for I in 0 .. L - 1 loop\r\n+         for J in 0 .. N - 1 loop\r\n+            Res.V (J) := Res.V (J) + A.V (I * N + J);\r\n+         end loop;\r\n+      end loop;\r\n+      return Res;\r\n+   end;\r\n+\r\n+end Loop_Optimization13;\r"}, {"sha": "2d3b8e59f1820a0904391467bd4a98167c0d958b", "filename": "gcc/testsuite/gnat.dg/loop_optimization13.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13.ads?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -0,0 +1,17 @@\n+with Ada.Numerics.Complex_Types; use Ada.Numerics.Complex_Types;\r\n+\r\n+package Loop_Optimization13 is\r\n+\r\n+   type Complex_Vector is array (Integer range <>) of Complex;\r\n+   type Complex_Vector_Ptr is access Complex_Vector;\r\n+\r\n+   type Rec (Kind : Boolean := False) is record\r\n+      case Kind is\r\n+         when True => V : Complex_Vector_Ptr;\r\n+         when False => null;\r\n+      end case;\r\n+   end record;\r\n+\r\n+   function F (A : Rec) return Rec;\r\n+\r\n+end Loop_Optimization13;\r"}, {"sha": "8f98b6e1f12ed70e6532cf722d33202975f2d7e7", "filename": "gcc/testsuite/gnat.dg/loop_optimization13_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a17bd35048b702b3c5eb2ece720588a77e842c1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization13_pkg.ads?ref=1a17bd35048b702b3c5eb2ece720588a77e842c1", "patch": "@@ -0,0 +1,5 @@\n+package Loop_Optimization13_Pkg is\n+\n+   L : Integer;\n+\n+end Loop_Optimization13_Pkg;"}]}