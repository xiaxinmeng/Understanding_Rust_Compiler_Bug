{"sha": "d8bbf1d94ce6e95650ce3f163086b20ec586f537", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiYmYxZDk0Y2U2ZTk1NjUwY2UzZjE2MzA4NmIyMGVjNTg2ZjUzNw==", "commit": {"author": {"name": "Vladislav Ivanishin", "email": "vlad@ispras.ru", "date": "2019-05-21T10:45:32Z"}, "committer": {"name": "Vladislav Ivanishin", "email": "vlad@gcc.gnu.org", "date": "2019-05-21T10:45:32Z"}, "message": "Don't split non-critical edges in crited\n\ngcc/ChangeLog:\n\n        * tree-cfg.h (split_critical_edges): Add for_edge_insertion_p\n\tparameter with default value false to declaration.\n        (split_edges_for_insertion): New inline function.  Wrapper for\n\tsplit_critical_edges with for_edge_insertion_p = true.\n        * tree-cfg.c (split_critical_edges): Don't split non-critical\n\tedges if for_edge_insertion_p is false.  Fix whitespace.\n        * tree-ssa-pre.c (pass_pre::execute): Call\n\tsplit_edges_for_insertion instead of split_critical_edges.\n        * gcc/tree-ssa-tail-merge.c (tail_merge_optimize): Ditto.\n        * gcc/tree-ssa-sink.c (pass_sink_code::execute): Ditto.\n\t(pass_data_sink_code): Update function name in the comment.\n\nFrom-SVN: r271461", "tree": {"sha": "5cbdd8f8878d9314e0908c6e1b0cc24c9933ac06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cbdd8f8878d9314e0908c6e1b0cc24c9933ac06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8bbf1d94ce6e95650ce3f163086b20ec586f537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bbf1d94ce6e95650ce3f163086b20ec586f537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8bbf1d94ce6e95650ce3f163086b20ec586f537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bbf1d94ce6e95650ce3f163086b20ec586f537/comments", "author": {"login": "ivladak", "id": 3601329, "node_id": "MDQ6VXNlcjM2MDEzMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3601329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivladak", "html_url": "https://github.com/ivladak", "followers_url": "https://api.github.com/users/ivladak/followers", "following_url": "https://api.github.com/users/ivladak/following{/other_user}", "gists_url": "https://api.github.com/users/ivladak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivladak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivladak/subscriptions", "organizations_url": "https://api.github.com/users/ivladak/orgs", "repos_url": "https://api.github.com/users/ivladak/repos", "events_url": "https://api.github.com/users/ivladak/events{/privacy}", "received_events_url": "https://api.github.com/users/ivladak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f8e84c609c67456965b20e1274e7dca3db9ab05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8e84c609c67456965b20e1274e7dca3db9ab05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8e84c609c67456965b20e1274e7dca3db9ab05"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "e9f7b1f4d3804b2dea2df2b1aa43800155230f86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8bbf1d94ce6e95650ce3f163086b20ec586f537", "patch": "@@ -1,3 +1,17 @@\n+2019-05-21  Vladislav Ivanishin  <vlad@ispras.ru>\n+\n+\t* tree-cfg.h (split_critical_edges): Add for_edge_insertion_p\n+\tparameter with default value false to declaration.\n+\t(split_edges_for_insertion): New inline function.  Wrapper for\n+\tsplit_critical_edges with for_edge_insertion_p = true.\n+\t* tree-cfg.c (split_critical_edges): Don't split non-critical\n+\tedges if for_edge_insertion_p is false.  Fix whitespace.\n+\t* tree-ssa-pre.c (pass_pre::execute): Call\n+\tsplit_edges_for_insertion instead of split_critical_edges.\n+\t* gcc/tree-ssa-tail-merge.c (tail_merge_optimize): Ditto.\n+\t* gcc/tree-ssa-sink.c (pass_sink_code::execute): Ditto.\n+\t(pass_data_sink_code): Update function name in the comment.\n+\n 2019-05-21  Vladislav Ivanishin  <vlad@ispras.ru>\n \n \t* tree-ssa-uninit.c (value_sat_pred_p): This new function is a wrapper"}, {"sha": "85ce204ec2645e31f3e4da1e5351ff4db38fc771", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d8bbf1d94ce6e95650ce3f163086b20ec586f537", "patch": "@@ -8932,10 +8932,11 @@ struct cfg_hooks gimple_cfg_hooks = {\n };\n \n \n-/* Split all critical edges.  */\n+/* Split all critical edges.  Split some extra (not necessarily critical) edges\n+   if FOR_EDGE_INSERTION_P is true.  */\n \n unsigned int\n-split_critical_edges (void)\n+split_critical_edges (bool for_edge_insertion_p /* = false */)\n {\n   basic_block bb;\n   edge e;\n@@ -8958,11 +8959,12 @@ split_critical_edges (void)\n \t     end by control flow statements, such as RESX.\n \t     Go ahead and split them too.  This matches the logic in\n \t     gimple_find_edge_insert_loc.  */\n-\t  else if ((!single_pred_p (e->dest)\n-\t            || !gimple_seq_empty_p (phi_nodes (e->dest))\n-\t\t    || e->dest == EXIT_BLOCK_PTR_FOR_FN (cfun))\n+\t  else if (for_edge_insertion_p\n+\t\t   && (!single_pred_p (e->dest)\n+\t\t       || !gimple_seq_empty_p (phi_nodes (e->dest))\n+\t\t       || e->dest == EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t\t   && e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n-\t           && !(e->flags & EDGE_ABNORMAL))\n+\t\t   && !(e->flags & EDGE_ABNORMAL))\n \t    {\n \t      gimple_stmt_iterator gsi;\n "}, {"sha": "836f8e8af51aa23367518d5d453e7ee43647c802", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=d8bbf1d94ce6e95650ce3f163086b20ec586f537", "patch": "@@ -105,7 +105,7 @@ extern void extract_true_false_edges_from_block (basic_block, edge *, edge *);\n extern tree find_case_label_for_value (const gswitch *switch_stmt, tree val);\n extern edge find_taken_edge_switch_expr (const gswitch *switch_stmt, tree val);\n extern unsigned int execute_fixup_cfg (void);\n-extern unsigned int split_critical_edges (void);\n+extern unsigned int split_critical_edges (bool for_edge_insertion_p = false);\n extern basic_block insert_cond_bb (basic_block, gimple *, gimple *,\n \t\t\t\t   profile_probability);\n extern bool gimple_find_sub_bbs (gimple_seq, gimple_stmt_iterator *);\n@@ -128,4 +128,11 @@ should_remove_lhs_p (tree lhs)\n \t  && !TREE_ADDRESSABLE (TREE_TYPE (lhs)));\n }\n \n+\n+inline unsigned int\n+split_edges_for_insertion ()\n+{\n+  return split_critical_edges (/*for_edge_insertion_p=*/true);\n+}\n+\n #endif /* _TREE_CFG_H  */"}, {"sha": "086f8c3333657d0d3098ccdf8334fc555c52e0f3", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d8bbf1d94ce6e95650ce3f163086b20ec586f537", "patch": "@@ -4183,7 +4183,7 @@ pass_pre::execute (function *fun)\n   /* This has to happen before VN runs because\n      loop_optimizer_init may create new phis, etc.  */\n   loop_optimizer_init (LOOPS_NORMAL);\n-  split_critical_edges ();\n+  split_edges_for_insertion ();\n   scev_initialize ();\n   calculate_dominance_info (CDI_DOMINATORS);\n "}, {"sha": "77abe3aa4b649e763cb05aee368fa249cf0368b8", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=d8bbf1d94ce6e95650ce3f163086b20ec586f537", "patch": "@@ -610,7 +610,7 @@ const pass_data pass_data_sink_code =\n   \"sink\", /* name */\n   OPTGROUP_NONE, /* optinfo_flags */\n   TV_TREE_SINK, /* tv_id */\n-  /* PROP_no_crit_edges is ensured by running split_critical_edges in\n+  /* PROP_no_crit_edges is ensured by running split_edges_for_insertion in\n      pass_data_sink_code::execute ().  */\n   ( PROP_cfg | PROP_ssa ), /* properties_required */\n   0, /* properties_provided */\n@@ -636,7 +636,7 @@ unsigned int\n pass_sink_code::execute (function *fun)\n {\n   loop_optimizer_init (LOOPS_NORMAL);\n-  split_critical_edges ();\n+  split_edges_for_insertion ();\n   connect_infinite_loops_to_exit ();\n   memset (&sink_stats, 0, sizeof (sink_stats));\n   calculate_dominance_info (CDI_DOMINATORS);"}, {"sha": "cbd5a277b3968d66cb8a782c143c4f920b144cae", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbf1d94ce6e95650ce3f163086b20ec586f537/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=d8bbf1d94ce6e95650ce3f163086b20ec586f537", "patch": "@@ -1746,7 +1746,7 @@ tail_merge_optimize (unsigned int todo)\n     {\n       cleanup_tree_cfg ();\n       todo &= ~TODO_cleanup_cfg;\n-      split_critical_edges ();\n+      split_edges_for_insertion ();\n     }\n \n   if (!dom_info_available_p (CDI_DOMINATORS))"}]}