{"sha": "910c02a071adeae2000fedcfeba2172154f52c0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwYzAyYTA3MWFkZWFlMjAwMGZlZGNmZWJhMjE3MjE1NGY1MmMwZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-08-20T00:48:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-08-20T00:48:14Z"}, "message": "Make gcc::context be GC-managed\n\n\t* Makefile.in (GTFILES): Add context.h.\n\t* context.c (gcc::context::operator new): New.\n\t(gcc::context::gt_ggc_mx): New.\n\t(gcc::context::gt_pch_nx): New.\n\t(gcc::context::gt_pch_nx): New.\n\t* context.h (gcc::context): Add GTY((user)) marking.\n\t(gcc::context::operator new): New.\n\t(gcc::context::gt_ggc_mx): New.\n\t(gcc::context::gt_pch_nx): New.\n\t(gcc::context::gt_pch_nx): New.\n\t(g): Add GTY marking.\n\t(gt_ggc_mx (gcc::context *)): New.\n\t(gt_pch_nx (gcc::context *)): New.\n\t(gt_pch_nx (gcc::context *ctxt, gt_pointer_operator op,\n\tvoid *cookie)): New.\n\t* gengtype.c (open_base_files) <ifiles>: Add context.h.\n\nFrom-SVN: r201864", "tree": {"sha": "080c5e5b18d9fa59fc4dff4c0c22fc13ee53b87c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/080c5e5b18d9fa59fc4dff4c0c22fc13ee53b87c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/910c02a071adeae2000fedcfeba2172154f52c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910c02a071adeae2000fedcfeba2172154f52c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910c02a071adeae2000fedcfeba2172154f52c0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910c02a071adeae2000fedcfeba2172154f52c0d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c28878251aae25c0ce4ff7dfaf8fa22e9565757b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28878251aae25c0ce4ff7dfaf8fa22e9565757b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28878251aae25c0ce4ff7dfaf8fa22e9565757b"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "f12c23be36f7b5c137048cee1ed20eaedd0cd107", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=910c02a071adeae2000fedcfeba2172154f52c0d", "patch": "@@ -1,3 +1,22 @@\n+2013-08-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (GTFILES): Add context.h.\n+\t* context.c (gcc::context::operator new): New.\n+\t(gcc::context::gt_ggc_mx): New.\n+\t(gcc::context::gt_pch_nx): New.\n+\t(gcc::context::gt_pch_nx): New.\n+\t* context.h (gcc::context): Add GTY((user)) marking.\n+\t(gcc::context::operator new): New.\n+\t(gcc::context::gt_ggc_mx): New.\n+\t(gcc::context::gt_pch_nx): New.\n+\t(gcc::context::gt_pch_nx): New.\n+\t(g): Add GTY marking.\n+\t(gt_ggc_mx (gcc::context *)): New.\n+\t(gt_pch_nx (gcc::context *)): New.\n+\t(gt_pch_nx (gcc::context *ctxt, gt_pointer_operator op,\n+\tvoid *cookie)): New.\n+\t* gengtype.c (open_base_files) <ifiles>: Add context.h.\n+\n 2013-08-20  Alan Modra  <amodra@gmail.com>\n \n \tPR target/57865"}, {"sha": "79c54e1e6624f67f9ecd3d569463c480bbf32303", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=910c02a071adeae2000fedcfeba2172154f52c0d", "patch": "@@ -3831,6 +3831,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/vtable-verify.c \\\n   $(srcdir)/asan.c \\\n   $(srcdir)/tsan.c $(srcdir)/ipa-devirt.c \\\n+  $(srcdir)/context.h \\\n   @all_gtfiles@\n \n # Compute the list of GT header files from the corresponding C sources,"}, {"sha": "ba6f33553331bcdb40a7cca71d5708e2527c5b8f", "filename": "gcc/context.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2Fcontext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2Fcontext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.c?ref=910c02a071adeae2000fedcfeba2172154f52c0d", "patch": "@@ -27,7 +27,33 @@ along with GCC; see the file COPYING3.  If not see\n /* The singleton holder of global state: */\n gcc::context *g;\n \n+void *\n+gcc::context::operator new (std::size_t size)\n+{\n+  return ggc_internal_cleared_alloc_stat (size MEM_STAT_INFO);\n+}\n+\n gcc::context::context()\n {\n   passes_ = new gcc::pass_manager (this);\n }\n+\n+/* Functions relating to the garbage collector.  */\n+void\n+gcc::context::gt_ggc_mx ()\n+{\n+  /* Currently a no-op.  */\n+}\n+\n+void\n+gcc::context::gt_pch_nx ()\n+{\n+  /* Currently a no-op.  */\n+}\n+\n+void\n+gcc::context::gt_pch_nx (gt_pointer_operator op ATTRIBUTE_UNUSED,\n+\t\t\t void *cookie ATTRIBUTE_UNUSED)\n+{\n+  /* Currently a no-op.  */\n+}"}, {"sha": "2211dc43ee9ebc6a9569cda70f43a9b9d91d5101", "filename": "gcc/context.h", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2Fcontext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2Fcontext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.h?ref=910c02a071adeae2000fedcfeba2172154f52c0d", "patch": "@@ -27,11 +27,30 @@ class pass_manager;\n /* GCC's internal state can be divided into zero or more\n    \"parallel universe\" of state; an instance of this class is one such\n    context of state.  */\n-class context\n+class GTY((user)) context\n {\n public:\n+  /* Ensure that instances are allocated within the GC-heap.  */\n+  void *operator new (std::size_t size);\n+\n   context();\n \n+  /* Garbage-collector integration.\n+\n+     Each context assumes it has full control of the GC-heap that it\n+     is associated with.  It acts as a root for that GC-heap, owning\n+     references to within it.\n+\n+     Note that context instances are allocated within their own GC\n+     heap.\n+\n+     The methods are called the *first time* that the context is reached\n+     during a ggc/pch traversal, rather than every time.  */\n+\n+  void gt_ggc_mx ();\n+  void gt_pch_nx ();\n+  void gt_pch_nx (gt_pointer_operator op, void *cookie);\n+\n   /* Pass-management.  */\n \n   pass_manager *get_passes () { gcc_assert (passes_); return passes_; }\n@@ -46,6 +65,42 @@ class context\n \n /* The global singleton context aka \"g\".\n    (the name is chosen to be easy to type in a debugger).  */\n-extern gcc::context *g;\n+extern GTY(()) gcc::context *g;\n+\n+/* Global hooks for ggc/pch.\n+\n+   The gcc::context class is marked with GTY((user)), which leads to\n+   gengtype creating autogenerated functions for handling context within\n+   gtype-desc.c:\n+\n+     void gt_ggc_mx_context (void *x_p);\n+     void gt_pch_nx_context (void *x_p)\n+     void gt_pch_p_7context (void *this_obj,\n+\t\t\t     void *x_p,\n+\t\t\t     gt_pointer_operator op,\n+\t\t\t     void *cookie);\n+\n+   Those functions call the following global functions the first time\n+   that the context is reached during a traversal, and the following\n+   global functions in turn simply call the corresponding  methods of the\n+   context (so that they can access private fields of the context).  */\n+\n+inline void\n+gt_ggc_mx (gcc::context *ctxt)\n+{\n+  ctxt->gt_ggc_mx ();\n+}\n+\n+inline void\n+gt_pch_nx (gcc::context *ctxt)\n+{\n+  ctxt->gt_pch_nx ();\n+}\n+\n+inline void\n+gt_pch_nx (gcc::context *ctxt, gt_pointer_operator op, void *cookie)\n+{\n+  ctxt->gt_pch_nx (op, cookie);\n+}\n \n #endif /* ! GCC_CONTEXT_H */"}, {"sha": "9db67382a10bbf34dc82a9ed4a25ef2ad6b21652", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910c02a071adeae2000fedcfeba2172154f52c0d/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=910c02a071adeae2000fedcfeba2172154f52c0d", "patch": "@@ -1739,7 +1739,7 @@ open_base_files (void)\n       \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n       \"except.h\", \"output.h\", \"gimple.h\", \"cfgloop.h\",\n       \"target.h\", \"ipa-prop.h\", \"lto-streamer.h\", \"target-globals.h\",\n-      \"ipa-inline.h\", \"dwarf2out.h\", NULL\n+      \"ipa-inline.h\", \"dwarf2out.h\", \"context.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}]}