{"sha": "e87789f197e47259c94349821d3446f7d959e08f", "node_id": "C_kwDOANBUbNoAKGU4Nzc4OWYxOTdlNDcyNTljOTQzNDk4MjFkMzQ0NmY3ZDk1OWUwOGY", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-21T06:54:49Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-21T10:38:44Z"}, "message": "Evaluate 'random ()' to '0' in 'pass_omp_oacc_neuter_broadcast'\n\nJulian Brown,\n<http://mid.mail-archive.com/20210920134603.16459021@squid.athome>:\n\n| [...] the randomness shouldn't be necessary for the\n| correctness of the patch (i.e. it could just be \"base = bounds_lo\", or\n| indeed folded into the line after).\n|\n| The \"ar.invalid ()\" case happens when we fail to allocate a block of\n| memory in LDS space for broadcasting a particular set of variables,\n| and trigger a fall-back path in the broadcasting code that adds extra\n| barriers around the broadcast in question. I imagine I was thinking\n| that adding randomness could mean we can \"get lucky\" sometimes and\n| avoid needing those barriers in some cases, but in fact I don't think\n| that was implemented, so the randomness is useless. (Or it could just\n| have been leftover debug code... oops).\n\n\tgcc/\n\tPR other/102408\n\t* omp-oacc-neuter-broadcast.cc (oacc_do_neutering): Evaluate\n\t'random ()' to '0'.", "tree": {"sha": "162ed834715661ddbf2389ce359d2a7f969031fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162ed834715661ddbf2389ce359d2a7f969031fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e87789f197e47259c94349821d3446f7d959e08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87789f197e47259c94349821d3446f7d959e08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87789f197e47259c94349821d3446f7d959e08f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87789f197e47259c94349821d3446f7d959e08f/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e7a92c0ff3871d955ca8fb133f869b216d7224d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a92c0ff3871d955ca8fb133f869b216d7224d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7a92c0ff3871d955ca8fb133f869b216d7224d"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "e43338f3abf299b4a6a2518ee0dcbb5bf1ab886c", "filename": "gcc/omp-oacc-neuter-broadcast.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87789f197e47259c94349821d3446f7d959e08f/gcc%2Fomp-oacc-neuter-broadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87789f197e47259c94349821d3446f7d959e08f/gcc%2Fomp-oacc-neuter-broadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-neuter-broadcast.cc?ref=e87789f197e47259c94349821d3446f7d959e08f", "patch": "@@ -1782,9 +1782,8 @@ oacc_do_neutering (unsigned HOST_WIDE_INT bounds_lo,\n \n       if (ar.invalid ())\n \t{\n-\t  unsigned HOST_WIDE_INT base;\n-\t  base = bounds_lo + random () % 512;\n-\t  base = (base + align - 1) & ~(align - 1);\n+\t  unsigned HOST_WIDE_INT base\n+\t    = (bounds_lo + align - 1) & ~(align - 1);\n \t  if (base + size > bounds_hi)\n \t    error_at (UNKNOWN_LOCATION, \"shared-memory region overflow\");\n \t  std::pair<unsigned HOST_WIDE_INT, bool> base_inrng"}]}