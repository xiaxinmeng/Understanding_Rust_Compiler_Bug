{"sha": "c3cda381c7dec4b95c20275629acc7194c68a324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjZGEzODFjN2RlYzRiOTVjMjAyNzU2MjlhY2M3MTk0YzY4YTMyNA==", "commit": {"author": {"name": "Falk Hueffner", "email": "falk@debian.org", "date": "2004-01-21T15:52:47Z"}, "committer": {"name": "Falk Hueffner", "email": "falk@gcc.gnu.org", "date": "2004-01-21T15:52:47Z"}, "message": "re PR target/12898 (Tru64 UNIX bootstrap failure: ICE in gen_reg_rtx, at emit-rtl.c:819)\n\n        PR target/12898\n        * config/alpha/alpha.c (alpha_emit_set_const_1): If\n        no_new_pseudos, use gen_rtx_SET directly for SImode constants\n        which need multiple instructions to emit.\n\n        * testsuite/gcc.c-torture/compile/20040121-1.c: New test.\n\nFrom-SVN: r76283", "tree": {"sha": "37367da45f4215337dea933b9a36d8ec0bf69abd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37367da45f4215337dea933b9a36d8ec0bf69abd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3cda381c7dec4b95c20275629acc7194c68a324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cda381c7dec4b95c20275629acc7194c68a324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3cda381c7dec4b95c20275629acc7194c68a324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cda381c7dec4b95c20275629acc7194c68a324/comments", "author": {"login": "falk-hueffner", "id": 2112658, "node_id": "MDQ6VXNlcjIxMTI2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2112658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/falk-hueffner", "html_url": "https://github.com/falk-hueffner", "followers_url": "https://api.github.com/users/falk-hueffner/followers", "following_url": "https://api.github.com/users/falk-hueffner/following{/other_user}", "gists_url": "https://api.github.com/users/falk-hueffner/gists{/gist_id}", "starred_url": "https://api.github.com/users/falk-hueffner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/falk-hueffner/subscriptions", "organizations_url": "https://api.github.com/users/falk-hueffner/orgs", "repos_url": "https://api.github.com/users/falk-hueffner/repos", "events_url": "https://api.github.com/users/falk-hueffner/events{/privacy}", "received_events_url": "https://api.github.com/users/falk-hueffner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7782b2f8f11acc3122ce20380ef91351b0d1c0"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "ac0537ffee360de8a475967f43bf9d0b269dafcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3cda381c7dec4b95c20275629acc7194c68a324", "patch": "@@ -1,3 +1,10 @@\n+2004-01-21  Falk Hueffner  <falk@debian.org>\n+\n+\tPR target/12898\n+\t* config/alpha/alpha.c (alpha_emit_set_const_1): If\n+\tno_new_pseudos, use gen_rtx_SET directly for SImode constants\n+\twhich need multiple instructions to emit.\n+\n 2004-01-21  Inaoka Kazuhiro  <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/m32r.h (CPP_SPEC): Define."}, {"sha": "581d344d54a354edad279e5bb2f1ef2cfba0742e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c3cda381c7dec4b95c20275629acc7194c68a324", "patch": "@@ -2503,7 +2503,14 @@ alpha_emit_set_const_1 (rtx target, enum machine_mode mode,\n \t}\n       else if (n >= 2 + (extra != 0))\n \t{\n-\t  temp = copy_to_suggested_reg (GEN_INT (high << 16), subtarget, mode);\n+\t  if (no_new_pseudos)\n+\t    {\n+\t      emit_insn (gen_rtx_SET (VOIDmode, target, GEN_INT (high << 16)));\n+\t      temp = target;\n+\t    }\n+\t  else\n+\t    temp = copy_to_suggested_reg (GEN_INT (high << 16),\n+\t\t\t\t\t  subtarget, mode);\n \n \t  /* As of 2002-02-23, addsi3 is only available when not optimizing.\n \t     This means that if we go through expand_binop, we'll try to"}, {"sha": "35f795306b650b2cf64b7a7a78d577e28d966fc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3cda381c7dec4b95c20275629acc7194c68a324", "patch": "@@ -1,3 +1,7 @@\n+2004-01-21  Falk Hueffner  <falk@debian.org>\n+\n+\t* gcc.c-torture/compile/20040121-1.c: New test.\n+\n 2004-01-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.dg/noncompile/20020213-1.c: Add another dg-warning line."}, {"sha": "2039472fd4ebdd65420a767773eef3bb60786488", "filename": "gcc/testsuite/gcc.c-torture/compile/20040121-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040121-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cda381c7dec4b95c20275629acc7194c68a324/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040121-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040121-1.c?ref=c3cda381c7dec4b95c20275629acc7194c68a324", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/12898\n+   0x8000 needs multiple instructions to be emitted on Alpha; the\n+   fluff around it causes it to be emitted in a no_new_pseudos\n+   context, which triggered a problem in alpha.c.  */\n+\n+void f (const char *, ...);\n+int g (void);\n+void *p (void);\n+\n+int isymBase, ilineBase, sym_hdr, want_line, proc_desc;\n+char *lines;\n+\n+void print_file_desc (int *fdp)\n+{\n+  char *str_base = p ();\n+  int symi, pdi = g ();\n+\n+  for (symi = 0; isymBase;)\n+    {\n+      int proc_ptr = proc_desc + pdi;\n+      f(\"1\", isymBase, proc_ptr + *fdp, str_base);\n+      if (want_line && *fdp)\n+\t{\n+\t  int delta;\n+\t  long cur_line = proc_ptr;\n+\t  char *line_ptr = lines + proc_ptr;\n+\t  char *line_end = p ();\n+\n+\t  f(\"2\", sym_hdr);\n+\t  while (line_ptr < line_end)\n+\t    {\n+\t      delta = *line_ptr;\n+\t      if (delta)\n+\t\tline_ptr++;\n+\t      else\n+\t\tdelta = line_ptr[1] ^ 0x8000;\n+\t      f(\"3\", cur_line, delta);\n+\t    }\n+\t}\n+    }\n+}"}]}