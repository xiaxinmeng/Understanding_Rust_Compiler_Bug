{"sha": "733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzYmRmYmQ2ODgxYTJjMWQxYmIwMmFiMTViZmNkNjA2ZjcyZWU5NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-09T14:18:51Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-09T14:18:51Z"}, "message": "avr-protos.h (function_arg): Delete.\n\n\t* config/avr/avr-protos.h (function_arg): Delete.\n\t(function_arg_advance): Delete.\n\t* config/avr/avr.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/avr/avr.c (function_arg): Rename to...\n\t(avr_function_arg): ...this.  Make static.  Take a const_tree and\n\ta bool.\n\t(function_arg_advance):\tRename to...\n\t(avr_function_arg_advance): ...this.  Make static.  Take a\n\tconst_tree and a bool.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165226", "tree": {"sha": "2ec4e06ec24a8cfd7eb930a0b2916e0963f1a09a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ec4e06ec24a8cfd7eb930a0b2916e0963f1a09a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/comments", "author": null, "committer": null, "parents": [{"sha": "0c3a9758c0dddf055d4b1ff2350df0db80c78b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3a9758c0dddf055d4b1ff2350df0db80c78b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3a9758c0dddf055d4b1ff2350df0db80c78b0b"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "6ad88a007e3ebeff032327ba35be14b0e57f5f69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "patch": "@@ -1,3 +1,16 @@\n+2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/avr/avr-protos.h (function_arg): Delete.\n+\t(function_arg_advance): Delete.\n+\t* config/avr/avr.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/avr/avr.c (function_arg): Rename to...\n+\t(avr_function_arg): ...this.  Make static.  Take a const_tree and\n+\ta bool.\n+\t(function_arg_advance):\tRename to...\n+\t(avr_function_arg_advance): ...this.  Make static.  Take a\n+\tconst_tree and a bool.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/alpha/alpha-protos.h (function_arg): Delete."}, {"sha": "3d717a2c0db8de17557a4d654cbefdc94d119c49", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "patch": "@@ -42,15 +42,8 @@ extern int avr_progmem_p (tree decl, tree attributes);\n #ifdef RTX_CODE /* inside TREE_CODE */\n extern void init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t\t\t\t  rtx libname, tree fndecl);\n-extern rtx function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t tree type, int named);\n #endif /* RTX_CODE inside TREE_CODE */\n \n-#ifdef HAVE_MACHINE_MODES /* inside TREE_CODE */\n-extern void function_arg_advance (CUMULATIVE_ARGS *cum,\n-\t\t\t\t  enum machine_mode mode, tree type,\n-\t\t\t\t  int named);\n-#endif /* HAVE_MACHINE_MODES inside TREE_CODE*/\n #endif /* TREE_CODE */\n \n #ifdef RTX_CODE"}, {"sha": "c1cd7782224e78c5ca371ed087454f5d9f0de1d9", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "patch": "@@ -93,6 +93,10 @@ static unsigned int avr_case_values_threshold (void);\n static bool avr_frame_pointer_required_p (void);\n static bool avr_can_eliminate (const int, const int);\n static bool avr_class_likely_spilled_p (reg_class_t c);\n+static rtx avr_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static void avr_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -168,6 +172,10 @@ static const struct attribute_spec avr_attribute_table[] =\n #define TARGET_ADDRESS_COST avr_address_cost\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG avr_reorg\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG avr_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE avr_function_arg_advance\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS avr_legitimize_address\n@@ -1566,9 +1574,9 @@ avr_num_arg_regs (enum machine_mode mode, tree type)\n /* Controls whether a function argument is passed\n    in a register, and which register.  */\n \n-rtx\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n-\t      int named ATTRIBUTE_UNUSED)\n+static rtx\n+avr_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int bytes = avr_num_arg_regs (mode, type);\n \n@@ -1581,9 +1589,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n /* Update the summarizer variable CUM to advance past an argument\n    in the argument list.  */\n    \n-void\n-function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n-\t\t      int named ATTRIBUTE_UNUSED)\n+static void\n+avr_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int bytes = avr_num_arg_regs (mode, type);\n "}, {"sha": "3c7c4a4b50dbdd6a5d57b0c51a4903e23982cfd1", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=733bdfbd6881a2c1d1bb02ab15bfcd606f72ee94", "patch": "@@ -372,8 +372,6 @@ enum reg_class {\n    for POST_DEC targets (PR27386).  */\n /*#define PUSH_ROUNDING(NPUSHED) (NPUSHED)*/\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) (function_arg (&(CUM), MODE, TYPE, NAMED))\n-\n typedef struct avr_args {\n   int nregs;\t\t\t/* # registers available for passing */\n   int regno;\t\t\t/* next available register number */\n@@ -382,9 +380,6 @@ typedef struct avr_args {\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   init_cumulative_args (&(CUM), FNTYPE, LIBNAME, FNDECL)\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-  (function_arg_advance (&CUM, MODE, TYPE, NAMED))\n-\n #define FUNCTION_ARG_REGNO_P(r) function_arg_regno_p(r)\n \n extern int avr_reg_order[];"}]}