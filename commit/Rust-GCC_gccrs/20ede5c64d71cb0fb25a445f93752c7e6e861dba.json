{"sha": "20ede5c64d71cb0fb25a445f93752c7e6e861dba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlZGU1YzY0ZDcxY2IwZmIyNWE0NDVmOTM3NTJjN2U2ZTg2MWRiYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-08T10:51:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-08T10:51:46Z"}, "message": "re PR tree-optimization/44861 (internal compiler error: in vectorizable_load, at tree-vect-stmts.c:3812)\n\n2010-07-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44861\n\t* tree-vect-stmts.c (vectorizable_store): Preserve TBAA\n\tinformation when building MEM_REFs.\n\t(vectorizable_load): Likewise.\n\t* tree-vect-data-refs.c (vect_setup_realignment): Likewise.\n\n\t* g++.dg/vect/pr44861.cc: New testcase.\n\nFrom-SVN: r161949", "tree": {"sha": "4b2f3b444ba0daa29aed751a241ee827c39679dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b2f3b444ba0daa29aed751a241ee827c39679dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20ede5c64d71cb0fb25a445f93752c7e6e861dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ede5c64d71cb0fb25a445f93752c7e6e861dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ede5c64d71cb0fb25a445f93752c7e6e861dba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ede5c64d71cb0fb25a445f93752c7e6e861dba/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80edb36cfdf779f56fb5a5c001df4dfecaeb25b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80edb36cfdf779f56fb5a5c001df4dfecaeb25b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80edb36cfdf779f56fb5a5c001df4dfecaeb25b2"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "0d84f29d58795699c19c3a0c1a1a33cc2eba3298", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20ede5c64d71cb0fb25a445f93752c7e6e861dba", "patch": "@@ -1,3 +1,11 @@\n+2010-07-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44861\n+\t* tree-vect-stmts.c (vectorizable_store): Preserve TBAA\n+\tinformation when building MEM_REFs.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vect-data-refs.c (vect_setup_realignment): Likewise.\n+\n 2010-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sol2-c.c: Do not include diagnostic-core.h."}, {"sha": "d332dc4a9605fb40146f7019272877f15b1b03c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20ede5c64d71cb0fb25a445f93752c7e6e861dba", "patch": "@@ -1,3 +1,8 @@\n+2010-07-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44861\n+\t* g++.dg/vect/pr44861.cc: New testcase.\n+\n 2010-07-07  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR middle-end/44828"}, {"sha": "07c59a1382d1a410e92abcf57986278a19b0b05b", "filename": "gcc/testsuite/g++.dg/vect/pr44861.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr44861.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr44861.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr44861.cc?ref=20ede5c64d71cb0fb25a445f93752c7e6e861dba", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+bool f();\n+\n+struct counted_base {\n+    virtual void destroy() { }\n+    void release() { if (f()) destroy(); }\n+};\n+\n+struct shared_count {\n+    shared_count() { }\n+    ~shared_count() { if (pi) pi->release(); }\n+    shared_count(shared_count& r) : pi(r.pi) { if (pi) pi->release(); }\n+    counted_base* pi;\n+};\n+\n+struct Foo;\n+\n+struct shared_ptr  {\n+    Foo& operator*() { return *ptr; }\n+    Foo* ptr;\n+    shared_count refcount;\n+};\n+\n+struct Bar {\n+    Bar(Foo&, shared_ptr);\n+};\n+\n+void g() {\n+    shared_ptr foo;\n+    new Bar(*foo, foo);\n+}\n+\n+// { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "efd95a78acb75626bb38e6eef74b7000d5788a30", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=20ede5c64d71cb0fb25a445f93752c7e6e861dba", "patch": "@@ -3466,6 +3466,7 @@ vect_setup_realignment (gimple stmt, gimple_stmt_iterator *gsi,\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n+  struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   edge pe;\n   tree scalar_dest = gimple_assign_lhs (stmt);\n@@ -3574,7 +3575,9 @@ vect_setup_realignment (gimple stmt, gimple_stmt_iterator *gsi,\n       gimple_assign_set_lhs (new_stmt, new_temp);\n       new_bb = gsi_insert_on_edge_immediate (pe, new_stmt);\n       gcc_assert (!new_bb);\n-      data_ref = build_simple_mem_ref (new_temp);\n+      data_ref\n+\t= build2 (MEM_REF, TREE_TYPE (vec_dest), new_temp,\n+\t\t  build_int_cst (reference_alias_ptr_type (DR_REF (dr)), 0));\n       new_stmt = gimple_build_assign (vec_dest, data_ref);\n       new_temp = make_ssa_name (vec_dest, new_stmt);\n       gimple_assign_set_lhs (new_stmt, new_temp);"}, {"sha": "bf9ae73a30be8dfd51aedbcd07ea9a84f474c094", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ede5c64d71cb0fb25a445f93752c7e6e861dba/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=20ede5c64d71cb0fb25a445f93752c7e6e861dba", "patch": "@@ -3360,7 +3360,10 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    vec_oprnd = VEC_index (tree, result_chain, i);\n \n           if (aligned_access_p (first_dr))\n-\t    data_ref = build_simple_mem_ref (dataref_ptr);\n+\t    data_ref\n+\t      = build2 (MEM_REF, TREE_TYPE (vec_oprnd), dataref_ptr,\n+\t\t\tbuild_int_cst (reference_alias_ptr_type\n+\t\t\t\t         (DR_REF (first_dr)), 0));\n           else\n           {\n             int mis = DR_MISALIGNMENT (first_dr);\n@@ -3738,7 +3741,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    {\n \t    case dr_aligned:\n \t      gcc_assert (aligned_access_p (first_dr));\n-\t      data_ref = build_simple_mem_ref (dataref_ptr);\n+\t      data_ref\n+\t\t= build2 (MEM_REF, vectype, dataref_ptr,\n+\t\t\t  build_int_cst (reference_alias_ptr_type\n+\t\t\t\t\t   (DR_REF (first_dr)), 0));\n \t      break;\n \t    case dr_unaligned_supported:\n \t      {\n@@ -3769,7 +3775,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\tptr = make_ssa_name (SSA_NAME_VAR (dataref_ptr), new_stmt);\n \t\tgimple_assign_set_lhs (new_stmt, ptr);\n \t\tvect_finish_stmt_generation (stmt, new_stmt, gsi);\n-\t\tdata_ref = build_simple_mem_ref (ptr);\n+\t\tdata_ref\n+\t\t  = build2 (MEM_REF, vectype, ptr,\n+\t\t\t    build_int_cst (reference_alias_ptr_type\n+\t\t\t\t\t     (DR_REF (first_dr)), 0));\n \t\tvec_dest = vect_create_destination_var (scalar_dest, vectype);\n \t\tnew_stmt = gimple_build_assign (vec_dest, data_ref);\n \t\tnew_temp = make_ssa_name (vec_dest, new_stmt);\n@@ -3790,7 +3799,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\tptr = make_ssa_name (SSA_NAME_VAR (dataref_ptr), new_stmt);\n \t\tgimple_assign_set_lhs (new_stmt, ptr);\n \t\tvect_finish_stmt_generation (stmt, new_stmt, gsi);\n-\t        data_ref = build_simple_mem_ref (ptr);\n+\t\tdata_ref\n+\t\t  = build2 (MEM_REF, vectype, ptr,\n+\t\t\t    build_int_cst (reference_alias_ptr_type\n+\t\t\t\t\t     (DR_REF (first_dr)), 0));\n \t        break;\n \t      }\n \t    case dr_explicit_realign_optimized:\n@@ -3802,7 +3814,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      new_temp = make_ssa_name (SSA_NAME_VAR (dataref_ptr), new_stmt);\n \t      gimple_assign_set_lhs (new_stmt, new_temp);\n \t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n-\t      data_ref = build_simple_mem_ref (new_temp);\n+\t      data_ref\n+\t\t= build2 (MEM_REF, vectype, new_temp,\n+\t\t\t  build_int_cst (reference_alias_ptr_type\n+\t\t\t\t\t   (DR_REF (first_dr)), 0));\n \t      break;\n \t    default:\n \t      gcc_unreachable ();"}]}