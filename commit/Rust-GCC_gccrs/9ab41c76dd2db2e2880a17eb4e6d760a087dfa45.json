{"sha": "9ab41c76dd2db2e2880a17eb4e6d760a087dfa45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiNDFjNzZkZDJkYjJlMjg4MGExN2ViNGU2ZDc2MGEwODdkZmE0NQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2015-01-21T17:53:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-01-21T17:53:04Z"}, "message": "rtlanal.c (subreg_get_info): Exit early for simple and common cases.\n\ngcc/\n2015-01-25  Alan Hayward  <alan.hayward@arm.com>\n\n\t* rtlanal.c (subreg_get_info): Exit early for simple and common\n\tcases.\n\nFrom-SVN: r219957", "tree": {"sha": "bf54cac754967f41ce3094b4f89e52d598f739ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf54cac754967f41ce3094b4f89e52d598f739ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "122a5d603b4c67952fb32742775e8a3a478c2075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122a5d603b4c67952fb32742775e8a3a478c2075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/122a5d603b4c67952fb32742775e8a3a478c2075"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "40422a38d54511a7da6c047a55ba83008bbc06ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ab41c76dd2db2e2880a17eb4e6d760a087dfa45", "patch": "@@ -1,3 +1,8 @@\n+2015-01-21  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* rtlanal.c (subreg_get_info): Exit early for simple and common\n+\tcases.\n+\n 2015-01-21  Richard Henderson  <rth@redhat.com>\n \n \tPR target/64669"}, {"sha": "743aad6705cad5c764b2ae60e9b93a153145808a", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab41c76dd2db2e2880a17eb4e6d760a087dfa45/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=9ab41c76dd2db2e2880a17eb4e6d760a087dfa45", "patch": "@@ -3440,6 +3440,22 @@ subreg_get_info (unsigned int xregno, machine_mode xmode,\n \t  info->offset = offset / regsize_xmode;\n \t  return;\n \t}\n+      /* Quick exit for the simple and common case of extracting whole\n+\t subregisters from a multiregister value.  */\n+      /* ??? It would be better to integrate this into the code below,\n+\t if we can generalize the concept enough and figure out how\n+\t odd-sized modes can coexist with the other weird cases we support.  */\n+      if (!rknown\n+\t  && WORDS_BIG_ENDIAN == REG_WORDS_BIG_ENDIAN\n+\t  && regsize_xmode == regsize_ymode\n+\t  && (offset % regsize_ymode) == 0)\n+\t{\n+\t  info->representable_p = true;\n+\t  info->nregs = nregs_ymode;\n+\t  info->offset = offset / regsize_ymode;\n+\t  gcc_assert (info->offset + info->nregs <= nregs_xmode);\n+\t  return;\n+\t}\n     }\n \n   /* Lowpart subregs are otherwise valid.  */"}]}