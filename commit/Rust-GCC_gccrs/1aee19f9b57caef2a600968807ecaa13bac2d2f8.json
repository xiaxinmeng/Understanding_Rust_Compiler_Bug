{"sha": "1aee19f9b57caef2a600968807ecaa13bac2d2f8", "node_id": "C_kwDOANBUbNoAKDFhZWUxOWY5YjU3Y2FlZjJhNjAwOTY4ODA3ZWNhYTEzYmFjMmQyZjg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-04-15T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-04-15T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "ff56b15a7f457e36436ad72c566e02fb7592fec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff56b15a7f457e36436ad72c566e02fb7592fec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aee19f9b57caef2a600968807ecaa13bac2d2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aee19f9b57caef2a600968807ecaa13bac2d2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aee19f9b57caef2a600968807ecaa13bac2d2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aee19f9b57caef2a600968807ecaa13bac2d2f8/comments", "author": null, "committer": null, "parents": [{"sha": "fa4cb42870df60deb8888dbd51e2ddc6d6ab9e6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4cb42870df60deb8888dbd51e2ddc6d6ab9e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4cb42870df60deb8888dbd51e2ddc6d6ab9e6a"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "7f6764a5f967d65b3c40b1b1c8d0ea181d29845d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aee19f9b57caef2a600968807ecaa13bac2d2f8", "patch": "@@ -1,3 +1,25 @@\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109502\n+\t* tree-vect-stmts.cc (vectorizable_assignment): Fix\n+\tcheck for conversion between mask and non-mask types.\n+\n+2023-04-14  Jeff Law  <jlaw@ventanamicro.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108947\n+\tPR target/109040\n+\t* combine.cc (simplify_and_const_int_1): Compute nonzero_bits in\n+\tword_mode rather than mode if WORD_REGISTER_OPERATIONS and mode is\n+\tsmaller than word_mode.\n+\t* simplify-rtx.cc (simplify_context::simplify_binary_operation_1)\n+\t<case AND>: Likewise.\n+\n+2023-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* loop-iv.cc (iv_number_of_iterations): Use gen_int_mode instead\n+\tof GEN_INT.\n+\n 2023-04-13  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/108139"}, {"sha": "0643a1b91022ec10690078b3332e3d52c37bb8d0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1aee19f9b57caef2a600968807ecaa13bac2d2f8", "patch": "@@ -1 +1 @@\n-20230414\n+20230415"}, {"sha": "ec41eeca7161bbec4b6c919837cb563e86d9785f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1aee19f9b57caef2a600968807ecaa13bac2d2f8", "patch": "@@ -1,3 +1,10 @@\n+2023-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/109510\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <types>: Reset align\n+\tto zero if its value is equal to TYPE_ALIGN and the type is scalar.\n+\tSet TYPE_USER_ALIGN on the type only if align is positive.\n+\n 2023-03-06  Javier Miranda  <miranda@adacore.com>\n \n \tPR ada/108858"}, {"sha": "4fa083acf3c645fc0d9a8e51605b3344e4a97637", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1aee19f9b57caef2a600968807ecaa13bac2d2f8", "patch": "@@ -1,3 +1,19 @@\n+2023-04-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/109511\n+\t* simplify.cc (gfc_simplify_set_exponent): Fix implementation of\n+\tcompile-time simplification of intrinsic SET_EXPONENT for argument\n+\tX < 1 and for I < 0.\n+\n+2023-04-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/104272\n+\t* gfortran.h : Add expr3_not_explicit bit field to gfc_code.\n+\t* resolve.cc (resolve_allocate_expr): Set bit field when the\n+\tdefault initializer is applied to expr3.\n+\t* trans-stmt.cc (gfc_trans_allocate): If expr3_not_explicit is\n+\tset, do not deallocate expr3.\n+\n 2023-04-13  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/109492"}, {"sha": "00060c40cc44ff2a5b5edf99d976cbb94dc6b49c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aee19f9b57caef2a600968807ecaa13bac2d2f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aee19f9b57caef2a600968807ecaa13bac2d2f8", "patch": "@@ -1,3 +1,50 @@\n+2023-04-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/109511\n+\t* gfortran.dg/set_exponent_1.f90: New test.\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-simd-clone-16e.c: Revert back to\n+\tchecking avx_runtime in dump scanning.\n+\t* gcc.dg/vect/vect-simd-clone-17e.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18e.c: Likewise.\n+\n+2023-04-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/104272\n+\t* gfortran.dg/class_result_8.f90 : Number of builtin_frees down\n+\tfrom 6 to 5 without memory leaks.\n+\t* gfortran.dg/finalize_52.f90: New test\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109502\n+\t* gcc.dg/vect/pr109502.c: New testcase.\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-simd-clone-16e.c: Fix x86 lp64 checking\n+\tand add missing avx guard.\n+\t* gcc.dg/vect/vect-simd-clone-17e.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18e.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-16f.c: Fix x86 lp64 checking.\n+\t* gcc.dg/vect/vect-simd-clone-17f.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18f.c: Likewise.\n+\n+2023-04-14  Jeff Law  <jlaw@ventanamicro.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108947\n+\tPR target/109040\n+\t* gcc.dg/pr108947.c: New test.\n+\t* gcc.c-torture/execute/pr109040.c: New test.\n+\n+2023-04-14  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR analyzer/108722\n+\t* gcc.dg/analyzer/file-CWE-1341-example.c: Update.\n+\n 2023-04-13  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/109420"}, {"sha": "72fcf35baaa97f6bafffce81a341ebf57faf06c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aee19f9b57caef2a600968807ecaa13bac2d2f8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aee19f9b57caef2a600968807ecaa13bac2d2f8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1aee19f9b57caef2a600968807ecaa13bac2d2f8", "patch": "@@ -1,3 +1,94 @@\n+2023-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (const_iterator_t): Define for C++23.\n+\t(const_sentinel_t): Likewise.\n+\t(range_const_reference_t): Likewise.\n+\t(constant_range): Likewise.\n+\t(__cust_access::__possibly_const_range): Likewise, replacing ...\n+\t(__cust_access::__as_const): ... this.\n+\t(__cust_access::_CBegin::operator()): Redefine for C++23 as per P2278R4.\n+\t(__cust_access::_CEnd::operator()): Likewise.\n+\t(__cust_access::_CRBegin::operator()): Likewise.\n+\t(__cust_access::_CREnd::operator()): Likewise.\n+\t(__cust_access::_CData::operator()): Likewise.\n+\t* include/bits/ranges_util.h (ranges::__detail::__different_from):\n+\tMake it an alias of std::__detail::__different_from.\n+\t(view_interface::cbegin): Define for C++23.\n+\t(view_interface::cend): Likewise.\n+\t* include/bits/stl_iterator.h (__detail::__different_from): Define.\n+\t(iter_const_reference_t): Define for C++23.\n+\t(__detail::__constant_iterator): Likewise.\n+\t(__detail::__is_const_iterator): Likewise.\n+\t(__detail::__not_a_const_iterator): Likewise.\n+\t(__detail::__iter_const_rvalue_reference_t): Likewise.\n+\t(__detail::__basic_const_iter_cat):: Likewise.\n+\t(const_iterator): Likewise.\n+\t(__detail::__const_sentinel): Likewise.\n+\t(const_sentinel): Likewise.\n+\t(basic_const_iterator): Likewise.\n+\t(common_type<basic_const_iterator<_Tp>, _Up>): Likewise.\n+\t(common_type<_Up, basic_const_iterator<_Tp>>): Likewise.\n+\t(common_type<basic_const_iterator<_Tp>, basic_const_iterator<Up>>):\n+\tLikewise.\n+\t(make_const_iterator): Define for C++23.\n+\t(make_const_sentinel): Likewise.\n+\t* include/std/ranges (__cpp_lib_ranges_as_const): Likewise.\n+\t(as_const_view): Likewise.\n+\t(enable_borrowed_range<as_const_view>): Likewise.\n+\t(views::__detail::__is_ref_view): Likewise.\n+\t(views::__detail::__can_is_const_view): Likewise.\n+\t(views::_AsConst, views::as_const): Likewise.\n+\t* include/std/span (span::const_iterator): Likewise.\n+\t(span::const_reverse_iterator): Likewise.\n+\t(span::cbegin): Likewise.\n+\t(span::cend): Likewise.\n+\t(span::crbegin): Likewise.\n+\t(span::crend): Likewise.\n+\t* include/std/version (__cpp_lib_ranges_as_const): Likewise.\n+\t* testsuite/std/ranges/adaptors/join.cc (test06): Adjust to\n+\tbehave independently of C++20 vs C++23.\n+\t* testsuite/std/ranges/version_c++23.cc: Verify value of\n+\t__cpp_lib_ranges_as_const macro.\n+\t* testsuite/24_iterators/const_iterator/1.cc: New test.\n+\t* testsuite/std/ranges/adaptors/as_const/1.cc: New test.\n+\n+2023-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (__cust_access::__as_const)\n+\t(__cust_access::_CBegin, __cust::cbegin)\n+\t(__cust_access::_CEnd, __cust::cend)\n+\t(__cust_access::_CRBegin, __cust::crbegin)\n+\t(__cust_access::_CREnd, __cust::crend)\n+\t(__cust_access::_CData, __cust::cdata): Move down definitions to\n+\tshortly after the definition of input_range.\n+\n+2023-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h: Include <optional> for C++23.\n+\t(__cpp_lib_fold): Define for C++23.\n+\t(in_value_result): Likewise.\n+\t(__detail::__flipped): Likewise.\n+\t(__detail::__indirectly_binary_left_foldable_impl): Likewise.\n+\t(__detail::__indirectly_binary_left_foldable): Likewise.\n+\t(___detail:__indirectly_binary_right_foldable): Likewise.\n+\t(fold_left_with_iter_result): Likewise.\n+\t(__fold_left_with_iter_fn, fold_left_with_iter): Likewise.\n+\t(__fold_left_fn, fold_left): Likewise.\n+\t(__fold_left_first_with_iter_fn, fold_left_first_with_iter):\n+\tLikewise.\n+\t(__fold_left_first_fn, fold_left_first): Likewise.\n+\t(__fold_right_fn, fold_right): Likewise.\n+\t(__fold_right_last_fn, fold_right_last): Likewise.\n+\t* include/std/version (__cpp_lib_fold): Likewise.\n+\t* testsuite/25_algorithms/fold_left/1.cc: New test.\n+\t* testsuite/25_algorithms/fold_right/1.cc: New test.\n+\n+2023-04-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format (formatter): Add comment to deleted default\n+\tconstructor of primary template.\n+\t(_Checking_scanner): Add static_assert.\n+\n 2023-04-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/using.xml: Document libstdc++exp.a library."}]}