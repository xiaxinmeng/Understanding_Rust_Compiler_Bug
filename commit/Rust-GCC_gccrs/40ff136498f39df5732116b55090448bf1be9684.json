{"sha": "40ff136498f39df5732116b55090448bf1be9684", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmZjEzNjQ5OGYzOWRmNTczMjExNmI1NTA5MDQ0OGJmMWJlOTY4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-10T08:25:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-10T08:25:31Z"}, "message": "re PR ipa/44563 (GCC uses a lot of RAM when compiling a large numbers of functions)\n\n2015-03-10  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/44563\n\t* cgraph.h (struct cgraph_edge_hasher): Add hash overload\n\tfor compare_type.\n\t* cgraph.c (cgraph_edge_hasher::hash): Inline htab_hash_pointer.\n\t(cgraph_update_edge_in_call_site_hash): Use cgraph_edge_hasher::hash.\n\t(cgraph_add_edge_to_call_site_hash): Likewise.\n\t(cgraph_node::get_edge): Likewise.\n\t(cgraph_edge::set_call_stmt): Likewise.\n\t(cgraph_edge::remove_caller): Likewise.\n\nFrom-SVN: r221308", "tree": {"sha": "d1de264ae6e54268322deca2976d4fa689a77be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1de264ae6e54268322deca2976d4fa689a77be6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40ff136498f39df5732116b55090448bf1be9684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ff136498f39df5732116b55090448bf1be9684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ff136498f39df5732116b55090448bf1be9684", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ff136498f39df5732116b55090448bf1be9684/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c457f75178f02049189b3369af3d5ee95adaa166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c457f75178f02049189b3369af3d5ee95adaa166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c457f75178f02049189b3369af3d5ee95adaa166"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "84170fb5ceb839c5f21c6f1d6d39d73a898d9ead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ff136498f39df5732116b55090448bf1be9684/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ff136498f39df5732116b55090448bf1be9684/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40ff136498f39df5732116b55090448bf1be9684", "patch": "@@ -1,3 +1,15 @@\n+2015-03-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/44563\n+\t* cgraph.h (struct cgraph_edge_hasher): Add hash overload\n+\tfor compare_type.\n+\t* cgraph.c (cgraph_edge_hasher::hash): Inline htab_hash_pointer.\n+\t(cgraph_update_edge_in_call_site_hash): Use cgraph_edge_hasher::hash.\n+\t(cgraph_add_edge_to_call_site_hash): Likewise.\n+\t(cgraph_node::get_edge): Likewise.\n+\t(cgraph_edge::set_call_stmt): Likewise.\n+\t(cgraph_edge::remove_caller): Likewise.\n+\n 2015-03-10  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.h (callee_saved_regs_size): Rename to ..."}, {"sha": "5ca19015a3dc2693304390be87c6d3cf442d180e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ff136498f39df5732116b55090448bf1be9684/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ff136498f39df5732116b55090448bf1be9684/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=40ff136498f39df5732116b55090448bf1be9684", "patch": "@@ -663,7 +663,19 @@ cgraph_node::get_for_asmname (tree asmname)\n hashval_t\n cgraph_edge_hasher::hash (cgraph_edge *e)\n {\n-  return htab_hash_pointer (e->call_stmt);\n+  /* This is a really poor hash function, but it is what htab_hash_pointer\n+     uses.  */\n+  return (hashval_t) ((intptr_t)e->call_stmt >> 3);\n+}\n+\n+/* Returns a hash value for X (which really is a cgraph_edge).  */\n+\n+hashval_t\n+cgraph_edge_hasher::hash (gimple call_stmt)\n+{\n+  /* This is a really poor hash function, but it is what htab_hash_pointer\n+     uses.  */\n+  return (hashval_t) ((intptr_t)call_stmt >> 3);\n }\n \n /* Return nonzero if the call_stmt of of cgraph_edge X is stmt *Y.  */\n@@ -680,9 +692,8 @@ static inline void\n cgraph_update_edge_in_call_site_hash (cgraph_edge *e)\n {\n   gimple call = e->call_stmt;\n-  *e->caller->call_site_hash->find_slot_with_hash (call,\n-\t\t\t\t\t\t   htab_hash_pointer (call),\n-\t\t\t\t\t\t   INSERT) = e;\n+  *e->caller->call_site_hash->find_slot_with_hash\n+      (call, cgraph_edge_hasher::hash (call), INSERT) = e;\n }\n \n /* Add call graph edge E to call site hash of its caller.  */\n@@ -695,8 +706,7 @@ cgraph_add_edge_to_call_site_hash (cgraph_edge *e)\n   if (e->speculative && e->indirect_unknown_callee)\n     return;\n   cgraph_edge **slot = e->caller->call_site_hash->find_slot_with_hash\n-\t\t\t\t   (e->call_stmt,\n-\t\t\t\t    htab_hash_pointer (e->call_stmt), INSERT);\n+      (e->call_stmt, cgraph_edge_hasher::hash (e->call_stmt), INSERT);\n   if (*slot)\n     {\n       gcc_assert (((cgraph_edge *)*slot)->speculative);\n@@ -718,8 +728,8 @@ cgraph_node::get_edge (gimple call_stmt)\n   int n = 0;\n \n   if (call_site_hash)\n-    return call_site_hash->find_with_hash (call_stmt,\n-\t\t\t\t\t   htab_hash_pointer (call_stmt));\n+    return call_site_hash->find_with_hash\n+\t(call_stmt, cgraph_edge_hasher::hash (call_stmt));\n \n   /* This loop may turn out to be performance problem.  In such case adding\n      hashtables into call nodes with very many edges is probably best\n@@ -782,7 +792,7 @@ cgraph_edge::set_call_stmt (gcall *new_stmt, bool update_speculative)\n       && (!speculative || !indirect_unknown_callee))\n     {\n       caller->call_site_hash->remove_elt_with_hash\n-\t(call_stmt, htab_hash_pointer (call_stmt));\n+\t(call_stmt, cgraph_edge_hasher::hash (call_stmt));\n     }\n \n   cgraph_edge *e = this;\n@@ -987,8 +997,8 @@ cgraph_edge::remove_caller (void)\n \tcaller->callees = next_callee;\n     }\n   if (caller->call_site_hash)\n-    caller->call_site_hash->remove_elt_with_hash (call_stmt,\n-\t\t\t\t\t\t  htab_hash_pointer (call_stmt));\n+    caller->call_site_hash->remove_elt_with_hash\n+\t(call_stmt, cgraph_edge_hasher::hash (call_stmt));\n }\n \n /* Put the edge onto the free list.  */"}, {"sha": "99af026d2d715d85984a5b55ccce91dcf8f0c698", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ff136498f39df5732116b55090448bf1be9684/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ff136498f39df5732116b55090448bf1be9684/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=40ff136498f39df5732116b55090448bf1be9684", "patch": "@@ -788,6 +788,7 @@ struct cgraph_edge_hasher : ggc_hasher<cgraph_edge *>\n   typedef gimple compare_type;\n \n   static hashval_t hash (cgraph_edge *);\n+  static hashval_t hash (gimple);\n   static bool equal (cgraph_edge *, gimple);\n };\n "}]}