{"sha": "b3924be9712d2b49b59048aff6ba5d288227c40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM5MjRiZTk3MTJkMmI0OWI1OTA0OGFmZjZiYTVkMjg4MjI3YzQwYw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2008-05-16T16:02:02Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2008-05-16T16:02:02Z"}, "message": "re PR tree-optimization/36228 (redundant runtime check while vectorizing)\n\n2008-05-16  Sebastian Pop  <sebastian.pop@amd.com>\n\t    Jan Sjodin  <jan.sjodin@amd.com>\n\n\tPR tree-optimization/36228\n\t* tree-data-ref.c (initialize_data_dependence_relation): Fast dependence\n\ttest when the references are the same, call compute_self_dependence.\n\t* tree-data-ref.h (struct data_dependence_relation): Add self_reference_p.\n\t(DDR_SELF_REFERENCE): New.\n\n\t* testsuite/gcc.dg/vect/pr36228.c: New.\n\n\nCo-Authored-By: Jan Sjodin <jan.sjodin@amd.com>\n\nFrom-SVN: r135426", "tree": {"sha": "3a23f8dccec8694c7100a8d3bb896105dd71f2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a23f8dccec8694c7100a8d3bb896105dd71f2a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3924be9712d2b49b59048aff6ba5d288227c40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3924be9712d2b49b59048aff6ba5d288227c40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3924be9712d2b49b59048aff6ba5d288227c40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3924be9712d2b49b59048aff6ba5d288227c40c/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7971f01cf2b0709995c7249e6c21a38acc5f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7971f01cf2b0709995c7249e6c21a38acc5f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7971f01cf2b0709995c7249e6c21a38acc5f7b"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "b79156c5d87d0d8a0f2bebc065bc588a1b6bb37b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3924be9712d2b49b59048aff6ba5d288227c40c", "patch": "@@ -1,3 +1,9 @@\n+2008-05-16  Sebastian Pop  <sebastian.pop@amd.com>\n+\t    Jan Sjodin  <jan.sjodin@amd.com>\n+\n+\tPR tree-optimization/36228\n+\t* gcc.dg/vect/pr36228.c: New.\n+\n 2008-05-16  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gfortran.dg/f2003_io_4.f03, gfortran.dg/f2003_io_5.f03,"}, {"sha": "73933754cfb1b4392d358ade1c7433d93ec6fa60", "filename": "gcc/testsuite/gcc.dg/vect/pr36228.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr36228.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr36228.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr36228.c?ref=b3924be9712d2b49b59048aff6ba5d288227c40c", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-vect-details\" } */\n+\n+#define COLS         8\n+#define ROWS         8\n+\n+int\n+t_run_test(void);\n+\n+int\n+t_run_test()\n+{\n+     int k_1,i_1, j_1;\n+     static signed char f_1[ROWS][COLS] ;\n+     static long F_1[ROWS][COLS] ;\n+     long cosMatrixA[ROWS][COLS] ;\n+\n+     for( k_1 = 0 ; k_1 < COLS ; k_1++ )\n+        {\n+            for( i_1 = 0 ; i_1 < ROWS ; i_1++ )\n+            {\n+                for( j_1 = 0 ; j_1 < COLS ; j_1++ )\n+                    F_1[i_1][j_1] += f_1[i_1][k_1] * cosMatrixA[k_1][j_1] ;\n+            }\n+        }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"versioning for alias required\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7e9c99fc53a9b69f87098c3b8eea9d34d997c18a", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=b3924be9712d2b49b59048aff6ba5d288227c40c", "patch": "@@ -1265,6 +1265,8 @@ dr_may_alias_p (const struct data_reference *a, const struct data_reference *b)\n   return true;\n }\n \n+static void compute_self_dependence (struct data_dependence_relation *);\n+\n /* Initialize a data dependence relation between data accesses A and\n    B.  NB_LOOPS is the number of loops surrounding the references: the\n    size of the classic distance/direction vectors.  */\n@@ -1299,6 +1301,20 @@ initialize_data_dependence_relation (struct data_reference *a,\n       return res;\n     }\n \n+  /* When the references are exactly the same, don't spend time doing\n+     the data dependence tests, just initialize the ddr and return.  */\n+  if (operand_equal_p (DR_REF (a), DR_REF (b), 0))\n+    {\n+      DDR_AFFINE_P (res) = true;\n+      DDR_ARE_DEPENDENT (res) = NULL_TREE;\n+      DDR_SUBSCRIPTS (res) = VEC_alloc (subscript_p, heap, DR_NUM_DIMENSIONS (a));\n+      DDR_LOOP_NEST (res) = loop_nest;\n+      DDR_INNER_LOOP (res) = 0;\n+      DDR_SELF_REFERENCE (res) = true;\n+      compute_self_dependence (res);\n+      return res;\n+    }\n+\n   /* If the references do not access the same object, we do not know\n      whether they alias or not.  */\n   if (!operand_equal_p (DR_BASE_OBJECT (a), DR_BASE_OBJECT (b), 0))\n@@ -1324,6 +1340,7 @@ initialize_data_dependence_relation (struct data_reference *a,\n   DDR_SUBSCRIPTS (res) = VEC_alloc (subscript_p, heap, DR_NUM_DIMENSIONS (a));\n   DDR_LOOP_NEST (res) = loop_nest;\n   DDR_INNER_LOOP (res) = 0;\n+  DDR_SELF_REFERENCE (res) = false;\n \n   for (i = 0; i < DR_NUM_DIMENSIONS (a); i++)\n     {\n@@ -3798,7 +3815,8 @@ compute_affine_dependence (struct data_dependence_relation *ddr,\n     }\n \n   /* Analyze only when the dependence relation is not yet known.  */\n-  if (DDR_ARE_DEPENDENT (ddr) == NULL_TREE)\n+  if (DDR_ARE_DEPENDENT (ddr) == NULL_TREE\n+      && !DDR_SELF_REFERENCE (ddr))\n     {\n       dependence_stats.num_dependence_tests++;\n "}, {"sha": "5e668cbaf4322fe5129ba8599a1db68b1c5be7ad", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3924be9712d2b49b59048aff6ba5d288227c40c/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=b3924be9712d2b49b59048aff6ba5d288227c40c", "patch": "@@ -221,6 +221,10 @@ struct data_dependence_relation\n      a distance vector.  */\n   bool affine_p;\n \n+  /* Set to true when the dependence relation is on the same data\n+     access.  */\n+  bool self_reference_p;\n+\n   /* A \"yes/no/maybe\" field for the dependence relation:\n      \n      - when \"ARE_DEPENDENT == NULL_TREE\", there exist a dependence\n@@ -273,6 +277,7 @@ DEF_VEC_ALLOC_P(ddr_p,heap);\n    the loop nest.  */\n #define DDR_NB_LOOPS(DDR) (VEC_length (loop_p, DDR_LOOP_NEST (DDR)))\n #define DDR_INNER_LOOP(DDR) DDR->inner_loop\n+#define DDR_SELF_REFERENCE(DDR) DDR->self_reference_p\n \n #define DDR_DIST_VECTS(DDR) ((DDR)->dist_vects)\n #define DDR_DIR_VECTS(DDR) ((DDR)->dir_vects)"}]}