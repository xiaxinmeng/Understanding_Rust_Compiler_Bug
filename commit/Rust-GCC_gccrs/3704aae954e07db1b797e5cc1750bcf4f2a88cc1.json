{"sha": "3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwNGFhZTk1NGUwN2RiMWI3OTdlNWNjMTc1MGJjZjRmMmE4OGNjMQ==", "commit": {"author": {"name": "Richard Zidlicky", "email": "rz@linux-m68k.org", "date": "2004-03-16T04:12:25Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-03-16T04:12:25Z"}, "message": "config.gcc, linux.h: Implement with-cpu for m68k-linux.\n\n\t* config.gcc, config/m68k/linux.h: Implement with-cpu for m68k-linux.\n\t* longlong.h: Make code 68060 clean when compiling for m68060.\n\nFrom-SVN: r79524", "tree": {"sha": "45364d7fffff828f2ab90d8eb69bf68535809e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45364d7fffff828f2ab90d8eb69bf68535809e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/comments", "author": null, "committer": null, "parents": [{"sha": "8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac658b645c79cfb7434d55a617fe974c5b7cbe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac658b645c79cfb7434d55a617fe974c5b7cbe9"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "b5f6e95299e82c4aa9cc7f1be8c7d09b2032a6f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "patch": "@@ -1,3 +1,8 @@\n+2004-03-16 Richard Zidlicky <rz@linux-m68k.org>\n+\n+\t* config.gcc, config/m68k/linux.h: Implement with-cpu for m68k-linux.\n+\t* longlong.h: Make code 68060 clean when compiling for m68060.\n+\n 2004-03-16   Richard Zidlicky  <rz@linux-m68k.org>\n \n \t* config/m68k/m68k.md: Fix constraints for bitfield instructions."}, {"sha": "7dfadfd973cd80981ca5d4ab76101dd8ba87a22d", "filename": "gcc/config.gcc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "patch": "@@ -2302,6 +2302,20 @@ fi\n \t\tesac\n \t\t;;\n \n+\tm68k*-linux*)\n+\t\tsupported_defaults=\"cpu\"\n+\t\tcase \"$with_cpu\" in\n+\t\t\"\" | \"m68020\" | \"m68030\" | \"m68040\" | \"m68060\" | \"m68020-40\" | \"m68020-60\")\n+\t\t\t# OK\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu, known values:\"  1>&2\n+\t\t\techo \"m68020 m68030 m68040 m68060 m68020-40 m68020-60\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n+\n \thppa*-*-* | parisc*-*-*)\n \t\tsupported_defaults=\"arch schedule\"\n \n@@ -2494,6 +2508,37 @@ fi\n \t\tesac\n \t\t;;\n \n+\tm68k*-linux*)\n+\t\tcase \"x$with_cpu\" in\n+\t\tx)\n+\t\t\t# The most generic\n+\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\t;;\n+\t\txm68020)\n+\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\t;;\n+\t\txm68030)\n+\t\t\ttarget_cpu_default2=\"(MASK_68030|MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\t;;\n+\t\txm68040)\n+\t\t\ttarget_cpu_default2=\"(MASK_68040|MASK_68040_ONLY|MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\t;;\n+\t\txm68060)\n+\t\t\ttarget_cpu_default2=\"(MASK_68060|MASK_68040_ONLY|MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\t;;\n+\t\txm68020-40)\n+\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040)\"\n+\t\t\t;;\n+\t\txm68020-60)\n+\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040|MASK_68060)\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu\"  1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n+\n \thppa*-*-* | parisc*-*-*)\n \t\tif test x$gas = xyes\n \t\tthen"}, {"sha": "a5859a1d672d83bd2b3e6f29dd55b4764c2f9ae6", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "patch": "@@ -23,8 +23,14 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (68k GNU/Linux with ELF)\");\n \n-/* 68020 with 68881 */\n+/* Default target comes from config.gcc.  */\n+\n+#undef TARGET_DEFAULT\n+#ifdef TARGET_CPU_DEFAULT\n+#define TARGET_DEFAULT TARGET_CPU_DEFAULT\n+#else\n #define TARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68020)\n+#endif\n \n /* for 68k machines this only needs to be TRUE for the 68000 */\n "}, {"sha": "0f5d05ffe2d357df2d546b96670bd4839e2043f3", "filename": "gcc/longlong.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3704aae954e07db1b797e5cc1750bcf4f2a88cc1/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "patch": "@@ -415,7 +415,7 @@ UDItype __umulsidi3 (USItype, USItype);\n \t     \"g\" ((USItype) (bl)))\n \n /* The '020, '030, '040, '060 and CPU32 have 32x32->64 and 64/32->32q-32r.  */\n-#if defined (__mc68020__)\n+#if (defined (__mc68020__) && !defined (__mc68060__))\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"mulu%.l %3,%1:%0\"\t\t\t\t\t\t\\\n \t   : \"=d\" ((USItype) (w0)),\t\t\t\t\t\\\n@@ -439,8 +439,8 @@ UDItype __umulsidi3 (USItype, USItype);\n \t     \"1\" ((USItype) (n1)),\t\t\t\t\t\\\n \t     \"dmi\" ((USItype) (d)))\n \n-#else /* not mc68020 */\n-#if defined(__mcoldfire__)\n+#elif defined (__mcoldfire__) /* not mc68020 */\n+\n #define umul_ppmm(xh, xl, a, b) \\\n   __asm__ (\"| Inlined umul_ppmm\\n\"\t\t\t\t\t\\\n \t   \"\tmove%.l\t%2,%/d0\\n\"\t\t\t\t\t\\\n@@ -511,12 +511,12 @@ UDItype __umulsidi3 (USItype, USItype);\n \t   : \"d0\", \"d1\", \"d2\", \"d3\", \"d4\")\n #define UMUL_TIME 100\n #define UDIV_TIME 400\n-#endif /* not ColdFire */\n+\n #endif /* not mc68020 */\n \n /* The '020, '030, '040 and '060 have bitfield insns.\n    cpu32 disguises as a 68020, but lacks them.  */\n-#if defined (__mc68020__) && !defined(__mcpu32__)\n+#if defined (__mc68020__) && !defined (__mcpu32__)\n #define count_leading_zeros(count, x) \\\n   __asm__ (\"bfffo %1{%b2:%b2},%0\"\t\t\t\t\t\\\n \t   : \"=d\" ((USItype) (count))\t\t\t\t\t\\"}]}