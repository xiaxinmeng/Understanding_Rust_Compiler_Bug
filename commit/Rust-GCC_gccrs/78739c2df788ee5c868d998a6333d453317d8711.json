{"sha": "78739c2df788ee5c868d998a6333d453317d8711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3MzljMmRmNzg4ZWU1Yzg2OGQ5OThhNjMzM2Q0NTMzMTdkODcxMQ==", "commit": {"author": {"name": "Paul Fee", "email": "paul.f.fee@gmail.com", "date": "2021-01-25T01:18:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-26T22:11:34Z"}, "message": "c++: Add support for -std=c++23\n\nDerived from the changes that added C++2a support in 2017.\nr8-3237-g026a79f70cf33f836ea5275eda72d4870a3041e5\n\nNo C++23 features are added here.\nUse of -std=c++23 sets __cplusplus to 202100L.\n\n$ g++ -std=c++23 -dM -E -x c++ - < /dev/null | grep cplusplus\n #define __cplusplus 202100L\n\ngcc/\n\t* doc/cpp.texi (__cplusplus): Document value for -std=c++23\n\tor -std=gnu++23.\n\t* doc/invoke.texi: Document -std=c++23 and -std=gnu++23.\n\t* dwarf2out.c (highest_c_language): Recognise C++20 and C++23.\n\t(gen_compile_unit_die): Recognise C++23.\n\ngcc/c-family/\n\t* c-common.h (cxx_dialect): Add cxx23 as a dialect.\n\t* c.opt: Add options for -std=c++23, std=c++2b, -std=gnu++23\n\tand -std=gnu++2b\n\t* c-opts.c (set_std_cxx23): New.\n\t(c_common_handle_option): Set options when -std=c++23 is enabled.\n\t(c_common_post_options): Adjust comments.\n\t(set_std_cxx20): Likewise.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_c++2a):\n\tCheck for C++2a or C++23.\n\t(check_effective_target_c++20_down): New.\n\t(check_effective_target_c++23_only): New.\n\t(check_effective_target_c++23): New.\n\t* g++.dg/cpp23/cplusplus.C: New.\n\nlibcpp/\n\t* include/cpplib.h (c_lang): Add CXX23 and GNUCXX23.\n\t* init.c (lang_defaults): Add rows for CXX23 and GNUCXX23.\n\t(cpp_init_builtins): Set __cplusplus to 202100L for C++23.", "tree": {"sha": "8b2912606a50618a4c05b01ed1712f18f2a6f1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2912606a50618a4c05b01ed1712f18f2a6f1e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78739c2df788ee5c868d998a6333d453317d8711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78739c2df788ee5c868d998a6333d453317d8711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78739c2df788ee5c868d998a6333d453317d8711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78739c2df788ee5c868d998a6333d453317d8711/comments", "author": {"login": "pfee", "id": 739087, "node_id": "MDQ6VXNlcjczOTA4Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/739087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfee", "html_url": "https://github.com/pfee", "followers_url": "https://api.github.com/users/pfee/followers", "following_url": "https://api.github.com/users/pfee/following{/other_user}", "gists_url": "https://api.github.com/users/pfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfee/subscriptions", "organizations_url": "https://api.github.com/users/pfee/orgs", "repos_url": "https://api.github.com/users/pfee/repos", "events_url": "https://api.github.com/users/pfee/events{/privacy}", "received_events_url": "https://api.github.com/users/pfee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96253f069ead0736536de803b06a8053a85039a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96253f069ead0736536de803b06a8053a85039a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96253f069ead0736536de803b06a8053a85039a6"}], "stats": {"total": 121, "additions": 110, "deletions": 11}, "files": [{"sha": "f30b6c6ac33474d27939372c4529e9513804b67e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -738,7 +738,9 @@ enum cxx_dialect {\n   /* C++17 */\n   cxx17,\n   /* C++20 */\n-  cxx20\n+  cxx20,\n+  /* C++23 */\n+  cxx23\n };\n \n /* The C++ dialect being used. C++98 is the default.  */"}, {"sha": "bd15b9cd902d7b5f3d9d24e174b8fdb6d03b1e1c", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -113,6 +113,7 @@ static void set_std_cxx11 (int);\n static void set_std_cxx14 (int);\n static void set_std_cxx17 (int);\n static void set_std_cxx20 (int);\n+static void set_std_cxx23 (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n@@ -649,6 +650,12 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \tset_std_cxx20 (code == OPT_std_c__20 /* ISO */);\n       break;\n \n+    case OPT_std_c__23:\n+    case OPT_std_gnu__23:\n+      if (!preprocessing_asm_p)\n+\tset_std_cxx23 (code == OPT_std_c__23 /* ISO */);\n+      break;\n+\n     case OPT_std_c90:\n     case OPT_std_iso9899_199409:\n       if (!preprocessing_asm_p)\n@@ -1019,7 +1026,7 @@ c_common_post_options (const char **pfilename)\n \twarn_narrowing = 1;\n \n       /* Unless -f{,no-}ext-numeric-literals has been used explicitly,\n-\t for -std=c++{11,14,17,2a} default to -fno-ext-numeric-literals.  */\n+\t for -std=c++{11,14,17,20,23} default to -fno-ext-numeric-literals.  */\n       if (flag_iso && !global_options_set.x_flag_ext_numeric_literals)\n \tcpp_opts->ext_numeric_literals = 0;\n     }\n@@ -1763,7 +1770,7 @@ set_std_cxx20 (int iso)\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n-  /* C++17 includes the C11 standard library.  */\n+  /* C++20 includes the C11 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   flag_isoc11 = 1;\n@@ -1773,6 +1780,24 @@ set_std_cxx20 (int iso)\n   lang_hooks.name = \"GNU C++20\";\n }\n \n+/* Set the C++ 2023 standard (without GNU extensions if ISO).  */\n+static void\n+set_std_cxx23 (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_CXX23: CLK_GNUCXX23);\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  /* C++23 includes the C11 standard library.  */\n+  flag_isoc94 = 1;\n+  flag_isoc99 = 1;\n+  flag_isoc11 = 1;\n+  /* C++23 includes coroutines.  */\n+  flag_coroutines = true;\n+  cxx_dialect = cxx23;\n+  lang_hooks.name = \"GNU C++23\";\n+}\n+\n /* Args to -d specify what to dump.  Silently ignore\n    unrecognized options; they may be aimed at toplev.c.  */\n static void"}, {"sha": "b729be7f40eb4cd5ac98b68f1d12955a844274b5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -2214,6 +2214,14 @@ std=c++20\n C++ ObjC++\n Conform to the ISO 2020 C++ draft standard (experimental and incomplete support).\n \n+std=c++2b\n+C++ ObjC++ Alias(std=c++23)\n+Conform to the ISO 2020 C++ draft standard (experimental and incomplete support).\n+\n+std=c++23\n+C++ ObjC++ Undocumented\n+Conform to the ISO 2023 C++ draft standard (experimental and incomplete support).\n+\n std=c11\n C ObjC\n Conform to the ISO 2011 C standard.\n@@ -2285,13 +2293,21 @@ C++ ObjC++\n Conform to the ISO 2017 C++ standard with GNU extensions.\n \n std=gnu++2a\n-C++ ObjC++ Alias(std=gnu++20)\n+C++ ObjC++ Alias(std=gnu++20) Undocumented\n Conform to the ISO 2020 C++ draft standard with GNU extensions (experimental and incomplete support).\n \n std=gnu++20\n C++ ObjC++\n Conform to the ISO 2020 C++ draft standard with GNU extensions (experimental and incomplete support).\n \n+std=gnu++2b\n+C++ ObjC++ Alias(std=gnu++23)\n+Conform to the ISO 2023 C++ draft standard with GNU extensions (experimental and incomplete support).\n+\n+std=gnu++23\n+C++ ObjC++ Undocumented\n+Conform to the ISO 2023 C++ draft standard with GNU extensions (experimental and incomplete support).\n+\n std=gnu11\n C ObjC\n Conform to the ISO 2011 C standard with GNU extensions."}, {"sha": "2c109bbc5bd50a8b07e825a9af29fe2085647920", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -1907,9 +1907,10 @@ selected, the value of the macro is\n @code{201103L} for the 2011 C++ standard,\n @code{201402L} for the 2014 C++ standard,\n @code{201703L} for the 2017 C++ standard,\n-or an unspecified value strictly larger than @code{201703L} for the\n-experimental languages enabled by @option{-std=c++2a} and\n-@option{-std=gnu++2a}.\n+@code{202002L} for the 2020 C++ standard,\n+or an unspecified value strictly larger than @code{202002L} for the\n+experimental languages enabled by @option{-std=c++23} and\n+@option{-std=gnu++23}.\n \n @item __OBJC__\n This macro is defined, with value 1, when the Objective-C compiler is in"}, {"sha": "d9e49c4a0da469e1802bd3834b765c26b11ba5db", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -2430,6 +2430,18 @@ GNU dialect of @option{-std=c++20}.\n Support is experimental, and could change in incompatible ways in\n future releases.\n The name @samp{gnu++2a} is deprecated.\n+\n+@item c++2b\n+@itemx c++23\n+The next revision of the ISO C++ standard, planned for\n+2023.  Support is highly experimental, and will almost certainly\n+change in incompatible ways in future releases.\n+\n+@item gnu++2b\n+@itemx gnu++23\n+GNU dialect of @option{-std=c++2b}.  Support is highly experimental,\n+and will almost certainly change in incompatible ways in future\n+releases.\n @end table\n \n @item -fgnu89-inline"}, {"sha": "0a61d148c8a392445be48ce09cecc9183c84f26f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -24492,6 +24492,10 @@ static char *producer_string;\n static const char *\n highest_c_language (const char *lang1, const char *lang2)\n {\n+  if (strcmp (\"GNU C++23\", lang1) == 0 || strcmp (\"GNU C++23\", lang2) == 0)\n+    return \"GNU C++23\";\n+  if (strcmp (\"GNU C++20\", lang1) == 0 || strcmp (\"GNU C++20\", lang2) == 0)\n+    return \"GNU C++20\";\n   if (strcmp (\"GNU C++17\", lang1) == 0 || strcmp (\"GNU C++17\", lang2) == 0)\n     return \"GNU C++17\";\n   if (strcmp (\"GNU C++14\", lang1) == 0 || strcmp (\"GNU C++14\", lang2) == 0)\n@@ -24597,7 +24601,8 @@ gen_compile_unit_die (const char *filename)\n \t  else if (strcmp (language_string, \"GNU C++14\") == 0)\n \t    language = DW_LANG_C_plus_plus_14;\n \t  else if (strcmp (language_string, \"GNU C++17\") == 0\n-\t\t   || strcmp (language_string, \"GNU C++20\") == 0)\n+\t\t   || strcmp (language_string, \"GNU C++20\") == 0\n+\t\t   || strcmp (language_string, \"GNU C++23\") == 0)\n \t    /* For now.  */\n \t    language = DW_LANG_C_plus_plus_14;\n \t}"}, {"sha": "29a941bc758fcfbc02912546df97341671939e58", "filename": "gcc/testsuite/g++.dg/cpp23/cplusplus.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fcplusplus.C?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++23\" }\n+\n+static_assert(__cplusplus > 202002L);"}, {"sha": "af46c7792148288d1bce35ba8028ea976700762f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -9503,7 +9503,10 @@ proc check_effective_target_c++2a_only { } {\n     return 0\n }\n proc check_effective_target_c++2a { } {\n-    return [check_effective_target_c++2a_only]\n+    if [check_effective_target_c++2a_only] {\n+\treturn 1\n+    }\n+    return [check_effective_target_c++23]\n }\n \n proc check_effective_target_c++20_only { } {\n@@ -9513,6 +9516,29 @@ proc check_effective_target_c++20_only { } {\n proc check_effective_target_c++20 { } {\n     return [check_effective_target_c++2a]\n }\n+proc check_effective_target_c++20_down { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return [expr ![check_effective_target_c++23] ]\n+}\n+\n+proc check_effective_target_c++23_only { } {\n+    global cxx_default\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    if [check-flags { { } { } { -std=c++23 -std=gnu++23 -std=c++2b -std=gnu++2b } }] {\n+\treturn 1\n+    }\n+    if { $cxx_default == \"c++23\" && [check-flags { { } { } { } { -std=* } }] } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+proc check_effective_target_c++23 { } {\n+    return [check_effective_target_c++23_only]\n+}\n \n # Check for C++ Concepts support, i.e. -fconcepts flag.\n proc check_effective_target_concepts { } {"}, {"sha": "4467c73284d9dddb5aa8a8563e9f4b5c628981a5", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -173,7 +173,8 @@ enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X,\n \t     CLK_STDC2X,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n \t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,\n-\t     CLK_GNUCXX20, CLK_CXX20, CLK_ASM};\n+\t     CLK_GNUCXX20, CLK_CXX20, CLK_GNUCXX23, CLK_CXX23,\n+\t     CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n struct GTY(()) cpp_string {"}, {"sha": "ecd3d5be7fdcec8aef591e29a39b92e04f36e8a6", "filename": "libcpp/init.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78739c2df788ee5c868d998a6333d453317d8711/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78739c2df788ee5c868d998a6333d453317d8711/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=78739c2df788ee5c868d998a6333d453317d8711", "patch": "@@ -119,6 +119,8 @@ static const struct lang_flags lang_defaults[] =\n   /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0 },\n   /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n   /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n   /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0 }\n };\n \n@@ -540,7 +542,12 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n \n   if (CPP_OPTION (pfile, cplusplus))\n     {\n-      if (CPP_OPTION (pfile, lang) == CLK_CXX20\n+      /* C++23 is not yet a standard.  For now, use an invalid\n+       * year/month, 202100L, which is larger than 202002L.  */\n+      if (CPP_OPTION (pfile, lang) == CLK_CXX23\n+\t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX23)\n+\t_cpp_define_builtin (pfile, \"__cplusplus 202100L\");\n+      else if (CPP_OPTION (pfile, lang) == CLK_CXX20\n \t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX20)\n \t_cpp_define_builtin (pfile, \"__cplusplus 202002L\");\n       else if (CPP_OPTION (pfile, lang) == CLK_CXX17"}]}