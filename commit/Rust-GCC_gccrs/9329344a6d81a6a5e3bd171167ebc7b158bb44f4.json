{"sha": "9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "node_id": "C_kwDOANBUbNoAKDkzMjkzNDRhNmQ4MWE2YTVlM2JkMTcxMTY3ZWJjN2IxNThiYjQ0ZjQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-22T15:16:53Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-22T15:16:53Z"}, "message": "c++: concept-ids and value-dependence [PR102412]\n\nThe problem here is that uses_template_parms returns true for all\nconcept-ids (even those with non-dependent arguments), so when a concept-id\nis used as a default template argument then during deduction the default\nargument is considered dependent even after substituting into it, which\nleads to deduction failure (from type_unification_real).\n\nThis patch fixes this by implementing the resolution of CWG 2446 which\nsays a concept-id is dependent only if its arguments are.\n\n\tDR 2446\n\tPR c++/102412\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_constant_expression)\n\t<case TEMPLATE_ID_EXPR>: Check value_dependent_expression_p\n\tinstead of processing_template_decl.\n\t* pt.c (value_dependent_expression_p) <case TEMPLATE_ID_EXPR>:\n\tReturn true only if any_dependent_template_arguments_p.\n\t(instantiation_dependent_r) <case CALL_EXPR>: Remove this case.\n\t<case TEMPLATE_ID_EXPR>: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-nondep2.C: New test.\n\t* g++.dg/cpp2a/concepts-nondep3.C: New test.", "tree": {"sha": "41b47a7aae6abeccd385c6c3af4ab4024122babf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b47a7aae6abeccd385c6c3af4ab4024122babf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/comments", "author": null, "committer": null, "parents": [{"sha": "0988829edde6f7357e875ddd2b6ab09de44bea3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0988829edde6f7357e875ddd2b6ab09de44bea3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0988829edde6f7357e875ddd2b6ab09de44bea3a"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "18d9d117a48b6487152b113426a401a6585f655d", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "patch": "@@ -7117,7 +7117,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t    break;\n \t  }\n \n-\tif (!processing_template_decl\n+\tif (!value_dependent_expression_p (t)\n \t    && !uid_sensitive_constexpr_evaluation_p ())\n \t  r = evaluate_concept_check (t);\n \telse"}, {"sha": "6bd6ceb29be1d0c2308d9c0ee465ce6ce1dc1172", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "patch": "@@ -27247,7 +27247,8 @@ value_dependent_expression_p (tree expression)\n       }\n \n     case TEMPLATE_ID_EXPR:\n-      return concept_definition_p (TREE_OPERAND (expression, 0));\n+      return concept_definition_p (TREE_OPERAND (expression, 0))\n+\t&& any_dependent_template_arguments_p (TREE_OPERAND (expression, 1));\n \n     case CONSTRUCTOR:\n       {\n@@ -27654,18 +27655,6 @@ instantiation_dependent_r (tree *tp, int *walk_subtrees,\n     case REQUIRES_EXPR:\n       return *tp;\n \n-    case CALL_EXPR:\n-      /* Treat concept checks as dependent. */\n-      if (concept_check_p (*tp))\n-        return *tp;\n-      break;\n-\n-    case TEMPLATE_ID_EXPR:\n-      /* Treat concept checks as dependent.  */\n-      if (concept_check_p (*tp))\n-\treturn *tp;\n-      break;\n-\n     case CONSTRUCTOR:\n       if (CONSTRUCTOR_IS_DEPENDENT (*tp))\n \treturn *tp;"}, {"sha": "e9867f825a122006ad1bc3640c91a7b63e2c1b23", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-nondep2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep2.C?ref=9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/102412\n+// { dg-do link { target c++20 } }\n+\n+template<class T, class U> concept C = __is_same(T, U);\n+\n+template<class T, bool = C<int, T>> void f();\n+template<> void f<int, true>() { }\n+template<> void f<char, false>() { }\n+\n+template<bool = C<int, char>> void g();\n+template<> void g<false>() { }\n+\n+template<bool = C<int, int>> void h();\n+template<> void h<true>() { }\n+\n+int main() {\n+  f<int>();\n+  f<char>();\n+  g();\n+  h();\n+}"}, {"sha": "4aae2871d0c38a282fdc18760898ea6bb9a84f46", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-nondep3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9329344a6d81a6a5e3bd171167ebc7b158bb44f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep3.C?ref=9329344a6d81a6a5e3bd171167ebc7b158bb44f4", "patch": "@@ -0,0 +1,9 @@\n+// DR 2446\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T> concept C = true;\n+template <typename T> struct A;\n+template <> struct A<bool> { using type = bool; };\n+\n+template <typename T>\n+void f(A<decltype(C<T>)>::type); // OK, no 'typename' needed"}]}