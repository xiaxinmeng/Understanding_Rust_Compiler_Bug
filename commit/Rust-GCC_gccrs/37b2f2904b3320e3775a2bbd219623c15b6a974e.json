{"sha": "37b2f2904b3320e3775a2bbd219623c15b6a974e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMmYyOTA0YjMzMjBlMzc3NWEyYmJkMjE5NjIzYzE1YjZhOTc0ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-15T22:13:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-15T22:13:21Z"}, "message": "c-common.c (binary_op_error): Don't allow LROTATE_EXPR, RROTATE_EXPR or unknown code.\n\n\t* c-common.c (binary_op_error): Don't allow LROTATE_EXPR,\n\tRROTATE_EXPR or unknown code.\n\t* c-typeck.c (build_binary_op): Don't allow RROTATE_EXPR,\n\tLROTATE_EXPR, MAX_EXPR, MIN_EXPR, UNORDERED_EXPR, ORDERED_EXPR,\n\tUNLT_EXPR, UNLE_EXPR, UNGT_EXPR, UNGE_EXPR, UNEQ_EXPR, LTGT_EXPR\n\tor unknown code.\n\nFrom-SVN: r90697", "tree": {"sha": "7edbe1acfb8a5b45701a916a2cd65e6e7107fae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7edbe1acfb8a5b45701a916a2cd65e6e7107fae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b2f2904b3320e3775a2bbd219623c15b6a974e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b2f2904b3320e3775a2bbd219623c15b6a974e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b2f2904b3320e3775a2bbd219623c15b6a974e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b2f2904b3320e3775a2bbd219623c15b6a974e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d134f39eeb50933428755e3c01779aa3991a6ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d134f39eeb50933428755e3c01779aa3991a6ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d134f39eeb50933428755e3c01779aa3991a6ef7"}], "stats": {"total": 78, "additions": 11, "deletions": 67}, "files": [{"sha": "fbcf2dfa20b6eb87a80adde2e7a2b2be3da04fce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2f2904b3320e3775a2bbd219623c15b6a974e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2f2904b3320e3775a2bbd219623c15b6a974e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b2f2904b3320e3775a2bbd219623c15b6a974e", "patch": "@@ -1,3 +1,12 @@\n+2004-11-15  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (binary_op_error): Don't allow LROTATE_EXPR,\n+\tRROTATE_EXPR or unknown code.\n+\t* c-typeck.c (build_binary_op): Don't allow RROTATE_EXPR,\n+\tLROTATE_EXPR, MAX_EXPR, MIN_EXPR, UNORDERED_EXPR, ORDERED_EXPR,\n+\tUNLT_EXPR, UNLE_EXPR, UNGT_EXPR, UNGE_EXPR, UNEQ_EXPR, LTGT_EXPR\n+\tor unknown code.\n+\n 2004-11-15  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/18498"}, {"sha": "81bdbbf625436e192b6df4e6ac9ac5c149a35f8f", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2f2904b3320e3775a2bbd219623c15b6a974e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2f2904b3320e3775a2bbd219623c15b6a974e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=37b2f2904b3320e3775a2bbd219623c15b6a974e", "patch": "@@ -1863,11 +1863,8 @@ binary_op_error (enum tree_code code)\n       opname = \"||\"; break;\n     case BIT_XOR_EXPR:\n       opname = \"^\"; break;\n-    case LROTATE_EXPR:\n-    case RROTATE_EXPR:\n-      opname = \"rotate\"; break;\n     default:\n-      opname = \"unknown\"; break;\n+      gcc_unreachable ();\n     }\n   error (\"invalid operands to binary %s\", opname);\n }"}, {"sha": "90ca0defce4c2d80e62e22bc1547d2ad30ced77e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2f2904b3320e3775a2bbd219623c15b6a974e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2f2904b3320e3775a2bbd219623c15b6a974e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=37b2f2904b3320e3775a2bbd219623c15b6a974e", "patch": "@@ -7281,29 +7281,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t}\n       break;\n \n-    case RROTATE_EXPR:\n-    case LROTATE_EXPR:\n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n-\t{\n-\t  if (TREE_CODE (op1) == INTEGER_CST && skip_evaluation == 0)\n-\t    {\n-\t      if (tree_int_cst_sgn (op1) < 0)\n-\t\twarning (\"shift count is negative\");\n-\t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\twarning (\"shift count >= width of type\");\n-\t    }\n-\n-\t  /* Use the type of the value to be shifted.  */\n-\t  result_type = type0;\n-\t  /* Convert the shift-count to an integer, regardless of size\n-\t     of value being shifted.  */\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t    op1 = convert (integer_type_node, op1);\n-\t  /* Avoid converting op1 to result_type later.  */\n-\t  converted = 1;\n-\t}\n-      break;\n-\n     case EQ_EXPR:\n     case NE_EXPR:\n       if (warn_float_equal && (code0 == REAL_TYPE || code1 == REAL_TYPE))\n@@ -7365,28 +7342,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t}\n       break;\n \n-    case MAX_EXPR:\n-    case MIN_EXPR:\n-      if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE)\n-\t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n-\tshorten = 1;\n-      else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n-\t{\n-\t  if (comp_target_types (type0, type1, 1))\n-\t    {\n-\t      result_type = common_pointer_type (type0, type1);\n-\t      if (pedantic\n-\t\t  && TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n-\t\tpedwarn (\"ISO C forbids ordered comparisons of pointers to functions\");\n-\t    }\n-\t  else\n-\t    {\n-\t      result_type = ptr_type_node;\n-\t      pedwarn (\"comparison of distinct pointer types lacks a cast\");\n-\t    }\n-\t}\n-      break;\n-\n     case LE_EXPR:\n     case GE_EXPR:\n     case LT_EXPR:\n@@ -7439,25 +7394,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t}\n       break;\n \n-    case UNORDERED_EXPR:\n-    case ORDERED_EXPR:\n-    case UNLT_EXPR:\n-    case UNLE_EXPR:\n-    case UNGT_EXPR:\n-    case UNGE_EXPR:\n-    case UNEQ_EXPR:\n-    case LTGT_EXPR:\n-      build_type = integer_type_node;\n-      if (code0 != REAL_TYPE || code1 != REAL_TYPE)\n-\t{\n-\t  error (\"unordered comparison on non-floating point argument\");\n-\t  return error_mark_node;\n-\t}\n-      common = 1;\n-      break;\n-\n     default:\n-      break;\n+      gcc_unreachable ();\n     }\n \n   if (code0 == ERROR_MARK || code1 == ERROR_MARK)"}]}