{"sha": "80ba02b10c3060024c1a9838430b95a46a5a56f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBiYTAyYjEwYzMwNjAwMjRjMWE5ODM4NDMwYjk1YTQ2YTVhNTZmOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-10T18:51:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-10T18:51:20Z"}, "message": "combine.c (gen_lowpart_for_combine): Handle vector modes.\n\n\t* combine.c (gen_lowpart_for_combine): Handle vector modes.\n\tSupply non-VOID mode to simplify_gen_subreg.\n\nFrom-SVN: r55375", "tree": {"sha": "1fb2ff706d619a9822938fad912ec418d76d923b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb2ff706d619a9822938fad912ec418d76d923b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ba02b10c3060024c1a9838430b95a46a5a56f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ba02b10c3060024c1a9838430b95a46a5a56f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ba02b10c3060024c1a9838430b95a46a5a56f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ba02b10c3060024c1a9838430b95a46a5a56f9/comments", "author": null, "committer": null, "parents": [{"sha": "6e04241fb6db6c38975b89855be52b56fdf57b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e04241fb6db6c38975b89855be52b56fdf57b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e04241fb6db6c38975b89855be52b56fdf57b74"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "a71d09dcf5ca93e5d852ca2c6ac3ca909eb4204f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ba02b10c3060024c1a9838430b95a46a5a56f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ba02b10c3060024c1a9838430b95a46a5a56f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ba02b10c3060024c1a9838430b95a46a5a56f9", "patch": "@@ -1,3 +1,8 @@\n+Wed Jul 10 19:50:03 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* combine.c (gen_lowpart_for_combine): Handle vector modes.\n+\tSupply non-VOID mode to simplify_gen_subreg.\n+\n Wed Jul 10 18:48:55 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_init_mmx_sse_builtins): Fix thinko."}, {"sha": "f9d4b40625450679e313363cdd7bf01d1696b0f8", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ba02b10c3060024c1a9838430b95a46a5a56f9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ba02b10c3060024c1a9838430b95a46a5a56f9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=80ba02b10c3060024c1a9838430b95a46a5a56f9", "patch": "@@ -9831,12 +9831,6 @@ gen_lowpart_for_combine (mode, x)\n \t    || GET_MODE_SIZE (GET_MODE (x)) == GET_MODE_SIZE (mode)))\n     return gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);\n \n-  /* simplify_gen_subreg does not know how to handle the case where we try\n-     to convert an integer constant to a vector.\n-     ??? We could try to teach it to generate CONST_VECTORs.  */\n-  if (GET_MODE (x) == VOIDmode && VECTOR_MODE_P (mode))\n-    return gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);\n-\n   /* X might be a paradoxical (subreg (mem)).  In that case, gen_lowpart\n      won't know what to do.  So we will strip off the SUBREG here and\n      process normally.  */\n@@ -9903,9 +9897,15 @@ gen_lowpart_for_combine (mode, x)\n     {\n       int offset = 0;\n       rtx res;\n+      enum machine_mode sub_mode = GET_MODE (x);\n \n-      offset = subreg_lowpart_offset (mode, GET_MODE (x));\n-      res = simplify_gen_subreg (mode, x, GET_MODE (x), offset);\n+      offset = subreg_lowpart_offset (mode, sub_mode);\n+      if (sub_mode == VOIDmode)\n+\t{\n+\t  sub_mode = int_mode_for_mode (mode);\n+\t  x = gen_lowpart_common (sub_mode, x);\n+\t}\n+      res = simplify_gen_subreg (mode, x, sub_mode, offset);\n       if (res)\n \treturn res;\n       return gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);"}]}