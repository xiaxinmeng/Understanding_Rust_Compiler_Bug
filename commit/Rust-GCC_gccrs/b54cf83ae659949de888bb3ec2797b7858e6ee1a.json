{"sha": "b54cf83ae659949de888bb3ec2797b7858e6ee1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0Y2Y4M2FlNjU5OTQ5ZGU4ODhiYjNlYzI3OTdiNzg1OGU2ZWUxYQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-02-15T21:19:01Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-02-15T21:19:01Z"}, "message": "rs6000.h (processor_type): Add PPC440.\n\n\t* config/rs6000/rs6000.h (processor_type): Add PPC440.\n\t* config/rs6000/rs6000.c (TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE,\n\tTARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD,\n\tTARGET_SCHED_VARIABLE_ISSUE): Define.\n\t(rs6000_use_dfa_pipeline_interface): New function.\n\t(rs6000_multipass_dfa_lookahead): New Function.\n\t(rs6000_variable_issue): New function.\n\t(rs6000_adjust_cost): Add CMP and DELAYED_CR types.\n\t(rs6000_issue_rate): Add PPC440.\n\t* config/rs6000/rs6000.md (unspec list): Correct typo.\n\t(attr \"type\"): Add load_ext, load_ext_u, load_ext_ux, load_u,\n\tstore_ux, store_u, fpload_ux, fpload_u, fpstore_ux, fpstore_u,\n\tcmp, delayed_cr, mfcr, mtcr.\n\t(automata_option): Set \"ndfa\".\n\t(extendMMNN2): Update attributes.\n\t(movcc_internal1): Discourage move to non-cr0.  Update\n\tattributes.\n\t(movMM_update): Update attributes.\n\t(cmpMM_internal): Update attributes.\n\t(sCC CR materialization): Update attributes.\n\t(branch patterns): Do not discourage non-cr0.\n\t(cr logical patterns): Prefer destructive register allocation.\n\tUpdate attributes.\n\t(movesi_from_cr): Update attribute.\n\t(mtcrf_operation): Update attribute.\n\t(mtcrfsi): Update attribute.\n\t* config/rs6000/40x.md: New file.\n\t* config/rs6000/603.md: New file.\n\t* config/rs6000/6xx.md: New file.\n\t* config/rs6000/7450.md: New file.\n\t* config/rs6000/7xx.md: New file.\n\t* config/rs6000/mpc.md: New file.\n\t* config/rs6000/power4.md: New file.\n\t* config/rs6000/rios1.md: New file.\n\t* config/rs6000/rios2.md: New file.\n\t* config/rs6000/rs64.md: New file.\n\t[Some DFA descriptions based on work by Michael Hayes]\n\nFrom-SVN: r62943", "tree": {"sha": "889b251db7bddd9347287fabcc0d1c73dd3a30fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889b251db7bddd9347287fabcc0d1c73dd3a30fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54cf83ae659949de888bb3ec2797b7858e6ee1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54cf83ae659949de888bb3ec2797b7858e6ee1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54cf83ae659949de888bb3ec2797b7858e6ee1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54cf83ae659949de888bb3ec2797b7858e6ee1a/comments", "author": null, "committer": null, "parents": [{"sha": "5f24e0dcf6344dda90214aed59753203dac14b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f24e0dcf6344dda90214aed59753203dac14b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f24e0dcf6344dda90214aed59753203dac14b4b"}], "stats": {"total": 2401, "additions": 1537, "deletions": 864}, "files": [{"sha": "adb0f787b978c55d719eab2ce5b70afe87aaf40d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -1,3 +1,43 @@\n+2003-02-15  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (processor_type): Add PPC440.\n+\t* config/rs6000/rs6000.c (TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE,\n+\tTARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD,\n+\tTARGET_SCHED_VARIABLE_ISSUE): Define.\n+\t(rs6000_use_dfa_pipeline_interface): New function.\n+\t(rs6000_multipass_dfa_lookahead): New Function.\n+\t(rs6000_variable_issue): New function.\n+\t(rs6000_adjust_cost): Add CMP and DELAYED_CR types.\n+\t(rs6000_issue_rate): Add PPC440.\n+\t* config/rs6000/rs6000.md (unspec list): Correct typo.\n+\t(attr \"type\"): Add load_ext, load_ext_u, load_ext_ux, load_u,\n+\tstore_ux, store_u, fpload_ux, fpload_u, fpstore_ux, fpstore_u,\n+\tcmp, delayed_cr, mfcr, mtcr.\n+\t(automata_option): Set \"ndfa\".\n+\t(extendMMNN2): Update attributes.\n+\t(movcc_internal1): Discourage move to non-cr0.  Update\n+\tattributes.\n+\t(movMM_update): Update attributes.\n+\t(cmpMM_internal): Update attributes.\n+\t(sCC CR materialization): Update attributes.\n+\t(branch patterns): Do not discourage non-cr0.\n+\t(cr logical patterns): Prefer destructive register allocation.\n+\tUpdate attributes.\n+\t(movesi_from_cr): Update attribute.\n+\t(mtcrf_operation): Update attribute.\n+\t(mtcrfsi): Update attribute.\n+\t* config/rs6000/40x.md: New file.\n+\t* config/rs6000/603.md: New file.\n+\t* config/rs6000/6xx.md: New file.\n+\t* config/rs6000/7450.md: New file.\n+\t* config/rs6000/7xx.md: New file.\n+\t* config/rs6000/mpc.md: New file.\n+\t* config/rs6000/power4.md: New file.\n+\t* config/rs6000/rios1.md: New file.\n+\t* config/rs6000/rios2.md: New file.\n+\t* config/rs6000/rs64.md: New file.\n+\t[Some DFA descriptions based on work by Michael Hayes]\n+\n 2003-02-15  Richard Henderson  <rth@redhat.com>\n \n \t* cfgcleanup.c: Include params.h."}, {"sha": "e44a0115338e00dc1b6547c24b2fd9aab2c4afc2", "filename": "gcc/config/rs6000/40x.md", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,67 @@\n+(define_automaton \"ppc40x\")\n+(define_cpu_unit \"iu_40x,bpu_40x\" \"ppc40x\")\n+\n+;; PPC401 / PPC403 / PPC405 32-bit integer only  IU BPU\n+;; Embedded PowerPC controller\n+;; In-order execution\n+;; Max issue two insns/cycle (includes one branch)\n+(define_insn_reservation \"ppc403-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-compare\" 3\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x,nothing,bpu_40x\")\n+\n+(define_insn_reservation \"ppc403-imul\" 4\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc403\"))\n+  \"iu_40x*4\")\n+\n+(define_insn_reservation \"ppc405-imul\" 5\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"iu_40x*4\")\n+\n+(define_insn_reservation \"ppc405-imul2\" 3\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"iu_40x*2\")\n+\n+(define_insn_reservation \"ppc405-imul3\" 2\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-idiv\" 33\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x*33\")\n+\n+(define_insn_reservation \"ppc403-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"bpu_40x\")\n+\n+(define_insn_reservation \"ppc403-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"bpu_40x\")\n+"}, {"sha": "37d95d3f7779da5de9f99eefcf43a236b50e97e5", "filename": "gcc/config/rs6000/603.md", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,107 @@\n+(define_automaton \"ppc603,ppc603fp,ppc603other\")\n+(define_cpu_unit \"iu_603\" \"ppc603\")\n+(define_cpu_unit \"fpu_603\" \"ppc603fp\")\n+(define_cpu_unit \"lsu_603,bpu_603,sru_603\" \"ppc603other\")\n+\n+;; PPC603/PPC603e 32-bit IU, LSU, FPU, BPU, SRU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+;; Branches go straight to the BPU.  All other insns are handled\n+;; by a dispatch unit which can issue a max of 2 insns per cycle.\n+\n+;; The PPC603e user's manual recommends that to reduce branch mispredictions,\n+;; the insn that sets CR bits should be separated from the branch insn\n+;; that evaluates them; separation by more than 9 insns ensures that the CR\n+;; bits will be immediately available for execution.\n+;; This could be artificially achieved by exagerating the latency of\n+;; compare insns but at the expense of a poorer schedule.\n+\n+;; CR insns get executed in the SRU.  Not modelled.\n+\n+(define_insn_reservation \"ppc603-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n+(define_insn_reservation \"ppc603-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n+(define_insn_reservation \"ppc603-fpload\" 2\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n+(define_insn_reservation \"ppc603-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603\")\n+\n+; This takes 2 or 3 cycles\n+(define_insn_reservation \"ppc603-imul\" 3\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603*2\")\n+\n+(define_insn_reservation \"ppc603-imul2\" 2\n+  (and (eq_attr \"type\" \"imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603*2\")\n+\n+(define_insn_reservation \"ppc603-idiv\" 37\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603*37\")\n+\n+(define_insn_reservation \"ppc603-compare\" 3\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603,nothing,bpu_603\")\n+\n+(define_insn_reservation \"ppc603-fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"(fpu_603+iu_603*2),bpu_603\")\n+\n+(define_insn_reservation \"ppc603-fp\" 3\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603\")\n+\n+(define_insn_reservation \"ppc603-dmul\" 4\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603*2\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc603-sdiv\" 18\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603*18\")\n+\n+(define_insn_reservation \"ppc603-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603*33\")\n+\n+(define_insn_reservation \"ppc603-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"sru_603\")\n+\n+(define_insn_reservation \"ppc603-crlogical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr,mfcr\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"sru_603\")\n+\n+(define_insn_reservation \"ppc603-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"bpu_603\")\n+\n+(define_insn_reservation \"ppc603-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"bpu_603\")\n+"}, {"sha": "b0b449008ba48fc692c8fc29c985a5968b06ab3a", "filename": "gcc/config/rs6000/6xx.md", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,203 @@\n+(define_automaton \"ppc6xx,ppc6xxfp,ppc6xxfp2,ppc6xxother\")\n+(define_cpu_unit \"iu1_6xx,iu2_6xx,mciu_6xx\" \"ppc6xx\")\n+(define_cpu_unit \"fpu_6xx\" \"ppc6xxfp\")\n+(define_cpu_unit \"fpu1_6xx,fpu2_6xx\" \"ppc6xxfp2\")\n+(define_cpu_unit \"lsu_6xx,bpu_6xx,cru_6xx\" \"ppc6xxother\")\n+\n+;; PPC604  32-bit 2xSCIU, MCIU, LSU, FPU, BPU\n+;; PPC604e  32-bit 2xSCIU, MCIU, LSU, FPU, BPU, CRU\n+;; MCIU used for imul/idiv and moves from/to spr\n+;; LSU 2 stage pipelined\n+;; FPU 3 stage pipelined\n+;; Max issue 4 insns/clock cycle\n+\n+;; PPC604e is PPC604 with larger caches and a CRU.  In the 604\n+;; the CR logical operations are handled in the BPU.\n+;; In the 604e, the CRU shares bus with BPU so only one condition\n+;; register or branch insn can be issued per clock.  Not modelled.\n+\n+;; PPC620  64-bit 2xSCIU, MCIU, LSU, FPU, BPU, CRU\n+;; PPC630 64-bit 2xSCIU, MCIU, LSU, 2xFPU, BPU, CRU\n+;; Max issue 4 insns/clock cycle\n+;; Out-of-order execution, in-order completion\n+\n+;; No following instruction can dispatch in the same cycle as a branch\n+;; instruction.  Not modelled.  This is no problem if RCSP is not\n+;; enabled since the scheduler stops a schedule when it gets to a branch.\n+\n+;; Four insns can be dispatched per cycle.\n+\n+(define_insn_reservation \"ppc604-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+\n+(define_insn_reservation \"ppc604-fpload\" 3\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+\n+(define_insn_reservation \"ppc604-store\" 1\n+  (and (eq_attr \"type\" \"store,fpstore,store_ux,store_u,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+\n+(define_insn_reservation \"ppc604-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"iu1_6xx|iu2_6xx\")\n+\n+(define_insn_reservation \"ppc604-imul\" 4\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc604\"))\n+  \"mciu_6xx*2\")\n+\n+(define_insn_reservation \"ppc604e-imul\" 2\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc604e\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc620-imul\" 5\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*3\")\n+\n+(define_insn_reservation \"ppc620-imul2\" 4\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*3\")\n+\n+(define_insn_reservation \"ppc620-imul3\" 3\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*3\")\n+\n+(define_insn_reservation \"ppc620-lmul\" 7\n+  (and (eq_attr \"type\" \"lmul\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*5\")\n+\n+(define_insn_reservation \"ppc604-idiv\" 20\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"mciu_6xx*19\")\n+\n+(define_insn_reservation \"ppc620-idiv\" 37\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  \"mciu_6xx*36\")\n+\n+(define_insn_reservation \"ppc630-idiv\" 21\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"mciu_6xx*20\")\n+\n+(define_insn_reservation \"ppc620-ldiv\" 37\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*36\")\n+\n+(define_insn_reservation \"ppc604-compare\" 3\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"(iu1_6xx|iu2_6xx)\")\n+\n+; FPU PPC604{,e},PPC620\n+(define_insn_reservation \"ppc604-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx\")\n+\n+(define_insn_reservation \"ppc604-fp\" 3\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx\")\n+\n+(define_insn_reservation \"ppc604-dmul\" 3\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc604-sdiv\" 18\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx*18\")\n+\n+(define_insn_reservation \"ppc604-ddiv\" 32\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx*32\")\n+\n+(define_insn_reservation \"ppc620-ssqrt\" 31\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  \"fpu_6xx*31\")\n+\n+(define_insn_reservation \"ppc620-dsqrt\" 31\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  \"fpu_6xx*31\")\n+\n+\n+; 2xFPU PPC630\n+(define_insn_reservation \"ppc630-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"(fpu1_6xx|fpu2_6xx)\")\n+\n+(define_insn_reservation \"ppc630-fp\" 3\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx|fpu2_6xx\")\n+\n+(define_insn_reservation \"ppc630-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*17|fpu2_6xx*17\")\n+\n+(define_insn_reservation \"ppc630-ddiv\" 21\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*21|fpu2_6xx*21\")\n+\n+(define_insn_reservation \"ppc630-ssqrt\" 18\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*18|fpu2_6xx*18\")\n+\n+(define_insn_reservation \"ppc630-dsqrt\" 25\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*25|fpu2_6xx*25\")\n+\n+(define_insn_reservation \"ppc604-mfcr\" 3\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc604-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc604-crlogical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc604\"))\n+  \"bpu_6xx\")\n+\n+(define_insn_reservation \"ppc604e-crlogical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc604e,ppc620,ppc630\"))\n+  \"cru_6xx\")\n+\n+(define_insn_reservation \"ppc604-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"bpu_6xx\")\n+\n+(define_insn_reservation \"ppc604-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"bpu_6xx\")\n+"}, {"sha": "12bcbd4ccb5e8d095b690a2b516f4731a12394ba", "filename": "gcc/config/rs6000/7450.md", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,137 @@\n+(define_automaton \"ppc7450,ppc7450fp,ppc7450other,ppc7450vec\")\n+(define_cpu_unit \"iu1_7450,iu2_7450,iu3_7450,mciu_7450\" \"ppc7450\")\n+(define_cpu_unit \"fpu_7450\" \"ppc7450fp\")\n+(define_cpu_unit \"lsu_7450,bpu_7450\" \"ppc7450other\")\n+(define_cpu_unit \"du1_7450,du2_7450,du3_7450\" \"ppc7450\")\n+(define_cpu_unit \"vecsmpl_7450,veccmplx_7450,vecflt_7450,vecperm_7450\" \"ppc7450vec\")\n+(define_cpu_unit \"vdu1_7450,vdu2_7450\" \"ppc7450vec\")\n+\n+\n+;; PPC7450  32-bit 3xIU, MCIU, LSU, SRU, FPU, BPU, 4xVEC\n+;; IU1,IU2,IU3 can perform all integer operations\n+;; MCIU performs imul and idiv, cr logical, SPR moves\n+;; LSU 2 stage pipelined\n+;; FPU 3 stage pipelined\n+;; It also has 4 vector units, one for each type of vector instruction.\n+;; However, we can only dispatch 2 instructions per cycle. \n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+;; In-order execution\n+\n+;; Branches go straight to the BPU.  All other insns are handled\n+;; by a dispatch unit which can issue a max of 3 insns per cycle.\n+(define_reservation \"ppc7450_du\" \"du1_7450|du2_7450|du3_7450\")\n+(define_reservation \"ppc7450_vec_du\" \"vdu1_7450|vdu2_7450\")\n+\n+(define_insn_reservation \"ppc7450-load\" 3\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n+\t\t        load_ux,load_u,vecload\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-store\" 3\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,vecstore\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-fpload\" 4\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450*3\")\n+\n+(define_insn_reservation \"ppc7450-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,(iu1_7450|iu2_7450|iu3_7450)\")\n+\n+(define_insn_reservation \"ppc7450-imul\" 4\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450*2\")\n+\n+(define_insn_reservation \"ppc7450-imul2\" 3\n+  (and (eq_attr \"type\" \"imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450\")\n+\n+(define_insn_reservation \"ppc7450-idiv\" 23\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450*23\")\n+\n+(define_insn_reservation \"ppc7450-compare\" 2\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,(iu1_7450|iu2_7450|iu3_7450)\")\n+\n+(define_insn_reservation \"ppc7450-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450\")\n+\n+(define_insn_reservation \"ppc7450-fp\" 5\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc7450-sdiv\" 21\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450*21\")\n+\n+(define_insn_reservation \"ppc7450-ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450*35\")\n+\n+(define_insn_reservation \"ppc7450-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450\")\n+\n+(define_insn_reservation \"ppc7450-crlogical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450\")\n+\n+(define_insn_reservation \"ppc7450-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"nothing,mciu_7450*2\")\n+\n+(define_insn_reservation \"ppc7450-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"nothing,bpu_7450\")\n+\n+;; Altivec\n+(define_insn_reservation \"ppc7450-vecsimple\" 1\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,vecsmpl_7450\")\n+\n+(define_insn_reservation \"ppc7450-veccomplex\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,veccmplx_7450\")\n+\n+(define_insn_reservation \"ppc7450-veccmp\" 2\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,veccmplx_7450\")\n+\n+(define_insn_reservation \"ppc7450-vecfloat\" 4\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,vecflt_7450\")\n+\n+(define_insn_reservation \"ppc7450-vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,vecperm_7450\")\n+"}, {"sha": "ba64bcf31019d0afaa05938db0473aae33ee8542", "filename": "gcc/config/rs6000/7xx.md", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,142 @@\n+(define_automaton \"ppc7xx,ppc7xxfp,ppc7xxother,ppc7xxvec\")\n+(define_cpu_unit \"iu1_7xx,iu2_7xx\" \"ppc7xx\")\n+(define_cpu_unit \"fpu_7xx\" \"ppc7xxfp\")\n+(define_cpu_unit \"lsu_7xx,bpu_7xx,sru_7xx\" \"ppc7xxother\")\n+(define_cpu_unit \"du1_7xx,du2_7xx\" \"ppc7xx\")\n+(define_cpu_unit \"veccmplx_7xx,vecperm_7xx,vdu_7xx\" \"ppc7xxvec\")\n+\n+;; PPC740/PPC750/PPC7400  32-bit 2xIU, LSU, SRU, FPU, BPU\n+;; IU1 can perform all integer operations\n+;; IU2 can perform all integer operations except imul and idiv\n+;; LSU 2 stage pipelined\n+;; FPU 3 stage pipelined\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+;; In-order execution\n+\n+\n+;; The PPC750 user's manual recommends that to reduce branch mispredictions,\n+;; the insn that sets CR bits should be separated from the branch insn\n+;; that evaluates them.  There is no advantage have more than 10 cycles\n+;; of separation.\n+;; This could be artificially achieved by exagerating the latency of\n+;; compare insns but at the expense of a poorer schedule.\n+\n+;; Branches go straight to the BPU.  All other insns are handled\n+;; by a dispatch unit which can issue a max of 2 insns per cycle.\n+(define_reservation \"ppc750_du\" \"du1_7xx|du2_7xx\")\n+(define_reservation \"ppc7400_vec_du\" \"vdu_7xx\")\n+\n+(define_insn_reservation \"ppc750-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n+\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u,vecload\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,lsu_7xx\")\n+\n+(define_insn_reservation \"ppc750-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,\\\n+\t\t        fpstore,fpstore_ux,fpstore_u,vecstore\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,lsu_7xx\")\n+\n+(define_insn_reservation \"ppc750-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,(iu1_7xx|iu2_7xx)\")\n+\n+(define_insn_reservation \"ppc750-imul\" 4\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx*4\")\n+\n+(define_insn_reservation \"ppc750-imul2\" 3\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-imul3\" 2\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx\")\n+\n+(define_insn_reservation \"ppc750-idiv\" 19\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx*19\")\n+\n+(define_insn_reservation \"ppc750-compare\" 2\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,(iu1_7xx|iu2_7xx)\")\n+\n+(define_insn_reservation \"ppc750-fpcompare\" 2\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx\")\n+\n+(define_insn_reservation \"ppc750-fp\" 3\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx\")\n+\n+(define_insn_reservation \"ppc750-dmul\" 4\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc750\"))\n+  \"ppc750_du,fpu_7xx*2\")\n+\n+(define_insn_reservation \"ppc7400-dmul\" 3\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,fpu_7xx\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc750-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx*17\")\n+\n+(define_insn_reservation \"ppc750-ddiv\" 31\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx*31\")\n+\n+(define_insn_reservation \"ppc750-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx\")\n+\n+(define_insn_reservation \"ppc750-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,sru_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,sru_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,bpu_7xx\")\n+\n+;; Altivec\n+(define_insn_reservation \"ppc7400-vecsimple\" 1\n+  (and (eq_attr \"type\" \"vecsimple,veccmp\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n+\n+(define_insn_reservation \"ppc7400-veccomplex\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n+\n+(define_insn_reservation \"ppc7400-vecfloat\" 4\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n+\n+(define_insn_reservation \"ppc7400-vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,vecperm_7xx\")\n+"}, {"sha": "b944e8e1c429a23e0444ff3669824f20e657a5d1", "filename": "gcc/config/rs6000/mpc.md", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,79 @@\n+(define_automaton \"mpc,mpcfp\")\n+(define_cpu_unit \"iu_mpc,mciu_mpc\" \"mpc\")\n+(define_cpu_unit \"fpu_mpc\" \"mpcfp\")\n+(define_cpu_unit \"lsu_mpc,bpu_mpc\" \"mpc\")\n+\n+;; MPCCORE 32-bit SCIU, MCIU, LSU, FPU, BPU\n+;; 505/801/821/823\n+\n+(define_insn_reservation \"mpccore-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"lsu_mpc\")\n+\n+(define_insn_reservation \"mpccore-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"lsu_mpc\")\n+\n+(define_insn_reservation \"mpccore-fpload\" 2\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"lsu_mpc\")\n+\n+(define_insn_reservation \"mpccore-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"iu_mpc\")\n+\n+(define_insn_reservation \"mpccore-imul\" 2\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"mciu_mpc\")\n+\n+; Divide latency varies greatly from 2-11, use 6 as average\n+(define_insn_reservation \"mpccore-idiv\" 6\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"mciu_mpc*6\")\n+\n+(define_insn_reservation \"mpccore-compare\" 3\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"iu_mpc,nothing,bpu_mpc\")\n+\n+(define_insn_reservation \"mpccore-fpcompare\" 2\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc,bpu_mpc\")\n+\n+(define_insn_reservation \"mpccore-fp\" 4\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*2\")\n+\n+(define_insn_reservation \"mpccore-dmul\" 5\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*5\")\n+\n+(define_insn_reservation \"mpccore-sdiv\" 10\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*10\")\n+\n+(define_insn_reservation \"mpccore-ddiv\" 17\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*17\")\n+\n+(define_insn_reservation \"mpccore-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"bpu_mpc\")\n+\n+(define_insn_reservation \"mpccore-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr,mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"bpu_mpc\")\n+"}, {"sha": "0f97b317dde0d7d7b25b2dbf000b45bb446293d3", "filename": "gcc/config/rs6000/power4.md", "status": "added", "additions": 281, "deletions": 0, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,281 @@\n+;; POWER4 model\n+\n+;; Sources: IBM Red Book and White Paper on POWER4\n+\n+;; The POWER4 has 2 iu, 2 fpu, 2 lsu per engine (2 engines per chip).\n+;; Instructions that update more than one register get broken into two\n+;; (split) or more internal ops.  The chip can issue up to 5\n+;; internal ops per cycle.\n+\n+(define_automaton \"power4iu,power4lsu,power4fpu,power4misc,power4vec,power4disp\")\n+\n+(define_cpu_unit \"iu1_power4,iu2_power4\" \"power4iu\")\n+(define_cpu_unit \"lsu1_power4,lsu2_power4\" \"power4lsu\")\n+(define_cpu_unit \"fpu1_power4,fpu2_power4\" \"power4fpu\")\n+(define_cpu_unit \"bpu_power4,cru_power4\" \"power4misc\")\n+(define_cpu_unit \"vec_power4,vecperm_power4\" \"power4vec\")\n+(define_cpu_unit \"du1_power4,du2_power4,du3_power4,du4_power4,du5_power4\"\n+\t\t \"power4disp\")\n+\n+(define_reservation \"q1_power4\" \"du1_power4|du4_power4\")\n+(define_reservation \"q2_power4\" \"du2_power4|du3_power4\")\n+\n+(define_reservation \"lsq_power4\" \"((du1_power4|du4_power4),lsu1_power4)\\\n+\t\t\t\t |((du2_power4|du3_power4),lsu2_power4)\")\n+\n+(define_reservation \"lsuq_power4\"\n+\t\t    \"((du1_power4+du2_power4),lsu1_power4+iu2_power4)\\\n+\t\t    |((du2_power4+du3_power4),lsu2_power4+iu2_power4)\\\n+\t\t    |((du3_power4+du4_power4),lsu2_power4+iu1_power4)\")\n+;;;\t\t    |((du2_power4+du3_power4),lsu2_power4,iu2_power4)\n+\n+(define_reservation \"lsuxq_power4\"\n+\t\t    \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n+\t\t     iu1_power4,(lsu2_power4+iu2_power4)\")\n+\n+(define_reservation \"iq_power4\" \"((du1_power4|du4_power4),iu1_power4)\\\n+\t\t\t\t|((du2_power4|du3_power4),iu2_power4)\")\n+\n+(define_reservation \"fpq_power4\" \"((du1_power4|du4_power4),fpu1_power4)\\\n+\t\t\t\t |((du2_power4|du3_power4),fpu2_power4)\")\n+\n+(define_reservation \"vq_power4\"\n+\t\t    \"(du1_power4|du2_power4|du3_power4|du4_power4),vec_power4\")\n+(define_reservation \"vpq_power4\"\n+\t\t    \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+\t\t     vecperm_power4\")\n+\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du1_power4\" \"du2_power4,du3_power4,du4_power4,du5_power4\")\n+(absence_set \"du2_power4\" \"du3_power4,du4_power4,du5_power4\")\n+(absence_set \"du3_power4\" \"du4_power4,du5_power4\")\n+(absence_set \"du4_power4\" \"du5_power4\")\n+\n+\n+; Load/store\n+(define_insn_reservation \"power4-load\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-load-ext\" 5\n+  (and (eq_attr \"type\" \"load_ext\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4+du2_power4),lsu1_power4,nothing,nothing,iu2_power4)\\\n+  |((du2_power4+du3_power4),lsu2_power4,nothing,nothing,iu2_power4)\\\n+  |((du3_power4+du4_power4),lsu2_power4,nothing,nothing,iu1_power4)\")\n+\n+(define_insn_reservation \"power4-load-ext-update\" 5\n+  (and (eq_attr \"type\" \"load_ext_u\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n+   (lsu1_power4+iu2_power4),nothing,nothing,iu2_power4\")\n+\n+(define_insn_reservation \"power4-load-ext-update-indexed\" 5\n+  (and (eq_attr \"type\" \"load_ext_ux\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n+   iu1_power4,(lsu2_power4+iu1_power4),nothing,nothing,iu2_power4\")\n+\n+(define_insn_reservation \"power4-load-update-indexed\" 3\n+  (and (eq_attr \"type\" \"load_ux\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuxq_power4\")\n+\n+(define_insn_reservation \"power4-load-update\" 3\n+  (and (eq_attr \"type\" \"load_u\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuq_power4\")\n+\n+(define_insn_reservation \"power4-fpload\" 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-fpload-update\" 5\n+  (and (eq_attr \"type\" \"fpload_u\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuq_power4\")\n+\n+(define_insn_reservation \"power4-fpload-update-indexed\" 5\n+  (and (eq_attr \"type\" \"fpload_ux\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuxq_power4\")\n+\n+(define_insn_reservation \"power4-vecload\" 5\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-store\" 1\n+  (and (eq_attr \"type\" \"store,vecstore\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-store-update\" 1\n+  (and (eq_attr \"type\" \"store_u\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuq_power4\")\n+\n+(define_insn_reservation \"power4-store-update-indexed\" 1\n+  (and (eq_attr \"type\" \"store_ux\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuxq_power4\")\n+\n+(define_insn_reservation \"power4-fpstore\" 1\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4,fpu1_power4,lsu1_power4)\\\n+  |(du2_power4,fpu2_power4,lsu2_power4)\\\n+  |(du3_power4,fpu2_power4,lsu2_power4)\\\n+  |(du4_power4,fpu1_power4,lsu1_power4)\")\n+\n+(define_insn_reservation \"power4-fpstore-update\" 1\n+  (and (eq_attr \"type\" \"fpstore_u\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4+du2_power4),(fpu1_power4+iu2_power4),lsu1_power4)\\\n+  |((du2_power4+du3_power4),(fpu2_power4+iu2_power4),lsu2_power4)\\\n+  |((du3_power4+du4_power4),(fpu2_power4+iu1_power4),lsu2_power4)\")\n+;;;((du2_power4+du3_power4),fpu2_power4,(iu2_power4+lsu2_power4))\n+\n+(define_insn_reservation \"power4-fpstore-update-indexed\" 1\n+  (and (eq_attr \"type\" \"fpstore_ux\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4+du3_power4+du4_power4),\n+   iu1_power4,fpu2_power4,(iu2_power4+lsu2_power4)\")\n+\n+\n+; Integer latency is 2 cycles\n+(define_insn_reservation \"power4-integer\" 2\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"iq_power4\")\n+\n+(define_insn_reservation \"power4-cmp\" 3\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"iq_power4\")\n+\n+(define_insn_reservation \"power4-compare\" 3\n+  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4+du2_power4),iu1_power4,iu2_power4)\\\n+  |((du2_power4+du3_power4),iu2_power4,iu2_power4)\\\n+  |((du3_power4+du4_power4),iu2_power4,iu1_power4)\")\n+\n+(define_insn_reservation \"power4-imul\" 7\n+  (and (eq_attr \"type\" \"imul,lmul\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(q1_power4,iu1_power4*6)|(q2_power4,iu2_power4*6)\")\n+\n+(define_insn_reservation \"power4-imul2\" 5\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(q1_power4,iu1_power4*4)|(q2_power4,iu2_power4*4)\")\n+\n+(define_insn_reservation \"power4-imul3\" 4\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(q1_power4,iu1_power4*3)|(q2_power4,iu2_power4*3)\")\n+\n+; SPR move only executes in first IU.\n+; Integer division only executes in second IU.\n+(define_insn_reservation \"power4-idiv\" 36\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4),iu2_power4*35\")\n+\n+(define_insn_reservation \"power4-ldiv\" 68\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4),iu2_power4*67\")\n+\n+\n+(define_insn_reservation \"power4-mtjmpr\" 3\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,bpu_power4\")\n+\n+\n+; Branches take dispatch Slot 4.  The presence_sets prevent other insn from\n+; grabbing previous dispatch slots once this is assigned.\n+(define_insn_reservation \"power4-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du5_power4,bpu_power4\")\n+\n+\n+; Condition Register logical ops are split if non-destructive (RT != RB)\n+(define_insn_reservation \"power4-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,cru_power4\")\n+\n+(define_insn_reservation \"power4-delayedcr\" 4\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4),cru_power4,cru_power4\")\n+\n+; 4 mfcrf (each 3 cyc, 1/cyc) + 3 fxu\n+(define_insn_reservation \"power4-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4+du3_power4+du4_power4),\\\n+   (du1_power4+du2_power4+du3_power4+du4_power4+cru_power4),\\\n+    cru_power4,cru_power4,cru_power4\")\n+\n+; mtcrf (1 field)\n+(define_insn_reservation \"power4-mtcr\" 4\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,iu1_power4\")\n+\n+; Basic FP latency is 6 cycles\n+(define_insn_reservation \"power4-fp\" 6\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"fpq_power4\")\n+\n+(define_insn_reservation \"power4-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"fpq_power4\")\n+\n+(define_insn_reservation \"power4-sdiv\" 33\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(q1_power4,fpu1_power4*28)|(q2_power4,fpu2_power4*28)\")\n+\n+(define_insn_reservation \"power4-sqrt\" 40\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(q1_power4,fpu1_power4*35)|(q2_power4,fpu2_power4*35)\")\n+\n+\n+; VMX\n+(define_insn_reservation \"power4-vec\" 2\n+  (and (eq_attr \"type\" \"vecsimple,veccomplex\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+; vecfp compare\n+(define_insn_reservation \"power4-veccmp\" 8\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+(define_insn_reservation \"power4-vecfloat\" 8\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+(define_insn_reservation \"power4-vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vpq_power4\")\n+\n+(define_bypass 4 \"power4-vecload\" \"power4-vecperm\")\n+(define_bypass 5 \"power4-vec\" \"power4-branch,power4-crlogical\")\n+(define_bypass 3 \"power4-vec,power4-vecfloat\" \"power4-vecperm\")\n+(define_bypass 3 \"power4-vecperm\" \"power4-vec,power4-vecfloat\")"}, {"sha": "d3c2e0e5f358130867d07dea7e3bad64368c56b0", "filename": "gcc/config/rs6000/rios1.md", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frios1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frios1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios1.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,144 @@\n+(define_automaton \"rios1,rios1fp\")\n+(define_cpu_unit \"iu_rios1\" \"rios1\")\n+(define_cpu_unit \"fpu_rios1\" \"rios1fp\")\n+(define_cpu_unit \"bpu_rios1\" \"rios1\")\n+\n+;; RIOS1  32-bit IU, FPU, BPU\n+\n+(define_insn_reservation \"rios1-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1\")\n+\n+(define_insn_reservation \"rios1-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1\")\n+\n+(define_insn_reservation \"rios1-fpload\" 2\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1\")\n+\n+(define_insn_reservation \"ppc601-fpload\" 3\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_rios1\")\n+\n+(define_insn_reservation \"rios1-fpstore\" 1\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1+fpu_rios1\")\n+\n+(define_insn_reservation \"rios1-integer\" 1\n+  (and (eq_attr \"type\" \"integer,mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"iu_rios1\")\n+\n+(define_insn_reservation \"rios1-imul\" 5\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1*5\")\n+\n+(define_insn_reservation \"rios1-imul2\" 4\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1*4\")\n+\n+(define_insn_reservation \"rios1-imul3\" 3\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1*3\")\n+\n+(define_insn_reservation \"ppc601-imul\" 5\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_rios1*5\")\n+\n+(define_insn_reservation \"rios1-idiv\" 19\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1*19\")\n+\n+(define_insn_reservation \"ppc601-idiv\" 36\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_rios1*36\")\n+\n+; compare executes on integer unit, but feeds insns which\n+; execute on the branch unit.\n+(define_insn_reservation \"rios1-compare\" 4\n+  (and (eq_attr \"type\" \"cmp,compare\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1,nothing*2,bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-delayed_compare\" 5\n+  (and (eq_attr \"type\" \"delayed_compare\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"iu_rios1,nothing*3,bpu_rios1\")\n+\n+(define_insn_reservation \"ppc601-compare\" 3\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_rios1,nothing,bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-fpcompare\" 9\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"fpu_rios1,nothing*3,bpu_rios1\")\n+\n+(define_insn_reservation \"ppc601-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"(fpu_rios1+iu_rios1*2),nothing*2,bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-fp\" 2\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"fpu_rios1\")\n+\n+(define_insn_reservation \"ppc601-fp\" 4\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_rios1\")\n+\n+(define_insn_reservation \"rios1-dmul\" 5\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_rios1*2\")\n+\n+(define_insn_reservation \"rios1-sdiv\" 19\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"fpu_rios1*19\")\n+\n+(define_insn_reservation \"ppc601-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_rios1*17\")\n+\n+(define_insn_reservation \"ppc601-ddiv\" 31\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_rios1*31\")\n+\n+(define_insn_reservation \"rios1-crlogical\" 4\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"rios1\"))\n+  \"bpu_rios1\")\n+\n+(define_insn_reservation \"ppc601-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"bpu_rios1\")\n+\n+(define_insn_reservation \"rios1-branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"rios1,ppc601\"))\n+  \"bpu_rios1\")\n+"}, {"sha": "af96b870b02faa7f7b97a22a2387885d7b545c8a", "filename": "gcc/config/rs6000/rios2.md", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios2.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,82 @@\n+(define_automaton \"rios2,rios2fp\")\n+(define_cpu_unit \"iu1_rios2,iu2_rios2\" \"rios2\")\n+(define_cpu_unit \"fpu1_rios2,fpu2_rios2\" \"rios2fp\")\n+(define_cpu_unit \"bpu_rios2\" \"rios2\")\n+\n+;; RIOS2 32-bit 2xIU, 2xFPU, BPU\n+;; IU1 can perform all integer operations\n+;; IU2 can perform all integer operations except imul and idiv\n+\n+(define_insn_reservation \"rios2-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n+\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2|iu2_rios2\")\n+\n+(define_insn_reservation \"rios2-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2|iu2_rios2\")\n+\n+(define_insn_reservation \"rios2-integer\" 1\n+  (and (eq_attr \"type\" \"integer,mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2|iu2_rios2\")\n+\n+(define_insn_reservation \"rios2-imul\" 2\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2*2\")\n+\n+(define_insn_reservation \"rios2-idiv\" 13\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"iu1_rios2*13\")\n+\n+; compare executes on integer unit, but feeds insns which\n+; execute on the branch unit.\n+(define_insn_reservation \"rios2-compare\" 3\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"(iu1_rios2|iu2_rios2),nothing,bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-fp\" 2\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"fpu1_rios2|fpu2_rios2\")\n+\n+(define_insn_reservation \"rios2-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"(fpu1_rios2|fpu2_rios2),nothing*3,bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-dmul\" 2\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"fpu1_rios2|fpu2_rios2\")\n+\n+(define_insn_reservation \"rios2-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"(fpu1_rios2*17)|(fpu2_rios2*17)\")\n+\n+(define_insn_reservation \"rios2-ssqrt\" 26\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"(fpu1_rios2*26)|(fpu2_rios2*26)\")\n+\n+(define_insn_reservation \"rios2-crlogical\" 4\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"bpu_rios2\")\n+\n+(define_insn_reservation \"rios2-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"rios2\"))\n+  \"bpu_rios2\")\n+"}, {"sha": "240f2d5b9e69b13a17fd5daeb9391d696696e59a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -227,6 +227,9 @@ static unsigned int rs6000_xcoff_section_type_flags PARAMS ((tree, const char *,\n static void rs6000_xcoff_encode_section_info PARAMS ((tree, int))\n      ATTRIBUTE_UNUSED;\n static bool rs6000_binds_local_p PARAMS ((tree));\n+static int rs6000_use_dfa_pipeline_interface PARAMS ((void));\n+static int rs6000_multipass_dfa_lookahead PARAMS ((void));\n+static int rs6000_variable_issue PARAMS ((FILE *, int, rtx, int));\n static bool rs6000_rtx_costs PARAMS ((rtx, int, int, int *));\n static int rs6000_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int rs6000_adjust_priority PARAMS ((rtx, int));\n@@ -380,6 +383,13 @@ static const char alt_reg_names[][8] =\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE rs6000_output_function_epilogue\n \n+#undef  TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE rs6000_use_dfa_pipeline_interface\n+#undef  TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n+#define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD rs6000_multipass_dfa_lookahead\n+#undef  TARGET_SCHED_VARIABLE_ISSUE\n+#define TARGET_SCHED_VARIABLE_ISSUE rs6000_variable_issue\n+\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE rs6000_issue_rate\n #undef TARGET_SCHED_ADJUST_COST\n@@ -12203,6 +12213,57 @@ output_function_profiler (file, labelno)\n     }\n }\n \n+\f\n+static int\n+rs6000_use_dfa_pipeline_interface ()\n+{\n+  return 1;\n+}\n+\n+static int\n+rs6000_multipass_dfa_lookahead ()\n+{\n+  if (rs6000_cpu == PROCESSOR_POWER4)\n+    return 4;\n+  else\n+    return 1;\n+}\n+\n+/* Power4 load update and store update instructions are cracked into a\n+   load or store and an integer insn which are executed in the same cycle.\n+   Branches have their own dispatch slot which does not count against the\n+   GCC issue rate, but it changes the program flow so there are no other\n+   instructions to issue in this cycle.  */\n+\n+static int\n+rs6000_variable_issue (stream, verbose, insn, more)\n+  FILE *stream ATTRIBUTE_UNUSED;\n+  int verbose ATTRIBUTE_UNUSED;\n+  rtx insn;\n+  int more;\n+{\n+  if (GET_CODE (PATTERN (insn)) == USE\n+      || GET_CODE (PATTERN (insn)) == CLOBBER)\n+    return more;\n+\n+  if (rs6000_cpu == PROCESSOR_POWER4)\n+    {\n+      enum attr_type type = get_attr_type (insn);\n+      if (type == TYPE_LOAD_EXT_U || type == TYPE_LOAD_EXT_UX\n+\t  || type == TYPE_LOAD_UX || type == TYPE_STORE_UX\n+\t  || type == TYPE_FPLOAD_UX || type == TYPE_FPSTORE_UX)\n+\treturn 0;\n+      else if (type == TYPE_LOAD_U || type == TYPE_STORE_U\n+\t       || type == TYPE_FPLOAD_U || type == TYPE_FPSTORE_U\n+\t       || type == TYPE_LOAD_EXT || type == TYPE_DELAYED_CR)\n+\treturn more - 2;\n+      else\n+\treturn more - 1;\n+    }\n+  else\n+    return more - 1;\n+}\n+\n /* Adjust the cost of a scheduling dependency.  Return the new cost of\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n@@ -12246,10 +12307,12 @@ rs6000_adjust_cost (insn, link, dep_insn, cost)\n \t       || rs6000_cpu_attr == CPU_POWER4)\n \t      && recog_memoized (dep_insn)\n \t      && (INSN_CODE (dep_insn) >= 0)\n-\t      && (get_attr_type (dep_insn) == TYPE_COMPARE\n+\t      && (get_attr_type (dep_insn) == TYPE_CMP\n+\t\t  || get_attr_type (dep_insn) == TYPE_COMPARE\n \t\t  || get_attr_type (dep_insn) == TYPE_DELAYED_COMPARE\n \t\t  || get_attr_type (dep_insn) == TYPE_FPCOMPARE\n-\t\t  || get_attr_type (dep_insn) == TYPE_CR_LOGICAL))\n+\t\t  || get_attr_type (dep_insn) == TYPE_CR_LOGICAL\n+\t\t  || get_attr_type (dep_insn) == TYPE_DELAYED_CR))\n \t    return cost + 2;\n \tdefault:\n \t  break;\n@@ -12315,6 +12378,7 @@ rs6000_issue_rate ()\n   case CPU_PPC601: /* ? */\n   case CPU_PPC7450:\n     return 3;\n+  case CPU_PPC440:\n   case CPU_PPC603:\n   case CPU_PPC750:\n   case CPU_PPC7400:"}, {"sha": "744b6bc4aa17e089e7d7b2529748333cfb2f2fb2", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -338,6 +338,7 @@ enum processor_type\n    PROCESSOR_MPCCORE,\n    PROCESSOR_PPC403,\n    PROCESSOR_PPC405,\n+   PROCESSOR_PPC440,\n    PROCESSOR_PPC601,\n    PROCESSOR_PPC603,\n    PROCESSOR_PPC604,"}, {"sha": "76ad8df39fe7a56271d81accb6c01c6aa91c796c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 85, "deletions": 862, "changes": 947, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -35,11 +35,11 @@\n ;; 15\t\tload_macho_picbase\n ;; 16\t\tmacho_correct_pic\n ;; 19\t\tmovesi_from_cr\n-;; 20\t\tmovesi_to_cr\n+;; 20\t\tmovsi_to_cr\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,load,store,fpload,fpstore,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,branch,compare,cr_logical,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,vecsimple,veccomplex,veccmp,vecperm,vecfloat\"\n+(define_attr \"type\" \"integer,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,branch,cmp,compare,delayed_compare,fpcompare,cr_logical,delayed_cr,mfcr,mtcr,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,vecsimple,veccomplex,veccmp,vecperm,vecfloat\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n@@ -58,800 +58,21 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n-; (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n-;\t\t\tTEST READY-DELAY ISSUE-DELAY [CONFLICT-LIST])\n-\n-; Load/Store Unit -- pure PowerPC only\n-; (POWER and 601 use Integer Unit)\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400\"))\n-  2 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"load,vecload\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  3 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n-  1 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  2 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"store,vecstore\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  3 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"fpstore\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  3 3)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603,ppc750,ppc7400\"))\n-  2 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  4 1)\n-\n-(define_function_unit \"lsu\" 1 0\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"rs64a,ppc604,ppc604e,ppc620,ppc630\"))\n-  3 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"rios1,ppc403,ppc405,ppc601\"))\n-  2 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"rios1,ppc403,ppc405,ppc601\"))\n-  1 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fpstore\")\n-       (eq_attr \"cpu\" \"rios1,ppc601\"))\n-  0 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  2 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"ppc601\"))\n-  3 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"load,fpload\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  2 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  1 1)\n-\n-; Integer Unit (RIOS1, PPC601, PPC603, RS64a)\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"rios1,rs64a,mpccore,ppc403,ppc405,ppc601,ppc603\"))\n-  1 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc405,ppc601\"))\n-  1 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"ppc403\"))\n-  4 4)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc405\"))\n-  4 3)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul2,imul3\")\n-       (eq_attr \"cpu\" \"ppc405\"))\n-  3 2)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  5 5)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul2\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  4 4)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul3\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  3 3)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603\"))\n-  5 5)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  20 20)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul2\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  12 12)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul3\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  8 8)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"lmul\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  34 34)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  19 19)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  66 66)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"ldiv\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  66 66)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc403\"))\n-  33 33)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc405\"))\n-  35 35)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc601\"))\n-  36 36)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc603\"))\n-  37 36)\n-\n-; RIOS2 has two integer units: a primary one which can perform all\n-; operations and a secondary one which is fed in lock step with the first\n-; and can perform \"simple\" integer operations.  \n-; To catch this we define a 'dummy' imuldiv-unit that is also needed\n-; for the complex insns. \n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  1 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  2 2)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  13 13)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  2 2)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  13 13)\n-\n-; MPCCORE has separate IMUL/IDIV unit for multicycle instructions\n-; Divide latency varies greatly from 2-11, use 6 as average\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  2 1)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  6 6)\n-\n-; PPC604{,e} has two units that perform integer operations\n-; and one unit for divide/multiply operations (and move\n-; from/to spr).\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n-  1 1)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"ppc604\"))\n-  4 2)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n-       (eq_attr \"cpu\" \"ppc604e\"))\n-  2 1)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n-  5 3)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul2\")\n-       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n-  4 3)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul3\")\n-       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n-  3 3)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"lmul\")\n-       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n-  7 5)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n-  20 19)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc620\"))\n-  37 36)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  21 20)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"ldiv\")\n-       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n-  37 36)\n-\n-; PPC7450 has 3 integer units (for most integer insns) and one mul/div\n-; unit, which also does CR-logical insns and move to/from SPR.\n-; It also has 4 vector units, one for each type of vector instruction.\n-; However, we can only dispatch 2 instructions per cycle. \n-; We model this as saying that dispatching two of the same type of instruction\n-; in a row incurs a single cycle delay.\n-(define_function_unit \"iu3\" 3 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  1 1)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  4 2)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul2,imul3\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  3 1)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  23 23)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  1 1)\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"vecsimple\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  1 2 [(eq_attr \"type\" \"vecsimple\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"vecsimple\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  1 1 [(eq_attr \"type\" \"!vecsimple\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"veccomplex\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  4 2 [(eq_attr \"type\" \"veccomplex\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"veccomplex\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  4 1 [(eq_attr \"type\" \"!veccomplex\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"veccmp\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  2 2 [(eq_attr \"type\" \"veccmp\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"veccmp\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  2 1 [(eq_attr \"type\" \"!veccmp\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"vecfloat\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  4 2 [(eq_attr \"type\" \"vecfloat\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"vecfloat\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  4 1 [(eq_attr \"type\" \"!vecfloat\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"vecperm\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  2 2 [(eq_attr \"type\" \"vecperm\")])\n-\n-(define_function_unit \"vec_alu2\" 2 0\n-  (and (eq_attr \"type\" \"vecperm\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  2 1 [(eq_attr \"type\" \"!vecperm\")])\n-\n-; PPC750 has two integer units: a primary one which can perform all\n-; operations and a secondary one which is fed in lock step with the first\n-; and can perform \"simple\" integer operations.  \n-; To catch this we define a 'dummy' imuldiv-unit that is also needed\n-; for the complex insns. \n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  1 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  4 4)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul2\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  3 2)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul3\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  2 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  19 19)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  4 4)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul2\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  3 2)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul3\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  2 1)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  19 19)\n-\n-; CR-logical operations are execute-serialized, that is they don't\n-; start (and block the function unit) until all preceding operations\n-; have finished.  They don't block dispatch of other insns, though.\n-; I've imitated this by giving them longer latency.\n-(define_function_unit \"sru\" 1 0 \n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"ppc603,ppc750,ppc7400\"))\n-  3 2)\n-\n-; compare is done on integer unit, but feeds insns which\n-; execute on the branch unit.\n-(define_function_unit \"iu\" 1 0   \n-  (and (eq_attr \"type\" \"compare\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  4 1)\n-\n-(define_function_unit \"iu\" 1 0   \n-  (and (eq_attr \"type\" \"delayed_compare\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  5 1)\n-\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc405,ppc601,ppc603\"))\n-  3 1)\n-\n-; some extra cycles added by TARGET_SCHED_ADJUST_COST between compare\n-; and a following branch, to reduce mispredicts\n-(define_function_unit \"iu3\" 3 0\n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  1 1)\n-\n-(define_function_unit \"iu2\" 2 0   \n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  3 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400\"))\n-  1 1)\n-\n-; fp compare uses fp unit\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  9 1)\n-\n-; rios1 and rios2 have different fpcompare delays\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"rios2,ppc630\"))\n-  5 1)\n-\n-; on ppc601 and ppc603, fpcompare takes also 2 cycles from\n-; the integer unit\n-; here we do not define delays, just occupy the unit. The dependencies\n-; will be assigned by the fpcompare definition in the fpu.\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603\"))\n-  0 2)\n-\n-; fp compare uses fp unit\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"rs64a,ppc601,ppc603,ppc604,ppc604e,ppc620\"))\n-  5 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\"  \"ppc750,ppc7400,ppc7450\"))\n-  3 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  1 1)\n-\n-(define_function_unit \"bpu\" 1 0\n-  (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"rios1,rios2,rs64a\"))\n-  5 1)\n-\n-(define_function_unit \"bpu\" 1 0\n-  (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc405,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n-  4 1)\n-\n-(define_function_unit \"sru\" 1 0\n-  (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  2 2)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  2 2)\n-\n-(define_function_unit \"bpu\" 1 0\n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"rios1,rios2,ppc604\"))\n-  4 1)\n-  \n-(define_function_unit \"cru\" 1 0\n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"ppc604e,ppc620,ppc630,rs64a\"))\n-  1 1)\n-\n-; all jumps/branches are executing on the bpu, in 1 cycle, for all machines.\n-(define_function_unit \"bpu\" 1 0\n-  (eq_attr \"type\" \"jmpreg\")\n-  1 1)\n-\n-(define_function_unit \"bpu\" 1 0\n-  (eq_attr \"type\" \"branch\")\n-  1 1)\n-\n-; Floating Point Unit\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fp,dmul\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  2 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore\"))\n-  4 2)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc601\"))\n-  4 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc603,ppc604,ppc604e,ppc620,ppc750,ppc7400\"))\n-  3 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"fp,dmul\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  5 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  7 2)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  5 5)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"ppc601\"))\n-  5 2)\n-\n-; is this true?\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"ppc603,ppc750\"))\n-  4 2)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc7400\"))\n-  3 1)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv,ddiv\")\n-       (eq_attr \"cpu\" \"rios1\"))\n-  19 19)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"rs64a\"))\n-  31 31)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"ppc601,ppc750,ppc7400\"))\n-  17 17)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  21 21)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  10 10)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"ppc603,ppc604,ppc604e,ppc620\"))\n-  18 18)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  17 17)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"rs64a,ppc601,ppc750,ppc604,ppc604e,ppc620,ppc7400\"))\n-  31 31)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"ppc7450\"))\n-  35 35)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"ppc603\"))\n-  33 33)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"ssqrt\")\n-       (eq_attr \"cpu\" \"ppc620\"))\n-  31 31)\n-\n-(define_function_unit \"fpu\" 1 0\n-  (and (eq_attr \"type\" \"dsqrt\")\n-       (eq_attr \"cpu\" \"ppc620\"))\n-  31 31)\n-\n-; RIOS2 has two symmetric FPUs.\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fp,dmul\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  2 1)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fp,dmul\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  3 1)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"sdiv,ddiv\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  17 17)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  17 17)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  21 21)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  26 26)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"ssqrt\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  18 18)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"dsqrt\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  26 26)\n-\n-;; Power4\n-(define_function_unit \"lsu2\" 2 0\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  3 1)\n-\n-(define_function_unit \"lsu2\" 2 0\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  5 1)\n-\n-(define_function_unit \"lsu2\" 2 0\n-  (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  1 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  2 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul,lmul\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  7 6)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul2\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  5 4)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul3\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  4 3)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  36 35)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"ldiv\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  68 67)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  36 35)\n-\n-(define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"ldiv\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  68 67)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"compare\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  3 1)\n-\n-(define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"delayed_compare\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  4 1)\n-\n-(define_function_unit \"bpu\" 1 0\n-  (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  3 1)\n-\n-(define_function_unit \"bpu\" 1 0\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  2 1)\n-\n-(define_function_unit \"cru\" 1 0\n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  4 1)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fp,dmul\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  6 1)\n-\n-; adjust_cost increases the cost of dependent branches,\n-; so shave a few cycles off for fpcompare.\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  5 1)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"sdiv,ddiv\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  33 28)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n-       (eq_attr \"cpu\" \"power4\"))\n-  40 35)\n+(automata_option \"ndfa\")\n+\n+(include \"rios1.md\")\n+(include \"rios2.md\")\n+(include \"rs64.md\")\n+(include \"mpc.md\")\n+(include \"40x.md\")\n+(include \"603.md\")\n+(include \"6xx.md\")\n+(include \"7xx.md\")\n+(include \"7450.md\")\n+(include \"power4.md\")\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n@@ -1062,7 +283,7 @@\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\"\n-  [(set_attr \"type\" \"load,*\")])\n+  [(set_attr \"type\" \"load_ext,*\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -1196,7 +417,7 @@\n   \"@\n    lwa%U1%X1 %0,%1\n    extsw %0,%1\"\n-  [(set_attr \"type\" \"load,*\")])\n+  [(set_attr \"type\" \"load_ext,*\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -1664,7 +885,7 @@\n   \"@\n    lha%U1%X1 %0,%1\n    {exts|extsh} %0,%1\"\n-  [(set_attr \"type\" \"load,*\")])\n+  [(set_attr \"type\" \"load_ext,*\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -8475,8 +7696,8 @@\n   \"\")\n \n (define_insn \"*movcc_internal1\"\n-  [(set (match_operand:CC 0 \"nonimmediate_operand\" \"=y,x,y,r,r,r,cl,q,r,r,m\")\n-\t(match_operand:CC 1 \"nonimmediate_operand\" \"y,r,r,x,y,r,r,r,h,m,r\"))]\n+  [(set (match_operand:CC 0 \"nonimmediate_operand\" \"=y,x,?y,r,r,r,r,q,cl,r,m\")\n+\t(match_operand:CC 1 \"nonimmediate_operand\" \"y,r,r,x,y,r,h,r,r,m,r\"))]\n   \"register_operand (operands[0], CCmode)\n    || register_operand (operands[1], CCmode)\"\n   \"@\n@@ -8486,12 +7707,12 @@\n    mfcr %0\n    mfcr %0\\;{rlinm|rlwinm} %0,%0,%f1,0xf0000000\n    mr %0,%1\n+   mf%1 %0\n    mt%0 %1\n    mt%0 %1\n-   mf%1 %0\n    {l%U1%X1|lwz%U1%X1} %0,%1\n    {st%U0%U1|stw%U0%U1} %1,%0\"\n-  [(set_attr \"type\" \"cr_logical,cr_logical,cr_logical,cr_logical,cr_logical,*,*,mtjmpr,*,load,store\")\n+  [(set_attr \"type\" \"cr_logical,mtcr,mtcr,mfcr,mfcr,*,*,*,mtjmpr,load,store\")\n    (set_attr \"length\" \"4,4,12,4,8,4,4,4,4,4,4\")])\n \f\n ;; For floating-point, we normally deal with the floating-point registers\n@@ -10146,18 +9367,7 @@\n   \"@\n    ldux %3,%0,%2\n    ldu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n-\n-(define_insn \"*movdi_update2\"\n-  [(set (match_operand:DI 3 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:DI\n-\t (mem:SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0\")\n-\t\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n-\t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n-  \"lwaux %3,%0,%2\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"movdi_update\"\n   [(set (mem:DI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10169,7 +9379,7 @@\n   \"@\n    stdux %3,%0,%2\n    stdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store\")])\n+  [(set_attr \"type\" \"store_ux,store_u\")])\n \n (define_insn \"*movsi_update1\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -10181,7 +9391,18 @@\n   \"@\n    {lux|lwzux} %3,%0,%2\n    {lu|lwzu} %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n+\n+(define_insn \"*movsi_update2\"\n+  [(set (match_operand:DI 3 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t (mem:SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0\")\n+\t\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"lwaux %3,%0,%2\"\n+  [(set_attr \"type\" \"load_ext_ux\")])\n \n (define_insn \"movsi_update\"\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10193,9 +9414,9 @@\n   \"@\n    {stux|stwux} %3,%0,%2\n    {stu|stwu} %3,%2(%0)\"\n-  [(set_attr \"type\" \"store\")])\n+  [(set_attr \"type\" \"store_ux,store_u\")])\n \n-(define_insn \"*movhi_update\"\n+(define_insn \"*movhi_update1\"\n   [(set (match_operand:HI 3 \"gpc_reg_operand\" \"=r,r\")\n \t(mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n@@ -10205,7 +9426,7 @@\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movhi_update2\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -10218,7 +9439,7 @@\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movhi_update3\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -10231,7 +9452,7 @@\n   \"@\n    lhaux %3,%0,%2\n    lhau %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ext_ux,load_ext_u\")])\n \n (define_insn \"*movhi_update4\"\n   [(set (mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10243,7 +9464,7 @@\n   \"@\n    sthux %3,%0,%2\n    sthu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store\")])\n+  [(set_attr \"type\" \"store_ux,store_u\")])\n \n (define_insn \"*movqi_update1\"\n   [(set (match_operand:QI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -10255,7 +9476,7 @@\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movqi_update2\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -10268,7 +9489,7 @@\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movqi_update3\"\n   [(set (mem:QI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10280,7 +9501,7 @@\n   \"@\n    stbux %3,%0,%2\n    stbu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store\")])\n+  [(set_attr \"type\" \"store_ux,store_u\")])\n \n (define_insn \"*movsf_update1\"\n   [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=f,f\")\n@@ -10292,7 +9513,7 @@\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpload\")])\n+  [(set_attr \"type\" \"fpload_ux,fpload_u\")])\n \n (define_insn \"*movsf_update2\"\n   [(set (mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10304,7 +9525,7 @@\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpstore\")])\n+  [(set_attr \"type\" \"fpstore_ux,fpstore_u\")])\n \n (define_insn \"*movsf_update3\"\n   [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -10316,7 +9537,7 @@\n   \"@\n    {lux|lwzux} %3,%0,%2\n    {lu|lwzu} %3,%2(%0)\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movsf_update4\"\n   [(set (mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10328,7 +9549,7 @@\n   \"@\n    {stux|stwux} %3,%0,%2\n    {stu|stwu} %3,%2(%0)\"\n-  [(set_attr \"type\" \"store\")])\n+  [(set_attr \"type\" \"store_ux,store_u\")])\n \n (define_insn \"*movdf_update1\"\n   [(set (match_operand:DF 3 \"gpc_reg_operand\" \"=f,f\")\n@@ -10340,7 +9561,7 @@\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpload\")])\n+  [(set_attr \"type\" \"fpload_ux,fpload_u\")])\n \n (define_insn \"*movdf_update2\"\n   [(set (mem:DF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10352,7 +9573,7 @@\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpstore\")])\n+  [(set_attr \"type\" \"fpstore_ux,fpstore_u\")])\n \n ;; Peephole to convert two consecutive FP loads or stores into lfq/stfq.\n \n@@ -11668,15 +10889,15 @@\n \t\t    (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n   \"\"\n   \"{cmp%I2|cmpw%I2} %0,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  [(set_attr \"type\" \"cmp\")])\n \n (define_insn \"*cmpdi_internal1\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CC (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n   \"TARGET_POWERPC64\"\n   \"cmpd%I2 %0,%1,%2\"\n-  [(set_attr \"type\" \"compare\")])\n+  [(set_attr \"type\" \"cmp\")])\n \n ;; If we are comparing a register for equality with a large constant,\n ;; we can do this with an XOR followed by a compare.  But we need a scratch\n@@ -11712,15 +10933,15 @@\n \t\t       (match_operand:SI 2 \"reg_or_u_short_operand\" \"rK\")))]\n   \"\"\n   \"{cmpl%I2|cmplw%I2} %0,%1,%b2\"\n-  [(set_attr \"type\" \"compare\")])\n+  [(set_attr \"type\" \"cmp\")])\n \n (define_insn \"*cmpdi_internal2\"\n   [(set (match_operand:CCUNS 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCUNS (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (match_operand:DI 2 \"reg_or_u_short_operand\" \"rK\")))]\n   \"\"\n   \"cmpld%I2 %0,%1,%b2\"\n-  [(set_attr \"type\" \"compare\")])\n+  [(set_attr \"type\" \"cmp\")])\n \n ;; The following two insns don't exist as single insns, but if we provide\n ;; them, we can swap an add and compare, which will enable us to overlap more\n@@ -11808,7 +11029,7 @@\n \t\t\t    (const_int 0)]))]\n   \"\"\n   \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%J1,1\"\n-  [(set_attr \"type\" \"cr_logical\")\n+  [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"12\")])\n \n ;; Same as above, but get the OV/ORDERED bit.\n@@ -11817,7 +11038,8 @@\n \t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] 724))]\n   \"TARGET_ISEL\"\n   \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%t1,1\"\n-  [(set_attr \"length\" \"12\")])\n+  [(set_attr \"type\" \"mfcr\")\n+   (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -11826,7 +11048,7 @@\n \t\t\t    (const_int 0)]))]\n   \"TARGET_POWERPC64\"\n   \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%J1,1\"\n-  [(set_attr \"type\" \"cr_logical\")\n+  [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n@@ -11883,7 +11105,7 @@\n \n   return \\\"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%4,%5,%5\\\";\n }\"\n-  [(set_attr \"type\" \"cr_logical\")\n+  [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n@@ -11955,7 +11177,7 @@\n \t\t\t    (const_int 0)]))]\n   \"REGNO (operands[2]) != REGNO (operands[5])\"\n   \"%D1%D4mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n-  [(set_attr \"type\" \"cr_logical\")\n+  [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"20\")])\n \n (define_peephole\n@@ -11969,7 +11191,7 @@\n \t\t\t    (const_int 0)]))]\n   \"TARGET_POWERPC64 && REGNO (operands[2]) != REGNO (operands[5])\"\n   \"%D1%D4mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n-  [(set_attr \"type\" \"cr_logical\")\n+  [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"20\")])\n \n ;; There are some scc insns that can be done directly, without a compare.\n@@ -14080,7 +13302,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"branch_comparison_operator\"\n \t\t\t\t      [(match_operand 2\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"x,?y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n@@ -14095,7 +13317,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"branch_comparison_operator\"\n \t\t\t\t      [(match_operand 1\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"x,?y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (return)\n \t\t      (pc)))]\n@@ -14111,7 +13333,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"branch_comparison_operator\"\n \t\t\t\t      [(match_operand 2\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"x,?y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n@@ -14126,7 +13348,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"branch_comparison_operator\"\n \t\t\t\t      [(match_operand 1\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"x,?y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (pc)\n \t\t      (return)))]\n@@ -14145,56 +13367,57 @@\n ;\t\t\t\t\t   (eq:SI (reg:CCFP 68) (const_int 0)))\n ;\t\t\t\t   (const_int 1)))\n ; which are generated by the branch logic.\n+; Prefer destructive operations where BT = BB (for crXX BT,BA,BB)\n \n (define_insn \"\"\n-  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y\")\n+  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y,?y\")\n         (compare:CCEQ (match_operator:SI 1 \"boolean_operator\"\n-\t                [(match_operator:SI 2 \n+\t                [(match_operator:SI 2\n \t\t\t\t      \"branch_positive_comparison_operator\"\n \t\t\t\t      [(match_operand 3\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"y,y\")\n \t\t\t\t       (const_int 0)])\n-\t                 (match_operator:SI 4 \n+\t                 (match_operator:SI 4\n \t\t\t\t      \"branch_positive_comparison_operator\"\n \t\t\t\t      [(match_operand 5\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"0,y\")\n \t\t\t\t       (const_int 0)])])\n \t\t      (const_int 1)))]\n   \"\"\n   \"cr%q1 %E0,%j2,%j4\"\n-  [(set_attr \"type\" \"cr_logical\")])\n+  [(set_attr \"type\" \"cr_logical,delayed_cr\")])\n \n ; Why is the constant -1 here, but 1 in the previous pattern?\n ; Because ~1 has all but the low bit set.\n (define_insn \"\"\n-  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y\")\n+  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y,?y\")\n         (compare:CCEQ (match_operator:SI 1 \"boolean_or_operator\"\n-\t                [(not:SI (match_operator:SI 2 \n+\t                [(not:SI (match_operator:SI 2\n \t\t\t\t      \"branch_positive_comparison_operator\"\n \t\t\t\t      [(match_operand 3\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"y,y\")\n \t\t\t\t       (const_int 0)]))\n \t                 (match_operator:SI 4\n \t\t\t\t\"branch_positive_comparison_operator\"\n \t\t\t\t[(match_operand 5\n-\t\t\t\t\t\t\"cc_reg_operand\" \"y\")\n+\t\t\t\t\t\t\"cc_reg_operand\" \"0,y\")\n \t\t\t\t (const_int 0)])])\n \t\t      (const_int -1)))]\n   \"\"\n   \"cr%q1 %E0,%j2,%j4\"\n-  [(set_attr \"type\" \"cr_logical\")])\n+  [(set_attr \"type\" \"cr_logical,delayed_cr\")])\n \n (define_insn \"\"\n-  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y\")\n+  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=y,?y\")\n \t(compare:CCEQ (match_operator:SI 1\n \t\t\t\t      \"branch_positive_comparison_operator\"\n \t\t\t\t      [(match_operand 2\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n+\t\t\t\t\t\t      \"cc_reg_operand\" \"0,y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (const_int 0)))]\n   \"!TARGET_SPE\"\n   \"{crnor %E0,%j1,%j1|crnot %E0,%j1}\"\n-  [(set_attr \"type\" \"cr_logical\")])\n+  [(set_attr \"type\" \"cr_logical,delayed_cr\")])\n \n ;; If we are comparing the result of two comparisons, this can be done\n ;; using creqv or crxor.\n@@ -14877,7 +14100,7 @@\n \t\t    (reg:CC 72)\t(reg:CC 73) (reg:CC 74) (reg:CC 75)] 19))]\n   \"\"\n   \"mfcr %0\"\n-  [(set_attr \"type\" \"cr_logical\")])\n+  [(set_attr \"type\" \"mfcr\")])\n \n (define_insn \"*stmw\"\n  [(match_parallel 0 \"stmw_operation\"\n@@ -14950,9 +14173,9 @@\n   operands[4] = GEN_INT (mask);\n   return \\\"mtcrf %4,%2\\\";\n }\"\n-  [(set_attr \"type\" \"cr_logical\")])\n+  [(set_attr \"type\" \"mtcr\")])\n \n-(define_insn \"\"\n+(define_insn \"*mtcrfsi\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n         (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand 2 \"immediate_operand\" \"n\")] 20))]\n@@ -14961,7 +14184,7 @@\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) == 1 << (75 - REGNO (operands[0]))\"\n   \"mtcrf %R0,%1\"\n-  [(set_attr \"type\" \"cr_logical\")])\n+  [(set_attr \"type\" \"mtcr\")])\n \n ; The load-multiple instructions have similar properties.\n ; Note that \"load_multiple\" is a name known to the machine-independent"}, {"sha": "e304094a1b5fc31b520ed9519e76e1d00960be08", "filename": "gcc/config/rs6000/rs64.md", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54cf83ae659949de888bb3ec2797b7858e6ee1a/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=b54cf83ae659949de888bb3ec2797b7858e6ee1a", "patch": "@@ -0,0 +1,103 @@\n+(define_automaton \"rs64,rs64fp,rs64other\")\n+(define_cpu_unit \"iu_rs64\" \"rs64\")\n+(define_cpu_unit \"mciu_rs64\" \"rs64\")\n+(define_cpu_unit \"fpu_rs64\" \"rs64fp\")\n+(define_cpu_unit \"lsu_rs64,bpu_rs64\" \"rs64other\")\n+\n+;; RS64a 64-bit IU, LSU, FPU, BPU\n+\n+(define_insn_reservation \"rs64a-load\" 2\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"lsu_rs64\")\n+\n+(define_insn_reservation \"rs64a-store\" 1\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"lsu_rs64\")\n+\n+(define_insn_reservation \"rs64a-fpload\" 3\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"lsu_rs64\")\n+\n+(define_insn_reservation \"rs64a-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"iu_rs64\")\n+\n+(define_insn_reservation \"rs64a-imul\" 20\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64*13\")\n+\n+(define_insn_reservation \"rs64a-imul2\" 12\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64*5\")\n+\n+(define_insn_reservation \"rs64a-imul3\" 8\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64*2\")\n+\n+(define_insn_reservation \"rs64a-lmul\" 34\n+  (and (eq_attr \"type\" \"lmul\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64*34\")\n+\n+(define_insn_reservation \"rs64a-idiv\" 66\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64*66\")\n+\n+(define_insn_reservation \"rs64a-ldiv\" 66\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64*66\")\n+\n+(define_insn_reservation \"rs64a-compare\" 3\n+  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"iu_rs64,nothing,bpu_rs64\")\n+\n+(define_insn_reservation \"rs64a-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64,fpu_rs64,bpu_rs64\")\n+\n+(define_insn_reservation \"rs64a-fp\" 4\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64,fpu_rs64\")\n+\n+(define_insn_reservation \"rs64a-sdiv\" 31\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64,fpu_rs64*31\")\n+\n+(define_insn_reservation \"rs64a-sqrt\" 49\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64,fpu_rs64*49\")\n+\n+(define_insn_reservation \"rs64a-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64\")\n+\n+(define_insn_reservation \"rs64a-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"mciu_rs64\")\n+\n+(define_insn_reservation \"rs64a-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"bpu_rs64\")\n+\n+(define_insn_reservation \"rs64a-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"bpu_rs64\")\n+"}]}