{"sha": "bf0a63a1f47525d1c466dbb84616dcb72010affa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwYTYzYTFmNDc1MjVkMWM0NjZkYmI4NDYxNmRjYjcyMDEwYWZmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-27T10:23:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-27T10:25:10Z"}, "message": "gimple-fold: Fix another __builtin_clear_padding ICE\n\nWhen playing with __builtin_bit_cast, I have noticed __builtin_clear_padding\nICE on the G class below.  The artificial field with D type has offset 0\nand size 8 bytes, but the following artificial field with E type has offset\n0 and size 0, so it triggers the asserts that we don't move current position\nbackwards.  Fixed by ignoring is_empty_type (TREE_TYPE (field)) fields, all\nof their bits are padding which is what is added when skipping over to next\nfield anyway.\n\n2020-11-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/88101\n\t* gimple-fold.c (clear_padding_type): Ignore fields with is_empty_type\n\ttypes.\n\n\t* g++.dg/torture/builtin-clear-padding-3.C: New test.", "tree": {"sha": "b78eed14726ad5e61976e8660ed6d759f8ec3d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b78eed14726ad5e61976e8660ed6d759f8ec3d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf0a63a1f47525d1c466dbb84616dcb72010affa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0a63a1f47525d1c466dbb84616dcb72010affa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0a63a1f47525d1c466dbb84616dcb72010affa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0a63a1f47525d1c466dbb84616dcb72010affa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f324479caf0ac326534f4fcf72cb12991ccddb3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f324479caf0ac326534f4fcf72cb12991ccddb3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f324479caf0ac326534f4fcf72cb12991ccddb3d"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "1f3d80e288187301b37aafc8747c4b3daf2dc916", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf0a63a1f47525d1c466dbb84616dcb72010affa/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf0a63a1f47525d1c466dbb84616dcb72010affa/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=bf0a63a1f47525d1c466dbb84616dcb72010affa", "patch": "@@ -4533,6 +4533,8 @@ clear_padding_type (clear_padding_struct *buf, tree type, HOST_WIDE_INT sz)\n \t\t\t\t    \"well defined padding bits for %qs\",\n \t\t\t  field, \"__builtin_clear_padding\");\n \t      }\n+\t    else if (is_empty_type (TREE_TYPE (field)))\n+\t      continue;\n \t    else\n \t      {\n \t\tHOST_WIDE_INT pos = int_byte_position (field);"}, {"sha": "d528196bf2dcd6fa02f3153874d0237722038262", "filename": "gcc/testsuite/g++.dg/torture/builtin-clear-padding-3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf0a63a1f47525d1c466dbb84616dcb72010affa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-clear-padding-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf0a63a1f47525d1c466dbb84616dcb72010affa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-clear-padding-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-clear-padding-3.C?ref=bf0a63a1f47525d1c466dbb84616dcb72010affa", "patch": "@@ -0,0 +1,24 @@\n+/* PR libstdc++/88101 */\n+\n+struct D { int a; int : 24; int b : 8; };\n+struct E {};\n+struct F { char c, d, e; };\n+struct G : public D, E, F { int f; } g1, g2;\n+\n+__attribute__((noipa)) void\n+foo (G *g)\n+{\n+  g->a = -1; g->b = -1; g->c = -1; g->d = -1; g->e = -1; g->f = -1;\n+}\n+\n+int\n+main ()\n+{\n+  __builtin_memset (&g2, -1, sizeof (g2));\n+  foo (&g1);\n+  foo (&g2);\n+  __builtin_clear_padding (&g2);\n+  if (__builtin_memcmp (&g1, &g2, sizeof (g1)))\n+    __builtin_abort ();\n+  return 0;\n+}"}]}