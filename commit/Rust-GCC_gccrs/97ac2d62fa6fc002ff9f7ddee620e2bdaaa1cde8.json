{"sha": "97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhYzJkNjJmYTZmYzAwMmZmOWY3ZGRlZTYyMGUyYmRhYWExY2RlOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:55:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:55:34Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r247476", "tree": {"sha": "a563ee2d21d9e5dccecab5247f25f22b03a34c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a563ee2d21d9e5dccecab5247f25f22b03a34c6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/comments", "author": null, "committer": null, "parents": [{"sha": "1804faa419c5a5ce91e60a5d67acd1e28c318944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1804faa419c5a5ce91e60a5d67acd1e28c318944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1804faa419c5a5ce91e60a5d67acd1e28c318944"}], "stats": {"total": 91, "additions": 52, "deletions": 39}, "files": [{"sha": "6162a0e38c0462b5b9632f5b73f8382ddcecaf81", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "patch": "@@ -4047,45 +4047,45 @@ package body Checks is\n       Comp       : Node_Id := Empty;\n       Array_Comp : Boolean := False)\n    is\n-      Error_Node : Node_Id;\n-      Expr       : Node_Id;\n-      Has_Null   : constant Boolean := Has_Null_Exclusion (N);\n-      K          : constant Node_Kind := Nkind (N);\n-      Typ        : Entity_Id;\n+      Has_Null  : constant Boolean   := Has_Null_Exclusion (N);\n+      Kind      : constant Node_Kind := Nkind (N);\n+      Error_Nod : Node_Id;\n+      Expr      : Node_Id;\n+      Typ       : Entity_Id;\n \n    begin\n       pragma Assert\n-        (Nkind_In (K, N_Component_Declaration,\n-                      N_Discriminant_Specification,\n-                      N_Function_Specification,\n-                      N_Object_Declaration,\n-                      N_Parameter_Specification));\n+        (Nkind_In (Kind, N_Component_Declaration,\n+                         N_Discriminant_Specification,\n+                         N_Function_Specification,\n+                         N_Object_Declaration,\n+                         N_Parameter_Specification));\n \n-      if K = N_Function_Specification then\n+      if Kind = N_Function_Specification then\n          Typ := Etype (Defining_Entity (N));\n       else\n          Typ := Etype (Defining_Identifier (N));\n       end if;\n \n-      case K is\n+      case Kind is\n          when N_Component_Declaration =>\n             if Present (Access_Definition (Component_Definition (N))) then\n-               Error_Node := Component_Definition (N);\n+               Error_Nod := Component_Definition (N);\n             else\n-               Error_Node := Subtype_Indication (Component_Definition (N));\n+               Error_Nod := Subtype_Indication (Component_Definition (N));\n             end if;\n \n          when N_Discriminant_Specification =>\n-            Error_Node    := Discriminant_Type (N);\n+            Error_Nod := Discriminant_Type (N);\n \n          when N_Function_Specification =>\n-            Error_Node    := Result_Definition (N);\n+            Error_Nod := Result_Definition (N);\n \n          when N_Object_Declaration =>\n-            Error_Node    := Object_Definition (N);\n+            Error_Nod := Object_Definition (N);\n \n          when N_Parameter_Specification =>\n-            Error_Node    := Parameter_Type (N);\n+            Error_Nod := Parameter_Type (N);\n \n          when others =>\n             raise Program_Error;\n@@ -4098,25 +4098,23 @@ package body Checks is\n \n          if not Is_Access_Type (Typ) then\n             Error_Msg_N\n-              (\"`NOT NULL` allowed only for an access type\", Error_Node);\n+              (\"`NOT NULL` allowed only for an access type\", Error_Nod);\n \n          --  Enforce legality rule RM 3.10(14/1): A null exclusion can only\n          --  be applied to a [sub]type that does not exclude null already.\n \n-         elsif Can_Never_Be_Null (Typ)\n-           and then Comes_From_Source (Typ)\n-         then\n+         elsif Can_Never_Be_Null (Typ) and then Comes_From_Source (Typ) then\n             Error_Msg_NE\n               (\"`NOT NULL` not allowed (& already excludes null)\",\n-               Error_Node, Typ);\n+               Error_Nod, Typ);\n          end if;\n       end if;\n \n       --  Check that null-excluding objects are always initialized, except for\n       --  deferred constants, for which the expression will appear in the full\n       --  declaration.\n \n-      if K = N_Object_Declaration\n+      if Kind = N_Object_Declaration\n         and then No (Expression (N))\n         and then not Constant_Present (N)\n         and then not No_Initialization (N)\n@@ -4172,11 +4170,11 @@ package body Checks is\n       --  assigned a null value. Otherwise generate a warning message and\n       --  replace Expression (N) by an N_Constraint_Error node.\n \n-      if K /= N_Function_Specification then\n+      if Kind /= N_Function_Specification then\n          Expr := Expression (N);\n \n          if Present (Expr) and then Known_Null (Expr) then\n-            case K is\n+            case Kind is\n                when N_Component_Declaration\n                   | N_Discriminant_Specification\n                =>"}, {"sha": "addc4c07e9f28b94b970c13ee62daafaba3689cd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "patch": "@@ -3134,8 +3134,8 @@ package body Sem_Ch3 is\n             when N_Derived_Type_Definition =>\n                Derived_Type_Declaration (T, N, T /= Def_Id);\n \n-               --  Inherit predicates from parent, and protect against\n-               --  illegal derivations.\n+               --  Inherit predicates from parent, and protect against illegal\n+               --  derivations.\n \n                if Is_Type (T) and then Has_Predicates (T) then\n                   Set_Has_Predicates (Def_Id);\n@@ -3626,12 +3626,17 @@ package body Sem_Ch3 is\n \n       --  Any other relevant delayed aspects on object declarations ???\n \n+      --------------------------\n+      -- Check_Dynamic_Object --\n+      --------------------------\n+\n       procedure Check_Dynamic_Object (Typ : Entity_Id) is\n          Comp     : Entity_Id;\n          Obj_Type : Entity_Id;\n \n       begin\n          Obj_Type := Typ;\n+\n          if Is_Private_Type (Obj_Type)\n             and then Present (Full_View (Obj_Type))\n          then\n@@ -3656,12 +3661,14 @@ package body Sem_Ch3 is\n                elsif not Discriminated_Size (Comp)\n                  and then Comes_From_Source (Comp)\n                then\n-                  Error_Msg_NE (\"component& of non-static size will violate \"\n-                    & \"restriction No_Implicit_Heap_Allocation?\", N, Comp);\n+                  Error_Msg_NE\n+                    (\"component& of non-static size will violate restriction \"\n+                     & \"No_Implicit_Heap_Allocation?\", N, Comp);\n \n                elsif Is_Record_Type (Etype (Comp)) then\n                   Check_Dynamic_Object (Etype (Comp));\n                end if;\n+\n                Next_Component (Comp);\n             end loop;\n          end if;\n@@ -3720,10 +3727,16 @@ package body Sem_Ch3 is\n               and then Can_Never_Be_Null (T)\n             then\n                if Comp_Decl = Obj_Decl then\n-                  Null_Exclusion_Static_Checks (Obj_Decl, Empty, Array_Comp);\n+                  Null_Exclusion_Static_Checks\n+                    (N          => Obj_Decl,\n+                     Comp       => Empty,\n+                     Array_Comp => Array_Comp);\n+\n                else\n                   Null_Exclusion_Static_Checks\n-                    (Obj_Decl, Comp_Decl, Array_Comp);\n+                    (N          => Obj_Decl,\n+                     Comp       => Comp_Decl,\n+                     Array_Comp => Array_Comp);\n                end if;\n \n             --  Check array components"}, {"sha": "9290694387d8d3ebc3604d05209535fa9d00ea85", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=97ac2d62fa6fc002ff9f7ddee620e2bdaaa1cde8", "patch": "@@ -6317,13 +6317,10 @@ package body Sem_Util is\n    ------------------------\n \n    function Discriminated_Size (Comp : Entity_Id) return Boolean is\n-      Typ   : constant Entity_Id := Etype (Comp);\n-      Index : Node_Id;\n-\n       function Non_Static_Bound (Bound : Node_Id) return Boolean;\n       --  Check whether the bound of an index is non-static and does denote\n-      --  a discriminant, in which case any object of the type (protected\n-      --  or otherwise) will have a non-static size.\n+      --  a discriminant, in which case any object of the type (protected or\n+      --  otherwise) will have a non-static size.\n \n       ----------------------\n       -- Non_Static_Bound --\n@@ -6341,8 +6338,8 @@ package body Sem_Util is\n \n          elsif Is_Entity_Name (Bound)\n            and then\n-              (Ekind (Entity (Bound)) = E_Discriminant\n-                or else Present (Discriminal_Link (Entity (Bound))))\n+             (Ekind (Entity (Bound)) = E_Discriminant\n+               or else Present (Discriminal_Link (Entity (Bound))))\n          then\n             return False;\n \n@@ -6351,6 +6348,11 @@ package body Sem_Util is\n          end if;\n       end Non_Static_Bound;\n \n+      --  Local variables\n+\n+      Typ   : constant Entity_Id := Etype (Comp);\n+      Index : Node_Id;\n+\n    --  Start of processing for Discriminated_Size\n \n    begin"}]}