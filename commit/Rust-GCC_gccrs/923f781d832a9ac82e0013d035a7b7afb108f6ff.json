{"sha": "923f781d832a9ac82e0013d035a7b7afb108f6ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzZjc4MWQ4MzJhOWFjODJlMDAxM2QwMzVhN2I3YWZiMTA4ZjZmZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-11-15T17:12:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-11-15T17:12:02Z"}, "message": "pa.c (output_cbranch): Improve code for short backwards branch with an unfilled delay slot.\n\n* pa.c (output_cbranch): Improve code for short backwards branch\n\twith an unfilled delay slot.\n\t(output_bb, output_dbra, output_movb): Likewise.\n\nFrom-SVN: r8441", "tree": {"sha": "336ae188b1c9db092db528aad6a8349da39af8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/336ae188b1c9db092db528aad6a8349da39af8c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/923f781d832a9ac82e0013d035a7b7afb108f6ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923f781d832a9ac82e0013d035a7b7afb108f6ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923f781d832a9ac82e0013d035a7b7afb108f6ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923f781d832a9ac82e0013d035a7b7afb108f6ff/comments", "author": null, "committer": null, "parents": [{"sha": "8329b5ec7ebc12f94f03a60ecb2e026bb2ebe9bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8329b5ec7ebc12f94f03a60ecb2e026bb2ebe9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8329b5ec7ebc12f94f03a60ecb2e026bb2ebe9bf"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "d70dad687bfea8c817656e0e697e9f29d14370d0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923f781d832a9ac82e0013d035a7b7afb108f6ff/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923f781d832a9ac82e0013d035a7b7afb108f6ff/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=923f781d832a9ac82e0013d035a7b7afb108f6ff", "patch": "@@ -3444,6 +3444,21 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t      strcat (buf, \"%B3\");\n \t    strcat (buf, \",n %2,%1,.+12\\n\\tbl %0,0\");\n \t  }\n+\t/* Handle short backwards branch with an unfilled delay slot.\n+\t   Using a comb;nop rather than comiclr;bl saves 1 cycle for both\n+\t   taken and untaken branches.  */\n+\telse if (dbr_sequence_length () == 0\n+\t\t && ! forward_branch_p (insn)\n+\t\t && insn_addresses\n+\t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n+\t\t\t\t    - insn_addresses[INSN_UID (insn)]))\n+\t  {\n+\t    strcpy (buf, \"com%I2b,\");\n+\t    if (negated)\n+\t      strcat (buf, \"%B3 %2,%1,%0%#\");\n+\t    else\n+\t      strcat (buf, \"%S3 %2,%1,%0%#\");\n+\t  }\n \telse\n \t  {\n \t    strcpy (buf, \"com%I2clr,\");\n@@ -3556,6 +3571,26 @@ output_bb (operands, nullify, length, negated, insn, which)\n \t    else\n \t      strcat (buf, \" %0,%1,.+12\\n\\tbl %2,0\");\n \t  }\n+\t/* Handle short backwards branch with an unfilled delay slot.\n+\t   Using a bb;nop rather than extrs;bl saves 1 cycle for both\n+\t   taken and untaken branches.  */\n+\telse if (dbr_sequence_length () == 0\n+\t\t && ! forward_branch_p (insn)\n+\t\t && insn_addresses\n+\t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n+\t\t\t\t    - insn_addresses[INSN_UID (insn)]))\n+\t  {\n+\t    strcpy (buf, \"bb,\");\n+\t    if ((which == 0 && negated)\n+\t\t|| (which == 1 && ! negated))\n+\t      strcat (buf, \">=\");\n+\t    else\n+\t      strcat (buf, \"<\");\n+\t    if (negated)\n+\t      strcat (buf, \" %0,%1,%3%#\");\n+\t    else\n+\t      strcat (buf, \" %0,%1,%2%#\");\n+\t  }\n \telse\n \t  {\n \t    strcpy (buf, \"extrs,\");\n@@ -3641,6 +3676,15 @@ output_dbra (operands, insn, which_alternative)\n \t      && ! forward_branch_p (insn)\n \t      && nullify)\n \t    return \"addib,%N2,n %1,%0,.+12\\n\\tbl %3,0\";\n+\t  /* Handle short backwards branch with an unfilled delay slot.\n+\t     Using a addb;nop rather than addi;bl saves 1 cycle for both\n+\t     taken and untaken branches.  */\n+\t  else if (dbr_sequence_length () == 0\n+\t\t   && ! forward_branch_p (insn)\n+\t\t   && insn_addresses\n+\t\t   && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n+\t\t\t\t      - insn_addresses[INSN_UID (insn)]))\n+\t      return \"addib,%C2 %1,%0,%3%#\";\n \n \t  /* Handle normal cases.  */\n \t  if (nullify)\n@@ -3738,6 +3782,15 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \t      && nullify)\n \t    return \"movb,%N2,n %1,%0,.+12\\n\\ttbl %3,0\";\n \n+\t  /* Handle short backwards branch with an unfilled delay slot.\n+\t     Using a movb;nop rather than or;bl saves 1 cycle for both\n+\t     taken and untaken branches.  */\n+\t  else if (dbr_sequence_length () == 0\n+\t\t   && ! forward_branch_p (insn)\n+\t\t   && insn_addresses\n+\t\t   && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n+\t\t\t\t      - insn_addresses[INSN_UID (insn)]))\n+\t    return \"movb,%C2 %1,%0,%3%#\";\n \t  /* Handle normal cases.  */\n \t  if (nullify)\n \t    return \"or,%N2 %1,%%r0,%0\\n\\tbl,n %3,0\";"}]}