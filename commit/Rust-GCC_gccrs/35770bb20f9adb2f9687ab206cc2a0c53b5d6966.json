{"sha": "35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3NzBiYjIwZjlhZGIyZjk2ODdhYjIwNmNjMmEwYzUzYjVkNjk2Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-14T09:02:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-14T09:02:18Z"}, "message": "re PR middle-end/62090 (ice in compute_may_aliases)\n\n2014-08-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62090\n\t* builtins.c (fold_builtin_sprintf): Move to gimple-fold.c.\n\t(fold_builtin_2): Do not fold sprintf.\n\t(fold_builtin_3): Likewise.\n\t* gimple-fold.c (gimple_fold_builtin_sprintf): New function\n\tmoved from builtins.c.\n\t(gimple_fold_builtin): Fold sprintf.\n\n\t* gcc.dg/pr62090.c: New testcase.\n\nFrom-SVN: r213951", "tree": {"sha": "866b028cb521c276d95908456d60f5dd722bafdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866b028cb521c276d95908456d60f5dd722bafdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "121bc7dc36b5b32205f870f2e46c62ae864ceefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121bc7dc36b5b32205f870f2e46c62ae864ceefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121bc7dc36b5b32205f870f2e46c62ae864ceefc"}], "stats": {"total": 255, "additions": 160, "deletions": 95}, "files": [{"sha": "00f58677cf05b33b6bca104bc9bef595dd565381", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "patch": "@@ -1,3 +1,13 @@\n+2014-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62090\n+\t* builtins.c (fold_builtin_sprintf): Move to gimple-fold.c.\n+\t(fold_builtin_2): Do not fold sprintf.\n+\t(fold_builtin_3): Likewise.\n+\t* gimple-fold.c (gimple_fold_builtin_sprintf): New function\n+\tmoved from builtins.c.\n+\t(gimple_fold_builtin): Fold sprintf.\n+\n 2014-08-14  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/62079"}, {"sha": "846856897390b2d945510c526b48465ce01129f5", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "patch": "@@ -190,7 +190,6 @@ static tree fold_builtin_strrchr (location_t, tree, tree, tree);\n static tree fold_builtin_strncat (location_t, tree, tree, tree);\n static tree fold_builtin_strspn (location_t, tree, tree);\n static tree fold_builtin_strcspn (location_t, tree, tree);\n-static tree fold_builtin_sprintf (location_t, tree, tree, tree, int);\n static tree fold_builtin_snprintf (location_t, tree, tree, tree, tree, int);\n \n static rtx expand_builtin_object_size (tree);\n@@ -10234,9 +10233,6 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1, bool ignore)\n     case BUILT_IN_VA_START:\n       break;\n \n-    case BUILT_IN_SPRINTF:\n-      return fold_builtin_sprintf (loc, arg0, arg1, NULL_TREE, ignore);\n-\n     case BUILT_IN_OBJECT_SIZE:\n       return fold_builtin_object_size (arg0, arg1);\n \n@@ -10313,9 +10309,6 @@ fold_builtin_3 (location_t loc, tree fndecl,\n     case BUILT_IN_MEMCMP:\n       return fold_builtin_memcmp (loc, arg0, arg1, arg2);;\n \n-    case BUILT_IN_SPRINTF:\n-      return fold_builtin_sprintf (loc, arg0, arg1, arg2, ignore);\n-\n     case BUILT_IN_SNPRINTF:\n       return fold_builtin_snprintf (loc, arg0, arg1, arg2, NULL_TREE, ignore);\n \n@@ -11237,94 +11230,6 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n }\n \n \n-/* Simplify a call to the sprintf builtin with arguments DEST, FMT, and ORIG.\n-   ORIG may be null if this is a 2-argument call.  We don't attempt to\n-   simplify calls with more than 3 arguments.\n-\n-   Return NULL_TREE if no simplification was possible, otherwise return the\n-   simplified form of the call as a tree.  If IGNORED is true, it means that\n-   the caller does not use the returned value of the function.  */\n-\n-static tree\n-fold_builtin_sprintf (location_t loc, tree dest, tree fmt,\n-\t\t      tree orig, int ignored)\n-{\n-  tree call, retval;\n-  const char *fmt_str = NULL;\n-\n-  /* Verify the required arguments in the original call.  We deal with two\n-     types of sprintf() calls: 'sprintf (str, fmt)' and\n-     'sprintf (dest, \"%s\", orig)'.  */\n-  if (!validate_arg (dest, POINTER_TYPE)\n-      || !validate_arg (fmt, POINTER_TYPE))\n-    return NULL_TREE;\n-  if (orig && !validate_arg (orig, POINTER_TYPE))\n-    return NULL_TREE;\n-\n-  /* Check whether the format is a literal string constant.  */\n-  fmt_str = c_getstr (fmt);\n-  if (fmt_str == NULL)\n-    return NULL_TREE;\n-\n-  call = NULL_TREE;\n-  retval = NULL_TREE;\n-\n-  if (!init_target_chars ())\n-    return NULL_TREE;\n-\n-  /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (fmt_str, target_percent) == NULL)\n-    {\n-      tree fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n-\n-      if (!fn)\n-\treturn NULL_TREE;\n-\n-      /* Don't optimize sprintf (buf, \"abc\", ptr++).  */\n-      if (orig)\n-\treturn NULL_TREE;\n-\n-      /* Convert sprintf (str, fmt) into strcpy (str, fmt) when\n-\t 'format' is known to contain no % formats.  */\n-      call = build_call_expr_loc (loc, fn, 2, dest, fmt);\n-      if (!ignored)\n-\tretval = build_int_cst (integer_type_node, strlen (fmt_str));\n-    }\n-\n-  /* If the format is \"%s\", use strcpy if the result isn't used.  */\n-  else if (fmt_str && strcmp (fmt_str, target_percent_s) == 0)\n-    {\n-      tree fn;\n-      fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n-\n-      if (!fn)\n-\treturn NULL_TREE;\n-\n-      /* Don't crash on sprintf (str1, \"%s\").  */\n-      if (!orig)\n-\treturn NULL_TREE;\n-\n-      /* Convert sprintf (str1, \"%s\", str2) into strcpy (str1, str2).  */\n-      if (!ignored)\n-\t{\n-\t  retval = c_strlen (orig, 1);\n-\t  if (!retval || TREE_CODE (retval) != INTEGER_CST)\n-\t    return NULL_TREE;\n-\t}\n-      call = build_call_expr_loc (loc, fn, 2, dest, orig);\n-    }\n-\n-  if (call && retval)\n-    {\n-      retval = fold_convert_loc\n-\t(loc, TREE_TYPE (TREE_TYPE (builtin_decl_implicit (BUILT_IN_SPRINTF))),\n-\t retval);\n-      return build2 (COMPOUND_EXPR, TREE_TYPE (retval), call, retval);\n-    }\n-  else\n-    return call;\n-}\n-\n /* Simplify a call to the snprintf builtin with arguments DEST, DESTSIZE,\n    FMT, and ORIG.  ORIG may be null if this is a 3-argument call.  We don't\n    attempt to simplify calls with more than 4 arguments."}, {"sha": "4fa1a3579c316a68a4c932a2c785dc510d2df2c8", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "patch": "@@ -2143,6 +2143,132 @@ gimple_fold_builtin_sprintf_chk (gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* Simplify a call to the sprintf builtin with arguments DEST, FMT, and ORIG.\n+   ORIG may be null if this is a 2-argument call.  We don't attempt to\n+   simplify calls with more than 3 arguments.\n+\n+   Return NULL_TREE if no simplification was possible, otherwise return the\n+   simplified form of the call as a tree.  If IGNORED is true, it means that\n+   the caller does not use the returned value of the function.  */\n+\n+static bool\n+gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree dest = gimple_call_arg (stmt, 0);\n+  tree fmt = gimple_call_arg (stmt, 1);\n+  tree orig = NULL_TREE;\n+  const char *fmt_str = NULL;\n+\n+  /* Verify the required arguments in the original call.  We deal with two\n+     types of sprintf() calls: 'sprintf (str, fmt)' and\n+     'sprintf (dest, \"%s\", orig)'.  */\n+  if (gimple_call_num_args (stmt) > 3)\n+    return false;\n+\n+  if (gimple_call_num_args (stmt) == 3)\n+    orig = gimple_call_arg (stmt, 2);\n+\n+  /* Check whether the format is a literal string constant.  */\n+  fmt_str = c_getstr (fmt);\n+  if (fmt_str == NULL)\n+    return false;\n+\n+  if (!init_target_chars ())\n+    return false;\n+\n+  /* If the format doesn't contain % args or %%, use strcpy.  */\n+  if (strchr (fmt_str, target_percent) == NULL)\n+    {\n+      tree fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n+\n+      if (!fn)\n+\treturn false;\n+\n+      /* Don't optimize sprintf (buf, \"abc\", ptr++).  */\n+      if (orig)\n+\treturn false;\n+\n+      /* Convert sprintf (str, fmt) into strcpy (str, fmt) when\n+\t 'format' is known to contain no % formats.  */\n+      gimple_seq stmts = NULL;\n+      gimple repl = gimple_build_call (fn, 2, dest, fmt);\n+      gimple_seq_add_stmt_without_update (&stmts, repl);\n+      if (gimple_call_lhs (stmt))\n+\t{\n+\t  repl = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t      build_int_cst (integer_type_node,\n+\t\t\t\t\t\t     strlen (fmt_str)));\n+\t  gimple_seq_add_stmt_without_update (&stmts, repl);\n+\t  gsi_replace_with_seq_vops (gsi, stmts);\n+\t  /* gsi now points at the assignment to the lhs, get a\n+\t     stmt iterator to the memcpy call.\n+\t     ???  We can't use gsi_for_stmt as that doesn't work when the\n+\t     CFG isn't built yet.  */\n+\t  gimple_stmt_iterator gsi2 = *gsi;\n+\t  gsi_prev (&gsi2);\n+\t  fold_stmt (&gsi2);\n+\t}\n+      else\n+\t{\n+\t  gsi_replace_with_seq_vops (gsi, stmts);\n+\t  fold_stmt (gsi);\n+\t}\n+      return true;\n+    }\n+\n+  /* If the format is \"%s\", use strcpy if the result isn't used.  */\n+  else if (fmt_str && strcmp (fmt_str, target_percent_s) == 0)\n+    {\n+      tree fn;\n+      fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n+\n+      if (!fn)\n+\treturn false;\n+\n+      /* Don't crash on sprintf (str1, \"%s\").  */\n+      if (!orig)\n+\treturn false;\n+\n+      tree len = NULL_TREE;\n+      if (gimple_call_lhs (stmt))\n+\t{\n+\t  len = c_strlen (orig, 1);\n+\t  if (!len)\n+\t    return false;\n+\t}\n+\n+      /* Convert sprintf (str1, \"%s\", str2) into strcpy (str1, str2).  */\n+      gimple_seq stmts = NULL;\n+      gimple repl = gimple_build_call (fn, 2, dest, orig);\n+      gimple_seq_add_stmt_without_update (&stmts, repl);\n+      if (gimple_call_lhs (stmt))\n+\t{\n+\t  if (!useless_type_conversion_p (integer_type_node, TREE_TYPE (len)))\n+\t    len = fold_convert (integer_type_node, len);\n+\t  repl = gimple_build_assign (gimple_call_lhs (stmt), len);\n+\t  gimple_seq_add_stmt_without_update (&stmts, repl);\n+\t  gsi_replace_with_seq_vops (gsi, stmts);\n+\t  /* gsi now points at the assignment to the lhs, get a\n+\t     stmt iterator to the memcpy call.\n+\t     ???  We can't use gsi_for_stmt as that doesn't work when the\n+\t     CFG isn't built yet.  */\n+\t  gimple_stmt_iterator gsi2 = *gsi;\n+\t  gsi_prev (&gsi2);\n+\t  fold_stmt (&gsi2);\n+\t}\n+      else\n+\t{\n+\t  gsi_replace_with_seq_vops (gsi, stmts);\n+\t  fold_stmt (gsi);\n+\t}\n+      return true;\n+    }\n+  return false;\n+}\n+\n+\n+\n \n /* Fold a call to __builtin_strlen with known length LEN.  */\n \n@@ -2349,6 +2475,8 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case BUILT_IN_SPRINTF_CHK:\n     case BUILT_IN_VSPRINTF_CHK:\n       return gimple_fold_builtin_sprintf_chk (gsi, DECL_FUNCTION_CODE (callee));\n+    case BUILT_IN_SPRINTF:\n+      return gimple_fold_builtin_sprintf (gsi);\n     default:;\n     }\n "}, {"sha": "17e75e128b20b7a98e7b99cacb362f0f04f2c6a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "patch": "@@ -1,3 +1,8 @@\n+2014-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62090\n+\t* gcc.dg/pr62090.c: New testcase.\n+\n 2014-08-14  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/62079"}, {"sha": "53089cf1932d6f2382eb4f91d061fae472877b06", "filename": "gcc/testsuite/gcc.dg/pr62090.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Ftestsuite%2Fgcc.dg%2Fpr62090.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35770bb20f9adb2f9687ab206cc2a0c53b5d6966/gcc%2Ftestsuite%2Fgcc.dg%2Fpr62090.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr62090.c?ref=35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long a;\n+int *b;\n+extern __inline __attribute__ ((__always_inline__))\n+__attribute__ ((__gnu_inline__)) int sprintf (int *p1, char *p2, ...)\n+{\n+  a = __builtin_object_size (0, 0);\n+  return __builtin___sprintf_chk (0, 0, a, p2, __builtin_va_arg_pack ());\n+}\n+\n+void\n+log_bad_request ()\n+{\n+  b += sprintf (0, \"foo\");\n+}"}]}