{"sha": "8b7677befe2ecf497db472e653abe3f6eed7edee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3Njc3YmVmZTJlY2Y0OTdkYjQ3MmU2NTNhYmUzZjZlZWQ3ZWRlZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-04T23:46:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-04T23:46:29Z"}, "message": "(L_bb/atexit, onexit): Declarations replaced by #include'ing \"gbl-ctors.h\".\n\n(L_exit/atexit): New function.\n(L_exit/exit): Call any registered functions.\n\nFrom-SVN: r11432", "tree": {"sha": "c7ee438cbb2a4018cac1774ca7e3d734b3405688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ee438cbb2a4018cac1774ca7e3d734b3405688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b7677befe2ecf497db472e653abe3f6eed7edee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7677befe2ecf497db472e653abe3f6eed7edee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7677befe2ecf497db472e653abe3f6eed7edee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7677befe2ecf497db472e653abe3f6eed7edee/comments", "author": null, "committer": null, "parents": [{"sha": "a3a55d6a3837496a226fc7d4d6aced6ee441365e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a55d6a3837496a226fc7d4d6aced6ee441365e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a55d6a3837496a226fc7d4d6aced6ee441365e"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "d3bd7dc0f0ae5668b6fb4af238e164b35414a053", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7677befe2ecf497db472e653abe3f6eed7edee/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7677befe2ecf497db472e653abe3f6eed7edee/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=8b7677befe2ecf497db472e653abe3f6eed7edee", "patch": "@@ -1,6 +1,6 @@\n /* More subroutines needed by GCC output code on some machines.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n+/* Copyright (C) 1989, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1466,19 +1466,7 @@ BLOCK_PROFILER_CODE\n #include <stdio.h>\n char *ctime ();\n \n-#ifdef HAVE_ATEXIT\n-#ifdef WINNT\n-extern int atexit (void (*) (void));\n-#else\n-extern void atexit (void (*) (void));\n-#endif\n-#define ON_EXIT(FUNC,ARG) atexit ((FUNC))\n-#else\n-#ifdef sun\n-extern void on_exit (void*, void*);\n-#define ON_EXIT(FUNC,ARG) on_exit ((FUNC), (ARG))\n-#endif\n-#endif\n+#include \"gbl-ctors.h\"\n \n static struct bb *bb_head;\n \n@@ -2911,8 +2899,48 @@ func_ptr __DTOR_LIST__[2];\n \n #include \"gbl-ctors.h\"\n \n+#ifdef NEED_ATEXIT\n+# ifdef ON_EXIT\n+#  undef ON_EXIT\n+# endif\n+int _exit_dummy_decl = 0;\t/* prevent compiler & linker warnings */\n+#endif\n+\n #ifndef ON_EXIT\n \n+#ifdef NEED_ATEXIT\n+# include <errno.h>\n+\n+extern void *malloc ();\n+extern void *realloc ();\n+\n+static func_ptr *atexit_chain = NULL;\n+static long atexit_chain_length = 0;\n+static volatile long last_atexit_chain_slot = -1;\n+\n+int atexit (func_ptr func)\n+{\n+  if (++last_atexit_chain_slot == atexit_chain_length)\n+    {\n+      atexit_chain_length += 32;\n+      if (atexit_chain)\n+\tatexit_chain = realloc (atexit_chain,\n+\t\t\t\tatexit_chain_length * sizeof (func_ptr));\n+      else\n+\tatexit_chain = malloc (atexit_chain_length * sizeof (func_ptr));\n+      if (! atexit_chain)\n+\t{\n+\t  atexit_chain_length = 0;\n+\t  last_atexit_chain_slot = -1;\n+\t  errno = ENOMEM;\n+\t  return (-1);\n+\t}\n+    }\n+  atexit_chain[last_atexit_chain_slot] = func;\n+  return (0);\n+}\n+#endif /* NEED_ATEXIT */\n+\n /* If we have no known way of registering our own __do_global_dtors\n    routine so that it will be invoked at program exit time, then we\n    have to define our own exit routine which will get this to happen.  */\n@@ -2926,7 +2954,20 @@ exit (status)\n      int status;\n {\n #if !defined (INIT_SECTION_ASM_OP) || !defined (OBJECT_FORMAT_ELF)\n+#ifdef NEED_ATEXIT\n+  if (atexit_chain)\n+    {\n+      for ( ; last_atexit_chain_slot-- >= 0; )\n+\t{\n+\t  (*atexit_chain[last_atexit_chain_slot + 1]) ();\n+\t  atexit_chain[last_atexit_chain_slot + 1] = NULL;\n+\t}\n+      free (atexit_chain);\n+      atexit_chain = NULL;\n+    }\n+#else /* No NEED_ATEXIT */\n   __do_global_dtors ();\n+#endif /* No NEED_ATEXIT */\n #endif\n #ifdef EXIT_BODY\n   EXIT_BODY;"}]}