{"sha": "9fa29a0918a31605ab99d5e57eeadc9451f395c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMjlhMDkxOGEzMTYwNWFiOTlkNWU1N2VlYWRjOTQ1MWYzOTVjOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-01-08T01:12:30Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-08T01:12:30Z"}, "message": "Revert: Remove context_loop and level from translate_clast_* methods.\n\n2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tRevert patch 2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n\t* graphite-clast-to-gimple.c (try_mark_loop_parallel): New.\n\t(translate_clast_for, translate_clast_guard, translate_clast, gloog):\n\tRemove context_loop and level.\n\nFrom-SVN: r155719", "tree": {"sha": "5138199d670d94f13cd46cf03c9614b8489db313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5138199d670d94f13cd46cf03c9614b8489db313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa29a0918a31605ab99d5e57eeadc9451f395c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa29a0918a31605ab99d5e57eeadc9451f395c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa29a0918a31605ab99d5e57eeadc9451f395c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa29a0918a31605ab99d5e57eeadc9451f395c8/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d63fa169c4821a2d69241250754a3401a176e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d63fa169c4821a2d69241250754a3401a176e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d63fa169c4821a2d69241250754a3401a176e6"}], "stats": {"total": 117, "additions": 66, "deletions": 51}, "files": [{"sha": "185af8c54962c05002db20a6b35d1fe2c498de12", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa29a0918a31605ab99d5e57eeadc9451f395c8/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa29a0918a31605ab99d5e57eeadc9451f395c8/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=9fa29a0918a31605ab99d5e57eeadc9451f395c8", "patch": "@@ -1,3 +1,10 @@\n+2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tRevert patch 2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n+\t* graphite-clast-to-gimple.c (try_mark_loop_parallel): New.\n+\t(translate_clast_for, translate_clast_guard, translate_clast, gloog):\n+\tRemove context_loop and level.\n+\n 2010-01-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42641"}, {"sha": "827a93460b56c9ea84f8f89a510798f8fd2248ab", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 59, "deletions": 51, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa29a0918a31605ab99d5e57eeadc9451f395c8/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa29a0918a31605ab99d5e57eeadc9451f395c8/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=9fa29a0918a31605ab99d5e57eeadc9451f395c8", "patch": "@@ -724,13 +724,14 @@ dependency_in_loop_p (loop_p loop, htab_t bb_pbb_mapping, int level)\n }\n \n static edge\n-translate_clast (sese, struct clast_stmt *, edge, htab_t, VEC (tree, heap) **,\n-\t\t htab_t, htab_t, htab_t);\n+translate_clast (sese, loop_p, struct clast_stmt *, edge, htab_t,\n+\t\t VEC (tree, heap) **, htab_t, htab_t, int, htab_t);\n \n /* Translates a clast user statement STMT to gimple.\n \n    - REGION is the sese region we used to generate the scop.\n    - NEXT_E is the edge where new generated code should be attached.\n+   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.\n@@ -742,8 +743,10 @@ translate_clast_user (sese region, struct clast_user_stmt *stmt, edge next_e,\n \t\t      htab_t newivs_index, htab_t bb_pbb_mapping,\n \t\t      htab_t params_index)\n {\n+  gimple_bb_p gbb;\n+  basic_block new_bb;\n   poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (stmt->statement);\n-  gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n+  gbb = PBB_BLACK_BOX (pbb);\n \n   if (GBB_BB (gbb) == ENTRY_BLOCK_PTR)\n     return next_e;\n@@ -752,27 +755,13 @@ translate_clast_user (sese region, struct clast_user_stmt *stmt, edge next_e,\n \t\t    params_index);\n   next_e = copy_bb_and_scalar_dependences (GBB_BB (gbb), region,\n \t\t\t\t\t   next_e, rename_map);\n-  mark_bb_with_pbb (pbb, next_e->src, bb_pbb_mapping);\n+  new_bb = next_e->src;\n+  mark_bb_with_pbb (pbb, new_bb, bb_pbb_mapping);\n   update_ssa (TODO_update_ssa);\n \n   return next_e;\n }\n \n-/* Mark a loop parallel, if the graphite dependency check cannot find any\n-   dependencies.  This triggers parallel code generation in the autopar pass.\n-   */\n-static void\n-try_mark_loop_parallel (sese region, loop_p loop, htab_t bb_pbb_mapping)\n-{\n-  loop_p outermost_loop =  SESE_ENTRY (region)->src->loop_father;\n-  int level = loop_depth (loop) - loop_depth (outermost_loop);\n-\n-  if (flag_loop_parallelize_all\n-      && !dependency_in_loop_p (loop, bb_pbb_mapping,\n-\tget_scattering_level (level)))\n-    loop->can_be_parallel = true;\n-}\n-\n static tree gcc_type_for_iv_of_clast_loop (struct clast_for *);\n \n \n@@ -823,25 +812,36 @@ graphite_create_new_loop_guard (sese region, edge entry_edge,\n    - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n      the sese region.  */\n static edge\n-translate_clast_for_loop (sese region, struct clast_for *stmt, edge next_e,\n+translate_clast_for_loop (sese region, loop_p context_loop, struct clast_for *stmt, edge next_e,\n \t\t     htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t     htab_t newivs_index, htab_t bb_pbb_mapping,\n+\t\t     htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n \t\t     htab_t params_index)\n {\n-  loop_p context_loop = next_e->dest->loop_father;\n-  loop_p loop = graphite_create_new_loop (region, next_e, stmt, context_loop,\n-\t\t\t\t\t  newivs, newivs_index, params_index);\n+  struct loop *loop = graphite_create_new_loop (region, next_e, stmt,\n+ \t\t\t\t\t\tcontext_loop, newivs,\n+ \t\t\t\t\t\tnewivs_index, params_index);\n   edge last_e = single_exit (loop);\n-  edge body = single_succ_edge (loop->header);\n-\n-  next_e = translate_clast (region, stmt->body, body, rename_map, newivs,\n-\t\t\t    newivs_index, bb_pbb_mapping, params_index);\n+  edge to_body = single_succ_edge (loop->header);\n+  basic_block after = to_body->dest;\n \n   /* Create a basic block for loop close phi nodes.  */\n   last_e = single_succ_edge (split_edge (last_e));\n+\n+  /* Translate the body of the loop.  */\n+  next_e = translate_clast (region, loop, stmt->body, to_body, rename_map,\n+\t\t\t    newivs, newivs_index, bb_pbb_mapping, level + 1,\n+\t\t\t    params_index);\n+  redirect_edge_succ_nodup (next_e, after);\n+  set_immediate_dominator (CDI_DOMINATORS, next_e->dest, next_e->src);\n+\n+   /* Remove from rename_map all the tuples containing variables\n+      defined in loop's body.  */\n   insert_loop_close_phis (rename_map, loop);\n \n-  try_mark_loop_parallel (region, loop, bb_pbb_mapping);\n+  if (flag_loop_parallelize_all\n+      && !dependency_in_loop_p (loop, bb_pbb_mapping,\n+ \t\t\t\tget_scattering_level (level)))\n+    loop->can_be_parallel = true;\n \n   return last_e;\n }\n@@ -858,9 +858,9 @@ translate_clast_for_loop (sese region, struct clast_for *stmt, edge next_e,\n    - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n      the sese region.  */\n static edge\n-translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n+translate_clast_for (sese region, loop_p context_loop, struct clast_for *stmt, edge next_e,\n \t\t     htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t     htab_t newivs_index, htab_t bb_pbb_mapping,\n+\t\t     htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n \t\t     htab_t params_index)\n {\n   edge last_e = graphite_create_new_loop_guard (region, next_e, stmt, *newivs,\n@@ -875,8 +875,8 @@ translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n \t\t\t\t     eq_rename_map_elts, free);\n   htab_traverse (rename_map, copy_renames, before_guard);\n \n-  next_e = translate_clast_for_loop (region, stmt, true_e, rename_map, newivs,\n-\t\t\t\t     newivs_index, bb_pbb_mapping,\n+  next_e = translate_clast_for_loop (region, context_loop, stmt, true_e, rename_map, newivs,\n+\t\t\t\t     newivs_index, bb_pbb_mapping, level,\n \t\t\t\t     params_index);\n \n   insert_guard_phis (last_e->src, exit_true_e, exit_false_e,\n@@ -891,15 +891,17 @@ translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n \n    - REGION is the sese region we used to generate the scop.\n    - NEXT_E is the edge where new generated code should be attached.\n+   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.\n    - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n      the sese region.  */\n static edge\n-translate_clast_guard (sese region, struct clast_guard *stmt, edge next_e,\n+translate_clast_guard (sese region, loop_p context_loop,\n+\t\t       struct clast_guard *stmt, edge next_e,\n \t\t       htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t       htab_t newivs_index, htab_t bb_pbb_mapping,\n+\t\t       htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n \t\t       htab_t params_index)\n {\n   edge last_e = graphite_create_new_guard (region, next_e, stmt, *newivs,\n@@ -914,9 +916,9 @@ translate_clast_guard (sese region, struct clast_guard *stmt, edge next_e,\n \t\t\t\t     eq_rename_map_elts, free);\n   htab_traverse (rename_map, copy_renames, before_guard);\n \n-  next_e = translate_clast (region, stmt->then, true_e,\n+  next_e = translate_clast (region, context_loop, stmt->then, true_e,\n \t\t\t    rename_map, newivs, newivs_index, bb_pbb_mapping,\n-\t\t\t    params_index);\n+\t\t\t    level, params_index);\n \n   insert_guard_phis (last_e->src, exit_true_e, exit_false_e,\n \t\t     before_guard, rename_map);\n@@ -930,13 +932,14 @@ translate_clast_guard (sese region, struct clast_guard *stmt, edge next_e,\n    context of a SESE.\n \n    - NEXT_E is the edge where new generated code should be attached.\n+   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.  */\n static edge\n-translate_clast (sese region, struct clast_stmt *stmt,\n+translate_clast (sese region, loop_p context_loop, struct clast_stmt *stmt,\n \t\t edge next_e, htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t htab_t newivs_index, htab_t bb_pbb_mapping, \n+\t\t htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n \t\t htab_t params_index)\n {\n   if (!stmt)\n@@ -951,28 +954,31 @@ translate_clast (sese region, struct clast_stmt *stmt,\n \t\t\t\t   bb_pbb_mapping, params_index);\n \n   else if (CLAST_STMT_IS_A (stmt, stmt_for))\n-    next_e = translate_clast_for (region,\n-\t\t\t\t  (struct clast_for *) stmt, next_e, rename_map,\n-\t\t\t\t  newivs, newivs_index, bb_pbb_mapping,\n-\t\t\t\t  params_index);\n+    next_e = translate_clast_for (region, context_loop,\n+\t\t\t\t  (struct clast_for *) stmt, next_e,\n+\t\t\t\t  rename_map, newivs, newivs_index,\n+\t\t\t\t  bb_pbb_mapping, level, params_index);\n \n   else if (CLAST_STMT_IS_A (stmt, stmt_guard))\n-    next_e = translate_clast_guard (region, (struct clast_guard *) stmt, next_e,\n+    next_e = translate_clast_guard (region, context_loop,\n+\t\t\t\t    (struct clast_guard *) stmt, next_e,\n \t\t\t\t    rename_map, newivs, newivs_index,\n-\t\t\t\t    bb_pbb_mapping, params_index);\n+\t\t\t\t    bb_pbb_mapping, level, params_index);\n \n   else if (CLAST_STMT_IS_A (stmt, stmt_block))\n-    next_e = translate_clast (region, ((struct clast_block *) stmt)->body,\n+    next_e = translate_clast (region, context_loop,\n+\t\t\t      ((struct clast_block *) stmt)->body,\n \t\t\t      next_e, rename_map, newivs, newivs_index,\n-\t\t\t      bb_pbb_mapping, params_index);\n+\t\t\t      bb_pbb_mapping, level, params_index);\n   else\n     gcc_unreachable();\n \n   recompute_all_dominators ();\n   graphite_verify ();\n \n-  return translate_clast (region, stmt->next, next_e, rename_map, newivs,\n-\t\t\t  newivs_index, bb_pbb_mapping, params_index);\n+  return translate_clast (region, context_loop, stmt->next, next_e,\n+\t\t\t  rename_map, newivs, newivs_index,\n+\t\t\t  bb_pbb_mapping, level, params_index);\n }\n \n /* Returns the first cloog name used in EXPR.  */\n@@ -1416,6 +1422,7 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n {\n   edge new_scop_exit_edge = NULL;\n   VEC (tree, heap) *newivs = VEC_alloc (tree, heap, 10);\n+  loop_p context_loop;\n   sese region = SCOP_REGION (scop);\n   ifsese if_region = NULL;\n   htab_t rename_map, newivs_index, params_index;\n@@ -1443,6 +1450,7 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   recompute_all_dominators ();\n   graphite_verify ();\n \n+  context_loop = SESE_ENTRY (region)->src->loop_father;\n   compute_cloog_iv_types (pc.stmt);\n   rename_map = htab_create (10, rename_map_elt_info, eq_rename_map_elts, free);\n   newivs_index = htab_create (10, clast_name_index_elt_info,\n@@ -1452,10 +1460,10 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n \n   create_params_index (params_index, pc.prog);\n \n-  new_scop_exit_edge = translate_clast (region, pc.stmt,\n+  new_scop_exit_edge = translate_clast (region, context_loop, pc.stmt,\n \t\t\t\t\tif_region->true_region->entry,\n \t\t\t\t\trename_map, &newivs, newivs_index,\n-\t\t\t\t\tbb_pbb_mapping, params_index);\n+\t\t\t\t\tbb_pbb_mapping, 1, params_index);\n   graphite_verify ();\n   sese_adjust_liveout_phis (region, rename_map,\n \t\t\t    if_region->region->exit->src,"}]}