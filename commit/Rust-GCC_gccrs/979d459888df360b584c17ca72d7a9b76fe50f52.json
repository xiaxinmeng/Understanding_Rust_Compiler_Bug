{"sha": "979d459888df360b584c17ca72d7a9b76fe50f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5ZDQ1OTg4OGRmMzYwYjU4NGMxN2NhNzJkN2E5Yjc2ZmU1MGY1Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-08-02T18:07:52Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-08-02T18:07:52Z"}, "message": "trans-array.c (gfc_array_allocate): Pass token to gfc_allocate_allocatable for -fcoarray=lib.\n\n2011-08-02  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-array.c (gfc_array_allocate): Pass token to\n          gfc_allocate_allocatable for -fcoarray=lib.\n        * trans-stmt.c (gfc_trans_allocate): Update\n        gfc_allocate_allocatable call.\n        * trans.h (gfc_allocate_allocatable): Update prototype.\n        (gfc_allocate_using_lib): Remove.\n        * trans.c (gfc_allocate_using_lib): Make static, handle\n        token.\n        (gfc_allocate_allocatable): Ditto.\n\n2011-08-02  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_lib_token_3.f90: New.\n\nFrom-SVN: r177198", "tree": {"sha": "18f1e855d9cadeafb7016da5743be4dea9d4a5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f1e855d9cadeafb7016da5743be4dea9d4a5b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/979d459888df360b584c17ca72d7a9b76fe50f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979d459888df360b584c17ca72d7a9b76fe50f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979d459888df360b584c17ca72d7a9b76fe50f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979d459888df360b584c17ca72d7a9b76fe50f52/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7cef5958d61773228556bc68e4eacc90ce28672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7cef5958d61773228556bc68e4eacc90ce28672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7cef5958d61773228556bc68e4eacc90ce28672"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "bba8d0fb7705d35acbe65b94d5b4ec32d38876c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -1,3 +1,14 @@\n+2011-08-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-array.c (gfc_array_allocate): Pass token to\n+\t  gfc_allocate_allocatable for -fcoarray=lib.\n+\t* trans-stmt.c (gfc_trans_allocate): Update\n+\tgfc_allocate_allocatable call.\n+\t* trans.h (gfc_allocate_allocatable): Update prototype.\n+\t(gfc_allocate_using_lib): Remove.\n+\t* trans.c (gfc_allocate_using_lib): Make static, handle token.\n+\t(gfc_allocate_allocatable): Ditto.\n+\n 2011-08-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/46752"}, {"sha": "a151c560bc1c78493fba587f7fd1c0723b53c056", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -4409,6 +4409,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   tree tmp;\n   tree pointer;\n   tree offset = NULL_TREE;\n+  tree token = NULL_TREE;\n   tree size;\n   tree msg;\n   tree error = NULL_TREE;\n@@ -4521,9 +4522,13 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   pointer = gfc_conv_descriptor_data_get (se->expr);\n   STRIP_NOPS (pointer);\n \n+  if (coarray && gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    token = gfc_build_addr_expr (NULL_TREE,\n+\t\t\t\t gfc_conv_descriptor_token (se->expr));\n+\n   /* The allocatable variant takes the old pointer as first argument.  */\n   if (allocatable)\n-    gfc_allocate_allocatable (&elseblock, pointer, size,\n+    gfc_allocate_allocatable (&elseblock, pointer, size, token,\n \t\t\t      status, errmsg, errlen, expr);\n   else\n     gfc_allocate_using_malloc (&elseblock, pointer, size, status);"}, {"sha": "a911a5b070e07f02c3d10988ac93096903e03012", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -4867,7 +4867,7 @@ gfc_trans_allocate (gfc_code * code)\n \n \t  /* Allocate - for non-pointers with re-alloc checking.  */\n \t  if (gfc_expr_attr (expr).allocatable)\n-\t    gfc_allocate_allocatable (&se.pre, se.expr, memsz,\n+\t    gfc_allocate_allocatable (&se.pre, se.expr, memsz, NULL_TREE,\n \t\t\t\t      stat, errmsg, errlen, expr);\n \t  else\n \t    gfc_allocate_using_malloc (&se.pre, se.expr, memsz, stat);"}, {"sha": "4c97cfdc6223b2076b8b7c247e68106e782bb318", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -635,19 +635,21 @@ gfc_allocate_using_malloc (stmtblock_t * block, tree pointer,\n    This function follows the following pseudo-code:\n \n     void *\n-    allocate (size_t size, integer_type stat)\n+    allocate (size_t size, void** token, int *stat, char* errmsg, int errlen)\n     {\n       void *newmem;\n-    \n-      newmem = _caf_register ( size, regtype, NULL, &stat, NULL, NULL);\n+\n+      newmem = _caf_register (size, regtype, token, &stat, errmsg, errlen);\n       return newmem;\n     }  */\n-void\n+static void\n gfc_allocate_using_lib (stmtblock_t * block, tree pointer, tree size,\n-\t\t\ttree status, tree errmsg, tree errlen)\n+\t\t\ttree token, tree status, tree errmsg, tree errlen)\n {\n   tree tmp, pstat;\n \n+  gcc_assert (token != NULL_TREE);\n+\n   /* Evaluate size only once, and make sure it has the right type.  */\n   size = gfc_evaluate_now (size, block);\n   if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n@@ -673,8 +675,7 @@ gfc_allocate_using_lib (stmtblock_t * block, tree pointer, tree size,\n \t\t\t      build_int_cst (size_type_node, 1)),\n \t     build_int_cst (integer_type_node,\n \t\t\t    GFC_CAF_COARRAY_ALLOC),\n-\t     null_pointer_node,  /* token  */\n-\t     pstat, errmsg, errlen);\n+\t     token, pstat, errmsg, errlen);\n \n   tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n \t\t\t TREE_TYPE (pointer), pointer,\n@@ -706,8 +707,8 @@ gfc_allocate_using_lib (stmtblock_t * block, tree pointer, tree size,\n     expr must be set to the original expression being allocated for its locus\n     and variable name in case a runtime error has to be printed.  */\n void\n-gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree status,\n-\t\t\t  tree errmsg, tree errlen, gfc_expr* expr)\n+gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree token,\n+\t\t\t  tree status, tree errmsg, tree errlen, gfc_expr* expr)\n {\n   stmtblock_t alloc_block;\n   tree tmp, null_mem, alloc, error;\n@@ -726,7 +727,7 @@ gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree status,\n \n   if (gfc_option.coarray == GFC_FCOARRAY_LIB\n       && gfc_expr_attr (expr).codimension)\n-    gfc_allocate_using_lib (&alloc_block, mem, size, status,\n+    gfc_allocate_using_lib (&alloc_block, mem, size, token, status,\n \t\t\t    errmsg, errlen);\n   else\n     gfc_allocate_using_malloc (&alloc_block, mem, size, status);"}, {"sha": "bb94780ab646fc201a30389ffc071e194e3a44c1", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -542,12 +542,11 @@ tree gfc_call_malloc (stmtblock_t *, tree, tree);\n tree gfc_build_memcpy_call (tree, tree, tree);\n \n /* Allocate memory for allocatable variables, with optional status variable.  */\n-void gfc_allocate_allocatable (stmtblock_t*, tree, tree,\n+void gfc_allocate_allocatable (stmtblock_t*, tree, tree, tree,\n \t\t\t       tree, tree, tree, gfc_expr*);\n \n /* Allocate memory, with optional status variable.  */\n void gfc_allocate_using_malloc (stmtblock_t *, tree, tree, tree);\n-void gfc_allocate_using_lib (stmtblock_t *, tree, tree, tree, tree, tree);\n \n /* Generate code to deallocate an array.  */\n tree gfc_deallocate_with_status (tree, tree, bool, gfc_expr*);"}, {"sha": "f1c96a0e5f89abfb0d7ace24eca70dc6e9fd9ec4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -1,3 +1,7 @@\n+2011-08-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_lib_token_3.f90: New.\n+\n 2011-08-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/46752"}, {"sha": "2725549a3ed35b06b6cc11974517d1c02bfbceae", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_token_3.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_token_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979d459888df360b584c17ca72d7a9b76fe50f52/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_token_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_token_3.f90?ref=979d459888df360b584c17ca72d7a9b76fe50f52", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+! Test coarray registering\n+!\n+integer, allocatable :: CAF(:)[:], caf_scalar[:]\n+allocate(CAF(1)[*])\n+allocate(CAF_SCALAR[*])\n+end\n+\n+! { dg-final { scan-tree-dump-times \"caf.data = \\\\(void . restrict\\\\) _gfortran_caf_register \\\\(4, 1, &caf.token, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"caf_scalar.data = \\\\(void . restrict\\\\) _gfortran_caf_register \\\\(4, 1, &caf_scalar.token, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}