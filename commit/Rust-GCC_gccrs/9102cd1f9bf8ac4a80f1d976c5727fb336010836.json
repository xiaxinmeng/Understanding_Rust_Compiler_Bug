{"sha": "9102cd1f9bf8ac4a80f1d976c5727fb336010836", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwMmNkMWY5YmY4YWM0YTgwZjFkOTc2YzU3MjdmYjMzNjAxMDgzNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-13T11:55:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-13T11:55:30Z"}, "message": "(alpha_emit_set_const_1): Renamed from alpha_emit_set_const and static.\n\nRemove change of Nov 26; again use normal mechanism for SImode.\n(alpha_emit_set_const): New function.\n\nFrom-SVN: r11752", "tree": {"sha": "e9df3bc1f643cda957dd33bbc4333b252d904436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9df3bc1f643cda957dd33bbc4333b252d904436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9102cd1f9bf8ac4a80f1d976c5727fb336010836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9102cd1f9bf8ac4a80f1d976c5727fb336010836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9102cd1f9bf8ac4a80f1d976c5727fb336010836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9102cd1f9bf8ac4a80f1d976c5727fb336010836/comments", "author": null, "committer": null, "parents": [{"sha": "3b7d443c2cc40d48c9a8cb9bebfda792a07c4b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7d443c2cc40d48c9a8cb9bebfda792a07c4b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7d443c2cc40d48c9a8cb9bebfda792a07c4b22"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "3eaf8e461a4c8a7f49312ec831f35ce6c39208d8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9102cd1f9bf8ac4a80f1d976c5727fb336010836/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9102cd1f9bf8ac4a80f1d976c5727fb336010836/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9102cd1f9bf8ac4a80f1d976c5727fb336010836", "patch": "@@ -84,6 +84,8 @@ extern int rtx_equal_function_value_matters;\n \n /* Declarations of static functions.  */\n static void alpha_set_memflags_1  PROTO((rtx, int, int, int));\n+static rtx alpha_emit_set_const_1 PROTO((rtx, enum machine_mode,\n+\t\t\t\t\t HOST_WIDE_INT, int));\n static void add_long_const\tPROTO((FILE *, HOST_WIDE_INT, int, int, int));\n \f\n /* Parse target option strings. */\n@@ -787,6 +789,26 @@ alpha_emit_set_const (target, mode, c, n)\n      enum machine_mode mode;\n      HOST_WIDE_INT c;\n      int n;\n+{\n+  rtx pat;\n+  int i;\n+\n+  /* Try 1 insn, then 2, then up to N. */\n+  for (i = 1; i <= n; i++)\n+    if ((pat = alpha_emit_set_const_1 (target, mode, c, i)) != 0)\n+      return pat;\n+\n+  return 0;\n+}\n+\n+/* Internal routine for the above to check for N or below insns.  */\n+\n+static rtx\n+alpha_emit_set_const_1 (target, mode, c, n)\n+     rtx target;\n+     enum machine_mode mode;\n+     HOST_WIDE_INT c;\n+     int n;\n {\n   HOST_WIDE_INT new = c;\n   int i, bits;\n@@ -832,12 +854,7 @@ alpha_emit_set_const (target, mode, c, n)\n \n       if (c == low || (low == 0 && extra == 0))\n \treturn copy_to_suggested_reg (GEN_INT (c), target, mode);\n-      else if (n >= 2 + (extra != 0)\n-\t       /* We can't do this when SImode if HIGH required adjustment.\n-\t\t  This is because the code relies on an implicit overflow\n-\t\t  which is invisible to the RTL.  We can thus get incorrect\n-\t\t  code if the two ldah instructions are combined.  */\n-\t       && ! (mode == SImode && extra != 0))\n+      else if (n >= 2 + (extra != 0))\n \t{\n \t  temp = copy_to_suggested_reg (GEN_INT (low), subtarget, mode);\n "}]}