{"sha": "dc5752338ba869ec407f1d97b0d47793be431239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1NzUyMzM4YmE4NjllYzQwN2YxZDk3YjBkNDc3OTNiZTQzMTIzOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-04T09:37:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-04T09:37:04Z"}, "message": "re PR tree-optimization/33627 (ICE in verify_stmts compiling abiword)\n\n2007-10-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/33627\n\t* tree-gimple.h (canonicalize_cond_expr_cond): Declare.\n\t* tree-gimple.c (canonicalize_cond_expr_cond): New function,\n\tsplit out from ...\n\t* tree-ssa-forwprop.c (combine_cond_expr_cond): ... here.\n\t* tree-ssa-ifcombine.c (ifcombine_iforif): Use it.\n\n\t* g++.dg/torture/pr33627.C: New testcase.\n\nFrom-SVN: r129004", "tree": {"sha": "e796856d793e5691b916e4fbbedc157a8e3dce8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e796856d793e5691b916e4fbbedc157a8e3dce8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc5752338ba869ec407f1d97b0d47793be431239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5752338ba869ec407f1d97b0d47793be431239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5752338ba869ec407f1d97b0d47793be431239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5752338ba869ec407f1d97b0d47793be431239/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65567efaa82178fcfe63bee2c81f06a541cd72a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65567efaa82178fcfe63bee2c81f06a541cd72a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65567efaa82178fcfe63bee2c81f06a541cd72a4"}], "stats": {"total": 161, "additions": 125, "deletions": 36}, "files": [{"sha": "c6d6a848ea50231f29832e6495f03ba9f88075f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -1,3 +1,12 @@\n+2007-10-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33627\n+\t* tree-gimple.h (canonicalize_cond_expr_cond): Declare.\n+\t* tree-gimple.c (canonicalize_cond_expr_cond): New function,\n+\tsplit out from ...\n+\t* tree-ssa-forwprop.c (combine_cond_expr_cond): ... here.\n+\t* tree-ssa-ifcombine.c (ifcombine_iforif): Use it.\n+\n 2007-10-04  Anatoly Sokolov <aesok@post.ru>\n \n  \t* config/avr/avr.c (commands_in_file, commands_in_prologues, "}, {"sha": "cd6596ef763aa9e86f7fc0d62de5c6aca3cce618", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -1,3 +1,8 @@\n+2007-10-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33627\n+\t* g++.dg/torture/pr33627.C: New testcase.\n+\n 2007-10-04  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \tPR fortran/33626"}, {"sha": "a14e345517fb2ef7915ffd968bcf007894db3554", "filename": "gcc/testsuite/g++.dg/torture/pr33627.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr33627.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr33627.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr33627.C?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned int UT_uint32;\n+typedef UT_uint32 PT_DocPosition;\n+typedef UT_uint32 PT_BlockOffset;\n+typedef enum _PTStruxType { PTX_Block } PTStruxType;\n+typedef UT_uint32 PL_ListenerId;\n+typedef const void * PL_StruxFmtHandle;\n+class PX_ChangeRecord;\n+class pf_Frag {\n+  public:\n+   typedef enum _PFType { PFT_Object } PFType;\n+   inline PFType getType(void) const { }\n+   inline pf_Frag * getNext(void) const { }\n+   PT_DocPosition getPos(void) const { }\n+};\n+class pf_Fragments {\n+  public:\n+   pf_Frag * getFirst() const;\n+};\n+class pt_PieceTable {\n+   bool getStruxOfTypeFromPosition(PL_ListenerId listenerId, PT_DocPosition docPos, PTStruxType pts, PL_StruxFmtHandle * psfh) const;\n+   bool _tellAndMaybeAddListener(PL_ListenerId listenerId, bool bAdd);\n+   pf_Fragments m_fragments;\n+};\n+class pf_Frag_Object : public pf_Frag\n+{\n+  public:\n+   virtual bool createSpecialChangeRecord(PX_ChangeRecord ** ppcr, PT_DocPosition dpos, PT_BlockOffset blockOffset) const;\n+};\n+bool pt_PieceTable::_tellAndMaybeAddListener(PL_ListenerId listenerId, bool bAdd) \n+{\n+  PL_StruxFmtHandle sfh = 0;\n+  PT_DocPosition sum = 0;\n+  UT_uint32 blockOffset = 0;\n+  for (pf_Frag * pf = m_fragments.getFirst(); (pf); pf=pf->getNext())\n+  {\n+      pf_Frag_Object * pfo = static_cast<pf_Frag_Object *> (pf);\n+      PX_ChangeRecord * pcr = __null;\n+      bool bStatus1 = false;\n+      if(sfh != __null)     {\n+       bStatus1 = pfo->createSpecialChangeRecord(&pcr,sum,blockOffset);\n+       if (!(bStatus1))\n+\t return (false);\n+      }\n+      else\n+      {\n+       PT_DocPosition pos = pf->getPos();\n+       getStruxOfTypeFromPosition(listenerId,pos,PTX_Block,&sfh);\n+       bStatus1 = pfo->createSpecialChangeRecord(&pcr,pos,blockOffset);\n+       if (!(bStatus1))\n+\t return (false); \n+      }\n+      if (!(bStatus1))\n+\treturn (false);\n+  }\n+}"}, {"sha": "7b29812294e362ae1e8dd1951e916e58891dcea2", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -521,3 +521,47 @@ recalculate_side_effects (tree t)\n       gcc_unreachable ();\n    }\n }\n+\n+/* Canonicalize a tree T for use in a COND_EXPR as conditional.  Returns\n+   a canonicalized tree that is valid for a COND_EXPR or NULL_TREE, if\n+   we failed to create one.  */\n+\n+tree\n+canonicalize_cond_expr_cond (tree t)\n+{\n+  /* For (bool)x use x != 0.  */\n+  if (TREE_CODE (t) == NOP_EXPR\n+      && TREE_TYPE (t) == boolean_type_node)\n+    {\n+      tree top0 = TREE_OPERAND (t, 0);\n+      t = build2 (NE_EXPR, TREE_TYPE (t),\n+\t\t  top0, build_int_cst (TREE_TYPE (top0), 0));\n+    }\n+  /* For !x use x == 0.  */\n+  else if (TREE_CODE (t) == TRUTH_NOT_EXPR)\n+    {\n+      tree top0 = TREE_OPERAND (t, 0);\n+      t = build2 (EQ_EXPR, TREE_TYPE (t),\n+\t\t  top0, build_int_cst (TREE_TYPE (top0), 0));\n+    }\n+  /* For cmp ? 1 : 0 use cmp.  */\n+  else if (TREE_CODE (t) == COND_EXPR\n+\t   && COMPARISON_CLASS_P (TREE_OPERAND (t, 0))\n+\t   && integer_onep (TREE_OPERAND (t, 1))\n+\t   && integer_zerop (TREE_OPERAND (t, 2)))\n+    {\n+      tree top0 = TREE_OPERAND (t, 0);\n+      t = build2 (TREE_CODE (top0), TREE_TYPE (t),\n+\t\t  TREE_OPERAND (top0, 0), TREE_OPERAND (top0, 1));\n+    }\n+\n+  /* A valid conditional for a COND_EXPR is either a gimple value\n+     or a comparison with two gimple value operands.  */\n+  if (is_gimple_val (t)\n+      || (COMPARISON_CLASS_P (t)\n+\t  && is_gimple_val (TREE_OPERAND (t, 0))\n+\t  && is_gimple_val (TREE_OPERAND (t, 1))))\n+    return t;\n+\n+  return NULL_TREE;\n+}"}, {"sha": "2493b6b24198a52585268129db3a3addc3ee9698", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -133,6 +133,7 @@ extern enum gimplify_status gimplify_va_arg_expr (tree *, tree *, tree *);\n struct gimplify_omp_ctx;\n extern void omp_firstprivatize_variable (struct gimplify_omp_ctx *, tree);\n extern tree gimple_boolify (tree);\n+extern tree canonicalize_cond_expr_cond (tree);\n \n /* In omp-low.c.  */\n extern void diagnose_omp_structured_block_errors (tree);"}, {"sha": "3b72b6c44af8b40296e8ef691b504ff9a59508dc", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -326,46 +326,16 @@ combine_cond_expr_cond (enum tree_code code, tree type,\n   /* Require that we got a boolean type out if we put one in.  */\n   gcc_assert (TREE_CODE (TREE_TYPE (t)) == TREE_CODE (type));\n \n-  /* For (bool)x use x != 0.  */\n-  if (TREE_CODE (t) == NOP_EXPR\n-      && TREE_TYPE (t) == boolean_type_node)\n-    {\n-      tree top0 = TREE_OPERAND (t, 0);\n-      t = build2 (NE_EXPR, type,\n-\t\t  top0, build_int_cst (TREE_TYPE (top0), 0));\n-    }\n-  /* For !x use x == 0.  */\n-  else if (TREE_CODE (t) == TRUTH_NOT_EXPR)\n-    {\n-      tree top0 = TREE_OPERAND (t, 0);\n-      t = build2 (EQ_EXPR, type,\n-\t\t  top0, build_int_cst (TREE_TYPE (top0), 0));\n-    }\n-  /* For cmp ? 1 : 0 use cmp.  */\n-  else if (TREE_CODE (t) == COND_EXPR\n-\t   && COMPARISON_CLASS_P (TREE_OPERAND (t, 0))\n-\t   && integer_onep (TREE_OPERAND (t, 1))\n-\t   && integer_zerop (TREE_OPERAND (t, 2)))\n-    {\n-      tree top0 = TREE_OPERAND (t, 0);\n-      t = build2 (TREE_CODE (top0), type,\n-\t\t  TREE_OPERAND (top0, 0), TREE_OPERAND (top0, 1));\n-    }\n+  /* Canonicalize the combined condition for use in a COND_EXPR.  */\n+  t = canonicalize_cond_expr_cond (t);\n \n   /* Bail out if we required an invariant but didn't get one.  */\n-  if (invariant_only\n-      && !is_gimple_min_invariant (t))\n+  if (!t\n+      || (invariant_only\n+\t  && !is_gimple_min_invariant (t)))\n     return NULL_TREE;\n \n-  /* A valid conditional for a COND_EXPR is either a gimple value\n-     or a comparison with two gimple value operands.  */\n-  if (is_gimple_val (t)\n-      || (COMPARISON_CLASS_P (t)\n-\t  && is_gimple_val (TREE_OPERAND (t, 0))\n-\t  && is_gimple_val (TREE_OPERAND (t, 1))))\n-    return t;\n-\n-  return NULL_TREE;\n+  return t;\n }\n \n /* Propagate from the ssa name definition statements of COND_EXPR"}, {"sha": "eef6f22d2a29fd0fc2f7bddea6f3bae8f95266f6", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5752338ba869ec407f1d97b0d47793be431239/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=dc5752338ba869ec407f1d97b0d47793be431239", "patch": "@@ -483,6 +483,9 @@ ifcombine_iforif (basic_block inner_cond_bb, basic_block outer_cond_bb)\n       /* Do it.  */\n       t = fold_build2 (code, boolean_type_node,\n \t\t       TREE_OPERAND (ccond2, 0), TREE_OPERAND (ccond2, 1));\n+      t = canonicalize_cond_expr_cond (t);\n+      if (!t)\n+\treturn false;\n       COND_EXPR_COND (inner_cond) = t;\n       update_stmt (inner_cond);\n "}]}