{"sha": "2630025d1414327d9ee5d08df1cc63a83127f19b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzMDAyNWQxNDE0MzI3ZDllZTVkMDhkZjFjYzYzYTgzMTI3ZjE5Yg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2012-01-25T08:52:39Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-01-25T08:52:39Z"}, "message": "re PR target/48308 (crosscompiling to arm fails with assembler: can't resolve '.LC4' {.rodata.str1.1 section} - '.LPIC4' {*UND* section})\n\n\n2012-01-25  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\tPR rtl-optimization/48308\n\t* combine.c (enum undo_kind): Add UNDO_LINKS.\n\t(struct undo): Add member l to other_contents and where.\n\t(do_SUBST_LINK): New.\n\t(SUBST_LINK): New.\n\t(try_combine): Handle LOG_LINKS for the dummy i1 case.\n\t(undo_all): Handle UNDO_LINKS.\n\nFrom-SVN: r183512", "tree": {"sha": "6c1e06598cc0f7bf20d95ec9a1bfaf7e70b9d06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c1e06598cc0f7bf20d95ec9a1bfaf7e70b9d06f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2630025d1414327d9ee5d08df1cc63a83127f19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2630025d1414327d9ee5d08df1cc63a83127f19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2630025d1414327d9ee5d08df1cc63a83127f19b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2630025d1414327d9ee5d08df1cc63a83127f19b/comments", "author": null, "committer": null, "parents": [{"sha": "083dd940dcb2169786fbd523059e8c7f41093812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083dd940dcb2169786fbd523059e8c7f41093812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083dd940dcb2169786fbd523059e8c7f41093812"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "fd5acdbfa0e633aff1a968375092f239b35dd900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2630025d1414327d9ee5d08df1cc63a83127f19b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2630025d1414327d9ee5d08df1cc63a83127f19b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2630025d1414327d9ee5d08df1cc63a83127f19b", "patch": "@@ -1,3 +1,13 @@\n+2012-01-25  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR rtl-optimization/48308\n+\t* combine.c (enum undo_kind): Add UNDO_LINKS.\n+\t(struct undo): Add member l to other_contents and where.\n+\t(do_SUBST_LINK): New.\n+\t(SUBST_LINK): New.\n+\t(try_combine): Handle LOG_LINKS for the dummy i1 case.\n+\t(undo_all): Handle UNDO_LINKS.\n+\n 2012-01-25  Richard Henderson  <rth@redhat.com>\n \n \t* optabs.c (maybe_emit_atomic_test_and_set): Allow non-QImode"}, {"sha": "1e01c87cedef1c72f382310be7712095f43df858", "filename": "gcc/combine.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2630025d1414327d9ee5d08df1cc63a83127f19b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2630025d1414327d9ee5d08df1cc63a83127f19b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2630025d1414327d9ee5d08df1cc63a83127f19b", "patch": "@@ -367,14 +367,14 @@ static int nonzero_sign_valid;\n /* Record one modification to rtl structure\n    to be undone by storing old_contents into *where.  */\n \n-enum undo_kind { UNDO_RTX, UNDO_INT, UNDO_MODE };\n+enum undo_kind { UNDO_RTX, UNDO_INT, UNDO_MODE, UNDO_LINKS };\n \n struct undo\n {\n   struct undo *next;\n   enum undo_kind kind;\n-  union { rtx r; int i; enum machine_mode m; } old_contents;\n-  union { rtx *r; int *i; } where;\n+  union { rtx r; int i; enum machine_mode m; struct insn_link *l; } old_contents;\n+  union { rtx *r; int *i; struct insn_link **l; } where;\n };\n \n /* Record a bunch of changes to be undone, up to MAX_UNDO of them.\n@@ -789,6 +789,33 @@ do_SUBST_MODE (rtx *into, enum machine_mode newval)\n }\n \n #define SUBST_MODE(INTO, NEWVAL)  do_SUBST_MODE(&(INTO), (NEWVAL))\n+\n+/* Similar to SUBST, but NEWVAL is a LOG_LINKS expression.  */\n+\n+static void\n+do_SUBST_LINK (struct insn_link **into, struct insn_link *newval)\n+{\n+  struct undo *buf;\n+  struct insn_link * oldval = *into;\n+\n+  if (oldval == newval)\n+    return;\n+\n+  if (undobuf.frees)\n+    buf = undobuf.frees, undobuf.frees = buf->next;\n+  else\n+    buf = XNEW (struct undo);\n+\n+  buf->kind = UNDO_LINKS;\n+  buf->where.l = into;\n+  buf->old_contents.l = oldval;\n+  *into = newval;\n+\n+  buf->next = undobuf.undos, undobuf.undos = buf;\n+}\n+\n+#define SUBST_LINK(oldval, newval) do_SUBST_LINK (&oldval, newval)\n+\n \f\n /* Subroutine of try_combine.  Determine whether the replacement patterns\n    NEWPAT, NEWI2PAT and NEWOTHERPAT are cheaper according to insn_rtx_cost\n@@ -2865,6 +2892,7 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \t  SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));\n \t  SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),\n \t\t SET_DEST (PATTERN (i1)));\n+\t  SUBST_LINK (LOG_LINKS (i2), alloc_insn_link (i1, LOG_LINKS (i2)));\n \t}\n     }\n #endif\n@@ -4494,6 +4522,9 @@ undo_all (void)\n \tcase UNDO_MODE:\n \t  adjust_reg_mode (*undo->where.r, undo->old_contents.m);\n \t  break;\n+\tcase UNDO_LINKS:\n+\t  *undo->where.l = undo->old_contents.l;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}]}