{"sha": "2a26351b598242c2fbce95d2a0baacce0084aec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyNjM1MWI1OTgyNDJjMmZiY2U5NWQyYTBiYWFjY2UwMDg0YWVjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-02T15:05:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-02T16:46:54Z"}, "message": "c++: lambda pack init-capture within generic lambda\n\nWe represent the type of a pack init-capture as auto... with packs from the\ninitializer stuck into PACK_EXPANSION_PARAMETER_PACKS so that expanding it\nproduces the right number of elements.  But when partially instantiating the\nauto..., we were changing PACK_EXPANSION_PARAMETER_PACKS to refer to only\nthe auto itself.  Fixed thus.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97938\n\t* cp-tree.h (PACK_EXPANSION_AUTO_P): New.\n\t* lambda.c (add_capture): Set it.\n\t* pt.c (tsubst_pack_expansion): Handle it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97938\n\t* g++.dg/cpp2a/lambda-pack-init6.C: New test.", "tree": {"sha": "5eee86e5ccc2ea0657eeec2543dce1913473296c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eee86e5ccc2ea0657eeec2543dce1913473296c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a26351b598242c2fbce95d2a0baacce0084aec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26351b598242c2fbce95d2a0baacce0084aec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a26351b598242c2fbce95d2a0baacce0084aec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26351b598242c2fbce95d2a0baacce0084aec6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e05eebd6aac6118cbd9e0a04c011b6ed682826"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "a5d9d7ac62590f291a6bb21ead6f79f7559a3fb0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2a26351b598242c2fbce95d2a0baacce0084aec6", "patch": "@@ -481,6 +481,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       SWITCH_STMT_NO_BREAK_P (in SWITCH_STMT)\n       LAMBDA_EXPR_CAPTURE_OPTIMIZED (in LAMBDA_EXPR)\n       IMPLICIT_CONV_EXPR_BRACED_INIT (in IMPLICIT_CONV_EXPR)\n+      PACK_EXPANSION_AUTO_P (in *_PACK_EXPANSION)\n    3: IMPLICIT_RVALUE_P (in NON_LVALUE_EXPR or STATIC_CAST_EXPR)\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -3855,6 +3856,9 @@ struct GTY(()) lang_decl {\n /* True iff this pack expansion is for sizeof....  */\n #define PACK_EXPANSION_SIZEOF_P(NODE) TREE_LANG_FLAG_1 (NODE)\n \n+/* True iff this pack expansion is for auto... in lambda init-capture.  */\n+#define PACK_EXPANSION_AUTO_P(NODE) TREE_LANG_FLAG_2 (NODE)\n+\n /* True iff the wildcard can match a template parameter pack.  */\n #define WILDCARD_PACK_P(NODE) TREE_LANG_FLAG_0 (NODE)\n "}, {"sha": "b0fd6ecc57ea17b169e73688438b5ba4daf3be81", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=2a26351b598242c2fbce95d2a0baacce0084aec6", "patch": "@@ -606,8 +606,11 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n \t   parameter pack in this context.  We will want as many fields as we\n \t   have elements in the expansion of the initializer, so use its packs\n \t   instead.  */\n-\tPACK_EXPANSION_PARAMETER_PACKS (type)\n-\t  = uses_parameter_packs (initializer);\n+\t{\n+\t  PACK_EXPANSION_PARAMETER_PACKS (type)\n+\t    = uses_parameter_packs (initializer);\n+\t  PACK_EXPANSION_AUTO_P (type) = true;\n+\t}\n     }\n \n   /* Make member variable.  */"}, {"sha": "524a16ab0c6602624b1f51abd067d36947ad7ed1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2a26351b598242c2fbce95d2a0baacce0084aec6", "patch": "@@ -13114,12 +13114,23 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t pattern and return a PACK_EXPANSION_*. The caller will need to\n \t deal with that.  */\n       if (TREE_CODE (t) == EXPR_PACK_EXPANSION)\n-\tt = tsubst_expr (pattern, args, complain, in_decl,\n+\tresult = tsubst_expr (pattern, args, complain, in_decl,\n \t\t\t /*integral_constant_expression_p=*/false);\n       else\n-\tt = tsubst (pattern, args, complain, in_decl);\n-      t = make_pack_expansion (t, complain);\n-      return t;\n+\tresult = tsubst (pattern, args, complain, in_decl);\n+      result = make_pack_expansion (result, complain);\n+      if (PACK_EXPANSION_AUTO_P (t))\n+\t{\n+\t  /* This is a fake auto... pack expansion created in add_capture with\n+\t     _PACKS that don't appear in the pattern.  Copy one over.  */\n+\t  packs = PACK_EXPANSION_PARAMETER_PACKS (t);\n+\t  pack = retrieve_local_specialization (TREE_VALUE (packs));\n+\t  gcc_checking_assert (DECL_PACK_P (pack));\n+\t  PACK_EXPANSION_PARAMETER_PACKS (result)\n+\t    = build_tree_list (NULL_TREE, pack);\n+\t  PACK_EXPANSION_AUTO_P (result) = true;\n+\t}\n+      return result;\n     }\n \n   gcc_assert (len >= 0);"}, {"sha": "3ee500ed9996706be4b3de7e9436d31fdd069754", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init6.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26351b598242c2fbce95d2a0baacce0084aec6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init6.C?ref=2a26351b598242c2fbce95d2a0baacce0084aec6", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/97938\n+// { dg-do compile { target c++20 } }\n+\n+template <typename... Args>\n+int sink(Args&&... args) { return 2; }\n+\n+auto fwd1(const auto&&... ts1) {\n+  return\n+    [...ts1 = ts1] {\n+      return sink(ts1...);\n+    }();\n+}\n+\n+template <typename T1>\n+auto fwd2(const T1& t1) {\n+  return\n+    [] (auto&&... ts1) {\n+      return\n+\t[...ts1 = ts1] {\n+\t  return sink(ts1...);\n+\t}();\n+    }();\n+}\n+\n+int main() {\n+  return fwd1() + fwd2(1);\n+}"}]}