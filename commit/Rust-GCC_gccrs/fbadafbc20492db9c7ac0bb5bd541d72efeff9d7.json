{"sha": "fbadafbc20492db9c7ac0bb5bd541d72efeff9d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhZGFmYmMyMDQ5MmRiOWM3YWMwYmI1YmQ1NDFkNzJlZmVmZjlkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-10T23:54:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-10T23:54:34Z"}, "message": "alpha.h (NO_PROFILE_COUNTERS): Set.\n\n        * config/alpha/alpha.h (NO_PROFILE_COUNTERS): Set.\n        (ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Kill.\n\nFrom-SVN: r61179", "tree": {"sha": "a075fdbdbbd57a93594a21a6afd882d910a2654d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a075fdbdbbd57a93594a21a6afd882d910a2654d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7/comments", "author": null, "committer": null, "parents": [{"sha": "ab5ecb014bdb63fe04952fc7c3528315539da5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5ecb014bdb63fe04952fc7c3528315539da5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5ecb014bdb63fe04952fc7c3528315539da5e4"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "978cfc8d73dc05e4f25e14df048aa6cb378c878c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbadafbc20492db9c7ac0bb5bd541d72efeff9d7", "patch": "@@ -1,3 +1,8 @@\n+2003-01-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.h (NO_PROFILE_COUNTERS): Set.\n+\t(ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Kill.\n+\n 2003-01-10  Richard Henderson  <rth@redhat.com>\n \n \t* combine.c (make_compound_operation): Use SCALAR_INT_MODE_P,"}, {"sha": "24550f4d6349ae9bb98f9fd2df36d29213740869", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbadafbc20492db9c7ac0bb5bd541d72efeff9d7/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=fbadafbc20492db9c7ac0bb5bd541d72efeff9d7", "patch": "@@ -1210,6 +1210,10 @@ extern struct alpha_compare alpha_compare;\n \n #define PROFILE_BEFORE_PROLOGUE 1\n \n+/* Never use profile counters.  */\n+\n+#define NO_PROFILE_COUNTERS 1\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  Under OSF/1, profiling is enabled\n    by simply passing -pg to the assembler and linker.  */\n@@ -1809,22 +1813,6 @@ do {\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t      \\\n   while (0)\n \n-/* This is how to output an insn to push a register on the stack.\n-   It need not be very fast code.  */\n-\n-#define ASM_OUTPUT_REG_PUSH(FILE,REGNO)\t\t\t\t\t\\\n- fprintf (FILE, \"\\tsubq $30,8,$30\\n\\tst%s $%s%d,0($30)\\n\",\t\t\\\n-\t  (REGNO) > 32 ? \"t\" : \"q\", (REGNO) > 32 ? \"f\" : \"\",\t\t\\\n-\t  (REGNO) & 31);\n-\n-/* This is how to output an insn to pop a register from the stack.\n-   It need not be very fast code.  */\n-\n-#define ASM_OUTPUT_REG_POP(FILE,REGNO)\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tld%s $%s%d,0($30)\\n\\taddq $30,8,$30\\n\",\t\t\\\n-\t  (REGNO) > 32 ? \"t\" : \"q\", (REGNO) > 32 ? \"f\" : \"\",\t\t\\\n-\t  (REGNO) & 31);\n-\n /* This is how to output an element of a case-vector that is absolute.\n    (Alpha does not use such vectors, but we must define this macro anyway.)  */\n "}]}