{"sha": "a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmM2M4OWUxYjc4ZGJiNjlkM2M3YTQ3ZDJjOWZkN2FkOTNmZTEzNg==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-08T15:06:45Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-08T15:06:45Z"}, "message": "[Arm] Implement scalar Custom Datapath Extension intrinsics\n\nThis patch introduces the scalar CDE (Custom Datapath Extension)\nintrinsics for the arm backend.\n\nThere is nothing beyond the standard in this patch.  We simply build upon what\nhas been done by Dennis for the vector intrinsics.\n\nWe do add `+cdecp6` to the default arguments for `target-supports.exp`, this\nallows for using coprocessor 6 in tests. This patch uses an alternate\ncoprocessor to ease assembler scanning by looking for a use of coprocessor 6.\n\nWe also ensure that any DImode registers are put in an even-odd register pair\nwhen compiling for a target with CDE -- this avoids faulty code generation for\n-Os when producing the cx*d instructions.\n\nTesting done:\nBootstrapped and regtested for arm-none-linux-gnueabihf.\n\ngcc/ChangeLog:\n\n2020-03-03  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/arm/arm.c (arm_hard_regno_mode_ok): DImode registers forced\n\tinto even-odd register pairs for TARGET_CDE.\n\t* config/arm/arm.h (ARM_CCDE_CONST_1): New.\n\t(ARM_CCDE_CONST_2): New.\n\t(ARM_CCDE_CONST_3): New.\n\t* config/arm/arm.md (arm_cx1si, arm_cx1di arm_cx1asi, arm_cx1adi,\n\tarm_cx2si, arm_cx2di arm_cx2asi, arm_cx2adi arm_cx3si, arm_cx3di,\n\tarm_cx3asi, arm_cx3adi): New patterns.\n\t* config/arm/arm_cde.h (__arm_cx1, __arm_cx1a, __arm_cx2, __arm_cx2a,\n\t__arm_cx3, __arm_cx3a, __arm_cx1d, __arm_cx1da, __arm_cx2d, __arm_cx2da,\n\t__arm_cx3d, __arm_cx3da): New ACLE function macros.\n\t* config/arm/arm_cde_builtins.def (cx1, cx1a, cx2, cx2a, cx3, cx3a):\n\tDefine intrinsics.\n\t* config/arm/iterators.md (cde_suffix, cde_dest): New mode attributes.\n\t* config/arm/predicates.md (const_int_ccde1_operand,\n\tconst_int_ccde2_operand, const_int_ccde3_operand): New.\n\t* config/arm/unspecs.md (UNSPEC_CDE, UNSPEC_CDEA): New.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-03  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.target/arm/acle/cde-errors.c: New test.\n\t* gcc.target/arm/acle/cde.c: New test.\n\t* lib/target-supports.exp: Update CDE flags to enable coprocessor 6.", "tree": {"sha": "c8b7f6e518a91b4b7272b1ae7757c0bb1362451c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b7f6e518a91b4b7272b1ae7757c0bb1362451c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b9bfd02b88cad2f6b3f50ad610dd75cb989ed3"}], "stats": {"total": 484, "additions": 479, "deletions": 5}, "files": [{"sha": "c38776fdad7e7209e1a77eac86bc93ac68294c77", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -25057,10 +25057,11 @@ arm_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       if (ARM_NUM_REGS (mode) > 4)\n \treturn false;\n \n-      if (TARGET_THUMB2 && !TARGET_HAVE_MVE)\n+      if (TARGET_THUMB2 && !(TARGET_HAVE_MVE || TARGET_CDE))\n \treturn true;\n \n-      return !(TARGET_LDRD && GET_MODE_SIZE (mode) > 4 && (regno & 1) != 0);\n+      return !((TARGET_LDRD || TARGET_CDE)\n+\t       && GET_MODE_SIZE (mode) > 4 && (regno & 1) != 0);\n     }\n \n   if (regno == FRAME_POINTER_REGNUM"}, {"sha": "83886a2fcb3844f6a5060e451125a6cd2d505c5c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -576,6 +576,9 @@ extern int arm_arch_cde;\n extern int arm_arch_cde_coproc;\n extern const int arm_arch_cde_coproc_bits[];\n #define ARM_CDE_CONST_COPROC\t7\n+#define ARM_CCDE_CONST_1\t((1 << 13) - 1)\n+#define ARM_CCDE_CONST_2\t((1 << 9 ) - 1)\n+#define ARM_CCDE_CONST_3\t((1 << 6 ) - 1)\n #define ARM_VCDE_CONST_1\t((1 << 11) - 1)\n #define ARM_VCDE_CONST_2\t((1 << 6 ) - 1)\n #define ARM_VCDE_CONST_3\t((1 << 3 ) - 1)"}, {"sha": "7bc55cce61b2e45e5875a233dd4546d59399d749", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -4408,6 +4408,76 @@\n    (set_attr \"shift\" \"3\")\n    (set_attr \"type\" \"logic_shift_reg\")])\n \f\n+;; Custom Datapath Extension insns.\n+(define_insn \"arm_cx1<mode>\"\n+   [(set (match_operand:SIDI 0 \"s_register_operand\" \"=r\")\n+\t (unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t               (match_operand:SI 2 \"const_int_ccde1_operand\" \"i\")]\n+\t    UNSPEC_CDE))]\n+   \"TARGET_CDE\"\n+   \"cx1<cde_suffix>\\\\tp%c1, <cde_dest>, %2\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_cx1a<mode>\"\n+   [(set (match_operand:SIDI 0 \"s_register_operand\" \"=r\")\n+\t (unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t       (match_operand:SIDI 2 \"s_register_operand\" \"0\")\n+\t               (match_operand:SI 3 \"const_int_ccde1_operand\" \"i\")]\n+\t    UNSPEC_CDEA))]\n+   \"TARGET_CDE\"\n+   \"cx1<cde_suffix>a\\\\tp%c1, <cde_dest>, %3\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_cx2<mode>\"\n+   [(set (match_operand:SIDI 0 \"s_register_operand\" \"=r\")\n+\t (unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t               (match_operand:SI 3 \"const_int_ccde2_operand\" \"i\")]\n+\t    UNSPEC_CDE))]\n+   \"TARGET_CDE\"\n+   \"cx2<cde_suffix>\\\\tp%c1, <cde_dest>, %2, %3\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_cx2a<mode>\"\n+   [(set (match_operand:SIDI 0 \"s_register_operand\" \"=r\")\n+\t (unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t       (match_operand:SIDI 2 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t               (match_operand:SI 4 \"const_int_ccde2_operand\" \"i\")]\n+\t    UNSPEC_CDEA))]\n+   \"TARGET_CDE\"\n+   \"cx2<cde_suffix>a\\\\tp%c1, <cde_dest>, %3, %4\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_cx3<mode>\"\n+   [(set (match_operand:SIDI 0 \"s_register_operand\" \"=r\")\n+\t (unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t               (match_operand:SI 4 \"const_int_ccde3_operand\" \"i\")]\n+\t    UNSPEC_CDE))]\n+   \"TARGET_CDE\"\n+   \"cx3<cde_suffix>\\\\tp%c1, <cde_dest>, %2, %3, %4\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_cx3a<mode>\"\n+   [(set (match_operand:SIDI 0 \"s_register_operand\" \"=r\")\n+\t (unspec:SIDI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t       (match_operand:SIDI 2 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:SI 4 \"s_register_operand\" \"r\")\n+                       (match_operand:SI 5 \"const_int_ccde3_operand\" \"i\")]\n+\t    UNSPEC_CDEA))]\n+   \"TARGET_CDE\"\n+   \"cx3<cde_suffix>a\\\\tp%c1, <cde_dest>, %3, %4, %5\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\f\n ;; Shift and rotation insns\n \n (define_expand \"ashldi3\""}, {"sha": "9adcb99bcaf1a7a0f92199225f87e436363899e7", "filename": "gcc/config/arm/arm_cde.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm_cde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm_cde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde.h?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -35,6 +35,42 @@ extern \"C\" {\n \n #if defined (__ARM_FEATURE_CDE)\n \n+#define __arm_cx1(coproc, imm) \\\n+\t__builtin_arm_cx1si(coproc, imm)\n+\n+#define __arm_cx1a(coproc, acc, imm) \\\n+\t__builtin_arm_cx1asi(coproc, acc, imm)\n+\n+#define __arm_cx2(coproc, n, imm) \\\n+\t__builtin_arm_cx2si(coproc, n, imm)\n+\n+#define __arm_cx2a(coproc, acc, n, imm) \\\n+\t__builtin_arm_cx2asi(coproc, acc, n, imm)\n+\n+#define __arm_cx3(coproc, n, m, imm) \\\n+\t__builtin_arm_cx3si(coproc, n, m, imm)\n+\n+#define __arm_cx3a(coproc, acc, n, m, imm) \\\n+\t__builtin_arm_cx3asi(coproc, acc, n, m, imm)\n+\n+#define __arm_cx1d(coproc, imm) \\\n+\t__builtin_arm_cx1di(coproc, imm)\n+\n+#define __arm_cx1da(coproc, acc, imm) \\\n+\t__builtin_arm_cx1adi(coproc, acc, imm)\n+\n+#define __arm_cx2d(coproc, n, imm) \\\n+\t__builtin_arm_cx2di(coproc, n, imm)\n+\n+#define __arm_cx2da(coproc, acc, n, imm) \\\n+\t__builtin_arm_cx2adi(coproc, acc, n, imm)\n+\n+#define __arm_cx3d(coproc, n, m, imm) \\\n+\t__builtin_arm_cx3di(coproc, n, m, imm)\n+\n+#define __arm_cx3da(coproc, acc, n, m, imm) \\\n+\t__builtin_arm_cx3adi(coproc, acc, n, m, imm)\n+\n #if defined (__ARM_FP) || defined (__ARM_FEATURE_MVE)\n \n /* CDE builtins using FPU/MVE registers.  */"}, {"sha": "8b2cfc074cd45cbf073b83e370514265a82140cc", "filename": "gcc/config/arm/arm_cde_builtins.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -23,6 +23,13 @@\n   VAR1 (T, N, A, IMM_MAX, ECF_FLAG) \\\n   VAR1 (T, N, B, IMM_MAX, ECF_FLAG)\n \n+CDE_VAR2 (CX_IMM, cx1, si, di, ARM_CCDE_CONST_1, ECF_CONST)\n+CDE_VAR2 (CX_UNARY, cx1a, si, di, ARM_CCDE_CONST_1, ECF_CONST)\n+CDE_VAR2 (CX_UNARY, cx2, si, di, ARM_CCDE_CONST_2, ECF_CONST)\n+CDE_VAR2 (CX_BINARY, cx2a, si, di, ARM_CCDE_CONST_2, ECF_CONST)\n+CDE_VAR2 (CX_BINARY, cx3, si, di, ARM_CCDE_CONST_3, ECF_CONST)\n+CDE_VAR2 (CX_TERNARY, cx3a, si, di, ARM_CCDE_CONST_3, ECF_CONST)\n+\n CDE_VAR2 (CX_IMM, vcx1, si, di, ARM_VCDE_CONST_1, ECF_CONST)\n CDE_VAR2 (CX_UNARY, vcx1a, si, di, ARM_VCDE_CONST_1, ECF_CONST)\n CDE_VAR2 (CX_UNARY, vcx2, si, di, ARM_VCDE_CONST_2, ECF_CONST)"}, {"sha": "502f4f53da38bb7c89863e10ee26bdf6bfe5aaf6", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -896,6 +896,9 @@\n \n (define_mode_attr VSF2BF [(V2SF \"V4BF\") (V4SF \"V8BF\")])\n \n+(define_mode_attr cde_suffix [(SI \"\") (DI \"d\")])\n+(define_mode_attr cde_dest [(SI \"%0\") (DI \"%0, %H0\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Code attributes\n ;;----------------------------------------------------------------------------"}, {"sha": "3ad47d2961c9359803f61488a5030bdc6fa6c152", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -231,6 +231,18 @@\n        (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_CDE_CONST_COPROC)\")\n        (match_test \"arm_arch_cde_coproc_bits[UINTVAL (op)] & arm_arch_cde_coproc\")))\n \n+(define_predicate \"const_int_ccde1_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_CCDE_CONST_1)\")))\n+\n+(define_predicate \"const_int_ccde2_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_CCDE_CONST_2)\")))\n+\n+(define_predicate \"const_int_ccde3_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_CCDE_CONST_3)\")))\n+\n (define_predicate \"const_int_vcde1_operand\"\n   (and (match_operand 0 \"const_int_operand\")\n        (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_VCDE_CONST_1)\")))"}, {"sha": "3250b0319e3cb4417ffd6b4af11c71ae7929f26e", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -154,6 +154,8 @@\n   UNSPEC_SMUADX\t\t; Represent the SMUADX operation.\n   UNSPEC_SSAT16\t\t; Represent the SSAT16 operation.\n   UNSPEC_USAT16\t\t; Represent the USAT16 operation.\n+  UNSPEC_CDE\t\t; Custom Datapath Extension instruction.\n+  UNSPEC_CDEA\t\t; Custom Datapath Extension instruction.\n   UNSPEC_VCDE\t\t; Custom Datapath Extension instruction.\n   UNSPEC_VCDEA\t\t; Custom Datapath Extension instruction.\n ])"}, {"sha": "827e03b771230a45e658c0f873455cc8caa35773", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-errors.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-errors.c?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -0,0 +1,111 @@\n+/* Test the Custom Datapath Extension ACLE intrinsic.  */\n+\n+/* This file is to check we catch incorrect uses of the ACLE.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8m_main_cde_ok } */\n+/* { dg-add-options arm_v8m_main_cde } */\n+/* { dg-additional-options \"-save-temps\" } */\n+\n+#include \"arm_cde.h\"\n+\n+/*\n+   These are the scalar intrinsics.\n+uint32_t __arm_cx1(int coproc, uint32_t imm);\n+uint32_t __arm_cx1a(int coproc, uint32_t acc, uint32_t imm);\n+uint32_t __arm_cx2(int coproc, uint32_t n, uint32_t imm);\n+uint32_t __arm_cx2a(int coproc, uint32_t acc, uint32_t n, uint32_t imm);\n+uint32_t __arm_cx3(int coproc, uint32_t n, uint32_t m, uint32_t imm);\n+uint32_t __arm_cx3a(int coproc, uint32_t acc, uint32_t n, uint32_t m, uint32_t imm);\n+\n+uint64_t __arm_cx1d(int coproc, uint32_t imm);\n+uint64_t __arm_cx1da(int coproc, uint64_t acc, uint32_t imm);\n+uint64_t __arm_cx2d(int coproc, uint32_t n, uint32_t imm);\n+uint64_t __arm_cx2da(int coproc, uint64_t acc, uint32_t n, uint32_t imm);\n+uint64_t __arm_cx3d(int coproc, uint32_t n, uint32_t m, uint32_t imm);\n+uint64_t __arm_cx3da(int coproc, uint64_t acc, uint32_t n, uint32_t m, uint32_t imm);\n+*/\n+\n+/* Incorrect types as the constants.  */\n+uint64_t test_cde (uint32_t n, uint32_t m)\n+{\n+  uint64_t accum = 0;\n+\n+  /* `coproc` not enabled.  */\n+  accum += __arm_cx1   (7,                        0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx1a  (7, (uint32_t)accum,       0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx2   (7, n,                     0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx2a  (7, (uint32_t)accum, n,    0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx3   (7, n, m,                  0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx3a  (7, (uint32_t)accum, n, m, 0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+\n+  accum += __arm_cx1d  (7,                        0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx1da (7, accum,                 0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx2d  (7, n,                     0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx2da (7, accum, n,              0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx3d  (7, n, m,                  0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+  accum += __arm_cx3da (7, accum, n, m,           0); /* { dg-error {coprocessor 7 is not enabled with \\+cdecp7} } */\n+\n+  /* `coproc` out of range.  */\n+  accum += __arm_cx1   (8,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx1a  (8, (uint32_t)accum,       0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2   (8, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2a  (8, (uint32_t)accum, n,    0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3   (8, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3a  (8, (uint32_t)accum, n, m, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  accum += __arm_cx1d  (8,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx1da (8, accum,                 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2d  (8, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2da (8, accum, n,              0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3d  (8, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3da (8, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  /* `imm` out of range.  */\n+  accum += __arm_cx1   (0,                        8192); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1a  (0, (uint32_t)accum,       8192); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2   (0, n,                     512); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2a  (0, (uint32_t)accum, n,    512); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3   (0, n, m,                  64); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3a  (0, (uint32_t)accum, n, m, 64); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n+\n+  accum += __arm_cx1d  (0,                        8192); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1da (0, accum,                 8192); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2d  (0, n,                     512); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2da (0, accum, n,              512); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3d  (0, n, m,                  64); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3da (0, accum, n, m,           64); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n+\n+  /* `imm` is not an immediate.  */\n+  accum += __arm_cx1   (0,                        n); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1a  (0, (uint32_t)accum,       n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2   (0, n,                     n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2a  (0, (uint32_t)accum, n,    n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3   (0, n, m,                  n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3a  (0, (uint32_t)accum, n, m, n); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n+\n+  accum += __arm_cx1d  (0,                        n); /* { dg-error {argument 2 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx1da (0, accum,                 n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-8191\\]} } */\n+  accum += __arm_cx2d  (0, n,                     n); /* { dg-error {argument 3 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx2da (0, accum, n,              n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-511\\]} } */\n+  accum += __arm_cx3d  (0, n, m,                  n); /* { dg-error {argument 4 must be a constant immediate in range \\[0-63\\]} } */\n+  accum += __arm_cx3da (0, accum, n, m,           n); /* { dg-error {argument 5 must be a constant immediate in range \\[0-63\\]} } */\n+\n+  /* `coproc` is not an immediate.  */\n+  accum += __arm_cx1   ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx1a  ((int)m, (uint32_t)accum,       0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2   ((int)m, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2a  ((int)m, (uint32_t)accum, n,    0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3   ((int)m, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3a  ((int)m, (uint32_t)accum, n, m, 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  accum += __arm_cx1d  ((int)m,                        0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx1da ((int)m, accum,                 0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2d  ((int)m, n,                     0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx2da ((int)m, accum, n,              0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3d  ((int)m, n, m,                  0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_cx3da ((int)m, accum, n, m,           0); /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  return accum;\n+}\n+"}, {"sha": "f3ba8f00189389a94100ea2ddb0a09dde9abc613", "filename": "gcc/testsuite/gcc.target/arm/acle/cde.c", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde.c?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -0,0 +1,229 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"Require optimsation to compile DCE tests\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-require-effective-target arm_v8m_main_cde_ok } */\n+/* { dg-add-options arm_v8m_main_cde } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* These are the scalar intrinsics.\n+uint32_t __arm_cx1(int coproc, uint32_t imm);\n+uint32_t __arm_cx1a(int coproc, uint32_t acc, uint32_t imm);\n+uint32_t __arm_cx2(int coproc, uint32_t n, uint32_t imm);\n+uint32_t __arm_cx2a(int coproc, uint32_t acc, uint32_t n, uint32_t imm);\n+uint32_t __arm_cx3(int coproc, uint32_t n, uint32_t m, uint32_t imm);\n+uint32_t __arm_cx3a(int coproc, uint32_t acc, uint32_t n, uint32_t m, uint32_t imm);\n+\n+uint64_t __arm_cx1d(int coproc, uint32_t imm);\n+uint64_t __arm_cx1da(int coproc, uint64_t acc, uint32_t imm);\n+uint64_t __arm_cx2d(int coproc, uint32_t n, uint32_t imm);\n+uint64_t __arm_cx2da(int coproc, uint64_t acc, uint32_t n, uint32_t imm);\n+uint64_t __arm_cx3d(int coproc, uint32_t n, uint32_t m, uint32_t imm);\n+uint64_t __arm_cx3da(int coproc, uint64_t acc, uint32_t n, uint32_t m, uint32_t imm); */\n+\n+#include \"arm_cde.h\"\n+\n+#define TEST_CDE_SCALAR_INTRINSIC(name, accum_type, arguments) \\\n+  accum_type test_cde_##name (__attribute__ ((unused)) uint32_t n, \\\n+\t\t\t      __attribute__ ((unused)) uint32_t m) \\\n+  {  \\\n+     accum_type accum = 0; \\\n+     accum += __arm_##name  arguments;  \\\n+     return accum;  \\\n+  }\n+\n+/* Basic test that we produce the assembly as expected.  */\n+/*\n+** test_cde_cx1:\n+**\tcx1\tp0, r0, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx1, uint32_t, (0, 33))\n+\n+/*\n+** test_cde_cx1a:\n+**\tmovs\tr0, #0\n+**\tcx1a\tp0, r0, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx1a, uint32_t, (0, accum, 33))\n+\n+/*\n+** test_cde_cx2:\n+**\tcx2\tp0, r0, r0, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx2, uint32_t, (0, n, 33))\n+\n+/*\n+** test_cde_cx2a:\n+**\tmovs\t(r[0-9]+), #0\n+**\tcx2a\tp0, \\1, r0, #33\n+**\tmov\tr0, \\1\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx2a, uint32_t, (0, accum, n, 33))\n+\n+/*\n+** test_cde_cx3:\n+**\tcx3\tp0, r0, r0, r1, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx3, uint32_t, (0, n, m, 33))\n+\n+/*\n+** test_cde_cx3a:\n+**\tmovs\t(r[0-9]+), #0\n+**\tcx3a\tp0, \\1, r0, r1, #33\n+**\tmov\tr0, \\1\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx3a, uint32_t, (0, accum, n, m, 33))\n+\n+/*\n+** test_cde_cx1d:\n+**\tcx1d\tp0, r0, r1, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx1d, uint64_t, (0, 33))\n+\n+/*\n+** test_cde_cx1da:\n+**\tmovs\tr0, #0\n+**\tmovs\tr1, #0\n+**\tcx1da\tp0, r0, r1, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx1da, uint64_t, (0, accum, 33))\n+\n+/*\n+** test_cde_cx2d:\n+**\tcx2d\tp0, r0, r1, r0, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx2d, uint64_t, (0, n, 33))\n+\n+/* This particular function gets optimised by the compiler in two different\n+   ways depending on the optimisation level.  So does test_cde_cx3da.  That's\n+   why we have two different regexes in each of these function body checks.  */\n+/*\n+** test_cde_cx2da:\n+** (\n+**\tmov\t(r[0-9]+), r0\n+**\tmovs\tr0, #0\n+**\tmovs\tr1, #0\n+**\tcx2da\tp0, r0, r1, \\1, #33\n+** |\n+**\tmovs\t(r[0-9]+), #0\n+**\tmovs\t(r[0-9]+), #0\n+**\tcx2da\tp0, \\2, \\3, r0, #33\n+**\tmov\tr0, \\2\n+**\tmov\tr1, \\3\n+** )\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx2da, uint64_t, (0, accum, n, 33))\n+\n+/*\n+** test_cde_cx3d:\n+**\tcx3d\tp0, r0, r1, r0, r1, #33\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx3d, uint64_t, (0, n, m, 33))\n+\n+/*\n+** test_cde_cx3da:\n+**\t...\n+** (\n+**\tmovs\t(r[0-9]+), #0\n+**\tmovs\t(r[0-9]+), #0\n+**\tcx3da\tp0, \\1, \\2, r0, r1, #33\n+**\tmov\tr0, \\1\n+**\tmov\tr1, \\2\n+** |\n+**      movs\tr0, #0\n+**      movs\tr1, #0\n+**      cx3da\tp0, r0, r1, r[0-9]+, r[0-9]+, #33\n+** )\n+**\t...\n+**\tbx\tlr\n+*/\n+TEST_CDE_SCALAR_INTRINSIC (cx3da, uint64_t, (0, accum, n, m, 33))\n+\n+\n+\n+/* Ensure this function gets DCE'd out after optimisation.\n+   Should be such since the ACLE specification mentions these functions are\n+   stateless and pure.  */\n+/*\n+** test_cde_dce:\n+**\tbx\tlr\n+*/\n+void test_cde_dce (uint32_t n, uint32_t m)\n+{\n+  uint64_t accum = 0;\n+  __arm_cx1   (0, 33);\n+  __arm_cx1a  (0, accum, 33);\n+  __arm_cx2   (0, n, 33);\n+  __arm_cx2a  (0, accum, n, 33);\n+  __arm_cx3   (0, n, m, 33);\n+  __arm_cx3a  (0, accum, n, m, 33);\n+  __arm_cx1d   (0, 33);\n+  __arm_cx1da  (0, accum, 33);\n+  __arm_cx2d   (0, n, 33);\n+  __arm_cx2da  (0, accum, n, 33);\n+  __arm_cx3d   (0, n, m, 33);\n+  __arm_cx3da  (0, accum, n, m, 33);\n+}\n+\n+/* Checking this function allows constants with symbolic names.\n+   This test must be run under some level of optimisation.\n+   The actual check we perform is that the function is provided something that,\n+   at the point of expansion, is an immediate.  That check is not as strict as\n+   having something that is an immediate directly.\n+\n+   Since we've already checked these intrinsics generate code in the manner we\n+   expect (above), here we just check that all the instructions we expect are\n+   there.  To ensure the instructions are from these functions we use different\n+   constants and search for those specifically with `scan-assembler-times`.  */\n+\n+/* Checking this function allows constants with symbolic names.  */\n+uint32_t test_cde2 (uint32_t n, uint32_t m)\n+{\n+  int coproc = 6;\n+  uint32_t imm = 30;\n+  uint32_t accum = 0;\n+  accum += __arm_cx1   (coproc, imm);\n+  accum += __arm_cx1a  (coproc, accum, imm);\n+  accum += __arm_cx2   (coproc, n, imm);\n+  accum += __arm_cx2a  (coproc, accum, n, imm);\n+  accum += __arm_cx3   (coproc, n, m, imm);\n+  accum += __arm_cx3a  (coproc, accum, n, m, imm);\n+  return accum;\n+}\n+\n+/* Checking this function allows constants with symbolic names.  */\n+uint64_t test_cdedi2 (uint32_t n, uint32_t m)\n+{\n+  int coproc = 6;\n+  uint32_t imm = 30;\n+  uint64_t accum = 0;\n+  accum += __arm_cx1d   (coproc, imm);\n+  accum += __arm_cx1da  (coproc, accum, imm);\n+  accum += __arm_cx2d   (coproc, n, imm);\n+  accum += __arm_cx2da  (coproc, accum, n, imm);\n+  accum += __arm_cx3d   (coproc, n, m, imm);\n+  accum += __arm_cx3da  (coproc, accum, n, m, imm);\n+  return accum;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cx1\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx2\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx3\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx1a\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx2a\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx3a\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx1d\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx2d\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx3d\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx1da\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx2da\\\\tp6\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cx3da\\\\tp6\" 1 } } */"}, {"sha": "1e8c0e2bd2913be773d2d608a82953adf2832d01", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "patch": "@@ -5117,13 +5117,13 @@ proc add_options_for_arm_v8_2a_bf16_neon { flags } {\n \n foreach { armfunc armflag armdef } {\n \tarm_v8m_main_cde\n-\t\t\"-march=armv8-m.main+cdecp0 -mthumb\"\n+\t\t\"-march=armv8-m.main+cdecp0+cdecp6 -mthumb\"\n \t\t\"defined (__ARM_FEATURE_CDE)\"\n \tarm_v8m_main_cde_fp\n-\t\t\"-march=armv8-m.main+fp+cdecp0 -mthumb\"\n+\t\t\"-march=armv8-m.main+fp+cdecp0+cdecp6 -mthumb\"\n \t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FP)\"\n \tarm_v8_1m_main_cde_mve\n-\t\t\"-march=armv8.1-m.main+mve+cdecp0 -mthumb\"\n+\t\t\"-march=armv8.1-m.main+mve+cdecp0+cdecp6 -mthumb\"\n \t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FEATURE_MVE)\"\n \t} {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {"}]}