{"sha": "bd1f473825af96053542ff6d3ac518a77c95b4af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxZjQ3MzgyNWFmOTYwNTM1NDJmZjZkM2FjNTE4YTc3Yzk1YjRhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2001-12-16T01:02:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-16T01:02:17Z"}, "message": "2001-12-15  Paolo Carlini  <pcarlini@unitus.it>\n            Nathan Myers  <ncm@cantrip.org>\n\n        * include/bits/basic_string.h\n\t(assign(__str, __pos, __n), assign(__s, __n)):  Optimize\n\tby avoiding unnecessary temporaries.\n\t(assign(__s)): Call assign(__s, __n).\n\t* include/bits/basic_string.tcc (_M_replace_safe): Adjust comment.\n\t* include/bits/std_string.h: include stl_function.h.\n        * testsuite/21_strings/assign.cc (test02, test03): New tests.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r48053", "tree": {"sha": "712f37fa4aadfa8e07f17a38c0faf08ecd8f3174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/712f37fa4aadfa8e07f17a38c0faf08ecd8f3174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd1f473825af96053542ff6d3ac518a77c95b4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1f473825af96053542ff6d3ac518a77c95b4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1f473825af96053542ff6d3ac518a77c95b4af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1f473825af96053542ff6d3ac518a77c95b4af/comments", "author": null, "committer": null, "parents": [{"sha": "226ada7a41dba4d02def08367ed1b66199d6e472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226ada7a41dba4d02def08367ed1b66199d6e472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226ada7a41dba4d02def08367ed1b66199d6e472"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "ea411a9e8280cce512a1fce664547b8e5f98afd7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd1f473825af96053542ff6d3ac518a77c95b4af", "patch": "@@ -1,3 +1,14 @@\n+2001-12-15  Paolo Carlini  <pcarlini@unitus.it>\n+            Nathan Myers  <ncm@cantrip.org>\n+\n+\t* include/bits/basic_string.h\n+\t(assign(__str, __pos, __n), assign(__s, __n)):  Optimize\n+\tby avoiding unnecessary temporaries.\n+\t(assign(__s)): Call assign(__s, __n).\n+\t* include/bits/basic_string.tcc (_M_replace_safe): Adjust comment.\n+\t* include/bits/std_string.h: include stl_function.h.\n+\t* testsuite/21_strings/assign.cc (test02, test03): New tests.\n+\n 2001-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Enable gnu locale model"}, {"sha": "af550c9a01bbd3524ac1b6a88c048c3ff0b92417", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=bd1f473825af96053542ff6d3ac518a77c95b4af", "patch": "@@ -477,17 +477,53 @@ namespace std\n \n       basic_string& \n       assign(const basic_string& __str, size_type __pos, size_type __n)\n-      { \n-\treturn this->assign(__str._M_check(__pos), __str._M_fold(__pos, __n)); \n+      {\n+\tif (__pos > __str.size())\n+\t  __throw_out_of_range(\"basic_string::assign\");\n+\tif (_M_rep()->_M_is_shared() || _M_rep() != __str._M_rep())\n+\t  return _M_replace_safe(_M_ibegin(), _M_iend(), \n+\t\t\t\t __str._M_check(__pos),\n+\t\t\t\t __str._M_fold(__pos, __n));\n+\telse\n+\t  {\n+\t    // Work in-place.\n+\t    bool __testn = __n < __str.size() - __pos;\n+\t    const size_type __newsize = __testn ? __n : __str.size() - __pos;\n+\t    // Avoid move, if possible.\n+\t    if (__pos >= __newsize)\n+\t      traits_type::copy(_M_data(), __str._M_data() + __pos, __newsize);\n+\t    else if (__pos)\t      \n+\t      traits_type::move(_M_data(), __str._M_data() + __pos, __newsize);\n+\t    // else nothing (avoid calling move unnecessarily)\n+\t    _M_rep()->_M_length = __newsize;\n+\t    return *this;\n+\t  }\n       }\n \n       basic_string& \n       assign(const _CharT* __s, size_type __n)\n-      { return this->assign(__s, __s + __n); }\n+      {\n+\tif (__n > this->max_size())\n+\t  __throw_length_error(\"basic_string::assign\");\n+\tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n+\t    || less<const _CharT*>()(_M_data() + this->size(), __s))\n+\t  return _M_replace_safe(_M_ibegin(), _M_iend(), __s, __s + __n);\n+\telse\n+\t  {\n+\t    // Work in-place\n+\t    const size_type __pos = __s - _M_data();\n+\t    if (__pos >= __n)\n+\t      traits_type::copy(_M_data(), __s, __n);\n+\t    else if (__pos)\n+\t      traits_type::move(_M_data(), __s, __n);\n+\t    _M_rep()->_M_length = __n;\n+\t    return *this;\n+\t  }\n+      }\n \n       basic_string& \n       assign(const _CharT* __s)\n-      { return this->assign(__s, __s + traits_type::length(__s)); }\n+      { return this->assign(__s, traits_type::length(__s)); }\n \n       basic_string& \n       assign(size_type __n, _CharT __c)"}, {"sha": "63a9864a9d066d6afcbbbb62ecad9f20650d26cf", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=bd1f473825af96053542ff6d3ac518a77c95b4af", "patch": "@@ -512,7 +512,8 @@ namespace std\n   // This is a special replace helper, which does not buffer internally\n   // and can be used in the \"safe\" situations involving forward-iterators,\n   // i.e., when source and destination ranges are known to not overlap.\n-  // Presently, is called by _M_replace and by the various append.\n+  // Presently, is called by _M_replace, by the various append and by\n+  // the assigns.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _ForwardIter>\n       basic_string<_CharT, _Traits, _Alloc>&"}, {"sha": "d93fa202d237f20fb047997bd47d69f81a81f6d4", "filename": "libstdc++-v3/include/bits/std_string.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h?ref=bd1f473825af96053542ff6d3ac518a77c95b4af", "patch": "@@ -48,6 +48,7 @@\n #include <bits/type_traits.h>\n #include <bits/std_iosfwd.h> \t// For operators >>, <<, and getline decls.\n #include <bits/stl_iterator.h>\n+#include <bits/stl_function.h>  // For less\n #include <bits/basic_string.h>\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "1d7db1c16e44e379cdb38345c7739fce61da08f1", "filename": "libstdc++-v3/testsuite/21_strings/assign.cc", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1f473825af96053542ff6d3ac518a77c95b4af/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fassign.cc?ref=bd1f473825af96053542ff6d3ac518a77c95b4af", "patch": "@@ -39,8 +39,71 @@ test01()\n   VERIFY(aux == \"Hawaii\");\n }\n \n+// assign(const basic_string& __str, size_type __pos, size_type __n)\n+void\n+test02()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+  \n+  string one = \"Selling England by the pound\";\n+  string two = one;\n+  string three = \"Brilliant trees\";\n+\n+  one.assign(one, 8, 100);\n+  VERIFY( one == \"England by the pound\" );\n+\n+  one.assign(one, 8, 0);\n+  VERIFY( one == \"\" );\n+ \n+  one.assign(two, 8, 7);\n+  VERIFY( one == \"England\" );\n+\n+  one.assign(three, 10, 100);\n+  VERIFY( one == \"trees\" );\n+\n+  three.assign(one, 0, 3);\n+  VERIFY( three == \"tre\" );\n+}\n+\n+// assign(const _CharT* __s, size_type __n)\n+// assign(const _CharT* __s)\n+void\n+test03()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+ \n+  string one; \n+  string two;\n+  string three = two;\n+  const char * source = \"Selling England by the pound\";\n+\n+  one.assign(source);\n+  VERIFY( one == \"Selling England by the pound\" );\n+\n+  one.assign(source, 28);\n+  VERIFY( one == \"Selling England by the pound\" );\n+\n+  two.assign(source, 7);\n+  VERIFY( two == \"Selling\" );\n+  \n+  one.assign(one.c_str() + 8, 20);\n+  VERIFY( one == \"England by the pound\" );\n+\n+  one.assign(one.c_str() + 8, 6);\n+  VERIFY( one == \"by the\" );\n+}\n+\n+\n+\n int main()\n { \n   test01();\n+  test02();\n+  test03();\n+\n   return 0;\n }"}]}