{"sha": "aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhYmQxNWQ0NTc4YmE2ZTRhYWYwNWE3YWE0NTY4NmQyYzI4ZjMyZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-03-08T21:37:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-03-08T21:37:28Z"}, "message": "builtins.def (lceil, [...]): Mark with ATTR_CONST_NOTHROW_LIST.\n\n\t* builtins.def (lceil, lceilf, lceill, lfloor, lfloorf, lfloorl,\n\tllceil, llceilf, llceill, llfloor, llfloorf, llfloorl): Mark with\n\tATTR_CONST_NOTHROW_LIST.\n\t\n\t* fold-const.c (tree_expr_nonnegative_warnv_p): Handle\n\tFIX_TRUNC_EXPR.\n\ntestsuite:\n\t* gcc.dg/builtins-55.c: Test *lceil* and *lfloor*.\n\t* gcc.dg/torture/builtin-attr-1.c: Likewise.\n\t* gcc.dg/torture/builtin-convert-1.c: Likewise.  Also test *lrint* and *lround*.\n\t* gcc.dg/torture/builtin-convert-2.c: Test ceil->lceil and floor->lfloor.\n\t* gcc.dg/torture/builtin-convert-3.c: Test *lceil* and *lfloor*.\n\t* gcc.dg/torture/builtin-integral-1.c: Likewise.\n\t* gcc.dg/torture/builtin-minmax-1.c: Likewise.  Also test *lrint*\n\tand *lround*.  Correct macro names.\n\t* gcc.dg/torture/builtin-nonneg-1.c: Test *lceil* and *lfloor*.\n\t* gcc.dg/torture/builtin-rounding-1.c: Likewise.\n\nFrom-SVN: r122713", "tree": {"sha": "dbab368dba483b020c7abd1257f7b8bc8f3a18a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbab368dba483b020c7abd1257f7b8bc8f3a18a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/comments", "author": null, "committer": null, "parents": [{"sha": "f53e867d7380799d6e3e1513f436ded5b8131668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f53e867d7380799d6e3e1513f436ded5b8131668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f53e867d7380799d6e3e1513f436ded5b8131668"}], "stats": {"total": 315, "additions": 188, "deletions": 127}, "files": [{"sha": "b289668bee5df7853889ed1997082493ba7f2bd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -1,3 +1,12 @@\n+2007-03-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.def (lceil, lceilf, lceill, lfloor, lfloorf, lfloorl,\n+\tllceil, llceilf, llceill, llfloor, llfloorf, llfloorl): Mark with\n+\tATTR_CONST_NOTHROW_LIST.\n+\t\n+\t* fold-const.c (tree_expr_nonnegative_warnv_p): Handle\n+\tFIX_TRUNC_EXPR.\n+\n 2007-03-08  Diego Novillo  <dnovillo@redhat.com>\n \n \t* doc/tree-ssa.texi: Remove documentation for V_MUST_DEF."}, {"sha": "ebcbe11fa23e4a55fc791ed63ac96c6a40758ba0", "filename": "gcc/builtins.def", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -282,24 +282,24 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_J1L, \"j1l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_M\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_JN, \"jn\", BT_FN_DOUBLE_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_JNF, \"jnf\", BT_FN_FLOAT_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_JNL, \"jnl\", BT_FN_LONGDOUBLE_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_GCC_BUILTIN        (BUILT_IN_LCEIL, \"lceil\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LCEILF, \"lceilf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LCEILL, \"lceill\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LCEIL, \"lceil\", BT_FN_LONG_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LCEILF, \"lceilf\", BT_FN_LONG_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LCEILL, \"lceill\", BT_FN_LONG_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_LDEXP, \"ldexp\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPF, \"ldexpf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPL, \"ldexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_GCC_BUILTIN        (BUILT_IN_LFLOOR, \"lfloor\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LFLOORF, \"lfloorf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LFLOORL, \"lfloorl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LFLOOR, \"lfloor\", BT_FN_LONG_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LFLOORF, \"lfloorf\", BT_FN_LONG_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LFLOORL, \"lfloorl\", BT_FN_LONG_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMA, \"lgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAF, \"lgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAL, \"lgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n-DEF_GCC_BUILTIN        (BUILT_IN_LLCEIL, \"llceil\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LLCEILF, \"llceilf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LLCEILL, \"llceill\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LLFLOOR, \"llfloor\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORF, \"llfloorf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORL, \"llfloorl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLCEIL, \"llceil\", BT_FN_LONGLONG_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLCEILF, \"llceilf\", BT_FN_LONGLONG_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLCEILL, \"llceill\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLFLOOR, \"llfloor\", BT_FN_LONGLONG_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORF, \"llfloorf\", BT_FN_LONGLONG_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORL, \"llfloorl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINT, \"llrint\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTF, \"llrintf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTL, \"llrintl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "45ee227257be2cdce5578a084d1b1c320e1fd8f4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -13256,6 +13256,7 @@ tree_expr_nonnegative_warnv_p (tree t, bool *strict_overflow_p)\n     case SAVE_EXPR:\n     case NON_LVALUE_EXPR:\n     case FLOAT_EXPR:\n+    case FIX_TRUNC_EXPR:\n       return tree_expr_nonnegative_warnv_p (TREE_OPERAND (t, 0),\n \t\t\t\t\t    strict_overflow_p);\n "}, {"sha": "30236594ce5dae88e893cb0f5691492f1c12e554", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -1,3 +1,16 @@\n+2007-03-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-55.c: Test *lceil* and *lfloor*.\n+\t* gcc.dg/torture/builtin-attr-1.c: Likewise.\n+\t* gcc.dg/torture/builtin-convert-1.c: Likewise.  Also test *lrint* and *lround*.\n+\t* gcc.dg/torture/builtin-convert-2.c: Test ceil->lceil and floor->lfloor.\n+\t* gcc.dg/torture/builtin-convert-3.c: Test *lceil* and *lfloor*.\n+\t* gcc.dg/torture/builtin-integral-1.c: Likewise.\n+\t* gcc.dg/torture/builtin-minmax-1.c: Likewise.  Also test *lrint*\n+\tand *lround*.  Correct macro names.\n+\t* gcc.dg/torture/builtin-nonneg-1.c: Test *lceil* and *lfloor*.\n+\t* gcc.dg/torture/builtin-rounding-1.c: Likewise.\n+\n 2007-03-08  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.dg/no-strict-overflow-5.c: New test."}, {"sha": "7eebd6395cae409a95ce9abf487501862f32b9bb", "filename": "gcc/testsuite/gcc.dg/builtins-55.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-55.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -32,6 +32,10 @@ void test(double x)\n   if (sizeof(long) != sizeof(long long))\n     return;\n \n+  if (__builtin_lceil(x) != __builtin_llceil(x))\n+    link_error();\n+  if (__builtin_lfloor(x) != __builtin_llfloor(x))\n+    link_error();\n   if (lround(x) != llround(x))\n     link_error();\n   if (lrint(x) != llrint(x))\n@@ -45,6 +49,10 @@ void testf(float x)\n   if (sizeof(long) != sizeof(long long))\n     return;\n \n+  if (__builtin_lceilf(x) != __builtin_llceilf(x))\n+    link_error();\n+  if (__builtin_lfloorf(x) != __builtin_llfloorf(x))\n+    link_error();\n   if (lroundf(x) != llroundf(x))\n     link_error();\n   if (lrintf(x) != llrintf(x))\n@@ -58,6 +66,10 @@ void testl(long double x)\n   if (sizeof(long) != sizeof(long long))\n     return;\n \n+  if (__builtin_lceill(x) != __builtin_llceill(x))\n+    link_error();\n+  if (__builtin_lfloorl(x) != __builtin_llfloorl(x))\n+    link_error();\n   if (lroundl(x) != llroundl(x))\n     link_error();\n   if (lrintl(x) != llrintl(x))"}, {"sha": "5b9012e51fccd60806b872da6c6664ea5643e1e9", "filename": "gcc/testsuite/gcc.dg/torture/builtin-attr-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -344,13 +344,17 @@ FPTEST1            (j0)\n FPTEST1            (j1)\n FPTEST2ARG1        (jn, int)\n FPTEST2ARG2        (ldexp, int)\n+BUILTIN_FPTEST1    (llceil)\n+BUILTIN_FPTEST1    (llfloor)\n FPTEST1T           (llrint, long long)\n FPTEST1T           (llround, long long)\n FPTEST1            (log)\n FPTEST1            (log10)\n FPTEST1            (log1p)\n FPTEST1            (log2)\n FPTEST1            (logb)\n+BUILTIN_FPTEST1    (lceil)\n+BUILTIN_FPTEST1    (lfloor)\n FPTEST1T           (lrint, long)\n FPTEST1T           (lround, long)\n BUILTIN_FPTEST1ARG (nan, char *)"}, {"sha": "7886b9a531ffa940bbb0704069063c35d25fc28a", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-1.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-1.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -21,9 +21,6 @@\n #define MAYBEC99(CODE, C99) (!(C99) && (CODE))\n #endif\n \n-#define PROTOTYPE1(FN) extern double FN(double); extern float FN##f(float); \\\n-  extern long double FN##l(long double);\n-\n void test(double d1, float f1, long double ld1)\n {\n   /* Test converting math builtins to narrower FP types based on a\n@@ -33,60 +30,58 @@ void test(double d1, float f1, long double ld1)\n      is only performed if the replacement function is actually\n      narrower in width, so check that first.  */\n #define OUTER_CAST1(MATHFN, C99) \\\n- PROTOTYPE1 (MATHFN) \\\n  extern void link_failure_outer_##MATHFN##l_##MATHFN##_1(void); \\\n  extern void link_failure_outer_##MATHFN##l_##MATHFN##_2(void); \\\n  extern void link_failure_outer_##MATHFN##l_##MATHFN##f_1(void); \\\n  extern void link_failure_outer_##MATHFN##l_##MATHFN##f_2(void); \\\n  extern void link_failure_outer_##MATHFN##_##MATHFN##f_1(void); \\\n  extern void link_failure_outer_##MATHFN##_##MATHFN##f_2(void); \\\n  if (sizeof (long double) > sizeof (double) \\\n-     && MAYBEC99 ((double) MATHFN##l((double)ld1) != MATHFN(ld1), C99)) \\\n+     && MAYBEC99 ((double) __builtin_##MATHFN##l((double)ld1) != __builtin_##MATHFN(ld1), C99)) \\\n     link_failure_outer_##MATHFN##l_##MATHFN##_1(); \\\n  if (sizeof (long double) > sizeof (double) \\\n-     && MAYBEC99 ((double) MATHFN##l(d1) != MATHFN(d1), C99)) \\\n+     && MAYBEC99 ((double) __builtin_##MATHFN##l(d1) != __builtin_##MATHFN(d1), C99)) \\\n     link_failure_outer_##MATHFN##l_##MATHFN##_1(); \\\n  if (sizeof (long double) > sizeof (double) \\\n-     && MAYBEC99 ((double) MATHFN##l(f1) != MATHFN(f1), C99)) \\\n+     && MAYBEC99 ((double) __builtin_##MATHFN##l(f1) != __builtin_##MATHFN(f1), C99)) \\\n     link_failure_outer_##MATHFN##l_##MATHFN##_2(); \\\n  if (sizeof (long double) > sizeof (float) \\\n-     && C99CODE ((float) MATHFN##l((float) ld1) != MATHFN##f(ld1))) \\\n+     && C99CODE ((float) __builtin_##MATHFN##l((float) ld1) != __builtin_##MATHFN##f(ld1))) \\\n     link_failure_outer_##MATHFN##l_##MATHFN##f_1(); \\\n  if (sizeof (long double) > sizeof (float) \\\n-     && C99CODE ((float) MATHFN##l((float) d1) != MATHFN##f(d1))) \\\n+     && C99CODE ((float) __builtin_##MATHFN##l((float) d1) != __builtin_##MATHFN##f(d1))) \\\n     link_failure_outer_##MATHFN##l_##MATHFN##f_1(); \\\n  if (sizeof (long double) > sizeof (float) \\\n-     && C99CODE ((float) MATHFN##l(f1) != MATHFN##f(f1))) \\\n+     && C99CODE ((float) __builtin_##MATHFN##l(f1) != __builtin_##MATHFN##f(f1))) \\\n     link_failure_outer_##MATHFN##l_##MATHFN##f_2(); \\\n  if (sizeof (double) > sizeof (float) \\\n-     && C99CODE ((float) MATHFN((float) ld1) != MATHFN##f(ld1))) \\\n+     && C99CODE ((float) __builtin_##MATHFN((float) ld1) != __builtin_##MATHFN##f(ld1))) \\\n     link_failure_outer_##MATHFN##_##MATHFN##f_1(); \\\n  if (sizeof (double) > sizeof (float) \\\n-     && C99CODE ((float) MATHFN((float) d1) != MATHFN##f(d1))) \\\n+     && C99CODE ((float) __builtin_##MATHFN((float) d1) != __builtin_##MATHFN##f(d1))) \\\n     link_failure_outer_##MATHFN##_##MATHFN##f_1(); \\\n  if (sizeof (double) > sizeof (float) \\\n-     && C99CODE ((float) MATHFN(f1) != MATHFN##f(f1))) \\\n+     && C99CODE ((float) __builtin_##MATHFN(f1) != __builtin_##MATHFN##f(f1))) \\\n     link_failure_outer_##MATHFN##_##MATHFN##f_2()\n \n   /* Test converting math builtins to narrower FP types based on if\n      the argument is a narrower type (perhaps implicitly) cast to a\n      wider one.  */\n #define INNER_CAST1(MATHFN, C99) \\\n- PROTOTYPE1 (MATHFN) \\\n  extern void link_failure_inner_##MATHFN##l_##MATHFN(void); \\\n  extern void link_failure_inner_##MATHFN##l_##MATHFN##f(void); \\\n  extern void link_failure_inner_##MATHFN##_##MATHFN##f(void); \\\n  if (sizeof (long double) > sizeof (double) \\\n-     && MAYBEC99 (MATHFN##l(d1) != (long double) MATHFN(d1), C99)) \\\n+     && MAYBEC99 (__builtin_##MATHFN##l(d1) != (long double) __builtin_##MATHFN(d1), C99)) \\\n     link_failure_inner_##MATHFN##l_##MATHFN(); \\\n  if (sizeof (long double) > sizeof (float) \\\n-     && C99CODE (MATHFN##l(f1) != (long double) MATHFN##f(f1))) \\\n+     && C99CODE (__builtin_##MATHFN##l(f1) != (long double) __builtin_##MATHFN##f(f1))) \\\n     link_failure_inner_##MATHFN##l_##MATHFN##f(); \\\n  if (sizeof (long double) > sizeof (float) \\\n-     && C99CODE (MATHFN##l((double)f1) != (long double) MATHFN##f(f1))) \\\n+     && C99CODE (__builtin_##MATHFN##l((double)f1) != (long double) __builtin_##MATHFN##f(f1))) \\\n     link_failure_inner_##MATHFN##l_##MATHFN##f(); \\\n  if (sizeof (double) > sizeof (float) \\\n-     && C99CODE (MATHFN(f1) != (double) MATHFN##f(f1))) \\\n+     && C99CODE (__builtin_##MATHFN(f1) != (double) __builtin_##MATHFN##f(f1))) \\\n     link_failure_inner_##MATHFN##_##MATHFN##f()\n \n \n@@ -122,6 +117,22 @@ void test(double d1, float f1, long double ld1)\n   OUTER_CAST1 (ceil, /*C99=*/ 0);\n   INNER_CAST1 (floor, /*C99=*/ 0);\n   OUTER_CAST1 (floor, /*C99=*/ 0);\n+  INNER_CAST1 (lceil, /*C99=*/ 1);\n+  OUTER_CAST1 (lceil, /*C99=*/ 1);\n+  INNER_CAST1 (lfloor, /*C99=*/ 1);\n+  OUTER_CAST1 (lfloor, /*C99=*/ 1);\n+  INNER_CAST1 (lrint, /*C99=*/ 1);\n+  OUTER_CAST1 (lrint, /*C99=*/ 1);\n+  INNER_CAST1 (lround, /*C99=*/ 1);\n+  OUTER_CAST1 (lround, /*C99=*/ 1);\n+  INNER_CAST1 (llceil, /*C99=*/ 1);\n+  OUTER_CAST1 (llceil, /*C99=*/ 1);\n+  INNER_CAST1 (llfloor, /*C99=*/ 1);\n+  OUTER_CAST1 (llfloor, /*C99=*/ 1);\n+  INNER_CAST1 (llrint, /*C99=*/ 1);\n+  OUTER_CAST1 (llrint, /*C99=*/ 1);\n+  INNER_CAST1 (llround, /*C99=*/ 1);\n+  OUTER_CAST1 (llround, /*C99=*/ 1);\n   INNER_CAST1 (nearbyint, /*C99=*/ 1);\n   OUTER_CAST1 (nearbyint, /*C99=*/ 1);\n   INNER_CAST1 (rint, /*C99=*/ 1);"}, {"sha": "312b2d4db3b601f71b175a5f0236503b13337073", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-2.c", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -12,61 +12,59 @@\n \n #include \"../builtins-config.h\"\n \n-#define PROTOTYPE(FN) extern double FN(double); \\\n-  extern float FN##f(float); \\\n-  extern long double FN##l(long double);\n-#define PROTOTYPE_RET(FN, RET) extern RET FN(double); \\\n-  extern RET FN##f(float); \\\n-  extern RET FN##l(long double);\n-\n /* Macro to do all FP type combinations.  The second half tests\n    narrowing the FP type.  */\n #define TEST_FP2FIXED(FN1, FN2) \\\n-  PROTOTYPE(FN1) \\\n-  PROTOTYPE_RET(FN2, long) \\\n-  PROTOTYPE_RET(l##FN2, long long) \\\n   extern void link_error_##FN1##_##FN2(void); \\\n   extern void link_error_##FN1##f_##FN2##f(void); \\\n   extern void link_error_##FN1##l_##FN2##l(void); \\\n   extern void link_error_##FN1##_l##FN2(void); \\\n   extern void link_error_##FN1##f_l##FN2##f(void); \\\n   extern void link_error_##FN1##l_l##FN2##l(void); \\\n-  if ((long)FN1(d) != FN2(d)) \\\n+  if ((long)__builtin_##FN1(d) != __builtin_##FN2(d)) \\\n     link_error_##FN1##_##FN2(); \\\n-  if ((long)FN1##f(f) != FN2##f(f)) \\\n+  if ((long)__builtin_##FN1##f(f) != __builtin_##FN2##f(f)) \\\n     link_error_##FN1##f_##FN2##f(); \\\n-  if ((long)FN1##l(ld) != FN2##l(ld)) \\\n+  if ((long)__builtin_##FN1##l(ld) != __builtin_##FN2##l(ld)) \\\n     link_error_##FN1##l_##FN2##l(); \\\n-  if ((long long)FN1(d) != l##FN2(d)) \\\n+  if ((long long)__builtin_##FN1(d) != __builtin_l##FN2(d)) \\\n     link_error_##FN1##_l##FN2(); \\\n-  if ((long long)FN1##f(f) != l##FN2##f(f)) \\\n+  if ((long long)__builtin_##FN1##f(f) != __builtin_l##FN2##f(f)) \\\n     link_error_##FN1##f_l##FN2##f(); \\\n-  if ((long long)FN1##l(ld) != l##FN2##l(ld)) \\\n+  if ((long long)__builtin_##FN1##l(ld) != __builtin_l##FN2##l(ld)) \\\n     link_error_##FN1##l_l##FN2##l(); \\\n   extern void link_error_##FN1##_##FN2##f(void); \\\n   extern void link_error_##FN1##l_##FN2(void); \\\n   extern void link_error_##FN1##l_##FN2##f(void); \\\n   extern void link_error_##FN1##_l##FN2##f(void); \\\n   extern void link_error_##FN1##l_l##FN2(void); \\\n   extern void link_error_##FN1##l_l##FN2##f(void); \\\n-  if (sizeof(double) > sizeof(float) && (long)FN1(f) != FN2##f(f)) \\\n+  if (sizeof(double) > sizeof(float) \\\n+      && (long)__builtin_##FN1(f) != __builtin_##FN2##f(f)) \\\n     link_error_##FN1##_##FN2##f(); \\\n-  if (sizeof(long double) > sizeof(double) && (long)FN1##l(d) != FN2(d)) \\\n+  if (sizeof(long double) > sizeof(double) \\\n+      && (long)__builtin_##FN1##l(d) != __builtin_##FN2(d)) \\\n     link_error_##FN1##l_##FN2(); \\\n-  if (sizeof(long double) > sizeof(float) && (long)FN1##l(f) != FN2##f(f)) \\\n+  if (sizeof(long double) > sizeof(float) \\\n+      && (long)__builtin_##FN1##l(f) != __builtin_##FN2##f(f)) \\\n     link_error_##FN1##l_##FN2##f(); \\\n-  if (sizeof(double) > sizeof(float) && (long long)FN1(f) != l##FN2##f(f)) \\\n+  if (sizeof(double) > sizeof(float) \\\n+      && (long long)__builtin_##FN1(f) != __builtin_l##FN2##f(f)) \\\n     link_error_##FN1##_l##FN2##f(); \\\n-  if (sizeof(long double) > sizeof(double) && (long long)FN1##l(d) != l##FN2(d)) \\\n+  if (sizeof(long double) > sizeof(double) \\\n+      && (long long)__builtin_##FN1##l(d) != __builtin_l##FN2(d)) \\\n     link_error_##FN1##l_l##FN2(); \\\n-  if (sizeof(long double) > sizeof(float) && (long long)FN1##l(f) != l##FN2##f(f)) \\\n+  if (sizeof(long double) > sizeof(float) \\\n+      && (long long)__builtin_##FN1##l(f) != __builtin_l##FN2##f(f)) \\\n     link_error_##FN1##l_l##FN2##f()\n \n void __attribute__ ((__noinline__)) foo (double d, float f, long double ld)\n {\n #ifdef __OPTIMIZE__\n # ifdef HAVE_C99_RUNTIME\n   /* The resulting transformation functions are all C99.  */\n+  TEST_FP2FIXED (ceil, lceil);\n+  TEST_FP2FIXED (floor, lfloor);\n   TEST_FP2FIXED (round, lround);\n   TEST_FP2FIXED (nearbyint, lrint);\n   TEST_FP2FIXED (rint, lrint);"}, {"sha": "9be570bb59237ff0cac2feee86eefd1597c23411", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-3.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -43,6 +43,10 @@ void __attribute__ ((__noinline__)) test (double d1, float f1)\n #ifdef __OPTIMIZE__\n #ifdef HAVE_C99_RUNTIME\n   /* We're converting to implicitly generated C99 functions.  */\n+  INNER_CAST1 (__builtin_lceil, long);\n+  INNER_CAST1 (__builtin_llceil, long long);\n+  INNER_CAST1 (__builtin_lfloor, long);\n+  INNER_CAST1 (__builtin_llfloor, long long);\n   INNER_CAST1 (lround, long);\n   INNER_CAST1 (llround, long long);\n   INNER_CAST1 (lrint, long);"}, {"sha": "522646dd5cbec815cda558e7263cdba9644c83da", "filename": "gcc/testsuite/gcc.dg/torture/builtin-integral-1.c", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-integral-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-integral-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-integral-1.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -5,48 +5,30 @@\n    Written by Kaveh Ghazi, 2004-03-16.  */\n \n /* { dg-do link } */\n-/* { dg-options \"-ffast-math\" } */\n+/* We need -ffinite-math-only so that we can fold \"foo != foo\", where\n+   foo is a floating point expression.  We need -fno-math-errno so\n+   that various math functions are marked const/pure and can be\n+   folded.  */\n+/* { dg-options \"-ffinite-math-only -fno-math-errno\" } */\n \n-#define PROTOTYPE1(FN) extern double FN(double); extern float FN##f(float); \\\n-  extern long double FN##l(long double);\n-#define PROTOTYPE1_RET(FN, RET) extern RET FN(double); extern RET FN##f(float); \\\n-  extern RET FN##l(long double);\n-#define PROTOTYPE_LINK_FAILURE(FN) extern void link_failure_##FN(void); \\\n- extern void link_failure_##FN##f(void); \\\n- extern void link_failure_##FN##l(void); \\\n-\n-PROTOTYPE1(fabs)\n-PROTOTYPE1(ceil)\n-PROTOTYPE1(floor)\n-PROTOTYPE1(nearbyint)\n-PROTOTYPE1(rint)\n-PROTOTYPE1(round)\n-PROTOTYPE1(trunc)\n-PROTOTYPE1_RET(lround, long)\n-PROTOTYPE1_RET(llround, long long)\n-PROTOTYPE1_RET(lrint, long)\n-PROTOTYPE1_RET(llrint, long long)\n+extern int link_failure (int);\n \n /* Test that the various FP truncation builtins detect integral\n    arguments.  */\n #define CHECK_FN(MATHFN) \\\n- PROTOTYPE_LINK_FAILURE(MATHFN); \\\n- if (MATHFN(i1) != i1) link_failure_##MATHFN(); \\\n- if (MATHFN##f(i1) != i1) link_failure_##MATHFN##f(); \\\n- if (MATHFN##l(i1) != i1) link_failure_##MATHFN##l();\n+ if (__builtin_##MATHFN(i1) != i1) link_failure (__LINE__); \\\n+ if (__builtin_##MATHFN##f(i1) != i1) link_failure (__LINE__); \\\n+ if (__builtin_##MATHFN##l(i1) != i1) link_failure (__LINE__);\n \n #define CHECK_FN_RET(MATHFN, RET) \\\n- PROTOTYPE_LINK_FAILURE(MATHFN); \\\n- if (MATHFN(i1) != (RET)(double)i1) link_failure_##MATHFN(); \\\n- if (MATHFN##f(i1) != (RET)(float)i1) link_failure_##MATHFN##f(); \\\n- if (MATHFN##l(i1) != (RET)(long double)i1) link_failure_##MATHFN##l();\n+ if (__builtin_##MATHFN(i1) != (RET)(double)i1) link_failure (__LINE__); \\\n+ if (__builtin_##MATHFN##f(i1) != (RET)(float)i1) link_failure (__LINE__); \\\n+ if (__builtin_##MATHFN##l(i1) != (RET)(long double)i1) link_failure (__LINE__);\n \n   /* Check that various other integral expressions are detected.  */\n #define CHECK_EXPR(EXPR,NAME) \\\n- extern void link_failure_FP_##NAME(void); \\\n- extern void link_failure_fixed_##NAME(void); \\\n- if (ceill(EXPR) != (EXPR)) link_failure_FP_##NAME(); \\\n- if (lroundl(EXPR) != (long)(long double)(EXPR)) link_failure_fixed_##NAME();\n+ if (__builtin_ceill(EXPR) != (EXPR)) link_failure (__LINE__); \\\n+ if (__builtin_lroundl(EXPR) != (long)(long double)(EXPR)) link_failure (__LINE__);\n \n void __attribute__ ((__noinline__)) test (int i1, int i2)\n {\n@@ -60,16 +42,20 @@ void __attribute__ ((__noinline__)) test (int i1, int i2)\n   CHECK_FN_RET(llround, long long);\n   CHECK_FN_RET(lrint, long);\n   CHECK_FN_RET(llrint, long long);\n+  CHECK_FN_RET(lceil, long);\n+  CHECK_FN_RET(llceil, long long);\n+  CHECK_FN_RET(lfloor, long);\n+  CHECK_FN_RET(llfloor, long long);\n \n   CHECK_EXPR (5.0, REAL_CST);\n   CHECK_EXPR (5.0F, REAL_CSTf);\n   CHECK_EXPR (5.0L, REAL_CSTl);\n   CHECK_EXPR ((double)i1, FLOAT_EXPR);\n   CHECK_EXPR ((float)i1, FLOAT_EXPRf);\n   CHECK_EXPR ((long double)i1, FLOAT_EXPRl);\n-  CHECK_EXPR (fabs(i1), ABS_EXPR);\n-  CHECK_EXPR (fabsf(i1), ABS_EXPRf);\n-  CHECK_EXPR (fabsl(i1), ABS_EXPRl);\n+  CHECK_EXPR (__builtin_fabs(i1), ABS_EXPR);\n+  CHECK_EXPR (__builtin_fabsf(i1), ABS_EXPRf);\n+  CHECK_EXPR (__builtin_fabsl(i1), ABS_EXPRl);\n   CHECK_EXPR (((void)i1,(double)i2), COMPOUND_EXPR);\n   CHECK_EXPR ((double)i1+i2, PLUS_EXPR);\n   CHECK_EXPR ((double)i1-i2, MINUS_EXPR);"}, {"sha": "13831ad3a2e02df17715917349a2643bed426dea", "filename": "gcc/testsuite/gcc.dg/torture/builtin-minmax-1.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -15,20 +15,13 @@ extern void link_error(int);\n   extern float FUNC##f (float); \\\n   extern double FUNC (double); \\\n   extern long double FUNC##l (long double)\n-#define DECLARE_L(FUNC) \\\n-  extern long FUNC##f (float); \\\n-  extern long FUNC (double); \\\n-  extern long FUNC##l (long double)\n #define DECLARE2(FUNC) \\\n   extern float FUNC##f (float, float); \\\n   extern double FUNC (double, double); \\\n   extern long double FUNC##l (long double, long double)\n \n DECLARE2(fmin);\n DECLARE2(fmax);\n-DECLARE_L(lround);\n-DECLARE_L(lrint);\n-DECLARE(sqrt);\n DECLARE(fabs);\n extern int pure(int) __attribute__ ((__pure__));\n \n@@ -52,20 +45,32 @@ extern int pure(int) __attribute__ ((__pure__));\n     link_error(__LINE__); \\\n   } while (0)\n \n-/* Test that lround(FUNC(int,int)) == lrint(FUNC(int,int)), i.e. both\n-   lround() and lrint() should be folded away.  */\n-#define TEST_NONNEG(FUNC) do { \\\n-  if (lroundf(FUNC##f(i,j)) != lrintf(FUNC##f(i,j))) \\\n+/* Test that FIXFUNC(FUNC(int1,int2)) == (TYPE)FUNC(int1,int2),\n+   i.e. FIXFUNC should be folded away and replaced with a cast.  */\n+#define TEST_FIXFUNC(FUNC,FIXFUNC,TYPE) do { \\\n+  if (FIXFUNC##f(FUNC##f(i,j)) != (TYPE)FUNC##f(i,j)) \\\n     link_error(__LINE__); \\\n-  if (lround(FUNC(i,j)) != lrint(FUNC(i,j))) \\\n+  if (FIXFUNC(FUNC(i,j)) != (TYPE)FUNC(i,j)) \\\n     link_error(__LINE__); \\\n-  if (lroundl(FUNC##l(i,j)) != lrintl(FUNC##l(i,j))) \\\n+  if (FIXFUNC##l(FUNC##l(i,j)) != (TYPE)FUNC##l(i,j)) \\\n     link_error(__LINE__); \\\n   } while (0)\n \n+/* Test that FUNC(int1,int2) has an integer return type.  */\n+#define TEST_INT(FUNC) do { \\\n+  TEST_FIXFUNC(FUNC,__builtin_lround,long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_llround,long long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_lrint,long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_llrint,long long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_lceil,long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_llceil,long long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_lfloor,long); \\\n+  TEST_FIXFUNC(FUNC,__builtin_llfloor,long long); \\\n+  } while (0)\n+\n /* Test that (long)fabs(FUNC(fabs(x),fabs(y))) ==\n    (long)FUNC(fabs(x),fabs(y)).  We cast to (long) so \"!=\" folds.  */\n-#define TEST_INT(FUNC) do { \\\n+#define TEST_NONNEG(FUNC) do { \\\n   if ((long)fabsf(FUNC##f(fabsf(xf),fabsf(yf))) != (long)FUNC##f(fabsf(xf),fabsf(yf))) \\\n     link_error(__LINE__); \\\n   if ((long)fabs(FUNC(fabs(x),fabs(y))) != (long)FUNC(fabs(x),fabs(y))) \\"}, {"sha": "8a3286a59b71022355dbaab686d2837fe374d58d", "filename": "gcc/testsuite/gcc.dg/torture/builtin-nonneg-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -144,8 +144,12 @@ void test(double d1, double d2, float f1, float f2,\n   ARG1TEST1 (floor);\n   ARG1TEST2 (fmod);\n   ARG1TEST2_A2INT (ldexp, int);\n+  ARG1TEST1_RTYPE (__builtin_llceil, long long);\n+  ARG1TEST1_RTYPE (__builtin_llfloor, long long);\n   ARG1TEST1_RTYPE (llrint, long long);\n   ARG1TEST1_RTYPE (llround, long long);\n+  ARG1TEST1_RTYPE (__builtin_lceil, long);\n+  ARG1TEST1_RTYPE (__builtin_lfloor, long);\n   ARG1TEST1_RTYPE (lrint, long);\n   ARG1TEST1_RTYPE (lround, long);\n   /* The modf* functions aren't ever \"const\" or \"pure\" even with"}, {"sha": "816cffc046ccc650363d613b415ab9af7855b895", "filename": "gcc/testsuite/gcc.dg/torture/builtin-rounding-1.c", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-rounding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-rounding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-rounding-1.c?ref=aeabd15d4578ba6e4aaf05a7aa45686d2c28f32e", "patch": "@@ -7,34 +7,12 @@\n \n /* { dg-do link } */\n \n-#define PROTOTYPE(FN) \\\n-  PROTOTYPE_LINK_ERROR(FN) \\\n-  extern double FN (double); \\\n-  extern float FN##f (float); \\\n-  extern long double FN##l (long double);\n-\n-#define PROTOTYPE_RET(FN, RET) \\\n-  PROTOTYPE_LINK_ERROR(FN) \\\n-  extern RET FN (double); \\\n-  extern RET FN##f (float); \\\n-  extern RET FN##l (long double);\n-\n-#define PROTOTYPE_LINK_ERROR(FN) \\\n-  extern void link_error_##FN(void); \\\n-  extern void link_error_##FN##f(void); \\\n-  extern void link_error_##FN##l(void);\n+extern int link_error (int);\n \n #define TEST(FN, VALUE, RESULT) \\\n-  if (FN (VALUE) != RESULT) link_error_##FN(); \\\n-  if (FN##f (VALUE) != RESULT) link_error_##FN##f(); \\\n-  if (FN##l (VALUE) != RESULT) link_error_##FN##l(); \\\n-\n-PROTOTYPE (trunc);\n-PROTOTYPE (floor);\n-PROTOTYPE (ceil);\n-PROTOTYPE (round);\n-PROTOTYPE_RET (lround, long);\n-PROTOTYPE_RET (llround, long long);\n+  if (__builtin_##FN (VALUE) != RESULT) link_error (__LINE__); \\\n+  if (__builtin_##FN##f (VALUE) != RESULT) link_error (__LINE__); \\\n+  if (__builtin_##FN##l (VALUE) != RESULT) link_error (__LINE__); \\\n \n int\n main (void)\n@@ -45,62 +23,98 @@ main (void)\n   TEST(round,   0, 0);\n   TEST(lround,  0, 0);\n   TEST(llround, 0, 0);\n+  TEST(lfloor,  0, 0);\n+  TEST(llfloor, 0, 0);\n+  TEST(lceil,  0, 0);\n+  TEST(llceil, 0, 0);\n   \n   TEST(trunc,   6, 6);\n   TEST(floor,   6, 6);\n   TEST(ceil,    6, 6);\n   TEST(round,   6, 6);\n   TEST(lround,  6, 6);\n   TEST(llround, 6, 6);\n+  TEST(lfloor,  6, 6);\n+  TEST(llfloor, 6, 6);\n+  TEST(lceil,  6, 6);\n+  TEST(llceil, 6, 6);\n   \n   TEST(trunc,   -8, -8);\n   TEST(floor,   -8, -8);\n   TEST(ceil,    -8, -8);\n   TEST(round,   -8, -8);\n   TEST(lround,  -8, -8);\n   TEST(llround, -8, -8);\n+  TEST(lfloor,  -8, -8);\n+  TEST(llfloor, -8, -8);\n+  TEST(lceil,  -8, -8);\n+  TEST(llceil, -8, -8);\n   \n   TEST(trunc,   3.2, 3);\n   TEST(floor,   3.2, 3);\n   TEST(ceil,    3.2, 4);\n   TEST(round,   3.2, 3);\n   TEST(lround,  3.2, 3);\n   TEST(llround, 3.2, 3);\n+  TEST(lfloor,  3.2, 3);\n+  TEST(llfloor, 3.2, 3);\n+  TEST(lceil,  3.2, 4);\n+  TEST(llceil, 3.2, 4);\n \n   TEST(trunc,   -2.8, -2);\n   TEST(floor,   -2.8, -3);\n   TEST(ceil,    -2.8, -2);\n   TEST(round,   -2.8, -3);\n   TEST(lround,  -2.8, -3);\n   TEST(llround, -2.8, -3);\n+  TEST(lfloor,  -2.8, -3);\n+  TEST(llfloor, -2.8, -3);\n+  TEST(lceil,  -2.8, -2);\n+  TEST(llceil, -2.8, -2);\n \n   TEST(trunc,   0.01, 0);\n   TEST(floor,   0.01, 0);\n   TEST(ceil,    0.01, 1);\n   TEST(round,   0.01, 0);\n   TEST(lround,  0.01, 0);\n   TEST(llround, 0.01, 0);\n+  TEST(lfloor,  0.01, 0);\n+  TEST(llfloor, 0.01, 0);\n+  TEST(lceil,  0.01, 1);\n+  TEST(llceil, 0.01, 1);\n \n   TEST(trunc,   -0.7, 0);\n   TEST(floor,   -0.7, -1);\n   TEST(ceil,    -0.7, 0);\n   TEST(round,   -0.7, -1);\n   TEST(lround,  -0.7, -1);\n   TEST(llround, -0.7, -1);\n+  TEST(lfloor,  -0.7, -1);\n+  TEST(llfloor, -0.7, -1);\n+  TEST(lceil,  -0.7, 0);\n+  TEST(llceil, -0.7, 0);\n \n   TEST(trunc,   2.5, 2);\n   TEST(floor,   2.5, 2);\n   TEST(ceil,    2.5, 3);\n   TEST(round,   2.5, 3);\n   TEST(lround,  2.5, 3);\n   TEST(llround, 2.5, 3);\n+  TEST(lfloor,  2.5, 2);\n+  TEST(llfloor, 2.5, 2);\n+  TEST(lceil,  2.5, 3);\n+  TEST(llceil, 2.5, 3);\n \n   TEST(trunc,   -1.5, -1);\n   TEST(floor,   -1.5, -2);\n   TEST(ceil,    -1.5, -1);\n   TEST(round,   -1.5, -2);\n   TEST(lround,  -1.5, -2);\n   TEST(llround, -1.5, -2);\n+  TEST(lfloor,  -1.5, -2);\n+  TEST(llfloor, -1.5, -2);\n+  TEST(lceil,  -1.5, -1);\n+  TEST(llceil, -1.5, -1);\n \n   return 0;\n }"}]}