{"sha": "8f996567e84015714bcf322d11a46580611e3377", "node_id": "C_kwDOANBUbNoAKDhmOTk2NTY3ZTg0MDE1NzE0YmNmMzIyZDExYTQ2NTgwNjExZTMzNzc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-20T12:57:21Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-20T14:11:36Z"}, "message": "hir: Add ConstGenericParam and lower to them properly", "tree": {"sha": "75d3cf6b9c387a2a9aab9ee40895fb95b4570258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75d3cf6b9c387a2a9aab9ee40895fb95b4570258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f996567e84015714bcf322d11a46580611e3377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f996567e84015714bcf322d11a46580611e3377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f996567e84015714bcf322d11a46580611e3377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f996567e84015714bcf322d11a46580611e3377/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f11672d760513256997f325da678016d13f677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f11672d760513256997f325da678016d13f677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f11672d760513256997f325da678016d13f677"}], "stats": {"total": 161, "additions": 131, "deletions": 30}, "files": [{"sha": "76324dc73040157effd7efd3033b2fcf4e882056", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -1381,6 +1381,9 @@ class ConstGenericParam : public GenericParam\n   }\n \n   bool has_type () { return type != nullptr; }\n+  bool has_default_value () { return default_value != nullptr; }\n+\n+  const Identifier &get_name () const { return name; }\n \n   std::unique_ptr<AST::Type> &get_type ()\n   {"}, {"sha": "dc20be7cd112eb32bf9ba06ce462722cec83cec0", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -375,13 +375,17 @@ class ASTLowerGenericParam : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    // FIXME: This creates a BOGUS HIR::Lifetime instance because we do not have\n-    // an `HIR::ConstGenericParam` type yet. This needs to be removed, but for\n-    // now it avoids bogus ICEs\n-    HIR::Lifetime lt (mapping, AST::Lifetime::LifetimeType::WILDCARD, \"fixme\",\n-\t\t      param.get_locus ());\n-    translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n-\t\t\t\t\t std::vector<Lifetime> ());\n+    auto type = ASTLoweringType::translate (param.get_type ().get ());\n+    auto default_expr\n+      = param.has_default_value ()\n+\t  ? ASTLoweringExpr::translate (param.get_default_value ().get ())\n+\t  : nullptr;\n+\n+    translated\n+      = new HIR::ConstGenericParam (param.get_name (),\n+\t\t\t\t    std::unique_ptr<Type> (type),\n+\t\t\t\t    std::unique_ptr<Expr> (default_expr),\n+\t\t\t\t    mapping, param.get_locus ());\n   }\n \n   void visit (AST::TypeParam &param) override"}, {"sha": "8000e5c5894a0a0dcfc7804dd9dd51230a7b69b3", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -5285,5 +5285,20 @@ StaticItem::accept_vis (HIRVisItemVisitor &vis)\n   vis.visit (*this);\n }\n \n+std::string\n+ConstGenericParam::as_string () const\n+{\n+  auto result = \"ConstGenericParam: \" + name + \" : \" + type->as_string ();\n+\n+  if (default_expression)\n+    result += \" = \" + default_expression->as_string ();\n+\n+  return result;\n+}\n+\n+void\n+ConstGenericParam::accept_vis (HIRFullVisitor &vis)\n+{}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "2267a1fbf4d422f56505e443799afd322614e588", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -615,13 +615,11 @@ class GenericParam\n public:\n   virtual ~GenericParam () {}\n \n-  enum GenericKind\n+  enum class GenericKind\n   {\n     TYPE,\n     LIFETIME,\n-\n-    // CONST generic parameter not yet handled\n-    // CONST,\n+    CONST,\n   };\n \n   // Unique pointer custom clone function\n@@ -648,7 +646,8 @@ class GenericParam\n \n   enum GenericKind kind;\n \n-  GenericParam (Analysis::NodeMapping mapping, enum GenericKind kind = TYPE)\n+  GenericParam (Analysis::NodeMapping mapping,\n+\t\tenum GenericKind kind = GenericKind::TYPE)\n     : mappings (mapping), kind (kind)\n   {}\n };\n@@ -732,6 +731,52 @@ class LifetimeParam : public GenericParam\n   }\n };\n \n+class ConstGenericParam : public GenericParam\n+{\n+public:\n+  ConstGenericParam (std::string name, std::unique_ptr<Type> type,\n+\t\t     std::unique_ptr<Expr> default_expression,\n+\t\t     Analysis::NodeMapping mapping, Location locus)\n+    : GenericParam (mapping, GenericKind::CONST), name (std::move (name)),\n+      type (std::move (type)),\n+      default_expression (std::move (default_expression)), locus (locus)\n+  {}\n+\n+  ConstGenericParam (const ConstGenericParam &other) : GenericParam (other)\n+  {\n+    name = other.name;\n+    locus = other.locus;\n+\n+    if (other.type)\n+      type = other.type->clone_type ();\n+    if (other.default_expression)\n+      default_expression = other.default_expression->clone_expr ();\n+  }\n+\n+  std::string as_string () const override final;\n+\n+  void accept_vis (HIRFullVisitor &vis) override final;\n+\n+  Location get_locus () const override final { return locus; };\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  ConstGenericParam *clone_generic_param_impl () const override\n+  {\n+    return new ConstGenericParam (*this);\n+  }\n+\n+private:\n+  std::string name;\n+  std::unique_ptr<Type> type;\n+\n+  /* Optional - can be a null pointer if there is no default expression */\n+  std::unique_ptr<Expr> default_expression;\n+\n+  Location locus;\n+};\n+\n // Item used in trait declarations - abstract base class\n class TraitItem : public Node\n {"}, {"sha": "b322e29bfc31ea9686844860ebe32c0151aaa1c6", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -48,7 +48,7 @@ ReachabilityVisitor::visit_generic_predicates (\n \n   for (const auto &generic : generics)\n     {\n-      if (generic->get_kind () == HIR::GenericParam::TYPE)\n+      if (generic->get_kind () == HIR::GenericParam::GenericKind::TYPE)\n \t{\n \t  TyTy::BaseType *generic_ty = nullptr;\n \t  auto ok = ty_ctx.lookup_type (generic->get_mappings ().get_hirid (),"}, {"sha": "c0087636aeac7b8eca2fcbacf535d28af03a8be4", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -141,7 +141,9 @@ TraitResolver::resolve_trait (HIR::Trait *trait_reference)\n       switch (generic_param.get ()->get_kind ())\n \t{\n \tcase HIR::GenericParam::GenericKind::LIFETIME:\n-\t  // Skipping Lifetime completely until better handling.\n+\tcase HIR::GenericParam::GenericKind::CONST:\n+\t  // FIXME: Skipping Lifetime and Const completely until better\n+\t  // handling.\n \t  break;\n \n \t  case HIR::GenericParam::GenericKind::TYPE: {\n@@ -383,7 +385,9 @@ AssociatedImplTrait::setup_associated_types (\n       switch (generic_param.get ()->get_kind ())\n \t{\n \tcase HIR::GenericParam::GenericKind::LIFETIME:\n-\t  // Skipping Lifetime completely until better handling.\n+\tcase HIR::GenericParam::GenericKind::CONST:\n+\t  // FIXME: Skipping Lifetime and Const completely until better\n+\t  // handling.\n \t  break;\n \n \t  case HIR::GenericParam::GenericKind::TYPE: {"}, {"sha": "0bca9b467daca948a4bc124f2b1b69ba0d4158bb", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -57,7 +57,9 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -190,7 +192,9 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {"}, {"sha": "84a33f85c62dc024aaa8b5bdca62b06d75b1d992", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -51,7 +51,9 @@ class TypeCheckItem : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {"}, {"sha": "67eddb55c9518bd3c5d970bfced6bf0ab24e548f", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -139,7 +139,9 @@ class TypeCheckStmt : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -215,7 +217,9 @@ class TypeCheckStmt : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -273,7 +277,9 @@ class TypeCheckStmt : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -347,7 +353,9 @@ class TypeCheckStmt : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -415,7 +423,9 @@ class TypeCheckStmt : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {"}, {"sha": "af63c5a09318e8fe19045c5ba604f7b83f4d04c9", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -64,7 +64,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -150,7 +152,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -228,7 +232,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -286,7 +292,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -374,7 +382,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {\n@@ -457,7 +467,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t    switch (generic_param.get ()->get_kind ())\n \t      {\n \t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n+\t      case HIR::GenericParam::GenericKind::CONST:\n+\t\t// FIXME: Skipping Lifetime and Const completely until better\n+\t\t// handling.\n \t\tbreak;\n \n \t\tcase HIR::GenericParam::GenericKind::TYPE: {"}, {"sha": "7cfb952152fe072a41fa30dcd18743781f2d8962", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f996567e84015714bcf322d11a46580611e3377/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=8f996567e84015714bcf322d11a46580611e3377", "patch": "@@ -203,7 +203,9 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n \t  switch (generic_param.get ()->get_kind ())\n \t    {\n \t    case HIR::GenericParam::GenericKind::LIFETIME:\n-\t      // Skipping Lifetime completely until better handling.\n+\t    case HIR::GenericParam::GenericKind::CONST:\n+\t      // FIXME: Skipping Lifetime and Const completely until better\n+\t      // handling.\n \t      break;\n \n \t      case HIR::GenericParam::GenericKind::TYPE: {"}]}