{"sha": "d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2YWUzNmE4YjlhNzNmMmJhMjIzNjhlOGUyZmZhMWJiZGNjZjVlYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-01-09T20:39:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-01-09T20:39:27Z"}, "message": "libstdc++/3150: revert 2001-11-30 commit.\n\n2002-01-09  Paolo Carlini <pcarlini@unitus.it>\n\n\tlibstdc++/3150: revert 2001-11-30 commit. DR266 only means\n\tthat the destructors should be removed from the descriptions\n\tin the standard: writing them explicitly allows the vtable\n\theuristic to work. For additional information see:\n\thttp://gcc.gnu.org/ml/libstdc++/2002-01/msg00090.html\n\thttp://gcc.gnu.org/ml/libstdc++/2002-01/msg00110.html\n\thttp://gcc.gnu.org/ml/libstdc++/2002-01/msg00155.html\n\t* libsupc++/exception (bad_exception::~bad_exception()):\n\tReintroduce declaration.\n\t* libsupc++/new (bad_alloc::~bad_alloc()): Same.\n\t* libsupc++/typeinfo (bad_cast::~bad_cast()): Same.\n\t(bad_typeid::~bad_typeid()): Same.\n\t* libsupc++/eh_exception.cc (bad_exception::~bad_exception()):\n\tReintroduce definition.\n\t* libsupc++/new_handler.cc (bad_alloc::~bad_alloc()): Same.\n\t* libsupc++/tinfo.cc (bad_cast::~bad_cast()): Same.\n\t(bad_typeid::~bad_typeid()): Same.\n\nFrom-SVN: r48687", "tree": {"sha": "65ed177f4327068dadde31bbc8ee89fbb508fca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65ed177f4327068dadde31bbc8ee89fbb508fca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/comments", "author": null, "committer": null, "parents": [{"sha": "30c1fa7651633029f1804cc37a9e4e824736b577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c1fa7651633029f1804cc37a9e4e824736b577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c1fa7651633029f1804cc37a9e4e824736b577"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "da64dcb1c5ba1270c47c627401e6c3fde14fd995", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,3 +1,23 @@\n+2002-01-09  Paolo Carlini <pcarlini@unitus.it>\n+\n+\tlibstdc++/3150: revert 2001-11-30 commit. DR266 only means\n+\tthat the destructors should be removed from the descriptions\n+\tin the standard: writing them explicitly allows the vtable\n+\theuristic to work. For additional information see:\n+\thttp://gcc.gnu.org/ml/libstdc++/2002-01/msg00090.html\n+\thttp://gcc.gnu.org/ml/libstdc++/2002-01/msg00110.html\n+\thttp://gcc.gnu.org/ml/libstdc++/2002-01/msg00155.html\n+\t* libsupc++/exception (bad_exception::~bad_exception()):\n+\tReintroduce declaration.\n+\t* libsupc++/new (bad_alloc::~bad_alloc()): Same.\n+\t* libsupc++/typeinfo (bad_cast::~bad_cast()): Same.\n+\t(bad_typeid::~bad_typeid()): Same.\n+\t* libsupc++/eh_exception.cc (bad_exception::~bad_exception()):\n+\tReintroduce definition.\n+\t* libsupc++/new_handler.cc (bad_alloc::~bad_alloc()): Same.\n+\t* libsupc++/tinfo.cc (bad_cast::~bad_cast()): Same.\n+\t(bad_typeid::~bad_typeid()): Same.\n+\n 2002-01-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am (c_base_srcdir): Remove duplicate '/'."}, {"sha": "a581be70b9f5836e0a5cf9d089c9debdc1c79651", "filename": "libstdc++-v3/libsupc++/eh_exception.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- std::exception implementation.\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 \n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002 \n // Free Software Foundation\n //\n // This file is part of GNU CC.\n@@ -35,6 +35,8 @@\n \n std::exception::~exception() throw() { }\n \n+std::bad_exception::~bad_exception() throw() { }\n+\n const char* \n std::exception::what() const throw()\n {"}, {"sha": "aea61ffa412e73d5a1a965cab024024b3c37c31b", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,6 +1,7 @@\n // Exception Handling support header for -*- C++ -*-\n \n-// Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001 Free Software Foundation\n+// Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002\n+// Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -62,6 +63,7 @@ namespace std\n   {\n   public:\n     bad_exception() throw() { }\n+    virtual ~bad_exception() throw();\n   };\n \n   /// If you write a replacement %terminate handler, it must be of this type."}, {"sha": "358aa1d12c12ff84ee6d8bbcb1c0bede0ce51858", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,6 +1,7 @@\n // The -*- C++ -*- dynamic memory management header.\n \n-// Copyright (C) 1994, 1996, 1997, 1998, 2000, 2001 Free Software Foundation\n+// Copyright (C) 1994, 1996, 1997, 1998, 2000, 2001, 2002\n+// Free Software Foundation\n \n // This file is part of GNU CC.\n //\n@@ -50,6 +51,7 @@ namespace std\n   {\n   public:\n     bad_alloc() throw() { }\n+    virtual ~bad_alloc() throw();\n   };\n \n   struct nothrow_t { };"}, {"sha": "ed34bc8865d40aee9fee21623874368bff936226", "filename": "libstdc++-v3/libsupc++/new_handler.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,6 +1,7 @@\n // Implementation file for the -*- C++ -*- dynamic memory management header.\n \n-// Copyright (C) 1996, 1997, 1998, 2000 Free Software Foundation\n+// Copyright (C) 1996, 1997, 1998, 2000, 2001, 2002\n+// Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -42,3 +43,5 @@ std::set_new_handler (new_handler handler)\n   __new_handler = handler;\n   return prev_handler;\n }\n+\n+std::bad_alloc::~bad_alloc() throw() { }"}, {"sha": "1eecdeb41a15feab2437883c2e8df5703e6026ad", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,5 +1,6 @@\n // Methods for type_info for -*- C++ -*- Run Time Type Identification.\n-// Copyright (C) 1994, 1996, 1998, 1999, 2000, 2001 Free Software Foundation\n+// Copyright (C) 1994, 1996, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -39,6 +40,9 @@ std::type_info::\n ~type_info ()\n { }\n \n+std::bad_cast::~bad_cast() throw() { }\n+std::bad_typeid::~bad_typeid() throw() { }\n+\n #if !__GXX_MERGED_TYPEINFO_NAMES\n \n // We can't rely on common symbols being shared between shared objects."}, {"sha": "336fcc058d980979fd31cc6e8396d70ca70326b1", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=d66ae36a8b9a73f2ba22368e8e2ffa1bbdccf5ec", "patch": "@@ -1,5 +1,6 @@\n // RTTI support for -*- C++ -*-\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001 Free Software Foundation\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002\n+// Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -129,13 +130,15 @@ namespace std\n   {\n   public:\n     bad_cast() throw() { }\n+    virtual ~bad_cast() throw();\n   };\n   \n   /** If you use a NULL pointer in a @c typeid expression, this is thrown.  */\n   class bad_typeid : public exception \n   {\n   public:\n     bad_typeid () throw() { }\n+    virtual ~bad_typeid() throw();\n   };\n } // namespace std\n "}]}