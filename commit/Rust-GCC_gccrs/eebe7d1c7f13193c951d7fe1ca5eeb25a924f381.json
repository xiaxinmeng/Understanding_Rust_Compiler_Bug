{"sha": "eebe7d1c7f13193c951d7fe1ca5eeb25a924f381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViZTdkMWM3ZjEzMTkzYzk1MWQ3ZmUxY2E1ZWViMjVhOTI0ZjM4MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-04-25T19:20:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-25T19:20:45Z"}, "message": "predicates.md (const0_operand): Do not match const_wide_int code.\n\n\t* config/i386/predicates.md (const0_operand): Do not match\n\tconst_wide_int code.\n\t(const1_operand): Ditto.\n\nFrom-SVN: r235417", "tree": {"sha": "52907fefa471c3634540d64affdc5706e5c9e1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52907fefa471c3634540d64affdc5706e5c9e1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7d56fb84086a717160b181b61eebd544e806ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d56fb84086a717160b181b61eebd544e806ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d56fb84086a717160b181b61eebd544e806ffc"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "37389d6f57460bd4bba8415333d145c8f695bd98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eebe7d1c7f13193c951d7fe1ca5eeb25a924f381", "patch": "@@ -1,3 +1,9 @@\n+2016-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (const0_operand): Do not match\n+\tconst_wide_int code.\n+\t(const1_operand): Ditto.\n+\n 2016-04-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movoi_internal_avx): Set mode attribute to XI"}, {"sha": "1980a620c870c39bde297bc7f9ab3cf5f3c8184d", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebe7d1c7f13193c951d7fe1ca5eeb25a924f381/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=eebe7d1c7f13193c951d7fe1ca5eeb25a924f381", "patch": "@@ -659,7 +659,7 @@\n \n ;; Match exactly zero.\n (define_predicate \"const0_operand\"\n-  (match_code \"const_int,const_wide_int,const_double,const_vector\")\n+  (match_code \"const_int,const_double,const_vector\")\n {\n   if (mode == VOIDmode)\n     mode = GET_MODE (op);\n@@ -668,7 +668,7 @@\n \n ;; Match one or a vector with all elements equal to one.\n (define_predicate \"const1_operand\"\n-  (match_code \"const_int,const_wide_int,const_double,const_vector\")\n+  (match_code \"const_int,const_double,const_vector\")\n {\n   if (mode == VOIDmode)\n     mode = GET_MODE (op);"}]}