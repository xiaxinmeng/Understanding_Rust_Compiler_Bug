{"sha": "8b9fcce72f7f93b11129a298c54c9c178e510cf0", "node_id": "C_kwDOANBUbNoAKDhiOWZjY2U3MmY3ZjkzYjExMTI5YTI5OGM1NGM5YzE3OGU1MTBjZjA", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:45:45Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:26Z"}, "message": "arm: improve tests for vqdmlsdhxq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c: Likewise.", "tree": {"sha": "e89f0d6d58a1ec0aa704fe25f9dde307a03a0257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89f0d6d58a1ec0aa704fe25f9dde307a03a0257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9fcce72f7f93b11129a298c54c9c178e510cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9fcce72f7f93b11129a298c54c9c178e510cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9fcce72f7f93b11129a298c54c9c178e510cf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9fcce72f7f93b11129a298c54c9c178e510cf0/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de09beb71a9bdc24c969ab648c4c5570204ab87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de09beb71a9bdc24c969ab648c4c5570204ab87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de09beb71a9bdc24c969ab648c4c5570204ab87"}], "stats": {"total": 174, "additions": 156, "deletions": 18}, "files": [{"sha": "1742d47291c263af9aaf05a1814b5474c232140e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s16.c?ref=8b9fcce72f7f93b11129a298c54c9c178e510cf0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlsdhxt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vqdmlsdhxq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlsdhxt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlsdhxt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vqdmlsdhxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlsdhxt.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1c1b73a2251943d5e37431b461000e52e8a531d9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s32.c?ref=8b9fcce72f7f93b11129a298c54c9c178e510cf0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlsdhxt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vqdmlsdhxq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlsdhxt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlsdhxt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vqdmlsdhxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlsdhxt.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0a980a081a1d7e6311fca6a50cd4a63d2dc29cb7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s8.c?ref=8b9fcce72f7f93b11129a298c54c9c178e510cf0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlsdhxt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vqdmlsdhxq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlsdhxt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqdmlsdhxt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vqdmlsdhxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqdmlsdhxt.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "713ce9732d2be1912ccf66dafa729f908b3fe751", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s16.c?ref=8b9fcce72f7f93b11129a298c54c9c178e510cf0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqdmlsdhx.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n {\n   return vqdmlsdhxq_s16 (inactive, a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlsdhx.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlsdhx.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n {\n   return vqdmlsdhxq (inactive, a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlsdhx.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "02f0a3cd6b4510363c0e7761b4c8eda8b8c0f8ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s32.c?ref=8b9fcce72f7f93b11129a298c54c9c178e510cf0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqdmlsdhx.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n {\n   return vqdmlsdhxq_s32 (inactive, a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlsdhx.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlsdhx.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n {\n   return vqdmlsdhxq (inactive, a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlsdhx.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c179287913869c0b958170ca96fa8d6c7c814ebb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9fcce72f7f93b11129a298c54c9c178e510cf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s8.c?ref=8b9fcce72f7f93b11129a298c54c9c178e510cf0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqdmlsdhx.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n {\n   return vqdmlsdhxq_s8 (inactive, a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlsdhx.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqdmlsdhx.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n {\n   return vqdmlsdhxq (inactive, a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqdmlsdhx.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}