{"sha": "f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2MTI5ZWFkNDhiZTllZDc3YWU4NWM3YjkwOGM2MGZjMWVlZmY3YQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2012-01-20T09:22:14Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-01-20T09:22:14Z"}, "message": "re PR target/50313 (ARM: PIC code references a non-existant label)\n\n\nFix PR target/50313\n\nFrom-SVN: r183328", "tree": {"sha": "7fdb1f9be10548b64d5272e6ed52f3b76955c9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fdb1f9be10548b64d5272e6ed52f3b76955c9d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/comments", "author": null, "committer": null, "parents": [{"sha": "583713e3265924f3262ec66872bf7443bb980789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583713e3265924f3262ec66872bf7443bb980789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583713e3265924f3262ec66872bf7443bb980789"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "4e35838a22b53d6ed0be16581d6deb3fe9402db7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "patch": "@@ -1,3 +1,15 @@\n+2012-01-20  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR target/50313\n+\t* config/arm/arm.c (arm_load_pic_register): Use\n+\tgen_pic_load_addr_unified. Delete calls to gen_pic_load_addr_32bit\n+\t, gen_pic_add_dot_plus_eight and gen_pic_add_dot_plus_four.\n+\t(arm_pic_static_addr): Likewise.\n+\t(arm_rtx_costs_1): Adjust cost for UNSPEC_PIC_UNIFIED.\n+\t(arm_note_pic_base): Handle UNSPEC_PIC_UNIFIED.\n+\t* config/arm/arm.md (UNSPEC_PIC_UNIFIED): Define.\n+\t(pic_load_addr_unified): New.\n+\n 2012-01-20  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR target/51106"}, {"sha": "64ee6aea2978d7d820033583fb54bc92c5f641ae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "patch": "@@ -5578,11 +5578,7 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n \n       if (TARGET_32BIT)\n \t{\n-\t  emit_insn (gen_pic_load_addr_32bit (pic_reg, pic_rtx));\n-\t  if (TARGET_ARM)\n-\t    emit_insn (gen_pic_add_dot_plus_eight (pic_reg, pic_reg, labelno));\n-\t  else\n-\t    emit_insn (gen_pic_add_dot_plus_four (pic_reg, pic_reg, labelno));\n+\t  emit_insn (gen_pic_load_addr_unified (pic_reg, pic_rtx, labelno));\n \t}\n       else /* TARGET_THUMB1 */\n \t{\n@@ -5595,10 +5591,10 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n \t\t\t\t     thumb_find_work_register (saved_regs));\n \t      emit_insn (gen_pic_load_addr_thumb1 (pic_tmp, pic_rtx));\n \t      emit_insn (gen_movsi (pic_offset_table_rtx, pic_tmp));\n+\t      emit_insn (gen_pic_add_dot_plus_four (pic_reg, pic_reg, labelno));\n \t    }\n \t  else\n-\t    emit_insn (gen_pic_load_addr_thumb1 (pic_reg, pic_rtx));\n-\t  emit_insn (gen_pic_add_dot_plus_four (pic_reg, pic_reg, labelno));\n+\t    emit_insn (gen_pic_load_addr_unified (pic_reg, pic_rtx, labelno));\n \t}\n     }\n \n@@ -5628,20 +5624,7 @@ arm_pic_static_addr (rtx orig, rtx reg)\n                                UNSPEC_SYMBOL_OFFSET);\n   offset_rtx = gen_rtx_CONST (Pmode, offset_rtx);\n \n-  if (TARGET_32BIT)\n-    {\n-      emit_insn (gen_pic_load_addr_32bit (reg, offset_rtx));\n-      if (TARGET_ARM)\n-        insn = emit_insn (gen_pic_add_dot_plus_eight (reg, reg, labelno));\n-      else\n-        insn = emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n-    }\n-  else /* TARGET_THUMB1 */\n-    {\n-      emit_insn (gen_pic_load_addr_thumb1 (reg, offset_rtx));\n-      insn = emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n-    }\n-\n+  insn = emit_insn (gen_pic_load_addr_unified (reg, offset_rtx, labelno));\n   return insn;\n }\n \n@@ -5684,7 +5667,7 @@ static bool\n will_be_in_index_register (const_rtx x)\n {\n   /* arm.md: calculate_pic_address will split this into a register.  */\n-  return GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_PIC_SYM;\n+  return GET_CODE (x) == UNSPEC && (XINT (x, 1) == UNSPEC_PIC_SYM);\n }\n \n /* Return nonzero if X is a valid ARM state address operand.  */\n@@ -7648,6 +7631,15 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \n     case SET:\n       return false;\n+      \n+    case UNSPEC:\n+      /* We cost this as high as our memory costs to allow this to\n+\t be hoisted from loops.  */\n+      if (XINT (x, 1) == UNSPEC_PIC_UNIFIED)\n+\t{\n+\t  *total = COSTS_N_INSNS (2 + ARM_NUM_REGS (mode));\n+\t}\n+      return true;\n \n     default:\n       *total = COSTS_N_INSNS (4);\n@@ -10008,7 +10000,8 @@ static int\n arm_note_pic_base (rtx *x, void *date ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (*x) == UNSPEC\n-      && XINT (*x, 1) == UNSPEC_PIC_BASE)\n+      && (XINT (*x, 1) == UNSPEC_PIC_BASE\n+\t  || XINT (*x, 1) == UNSPEC_PIC_UNIFIED))\n     return 1;\n   return 0;\n }"}, {"sha": "97a83a42f12f12efe710093ee0466bd0b190260c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06129ead48be9ed77ae85c7b908c60fc1eeff7a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f06129ead48be9ed77ae85c7b908c60fc1eeff7a", "patch": "@@ -116,6 +116,7 @@\n \t\t\t; unaligned locations, on architectures which support\n \t\t\t; that.\n   UNSPEC_UNALIGNED_STORE ; Same for str/strh.\n+  UNSPEC_PIC_UNIFIED    ; Create a common pic addressing form.\n ])\n \n ;; UNSPEC_VOLATILE Usage:\n@@ -5613,6 +5614,30 @@\n   \"operands[3] = can_create_pseudo_p () ? gen_reg_rtx (SImode) : operands[0];\"\n )\n \n+;; operand1 is the memory address to go into \n+;; pic_load_addr_32bit.\n+;; operand2 is the PIC label to be emitted \n+;; from pic_add_dot_plus_eight.\n+;; We do this to allow hoisting of the entire insn.\n+(define_insn_and_split \"pic_load_addr_unified\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,l\")\n+\t(unspec:SI [(match_operand:SI 1 \"\" \"mX,mX,mX\") \n+\t\t    (match_operand:SI 2 \"\" \"\")] \n+\t\t    UNSPEC_PIC_UNIFIED))]\n+ \"flag_pic\"\n+ \"#\"\n+ \"&& reload_completed\"\n+ [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_PIC_SYM))\n+  (set (match_dup 0) (unspec:SI [(match_dup 0) (match_dup 3)\n+       \t\t     \t\t (match_dup 2)] UNSPEC_PIC_BASE))]\n+ \"operands[3] = TARGET_THUMB ? GEN_INT (4) : GEN_INT (8);\"\n+ [(set_attr \"type\" \"load1,load1,load1\")\n+  (set_attr \"pool_range\" \"4096,4096,1024\")\n+  (set_attr \"neg_pool_range\" \"4084,0,0\")\n+  (set_attr \"arch\"  \"a,t2,t1\")    \n+  (set_attr \"length\" \"8,6,4\")]\n+)\n+\n ;; The rather odd constraints on the following are to force reload to leave\n ;; the insn alone, and to force the minipool generation pass to then move\n ;; the GOT symbol to memory."}]}