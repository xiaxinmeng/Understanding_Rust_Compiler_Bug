{"sha": "a71dbc63406e497eb2c1ce395bc90c8facfde89b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcxZGJjNjM0MDZlNDk3ZWIyYzFjZTM5NWJjOTBjOGZhY2ZkZTg5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-07T19:07:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-07T19:07:44Z"}, "message": "re PR c/79834 (c/c-parser.c: make code more i18n-friendly)\n\n\tPR c/79834\nc/\n\t* c-parser.c (c_parser_pragma): Use error_at instead of c_parser_error\n\tfor \"may only be used in compound statements\" diagnostics, change it\n\tsuch that the same translatable string is used for all pragmas.  For\n\tPRAGMA_OACC_WAIT use \"acc wait\" rather than \"acc enter data\" in the\n\tdiagnostics.\n\t(c_parser_omp_cancellation_point, c_parser_omp_target_update,\n\tc_parser_omp_target_enter_data, c_parser_omp_target_exit_data): Change\n\t\"may only be used in compound statements\" diagnostics, such that the\n\tsame translatable string is used for all pragmas.\ncp/\n\t* parser.c (cp_parser_omp_cancellation_point,\n\tcp_parser_omp_target_enter_data, cp_parser_omp_target_exit_data,\n\tcp_parser_omp_target_update): Change \"may only be used in compound\n\tstatements\" diagnostics, such that the same translatable string is\n\tused for all pragmas.\n\t(cp_parser_pragma): Likewise.  Use error_at instead of\n\tcp_parser_error for that diagnostics.\ntestsuite/\n\t* c-c++-common/goacc/pragma_context.c (f2): Adjust expected\n\tdiagnostics.\n\nFrom-SVN: r245959", "tree": {"sha": "d23939dc7336bec25e04515d44781445d6f46721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d23939dc7336bec25e04515d44781445d6f46721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a71dbc63406e497eb2c1ce395bc90c8facfde89b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71dbc63406e497eb2c1ce395bc90c8facfde89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71dbc63406e497eb2c1ce395bc90c8facfde89b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71dbc63406e497eb2c1ce395bc90c8facfde89b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8a90142db624db1f1db43de334e98d02a4dcfd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a90142db624db1f1db43de334e98d02a4dcfd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a90142db624db1f1db43de334e98d02a4dcfd2"}], "stats": {"total": 168, "additions": 96, "deletions": 72}, "files": [{"sha": "588fe73f66037d72a6508028739a94b68a612d1b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a71dbc63406e497eb2c1ce395bc90c8facfde89b", "patch": "@@ -1,3 +1,16 @@\n+2017-03-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/79834\n+\t* c-parser.c (c_parser_pragma): Use error_at instead of c_parser_error\n+\tfor \"may only be used in compound statements\" diagnostics, change it\n+\tsuch that the same translatable string is used for all pragmas.  For\n+\tPRAGMA_OACC_WAIT use \"acc wait\" rather than \"acc enter data\" in the\n+\tdiagnostics.\n+\t(c_parser_omp_cancellation_point, c_parser_omp_target_update,\n+\tc_parser_omp_target_enter_data, c_parser_omp_target_exit_data): Change\n+\t\"may only be used in compound statements\" diagnostics, such that the\n+\tsame translatable string is used for all pragmas.\n+\n 2017-03-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/79847"}, {"sha": "8330e65fc94bcf43864ad4548f90e40e2393efad", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a71dbc63406e497eb2c1ce395bc90c8facfde89b", "patch": "@@ -10157,6 +10157,7 @@ static bool\n c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n {\n   unsigned int id;\n+  const char *construct = NULL;\n \n   id = c_parser_peek_token (parser)->pragma_kind;\n   gcc_assert (id != PRAGMA_NONE);\n@@ -10170,9 +10171,16 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_ENTER_DATA:\n       if (context != pragma_compound)\n \t{\n+\t  construct = \"acc enter data\";\n+\tin_compound:\n \t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma acc enter data%> may only be \"\n-\t\t\t    \"used in compound statements\");\n+\t    {\n+\t      error_at (c_parser_peek_token (parser)->location,\n+\t\t\t\"%<#pragma %s%> may only be used in compound \"\n+\t\t\t\"statements\", construct);\n+\t      c_parser_skip_until_found (parser, CPP_PRAGMA_EOL, NULL);\n+\t      return false;\n+\t    }\n \t  goto bad_stmt;\n \t}\n       c_parser_oacc_enter_exit_data (parser, true);\n@@ -10181,10 +10189,8 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_EXIT_DATA:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma acc exit data%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"acc exit data\";\n+\t  goto in_compound;\n \t}\n       c_parser_oacc_enter_exit_data (parser, false);\n       return false;\n@@ -10203,65 +10209,53 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_UPDATE:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma acc update%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"acc update\";\n+\t  goto in_compound;\n \t}\n       c_parser_oacc_update (parser);\n       return false;\n \n     case PRAGMA_OMP_BARRIER:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma omp barrier%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"omp barrier\";\n+\t  goto in_compound;\n \t}\n       c_parser_omp_barrier (parser);\n       return false;\n \n     case PRAGMA_OMP_FLUSH:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma omp flush%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"omp flush\";\n+\t  goto in_compound;\n \t}\n       c_parser_omp_flush (parser);\n       return false;\n \n     case PRAGMA_OMP_TASKWAIT:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma omp taskwait%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"omp taskwait\";\n+\t  goto in_compound;\n \t}\n       c_parser_omp_taskwait (parser);\n       return false;\n \n     case PRAGMA_OMP_TASKYIELD:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma omp taskyield%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"omp taskyield\";\n+\t  goto in_compound;\n \t}\n       c_parser_omp_taskyield (parser);\n       return false;\n \n     case PRAGMA_OMP_CANCEL:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma omp cancel%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"omp cancel\";\n+\t  goto in_compound;\n \t}\n       c_parser_omp_cancel (parser);\n       return false;\n@@ -10345,10 +10339,8 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_WAIT:\n       if (context != pragma_compound)\n \t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma acc enter data%> may only be \"\n-\t\t\t    \"used in compound statements\");\n-\t  goto bad_stmt;\n+\t  construct = \"acc wait\";\n+\t  goto in_compound;\n \t}\n \t/* FALL THROUGH.  */\n \n@@ -15864,8 +15856,9 @@ c_parser_omp_cancellation_point (c_parser *parser, enum pragma_context context)\n   if (context != pragma_compound)\n     {\n       if (context == pragma_stmt)\n-\terror_at (loc, \"%<#pragma omp cancellation point%> may only be used in\"\n-\t\t  \" compound statements\");\n+\terror_at (loc,\n+\t\t  \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t  \"omp cancellation point\");\n       else\n \tc_parser_error (parser, \"expected declaration specifiers\");\n       c_parser_skip_to_pragma_eol (parser, false);\n@@ -16122,9 +16115,8 @@ c_parser_omp_target_update (location_t loc, c_parser *parser,\n {\n   if (context == pragma_stmt)\n     {\n-      error_at (loc,\n-\t\t\"%<#pragma omp target update%> may only be \"\n-\t\t\"used in compound statements\");\n+      error_at (loc, \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t\"omp target update\");\n       c_parser_skip_to_pragma_eol (parser, false);\n       return false;\n     }\n@@ -16182,9 +16174,8 @@ c_parser_omp_target_enter_data (location_t loc, c_parser *parser,\n \n   if (context == pragma_stmt)\n     {\n-      error_at (loc,\n-\t\t\"%<#pragma omp target enter data%> may only be \"\n-\t\t\"used in compound statements\");\n+      error_at (loc, \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t\"omp target enter data\");\n       c_parser_skip_to_pragma_eol (parser, false);\n       return NULL_TREE;\n     }\n@@ -16267,9 +16258,8 @@ c_parser_omp_target_exit_data (location_t loc, c_parser *parser,\n \n   if (context == pragma_stmt)\n     {\n-      error_at (loc,\n-\t\t\"%<#pragma omp target exit data%> may only be \"\n-\t\t\"used in compound statements\");\n+      error_at (loc, \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t\"omp target exit data\");\n       c_parser_skip_to_pragma_eol (parser, false);\n       return NULL_TREE;\n     }"}, {"sha": "47add3250d5a99576752aacd7a3159c3b5272d33", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a71dbc63406e497eb2c1ce395bc90c8facfde89b", "patch": "@@ -1,3 +1,14 @@\n+2017-03-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/79834\n+\t* parser.c (cp_parser_omp_cancellation_point,\n+\tcp_parser_omp_target_enter_data, cp_parser_omp_target_exit_data,\n+\tcp_parser_omp_target_update): Change \"may only be used in compound\n+\tstatements\" diagnostics, such that the same translatable string is\n+\tused for all pragmas.\n+\t(cp_parser_pragma): Likewise.  Use error_at instead of\n+\tcp_parser_error for that diagnostics.\n+\n 2017-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79796 - ICE with NSDMI and this pointer"}, {"sha": "c1b6496af4b8dfd5b1bd892610de8276581f6645", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a71dbc63406e497eb2c1ce395bc90c8facfde89b", "patch": "@@ -35341,8 +35341,8 @@ cp_parser_omp_cancellation_point (cp_parser *parser, cp_token *pragma_tok,\n     {\n       if (context == pragma_stmt)\n \terror_at (pragma_tok->location,\n-\t\t  \"%<#pragma omp cancellation point%> may only be used in\"\n-\t\t  \" compound statements\");\n+\t\t  \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t  \"omp cancellation point\");\n       else\n \tcp_parser_error (parser, \"expected declaration specifiers\");\n       cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n@@ -35635,8 +35635,8 @@ cp_parser_omp_target_enter_data (cp_parser *parser, cp_token *pragma_tok,\n   if (context == pragma_stmt)\n     {\n       error_at (pragma_tok->location,\n-\t\t\"%<#pragma omp target enter data%> may only be \"\n-\t\t\"used in compound statements\");\n+\t\t\"%<#pragma %s%> may only be used in compound statements\",\n+\t\t\"omp target enter data\");\n       cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n       return NULL_TREE;\n     }\n@@ -35723,8 +35723,8 @@ cp_parser_omp_target_exit_data (cp_parser *parser, cp_token *pragma_tok,\n   if (context == pragma_stmt)\n     {\n       error_at (pragma_tok->location,\n-\t\t\"%<#pragma omp target exit data%> may only be \"\n-\t\t\"used in compound statements\");\n+\t\t\"%<#pragma %s%> may only be used in compound statements\",\n+\t\t\"omp target exit data\");\n       cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n       return NULL_TREE;\n     }\n@@ -35794,8 +35794,8 @@ cp_parser_omp_target_update (cp_parser *parser, cp_token *pragma_tok,\n   if (context == pragma_stmt)\n     {\n       error_at (pragma_tok->location,\n-\t\t\"%<#pragma omp target update%> may only be \"\n-\t\t\"used in compound statements\");\n+\t\t\"%<#pragma %s%> may only be used in compound statements\",\n+\t\t\"omp target update\");\n       cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n       return false;\n     }\n@@ -38105,8 +38105,8 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n \t  cp_parser_omp_barrier (parser, pragma_tok);\n \t  return false;\n \tcase pragma_stmt:\n-\t  error_at (pragma_tok->location, \"%<#pragma omp barrier%> may only be \"\n-\t\t    \"used in compound statements\");\n+\t  error_at (pragma_tok->location, \"%<#pragma %s%> may only be \"\n+\t\t    \"used in compound statements\", \"omp barrier\");\n \t  break;\n \tdefault:\n \t  goto bad_stmt;\n@@ -38120,8 +38120,8 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n \t  cp_parser_omp_flush (parser, pragma_tok);\n \t  return false;\n \tcase pragma_stmt:\n-\t  error_at (pragma_tok->location, \"%<#pragma omp flush%> may only be \"\n-\t\t    \"used in compound statements\");\n+\t  error_at (pragma_tok->location, \"%<#pragma %s%> may only be \"\n+\t\t    \"used in compound statements\", \"omp flush\");\n \t  break;\n \tdefault:\n \t  goto bad_stmt;\n@@ -38136,8 +38136,8 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n \t  return false;\n \tcase pragma_stmt:\n \t  error_at (pragma_tok->location,\n-\t\t    \"%<#pragma omp taskwait%> may only be \"\n-\t\t    \"used in compound statements\");\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"omp taskwait\");\n \t  break;\n \tdefault:\n \t  goto bad_stmt;\n@@ -38152,8 +38152,8 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n \t  return false;\n \tcase pragma_stmt:\n \t  error_at (pragma_tok->location,\n-\t\t    \"%<#pragma omp taskyield%> may only be \"\n-\t\t    \"used in compound statements\");\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"omp taskyield\");\n \t  break;\n \tdefault:\n \t  goto bad_stmt;\n@@ -38168,8 +38168,8 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n \t  return false;\n \tcase pragma_stmt:\n \t  error_at (pragma_tok->location,\n-\t\t    \"%<#pragma omp cancel%> may only be \"\n-\t\t    \"used in compound statements\");\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"omp cancel\");\n \t  break;\n \tdefault:\n \t  goto bad_stmt;\n@@ -38195,8 +38195,9 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_ENTER_DATA:\n       if (context == pragma_stmt)\n \t{\n-\t  cp_parser_error (parser, \"%<#pragma acc enter data%> may only be \"\n-\t\t\t   \"used in compound statements\");\n+\t  error_at (pragma_tok->location,\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"acc enter data\");\n \t  break;\n \t}\n       else if (context != pragma_compound)\n@@ -38207,8 +38208,9 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_EXIT_DATA:\n       if (context == pragma_stmt)\n \t{\n-\t  cp_parser_error (parser, \"%<#pragma acc exit data%> may only be \"\n-\t\t\t   \"used in compound statements\");\n+\t  error_at (pragma_tok->location,\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"acc exit data\");\n \t  break;\n \t}\n       else if (context != pragma_compound)\n@@ -38229,8 +38231,9 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_UPDATE:\n       if (context == pragma_stmt)\n \t{\n-\t  cp_parser_error (parser, \"%<#pragma acc update%> may only be \"\n-\t\t\t   \"used in compound statements\");\n+\t  error_at (pragma_tok->location,\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"acc update\");\n \t  break;\n \t}\n       else if (context != pragma_compound)\n@@ -38241,8 +38244,9 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_WAIT:\n       if (context == pragma_stmt)\n \t{\n-\t  cp_parser_error (parser, \"%<#pragma acc wait%> may only be \"\n-\t\t\t   \"used in compound statements\");\n+\t  error_at (pragma_tok->location,\n+\t\t    \"%<#pragma %s%> may only be used in compound statements\",\n+\t\t    \"acc wait\");\n \t  break;\n \t}\n       else if (context != pragma_compound)"}, {"sha": "bfff262e048e28e2980cf254df07d27ba08b830c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a71dbc63406e497eb2c1ce395bc90c8facfde89b", "patch": "@@ -1,3 +1,9 @@\n+2017-03-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/79834\n+\t* c-c++-common/goacc/pragma_context.c (f2): Adjust expected\n+\tdiagnostics.\n+\n 2017-03-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/79809"}, {"sha": "fe50b75304bb05b57acaab4de6ed96c659180c43", "filename": "gcc/testsuite/c-c++-common/goacc/pragma_context.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpragma_context.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71dbc63406e497eb2c1ce395bc90c8facfde89b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpragma_context.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpragma_context.c?ref=a71dbc63406e497eb2c1ce395bc90c8facfde89b", "patch": "@@ -22,7 +22,7 @@ void\n f2 (void)\n {\n   if (0)\n-#pragma acc update /* { dg-error \"'#pragma acc update' may only be used in compound statements before '#pragma'\" } */\n+#pragma acc update /* { dg-error \"'#pragma acc update' may only be used in compound statements\" } */\n }\n \n // pragma_compound"}]}