{"sha": "872ceb28a1be6a4ddd95d733083f4823ff7548e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcyY2ViMjhhMWJlNmE0ZGRkOTVkNzMzMDgzZjQ4MjNmZjc1NDhlMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-04-03T18:19:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-04-03T18:19:53Z"}, "message": "re PR ipa/65655 (ICE in speculative_call_info, at cgraph.c:1151)\n\n\n\tPR ipa/65655\n\t* ipa-inline-analysis.c (edge_set_predicate): Do not redirect\n\tspeculative indirect edges to avoid ordering issue.\n\t* g++.dg/torture/pr65655.C: New testcase.\n\nFrom-SVN: r221860", "tree": {"sha": "8d624aba77b9fad20f427e2231dea30cad83be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d624aba77b9fad20f427e2231dea30cad83be8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/872ceb28a1be6a4ddd95d733083f4823ff7548e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872ceb28a1be6a4ddd95d733083f4823ff7548e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872ceb28a1be6a4ddd95d733083f4823ff7548e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872ceb28a1be6a4ddd95d733083f4823ff7548e1/comments", "author": null, "committer": null, "parents": [{"sha": "133a84abb68641cf444e41f5f0e1682a9e4e0e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133a84abb68641cf444e41f5f0e1682a9e4e0e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/133a84abb68641cf444e41f5f0e1682a9e4e0e0d"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "5a52701eebf46589237a555dcdea0d50c27646f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=872ceb28a1be6a4ddd95d733083f4823ff7548e1", "patch": "@@ -1,3 +1,9 @@\n+2015-04-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65655\n+\t* ipa-inline-analysis.c (edge_set_predicate): Do not redirect\n+\tspeculative indirect edges to avoid ordering issue.\n+\n 2015-04-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65076"}, {"sha": "5d998870f346e66a506a82c87a929b97cc0e047d", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=872ceb28a1be6a4ddd95d733083f4823ff7548e1", "patch": "@@ -793,7 +793,11 @@ edge_set_predicate (struct cgraph_edge *e, struct predicate *predicate)\n {\n   /* If the edge is determined to be never executed, redirect it\n      to BUILTIN_UNREACHABLE to save inliner from inlining into it.  */\n-  if (predicate && false_predicate_p (predicate))\n+  if (predicate && false_predicate_p (predicate)\n+      /* When handling speculative edges, we need to do the redirection\n+         just once.  Do it always on the direct edge, so we do not\n+\t attempt to resolve speculation while duplicating the edge.  */\n+      && (!e->speculative || e->callee))\n     e = redirect_to_unreachable (e);\n \n   struct inline_edge_summary *es = inline_edge_summary (e);"}, {"sha": "09d6bd943e56ba20f11863e50db88e3ec7851780", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=872ceb28a1be6a4ddd95d733083f4823ff7548e1", "patch": "@@ -1,3 +1,8 @@\n+2015-04-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65655\n+\t* g++.dg/torture/pr65655.C: New testcase.\n+\n 2015-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/64085"}, {"sha": "7db385d384a4303de3e95607aa1f090dba86831e", "filename": "gcc/testsuite/g++.dg/torture/pr65655.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65655.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872ceb28a1be6a4ddd95d733083f4823ff7548e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65655.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65655.C?ref=872ceb28a1be6a4ddd95d733083f4823ff7548e1", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+// { dg-additional-options \"-std=c++11 -fsanitize=undefined -O2\" }\n+class ECoordinate { };\n+class EPoint {\n+public:\n+  inline ECoordinate & y ();\n+};\n+ECoordinate & EPoint::y () { }\n+template < class KEY, class CONTENT > class AVLTree;\n+template < class KEY, class CONTENT > class AVLTreeNode {\n+  friend class\n+    AVLTree < KEY, CONTENT >;\n+  KEY key;\n+  void set_rthread (unsigned char b);\n+  void set_lthread (unsigned char b);\n+};\n+template < class KEY, class CONTENT > class AVLTree {\n+public:\n+  AVLTree ();\n+  void insert (const KEY & key, const CONTENT & c);\n+AVLTreeNode < KEY, CONTENT > *root;\n+  const KEY * _target_key;\n+  virtual int compare (const KEY & k1, const KEY & k2) const;\n+  void _add (AVLTreeNode < KEY, CONTENT > *&t);\n+  virtual void _status (unsigned int) { }\n+};\n+template < class KEY, class CONTENT > void AVLTree < KEY, CONTENT >::_add (AVLTreeNode < KEY, CONTENT > *&t) {\n+  int cmp = compare (*_target_key, t->key);\n+  if (cmp == 0)\n+    { _status (1); }\n+}\n+template < class KEY, class CONTENT > void AVLTree < KEY, CONTENT >::insert (const KEY & key, const CONTENT & c) {\n+  if (root == 0) {\n+      root->set_rthread (1);\n+      root->set_lthread (1);\n+    }\n+else { _target_key = &key; _add (root); }\n+}\n+template < class KEY, class CONTENT > AVLTree < KEY, CONTENT >::AVLTree ()\n+: root (0) { }\n+class ContactRepository {\n+  void insertContact (EPoint & pt, int val);\n+};\n+void ContactRepository::insertContact (EPoint & pt, int val) {\n+  AVLTreeNode < ECoordinate, AVLTree < ECoordinate, int >*>*cont_x_node;\n+  if (cont_x_node == __null)\n+    {\n+      AVLTree < ECoordinate, int >*insert_tree = new AVLTree < ECoordinate, int >;\n+      insert_tree->insert (pt.y (), val);\n+    }\n+}"}]}