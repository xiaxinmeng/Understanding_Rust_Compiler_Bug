{"sha": "0c2dc519c93e2db3c91f995975b26e238fa263f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyZGM1MTljOTNlMmRiM2M5MWY5OTU5NzViMjZlMjM4ZmEyNjNmMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-05-14T15:36:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-05-14T15:36:17Z"}, "message": "i386.h (TARGET_64BIT): Define to constant if !TARGET_BI_ARCH\n\n\t* i386.h (TARGET_64BIT): Define to constant if !TARGET_BI_ARCH\n\t(CPP_CPU??_SIZE_TYPE): New.\n\t(CPP_CPU??_SPEC, CPP_CPUCOMMON_SPEC): Break out from...\n\t(CPP_CPU_SPEC): ... here; support choosing of CPU.\n\t(EXTRA_SPECS): Add cpp_cpu??, cpp_cpu??sizet, cpp_cpucommon.\n\t(MAX_LONG_TYPE_SIZE, MAX_BITS_PER_WORD): Define to 32 for 32bit-only\n\tcompiler.\n\t* i386.c (override_options): Add sorry about not suported modes.\n\nFrom-SVN: r42070", "tree": {"sha": "5bbf89032f0ec8e7435a1efbfb2ea7492273163a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bbf89032f0ec8e7435a1efbfb2ea7492273163a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c2dc519c93e2db3c91f995975b26e238fa263f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2dc519c93e2db3c91f995975b26e238fa263f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2dc519c93e2db3c91f995975b26e238fa263f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2dc519c93e2db3c91f995975b26e238fa263f2/comments", "author": null, "committer": null, "parents": [{"sha": "47792129492aaf772bd0d50d267ef22b1a50f2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47792129492aaf772bd0d50d267ef22b1a50f2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47792129492aaf772bd0d50d267ef22b1a50f2ad"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "edc4849bd73d404f8107326d6fc9bb0e97408588", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2dc519c93e2db3c91f995975b26e238fa263f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2dc519c93e2db3c91f995975b26e238fa263f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c2dc519c93e2db3c91f995975b26e238fa263f2", "patch": "@@ -1,3 +1,14 @@\n+Mon May 14 17:34:48 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (TARGET_64BIT): Define to constant if !TARGET_BI_ARCH\n+\t(CPP_CPU??_SIZE_TYPE): New.\n+\t(CPP_CPU??_SPEC, CPP_CPUCOMMON_SPEC): Break out from...\n+\t(CPP_CPU_SPEC): ... here; support choosing of CPU.\n+\t(EXTRA_SPECS): Add cpp_cpu??, cpp_cpu??sizet, cpp_cpucommon.\n+\t(MAX_LONG_TYPE_SIZE, MAX_BITS_PER_WORD): Define to 32 for 32bit-only\n+\tcompiler.\n+\t* i386.c (override_options): Add sorry about not suported modes.\n+\n Mon May 14 08:56:47 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* config/pa/som.h (NM_FLAGS): Remove."}, {"sha": "33b00b1db15a248a6b917fbd7b634a7fd659b469", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2dc519c93e2db3c91f995975b26e238fa263f2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2dc519c93e2db3c91f995975b26e238fa263f2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0c2dc519c93e2db3c91f995975b26e238fa263f2", "patch": "@@ -694,6 +694,9 @@ override_options ()\n \t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");\n   if (ix86_cmodel == CM_LARGE)\n     sorry (\"Code model `large' not supported yet.\");\n+  if ((TARGET_64BIT != 0) != ((target_flags & MASK_64BIT) != 0))\n+    sorry (\"%i-bit mode not compiled in.\",\n+\t   (target_flags & MASK_64BIT) ? 64 : 32);\n \n   if (ix86_arch_string != 0)\n     {"}, {"sha": "27ac641478be5d64862c344eab1f4dd42e631456", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2dc519c93e2db3c91f995975b26e238fa263f2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2dc519c93e2db3c91f995975b26e238fa263f2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0c2dc519c93e2db3c91f995975b26e238fa263f2", "patch": "@@ -181,7 +181,15 @@ extern int target_flags;\n #define TARGET_DEBUG_ARG (target_flags & MASK_DEBUG_ARG)\n \n /* 64bit Sledgehammer mode */\n+#ifdef TARGET_BI_ARCH\n #define TARGET_64BIT (target_flags & MASK_64BIT)\n+#else\n+#ifdef TARGET_64BIT_DEFAULT\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n \n #define TARGET_386 (ix86_cpu == PROCESSOR_I386)\n #define TARGET_486 (ix86_cpu == PROCESSOR_I486)\n@@ -462,10 +470,24 @@ extern int ix86_arch;\n #endif\n #endif /* CPP_CPU_DEFAULT_SPEC */\n \n-#ifndef CPP_CPU_SPEC\n-#define CPP_CPU_SPEC \"\\\n--Acpu=i386 -Amachine=i386 \\\n-%{!ansi:%{!std=c*:%{!std=i*:-Di386}}} -D__i386 -D__i386__ \\\n+#ifdef NO_BUILTIN_SIZE_TYPE\n+#define CPP_CPU32_SIZE_TYPE_SPEC \\\n+  \" -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n+#define CPP_CPU64_SIZE_TYPE_SPEC \\\n+  \" -D__SIZE_TYPE__=unsigned\\\\ long\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int\"\n+#else\n+#define CPP_CPU32_SIZE_TYPE_SPEC \"\"\n+#define CPP_CPU64_SIZE_TYPE_SPEC \"\"\n+#endif\n+\n+#define CPP_CPU32_SPEC \\\n+  \"-Acpu=i386 -Amachine=i386 %{!ansi:%{!std=c*:%{!std=i*:-Di386}}} -D__i386 \\\n+-D__i386__ %(cpp_cpu32sizet)\"\n+\n+#define CPP_CPU64_SPEC \\\n+  \"-Acpu=x86_64 -Amachine=x86_64 -D__x86_64 -D__x86_64__ %(cpp_cpu64sizet)\"\n+\n+#define CPP_CPUCOMMON_SPEC \"\\\n %{march=i386:%{!mcpu*:-D__tune_i386__ }}\\\n %{march=i486:-D__i486 -D__i486__ %{!mcpu*:-D__tune_i486__ }}\\\n %{march=pentium|march=i586:-D__i586 -D__i586__ -D__pentium -D__pentium__ \\\n@@ -475,7 +497,7 @@ extern int ix86_arch;\n   %{!mcpu*:-D__tune_i686__ -D__tune_pentiumpro__ }}\\\n %{march=k6:-D__k6 -D__k6__ %{!mcpu*:-D__tune_k6__ }}\\\n %{march=athlon:-D__athlon -D__athlon__ %{!mcpu*:-D__tune_athlon__ }}\\\n-%{mpentium4=pentium4:-D__pentium4 -D__pentium4__ %{!mcpu*:-D__tune_pentium4__ }}\\\n+%{march=pentium4:-D__pentium4 -D__pentium4__ %{!mcpu*:-D__tune_pentium4__ }}\\\n %{m386|mcpu=i386:-D__tune_i386__ }\\\n %{m486|mcpu=i486:-D__tune_i486__ }\\\n %{mpentium|mcpu=pentium|mcpu=i586:-D__tune_i586__ -D__tune_pentium__ }\\\n@@ -484,6 +506,21 @@ extern int ix86_arch;\n %{mcpu=athlon:-D__tune_athlon__ }\\\n %{mcpu=pentium4:-D__tune_pentium4__ }\\\n %{!march*:%{!mcpu*:%{!m386:%{!m486:%{!mpentium*:%(cpp_cpu_default)}}}}}\"\n+\n+#ifndef CPP_CPU_SPEC\n+#ifdef TARGET_BI_ARCH\n+#ifdef TARGET_64BIT_DEFAULT\n+#define CPP_CPU_SPEC \"%{m32:%(cpp_cpu32)}%{!m32:%(cpp_cpu64)} %(cpp_cpucommon)\"\n+#else\n+#define CPP_CPU_SPEC \"%{m64:%(cpp_cpu64)}%{!m64:%(cpp_cpu32)} %(cpp_cpucommon)\"\n+#endif\n+#else\n+#ifdef TARGET_64BIT_DEFAULT\n+#define CPP_CPU_SPEC \"%(cpp_cpu64) %(cpp_cpucommon)\"\n+#else\n+#define CPP_CPU_SPEC \"%(cpp_cpu32) %(cpp_cpucommon)\"\n+#endif\n+#endif\n #endif\n \n #ifndef CC1_SPEC\n@@ -507,6 +544,11 @@ extern int ix86_arch;\n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n   { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC },\t\t\t\t\\\n   { \"cpp_cpu\",\tCPP_CPU_SPEC },\t\t\t\t\t\t\\\n+  { \"cpp_cpu32\", CPP_CPU32_SPEC },\t\t\t\t\t\\\n+  { \"cpp_cpu64\", CPP_CPU64_SPEC },\t\t\t\t\t\\\n+  { \"cpp_cpu32sizet\", CPP_CPU32_SIZE_TYPE_SPEC },\t\t\t\\\n+  { \"cpp_cpu64sizet\", CPP_CPU64_SIZE_TYPE_SPEC },\t\t\t\\\n+  { \"cpp_cpucommon\", CPP_CPUCOMMON_SPEC },\t\t\t\t\\\n   { \"cc1_cpu\",  CC1_CPU_SPEC },\t\t\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \f\n@@ -535,10 +577,17 @@ extern int ix86_arch;\n #define FLOAT_TYPE_SIZE 32\n #define LONG_TYPE_SIZE BITS_PER_WORD\n #define MAX_WCHAR_TYPE_SIZE 32\n-#define MAX_LONG_TYPE_SIZE 64\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_LONG_TYPE_SIZE 64\n \n+#if defined (TARGET_BI_ARCH) || defined (TARGET_64BIT_DEFAULT)\n+#define MAX_BITS_PER_WORD 64\n+#define MAX_LONG_TYPE_SIZE 64\n+#else\n+#define MAX_BITS_PER_WORD 32\n+#define MAX_LONG_TYPE_SIZE 32\n+#endif\n+\n /* Define if you don't want extended real, but do want to use the\n    software floating point emulator for REAL_ARITHMETIC and\n    decimal <-> binary conversion. */\n@@ -566,7 +615,6 @@ extern int ix86_arch;\n    if using 16-bit ints on a 80386, this would still be 32.\n    But on a machine with 16-bit registers, this would be 16.  */\n #define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)\n-#define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD (TARGET_64BIT ? 8 : 4)"}]}