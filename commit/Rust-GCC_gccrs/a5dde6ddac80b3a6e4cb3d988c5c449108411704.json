{"sha": "a5dde6ddac80b3a6e4cb3d988c5c449108411704", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkZGU2ZGRhYzgwYjNhNmU0Y2IzZDk4OGM1YzQ0OTEwODQxMTcwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-11-14T12:17:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-11-14T12:17:57Z"}, "message": "Define C++11 version of std::ios_base::failure.\n\n\t* config/abi/pre/gnu.ver: Add new exports.\n\t* include/bits/ios_base.h (ios_base::failure): New definition using\n\tabi_tag.\n\t(io_errc, make_error_code, make_error_category, iostream_category):\n\tDefine.\n\t* include/std/system_error (system_error): Add char* constructors.\n\t* src/c++11/Makefile.am: Add new file.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/cxx11-ios_failure.cc: New file.\n\t* src/c++98/ios_failure.cc: Compile old definition without abi_tag.\n\t* testsuite/27_io/ios_base/failure/cxx11.cc: New.\n\t* testsuite/27_io/ios_base/failure/what-1.cc: Allow string returned by\n\tios_base::failure::what() to contain additional data.\n\t* testsuite/27_io/ios_base/failure/what-2.cc: Likewise..\n\t* testsuite/27_io/ios_base/failure/what-3.cc: Likewise..\n\t* testsuite/27_io/ios_base/failure/what-big.cc: Likewise..\n\nFrom-SVN: r217559", "tree": {"sha": "7608d5f540586abdbb3a9159b02a5def19043a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7608d5f540586abdbb3a9159b02a5def19043a66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5dde6ddac80b3a6e4cb3d988c5c449108411704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dde6ddac80b3a6e4cb3d988c5c449108411704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5dde6ddac80b3a6e4cb3d988c5c449108411704", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dde6ddac80b3a6e4cb3d988c5c449108411704/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d7f09fff5d074f6c0917559d005e9a2a156be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d7f09fff5d074f6c0917559d005e9a2a156be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d7f09fff5d074f6c0917559d005e9a2a156be8"}], "stats": {"total": 305, "additions": 288, "deletions": 17}, "files": [{"sha": "18e214fc94b97e637a63188365de4d8ed7e851df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -1,3 +1,22 @@\n+2014-11-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t* include/bits/ios_base.h (ios_base::failure): New definition using\n+\tabi_tag.\n+\t(io_errc, make_error_code, make_error_category, iostream_category):\n+\tDefine.\n+\t* include/std/system_error (system_error): Add char* constructors.\n+\t* src/c++11/Makefile.am: Add new file.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/cxx11-ios_failure.cc: New file.\n+\t* src/c++98/ios_failure.cc: Compile old definition without abi_tag.\n+\t* testsuite/27_io/ios_base/failure/cxx11.cc: New.\n+\t* testsuite/27_io/ios_base/failure/what-1.cc: Allow string returned by\n+\tios_base::failure::what() to contain additional data.\n+\t* testsuite/27_io/ios_base/failure/what-2.cc: Likewise..\n+\t* testsuite/27_io/ios_base/failure/what-3.cc: Likewise..\n+\t* testsuite/27_io/ios_base/failure/what-big.cc: Likewise..\n+\n 2014-11-13  Daniel Kruegler  <daniel.kruegler@gmail.com>\n \n \t* include/bits/regex.h: Support embedded zeros in sub_match"}, {"sha": "78f3e77a1dee9045a22485590ed164f95c15996e", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -1473,6 +1473,18 @@ GLIBCXX_3.4.21 {\n     # std::basic_ios::operator bool() const\n     _ZNKSt9basic_iosI[cw]St11char_traitsI[cw]EEcvbEv;\n \n+    # C++11 version of std::ios_base::failure\n+    _ZNKSt8ios_base7failureB5cxx114whatEv;\n+    _ZNSt8ios_base7failureB5cxx11C[12]ERKSs;\n+    _ZNSt8ios_base7failureB5cxx11C[12]EPKcRKSt10error_code;\n+    _ZNSt8ios_base7failureB5cxx11C[12]ERKSsB5cxx11;\n+    _ZNSt8ios_base7failureB5cxx11C[12]ERKSsB5cxx11RKSt10error_code;\n+    _ZNSt8ios_base7failureB5cxx11D[012]Ev;\n+    _ZTINSt8ios_base7failureB5cxx11E;\n+    _ZTSNSt8ios_base7failureB5cxx11E;\n+    _ZTVNSt8ios_base7failureB5cxx11E;\n+    _ZSt17iostream_categoryv;\n+\n     # std::ctype_base::blank\n     _ZNSt10ctype_base5blankE;\n "}, {"sha": "8e600598fe2a4de52df96ea3d27fa53d8a2ad6de", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -40,6 +40,12 @@\n #include <bits/localefwd.h>\n #include <bits/locale_classes.h>\n \n+#if __cplusplus < 201103L\n+# include <stdexcept>\n+#else\n+# include <system_error>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -186,6 +192,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_ios_seekdir_end = 1L << 16 \n     };\n \n+#if __cplusplus >= 201103L\n+  /// I/O error code\n+  enum class io_errc { stream = 1 };\n+\n+  template <> struct is_error_code_enum<io_errc> : public true_type { };\n+\n+  const error_category& iostream_category() noexcept;\n+\n+  inline error_code\n+  make_error_code(io_errc e) noexcept\n+  { return error_code(static_cast<int>(e), iostream_category()); }\n+\n+  inline error_condition\n+  make_error_condition(io_errc e) noexcept\n+  { return error_condition(static_cast<int>(e), iostream_category()); }\n+#endif\n+\n   // 27.4.2  Class ios_base\n   /**\n    *  @brief  The base of the I/O class hierarchy.\n@@ -198,6 +221,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   class ios_base\n   {\n+#if _GLIBCXX_USE_CXX11_ABI\n+#if __cplusplus < 201103L\n+    // Type that is layout-compatible with std::system_error\n+    struct system_error : std::runtime_error\n+    {\n+      // Type that is layout-compatible with std::error_code\n+      struct error_code\n+      {\n+\terror_code() { }\n+      private:\n+\tint\t\t_M_value;\n+\tconst void*\t_M_cat;\n+      } _M_code;\n+    };\n+#endif\n+#endif\n   public:\n \n     /** \n@@ -206,6 +245,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *\n      *  27.4.2.1.1  Class ios_base::failure\n      */\n+#if _GLIBCXX_USE_CXX11_ABI\n+    class _GLIBCXX_ABI_TAG_CXX11 failure : public system_error\n+    {\n+    public:\n+      explicit\n+      failure(const string& __str);\n+\n+#if __cplusplus >= 201103L\n+      explicit\n+      failure(const string&, const error_code&);\n+\n+      explicit\n+      failure(const char*, const error_code& = io_errc::stream);\n+#endif\n+\n+      virtual\n+      ~failure() throw();\n+\n+      virtual const char*\n+      what() const throw();\n+    };\n+#else\n     class failure : public exception\n     {\n     public:\n@@ -225,6 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       string _M_msg;\n     };\n+#endif\n \n     // 27.4.2.1.2  Type ios_base::fmtflags\n     /**"}, {"sha": "ed17f554bca3744d12864616bd9767e0308efd2d", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -321,16 +321,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     system_error(error_code __ec, const string& __what)\n     : runtime_error(__what + \": \" + __ec.message()), _M_code(__ec) { }\n \n-    /*\n-     * TODO: Add const char* ctors to all exceptions.\n-     *\n-     * system_error(error_code __ec, const char* __what)\n-     * : runtime_error(__what + (\": \" + __ec.message())), _M_code(__ec) { }\n-     *\n-     * system_error(int __v, const error_category& __ecat, const char* __what)\n-     * : runtime_error(__what + (\": \" + __ec.message())),\n-     *   _M_code(error_code(__v, __ecat)) { }\n-     */\n+    system_error(error_code __ec, const char* __what)\n+    : runtime_error(__what + (\": \" + __ec.message())), _M_code(__ec) { }\n+\n+    system_error(int __v, const error_category& __ecat, const char* __what)\n+    : system_error(error_code(__v, __ecat), __what) { }\n \n     system_error(int __v, const error_category& __ecat)\n     : runtime_error(error_code(__v, __ecat).message()),"}, {"sha": "71306db4b006a2ff840bea4864e0aafbe35b52ac", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -39,6 +39,13 @@ ctype_configure_char.cc: ${glibcxx_srcdir}/$(OS_INC_SRCDIR)/ctype_configure_char\n ctype_members.cc: ${glibcxx_srcdir}/$(CCTYPE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CCTYPE_CC) . || true\n \n+if ENABLE_CXX11_ABI\n+cxx11_abi_sources = \\\n+\tcxx11-ios_failure.cc\n+else\n+cxx11_abi_sources =\n+endif\n+\n sources = \\\n \tchrono.cc \\\n \tcondition_variable.cc \\\n@@ -59,6 +66,7 @@ sources = \\\n \tsnprintf_lite.cc \\\n \tsystem_error.cc \\\n \tthread.cc \\\n+\t${cxx11_abi_sources} \\\n \t${host_sources}\n \n if ENABLE_EXTERN_TEMPLATE"}, {"sha": "dd9e110f76885123d65bb5132681a1e4f6b8dcb9", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -67,19 +67,20 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__11convenience_la_LIBADD =\n-am__objects_1 = ctype_configure_char.lo ctype_members.lo\n-am__objects_2 = chrono.lo condition_variable.lo ctype.lo debug.lo \\\n+@ENABLE_CXX11_ABI_TRUE@am__objects_1 = cxx11-ios_failure.lo\n+am__objects_2 = ctype_configure_char.lo ctype_members.lo\n+am__objects_3 = chrono.lo condition_variable.lo ctype.lo debug.lo \\\n \tfunctexcept.lo functional.lo future.lo hash_c++0x.lo \\\n \thashtable_c++0x.lo ios.lo limits.lo mutex.lo placeholders.lo \\\n \trandom.lo regex.lo shared_ptr.lo snprintf_lite.lo \\\n-\tsystem_error.lo thread.lo $(am__objects_1)\n-@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_3 = ext11-inst.lo \\\n+\tsystem_error.lo thread.lo $(am__objects_1) $(am__objects_2)\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_4 = ext11-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.lo ios-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.lo istream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.lo sstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.lo string-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.lo\n-am_libc__11convenience_la_OBJECTS = $(am__objects_2) $(am__objects_3)\n+am_libc__11convenience_la_OBJECTS = $(am__objects_3) $(am__objects_4)\n libc__11convenience_la_OBJECTS = $(am_libc__11convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n@@ -322,6 +323,10 @@ host_sources = \\\n \tctype_configure_char.cc \\\n \tctype_members.cc\n \n+@ENABLE_CXX11_ABI_FALSE@cxx11_abi_sources = \n+@ENABLE_CXX11_ABI_TRUE@cxx11_abi_sources = \\\n+@ENABLE_CXX11_ABI_TRUE@\tcxx11-ios_failure.cc\n+\n sources = \\\n \tchrono.cc \\\n \tcondition_variable.cc \\\n@@ -342,6 +347,7 @@ sources = \\\n \tsnprintf_lite.cc \\\n \tsystem_error.cc \\\n \tthread.cc \\\n+\t${cxx11_abi_sources} \\\n \t${host_sources}\n \n # XTEMPLATE_FLAGS ="}, {"sha": "143d70e5e93cd12c04543ea42f93b1504a45ad05", "filename": "libstdc++-v3/src/c++11/cxx11-ios_failure.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -0,0 +1,89 @@\n+// Iostreams base classes -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:2011: 27.5.3.1.1  Class ios_base::failure\n+//\n+\n+#include <ios>\n+\n+namespace\n+{\n+  struct io_error_category : std::error_category\n+  {\n+    virtual const char*\n+    name() const noexcept\n+    { return \"iostream\"; }\n+\n+    virtual std::string message(int __ec) const\n+    {\n+      std::string __msg;\n+      switch (std::io_errc(__ec))\n+      {\n+      case std::io_errc::stream:\n+          __msg = \"iostream error\";\n+          break;\n+      default:\n+          __msg = \"Unknown error\";\n+          break;\n+      }\n+      return __msg;\n+    }\n+  };\n+\n+  const io_error_category&\n+  __io_category_instance() noexcept\n+  {\n+    static const io_error_category __ec{};\n+    return __ec;\n+  }\n+\n+} // namespace\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  const error_category&\n+  iostream_category() noexcept\n+  { return __io_category_instance(); }\n+\n+  ios_base::failure::failure(const string& __str)\n+  : system_error(io_errc::stream, __str) { }\n+\n+  ios_base::failure::failure(const string& __str, const error_code& __ec)\n+  : system_error(__ec, __str) { }\n+\n+  ios_base::failure::failure(const char* __str, const error_code& __ec)\n+  : system_error(__ec, __str) { }\n+\n+  ios_base::failure::~failure()\n+  { }\n+\n+  const char*\n+  ios_base::failure::what() const throw()\n+  { return runtime_error::what(); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "0f4517800ce7024f0095515666d7fb6f14412317", "filename": "libstdc++-v3/src/c++98/ios_failure.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -23,9 +23,10 @@\n // <http://www.gnu.org/licenses/>.\n \n //\n-// ISO C++ 14882: 27.4.2.1.1  Class ios_base::failure\n+// ISO C++ 14882:1998: 27.4.2.1.1  Class ios_base::failure\n //\n \n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <ios>\n \n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "a3276e1c5bd56936ba2b7db3d9d2df126469a15a", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/cxx11.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::ios_base::failure;\n+\n+static_assert( std::is_base_of<std::system_error, test_type>::value, \"base\" );\n+\n+void\n+test01()\n+{\n+  test_type e(\"io error\");\n+  VERIFY(std::string(e.what()).find(\"io error\") != std::string::npos);\n+  e = test_type(\"\", make_error_code(std::io_errc::stream));\n+}\n+\n+struct E : test_type\n+{\n+  E(const char* s) : test_type(s, make_error_code(std::io_errc::stream)) { }\n+};\n+\n+void\n+test02()\n+{\n+  E e(\"io error\");\n+  VERIFY(std::string(e.what()).find(\"io error\") != std::string::npos);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a50c798b14c9247b5eb51dc2a4d8cb125441dee6", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/what-1.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-1.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -37,8 +37,13 @@ void test01()\n   // 2\n   std::ios_base::failure obj2(s);\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( std::strstr(obj1.what(), s.data()) != NULL );\n+  VERIFY( std::strstr(obj2.what(), s.data()) != NULL );\n+#else\n   VERIFY( std::strcmp(obj1.what(), s.data()) == 0 );\n   VERIFY( std::strcmp(obj2.what(), s.data()) == 0 );\n+#endif\n }\n \n void test02()\n@@ -47,7 +52,11 @@ void test02()\n   std::string s(\"lack of sunlight error\");\n   std::range_error x(s);\n   \n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( std::strstr(x.what(), s.data()) != NULL );\n+#else\n   VERIFY( std::strcmp(x.what(), s.data()) == 0 );\n+#endif\n }\n \n int main(void)"}, {"sha": "e16ef7c64d95c1e900356ae8843ca5148fcc6479", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/what-2.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-2.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -37,7 +37,13 @@ void test03()\n   try\n     { throw fuzzy_logic(); }\n   catch(const fuzzy_logic& obj)\n-    { VERIFY( std::strcmp(\"whoa\", obj.what()) == 0 ); }\n+    {\n+#if _GLIBCXX_USE_CXX11_ABI\n+      VERIFY( std::strstr(obj.what(), \"whoa\") != NULL );\n+#else\n+      VERIFY( std::strcmp(\"whoa\", obj.what()) == 0 );\n+#endif\n+    }\n   catch(...)\n     { VERIFY( false ); }\n }"}, {"sha": "abbbcca7826f03a277f1d163646a8c35f99d3466", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/what-3.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-3.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -52,7 +52,11 @@ void test04()\n     obj1 = obj2;\n   }\n   allocate_on_stack();\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( std::strstr(obj1.what(), strlit1) != NULL );\n+#else\n   VERIFY( std::strcmp(strlit1, obj1.what()) == 0 ); \n+#endif\n \n   // block 02\n   {\n@@ -61,7 +65,11 @@ void test04()\n     obj1 = obj3;\n   }\n   allocate_on_stack();     \n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( std::strstr(obj1.what(), strlit2) != NULL );\n+#else\n   VERIFY( std::strcmp(strlit2, obj1.what()) == 0 ); \n+#endif\n }\n \n int main(void)"}, {"sha": "99ee17d68393d6d23dc969f28c1816ecaf662334", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/what-big.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-big.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dde6ddac80b3a6e4cb3d988c5c449108411704/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-big.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fwhat-big.cc?ref=a5dde6ddac80b3a6e4cb3d988c5c449108411704", "patch": "@@ -30,7 +30,11 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   const std::string xxx(10000, 'x');\n   test_type t(xxx);\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( std::strstr(t.what(), xxx.c_str()) != NULL );\n+#else\n   VERIFY( std::strcmp(t.what(), xxx.c_str()) == 0 );\n+#endif\n }\n \n int main(void)"}]}