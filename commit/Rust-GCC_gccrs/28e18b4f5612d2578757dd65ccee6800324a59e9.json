{"sha": "28e18b4f5612d2578757dd65ccee6800324a59e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlMThiNGY1NjEyZDI1Nzg3NTdkZDY1Y2NlZTY4MDAzMjRhNTllOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:22:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:22:51Z"}, "message": "[multiple changes]\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Complete_Object_Operation): If the type of the\n\tcandidate subprogram is a limited view, use non-limited view\n\twhen available.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb: Minor change in RM reference.\n\t* sem_mech.ads: Minor reformatting.\n\t* einfo.ads: Minor comment fix.\n\t* types.ads: Minor correction to range given for Mechanism_Type.\n\t* exp_ch6.adb (Add_Invariant_And_Predicate_Checks): Do not\n\tcheck predicate on way out for OUT or IN OUT parameters.\n\t* par-ch3.adb (P_Constraint_Opt): Handle missing RANGE keyword\n\tbetter (P_Range_Constraint): Corresponding fix.\n\t* checks.ads: Minor comment clarification.\n\n2014-07-29  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): Set the Is_Volatile\n\tand Treat_As_Volatile flags based on whether the renamed object\n\tis a volatile object.\n\nFrom-SVN: r213170", "tree": {"sha": "8006f8e6dbe07e484a93bb2032c5e79c545713e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8006f8e6dbe07e484a93bb2032c5e79c545713e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e18b4f5612d2578757dd65ccee6800324a59e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e18b4f5612d2578757dd65ccee6800324a59e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e18b4f5612d2578757dd65ccee6800324a59e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e18b4f5612d2578757dd65ccee6800324a59e9/comments", "author": null, "committer": null, "parents": [{"sha": "f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c79ade9e03c5278cb4858d6e46695683e1c1ff"}], "stats": {"total": 233, "additions": 132, "deletions": 101}, "files": [{"sha": "218c225cbcc2cfc067d5d2ff01a011e4be831579", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -1,3 +1,27 @@\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Complete_Object_Operation): If the type of the\n+\tcandidate subprogram is a limited view, use non-limited view\n+\twhen available.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb: Minor change in RM reference.\n+\t* sem_mech.ads: Minor reformatting.\n+\t* einfo.ads: Minor comment fix.\n+\t* types.ads: Minor correction to range given for Mechanism_Type.\n+\t* exp_ch6.adb (Add_Invariant_And_Predicate_Checks): Do not\n+\tcheck predicate on way out for OUT or IN OUT parameters.\n+\t* par-ch3.adb (P_Constraint_Opt): Handle missing RANGE keyword\n+\tbetter (P_Range_Constraint): Corresponding fix.\n+\t* checks.ads: Minor comment clarification.\n+\n+2014-07-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Set the Is_Volatile\n+\tand Treat_As_Volatile flags based on whether the renamed object\n+\tis a volatile object.\n+\n 2014-07-29  Olivier Hainque  <hainque@adacore.com>\n \n \t* g-debpoo.adb"}, {"sha": "07fdc5dc3c854c636a0159fb25eae5572b5c625f", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -245,8 +245,7 @@ package Checks is\n \n    procedure Apply_Predicate_Check (N : Node_Id; Typ : Entity_Id);\n    --  N is an expression to which a predicate check may need to be applied\n-   --  for Typ, if Typ has a predicate function. The check is applied only\n-   --  if the type of N does not match Typ.\n+   --  for Typ, if Typ has a predicate function.\n \n    procedure Apply_Type_Conversion_Checks (N : Node_Id);\n    --  N is an N_Type_Conversion node. A type conversion actually involves"}, {"sha": "6065d19ba94d714470d7d50247aac8f954e37d42", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -3172,9 +3172,9 @@ package Einfo is\n --    Mechanism (Uint8) (returned as Mechanism_Type)\n --       Defined in functions and non-generic formal parameters. Indicates\n --       the mechanism to be used for the function return or for the formal\n---       parameter. See separate section on passing mechanisms. This field\n---       is also set (to the default value of zero) in a subprogram body\n---       entity but not used in this context.\n+--       parameter. See full description in the spec of Sem_Mech. This field\n+--       is also set (to the default value of zero = Default_Mechanism) in a\n+--       subprogram body entity but not used in this context.\n \n --    Modulus (Uint17) [base type only]\n --       Defined in modular types. Contains the modulus. For the binary case,"}, {"sha": "9344e40aad8060515b3c97eb2d0214a3421c3a16", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 61, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -8248,10 +8248,6 @@ package body Exp_Ch6 is\n          --  subprogram Subp_Id must appear visible from the point of view of\n          --  the type.\n \n-         function Predicate_Checks_OK (Typ : Entity_Id) return Boolean;\n-         --  Determine whether type Typ can benefit from predicate checks. To\n-         --  qualify, the type must have at least one checked predicate.\n-\n          ---------------------------------\n          -- Add_Invariant_Access_Checks --\n          ---------------------------------\n@@ -8414,57 +8410,6 @@ package body Exp_Ch6 is\n                 and then Has_Public_Visibility_Of_Subprogram;\n          end Invariant_Checks_OK;\n \n-         -------------------------\n-         -- Predicate_Checks_OK --\n-         -------------------------\n-\n-         function Predicate_Checks_OK (Typ : Entity_Id) return Boolean is\n-            function Has_Checked_Predicate return Boolean;\n-            --  Determine whether type Typ has or inherits at least one\n-            --  predicate aspect or pragma, for which the applicable policy is\n-            --  Checked.\n-\n-            ---------------------------\n-            -- Has_Checked_Predicate --\n-            ---------------------------\n-\n-            function Has_Checked_Predicate return Boolean is\n-               Anc  : Entity_Id;\n-               Pred : Node_Id;\n-\n-            begin\n-               --  Climb the ancestor type chain staring from the input. This\n-               --  is done because the input type may lack aspect/pragma\n-               --  predicate and simply inherit those from its ancestor.\n-\n-               --  Note that predicate pragmas correspond to all three cases\n-               --  of predicate aspects (Predicate, Dynamic_Predicate, and\n-               --  Static_Predicate), so this routine checks for all three\n-               --  cases.\n-\n-               Anc := Typ;\n-               while Present (Anc) loop\n-                  Pred := Get_Pragma (Anc, Pragma_Predicate);\n-\n-                  if Present (Pred) and then not Is_Ignored (Pred) then\n-                     return True;\n-                  end if;\n-\n-                  Anc := Nearest_Ancestor (Anc);\n-               end loop;\n-\n-               return False;\n-            end Has_Checked_Predicate;\n-\n-         --  Start of processing for Predicate_Checks_OK\n-\n-         begin\n-            return\n-              Has_Predicates (Typ)\n-                and then Present (Predicate_Function (Typ))\n-                and then Has_Checked_Predicate;\n-         end Predicate_Checks_OK;\n-\n          --  Local variables\n \n          Loc : constant Source_Ptr := Sloc (N);\n@@ -8529,12 +8474,11 @@ package body Exp_Ch6 is\n \n                Add_Invariant_Access_Checks (Formal);\n \n-               if Predicate_Checks_OK (Typ) then\n-                  Append_Enabled_Item\n-                    (Item => Make_Predicate_Check\n-                                (Typ, New_Occurrence_Of (Formal, Loc)),\n-                     List => Stmts);\n-               end if;\n+               --  Note: we used to add predicate checks for OUT and IN OUT\n+               --  formals here, but that was misguided, since such checks are\n+               --  performed on the caller side, based on the predicate of the\n+               --  actual, rather than the predicate of the formal.\n+\n             end if;\n \n             Next_Formal (Formal);"}, {"sha": "3d6161b2165959a8ac10ecedadd3fcfb5d35d9e9", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1217,19 +1217,13 @@ package body Ch3 is\n \n    function P_Constraint_Opt return Node_Id is\n    begin\n-      if Token = Tok_Range\n-        or else Bad_Spelling_Of (Tok_Range)\n-      then\n+      if Token = Tok_Range or else Bad_Spelling_Of (Tok_Range) then\n          return P_Range_Constraint;\n \n-      elsif Token = Tok_Digits\n-        or else Bad_Spelling_Of (Tok_Digits)\n-      then\n+      elsif Token = Tok_Digits or else Bad_Spelling_Of (Tok_Digits) then\n          return P_Digits_Constraint;\n \n-      elsif Token = Tok_Delta\n-        or else Bad_Spelling_Of (Tok_Delta)\n-      then\n+      elsif Token = Tok_Delta or else Bad_Spelling_Of (Tok_Delta) then\n          return P_Delta_Constraint;\n \n       elsif Token = Tok_Left_Paren then\n@@ -1239,6 +1233,31 @@ package body Ch3 is\n          Ignore (Tok_In);\n          return P_Constraint_Opt;\n \n+      --  One more possibility is e.g. 1 .. 10 (i.e. missing RANGE keyword)\n+\n+      elsif Token = Tok_Identifier      or else\n+            Token = Tok_Integer_Literal or else\n+            Token = Tok_Real_Literal\n+      then\n+         declare\n+            Scan_State : Saved_Scan_State;\n+\n+         begin\n+            Save_Scan_State (Scan_State); -- at identifier or literal\n+            Scan; -- past identifier or literal\n+\n+            if Token = Tok_Dot_Dot then\n+               Restore_Scan_State (Scan_State);\n+               Error_Msg_BC (\"missing RANGE keyword\");\n+               return P_Range_Constraint;\n+            else\n+               Restore_Scan_State (Scan_State);\n+               return Empty;\n+            end if;\n+         end;\n+\n+      --  Nothing worked, no constraint there\n+\n       else\n          return Empty;\n       end if;\n@@ -2033,7 +2052,9 @@ package body Ch3 is\n \n    --  RANGE_CONSTRAINT ::= range RANGE\n \n-   --  The caller has checked that the initial token is RANGE\n+   --  The caller has checked that the initial token is RANGE or some\n+   --  misspelling of it, or it may be absent completely (and a message\n+   --  has already been issued).\n \n    --  Error recovery: cannot raise Error_Resync\n \n@@ -2042,7 +2063,13 @@ package body Ch3 is\n \n    begin\n       Range_Node := New_Node (N_Range_Constraint, Token_Ptr);\n-      Scan; -- past RANGE\n+\n+      --  Skip range keyword if present\n+\n+      if Token = Tok_Range or else Bad_Spelling_Of (Tok_Range) then\n+         Scan; -- past RANGE\n+      end if;\n+\n       Set_Range_Expression (Range_Node, P_Range);\n       return Range_Node;\n    end P_Range_Constraint;"}, {"sha": "35f4f8a6fcbb93c283364fc6604093826af995bf", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -8097,7 +8097,7 @@ package body Sem_Ch13 is\n                if Has_Static_Predicate_Aspect (Typ) then\n                   if Is_Scalar_Type (Typ) or else Is_String_Type (Typ) then\n                      Error_Msg_F\n-                       (\"expression is not predicate-static (RM 4.3.2(16-22))\",\n+                       (\"expression is not predicate-static (RM 3.2.4(16-22))\",\n                         EN);\n                   else\n                      Error_Msg_F"}, {"sha": "313f6f87d292e00aa90db40e9e78a76dbf801321", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -7542,6 +7542,18 @@ package body Sem_Ch4 is\n             Save_Interps (Subprog, Node_To_Replace);\n \n          else\n+            --  The type of the subprogram may be a limited view obtained\n+            --  transitively from another unit. If full view is available,\n+            --  use it to analyze call.\n+\n+            declare\n+               T : constant Entity_Id := Etype (Subprog);\n+            begin\n+               if From_Limited_With (T) then\n+                  Set_Etype (Entity (Subprog), Available_View (T));\n+               end if;\n+            end;\n+\n             Analyze (Node_To_Replace);\n \n             --  If the operation has been rewritten into a call, which may get\n@@ -7587,7 +7599,7 @@ package body Sem_Ch4 is\n             if Nkind (Parent (Op)) = N_Full_Type_Declaration then\n                Error_Msg_N\n                  (\"\\possible interpretation \"\n-                  & \"( inherited, with implicit dereference) #\", N);\n+                  & \"(inherited, with implicit dereference) #\", N);\n             else\n                Error_Msg_N\n                  (\"\\possible interpretation (with implicit dereference) #\", N);"}, {"sha": "ccfc2084bf4f8dd9787ba611266791f351c4fa9c", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -1245,17 +1245,17 @@ package body Sem_Ch8 is\n \n       elsif Nkind (Original_Node (Nam)) = N_Function_Call\n \n-            --  When expansion is disabled, attribute reference is not\n-            --  rewritten as function call. Otherwise it may be rewritten\n-            --  as a conversion, so check original node.\n+        --  When expansion is disabled, attribute reference is not rewritten\n+        --  as function call. Otherwise it may be rewritten as a conversion,\n+        --  so check original node.\n \n         or else (Nkind (Original_Node (Nam)) = N_Attribute_Reference\n                   and then Is_Function_Attribute_Name\n                              (Attribute_Name (Original_Node (Nam))))\n \n-            --  Weird but legal, equivalent to renaming a function call.\n-            --  Illegal if the literal is the result of constant-folding an\n-            --  attribute reference that is not a function.\n+        --  Weird but legal, equivalent to renaming a function call. Illegal\n+        --  if the literal is the result of constant-folding an attribute\n+        --  reference that is not a function.\n \n         or else (Is_Entity_Name (Nam)\n                   and then Ekind (Entity (Nam)) = E_Enumeration_Literal\n@@ -1296,6 +1296,28 @@ package body Sem_Ch8 is\n          Set_Is_True_Constant    (Id, True);\n       end if;\n \n+      --  The entity of the renaming declaration needs to reflect whether the\n+      --  renamed object is volatile. Is_Volatile is set if the renamed object\n+      --  is volatile in the RM legality sense.\n+\n+      Set_Is_Volatile (Id, Is_Volatile_Object (Nam));\n+\n+      --  Treat as volatile if we just set the Volatile flag\n+\n+      if Is_Volatile (Id)\n+\n+        --  Or if we are renaming an entity which was marked this way\n+\n+        --  Are there more cases, e.g. X(J) where X is Treat_As_Volatile ???\n+\n+        or else (Is_Entity_Name (Nam)\n+                  and then Treat_As_Volatile (Entity (Nam)))\n+      then\n+         Set_Treat_As_Volatile (Id, True);\n+      end if;\n+\n+      --  Now make the link to the renamed object\n+\n       Set_Renamed_Object (Id, Nam);\n \n       --  Implementation-defined aspect specifications can appear in a renaming"}, {"sha": "3e74a2c2fa2f0499dcf51ba47e52038e10dddcbd", "filename": "gcc/ada/sem_mech.ads", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_mech.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Fsem_mech.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.ads?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,7 @@ package Sem_Mech is\n    -------------------------------------------------\n \n    --  For parameters passed to subprograms, and for function return values,\n-   --  as passing mechanism is defined. The entity attribute Mechanism returns\n+   --  a passing mechanism is defined. The entity attribute Mechanism returns\n    --  an indication of the mechanism, and Set_Mechanism can be used to set\n    --  the mechanism. At the program level, there are three ways to explicitly\n    --  set the mechanism:\n@@ -87,14 +87,14 @@ package Sem_Mech is\n    --  special information) is determined by the backend in accordance with\n    --  requirements imposed by the ABI as interpreted for Ada.\n \n-   By_Descriptor      : constant Mechanism_Type := -3;\n-   By_Descriptor_UBS  : constant Mechanism_Type := -4;\n-   By_Descriptor_UBSB : constant Mechanism_Type := -5;\n-   By_Descriptor_UBA  : constant Mechanism_Type := -6;\n-   By_Descriptor_S    : constant Mechanism_Type := -7;\n-   By_Descriptor_SB   : constant Mechanism_Type := -8;\n-   By_Descriptor_A    : constant Mechanism_Type := -9;\n-   By_Descriptor_NCA  : constant Mechanism_Type := -10;\n+   By_Descriptor            : constant Mechanism_Type := -3;\n+   By_Descriptor_UBS        : constant Mechanism_Type := -4;\n+   By_Descriptor_UBSB       : constant Mechanism_Type := -5;\n+   By_Descriptor_UBA        : constant Mechanism_Type := -6;\n+   By_Descriptor_S          : constant Mechanism_Type := -7;\n+   By_Descriptor_SB         : constant Mechanism_Type := -8;\n+   By_Descriptor_A          : constant Mechanism_Type := -9;\n+   By_Descriptor_NCA        : constant Mechanism_Type := -10;\n    By_Short_Descriptor      : constant Mechanism_Type := -11;\n    By_Short_Descriptor_UBS  : constant Mechanism_Type := -12;\n    By_Short_Descriptor_UBSB : constant Mechanism_Type := -13;\n@@ -115,10 +115,13 @@ package Sem_Mech is\n    --     A      contiguous array\n    --     NCA    non-contiguous array\n    --\n-   --  Note: the form with no suffix is used if the Import/Export pragma\n-   --  uses the simple form of the mechanism name where no descriptor\n-   --  type is supplied. In this case the back end assigns a descriptor\n-   --  type based on the Ada type in accordance with the OpenVMS ABI.\n+   --  Note: the form with no suffix is used if the Import/Export pragma uses\n+   --  the simple form of the mechanism name (no descriptor type is supplied).\n+   --  In this case the back end assigns a descriptor type based on the Ada\n+   --  type in accordance with the OpenVMS ABI.\n+\n+   pragma Assert (Mechanism_Type'First = -18);\n+   --  Check definition in types is right!\n \n    subtype Descriptor_Codes is Mechanism_Type\n      range By_Short_Descriptor_NCA .. By_Descriptor;"}, {"sha": "061dfc26c684620fe9dd03b9c30df17c892cfef5", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e18b4f5612d2578757dd65ccee6800324a59e9/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=28e18b4f5612d2578757dd65ccee6800324a59e9", "patch": "@@ -795,7 +795,7 @@ package Types is\n    --  mechanism. See specification of Sem_Mech for full details. The following\n    --  subtype is used to represent values of this type:\n \n-   subtype Mechanism_Type is Int range -18 .. Int'Last;\n+   subtype Mechanism_Type is Int range -18 .. 0;\n    --  Type used to represent a mechanism value. This is a subtype rather than\n    --  a type to avoid some annoying processing problems with certain routines\n    --  in Einfo (processing them to create the corresponding C)."}]}