{"sha": "d2c1325af0ee17d224af50909f0dbcc70526b98d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjMTMyNWFmMGVlMTdkMjI0YWY1MDkwOWYwZGJjYzcwNTI2Yjk4ZA==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-04T11:51:43Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-04T11:51:43Z"}, "message": "macro1.c: Add more macro expansion tests.\n\n\t* gcc.dg/cpp/macro1.c: Add more macro expansion tests.\n\t* gcc.dg/cpp/strify2.c: Same.\n\nFrom-SVN: r34867", "tree": {"sha": "b64734073889e8832a72e9662d6c7a142879f5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64734073889e8832a72e9662d6c7a142879f5fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2c1325af0ee17d224af50909f0dbcc70526b98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c1325af0ee17d224af50909f0dbcc70526b98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c1325af0ee17d224af50909f0dbcc70526b98d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c1325af0ee17d224af50909f0dbcc70526b98d/comments", "author": null, "committer": null, "parents": [{"sha": "0a336522af17ebf153c8e3cd993dcc399714a5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a336522af17ebf153c8e3cd993dcc399714a5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a336522af17ebf153c8e3cd993dcc399714a5d8"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "2824980484e6747526dfaf03a2da5d316c0688cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c1325af0ee17d224af50909f0dbcc70526b98d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c1325af0ee17d224af50909f0dbcc70526b98d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2c1325af0ee17d224af50909f0dbcc70526b98d", "patch": "@@ -1,3 +1,8 @@\n+2000-07-04  Neil Booth  <NeilB@earthling.net>\n+\n+\t* gcc.dg/cpp/macro1.c: Add more macro expansion tests.\n+\t* gcc.dg/cpp/strify2.c: Same.\n+\n 2000-07-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* testsuite/gcc.dg/cpp/19951025-1.c: Adjust regexps."}, {"sha": "e7235f577c26a90c68d823a6ecd6e6fb19d142fe", "filename": "gcc/testsuite/gcc.dg/cpp/macro1.c", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c1325af0ee17d224af50909f0dbcc70526b98d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c1325af0ee17d224af50909f0dbcc70526b98d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro1.c?ref=d2c1325af0ee17d224af50909f0dbcc70526b98d", "patch": "@@ -2,21 +2,26 @@\n \n /* { dg-do run } */\n \n-/* Tests various macros are correctly expanded.  */\n+/* Tests various macro abuse is correctly expanded.  */\n \n extern int puts (const char *);\n extern void abort (void);\n-#define err(str) do { puts(str); abort(); } while (0)\n+extern int strcmp(const char *s1, const char *s2);\n \n+#define err(str) do { puts(str); abort(); } while (0)\n #define j(x, y) x + y\n #define k(x, y) j(x + 2, y +\n+#define glue(x, y) x ## y\n+#define xglue(x, y) glue(x, y)\n \n+/* Functions called when macros are left unexpanded.  */\n int q(int x)\t\t{return x + 40;}\n int B(int x)\t\t{return x + 20;}\n int foo(int x)\t\t{return x + 10;}\n int bar(int x, int y)\t{return x + y;}\n int baz(int x, int y)\t{return x + y;}\n int toupper(int x)\t{return x + 32;}\n+int M(int x)\t\t{return x * 2;}\n \n int main (int argc, char *argv[])\n {\n@@ -48,25 +53,76 @@ int main (int argc, char *argv[])\n   if (apply(bar, baz) != 42)\t/* foo(foo(baz(22, 0))).  */\n     err (\"apply bar baz\");\n \n+  /* Taken from glibc.  */\n #define __tobody(c, f) f (c)\n #define toupper(c) __tobody (c, toupper)\n   if (toupper (10) != 42)\t/* toupper (10). */\n     err (\"toupper\");\n \n+  /* This tests that M gets expanded the right no. of times.  Too many\n+     times, and we get excess \"2 +\"s and the wrong sum.  Derived from\n+     nested stpcpy in dggettext.c.  */\n+#define M(x) 2 + M(x)\n+#define stpcpy(a) M(a)\n+  if (stpcpy (stpcpy (9)) != 42) /*  2 + M (2 + M (9)) */\n+    err (\"stpcpy\");\n+\n+  /* Another test derived from nested stpcpy's of dggettext.c.  Uses\n+     macro A(x) and function B(x) as defined above.  The problem was\n+     the same - excess \"1 +\"s and the wrong sum.  */\n+#define B(x) 1 + B(x)\n+#define C(x) A(x)\n+  if (C(B(0)) != 42)\t\t/* 1 + B (1 + B (0)) */\n+    err (\"C\");\n+\n+  /* More tests derived from gcc itself - the use of XEXP and COST.\n+     These first two should both expand to the same thing.  */\n+  {\n+    int insn = 6, i = 2, b = 2;\n+#define XEXP(RTX, N)  (RTX * N + 2)\n+#define PATTERN(INSN) XEXP(INSN, 3)\n+    if (XEXP (PATTERN (insn), i) != 42)\t/* ((insn * 3 + 2) * i + 2) */\n+      err (\"XEXP (PATTERN)\");\n+    if (XEXP (XEXP (insn, 3), i) != 42)\t/* ((insn * 3 + 2) * i + 2) */\n+      err (\"XEXP (XEXP)\");\n+\n+#define COST(X) XEXP (XEXP (X, 4), 4)\n+    if (COST (b) != 42)\t\t/* ((b * 4 + 2) * 4 + 2) */\n+      err (\"COST\");\n+  }\n+\n+  /* This tests macro recursion and expand-after-paste.  */\n+#define FORTYTWO \"forty\"\n+#define TWO TWO \"-two\"\n+  if (strcmp (glue(FORTY, TWO), \"forty\"))\n+    err (\"glue\");\n+  if (strcmp (xglue(FORTY, TWO), \"forty-two\"))\n+    err (\"xglue\");\n+\n+  /* Test ability to call macro over multiple logical lines.  */\n+  if (q\n+      (42) != 42\n+      || q (\n+\t 42) != 42\n+      || q (42\n+\t    ) != 42\n+      || q\n+      (\n+       42\n+       )\n+      != 42)\n+    err (\"q over multiple lines\");\n+\n+  /* Corner case.  Test that macro expansion is turned off for later\n+     q, when not at start but at end of argument context, and supplied\n+     with the '(' necessary for expansion.  */\n+  if (q(1 + q)(1) != 42)\t/* 1 + q(1) */\n+    err (\"Nested q\");\n+\n   /* This looks like it has too many ')', but it hasn't.  */\n   if (k(1, 4) 35) != 42)\n     err (\"k\");\n \n-    /*#define B(x) Z B(x)\n-#define XEXP(RTX, N)  RTX->fld[N].rtx\n-#define PATTERN(INSN) XEXP(INSN, 3)\n-#define COST(X) XEXP (XEXP (x, 0), 0)\n-#define M(a) OK M (a)\n-#define stpcpy(a) M(a)\n-#define C(x) A(x)\n-XEXP (PATTERN (insn), i);\n-XEXP (XEXP (insn, 3), i);\n-COST (b)*/\n-\n+  /* Phew! */\n   return 0;\n }"}, {"sha": "18777bd9b7e9adceef52dde902bdfab1a0f706b6", "filename": "gcc/testsuite/gcc.dg/cpp/strify2.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c1325af0ee17d224af50909f0dbcc70526b98d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fstrify2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c1325af0ee17d224af50909f0dbcc70526b98d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fstrify2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fstrify2.c?ref=d2c1325af0ee17d224af50909f0dbcc70526b98d", "patch": "@@ -16,8 +16,9 @@ extern void abort (void);\n \n int main (int argc, char *argv[])\n {\n-  str (\\);\t\t\t/* { dg-warning \"valid string\" \"str(\\)\" } */\n-  str (\\\\\\);\t\t\t/* { dg-warning \"valid string\" \"str(\\\\\\)\" } */\n+  str (\\);\t\t/* { dg-warning \"valid string\" \"str(\\\\)\" } */\n+  str (\\\\);\t\t/* OK.  */\n+  str (\\\\\\);\t\t/* { dg-warning \"valid string\" \"str(\\\\\\\\\\\\)\" } */\n \n   /* This also serves as a useful test of the value of __INCLUDE_LEVEL.  */\n   if (strcmp (xstr (__INCLUDE_LEVEL__), \"0\"))\n@@ -26,6 +27,9 @@ int main (int argc, char *argv[])\n   if (strcmp(str (__INCLUDE_LEVEL__), \"__INCLUDE_LEVEL__\"))\n     err (\"macro name\");\n \n+  if (strcmp(str(), \"\") || strcmp(str( ), \"\"))\n+    err (\"empty string\");\n+\n   if (strcmp(str (\"s\\n\"), \"\\\"s\\\\n\\\"\"))\n     err (\"quoted string\");\n "}]}