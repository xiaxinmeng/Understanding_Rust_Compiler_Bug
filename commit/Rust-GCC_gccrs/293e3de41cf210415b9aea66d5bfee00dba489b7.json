{"sha": "293e3de41cf210415b9aea66d5bfee00dba489b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzZTNkZTQxY2YyMTA0MTViOWFlYTY2ZDViZmVlMDBkYmE0ODliNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-26T20:59:21Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-26T20:59:21Z"}, "message": "(expand_main_function): Likewise.\n\n(put_reg_into_stack): New subroutine.\n(put_var_into_stack): Use that; handle CONCAT.\n\nFrom-SVN: r4991", "tree": {"sha": "9ea0b6c27bed92b34c1a68db4d8bb2192f0846d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea0b6c27bed92b34c1a68db4d8bb2192f0846d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/293e3de41cf210415b9aea66d5bfee00dba489b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293e3de41cf210415b9aea66d5bfee00dba489b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293e3de41cf210415b9aea66d5bfee00dba489b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293e3de41cf210415b9aea66d5bfee00dba489b7/comments", "author": null, "committer": null, "parents": [{"sha": "d6cf3187658e1ba6db2a2502e8715dfbbf93d40b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cf3187658e1ba6db2a2502e8715dfbbf93d40b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cf3187658e1ba6db2a2502e8715dfbbf93d40b"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "3410956e71f39eaeac16a22d45c4c50d50f50132", "filename": "gcc/function.c", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293e3de41cf210415b9aea66d5bfee00dba489b7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293e3de41cf210415b9aea66d5bfee00dba489b7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=293e3de41cf210415b9aea66d5bfee00dba489b7", "patch": "@@ -55,6 +55,15 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"output.h\"\n #include \"basic-block.h\"\n \n+/* Some systems use __main in a way incompatible with its use in gcc, in these\n+   cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n+   give the same symbol without quotes for an alternative entry point.  You\n+   must define both, or niether. */\n+#ifndef NAME__MAIN\n+#define NAME__MAIN \"__main\"\n+#define SYMBOL__MAIN __main\n+#endif\n+\n /* Round a value to the lowest integer less than it that is a multiple of\n    the required alignment.  Avoid using division in case the value is\n    negative.  Assume the alignment is a power of two.  */\n@@ -301,6 +310,7 @@ void fixup_gotos ();\n static tree round_down ();\n static rtx round_trampoline_addr ();\n static rtx fixup_stack_1 ();\n+static void put_reg_into_stack ();\n static void fixup_var_refs ();\n static void fixup_var_refs_insns ();\n static void fixup_var_refs_1 ();\n@@ -815,7 +825,6 @@ put_var_into_stack (decl)\n      tree decl;\n {\n   register rtx reg;\n-  register rtx new = 0;\n   enum machine_mode promoted_mode, decl_mode;\n   struct function *function = 0;\n   tree context = decl_function_context (decl);\n@@ -853,8 +862,54 @@ put_var_into_stack (decl)\n       decl_mode = promoted_mode = GET_MODE (reg);\n     }\n \n-  if (GET_CODE (reg) != REG)\n-    return;\n+  /* Now we should have a value that resides in one or more pseudo regs.  */\n+\n+  if (GET_CODE (reg) == REG)\n+    put_reg_into_stack (function, reg, TREE_TYPE (decl),\n+\t\t\tpromoted_mode, decl_mode);\n+  else if (GET_CODE (reg) == CONCAT)\n+    {\n+      /* A CONCAT contains two pseudos; put them both in the stack.\n+\t We do it so they end up consecutive.  */\n+      enum machine_mode part_mode = GET_MODE (XEXP (reg, 0));\n+      tree part_type = TREE_TYPE (TREE_TYPE (decl));\n+#ifdef STACK_GROWS_DOWNWARD\n+      /* Since part 0 should have a lower address, do it second.  */\n+      put_reg_into_stack (function, XEXP (reg, 1),\n+\t\t\t  part_type, part_mode, part_mode);\n+      put_reg_into_stack (function, XEXP (reg, 0),\n+\t\t\t  part_type, part_mode, part_mode);\n+#else\n+      put_reg_into_stack (function, XEXP (reg, 0),\n+\t\t\t  part_type, part_mode, part_mode);\n+      put_reg_into_stack (function, XEXP (reg, 1),\n+\t\t\t  part_type, part_mode, part_mode);\n+#endif\n+\n+      /* Change the CONCAT into a combined MEM for both parts.  */\n+      PUT_CODE (reg, MEM);\n+      /* The two parts are in memory order already.\n+\t Use the lower parts address as ours.  */\n+      XEXP (reg, 0) = XEXP (XEXP (reg, 0), 0);\n+      /* Prevent sharing of rtl that might lose.  */\n+      if (GET_CODE (XEXP (reg, 0)) == PLUS)\n+\tXEXP (reg, 0) = copy_rtx (XEXP (reg, 0));\n+    }\n+}\n+\n+/* Subroutine of put_var_into_stack.  This puts a single pseudo reg REG\n+   into the stack frame of FUNCTION (0 means the current function).\n+   DECL_MODE is the machine mode of the user-level data type.\n+   PROMOTED_MODE is the machine mode of the register.  */\n+\n+static void\n+put_reg_into_stack (function, reg, type, promoted_mode, decl_mode)\n+     struct function *function;\n+     rtx reg;\n+     tree type;\n+     enum machine_mode promoted_mode, decl_mode;\n+{\n+  rtx new = 0;\n \n   if (function)\n     {\n@@ -881,10 +936,10 @@ put_var_into_stack (decl)\n   /* If this is a memory ref that contains aggregate components,\n      mark it as such for cse and loop optimize.  */\n   MEM_IN_STRUCT_P (reg)\n-    = (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n-       || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n-       || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n+    = (TREE_CODE (type) == ARRAY_TYPE\n+       || TREE_CODE (type) == RECORD_TYPE\n+       || TREE_CODE (type) == UNION_TYPE\n+       || TREE_CODE (type) == QUAL_UNION_TYPE);\n \n   /* Now make sure that all refs to the variable, previously made\n      when it was a register, are fixed up to be valid again.  */\n@@ -899,14 +954,14 @@ put_var_into_stack (decl)\n \t= (struct var_refs_queue *) oballoc (sizeof (struct var_refs_queue));\n       temp->modified = reg;\n       temp->promoted_mode = promoted_mode;\n-      temp->unsignedp = TREE_UNSIGNED (TREE_TYPE (decl));\n+      temp->unsignedp = TREE_UNSIGNED (type);\n       temp->next = function->fixup_var_refs_queue;\n       function->fixup_var_refs_queue = temp;\n       pop_obstacks ();\n     }\n   else\n     /* Variable is local; fix it up now.  */\n-    fixup_var_refs (reg, promoted_mode, TREE_UNSIGNED (TREE_TYPE (decl)));\n+    fixup_var_refs (reg, promoted_mode, TREE_UNSIGNED (type));\n }\n \f\n static void\n@@ -4265,7 +4320,7 @@ void\n expand_main_function ()\n {\n #if !defined (INIT_SECTION_ASM_OP) || defined (INVOKE__main)\n-  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__main\"), 0,\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, NAME__MAIN), 0,\n \t\t     VOIDmode, 0);\n #endif /* not INIT_SECTION_ASM_OP or INVOKE__main */\n }"}]}