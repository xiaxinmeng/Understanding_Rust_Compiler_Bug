{"sha": "d8f1376cd944b22104d586a65a0026fbdceb622d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmMTM3NmNkOTQ0YjIyMTA0ZDU4NmE2NWEwMDI2ZmJkY2ViNjIyZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-01T00:57:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-01T00:57:17Z"}, "message": "(expand_mult_highpart): Use wide_op1 for all multiplies.\n\n(expand_divmod): Undo Nov 12 change.  Instead, add special case\nfor division by MIN_INT in signed TRUNC_DIV_EXPR case.\n\nFrom-SVN: r9857", "tree": {"sha": "f86fee0b8a4fdcc8e8c860c6e8da0635c9fe4b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86fee0b8a4fdcc8e8c860c6e8da0635c9fe4b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f1376cd944b22104d586a65a0026fbdceb622d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f1376cd944b22104d586a65a0026fbdceb622d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f1376cd944b22104d586a65a0026fbdceb622d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f1376cd944b22104d586a65a0026fbdceb622d/comments", "author": null, "committer": null, "parents": [{"sha": "4c64a85262abba7799c4fddeb0a350c34fde4cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c64a85262abba7799c4fddeb0a350c34fde4cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c64a85262abba7799c4fddeb0a350c34fde4cb2"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "bf5b6527350fa29140673bd38e4c68195fe1e79f", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f1376cd944b22104d586a65a0026fbdceb622d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f1376cd944b22104d586a65a0026fbdceb622d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d8f1376cd944b22104d586a65a0026fbdceb622d", "patch": "@@ -2577,7 +2577,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp, max_cost)\n     {\n       mul_highpart_optab = unsignedp ? umul_highpart_optab : smul_highpart_optab;\n       target = expand_binop (mode, mul_highpart_optab,\n-\t\t\t     op0, op1, target, unsignedp, OPTAB_DIRECT);\n+\t\t\t     op0, wide_op1, target, unsignedp, OPTAB_DIRECT);\n       if (target)\n \treturn target;\n     }\n@@ -2588,7 +2588,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp, max_cost)\n     {\n       mul_highpart_optab = unsignedp ? smul_highpart_optab : umul_highpart_optab;\n       target = expand_binop (mode, mul_highpart_optab,\n-\t\t\t     op0, op1, target, unsignedp, OPTAB_DIRECT);\n+\t\t\t     op0, wide_op1, target, unsignedp, OPTAB_DIRECT);\n       if (target)\n \t/* We used the wrong signedness.  Adjust the result.  */\n \treturn expand_mult_highpart_adjust (mode, target, op0,\n@@ -2827,9 +2827,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n       case TRUNC_DIV_EXPR:\n \tif (op1_is_constant && HOST_BITS_PER_WIDE_INT >= size)\n \t  {\n-\t    if (unsignedp\n-\t\t|| (INTVAL (op1)\n-\t\t    == (HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (compute_mode) - 1)))\n+\t    if (unsignedp)\n \t      {\n \t\tunsigned HOST_WIDE_INT mh, ml;\n \t\tint pre_shift, post_shift;\n@@ -2958,6 +2956,10 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\telse if (d == -1)\n \t\t  quotient = expand_unop (compute_mode, neg_optab, op0,\n \t\t\t\t\t  tquotient, 0);\n+\t\telse if (INTVAL (op1) == (HOST_WIDE_INT) 1 << (size - 1))\n+\t\t  /* This case is not handled correctly below.  */\n+\t\t  quotient = emit_store_flag (tquotient, EQ, op0, op1,\n+\t\t\t\t\t      compute_mode, 1, 1);\n \t\telse if (EXACT_POWER_OF_2_OR_ZERO_P (d)\n \t\t\t && (rem_flag ? smod_pow2_cheap : sdiv_pow2_cheap))\n \t\t  ;"}]}