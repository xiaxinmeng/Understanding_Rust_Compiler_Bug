{"sha": "6097b0c31bc284cd0d68c67807e587596a0fb11d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5N2IwYzMxYmMyODRjZDBkNjhjNjc4MDdlNTg3NTk2YTBmYjExZA==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2004-01-27T20:36:02Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2004-01-27T20:36:02Z"}, "message": "Makefile.in (dwarf2out.o): Depend on input.h\n\n\n2004-01-27  Devang Patel  <dpatel@apple.com>\n\n        * Makefile.in (dwarf2out.o): Depend on input.h\n        * dbxout.c (dbx_debug_hooks): Add new empty hook for\n        imported_module_or_decl.\n        (xcoff_debug_hooks): Same.\n        * sdbout.c (sdb_debug_hooks): Same.\n        * vmsdbgout.c (vmsdbg_debug_hooks): Same.\n        * debug.c (do_nothing_debug_hooks): Same.\n        (debug_nothing_tree_tree): New function.\n        * debug.h (gcc_debug_hooks): New hook, imported_module_or_decl.\n        * dwarf2out.c: Include input.h.\n        (dwarf2_debug_hooks): Add new hook for imported_module_or_decl.\n        (remove_child_TAG): New function.\n        (dwarf_tag_name): Handle DW_TAG_imported_module.\n        (gen_subprogram_die): Equate decl number to declaration die. Do not\n        remove all children dies while reusing declaration die for definition.\n        Instead, selectively remove only formal parameters.\n        (gen_variable_die): Equate variable decl to declaration die.\n        (gen_field_die): Equate field decl to line number.\n        (force_namespace_die): Replace it with ...\n        (force_decl_die): ... this.\n        (force_type_die): New function.\n        (setup_namespace_context): Replace use of force_namespace_die() with\n        force_decl_die().\n        (gen_namespace_die): Same.\n        (dwarf2out_imported_module_or_decl): New function.\n\n        testsuite:\n\n        * g++.dg/debug/namespace1.C: New test.\n\n        cp:\n\n        * name-lookup.c: Include \"debug.h\"\n        (do_namespace_alias): Invoke debug_hooks to emit debug info\n        for namespace alias.\n        (do_local_using_decl): Invoke debug_hooks to emit debug info\n        for using decl.\n        (do_class_using_decl): Same.\n        (do_toplevel_using_decl): Same.\n        (do_using_directive): Same.\n        (cp_emit_debug_info_for_using): New function.\n        * Make-lang.in (cp/parser.o): Depend on debug.h\n        (cp/name-lookup.o): Same.\n\nFrom-SVN: r76746", "tree": {"sha": "22e0a88b1266b9aebde90de60d7105699f1310df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e0a88b1266b9aebde90de60d7105699f1310df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6097b0c31bc284cd0d68c67807e587596a0fb11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6097b0c31bc284cd0d68c67807e587596a0fb11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6097b0c31bc284cd0d68c67807e587596a0fb11d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6097b0c31bc284cd0d68c67807e587596a0fb11d/comments", "author": null, "committer": null, "parents": [{"sha": "e6aecf8efdef48bbf70b2712d742ac4a2cb16e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6aecf8efdef48bbf70b2712d742ac4a2cb16e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6aecf8efdef48bbf70b2712d742ac4a2cb16e02"}], "stats": {"total": 725, "additions": 636, "deletions": 89}, "files": [{"sha": "dce9a7c86b6cb3f14376ccde87deaa2d46f4e370", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -1,3 +1,31 @@\n+2004-01-27  Devang Patel <dpatel@apple.com>\n+\t\n+\t* Makefile.in (dwarf2out.o): Depend on input.h\n+\t* dbxout.c (dbx_debug_hooks): Add new empty hook for \n+\timported_module_or_decl.\n+\t(xcoff_debug_hooks): Same.\n+\t* sdbout.c (sdb_debug_hooks): Same.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Same.\n+\t* debug.c (do_nothing_debug_hooks): Same.\n+\t(debug_nothing_tree_tree): New function.\n+\t* debug.h (gcc_debug_hooks): New hook, imported_module_or_decl.\n+\t* dwarf2out.c: Include input.h.\n+\t(dwarf2_debug_hooks): Add new hook for imported_module_or_decl.\n+\t(remove_child_TAG): New function.\n+\t(dwarf_tag_name): Handle DW_TAG_imported_module.\n+\t(gen_subprogram_die): Equate decl number to declaration die. Do not\n+\tremove all children dies while reusing declaration die for definition.\n+\tInstead, selectively remove only formal parameters.\n+\t(gen_variable_die): Equate variable decl to declaration die.\n+\t(gen_field_die): Equate field decl to line number.\n+\t(force_namespace_die): Replace it with ...\n+\t(force_decl_die): ... this.\n+\t(force_type_die): New function.\n+\t(setup_namespace_context): Replace use of force_namespace_die() with\n+\tforce_decl_die().\n+\t(gen_namespace_die): Same.\n+\t(dwarf2out_imported_module_or_decl): New function.\n+\n 2004-01-27  Bob Wilson  <bob.wilson@acm.org>\n \t\n \t* config/xtensa/xtensa.c (xtensa_copy_incoming_a7): Remove SUBREG"}, {"sha": "ff2878ca6a5c31d7ed71115cb66456ec17a7977b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -1599,7 +1599,7 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    output.h $(DIAGNOSTIC_H) real.h hard-reg-set.h $(REGS_H) $(EXPR_H) \\\n    libfuncs.h toplev.h dwarf2out.h varray.h $(GGC_H) except.h dwarf2asm.h \\\n    $(TM_P_H) langhooks.h $(HASHTAB_H) gt-dwarf2out.h $(TARGET_H) cgraph.h \\\n-   $(MD5_H)\n+   $(MD5_H) input.h\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) flags.h $(RTL_H) \\\n    $(TREE_H) output.h dwarf2asm.h $(TM_P_H) $(GGC_H) gt-dwarf2asm.h\n vmsdbgout.o : vmsdbgout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\"}, {"sha": "2bd3883b0a01eb4b3e46f1e2c26a51dc582ce2d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -1,3 +1,17 @@\n+2004-01-27  Devang Patel  <dpatel@apple.com>\n+\n+\t* name-lookup.c: Include \"debug.h\"\n+\t(do_namespace_alias): Invoke debug_hooks to emit debug info\n+\tfor namespace alias.\n+\t(do_local_using_decl): Invoke debug_hooks to emit debug info \n+\tfor using decl.\n+\t(do_class_using_decl): Same.\n+\t(do_toplevel_using_decl): Same.\n+\t(do_using_directive): Same.\n+\t(cp_emit_debug_info_for_using): New function.\n+\t* Make-lang.in (cp/parser.o): Depend on debug.h\n+\t(cp/name-lookup.o): Same.\n+\n 2004-01-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-tree.h (language_function, lang_type_header): Use"}, {"sha": "3723a9fac90debe2b38c23f09f7b193b66d58614", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -262,11 +262,12 @@ cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h integrate.h insn-config\n   input.h $(PARAMS_H) debug.h tree-inline.h\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h real.h gt-cp-mangle.h $(TM_P_H)\n \n-cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h output.h\n+cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h \\\n+  output.h\n \n cp/name-lookup.o: cp/name-lookup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(CXX_TREE_H) timevar.h gt-cp-name-lookup.h toplev.h \\\n-\t$(DIAGNOSTIC_H) flags.h\n+\t$(DIAGNOSTIC_H) flags.h debug.h\n \n cp/cxx-pretty-print.o: cp/cxx-pretty-print.c $(CXX_PRETTY_PRINT_H) \\\n   $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h $(CXX_TREE_H)"}, {"sha": "30ff8e50822532707e95777a7d0db2570acca13f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"timevar.h\"\n #include \"toplev.h\"\n #include \"diagnostic.h\"\n+#include \"debug.h\"\n \n static cxx_scope *innermost_nonclass_level (void);\n static tree select_decl (cxx_binding *, int);\n@@ -42,7 +43,7 @@ static bool lookup_using_namespace (tree, cxx_binding *, tree,\n static bool qualified_lookup_using_namespace (tree, tree, cxx_binding *, int);\n static tree lookup_type_current_level (tree);\n static tree push_using_directive (tree);\n-\n+static void cp_emit_debug_info_for_using (tree, tree);\n \n /* The :: namespace.  */\n \n@@ -2226,6 +2227,7 @@ void\n do_local_using_decl (tree decl, tree scope, tree name)\n {\n   tree oldval, oldtype, newval, newtype;\n+  tree orig_decl = decl;\n \n   decl = validate_nonmember_using_decl (decl, scope, name);\n   if (decl == NULL_TREE)\n@@ -2264,6 +2266,10 @@ do_local_using_decl (tree decl, tree scope, tree name)\n     }\n   if (newtype)\n     set_identifier_type_value (name, newtype);\n+\n+  /* Emit debug info.  */\n+  if (!processing_template_decl)\n+    cp_emit_debug_info_for_using (orig_decl, current_scope());\n }\n \n /* Return the type that should be used when TYPE's name is preceded\n@@ -2829,6 +2835,15 @@ do_class_using_decl (tree decl)\n   type = dependent_type_p (scope) ? NULL_TREE : void_type_node;\n   value = build_lang_decl (USING_DECL, name, type);\n   DECL_INITIAL (value) = scope;\n+\n+  if (scope && !processing_template_decl)\n+    {\n+      tree r;\n+\n+      r = lookup_qualified_name (scope, name, false, false);\n+      if (r && TREE_CODE (r) != ERROR_MARK)\n+\tcp_emit_debug_info_for_using (r, scope);\n+    }\n   return value;\n }\n \n@@ -3135,6 +3150,9 @@ do_namespace_alias (tree alias, tree namespace)\n   DECL_NAMESPACE_ALIAS (alias) = namespace;\n   DECL_EXTERNAL (alias) = 1;\n   pushdecl (alias);\n+\n+  /* Emit debug info for namespace alias.  */\n+  (*debug_hooks->global_decl) (alias);\n }\n \n /* Like pushdecl, only it places X in the current namespace,\n@@ -3238,6 +3256,7 @@ void\n do_toplevel_using_decl (tree decl, tree scope, tree name)\n {\n   tree oldval, oldtype, newval, newtype;\n+  tree orig_decl = decl;\n   cxx_binding *binding;\n \n   decl = validate_nonmember_using_decl (decl, scope, name);\n@@ -3251,6 +3270,10 @@ do_toplevel_using_decl (tree decl, tree scope, tree name)\n \n   do_nonmember_using_decl (scope, name, oldval, oldtype, &newval, &newtype);\n \n+  /* Emit debug info.  */\n+  if (!processing_template_decl)\n+    cp_emit_debug_info_for_using (orig_decl, current_namespace);\n+\n   /* Copy declarations found.  */\n   if (newval)\n     binding->value = newval;\n@@ -3264,6 +3287,8 @@ do_toplevel_using_decl (tree decl, tree scope, tree name)\n void\n do_using_directive (tree namespace)\n {\n+  tree context = NULL_TREE;\n+\n   if (building_stmt_tree ())\n     add_stmt (build_stmt (USING_STMT, namespace));\n   \n@@ -3285,10 +3310,21 @@ do_using_directive (tree namespace)\n     }\n   namespace = ORIGINAL_NAMESPACE (namespace);\n   if (!toplevel_bindings_p ())\n-    push_using_directive (namespace);\n+    {\n+      push_using_directive (namespace);\n+      context = current_scope ();\n+    }\n   else\n-    /* direct usage */\n-    add_using_namespace (current_namespace, namespace, 0);\n+    {\n+      /* direct usage */\n+      add_using_namespace (current_namespace, namespace, 0);\n+      if (current_namespace != global_namespace)\n+\tcontext = current_namespace;\n+    }\n+      \n+  /* Emit debugging info.  */\n+  if (!processing_template_decl)\n+    (*debug_hooks->imported_module_or_decl) (namespace, context);\n }\n \n /* Deal with a using-directive seen by the parser.  Currently we only\n@@ -4803,4 +4839,32 @@ pop_everything (void)\n     verbatim (\"XXX leaving pop_everything ()\\n\");\n }\n \n+/* Emit debugging information for using declarations and directives.\n+   If input tree is overloaded fn then emit debug info for all \n+   candidates.  */\n+\n+static void\n+cp_emit_debug_info_for_using (tree t, tree context)\n+{\n+  /* Ignore this FUNCTION_DECL if it refers to a builtin declaration \n+     of a builtin function.  */\n+  if (TREE_CODE (t) == FUNCTION_DECL \n+      && DECL_EXTERNAL (t)\n+      && DECL_BUILT_IN (t))\n+    return;\n+\n+  /* Do not supply context to imported_module_or_decl, if\n+     it is a global namespace.  */\n+  if (context == global_namespace)\n+    context = NULL_TREE;\n+  \n+  if (BASELINK_P (t))\n+    t = BASELINK_FUNCTIONS (t);\n+  \n+  /* FIXME: Handle TEMPLATE_DECLs.  */\n+  for (t = OVL_CURRENT (t); t; t = OVL_NEXT (t))\n+    if (TREE_CODE (t) != TEMPLATE_DECL)\n+      (*debug_hooks->imported_module_or_decl) (t, context);\n+  }\n+\n #include \"gt-cp-name-lookup.h\""}, {"sha": "3561f434f41191409b9460251708fd24dc348e71", "filename": "gcc/dbxout.c", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -382,23 +382,25 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_end_source_file,\n   dbxout_begin_block,\n   dbxout_end_block,\n-  debug_true_tree,\t\t/* ignore_block */\n-  dbxout_source_line,\t\t/* source_line */\n-  dbxout_source_line,\t\t/* begin_prologue: just output line info */\n-  debug_nothing_int_charstar,\t/* end_prologue */\n-  debug_nothing_int_charstar,\t/* end_epilogue */\n+  debug_true_tree,\t\t         /* ignore_block */\n+  dbxout_source_line,\t\t         /* source_line */\n+  dbxout_source_line,\t\t         /* begin_prologue: just output \n+\t\t\t\t\t    line info */\n+  debug_nothing_int_charstar,\t         /* end_prologue */\n+  debug_nothing_int_charstar,\t         /* end_epilogue */\n #ifdef DBX_FUNCTION_FIRST\n   dbxout_begin_function,\n #else\n-  debug_nothing_tree,\t\t/* begin_function */\n+  debug_nothing_tree,\t\t         /* begin_function */\n #endif\n-  debug_nothing_int,\t\t/* end_function */\n+  debug_nothing_int,\t\t         /* end_function */\n   dbxout_function_decl,\n-  dbxout_global_decl,\t\t/* global_decl */\n-  debug_nothing_tree,\t\t/* deferred_inline_function */\n-  debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx,\t\t/* label */\n-  dbxout_handle_pch\t\t/* handle_pch */\n+  dbxout_global_decl,\t\t         /* global_decl */\n+  debug_nothing_tree_tree,               /* imported_module_or_decl */\n+  debug_nothing_tree,\t\t         /* deferred_inline_function */\n+  debug_nothing_tree,\t\t         /* outlining_inline_function */\n+  debug_nothing_rtx,\t\t         /* label */\n+  dbxout_handle_pch\t\t         /* handle_pch */\n };\n #endif /* DBX_DEBUGGING_INFO  */\n \n@@ -413,19 +415,20 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   dbxout_end_source_file,\n   xcoffout_begin_block,\n   xcoffout_end_block,\n-  debug_true_tree,\t\t/* ignore_block */\n+  debug_true_tree,\t\t         /* ignore_block */\n   xcoffout_source_line,\n-  xcoffout_begin_prologue,\t/* begin_prologue */\n-  debug_nothing_int_charstar,\t/* end_prologue */\n+  xcoffout_begin_prologue,\t         /* begin_prologue */\n+  debug_nothing_int_charstar,\t         /* end_prologue */\n   xcoffout_end_epilogue,\n-  debug_nothing_tree,\t\t/* begin_function */\n+  debug_nothing_tree,\t\t         /* begin_function */\n   xcoffout_end_function,\n-  debug_nothing_tree,\t\t/* function_decl */\n-  dbxout_global_decl,\t\t/* global_decl */\n-  debug_nothing_tree,\t\t/* deferred_inline_function */\n-  debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx,\t\t/* label */\n-  dbxout_handle_pch\t\t/* handle_pch */\n+  debug_nothing_tree,\t\t         /* function_decl */\n+  dbxout_global_decl,\t\t         /* global_decl */\n+  debug_nothing_tree_tree,               /* imported_module_or_decl */\n+  debug_nothing_tree,\t\t         /* deferred_inline_function */\n+  debug_nothing_tree,\t\t         /* outlining_inline_function */\n+  debug_nothing_rtx,\t\t         /* label */\n+  dbxout_handle_pch\t\t         /* handle_pch */\n };\n #endif /* XCOFF_DEBUGGING_INFO  */\n \f"}, {"sha": "03b0acc5648351680781299b0dc6ea36f67df20f", "filename": "gcc/debug.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -30,21 +30,22 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int,\n-  debug_nothing_int_int,\t/* begin_block */\n-  debug_nothing_int_int,\t/* end_block */\n-  debug_true_tree,\t\t/* ignore_block */\n-  debug_nothing_int_charstar,\t/* source_line */\n-  debug_nothing_int_charstar,\t/* begin_prologue */\n-  debug_nothing_int_charstar,\t/* end_prologue */\n-  debug_nothing_int_charstar,\t/* end_epilogue */\n-  debug_nothing_tree,\t\t/* begin_function */\n-  debug_nothing_int,\t\t/* end_function */\n-  debug_nothing_tree,\t\t/* function_decl */\n-  debug_nothing_tree,\t\t/* global_decl */\n-  debug_nothing_tree,\t\t/* deferred_inline_function */\n-  debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx,\t\t/* label */\n-  debug_nothing_int\t\t/* handle_pch */\n+  debug_nothing_int_int,\t         /* begin_block */\n+  debug_nothing_int_int,\t         /* end_block */\n+  debug_true_tree,\t\t         /* ignore_block */\n+  debug_nothing_int_charstar,\t         /* source_line */\n+  debug_nothing_int_charstar,\t         /* begin_prologue */\n+  debug_nothing_int_charstar,\t         /* end_prologue */\n+  debug_nothing_int_charstar,\t         /* end_epilogue */\n+  debug_nothing_tree,\t\t         /* begin_function */\n+  debug_nothing_int,\t\t         /* end_function */\n+  debug_nothing_tree,\t\t         /* function_decl */\n+  debug_nothing_tree,\t\t         /* global_decl */\n+  debug_nothing_tree_tree,               /* imported_module_or_decl */\n+  debug_nothing_tree,\t\t         /* deferred_inline_function */\n+  debug_nothing_tree,\t\t         /* outlining_inline_function */\n+  debug_nothing_rtx,\t\t         /* label */\n+  debug_nothing_int\t\t         /* handle_pch */\n };\n \n /* This file contains implementations of each debug hook that do\n@@ -60,6 +61,12 @@ debug_nothing_tree (tree decl ATTRIBUTE_UNUSED)\n {\n }\n \n+void\n+debug_nothing_tree_tree (tree t1 ATTRIBUTE_UNUSED,\n+\t\t\t tree t2 ATTRIBUTE_UNUSED)\n+{\n+}\n+\n bool\n debug_true_tree (tree block ATTRIBUTE_UNUSED)\n {"}, {"sha": "fee3bc6400ca9b989ccd23f3c6256ec9513eeb6d", "filename": "gcc/debug.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -89,6 +89,9 @@ struct gcc_debug_hooks\n      compilation proper has finished.  */\n   void (* global_decl) (tree decl);\n \n+  /* Debug information for imported modules and declarations.  */\n+  void (* imported_module_or_decl) (tree decl, tree context);\n+\n   /* DECL is an inline function, whose body is present, but which is\n      not being output at this point.  */\n   void (* deferred_inline_function) (tree decl);\n@@ -116,6 +119,7 @@ extern void debug_nothing_int_charstar (unsigned int, const char *);\n extern void debug_nothing_int (unsigned int);\n extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);\n+extern void debug_nothing_tree_tree (tree, tree);\n extern bool debug_true_tree (tree);\n extern void debug_nothing_rtx (rtx);\n "}, {"sha": "f9d86b5f7763e252aadb099bc604a0982e9d00cd", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 181, "deletions": 19, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -65,6 +65,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"hashtab.h\"\n #include \"cgraph.h\"\n+#include \"input.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n static void dwarf2out_source_line (unsigned int, const char *);\n@@ -3248,6 +3249,7 @@ static void dwarf2out_begin_block (unsigned, unsigned);\n static void dwarf2out_end_block (unsigned, unsigned);\n static bool dwarf2out_ignore_block (tree);\n static void dwarf2out_global_decl (tree);\n+static void dwarf2out_imported_module_or_decl (tree, tree);\n static void dwarf2out_abstract_function (tree);\n \n /* The debug hooks structure.  */\n@@ -3271,6 +3273,7 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   debug_nothing_int,\t\t/* end_function */\n   dwarf2out_decl,\t\t/* function_decl */\n   dwarf2out_global_decl,\n+  dwarf2out_imported_module_or_decl,\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   /* The DWARF 2 backend tries to reduce debugging bloat by not\n      emitting the abstract description of inline functions until\n@@ -3647,6 +3650,7 @@ static bool is_java (void);\n static bool is_fortran (void);\n static bool is_ada (void);\n static void remove_AT (dw_die_ref, enum dwarf_attribute);\n+static void remove_child_TAG (dw_die_ref, enum dwarf_tag);\n static inline void free_die (dw_die_ref);\n static void remove_children (dw_die_ref);\n static void add_child_die (dw_die_ref, dw_die_ref);\n@@ -3795,7 +3799,8 @@ static void decls_for_scope (tree, dw_die_ref, int);\n static int is_redundant_typedef (tree);\n static void gen_namespace_die (tree);\n static void gen_decl_die (tree, dw_die_ref);\n-static dw_die_ref force_namespace_die (tree);\n+static dw_die_ref force_decl_die (tree);\n+static dw_die_ref force_type_die (tree);\n static dw_die_ref setup_namespace_context (tree, dw_die_ref);\n static void declare_in_namespace (tree, dw_die_ref);\n static unsigned lookup_filename (const char *);\n@@ -4073,6 +4078,8 @@ dwarf_tag_name (unsigned int tag)\n       return \"DW_TAG_variable\";\n     case DW_TAG_volatile_type:\n       return \"DW_TAG_volatile_type\";\n+    case DW_TAG_imported_module:\n+      return \"DW_TAG_imported_module\";\n     case DW_TAG_MIPS_loop:\n       return \"DW_TAG_MIPS_loop\";\n     case DW_TAG_format_label:\n@@ -5049,6 +5056,34 @@ remove_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n     }\n }\n \n+/* Remove child die whose die_tag is specified tag.  */\n+\n+static void\n+remove_child_TAG (dw_die_ref die, enum dwarf_tag tag)\n+{\n+  dw_die_ref current, prev, next;\n+  current = die->die_child;\n+  prev = NULL;\n+  while (current != NULL)\n+    {\n+      if (current->die_tag == tag)\n+\t{\n+\t  next = current->die_sib;\n+\t  if (prev == NULL)\n+\t    die->die_child = next;\n+\t  else\n+\t    prev->die_sib = next;\n+\t  free_die (current);\n+\t  current = next;\n+\t}\n+      else\n+\t{\n+\t  prev = current;\n+\t  current = current->die_sib;\n+\t}\n+    }\n+}\n+\n /* Free up the memory used by DIE.  */\n \n static inline void\n@@ -10712,9 +10747,13 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t{\n \t  subr_die = old_die;\n \n-\t  /* Clear out the declaration attribute and the parm types.  */\n+\t  /* Clear out the declaration attribute and the formal parameters.\n+\t     Do not remove all children, because it is possible that this \n+\t     declaration die was forced using force_decl_die(). In such\n+\t     cases die that forced declaration die (e.g. TAG_imported_module)\n+\t     is one of the children that we do not want to remove.  */\n \t  remove_AT (subr_die, DW_AT_declaration);\n-\t  remove_children (subr_die);\n+\t  remove_child_TAG (subr_die, DW_TAG_formal_parameter);\n \t}\n       else\n \t{\n@@ -10762,8 +10801,10 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  /* The first time we see a member function, it is in the context of\n \t     the class to which it belongs.  We make sure of this by emitting\n \t     the class first.  The next time is the definition, which is\n-\t     handled above.  The two may come from the same source text.  */\n-\t  if (DECL_CONTEXT (decl) || DECL_ABSTRACT (decl))\n+\t     handled above.  The two may come from the same source text. \n+\n+\t     Note that force_decl_die() forces function declaration die. It is\n+\t     later reused to represent definition.  */\n \t    equate_decl_number_to_die (decl, subr_die);\n \t}\n     }\n@@ -10975,7 +11016,7 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n   if (declaration)\n     add_AT_flag (var_die, DW_AT_declaration, 1);\n \n-  if (class_or_namespace_scope_p (context_die) || DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT (decl) || declaration)\n     equate_decl_number_to_die (decl, var_die);\n \n   if (! declaration && ! DECL_ABSTRACT (decl))\n@@ -11147,6 +11188,9 @@ gen_field_die (tree decl, dw_die_ref context_die)\n     add_AT_unsigned (decl_die, DW_AT_accessibility, DW_ACCESS_protected);\n   else if (TREE_PRIVATE (decl))\n     add_AT_unsigned (decl_die, DW_AT_accessibility, DW_ACCESS_private);\n+\n+  /* Equate decl number to die, so that we can look up this decl later on.  */\n+  equate_decl_number_to_die (decl, decl_die);\n }\n \n #if 0\n@@ -11857,23 +11901,95 @@ is_redundant_typedef (tree decl)\n   return 0;\n }\n \n-/* Returns the DIE for namespace NS or aborts.\n+/* Returns the DIE for decl or aborts.  */\n \n-   Note that namespaces don't really have a lexical context, so there's no\n-   need to pass in a context_die.  They always go inside their containing\n-   namespace, or comp_unit_die if none.  */\n+static dw_die_ref\n+force_decl_die (tree decl)\n+{\n+  dw_die_ref decl_die;\n+  unsigned saved_external_flag;\n+  tree save_fn = NULL_TREE;\n+  decl_die = lookup_decl_die (decl);\n+  if (!decl_die)\n+    {\n+      dw_die_ref context_die;\n+      tree decl_context = DECL_CONTEXT (decl);\n+      if (decl_context)\n+\t{\n+\t  /* Find die that represents this context.  */\n+\t  if (TYPE_P (decl_context))\n+\t    context_die = force_type_die (decl_context);\n+\t  else\n+\t    context_die = force_decl_die (decl_context);\n+\t}\n+      else\n+\tcontext_die = comp_unit_die;\n+\n+      switch (TREE_CODE (decl))\n+\t{\n+\tcase FUNCTION_DECL:\n+\t  /* Clear current_function_decl, so that gen_subprogram_die thinks\n+\t     that this is a declaration. At this point, we just want to force\n+\t     declaration die.  */\n+\t  save_fn = current_function_decl;\n+\t  current_function_decl = NULL_TREE;\n+\t  gen_subprogram_die (decl, context_die);\n+\t  current_function_decl = save_fn; \n+\t  break;\n+\n+\tcase VAR_DECL:\n+\t  /* Set external flag to force declaration die. Restore it after\n+\t   gen_decl_die() call.  */\n+\t  saved_external_flag = DECL_EXTERNAL (decl);\n+\t  DECL_EXTERNAL (decl) = 1;\n+\t  gen_decl_die (decl, context_die);\n+\t  DECL_EXTERNAL (decl) = saved_external_flag;\n+\t  break;\n+\n+\tcase NAMESPACE_DECL:\n+\t  dwarf2out_decl (decl);\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+  \n+      /* See if we can find the die for this deci now.\n+\t If not then abort.  */\n+      if (!decl_die)\n+\tdecl_die = lookup_decl_die (decl);\n+      if (!decl_die)\n+\tabort ();\n+    }\n+  \n+  return decl_die;\n+}\n+\n+/* Returns the DIE for decl or aborts.  */\n \n static dw_die_ref\n-force_namespace_die (tree ns)\n+force_type_die (tree type)\n {\n-  dw_die_ref ns_die;\n+  dw_die_ref type_die;\n \n-  dwarf2out_decl (ns);\n-  ns_die = lookup_decl_die (ns);\n-  if (!ns_die)\n-    abort();\n+  type_die = lookup_type_die (root_type (type));\n+  if (!type_die)\n+    {\n+      dw_die_ref context_die;\n+      if (TYPE_CONTEXT (type))\n+\tif (TYPE_P (TYPE_CONTEXT (type)))\n+\t  context_die = force_type_die (TYPE_CONTEXT (type));\n+\telse\n+\t  context_die = force_decl_die (TYPE_CONTEXT (type));\n+      else\n+\tcontext_die = comp_unit_die;\n \n-  return ns_die;\n+      gen_type_die (type, context_die);\n+      type_die = lookup_type_die (root_type (type));\n+      if (!type_die)\n+\tabort();\n+    }\n+  return type_die;\n }\n \n /* Force out any required namespaces to be able to output DECL,\n@@ -11885,7 +12001,7 @@ setup_namespace_context (tree thing, dw_die_ref context_die)\n   tree context = DECL_P (thing) ? DECL_CONTEXT (thing) : TYPE_CONTEXT (thing);\n   if (context && TREE_CODE (context) == NAMESPACE_DECL)\n     /* Force out the namespace.  */\n-    context_die = force_namespace_die (context);\n+    context_die = force_decl_die (context);\n \n   return context_die;\n }\n@@ -11938,7 +12054,7 @@ gen_namespace_die (tree decl)\n \n       /* Force out the namespace we are an alias of, if necessary.  */\n       dw_die_ref origin_die\n-\t= force_namespace_die (DECL_ABSTRACT_ORIGIN (decl));\n+\t= force_decl_die (DECL_ABSTRACT_ORIGIN (decl));\n \n       /* Now create the namespace alias DIE.  */\n       dw_die_ref namespace_die\n@@ -12141,6 +12257,52 @@ dwarf2out_global_decl (tree decl)\n     dwarf2out_decl (decl);\n }\n \n+/* Output debug information for imported module or decl.  */ \n+ \n+static void\n+dwarf2out_imported_module_or_decl (tree decl, tree context)\n+{\n+  dw_die_ref imported_die, at_import_die;\n+  dw_die_ref scope_die;\n+  unsigned file_index;\n+  \n+  if (debug_info_level <= DINFO_LEVEL_TERSE)\n+    return;\n+\n+  if (!decl)\n+    abort ();\n+\n+  /* To emit DW_TAG_imported_module or DW_TAG_imported_decl, we need two DIEs.\n+     We need decl DIE for reference and scope die. First, get DIE for the decl \n+     itself.  */\n+\n+  /* Get the scope die for decl context. Use comp_unit_die for global module\n+     or decl. If die is not found for non globals, force new die.  */\n+  if (!context)\n+    scope_die = comp_unit_die;\n+  else if (TYPE_P (context))\n+    scope_die = force_type_die (context);\n+  else\n+    scope_die = force_decl_die (context);\n+\n+  /* For TYPE_DECL, lookup TREE_TYPE.  */\n+  if (TREE_CODE (decl) == TYPE_DECL)\n+    at_import_die = force_type_die (TREE_TYPE (decl));\n+  else\n+    at_import_die = force_decl_die (decl);\n+  \n+  /* OK, now we have DIEs for decl as well as scope. Emit imported die.  */ \n+  if (TREE_CODE (decl) == NAMESPACE_DECL)\n+    imported_die = new_die (DW_TAG_imported_module, scope_die, context);\n+  else\n+    imported_die = new_die (DW_TAG_imported_declaration, scope_die, context);\n+  \n+  file_index = lookup_filename (input_filename);\n+  add_AT_unsigned (imported_die, DW_AT_decl_file, file_index);\n+  add_AT_unsigned (imported_die, DW_AT_decl_line, input_line);\n+  add_AT_die_ref (imported_die, DW_AT_import, at_import_die);\n+}\n+\n /* Write the debugging output for DECL.  */\n \n void"}, {"sha": "d33b5c1cc1d8f418e795e13ed212cefedb2b1f91", "filename": "gcc/sdbout.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -307,34 +307,35 @@ static struct sdb_file *current_file;\n /* The debug hooks structure.  */\n const struct gcc_debug_hooks sdb_debug_hooks =\n {\n-  sdbout_init,\t\t\t/* init */\n-  sdbout_finish,\t\t/* finish */\n-  debug_nothing_int_charstar,\t/* define */\n-  debug_nothing_int_charstar,\t/* undef */\n-  sdbout_start_source_file,\t/* start_source_file */\n-  sdbout_end_source_file,\t/* end_source_file */\n-  sdbout_begin_block,\t\t/* begin_block */\n-  sdbout_end_block,\t\t/* end_block */\n-  debug_true_tree,\t\t/* ignore_block */\n-  sdbout_source_line,\t\t/* source_line */\n+  sdbout_init,\t\t\t         /* init */\n+  sdbout_finish,\t\t         /* finish */\n+  debug_nothing_int_charstar,\t         /* define */\n+  debug_nothing_int_charstar,\t         /* undef */\n+  sdbout_start_source_file,\t         /* start_source_file */\n+  sdbout_end_source_file,\t         /* end_source_file */\n+  sdbout_begin_block,\t\t         /* begin_block */\n+  sdbout_end_block,\t\t         /* end_block */\n+  debug_true_tree,\t\t         /* ignore_block */\n+  sdbout_source_line,\t\t         /* source_line */\n #ifdef MIPS_DEBUGGING_INFO\n   /* Defer on MIPS systems so that parameter descriptions follow\n      function entry.  */\n-  debug_nothing_int_charstar,\t/* begin_prologue */\n-  sdbout_end_prologue,\t\t/* end_prologue */\n+  debug_nothing_int_charstar,\t         /* begin_prologue */\n+  sdbout_end_prologue,\t\t         /* end_prologue */\n #else\n-  sdbout_begin_prologue,\t/* begin_prologue */\n-  debug_nothing_int_charstar,\t/* end_prologue */\n+  sdbout_begin_prologue,\t         /* begin_prologue */\n+  debug_nothing_int_charstar,\t         /* end_prologue */\n #endif\n-  sdbout_end_epilogue,\t\t/* end_epilogue */\n-  sdbout_begin_function,\t/* begin_function */\n-  sdbout_end_function,\t\t/* end_function */\n-  debug_nothing_tree,\t\t/* function_decl */\n-  sdbout_global_decl,\t\t/* global_decl */\n-  debug_nothing_tree,\t\t/* deferred_inline_function */\n-  debug_nothing_tree,\t\t/* outlining_inline_function */\n-  sdbout_label,\t\t\t/* label */\n-  debug_nothing_int\t\t/* handle_pch */\n+  sdbout_end_epilogue,\t\t         /* end_epilogue */\n+  sdbout_begin_function,\t         /* begin_function */\n+  sdbout_end_function,\t\t         /* end_function */\n+  debug_nothing_tree,\t\t         /* function_decl */\n+  sdbout_global_decl,\t\t         /* global_decl */\n+  debug_nothing_tree_tree,               /* imported_module_or_decl */\n+  debug_nothing_tree,\t\t         /* deferred_inline_function */\n+  debug_nothing_tree,\t\t         /* outlining_inline_function */\n+  sdbout_label,\t\t\t         /* label */\n+  debug_nothing_int\t\t         /* handle_pch */\n };\n \n /* Return a unique string to name an anonymous type.  */"}, {"sha": "53070cc64fde8aed7128e2a7c3c80464e09a8976", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -1,3 +1,7 @@\n+2004-01-27  Devang Patel <dpatel@apple.com>\n+\n+\t* g++.dg/debug/namespace1.C: New test.\n+\t\n 2004-01-27  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* gcc.dg/const-elim-1.c: Add xfail for strongarm-*-* and"}, {"sha": "c1954d6c192f9f47fdbca7e4a80b539baa4f654d", "filename": "gcc/testsuite/g++.dg/debug/namespace1.C", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnamespace1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnamespace1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnamespace1.C?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -0,0 +1,258 @@\n+/* Test DWARF namespace support. \n+   This test case is based on GDB testsuite test case.  */\n+/* { dg-do compile } */\n+\n+namespace AAA {\n+  char c;\n+  int i;\n+  int A_xyzq (int);\n+  char xyzq (char);\n+  class inA {\n+  public:\n+    int xx;\n+    int fum (int);\n+  };\n+};\n+\n+int AAA::inA::fum (int i)\n+{\n+  return 10 + i;\n+}\n+\n+namespace BBB {\n+  char c;\n+  int i;\n+  int B_xyzq (int);\n+  char xyzq (char);\n+\n+  namespace CCC {\n+    char xyzq (char);\n+  };\n+\n+  class Class {\n+  public:\n+    char xyzq (char);\n+    int dummy;\n+  };\n+};\n+\n+int AAA::A_xyzq (int x)\n+{\n+  return 2 * x;\n+}\n+\n+char AAA::xyzq (char c)\n+{\n+  return 'a';\n+}\n+\n+\n+int BBB::B_xyzq (int x)\n+{\n+  return 3 * x;\n+}\n+\n+char BBB::xyzq (char c)\n+{\n+  return 'b';\n+}\n+\n+char BBB::CCC::xyzq (char c)\n+{\n+  return 'z';\n+}\n+\n+char BBB::Class::xyzq (char c)\n+{\n+  return 'o';\n+}\n+\n+void marker1(void)\n+{\n+  return;\n+}\n+\n+namespace\n+{\n+  int X = 9;\n+\n+  namespace G\n+  {\n+    int Xg = 10;\n+\n+    namespace\n+    {\n+      int XgX = 11;\n+    }\n+  }\n+}\n+\n+namespace H\n+{\n+  int h = 14;\n+}\n+\n+namespace I = H;\n+\n+namespace J\n+{\n+  int j = 15;\n+}\n+\n+using namespace J;\n+\n+namespace K\n+{\n+  int k = 16;\n+}\n+\n+namespace L\n+{\n+  using namespace K;\n+}\n+\n+namespace O\n+{\n+  int o = 18;\n+}\n+\n+namespace P\n+{\n+  using namespace O;\n+}\n+\n+namespace Q\n+{\n+  using namespace P;\n+}\n+\n+namespace R\n+{\n+  int r1 = 19;\n+  int r2 = 20;\n+}\n+\n+using R::r1;\n+\n+namespace C\n+{\n+  int c = 1;\n+  int shadow = 12;\n+\n+  class CClass {\n+  public:\n+    int x;\n+    class NestedClass {\n+    public:\n+      int y;\n+    };\n+  };\n+\n+  namespace\n+  {\n+    int cX = 6;\n+    \n+    namespace F\n+    {\n+      int cXf = 7;\n+\n+      namespace\n+      {\n+\tint cXfX = 8;\n+      }\n+    }\n+  }\n+\n+  namespace C\n+  {\n+    int cc = 2;\n+  }\n+\n+  namespace E\n+  {\n+    int ce = 4;\n+  }\n+\n+  namespace D\n+  {\n+    int cd = 3;\n+    int shadow = 13;\n+\n+    namespace E\n+    {\n+      int cde = 5;\n+    }\n+\n+    namespace M\n+    {\n+      int cdm = 17;\n+    }\n+\n+    using namespace M;\n+\n+    void marker2 (void)\n+    {\n+      // NOTE: carlton/2003-04-23: I'm listing the expressions that I\n+      // plan to have GDB try to print out, just to make sure that the\n+      // compiler and I agree which ones should be legal!  It's easy\n+      // to screw up when testing the boundaries of namespace stuff.\n+      c;\n+      //cc;\n+      C::cc;\n+      cd;\n+      //C::D::cd;\n+      E::cde;\n+      shadow;\n+      //E::ce;\n+      cX;\n+      F::cXf;\n+      F::cXfX;\n+      X;\n+      G::Xg;\n+      //cXOtherFile;\n+      //XOtherFile;\n+      G::XgX;\n+      I::h;\n+      j;\n+      L::k;\n+      //k;\n+      cdm;\n+      Q::o;\n+      //o;\n+      r1;\n+      //r2;\n+\n+      return;\n+    }\n+\n+  }\n+}\n+\n+int main ()\n+{\n+  using AAA::inA;\n+  char c1;\n+\n+  using namespace BBB;\n+  \n+  c1 = xyzq ('x');\n+  c1 = AAA::xyzq ('x');\n+  c1 = BBB::CCC::xyzq ('m');\n+  \n+  inA ina;\n+\n+  ina.xx = 33;\n+\n+  int y;\n+\n+  y = AAA::A_xyzq (33);\n+  y += B_xyzq (44);\n+\n+  BBB::Class cl;\n+\n+  c1 = cl.xyzq('e');\n+\n+  marker1();\n+  \n+  C::D::marker2 ();\n+}"}, {"sha": "0a9062a7a3808350fb5bac0402f67707ad4d5430", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6097b0c31bc284cd0d68c67807e587596a0fb11d/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=6097b0c31bc284cd0d68c67807e587596a0fb11d", "patch": "@@ -186,10 +186,11 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    vmsdbgout_end_function,\n    vmsdbgout_decl,\n    vmsdbgout_global_decl,\n-   debug_nothing_tree,\t\t/* deferred_inline_function */\n+   debug_nothing_tree_tree,       /* imported_module_or_decl */\n+   debug_nothing_tree,\t\t  /* deferred_inline_function */\n    vmsdbgout_abstract_function,\n-   debug_nothing_rtx,\t\t/* label */\n-   debug_nothing_int\t\t/* handle_pch */\n+   debug_nothing_rtx,\t\t  /* label */\n+   debug_nothing_int\t\t  /* handle_pch */\n };\n \n /* Definitions of defaults for assembler-dependent names of various"}]}