{"sha": "d9da94a1f029bbd0a9387838122f40ee44b65af5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkYTk0YTFmMDI5YmJkMGE5Mzg3ODM4MTIyZjQwZWU0NGI2NWFmNQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-12-13T20:20:28Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-12-13T20:20:28Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r60103", "tree": {"sha": "95e51556922d8a7f3f56f0c115b1399e8d6fd65b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e51556922d8a7f3f56f0c115b1399e8d6fd65b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9da94a1f029bbd0a9387838122f40ee44b65af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9da94a1f029bbd0a9387838122f40ee44b65af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9da94a1f029bbd0a9387838122f40ee44b65af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9da94a1f029bbd0a9387838122f40ee44b65af5/comments", "author": null, "committer": null, "parents": [{"sha": "42e903c91c1b67e2e45ccf7ffc8e43fbc5889dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e903c91c1b67e2e45ccf7ffc8e43fbc5889dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e903c91c1b67e2e45ccf7ffc8e43fbc5889dcc"}], "stats": {"total": 112, "additions": 68, "deletions": 44}, "files": [{"sha": "a966a291b6262810d9a46b7fac8472bdd18af6c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9da94a1f029bbd0a9387838122f40ee44b65af5", "patch": "@@ -1,3 +1,14 @@\n+Fri Dec 13 16:02:27 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.c (sh_register_operand): New function.\n+\t(prepare_move_operands): Use it.\n+\t* sh.h (PREDICATE_CODES): Add entry for sh_register_operand.\n+\t* sh.md (movsi_media, movsi_media_nofpu): Allow stores of 0.\n+\t(movqi_media, movhi_media, movdi_media, movdi_media_nofpu): Likewise.\n+\t(movdf_media, movdf_media_nofpu, movv4sf_i, movsf_media): Likewise.\n+\t(movsf_media_nofpu, movv2hi_i, movv4hi_i, movv8qi_i): Likewise.\n+\t(movv2si_i): Likewise.\n+\n 2002-12-13  Jim Wilson  <wilson@redhat.com>\n \n \t* doc/extend.texi (Complex Numbers): Update info on debug info."}, {"sha": "75c9d263bfa575b3c140f0497d909e4f8b2b13ff", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d9da94a1f029bbd0a9387838122f40ee44b65af5", "patch": "@@ -724,7 +724,7 @@ prepare_move_operands (operands, mode)\n     {\n       /* Copy the source to a register if both operands aren't registers.  */\n       if (! register_operand (operands[0], mode)\n-\t  && ! register_operand (operands[1], mode))\n+\t  && ! sh_register_operand (operands[1], mode))\n \toperands[1] = copy_to_mode_reg (mode, operands[1]);\n \n       /* This case can happen while generating code to move the result\n@@ -7838,4 +7838,16 @@ sh_register_move_cost (mode, srcclass, dstclass)\n   return 2 * ((GET_MODE_SIZE (mode) + 3) / 4U);\n }\n \n+/* Like register_operand, but take into account that SHMEDIA can use\n+   the constant zero like a general register.  */\n+int\n+sh_register_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (op == CONST0_RTX (mode) && TARGET_SHMEDIA)\n+    return 1;\n+  return register_operand (op, mode);\n+}\n+\n #include \"gt-sh.h\""}, {"sha": "57ebbb311aff3c0ddb38310c690d914a6f85e3d8", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d9da94a1f029bbd0a9387838122f40ee44b65af5", "patch": "@@ -3227,6 +3227,7 @@ extern int rtx_equal_function_value_matters;\n   {\"mextr_bit_offset\", {CONST_INT}},\t\t\t\t\t\\\n   {\"noncommutative_float_operator\", {MINUS, DIV}},\t\t\t\\\n   {\"shmedia_6bit_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"sh_register_operand\", {REG, SUBREG, CONST_INT}},\t\t\t\\\n   {\"target_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"target_operand\", {SUBREG, REG, LABEL_REF, SYMBOL_REF, CONST, UNSPEC}},\\\n   {\"trunc_hi_operand\", {SUBREG, REG, TRUNCATE}},\t\t\t\\"}, {"sha": "4dbda27e4b9c1714b89b73f29f9c10127067d582", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9da94a1f029bbd0a9387838122f40ee44b65af5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=d9da94a1f029bbd0a9387838122f40ee44b65af5", "patch": "@@ -3463,16 +3463,16 @@\n \n (define_insn \"*movsi_media\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,f,m,f,r,f,*b,r,b\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,r,m,f,rU,f,f,r,*b,T\"))]\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,rU,m,f,rU,f,f,r,*b,T\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], SImode)\n-       || register_operand (operands[1], SImode))\"\n+       || sh_register_operand (operands[1], SImode))\"\n   \"@\n \tadd.l\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.l\t%m1, %0\n-\tst%M0.l\t%m0, %1\n+\tst%M0.l\t%m0, %N1\n \tfld%M1.s\t%m1, %0\n \tfst%M0.s\t%m0, %1\n \tfmov.ls\t%N1, %0\n@@ -3486,16 +3486,16 @@\n \n (define_insn \"*movsi_media_nofpu\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,*b,r,b\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,r,r,*b,T\"))]\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,rU,r,*b,T\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], SImode)\n-       || register_operand (operands[1], SImode))\"\n+       || sh_register_operand (operands[1], SImode))\"\n   \"@\n \tadd.l\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.l\t%m1, %0\n-\tst%M0.l\t%m0, %1\n+\tst%M0.l\t%m0, %N1\n \tptabs\t%1, %0\n \tgettr\t%1, %0\n \tpt\t%1, %0\"\n@@ -3635,15 +3635,15 @@\n \n (define_insn \"*movqi_media\"\n   [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:QI 1 \"general_movsrc_operand\" \"r,JS,m,r\"))]\n+\t(match_operand:QI 1 \"general_movsrc_operand\" \"r,JS,m,rU\"))]\n   \"TARGET_SHMEDIA\n    && (arith_reg_operand (operands[0], QImode)\n-       || arith_reg_operand (operands[1], QImode))\"\n+       || arith_reg_or_0_operand (operands[1], QImode))\"\n   \"@\n \tadd.l\t%1, r63, %0\n \tmovi\t%1, %0\n \tld%M1.ub\t%m1, %0\n-\tst%M0.b\t%m0, %1\"\n+\tst%M0.b\t%m0, %N1\"\n   [(set_attr \"type\" \"arith_media,arith_media,load_media,store_media\")])\n \n (define_expand \"movqi\"\n@@ -3687,16 +3687,16 @@\n \n (define_insn \"*movhi_media\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\" \"=r,r,r,r,m\")\n-\t(match_operand:HI 1 \"general_movsrc_operand\" \"r,JS,n,m,r\"))]\n+\t(match_operand:HI 1 \"general_movsrc_operand\" \"r,JS,n,m,rU\"))]\n   \"TARGET_SHMEDIA\n    && (arith_reg_operand (operands[0], HImode)\n-       || arith_reg_operand (operands[1], HImode))\"\n+       || arith_reg_or_0_operand (operands[1], HImode))\"\n   \"@\n \tadd.l\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.w\t%m1, %0\n-\tst%M0.w\t%m0, %1\"\n+\tst%M0.w\t%m0, %N1\"\n   [(set_attr \"type\" \"arith_media,arith_media,*,load_media,store_media\")])\n \n (define_split\n@@ -3791,16 +3791,16 @@\n \n (define_insn \"*movdi_media\"\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,f,m,f,r,f,*b,r,b\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rl,m,f,rU,f,f,r,*b,T\"))]\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rlU,m,f,rU,f,f,r,*b,T\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode))\"\n+       || sh_register_operand (operands[1], DImode))\"\n   \"@\n \tadd\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\n+\tst%M0.q\t%m0, %N1\n \tfld%M1.d\t%m1, %0\n \tfst%M0.d\t%m0, %1\n \tfmov.qd\t%N1, %0\n@@ -3814,16 +3814,16 @@\n \n (define_insn \"*movdi_media_nofpu\"\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,*b,r,b\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rl,r,*b,T\"))]\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rlU,r,*b,T\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode))\"\n+       || sh_register_operand (operands[1], DImode))\"\n   \"@\n \tadd\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\n+\tst%M0.q\t%m0, %N1\n \tptabs\t%1, %0\n \tgettr\t%1, %0\n \tpt\t%1, %0\"\n@@ -4083,10 +4083,10 @@\n \n (define_insn \"movdf_media\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=f,f,r,r,r,f,m,r,m\")\n-\t(match_operand:DF 1 \"general_movsrc_operand\" \"f,rU,f,r,F,m,f,m,r\"))]\n+\t(match_operand:DF 1 \"general_movsrc_operand\" \"f,rU,f,r,F,m,f,m,rU\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n+       || sh_register_operand (operands[1], DFmode))\"\n   \"@\n \tfmov.d\t%1, %0\n \tfmov.qd\t%N1, %0\n@@ -4096,20 +4096,20 @@\n \tfld%M1.d\t%m1, %0\n \tfst%M0.d\t%m0, %1\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\"\n+\tst%M0.q\t%m0, %N1\"\n   [(set_attr \"type\" \"fmove_media,fload_media,dfpconv_media,arith_media,*,fload_media,fstore_media,load_media,store_media\")])\n \n (define_insn \"movdf_media_nofpu\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:DF 1 \"general_movsrc_operand\" \"r,F,m,r\"))]\n+\t(match_operand:DF 1 \"general_movsrc_operand\" \"r,F,m,rU\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n+       || sh_register_operand (operands[1], DFmode))\"\n   \"@\n \tadd\t%1, r63, %0\n \t#\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\"\n+\tst%M0.q\t%m0, %N1\"\n   [(set_attr \"type\" \"arith_media,*,load_media,store_media\")])\n \n (define_split\n@@ -4693,7 +4693,7 @@\n \n (define_insn_and_split \"*movv4sf_i\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=f,f,m\")\n-\t(match_operand:V4SF 1 \"general_operand\" \"fU,m,f\"))]\n+\t(match_operand:V4SF 1 \"general_operand\" \"fU,m,fU\"))]\n   \"TARGET_SHMEDIA_FPU\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -4791,10 +4791,10 @@\n \n (define_insn \"movsf_media\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=f,f,r,r,r,f,m,r,m\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\" \"f,rU,f,r,F,m,f,m,r\"))]\n+\t(match_operand:SF 1 \"general_movsrc_operand\" \"f,rU,f,r,F,m,f,m,rU\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], SFmode)\n-       || register_operand (operands[1], SFmode))\"\n+       || sh_register_operand (operands[1], SFmode))\"\n   \"@\n \tfmov.s\t%1, %0\n \tfmov.ls\t%N1, %0\n@@ -4804,20 +4804,20 @@\n \tfld%M1.s\t%m1, %0\n \tfst%M0.s\t%m0, %1\n \tld%M1.l\t%m1, %0\n-\tst%M0.l\t%m0, %1\"\n+\tst%M0.l\t%m0, %N1\"\n   [(set_attr \"type\" \"fmove_media,fload_media,fpconv_media,arith_media,*,fload_media,fstore_media,load_media,store_media\")])\n \n (define_insn \"movsf_media_nofpu\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\" \"r,F,m,r\"))]\n+\t(match_operand:SF 1 \"general_movsrc_operand\" \"r,F,m,rU\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], SFmode)\n-       || register_operand (operands[1], SFmode))\"\n+       || sh_register_operand (operands[1], SFmode))\"\n   \"@\n \tadd.l\t%1, r63, %0\n \t#\n \tld%M1.l\t%m1, %0\n-\tst%M0.l\t%m0, %1\"\n+\tst%M0.l\t%m0, %N1\"\n   [(set_attr \"type\" \"arith_media,*,load_media,store_media\")])\n \n (define_split\n@@ -9155,16 +9155,16 @@\n \n (define_insn \"movv8qi_i\"\n   [(set (match_operand:V8QI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V8QI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rl\"))]\n+\t(match_operand:V8QI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V8QImode)\n-       || register_operand (operands[1], V8QImode))\"\n+       || sh_register_operand (operands[1], V8QImode))\"\n   \"@\n \tadd\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\"\n+\tst%M0.q\t%m0, %N1\"\n   [(set_attr \"type\"   \"arith_media,arith_media,*,load_media,store_media\")\n    (set_attr \"length\" \"4,4,16,4,4\")])\n \n@@ -9247,16 +9247,16 @@\n \n (define_insn \"movv2hi_i\"\n   [(set (match_operand:V2HI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V2HI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rl\"))]\n+\t(match_operand:V2HI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V2HImode)\n-       || register_operand (operands[1], V2HImode))\"\n+       || sh_register_operand (operands[1], V2HImode))\"\n   \"@\n \taddz.l\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.l\t%m1, %0\n-\tst%M0.l\t%m0, %1\"\n+\tst%M0.l\t%m0, %N1\"\n   [(set_attr \"type\"   \"arith_media,arith_media,*,load_media,store_media\")\n    (set_attr \"length\" \"4,4,16,4,4\")])\n \n@@ -9268,16 +9268,16 @@\n \n (define_insn \"movv4hi_i\"\n   [(set (match_operand:V4HI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V4HI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rl\"))]\n+\t(match_operand:V4HI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V4HImode)\n-       || register_operand (operands[1], V4HImode))\"\n+       || sh_register_operand (operands[1], V4HImode))\"\n   \"@\n \tadd\t%1, r63, %0\n \tmovi\t%1, %0\n \t#\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\"\n+\tst%M0.q\t%m0, %N1\"\n   [(set_attr \"type\"   \"arith_media,arith_media,*,load_media,store_media\")\n    (set_attr \"length\" \"4,4,16,4,4\")])\n \n@@ -9289,16 +9289,16 @@\n \n (define_insn \"movv2si_i\"\n   [(set (match_operand:V2SI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V2SI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rl\"))]\n+\t(match_operand:V2SI 1 \"general_movsrc_operand\" \"r,JSU,nW,m,rlU\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V2SImode)\n-       || register_operand (operands[1], V2SImode))\"\n+       || sh_register_operand (operands[1], V2SImode))\"\n   \"@\n \tadd\t%1, r63, %0\n \t#\n \t#\n \tld%M1.q\t%m1, %0\n-\tst%M0.q\t%m0, %1\"\n+\tst%M0.q\t%m0, %N1\"\n   [(set_attr \"type\"   \"arith_media,arith_media,*,load_media,store_media\")\n    (set_attr \"length\" \"4,4,16,4,4\")])\n "}]}