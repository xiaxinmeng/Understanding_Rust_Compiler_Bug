{"sha": "31a18a7e231474e40309e930e8705d62a38ffdd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhMThhN2UyMzE0NzRlNDAzMDllOTMwZTg3MDVkNjJhMzhmZmRkNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-25T20:48:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-25T20:48:19Z"}, "message": "morestack.S (__morestack_non_split): Check whether caller is varargs and needs %bp to hold the stack frame on return.\n\nlibgcc/:\n\t* config/i386/morestack.S (__morestack_non_split): Check whether\n\tcaller is varargs and needs %bp to hold the stack frame on return.\ngcc/testsuite/:\n\t* gcc.dg/split-6.c: New test.\n\nFrom-SVN: r187894", "tree": {"sha": "9b7c31e86ff93c95ed67b963d17e16527d404ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b7c31e86ff93c95ed67b963d17e16527d404ce4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31a18a7e231474e40309e930e8705d62a38ffdd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a18a7e231474e40309e930e8705d62a38ffdd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a18a7e231474e40309e930e8705d62a38ffdd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a18a7e231474e40309e930e8705d62a38ffdd5/comments", "author": null, "committer": null, "parents": [{"sha": "37c59e691e40aa4f278ca985f7fa7ab81a0e545d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c59e691e40aa4f278ca985f7fa7ab81a0e545d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c59e691e40aa4f278ca985f7fa7ab81a0e545d"}], "stats": {"total": 110, "additions": 102, "deletions": 8}, "files": [{"sha": "285ae9cce7c7b75cae2dca9499b9240ba690415b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a18a7e231474e40309e930e8705d62a38ffdd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a18a7e231474e40309e930e8705d62a38ffdd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31a18a7e231474e40309e930e8705d62a38ffdd5", "patch": "@@ -1,3 +1,7 @@\n+2012-05-25  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/split-6.c: New test.\n+\n 2012-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/lto14.adb: New test."}, {"sha": "b32cf8de20a59f7a5d926747531795a93d7e17d5", "filename": "gcc/testsuite/gcc.dg/split-6.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a18a7e231474e40309e930e8705d62a38ffdd5/gcc%2Ftestsuite%2Fgcc.dg%2Fsplit-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a18a7e231474e40309e930e8705d62a38ffdd5/gcc%2Ftestsuite%2Fgcc.dg%2Fsplit-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsplit-6.c?ref=31a18a7e231474e40309e930e8705d62a38ffdd5", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target split_stack } */\n+/* { dg-options \"-fsplit-stack\" } */\n+\n+/* This test is like split-3.c, but tests with a smaller stack frame,\n+   since that uses a different prologue.  */\n+\n+#include <stdarg.h>\n+#include <stdlib.h>\n+\n+/* Use a noinline function to ensure that the buffer is not removed\n+   from the stack.  */\n+static void use_buffer (char *buf) __attribute__ ((noinline));\n+static void\n+use_buffer (char *buf)\n+{\n+  buf[0] = '\\0';\n+}\n+\n+/* When using gold, the call to abort will force a stack split.  */\n+\n+static void\n+down (int i, ...)\n+{\n+  char buf[1];\n+  va_list ap;\n+\n+  va_start (ap, i);\n+  if (va_arg (ap, int) != 1\n+      || va_arg (ap, int) != 2\n+      || va_arg (ap, int) != 3\n+      || va_arg (ap, int) != 4\n+      || va_arg (ap, int) != 5\n+      || va_arg (ap, int) != 6\n+      || va_arg (ap, int) != 7\n+      || va_arg (ap, int) != 8\n+      || va_arg (ap, int) != 9\n+      || va_arg (ap, int) != 10)\n+    abort ();\n+\n+  if (i > 0)\n+    {\n+      use_buffer (buf);\n+      down (i - 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  down (1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+  return 0;\n+}"}, {"sha": "5c048f531490b51b81d59f934f3a11ab4364e5fb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a18a7e231474e40309e930e8705d62a38ffdd5/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a18a7e231474e40309e930e8705d62a38ffdd5/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=31a18a7e231474e40309e930e8705d62a38ffdd5", "patch": "@@ -1,3 +1,8 @@\n+2012-05-25  Ian Lance Taylor  <iant@google.com>\n+\n+\t* config/i386/morestack.S (__morestack_non_split): Check whether\n+\tcaller is varargs and needs %bp to hold the stack frame on return.\n+\n 2012-05-25  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/rs6000/vxworks/tramp.S (trampoline_setup): Use a longcall\n@@ -80,9 +85,9 @@\n \n 2012-04-28  Aurelien Jarno  <aurelien@aurel32.net>\n \n-\t* config.host (mips64*-*-linux*, mipsisa64*-*-linux*): Remove. \n-\t(mips*-*-linux*): Include mips/t-tpbit when long double is \n-\t16 bytes long. \n+\t* config.host (mips64*-*-linux*, mipsisa64*-*-linux*): Remove.\n+\t(mips*-*-linux*): Include mips/t-tpbit when long double is\n+\t16 bytes long.\n \n 2012-04-25  Sriraman Tallam  <tmsriram@google.com>\n "}, {"sha": "228d6901abd0692f9bd2899417ee39561bceb774", "filename": "libgcc/config/i386/morestack.S", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a18a7e231474e40309e930e8705d62a38ffdd5/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a18a7e231474e40309e930e8705d62a38ffdd5/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fmorestack.S?ref=31a18a7e231474e40309e930e8705d62a38ffdd5", "patch": "@@ -1,5 +1,5 @@\n # x86/x86_64 support for -fsplit-stack.\n-# Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+# Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n # Contributed by Ian Lance Taylor <iant@google.com>.\n \n # This file is part of GCC.\n@@ -138,6 +138,24 @@ __morestack_non_split:\n \tje\t1f\t\t\t# see above.\n \taddl\t$2,%eax\n 1:\tinc\t%eax\n+\n+\t# If the instruction that we return to is\n+\t#   leal  20(%ebp),{%eax,%ecx,%edx}\n+\t# then we have been called by a varargs function that expects\n+\t# %ebp to hold a real value.  That can only work if we do the\n+\t# full stack split routine.  FIXME: This is fragile.\n+\tcmpb\t$0x8d,(%eax)\n+\tjne\t3f\n+\tcmpb\t$0x14,2(%eax)\n+\tjne\t3f\n+\tcmpb\t$0x45,1(%eax)\n+\tje\t2f\n+\tcmpb\t$0x4d,1(%eax)\n+\tje\t2f\n+\tcmpb\t$0x55,1(%eax)\n+\tje\t2f\n+\n+3:\t\n \tmovl\t%eax,4(%esp)\t\t# Update return address.\n \n \tpopl\t%eax\t\t\t# Restore %eax and stack.\n@@ -175,18 +193,32 @@ __morestack_non_split:\n #else\n \tcmpl\t%fs:0x40,%eax\n #endif\n-\tpopq\t%rax\t\t\t# Restore register.\n-\n-\t.cfi_adjust_cfa_offset -8\t# Adjust for popped register.\n \n \tjb\t2f\t\t\t# Get more space if we need it.\n \n \t# This breaks call/return prediction, as described above.\n-\tincq\t(%rsp)\t\t\t# Increment the return address.\n+\tincq\t8(%rsp)\t\t\t# Increment the return address.\n+\n+\t# If the instruction that we return to is\n+\t#   leaq  24(%rbp), %r11n\n+\t# then we have been called by a varargs function that expects\n+\t# %ebp to hold a real value.  That can only work if we do the\n+\t# full stack split routine.  FIXME: This is fragile.\n+\tmovq\t8(%rsp),%rax\n+\tcmpl\t$0x185d8d4c,(%rax)\n+\tje\t2f\n+\n+\tpopq\t%rax\t\t\t# Restore register.\n+\n+\t.cfi_adjust_cfa_offset -8\t# Adjust for popped register.\n \n \tret\t\t\t\t# Return to caller.\n \n 2:\n+\tpopq\t%rax\t\t\t# Restore register.\n+\n+\t.cfi_adjust_cfa_offset -8\t# Adjust for popped register.\n+\n \taddq\t$0x5000+BACKOFF,%r10\t# Increment space we request.\n \n \t# Fall through into morestack."}]}