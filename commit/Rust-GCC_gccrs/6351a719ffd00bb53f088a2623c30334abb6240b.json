{"sha": "6351a719ffd00bb53f088a2623c30334abb6240b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1MWE3MTlmZmQwMGJiNTNmMDg4YTI2MjNjMzAzMzRhYmI2MjQwYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-02-23T14:27:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-02-23T14:27:50Z"}, "message": "builtins.c (fold_builtin_logb, [...]): New.\n\n\t* builtins.c (fold_builtin_logb, fold_builtin_significand): New.\n\t(fold_builtin_1): Use them.\n\t* fold-const.c (tree_expr_nonnegative_warnv_p): Handle\n\tBUILT_IN_SIGNIFICAND.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-logb-1.c: New test.\n\t* gcc.dg/torture/builtin-math-2.c: Test logb/ilogb.\n\t* gcc.dg/torture/builtin-nonneg-1.c: Test significand.\n\t* gcc.dg/torture/builtin-frexp-1.c: Use -fno-finite-math-only on\n\tsh* targets.\n\nFrom-SVN: r122257", "tree": {"sha": "7e2a016dc7af2b71263c2fea7ef6b36983bc1429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e2a016dc7af2b71263c2fea7ef6b36983bc1429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6351a719ffd00bb53f088a2623c30334abb6240b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6351a719ffd00bb53f088a2623c30334abb6240b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6351a719ffd00bb53f088a2623c30334abb6240b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6351a719ffd00bb53f088a2623c30334abb6240b/comments", "author": null, "committer": null, "parents": [{"sha": "2ae2031ec142e650cf93c07963051f14a3426db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae2031ec142e650cf93c07963051f14a3426db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae2031ec142e650cf93c07963051f14a3426db0"}], "stats": {"total": 308, "additions": 308, "deletions": 0}, "files": [{"sha": "c0fcb118c42a1860fb93843129aea118cadb310d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -1,3 +1,10 @@\n+2007-02-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_logb, fold_builtin_significand): New.\n+\t(fold_builtin_1): Use them.\n+\t* fold-const.c (tree_expr_nonnegative_warnv_p): Handle\n+\tBUILT_IN_SIGNIFICAND.\n+\n 2007-02-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (bdesc_1arg): Initialize"}, {"sha": "d7074ed3ebbb8acea42046d63f3ac2adb55cbb48", "filename": "gcc/builtins.c", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -9017,6 +9017,86 @@ fold_builtin_carg (tree arg, tree type)\n   return NULL_TREE;\n }\n \n+/* Fold a call to builtin logb/ilogb.  */\n+\n+static tree\n+fold_builtin_logb (tree arg, tree rettype)\n+{\n+  if (! validate_arg (arg, REAL_TYPE))\n+    return NULL_TREE;\n+  \n+  STRIP_NOPS (arg);\n+      \n+  if (TREE_CODE (arg) == REAL_CST && ! TREE_OVERFLOW (arg))\n+    {\n+      const REAL_VALUE_TYPE *const value = TREE_REAL_CST_PTR (arg);\n+\t  \n+      switch (value->cl)\n+      {\n+      case rvc_nan:\n+      case rvc_inf:\n+\t/* If arg is Inf or NaN and we're logb, return it.  */\n+\tif (TREE_CODE (rettype) == REAL_TYPE)\n+\t  return fold_convert (rettype, arg);\n+\t/* Fall through... */\n+      case rvc_zero:\n+\t/* Zero may set errno and/or raise an exception for logb, also\n+\t   for ilogb we don't know FP_ILOGB0.  */\n+\treturn NULL_TREE;\n+      case rvc_normal:\n+\t/* For normal numbers, proceed iff radix == 2.  In GCC,\n+\t   normalized significands are in the range [0.5, 1.0).  We\n+\t   want the exponent as if they were [1.0, 2.0) so get the\n+\t   exponent and subtract 1.  */\n+\tif (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (arg)))->b == 2)\n+\t  return fold_convert (rettype, build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t       REAL_EXP (value)-1));\n+\tbreak;\n+      }\n+    }\n+  \n+  return NULL_TREE;\n+}\n+\n+/* Fold a call to builtin significand, if radix == 2.  */\n+\n+static tree\n+fold_builtin_significand (tree arg, tree rettype)\n+{\n+  if (! validate_arg (arg, REAL_TYPE))\n+    return NULL_TREE;\n+  \n+  STRIP_NOPS (arg);\n+      \n+  if (TREE_CODE (arg) == REAL_CST && ! TREE_OVERFLOW (arg))\n+    {\n+      const REAL_VALUE_TYPE *const value = TREE_REAL_CST_PTR (arg);\n+\t  \n+      switch (value->cl)\n+      {\n+      case rvc_zero:\n+      case rvc_nan:\n+      case rvc_inf:\n+\t/* If arg is +-0, +-Inf or +-NaN, then return it.  */\n+\treturn fold_convert (rettype, arg);\n+      case rvc_normal:\n+\t/* For normal numbers, proceed iff radix == 2.  */\n+\tif (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (arg)))->b == 2)\n+\t  {\n+\t    REAL_VALUE_TYPE result = *value;\n+\t    /* In GCC, normalized significands are in the range [0.5,\n+\t       1.0).  We want them to be [1.0, 2.0) so set the\n+\t       exponent to 1.  */\n+\t    SET_REAL_EXP (&result, 1);\n+\t    return build_real (rettype, result);\n+\t  }\n+\tbreak;\n+      }\n+    }\n+  \n+  return NULL_TREE;\n+}\n+\n /* Fold a call to builtin frexp, we can assume the base is 2.  */\n \n static tree\n@@ -9526,6 +9606,13 @@ fold_builtin_1 (tree fndecl, tree arg0, bool ignore)\n     CASE_FLT_FN (BUILT_IN_SIGNBIT):\n       return fold_builtin_signbit (arg0, type);\n \n+    CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n+      return fold_builtin_significand (arg0, type);\n+\n+    CASE_FLT_FN (BUILT_IN_ILOGB):\n+    CASE_FLT_FN (BUILT_IN_LOGB):\n+      return fold_builtin_logb (arg0, type);\n+\n     case BUILT_IN_ISASCII:\n       return fold_builtin_isascii (arg0);\n "}, {"sha": "ffd63cf5e7ed5c3bc0048cfe6f7e5a0c82f35f72", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -13356,6 +13356,7 @@ tree_expr_nonnegative_warnv_p (tree t, bool *strict_overflow_p)\n \t    CASE_FLT_FN (BUILT_IN_SCALBLN):\n \t    CASE_FLT_FN (BUILT_IN_SCALBN):\n \t    CASE_FLT_FN (BUILT_IN_SIGNBIT):\n+\t    CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n \t    CASE_FLT_FN (BUILT_IN_SINH):\n \t    CASE_FLT_FN (BUILT_IN_TANH):\n \t    CASE_FLT_FN (BUILT_IN_TRUNC):"}, {"sha": "cce1dd9897a849bda9a13611666b0e83e7826e0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -1,3 +1,11 @@\n+2007-02-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-logb-1.c: New test.\n+\t* gcc.dg/torture/builtin-math-2.c: Test logb/ilogb.\n+\t* gcc.dg/torture/builtin-nonneg-1.c: Test significand.\n+\t* gcc.dg/torture/builtin-frexp-1.c: Use -fno-finite-math-only on\n+\tsh* targets.\n+\t\n 2007-02-23  Richard Guenther  <rguenther@suse.de>\n \n \t* g++.dg/warn/changes-meaning.C: New testcase."}, {"sha": "5a8e90f64e1725f24796282093e5987df6b9462c", "filename": "gcc/testsuite/gcc.dg/torture/builtin-frexp-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -6,6 +6,7 @@\n    Origin: Kaveh R. Ghazi,  February 21, 2007.  */\n \n /* { dg-do link } */\n+/* { dg-options \"-fno-finite-math-only\" { target sh*-*-* } } */\n \n extern void link_error(int);\n "}, {"sha": "6abf8a765676adce0bcdb1c2437769c210d2c094", "filename": "gcc/testsuite/gcc.dg/torture/builtin-logb-1.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -0,0 +1,177 @@\n+/* Copyright (C) 2007  Free Software Foundation.\n+\n+   Verify that built-in folding of logb, ilogb and significand is\n+   correctly performed by the compiler.\n+\n+   Origin: Kaveh R. Ghazi,  February 22, 2007.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-fno-finite-math-only\" { target sh*-*-* } } */\n+\n+extern void link_error(int);\n+\n+/* Return TRUE if the sign of X != sign of Y.  This is important when\n+   comparing signed zeros.  */\n+#define CKSGN_F(X,Y) \\\n+  (__builtin_copysignf(1.0F,(X)) != __builtin_copysignf(1.0F,(Y)))\n+#define CKSGN(X,Y) \\\n+  (__builtin_copysign(1.0,(X)) != __builtin_copysign(1.0,(Y)))\n+#define CKSGN_L(X,Y) \\\n+  (__builtin_copysignl(1.0L,(X)) != __builtin_copysignl(1.0L,(Y)))\n+\n+/* Test that FUNC(ARG) == RES.  Check the sign in case we get -0.0.  */\n+#define TESTIT(FUNC,ARG,RES) do { \\\n+  if (__builtin_##FUNC##f(ARG##f) != RES##f \\\n+      || CKSGN_F(__builtin_##FUNC##f(ARG##f),RES##f)) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_##FUNC(ARG) != RES \\\n+      || CKSGN(__builtin_##FUNC(ARG),RES)) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_##FUNC##l(ARG##l) != RES##l \\\n+      || CKSGN_L(__builtin_##FUNC##l(ARG##l),RES##l)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+/* Test that FUNC(ARG) == RES.  RES is an int so it can't be -0.0.  */\n+#define TESTIT2(FUNC,ARG,RES) do { \\\n+  if (__builtin_##FUNC##f(ARG##f) != RES) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_##FUNC(ARG) != RES) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_##FUNC##l(ARG##l) != RES) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+/* Test if FUNCRES(FUNC(NEG FUNCARG(ARGARG))) is false.  Check the\n+   sign as well.  */\n+#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n+  if (!__builtin_##FUNCRES##f(__builtin_##FUNC(NEG __builtin_##FUNCARG##f(ARGARG))) \\\n+      || CKSGN_F(__builtin_##FUNC##f(NEG __builtin_##FUNCARG##f(ARGARG)), NEG __builtin_##FUNCARG##f(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  if (!__builtin_##FUNCRES(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG))) \\\n+      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG)), NEG __builtin_##FUNCARG(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  if (!__builtin_##FUNCRES##l(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+void __attribute__ ((__noinline__))\n+foo(void)\n+{\n+  /* If radix == 2, test that logb(ARG2) -> ARG3.  */\n+#if __FLT_RADIX__ == 2\n+  TESTIT (logb, -0x1p40, 40.0);\n+  TESTIT (logb, -0x1p30, 30.0);\n+  TESTIT (logb, -0x1p20, 20.0);\n+  TESTIT (logb, -0x1p10, 10.0);\n+  TESTIT (logb, -0x1p5, 5.0);\n+  TESTIT (logb, -100/3.0, 5.0);\n+  TESTIT (logb, -2.0, 1.0);\n+  TESTIT (logb, -1.5, 0.0);\n+  TESTIT (logb, -1.0, 0.0);\n+  TESTIT (logb, -1/3.0, -2.0);\n+  TESTIT (logb, -1/9.0, -4.0);\n+  TESTIT (logb, -0x1p-5, -5.0);\n+  TESTIT (logb, -0x1p-10, -10.0);\n+  TESTIT (logb, -0x1p-20, -20.0);\n+  TESTIT (logb, -0x1p-30, -30.0);\n+  TESTIT (logb, -0x1p-40, -40.0);\n+\n+  TESTIT (logb, 0x1p-40, -40.0);\n+  TESTIT (logb, 0x1p-30, -30.0);\n+  TESTIT (logb, 0x1p-20, -20.0);\n+  TESTIT (logb, 0x1p-10, -10.0);\n+  TESTIT (logb, 0x1p-5, -5.0);\n+  TESTIT (logb, 1/9.0, -4.0);\n+  TESTIT (logb, 1/3.0, -2.0);\n+  TESTIT (logb, 1.0, 0.0);\n+  TESTIT (logb, 1.5, 0.0);\n+  TESTIT (logb, 2.0, 1.0);\n+  TESTIT (logb, 100/3.0, 5.0);\n+  TESTIT (logb, 0x1p5, 5.0);\n+  TESTIT (logb, 0x1p10, 10.0);\n+  TESTIT (logb, 0x1p20, 20.0);\n+  TESTIT (logb, 0x1p30, 30.0);\n+  TESTIT (logb, 0x1p40, 40.0);\n+#endif\n+\n+  /* If radix == 2, test that ilogb(ARG2) -> ARG3.  */\n+#if __FLT_RADIX__ == 2\n+  TESTIT2 (ilogb, -0x1p40, 40);\n+  TESTIT2 (ilogb, -0x1p30, 30);\n+  TESTIT2 (ilogb, -0x1p20, 20);\n+  TESTIT2 (ilogb, -0x1p10, 10);\n+  TESTIT2 (ilogb, -0x1p5, 5);\n+  TESTIT2 (ilogb, -100/3.0, 5);\n+  TESTIT2 (ilogb, -2.0, 1);\n+  TESTIT2 (ilogb, -1.5, 0);\n+  TESTIT2 (ilogb, -1.0, 0);\n+  TESTIT2 (ilogb, -1/3.0, -2);\n+  TESTIT2 (ilogb, -1/9.0, -4);\n+  TESTIT2 (ilogb, -0x1p-5, -5);\n+  TESTIT2 (ilogb, -0x1p-10, -10);\n+  TESTIT2 (ilogb, -0x1p-20, -20);\n+  TESTIT2 (ilogb, -0x1p-30, -30);\n+  TESTIT2 (ilogb, -0x1p-40, -40);\n+\n+  TESTIT2 (ilogb, 0x1p-40, -40);\n+  TESTIT2 (ilogb, 0x1p-30, -30);\n+  TESTIT2 (ilogb, 0x1p-20, -20);\n+  TESTIT2 (ilogb, 0x1p-10, -10);\n+  TESTIT2 (ilogb, 0x1p-5, -5);\n+  TESTIT2 (ilogb, 1/9.0, -4);\n+  TESTIT2 (ilogb, 1/3.0, -2);\n+  TESTIT2 (ilogb, 1.0, 0);\n+  TESTIT2 (ilogb, 1.5, 0);\n+  TESTIT2 (ilogb, 2.0, 1);\n+  TESTIT2 (ilogb, 100/3.0, 5);\n+  TESTIT2 (ilogb, 0x1p5, 5);\n+  TESTIT2 (ilogb, 0x1p10, 10);\n+  TESTIT2 (ilogb, 0x1p20, 20);\n+  TESTIT2 (ilogb, 0x1p30, 30);\n+  TESTIT2 (ilogb, 0x1p40, 40);\n+#endif\n+\n+  /* If radix == 2, test that significand(ARG2) -> ARG3.  Zero always\n+     folds regardless of the radix.  */\n+  TESTIT (significand, -0.0, -0.0);\n+  TESTIT (significand, 0.0, 0.0);\n+\n+#if __FLT_RADIX__ == 2\n+  TESTIT (significand, -0x1p5, -1.0);\n+  TESTIT (significand, -100/3.0, -100/96.0);\n+  TESTIT (significand, -1.5, -1.5);\n+  TESTIT (significand, -1.0, -1.0);\n+  TESTIT (significand, -1/3.0, -4/3.0);\n+  TESTIT (significand, -1/9.0, -16/9.0);\n+  TESTIT (significand, -0x1p-5, -1.0);\n+\n+  TESTIT (significand, 0x1p-5, 1.0);\n+  TESTIT (significand, 1/9.0, 16/9.0);\n+  TESTIT (significand, 1/3.0, 4/3.0);\n+  TESTIT (significand, 1.0, 1.0);\n+  TESTIT (significand, 1.5, 1.5);\n+  TESTIT (significand, 100/3.0, 100/96.0);\n+  TESTIT (significand, 0x1p5, 1.0);\n+#endif\n+\n+  /* Test for f(+-Inf) -> +-Inf and f(+-NaN) -> +-NaN, regardless of\n+     the radix.  */\n+  TESTIT3 (logb, ,inf, , isinf);\n+  TESTIT3 (logb, - ,inf, , isinf);\n+  TESTIT3 (logb,  ,nan, \"\", isnan);\n+  TESTIT3 (logb, - ,nan, \"\", isnan);\n+\n+  TESTIT3 (significand, ,inf, , isinf);\n+  TESTIT3 (significand, - ,inf, , isinf);\n+  TESTIT3 (significand,  ,nan, \"\", isnan);\n+  TESTIT3 (significand, - ,nan, \"\", isnan);\n+}\n+\n+int main()\n+{\n+  foo ();\n+  \n+  return 0;\n+}"}, {"sha": "5153ae492140ee33f230f9b9eaf60d17c9a73bd1", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-2.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -208,6 +208,26 @@ void bar()\n \t\t __DBL_MIN_EXP__, __LDBL_MIN__, __LDBL_MIN_EXP__);\n   TESTIT2_I2ALL (scalbln, __FLT_MAX__, __FLT_MAX_EXP__, __DBL_MAX__,\n \t\t __DBL_MAX_EXP__, __LDBL_MAX__, __LDBL_MAX_EXP__);\n+\n+  TESTIT (logb, 0.0);\n+  TESTIT (logb, -0.0);\n+\n+  TESTIT (ilogb, 0.0);\n+  TESTIT (ilogb, -0.0);\n+\n+  foof (__builtin_ilogbf (__builtin_inff()));\n+  foo (__builtin_ilogb (__builtin_inf()));\n+  fool (__builtin_ilogbl (__builtin_infl()));\n+  foof (__builtin_ilogbf (-__builtin_inff()));\n+  foo (__builtin_ilogb (-__builtin_inf()));\n+  fool (__builtin_ilogbl (-__builtin_infl()));\n+\n+  foof (__builtin_ilogbf (__builtin_nanf(\"\")));\n+  foo (__builtin_ilogb (__builtin_nan(\"\")));\n+  fool (__builtin_ilogbl (__builtin_nanl(\"\")));\n+  foof (__builtin_ilogbf (-__builtin_nanf(\"\")));\n+  foo (__builtin_ilogb (-__builtin_nan(\"\")));\n+  fool (__builtin_ilogbl (-__builtin_nanl(\"\")));\n }\n \n /* { dg-final { scan-tree-dump-times \"exp2 \" 9 \"original\" } } */\n@@ -258,4 +278,10 @@ void bar()\n /* { dg-final { scan-tree-dump-times \"scalbln \" 8 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"scalblnf\" 8 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"scalblnl\" 8 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"_logb \" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"_logbf\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"_logbl\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ilogb \" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ilogbf\" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ilogbl\" 6 \"original\" } } */\n /* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "54e628c5dc44cfb9f3e691d61552e78f78549db2", "filename": "gcc/testsuite/gcc.dg/torture/builtin-nonneg-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351a719ffd00bb53f088a2623c30334abb6240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c?ref=6351a719ffd00bb53f088a2623c30334abb6240b", "patch": "@@ -159,6 +159,7 @@ void test(double d1, double d2, float f1, float f2,\n   ARG1TEST2_A2INT (scalbln, long);\n   ARG1TEST2_A2INT (scalbn, int);\n   ARG1TEST1_RTYPE (signbit, int);\n+  ARG1TEST1 (significand);\n   ARG1TEST1 (sinh);\n   ARG1TEST1 (tanh);\n   ARG1TEST1 (trunc);"}]}