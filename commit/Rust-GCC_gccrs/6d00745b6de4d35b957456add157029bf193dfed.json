{"sha": "6d00745b6de4d35b957456add157029bf193dfed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwMDc0NWI2ZGU0ZDM1Yjk1NzQ1NmFkZDE1NzAyOWJmMTkzZGZlZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-06-05T17:43:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-06-05T17:43:29Z"}, "message": "[multiple changes]\n\n2010-06-05  Magnus Fromreide  <magfr@lysator.liu.se>\n            Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/functional (function): Add nullptr_t support.\n\t* include/bits/shared_ptr.h (shared_ptr): Likewise.\n\t* include/bits/unique_ptr.h (unique_ptr): Likewise.\n\n2010-06-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/shared_ptr_base.h (__shared_ptr): Add nullptr_t support.\n\t(__shared_count): Add nullptr_t support and make constructors explicit.\n\t* testsuite/20_util/shared_ptr/cons/43820.cc: Adjust.\n\t* testsuite/20_util/shared_ptr/cons/nullptr.cc: New.\n\t* testsuite/20_util/unique_ptr/cons/nullptr.cc: New.\n\t* testsuite/20_util/unique_ptr/assign/nullptr.cc: New.\n\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Adjust.\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Adjust.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust.\n\nFrom-SVN: r160324", "tree": {"sha": "c01380bc3ca54784033b951564396f685cc40d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01380bc3ca54784033b951564396f685cc40d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d00745b6de4d35b957456add157029bf193dfed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d00745b6de4d35b957456add157029bf193dfed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d00745b6de4d35b957456add157029bf193dfed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d00745b6de4d35b957456add157029bf193dfed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c21ef3733d6a56ee3407ba8768abe551667f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c21ef3733d6a56ee3407ba8768abe551667f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c21ef3733d6a56ee3407ba8768abe551667f67"}], "stats": {"total": 349, "additions": 316, "deletions": 33}, "files": [{"sha": "f01630e5347c84a5a60624d0475d10aa061f0f76", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -122,6 +122,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _Tp1, typename _Deleter>\n \tshared_ptr(_Tp1* __p, _Deleter __d) : __shared_ptr<_Tp>(__p, __d) { }\n \n+      /**\n+       *  @brief  Construct a %shared_ptr that owns a null pointer\n+       *          and the deleter @a __d.\n+       *  @param  __p  A null pointer constant.\n+       *  @param  __d  A deleter.\n+       *  @post   use_count() == 1 && get() == __p\n+       *  @throw  std::bad_alloc, in which case @a __d(__p) is called.\n+       *\n+       *  Requirements: _Deleter's copy constructor and destructor must\n+       *  not throw\n+       *\n+       *  The last owner will call __d(__p)\n+       */\n+      template<typename _Deleter>\n+\tshared_ptr(nullptr_t __p, _Deleter __d)\n+        : __shared_ptr<_Tp>(__p, __d) { }\n+\n       /**\n        *  @brief  Construct a %shared_ptr that owns the pointer @a __p\n        *          and the deleter @a __d.\n@@ -141,6 +158,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tshared_ptr(_Tp1* __p, _Deleter __d, const _Alloc& __a)\n \t: __shared_ptr<_Tp>(__p, __d, __a) { }\n \n+      /**\n+       *  @brief  Construct a %shared_ptr that owns a null pointer\n+       *          and the deleter @a __d.\n+       *  @param  __p  A null pointer constant.\n+       *  @param  __d  A deleter.\n+       *  @param  __a  An allocator.\n+       *  @post   use_count() == 1 && get() == __p\n+       *  @throw  std::bad_alloc, in which case @a __d(__p) is called.\n+       *\n+       *  Requirements: _Deleter's copy constructor and destructor must\n+       *  not throw _Alloc's copy constructor and destructor must not\n+       *  throw.\n+       *\n+       *  The last owner will call __d(__p)\n+       */\n+      template<typename _Deleter, typename _Alloc>\n+\tshared_ptr(nullptr_t __p, _Deleter __d, const _Alloc& __a)\n+\t: __shared_ptr<_Tp>(__p, __d, __a) { }\n+\n       // Aliasing constructor\n \n       /**\n@@ -212,6 +248,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tshared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n \n+      /**\n+       *  @brief  Construct an empty %shared_ptr.\n+       *  @param  __p  A null pointer constant.\n+       *  @post   use_count() == 0 && get() == nullptr\n+       */\n+      shared_ptr(nullptr_t __p) : __shared_ptr<_Tp>(__p) { }\n+\n       template<typename _Tp1>\n \tshared_ptr&\n \toperator=(const shared_ptr<_Tp1>& __r) // never throws"}, {"sha": "cac1a70c1678613eae3155af8539b4bf1095cab6", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -85,6 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class _Sp_counted_ptr : public _Sp_counted_base<_Lp>\n     {\n     public:\n+      explicit\n       _Sp_counted_ptr(_Ptr __p)\n       : _M_ptr(__p) { }\n \n@@ -107,6 +108,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ptr             _M_ptr;  // copy constructor must not throw\n     };\n \n+  template<>\n+    void\n+    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() { }\n+\n+  template<>\n+    void\n+    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() { }\n+\n+  template<>\n+    void\n+    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() { }\n+\n   // Support for custom deleter and/or allocator\n   template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>\n     class _Sp_counted_deleter : public _Sp_counted_ptr<_Ptr, _Lp>\n@@ -181,6 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_Base_type;\n \n     public:\n+      explicit\n       _Sp_counted_ptr_inplace(_Alloc __a)\n       : _Base_type(static_cast<_Tp*>(0), _Sp_destroy_inplace<_Tp>(), __a)\n       , _M_storage()\n@@ -237,6 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { }\n \n       template<typename _Ptr>\n+        explicit\n \t__shared_count(_Ptr __p) : _M_pi(0)\n \t{\n \t  __try\n@@ -316,13 +331,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if _GLIBCXX_DEPRECATED\n       // Special case for auto_ptr<_Tp> to provide the strong guarantee.\n       template<typename _Tp>\n+        explicit\n \t__shared_count(std::auto_ptr<_Tp>&& __r)\n \t: _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))\n \t{ __r.release(); }\n #endif\n \n       // Special case for unique_ptr<_Tp,_Del> to provide the strong guarantee.\n       template<typename _Tp, typename _Del>\n+        explicit\n \t__shared_count(std::unique_ptr<_Tp, _Del>&& __r)\n \t: _M_pi(_S_create_from_up(std::move(__r)))\n \t{ __r.release(); }\n@@ -567,6 +584,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __enable_shared_from_this_helper(_M_refcount, __p, __p);\n \t}\n \n+      template<typename _Deleter>\n+\t__shared_ptr(nullptr_t __p, _Deleter __d)\n+\t: _M_ptr(0), _M_refcount(__p, __d)\n+\t{ }\n+\n+      template<typename _Deleter, typename _Alloc>\n+\t__shared_ptr(nullptr_t __p, _Deleter __d, const _Alloc& __a)\n+\t: _M_ptr(0), _M_refcount(__p, __d, __a)\n+\t{ }\n+\n       template<typename _Tp1>\n \t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p)\n \t: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws\n@@ -631,6 +658,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n #endif\n \n+      /* TODO: use delegating constructor */\n+      __shared_ptr(nullptr_t) : _M_ptr(0), _M_refcount() // never throws\n+      { }\n+\n       template<typename _Tp1>\n \t__shared_ptr&\n \toperator=(const __shared_ptr<_Tp1, _Lp>& __r) // never throws"}, {"sha": "77d3f607dfdb9252b217fa11ea2d6151fa7e038e", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -81,7 +81,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class unique_ptr\n     {\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n-      typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n       // use SFINAE to determine whether _Del::pointer exists\n       class _Pointer\n@@ -126,6 +125,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { static_assert(!std::is_reference<deleter_type>::value, \n \t\t      \"rvalue deleter bound to reference\"); }\n \n+      unique_ptr(nullptr_t)\n+      : _M_t(pointer(), deleter_type())\n+      { }\n+\n       // Move constructors.\n       unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n@@ -157,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         }\n \n       unique_ptr&\n-      operator=(__unspecified_pointer_type) \n+      operator=(nullptr_t)\n       {\n \treset();\n \treturn *this;\n@@ -234,7 +237,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class unique_ptr<_Tp[], _Tp_Deleter>\n     {\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n-      typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n     public:\n       typedef _Tp*               pointer;\n@@ -264,6 +266,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { static_assert(!std::is_reference<deleter_type>::value, \n \t\t      \"rvalue deleter bound to reference\"); }\n \n+      /* TODO: use delegating constructor */\n+      unique_ptr(nullptr_t)\n+      : _M_t(pointer(), deleter_type())\n+      { }\n+\n       // Move constructors.\n       unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n@@ -295,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         }\n \n       unique_ptr&\n-      operator=(__unspecified_pointer_type)\n+      operator=(nullptr_t)\n       {\n \treset();\n \treturn *this;\n@@ -338,7 +345,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tusing std::swap;\n \tswap(std::get<0>(_M_t), __p);\n-\tif (__p != pointer())\n+\tif (__p != nullptr)\n+\t  get_deleter()(__p);\n+      }\n+\n+      void\n+      reset(nullptr_t)\n+      {\n+\tpointer __p = get();\n+\tstd::get<0>(_M_t) = pointer();\n+\tif (__p != nullptr)\n \t  get_deleter()(__p);\n       }\n "}, {"sha": "752e78325a3fe71fe7572f5cc2837bed3ea40254", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -1383,13 +1383,6 @@ namespace std\n    */\n   class bad_function_call : public std::exception { };\n \n-  /**\n-   *  The integral constant expression 0 can be converted into a\n-   *  pointer to this type. It is used by the function template to\n-   *  accept NULL pointers.\n-   */\n-  struct _M_clear_type;\n-\n   /**\n    *  Trait identifying \"location-invariant\" types, meaning that the\n    *  address of the object (or any of its members) will not escape.\n@@ -1797,10 +1790,10 @@ namespace std\n       function() : _Function_base() { }\n       \n       /**\n-       *  @brief Default construct creates an empty function call wrapper.\n+       *  @brief Creates an empty function call wrapper.\n        *  @post @c !(bool)*this\n        */\n-      function(_M_clear_type*) : _Function_base() { }\n+      function(nullptr_t) : _Function_base() { }\n       \n       /**\n        *  @brief %Function copy constructor.\n@@ -1893,7 +1886,7 @@ namespace std\n        *  The target of @c *this is deallocated, leaving it empty.\n        */\n       function&\n-      operator=(_M_clear_type*)\n+      operator=(nullptr_t)\n       {\n         if (_M_manager)\n \t  {\n@@ -2139,13 +2132,13 @@ namespace std\n    */\n   template<typename _Res, typename... _Args>\n     inline bool\n-    operator==(const function<_Res(_Args...)>& __f, _M_clear_type*)\n+    operator==(const function<_Res(_Args...)>& __f, nullptr_t)\n     { return !static_cast<bool>(__f); }\n \n   /// @overload\n   template<typename _Res, typename... _Args>\n     inline bool\n-    operator==(_M_clear_type*, const function<_Res(_Args...)>& __f)\n+    operator==(nullptr_t, const function<_Res(_Args...)>& __f)\n     { return !static_cast<bool>(__f); }\n \n   /**\n@@ -2157,13 +2150,13 @@ namespace std\n    */\n   template<typename _Res, typename... _Args>\n     inline bool\n-    operator!=(const function<_Res(_Args...)>& __f, _M_clear_type*)\n+    operator!=(const function<_Res(_Args...)>& __f, nullptr_t)\n     { return static_cast<bool>(__f); }\n \n   /// @overload\n   template<typename _Res, typename... _Args>\n     inline bool\n-    operator!=(_M_clear_type*, const function<_Res(_Args...)>& __f)\n+    operator!=(nullptr_t, const function<_Res(_Args...)>& __f)\n     { return static_cast<bool>(__f); }\n \n   // [20.7.15.2.7] specialized algorithms"}, {"sha": "c9c758442dbf7b4a9c7a1df9f25c5ed3f06c63a0", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -32,10 +32,10 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 549 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 566 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 630 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 657 }\n \n }\n "}, {"sha": "82acaed36152c28fa883fa829537af6bdeb2b882", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/nullptr.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fnullptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fnullptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fnullptr.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -0,0 +1,93 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.11.2 Class template shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+#include <cstddef>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// 20.9.11.2.1 shared_ptr constructors [util.smartptr.shared.const]\n+\n+// Construction from nullptr\n+\n+struct deleter\n+{\n+  int count;\n+  deleter() : count(0) { }\n+  void operator()(std::nullptr_t) { ++count; }\n+  void operator()(int*) const { throw \"wrong type passed to deleter\"; }\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_ptr<int> p = nullptr;\n+  VERIFY( p.get() == nullptr );\n+  VERIFY( p.use_count() == 0 );\n+\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  deleter d;\n+  std::shared_ptr<int> p(nullptr, std::ref(d));\n+  VERIFY( p.get() == nullptr );\n+  VERIFY( p.use_count() == 1 );\n+\n+  p = nullptr;\n+  VERIFY( p.use_count() == 0 );\n+  VERIFY( d.count == 1 );\n+}\n+\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  deleter d;\n+  __gnu_test::tracker_allocator<int> a;\n+  std::shared_ptr<int> p(nullptr, std::ref(d), a);\n+  VERIFY( p.get() == nullptr );\n+  VERIFY( p.use_count() == 1 );\n+\n+  p = nullptr;\n+  VERIFY( p.use_count() == 0 );\n+  VERIFY( d.count == 1 );\n+\n+  typedef __gnu_test::tracker_allocator_counter c;\n+  VERIFY( c::get_destruct_count() == c::get_construct_count() );\n+  VERIFY( c::get_deallocation_count() == c::get_allocation_count() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "40404f6bffd3c7d2fad32e8fdab5833eb0d28bde", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign_neg.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -49,14 +49,15 @@ test03()\n   std::unique_ptr<int[2]> p2 = p1;\n }\n \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 357 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 373 }\n // { dg-error \"used here\" \"\" { target *-*-* } 42 }\n // { dg-error \"no matching\" \"\" { target *-*-* } 48 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 130 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 134 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 123 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 118 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 113 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 107 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 222 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 137 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 133 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 128 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 122 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 117 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 112 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 106 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 225 }\n // { dg-error \"used here\" \"\" { target *-*-* } 49 }"}, {"sha": "6f067ee4d6bdc9dcb35952c29800c64d832427e8", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/nullptr.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fnullptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fnullptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fnullptr.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.10 Class template unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A { };\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A> p(new A);\n+  p = nullptr;\n+\n+  VERIFY( p.get() == nullptr );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A[]> p(new A[2]);\n+  p = nullptr;\n+\n+  VERIFY( p.get() == nullptr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "1f515ea53cca7cc5b20fa305f7ea0deb90196ddb", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/nullptr.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fnullptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fnullptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fnullptr.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.10 Class template unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A { };\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A> p = nullptr;\n+\n+  VERIFY( p.get() == nullptr );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A[]> p = nullptr;\n+\n+  VERIFY( p.get() == nullptr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "27dd87915369fe21962c2171e95b665bda7b5eb0", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -36,4 +36,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 35 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 347 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 363 }"}, {"sha": "b3a45b11018ef8e96cb9d07c3265967d8d2de81e", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d00745b6de4d35b957456add157029bf193dfed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=6d00745b6de4d35b957456add157029bf193dfed", "patch": "@@ -41,9 +41,9 @@ main()\n   return 0;\n }\n \n-// { dg-warning \"note\" \"\" { target *-*-* } 281 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 407 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 831 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 324 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 423 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 862 }\n // { dg-warning \"note\" \"\" { target *-*-* } 511 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1005 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }"}]}