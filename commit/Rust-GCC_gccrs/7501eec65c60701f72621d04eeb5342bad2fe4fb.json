{"sha": "7501eec65c60701f72621d04eeb5342bad2fe4fb", "node_id": "C_kwDOANBUbNoAKDc1MDFlZWM2NWM2MDcwMWY3MjYyMWQwNGVlYjUzNDJiYWQyZmU0ZmI", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2022-07-18T12:07:00Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2022-07-18T12:45:20Z"}, "message": "arc: Add ARCHS release 310a tune variant.\n\nAdd mtune and mcpu options for ARCHS release 310a type CPU. The\nmtune=release31a is designed to be used as an alternative to the\nmcpu=hs4x_rel31 option.\nARCHS4x release 31a uses DSP instructions which are implemented a bit\ndifferent than mpy9. Hence, use safer mpy2 option.\n\ngcc/\n\t* config/arc/arc-arch.h (arc_tune_attr): Add\n\tARC_TUNE_ARCHS4X_REL31A variant.\n\t* config/arc/arc.cc (arc_override_options): Tune options for\n\trelease 310a.\n\t(arc_sched_issue_rate): Use correct enum.\n\t(arc600_corereg_hazard): Textual change.\n\t(arc_hazard): Add release 310a tunning.\n\t* config/arc/arc.md (tune): Update and take into consideration new\n\ttune option.\n\t(tune_dspmpy): Likewise.\n\t(tune_store): New attribute.\n\t* config/arc/arc.opt (mtune): New tune option.\n\t* config/arc/arcHS4x.md (hs4x_brcc0, hs4x_brcc1): New cpu units.\n\t(hs4x_brcc_op): New instruction rezervation.\n\t(hs4x_data_store_1_op): Likewise.\n\t* config/arc/arc-cpus.def (hs4x_rel31): New cpu variant.\n\t* config/arc/arc-tables.opt: Regenerate.\n\t* config/arc/t-multilib: Likewise.\n\t* doc/invoke.texi (ARC): Update mcpu and tune sections.\n\nSigned-off-by: Claudiu Zissulescu <claziss@gmail.com>", "tree": {"sha": "e8c98397915d2217a334ad84a1479c9670013376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8c98397915d2217a334ad84a1479c9670013376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7501eec65c60701f72621d04eeb5342bad2fe4fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7501eec65c60701f72621d04eeb5342bad2fe4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7501eec65c60701f72621d04eeb5342bad2fe4fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7501eec65c60701f72621d04eeb5342bad2fe4fb/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f46a16ec05beb51439f55a4d3c36d64b95b00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f46a16ec05beb51439f55a4d3c36d64b95b00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f46a16ec05beb51439f55a4d3c36d64b95b00f"}], "stats": {"total": 271, "additions": 181, "deletions": 90}, "files": [{"sha": "83b156ee34a5a3e42ce2265a7f9b0c29e2a6126b", "filename": "gcc/config/arc/arc-arch.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arch.h?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -77,7 +77,8 @@ enum arc_tune_attr\n     ARC_TUNE_CORE_3,\n     ARC_TUNE_ARCHS4X,\n     ARC_TUNE_ARCHS4XD,\n-    ARC_TUNE_ARCHS4XD_SLOW\n+    ARC_TUNE_ARCHS4XD_SLOW,\n+    ARC_TUNE_ARCHS4X_REL31A\n   };\n \n /* Extra options for a processor template to hold any CPU specific"}, {"sha": "5668b0fbf19a0b54f2168f0b0cc73d02b891c0db", "filename": "gcc/config/arc/arc-cpus.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-cpus.def?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -64,6 +64,7 @@ ARC_CPU (hs38,\t     hs, FL_MPYOPT_9|FL_DIVREM|FL_LL64, NONE, NONE)\n ARC_CPU (hs38_linux, hs, FL_MPYOPT_9|FL_DIVREM|FL_LL64|FL_FPU_FPUD_ALL, NONE, NONE)\n ARC_CPU (hs4x,  hs, FL_MPYOPT_9|FL_DIVREM|FL_LL64, NONE, ARCHS4X)\n ARC_CPU (hs4xd, hs, FL_MPYOPT_9|FL_DIVREM|FL_LL64, NONE, ARCHS4XD)\n+ARC_CPU (hs4x_rel31, hs, FL_MPYOPT_2|FL_DIVREM|FL_LL64, NONE, ARCHS4X_REL31A)\n \n ARC_CPU (arc600,\t  6xx, FL_BS, NONE, ARC600)\n ARC_CPU (arc600_norm,\t  6xx, FL_BS|FL_NORM, NONE, ARC600)"}, {"sha": "0a0d354db609bd074355b5553d6af589bf5014ff", "filename": "gcc/config/arc/arc-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-tables.opt?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -69,6 +69,9 @@ Enum(processor_type) String(hs4x) Value(PROCESSOR_hs4x)\n EnumValue\n Enum(processor_type) String(hs4xd) Value(PROCESSOR_hs4xd)\n \n+EnumValue\n+Enum(processor_type) String(hs4x_rel31) Value(PROCESSOR_hs4x_rel31)\n+\n EnumValue\n Enum(processor_type) String(arc600) Value(PROCESSOR_arc600)\n "}, {"sha": "064790bf396c4959f6b3eb35274cfa053be99cc5", "filename": "gcc/config/arc/arc.cc", "status": "modified", "additions": 119, "deletions": 73, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.cc?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -646,8 +646,8 @@ arc_sched_issue_rate (void)\n {\n   switch (arc_tune)\n     {\n-    case TUNE_ARCHS4X:\n-    case TUNE_ARCHS4XD:\n+    case ARC_TUNE_ARCHS4X:\n+    case ARC_TUNE_ARCHS4XD:\n       return 3;\n     default:\n       break;\n@@ -1458,6 +1458,12 @@ arc_override_options (void)\n   if (!OPTION_SET_P (unaligned_access) && TARGET_HS)\n     unaligned_access = 1;\n \n+  if (TARGET_HS && (arc_tune == ARC_TUNE_ARCHS4X_REL31A))\n+    {\n+      TARGET_CODE_DENSITY_FRAME = 0;\n+      flag_delayed_branch = 0;\n+    }\n+\n   /* These need to be done at start up.  It's convenient to do them here.  */\n   arc_init ();\n }\n@@ -7817,6 +7823,115 @@ arc_store_addr_hazard_p (rtx_insn* producer, rtx_insn* consumer)\n   return arc_store_addr_hazard_internal_p (producer, consumer);\n }\n \n+/* Return length adjustment for INSN.\n+   For ARC600:\n+   A write to a core reg greater or equal to 32 must not be immediately\n+   followed by a use.  Anticipate the length requirement to insert a nop\n+   between PRED and SUCC to prevent a hazard.  */\n+\n+static int\n+arc600_corereg_hazard (rtx_insn *pred, rtx_insn *succ)\n+{\n+  if (!TARGET_ARC600)\n+    return 0;\n+  if (GET_CODE (PATTERN (pred)) == SEQUENCE)\n+    pred = as_a <rtx_sequence *> (PATTERN (pred))->insn (1);\n+  if (GET_CODE (PATTERN (succ)) == SEQUENCE)\n+    succ = as_a <rtx_sequence *> (PATTERN (succ))->insn (0);\n+  if (recog_memoized (pred) == CODE_FOR_mulsi_600\n+      || recog_memoized (pred) == CODE_FOR_umul_600\n+      || recog_memoized (pred) == CODE_FOR_mac_600\n+      || recog_memoized (pred) == CODE_FOR_mul64_600\n+      || recog_memoized (pred) == CODE_FOR_mac64_600\n+      || recog_memoized (pred) == CODE_FOR_umul64_600\n+      || recog_memoized (pred) == CODE_FOR_umac64_600)\n+    return 0;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, PATTERN (pred), NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      switch (GET_CODE (x))\n+\t{\n+\tcase SET: case POST_INC: case POST_DEC: case PRE_INC: case PRE_DEC:\n+\t  break;\n+\tdefault:\n+\t  /* This is also fine for PRE/POST_MODIFY, because they\n+\t     contain a SET.  */\n+\t  continue;\n+\t}\n+      rtx dest = XEXP (x, 0);\n+      /* Check if this sets a an extension register.  N.B. we use 61 for the\n+\t condition codes, which is definitely not an extension register.  */\n+      if (REG_P (dest) && REGNO (dest) >= 32 && REGNO (dest) < 61\n+\t  /* Check if the same register is used by the PAT.  */\n+\t  && (refers_to_regno_p\n+\t      (REGNO (dest),\n+\t       REGNO (dest) + (GET_MODE_SIZE (GET_MODE (dest)) + 3) / 4U,\n+\t       PATTERN (succ), 0)))\n+\treturn 4;\n+    }\n+  return 0;\n+}\n+\n+/* For ARC600:\n+   A write to a core reg greater or equal to 32 must not be immediately\n+   followed by a use.  Anticipate the length requirement to insert a nop\n+   between PRED and SUCC to prevent a hazard.  */\n+\n+int\n+arc_hazard (rtx_insn *pred, rtx_insn *succ)\n+{\n+  if (!pred || !INSN_P (pred) || !succ || !INSN_P (succ))\n+    return 0;\n+\n+  if (TARGET_ARC600)\n+    return arc600_corereg_hazard (pred, succ);\n+\n+  return 0;\n+}\n+\n+/* When compiling for release 310a, insert a nop before any\n+   conditional jump.  */\n+\n+static int\n+arc_check_release31a (rtx_insn *pred, rtx_insn *succ)\n+{\n+  if (!pred || !INSN_P (pred) || !succ || !INSN_P (succ))\n+    return 0;\n+\n+  if (!JUMP_P (pred) && !single_set (pred))\n+    return 0;\n+\n+  if (!JUMP_P (succ) && !single_set (succ))\n+    return 0;\n+\n+  if (TARGET_HS && (arc_tune == ARC_TUNE_ARCHS4X_REL31A))\n+    switch (get_attr_type (pred))\n+      {\n+      case TYPE_STORE:\n+\tswitch (get_attr_type (succ))\n+\t  {\n+\t  case TYPE_BRCC:\n+\t  case TYPE_BRCC_NO_DELAY_SLOT:\n+\t  case TYPE_LOOP_END:\n+\t    return 1;\n+\t  default:\n+\t    break;\n+\t  }\n+\tbreak;\n+      case TYPE_BRCC:\n+      case TYPE_BRCC_NO_DELAY_SLOT:\n+      case TYPE_LOOP_END:\n+\tif (get_attr_type (succ) == TYPE_STORE)\n+\t  return 1;\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+\n+  return 0;\n+}\n+\n /* The same functionality as arc_hazard.  It is called in machine\n    reorg before any other optimization.  Hence, the NOP size is taken\n    into account when doing branch shortening.  */\n@@ -7830,10 +7945,8 @@ workaround_arc_anomaly (void)\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n       succ0 = next_real_insn (insn);\n-      if (arc_hazard (insn, succ0))\n-\t{\n-\t  emit_insn_before (gen_nopv (), succ0);\n-\t}\n+      if (arc_hazard (insn, succ0) || arc_check_release31a (insn, succ0))\n+\temit_insn_before (gen_nopv (), succ0);\n     }\n \n   if (!TARGET_ARC700)\n@@ -9324,56 +9437,6 @@ disi_highpart (rtx in)\n   return simplify_gen_subreg (SImode, in, DImode, TARGET_BIG_ENDIAN ? 0 : 4);\n }\n \n-/* Return length adjustment for INSN.\n-   For ARC600:\n-   A write to a core reg greater or equal to 32 must not be immediately\n-   followed by a use.  Anticipate the length requirement to insert a nop\n-   between PRED and SUCC to prevent a hazard.  */\n-\n-static int\n-arc600_corereg_hazard (rtx_insn *pred, rtx_insn *succ)\n-{\n-  if (!TARGET_ARC600)\n-    return 0;\n-  if (GET_CODE (PATTERN (pred)) == SEQUENCE)\n-    pred = as_a <rtx_sequence *> (PATTERN (pred))->insn (1);\n-  if (GET_CODE (PATTERN (succ)) == SEQUENCE)\n-    succ = as_a <rtx_sequence *> (PATTERN (succ))->insn (0);\n-  if (recog_memoized (pred) == CODE_FOR_mulsi_600\n-      || recog_memoized (pred) == CODE_FOR_umul_600\n-      || recog_memoized (pred) == CODE_FOR_mac_600\n-      || recog_memoized (pred) == CODE_FOR_mul64_600\n-      || recog_memoized (pred) == CODE_FOR_mac64_600\n-      || recog_memoized (pred) == CODE_FOR_umul64_600\n-      || recog_memoized (pred) == CODE_FOR_umac64_600)\n-    return 0;\n-  subrtx_iterator::array_type array;\n-  FOR_EACH_SUBRTX (iter, array, PATTERN (pred), NONCONST)\n-    {\n-      const_rtx x = *iter;\n-      switch (GET_CODE (x))\n-\t{\n-\tcase SET: case POST_INC: case POST_DEC: case PRE_INC: case PRE_DEC:\n-\t  break;\n-\tdefault:\n-\t  /* This is also fine for PRE/POST_MODIFY, because they\n-\t     contain a SET.  */\n-\t  continue;\n-\t}\n-      rtx dest = XEXP (x, 0);\n-      /* Check if this sets an extension register.  N.B. we use 61 for the\n-\t condition codes, which is definitely not an extension register.  */\n-      if (REG_P (dest) && REGNO (dest) >= 32 && REGNO (dest) < 61\n-\t  /* Check if the same register is used by the PAT.  */\n-\t  && (refers_to_regno_p\n-\t      (REGNO (dest),\n-\t       REGNO (dest) + (GET_MODE_SIZE (GET_MODE (dest)) + 3) / 4U,\n-\t       PATTERN (succ), 0)))\n-\treturn 4;\n-    }\n-  return 0;\n-}\n-\n /* Given a rtx, check if it is an assembly instruction or not.  */\n \n static int\n@@ -9408,23 +9471,6 @@ arc_asm_insn_p (rtx x)\n   return 0;\n }\n \n-/* For ARC600:\n-   A write to a core reg greater or equal to 32 must not be immediately\n-   followed by a use.  Anticipate the length requirement to insert a nop\n-   between PRED and SUCC to prevent a hazard.  */\n-\n-int\n-arc_hazard (rtx_insn *pred, rtx_insn *succ)\n-{\n-  if (!pred || !INSN_P (pred) || !succ || !INSN_P (succ))\n-    return 0;\n-\n-  if (TARGET_ARC600)\n-    return arc600_corereg_hazard (pred, succ);\n-\n-  return 0;\n-}\n-\n /* Return length adjustment for INSN.  */\n \n int"}, {"sha": "7170445309fe145bc80ab70acdcb2528ade79d26", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -645,22 +645,21 @@\n ;;   is made that makes conditional execution required.\n \n (define_attr \"tune\" \"none,arc600,arc7xx,arc700_4_2_std,arc700_4_2_xmac, \\\n-core_3, archs4x, archs4xd, archs4xd_slow\"\n+archs4x, archs4xd\"\n   (const\n-   (cond [(symbol_ref \"arc_tune == TUNE_ARC600\")\n+   (cond [(symbol_ref \"arc_tune == ARC_TUNE_ARC600\")\n \t  (const_string \"arc600\")\n \t  (symbol_ref \"arc_tune == ARC_TUNE_ARC7XX\")\n \t  (const_string \"arc7xx\")\n-\t  (symbol_ref \"arc_tune == TUNE_ARC700_4_2_STD\")\n+\t  (symbol_ref \"arc_tune == ARC_TUNE_ARC700_4_2_STD\")\n \t  (const_string \"arc700_4_2_std\")\n-\t  (symbol_ref \"arc_tune == TUNE_ARC700_4_2_XMAC\")\n+\t  (symbol_ref \"arc_tune == ARC_TUNE_ARC700_4_2_XMAC\")\n \t  (const_string \"arc700_4_2_xmac\")\n-\t  (symbol_ref \"arc_tune == ARC_TUNE_CORE_3\")\n-\t  (const_string \"core_3\")\n-\t  (symbol_ref \"arc_tune == TUNE_ARCHS4X\")\n+\t  (ior (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4X\")\n+\t       (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4X_REL31A\"))\n \t  (const_string \"archs4x\")\n-\t  (ior (symbol_ref \"arc_tune == TUNE_ARCHS4XD\")\n-\t       (symbol_ref \"arc_tune == TUNE_ARCHS4XD_SLOW\"))\n+\t  (ior (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4XD\")\n+\t       (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4XD_SLOW\"))\n \t  (const_string \"archs4xd\")]\n \t (const_string \"none\"))))\n \n@@ -671,13 +670,22 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n \n (define_attr \"tune_dspmpy\" \"none, slow, fast\"\n   (const\n-  (cond [(ior (symbol_ref \"arc_tune == TUNE_ARCHS4X\")\n-\t      (symbol_ref \"arc_tune == TUNE_ARCHS4XD\"))\n+  (cond [(ior (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4X\")\n+\t      (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4XD\"))\n \t (const_string \"fast\")\n-\t (symbol_ref \"arc_tune == TUNE_ARCHS4XD_SLOW\")\n+\t (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4XD_SLOW\")\n \t (const_string \"slow\")]\n \t(const_string \"none\"))))\n \n+(define_attr \"tune_store\" \"none, normal, rel31a\"\n+  (const\n+  (cond [(ior (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4X\")\n+\t      (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4XD\"))\n+\t (const_string \"normal\")\n+\t (symbol_ref \"arc_tune == ARC_TUNE_ARCHS4X_REL31A\")\n+\t (const_string \"rel31a\")]\n+\t(const_string \"none\"))))\n+\n ;; Move instructions.\n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"move_dest_operand\" \"\")"}, {"sha": "0add5a2a21f0ec2726f8e1450a4849c1b91b6bbb", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -276,6 +276,9 @@ Enum(arc_tune_attr) String(arc750d) Value(ARC_TUNE_ARC700_4_2_XMAC)\n EnumValue\n Enum(arc_tune_attr) String(core3) Value(ARC_TUNE_CORE_3)\n \n+EnumValue\n+Enum(arc_tune_attr) String(release31a) Value(ARC_TUNE_ARCHS4X_REL31A)\n+\n mindexed-loads\n Target Var(TARGET_INDEXED_LOADS) Init(TARGET_INDEXED_LOADS_DEFAULT)\n Enable the use of indexed loads."}, {"sha": "1009833d4001fd64b3178783a4da94c547df57d3", "filename": "gcc/config/arc/arcHS4x.md", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2FarcHS4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2FarcHS4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2FarcHS4x.md?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -27,14 +27,21 @@\n (define_cpu_unit \"hs4x_mult\" \"ARCHS4x\")\n (define_cpu_unit \"hs4x_x1, hs4x_x2\" \"ARCHS4x\")\n (define_cpu_unit \"hs4x_y1, hs4x_y2\" \"ARCHS4x\")\n+(define_cpu_unit \"hs4x_brcc0, hs4x_brcc1\" \"ARCHS4x\")\n \n (define_insn_reservation \"hs4x_brj_op\" 1\n   (and (match_test \"TARGET_HS\")\n        (eq_attr \"tune\" \"archs4x, archs4xd\")\n        (eq_attr \"type\" \"call, call_no_delay_slot, uncond_branch, jump, \\\n-branch, brcc,brcc_no_delay_slot, sfunc\"))\n+branch, sfunc\"))\n   \"hs4x_issue0\")\n \n+(define_insn_reservation \"hs4x_brcc_op\" 1\n+  (and (match_test \"TARGET_HS\")\n+       (eq_attr \"tune\" \"archs4x, archs4xd\")\n+       (eq_attr \"type\" \"brcc,brcc_no_delay_slot,loop_end\"))\n+  \"hs4x_issue0 + hs4x_brcc0 + hs4x_brcc1\")\n+\n (define_insn_reservation \"hs4x_data_load_op\" 4\n   (and (match_test \"TARGET_HS\")\n        (eq_attr \"tune\" \"archs4x, archs4xd\")\n@@ -43,10 +50,16 @@ branch, brcc,brcc_no_delay_slot, sfunc\"))\n \n (define_insn_reservation \"hs4x_data_store_op\" 1\n   (and (match_test \"TARGET_HS\")\n-       (eq_attr \"tune\" \"archs4x, archs4xd\")\n+       (eq_attr \"tune_store\" \"normal\")\n        (eq_attr \"type\" \"store\"))\n   \"hs4x_issue1 + hs4x_ld_st\")\n \n+(define_insn_reservation \"hs4x_data_store_1_op\" 2\n+  (and (match_test \"TARGET_HS\")\n+       (eq_attr \"tune_store\" \"rel31a\")\n+       (eq_attr \"type\" \"store\"))\n+  \"hs4x_issue1 + hs4x_ld_st + hs4x_brcc0, hs4x_brcc1\")\n+\n ;; Advanced ALU\n (define_insn_reservation \"hs4x_adv_alue_op\" 4\n   (and (match_test \"TARGET_HS\")"}, {"sha": "921945eba44fbda62f0cbc24d3ccb091c15ae00b", "filename": "gcc/config/arc/t-multilib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fconfig%2Farc%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-multilib?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -21,9 +21,9 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS = mcpu=em/mcpu=em_mini/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=quarkse_em/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=hs4x/mcpu=hs4xd/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n+MULTILIB_OPTIONS = mcpu=em/mcpu=em_mini/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=quarkse_em/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=hs4x/mcpu=hs4xd/mcpu=hs4x_rel31/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n \n-MULTILIB_DIRNAMES = em em_mini arcem em4 em4_dmips em4_fpus em4_fpuda quarkse_em hs archs hs34 hs38 hs38_linux hs4x hs4xd arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n+MULTILIB_DIRNAMES = em em_mini arcem em4 em4_dmips em4_fpus em4_fpuda quarkse_em hs archs hs34 hs38 hs38_linux hs4x hs4xd hs4x_rel31 arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n \n # Aliases:\n MULTILIB_MATCHES  = mcpu?arc600=mcpu?ARC600"}, {"sha": "94fe57aa4e2818751532e3055816ef022e2ba75e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7501eec65c60701f72621d04eeb5342bad2fe4fb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7501eec65c60701f72621d04eeb5342bad2fe4fb", "patch": "@@ -20053,6 +20053,15 @@ Compile for ARC HS38 CPU.\n @item hs38_linux\n Compile for ARC HS38 CPU with all hardware extensions on.\n \n+@item hs4x\n+Compile for ARC HS4x CPU.\n+\n+@item hs4xd\n+Compile for ARC HS4xD CPU.\n+\n+@item hs4x_rel31\n+Compile for ARC HS4x CPU release 3.10a.\n+\n @item arc600_norm\n Compile for ARC 600 CPU with @code{norm} instructions enabled.\n \n@@ -20662,6 +20671,13 @@ Tune for ARC725D CPU.\n @item ARC750D\n Tune for ARC750D CPU.\n \n+@item core3\n+Tune for ARCv2 core3 type CPU.  This option enable usage of\n+@code{dbnz} instruction.\n+\n+@item release31a\n+Tune for ARC4x release 3.10a.\n+\n @end table\n \n @item -mmultcost=@var{num}"}]}