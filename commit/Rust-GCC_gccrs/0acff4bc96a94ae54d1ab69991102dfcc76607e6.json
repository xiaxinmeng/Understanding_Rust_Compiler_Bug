{"sha": "0acff4bc96a94ae54d1ab69991102dfcc76607e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjZmY0YmM5NmE5NGFlNTRkMWFiNjk5OTExMDJkZmNjNzY2MDdlNg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-10-02T05:14:25Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-10-02T05:14:25Z"}, "message": "prims.cc (_Jv_argv, _Jv_argc): New fields.\n\n2000-10-02  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* prims.cc (_Jv_argv, _Jv_argc): New fields.\n\t(JvRunMain): Set _Jv_argv and _Jv_argc.\n\t* java/awt/Component.java: Minor fixes.\n\t* java/awt/Image.java (UndefinedProperty): Initialize final field.\n\t* java/awt/Toolkit.java (systemEventQueue): Removed.\n\t(getDefaultToolkit): Default to \"gnu.awt.gtk.GtkToolkit\".\n\t* java/awt/Window.java (getToolkit): Don't call super.\n\t* java/awt/image/BufferedImage.java: Fix definate assignment errors.\n\t* java/awt/peer/ContainerPeer.java (insets): Remove unused method.\n\t* gnu/awt/gtk/GtkComponentPeer.java: New file.\n\t* gnu/awt/gtk/GtkContainerPeer.java: New file.\n\t* gnu/awt/gtk/GtkFramePeer.java: New file.\n\t* gnu/awt/gtk/GtkMainThread.java: New file.\n\t* gnu/awt/gtk/GtkToolkit.java: New file.\n\t* gnu/awt/gtk/GtkWindowPeer.java: New file.\n\t* gnu/awt/gtk/gtkcommon.cc: New file.\n\t* gnu/awt/gtk/gtkcommon.h: New file.\n\t* gnu/awt/gtk/natGtkComponentPeer.cc: New file.\n\t* gnu/awt/gtk/natGtkContainerPeer.cc: New file.\n\t* gnu/awt/gtk/natGtkFramePeer.cc: New file.\n\t* gnu/awt/gtk/natGtkMainThread.cc: New file.\n\t* gnu/awt/gtk/natGtkToolkit.cc: New file.\n\t* gnu/awt/gtk/natGtkWindowPeer.cc: New file.\n\nFrom-SVN: r36688", "tree": {"sha": "d7afc0397eac24e3885cd07f96318fd0bf3a014c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7afc0397eac24e3885cd07f96318fd0bf3a014c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0acff4bc96a94ae54d1ab69991102dfcc76607e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acff4bc96a94ae54d1ab69991102dfcc76607e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acff4bc96a94ae54d1ab69991102dfcc76607e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acff4bc96a94ae54d1ab69991102dfcc76607e6/comments", "author": null, "committer": null, "parents": [{"sha": "f15b9af9843e58e7c03df81098a8a15646f5058e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15b9af9843e58e7c03df81098a8a15646f5058e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15b9af9843e58e7c03df81098a8a15646f5058e"}], "stats": {"total": 1278, "additions": 1266, "deletions": 12}, "files": [{"sha": "c2e1c5339eeda14a114aad1fc9721c26490e5682", "filename": "libjava/gnu/awt/gtk/GtkComponentPeer.java", "status": "added", "additions": 269, "deletions": 0, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkComponentPeer.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,269 @@\n+/* GtkComponentPeer.java -- Implements ComponentPeer with GTK\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.*;\n+import java.awt.peer.ComponentPeer;\n+\n+public abstract class GtkComponentPeer implements ComponentPeer\n+{\n+  // We need to put a reference to the Event Queue somewhere. This seems like \n+  // a convenient place.\n+  static EventQueue eventQueue = new EventQueue();\n+\n+  Component awtComponent;\n+  gnu.gcj.RawData ptr;  // Actual gtk object.\n+\n+  static\n+  {\n+    // This will start the main toolkit thread.\n+    GtkToolkit.instance.init();\n+  }\n+\n+  public int checkImage (Image image, int width, int height, \n+\t\t\t ImageObserver observer) \n+  {\n+    return -1;\n+    /*\n+    GtkImage i = (GtkImage) image;\n+    return i.checkImage ();\n+    */\n+  }\n+\n+  public Image createImage (ImageProducer producer)\n+  {\n+    return null;\n+    //return new GtkImage (producer, null);\n+  }\n+\n+  public Image createImage (int width, int height)\n+  {\n+    return null;\n+    /*\n+    GdkGraphics g = new GdkGraphics (width, height);\n+    return new GtkOffScreenImage (null, g, width, height);\n+    */\n+  }\n+\n+  public void disable () \n+  {\n+    setEnabled (false);\n+  }\n+\n+  native public void dispose ();\n+\n+  public void enable () \n+  {\n+    setEnabled (true);\n+  }\n+\n+  /** \n+   * Get the graphics configuration of the component. The color model\n+   * of the component can be derived from the configuration.\n+   */\n+  public GraphicsConfiguration getGraphicsConfiguration ()\n+  {\n+    return null;\n+  }\n+\n+  public FontMetrics getFontMetrics (Font font)\n+  {\n+    return null;\n+    //return new GdkFontMetrics (font);\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    throw new InternalError ();\n+  }\n+\n+  public native Point getLocationOnScreen ();  \n+  public native Dimension getMinimumSize();\n+  public native Dimension getPreferredSize();\n+  \n+  public Toolkit getToolkit ()\n+  {\n+    return GtkToolkit.instance;\n+  }\n+  \n+  public void handleEvent(AWTEvent e)\n+  {\n+  }\n+  \n+  public void hide () \n+  {\n+    setVisible (false);\n+  }\n+\n+  public void show () \n+  {\n+    setVisible (true);\n+  }\n+  \n+  public boolean isFocusTraversable () \n+  {\n+    return true;\n+  }\n+\n+  public Dimension minimumSize () \n+  {\n+    return getMinimumSize();\n+  }\n+  \n+  public Dimension preferredSize()\n+  {\n+    return getPreferredSize();\n+  }\n+\n+  public void paint (Graphics g)\n+  {\n+    awtComponent.paint (g); // ???\n+  }\n+\n+  public boolean prepareImage (Image image, int width, int height,\n+\t\t\t       ImageObserver observer) \n+  {\n+    /*\n+    GtkImage i = (GtkImage) image;\n+\n+    if (i.isLoaded ()) return true;\n+\n+    class PrepareImage extends Thread\n+    {\n+      GtkImage image;\n+      ImageObserver observer;\n+\n+      PrepareImage (GtkImage image, ImageObserver observer)\n+      {\n+\tthis.image = image;\n+\tthis.observer = observer;\n+      }\n+      \n+      public void run ()\n+      {\n+\t// XXX: need to return data to image observer\n+\timage.source.startProduction (null);\n+      }\n+    }\n+\n+    new PrepareImage (i, observer).start ();\n+    */\n+    return false;\n+  }\n+  \n+  public void print (Graphics g) \n+  {\n+    throw new RuntimeException ();\n+  }\n+  \n+  native public void requestFocus ();\n+\n+  public void repaint (long tm, int x, int y, int width, int height)\n+  {\n+    // ???\n+    eventQueue.postEvent (new PaintEvent (\n+      awtComponent, PaintEvent.UPDATE, new Rectangle (x, y, width, height)));\n+  }\n+\n+  \n+  public void reshape (int x, int y, int width, int height) \n+  {\n+    setBounds (x, y, width, height);\n+  }\n+\n+  public native void setBounds (int x, int y, int width, int height);\n+  public native void setCursor (Cursor cursor);\n+\n+  public native void setEnabled (boolean b);\n+  \n+  public native void setEventMask(long eventMask);\n+  public native void setFont(Font font);\n+  public native void setForeground(Color color);\n+  public native void setBackground (Color c);\n+  public native void setVisible(boolean visible);\n+\n+  native void realize();\n+\n+  protected GtkComponentPeer (Component awtComponent)\n+  {\n+    this.awtComponent = awtComponent;\n+    create();\n+    \n+    // TODO: Each of these calls will currently perform a separate native lock.\n+    // It may be desirable to use our own, recusive mutex implementation by\n+    // passing our threads implementation to g_threads_init().\n+    // This would greatly reduce locking calls in the peer code, and allow us\n+    // to aquire the lock from java code.\n+    Rectangle r = awtComponent.getBounds();\n+    setBounds (r.x, r.y, r.width, r.height);\n+    \n+    Color c = awtComponent.getForeground();\n+    if (c != null)\n+      setForeground (c);\n+    c = awtComponent.getBackground();\n+    if (c != null)\n+      setBackground (c);\n+    setEnabled (awtComponent.isEnabled());\n+    Font f = awtComponent.getFont();\n+    if (f != null)\n+      setFont (awtComponent.getFont());\n+      \n+    realize();\n+  }\n+    \n+  protected native void create ();\n+\n+  // FIXME: It may make sense to do the following directly from the native\n+  // code.\n+  protected void postMouseEvent(int id, long when, int mods, int x, int y, \n+\t\t\t\tint clickCount, boolean popupTrigger) \n+  {\n+    eventQueue.postEvent(new MouseEvent(awtComponent, id, when, mods, x, y, \n+\t\t\t\t\tclickCount, popupTrigger));\n+  }\n+\n+  protected void postExposeEvent (int x, int y, int width, int height)\n+  {\n+    eventQueue.postEvent (new PaintEvent (awtComponent, PaintEvent.PAINT,\n+\t\t\t\t      new Rectangle (x, y, width, height)));\n+  }\n+\n+  protected void postKeyEvent (int id, long when, int mods, \n+\t\t\t       int keyCode, char keyChar)\n+  {\n+    eventQueue.postEvent (new KeyEvent (awtComponent, id, when, mods, \n+\t\t\t       keyCode, keyChar));\n+  }\n+  \n+  protected void postFocusEvent (int id, boolean temporary)\n+  {\n+    eventQueue.postEvent (new FocusEvent (awtComponent, id, temporary));\n+  }\n+\n+  protected void postItemEvent (Object item, int stateChange)\n+  {\n+    eventQueue.postEvent (new ItemEvent ((ItemSelectable)awtComponent, \n+\t\t\t\tItemEvent.ITEM_STATE_CHANGED,\n+\t\t\t\titem, stateChange));\n+  }\n+}"}, {"sha": "2a654da6d62944d383e246e6a1cf40c68d9a85fa", "filename": "libjava/gnu/awt/gtk/GtkContainerPeer.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkContainerPeer.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,55 @@\n+/* GtkContainerPeer.java -- Implements ContainerPeer with GTK\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.peer.ContainerPeer;\n+\n+public abstract class GtkContainerPeer extends GtkComponentPeer \n+  implements ContainerPeer\n+{\n+  // FIXME?\n+  static Insets insets = new Insets(0,0,0,0);\n+\n+  protected GtkContainerPeer (Container awtContainer)\n+  {\n+    super (awtContainer);\n+  }\n+\n+  public Insets getInsets()\n+  {\n+    // FIXME?\n+    return insets;\n+  }\n+  \n+  public void beginValidate()\n+  {\n+    // FIXME\n+  }\n+  \n+  public void endValidate()\n+  {\n+    // FIXME\n+  }\n+  \n+  protected native void create();\n+}"}, {"sha": "83ff613fde86101b13f976c7c97e8e6004889f68", "filename": "libjava/gnu/awt/gtk/GtkFramePeer.java", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkFramePeer.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,42 @@\n+/* GtkFramePeer.java -- Implements FramePeer with GTK\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.peer.FramePeer;\n+\n+public class GtkFramePeer extends GtkWindowPeer \n+  implements FramePeer\n+{\n+  protected GtkFramePeer (Frame awtFrame)\n+  {\n+    super (awtFrame);\n+    //init ();\n+  }\n+\n+  public native void setIconImage(Image image);\n+  public native void setMenuBar(MenuBar mb);\n+  public native void setResizable(boolean resizable);\n+  public native void setTitle(String title);    \n+  \n+  protected native void create();\n+}"}, {"sha": "1822457fa71b9be37da3bf3537f73ca18dc41356", "filename": "libjava/gnu/awt/gtk/GtkMainThread.java", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkMainThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkMainThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkMainThread.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,36 @@\n+/* GtkMainThread.java -- Runs gtk_main()\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+public class GtkMainThread extends Thread\n+{\n+  native void gtkMain();\n+  \n+  public GtkMainThread() \n+  {\n+    super (\"GtkMain\");    \n+  }\n+  \n+  public void run() \n+  {\n+    gtkMain();\n+  }\n+}"}, {"sha": "18833b8f911e0b025d9ddda6ed7c5155a191e51f", "filename": "libjava/gnu/awt/gtk/GtkToolkit.java", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkToolkit.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,314 @@\n+/* GtkToolkit.java -- Implements an AWT Toolkit using GTK for peers\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.net.*;\n+import java.util.Hashtable;\n+import java.util.Properties;\n+import java.util.MissingResourceException;\n+import java.awt.datatransfer.*;\n+import java.awt.image.*;\n+import java.awt.peer.*;\n+\n+public class GtkToolkit extends java.awt.Toolkit\n+{\n+  static GtkMainThread gtkthread;\n+  static EventQueue evtqueue;\n+  static Hashtable containers = new Hashtable();\n+  static Clipboard systemClipboard;\n+  static GtkToolkit instance = null;\n+\n+  public GtkToolkit ()\n+  {\n+    gtkInit();\n+    instance = this;\n+    //systemClipboard = new GtkClipboard ();\n+  }\n+  \n+  // Start the thread to run the GTK event loop. This is called from \n+  // a GtkComponentPeer static initializer.\n+  void init ()\n+  {\n+    gtkthread = new GtkMainThread ();\n+    gtkthread.start();\n+  }\n+\n+  static native void gtkInit();\n+  \n+  native public void beep ();\n+  \n+  public int checkImage (Image image, int width, int height, \n+\t\t\t ImageObserver observer) \n+  {\n+    return ImageObserver.ALLBITS;\n+\n+//      GtkImage i = (GtkImage) image;\n+//      return i.checkImage ();\n+  }\n+\n+  public Image createImage(String filename)\n+  {\n+    return null;\n+  }\n+\n+  public Image createImage(URL url)\n+  {\n+    return null;\n+  }\n+\n+  public Image createImage (ImageProducer producer) \n+  {\n+//    return new GtkImage (producer, null);\n+    return null;\n+  }\n+\n+  public Image createImage (byte[] imagedata, int imageoffset,\n+\t\t\t    int imagelength) \n+  {\n+    System.out.println (\"createImage byte[] NOT SUPPORTED\");\n+    return null;\n+  }\n+\n+  public ColorModel getColorModel () \n+  {\n+    return ColorModel.getRGBdefault ();\n+  }\n+\n+  public String[] getFontList () \n+  {\n+    return (new String[] { \"Dialog\", \n+\t\t\t   \"DialogInput\", \n+\t\t\t   \"Monospaced\", \n+\t\t\t   \"Serif\", \n+\t\t\t   \"SansSerif\" });\n+  }\n+\n+  public FontMetrics getFontMetrics (Font font) \n+  {\n+//    return new GdkFontMetrics (font);\n+    return null;\n+  }\n+\n+  public Image getImage (String filename) \n+  {\n+//    return new GtkImage (new GdkPixbufDecoder (filename), null);\n+    return null;\n+  }\n+\n+  public Image getImage (URL url) \n+  {\n+//    return new GtkImage (new GdkPixbufDecoder (url), null);\n+    return null;\n+  }\n+\n+  /*\n+  public PrintJob getPrintJob (Frame frame, String jobtitle, Properties props) \n+  {\n+    return null;\n+  }\n+  */\n+  native public int getScreenResolution();\n+\n+  native public Dimension getScreenSize ();\n+\n+  public Clipboard getSystemClipboard() \n+  {\n+    return systemClipboard;\n+  }\n+\n+  public boolean prepareImage (Image image, int width, int height, \n+\t\t\t       ImageObserver observer) \n+  {\n+    return false;\n+  }\n+\n+  native public void sync ();\n+\n+  protected void setComponentState (Component c, GtkComponentPeer cp)\n+  {      \n+    /* Make the Peer reflect the state of the Component */\n+    if (! (c instanceof Window))\n+      {\n+\tcp.setCursor (c.getCursor ());\n+\t\n+\tRectangle bounds = c.getBounds ();\n+\tcp.setBounds (bounds.x, bounds.y, bounds.width, bounds.height);\n+\tif (c instanceof Canvas)\n+\t  System.out.println (\"width \" + bounds.width + \" height \" + bounds.height);\n+\t\n+\tcp.setVisible (c.isVisible ());\n+      }\n+  }\n+\n+  protected ButtonPeer createButton (Button b)\n+  {\n+    return null;\n+    /*    \n+    GtkButtonPeer bp = new GtkButtonPeer (b);\n+    Rectangle bounds = b.getBounds ();\n+    bp.setBounds (bounds.x, bounds.y, bounds.width, bounds.height);\n+    return bp;\n+    */\n+  }\n+\n+  protected CanvasPeer createCanvas (Canvas c) \n+  {\n+//    return new GtkCanvasPeer (c);\n+    return null;\n+  }\n+\n+  protected CheckboxPeer createCheckbox (Checkbox cb) \n+  {\n+    return null;\n+    /*\n+    if (cb.getCheckboxGroup () != null)\n+      return new GtkRadioButtonPeer (cb);\n+    else\n+      return new GtkCheckButtonPeer (cb);\n+    */\n+  }\n+\n+  protected CheckboxMenuItemPeer createCheckboxMenuItem (CheckboxMenuItem cmi)\n+  {\n+    return null;\n+    //return new GtkCheckboxMenuItemPeer (cmi);\n+  }\n+\n+  protected ChoicePeer createChoice (Choice c) \n+  {\n+    return null;\n+    //return new GtkChoicePeer (c);\n+  }\n+\n+  protected DialogPeer createDialog (Dialog d)\n+  {\n+    return null;  \n+    //return new GtkDialogPeer (d);\n+  }\n+\n+  protected FileDialogPeer createFileDialog (FileDialog fd)\n+  {\n+    return null;  \n+    //return new GtkFileDialogPeer (fd);\n+  }\n+\n+  protected FramePeer createFrame (Frame f)\n+  {  \n+    return new GtkFramePeer (f);\n+  }\n+\n+  protected LabelPeer createLabel (Label label) \n+  {\n+    return null;\n+    //return new GtkLabelPeer (label);\n+  }\n+\n+  protected ListPeer createList (List list)\n+  {\n+    return null;\n+    //return new GtkListPeer (list);\n+  }\n+\n+  protected MenuPeer createMenu (Menu m) \n+  {\n+    return null;\n+    //return new GtkMenuPeer (m);\n+  }\n+\n+  protected MenuBarPeer createMenuBar (MenuBar mb) \n+  {\n+    return null;\n+    //return new GtkMenuBarPeer (mb);\n+  }\n+\n+  protected MenuItemPeer createMenuItem (MenuItem mi) \n+  {\n+    return null;\n+    //return new GtkMenuItemPeer (mi);\n+  }\n+\n+  protected PanelPeer createPanel (Panel p) \n+  {\n+    return null;\n+    //return new GtkPanelPeer (p);\n+  }\n+\n+  protected PopupMenuPeer createPopupMenu (PopupMenu target) \n+  {\n+    return null;\n+    //return new GtkPopupMenuPeer (target);\n+  }\n+\n+  protected ScrollPanePeer createScrollPane (ScrollPane sp) \n+  {\n+    return null;\n+    //return new GtkScrollPanePeer (sp);\n+  }\n+\n+  protected ScrollbarPeer createScrollbar (Scrollbar sb) \n+  {\n+    return null;\n+    //return new GtkScrollbarPeer (sb);\n+  }\n+\n+  protected TextAreaPeer createTextArea (TextArea ta) \n+  {\n+    return null;\n+    //return new GtkTextAreaPeer (ta);\n+  }\n+\n+  protected TextFieldPeer createTextField (TextField tf) \n+  {\n+    return null;\n+    //return new GtkTextFieldPeer (tf);\n+  }\n+\n+  protected WindowPeer createWindow (Window w)\n+  {\n+    return new GtkWindowPeer (w);\n+  }\n+\n+  protected FontPeer getFontPeer (String name, int style) \n+  {\n+    return null;\n+    /*\n+    try \n+    {\n+      GtkFontPeer fp = new GtkFontPeer (name, style);\n+      return fp;\n+    } \n+    catch (MissingResourceException ex) \n+    {\n+      return null;\n+    }\n+    */\n+  }\n+\n+  protected EventQueue getSystemEventQueueImpl() \n+  {\n+    return GtkComponentPeer.eventQueue;\n+  }\n+\n+  protected void loadSystemColors (int[] systemColors) \n+  {\n+  }\n+}"}, {"sha": "022fecc79b973cefc86c916c009bd46a521fc167", "filename": "libjava/gnu/awt/gtk/GtkWindowPeer.java", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkWindowPeer.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,39 @@\n+/* GtkWindowPeer.java -- Implements WindowPeer with GTK\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.peer.WindowPeer;\n+\n+public class GtkWindowPeer extends GtkContainerPeer \n+  implements WindowPeer\n+{\n+  protected GtkWindowPeer (Window awtWindow)\n+  {\n+    super (awtWindow);\n+  }\n+\n+  public native void toBack();  \n+  public native void toFront();\n+  \n+  protected native void create();\n+}"}, {"sha": "6a12130da89df5377bc63b89ca88bbb4ba751e25", "filename": "libjava/gnu/awt/gtk/gtkcommon.cc", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,14 @@\n+// -*- c++ -*-\n+// gtkutils.cc - Common functions for the gtk AWT peers.\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <gtk/gtk.h>\n+\n+#include \"gtkcommon.h\""}, {"sha": "4e9c43002434658280cdf2573567bdb7f963508d", "filename": "libjava/gnu/awt/gtk/gtkcommon.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.h?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,71 @@\n+// -*- c++ -*-\n+// gtkutils.h - Common defines and inline functions for the gtk AWT peers.\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __GTKCOMMON_H__\n+#define __GTKCOMMON_H__\n+\n+#include <gtk/gtk.h>\n+#include <gdk/gdkx.h>\n+\n+#include <java/awt/Color.h>\n+\n+// Convert AWT Color to gdk color value.\n+static inline void \n+_Jv_ConvertAwtColor(java::awt::Color* awtcolor, GdkColor* gdkcolor)\n+{\n+  jint rgb = awtcolor->getRGB();\n+  gushort r = (rgb >> 16) & 0xFF;\n+  gushort g = (rgb >> 8) & 0xFF;\n+  gushort b = rgb & 0xFF;\n+  \n+  gdkcolor->red = (r << 8) + r;\n+  gdkcolor->green = (g << 8) + g;\n+  gdkcolor->blue = (b << 8) + b;\n+  \n+  // FIXME: Deal with colormap? gdk_color_alloc()?\n+}\t\t\t\t    \n+\n+// Convert gdk color value to AWT Color.\n+static inline java::awt::Color* \n+_Jv_ConvertGtkColor (GdkColor* gdkcolor)\n+{\n+  jint r = gdkcolor->red >> 8;\n+  jint g = gdkcolor->green >> 8;\n+  jint b = gdkcolor->blue >> 8;\n+\n+  java::awt::Color *c = new java::awt::Color(r,g,b);\n+  \n+  return c;\n+}\t\t\t\t    \n+\n+static inline void  \n+_Jv_GdkScaleColor (GdkColor* oldc, GdkColor* newc, gfloat scale)\n+{\n+  // FIXME: Need to deal with overflows or find a better way\n+  *newc = *oldc;\n+  newc->red += (gushort) (newc->red * scale);\n+  newc->green += (gushort) (newc->green * scale);\n+  newc->blue += (gushort) (newc->blue * scale);\n+}\n+\n+// Normally the X queue gets flushed automatically when gtk's event loop goes \n+// idle. However, some calls do not cause any activitity on the event loop,\n+// so we need to occasionally flush pending requests manually because we arn't \n+// running from the gtk_main thread. Note that gdk_flush calls XSync(), which \n+// is more than what is needed here.\n+static inline void\n+_Jv_FlushRequests ()\n+{\n+  // FIXME: What about platforms that arn't X?\n+  XFlush (GDK_DISPLAY ());\n+}\n+\n+#endif /* __GTKUTILS_H__ */"}, {"sha": "fea3ca048b9fb935fee610ae36452d6c976471ed", "filename": "libjava/gnu/awt/gtk/natGtkComponentPeer.cc", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkComponentPeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkComponentPeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkComponentPeer.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,205 @@\n+// This file was created by `gcjh -stubs'. -*- c++ -*-\n+//\n+// This file is intended to give you a head start on implementing native\n+// methods using CNI.\n+// Be aware: running `gcjh -stubs ' once more for this class may\n+// overwrite any edits you have made to this file.\n+\n+#include <java/awt/Point.h>\n+#include <java/awt/Dimension.h>\n+\n+#include <gnu/awt/gtk/GtkComponentPeer.h>\n+#include <gcj/cni.h>\n+#include <gtk/gtk.h>\n+\n+#include \"gtkcommon.h\"\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::dispose ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gtk_widget_destroy (GTK_WIDGET (ptr));\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+::java::awt::Point *\n+gnu::awt::gtk::GtkComponentPeer::getLocationOnScreen ()\n+{\n+  GDK_THREADS_ENTER ();\n+  GDK_THREADS_LEAVE ();\n+  \n+  // FIXME\n+  \n+  return NULL;  \n+}\n+\n+\n+::java::awt::Dimension *\n+gnu::awt::gtk::GtkComponentPeer::getMinimumSize ()\n+{\n+  GtkRequisition req;\n+  ::java::awt::Dimension *dim = new ::java::awt::Dimension ();\n+\n+  GDK_THREADS_ENTER ();\n+\n+  gtk_widget_size_request (GTK_WIDGET (ptr), &req);\n+\n+  GDK_THREADS_LEAVE ();\n+\n+  dim->width = (jint) req.width;\n+  dim->height = (jint) req.height;\n+  return dim;  \n+}\n+\n+\n+::java::awt::Dimension *\n+gnu::awt::gtk::GtkComponentPeer::getPreferredSize ()\n+{\n+  return getMinimumSize ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::requestFocus ()\n+{\n+  GDK_THREADS_ENTER ();\n+\n+  gtk_widget_grab_focus (GTK_WIDGET (ptr));\n+\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setBounds (jint x, jint y, \n+                                                  jint width, jint height)\n+{\n+  GDK_THREADS_ENTER ();\n+\n+  GtkWidget *widget = GTK_WIDGET (ptr);\n+  gtk_widget_set_usize (widget, width, height);\n+  //gtk_layout_move (GTK_LAYOUT (widget->parent), widget, x, y);\n+\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setCursor (::java::awt::Cursor *)\n+{\n+//  JvFail (\"gnu::awt::gtk::GtkComponentPeer::setCursor (::java::awt::Cursor *) not implemented\");\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setEnabled (jboolean enabled)\n+{\n+  GDK_THREADS_ENTER ();\n+\n+  gtk_widget_set_sensitive (GTK_WIDGET (ptr), enabled);\n+\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setEventMask (jlong)\n+{\n+  // TODO\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setFont (::java::awt::Font *)\n+{\n+  // TODO\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setForeground (::java::awt::Color *color)\n+{\n+  // FIXME: This doesn't work if component is already realized/visible\n+\n+  GdkColor gcolor;\n+  _Jv_ConvertAwtColor(color, &gcolor);\n+  \n+  GDK_THREADS_ENTER ();\n+\n+  GtkStyle *style = gtk_widget_get_style (GTK_WIDGET (ptr));\n+\n+  style->bg[GTK_STATE_NORMAL] = gcolor;\n+  style->bg[GTK_STATE_ACTIVE] = gcolor;\n+  style->bg[GTK_STATE_PRELIGHT] = gcolor;\n+  style->bg[GTK_STATE_SELECTED] = gcolor;\n+  style->bg[GTK_STATE_INSENSITIVE] = gcolor;\n+  \n+  gtk_widget_set_style (GTK_WIDGET (ptr), style);\n+\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setBackground (::java::awt::Color *color)\n+{\n+  // FIXME: This doesn't work if component is already realized/visible\n+\n+  GdkColor gcolor;\n+  _Jv_ConvertAwtColor(color, &gcolor);\n+\n+  GDK_THREADS_ENTER ();\n+\n+  GtkStyle *style = gtk_widget_get_style (GTK_WIDGET (ptr));\n+\n+  style->bg[GTK_STATE_NORMAL] = gcolor;\n+  style->bg[GTK_STATE_ACTIVE] = gcolor;\n+  style->bg[GTK_STATE_PRELIGHT] = gcolor;\n+  style->bg[GTK_STATE_SELECTED] = gcolor;\n+  style->bg[GTK_STATE_INSENSITIVE] = gcolor;\n+  // gtk allows us to set color values for different states of the\n+  // widget. AWT only provides a single background color, so scale it\n+  // to get some reasonable values.\n+//  _Jv_GdkScaleColor (&gcolor, &style->bg[GTK_STATE_ACTIVE], -0.1);\n+//  _Jv_GdkScaleColor (&gcolor, &style->bg[GTK_STATE_PRELIGHT], 0.2);\n+//  _Jv_GdkScaleColor (&gcolor, &style->bg[GTK_STATE_SELECTED], -0.2);\n+//  _Jv_GdkScaleColor (&gcolor, &style->bg[GTK_STATE_INSENSITIVE], -0.2);  \n+\n+  gtk_widget_set_style (GTK_WIDGET (ptr), style);\n+\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::setVisible (jboolean visible)\n+{\n+  GDK_THREADS_ENTER ();\n+  \n+  GtkWidget *widget = GTK_WIDGET (ptr);\n+\n+  if (visible)\n+    gtk_widget_show (widget);\n+  else\n+    gtk_widget_hide (widget);\n+\n+  _Jv_FlushRequests ();\n+\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::create ()\n+{\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkComponentPeer::realize ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  GDK_THREADS_LEAVE ();\n+}"}, {"sha": "0d5656d4f72ba07cb2c481e4878ff7b15cfb2d60", "filename": "libjava/gnu/awt/gtk/natGtkContainerPeer.cc", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkContainerPeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkContainerPeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkContainerPeer.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,15 @@\n+// This file was created by `gcjh -stubs'. -*- c++ -*-\n+//\n+// This file is intended to give you a head start on implementing native\n+// methods using CNI.\n+// Be aware: running `gcjh -stubs ' once more for this class may\n+// overwrite any edits you have made to this file.\n+\n+#include <gnu/awt/gtk/GtkContainerPeer.h>\n+#include <gcj/cni.h>\n+\n+void\n+gnu::awt::gtk::GtkContainerPeer::create ()\n+{\n+  gnu::awt::gtk::GtkComponentPeer::create();\n+}"}, {"sha": "b9b4d95a34e46bbdc8f9220570ed8e57263bee0c", "filename": "libjava/gnu/awt/gtk/natGtkFramePeer.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkFramePeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkFramePeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkFramePeer.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,51 @@\n+// This file was created by `gcjh -stubs'. -*- c++ -*-\n+//\n+// This file is intended to give you a head start on implementing native\n+// methods using CNI.\n+// Be aware: running `gcjh -stubs ' once more for this class may\n+// overwrite any edits you have made to this file.\n+\n+#include <gnu/awt/gtk/GtkFramePeer.h>\n+#include <gcj/cni.h>\n+\n+#include <gtk/gtk.h>\n+\n+void\n+gnu::awt::gtk::GtkFramePeer::setIconImage (::java::awt::Image *)\n+{\n+  // TODO\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkFramePeer::setMenuBar (::java::awt::MenuBar *)\n+{\n+  // TODO\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkFramePeer::setResizable (jboolean)\n+{\n+  // TODO\n+}\n+\n+\n+void\n+gnu::awt::gtk::GtkFramePeer::setTitle (::java::lang::String *)\n+{\n+  // TODO\n+}\n+\n+void\n+gnu::awt::gtk::GtkFramePeer::create ()\n+{\n+  if (ptr == NULL)\n+    {\n+      GDK_THREADS_ENTER ();\n+      ptr = (gnu::gcj::RawData *) gtk_window_new(GTK_WINDOW_TOPLEVEL);\n+      GDK_THREADS_LEAVE ();\n+    }\n+    \n+  gnu::awt::gtk::GtkContainerPeer::create();\n+}"}, {"sha": "9cc492c31ed2141eb4d4353998c5daf7fc2f8c51", "filename": "libjava/gnu/awt/gtk/natGtkMainThread.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkMainThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkMainThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkMainThread.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,22 @@\n+// This file was created by `gcjh -stubs'. -*- c++ -*-\n+//\n+// This file is intended to give you a head start on implementing native\n+// methods using CNI.\n+// Be aware: running `gcjh -stubs ' once more for this class may\n+// overwrite any edits you have made to this file.\n+\n+#include <gnu/awt/gtk/GtkMainThread.h>\n+#include <gcj/cni.h>\n+\n+#include <gtk/gtk.h>\n+\n+\n+void\n+gnu::awt::gtk::GtkMainThread::gtkMain ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gtk_main ();\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+"}, {"sha": "e7949395235d4793e40ee7e33ec2be6eaab6dda8", "filename": "libjava/gnu/awt/gtk/natGtkToolkit.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkToolkit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkToolkit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkToolkit.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,75 @@\n+// This file was created by `gcjh -stubs'. -*- c++ -*-\n+//\n+// This file is intended to give you a head start on implementing native\n+// methods using CNI.\n+// Be aware: running `gcjh -stubs ' once more for this class may\n+// overwrite any edits you have made to this file.\n+\n+#include <java/awt/Dimension.h>\n+\n+#include <gnu/awt/gtk/GtkToolkit.h>\n+#include <gcj/cni.h>\n+\n+#include <gtk/gtk.h>\n+\n+\n+// GTK requires the program's argc and argv variables.\n+extern char **_Jv_argv;\n+extern int _Jv_argc;\n+\n+// Call gtk_init.  It is very important that this happen before any other\n+// gtk calls.\n+void\n+gnu::awt::gtk::GtkToolkit::gtkInit ()\n+{\n+  // Initialize GLib in thread-safe mode. We assume that GLib is using the\n+  // same native threads library as libgcj. Refer to comments in \n+  // GtkComponentPeer constructor.\n+  g_thread_init (NULL);\n+  gtk_init (&_Jv_argc, &_Jv_argv);\n+}\n+\n+void\n+gnu::awt::gtk::GtkToolkit::beep ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gdk_beep ();\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+jint\n+gnu::awt::gtk::GtkToolkit::getScreenResolution ()\n+{\n+  jint res;\n+\n+  GDK_THREADS_ENTER ();\n+\n+  res = (int) (gdk_screen_width () / (gdk_screen_width_mm () / 25.4));\n+\n+  GDK_THREADS_LEAVE ();\n+  return res;\n+}\n+\n+::java::awt::Dimension *\n+gnu::awt::gtk::GtkToolkit::getScreenSize ()\n+{\n+  ::java::awt::Dimension *dim = new ::java::awt::Dimension ();\n+  \n+  GDK_THREADS_ENTER ();\n+\n+  dim->width = gdk_screen_width ();\n+  dim->height = gdk_screen_height ();\n+\n+  GDK_THREADS_LEAVE ();\n+  return dim;\n+}\n+\n+void\n+gnu::awt::gtk::GtkToolkit::sync ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gdk_flush ();\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+"}, {"sha": "d3f05c951c08ca5383e52cff5d65593b540cdd14", "filename": "libjava/gnu/awt/gtk/natGtkWindowPeer.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkWindowPeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkWindowPeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkWindowPeer.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -0,0 +1,40 @@\n+// This file was created by `gcjh -stubs'. -*- c++ -*-\n+//\n+// This file is intended to give you a head start on implementing native\n+// methods using CNI.\n+// Be aware: running `gcjh -stubs ' once more for this class may\n+// overwrite any edits you have made to this file.\n+\n+#include <gnu/awt/gtk/GtkWindowPeer.h>\n+#include <gcj/cni.h>\n+\n+#include <gtk/gtk.h>\n+\n+void\n+gnu::awt::gtk::GtkWindowPeer::toBack ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gdk_window_lower (GTK_WIDGET (ptr)->window);\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+void\n+gnu::awt::gtk::GtkWindowPeer::toFront ()\n+{\n+  GDK_THREADS_ENTER ();\n+  gdk_window_raise (GTK_WIDGET (ptr)->window);\n+  GDK_THREADS_LEAVE ();\n+}\n+\n+void\n+gnu::awt::gtk::GtkWindowPeer::create ()\n+{\n+  if (ptr == NULL)\n+    {\n+      GDK_THREADS_ENTER ();\n+      ptr = (gnu::gcj::RawData *) gtk_window_new(GTK_WINDOW_POPUP);\n+      GDK_THREADS_LEAVE ();\n+    }\n+    \n+  gnu::awt::gtk::GtkContainerPeer::create();\n+}"}, {"sha": "3614b2b5a3014aaf138590afcb7aabe65b6fbd88", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -220,6 +220,8 @@ public boolean isEnabled()\n   public void setEnabled(boolean b)\n   {\n     this.enabled = b;\n+    if (peer != null)\n+      peer.setEnabled(b);\n   }\n   \n   /** @deprecated */\n@@ -299,8 +301,6 @@ public void setForeground(Color c)\n     if (peer != null)\n       peer.setForeground(c);\n     this.foreground = c;\n-    if (peer != null)\n-      peer.setForeground(foreground);\n   }\n \n   /** @return the background color of the component. null may be\n@@ -321,7 +321,6 @@ public void setBackground(Color c)\n     if (peer != null)\n       peer.setBackground(c);\n     this.background = c;\n-    if (peer != null) peer.setBackground(background);\n   }\n   \n   public Font getFont()\n@@ -1412,7 +1411,8 @@ public void addNotify()\n        etc. */\n   }\n \n-  void addNotifyContainerChildren() {\n+  void addNotifyContainerChildren() \n+  {\n     // nothing to do unless we're a container\n   }\n "}, {"sha": "d97364861e0754d9be67b679abbbd9bd4ef443c3", "filename": "libjava/java/awt/Image.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FImage.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -24,7 +24,7 @@\n \n public abstract class Image extends Object\n {\n-  public static final Object UndefinedProperty;\n+  public static final Object UndefinedProperty = new Object();\n \n   public static final int SCALE_DEFAULT        = 1<<0,\n                           SCALE_FAST           = 1<<1,"}, {"sha": "8e4e21873f6504791ba869aef895cbbd4e6bd344", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -21,7 +21,6 @@\n public abstract class Toolkit\n {\n   static Toolkit defaultToolkit;\n-  static EventQueue systemEventQueue = new EventQueue();\n   PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);\n   Hashtable desktopProperties = new Hashtable();\n \n@@ -33,7 +32,7 @@ public static Toolkit getDefaultToolkit()\n     Class toolkit_class;\n     String tk_class_name = System.getProperty(\"awt.toolkit\");\n     if (tk_class_name == null)\n-      tk_class_name = \"gnu.awt.peer.gtk.GTKToolkit\";\n+      tk_class_name = \"gnu.awt.gtk.GtkToolkit\";\n \n     try\n     {"}, {"sha": "b06eff0548a9d64189f0206ea98697342a974847", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -186,10 +186,11 @@ public void toFront ()\n       }\n   }\n \n+  /** @specnote Unlike Component.getToolkit, this implementation always \n+                returns the value of Toolkit.getDefaultToolkit(). */\n   public Toolkit getToolkit()\n   {\n-    // FIXME: why different from Component.getToolkit() ?\n-    return super.getToolkit();\n+    return Toolkit.getDefaultToolkit ();    \n   }\n \n   public final String getWarningString()"}, {"sha": "d2f332d982b9cdc341e1f527778ab20aed140b99", "filename": "libjava/java/awt/image/BufferedImage.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2Fimage%2FBufferedImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2Fimage%2FBufferedImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FBufferedImage.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -62,7 +62,7 @@ public class BufferedImage extends java.awt.Image\n   \n   public BufferedImage(int w, int h, int type)\n   {\n-    ColorModel cm;\n+    ColorModel cm = null;\n     \n     boolean alpha = false;\n     boolean premultiplied = false;\n@@ -85,7 +85,7 @@ public BufferedImage(int w, int h, int type)\n       case TYPE_INT_ARGB_PRE:\n       case TYPE_USHORT_565_RGB:\n       case TYPE_USHORT_555_RGB:\n-\tint[] masks;\n+\tint[] masks = null;\n \tswitch (type)\n \t  {\n \t  case TYPE_INT_RGB:"}, {"sha": "ea44e1329c905795d6d42e4d7f0e1c3ae3f2a1fa", "filename": "libjava/java/awt/peer/ContainerPeer.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -12,7 +12,6 @@\n \n public interface ContainerPeer extends ComponentPeer\n {\n-  Insets insets();\n   Insets getInsets();\n   void beginValidate();\n   void endValidate();"}, {"sha": "ef881906800599862f0e834caeab5add2be306c7", "filename": "libjava/prims.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acff4bc96a94ae54d1ab69991102dfcc76607e6/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=0acff4bc96a94ae54d1ab69991102dfcc76607e6", "patch": "@@ -91,6 +91,10 @@ property_pair *_Jv_Environment_Properties;\n // The name of this executable.\n static char * _Jv_execName;\n \n+// Stash the argv pointer to benefit native libraries that need it.\n+const char **_Jv_argv;\n+int _Jv_argc;\n+\n #ifdef ENABLE_JVMPI\n // Pointer to JVMPI notification functions.\n void (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (JVMPI_Event *event);\n@@ -865,6 +869,9 @@ JvRunMain (jclass klass, int argc, const char **argv)\n {\n   PROCESS_GCJ_PROPERTIES;\n \n+  _Jv_argv = argv;\n+  _Jv_argc = argc;\n+\n   main_init ();\n #ifdef HAVE_PROC_SELF_EXE\n   char exec_name[20];"}]}