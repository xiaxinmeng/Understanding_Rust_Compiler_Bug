{"sha": "58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmNWY2YjQzMDY3YWI4NmZkMjZlZmRmMTNlM2MwOTI5ZGFkYjhmNA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-03-25T22:08:33Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-03-25T22:08:33Z"}, "message": "Fix candidate for PR c++/43206\n\ngcc/cp/ChangeLog:\n\tPR c++/43206\n\t* cp-tree.h (get_template_parms_at_level): Declare ...\n\t* pt.c (get_template_parms_at_level): ... new function.\n\t* typeck.c (get_template_parms_of_dependent_type): If a template\n\ttype parm's DECL_CONTEXT isn't yet set, get its siblings from\n\tcurrent_template_parms. Use get_template_parms_at_level. Remove\n\tuseless test.\n\t(incompatible_dependent_types_p): If we get empty parms from just one\n\tof the template type parms we are comparing then the template parms are\n\tincompatible.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/43206\n\t* g++.dg/template/typedef30.C: New test case.\n\nFrom-SVN: r157730", "tree": {"sha": "696a213308b6552c9c3faed80c9aff8e772b1386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/696a213308b6552c9c3faed80c9aff8e772b1386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/comments", "author": null, "committer": null, "parents": [{"sha": "9b7e6950f5119d62c5afb8ea914c7894c304050a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7e6950f5119d62c5afb8ea914c7894c304050a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7e6950f5119d62c5afb8ea914c7894c304050a"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "ff66a204a8afa3c4264decd24ed04db647707c89", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "patch": "@@ -1,3 +1,16 @@\n+2010-03-25  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43206\n+\t* cp-tree.h (get_template_parms_at_level): Declare ...\n+\t* pt.c (get_template_parms_at_level): ... new function.\n+\t* typeck.c (get_template_parms_of_dependent_type): If a template\n+\ttype parm's DECL_CONTEXT isn't yet set, get its siblings from\n+\tcurrent_template_parms. Use get_template_parms_at_level. Remove\n+\tuseless test.\n+\t(incompatible_dependent_types_p): If we get empty parms from just one\n+\tof the template type parms we are comparing then the template parms are\n+\tincompatible.\n+\n 2010-03-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43502"}, {"sha": "564882770ffb5a2147e898b21305d06cdeb2d225", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "patch": "@@ -4973,6 +4973,7 @@ extern void init_template_processing\t\t(void);\n bool template_template_parameter_p\t\t(const_tree);\n extern bool primary_template_instantiation_p    (const_tree);\n extern tree get_primary_template_innermost_parameters\t(const_tree);\n+extern tree get_template_parms_at_level (tree, unsigned);\n extern tree get_template_innermost_arguments\t(const_tree);\n extern tree get_template_argument_pack_elems\t(const_tree);\n extern tree get_function_template_decl\t\t(const_tree);"}, {"sha": "59fdc443ab6d9d25d725b59cf50972eb06820c10", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "patch": "@@ -2839,6 +2839,25 @@ get_primary_template_innermost_parameters (const_tree t)\n   return parms;\n }\n \n+/* Return the template parameters of the LEVELth level from the full list\n+   of template parameters PARMS.  */\n+\n+tree\n+get_template_parms_at_level (tree parms, unsigned level)\n+{\n+  tree p;\n+  if (!parms\n+      || TREE_CODE (parms) != TREE_LIST\n+      || level > TMPL_PARMS_DEPTH (parms))\n+    return NULL_TREE;\n+\n+  for (p = parms; p; p = TREE_CHAIN (p))\n+    if (TMPL_PARMS_DEPTH (p) == level)\n+      return p;\n+\n+  return NULL_TREE;\n+}\n+\n /* Returns the template arguments of T if T is a template instantiation,\n    NULL otherwise.  */\n "}, {"sha": "a4c64ea85bd2709a75a428f9cd81551cbfe27ee5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "patch": "@@ -1113,9 +1113,17 @@ get_template_parms_of_dependent_type (tree t)\n   /* If T1 is a typedef or whatever has a template info associated\n      to its context, get the template parameters from that context.  */\n   else if (typedef_variant_p (t)\n-      && DECL_CONTEXT (TYPE_NAME (t))\n-      && !NAMESPACE_SCOPE_P (TYPE_NAME (t)))\n+\t   && !NAMESPACE_SCOPE_P (TYPE_NAME (t)))\n     tinfo = get_template_info (DECL_CONTEXT (TYPE_NAME (t)));\n+  else if (TREE_CODE (t) == TEMPLATE_TYPE_PARM\n+\t   && DECL_CONTEXT (TYPE_NAME (t)) == NULL_TREE)\n+    /* We have not yet created the DECL_TEMPLATE this\n+       template type parm belongs to. It probably means\n+       that we are in the middle of parsing the template parameters\n+       of a template, and T is one of the parameters we have parsed.\n+       Let's return the list of template parms we have parsed so far.  */\n+    return get_template_parms_at_level (current_template_parms,\n+\t\t\t\t\tTEMPLATE_TYPE_LEVEL (t));\n   else if (TYPE_CONTEXT (t)\n \t   && !NAMESPACE_SCOPE_P (t))\n     tinfo = get_template_info (TYPE_CONTEXT (t));\n@@ -1170,6 +1178,17 @@ incompatible_dependent_types_p (tree t1, tree t2)\n   tparms1 = get_template_parms_of_dependent_type (t1);\n   tparms2 = get_template_parms_of_dependent_type (t2);\n \n+  /* If T2 is a template type parm and if we could not get the template\n+     parms it belongs to, that means we have not finished parsing the\n+     full set of template parameters of the template declaration it\n+     belongs to yet. If we could get the template parms T1 belongs to,\n+     that mostly means T1 and T2 belongs to templates that are\n+     different and incompatible.  */\n+  if (TREE_CODE (t1) == TEMPLATE_TYPE_PARM\n+      && (tparms1 == NULL_TREE || tparms2 == NULL_TREE)\n+      && tparms1 != tparms2)\n+    return true;\n+\n   if (tparms1 == NULL_TREE\n       || tparms2 == NULL_TREE\n       || tparms1 == tparms2)"}, {"sha": "8c7bc15433ec7296bb339165bba6f665ae570a9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "patch": "@@ -1,3 +1,8 @@\n+2010-03-25  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43206\n+\t* g++.dg/template/typedef30.C: New test case.\n+\n 2010-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/43385"}, {"sha": "2f9362a1e0495959deff7a969f377f9963cf3f1e", "filename": "gcc/testsuite/g++.dg/template/typedef30.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f5f6b43067ab86fd26efdf13e3c0929dadb8f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef30.C?ref=58f5f6b43067ab86fd26efdf13e3c0929dadb8f4", "patch": "@@ -0,0 +1,20 @@\n+// Origin: PR c++/43206\n+// { dg-do compile }\n+\n+template<class A> struct NumericTraits{ typedef A TInputImage;};\n+template<class B> class CovariantVector{};\n+template<class C> struct Image{ typedef C PixelType;};\n+template<class H, class E, class D>\n+class F {\n+  typedef H G;\n+  typedef\n+  typename NumericTraits<typename G::PixelType>::RealType\n+  InputRealType;\n+};\n+\n+template<typename TInputImage,\n+         typename TOutputImage=Image<CovariantVector<typename NumericTraits<typename TInputImage::PixelType>::TInputImage> > >\n+class XXX{};\n+\n+XXX<Image<float> > x;\n+"}]}