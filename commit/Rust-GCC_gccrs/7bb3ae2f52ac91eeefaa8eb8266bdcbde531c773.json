{"sha": "7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiM2FlMmY1MmFjOTFlZWVmYWE4ZWI4MjY2YmRjYmRlNTMxYzc3Mw==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-06-22T02:55:07Z"}, "committer": {"name": "Roman Zippel", "email": "zippel@gcc.gnu.org", "date": "2007-06-22T02:55:07Z"}, "message": "df-scan.c (df_read_modify_subreg_p): Use REGMODE_NATURAL_SIZE.\n\n\t* df-scan.c (df_read_modify_subreg_p): Use REGMODE_NATURAL_SIZE.\n\t(df_def_record_1): Set (DF_REF_READ_WRITE | DF_REF_PARTIAL) for\n\tpartial register accesses.\n\nFrom-SVN: r125940", "tree": {"sha": "0b4d0595823c9e7cba340a59cfc4262f391cc686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4d0595823c9e7cba340a59cfc4262f391cc686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773/comments", "author": null, "committer": null, "parents": [{"sha": "aa7393d96a504d2290fbd06806a9bc24304c195f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7393d96a504d2290fbd06806a9bc24304c195f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7393d96a504d2290fbd06806a9bc24304c195f"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "fff3cabd5367ff1eda45c6eecf17f81d2ab36fd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773", "patch": "@@ -1,3 +1,9 @@\n+2007-06-22  Roman Zippel <zippel@linux-m68k.org>\n+\n+\t* df-scan.c (df_read_modify_subreg_p): Use REGMODE_NATURAL_SIZE.\n+\t(df_def_record_1): Set (DF_REF_READ_WRITE | DF_REF_PARTIAL) for\n+\tpartial register accesses.\n+\n 2007-06-21  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* fold-const.c (debug_fold_checksum): Move it under"}, {"sha": "61147be59fcc3eace62b5b2bf279fed302f56108", "filename": "gcc/df-scan.c", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=7bb3ae2f52ac91eeefaa8eb8266bdcbde531c773", "patch": "@@ -2703,7 +2703,8 @@ df_read_modify_subreg_p (rtx x)\n     return false;\n   isize = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n   osize = GET_MODE_SIZE (GET_MODE (x));\n-  return (isize > osize && isize > UNITS_PER_WORD);\n+  return isize > osize\n+\t && isize > REGMODE_NATURAL_SIZE (GET_MODE (SUBREG_REG (x)));\n }\n \n \n@@ -2718,7 +2719,6 @@ df_def_record_1 (struct df_collection_rec *collection_rec,\n {\n   rtx *loc;\n   rtx dst;\n-  bool dst_in_strict_lowpart = false;\n \n  /* We may recursively call ourselves on EXPR_LIST when dealing with PARALLEL\n      construct.  */\n@@ -2749,33 +2749,16 @@ df_def_record_1 (struct df_collection_rec *collection_rec,\n   /* Maybe, we should flag the use of STRICT_LOW_PART somehow.  It might\n      be handy for the reg allocator.  */\n   while (GET_CODE (dst) == STRICT_LOW_PART\n-\t || GET_CODE (dst) == ZERO_EXTRACT\n-\t || df_read_modify_subreg_p (dst))\n+\t || GET_CODE (dst) == ZERO_EXTRACT)\n     {\n-#if 0\n-      /* Strict low part always contains SUBREG, but we do not want to make\n-\t it appear outside, as whole register is always considered.  */\n-      if (GET_CODE (dst) == STRICT_LOW_PART)\n-\t{\n-\t  loc = &XEXP (dst, 0);\n-\t  dst = *loc;\n-\t}\n-#endif\n+      flags |= DF_REF_READ_WRITE | DF_REF_PARTIAL;\n       loc = &XEXP (dst, 0);\n-      if (GET_CODE (dst) == STRICT_LOW_PART)\n-\tdst_in_strict_lowpart = true;\n       dst = *loc;\n-      flags |= DF_REF_READ_WRITE;\n-\n     }\n \n-  /* Sets to a subreg of a single word register are partial sets if\n-     they are wrapped in a strict lowpart, and not partial otherwise.\n-  */\n-  if (GET_CODE (dst) == SUBREG && REG_P (SUBREG_REG (dst))\n-      && dst_in_strict_lowpart)\n-    flags |= DF_REF_PARTIAL;\n-    \n+  if (df_read_modify_subreg_p (dst))\n+    flags |= DF_REF_READ_WRITE | DF_REF_PARTIAL;\n+\n   if (REG_P (dst)\n       || (GET_CODE (dst) == SUBREG && REG_P (SUBREG_REG (dst))))\n     df_ref_record (collection_rec, "}]}