{"sha": "5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1NWIwYTNkMjY4Y2M2OTY3YTc3ZTMwMmI0ZDZkYmVlZGZmM2QyNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-08-10T15:40:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-10T15:40:26Z"}, "message": "mips-protos.h (mips_address_insns): Add a boolean argument.\n\ngcc/\n\t* config/mips/mips-protos.h (mips_address_insns): Add a boolean\n\targument.\n\t(mips_fetch_insns): Delete in favor of...\n\t(mips_load_store_insns): ...this new function.\n\t* config/mips/mips.c (mips_address_insns): Add a boolean argument\n\tto say whether multiword moves _might_ be split.\n\t(mips_fetch_insns): Delete in favor of...\n\t(mips_load_store_insns): ...this new function.\n\t(mips_rtx_costs): Update the call to mips_address_insns.\n\t(mips_address_cost): Likewise.\n\t* config/mips/mips.md (length): Use mips_load_store_insns instead\n\tof mips_fetch_insns.\n\t* config/mips/constraints.md (R): Use mips_address_insns rather\n\tthan mips_fetch_insns.  Assume that the move never needs to be split.\n\nFrom-SVN: r127338", "tree": {"sha": "39665110f4c8e3b7df4b9f38ada9739e100c9ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39665110f4c8e3b7df4b9f38ada9739e100c9ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/comments", "author": null, "committer": null, "parents": [{"sha": "dfbb3e36254eb6fcb7c724a4e6e30e715c270981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbb3e36254eb6fcb7c724a4e6e30e715c270981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbb3e36254eb6fcb7c724a4e6e30e715c270981"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "d514d48091217fd02946fe9c9aac1f486b90f6e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "patch": "@@ -1,3 +1,20 @@\n+2007-08-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips-protos.h (mips_address_insns): Add a boolean\n+\targument.\n+\t(mips_fetch_insns): Delete in favor of...\n+\t(mips_load_store_insns): ...this new function.\n+\t* config/mips/mips.c (mips_address_insns): Add a boolean argument\n+\tto say whether multiword moves _might_ be split.\n+\t(mips_fetch_insns): Delete in favor of...\n+\t(mips_load_store_insns): ...this new function.\n+\t(mips_rtx_costs): Update the call to mips_address_insns.\n+\t(mips_address_cost): Likewise.\n+\t* config/mips/mips.md (length): Use mips_load_store_insns instead\n+\tof mips_fetch_insns.\n+\t* config/mips/constraints.md (R): Use mips_address_insns rather\n+\tthan mips_fetch_insns.  Assume that the move never needs to be split.\n+\n 2007-08-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/mips/mips.opt (mhard-float, msoft-float):  Make these"}, {"sha": "47b396689544202bef0e63f108e5c2beaf373268", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "patch": "@@ -151,7 +151,7 @@\n (define_memory_constraint \"R\"\n   \"An address that can be used in a non-macro load or store.\"\n   (and (match_code \"mem\")\n-       (match_test \"mips_fetch_insns (op) == 1\")))\n+       (match_test \"mips_address_insns (XEXP (op, 0), mode, false) == 1\")))\n \n (define_constraint \"S\"\n   \"@internal"}, {"sha": "0a42ce13c9137026eae3b7ff8e230898022f678a", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "patch": "@@ -168,9 +168,9 @@ extern bool mips_symbolic_constant_p (rtx, enum mips_symbol_context,\n \t\t\t\t      enum mips_symbol_type *);\n extern int mips_regno_mode_ok_for_base_p (int, enum machine_mode, int);\n extern bool mips_stack_address_p (rtx, enum machine_mode);\n-extern int mips_address_insns (rtx, enum machine_mode);\n+extern int mips_address_insns (rtx, enum machine_mode, bool);\n extern int mips_const_insns (rtx);\n-extern int mips_fetch_insns (rtx);\n+extern int mips_load_store_insns (rtx, rtx);\n extern int mips_idiv_insns (void);\n extern int fp_register_operand (rtx, enum machine_mode);\n extern int lo_operand (rtx, enum machine_mode);"}, {"sha": "dce80421228d6bfe5f1ffd653957946f3631a99a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "patch": "@@ -1945,22 +1945,26 @@ mips16_unextended_reference_p (enum machine_mode mode, rtx base, rtx offset)\n \n \n /* Return the number of instructions needed to load or store a value\n-   of mode MODE at X.  Return 0 if X isn't valid for MODE.\n+   of mode MODE at X.  Return 0 if X isn't valid for MODE.  Assume that\n+   multiword moves may need to be split into word moves if MIGHT_SPLIT_P,\n+   otherwise assume that a single load or store is enough.\n \n    For mips16 code, count extended instructions as two instructions.  */\n \n int\n-mips_address_insns (rtx x, enum machine_mode mode)\n+mips_address_insns (rtx x, enum machine_mode mode, bool might_split_p)\n {\n   struct mips_address_info addr;\n   int factor;\n \n-  if (mode == BLKmode)\n-    /* BLKmode is used for single unaligned loads and stores.  */\n-    factor = 1;\n-  else\n-    /* Each word of a multi-word value will be accessed individually.  */\n+  /* BLKmode is used for single unaligned loads and stores and should\n+     not count as a multiword mode.  (GET_MODE_SIZE (BLKmode) is pretty\n+     meaningless, so we have to single it out as a special case one way\n+     or the other.)  */\n+  if (mode != BLKmode && might_split_p)\n     factor = (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  else\n+    factor = 1;\n \n   if (mips_classify_address (&addr, x, mode, false))\n     switch (addr.type)\n@@ -2059,14 +2063,30 @@ mips_const_insns (rtx x)\n }\n \n \n-/* Return the number of instructions needed for memory reference X.\n-   Count extended mips16 instructions as two instructions.  */\n+/* Return the number of instructions needed to implement INSN,\n+   given that it loads from or stores to MEM.  Count extended\n+   mips16 instructions as two instructions.  */\n \n int\n-mips_fetch_insns (rtx x)\n+mips_load_store_insns (rtx mem, rtx insn)\n {\n-  gcc_assert (MEM_P (x));\n-  return mips_address_insns (XEXP (x, 0), GET_MODE (x));\n+  enum machine_mode mode;\n+  bool might_split_p;\n+  rtx set;\n+\n+  gcc_assert (MEM_P (mem));\n+  mode = GET_MODE (mem);\n+\n+  /* Try to prove that INSN does not need to be split.  */\n+  might_split_p = true;\n+  if (GET_MODE_BITSIZE (mode) == 64)\n+    {\n+      set = single_set (insn);\n+      if (set && !mips_split_64bit_move_p (SET_DEST (set), SET_SRC (set)))\n+\tmight_split_p = false;\n+    }\n+\n+  return mips_address_insns (XEXP (mem, 0), mode, might_split_p);\n }\n \n \n@@ -2857,7 +2877,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t/* If the address is legitimate, return the number of\n \t   instructions it needs.  */\n \trtx addr = XEXP (x, 0);\n-\tint n = mips_address_insns (addr, GET_MODE (x));\n+\tint n = mips_address_insns (addr, GET_MODE (x), true);\n \tif (n > 0)\n \t  {\n \t    *total = COSTS_N_INSNS (n + 1);\n@@ -3012,7 +3032,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total)\n static int\n mips_address_cost (rtx addr)\n {\n-  return mips_address_insns (addr, SImode);\n+  return mips_address_insns (addr, SImode, false);\n }\n \f\n /* Return one word of double-word value OP, taking into account the fixed"}, {"sha": "bac479f8dc5f3935d9be7642f8e82477e0339487", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5955b0a3d268cc6967a77e302b4d6dbeedff3d24/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5955b0a3d268cc6967a77e302b4d6dbeedff3d24", "patch": "@@ -360,9 +360,9 @@\n \t  (eq_attr \"type\" \"const\")\n \t  (symbol_ref \"mips_const_insns (operands[1]) * 4\")\n \t  (eq_attr \"type\" \"load,fpload\")\n-\t  (symbol_ref \"mips_fetch_insns (operands[1]) * 4\")\n+\t  (symbol_ref \"mips_load_store_insns (operands[1], insn) * 4\")\n \t  (eq_attr \"type\" \"store,fpstore\")\n-\t  (symbol_ref \"mips_fetch_insns (operands[0]) * 4\")\n+\t  (symbol_ref \"mips_load_store_insns (operands[0], insn) * 4\")\n \n \t  ;; In the worst case, a call macro will take 8 instructions:\n \t  ;;"}]}