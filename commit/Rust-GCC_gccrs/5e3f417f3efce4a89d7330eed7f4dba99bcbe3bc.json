{"sha": "5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUzZjQxN2YzZWZjZTRhODlkNzMzMGVlZDdmNGRiYTk5YmNiZTNiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-20T20:39:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-20T20:39:59Z"}, "message": "DR 1073 PR c++/49082\n\n\tDR 1073\n\tPR c++/49082\n\t* typeck.c (comp_except_specs): noexcept(false) is not compatible\n\twith throw(type-list).\n\t* typeck2.c (merge_exception_specifiers): noexcept(false)\n\tbeats any more limited specification.\n\nFrom-SVN: r173981", "tree": {"sha": "35f1b483465719251a4a4da129ee8d9540173c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35f1b483465719251a4a4da129ee8d9540173c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bce33ab2b4277852496aaebc9bbdbc223ee25164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce33ab2b4277852496aaebc9bbdbc223ee25164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce33ab2b4277852496aaebc9bbdbc223ee25164"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "4ec657812e1841fb47456237039e85cc984347cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -1,5 +1,12 @@\n 2011-05-20  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1073\n+\tPR c++/49082\n+\t* typeck.c (comp_except_specs): noexcept(false) is not compatible\n+\twith throw(type-list).\n+\t* typeck2.c (merge_exception_specifiers): noexcept(false)\n+\tbeats any more limited specification.\n+\n \tPR c++/24163\n \tPR c++/29131\n \t* pt.c (tsubst_copy_and_build) [CALL_EXPR]: Avoid repeating"}, {"sha": "7791efcaa8f49f0a1b3b9f756e899ee00117b2c3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -986,14 +986,14 @@ comp_except_specs (const_tree t1, const_tree t2, int exact)\n   /* First handle noexcept.  */\n   if (exact < ce_exact)\n     {\n-      /* noexcept(false) is compatible with any throwing dynamic-exc-spec\n+      /* noexcept(false) is compatible with no exception-specification,\n \t and stricter than any spec.  */\n       if (t1 == noexcept_false_spec)\n-\treturn !nothrow_spec_p (t2) || exact == ce_derived;\n-      /* Even a derived noexcept(false) is compatible with a throwing\n-\t dynamic spec.  */\n+\treturn t2 == NULL_TREE || exact == ce_derived;\n+      /* Even a derived noexcept(false) is compatible with no\n+\t exception-specification.  */\n       if (t2 == noexcept_false_spec)\n-\treturn !nothrow_spec_p (t1);\n+\treturn t1 == NULL_TREE;\n \n       /* Otherwise, if we aren't looking for an exact match, noexcept is\n \t equivalent to throw().  */"}, {"sha": "c2eff9eb6c890f025d3f47a7aac57d455c415641", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -1756,10 +1756,13 @@ add_exception_specifier (tree list, tree spec, int complain)\n tree\n merge_exception_specifiers (tree list, tree add)\n {\n-  if (!list || !add)\n-    return NULL_TREE;\n+  /* No exception-specifier or noexcept(false) are less strict than\n+     anything else.  Prefer the newer variant (LIST).  */\n+  if (!list || list == noexcept_false_spec)\n+    return list;\n+  else if (!add || add == noexcept_false_spec)\n+    return add;\n   /* For merging noexcept(true) and throw(), take the more recent one (LIST).\n-     A throw(type-list) spec takes precedence over a noexcept(false) spec.\n      Any other noexcept-spec should only be merged with an equivalent one.\n      So the !TREE_VALUE code below is correct for all cases.  */\n   else if (!TREE_VALUE (add))"}, {"sha": "c6d5615806b571c82332988b25a937c0e5ee0916", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -1,3 +1,10 @@\n+2011-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/noexcept02.C: Fix.\n+\t* g++.dg/cpp0x/noexcept03.C: Fix.\n+\t* g++.dg/cpp0x/noexcept08.C: Fix.\n+\t* g++.dg/cpp0x/noexcept10.C: New.\n+\n 2011-05-20  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/48706"}, {"sha": "ffbb091924118b2e3deebde3d5662b4008aeaedc", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept02.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -10,9 +10,9 @@ void f();\n \n SA(!noexcept(f()));\n \n-void g() throw (int);\n-void g() noexcept(false);\t// { dg-error \"previous declaration\" }\n-void g();\t\t\t// { dg-error \"different exception\" }\n+void g() throw (int);\t\t// { dg-error \"previous declaration\" }\n+void g() noexcept(false);\t// { dg-error \"different exception\" }\n+void g();\n \n void h() throw();\n void h() noexcept;"}, {"sha": "54e04f3d02d8af61e68fa0ea94b2a0d23a2c97e6", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept03.C", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -36,19 +36,6 @@ void f2(T a) noexcept (noexcept (f (a)))\n \n struct A { A() { } };\t\t// { dg-warning \"does not throw\" }\n \n-// throw(int) overrides noexcept(false) in either order.\n-void h() throw (int, std::bad_exception);\n-void h() noexcept (false)\n-{\n-  throw 1.0;\n-}\n-\n-void i() noexcept (false);\n-void i() throw (int, std::bad_exception)\n-{\n-  throw 1.0;\n-}\n-\n int main()\n {\n   // noexcept(false) allows throw.\n@@ -57,10 +44,6 @@ int main()\n   try { f(A()); } catch (int) { }\n   try { f2(A()); } catch (int) { }\n \n-  std::set_unexpected (my_unexpected);\n-  try { h(); } catch (std::bad_exception) { }\n-  try { i(); } catch (std::bad_exception) { }\n-\n   std::set_terminate (my_terminate);\n   // noexcept(noexcept(int())) == noexcept(true).\n   try { f2(1); } catch (...) { }"}, {"sha": "1df85efff9c14b34a098d2aeece30b0e8de48a2e", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept08.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -34,7 +34,7 @@ struct D: A\n   void g() noexcept(false);\t// { dg-error \"looser\" }\n   void h() noexcept(false);\t// { dg-error \"looser\" }\n   void i() noexcept(false);\n-  void j() noexcept(false);\t// compatible; treated as throw(int)\n+  void j() noexcept(false);\t// { dg-error \"looser\" }\n };\n \n struct E: A"}, {"sha": "058a387d778ea6ca699004c4ad9ee99c35338852", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept10.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept10.C?ref=5e3f417f3efce4a89d7330eed7f4dba99bcbe3bc", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/49082\n+// { dg-options -std=c++0x }\n+\n+namespace std { template <class T> T&& declval() noexcept; }\n+\n+struct Base\n+{\n+  Base(const Base&) noexcept(false);\n+  Base(Base&&) noexcept(false);\n+ ~Base() noexcept(false);\n+};\n+\n+struct Derived\n+: Base\n+{\n+  // Derived(const Derived&) = default;\n+  // Derived(Derived&&) = default;\n+};\n+\n+static_assert(!noexcept(Base(std::declval<const Base&>())), \"Error\");\n+static_assert(!noexcept(Derived(std::declval<const Derived&>())), \"Error\"); // Error\n+\n+static_assert(!noexcept(Base(std::declval<Base&&>())), \"Error\");\n+static_assert(!noexcept(Derived(std::declval<Derived&&>())), \"Error\"); // Error\n+\n+static_assert(!noexcept(std::declval<Base&>().~Base()), \"Error\"); // OK\n+static_assert(!noexcept(std::declval<Derived&>().~Derived()), \"Error\"); // Error"}]}