{"sha": "a194aa56e656273fde94d2935e43d0640d90e42f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5NGFhNTZlNjU2MjczZmRlOTRkMjkzNWU0M2QwNjQwZDkwZTQyZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-07-09T01:20:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-07-09T01:20:24Z"}, "message": "cgraph.c (cgraph_node_name): New function.\n\n\n\t* cgraph.c (cgraph_node_name): New function.\n\t(dump_cgraph): Use it.\n\t* cgraph.h (cgraph_dump_file): Declare.\n\t(cgraph_node_name): Declare.\n\t* cgraphunit.c: Include timevar.h\n\t(cgraph_finalize_compilation_unit): Use timevar; reorganize dumps.\n\t(cgraph_optimize_function): Use TV_INTEGRATION.\n\t(cgraph_mark_local_functions): reorganize dumps.\n\t(cgraph_mark_functions_to_inline_once): Likewise.\n\t(cgraph_optimize): Likewise; use timevar.\n\t* timevar.def (TV_CGRAPH, TV_CGRAPHOPT): New.\n\t* toplev.c (dump_file_index): Add DFI_cgraph.\n\t(dump_file_info): Likewise.\n\t(cgraph_dump_file): New global variable.\n\t(do_compile): Open and close cgraph dump.\n\t* invoke.texi (-d): Document new flag; renumber.\n\nFrom-SVN: r69120", "tree": {"sha": "1d6807c9ee6d30e8fa21f56d4c445809b3cdea27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6807c9ee6d30e8fa21f56d4c445809b3cdea27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a194aa56e656273fde94d2935e43d0640d90e42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a194aa56e656273fde94d2935e43d0640d90e42f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a194aa56e656273fde94d2935e43d0640d90e42f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a194aa56e656273fde94d2935e43d0640d90e42f/comments", "author": null, "committer": null, "parents": [{"sha": "8af61113c7c4ec81ef7d4947a9e59d980333e397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af61113c7c4ec81ef7d4947a9e59d980333e397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af61113c7c4ec81ef7d4947a9e59d980333e397"}], "stats": {"total": 206, "additions": 142, "deletions": 64}, "files": [{"sha": "ba3cca46746b6f5202462cef91267722f3d8ddd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -1,3 +1,22 @@\n+Wed Jul  9 03:00:10 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_node_name): New function.\n+\t(dump_cgraph): Use it.\n+\t* cgraph.h (cgraph_dump_file): Declare.\n+\t(cgraph_node_name): Declare.\n+\t* cgraphunit.c: Include timevar.h\n+\t(cgraph_finalize_compilation_unit): Use timevar; reorganize dumps.\n+\t(cgraph_optimize_function): Use TV_INTEGRATION.\n+\t(cgraph_mark_local_functions): reorganize dumps.\n+\t(cgraph_mark_functions_to_inline_once): Likewise.\n+\t(cgraph_optimize): Likewise; use timevar.\n+\t* timevar.def (TV_CGRAPH, TV_CGRAPHOPT): New.\n+\t* toplev.c (dump_file_index): Add DFI_cgraph.\n+\t(dump_file_info): Likewise.\n+\t(cgraph_dump_file): New global variable.\n+\t(do_compile): Open and close cgraph dump.\n+\t* invoke.texi (-d): Document new flag; renumber.\n+\n 2003-07-08  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/11370"}, {"sha": "7bc065b79d32215aaddc95c7a97274cf79f8402b", "filename": "gcc/cgraph.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -316,6 +316,13 @@ cgraph_rtl_info (decl)\n   return &node->rtl;\n }\n \n+/* Return name of the node used in debug output.  */\n+const char *\n+cgraph_node_name (node)\n+     struct cgraph_node *node;\n+{\n+  return (*lang_hooks.decl_printable_name) (node->decl, 2);\n+}\n \n /* Dump the callgraph.  */\n \n@@ -329,10 +336,9 @@ dump_cgraph (f)\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       struct cgraph_edge *edge;\n-      fprintf (f, \"%s\", IDENTIFIER_POINTER (DECL_NAME (node->decl)));\n+      fprintf (f, \"%s\", cgraph_node_name (node));\n       if (node->origin)\n-\tfprintf (f, \" nested in: %s\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (node->origin->decl)));\n+\tfprintf (f, \" nested in: %s\", cgraph_node_name (node->origin));\n       if (node->needed)\n \tfprintf (f, \" needed\");\n       else if (node->reachable)\n@@ -342,13 +348,11 @@ dump_cgraph (f)\n \n       fprintf (f, \"\\n  called by :\");\n       for (edge = node->callers; edge; edge = edge->next_caller)\n-\tfprintf (f, \"%s \",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (edge->caller->decl)));\n+\tfprintf (f, \"%s \", cgraph_node_name (edge->caller));\n \n       fprintf (f, \"\\n  calls: \");\n       for (edge = node->callees; edge; edge = edge->next_callee)\n-\tfprintf (f, \"%s \",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (edge->callee->decl)));\n+\tfprintf (f, \"%s \", cgraph_node_name (edge->callee));\n       fprintf (f, \"\\n\");\n     }\n }"}, {"sha": "65bda0717ccb94182c26c92e214562a4f2ced06f", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -126,6 +126,7 @@ extern GTY(()) struct cgraph_node *cgraph_nodes;\n extern GTY(()) int cgraph_n_nodes;\n extern bool cgraph_global_info_ready;\n extern GTY(()) struct cgraph_node *cgraph_nodes_queue;\n+extern FILE *cgraph_dump_file;\n \n extern GTY(()) int cgraph_varpool_n_nodes;\n extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes_queue;\n@@ -142,6 +143,7 @@ bool cgraph_calls_p\t\t\tPARAMS ((tree, tree));\n struct cgraph_local_info *cgraph_local_info PARAMS ((tree));\n struct cgraph_global_info *cgraph_global_info PARAMS ((tree));\n struct cgraph_rtl_info *cgraph_rtl_info PARAMS ((tree));\n+const char * cgraph_node_name PARAMS ((struct cgraph_node *));\n \n struct cgraph_varpool_node *cgraph_varpool_node (tree decl);\n struct cgraph_varpool_node *cgraph_varpool_node_for_identifier (tree id);"}, {"sha": "ad504dd08e5fc9720ad65a25f533f6ac0bed693f", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\"\n+#include \"timevar.h\"\n \n static void cgraph_expand_functions PARAMS ((void));\n static void cgraph_mark_functions_to_output PARAMS ((void));\n@@ -140,12 +141,14 @@ cgraph_finalize_compilation_unit ()\n \n   cgraph_varpool_assemble_pending_decls ();\n \n-  if (!quiet_flag)\n+  timevar_push (TV_CGRAPH);\n+  if (cgraph_dump_file)\n     {\n-      fprintf (stderr, \"\\n\\nInitial entry points:\");\n+      fprintf (cgraph_dump_file, \"\\nInitial entry points:\");\n       for (node = cgraph_nodes; node; node = node->next)\n \tif (node->needed && DECL_SAVED_TREE (node->decl))\n-\t  announce_function (node->decl);\n+\t  fprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n+      fprintf (cgraph_dump_file, \"\\n\");\n     }\n \n   /* Propagate reachability flag and lower representation of all reachable\n@@ -198,16 +201,17 @@ cgraph_finalize_compilation_unit ()\n     }\n   /* Collect entry points to the unit.  */\n \n-  if (!quiet_flag)\n+  if (cgraph_dump_file)\n     {\n-      fprintf (stderr, \"\\n\\nUnit entry points:\");\n+      fprintf (cgraph_dump_file, \"\\nUnit entry points:\");\n       for (node = cgraph_nodes; node; node = node->next)\n \tif (node->needed && DECL_SAVED_TREE (node->decl))\n-\t  announce_function (node->decl);\n+\t  fprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n+      fprintf (cgraph_dump_file, \"\\n\");\n     }\n \n-  if (!quiet_flag)\n-    fprintf (stderr, \"\\n\\nReclaiming functions:\");\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"\\nReclaiming functions:\");\n \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n@@ -216,10 +220,14 @@ cgraph_finalize_compilation_unit ()\n       if (!node->reachable && DECL_SAVED_TREE (decl))\n \t{\n \t  cgraph_remove_node (node);\n-\t  announce_function (decl);\n+\t  if (cgraph_dump_file)\n+\t    fprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n \t}\n     }\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"\\n\");\n   ggc_collect ();\n+  timevar_pop (TV_CGRAPH);\n }\n \n /* Figure out what functions we want to assemble.  */\n@@ -256,13 +264,15 @@ cgraph_optimize_function (node)\n {\n   tree decl = node->decl;\n \n+  timevar_push (TV_INTEGRATION);\n   if (flag_inline_trees)\n     optimize_inline_calls (decl);\n   if (node->nested)\n     {\n       for (node = node->nested; node; node = node->next_nested)\n \tcgraph_optimize_function (node);\n     }\n+  timevar_pop (TV_INTEGRATION);\n }\n \n /* Expand function specified by NODE.  */\n@@ -385,8 +395,8 @@ cgraph_mark_local_functions ()\n {\n   struct cgraph_node *node;\n \n-  if (!quiet_flag)\n-    fprintf (stderr, \"\\n\\nMarking local functions:\");\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"Marking local functions:\");\n \n   /* Figure out functions we want to assemble.  */\n   for (node = cgraph_nodes; node; node = node->next)\n@@ -395,9 +405,11 @@ cgraph_mark_local_functions ()\n \t\t           && DECL_SAVED_TREE (node->decl)\n \t\t\t   && !DECL_COMDAT (node->decl)\n \t\t           && !TREE_PUBLIC (node->decl));\n-      if (node->local.local)\n-\tannounce_function (node->decl);\n+      if (cgraph_dump_file && node->local.local)\n+\tfprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n     }\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"\\n\");\n }\n \n /* Decide what function should be inlined because they are invoked once\n@@ -408,8 +420,8 @@ cgraph_mark_functions_to_inline_once ()\n {\n   struct cgraph_node *node, *node1;\n \n-  if (!quiet_flag)\n-    fprintf (stderr, \"\\n\\nMarking functions to inline once:\");\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"\\n\\nMarking functions to inline once:\");\n \n   /* Now look for function called only once and mark them to inline.\n      From this point number of calls to given function won't grow.  */\n@@ -431,10 +443,13 @@ cgraph_mark_functions_to_inline_once ()\n \t  if (ok)\n \t    {\n \t      node->global.inline_once = true;\n-\t      announce_function (node->decl);\n+\t      if (cgraph_dump_file)\n+\t\tfprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n \t    }\n \t}\n     }\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"\\n\");\n }\n \n \n@@ -446,11 +461,23 @@ cgraph_optimize ()\n   struct cgraph_node *node;\n   bool changed = true;\n \n+  timevar_push (TV_CGRAPHOPT);\n+  if (cgraph_dump_file)\n+    {\n+      fprintf (cgraph_dump_file, \"Initial callgraph:\");\n+      dump_cgraph (cgraph_dump_file);\n+    }\n   cgraph_mark_local_functions ();\n \n   cgraph_mark_functions_to_inline_once ();\n \n   cgraph_global_info_ready = true;\n+  if (cgraph_dump_file)\n+    {\n+      fprintf (cgraph_dump_file, \"Optimized callgraph:\");\n+      dump_cgraph (cgraph_dump_file);\n+    }\n+  timevar_pop (TV_CGRAPHOPT);\n   if (!quiet_flag)\n     fprintf (stderr, \"\\n\\nAssembling functions:\");\n \n@@ -485,4 +512,9 @@ cgraph_optimize ()\n \t    }\n \t}\n     }\n+  if (cgraph_dump_file)\n+    {\n+      fprintf (cgraph_dump_file, \"Final callgraph:\");\n+      dump_cgraph (cgraph_dump_file);\n+    }\n }"}, {"sha": "2155e74418b57e3e65b164c68030731e07c36946", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 43, "deletions": 40, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -3118,115 +3118,118 @@ meanings:\n Annotate the assembler output with miscellaneous debugging information.\n @item b\n @opindex db\n-Dump after computing branch probabilities, to @file{@var{file}.15.bp}.\n+Dump after computing branch probabilities, to @file{@var{file}.16.bp}.\n @item B\n @opindex dB\n-Dump after block reordering, to @file{@var{file}.31.bbro}.\n+Dump after block reordering, to @file{@var{file}.32.bbro}.\n @item c\n @opindex dc\n-Dump after instruction combination, to the file @file{@var{file}.21.combine}.\n+Dump after instruction combination, to the file @file{@var{file}.22.combine}.\n @item C\n @opindex dC\n-Dump after the first if conversion, to the file @file{@var{file}.16.ce1}.\n-Also dump after the second if conversion, to the file @file{@var{file}.22.ce2}.\n+Dump after the first if conversion, to the file @file{@var{file}.17.ce1}.\n+Also dump after the second if conversion, to the file @file{@var{file}.23.ce2}.\n @item d\n @opindex dd\n-Dump after branch target load optimization, to to @file{@var{file}.33.btl}.\n-Also dump after delayed branch scheduling, to @file{@var{file}.36.dbr}.\n+Dump after branch target load optimization, to to @file{@var{file}.34.btl}.\n+Also dump after delayed branch scheduling, to @file{@var{file}.37.dbr}.\n @item D\n @opindex dD\n Dump all macro definitions, at the end of preprocessing, in addition to\n normal output.\n @item e\n @opindex de\n-Dump after SSA optimizations, to @file{@var{file}.04.ssa} and\n-@file{@var{file}.07.ussa}.\n+Dump after SSA optimizations, to @file{@var{file}.05.ssa} and\n+@file{@var{file}.010.ussa}.\n @item E\n @opindex dE\n-Dump after the second if conversion, to @file{@var{file}.32.ce3}.\n+Dump after the second if conversion, to @file{@var{file}.33.ce3}.\n @item f\n @opindex df\n-Dump after control and data flow analysis, to @file{@var{file}.14.cfg}.\n-Also dump after life analysis, to @file{@var{file}.20.life}.\n+Dump after control and data flow analysis, to @file{@var{file}.15.cfg}.\n+Also dump after life analysis, to @file{@var{file}.21.life}.\n @item F\n @opindex dF\n-Dump after purging @code{ADDRESSOF} codes, to @file{@var{file}.10.addressof}.\n+Dump after purging @code{ADDRESSOF} codes, to @file{@var{file}.11.addressof}.\n @item g\n @opindex dg\n-Dump after global register allocation, to @file{@var{file}.26.greg}.\n+Dump after global register allocation, to @file{@var{file}.27.greg}.\n @item G\n @opindex dG\n-Dump after GCSE, to @file{@var{file}.11.gcse}.\n+Dump after GCSE, to @file{@var{file}.12.gcse}.\n Also dump after jump bypassing and control flow optimizations, to\n-@file{@var{file}.13.bypass}.\n+@file{@var{file}.14.bypass}.\n @item h\n @opindex dh\n-Dump after finalization of EH handling code, to @file{@var{file}.02.eh}.\n+Dump after finalization of EH handling code, to @file{@var{file}.03.eh}.\n @item i\n @opindex di\n-Dump after sibling call optimizations, to @file{@var{file}.01.sibling}.\n+Dump after sibling call optimizations, to @file{@var{file}.02.sibling}.\n @item j\n @opindex dj\n-Dump after the first jump optimization, to @file{@var{file}.03.jump}.\n+Dump after the first jump optimization, to @file{@var{file}.04.jump}.\n @item k\n @opindex dk\n-Dump after conversion from registers to stack, to @file{@var{file}.35.stack}.\n+Dump after conversion from registers to stack, to @file{@var{file}.36.stack}.\n @item l\n @opindex dl\n-Dump after local register allocation, to @file{@var{file}.25.lreg}.\n+Dump after local register allocation, to @file{@var{file}.26.lreg}.\n @item L\n @opindex dL\n-Dump after loop optimization passes, to @file{@var{file}.12.loop} and\n-@file{@var{file}.18.loop2}.\n+Dump after loop optimization passes, to @file{@var{file}.13.loop} and\n+@file{@var{file}.19.loop2}.\n @item M\n @opindex dM\n Dump after performing the machine dependent reorganization pass, to\n-@file{@var{file}.36.mach}.\n+@file{@var{file}.37.mach}.\n @item n\n @opindex dn\n-Dump after register renumbering, to @file{@var{file}.30.rnreg}.\n+Dump after register renumbering, to @file{@var{file}.31.rnreg}.\n @item N\n @opindex dN\n-Dump after the register move pass, to @file{@var{file}.23.regmove}.\n+Dump after the register move pass, to @file{@var{file}.24.regmove}.\n @item o\n @opindex do\n-Dump after post-reload optimizations, to @file{@var{file}.27.postreload}.\n+Dump after post-reload optimizations, to @file{@var{file}.28.postreload}.\n @item r\n @opindex dr\n-Dump after RTL generation, to @file{@var{file}.00.rtl}.\n+Dump after RTL generation, to @file{@var{file}.01.rtl}.\n @item R\n @opindex dR\n-Dump after the second scheduling pass, to @file{@var{file}.34.sched2}.\n+Dump after the second scheduling pass, to @file{@var{file}.35.sched2}.\n @item s\n @opindex ds\n Dump after CSE (including the jump optimization that sometimes follows\n-CSE), to @file{@var{file}.09.cse}.\n+CSE), to @file{@var{file}.019.cse}.\n @item S\n @opindex dS\n-Dump after the first scheduling pass, to @file{@var{file}.24.sched}.\n+Dump after the first scheduling pass, to @file{@var{file}.25.sched}.\n @item t\n @opindex dt\n Dump after the second CSE pass (including the jump optimization that\n-sometimes follows CSE), to @file{@var{file}.19.cse2}.\n+sometimes follows CSE), to @file{@var{file}.20.cse2}.\n @item T\n @opindex dT\n-Dump after running tracer, to @file{@var{file}.17.tracer}.\n+Dump after running tracer, to @file{@var{file}.18.tracer}.\n @item u\n @opindex du\n-Dump after null pointer elimination pass to @file{@var{file}.08.null}.\n-@item w\n+Dump after null pointer elimination pass to @file{@var{file}.018.null}.\n+@item U\n+@opindex dU\n+Dump callgraph and unit-at-a-time optimization @file{@var{file}.00.unit}.\n+@litem w\n @opindex dw\n-Dump after the second flow pass, to @file{@var{file}.28.flow2}.\n+Dump after the second flow pass, to @file{@var{file}.29.flow2}.\n @item W\n @opindex dW\n Dump after SSA conditional constant propagation, to\n-@file{@var{file}.05.ssaccp}.\n+@file{@var{file}.06.ssaccp}.\n @item X\n @opindex dX\n-Dump after SSA dead code elimination, to @file{@var{file}.06.ssadce}.\n+Dump after SSA dead code elimination, to @file{@var{file}.07.ssadce}.\n @item z\n @opindex dz\n-Dump after the peephole pass, to @file{@var{file}.29.peephole2}.\n+Dump after the peephole pass, to @file{@var{file}.30.peephole2}.\n @item a\n @opindex da\n Produce all the dumps listed above.\n@@ -3249,7 +3252,7 @@ Also turns on @option{-dp} annotation.\n @item v\n @opindex dv\n For each of the other indicated dump files (except for\n-@file{@var{file}.00.rtl}), dump a representation of the control flow graph\n+@file{@var{file}.01.rtl}), dump a representation of the control flow graph\n suitable for viewing with VCG to @file{@var{file}.@var{pass}.vcg}.\n @item x\n @opindex dx"}, {"sha": "22d3097cf6a7906ee25e76b28d14a27644850c18", "filename": "gcc/timevar.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -39,6 +39,8 @@ DEFTIMEVAR (TV_GC                    , \"garbage collection\")\n /* Time spent generating dump files.  */\n DEFTIMEVAR (TV_DUMP                  , \"dump files\")\n \n+DEFTIMEVAR (TV_CGRAPH                , \"callgraph construction\")\n+DEFTIMEVAR (TV_CGRAPHOPT             , \"callgraph optimization\")\n /* Time spent by constructing CFG.  */\n DEFTIMEVAR (TV_CFG                   , \"cfg construction\")\n /* Time spent by cleaning up CFG.  */"}, {"sha": "84f61b7763602255c41c4e99da36a26a1eee4492", "filename": "gcc/toplev.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a194aa56e656273fde94d2935e43d0640d90e42f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a194aa56e656273fde94d2935e43d0640d90e42f", "patch": "@@ -247,6 +247,7 @@ struct dump_file_info\n \n enum dump_file_index\n {\n+  DFI_cgraph,\n   DFI_rtl,\n   DFI_sibling,\n   DFI_eh,\n@@ -294,11 +295,12 @@ enum dump_file_index\n    Remaining -d letters:\n \n \t\"            m   q         \"\n-\t\"         JK   O Q   UV  YZ\"\n+\t\"         JK   O Q    V  YZ\"\n */\n \n static struct dump_file_info dump_file[DFI_MAX] =\n {\n+  { \"cgraph\",\t'U', 0, 0, 0 },\n   { \"rtl\",\t'r', 0, 0, 0 },\n   { \"sibling\",  'i', 0, 0, 0 },\n   { \"eh\",\t'h', 0, 0, 0 },\n@@ -1567,6 +1569,7 @@ static const lang_independent_options W_options[] =\n FILE *asm_out_file;\n FILE *aux_info_file;\n FILE *rtl_dump_file = NULL;\n+FILE *cgraph_dump_file = NULL;\n \n /* Set up a default flag_random_seed and local_tick, unless the user\n    already specified one.  */\n@@ -4944,10 +4947,23 @@ do_compile (void)\n       if (!no_backend)\n \tbackend_init ();\n \n+      if (flag_unit_at_a_time)\n+\t{\n+          open_dump_file (DFI_cgraph, NULL);\n+\t  cgraph_dump_file = rtl_dump_file;\n+\t  rtl_dump_file = NULL;\n+\t}\n       /* Language-dependent initialization.  Returns true on success.  */\n       if (lang_dependent_init (main_input_filename))\n \tcompile_file ();\n \n+      if (flag_unit_at_a_time)\n+\t{\n+\t  rtl_dump_file = cgraph_dump_file;\n+\t  cgraph_dump_file = NULL;\n+          close_dump_file (DFI_cgraph, NULL, NULL_RTX);\n+\t}\n+\n       finalize ();\n     }\n "}]}