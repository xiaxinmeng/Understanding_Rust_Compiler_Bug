{"sha": "188965afb10a2bf14527f2aa9f9cb0f8fcc991e9", "node_id": "C_kwDOANBUbNoAKDE4ODk2NWFmYjEwYTJiZjE0NTI3ZjJhYTlmOWNiMGY4ZmNjOTkxZTk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-05T16:22:19Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-12-06T13:58:48Z"}, "message": "ada: Suppress warning for specific constant valid condition\n\nLike in Exp_Ch4, we do not want to give warnings in Sem_Warn on a membership\ntest with a mark for a subtype that is predicated.\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Bail out for a\n\tmembership test with a mark for a subtype that is predicated.", "tree": {"sha": "901c6ed83703c0963add1354912927fe5419b25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/901c6ed83703c0963add1354912927fe5419b25d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/188965afb10a2bf14527f2aa9f9cb0f8fcc991e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188965afb10a2bf14527f2aa9f9cb0f8fcc991e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188965afb10a2bf14527f2aa9f9cb0f8fcc991e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188965afb10a2bf14527f2aa9f9cb0f8fcc991e9/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb36c85ab0c9876dde207d5b93aad7398539c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb36c85ab0c9876dde207d5b93aad7398539c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb36c85ab0c9876dde207d5b93aad7398539c7e"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "cb2a3819df604e511b3edb92daa3f361fcd7a010", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188965afb10a2bf14527f2aa9f9cb0f8fcc991e9/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188965afb10a2bf14527f2aa9f9cb0f8fcc991e9/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=188965afb10a2bf14527f2aa9f9cb0f8fcc991e9", "patch": "@@ -3290,6 +3290,44 @@ package body Sem_Warn is\n       Left  : constant Node_Id := Left_Opnd  (Op);\n       Right : constant Node_Id := Right_Opnd (Op);\n \n+      function Comes_From_Simple_Condition_In_Source\n+        (Op : Node_Id) return Boolean;\n+      --  Return True if Op comes from a simple condition present in the source\n+\n+      -------------------------------------------\n+      -- Comes_From_Simple_Condition_In_Source --\n+      -------------------------------------------\n+\n+      function Comes_From_Simple_Condition_In_Source\n+        (Op : Node_Id) return Boolean\n+      is\n+         Orig_Op : constant Node_Id := Original_Node (Op);\n+\n+      begin\n+         if not Comes_From_Source (Orig_Op) then\n+            return False;\n+         end if;\n+\n+         --  We do not want to give warnings on a membership test with a mark\n+         --  for a subtype that is predicated, see also Exp_Ch4.Expand_N_In.\n+\n+         if Nkind (Orig_Op) = N_In then\n+            declare\n+               Orig_Rop : constant Node_Id :=\n+                            Original_Node (Right_Opnd (Orig_Op));\n+            begin\n+               if Is_Entity_Name (Orig_Rop)\n+                 and then Is_Type (Entity (Orig_Rop))\n+                 and then Present (Predicate_Function (Entity (Orig_Rop)))\n+               then\n+                  return False;\n+               end if;\n+            end;\n+         end if;\n+\n+         return True;\n+      end Comes_From_Simple_Condition_In_Source;\n+\n       True_Result  : Boolean;\n       False_Result : Boolean;\n \n@@ -3298,7 +3336,7 @@ package body Sem_Warn is\n       --  scalar operands are valid.\n \n       if Constant_Condition_Warnings\n-        and then Comes_From_Source (Original_Node (Op))\n+        and then Comes_From_Simple_Condition_In_Source (Op)\n         and then Is_Scalar_Type (Etype (Left))\n         and then Is_Scalar_Type (Etype (Right))\n "}]}