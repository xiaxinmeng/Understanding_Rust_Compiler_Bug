{"sha": "04920bb67f9d7014248beed823a6a4ac50dbedd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5MjBiYjY3ZjlkNzAxNDI0OGJlZWQ4MjNhNmE0YWM1MGRiZWRkNA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-05-28T08:55:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:55:42Z"}, "message": "[Ada] Fix regression of ACATS c46032a with CCG back end\n\n2018-05-28  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Real_Range_Check): Add a temporary to store the integer\n\tvalue when converting a float value to a fixed-point value. This is\n\trequired for CCG because it handles fixed-point types by means of\n\tunsigned integer type variables. The range check is now performed using\n\tthe integer value stored in this temporary.\n\nFrom-SVN: r260837", "tree": {"sha": "10ab30d2d05f7663463c759120b58cdcc8779705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ab30d2d05f7663463c759120b58cdcc8779705"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04920bb67f9d7014248beed823a6a4ac50dbedd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04920bb67f9d7014248beed823a6a4ac50dbedd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04920bb67f9d7014248beed823a6a4ac50dbedd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04920bb67f9d7014248beed823a6a4ac50dbedd4/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb1a067201dec2585968531ee1a03363bf9210f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1a067201dec2585968531ee1a03363bf9210f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1a067201dec2585968531ee1a03363bf9210f5"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "c00a76df1c894ad41dab16b3ab833ccfb828629b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04920bb67f9d7014248beed823a6a4ac50dbedd4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04920bb67f9d7014248beed823a6a4ac50dbedd4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=04920bb67f9d7014248beed823a6a4ac50dbedd4", "patch": "@@ -1,3 +1,11 @@\n+2018-05-28  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Real_Range_Check): Add a temporary to store the integer\n+\tvalue when converting a float value to a fixed-point value. This is\n+\trequired for CCG because it handles fixed-point types by means of\n+\tunsigned integer type variables. The range check is now performed using\n+\tthe integer value stored in this temporary.\n+\n 2018-05-28  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb (Is_OK_Volatile_Context): Add attributes First, Last and"}, {"sha": "517a8da65bdaa420111dd2f32c94fed5ab68d4e5", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04920bb67f9d7014248beed823a6a4ac50dbedd4/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04920bb67f9d7014248beed823a6a4ac50dbedd4/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=04920bb67f9d7014248beed823a6a4ac50dbedd4", "patch": "@@ -11096,8 +11096,10 @@ package body Exp_Ch4 is\n             --  conversion to the target fixed-point type.\n \n             declare\n-               Int_Type : Entity_Id;\n                Bfx_Type : constant Entity_Id := Base_Type (Target_Type);\n+               Expr_Id  : constant Entity_Id :=\n+                            Make_Temporary (Loc, 'T', Conv);\n+               Int_Type : Entity_Id;\n \n             begin\n                if RM_Size (Bfx_Type) > RM_Size (Standard_Integer) then\n@@ -11112,15 +11114,29 @@ package body Exp_Ch4 is\n                   Int_Type := Standard_Short_Integer;\n                end if;\n \n+               --  Generate a temporary with the integer value. Required in the\n+               --  CCG compiler to ensure that runtime checks reference this\n+               --  integer expression (instead of the resulting fixed-point\n+               --  value) because fixed-point values are handled by means of\n+               --  unsigned integer types).\n+\n+               Insert_Action (N,\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Expr_Id,\n+                   Object_Definition   => New_Occurrence_Of (Int_Type, Loc),\n+                   Constant_Present    => True,\n+                   Expression          =>\n+                     Convert_To (Int_Type, Expression (Conv))));\n+\n                --  Create integer objects for range checking of result.\n \n                Lo_Arg := Unchecked_Convert_To (Int_Type,\n-                           New_Occurrence_Of (Tnn, Loc));\n+                           New_Occurrence_Of (Expr_Id, Loc));\n                Lo_Val := Make_Integer_Literal (Loc,\n                            Corresponding_Integer_Value (Lo));\n \n                Hi_Arg := Unchecked_Convert_To (Int_Type,\n-                           New_Occurrence_Of (Tnn, Loc));\n+                           New_Occurrence_Of (Expr_Id, Loc));\n                Hi_Val := Make_Integer_Literal (Loc,\n                            Corresponding_Integer_Value (Hi));\n \n@@ -11132,7 +11148,7 @@ package body Exp_Ch4 is\n                            Subtype_Mark =>\n                              New_Occurrence_Of (Target_Type, Loc),\n                            Expression   =>\n-                             Convert_To (Int_Type, Expression (Conv)));\n+                             New_Occurrence_Of (Expr_Id, Loc));\n             end;\n \n          else  -- For all other conversions"}]}