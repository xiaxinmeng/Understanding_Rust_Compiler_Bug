{"sha": "4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkNGJiN2YwYzg2MjkxYTNiNmE5NTA2NzM5ZGUxOWY4NzM3OWEwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T13:40:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T13:40:41Z"}, "message": "[multiple changes]\n\n2014-07-30  Olivier Hainque  <hainque@adacore.com>\n\n\t* vxworks-ppc-link.spec: New file. Extra link\n\tinstructions for ppc-vxworks.\n\t* vxworks-crtbe-link.spec: Likewise, for ZCX related support.\n\t* system-vxworks-ppc.ads: Adjust linker options to use spec files.\n\t* system-vxworks-arm.ads: Likewise.\n\t* gcc-interface/Makefile.in: Enable .spec files.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb: Minor comment reformatting.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Is_Junk_Name): Removed.\n\t* sem_warn.adb (Has_Junk_Name): New function\n\t(Check_References): Use Has_Junk_Name to delete junk warnings\n\t(Check_Unset_Reference): ditto.\n\t(Warn_On_Unreferenced_Entity): ditto.\n\t(Warn_On_Useless_Assignment): ditto.\n\t* sem_ch3.adb, lib-xref-spark_specific.adb, s-taprop-vxworks.adb,\n\texp_ch7.adb, s-asthan-vms-alpha.adb, sem_ch10.adb, osint-c.adb,\n\tprj.adb, g-comlin.adb, makeutl.adb, s-tasdeb.adb, exp_intr.adb,\n\ts-asthan-vms-ia64.adb, prj-env.adb: Ditto.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Insert_Valid_Check): Do not check for the packed\n\tarray type of a prefix that is an access type.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): Evaluate the GNAT attribute\n\tUnconstrained_Array even if prefix is not frozen yet, as can\n\toccur with a private subtype used as a generic actual.\n\n2014-07-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting.\n\n2014-07-30  Pat Rogers  <rogers@adacore.com>\n\n\t* gnat_rm.texi: Corrected minor wording error in description\n\tof No_Exception_Registration.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.ads, einfo.adb: New flag Is_Inlined_Always for use in GNATprove\n\tmode. Realphabetize two subprograms.\n\t* inline.adb (Cannot_Inline): Use Is_Inlined_Always in GNATprove mode.\n\t(Can_Be_Inlined_In_GNATprove_Mode): Adapt to possible Empty Body_Id.\n\t(Check_And_Build_Body_To_Inline): Use Is_Inlined_Always in GNATprove\n\tmode.\n\t(Expand_Inline_Call): Use Is_Inlined_Always in GNATprove mode.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not use\n\tIs_Inline in GNATprove mode.\n\t(Analyze_Subprogram_Specification):\n\tSet Is_Inlined_Always at subprogram entity creation.\n\t* sem_res.adb (Resolve_Call): Do not deal with inlining during\n\tpre-analysis.  Issue warning on call to possibly inlined\n\tsubprogram when body not seen.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): Add special\n\tcase for compiler-generated formals in GNATprove mode.\n\nFrom-SVN: r213264", "tree": {"sha": "3e398e2b6b9da4c210887945163f5bda02167e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e398e2b6b9da4c210887945163f5bda02167e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/comments", "author": null, "committer": null, "parents": [{"sha": "e687b3f53562f4b79d97016e7828bfe0d25ac64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e687b3f53562f4b79d97016e7828bfe0d25ac64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e687b3f53562f4b79d97016e7828bfe0d25ac64b"}], "stats": {"total": 506, "additions": 333, "deletions": 173}, "files": [{"sha": "4c260cac39e2267bb8048eb61b53147e3cf8cceb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -1,3 +1,67 @@\n+2014-07-30  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* vxworks-ppc-link.spec: New file. Extra link\n+\tinstructions for ppc-vxworks.\n+\t* vxworks-crtbe-link.spec: Likewise, for ZCX related support.\n+\t* system-vxworks-ppc.ads: Adjust linker options to use spec files.\n+\t* system-vxworks-arm.ads: Likewise.\n+\t* gcc-interface/Makefile.in: Enable .spec files.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb: Minor comment reformatting.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Junk_Name): Removed.\n+\t* sem_warn.adb (Has_Junk_Name): New function\n+\t(Check_References): Use Has_Junk_Name to delete junk warnings\n+\t(Check_Unset_Reference): ditto.\n+\t(Warn_On_Unreferenced_Entity): ditto.\n+\t(Warn_On_Useless_Assignment): ditto.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Do not check for the packed\n+\tarray type of a prefix that is an access type.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Evaluate the GNAT attribute\n+\tUnconstrained_Array even if prefix is not frozen yet, as can\n+\toccur with a private subtype used as a generic actual.\n+\n+2014-07-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting.\n+\n+2014-07-30  Pat Rogers  <rogers@adacore.com>\n+\n+\t* gnat_rm.texi: Corrected minor wording error in description\n+\tof No_Exception_Registration.\n+\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: New flag Is_Inlined_Always for use in GNATprove\n+\tmode. Realphabetize two subprograms.\n+\t* inline.adb (Cannot_Inline): Use Is_Inlined_Always in GNATprove mode.\n+\t(Can_Be_Inlined_In_GNATprove_Mode): Adapt to possible Empty Body_Id.\n+\t(Check_And_Build_Body_To_Inline): Use Is_Inlined_Always in GNATprove\n+\tmode.\n+\t(Expand_Inline_Call): Use Is_Inlined_Always in GNATprove mode.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not use\n+\tIs_Inline in GNATprove mode.\n+\t(Analyze_Subprogram_Specification):\n+\tSet Is_Inlined_Always at subprogram entity creation.\n+\t* sem_res.adb (Resolve_Call): Do not deal with inlining during\n+\tpre-analysis.  Issue warning on call to possibly inlined\n+\tsubprogram when body not seen.\n+\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Add special\n+\tcase for compiler-generated formals in GNATprove mode.\n+\n 2014-07-30  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch6.adb: Add comments."}, {"sha": "27862d5a5b351ad3dbedff6145550f8ae88bb021", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -6554,14 +6554,16 @@ package body Checks is\n          --  A rather specialized test. If PV is an analyzed expression which\n          --  is an indexed component of a packed array that has not been\n          --  properly expanded, turn off its Analyzed flag to make sure it\n-         --  gets properly reexpanded.\n+         --  gets properly reexpanded. If the prefix is an access value,\n+         --  the dereference will be added later.\n \n          --  The reason this arises is that Duplicate_Subexpr_No_Checks did\n          --  an analyze with the old parent pointer. This may point e.g. to\n          --  a subprogram call, which deactivates this expansion.\n \n          if Analyzed (PV)\n            and then Nkind (PV) = N_Indexed_Component\n+           and then Is_Array_Type (Etype (Prefix (PV)))\n            and then Present (Packed_Array_Impl_Type (Etype (Prefix (PV))))\n          then\n             Set_Analyzed (PV, False);\n@@ -8053,8 +8055,10 @@ package body Checks is\n \n          if Vax_Float (E) then\n             return True;\n+\n          elsif Kill_Range_Checks (E) then\n             return True;\n+\n          elsif Checks_May_Be_Suppressed (E) then\n             return Is_Check_Suppressed (E, Range_Check);\n          end if;"}, {"sha": "95d94ecbdd9f206605c571e08cfc2fe80546aab5", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -270,6 +270,7 @@ package body Einfo is\n    --  sense for them to be set true for certain subsets of entity kinds. See\n    --  the spec of Einfo for further details.\n \n+   --    Is_Inlined_Always               Flag1\n    --    Is_Frozen                       Flag4\n    --    Has_Discriminants               Flag5\n    --    Is_Dispatching_Operation        Flag6\n@@ -568,7 +569,6 @@ package body Einfo is\n    --    (SSO_Set_Low_By_Default)        Flag272\n    --    (SSO_Set_Low_By_Default)        Flag273\n \n-   --    (unused)                        Flag1\n    --    (unused)                        Flag2\n    --    (unused)                        Flag3\n \n@@ -2107,6 +2107,12 @@ package body Einfo is\n       return Flag11 (Id);\n    end Is_Inlined;\n \n+   function Is_Inlined_Always (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      return Flag1 (Id);\n+   end Is_Inlined_Always;\n+\n    function Is_Interface (Id : E) return B is\n    begin\n       return Flag186 (Id);\n@@ -3518,6 +3524,13 @@ package body Einfo is\n       Set_Flag38 (Id, V);\n    end Set_Can_Never_Be_Null;\n \n+   procedure Set_Can_Use_Internal_Rep (Id : E; V : B := True) is\n+   begin\n+      pragma Assert\n+        (Is_Access_Subprogram_Type (Id) and then Is_Base_Type (Id));\n+      Set_Flag229 (Id, V);\n+   end Set_Can_Use_Internal_Rep;\n+\n    procedure Set_Checks_May_Be_Suppressed (Id : E; V : B := True) is\n    begin\n       Set_Flag31 (Id, V);\n@@ -3559,6 +3572,22 @@ package body Einfo is\n       Set_Node20 (Id, V);\n    end Set_Component_Type;\n \n+   procedure Set_Contract (Id : E; V : N) is\n+   begin\n+      pragma Assert\n+        (Ekind_In (Id, E_Entry,\n+         E_Entry_Family,\n+         E_Generic_Package,\n+         E_Package,\n+         E_Package_Body,\n+         E_Subprogram_Body,\n+         E_Variable,\n+         E_Void)\n+         or else Is_Generic_Subprogram (Id)\n+         or else Is_Subprogram (Id));\n+      Set_Node34 (Id, V);\n+   end Set_Contract;\n+\n    procedure Set_Corresponding_Concurrent_Type (Id : E; V : E) is\n    begin\n       pragma Assert\n@@ -3849,22 +3878,6 @@ package body Einfo is\n       Set_Node18 (Id, V);\n    end Set_Entry_Index_Constant;\n \n-   procedure Set_Contract (Id : E; V : N) is\n-   begin\n-      pragma Assert\n-        (Ekind_In (Id, E_Entry,\n-                       E_Entry_Family,\n-                       E_Generic_Package,\n-                       E_Package,\n-                       E_Package_Body,\n-                       E_Subprogram_Body,\n-                       E_Variable,\n-                       E_Void)\n-          or else Is_Generic_Subprogram (Id)\n-          or else Is_Subprogram (Id));\n-      Set_Node34 (Id, V);\n-   end Set_Contract;\n-\n    procedure Set_Entry_Parameters_Type (Id : E; V : E) is\n    begin\n       Set_Node15 (Id, V);\n@@ -3951,13 +3964,6 @@ package body Einfo is\n       Set_Node28 (Id, V);\n    end Set_Extra_Formals;\n \n-   procedure Set_Can_Use_Internal_Rep (Id : E; V : B := True) is\n-   begin\n-      pragma Assert\n-        (Is_Access_Subprogram_Type (Id) and then Is_Base_Type (Id));\n-      Set_Flag229 (Id, V);\n-   end Set_Can_Use_Internal_Rep;\n-\n    procedure Set_Finalization_Master (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Access_Type (Id) and then Is_Base_Type (Id));\n@@ -4888,6 +4894,12 @@ package body Einfo is\n       Set_Flag11 (Id, V);\n    end Set_Is_Inlined;\n \n+   procedure Set_Is_Inlined_Always (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      Set_Flag1 (Id, V);\n+   end Set_Is_Inlined_Always;\n+\n    procedure Set_Is_Interface (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Record_Type (Id));\n@@ -8389,6 +8401,7 @@ package body Einfo is\n       W (\"Is_Imported\",                     Flag24  (Id));\n       W (\"Is_Independent\",                  Flag268 (Id));\n       W (\"Is_Inlined\",                      Flag11  (Id));\n+      W (\"Is_Inlined_Always\",               Flag1   (Id));\n       W (\"Is_Instantiated\",                 Flag126 (Id));\n       W (\"Is_Interface\",                    Flag186 (Id));\n       W (\"Is_Internal\",                     Flag17  (Id));"}, {"sha": "6969bf816b8a843a3770bd835cfdf39ebc874f4c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -2476,10 +2476,12 @@ package Einfo is\n --       be compiled. Is_Inlined is also set on generic subprograms and is\n --       inherited by their instances. It is also set on the body entities\n --       of inlined subprograms. See also Has_Pragma_Inline.\n---\n---       Is_Inlined is also set for subprograms that are always inlined in\n---       GNATprove mode. GNATprove uses this flag to know when a body does not\n---       need to be analyzed.\n+\n+--    Is_Inlined_Always (Flag1)\n+--       Defined in subprograms. Set for functions and procedures which are\n+--       always inlined in GNATprove mode. GNATprove uses this flag to know\n+--       when a body does not need to be analyzed. The value of this flag is\n+--       only meaningful if Body_To_Inline is not Empty for the subprogram.\n \n --    Is_Instantiated (Flag126)\n --       Defined in generic packages and generic subprograms. Set if the unit\n@@ -5673,6 +5675,7 @@ package Einfo is\n    --    Is_Discrim_SO_Function              (Flag176)\n    --    Is_Discriminant_Check_Function      (Flag264)\n    --    Is_Eliminated                       (Flag124)\n+   --    Is_Inlined_Always                   (Flag1)    (non-generic case only)\n    --    Is_Instantiated                     (Flag126)  (generic case only)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Invariant_Procedure              (Flag257)  (non-generic case only)\n@@ -5964,6 +5967,7 @@ package Einfo is\n    --    Is_Called                           (Flag102)  (non-generic case only)\n    --    Is_Constructor                      (Flag76)\n    --    Is_Eliminated                       (Flag124)\n+   --    Is_Inlined_Always                   (Flag1)    (non-generic case only)\n    --    Is_Instantiated                     (Flag126)  (generic case only)\n    --    Is_Interrupt_Handler                (Flag89)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n@@ -6683,6 +6687,7 @@ package Einfo is\n    function Is_Imported                         (Id : E) return B;\n    function Is_Independent                      (Id : E) return B;\n    function Is_Inlined                          (Id : E) return B;\n+   function Is_Inlined_Always                   (Id : E) return B;\n    function Is_Instantiated                     (Id : E) return B;\n    function Is_Interface                        (Id : E) return B;\n    function Is_Internal                         (Id : E) return B;\n@@ -7320,6 +7325,7 @@ package Einfo is\n    procedure Set_Is_Imported                     (Id : E; V : B := True);\n    procedure Set_Is_Independent                  (Id : E; V : B := True);\n    procedure Set_Is_Inlined                      (Id : E; V : B := True);\n+   procedure Set_Is_Inlined_Always               (Id : E; V : B := True);\n    procedure Set_Is_Instantiated                 (Id : E; V : B := True);\n    procedure Set_Is_Interface                    (Id : E; V : B := True);\n    procedure Set_Is_Internal                     (Id : E; V : B := True);\n@@ -8090,6 +8096,7 @@ package Einfo is\n    pragma Inline (Is_Incomplete_Type);\n    pragma Inline (Is_Independent);\n    pragma Inline (Is_Inlined);\n+   pragma Inline (Is_Inlined_Always);\n    pragma Inline (Is_Instantiated);\n    pragma Inline (Is_Integer_Type);\n    pragma Inline (Is_Interface);\n@@ -8545,6 +8552,7 @@ package Einfo is\n    pragma Inline (Set_Is_Imported);\n    pragma Inline (Set_Is_Independent);\n    pragma Inline (Set_Is_Inlined);\n+   pragma Inline (Set_Is_Inlined_Always);\n    pragma Inline (Set_Is_Instantiated);\n    pragma Inline (Set_Is_Interface);\n    pragma Inline (Set_Is_Internal);"}, {"sha": "9649505134ad20bee87bd5de3b0b55d29040eab5", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -3141,7 +3141,6 @@ package body Exp_Ch7 is\n       Decl : Node_Id;\n \n       Dummy : Entity_Id;\n-      pragma Unreferenced (Dummy);\n       --  This variable captures an unused dummy internal entity, see the\n       --  comment associated with its use.\n "}, {"sha": "a2d02e8a16f6919c59684097c68e2ec8f9be7d67", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -961,7 +961,6 @@ package body Exp_Intr is\n       --  them to the tree, and that can disturb current value settings.\n \n       Dummy : Entity_Id;\n-      pragma Unreferenced (Dummy);\n       --  This variable captures an unused dummy internal entity, see the\n       --  comment associated with its use.\n "}, {"sha": "440b5d12f3c37a09ea240abdee83fef8e06f905a", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -584,7 +584,6 @@ package body GNAT.Command_Line is\n       Parser      : Opt_Parser := Command_Line_Parser) return Character\n    is\n       Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       <<Restart>>"}, {"sha": "fb06b6bcca3384a2662e5c16e4e9947e9e056cad", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -623,6 +623,9 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(target_cpu) $(target_vendor) $\n   EXTRA_GNATRTL_TASKING_OBJS += s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n+\n+  GCC_SPEC_FILES+=vxworks-$(ARCH_STR)-link.spec\n+  GCC_SPEC_FILES+=vxworks-crtbe-link.spec\n endif\n \n # PowerPC and e500v2 VxWorks 653\n@@ -1024,6 +1027,8 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n+\n+  GCC_SPEC_FILES+=vxworks-crtbe-link.spec\n endif\n \n # MIPS VxWorks"}, {"sha": "36444ec010255ce25746c4889455f36412a39971", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -10586,7 +10586,7 @@ statements (raise with no operand) are not permitted.\n [GNAT] This restriction ensures at compile time that no stream operations for\n types Exception_Id or Exception_Occurrence are used. This also makes it\n impossible to pass exceptions to or from a partition with this restriction\n-in a distributed environment. If this exception is active, then the generated\n+in a distributed environment. If this restriction is active, the generated\n code is simplified by omitting the otherwise-required global registration\n of exceptions when they are declared.\n "}, {"sha": "44cdec48aa496de6d96b79a828c048dbbff4192e", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -1445,11 +1445,11 @@ package body Inline is\n             null;\n \n          --  In GNATprove mode, issue a warning, and indicate that the\n-         --  subprogram is not always inlined by setting flag Is_Inlined\n+         --  subprogram is not always inlined by setting flag Is_Inlined_Always\n          --  to False.\n \n          elsif GNATprove_Mode then\n-            Set_Is_Inlined (Subp, False);\n+            Set_Is_Inlined_Always (Subp, False);\n             Error_Msg_NE (Msg & \"p?\", N, Subp);\n \n          elsif Has_Pragma_Inline_Always (Subp) then\n@@ -1474,10 +1474,10 @@ package body Inline is\n          Error_Msg_NE (Msg (Msg'First .. Msg'Last - 1), N, Subp);\n \n       --  In GNATprove mode, issue a warning, and indicate that the subprogram\n-      --  is not always inlined by setting flag Is_Inlined to False.\n+      --  is not always inlined by setting flag Is_Inlined_Always to False.\n \n       elsif GNATprove_Mode then\n-         Set_Is_Inlined (Subp, False);\n+         Set_Is_Inlined_Always (Subp, False);\n          Error_Msg_NE (Msg & \"p?\", N, Subp);\n \n       --  Do not issue errors/warnings when compiling with optimizations\n@@ -1630,6 +1630,8 @@ package body Inline is\n    --  Start of Can_Be_Inlined_In_GNATprove_Mode\n \n    begin\n+      pragma Assert (Present (Spec_Id) or else Present (Body_Id));\n+\n       if Present (Spec_Id) then\n          Id := Spec_Id;\n       else\n@@ -1663,15 +1665,17 @@ package body Inline is\n       --  body. Use the contract(s) instead in GNATprove.\n \n       elsif (Present (Spec_Id) and then Has_Some_Contract (Spec_Id))\n-        or else Has_Some_Contract (Body_Id)\n+               or else\n+            (Present (Body_Id) and then Has_Some_Contract (Body_Id))\n       then\n          return False;\n \n       --  Do not inline expression functions, which are directly inlined at the\n       --  prover level.\n \n       elsif (Present (Spec_Id) and then Is_Expression_Function (Spec_Id))\n-        or else Is_Expression_Function (Body_Id)\n+              or else\n+            (Present (Body_Id) and then Is_Expression_Function (Body_Id))\n       then\n          return False;\n \n@@ -1684,8 +1688,10 @@ package body Inline is\n       --  Only inline subprograms whose body is marked SPARK_Mode On. Other\n       --  subprogram bodies should not be analyzed.\n \n-      elsif No (SPARK_Pragma (Body_Id))\n-        or else Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) /= On\n+      elsif Present (Body_Id)\n+        and then (No (SPARK_Pragma (Body_Id))\n+                   or else\n+                  Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) /= On)\n       then\n          return False;\n \n@@ -2781,8 +2787,16 @@ package body Inline is\n                if Is_Subprogram (P_Ent) then\n                   Set_Is_Inlined (P_Ent, False);\n \n+                  --  In GNATprove mode, issue a warning, and indicate that\n+                  --  the subprogram is not always inlined by setting flag\n+                  --  Is_Inlined_Always to False.\n+\n+                  if GNATprove_Mode then\n+                     Set_Is_Inlined_Always (P_Ent, False);\n+                  end if;\n+\n                   if Comes_From_Source (P_Ent)\n-                    and then Has_Pragma_Inline (P_Ent)\n+                    and then (Has_Pragma_Inline (P_Ent) or else GNATprove_Mode)\n                   then\n                      Cannot_Inline\n                        (\"cannot inline& (nested subprogram)?\", N, P_Ent,\n@@ -3519,6 +3533,15 @@ package body Inline is\n       if In_Open_Scopes (Subp) then\n          Error_Msg_N (\"call to recursive subprogram cannot be inlined??\", N);\n          Set_Is_Inlined (Subp, False);\n+\n+         --  In GNATprove mode, issue a warning, and indicate that the\n+         --  subprogram is not always inlined by setting flag Is_Inlined_Always\n+         --  to False.\n+\n+         if GNATprove_Mode then\n+            Set_Is_Inlined_Always (Subp, False);\n+         end if;\n+\n          return;\n \n       --  Skip inlining if this is not a true inlining since the attribute\n@@ -3724,13 +3747,13 @@ package body Inline is\n             --  inlining will not happen, and mark the subprogram as not always\n             --  inlined.\n \n-            if Expander_Active then\n-               Error_Msg_N\n-                 (\"cannot inline call to recursive subprogram\", N);\n-            else\n+            if GNATprove_Mode then\n                Cannot_Inline\n                  (\"cannot inline call to recursive subprogram?\", N, Subp);\n-               Set_Is_Inlined (Subp, False);\n+               Set_Is_Inlined_Always (Subp, False);\n+            else\n+               Error_Msg_N\n+                 (\"cannot inline call to recursive subprogram\", N);\n             end if;\n \n             return;"}, {"sha": "24ffd6ff58f0f9750a73a6f63bc981226d69d4f6", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -238,8 +238,11 @@ package Inline is\n    function Can_Be_Inlined_In_GNATprove_Mode\n      (Spec_Id : Entity_Id;\n       Body_Id : Entity_Id) return Boolean;\n-   --  Returns True if the subprogram identified by Spec_Id (possibly Empty)\n-   --  and Body_Id (not Empty) can be inlined in GNATprove mode. GNATprove\n-   --  relies on this to adapt its treatment of the subprogram.\n+   --  Returns True if the subprogram identified by Spec_Id and Body_Id can\n+   --  be inlined in GNATprove mode. One but not both of Spec_Id and Body_Id\n+   --  can be Empty. Body_Id is Empty when doing a partial check on a call\n+   --  to a subprogram whose body has not been seen yet, to know whether this\n+   --  subprogram could possibly be inlined. GNATprove relies on this to adapt\n+   --  its treatment of the subprogram.\n \n end Inline;"}, {"sha": "28677060aae0db44fc6180fc75bab5ddf161627f", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -485,7 +485,6 @@ package body SPARK_Specific is\n                   declare\n                      Dummy : constant SPARK_Scope_Record :=\n                                SPARK_Scope_Table.Table (Index);\n-                     pragma Unreferenced (Dummy);\n                   begin\n                      return True;\n                   end;"}, {"sha": "a913884a6d760420229159c347a1ce189a1bfc25", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -955,6 +955,14 @@ package body Lib.Xref is\n          if Comes_From_Source (E) then\n             Ent := E;\n \n+         --  Because a declaration may be generated for a subprogram body\n+         --  without declaration in GNATprove mode, for inlining, some\n+         --  parameters may end up being marked as not coming from source\n+         --  although they are. Take these into account specially.\n+\n+         elsif GNATprove_Mode and then Ekind (E) in Formal_Kind then\n+            Ent := E;\n+\n          --  Entity does not come from source, but is a derived subprogram and\n          --  the derived subprogram comes from source (after one or more\n          --  derivations) in which case the reference is to parent subprogram."}, {"sha": "3fde64d083ec8c03f65757ae40e654aca05c7935", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -1434,8 +1434,6 @@ package body Makeutl is\n          In_Tree : Project_Tree_Ref;\n          Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy);\n-\n          Linker_Package : Package_Id;\n          Options        : Variable_Value;\n \n@@ -2621,7 +2619,6 @@ package body Makeutl is\n          Iter         : Source_Iterator;\n \n          Dummy : Boolean;\n-         pragma Unreferenced (Dummy);\n \n       begin\n          if not Insert_No_Roots (Source) then"}, {"sha": "d7faeba8057cf0ab3e296c8a2e5dc867954df825", "filename": "gcc/ada/osint-c.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fosint-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fosint-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -197,8 +197,6 @@ package body Osint.C is\n \n    procedure Create_Output_Library_Info is\n       Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n-\n    begin\n       Set_Library_Info_Name;\n       Delete_File (Name_Buffer (1 .. Name_Len), Dummy);"}, {"sha": "763986084345cb73d9b0eae5285c1069db55f344", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -131,7 +131,6 @@ package body Prj.Env is\n          In_Tree : Project_Tree_Ref;\n          Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy);\n       begin\n          Add_To_Path\n            (Project.Source_Dirs, In_Tree.Shared, Buffer, Buffer_Last);\n@@ -201,7 +200,7 @@ package body Prj.Env is\n          In_Tree : Project_Tree_Ref;\n          Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy, In_Tree);\n+         pragma Unreferenced (In_Tree);\n \n          Path : constant Path_Name_Type :=\n                   Get_Object_Directory\n@@ -1259,7 +1258,7 @@ package body Prj.Env is\n          Tree  : Project_Tree_Ref;\n          Dummy : in out Integer)\n       is\n-         pragma Unreferenced (Dummy, Tree);\n+         pragma Unreferenced (Tree);\n \n       begin\n          --  ??? Set_Ada_Paths has a different behavior for library project\n@@ -1304,8 +1303,6 @@ package body Prj.Env is\n          In_Tree : Project_Tree_Ref;\n          Dummy   : in out Integer)\n       is\n-         pragma Unreferenced (Dummy);\n-\n          Current    : String_List_Id := Prj.Source_Dirs;\n          The_String : String_Element;\n \n@@ -1676,7 +1673,7 @@ package body Prj.Env is\n          In_Tree : Project_Tree_Ref;\n          Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy, In_Tree);\n+         pragma Unreferenced (In_Tree);\n \n          Path : Path_Name_Type;\n "}, {"sha": "0562587c60480a29e499fbc7467b544fe56db1f5", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -1714,7 +1714,7 @@ package body Prj is\n             Context : Project_Context;\n             Dummy   : in out Boolean)\n          is\n-            pragma Unreferenced (Dummy, Tree);\n+            pragma Unreferenced (Tree);\n \n             List : Project_List;\n             Prj2 : Project_Id;"}, {"sha": "1f09a71be1f333d3b9e977e880185333116af180", "filename": "gcc/ada/s-asthan-vms-alpha.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-alpha.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -320,7 +320,6 @@ package body System.AST_Handling is\n \n    procedure Allocate_New_AST_Server is\n       Dummy : AST_Server_Task_Ptr;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       if Num_AST_Servers = Max_AST_Servers then"}, {"sha": "0fd29b125e96dbe4c20ce60c1d45a933d08af972", "filename": "gcc/ada/s-asthan-vms-ia64.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-asthan-vms-ia64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-asthan-vms-ia64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-ia64.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -325,7 +325,6 @@ package body System.AST_Handling is\n \n    procedure Allocate_New_AST_Server is\n       Dummy : AST_Server_Task_Ptr;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       if Num_AST_Servers = Max_AST_Servers then"}, {"sha": "52d12d5103f30d12fe1512d8c82c4e050a7ed048", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2014, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1298,7 +1298,6 @@ package body System.Task_Primitives.Operations is\n       C           : Task_Id;\n \n       Dummy : int;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       Dummy := Int_Lock;"}, {"sha": "e2256f781f37d8f1f3bce2022cc00e0794e71a94", "filename": "gcc/ada/s-tasdeb.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -77,10 +77,8 @@ package body System.Tasking.Debug is\n    ------------------------\n \n    procedure Continue_All_Tasks is\n-      C : Task_Id;\n-\n+      C     : Task_Id;\n       Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       STPO.Lock_RTS;\n@@ -218,7 +216,6 @@ package body System.Tasking.Debug is\n    procedure Resume_All_Tasks (Thread_Self : OS_Interface.Thread_Id) is\n       C     : Task_Id;\n       Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       STPO.Lock_RTS;\n@@ -267,10 +264,8 @@ package body System.Tasking.Debug is\n    --------------------\n \n    procedure Stop_All_Tasks is\n-      C : Task_Id;\n-\n+      C     : Task_Id;\n       Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       STPO.Lock_RTS;\n@@ -300,7 +295,6 @@ package body System.Tasking.Debug is\n    procedure Suspend_All_Tasks (Thread_Self : OS_Interface.Thread_Id) is\n       C     : Task_Id;\n       Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n \n    begin\n       STPO.Lock_RTS;"}, {"sha": "a597f73cee226b95b2b5fb42deb6b843fdb2d56d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -112,7 +112,7 @@ package body Sem_Aggr is\n    --  expressions allowed for a limited component association (namely, an\n    --  aggregate, function call, or <> notation). Report error for violations.\n    --  Expression is also OK in an instance or inlining context, because we\n-   --  have already analyzed and checked it.\n+   --  have already pre-analyzed and it is known to be type correct.\n \n    procedure Check_Qualified_Aggregate (Level : Nat; Expr : Node_Id);\n    --  Given aggregate Expr, check that sub-aggregates of Expr that are nested"}, {"sha": "b9a0fa6de39e0a6dc22d38f602a7ab25087da7bf", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -7386,13 +7386,19 @@ package body Sem_Attr is\n \n       --  If we are asked to evaluate an attribute where the prefix is a\n       --  non-frozen generic actual type whose RM_Size is still set to zero,\n-      --  then abandon the effort. It seems wrong that this can ever happen,\n-      --  but we see it happen, so this is a defense! ???\n+      --  then abandon the effort.\n \n       if Is_Type (P_Entity)\n         and then (not Is_Frozen (P_Entity)\n                    and then Is_Generic_Actual_Type (P_Entity)\n                    and then RM_Size (P_Entity) = 0)\n+\n+        --  However, the attribute Unconstrained_Array must be evaluated,\n+        --  since it is documented to be a static attribute (and can for\n+        --  example appear in a Compile_Time_Warning pragma). The frozen\n+        --  status of the type does not affect its evaluation.\n+\n+        and then Id /= Attribute_Unconstrained_Array\n       then\n          return;\n       end if;"}, {"sha": "189695ce4bd8e3c0ed3b27ae261207bef81225db", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -5694,13 +5694,11 @@ package body Sem_Ch10 is\n             -------------------\n \n             procedure Process_State (State : Node_Id) is\n-               Loc  : constant Source_Ptr := Sloc (State);\n-               Elmt : Node_Id;\n-               Id   : Entity_Id;\n-               Name : Name_Id;\n-\n+               Loc   : constant Source_Ptr := Sloc (State);\n+               Elmt  : Node_Id;\n+               Id    : Entity_Id;\n+               Name  : Name_Id;\n                Dummy : Entity_Id;\n-               pragma Unreferenced (Dummy);\n \n             begin\n                --  Multiple abstract states appear as an aggregate\n@@ -5709,9 +5707,9 @@ package body Sem_Ch10 is\n                   Elmt := First (Expressions (State));\n                   while Present (Elmt) loop\n                      Process_State (Elmt);\n-\n                      Next (Elmt);\n                   end loop;\n+\n                   return;\n \n                --  A null state has no abstract view"}, {"sha": "0e47f97f3c1448c4149bfc564bc8439c0dddb4e3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -2140,7 +2140,6 @@ package body Sem_Ch3 is\n          Spec_Id   : Entity_Id;\n \n          Dummy : Entity_Id;\n-         pragma Unreferenced (Dummy);\n          --  A dummy variable used to capture the unused result of subprogram\n          --  spec analysis.\n "}, {"sha": "393d557ad6ae8bbcd77b80cdf3b5ac035bbb7f58", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -3512,7 +3512,6 @@ package body Sem_Ch6 is\n            and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n            and then not Body_Has_Contract\n          then\n-            Set_Is_Inlined (Spec_Id, True);\n             Build_Body_To_Inline (N, Spec_Id);\n          end if;\n \n@@ -3540,7 +3539,6 @@ package body Sem_Ch6 is\n         and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n         and then not Body_Has_Contract\n       then\n-         Set_Is_Inlined (Spec_Id, True);\n          Check_And_Build_Body_To_Inline (N, Spec_Id, Body_Id);\n       end if;\n \n@@ -3675,7 +3673,7 @@ package body Sem_Ch6 is\n         and then Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Declaration\n       then\n          Set_Body_To_Inline (Parent (Parent (Spec_Id)), Empty);\n-         Set_Is_Inlined (Spec_Id, False);\n+         Set_Is_Inlined_Always (Spec_Id, False);\n       end if;\n \n       --  Check completion, and analyze the statements\n@@ -4268,6 +4266,14 @@ package body Sem_Ch6 is\n          Set_Etype (Designator, Standard_Void_Type);\n       end if;\n \n+      --  Flag Is_Inlined_Always is True by default, and reversed to False for\n+      --  those subprograms which could be inlined in GNATprove mode (because\n+      --  Body_To_Inline is non-Empty) but cannot be inlined.\n+\n+      if GNATprove_Mode then\n+         Set_Is_Inlined_Always (Designator);\n+      end if;\n+\n       --  Introduce new scope for analysis of the formals and the return type\n \n       Set_Scope (Designator, Current_Scope);"}, {"sha": "9a83ca577efab340f6e6d9e76a8252d2e9c11610", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -2128,7 +2128,7 @@ package body Sem_Eval is\n          Alt := First (Alternatives (N));\n          Search : loop\n \n-            --  We must find a match among the alternatives, If not this must\n+            --  We must find a match among the alternatives. If not, this must\n             --  be due to other errors, so just ignore, leaving as non-static.\n \n             if No (Alt) then\n@@ -2381,7 +2381,7 @@ package body Sem_Eval is\n          return;\n       end if;\n \n-      --  If condition raises constraint error then we have already signalled\n+      --  If condition raises constraint error then we have already signaled\n       --  an error, and we just propagate to the result and do not fold.\n \n       if Raises_Constraint_Error (Condition) then\n@@ -4980,9 +4980,9 @@ package body Sem_Eval is\n       --  non-static or raise Constraint_Error, return Non_Static.\n       --\n       --  Otherwise check if the selecting expression matches any of the given\n-      --  discrete choices. If so the alternative is executed and we return\n-      --  Open, otherwise, the alternative can never be executed, and so we\n-      --  return Closed.\n+      --  discrete choices. If so, the alternative is executed and we return\n+      --  Match, otherwise, the alternative can never be executed, and so we\n+      --  return No_Match.\n \n       ---------------------------------\n       -- Check_Case_Expr_Alternative --\n@@ -4998,7 +4998,7 @@ package body Sem_Eval is\n       begin\n          pragma Assert (Nkind (Case_Exp) = N_Case_Expression);\n \n-         --  Check selecting expression is static\n+         --  Check that selecting expression is static\n \n          if not Is_OK_Static_Expression (Expression (Case_Exp)) then\n             return Non_Static;\n@@ -5014,7 +5014,7 @@ package body Sem_Eval is\n          Choice := First (Discrete_Choices (CEA));\n          while Present (Choice) loop\n \n-            --  Check various possibilities for choice, returning Closed if we\n+            --  Check various possibilities for choice, returning Match if we\n             --  find the selecting value matches any of the choices. Note that\n             --  we know we are the last choice, so we don't have to keep going.\n \n@@ -5048,8 +5048,8 @@ package body Sem_Eval is\n             Next (Choice);\n          end loop;\n \n-         --  If we get through that loop then all choices were static, and\n-         --  none of them matched the selecting expression. So return Closed.\n+         --  If we get through that loop then all choices were static, and none\n+         --  of them matched the selecting expression. So return No_Match.\n \n          return No_Match;\n       end Check_Case_Expr_Alternative;\n@@ -5125,11 +5125,11 @@ package body Sem_Eval is\n \n          --  This refers to cases like\n \n-         --    (if 1 then 1 elsif 1/0=2 then 2 else 3)\n+         --    (if True then 1 elsif 1/0=2 then 2 else 3)\n \n          --  But we expand elsif's out anyway, so the above looks like:\n \n-         --    (if 1 then 1 else (if 1/0=2 then 2 else 3))\n+         --    (if True then 1 else (if 1/0=2 then 2 else 3))\n \n          --  So for us this is caught by the above check for the 32.3 case.\n \n@@ -5287,7 +5287,7 @@ package body Sem_Eval is\n         and then not In_Inlined_Body\n         and then Ada_Version >= Ada_95\n       then\n-         --  No message if we are staticallly unevaluated\n+         --  No message if we are statically unevaluated\n \n          if Is_Statically_Unevaluated (N) then\n             null;"}, {"sha": "64d25295fae2595a7096b4bc9aeb703752a08666", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -74,7 +74,7 @@ package Sem_Eval is\n    --  definition, they are sometimes folded anyway, but of course in this case\n    --  Is_Static_Expression is not set.\n \n-   --  When we are analyzing and evaluating static expressions, we proopagate\n+   --  When we are analyzing and evaluating static expressions, we propagate\n    --  both flags accurately. Usually if a subexpression raises a constraint\n    --  error, then so will its parent expression, and Raise_Constraint_Error\n    --  will be propagated to this parent. The exception is conditional cases"}, {"sha": "88356fd61277ab5538d320be74505ee14ccfea02", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -6210,6 +6210,7 @@ package body Sem_Res is\n       if GNATprove_Mode\n         and then Is_Overloadable (Nam)\n         and then SPARK_Mode = On\n+        and then Full_Analysis\n       then\n          --  Retrieve the body to inline from the ultimate alias of Nam, if\n          --  there is one, otherwise calls that should be inlined end up not\n@@ -6220,13 +6221,22 @@ package body Sem_Res is\n             Decl : constant Node_Id := Unit_Declaration_Node (Nam_Alias);\n          begin\n             if Nkind (Decl) = N_Subprogram_Declaration\n+              and then Can_Be_Inlined_In_GNATprove_Mode (Nam_Alias, Empty)\n+              and then No (Corresponding_Body (Decl))\n+            then\n+               Error_Msg_NE\n+                 (\"?cannot inline call to & (body not seen yet)\", N, Nam);\n+               Set_Is_Inlined_Always (Nam_Alias, False);\n+\n+            elsif Nkind (Decl) = N_Subprogram_Declaration\n               and then Present (Body_To_Inline (Decl))\n+              and then Is_Inlined (Nam_Alias)\n             then\n                if Is_Potentially_Unevaluated (N) then\n                   Error_Msg_NE (\"?cannot inline call to &\", N, Nam);\n                   Error_Msg_N\n                     (\"\\call appears in potentially unevaluated context\", N);\n-                  Set_Is_Inlined (Nam, False);\n+                  Set_Is_Inlined_Always (Nam_Alias, False);\n                else\n                   Expand_Inlined_Call (N, Nam_Alias, Nam);\n                end if;"}, {"sha": "487ac3a57fa1242dc4024a7fa04c733123691f9d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -10493,45 +10493,6 @@ package body Sem_Util is\n       end if;\n    end Is_Iterator;\n \n-   ------------------\n-   -- Is_Junk_Name --\n-   ------------------\n-\n-   function Is_Junk_Name (N : Name_Id) return Boolean is\n-      function Match (S : String) return Boolean;\n-      --  Return true if substring S is found in Name_Buffer (1 .. Name_Len)\n-\n-      -----------\n-      -- Match --\n-      -----------\n-\n-      function Match (S : String) return Boolean is\n-         Slen1 : constant Integer := S'Length - 1;\n-\n-      begin\n-         for J in 1 .. Name_Len - S'Length + 1 loop\n-            if Name_Buffer (J .. J + Slen1) = S then\n-               return True;\n-            end if;\n-         end loop;\n-\n-         return False;\n-      end Match;\n-\n-   --  Start of processing for Is_Junk_Name\n-\n-   begin\n-      Get_Unqualified_Decoded_Name_String (N);\n-      Set_All_Upper_Case;\n-\n-      return\n-        Match (\"DISCARD\") or else\n-        Match (\"DUMMY\")   or else\n-        Match (\"IGNORE\")  or else\n-        Match (\"JUNK\")    or else\n-        Match (\"UNUSED\");\n-   end Is_Junk_Name;\n-\n    ------------\n    -- Is_LHS --\n    ------------"}, {"sha": "f659b9859a1e9205f000bccbfb2bbf6f38bc22f3", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -1203,16 +1203,6 @@ package Sem_Util is\n    --  AI05-0139-2: Check whether Typ is one of the predefined interfaces in\n    --  Ada.Iterator_Interfaces, or it is derived from one.\n \n-   function Is_Junk_Name (N : Name_Id) return Boolean;\n-   --  Returns True if the given name contains any of the following substrings\n-   --    discard\n-   --    dummy\n-   --    ignore\n-   --    junk\n-   --    unused\n-   --  Used to suppress warnings on names matching these patterns. The contents\n-   --  of Name_Buffer and Name_Len are destroyed by this call.\n-\n    type Is_LHS_Result is (Yes, No, Unknown);\n    function Is_LHS (N : Node_Id) return Is_LHS_Result;\n    --  Returns Yes if N is definitely used as Name in an assignment statement."}, {"sha": "8db6835149785cdda87a1dc41d83dd6617d0b575", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -128,6 +128,16 @@ package body Sem_Warn is\n    --  If E is a parameter entity for a subprogram body, then this function\n    --  returns the corresponding spec entity, if not, E is returned unchanged.\n \n+   function Has_Junk_Name (E : Entity_Id) return Boolean;\n+   --  Return True if the entity name contains any of the following substrings:\n+   --    discard\n+   --    dummy\n+   --    ignore\n+   --    junk\n+   --    unused\n+   --  Used to suppress warnings on names matching these patterns. The contents\n+   --  of Name_Buffer and Name_Len are destroyed by this call.\n+\n    function Has_Pragma_Unmodified_Check_Spec (E : Entity_Id) return Boolean;\n    --  Tests Has_Pragma_Unmodified flag for entity E. If E is not a formal,\n    --  this is simply the setting of the flag Has_Pragma_Unmodified. If E is\n@@ -1060,7 +1070,8 @@ package body Sem_Warn is\n \n          --  We are only interested in source entities. We also don't issue\n          --  warnings within instances, since the proper place for such\n-         --  warnings is on the template when it is compiled.\n+         --  warnings is on the template when it is compiled, and we don't\n+         --  issue warnings for variables with names like Junk, Discard etc.\n \n          if Comes_From_Source (E1)\n            and then Instantiation_Location (Sloc (E1)) = No_Location\n@@ -1145,7 +1156,9 @@ package body Sem_Warn is\n                           and then not Has_Pragma_Unreferenced_Check_Spec (E1)\n                           and then not Has_Pragma_Unmodified_Check_Spec (E1)\n                         then\n-                           if not Warnings_Off_E1 then\n+                           if not Warnings_Off_E1\n+                             and then not Has_Junk_Name (E1)\n+                           then\n                               Error_Msg_N -- CODEFIX\n                                 (\"?k?& is not modified, \"\n                                  & \"could be declared constant!\",\n@@ -1267,7 +1280,11 @@ package body Sem_Warn is\n                      --  the formal is not modified.\n \n                      else\n-                        In_Out_Warnings.Append (E1);\n+                        --  Suppress the warnings for a junk name\n+\n+                        if not Has_Junk_Name (E1) then\n+                           In_Out_Warnings.Append (E1);\n+                        end if;\n                      end if;\n \n                   --  Other cases of formals\n@@ -1277,6 +1294,7 @@ package body Sem_Warn is\n                         if Referenced_Check_Spec (E1) then\n                            if not Has_Pragma_Unmodified_Check_Spec (E1)\n                              and then not Warnings_Off_E1\n+                             and then not Has_Junk_Name (E1)\n                            then\n                               Output_Reference_Error\n                                 (\"?f?formal parameter& is read but \"\n@@ -1285,6 +1303,7 @@ package body Sem_Warn is\n \n                         elsif not Has_Pragma_Unreferenced_Check_Spec (E1)\n                           and then not Warnings_Off_E1\n+                          and then not Has_Junk_Name (E1)\n                         then\n                            Output_Reference_Error\n                              (\"?f?formal parameter& is not referenced!\");\n@@ -1297,7 +1316,7 @@ package body Sem_Warn is\n                      if Referenced (E1) then\n                         if not Has_Unmodified (E1)\n                           and then not Warnings_Off_E1\n-                          and then not Is_Junk_Name (Chars (E1))\n+                          and then not Has_Junk_Name (E1)\n                         then\n                            Output_Reference_Error\n                              (\"?v?variable& is read but never assigned!\");\n@@ -1306,7 +1325,7 @@ package body Sem_Warn is\n \n                      elsif not Has_Unreferenced (E1)\n                        and then not Warnings_Off_E1\n-                       and then not Is_Junk_Name (Chars (E1))\n+                       and then not Has_Junk_Name (E1)\n                      then\n                         Output_Reference_Error -- CODEFIX\n                           (\"?v?variable& is never read and never assigned!\");\n@@ -1373,7 +1392,9 @@ package body Sem_Warn is\n                      if Nkind (UR) = N_Simple_Return_Statement\n                        and then not Has_Pragma_Unmodified_Check_Spec (E1)\n                      then\n-                        if not Warnings_Off_E1 then\n+                        if not Warnings_Off_E1\n+                          and then not Has_Junk_Name (E1)\n+                        then\n                            Error_Msg_NE\n                              (\"?v?OUT parameter& not set before return\",\n                               UR, E1);\n@@ -1593,7 +1614,9 @@ package body Sem_Warn is\n                           (E1, Body_Formal (E1, Accept_Statement => Anod));\n                      end if;\n \n-                  elsif not Warnings_Off_E1 then\n+                  elsif not Warnings_Off_E1\n+                    and then not Has_Junk_Name (E1)\n+                  then\n                      Unreferenced_Entities.Append (E1);\n                   end if;\n                end if;\n@@ -1609,7 +1632,7 @@ package body Sem_Warn is\n               and then Instantiation_Depth (Sloc (E1)) = 0\n               and then Warn_On_Redundant_Constructs\n             then\n-               if not Warnings_Off_E1 then\n+               if not Warnings_Off_E1 and then not Has_Junk_Name (E1) then\n                   Unreferenced_Entities.Append (E1);\n \n                   --  Force warning on entity\n@@ -1755,6 +1778,7 @@ package body Sem_Warn is\n                                 (Sloc (N), Sloc (Unset_Reference (E))))\n                  and then not Has_Pragma_Unmodified_Check_Spec (E)\n                  and then not Warnings_Off_Check_Spec (E)\n+                 and then not Has_Junk_Name (E)\n                then\n                   --  We may have an unset reference. The first test is whether\n                   --  this is an access to a discriminant of a record or a\n@@ -2660,6 +2684,44 @@ package body Sem_Warn is\n       end if;\n    end Goto_Spec_Entity;\n \n+   -------------------\n+   -- Has_Junk_Name --\n+   -------------------\n+\n+   function Has_Junk_Name (E : Entity_Id) return Boolean is\n+      function Match (S : String) return Boolean;\n+      --  Return true if substring S is found in Name_Buffer (1 .. Name_Len)\n+\n+      -----------\n+      -- Match --\n+      -----------\n+\n+      function Match (S : String) return Boolean is\n+         Slen1 : constant Integer := S'Length - 1;\n+\n+      begin\n+         for J in 1 .. Name_Len - S'Length + 1 loop\n+            if Name_Buffer (J .. J + Slen1) = S then\n+               return True;\n+            end if;\n+         end loop;\n+\n+         return False;\n+      end Match;\n+\n+   --  Start of processing for Has_Junk_Name\n+\n+   begin\n+      Get_Unqualified_Decoded_Name_String (Chars (E));\n+\n+      return\n+        Match (\"discard\") or else\n+        Match (\"dummy\")   or else\n+        Match (\"ignore\")  or else\n+        Match (\"junk\")    or else\n+        Match (\"unused\");\n+   end Has_Junk_Name;\n+\n    --------------------------------------\n    -- Has_Pragma_Unmodified_Check_Spec --\n    --------------------------------------\n@@ -3910,7 +3972,7 @@ package body Sem_Warn is\n       if not Referenced_Check_Spec (E)\n         and then not Has_Pragma_Unreferenced_Check_Spec (E)\n         and then not Warnings_Off_Check_Spec (E)\n-        and then not Is_Junk_Name (Chars (Spec_E))\n+        and then not Has_Junk_Name (Spec_E)\n       then\n          case Ekind (E) is\n             when E_Variable =>\n@@ -4115,7 +4177,7 @@ package body Sem_Warn is\n         and then not Is_Exported (Ent)\n         and then Safe_To_Capture_Value (N, Ent)\n         and then not Has_Pragma_Unreferenced_Check_Spec (Ent)\n-        and then not Is_Junk_Name (Chars (Ent))\n+        and then not Has_Junk_Name (Ent)\n       then\n          --  Before we issue the message, check covering exception handlers.\n          --  Search up tree for enclosing statement sequences and handlers."}, {"sha": "3b455d29ffc00708c96045127d44ae7af33b3108", "filename": "gcc/ada/system-vxworks-arm.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsystem-vxworks-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsystem-vxworks-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-arm.ads?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -115,6 +115,10 @@ package System is\n \n private\n \n+   pragma Linker_Options (\"--specs=vxworks-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n    type Address is mod Memory_Size;\n    Null_Address : constant Address := 0;\n \n@@ -151,6 +155,6 @@ private\n    Always_Compatible_Rep     : constant Boolean := False;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n-   ZCX_By_Default            : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n \n end System;"}, {"sha": "94615777a0e19eb6ba0937994778e4f903b7df24", "filename": "gcc/ada/system-vxworks-ppc.ads", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-ppc.ads?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                         (VxWorks 5 Version PPC)                          --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -115,14 +115,12 @@ package System is\n \n private\n \n-   --  Note: we now more closely rely on the VxWorks mechanisms to register\n-   --  exception tables for ZCX support in kernel mode, thanks to crt objects\n-   --  featuring dedicated constructors triggered by linker options below.\n+   pragma Linker_Options (\"--specs=vxworks-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n \n-   --  Commenting the pragma for the sjlj runtimes is performed automatically\n-   --  by our Makefiles, so this line needs to be manipulated with care.\n-\n-   pragma Linker_Options (\"-crtbe\" & ASCII.NUL & \"-auto-register\");\n+   pragma Linker_Options (\"--specs=vxworks-ppc-link.spec\");\n+   --  Setup proper set of -L's for this configuration\n \n    type Address is mod Memory_Size;\n    Null_Address : constant Address := 0;"}, {"sha": "8c4398d47703cf2b3b8625a17616230475bb69cf", "filename": "gcc/ada/vxworks-crtbe-link.spec", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fvxworks-crtbe-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fvxworks-crtbe-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-crtbe-link.spec?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -0,0 +1,13 @@\n+*self_spec:\n++ %{!auto-register:%{!noauto-register:-auto-register}} \\\n+  %{!crtbe:%{!nocrtbe:-crtbe}}\n+\n+*startfile:\n++ %{crtbe:%{!nocrtbe: \\\n+    %{!noauto-register:crtbegin.o%s} \\\n+    %{noauto-register:crtbeginT.o%s} \\\n+   }}\n+\n+*endfile:\n++ %{crtbe:%{!nocrtbe:crtend.o%s}}\n+"}, {"sha": "8f6263cf42e0b0769ade72cbbf5366cb4d47a01e", "filename": "gcc/ada/vxworks-ppc-link.spec", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fvxworks-ppc-link.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd4bb7f0c86291a3b6a9506739de19f87379a0f/gcc%2Fada%2Fvxworks-ppc-link.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxworks-ppc-link.spec?ref=4bd4bb7f0c86291a3b6a9506739de19f87379a0f", "patch": "@@ -0,0 +1,6 @@\n+*lib:\n++ %{mrtp:%{!shared: \\\n+     -L%:if-exists-else( \\\n+         %:getenv(WIND_BASE /target/lib/usr/lib/ppc/PPC32/common) \\\n+         %:getenv(WIND_BASE /target/usr/lib/ppc/PPC32/common)) \\\n+   }}"}]}