{"sha": "1732c156412b8af08b0b24a615c99176a8ec3237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczMmMxNTY0MTJiOGFmMDhiMGIyNGE2MTVjOTkxNzZhOGVjMzIzNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-07T16:22:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-07T16:22:41Z"}, "message": "[multiple changes]\n\n2009-04-07  Bob Duff  <duff@adacore.com>\n\n\t* s-secsta.ads, g-pehage.ads, s-fileio.ads: Minor comment fixes\n\n2009-04-07  Bob Duff  <duff@adacore.com>\n\n\t* gnat_rm.texi, s-fileio.adb (System.File_IO.Open): New feature: A\n\tForm parameter of Text_Translation=No allows binary mode for Text_IO\n\tfiles.\n\n\t* gnat_rm.texi: Document Form parameter Text_Translation=xxx.\n\n2009-04-07  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch5.adb (Expand_Assign_Array): Add implicit conversion when\n\tprocessing the bounds for bit packed arrays or VM target machines.\n\nFrom-SVN: r145691", "tree": {"sha": "e9b2f6cbd742a2692a34820f716babe65fa10464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b2f6cbd742a2692a34820f716babe65fa10464"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1732c156412b8af08b0b24a615c99176a8ec3237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1732c156412b8af08b0b24a615c99176a8ec3237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1732c156412b8af08b0b24a615c99176a8ec3237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1732c156412b8af08b0b24a615c99176a8ec3237/comments", "author": null, "committer": null, "parents": [{"sha": "fcb82ab00fc48f48f59067ba7a94e9e331a74462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb82ab00fc48f48f59067ba7a94e9e331a74462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb82ab00fc48f48f59067ba7a94e9e331a74462"}], "stats": {"total": 112, "additions": 86, "deletions": 26}, "files": [{"sha": "e5fbcbaf494107025d381e7b456a9cd6034e38fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -1,3 +1,20 @@\n+2009-04-07  Bob Duff  <duff@adacore.com>\n+\n+\t* s-secsta.ads, g-pehage.ads, s-fileio.ads: Minor comment fixes\n+\n+2009-04-07  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_rm.texi, s-fileio.adb (System.File_IO.Open): New feature: A\n+\tForm parameter of Text_Translation=No allows binary mode for Text_IO\n+\tfiles.\n+\n+\t* gnat_rm.texi: Document Form parameter Text_Translation=xxx.\n+\n+2009-04-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array): Add implicit conversion when\n+\tprocessing the bounds for bit packed arrays or VM target machines.\n+\n 2009-04-07  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-sothco.ads (Int_Access): Remove extraneous access type (use"}, {"sha": "16cb44fad2def113c1662e375c86c52de76a8a36", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -851,12 +851,23 @@ package body Exp_Ch5 is\n             --  conversions ???\n \n             else\n-               --  Copy the bounds and reset the Analyzed flag, because the\n-               --  bounds of the index type itself may be universal, and must\n-               --  must be reaanalyzed to acquire the proper type for Gigi.\n+               --  Copy the bounds\n \n                Cleft_Lo  := New_Copy_Tree (Left_Lo);\n                Cright_Lo := New_Copy_Tree (Right_Lo);\n+\n+               --  If the types do not match we add an implicit conversion\n+               --  here to ensure proper match\n+\n+               if Etype (Left_Lo) /= Etype (Right_Lo) then\n+                  Cright_Lo :=\n+                    Unchecked_Convert_To (Etype (Left_Lo), Cright_Lo);\n+               end if;\n+\n+               --  Reset the Analyzed flag, because the bounds of the index\n+               --  type itself may be universal, and must must be reaanalyzed\n+               --  to acquire the proper type for the back end.\n+\n                Set_Analyzed (Cleft_Lo, False);\n                Set_Analyzed (Cright_Lo, False);\n "}, {"sha": "e4d0e902df9dcb1c70778bc3c20b1c4c695cbf73", "filename": "gcc/ada/g-pehage.ads", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fg-pehage.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fg-pehage.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.ads?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -40,17 +40,17 @@\n --    Processing Letters, 43(1992) pp.257-264, Oct.1992\n \n --  Let W be a set of m words. A hash function h is a function that maps the\n---  set of words W into some given interval of integers [0, k-1], where k is an\n---  integer, usually k >= m. h (w) where is a word computes an address or an\n---  integer from I for the storage or the retrieval of that item. The storage\n---  area used to store items is known as a hash table. Words for which the same\n---  address is computed are called synonyms. Due to the existence of synonyms a\n---  situation called collision may arise in which two items w1 and w2 have the\n---  same address. Several schemes for resolving known. A perfect hash function\n---  is an injection from the word set W to the integer interval I with k >= m.\n---  If k = m, then h is a minimal perfect hash function. A hash function is\n---  order preserving if it puts entries into the hash table in prespecified\n---  order.\n+--  set of words W into some given interval I of integers [0, k-1], where k is\n+--  an integer, usually k >= m. h (w) where w is a word in W computes an\n+--  address or an integer from I for the storage or the retrieval of that\n+--  item. The storage area used to store items is known as a hash table. Words\n+--  for which the same address is computed are called synonyms. Due to the\n+--  existence of synonyms a situation called collision may arise in which two\n+--  items w1 and w2 have the same address. Several schemes for resolving\n+--  collisions are known. A perfect hash function is an injection from the word\n+--  set W to the integer interval I with k >= m.  If k = m, then h is a minimal\n+--  perfect hash function. A hash function is order preserving if it puts\n+--  entries into the hash table in a prespecified order.\n \n --  A minimal perfect hash function is defined by two properties:\n \n@@ -62,8 +62,8 @@\n \n --  The functions generated by this package require the words to be known in\n --  advance (they are \"static\" hash functions). The hash functions are also\n---  order preserving. If w2 is inserted after w1 in the generator, then (w1)\n---  < f (w2). These hashing functions are convenient for use with realtime\n+--  order preserving. If w2 is inserted after w1 in the generator, then h (w1)\n+--  < h (w2). These hashing functions are convenient for use with realtime\n --  applications.\n \n package GNAT.Perfect_Hash_Generators is"}, {"sha": "4d50a50cd41ddbf8a1400233255ef4c5bdc75e31", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -278,6 +278,7 @@ The Implementation of Standard I/O\n * Wide_Text_IO::\n * Wide_Wide_Text_IO::\n * Stream_IO::\n+* Text Translation::\n * Shared Files::\n * Filenames encoding::\n * Open Modes::\n@@ -12161,6 +12162,7 @@ these additional facilities are also described in this chapter.\n * Wide_Text_IO::\n * Wide_Wide_Text_IO::\n * Stream_IO::\n+* Text Translation::\n * Shared Files::\n * Filenames encoding::\n * Open Modes::\n@@ -12237,11 +12239,13 @@ The format of a FORM string in GNAT is:\n @noindent\n where letters may be in upper or lower case, and there are no spaces\n between values.  The order of the entries is not important.  Currently\n-there are two keywords defined.\n+the following keywords defined.\n \n @smallexample\n+TEXT_TRANSLATION=[YES|NO]\n SHARED=[YES|NO]\n WCEM=[n|h|u|s|e|8|b]\n+ENCODING=[UTF8|8BITS]\n @end smallexample\n \n @noindent\n@@ -12941,6 +12945,20 @@ The stream attributes applied to a stream file transfer data in the\n manner described for stream attributes.\n @end itemize\n \n+@node Text Translation\n+@section Text Translation\n+\n+@noindent\n+@samp{Text_Translation=@var{xxx}} may be used as the Form parameter\n+passed to Text_IO.Create and Text_IO.Open:\n+@samp{Text_Translation=@var{Yes}} is the default, which means to\n+translate LF to/from CR/LF on Windows systems.\n+@samp{Text_Translation=@var{No}} disables this translation; i.e. it\n+uses binary mode. For output files, @samp{Text_Translation=@var{No}}\n+may be used to create Unix-style files on\n+Windows. @samp{Text_Translation=@var{xxx}} has no effect on Unix\n+systems.\n+\n @node Shared Files\n @section Shared Files\n "}, {"sha": "2edf4213e5a77a97e2ef9794473a91db5951663a", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -739,6 +739,8 @@ package body System.File_IO is\n       Formstr : aliased String (1 .. Form'Length + 1);\n       --  Form string with ASCII.NUL appended, folded to lower case\n \n+      Is_Text_File : Boolean;\n+\n       Tempfile : constant Boolean := (Name'Length = 0);\n       --  Indicates temporary file case\n \n@@ -800,7 +802,7 @@ package body System.File_IO is\n          end if;\n       end;\n \n-      --  Acquire setting of shared parameter\n+      --  Acquire setting of encoding parameter\n \n       declare\n          V1, V2 : Natural;\n@@ -822,6 +824,18 @@ package body System.File_IO is\n          end if;\n       end;\n \n+      --  Acquire setting of text_translation parameter. Only needed if this is\n+      --  a [Wide_[Wide_]]Text_IO file, in which case we default to True, but\n+      --  if the Form says Text_Translation=No, we use binary mode, so new-line\n+      --  will be just LF, even on Windows.\n+\n+      Is_Text_File := Text;\n+\n+      if Is_Text_File then\n+         Is_Text_File :=\n+           Form_Boolean (Formstr, \"text_translation\", Default => True);\n+      end if;\n+\n       --  If we were given a stream (call from xxx.C_Streams.Open), then set\n       --  the full name to the given one, and skip to end of processing.\n \n@@ -962,7 +976,7 @@ package body System.File_IO is\n          --  Open specified file if we did not find an existing stream\n \n          if Stream = NULL_Stream then\n-            Fopen_Mode (Mode, Text, Creat, Amethod, Fopstr);\n+            Fopen_Mode (Mode, Is_Text_File, Creat, Amethod, Fopstr);\n \n             --  A special case, if we are opening (OPEN case) a file and the\n             --  mode returned by Fopen_Mode is not \"r\" or \"r+\", then we first\n@@ -1026,7 +1040,7 @@ package body System.File_IO is\n \n       File_Ptr.Is_Regular_File   := (is_regular_file (fileno (Stream)) /= 0);\n       File_Ptr.Is_System_File    := False;\n-      File_Ptr.Is_Text_File      := Text;\n+      File_Ptr.Is_Text_File      := Is_Text_File;\n       File_Ptr.Shared_Status     := Shared;\n       File_Ptr.Access_Method     := Amethod;\n       File_Ptr.Stream            := Stream;"}, {"sha": "9522c6121bc73fa3f17a63f10e42ac2851355d8f", "filename": "gcc/ada/s-fileio.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fs-fileio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fs-fileio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.ads?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -72,24 +72,24 @@ package System.File_IO is\n    --    Mode is the required mode\n    --\n    --    Name is the file name, with a null string indicating that a temporary\n-   --    file is to be created (only permitted in create mode, not open mode)\n+   --    file is to be created (only permitted in create mode, not open mode).\n    --\n    --    Creat is True for a create call, and false for an open call\n    --\n    --    Text is set True to open the file in text mode (w+t or r+t) instead\n    --    of the usual binary mode open (w+b or r+b).\n    --\n    --    Form is the form string given in the open or create call, this is\n-   --    stored in the AFCB, but otherwise is not used by this or any other\n-   --    routine in this unit (except Form which retrieves the original value)\n+   --    stored in the AFCB.\n    --\n-   --    Amethod indicates the access method\n+   --    Amethod indicates the access method:\n    --\n    --      D = Direct_IO\n    --      Q = Sequential_IO\n    --      S = Stream_IO\n    --      T = Text_IO\n    --      W = Wide_Text_IO\n+   --      ??? Wide_Wide_Text_IO ???\n    --\n    --    C_Stream is left at its default value for the normal case of an\n    --    Open or Create call as defined in the RM. The only time this is"}, {"sha": "22fbd882a1190c667169a5fd0bf4fe82d7580df9", "filename": "gcc/ada/s-secsta.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fs-secsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1732c156412b8af08b0b24a615c99176a8ec3237/gcc%2Fada%2Fs-secsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.ads?ref=1732c156412b8af08b0b24a615c99176a8ec3237", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,7 +60,7 @@ package System.Secondary_Stack is\n    --\n    --  Otherwise (Sec_Stack_Ratio between 0 and 100), Stk is an IN parameter\n    --  that is already pointing to a Stack_Id. The secondary stack in this case\n-   --  is fixed, and any attempt to allocated more than the initial size will\n+   --  is fixed, and any attempt to allocate more than the initial size will\n    --  result in a Storage_Error being raised.\n    --\n    --  Note: the reason that Stk is passed is that SS_Init is called before"}]}