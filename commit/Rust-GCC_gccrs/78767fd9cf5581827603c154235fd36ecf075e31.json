{"sha": "78767fd9cf5581827603c154235fd36ecf075e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3NjdmZDljZjU1ODE4Mjc2MDNjMTU0MjM1ZmQzNmVjZjA3NWUzMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-07-19T18:33:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-07-19T18:33:25Z"}, "message": "configure.ac: Add --enable-build-poststage1-with-cxx.\n\n./:\t* configure.ac: Add --enable-build-poststage1-with-cxx.  If set,\n\tmake C++ a boot_language.  Set and substitute\n\tPOSTSTAGE1_CONFIGURE_FLAGS.\n\t* Makefile.tpl (POSTSTAGE1_CONFIGURE_FLAGS): New variable.\n\t(STAGE[+id+]_CONFIGURE_FLAGS): Add $(POSTSTAGE1_CONFIGURE_FLAGS).\n\t* configure, Makefile.in: Rebuild.\ngcc/:\n\t* doc/install.texi (Configuration): Document\n\t--enable-build-poststage1-with-cxx.\n\nFrom-SVN: r176480", "tree": {"sha": "12679178a3a755dd714cb1f3c1812ee84f0591c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12679178a3a755dd714cb1f3c1812ee84f0591c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78767fd9cf5581827603c154235fd36ecf075e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78767fd9cf5581827603c154235fd36ecf075e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78767fd9cf5581827603c154235fd36ecf075e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78767fd9cf5581827603c154235fd36ecf075e31/comments", "author": null, "committer": null, "parents": [{"sha": "0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be"}], "stats": {"total": 134, "additions": 113, "deletions": 21}, "files": [{"sha": "b8ff5f286ae3129c49c23935b18cec4e0744f0d0", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -1,3 +1,12 @@\n+2011-07-19  Ian Lance Taylor  <iant@google.com>\n+\n+\t* configure.ac: Add --enable-build-poststage1-with-cxx.  If set,\n+\tmake C++ a boot_language.  Set and substitute\n+\tPOSTSTAGE1_CONFIGURE_FLAGS.\n+\t* Makefile.tpl (POSTSTAGE1_CONFIGURE_FLAGS): New variable.\n+\t(STAGE[+id+]_CONFIGURE_FLAGS): Add $(POSTSTAGE1_CONFIGURE_FLAGS).\n+\t* configure, Makefile.in: Rebuild.\n+\n 2011-07-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* MAINTAINERS (Register Allocation): Move myself from reviewers to"}, {"sha": "6df70593a26916959403f32c35010e0f9bb64272", "filename": "Makefile.in", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -415,6 +415,7 @@ TFLAGS =\n STAGE_CFLAGS = $(BOOT_CFLAGS)\n STAGE_TFLAGS = $(TFLAGS)\n STAGE_CONFIGURE_FLAGS=@stage2_werror_flag@\n+POSTSTAGE1_CONFIGURE_FLAGS = @POSTSTAGE1_CONFIGURE_FLAGS@\n \n \n # Defaults for stage 1; some are overridden below.\n@@ -425,7 +426,10 @@ STAGE1_CXXFLAGS = $(CXXFLAGS)\n STAGE1_CXXFLAGS = $(STAGE1_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGE1_TFLAGS = $(STAGE_TFLAGS)\n-STAGE1_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGE1_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n \n # Defaults for stage 2; some are overridden below.\n STAGE2_CFLAGS = $(STAGE_CFLAGS)\n@@ -435,7 +439,10 @@ STAGE2_CXXFLAGS = $(CXXFLAGS)\n STAGE2_CXXFLAGS = $(STAGE2_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGE2_TFLAGS = $(STAGE_TFLAGS)\n-STAGE2_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGE2_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n \n # Defaults for stage 3; some are overridden below.\n STAGE3_CFLAGS = $(STAGE_CFLAGS)\n@@ -445,7 +452,10 @@ STAGE3_CXXFLAGS = $(CXXFLAGS)\n STAGE3_CXXFLAGS = $(STAGE3_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGE3_TFLAGS = $(STAGE_TFLAGS)\n-STAGE3_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGE3_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n \n # Defaults for stage 4; some are overridden below.\n STAGE4_CFLAGS = $(STAGE_CFLAGS)\n@@ -455,7 +465,10 @@ STAGE4_CXXFLAGS = $(CXXFLAGS)\n STAGE4_CXXFLAGS = $(STAGE4_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGE4_TFLAGS = $(STAGE_TFLAGS)\n-STAGE4_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGE4_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n \n # Defaults for stage profile; some are overridden below.\n STAGEprofile_CFLAGS = $(STAGE_CFLAGS)\n@@ -465,7 +478,10 @@ STAGEprofile_CXXFLAGS = $(CXXFLAGS)\n STAGEprofile_CXXFLAGS = $(STAGEprofile_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGEprofile_TFLAGS = $(STAGE_TFLAGS)\n-STAGEprofile_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGEprofile_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n \n # Defaults for stage feedback; some are overridden below.\n STAGEfeedback_CFLAGS = $(STAGE_CFLAGS)\n@@ -475,7 +491,10 @@ STAGEfeedback_CXXFLAGS = $(CXXFLAGS)\n STAGEfeedback_CXXFLAGS = $(STAGEfeedback_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGEfeedback_TFLAGS = $(STAGE_TFLAGS)\n-STAGEfeedback_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGEfeedback_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n \n \n # Only build the C compiler for stage1, because that is the only one that\n@@ -493,6 +512,9 @@ STAGE1_LANGUAGES = @stage1_languages@\n #   the last argument when conflicting --enable arguments are passed.\n # * Likewise, we force-disable coverage flags, since the installed\n #   compiler probably has never heard of them.\n+# * Don't remove this, because above we added\n+#   POSTSTAGE1_CONFIGURE_FLAGS to STAGE_CONFIGURE_FLAGS, which\n+#   we don't want for STAGE1_CONFIGURE_FLAGS.\n STAGE1_CONFIGURE_FLAGS = --disable-intermodule $(STAGE1_CHECKING) \\\n \t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"\n "}, {"sha": "08d8b2f8b4745119cccfff28d6c1c8c64716f2e6", "filename": "Makefile.tpl", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -418,6 +418,7 @@ TFLAGS =\n STAGE_CFLAGS = $(BOOT_CFLAGS)\n STAGE_TFLAGS = $(TFLAGS)\n STAGE_CONFIGURE_FLAGS=@stage2_werror_flag@\n+POSTSTAGE1_CONFIGURE_FLAGS = @POSTSTAGE1_CONFIGURE_FLAGS@\n \n [+ FOR bootstrap-stage +]\n # Defaults for stage [+id+]; some are overridden below.\n@@ -428,7 +429,10 @@ STAGE[+id+]_CXXFLAGS = $(CXXFLAGS)\n STAGE[+id+]_CXXFLAGS = $(STAGE[+id+]_CFLAGS)\n @endif target-libstdc++-v3-bootstrap\n STAGE[+id+]_TFLAGS = $(STAGE_TFLAGS)\n-STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+# STAGE1_CONFIGURE_FLAGS overridden below, so we can use\n+# POSTSTAGE1_CONFIGURE_FLAGS here.\n+STAGE[+id+]_CONFIGURE_FLAGS = \\\n+\t$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)\n [+ ENDFOR bootstrap-stage +]\n \n # Only build the C compiler for stage1, because that is the only one that\n@@ -446,6 +450,9 @@ STAGE1_LANGUAGES = @stage1_languages@\n #   the last argument when conflicting --enable arguments are passed.\n # * Likewise, we force-disable coverage flags, since the installed\n #   compiler probably has never heard of them.\n+# * Don't remove this, because above we added\n+#   POSTSTAGE1_CONFIGURE_FLAGS to STAGE[+id+]_CONFIGURE_FLAGS, which\n+#   we don't want for STAGE1_CONFIGURE_FLAGS.\n STAGE1_CONFIGURE_FLAGS = --disable-intermodule $(STAGE1_CHECKING) \\\n \t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"\n "}, {"sha": "40314d6cbd8d87c97bfe0ef06e7ee7b0f1cde927", "filename": "configure", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -556,6 +556,7 @@ enable_option_checking=no\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n compare_exclusions\n+POSTSTAGE1_CONFIGURE_FLAGS\n stage2_werror_flag\n stage1_checking\n stage1_cflags\n@@ -749,6 +750,7 @@ enable_libada\n enable_libssp\n enable_static_libjava\n enable_build_with_cxx\n+enable_build_poststage1_with_cxx\n with_mpc\n with_mpc_include\n with_mpc_lib\n@@ -1465,6 +1467,8 @@ Optional Features:\n   --enable-static-libjava[=ARG]\n                           build static libjava [default=no]\n   --enable-build-with-cxx build with C++ compiler instead of C compiler\n+  --enable-build-poststage1-with-cxx\n+                          build stages 2 and 3 with C++, not C\n   --disable-ppl-version-check\n                           disable check for PPL version\n   --enable-cloog-backend[=BACKEND]\n@@ -4988,6 +4992,15 @@ else\n fi\n \n \n+# Build stage1 with C and build stages 2 and 3 with C++.\n+# Check whether --enable-build-poststage1-with-cxx was given.\n+if test \"${enable_build_poststage1_with_cxx+set}\" = set; then :\n+  enableval=$enable_build_poststage1_with_cxx; ENABLE_BUILD_POSTSTAGE1_WITH_CXX=$enableval\n+else\n+  ENABLE_BUILD_POSTSTAGE1_WITH_CXX=yes\n+fi\n+\n+\n # Used for setting $lt_cv_objdir\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for objdir\" >&5\n $as_echo_n \"checking for objdir... \" >&6; }\n@@ -6181,9 +6194,11 @@ if test -d ${srcdir}/gcc; then\n           exit 1\n         fi\n \n-\tif test \"$language\" = \"c++\" \\\n-\t   && test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n-\t  boot_language=yes\n+\tif test \"$language\" = \"c++\"; then\n+\t  if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\" \\\n+\t     || test \"$ENABLE_BUILD_POSTSTAGE1_WITH_CXX\" = \"yes\"; then\n+\t    boot_language=yes\n+\t  fi\n \tfi\n \n         case ,${enable_languages}, in\n@@ -6937,10 +6952,10 @@ $as_echo \"$as_me: WARNING: trying to bootstrap a cross compiler\" >&2;}\n     ;;\n esac\n \n-case \",$enable_languages,:$ENABLE_BUILD_WITH_CXX:$enable_bootstrap\" in\n-  *,c++,*:yes:yes) ;;\n-  *:yes:yes)\n-    as_fn_error \"bootstrapping with --enable-build-with-cxx requires c++ in --enable-languages\" \"$LINENO\" 5\n+case \",$enable_languages,:,$ENABLE_BUILD_WITH_CXX,$ENABLE_BUILD_POSTSTAGE1_WITH_CXX,:$enable_bootstrap\" in\n+  *,c++,*:*:*) ;;\n+  *:*,yes,*:yes)\n+    as_fn_error \"bootstrapping with --enable-build-with-cxx or --enable-build-postage1-with-cxx requires c++ in --enable-languages\" \"$LINENO\" 5\n     ;;\n esac\n \n@@ -13990,6 +14005,15 @@ case ${enable_werror} in\n esac\n \n \n+# If using ENABLE_BUILD_POSTSTAGE1_WITH_CXX, pass\n+# --enable-build-with-cxx after stage1.\n+if test \"$ENABLE_BUILD_POSTSTAGE1_WITH_CXX\" = \"yes\"; then\n+  POSTSTAGE1_CONFIGURE_FLAGS=--enable-build-with-cxx\n+else\n+  POSTSTAGE1_CONFIGURE_FLAGS=\n+fi\n+\n+\n # Specify what files to not compare during bootstrap.\n \n compare_exclusions=\"gcc/cc*-checksum\\$(objext) | gcc/ada/*tools/*\""}, {"sha": "c53d381b727c78c9b9a0ef192a52a11bdc084ce8", "filename": "configure.ac", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -1140,6 +1140,13 @@ AC_ARG_ENABLE(build-with-cxx,\n ENABLE_BUILD_WITH_CXX=$enableval,\n ENABLE_BUILD_WITH_CXX=no)\n \n+# Build stage1 with C and build stages 2 and 3 with C++.\n+AC_ARG_ENABLE(build-poststage1-with-cxx,\n+[AS_HELP_STRING([--enable-build-poststage1-with-cxx],\n+\t\t[build stages 2 and 3 with C++, not C])],\n+ENABLE_BUILD_POSTSTAGE1_WITH_CXX=$enableval,\n+ENABLE_BUILD_POSTSTAGE1_WITH_CXX=yes)\n+\n # Used for setting $lt_cv_objdir\n _LT_CHECK_OBJDIR\n \n@@ -1710,9 +1717,11 @@ if test -d ${srcdir}/gcc; then\n           exit 1\n         fi\n \n-\tif test \"$language\" = \"c++\" \\\n-\t   && test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n-\t  boot_language=yes\n+\tif test \"$language\" = \"c++\"; then\n+\t  if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\" \\\n+\t     || test \"$ENABLE_BUILD_POSTSTAGE1_WITH_CXX\" = \"yes\"; then\n+\t    boot_language=yes\n+\t  fi\n \tfi\n \n         case ,${enable_languages}, in\n@@ -2411,10 +2420,10 @@ case \"$have_compiler:$host:$target:$enable_bootstrap\" in\n     ;;\n esac\n \n-case \",$enable_languages,:$ENABLE_BUILD_WITH_CXX:$enable_bootstrap\" in\n-  *,c++,*:yes:yes) ;;\n-  *:yes:yes)\n-    AC_MSG_ERROR([bootstrapping with --enable-build-with-cxx requires c++ in --enable-languages])\n+case \",$enable_languages,:,$ENABLE_BUILD_WITH_CXX,$ENABLE_BUILD_POSTSTAGE1_WITH_CXX,:$enable_bootstrap\" in\n+  *,c++,*:*:*) ;;\n+  *:*,yes,*:yes)\n+    AC_MSG_ERROR([bootstrapping with --enable-build-with-cxx or --enable-build-postage1-with-cxx requires c++ in --enable-languages])\n     ;;\n esac\n \n@@ -3202,6 +3211,15 @@ case ${enable_werror} in\n esac\n AC_SUBST(stage2_werror_flag)\n \n+# If using ENABLE_BUILD_POSTSTAGE1_WITH_CXX, pass\n+# --enable-build-with-cxx after stage1.\n+if test \"$ENABLE_BUILD_POSTSTAGE1_WITH_CXX\" = \"yes\"; then\n+  POSTSTAGE1_CONFIGURE_FLAGS=--enable-build-with-cxx\n+else\n+  POSTSTAGE1_CONFIGURE_FLAGS=\n+fi\n+AC_SUBST(POSTSTAGE1_CONFIGURE_FLAGS)\n+\n # Specify what files to not compare during bootstrap.\n \n compare_exclusions=\"gcc/cc*-checksum\\$(objext) | gcc/ada/*tools/*\""}, {"sha": "bac2275466d4f3aa6f6f40d7419272a6ede2276b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -1,3 +1,8 @@\n+2011-07-19  Ian Lance Taylor  <iant@google.com>\n+\n+\t* doc/install.texi (Configuration): Document\n+\t--enable-build-poststage1-with-cxx.\n+\n 2011-07-19  Robert Millan  <rmh@gnu.org>\n \n \t* config/mips/gnu-user.h: Copy from linux.h.  Update comments."}, {"sha": "9b1b037c02a5107fb51656a0d6773a39c2e99ce5", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78767fd9cf5581827603c154235fd36ecf075e31/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78767fd9cf5581827603c154235fd36ecf075e31/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=78767fd9cf5581827603c154235fd36ecf075e31", "patch": "@@ -1284,6 +1284,13 @@ will try to guess whether the @code{.init_array} and\n Build GCC using a C++ compiler rather than a C compiler.  This is an\n experimental option which may become the default in a later release.\n \n+@item --enable-build-poststage1-with-cxx\n+When bootstrapping, build stages 2 and 3 of GCC using a C++ compiler\n+rather than a C compiler.  Stage 1 is still built with a C compiler.\n+This is an experimental option which may become the default in a later\n+release.  This is enabled by default and may be disabled using\n+@option{--disable-build-poststage1-with-cxx}.\n+\n @item --enable-maintainer-mode\n The build rules that regenerate the Autoconf and Automake output files as\n well as the GCC master message catalog @file{gcc.pot} are normally"}]}