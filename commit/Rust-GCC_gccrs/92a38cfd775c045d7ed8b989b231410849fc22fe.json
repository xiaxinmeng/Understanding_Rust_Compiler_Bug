{"sha": "92a38cfd775c045d7ed8b989b231410849fc22fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhMzhjZmQ3NzVjMDQ1ZDdlZDhiOTg5YjIzMTQxMDg0OWZjMjJmZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-04T13:22:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-04T13:22:52Z"}, "message": "PR c++/85765 - SFINAE and non-type default template arg.\n\n\t* pt.c (type_unification_real): Do full semantic processing if\n\tsubstituting a partial args list replaces all template parms.\n\nFrom-SVN: r261146", "tree": {"sha": "0931316aa775c55c29c9f1c229082afea2bd3b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0931316aa775c55c29c9f1c229082afea2bd3b05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a38cfd775c045d7ed8b989b231410849fc22fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a38cfd775c045d7ed8b989b231410849fc22fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a38cfd775c045d7ed8b989b231410849fc22fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a38cfd775c045d7ed8b989b231410849fc22fe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ccaa21f0cdab09acd959883dd4d5a68692807dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccaa21f0cdab09acd959883dd4d5a68692807dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccaa21f0cdab09acd959883dd4d5a68692807dd"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "773e9334a5ebf236facfba9978bd03d3b114d4a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a38cfd775c045d7ed8b989b231410849fc22fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a38cfd775c045d7ed8b989b231410849fc22fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92a38cfd775c045d7ed8b989b231410849fc22fe", "patch": "@@ -1,3 +1,9 @@\n+2018-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85765 - SFINAE and non-type default template arg.\n+\t* pt.c (type_unification_real): Do full semantic processing if\n+\tsubstituting a partial args list replaces all template parms.\n+\n 2018-06-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85739 - ICE with pointer to member template parm."}, {"sha": "d3915ddcddf2bf5a006159ff8d5ce08594182662", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a38cfd775c045d7ed8b989b231410849fc22fe/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a38cfd775c045d7ed8b989b231410849fc22fe/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=92a38cfd775c045d7ed8b989b231410849fc22fe", "patch": "@@ -20387,40 +20387,56 @@ type_unification_real (tree tparms,\n \t  location_t save_loc = input_location;\n \t  if (DECL_P (parm))\n \t    input_location = DECL_SOURCE_LOCATION (parm);\n-\t  if (saw_undeduced == 1)\n-\t    ++processing_template_decl;\n \n \t  if (saw_undeduced == 1\n \t      && TREE_CODE (parm) == PARM_DECL\n \t      && uses_template_parms (TREE_TYPE (parm)))\n \t    {\n \t      /* The type of this non-type parameter depends on undeduced\n \t\t parameters.  Don't try to use its default argument yet,\n+\t\t since we might deduce an argument for it on the next pass,\n \t\t but do check whether the arguments we already have cause\n \t\t substitution failure, so that that happens before we try\n \t\t later default arguments (78489).  */\n+\t      ++processing_template_decl;\n \t      tree type = tsubst (TREE_TYPE (parm), full_targs, complain,\n \t\t\t\t  NULL_TREE);\n+\t      --processing_template_decl;\n \t      if (type == error_mark_node)\n \t\targ = error_mark_node;\n \t      else\n \t\targ = NULL_TREE;\n \t    }\n \t  else\n \t    {\n-\t      arg = tsubst_template_arg (arg, full_targs, complain, NULL_TREE);\n+\t      tree substed = NULL_TREE;\n+\t      if (saw_undeduced == 1 && processing_template_decl == 0)\n+\t\t{\n+\t\t  /* First instatiate in template context, in case we still\n+\t\t     depend on undeduced template parameters.  */\n+\t\t  ++processing_template_decl;\n+\t\t  substed = tsubst_template_arg (arg, full_targs, complain,\n+\t\t\t\t\t\t NULL_TREE);\n+\t\t  --processing_template_decl;\n+\t\t  if (substed != error_mark_node\n+\t\t      && !uses_template_parms (substed))\n+\t\t    /* We replaced all the tparms, substitute again out of\n+\t\t       template context.  */\n+\t\t    substed = NULL_TREE;\n+\t\t}\n+\t      if (!substed)\n+\t\tsubsted = tsubst_template_arg (arg, full_targs, complain,\n+\t\t\t\t\t       NULL_TREE);\n \n-\t      if (!uses_template_parms (arg))\n-\t\targ = convert_template_argument (parm, arg, full_targs,\n+\t      if (!uses_template_parms (substed))\n+\t\targ = convert_template_argument (parm, substed, full_targs,\n \t\t\t\t\t\t complain, i, NULL_TREE);\n \t      else if (saw_undeduced == 1)\n \t\targ = NULL_TREE;\n \t      else\n \t\targ = error_mark_node;\n \t    }\n \n-\t  if (saw_undeduced == 1)\n-\t    --processing_template_decl;\n \t  input_location = save_loc;\n \t  *checks = get_deferred_access_checks ();\n \t  pop_deferring_access_checks ();"}, {"sha": "f0f9dfb73dce02c34bb08b4b86eeb68384b27476", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a38cfd775c045d7ed8b989b231410849fc22fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a38cfd775c045d7ed8b989b231410849fc22fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg10.C?ref=92a38cfd775c045d7ed8b989b231410849fc22fe", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/85765\n+// { dg-do compile { target c++11 } }\n+\n+struct il { il(); il(const il&); };\n+\n+int* begin(il);\n+\n+template<class T> T&& declval();\n+\n+template<class T, class U = decltype(begin(declval<T&>())), decltype(*U(),0) = 0>\n+U g(T& t, long) { return begin(t); } // #1\n+\n+template<class T>\n+int g(T& t, ...); // #2\n+\n+volatile il a;\n+\n+auto n = g(a, 0); // calls #1 and ends with a hard error, should call #2"}]}