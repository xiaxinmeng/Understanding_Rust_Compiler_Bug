{"sha": "90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmOWM5NGUwMmQ4YjhjZTcxZDZmNTc5M2IyNWEzYjM4NDlmYzEzMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-10-04T00:02:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-04T00:02:29Z"}, "message": "re PR libstdc++/53248 (std::array<T,0> doesn't work when T is not default-constructible)\n\n2012-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/53248\n\t* include/std/array (__array_traits<>): Add.\n\t(array<>): Allow for zero-size arrays of non default-constructible\n\telements.\n\t* testsuite/23_containers/array/requirements/\n\tnon_default_constructible.cc: New.\n\t* testsuite/23_containers/array/requirements/zero_sized_arrays.cc:\n\tAdjust.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tLikewise.\n\nFrom-SVN: r192056", "tree": {"sha": "bd4ef8114921e12b4aeffda3a0699f1c5679f17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd4ef8114921e12b4aeffda3a0699f1c5679f17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/comments", "author": null, "committer": null, "parents": [{"sha": "be4ba8aef398e6177b62d3ced6c9a086082d94f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4ba8aef398e6177b62d3ced6c9a086082d94f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4ba8aef398e6177b62d3ced6c9a086082d94f2"}], "stats": {"total": 134, "additions": 103, "deletions": 31}, "files": [{"sha": "5f3564077503e216a4acd54af71f1f678887384b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "patch": "@@ -1,3 +1,18 @@\n+2012-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/53248\n+\t* include/std/array (__array_traits<>): Add.\n+\t(array<>): Allow for zero-size arrays of non default-constructible\n+\telements.\n+\t* testsuite/23_containers/array/requirements/\n+\tnon_default_constructible.cc: New.\n+\t* testsuite/23_containers/array/requirements/zero_sized_arrays.cc:\n+\tAdjust.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tLikewise.\n+\n 2012-10-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR other/53889"}, {"sha": "c7c0a5ae82457c96ed3321f57026160214541132", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "patch": "@@ -1,7 +1,6 @@\n // <array> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2007-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,6 +43,26 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  template<typename _Tp, std::size_t _Nm>\n+    struct __array_traits\n+    {\n+      typedef _Tp _Type[_Nm];\n+\n+      static constexpr _Tp&\n+      _S_ref(const _Type& __t, std::size_t __n) noexcept\n+      { return const_cast<_Tp&>(__t[__n]); }\n+    };\n+\n+ template<typename _Tp>\n+   struct __array_traits<_Tp, 0>\n+   {\n+     struct _Type { };\n+\n+     static constexpr _Tp&\n+     _S_ref(const _Type&, std::size_t) noexcept\n+     { return *static_cast<_Tp*>(nullptr); }\n+   };\n+\n   /**\n    *  @brief A standard container for storing a fixed size sequence of elements.\n    *\n@@ -74,7 +93,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n \n       // Support for zero-sized arrays mandatory.\n-      value_type _M_instance[_Nm ? _Nm : 1];\n+      typedef std::__array_traits<_Tp, _Nm>           _AT_Type;\n+      typename _AT_Type::_Type                        _M_elems;\n \n       // No explicit construct/copy/destroy for aggregate type.\n \n@@ -123,11 +143,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       const_iterator\n       cbegin() const noexcept\n-      { return const_iterator(std::__addressof(_M_instance[0])); }\n+      { return const_iterator(data()); }\n \n       const_iterator\n       cend() const noexcept\n-      { return const_iterator(std::__addressof(_M_instance[_Nm])); }\n+      { return const_iterator(data() + _Nm); }\n \n       const_reverse_iterator \n       crbegin() const noexcept\n@@ -150,27 +170,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Element access.\n       reference\n       operator[](size_type __n)\n-      { return _M_instance[__n]; }\n+      { return _AT_Type::_S_ref(_M_elems, __n); }\n \n       constexpr const_reference\n       operator[](size_type __n) const noexcept\n-      { return _M_instance[__n]; }\n+      { return _AT_Type::_S_ref(_M_elems, __n); }\n \n       reference\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n \t  std::__throw_out_of_range(__N(\"array::at\"));\n-\treturn _M_instance[__n];\n+\treturn _AT_Type::_S_ref(_M_elems, __n);\n       }\n \n       constexpr const_reference\n       at(size_type __n) const\n       {\n \t// Result of conditional expression must be an lvalue so use\n \t// boolean ? lvalue : (throw-expr, lvalue)\n-\treturn __n < _Nm ? _M_instance[__n]\n-\t  : (std::__throw_out_of_range(__N(\"array::at\")), _M_instance[0]);\n+\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n+\t  : (std::__throw_out_of_range(__N(\"array::at\")),\n+\t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n       reference \n@@ -191,11 +212,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       pointer\n       data() noexcept\n-      { return std::__addressof(_M_instance[0]); }\n+      { return std::__addressof(_AT_Type::_S_ref(_M_elems, 0)); }\n \n       const_pointer\n       data() const noexcept\n-      { return std::__addressof(_M_instance[0]); }\n+      { return std::__addressof(_AT_Type::_S_ref(_M_elems, 0)); }\n     };\n \n   // Array comparisons.\n@@ -265,7 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return __arr._M_instance[_Int];\n+      return std::__array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n@@ -281,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(const array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return __arr._M_instance[_Int];\n+      return std::__array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "28cc9959bb91ce0d6031c715de8332437d56059f", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/non_default_constructible.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fnon_default_constructible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fnon_default_constructible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fnon_default_constructible.cc?ref=90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <typeindex>\n+#include <typeinfo>\n+\n+template < typename ...Types >\n+union super_union;\n+\n+template < >\n+union super_union<>\n+{\n+  static  auto optioned_types() -> std::array<std::type_index, 0>\n+  { return std::array<std::type_index, 0>{ {} }; }\n+};\n+\n+template < typename Head, typename ...Tail >\n+union super_union<Head, Tail...>\n+{\n+  static\n+  auto optioned_types() -> std::array<std::type_index, 1 + sizeof...(Tail)>\n+  {\n+    using std::type_index;\n+\n+    return { {type_index(typeid(Head)), type_index(typeid(Tail))...} };\n+  }\n+\n+  Head                  data;\n+  super_union<Tail...>  rest;\n+};"}, {"sha": "86e237583bae8228efa715e4d6ab1d04a9c9e28d", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/zero_sized_arrays.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc?ref=90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n //\n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,18 +38,6 @@ test01()\n   // begin() == end()\n   VERIFY( a.begin() == a.end() );\n   VERIFY( b.begin() == b.end() );\n-\n-  // 4: ?\n-  // begin() == end() == unique value.\n-  {\n-    typedef std::array<long, len> array_type1;\n-    typedef std::array<char, len> array_type2;\n-    array_type1 one;\n-    array_type2 two;\n-    void* v1 = one.begin();\n-    void* v2 = two.begin();\n-    VERIFY( v1 != v2 );\n-  }\n }\n \n int main()"}, {"sha": "e74af1b4f43adac5d06d7fb88f4c496258db7469", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 275 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 267 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 288 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 296 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 304 }"}, {"sha": "b9ce910f61a4073dd7a7b0845232e0e9099b2620", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f9c94e02d8b8ce71d6f5793b25a3b3849fc133/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=90f9c94e02d8b8ce71d6f5793b25a3b3849fc133", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 259 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 280 }"}]}