{"sha": "d7b03373d619b3ce715c760d2b21dbe4869a1c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiMDMzNzNkNjE5YjNjZTcxNWM3NjBkMmIyMWRiZTQ4NjlhMWM4Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-05-31T12:35:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-05-31T12:35:42Z"}, "message": "[AArch64] Use aarch64_fusion_enabled_p to check for insn fusion capabilities\n\n\t* config/aarch64/aarch64.c (aarch_macro_fusion_pair_p): Use\n\taarch64_fusion_enabled_p to check for fusion capabilities.\n\nFrom-SVN: r236921", "tree": {"sha": "44e255dcc4dc943e0dd3a2ad9caade9210aac147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e255dcc4dc943e0dd3a2ad9caade9210aac147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b03373d619b3ce715c760d2b21dbe4869a1c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b03373d619b3ce715c760d2b21dbe4869a1c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b03373d619b3ce715c760d2b21dbe4869a1c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b03373d619b3ce715c760d2b21dbe4869a1c8f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d99f8a0705e47ca7fcee70f25cab0098ec64e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d99f8a0705e47ca7fcee70f25cab0098ec64e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d99f8a0705e47ca7fcee70f25cab0098ec64e48"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "a558a944e5b2732320c6227f74b6c872b3701ae4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b03373d619b3ce715c760d2b21dbe4869a1c8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b03373d619b3ce715c760d2b21dbe4869a1c8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7b03373d619b3ce715c760d2b21dbe4869a1c8f", "patch": "@@ -1,3 +1,8 @@\n+2016-05-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch_macro_fusion_pair_p): Use\n+\taarch64_fusion_enabled_p to check for fusion capabilities.\n+\n 2016-05-31  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71352"}, {"sha": "ad07fe196a814ace78d43f66e70280d20a4476b5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b03373d619b3ce715c760d2b21dbe4869a1c8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b03373d619b3ce715c760d2b21dbe4869a1c8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d7b03373d619b3ce715c760d2b21dbe4869a1c8f", "patch": "@@ -13021,8 +13021,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n   if (!aarch64_macro_fusion_p ())\n     return false;\n \n-  if (simple_sets_p\n-      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_MOV_MOVK))\n+  if (simple_sets_p && aarch64_fusion_enabled_p (AARCH64_FUSE_MOV_MOVK))\n     {\n       /* We are trying to match:\n          prev (mov)  == (set (reg r0) (const_int imm16))\n@@ -13046,8 +13045,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n-  if (simple_sets_p\n-      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_ADRP_ADD))\n+  if (simple_sets_p && aarch64_fusion_enabled_p (AARCH64_FUSE_ADRP_ADD))\n     {\n \n       /*  We're trying to match:\n@@ -13072,8 +13070,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n-  if (simple_sets_p\n-      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_MOVK_MOVK))\n+  if (simple_sets_p && aarch64_fusion_enabled_p (AARCH64_FUSE_MOVK_MOVK))\n     {\n \n       /* We're trying to match:\n@@ -13101,8 +13098,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         return true;\n \n     }\n-  if (simple_sets_p\n-      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_ADRP_LDR))\n+  if (simple_sets_p && aarch64_fusion_enabled_p (AARCH64_FUSE_ADRP_LDR))\n     {\n       /* We're trying to match:\n           prev (adrp) == (set (reg r0)\n@@ -13133,11 +13129,11 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n-  if ((aarch64_tune_params.fusible_ops & AARCH64_FUSE_AES_AESMC)\n+  if (aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\n        && aarch_crypto_can_dual_issue (prev, curr))\n     return true;\n \n-  if ((aarch64_tune_params.fusible_ops & AARCH64_FUSE_CMP_BRANCH)\n+  if (aarch64_fusion_enabled_p (AARCH64_FUSE_CMP_BRANCH)\n       && any_condjump_p (curr))\n     {\n       enum attr_type prev_type = get_attr_type (prev);"}]}