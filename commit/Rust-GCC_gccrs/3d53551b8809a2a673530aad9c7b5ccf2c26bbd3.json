{"sha": "3d53551b8809a2a673530aad9c7b5ccf2c26bbd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1MzU1MWI4ODA5YTJhNjczNTMwYWFkOWM3YjVjY2YyYzI2YmJkMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-01-07T01:34:19Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2020-01-07T01:34:19Z"}, "message": "Fix bad code of vector extract of PC-relative address with variable element #.\n\n2020-01-06  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):\n\tUse 'Q' for doing vector extract from memory.\n\t(vsx_extract_v4sf_var): Use 'Q' for doing vector extract from\n\tmemory.\n\t(vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Use 'Q' for\n\tdoing vector extract from memory.\n\t(vsx_extract_<mode>_<VS_scalar>mode_var): Use 'Q' for doing vector\n\textract from memory.\n\nFrom-SVN: r279938", "tree": {"sha": "1f93a921caba2d8947d273f1d74e44c061a3b16f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f93a921caba2d8947d273f1d74e44c061a3b16f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3/comments", "author": null, "committer": null, "parents": [{"sha": "dfef3500361057392f3c17e1f97883222347c0ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfef3500361057392f3c17e1f97883222347c0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfef3500361057392f3c17e1f97883222347c0ef"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "0f258ffd4e184ac5745d3fa5aca62e95ae708afa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d53551b8809a2a673530aad9c7b5ccf2c26bbd3", "patch": "@@ -1,5 +1,14 @@\n 2020-01-06  Michael Meissner  <meissner@linux.ibm.com>\n \n+\t* config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):\n+\tUse 'Q' for doing vector extract from memory.\n+\t(vsx_extract_v4sf_var): Use 'Q' for doing vector extract from\n+\tmemory.\n+\t(vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Use 'Q' for\n+\tdoing vector extract from memory.\n+\t(vsx_extract_<mode>_<VS_scalar>mode_var): Use 'Q' for doing vector\n+\textract from memory.\n+\n \t* config/rs6000/rs6000.c (rs6000_adjust_vec_address): Add support\n \tfor the offset being 34-bits when -mcpu=future is used.\n "}, {"sha": "189c7d842ace19a3544b72fffa3e5d90cc85298f", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d53551b8809a2a673530aad9c7b5ccf2c26bbd3/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=3d53551b8809a2a673530aad9c7b5ccf2c26bbd3", "patch": "@@ -3248,7 +3248,7 @@\n ;; Variable V2DI/V2DF extract\n (define_insn_and_split \"vsx_extract_<mode>_var\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=v,wa,r\")\n-\t(unspec:<VS_scalar> [(match_operand:VSX_D 1 \"input_operand\" \"v,m,m\")\n+\t(unspec:<VS_scalar> [(match_operand:VSX_D 1 \"input_operand\" \"v,Q,Q\")\n \t\t\t     (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t\t\t    UNSPEC_VSX_EXTRACT))\n    (clobber (match_scratch:DI 3 \"=r,&b,&b\"))\n@@ -3318,7 +3318,7 @@\n ;; Variable V4SF extract\n (define_insn_and_split \"vsx_extract_v4sf_var\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=wa,wa,?r\")\n-\t(unspec:SF [(match_operand:V4SF 1 \"input_operand\" \"v,m,m\")\n+\t(unspec:SF [(match_operand:V4SF 1 \"input_operand\" \"v,Q,Q\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t\t   UNSPEC_VSX_EXTRACT))\n    (clobber (match_scratch:DI 3 \"=r,&b,&b\"))\n@@ -3681,7 +3681,7 @@\n (define_insn_and_split \"vsx_extract_<mode>_var\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(unspec:<VS_scalar>\n-\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,m\")\n+\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,Q\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t UNSPEC_VSX_EXTRACT))\n    (clobber (match_scratch:DI 3 \"=r,r,&b\"))\n@@ -3701,7 +3701,7 @@\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(zero_extend:<VS_scalar>\n \t (unspec:<VSX_EXTRACT_I:VS_scalar>\n-\t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,m\")\n+\t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,Q\")\n \t   (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t  UNSPEC_VSX_EXTRACT)))\n    (clobber (match_scratch:DI 3 \"=r,r,&b\"))"}]}