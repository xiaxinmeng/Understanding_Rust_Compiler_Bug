{"sha": "625be2863598fcaa489d1372ee825aff85ea7cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1YmUyODYzNTk4ZmNhYTQ4OWQxMzcyZWU4MjVhZmY4NWVhN2NlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-30T21:34:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-30T21:34:37Z"}, "message": "Makefile.am (gfor_helper_src): Split selected_kind.f90.\n\n        * Makefile.am (gfor_helper_src): Split selected_kind.f90.\n        (gfor_built_src): Add selected_int_kind.inc selected_real_kind.inc.\n        (selected_int_kind.inc selected_real_kind.inc): New rules.\n        * Makefile.in: Regenerate.\n        * mk-sik-inc.sh, mk-srk-inc.sh: New files.\n        * intrinsics/selected_int_kind.f90: Split from selected_kind.f90,\n        include table of detected kinds.\n        * intrinsics/selected_real_kind.f90: Similarly.\n\nFrom-SVN: r86801", "tree": {"sha": "02cd41f693c2602a26a17ae6a8a57ac30f5141fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02cd41f693c2602a26a17ae6a8a57ac30f5141fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/625be2863598fcaa489d1372ee825aff85ea7cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625be2863598fcaa489d1372ee825aff85ea7cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625be2863598fcaa489d1372ee825aff85ea7cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625be2863598fcaa489d1372ee825aff85ea7cec/comments", "author": null, "committer": null, "parents": [{"sha": "00fd31d1d22defb8305d8ef113d9b0afb1a5a847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fd31d1d22defb8305d8ef113d9b0afb1a5a847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fd31d1d22defb8305d8ef113d9b0afb1a5a847"}], "stats": {"total": 204, "additions": 159, "deletions": 45}, "files": [{"sha": "48b652fc17b1b3e4d9de70710e6179d6f9ae4781", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -1,3 +1,14 @@\n+2004-08-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.am (gfor_helper_src): Split selected_kind.f90.\n+\t(gfor_built_src): Add selected_int_kind.inc selected_real_kind.inc.\n+\t(selected_int_kind.inc selected_real_kind.inc): New rules.\n+\t* Makefile.in: Regenerate.\n+\t* mk-sik-inc.sh, mk-srk-inc.sh: New files.\n+\t* intrinsics/selected_int_kind.f90: Split from selected_kind.f90,\n+\tinclude table of detected kinds.\n+\t* intrinsics/selected_real_kind.f90: Similarly.\n+\n 2004-08-29  Steven G. Kargl  <kargls@comcast.net>\n \tPaul Brook  <paul@codesourcery.com>\n "}, {"sha": "91d70b8129ce0a71c9717bb91b96633b25d43aa4", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -59,7 +59,8 @@ intrinsics/rand.c \\\n intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\\n-intrinsics/selected_kind.f90 \\\n+intrinsics/selected_int_kind.f90 \\\n+intrinsics/selected_real_kind.f90 \\\n intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n intrinsics/unpack_generic.c \\\n@@ -264,7 +265,8 @@ gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n-    $(i_pow_c)\n+    $(i_pow_c) \\\n+    selected_int_kind.inc selected_real_kind.inc\n \n # We only use these if libm doesn't contain complex math functions.\n \n@@ -383,6 +385,12 @@ I_M4_DEPS=m4/iparm.m4\n I_M4_DEPS0=$(I_M4_DEPS) m4/iforeach.m4\n I_M4_DEPS1=$(I_M4_DEPS) m4/ifunction.m4\n \n+selected_int_kind.inc: $(srcdir)/mk-sik-inc.sh\n+\t$(SHELL) $(srcdir)/mk-sik-inc.sh '$(F77COMPILE)' > $@\n+\n+selected_real_kind.inc: $(srcdir)/mk-srk-inc.sh\n+\t$(SHELL) $(srcdir)/mk-srk-inc.sh '$(F77COMPILE)' > $@\n+\n ## A 'normal' build shouldn't need to regenerate these\n ## so we only include them in maintainer mode\n "}, {"sha": "ded21b61c7c662616edc33d49fe1543511ed4647", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -123,9 +123,9 @@ am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n \tenv.lo erf.lo eoshift0.lo eoshift2.lo etime.lo getXid.lo \\\n \tishftc.lo pack_generic.lo size.lo spread_generic.lo \\\n \tstring_intrinsics.lo rand.lo random.lo reshape_generic.lo \\\n-\treshape_packed.lo selected_kind.lo system_clock.lo \\\n-\ttranspose_generic.lo unpack_generic.lo in_pack_generic.lo \\\n-\tin_unpack_generic.lo normalize.lo\n+\treshape_packed.lo selected_int_kind.lo selected_real_kind.lo \\\n+\tsystem_clock.lo transpose_generic.lo unpack_generic.lo \\\n+\tin_pack_generic.lo in_unpack_generic.lo normalize.lo\n am__objects_34 =\n am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n \t_abs_r4.lo _abs_r8.lo _exp_r4.lo _exp_r8.lo _exp_c4.lo \\\n@@ -331,7 +331,8 @@ intrinsics/rand.c \\\n intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\\n-intrinsics/selected_kind.f90 \\\n+intrinsics/selected_int_kind.f90 \\\n+intrinsics/selected_real_kind.f90 \\\n intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n intrinsics/unpack_generic.c \\\n@@ -536,7 +537,8 @@ gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n-    $(i_pow_c)\n+    $(i_pow_c) \\\n+    selected_int_kind.inc selected_real_kind.inc\n \n \n # We only use these if libm doesn't contain complex math functions.\n@@ -2291,14 +2293,23 @@ hyp_c8.lo: generated/hyp_c8.c\n .f90.lo:\n \t$(LTF77COMPILE) -c -o $@ $<\n \n-selected_kind.o: intrinsics/selected_kind.f90\n-\t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_kind.o `test -f 'intrinsics/selected_kind.f90' || echo '$(srcdir)/'`intrinsics/selected_kind.f90\n+selected_int_kind.o: intrinsics/selected_int_kind.f90\n+\t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_int_kind.o `test -f 'intrinsics/selected_int_kind.f90' || echo '$(srcdir)/'`intrinsics/selected_int_kind.f90\n \n-selected_kind.obj: intrinsics/selected_kind.f90\n-\t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_kind.obj `if test -f 'intrinsics/selected_kind.f90'; then $(CYGPATH_W) 'intrinsics/selected_kind.f90'; else $(CYGPATH_W) '$(srcdir)/intrinsics/selected_kind.f90'; fi`\n+selected_int_kind.obj: intrinsics/selected_int_kind.f90\n+\t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_int_kind.obj `if test -f 'intrinsics/selected_int_kind.f90'; then $(CYGPATH_W) 'intrinsics/selected_int_kind.f90'; else $(CYGPATH_W) '$(srcdir)/intrinsics/selected_int_kind.f90'; fi`\n \n-selected_kind.lo: intrinsics/selected_kind.f90\n-\t$(LIBTOOL) --mode=compile $(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_kind.lo `test -f 'intrinsics/selected_kind.f90' || echo '$(srcdir)/'`intrinsics/selected_kind.f90\n+selected_int_kind.lo: intrinsics/selected_int_kind.f90\n+\t$(LIBTOOL) --mode=compile $(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_int_kind.lo `test -f 'intrinsics/selected_int_kind.f90' || echo '$(srcdir)/'`intrinsics/selected_int_kind.f90\n+\n+selected_real_kind.o: intrinsics/selected_real_kind.f90\n+\t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_real_kind.o `test -f 'intrinsics/selected_real_kind.f90' || echo '$(srcdir)/'`intrinsics/selected_real_kind.f90\n+\n+selected_real_kind.obj: intrinsics/selected_real_kind.f90\n+\t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_real_kind.obj `if test -f 'intrinsics/selected_real_kind.f90'; then $(CYGPATH_W) 'intrinsics/selected_real_kind.f90'; else $(CYGPATH_W) '$(srcdir)/intrinsics/selected_real_kind.f90'; fi`\n+\n+selected_real_kind.lo: intrinsics/selected_real_kind.f90\n+\t$(LIBTOOL) --mode=compile $(F77) $(AM_FFLAGS) $(FFLAGS) -c -o selected_real_kind.lo `test -f 'intrinsics/selected_real_kind.f90' || echo '$(srcdir)/'`intrinsics/selected_real_kind.f90\n \n _abs_c4.o: generated/_abs_c4.f90\n \t$(F77) $(AM_FFLAGS) $(FFLAGS) -c -o _abs_c4.o `test -f 'generated/_abs_c4.f90' || echo '$(srcdir)/'`generated/_abs_c4.f90\n@@ -3170,6 +3181,12 @@ uninstall-am: uninstall-info-am uninstall-toolexeclibLTLIBRARIES\n \tuninstall-toolexeclibLTLIBRARIES\n \n \n+selected_int_kind.inc: $(srcdir)/mk-sik-inc.sh\n+\t$(SHELL) $(srcdir)/mk-sik-inc.sh '$(F77COMPILE)' > $@\n+\n+selected_real_kind.inc: $(srcdir)/mk-srk-inc.sh\n+\t$(SHELL) $(srcdir)/mk-srk-inc.sh '$(F77COMPILE)' > $@\n+\n @MAINTAINER_MODE_TRUE@$(i_all_c): m4/all.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 all.m4 > $@\n "}, {"sha": "8d9a6bedc6ba083e21bb6270fab14d2aec25cad5", "filename": "libgfortran/intrinsics/selected_int_kind.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fintrinsics%2Fselected_int_kind.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fintrinsics%2Fselected_int_kind.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fselected_int_kind.f90?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -0,0 +1,43 @@\n+!   Copyright 2003, 2004 Free Software Foundation, Inc.\n+!   Contributed by Kejia Zhao <kejia_zh@yahoo.com.cn>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfor).\n+!\n+!GNU libgfor is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU Lesser General Public\n+!License as published by the Free Software Foundation; either\n+!version 2.1 of the License, or (at your option) any later version.\n+!\n+!GNU libgfor is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU Lesser General Public License for more details.\n+!\n+!You should have received a copy of the GNU Lesser General Public\n+!License along with libgfor; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+!Boston, MA 02111-1307, USA.\n+!\n+\n+function selected_int_kind (r)\n+  implicit none\n+  integer, intent (in) :: r\n+  integer :: selected_int_kind\n+  integer :: i\n+  ! Integer kind_range table\n+  type :: int_info\n+    integer :: kind\n+    integer :: range\n+  end type int_info\n+\n+  include \"selected_int_kind.inc\"\n+\n+  do i = 1, c\n+    if (r <= int_infos (i) % range) then\n+      selected_int_kind = int_infos (i) % kind\n+      return\n+    end if\n+  end do\n+  selected_int_kind = -1\n+  return\n+end function"}, {"sha": "df2881717cdecaed8ecffb6a67cc7135e49015f2", "filename": "libgfortran/intrinsics/selected_real_kind.f90", "status": "renamed", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fintrinsics%2Fselected_real_kind.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fintrinsics%2Fselected_real_kind.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fselected_real_kind.f90?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -1,4 +1,4 @@\n-!   Copyright 2003 Free Software Foundation, Inc.\n+!   Copyright 2003, 2004 Free Software Foundation, Inc.\n !   Contributed by Kejia Zhao <kejia_zh@yahoo.com.cn>\n !\n !This file is part of the GNU Fortran 95 runtime library (libgfor).\n@@ -19,49 +19,20 @@\n !Boston, MA 02111-1307, USA.\n !\n \n-function selected_int_kind (r)\n-  implicit none\n-  integer, intent (in) :: r\n-  integer :: selected_int_kind\n-  integer :: i\n-  ! Integer kind_range table\n-  integer, parameter :: c = 4\n-  type :: int_info\n-    integer :: kind\n-    integer :: range\n-  end type int_info\n-  type (int_info), parameter :: int_infos (c) = &\n-      (/int_info (1, range (0_1)), &\n-        int_info (2, range (0_2)), &\n-        int_info (4, range (0_4)), &\n-        int_info (8, range (0_8))/)\n-\n-  do i = 1, c\n-    if (r <= int_infos (i) % range) then\n-      selected_int_kind = int_infos (i) % kind\n-      return\n-    end if\n-  end do\n-  selected_int_kind = -1\n-  return\n-end function\n-\n function selected_real_kind (p, r)\n   implicit none\n   integer, optional, intent (in) :: p, r\n   integer :: selected_real_kind\n   integer :: i, p2, r2\n   logical :: found_p, found_r\n   ! Real kind_precision_range table\n-  integer, parameter :: c = 2\n   type :: real_info\n     integer :: kind\n     integer :: precision\n     integer :: range\n   end type real_info\n-  type (real_info) :: real_infos (c) = &\n-      (/real_info (4, precision (0.0_4), range (0.0_4)), &\n-        real_info (8, precision (0.0_8), range (0.0_8))/)\n+\n+  include \"selected_real_kind.inc\"\n \n   selected_real_kind = 0\n   p2 = 0", "previous_filename": "libgfortran/intrinsics/selected_kind.f90"}, {"sha": "536eda70c8895c4c4a685f3159d9a6704a92a85c", "filename": "libgfortran/mk-sik-inc.sh", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fmk-sik-inc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fmk-sik-inc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-sik-inc.sh?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -0,0 +1,32 @@\n+#!/bin/sh\n+\n+compile=\"$1\"\n+kinds=\"\"\n+possible_kinds=\"1 2 4 8 16\"\n+c=0\n+\n+for k in $possible_kinds; do\n+  echo \"  integer (kind=$k) :: x\" > tmp$$.f90\n+  echo \"  end\" >> tmp$$.f90\n+  if $compile -c tmp$$.f90 > /dev/null 2>&1; then\n+    kinds=\"$kinds $k\"\n+    c=`expr $c + 1`\n+  fi\n+  rm -f tmp$$.*\n+done\n+\n+echo \"  integer, parameter :: c = $c\"\n+echo \"  type (int_info), parameter :: int_infos(c) = (/ &\"\n+\n+i=0\n+for k in $kinds; do\n+  echo -n \"    int_info ($k, range(0_$k))\"\n+  i=`expr $i + 1`\n+  if [ $i -lt $c ]; then\n+    echo \", &\"\n+  else\n+    echo \" /)\"\n+  fi\n+done\n+\n+exit 0"}, {"sha": "47046985b009bc1236c8a5e6531d1ac4ca2e4ebd", "filename": "libgfortran/mk-srk-inc.sh", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fmk-srk-inc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625be2863598fcaa489d1372ee825aff85ea7cec/libgfortran%2Fmk-srk-inc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-srk-inc.sh?ref=625be2863598fcaa489d1372ee825aff85ea7cec", "patch": "@@ -0,0 +1,32 @@\n+#!/bin/sh\n+\n+compile=\"$1\"\n+kinds=\"\"\n+possible_kinds=\"4 8 10 16\"\n+c=0\n+\n+for k in $possible_kinds; do\n+  echo \"  real (kind=$k) :: x\" > tmp$$.f90\n+  echo \"  end\" >> tmp$$.f90\n+  if $compile -c tmp$$.f90 > /dev/null 2>&1; then\n+    kinds=\"$kinds $k\"\n+    c=`expr $c + 1`\n+  fi\n+  rm -f tmp$$.*\n+done\n+\n+echo \"  integer, parameter :: c = $c\"\n+echo \"  type (real_info), parameter :: real_infos(c) = (/ &\"\n+\n+i=0\n+for k in $kinds; do\n+  echo -n \"    real_info ($k, precision(0.0_$k), range(0.0_$k))\"\n+  i=`expr $i + 1`\n+  if [ $i -lt $c ]; then\n+    echo \", &\"\n+  else\n+    echo \" /)\"\n+  fi\n+done\n+\n+exit 0"}]}