{"sha": "4a76b687c424b460021ad90e7ade96e66e4c0bf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3NmI2ODdjNDI0YjQ2MDAyMWFkOTBlN2FkZTk2ZTY2ZTRjMGJmMQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-12-19T16:22:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-19T16:22:56Z"}, "message": "exp_aggr.adb (Not_OK_For_Backend): A component of a private type with discriminants forces expansion of the...\n\n2007-12-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Not_OK_For_Backend): A component of a private type with\n\tdiscriminants forces expansion of the aggregate into assignments.\n\t(Init_Record_Controller):  If the type of the aggregate is untagged and\n\tis not inherently limited, the record controller is not limited either.\n\nFrom-SVN: r131071", "tree": {"sha": "526cb12d8201c69d84d1bff38327a77031be30a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/526cb12d8201c69d84d1bff38327a77031be30a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a76b687c424b460021ad90e7ade96e66e4c0bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a76b687c424b460021ad90e7ade96e66e4c0bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a76b687c424b460021ad90e7ade96e66e4c0bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a76b687c424b460021ad90e7ade96e66e4c0bf1/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10303118b35501a5e2f26fdaf91a3732e10cd9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10303118b35501a5e2f26fdaf91a3732e10cd9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10303118b35501a5e2f26fdaf91a3732e10cd9d7"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "f1e7fb4cfbb2f7e62e2c9daf9ecaf5bfbd953ffe", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 62, "deletions": 22, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a76b687c424b460021ad90e7ade96e66e4c0bf1/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a76b687c424b460021ad90e7ade96e66e4c0bf1/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=4a76b687c424b460021ad90e7ade96e66e4c0bf1", "patch": "@@ -1973,9 +1973,10 @@ package body Exp_Aggr is\n          Attach  : Node_Id;\n          Init_Pr : Boolean) return List_Id\n       is\n-         L   : constant List_Id := New_List;\n-         Ref : Node_Id;\n-         RC  : RE_Id;\n+         L           : constant List_Id := New_List;\n+         Ref         : Node_Id;\n+         RC          : RE_Id;\n+         Target_Type : Entity_Id;\n \n       begin\n          --  Generate:\n@@ -1989,27 +1990,47 @@ package body Exp_Aggr is\n              Selector_Name => Make_Identifier (Loc, Name_uController));\n          Set_Assignment_OK (Ref);\n \n-         --  Ada 2005 (AI-287): Give support to default initialization of\n-         --  limited types and components.\n+         --  Ada 2005 (AI-287): Give support to aggregates of limited\n+         --  types. If the type is intrinsically_limited the controller\n+         --  is limited as well. If it is tagged and limited then so is\n+         --  the controller. Otherwise an untagged type may have limited\n+         --  components without its full view being limited, so the\n+         --  controller is not limited.\n \n-         if (Nkind (Target) = N_Identifier\n-              and then Present (Etype (Target))\n-              and then Is_Limited_Type (Etype (Target)))\n-           or else\n-            (Nkind (Target) = N_Selected_Component\n-              and then Present (Etype (Selector_Name (Target)))\n-              and then Is_Limited_Type (Etype (Selector_Name (Target))))\n-           or else\n-            (Nkind (Target) = N_Unchecked_Type_Conversion\n-              and then Present (Etype (Target))\n-              and then Is_Limited_Type (Etype (Target)))\n-           or else\n-            (Nkind (Target) = N_Unchecked_Expression\n-              and then Nkind (Expression (Target)) = N_Indexed_Component\n-              and then Present (Etype (Prefix (Expression (Target))))\n-              and then Is_Limited_Type (Etype (Prefix (Expression (Target)))))\n+         if Nkind (Target) = N_Identifier then\n+            Target_Type := Etype (Target);\n+\n+         elsif Nkind (Target) = N_Selected_Component then\n+            Target_Type := Etype (Selector_Name (Target));\n+\n+         elsif Nkind (Target) = N_Unchecked_Type_Conversion then\n+            Target_Type := Etype (Target);\n+\n+         elsif Nkind (Target) = N_Unchecked_Expression\n+           and then Nkind (Expression (Target)) = N_Indexed_Component\n+         then\n+            Target_Type := Etype (Prefix (Expression (Target)));\n+\n+         else\n+            Target_Type := Etype (Target);\n+         end if;\n+\n+         --  If the target has not been analyzed yet, as will happen with\n+         --  delayed expansion, use the given type (either the aggregate\n+         --  type or an ancestor) to determine limitedness.\n+\n+         if No (Target_Type) then\n+            Target_Type := Typ;\n+         end if;\n+\n+         if (Is_Tagged_Type (Target_Type))\n+           and then Is_Limited_Type (Target_Type)\n          then\n             RC := RE_Limited_Record_Controller;\n+\n+         elsif Is_Inherently_Limited_Type (Target_Type) then\n+            RC := RE_Limited_Record_Controller;\n+\n          else\n             RC := RE_Record_Controller;\n          end if;\n@@ -5183,6 +5204,19 @@ package body Exp_Aggr is\n       --  of assignment statements. Cases checked for are a nested aggregate\n       --  needing Late_Expansion, the presence of a tagged component which may\n       --  need tag adjustment, and a bit unaligned component reference.\n+      --\n+      --  We also force expansion into assignments if a component is of a\n+      --  mutable type (including a private type with discriminants) because\n+      --  in that case the size of the component to be copied may be smaller\n+      --  than the side of the target, and there is no simple way for gigi\n+      --  to compute the size of the object to be copied.\n+      --\n+      --  NOTE: This is part of the ongoing work to define precisely the\n+      --  interface between front-end and back-end handling of aggregates.\n+      --  In general it is desirable to pass aggregates as they are to gigi,\n+      --  in order to minimize elaboration code. This is one case where the\n+      --  semantics of Ada complicate the analysis and lead to anomalies in\n+      --  the gcc back-end if the aggregate is not expanded into assignments.\n \n       ----------------------------------\n       -- Component_Not_OK_For_Backend --\n@@ -5241,6 +5275,12 @@ package body Exp_Aggr is\n               or else not Compile_Time_Known_Aggregate (Expr_Q)\n             then\n                Static_Components := False;\n+\n+               if Is_Private_Type (Etype (Expr_Q))\n+                 and then Has_Discriminants (Etype (Expr_Q))\n+               then\n+                  return True;\n+               end if;\n             end if;\n \n             Next (C);\n@@ -5333,7 +5373,7 @@ package body Exp_Aggr is\n          Convert_To_Assignments (N, Typ);\n \n       --  If some components are mutable, the size of the aggregate component\n-      --  may be disctinct from the default size of the type component, so\n+      --  may be distinct from the default size of the type component, so\n       --  we need to expand to insure that the back-end copies the proper\n       --  size of the data.\n "}]}