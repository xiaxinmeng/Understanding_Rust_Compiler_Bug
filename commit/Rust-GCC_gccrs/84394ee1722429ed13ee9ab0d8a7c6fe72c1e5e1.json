{"sha": "84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzOTRlZTE3MjI0MjllZDEzZWU5YWIwZDhhN2M2ZmU3MmMxZTVlMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2013-09-25T16:19:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2013-09-25T16:19:43Z"}, "message": "Make-lang.in (g++spec.o): Remove.\n\n\t* Make-lang.in (g++spec.o): Remove.\n\t(CFLAGS-cp/g++spec.o): New variable.\n\t(GXX_OBJS): Reference cp/g++spec.o.\n\t(cc1plus-checksum.o, cp/lex.o, cp/cp-array-notation.o)\n\t(cp/cp-lang.o, cp/decl.o, cp/decl2.o, cp/cp-objcp-common.o)\n\t(cp/typeck2.o, cp/typeck.o, cp/class.o, cp/call.o)\n\t(cp/friend.o, cp/init.o, cp/method.o, cp/cvt.o, cp/search.o)\n\t(cp/tree.o, cp/ptree.o, cp/rtti.o, cp/except.o, cp/expr.o)\n\t(cp/pt.o, cp/error.o, cp/repo.o, cp/semantics.o, cp/dump.o)\n\t(cp/optimize.o, cp/mangle.o, cp/parser.o, cp/cp-gimplify.o)\n\t(cp/name-lookup.o, cp/cxx-pretty-print.o): Remove.\n\nFrom-SVN: r202899", "tree": {"sha": "33ef5be9a8009e8bef5226550b19c18cd100f940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ef5be9a8009e8bef5226550b19c18cd100f940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1/comments", "author": null, "committer": null, "parents": [{"sha": "0a6c2227045ebd382db34d8f7430cad851f779ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6c2227045ebd382db34d8f7430cad851f779ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6c2227045ebd382db34d8f7430cad851f779ef"}], "stats": {"total": 116, "additions": 16, "deletions": 100}, "files": [{"sha": "ecb8abf3330afcf528d1b82deff81f8583215be5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1", "patch": "@@ -1,3 +1,17 @@\n+2013-09-25  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Make-lang.in (g++spec.o): Remove.\n+\t(CFLAGS-cp/g++spec.o): New variable.\n+\t(GXX_OBJS): Reference cp/g++spec.o.\n+\t(cc1plus-checksum.o, cp/lex.o, cp/cp-array-notation.o)\n+\t(cp/cp-lang.o, cp/decl.o, cp/decl2.o, cp/cp-objcp-common.o)\n+\t(cp/typeck2.o, cp/typeck.o, cp/class.o, cp/call.o)\n+\t(cp/friend.o, cp/init.o, cp/method.o, cp/cvt.o, cp/search.o)\n+\t(cp/tree.o, cp/ptree.o, cp/rtti.o, cp/except.o, cp/expr.o)\n+\t(cp/pt.o, cp/error.o, cp/repo.o, cp/semantics.o, cp/dump.o)\n+\t(cp/optimize.o, cp/mangle.o, cp/parser.o, cp/cp-gimplify.o)\n+\t(cp/name-lookup.o, cp/cxx-pretty-print.o): Remove.\n+\n 2013-09-25  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (g++spec.o): Don't use subshell."}, {"sha": "3653de9a22713a362a97301aceddeff56b9b7eb2", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 100, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=84394ee1722429ed13ee9ab0d8a7c6fe72c1e5e1", "patch": "@@ -51,13 +51,10 @@ c++: cc1plus$(exeext)\n # Tell GNU make to ignore these if they exist.\n .PHONY: c++\n \n-g++spec.o: $(srcdir)/cp/g++spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n-    $(CONFIG_H) $(OPTS_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n-\t\t$(INCLUDES) $(srcdir)/cp/g++spec.c\n+CFLAGS-cp/g++spec.o += $(DRIVER_DEFINES)\n \n # Create the compiler driver for g++.\n-GXX_OBJS = $(GCC_OBJS) g++spec.o\n+GXX_OBJS = $(GCC_OBJS) cp/g++spec.o\n xg++$(exeext): $(GXX_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t  $(GXX_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n@@ -97,8 +94,6 @@ cc1plus-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n                      checksum-options > cc1plus-checksum.c.tmp &&\t   \\\n \t$(srcdir)/../move-if-change cc1plus-checksum.c.tmp cc1plus-checksum.c\n \n-cc1plus-checksum.o : cc1plus-checksum.c $(CONFIG_H) $(SYSTEM_H)\n-\n cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n@@ -254,96 +249,3 @@ CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h $(C_COMMON_H) \\\n \t$(srcdir)/../include/hashtab.h\n CXX_PARSER_H = tree.h $(CXX_TREE_H) c-family/c-pragma.h cp/parser.h\n CXX_PRETTY_PRINT_H = cp/cxx-pretty-print.h $(C_PRETTY_PRINT_H)\n-\n-cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  $(C_PRAGMA_H) input.h cp/operators.def $(TM_P_H) \\\n-  c-family/c-objc.h\n-cp/cp-array-notation.o: cp/cp-array-notation.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(TREE_H) $(CXX_TREE_H) $(DIAGNOSTIC_H) tree-iterator.h vec.h \\\n-  $(GIMPLE_H) c-family/array-notation-common.o $(C_COMMON_H) \n-cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) debug.h langhooks.h \\\n-  $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-cp.h gt-cp-cp-lang.h \\\n-  cp/cp-objcp-common.h $(EXPR_H) $(TARGET_H) $(CXX_PARSER_H)\n-cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n-  output.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n-  cp/operators.def $(TM_P_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(C_PRAGMA_H) \\\n-  debug.h gt-cp-decl.h $(TIMEVAR_H) $(TARGET_H) $(PLUGIN_H) \\\n-  intl.h tree-iterator.h pointer-set.h $(SPLAY_TREE_H) \\\n-  c-family/c-objc.h\n-cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n-  toplev.h $(C_COMMON_H) gt-cp-decl2.h $(CGRAPH_H) \\\n-  $(C_PRAGMA_H) dumpfile.h intl.h $(TARGET_H) $(GIMPLE_H) pointer-set.h \\\n-  $(SPLAY_TREE_H) c-family/c-ada-spec.h \\\n-  c-family/c-objc.h\n-cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) $(C_COMMON_H) \\\n-  langhooks.h $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h \\\n-  $(CXX_PRETTY_PRINT_H) cp/cp-objcp-common.h gt-cp-cp-objcp-common.h\n-cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  $(TM_P_H) $(DIAGNOSTIC_CORE_H) gt-cp-typeck2.h $(REAL_H) intl.h\n-cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(PARAMS_H) \\\n-  toplev.h $(DIAGNOSTIC_H) convert.h $(C_COMMON_H) $(TARGET_H) \\\n-  c-family/c-objc.h\n-cp/class.o: cp/class.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n-  $(TARGET_H) convert.h $(CGRAPH_H) dumpfile.h gt-cp-class.h \\\n-  $(SPLAY_TREE_H) pointer-set.h $(HASH_TABLE_H)\n-cp/call.o: cp/call.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n-  $(DIAGNOSTIC_CORE_H) intl.h gt-cp-call.h convert.h $(TARGET_H) langhooks.h \\\n-  $(TIMEVAR_H) c-family/c-objc.h\n-cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H)\n-cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  $(EXCEPT_H) $(TARGET_H)\n-cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h \\\n-  $(TM_P_H) $(TARGET_H) $(DIAGNOSTIC_H) gt-cp-method.h $(GIMPLE_H) \\\n-  $(COMMON_TARGET_H)\n-cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h $(FLAGS_H) \\\n-  convert.h $(TARGET_H) intl.h\n-cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n-  intl.h\n-cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  $(TREE_INLINE_H) $(REAL_H) gt-cp-tree.h \\\n-  $(TARGET_H) debug.h $(CGRAPH_H) $(SPLAY_TREE_H) $(GIMPLE_H) $(HASH_TABLE_H)\n-cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n-cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) convert.h \\\n-  $(TARGET_H) $(C_PRAGMA_H) gt-cp-rtti.h intl.h\n-cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  cp/cfns.h $(TREE_INLINE_H) $(TARGET_H) gt-cp-except.h\n-cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(TM_P_H)\n-cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/cp-objcp-common.h \\\n-  toplev.h $(TREE_INLINE_H) pointer-set.h gt-cp-pt.h intl.h \\\n-  c-family/c-objc.h cp/type-utils.h\n-cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_H) \\\n-  $(FLAGS_H) $(REAL_H) $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H) \\\n-  tree-diagnostic.h tree-pretty-print.h pointer-set.h c-family/c-objc.h\n-cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) \\\n-  gt-cp-repo.h\n-cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) toplev.h \\\n-  $(FLAGS_H) $(RTL_H) $(TIMEVAR_H) \\\n-  $(TREE_INLINE_H) $(CGRAPH_H) $(TARGET_H) $(C_COMMON_H) $(GIMPLE_H) \\\n-  bitmap.h gt-cp-semantics.h c-family/c-objc.h $(HASH_TABLE_H)\n-cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) $(TREE_DUMP_H)\n-cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) \\\n-  input.h $(PARAMS_H) debug.h $(TREE_INLINE_H) $(GIMPLE_H) \\\n-  $(TARGET_H) tree-iterator.h $(CGRAPH_H) $(DIAGNOSTIC_CORE_H) \\\n-  dumpfile.h\n-cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) $(REAL_H) \\\n-  gt-cp-mangle.h $(TARGET_H) $(TM_P_H) $(CGRAPH_H)\n-cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_CORE_H) \\\n-  gt-cp-parser.h $(TARGET_H) $(PLUGIN_H) intl.h cp/decl.h \\\n-  c-family/c-objc.h tree-pretty-print.h $(CXX_PARSER_H) $(TIMEVAR_H) \\\n-  cp/type-utils.h\n-cp/cp-gimplify.o: cp/cp-gimplify.c $(CXX_TREE_H) $(C_COMMON_H) \\\n-\t$(TM_H) coretypes.h pointer-set.h tree-iterator.h $(SPLAY_TREE_H)\n-cp/vtable-class-hierarchy.o: cp/vtable-class-hierarchy.c \\\n-  $(TM_H) $(TIMEVAR_H) $(CXX_TREE_H) intl.h $(CXX_PARSER_H) cp/decl.h \\\n-  $(FLAGS_H) $(DIAGNOSTIC_CORE_H) output.h $(CGRAPH_H) c-family/c-common.h \\\n-  c-family/c-objc.h $(PLUGIN_H) \\\n-  tree-iterator.h vtable-verify.h $(GIMPLE_H) \\\n-  gt-cp-vtable-class-hierarchy.h\n-cp/name-lookup.o: cp/name-lookup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t$(TM_H) $(CXX_TREE_H) $(TIMEVAR_H) gt-cp-name-lookup.h $(PARAMS_H) \\\n-\t$(DIAGNOSTIC_CORE_H) $(FLAGS_H) debug.h pointer-set.h\n-cp/lambda.o: cp/lambda.c $(CXX_TREE_H) $(CGRAPH_H) $(VEC_H) $(SYSTEM_H) coretypes.h\n-\n-cp/cxx-pretty-print.o: cp/cxx-pretty-print.c $(CXX_PRETTY_PRINT_H) \\\n-  $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h $(CXX_TREE_H) tree-pretty-print.h"}]}