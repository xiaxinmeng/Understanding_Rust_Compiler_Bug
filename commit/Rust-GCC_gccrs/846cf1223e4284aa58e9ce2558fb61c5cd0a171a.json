{"sha": "846cf1223e4284aa58e9ce2558fb61c5cd0a171a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2Y2YxMjIzZTQyODRhYTU4ZTljZTI1NThmYjYxYzVjZDBhMTcxYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-05-06T15:53:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-05-06T15:53:16Z"}, "message": "* g++.old-deja/g++.abi/ptrflags.C: Correct and extend.\n\nFrom-SVN: r33727", "tree": {"sha": "c7cd664db744ee7be21674ed294de034f03aad79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7cd664db744ee7be21674ed294de034f03aad79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846cf1223e4284aa58e9ce2558fb61c5cd0a171a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846cf1223e4284aa58e9ce2558fb61c5cd0a171a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846cf1223e4284aa58e9ce2558fb61c5cd0a171a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846cf1223e4284aa58e9ce2558fb61c5cd0a171a/comments", "author": null, "committer": null, "parents": [{"sha": "1b846cccc633e057ec481250e21ee20461a4e5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b846cccc633e057ec481250e21ee20461a4e5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b846cccc633e057ec481250e21ee20461a4e5fd"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "d46f8367faee5ea001221f3c604cb1c1425c568f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846cf1223e4284aa58e9ce2558fb61c5cd0a171a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846cf1223e4284aa58e9ce2558fb61c5cd0a171a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=846cf1223e4284aa58e9ce2558fb61c5cd0a171a", "patch": "@@ -1,3 +1,7 @@\n+2000-05-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.abi/ptrflags.C: Correct and extend.\n+\n 2000-05-05  David Billinghurst  <David Billinghurst@riotinto.com.au>\n \n         * g77.f-torture/execute/20000503-1.f:  New test."}, {"sha": "e4f68c617c80c1603343cceecf54e44d30d93c95", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrflags.C", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846cf1223e4284aa58e9ce2558fb61c5cd0a171a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrflags.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846cf1223e4284aa58e9ce2558fb61c5cd0a171a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrflags.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrflags.C?ref=846cf1223e4284aa58e9ce2558fb61c5cd0a171a", "patch": "@@ -14,8 +14,8 @@ using namespace abi;\n \n int expect (int flags, type_info const &info)\n {\n-  __pointer_class_type_info const *ptr =\n-      dynamic_cast <__pointer_class_type_info const *> (&info);\n+  __pointer_type_info const *ptr =\n+      dynamic_cast <__pointer_type_info const *> (&info);\n   if (!ptr)\n     return 0;\n   if (ptr->quals != flags)\n@@ -31,25 +31,29 @@ int main ()\n     return 2;\n   if (! expect (2, typeid (A volatile *)))\n     return 3;\n-  if (! expect (4, typeid (A __restrict__ *)))\n+  if (! expect (4, typeid (A *__restrict__ *)))\n     return 4;\n-  if (! expect (0, typeid (void A::*))\n+  if (! expect (0, typeid (int A::*)))\n     return 5;\n-  if (! expect (0, typeid (void A::**))\n+  if (! expect (0, typeid (int A::**)))\n     return 6;\n \n   if (! expect (8 | 0, typeid (B *)))\n-    return 1;\n+    return 11;\n   if (! expect (8 | 1, typeid (B const *)))\n-    return 2;\n+    return 12;\n   if (! expect (8 | 2, typeid (B volatile *)))\n-    return 3;\n-  if (! expect (8 | 4, typeid (B __restrict__ *)))\n-    return 4;\n-  if (! expect (8 | 0, typeid (void B::*))\n-    return 5;\n-  if (! expect (8 | 0, typeid (void B::**))\n-    return 6;\n+    return 13;\n+  if (! expect (8 | 4, typeid (B *__restrict__ *)))\n+    return 14;\n+  if (! expect (16 | 0, typeid (int B::*)))\n+    return 15;\n+  if (! expect (8 | 0, typeid (int B::**)))\n+    return 16;\n+  if (! expect (8 | 0, typeid (B A::*)))\n+    return 17;\n+  if (! expect (24, typeid (B B::*)))\n+    return 18;\n   \n   return 0;\n }"}]}