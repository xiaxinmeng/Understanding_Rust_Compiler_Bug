{"sha": "3cab897a67af120aa18efa7ddd7ee49b9a29e5dd", "node_id": "C_kwDOANBUbNoAKDNjYWI4OTdhNjdhZjEyMGFhMThlZmE3ZGRkN2VlNDliOWEyOWU1ZGQ", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-08-16T07:34:36Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-08-17T08:08:05Z"}, "message": "LoongArch: Provide fmin/fmax RTL pattern\n\nWe already had smin/smax RTL pattern using fmin/fmax instruction.  But\nfor smin/smax, it's unspecified what will happen if either operand is\nNaN.  So we would generate calls to libc fmin/fmax functions with\n-fno-finite-math-only (the default for all optimization levels expect\n-Ofast).\n\nBut, LoongArch fmin/fmax instruction is IEEE-754-2008 conformant so we\ncan also use the instruction for fmin/fmax pattern and avoid the library\nfunction call.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (fmax<mode>3): New RTL pattern.\n\t(fmin<mode>3): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/fmax-fmin.c: New test.", "tree": {"sha": "b4e16fddf5234b3fd5e61c1a3980b736259878a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e16fddf5234b3fd5e61c1a3980b736259878a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYvyh5QAKCRCsqtIOGecQ\n47GWAQCIwXsf10HJLjWZrbtmTAAfsJhhfh4qYurWT8rv2l48egD+M49ZpDs65tSw\nZapWPYNume91t+DPg0RHXEPiWW0e+Q0=\n=W6k0\n-----END PGP SIGNATURE-----", "payload": "tree b4e16fddf5234b3fd5e61c1a3980b736259878a5\nparent 80f78716c2c7ce1b7f96077c35c1dd474a2086a2\nauthor Xi Ruoyao <xry111@xry111.site> 1660635276 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1660723685 +0800\n\nLoongArch: Provide fmin/fmax RTL pattern\n\nWe already had smin/smax RTL pattern using fmin/fmax instruction.  But\nfor smin/smax, it's unspecified what will happen if either operand is\nNaN.  So we would generate calls to libc fmin/fmax functions with\n-fno-finite-math-only (the default for all optimization levels expect\n-Ofast).\n\nBut, LoongArch fmin/fmax instruction is IEEE-754-2008 conformant so we\ncan also use the instruction for fmin/fmax pattern and avoid the library\nfunction call.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (fmax<mode>3): New RTL pattern.\n\t(fmin<mode>3): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/fmax-fmin.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80f78716c2c7ce1b7f96077c35c1dd474a2086a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f78716c2c7ce1b7f96077c35c1dd474a2086a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f78716c2c7ce1b7f96077c35c1dd474a2086a2"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "8e8868de9f5e3fa072dbb4377660cbb44b1484b4", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=3cab897a67af120aa18efa7ddd7ee49b9a29e5dd", "patch": "@@ -1023,6 +1023,24 @@\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"fmax<mode>3\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(smax:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t   (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  \"\"\n+  \"fmax.<fmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"fmin<mode>3\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(smin:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t   (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  \"\"\n+  \"fmin.<fmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"smaxa<mode>3\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(if_then_else:ANYF"}, {"sha": "92cf8a1501db2815fb13cf8b414db651b542b332", "filename": "gcc/testsuite/gcc.target/loongarch/fmax-fmin.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffmax-fmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cab897a67af120aa18efa7ddd7ee49b9a29e5dd/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffmax-fmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffmax-fmin.c?ref=3cab897a67af120aa18efa7ddd7ee49b9a29e5dd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdouble-float -fno-finite-math-only\" } */\n+/* { dg-final { scan-assembler \"fmin\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"fmin\\\\.d\" } } */\n+/* { dg-final { scan-assembler \"fmax\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"fmax\\\\.d\" } } */\n+\n+double\n+_fmax(double a, double b)\n+{\n+  return __builtin_fmax(a, b);\n+}\n+\n+float\n+_fmaxf(float a, float b)\n+{\n+  return __builtin_fmaxf(a, b);\n+}\n+\n+double\n+_fmin(double a, double b)\n+{\n+  return __builtin_fmin(a, b);\n+}\n+\n+float\n+_fminf(float a, float b)\n+{\n+  return __builtin_fminf(a, b);\n+}"}]}