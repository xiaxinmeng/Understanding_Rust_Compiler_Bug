{"sha": "6ce7e0f931732023c34bf3e467e79770edc8307a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlN2UwZjkzMTczMjAyM2MzNGJmM2U0NjdlNzk3NzBlZGM4MzA3YQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-03-03T14:20:28Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-03-03T14:20:28Z"}, "message": "reload1.c (reload_combine_note_use): Handle return register USEs.\n\n\t* reload1.c (reload_combine_note_use): Handle return register USEs.\n\tREG case: Handle multi-hard-register hard regs.\n\nFrom-SVN: r32310", "tree": {"sha": "623d4e9845aae5662a37e5da4a7ef1e2631dd37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/623d4e9845aae5662a37e5da4a7ef1e2631dd37c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ce7e0f931732023c34bf3e467e79770edc8307a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce7e0f931732023c34bf3e467e79770edc8307a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce7e0f931732023c34bf3e467e79770edc8307a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce7e0f931732023c34bf3e467e79770edc8307a/comments", "author": null, "committer": null, "parents": [{"sha": "661cb0b76f2c83d6cc45e063cd55dc74fb823bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661cb0b76f2c83d6cc45e063cd55dc74fb823bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661cb0b76f2c83d6cc45e063cd55dc74fb823bb7"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "1d513119f758eeb3b1e55d42081f5b57bf7d9370", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce7e0f931732023c34bf3e467e79770edc8307a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce7e0f931732023c34bf3e467e79770edc8307a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ce7e0f931732023c34bf3e467e79770edc8307a", "patch": "@@ -1,3 +1,8 @@\n+Fri Mar  3 12:49:28 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (reload_combine_note_use): Handle return register USEs.\n+\tREG case: Handle multi-hard-register hard regs.\n+\n Fri Mar  3 07:38:34 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* md.texi: Document use of '*' in insn pattern name."}, {"sha": "e91cf6fa55bc0f6a396ef7e7d17f6ec480526273", "filename": "gcc/reload1.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce7e0f931732023c34bf3e467e79770edc8307a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce7e0f931732023c34bf3e467e79770edc8307a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=6ce7e0f931732023c34bf3e467e79770edc8307a", "patch": "@@ -9253,6 +9253,21 @@ reload_combine_note_use (xp, insn)\n \t}\n       break;\n \n+    case USE:\n+      /* If this is the USE of a return value, we can't change it.  */\n+      if (GET_CODE (XEXP (x, 0)) == REG && REG_FUNCTION_VALUE_P (XEXP (x, 0)))\n+\t{\n+\t/* Mark the return register as used in an unknown fashion.  */\n+\t  rtx reg = XEXP (x, 0);\n+\t  int regno = REGNO (reg);\n+\t  int nregs = HARD_REGNO_NREGS (regno, GET_MODE (reg));\n+\n+\t  while (--nregs >= 0)\n+\t    reg_state[regno + nregs].use_index = -1;\n+\t  return;\n+\t}\n+      break;\n+\n     case CLOBBER:\n       if (GET_CODE (SET_DEST (x)) == REG)\n \treturn;\n@@ -9269,12 +9284,23 @@ reload_combine_note_use (xp, insn)\n       {\n \tint regno = REGNO (x);\n \tint use_index;\n+\tint nregs;\n \n \t/* Some spurious USEs of pseudo registers might remain.\n \t   Just ignore them.  */\n \tif (regno >= FIRST_PSEUDO_REGISTER)\n \t  return;\n \n+\tnregs = HARD_REGNO_NREGS (regno, GET_MODE (x));\n+\n+\t/* We can't substitute into multi-hard-reg uses.  */\n+\tif (nregs > 1)\n+\t  {\n+\t    while (--nregs >= 0)\n+\t      reg_state[regno + nregs].use_index = -1;\n+\t    return;\n+\t  }\n+\n \t/* If this register is already used in some unknown fashion, we\n \t   can't do anything.\n \t   If we decrement the index from zero to -1, we can't store more"}]}