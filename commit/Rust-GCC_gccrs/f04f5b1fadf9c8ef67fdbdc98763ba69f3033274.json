{"sha": "f04f5b1fadf9c8ef67fdbdc98763ba69f3033274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0ZjViMWZhZGY5YzhlZjY3ZmRiZGM5ODc2M2JhNjlmMzAzMzI3NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-30T13:43:24Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-30T13:43:24Z"}, "message": "2003-12-30  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/http/Connection.java\n\t(outputStream): New field.\n\t(bufferedOutputStream): New field.\n\t(connect): Initialize outputStream and bufferedOutputStream.\n\t(sendRequest): Create PrintWriter object from outputStream,\n\tsupport HTTP 1.1, send missing HTTP headers and buffered output data\n\tfor POST method.\n\t(getOutputStream): Set request method to POST if output stream is\n\tused, return bufferedOutputStream.\n\t(setRequestMethod): Allow HEAD and POST methods.\n\tThis fixes libgcj PR/6302 and libgcj PR/7752.\n\nFrom-SVN: r75233", "tree": {"sha": "0d6e5313e0d2acafa10754ca9295b42474af4efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d6e5313e0d2acafa10754ca9295b42474af4efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274/comments", "author": null, "committer": null, "parents": [{"sha": "50e8c419f93ca99039d60ba32068ae637d700c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e8c419f93ca99039d60ba32068ae637d700c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e8c419f93ca99039d60ba32068ae637d700c71"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "639b93624cb41c69d6b2afe13c81f8469a0c5af7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f04f5b1fadf9c8ef67fdbdc98763ba69f3033274", "patch": "@@ -1,3 +1,17 @@\n+2003-12-30  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/http/Connection.java\n+\t(outputStream): New field.\n+\t(bufferedOutputStream): New field.\n+\t(connect): Initialize outputStream and bufferedOutputStream.\n+\t(sendRequest): Create PrintWriter object from outputStream,\n+\tsupport HTTP 1.1, send missing HTTP headers and buffered output data\n+\tfor POST method.\n+\t(getOutputStream): Set request method to POST if output stream is\n+\tused, return bufferedOutputStream.\n+\t(setRequestMethod): Allow HEAD and POST methods.\n+\tThis fixes libgcj PR/6302 and libgcj PR/7752.\n+\n 2003-12-30  Guilhem Lavaux <guilhem@kaffe.org>\n \n \t* java/io/LineNumberReader.java"}, {"sha": "0bc50d147c09121b86912992375e4ba2471ab698", "filename": "libjava/gnu/java/net/protocol/http/Connection.java", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04f5b1fadf9c8ef67fdbdc98763ba69f3033274/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java?ref=f04f5b1fadf9c8ef67fdbdc98763ba69f3033274", "patch": "@@ -39,6 +39,8 @@\n package gnu.java.net.protocol.http;\n \n import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.DataInputStream;\n import java.io.InputStream;\n import java.io.IOException;\n@@ -105,6 +107,17 @@ public final class Connection extends HttpURLConnection\n    */\n   private DataInputStream inputStream;\n \n+  /**\n+   * The OutputStream for this connection\n+   */\n+  private OutputStream outputStream;\n+\n+  /**\n+   * bufferedOutputStream is a buffer to contain content of the HTTP request,\n+   * and will be written to outputStream all at once\n+   */\n+  private ByteArrayOutputStream bufferedOutputStream;\n+\n   /**\n    * This object holds the request properties.\n    */\n@@ -153,6 +166,8 @@ public void connect() throws IOException\n \n     inputStream =\n       new DataInputStream(new BufferedInputStream(socket.getInputStream()));\n+    outputStream = new BufferedOutputStream (socket.getOutputStream());\n+    bufferedOutputStream = new ByteArrayOutputStream (256); //default is too small\n \n     sendRequest();\n     receiveReply();\n@@ -185,16 +200,32 @@ public void disconnect()\n   void sendRequest() throws IOException\n   {\n     // Create PrintWriter for easier sending of headers.\n-    PrintWriter outputWriter = new PrintWriter(socket.getOutputStream());\n+    PrintWriter outputWriter = new PrintWriter(outputStream);\n     \n     // Send request including any request properties that were set.\n     outputWriter.print (getRequestMethod() + \" \" + url.getFile()\n-                        + \" HTTP/1.0\\r\\n\");\n+                        + \" HTTP/1.1\\r\\n\");\n \n     // Set additional HTTP headers.\n     if (getRequestProperty (\"Host\") == null)\n       setRequestProperty (\"Host\", url.getHost());\n     \n+    if (getRequestProperty (\"Connection\") == null)\n+      setRequestProperty (\"Connection\", \"Close\");\n+    \n+    if (getRequestProperty (\"user-agent\") == null)\n+      setRequestProperty (\"user-agent\", \"gnu-libgcj/\"\n+                          + System.getProperty (\"classpath.version\"));\n+    \n+    if (getRequestProperty (\"accept\") == null)\n+      setRequestProperty (\"accept\", \"*/*\");\n+    \n+    if (getRequestProperty (\"Content-type\") == null)\n+      setRequestProperty (\"Content-type\", \"application/x-www-form-urlencoded\");\n+\n+    // Set correct content length.\n+    setRequestProperty (\"Content-length\", String.valueOf (bufferedOutputStream.size()));\n+\n     // Write all req_props name-value pairs to the output writer.\n     Iterator itr = getRequestProperties().entrySet().iterator();\n \n@@ -207,6 +238,10 @@ void sendRequest() throws IOException\n     // One more CR-LF indicates end of header.\n     outputWriter.print (\"\\r\\n\");\n     outputWriter.flush();\n+\n+    // Write content\n+    bufferedOutputStream.writeTo (outputStream);\n+    outputStream.flush();\n   }\n \n   /**\n@@ -352,7 +387,7 @@ public OutputStream getOutputStream() throws IOException\n     if (!connected)\n       connect();\n     \n-    return socket.getOutputStream();\n+    return bufferedOutputStream;\n   }\n \n   /**\n@@ -367,7 +402,9 @@ public void setRequestMethod (String method) throws ProtocolException\n   {\n     method = method.toUpperCase();\n     \n-    if (method.equals(\"GET\"))\n+    if (method.equals(\"GET\")\n+        || method.equals(\"HEAD\")\n+        || method.equals(\"POST\"))\n       super.setRequestMethod (method);\n     else\n       throw new ProtocolException (\"Unsupported or unknown request method \" +"}]}