{"sha": "8ac411c731c11569c7deee92ea0a4734bb5777eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjNDExYzczMWMxMTU2OWM3ZGVlZTkyZWEwYTQ3MzRiYjU3NzdlYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-29T01:31:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-29T01:31:15Z"}, "message": "frv-protos.h: Remove the prototype for frv_expand_builtin_saveregs.\n\n\t* config/frv/frv-protos.h: Remove the prototype for\n\tfrv_expand_builtin_saveregs.\n\t* config/frv/frv.c (TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n\t(frv_stack_info): Use FRV_STRUCT_VALUE_REGNUM instead of\n\tSTRUCT_VALUE_REGNUM.\n\t(frv_expand_builtin_saveregs): Make it static.\n\t(frv_struct_value_rtx): New.\n\t* config/frv/frv.h (EXPAND_BUILTIN_SAVEREGS): Remove.\n\nFrom-SVN: r76826", "tree": {"sha": "27da383151c3a3c40f590e1783149d6dd32bb2b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27da383151c3a3c40f590e1783149d6dd32bb2b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac411c731c11569c7deee92ea0a4734bb5777eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac411c731c11569c7deee92ea0a4734bb5777eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac411c731c11569c7deee92ea0a4734bb5777eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac411c731c11569c7deee92ea0a4734bb5777eb/comments", "author": null, "committer": null, "parents": [{"sha": "a7324e75d17b3baa22fbe33fc0a502681ad40f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7324e75d17b3baa22fbe33fc0a502681ad40f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7324e75d17b3baa22fbe33fc0a502681ad40f56"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "aad6684c79df0660b9e84a8ab065ade7517b1f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ac411c731c11569c7deee92ea0a4734bb5777eb", "patch": "@@ -1,3 +1,15 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/frv/frv-protos.h: Remove the prototype for\n+\tfrv_expand_builtin_saveregs.\n+\t* config/frv/frv.c (TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\t(frv_stack_info): Use FRV_STRUCT_VALUE_REGNUM instead of\n+\tSTRUCT_VALUE_REGNUM.\n+\t(frv_expand_builtin_saveregs): Make it static.\n+\t(frv_struct_value_rtx): New.\n+\t* config/frv/frv.h (EXPAND_BUILTIN_SAVEREGS): Remove.\n+\n 2004-01-29  Jan Hubicka  <jh@suse.cz>\n \n \tPR c++/12850"}, {"sha": "5cea43b74d0ac83de71be339ae8443a735b5d11c", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=8ac411c731c11569c7deee92ea0a4734bb5777eb", "patch": "@@ -1,5 +1,5 @@\n /* Frv prototypes.\n-   Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -96,7 +96,6 @@ extern int frv_function_arg_keep_as_reference\t(CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, int);\n \n-extern rtx frv_expand_builtin_saveregs\t\t(void);\n extern void frv_setup_incoming_varargs\t\t(CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, int *, int);"}, {"sha": "71180945754030c3cb98fc42927f2db81e503e66", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=8ac411c731c11569c7deee92ea0a4734bb5777eb", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -262,9 +263,11 @@ static void frv_init_libfuncs\t\t\t(void);\n static bool frv_in_small_data_p\t\t\t(tree);\n static void frv_asm_output_mi_thunk\n   (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n+static rtx frv_expand_builtin_saveregs\t\t(void);\n static bool frv_rtx_costs\t\t\t(rtx, int, int, int*);\n static void frv_asm_out_constructor\t\t(rtx, int);\n static void frv_asm_out_destructor\t\t(rtx, int);\n+static rtx frv_struct_value_rtx\t\t\t(tree, int);\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n@@ -298,6 +301,12 @@ static void frv_asm_out_destructor\t\t(rtx, int);\n #undef  TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n #define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE frv_use_dfa_pipeline_interface\n \n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX frv_struct_value_rtx\n+\n+#undef TARGET_EXPAND_BUILTIN_SAVEREGS\n+#define TARGET_EXPAND_BUILTIN_SAVEREGS frv_expand_builtin_saveregs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Given a CONST, return true if the symbol_ref points to small data.  */\n@@ -902,8 +911,8 @@ frv_stack_info (void)\n   info_ptr->regs[STACK_REGS_STDARG].special_p = 1;\n \n   info_ptr->regs[STACK_REGS_STRUCT].name      = \"struct\";\n-  info_ptr->regs[STACK_REGS_STRUCT].first     = STRUCT_VALUE_REGNUM;\n-  info_ptr->regs[STACK_REGS_STRUCT].last      = STRUCT_VALUE_REGNUM;\n+  info_ptr->regs[STACK_REGS_STRUCT].first     = FRV_STRUCT_VALUE_REGNUM;\n+  info_ptr->regs[STACK_REGS_STRUCT].last      = FRV_STRUCT_VALUE_REGNUM;\n   info_ptr->regs[STACK_REGS_STRUCT].special_p = 1;\n \n   info_ptr->regs[STACK_REGS_FP].name          = \"fp\";\n@@ -998,7 +1007,7 @@ frv_stack_info (void)\n \tcase STACK_REGS_STRUCT:\n \t  if (cfun->returns_struct)\n \t    {\n-\t      info_ptr->save_p[STRUCT_VALUE_REGNUM] = REG_SAVE_1WORD;\n+\t      info_ptr->save_p[FRV_STRUCT_VALUE_REGNUM] = REG_SAVE_1WORD;\n \t      size_1word += UNITS_PER_WORD;\n \t    }\n \t  break;\n@@ -1136,8 +1145,8 @@ frv_stack_info (void)\n \n       if (cfun->returns_struct)\n \t{\n-\t  info_ptr->save_p[STRUCT_VALUE_REGNUM] = REG_SAVE_1WORD;\n-\t  info_ptr->reg_offset[STRUCT_VALUE_REGNUM] = offset + UNITS_PER_WORD;\n+\t  info_ptr->save_p[FRV_STRUCT_VALUE_REGNUM] = REG_SAVE_1WORD;\n+\t  info_ptr->reg_offset[FRV_STRUCT_VALUE_REGNUM] = offset + UNITS_PER_WORD;\n \t  info_ptr->regs[STACK_REGS_STRUCT].size_1word = UNITS_PER_WORD;\n \t}\n \n@@ -1975,7 +1984,7 @@ frv_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n    If this macro is not defined, the compiler will output an ordinary call to\n    the library function `__builtin_saveregs'.  */\n \n-rtx\n+static rtx\n frv_expand_builtin_saveregs (void)\n {\n   int offset = UNITS_PER_WORD * FRV_NUM_ARG_REGS;\n@@ -9563,3 +9572,12 @@ frv_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n   assemble_align (POINTER_SIZE);\n   assemble_integer_with_op (\"\\t.picptr\\t\", symbol);\n }\n+\n+/* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n+\n+static rtx\n+frv_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t      int incoming ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (Pmode, FRV_STRUCT_VALUE_REGNUM);\n+}"}, {"sha": "198d7132a570b0fc5d1f024c1b0816aea1f9ddcb", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac411c731c11569c7deee92ea0a4734bb5777eb/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=8ac411c731c11569c7deee92ea0a4734bb5777eb", "patch": "@@ -1,5 +1,6 @@\n /* Target macros for the FRV port of GCC.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Red Hat Inc.\n \n    This file is part of GCC.\n@@ -1999,17 +2000,18 @@ struct machine_function GTY(())\n    (Actually, on most machines, scalar values are returned in the same place\n    regardless of mode).\n \n-   If `PROMOTE_FUNCTION_RETURN' is defined, you must apply the same promotion\n-   rules specified in `PROMOTE_MODE' if VALTYPE is a scalar type.\n+   If `TARGET_PROMOTE_FUNCTION_RETURN' is defined to return true, you\n+   must apply the same promotion rules specified in `PROMOTE_MODE' if\n+   VALTYPE is a scalar type.\n \n    If the precise function being called is known, FUNC is a tree node\n    (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This makes it\n    possible to use a different value-returning convention for specific\n    functions when all their calls are known.\n \n    `FUNCTION_VALUE' is not used for return vales with aggregate data types,\n-   because these are returned in another way.  See `STRUCT_VALUE_REGNUM' and\n-   related macros, below.  */\n+   because these are returned in another way.  See\n+   `TARGET_STRUCT_VALUE_RTX' and related macros, below.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n   gen_rtx (REG, TYPE_MODE (VALTYPE), RETURN_VALUE_REGNUM)\n \n@@ -2041,9 +2043,9 @@ struct machine_function GTY(())\n \f\n /* How Large Values are Returned.  */\n \n-/* If the structure value address is passed in a register, then\n-   `STRUCT_VALUE_REGNUM' should be the number of that register.  */\n-#define STRUCT_VALUE_REGNUM (GPR_FIRST + 3)\n+/* The number of the register that is used to to pass the structure\n+   value address.  */\n+#define FRV_STRUCT_VALUE_REGNUM (GPR_FIRST + 3)\n \n \f\n /* Function Entry and Exit.  */\n@@ -2081,23 +2083,13 @@ struct machine_function GTY(())\n \f\n /* Implementing the Varargs Macros.  */\n \n-/* If defined, is a C expression that produces the machine-specific code for a\n-   call to `__builtin_saveregs'.  This code will be moved to the very beginning\n-   of the function, before any parameter access are made.  The return value of\n-   this function should be an RTX that contains the value to use as the return\n-   of `__builtin_saveregs'.\n-\n-   If this macro is not defined, the compiler will output an ordinary call to\n-   the library function `__builtin_saveregs'.  */\n-\n-#define EXPAND_BUILTIN_SAVEREGS() frv_expand_builtin_saveregs ()\n-\n /* This macro offers an alternative to using `__builtin_saveregs' and defining\n-   the macro `EXPAND_BUILTIN_SAVEREGS'.  Use it to store the anonymous register\n-   arguments into the stack so that all the arguments appear to have been\n-   passed consecutively on the stack.  Once this is done, you can use the\n-   standard implementation of varargs that works for machines that pass all\n-   their arguments on the stack.\n+   the target hook `TARGET_EXPAND_BUILTIN_SAVEREGS'.  Use it to store\n+   the anonymous register arguments into the stack so that all the\n+   arguments appear to have been passed consecutively on the stack.\n+   Once this is done, you can use the standard implementation of\n+   varargs that works for machines that pass all their arguments on\n+   the stack.\n \n    The argument ARGS_SO_FAR is the `CUMULATIVE_ARGS' data structure, containing\n    the values that obtain after processing of the named arguments.  The"}]}