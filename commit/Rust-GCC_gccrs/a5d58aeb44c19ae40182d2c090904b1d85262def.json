{"sha": "a5d58aeb44c19ae40182d2c090904b1d85262def", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkNThhZWI0NGMxOWFlNDAxODJkMmMwOTA5MDRiMWQ4NTI2MmRlZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-04-03T19:15:41Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-04-03T19:15:41Z"}, "message": "* intrinsic.texi: Document COS, EXP, LOG, LOG10, SIN, SQRT, TAN.\n\nFrom-SVN: r97496", "tree": {"sha": "2f296d03664f567426c90721f98e1f07452958f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f296d03664f567426c90721f98e1f07452958f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d58aeb44c19ae40182d2c090904b1d85262def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d58aeb44c19ae40182d2c090904b1d85262def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d58aeb44c19ae40182d2c090904b1d85262def", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d58aeb44c19ae40182d2c090904b1d85262def/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7cdcbf1c569761c07a3f27bd25b831e56067f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7cdcbf1c569761c07a3f27bd25b831e56067f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7cdcbf1c569761c07a3f27bd25b831e56067f28"}], "stats": {"total": 408, "additions": 368, "deletions": 40}, "files": [{"sha": "0acf57e36afb236f4c879455f9857f16a9265505", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d58aeb44c19ae40182d2c090904b1d85262def/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d58aeb44c19ae40182d2c090904b1d85262def/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a5d58aeb44c19ae40182d2c090904b1d85262def", "patch": "@@ -1,3 +1,7 @@\n+2005-04-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsic.texi: Document COS, EXP, LOG, LOG10, SIN, SQRT, TAN.\n+\n 2005-04-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* intrinsic.texi: Document BESJ0, BESJ1, BESJN, BESY0, BESY1,"}, {"sha": "e7d9933749af3db3d4661e673cf714030abeaa68", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 364, "deletions": 40, "changes": 404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d58aeb44c19ae40182d2c090904b1d85262def/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d58aeb44c19ae40182d2c090904b1d85262def/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a5d58aeb44c19ae40182d2c090904b1d85262def", "patch": "@@ -50,13 +50,20 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{BESJ0}:     BESJ0,     Bessel function of the first kind of order 0\n * @code{BESJ1}:     BESJ1,     Bessel function of the first kind of order 1\n * @code{BESJN}:     BESJN,     Bessel function of the first kind\n-* @code{BESY0}:     BESY0,     Bessel function of the first kind of order 0\n-* @code{BESY1}:     BESY1,     Bessel function of the first kind of order 1\n-* @code{BESYN}:     BESYN,     Bessel function of the first kind\n+* @code{BESY0}:     BESY0,     Bessel function of the second kind of order 0\n+* @code{BESY1}:     BESY1,     Bessel function of the second kind of order 1\n+* @code{BESYN}:     BESYN,     Bessel function of the second kind\n+* @code{COS}:       COS,       Cosine function\n * @code{COSH}:      COSH,      Hyperbolic cosine function\n * @code{ERF}:       ERF,       Error function\n * @code{ERFC}:      ERFC,      Complementary error function\n+* @code{EXP}:       EXP,       Cosine function\n+* @code{LOG}:       LOG,       Logarithm function\n+* @code{LOG10}:     LOG10,     Base 10 logarithm function \n+* @code{SQRT}:      SQRT,      Square-root function\n+* @code{SIN}:       SIN,       Sine function\n * @code{SINH}:      SINH,      Hyperbolic sine function\n+* @code{TAN}:       TAN,       Tangent function\n * @code{TANH}:      TANH,      Hyperbolic tangent function\n @end menu\n \n@@ -1052,6 +1059,54 @@ end program test_besyn\n @end table\n \n \n+@node COS\n+@section @code{COS} --- Cosine function \n+@findex @code{COS} intrinsic\n+@findex @code{DCOS} intrinsic\n+@findex @code{ZCOS} intrinsic\n+@findex @code{CDCOS} intrinsic\n+@cindex cosine\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{COS(X)} computes the cosine of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = COS(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value has same type and kind than @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_cos\n+  real :: x = 0.0\n+  x = cos(x)\n+end program test_cos\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DCOS(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CCOS(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n+@item @code{ZCOS(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{CDCOS(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n \n @node COSH\n @section @code{COSH} --- Hyperbolic cosine function \n@@ -1107,7 +1162,7 @@ end program test_cosh\n @code{ERF(X)} computes the error function of @var{X}.\n \n @item @emph{Option}:\n-f95, gnu\n+gnu\n \n @item @emph{Type}:\n elemental function\n@@ -1135,7 +1190,7 @@ end program test_erf\n @item @emph{Specific names}:\n @multitable @columnfractions .24 .24 .24 .24\n @item Name            @tab Argument          @tab Return type       @tab Option\n-@item @code{DERF(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{DERF(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab gnu\n @end multitable\n @end table\n \n@@ -1151,7 +1206,7 @@ end program test_erf\n @code{ERFC(X)} computes the complementary error function of @var{X}.\n \n @item @emph{Option}:\n-f95, gnu\n+gnu\n \n @item @emph{Type}:\n elemental function\n@@ -1179,12 +1234,216 @@ end program test_erfc\n @item @emph{Specific names}:\n @multitable @columnfractions .24 .24 .24 .24\n @item Name            @tab Argument          @tab Return type       @tab Option\n-@item @code{DERFC(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{DERFC(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node EXP\n+@section @code{EXP} --- Exponential function \n+@findex @code{EXP} intrinsic\n+@findex @code{DEXP} intrinsic\n+@findex @code{ZEXP} intrinsic\n+@findex @code{CDEXP} intrinsic\n+@cindex exponential\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{EXP(X)} computes the base @math{e} exponential of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = EXP(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value has same type and kind than @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_exp\n+  real :: x = 1.0\n+  x = exp(x)\n+end program test_exp\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DEXP(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CEXP(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n+@item @code{ZEXP(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{CDEXP(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+@node LOG\n+@section @code{LOG} --- Logarithm function\n+@findex @code{LOG} intrinsic\n+@findex @code{ALOG} intrinsic\n+@findex @code{DLOG} intrinsic\n+@findex @code{CLOG} intrinsic\n+@findex @code{ZLOG} intrinsic\n+@findex @code{CDLOG} intrinsic\n+@cindex logarithm\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LOG(X)} computes the logarithm of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = LOG(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n+The kind type parameter is the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_log\n+  real(8) :: x = 1.0_8\n+  complex :: z = (1.0, 2.0)\n+  x = log(x)\n+  z = log(z)\n+end program test_log\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n+@item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CLOG(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n+@item @code{ZLOG(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{CDLOG(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node LOG10\n+@section @code{LOG10} --- Base 10 logarithm function\n+@findex @code{LOG10} intrinsic\n+@findex @code{ALOG10} intrinsic\n+@findex @code{DLOG10} intrinsic\n+@cindex logarithm\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LOG10(X)} computes the base 10 logarithm of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = LOG10(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n+The kind type parameter is the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_log10\n+  real(8) :: x = 10.0_8\n+  x = log10(x)\n+end program test_log10\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n+@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n @end multitable\n @end table\n \n \n \n+@node SIN\n+@section @code{SIN} --- Sine function \n+@findex @code{SIN} intrinsic\n+@findex @code{DSIN} intrinsic\n+@findex @code{ZSIN} intrinsic\n+@findex @code{CDSIN} intrinsic\n+@cindex sine\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SIN(X)} computes the sine of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = SIN(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value has same type and king than @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_sin\n+  real :: x = 0.0\n+  x = sin(x)\n+end program test_sin\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DSIN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CSIN(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n+@item @code{ZSIN(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{CDSIN(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+\n @node SINH\n @section @code{SINH} --- Hyperbolic sine function \n @findex @code{SINH} intrinsic\n@@ -1229,6 +1488,104 @@ end program test_sinh\n \n \n \n+@node SQRT\n+@section @code{SQRT} --- Square-root function\n+@findex @code{SQRT} intrinsic\n+@findex @code{DSQRT} intrinsic\n+@findex @code{CSQRT} intrinsic\n+@findex @code{ZSQRT} intrinsic\n+@findex @code{CDSQRT} intrinsic\n+@cindex square-root\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SQRT(X)} computes the square root of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = SQRT(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n+The kind type parameter is the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_sqrt\n+  real(8) :: x = 2.0_8\n+  complex :: z = (1.0, 2.0)\n+  x = sqrt(x)\n+  z = sqrt(z)\n+end program test_sqrt\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DSQRT(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n+@item @code{ZSQRT(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{CDSQRT(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node TAN\n+@section @code{TAN} --- Tangent function\n+@findex @code{TAN} intrinsic\n+@findex @code{DTAN} intrinsic\n+@cindex tangent\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{TAN(X)} computes the tangent of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = TAN(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)}.  The kind type parameter is\n+the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_tan\n+  real(8) :: x = 0.165_8\n+  x = tan(x)\n+end program test_tan\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n @node TANH\n @section @code{TANH} --- Hyperbolic tangent function \n @findex @code{TANH} intrinsic\n@@ -1294,11 +1651,6 @@ end program test_tanh\n @comment gen   conjg\n @comment       dconjg\n @comment \n-@comment gen   cos\n-@comment       dcos\n-@comment       ccos\n-@comment       zcos,cdcos\n-@comment \n @comment gen   count\n @comment \n @comment sub   cpu_time\n@@ -1335,11 +1687,6 @@ end program test_tanh\n @comment \n @comment sub   exit\n @comment \n-@comment gen   exp\n-@comment       dexp\n-@comment       cexp\n-@comment       zexp,cdexp\n-@comment \n @comment gen   exponent\n @comment \n @comment gen   floor\n@@ -1420,16 +1767,6 @@ end program test_tanh\n @comment \n @comment gen   llt\n @comment \n-@comment gen   log\n-@comment       alog\n-@comment       dlog\n-@comment       clog\n-@comment       zlog, cdlog\n-@comment \n-@comment gen   log10\n-@comment       alog10\n-@comment       dlog10\n-@comment \n @comment gen   logical\n @comment \n @comment gen   matmul\n@@ -1527,22 +1864,12 @@ end program test_tanh\n @comment       isign\n @comment       dsign\n @comment \n-@comment gen   sin\n-@comment       dsin\n-@comment       csin\n-@comment       zsin,cdsin\n-@comment \n @comment gen   size\n @comment \n @comment gen   spacing\n @comment \n @comment gen   spread\n @comment \n-@comment gen   sqrt\n-@comment       dsqrt\n-@comment       csqrt\n-@comment       zsqrt,cdsqrt\n-@comment \n @comment sub   srand\n @comment \n @comment gen   stat\n@@ -1555,9 +1882,6 @@ end program test_tanh\n @comment \n @comment sub system_clock\n @comment \n-@comment gen   tan\n-@comment       dtan\n-@comment \n @comment gen   tiny\n @comment \n @comment gen   transfer"}]}