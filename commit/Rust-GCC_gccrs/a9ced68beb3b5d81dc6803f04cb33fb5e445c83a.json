{"sha": "a9ced68beb3b5d81dc6803f04cb33fb5e445c83a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTljZWQ2OGJlYjNiNWQ4MWRjNjgwM2YwNGNiMzNmYjVlNDQ1YzgzYQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2010-01-14T11:15:07Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2010-01-14T11:15:07Z"}, "message": "sel-sched.c (choose_best_reg_1): Loop over all regs for mode.\n\n2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n\n\t* sel-sched.c (choose_best_reg_1):  Loop over all regs for mode.\n\nFrom-SVN: r155897", "tree": {"sha": "c312e16ce6b9a6f91c31c5f01153939357b955af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c312e16ce6b9a6f91c31c5f01153939357b955af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c94f956cf3f91faa1ec0364568fa51ad51d1a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c94f956cf3f91faa1ec0364568fa51ad51d1a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c94f956cf3f91faa1ec0364568fa51ad51d1a91"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "abfd461671cb73a14ce392b0ecd24c74d625b38c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9ced68beb3b5d81dc6803f04cb33fb5e445c83a", "patch": "@@ -1,3 +1,7 @@\n+2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* sel-sched.c (choose_best_reg_1):  Loop over all regs for mode.\n+\n 2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* sel-sched.c (mark_unavailable_hard_regs): Do not try to search"}, {"sha": "bdc7f9c42bcf60805051bfc347f8ec7d078df556", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ced68beb3b5d81dc6803f04cb33fb5e445c83a/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=a9ced68beb3b5d81dc6803f04cb33fb5e445c83a", "patch": "@@ -1429,6 +1429,16 @@ choose_best_reg_1 (HARD_REG_SET hard_regs_used,\n                                   0, cur_reg, hrsi)\n     if (! TEST_HARD_REG_BIT (hard_regs_used, cur_reg))\n       {\n+\t/* Check that all hard regs for mode are available.  */\n+\tfor (i = 1, n = hard_regno_nregs[cur_reg][mode]; i < n; i++)\n+\t  if (TEST_HARD_REG_BIT (hard_regs_used, cur_reg + i)\n+\t      || !TEST_HARD_REG_BIT (reg_rename_p->available_for_renaming,\n+\t\t\t\t     cur_reg + i))\n+\t    break;\n+\n+\tif (i < n)\n+\t  continue;\n+\n         /* All hard registers are available.  */\n         if (best_new_reg < 0\n             || reg_rename_tick[cur_reg] < reg_rename_tick[best_new_reg])\n@@ -1460,6 +1470,7 @@ choose_best_reg (HARD_REG_SET hard_regs_used, struct reg_rename *reg_rename_p,\n   rtx best_reg = choose_best_reg_1 (hard_regs_used, reg_rename_p,\n                                     original_insns, is_orig_reg_p_ptr);\n \n+  /* FIXME loop over hard_regno_nregs here.  */\n   gcc_assert (best_reg == NULL_RTX\n \t      || TEST_HARD_REG_BIT (sel_hrd.regs_ever_used, REGNO (best_reg)));\n "}]}