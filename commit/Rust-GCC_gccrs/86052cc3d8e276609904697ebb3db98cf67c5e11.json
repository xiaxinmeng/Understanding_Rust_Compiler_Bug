{"sha": "86052cc3d8e276609904697ebb3db98cf67c5e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwNTJjYzNkOGUyNzY2MDk5MDQ2OTdlYmIzZGI5OGNmNjdjNWUxMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-01-28T11:43:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-01-28T11:43:39Z"}, "message": "cp-tree.h (grok_enum_decls): Remove type parameter.\n\n\t* cp-tree.h (grok_enum_decls): Remove type parameter.\n\t* decl.c (grok_enum_decls): Likewise.\n\t* decl2.c (grok_x_components): Call grok_enum_decls\n\tunconditionally, since it will do nothing if there is no\n\tcurrent_local_enum.  Use the new calling sequence.\n\t* pt.c (tsubst_enum): Use the new calling sequence for\n\tgrok_enum_decls.\n\t* decl.c (start_function): Make member functions of local classes\n\tin extern inline functions have comdat linkage here...\n\t(grokdeclarator): Rather than here.\n\t* pt.c (convert_nontype_argument): Use decl_constant_value.\n\nFrom-SVN: r17531", "tree": {"sha": "12a84afb0fcdc9a73f42db4792c950e416bb8996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12a84afb0fcdc9a73f42db4792c950e416bb8996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86052cc3d8e276609904697ebb3db98cf67c5e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86052cc3d8e276609904697ebb3db98cf67c5e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86052cc3d8e276609904697ebb3db98cf67c5e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86052cc3d8e276609904697ebb3db98cf67c5e11/comments", "author": null, "committer": null, "parents": [{"sha": "fca482568a40e38c9c95938128bc01c473b9587f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca482568a40e38c9c95938128bc01c473b9587f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca482568a40e38c9c95938128bc01c473b9587f"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "42bc3ea04e29f169b7cee9117f82798cefabe184", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86052cc3d8e276609904697ebb3db98cf67c5e11", "patch": "@@ -1,3 +1,21 @@\n+Wed Jan 28 11:04:07 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* cp-tree.h (grok_enum_decls): Remove type parameter.\n+\t* decl.c (grok_enum_decls): Likewise.\n+\t* decl2.c (grok_x_components): Call grok_enum_decls\n+\tunconditionally, since it will do nothing if there is no\n+\tcurrent_local_enum.  Use the new calling sequence.\n+\t* pt.c (tsubst_enum): Use the new calling sequence for\n+\tgrok_enum_decls.\n+\n+\t* decl.c (start_function): Make member functions of local classes\n+\tin extern inline functions have comdat linkage here...\n+\t(grokdeclarator): Rather than here.\n+\t\n+Wed Jan 28 10:55:47 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (convert_nontype_argument): Use decl_constant_value.\n+\n Tue Jan 27 16:42:21 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* call.c (add_template_candidate_real): New function.\n@@ -13,6 +31,7 @@ Tue Jan 27 16:42:21 1998  Mark Mitchell  <mmitchell@usa.net>\n \t(check_explicit_specialization): Return a tree, not an int.\n \t(more_specialized): Take additional argument.\n \t(get_bindings): Likewise.\n+\t(TI_PENDING_SPECIALIZATION_FLAG): New macro.\n \t* cvt.c (perform_qualification_conversions): Use comp_ptr_ttypes.\n \t(perform_array_to_pointer_conversion): Remove.\n \t* decl.c (saved_scope): Add processing_specialization,"}, {"sha": "85225da73931cd94b60af8fdc3f9598282e1d259", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=86052cc3d8e276609904697ebb3db98cf67c5e11", "patch": "@@ -2099,7 +2099,7 @@ extern void xref_basetypes\t\t\tPROTO((tree, tree, tree, tree));\n extern tree start_enum\t\t\t\tPROTO((tree));\n extern tree finish_enum\t\t\t\tPROTO((tree, tree));\n extern tree build_enumerator\t\t\tPROTO((tree, tree));\n-extern tree grok_enum_decls\t\t\tPROTO((tree, tree));\n+extern tree grok_enum_decls\t\t\tPROTO((tree));\n extern int start_function\t\t\tPROTO((tree, tree, tree, int));\n extern void expand_start_early_try_stmts\tPROTO((void));\n extern void store_parm_decls\t\t\tPROTO((void));"}, {"sha": "fdac895ef2d851cccaa14ec752e9364b565a8b07", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=86052cc3d8e276609904697ebb3db98cf67c5e11", "patch": "@@ -9734,16 +9734,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t       funcdef_flag, template_count);\n \t    if (decl == NULL_TREE)\n \t      return NULL_TREE;\n-\t    if (function_context != NULL_TREE\n-\t\t&& DECL_THIS_INLINE (function_context)\n-\t\t&& TREE_PUBLIC (function_context))\n-\t      /* We just declared a member of a local class in an\n-\t\t extern inline function.  Give such an entity comdat\n-\t\t linkage.  */\n-\t      {\n-\t\tcomdat_linkage (decl);\n-\t\tDECL_INTERFACE_KNOWN (decl) = 1;\n-\t      }\n #if 0\n \t    /* This clobbers the attrs stored in `decl' from `attrlist'.  */\n \t    /* The decl and setting of decl_machine_attr is also turned off.  */\n@@ -11395,8 +11385,8 @@ build_enumerator (name, value)\n }\n \n tree\n-grok_enum_decls (type, decl)\n-     tree type, decl;\n+grok_enum_decls (decl)\n+     tree decl;\n {\n   tree d = current_local_enum;\n   \n@@ -11405,7 +11395,6 @@ grok_enum_decls (type, decl)\n   \n   while (1)\n     {\n-      TREE_TYPE (d) = type;\n       if (TREE_CHAIN (d) == NULL_TREE)\n \t{\n \t  TREE_CHAIN (d) = decl;\n@@ -11661,8 +11650,16 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n \n   if (DECL_INTERFACE_KNOWN (decl1))\n     {\n+      tree ctx = hack_decl_function_context (decl1);\n+\n       if (DECL_NOT_REALLY_EXTERN (decl1))\n \tDECL_EXTERNAL (decl1) = 0;\n+\n+      if (ctx != NULL_TREE && DECL_THIS_INLINE (ctx) \n+\t  && TREE_PUBLIC (ctx))\n+\t/* This is a function in a local class in an extern inline\n+\t   function.  */\n+\tcomdat_linkage (decl1);\n     }\n   /* If this function belongs to an interface, it is public.\n      If it belongs to someone else's interface, it is also external."}, {"sha": "253e8bf598c655bb6e7aa88518026cb4ee552091", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=86052cc3d8e276609904697ebb3db98cf67c5e11", "patch": "@@ -916,7 +916,7 @@ grok_x_components (specs, components)\n \t\t  break;\n \t    }\n \t  else if (TREE_CODE (t) == ENUMERAL_TYPE)\n-\t    x = grok_enum_decls (t, NULL_TREE);\n+\t    x = grok_enum_decls (NULL_TREE);\n \t  else\n \t    x = NULL_TREE;\n \t  return x;\n@@ -929,13 +929,12 @@ grok_x_components (specs, components)\n \t}\n     }\n   else\n-    {\n-      t = TREE_TYPE (components);\n-      if (TREE_CODE (t) == ENUMERAL_TYPE && TREE_NONLOCAL_FLAG (t))\n-\treturn grok_enum_decls (t, components);\n-      else\n-\treturn components;\n-    }\n+    /* There may or may not be any enum decls to grok, but\n+       grok_enum_decls will just return components, if there aren't\n+       any.  We used to try to figure out whether or not there were\n+       any enum decls based on the type of components, but that's too\n+       hard; it might be something like `enum { a } *p;'.  */\n+    return grok_enum_decls (components);\n }\n \n /* Classes overload their constituent function names automatically."}, {"sha": "a4c51dc7c36afc0dc105b130a3b63d7888f5a300", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86052cc3d8e276609904697ebb3db98cf67c5e11/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=86052cc3d8e276609904697ebb3db98cf67c5e11", "patch": "@@ -1401,7 +1401,7 @@ convert_nontype_argument (type, expr)\n      \n      --the name of an object or function with external linkage,\n      including function templates and function template-ids but\n-     excluding non- tatic class members, expressed as id-expression;\n+     excluding non-static class members, expressed as id-expression;\n      or\n      \n      --the address of an object or function with external linkage,\n@@ -1412,13 +1412,16 @@ convert_nontype_argument (type, expr)\n      \n      --a pointer to member expressed as described in _expr.unary.op_.  */\n \n+  /* An integral constant-expression can include const variables\n+     or enumerators.  */\n+  if (INTEGRAL_TYPE_P (expr_type) && TREE_READONLY_DECL_P (expr))\n+    expr = decl_constant_value (expr);\n+\n   if (INTEGRAL_TYPE_P (expr_type) \n       || TYPE_PTRMEM_P (expr_type) \n       || TYPE_PTRMEMFUNC_P (expr_type))\n     {\n-      if (!TREE_CONSTANT (expr) \n-\t  /* FIXME: Should this case be handled by fold()?  Why not?  */\n-\t  && !(TREE_CODE (expr) == VAR_DECL && TREE_READONLY (expr)))\n+      if (! TREE_CONSTANT (expr))\n \t{\n \t  cp_error (\"non-constant `%E' cannot be used as template argument\",\n \t\t    expr);\n@@ -5874,7 +5877,7 @@ tsubst_enum (tag, args, nargs, field_chain)\n   finish_enum (newtag, values);\n \n   if (NULL != field_chain)\n-    *field_chain = grok_enum_decls (newtag, NULL_TREE);\n+    *field_chain = grok_enum_decls (NULL_TREE);\n \n   current_local_enum = prev_local_enum;\n "}]}