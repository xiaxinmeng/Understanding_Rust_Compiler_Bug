{"sha": "b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkOGQ4OGVmYTRkODQ2N2QzYjA2NTdjYzhhNGEzZTE5MTNkOTM5Yw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-06-16T20:52:03Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-06-16T20:52:03Z"}, "message": "PR tree-optimization/80934 - bzero should be assumed not to escape pointer argument\n\nPR tree-optimization/80934 - bzero should be assumed not to escape pointer argument\nPR tree-optimization/80933 - redundant bzero/bcopy calls not eliminated\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/80933\n\tPR tree-optimization/80934\n\t* builtins.c (fold_builtin_3): Do not handle bcmp here.\n\t* gimple-fold.c (gimple_fold_builtin_bcmp): New function.\n\t(gimple_fold_builtin_bcopy, gimple_fold_builtin_bzero): Likewise.\n\t(gimple_fold_builtin): Call them.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/80933\n\tPR tree-optimization/80934\n\t* gcc.dg/fold-bcopy.c: New test.\n\t* gcc.dg/tree-ssa/ssa-dse-30.c: Likewise..\n\t* gcc.dg/tree-ssa/alias-36.c: Likewise.\n\t* gcc/testsuite/gcc.dg/pr79214.c: Adjust.\n\t* gcc.dg/tree-prof/val-prof-7.c: Likewise.\n\t* gcc.dg/Wsizeof-pointer-memaccess1.c: Likewise.\n\t* gcc.dg/builtins-nonnull.c: Likewise.\n\nFrom-SVN: r249278", "tree": {"sha": "47083e874bec3afb22da189b754fb2bf2cfc4b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47083e874bec3afb22da189b754fb2bf2cfc4b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa11163b181893ed79dc1c75547b0109b342372e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa11163b181893ed79dc1c75547b0109b342372e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa11163b181893ed79dc1c75547b0109b342372e"}], "stats": {"total": 245, "additions": 224, "deletions": 21}, "files": [{"sha": "f8412afc58f484711887df8982841bba04950bc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -1,3 +1,12 @@\n+2017-06-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80933\n+\tPR tree-optimization/80934\n+\t* builtins.c (fold_builtin_3): Do not handle bcmp here.\n+\t* gimple-fold.c (gimple_fold_builtin_bcmp): New function.\n+\t(gimple_fold_builtin_bcopy, gimple_fold_builtin_bzero): Likewise.\n+\t(gimple_fold_builtin): Call them.\n+\n 2017-06-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gimple-ssa-isolate-paths.c (isolate_path): Set edge leading to path"}, {"sha": "ce657bf9e30a248e30abf8e3f71bee10bb2efe69", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -9034,7 +9034,6 @@ fold_builtin_3 (location_t loc, tree fndecl,\n \treturn do_mpfr_remquo (arg0, arg1, arg2);\n     break;\n \n-    case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n       return fold_builtin_memcmp (loc, arg0, arg1, arg2);;\n "}, {"sha": "a00c2c88713bb39c2040928ce8b03a059279b3c2", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 83, "deletions": 5, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -1077,6 +1077,83 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* Transform a call to built-in bcmp(a, b, len) at *GSI into one\n+   to built-in memcmp (a, b, len).  */\n+\n+static bool\n+gimple_fold_builtin_bcmp (gimple_stmt_iterator *gsi)\n+{\n+  tree fn = builtin_decl_implicit (BUILT_IN_MEMCMP);\n+\n+  if (!fn)\n+    return false;\n+\n+  /* Transform bcmp (a, b, len) into memcmp (a, b, len).  */\n+\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree a = gimple_call_arg (stmt, 0);\n+  tree b = gimple_call_arg (stmt, 1);\n+  tree len = gimple_call_arg (stmt, 2);\n+\n+  gimple *repl = gimple_build_call (fn, 3, a, b, len);\n+  replace_call_with_call_and_fold (gsi, repl);\n+\n+  return true;\n+}\n+\n+/* Transform a call to built-in bcopy (src, dest, len) at *GSI into one\n+   to built-in memmove (dest, src, len).  */\n+\n+static bool\n+gimple_fold_builtin_bcopy (gimple_stmt_iterator *gsi)\n+{\n+  tree fn = builtin_decl_implicit (BUILT_IN_MEMMOVE);\n+\n+  if (!fn)\n+    return false;\n+\n+  /* bcopy has been removed from POSIX in Issue 7 but Issue 6 specifies\n+     it's quivalent to memmove (not memcpy).  Transform bcopy (src, dest,\n+     len) into memmove (dest, src, len).  */\n+\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree src = gimple_call_arg (stmt, 0);\n+  tree dest = gimple_call_arg (stmt, 1);\n+  tree len = gimple_call_arg (stmt, 2);\n+\n+  gimple *repl = gimple_build_call (fn, 3, dest, src, len);\n+  gimple_call_set_fntype (as_a <gcall *> (stmt), TREE_TYPE (fn));\n+  replace_call_with_call_and_fold (gsi, repl);\n+\n+  return true;\n+}\n+\n+/* Transform a call to built-in bzero (dest, len) at *GSI into one\n+   to built-in memset (dest, 0, len).  */\n+\n+static bool\n+gimple_fold_builtin_bzero (gimple_stmt_iterator *gsi)\n+{\n+  tree fn = builtin_decl_implicit (BUILT_IN_MEMSET);\n+\n+  if (!fn)\n+    return false;\n+\n+  /* Transform bzero (dest, len) into memset (dest, 0, len).  */\n+\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree dest = gimple_call_arg (stmt, 0);\n+  tree len = gimple_call_arg (stmt, 1);\n+\n+  gimple_seq seq = NULL;\n+  gimple *repl = gimple_build_call (fn, 3, dest, integer_zero_node, len);\n+  gimple_seq_add_stmt_without_update (&seq, repl);\n+  gsi_replace_with_seq_vops (gsi, seq);\n+  fold_stmt (gsi);\n+\n+  return true;\n+}\n+\n /* Fold function call to builtin memset or bzero at *GSI setting the\n    memory of size LEN to VAL.  Return whether a simplification was made.  */\n \n@@ -3288,16 +3365,17 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   enum built_in_function fcode = DECL_FUNCTION_CODE (callee);\n   switch (fcode)\n     {\n+    case BUILT_IN_BCMP:\n+      return gimple_fold_builtin_bcmp (gsi);\n+    case BUILT_IN_BCOPY:\n+      return gimple_fold_builtin_bcopy (gsi);\n     case BUILT_IN_BZERO:\n-      return gimple_fold_builtin_memset (gsi, integer_zero_node,\n-\t\t\t\t\t gimple_call_arg (stmt, 1));\n+      return gimple_fold_builtin_bzero (gsi);\n+\n     case BUILT_IN_MEMSET:\n       return gimple_fold_builtin_memset (gsi,\n \t\t\t\t\t gimple_call_arg (stmt, 1),\n \t\t\t\t\t gimple_call_arg (stmt, 2));\n-    case BUILT_IN_BCOPY:\n-      return gimple_fold_builtin_memory_op (gsi, gimple_call_arg (stmt, 1),\n-\t\t\t\t\t    gimple_call_arg (stmt, 0), 3);\n     case BUILT_IN_MEMCPY:\n       return gimple_fold_builtin_memory_op (gsi, gimple_call_arg (stmt, 0),\n \t\t\t\t\t    gimple_call_arg (stmt, 1), 0);"}, {"sha": "962c3887c34326e845325b3f33c4e8c7600f98b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -1,3 +1,15 @@\n+2017-06-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80933\n+\tPR tree-optimization/80934\n+\t* gcc.dg/fold-bcopy.c: New test.\n+\t* gcc.dg/tree-ssa/ssa-dse-30.c: Likewise..\n+\t* gcc.dg/tree-ssa/alias-36.c: Likewise.\n+\t* gcc/testsuite/gcc.dg/pr79214.c: Adjust.\n+\t* gcc.dg/tree-prof/val-prof-7.c: Likewise.\n+\t* gcc.dg/Wsizeof-pointer-memaccess1.c: Likewise.\n+\t* gcc.dg/builtins-nonnull.c: Likewise.\n+\n 2017-06-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR target/71778"}, {"sha": "f4e8552918d28499260e0d02318a57591f448b87", "filename": "gcc/testsuite/gcc.dg/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -1,6 +1,6 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall -Wno-sizeof-array-argument\" } */\n+/* { dg-options \"-Wall -Wno-sizeof-array-argument -Wno-stringop-overflow\" } */\n /* { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "726f8e199da3c8bfd903afa3bb21b0fb974ca90f", "filename": "gcc/testsuite/gcc.dg/builtins-nonnull.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -24,8 +24,9 @@ void sink (int, ...);\n \n void test_memfuncs (void *s, unsigned n)\n {\n-  /* Bzero is not declared attribute nonnull.  */\n-  bzero (null (), n);\n+  /* Bzero is not declared attribute nonnull (maybe it should be?)\n+     but it's transformed into a call to memset() which is.  */\n+  bzero (null (), n);             /* { dg-warning \"argument 1 null where non-null expected\" } */\n \n   T (memcpy (null (), s, n));     /* { dg-warning \"argument 1 null where non-null expected\" } */\n   T (memcpy (s, null (), n));     /* { dg-warning \"argument 2 null where non-null expected\" } */"}, {"sha": "ed6cd0603392ac445ac28a93d53b37d1423f6c70", "filename": "gcc/testsuite/gcc.dg/fold-bcopy.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bcopy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bcopy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bcopy.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -0,0 +1,54 @@\n+/* PR tree-optimization/80933 - redundant bzero/bcopy calls not eliminated\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -fdump-tree-gimple\" } */\n+\n+void f0 (void *dst, const void *src, unsigned n)\n+{\n+  /* Bcopy(src, dst, ...) corresponds to memmove(dst, src, ...),\n+     with the first two arguments transposed, not memcpy.  */\n+  __builtin_bcopy (src, dst, n);\n+}\n+\n+void f1 (void *p, const void *q, unsigned n)\n+{\n+  /* A call with zero size should be eliminated.  */\n+  __builtin_bcopy (q, p, 0);\n+}\n+\n+int f2 (const void *p, const void *q, unsigned n)\n+{\n+  return __builtin_bcmp (p, q, n);\n+}\n+\n+int f3 (const void *p, const void *q)\n+{\n+  /* A call with zero size should be folded into 0.  */\n+  return __builtin_bcmp (p, q, 0);\n+}\n+\n+int f4 (const void *p, unsigned n)\n+{\n+  /* A call with the same argument should also be folded into 0.  */\n+  return __builtin_bcmp (p, p, n);\n+}\n+\n+void f5 (void *p, unsigned n)\n+{\n+  __builtin_bzero (p, n);\n+}\n+\n+void f6 (void *p)\n+{\n+  /* A call with zero size should be eliminated.  */\n+  __builtin_bzero (p, 0);\n+}\n+\n+/* Verify that calls to bcmp, bcopy, and bzero have all been removed\n+   and one of each replaced with memcmp, memmove, and memset, respectively.\n+   The remaining three should be eliminated.\n+  { dg-final { scan-tree-dump-not \"bcmp|bcopy|bzero\" \"gimple\" } }\n+  { dg-final { scan-tree-dump-times \"memcmp|memmove|memset\" 3 \"gimple\" } }\n+\n+  Verify that the bcopy to memmove transformation correctly transposed\n+  the source and destination pointer arguments.\n+  { dg-final { scan-tree-dump-times \"memmove \\\\(dst, src\" 1 \"gimple\" } }  */"}, {"sha": "6cf254fb28d917ede4a3b90a5740c66e48fdb937", "filename": "gcc/testsuite/gcc.dg/pr79214.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -22,7 +22,7 @@ size_t range (void)\n \n void test_bzero (void)\n {\n-  bzero (d, range ());   /* { dg-warning \".__builtin_bzero. writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n+  bzero (d, range ());   /* { dg-warning \".__builtin_(bzero|memset). writing 4 or more bytes into a region of size 3 overflows the destination\" } */\n }\n \n void test_memcpy (void)"}, {"sha": "5a4e77712e3043ce99dc41e917f80193dbe35a85", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-7.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -4,14 +4,10 @@\n char *buffer1;\n char *buffer2;\n \n+/* Bzero is not tested because it gets transformed into memset.  */\n+\n #define DEFINE_TEST(N) \\\n __attribute__((noinline)) \\\n-void bzero_test_ ## N (int len) \\\n-{ \\\n-  __builtin_bzero (buffer1, len); \\\n-} \\\n- \\\n-__attribute__((noinline)) \\\n void memcpy_test_ ## N (int len) \\\n { \\\n   __builtin_memcpy (buffer1, buffer2, len); \\\n@@ -31,7 +27,6 @@ void memset_test_ ## N (int len) \\\n  \\\n void test_stringops_ ## N(int len) \\\n { \\\n-  bzero_test_ ## N (len); \\\n   memcpy_test_## N (len); \\\n   mempcpy_test_ ## N (len); \\\n   memset_test_ ## N (len); \\\n@@ -64,10 +59,6 @@ int main() {\n   return 0;\n }\n \n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_bzero\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 55 stringop transformation on __builtin_bzero\" \"profile\" } } */\n-/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 32 stringop transformation on __builtin_bzero\" 0 \"profile\" } } */\n-\n /* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_memcpy\" \"profile\" } } */\n /* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 55 stringop transformation on __builtin_memcpy\" \"profile\" } } */\n /* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 32 stringop transformation on __builtin_memcpy\" 0 \"profile\" } } */"}, {"sha": "61b601a229eb1f5f6cf075cde86dda8c29f84c95", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-36.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-36.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/80934 - bzero should be assumed not to escape\n+   pointer argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -fdump-tree-alias\" } */\n+\n+void foobar (void);\n+\n+void f (void);\n+\n+void g (void)\n+{\n+  char d[32];\n+  __builtin_memset (d, 0, sizeof d);\n+  f ();\n+  if (*d != 0)\n+    foobar ();\n+}\n+\n+void h (void)\n+{\n+  char d[32];\n+  __builtin_bzero (d, sizeof d);\n+  f ();\n+  if (*d != 0)\n+    foobar ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"memset|foobar|bzero\" \"alias\" } } */"}, {"sha": "ece8cb2a80ca88ebe3fb3dfa79ea023048f2cb01", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-30.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-30.c?ref=b3d8d88efa4d8467d3b0657cc8a4a3e1913d939c", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/80933 - redundant bzero/bcopy calls not eliminated\n+   { dg-do compile }\n+   { dg-options \"-O2 -fdump-tree-dse1\" } */\n+\n+void sink (void*);\n+\n+void test_bcopy (const void *s)\n+{\n+  char d[33];\n+\n+  /* Bcopy is transformed into memcpy and those calls are expanded\n+     inline in EVRP, before DSE runs, so this test doesn't actually\n+     verify that DSE does its job.  */\n+  __builtin_bcopy (s, d, sizeof d);\n+  __builtin_bcopy (s, d, sizeof d);\n+\n+  sink (d);\n+}\n+\n+void test_bzero (void)\n+{\n+  char d[33];\n+\n+  __builtin_bzero (d, sizeof d);\n+  __builtin_bzero (d, sizeof d);\n+\n+  sink (d);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"builtin_memset\" 1 \"dse1\" } } */\n+/* { dg-final { scan-tree-dump-not \"builtin_(bcopy|bzero|memcpy)\" \"dse1\" } } */"}]}