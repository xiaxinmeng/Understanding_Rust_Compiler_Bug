{"sha": "2be2ac706e998c7383115f5b6c56412233f7b587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlMmFjNzA2ZTk5OGM3MzgzMTE1ZjViNmM1NjQxMjIzM2Y3YjU4Nw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-07-25T05:14:23Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-07-25T05:14:23Z"}, "message": "defaults.h (ASM_OUTPUT_TYPE_DIRECTIVE, [...]): New default definitions of new macros.\n\n\t* defaults.h (ASM_OUTPUT_TYPE_DIRECTIVE, ASM_OUTPUT_SIZE_DIRECTIVE,\n\tASM_OUTPUT_MEASURED_SIZE): New default definitions of new macros.\n\t* doc/tm.texi: Document them.  Also document SIZE_ASM_OP,\n\tTYPE_ASM_OP, and TYPE_OPERAND_FMT.\n\n\t* config/elfos.h, config/netbsd-aout.h, config/openbsd.h,\n\tconfig/alpha/elf.h, config/arm/elf.h, config/avr/avr.h,\n\tconfig/cris/aout.h, config/i386/freebsd-aout.h,\n\tconfig/i386/sco5.h, config/ia64/ia64.c, config/ip2k/ip2k.h,\n\tconfig/m68k/m68kelf.h, config/m68k/m68kv4.h, config/m88k/m88k.h,\n\tconfig/mcore/mcore-elf.h, config/mips/elf.h, config/mips/elf64.h,\n\tconfig/mips/iris6.h, config/mips/linux.h, config/pa/pa-linux.h,\n\tconfig/pa/pa64-hpux.h, config/rs6000/sysv4.h,\n\tconfig/xtensa/elf.h, config/xtensa/linux.h:\n\tUse the new macros.\n\tWhere possible, remove redundant definitions of SIZE_ASM_OP,\n\tTYPE_ASM_OP, and TYPE_OPERAND_FMT.\n\nFrom-SVN: r55735", "tree": {"sha": "720e723430a5cd77cbcbfddab0ff33078b4a2c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/720e723430a5cd77cbcbfddab0ff33078b4a2c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be2ac706e998c7383115f5b6c56412233f7b587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be2ac706e998c7383115f5b6c56412233f7b587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be2ac706e998c7383115f5b6c56412233f7b587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be2ac706e998c7383115f5b6c56412233f7b587/comments", "author": null, "committer": null, "parents": [{"sha": "518878e18ad35ced635942a7c37ac4984e07926f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518878e18ad35ced635942a7c37ac4984e07926f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518878e18ad35ced635942a7c37ac4984e07926f"}], "stats": {"total": 923, "additions": 410, "deletions": 513}, "files": [{"sha": "25628997ce97bb4a46a0e447a82637e50bc00eb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -1,3 +1,23 @@\n+2002-07-24  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* defaults.h (ASM_OUTPUT_TYPE_DIRECTIVE, ASM_OUTPUT_SIZE_DIRECTIVE,\n+\tASM_OUTPUT_MEASURED_SIZE): New default definitions of new macros.\n+\t* doc/tm.texi: Document them.  Also document SIZE_ASM_OP,\n+\tTYPE_ASM_OP, and TYPE_OPERAND_FMT.\n+\n+\t* config/elfos.h, config/netbsd-aout.h, config/openbsd.h,\n+\tconfig/alpha/elf.h, config/arm/elf.h, config/avr/avr.h,\n+\tconfig/cris/aout.h, config/i386/freebsd-aout.h,\n+\tconfig/i386/sco5.h, config/ia64/ia64.c, config/ip2k/ip2k.h,\n+\tconfig/m68k/m68kelf.h, config/m68k/m68kv4.h, config/m88k/m88k.h,\n+\tconfig/mcore/mcore-elf.h, config/mips/elf.h, config/mips/elf64.h,\n+\tconfig/mips/iris6.h, config/mips/linux.h, config/pa/pa-linux.h,\n+\tconfig/pa/pa64-hpux.h, config/rs6000/sysv4.h,\n+\tconfig/xtensa/elf.h, config/xtensa/linux.h:\n+\tUse the new macros.\n+\tWhere possible, remove redundant definitions of SIZE_ASM_OP,\n+\tTYPE_ASM_OP, and TYPE_OPERAND_FMT.\n+\n 2002-07-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/eabi.h: Define TARGET_SPE_ABI, TARGET_SPE,"}, {"sha": "15018aad4dd461ab5119c9dfc29cd74dcaf12f17", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -142,17 +142,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     sbss_section();\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     bss_section();\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-  assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-  putc (',', FILE);\t\t\t\t\t\t\t\\\n-  fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-  putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n   if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\t\\\n-      fprintf (FILE, \",%d\\n\", (SIZE));\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);\t\t\t\\\n   ASM_OUTPUT_ALIGN ((FILE), exact_log2((ALIGN) / BITS_PER_UNIT));\t\\\n   ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t\\\n   ASM_OUTPUT_SKIP((FILE), (SIZE) ? (SIZE) : 1);\t\t\t\t\\\n@@ -331,22 +323,14 @@ void FN ()\t\t\t\t\t\\\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     HOST_WIDE_INT size;\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n     size_directive_output = 0;\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive\t\t\t\t\\\n \t&& DECL_SIZE (DECL)\t\t\t\t\t\\\n \t&& (size = int_size_in_bytes (TREE_TYPE (DECL))) > 0)\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\\\n-\tfputc (',', FILE);\t\t\t\t\t\\\n-\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC, size);\t\t\\\n-\tfputc ('\\n', FILE);\t\t\t\t\t\\\n+        ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n   } while (0)\n@@ -370,11 +354,7 @@ void FN ()\t\t\t\t\t\\\n \t&& (size = int_size_in_bytes (TREE_TYPE (DECL))) > 0)\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, name);\t\t\t\t\t\\\n-\tfputc (',', FILE);\t\t\t\t\t\t\\\n-\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC, size);\t\t\t\\\n-\tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n+\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n "}, {"sha": "6b3da4825b61f456fa243a2ed5c5febd5fb9e977", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -62,18 +62,14 @@ Boston, MA 02111-1307, USA.  */\n \n /* We might need a ARM specific header to function declarations.  */\n #undef  ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      ARM_DECLARE_FUNCTION_NAME (FILE, NAME, DECL);     \\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n-      putc ('\\n', FILE);\t\t\t\t\\\n-      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ARM_DECLARE_FUNCTION_NAME (FILE, NAME, DECL);\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* We might need an ARM specific trailer for function declarations.  */\n@@ -89,13 +85,7 @@ Boston, MA 02111-1307, USA.  */\n \t  labelno ++;\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-          fprintf (FILE, \",\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, label);\t\t\t\t\\\n-          fprintf (FILE, \"-\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\\\n         }\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "0090dbe8c0a82c2824db869a8cc403cd224df83c", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -1950,16 +1950,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n    is just a default.  You may need to override it in your machine-\n    specific tm.h file (depending upon the particulars of your assembler).  */\n \n-\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n-do {\t\t\t\t\t\t   \t\\\n-     fprintf (FILE, \"%s\", TYPE_ASM_OP);\t   \t\t\\\n-     assemble_name (FILE, NAME);\t\t   \t\\\n-     putc (',', FILE);\t\t\t\t   \t\\\n-     fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n-     putc ('\\n', FILE);\t\t\t\t   \t\\\n-     ASM_OUTPUT_LABEL (FILE, NAME);\t\t   \t\\\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+     ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+     ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n } while (0)\n+\n /* A C statement (sans semicolon) to output to the stdio stream\n    STREAM any text necessary for declaring the name NAME of a\n    function which is being defined.  This macro is responsible for\n@@ -1979,13 +1975,7 @@ do {\t\t\t\t\t\t   \t\\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, label);\t\t\t\t\t\\\n-        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n+\tASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n /* A C statement (sans semicolon) to output to the stdio stream\n@@ -1997,22 +1987,17 @@ do {\t\t\t\t\t\t   \t\\\n    If this macro is not defined, then the function size is not\n    defined.  */\n \n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t  \\\n-do {\t\t\t\t\t\t\t\t\t  \\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t  \\\n-      assemble_name (FILE, NAME);\t\t\t\t\t  \\\n-      putc (',', FILE);\t\t\t\t\t\t\t  \\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t  \\\n-      putc ('\\n', FILE);\t\t\t\t\t\t  \\\n-      size_directive_output = 0;\t\t\t\t\t  \\\n-      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t  \\\n-\t{\t\t\t\t\t\t\t\t  \\\n-\t  size_directive_output = 1;\t\t\t\t\t  \\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t  \\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\t  \\\n-\t  fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n-    }\t\t\t\t\t\t\t\t\t  \\\n-  ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t  \\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n+  size_directive_output = 0;\t\t\t\t\t\t\\\n+  if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      size_directive_output = 1;\t\t\t\t\t\\\n+      ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME,\t\t\t\t\\\n+\t\t\t\t int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t\\\n } while (0)\n /* A C statement (sans semicolon) to output to the stdio stream\n    STREAM any text necessary for declaring the name NAME of an\n@@ -2027,17 +2012,18 @@ do {\t\t\t\t\t\t\t\t\t  \\\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n+\n /* A C statement (sans semicolon) to finish up declaring a variable\n    name once the compiler has processed its initializer fully and\n    thus has had a chance to determine the size of an array when"}, {"sha": "b6dda1e87290a8806fb7bfc19ef57ac4bc28d744", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -288,42 +288,30 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\\\n   while (0)\n \n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n-      putc ('\\n', FILE);\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       size_directive_output = 0;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive\t\t\t\t\\\n \t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\\\n-\t  putc (',', FILE);\t\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n-\t\t   int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-\t  fputc ('\\n', FILE);\t\t\t\t\t\\\n+          size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+          ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n \t}\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -332,6 +320,7 @@ Boston, MA 02111-1307, USA.  */\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n       \t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive\t\t\t\t\\\n \t  && DECL_SIZE (DECL)\t\t\t\t\t\\\n@@ -340,12 +329,8 @@ Boston, MA 02111-1307, USA.  */\n \t  && !size_directive_output)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, name);\t\t\t\t\\\n-\t  putc (',', FILE);\t\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n-\t\t   int_size_in_bytes (TREE_TYPE (DECL))); \t\\\n-\t  fputc ('\\n', FILE);\t\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -362,14 +347,7 @@ Boston, MA 02111-1307, USA.  */\n \t  \t\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n-\t  \t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, label);\t\t\t\t\\\n-\t  fprintf (FILE, \"-\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "5b0ec6de1713c60e98f0ea50dc88047ca328b7d6", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -291,18 +291,13 @@ Boston, MA 02111-1307, USA.  */\n    function's return value.  We allow for that here.  */\n \n #ifndef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n-      putc ('\\n', FILE);\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n-      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n@@ -311,26 +306,19 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       size_directive_output = 0;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive\t\t\t\t\\\n \t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\\\n-\t  putc (',', FILE);\t\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n-\t\t   int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-\t  fputc ('\\n', FILE);\t\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n \t}\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -345,6 +333,7 @@ Boston, MA 02111-1307, USA.  */\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n       \t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive\t\t\t\t\\\n \t  && DECL_SIZE (DECL)\t\t\t\t\t\\\n@@ -353,12 +342,8 @@ Boston, MA 02111-1307, USA.  */\n \t  && !size_directive_output)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, name);\t\t\t\t\\\n-\t  putc (',', FILE);\t\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n-\t\t   int_size_in_bytes (TREE_TYPE (DECL))); \t\\\n-\t  fputc ('\\n', FILE);\t\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -377,14 +362,7 @@ Boston, MA 02111-1307, USA.  */\n \t  \t\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n-\t  \t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, label);\t\t\t\t\\\n-\t  fprintf (FILE, \"-\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "0c8ad9808ae50a7ab1a3abeb0b7ae4a063bb05df", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -150,36 +150,36 @@ Boston, MA 02111-1307, USA.  */\n    Some svr4 assemblers need to also have something extra said about the\n    function's return value.  We allow for that here.  */\n \n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Write the extra assembler code needed to declare an object properly.  */\n \n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        size_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      size_directive_output = 0;\t\t\t\t\\\n+      if (!flag_inhibit_size_directive\t\t\t\t\\\n+\t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Output the size directive for a decl in rest_of_decl_compilation\n    in the case where we did not do so before the initializer.\n@@ -190,18 +190,18 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)        \\\n do {                                                                    \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);            \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t\\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t        \\\n          && ! AT_END && TOP_LEVEL                                       \\\n          && DECL_INITIAL (DECL) == error_mark_node                      \\\n          && !size_directive_output)                                     \\\n        {                                                                \\\n-         fprintf (FILE, \"%s\", SIZE_ASM_OP);                             \\\n-\t assemble_name (FILE, name);                                    \\\n-\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\\\n-\t}\t\t\t\t\t\t\t\t\\\n+\t size_directive_output = 1;\t\t\t\t\t\\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t\\\n+       }\t\t\t\t\t\t\t\t\\\n    } while (0)\n \n-\n /* This is how to declare the size of a function.  */\n \n #define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n@@ -213,13 +213,7 @@ do {                                                                    \\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, label);\t\t\t\t\t\\\n-        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n+\tASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n "}, {"sha": "0373ff9371412738c8acffd38105163f9c215260", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -139,48 +139,38 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n     } else\t\t\t\t\t\t\t\t\\\n       SCO_DEFAULT_ASM_COFF(FILE, NAME);\t\t\t\t\t\\\n } while (0)\n \n #undef ASM_DECLARE_FUNCTION_SIZE\n #define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_ELF) { if (!flag_inhibit_size_directive)\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",.-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t}\t\t\t\t\t\t\t\t\\\n+    if (TARGET_ELF && !flag_inhibit_size_directive)\t\t\t\\\n+      ASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), \".\");\t\t\t\\\n   } while (0)\n \n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       size_directive_output = 0;\t\t\t\t\t\\\n-      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-  \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive\t\t\t\t\t\\\n+\t  && (DECL) && DECL_SIZE (DECL))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n     } else\t\t\t\t\t\t\t\t\\\n       SCO_DEFAULT_ASM_COFF(FILE, NAME);\t\t\t\t\t\\\n   } while (0)\n@@ -198,17 +188,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-  if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n+  if (TARGET_ELF) {\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t \t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n     }\t\t\t\t\t\t\t\t\t \\\n } while (0)"}, {"sha": "4e3e81dd92bae302f81dcaa7c59b825ccc127abd", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -4059,13 +4059,7 @@ ia64_asm_output_external (file, decl, name)\n      restore it.  */\n   save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl));\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n-    {\n-      fprintf (file, \"%s\", TYPE_ASM_OP);\n-      assemble_name (file, name);\n-      putc (',', file);\n-      fprintf (file, TYPE_OPERAND_FMT, \"function\");\n-      putc ('\\n', file);\n-    }\n+    ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n   ASM_GLOBALIZE_LABEL (file, name);\n   TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)) = save_referenced;\n }"}, {"sha": "bf9a604f237e1d766fe20a09aa0bd9fae84d5449", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -2145,13 +2145,7 @@ do {\t\t\t\t\t\t\\\n \tlabelno++;\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n-\tfprintf ((FILE), \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n-\tassemble_name ((FILE), (FNAME));\t\t\t\\\n-        fprintf ((FILE), \",\");\t\t\t\t\t\\\n-\tassemble_name ((FILE), label);\t\t\t\t\\\n-        fprintf ((FILE), \"-\");\t\t\t\t\t\\\n-\tassemble_name ((FILE), (FNAME));\t\t\t\\\n-\tputc ('\\n', (FILE));\t\t\t\t\t\\\n+\tASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\\\n       }\t\t\t\t\t\t\t\t\\\n   } while (0)\n /* A C statement (sans semicolon) to output to the stdio stream\n@@ -2163,8 +2157,6 @@ do {\t\t\t\t\t\t\\\n    If this macro is not defined, then the function size is not\n    defined.  */\n \n-\n-\n #define ESCAPES \\\n \"\\1\\1\\1\\1\\1\\1\\1\\1btn\\1fr\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n \\0\\0\\\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\"}, {"sha": "fef3ebcda8533cbbdea7f81b24ff82d7acae5dd6", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -146,9 +146,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define ASM_COMMENT_START \"|\"\n \n-#undef TYPE_OPERAND_FMT\n-#define TYPE_OPERAND_FMT      \"@%s\"\n-\n /* Define how the m68k registers should be numbered for Dwarf output.\n    The numbering provided here should be compatible with the native\n    SVR4 SDB debugger in the m68k/SVR4 reference port, where d0-d7"}, {"sha": "fbe7c426731cd1625461790781cbe1b928f7f338", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -109,9 +109,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_COMMENT_START \"#\"\n \n-#undef TYPE_OPERAND_FMT\n-#define TYPE_OPERAND_FMT      \"@%s\"\n-\n /* Define how the m68k registers should be numbered for Dwarf output.\n    The numbering provided here should be compatible with the native\n    SVR4 SDB debugger in the m68k/SVR4 reference port, where d0-d7"}, {"sha": "4ee28e8412ff6d18f0eb5a70578a561006156a6d", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -1813,38 +1813,31 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (DECLARE_ASM_NAME)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tputc (',', FILE);\t\t\t\t\t\t\\\n-\tfprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\\\n     ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n   } while (0)\n \n /* Write the extra assembler code needed to declare an object properly.  */\n #undef\tASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t    \\\n-  do {\t\t\t\t\t\t\t\t\t    \\\n-    if (DECLARE_ASM_NAME)\t\t\t\t\t\t    \\\n-      {\t\t\t\t\t\t\t\t\t    \\\n-\tfprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t    \\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t    \\\n-\tputc (',', FILE);\t\t\t\t\t\t    \\\n-\tfprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t    \\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t    \\\n-        size_directive_output = 0;\t\t\t\t\t    \\\n-\tif (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t    \\\n-\t  {\t\t\t\t\t\t\t\t    \\\n-            size_directive_output = 1;\t\t\t\t\t    \\\n-\t    fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t    \\\n-\t    assemble_name (FILE, NAME);\t\t\t\t\t    \\\n-\t    fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n-\t  }\t\t\t\t\t\t\t\t    \\\n-      }\t\t\t\t\t\t\t\t\t    \\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t    \\\n-  } while (0)\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (DECLARE_ASM_NAME)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tHOST_WIDE_INT size;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tsize_directive_output = 0;\t\t\t\t\t\\\n+\tif (!flag_inhibit_size_directive\t\t\t\t\\\n+\t    && (DECL) && DECL_SIZE (DECL))\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    size_directive_output = 1;\t\t\t\t\t\\\n+\t    size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t    ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0);\n \n /* Output the size directive for a decl in rest_of_decl_compilation\n    in the case where we did not do so before the initializer.\n@@ -1856,16 +1849,16 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n \t && DECLARE_ASM_NAME\t\t\t\t\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n \n@@ -1882,11 +1875,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t    labelno++;\t\t\t\t\t\t\t\\\n \t    ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t    ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\t    fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\t    assemble_name (FILE, (FNAME));\t\t\t\t\\\n-\t    fprintf (FILE, \",%s-\", &label[1]);\t\t\t\t\\\n-\t    assemble_name (FILE, (FNAME));\t\t\t\t\\\n-\t    putc ('\\n', FILE);\t\t\t\t\t\t\\\n+\t    ASM_OUTPUT_MEASURED_SIZE (FILE, (FNAME), label);\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "8d748031fa69df4d6a7de0102b9c00142615783b", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -75,50 +75,42 @@ exports_section ()\t\t\t\t\t\t\\\n    Some svr4 assemblers need to also have something extra said about the\n    function's return value.  We allow for that here.  */\n #undef  ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (mcore_dllexport_name_p (NAME))\t\t\\\n-\t{\t\t\t\t\t\t\\\n-          MCORE_EXPORT_NAME (FILE, NAME);\t\t\\\n-\t  function_section (DECL);\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n-      putc ('\\n', FILE);\t\t\t\t\\\n-      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (mcore_dllexport_name_p (NAME))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+          MCORE_EXPORT_NAME (FILE, NAME);\t\t\t\\\n+\t  function_section (DECL);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* Write the extra assembler code needed to declare an object properly.  */\n #undef  ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\t\\\n-      if (mcore_dllexport_name_p (NAME))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\t\\\n-          enum in_section save_section = in_section;\t\t\t\t\\\n-\t  MCORE_EXPORT_NAME (FILE, NAME);\t\t\t\t\t\\\n-          switch_to_section (save_section, (DECL));\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-      size_directive_output = 0;\t\t\t\t\t\t\\\n-      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\t\\\n-          size_directive_output = 1;\t\t\t\t\t\t\\\n-          fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\t\\\n-          assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-          fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-        }\t\t\t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\t\\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+      if (mcore_dllexport_name_p (NAME))\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+          enum in_section save_section = in_section;\t\t\\\n+\t  MCORE_EXPORT_NAME (FILE, NAME);\t\t\t\\\n+          switch_to_section (save_section, (DECL));\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+      size_directive_output = 0;\t\t\t\t\\\n+      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\\\n+        {\t\t\t\t\t\t\t\\\n+          size_directive_output = 1;\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n  \n /* Output the size directive for a decl in rest_of_decl_compilation\n@@ -131,14 +123,15 @@ exports_section ()\t\t\t\t\t\t\\\n   do                                                                     \\\n     {                                                                    \\\n       const char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);           \\\n+      HOST_WIDE_INT size;\t\t\t\t\t\t \\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL)               \\\n           && ! AT_END && TOP_LEVEL                                       \\\n           && DECL_INITIAL (DECL) == error_mark_node                      \\\n           && !size_directive_output)                                     \\\n         {                                                                \\\n-          fprintf (FILE, \"%s\", SIZE_ASM_OP);                             \\\n-          assemble_name (FILE, name);                                    \\\n-          fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\\\n+\t  size_directive_output = 1;\t\t\t\t\t \\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n         }                                                                \\\n     }                                                                    \\\n   while (0)"}, {"sha": "c759f97e5447a51a9c6c0bcf8dda6205a351946a", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -148,21 +148,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n     size_directive_output = 0;\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n-\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n-\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+\tsize = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)\n@@ -177,18 +170,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",\");\t\t\t\t\t\t \\\n-\t fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t \\\n-\t\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t \\\n-\t fprintf (FILE, \"\\n\");\t\t\t\t\t\t \\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n "}, {"sha": "ee226b916dd7f1e40a81b2d55473a4bb085369dd", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -123,21 +123,14 @@ do {\t\t\t\t\t\t\\\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n     size_directive_output = 0;\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n-\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n-\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+\tsize = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)\n@@ -152,18 +145,15 @@ do {\t\t\t\t\t\t\\\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",\");\t\t\t\t\t\t \\\n-\t fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t \\\n-\t\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t \\\n-\t fprintf (FILE, \"\\n\");\t\t\t\t\t\t \\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n "}, {"sha": "4dac304cbf9d6808b862909d45ca99f9a792b236", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -395,15 +395,13 @@ while (0)\n #define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL)\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n  {\t\t\t\t\t\t\t\t\t\\\n+   HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n    size_directive_output = 0;\t\t\t\t\t\t\\\n-   if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\\\n+   if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n        size_directive_output = 1;\t\t\t\t\t\\\n-       fprintf (STREAM, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-       assemble_name (STREAM, NAME);\t\t\t\t\t\\\n-       fprintf (STREAM, \",\");\t\t\t\t\t\t\\\n-       fprintf (STREAM, HOST_WIDE_INT_PRINT_DEC, int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-       fprintf (STREAM, \"\\n\");\t\t\t\t\t\t\\\n+       size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+       ASM_OUTPUT_SIZE_DIRECTIVE (STREAM, NAME, size);\t\t\t\\\n      }\t\t\t\t\t\t\t\t\t\\\n    mips_declare_object (STREAM, NAME, \"\", \":\\n\", 0);\t\t\t\\\n  }\t\t\t\t\t\t\t\t\t\\\n@@ -424,17 +422,15 @@ while (0)\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",\");\t\t\t\t\t\t \\\n-\t fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, int_size_in_bytes (TREE_TYPE (DECL))); \\\n-\t fprintf (FILE, \"\\n\");\t\t\t\t\t\t \\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n "}, {"sha": "1e805b67d16b7f186bf1a35f9f27be46ca49062e", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -67,25 +67,18 @@ do {\t\t\t\t\t\t\t\t\\\n /* Write the extra assembler code needed to declare an object properly.  */\n \n #undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\\\n-\tfprintf (FILE, \",\");\t\t\t\t\t\\\n-\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\\\n-\t\t int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n-\tfprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n+    size_directive_output = 0;\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tsize_directive_output = 1;\t\t\t\t\t\\\n+\tsize = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)\n \n #define TARGET_ASM_UNIQUE_SECTION  mips_unique_section\n@@ -229,11 +222,7 @@ void FN ()\t\t\t\t\t\t\t\\\n \tassemble_name (STREAM, NAME);\t\t\t\t\t\\\n \tputc ('\\n', STREAM);\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n-    assemble_name (STREAM, NAME);\t\t\t\t\t\\\n-    putc (',', STREAM);\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', STREAM);\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (STREAM, NAME, \"function\");\t\t\\\n     assemble_name (STREAM, NAME);\t\t\t\t\t\\\n     fputs (\":\\n\", STREAM);\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "7111a703ae5da9bfc41cc6ca757952520075c199", "filename": "gcc/config/netbsd-aout.h", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fnetbsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fnetbsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-aout.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -135,11 +135,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n       ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -148,29 +144,26 @@ Boston, MA 02111-1307, USA.  */\n \n /* Write the extra assembler code needed to declare an object properly.  */\n \n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n-      size_directive_output = 0;\t\t\t\t\t\\\n-      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  size_directive_output = 1;\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t  fprintf (FILE, \",%d\\n\",\t\t\t\t\t\\\n-\t           int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      size_directive_output = 0;\t\t\t\t\\\n+      if (!flag_inhibit_size_directive\t\t\t\t\\\n+\t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-\n /* Output the size directive for a decl in rest_of_decl_compilation\n    in the case where we did not do so before the initializer.\n    Once we find the error_mark_node, we know that the value of\n@@ -182,16 +175,15 @@ Boston, MA 02111-1307, USA.  */\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t\\\n \t  && ! AT_END && TOP_LEVEL\t\t\t\t\t\\\n \t  && DECL_INITIAL (DECL) == error_mark_node\t\t\t\\\n \t  && !size_directive_output)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\t  assemble_name (FILE, name);\t\t\t\t\t\\\n-\t  fprintf (FILE, \",%d\\n\",\t\t\t\t\t\\\n-\t\t   int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -210,13 +202,7 @@ Boston, MA 02111-1307, USA.  */\n \t  labelno++;\t\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\t  assemble_name (FILE, label);\t\t\t\t\t\\\n-\t  fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE (FILE, FNAME, label);\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "e9a4ea4b5bd1316924c4dcc8f5c82c08ceb7839b", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -203,11 +203,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fputs (\" , \", FILE);\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\t\\\n     ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n     ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n   } while (0)\n@@ -219,35 +215,26 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tfputs (\" , . - \", FILE);\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_MEASURED_SIZE (FILE, FNAME, \".\");\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef OBSD_HAS_DECLARE_OBJECT\n /* Extra assembler code needed to declare an object properly.  */\n #undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fputs (\" , \", FILE);\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \" , %d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n+      size_directive_output = 0;\t\t\t\t\\\n+      if (!flag_inhibit_size_directive\t\t\t\t\\\n+\t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n   } while (0)\n \n /* Output the size directive for a decl in rest_of_decl_compilation\n@@ -259,15 +246,15 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n+     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \" , %d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));\\\n+\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n+\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n #endif"}, {"sha": "c4eae9b70b37d0c720cbe5aa75a80c487c09780f", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -189,11 +189,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "c82e185434a514a5519825bd5ecd199ac9e4a513", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -130,29 +130,12 @@ do {  \\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-/* Define the strings used for the special svr4 .type and .size directives.\n-   These strings generally do not vary from one system running svr4 to\n-   another, but if a given system (e.g. m88k running svr) needs to use\n-   different pseudo-op names for these, they may be overridden in the\n-   file which includes this one.  */\n-\n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-\n /* This is how we tell the assembler that a symbol is weak.  */\n \n #define ASM_WEAKEN_LABEL(FILE,NAME) \\\n   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n        fputc ('\\n', FILE); } while (0)\n \n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-\n /* Write the extra assembler code needed to declare a function's result.\n    Most svr4 assemblers don't require any special declaration of the\n    result value, but there are exceptions.  */"}, {"sha": "5db848759fcc8ed9443f848fa3ec7dea133d1c9d", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -610,11 +610,7 @@ extern int rs6000_pic_labelno;\n \tputc ('\\n', FILE);\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\t\\\n     ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     if (DEFAULT_ABI == ABI_AIX)\t\t\t\t\t\t\\\n@@ -715,11 +711,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n       ASM_OUTPUT_SKIP (FILE, SIZE);\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive && (SIZE) > 0)\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t  fprintf (FILE, \",%d\\n\",  SIZE);\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n+\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "fec82753b5d74a2f6ba243e597d6e16870ae120b", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -120,14 +120,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t  \t\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n-\t  \t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, label);\t\t\t\t\\\n-\t  fprintf (FILE, \"-\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE (FILE, FNAME, label);\t\\\n \t}\t\t\t\t\t\t\t\\\n       XTENSA_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL);\t\t\\\n     }\t\t\t\t\t\t\t\t\\"}, {"sha": "c15bfd927d5e88fc7db922c8f5820292893032d7", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -76,14 +76,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t  \t\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n-\t  \t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, label);\t\t\t\t\\\n-\t  fprintf (FILE, \"-\");\t\t\t\t\t\\\n-\t  assemble_name (FILE, (FNAME));\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE (FILE, FNAME, label);\t\\\n \t}\t\t\t\t\t\t\t\\\n       XTENSA_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL);\t\t\\\n     }\t\t\t\t\t\t\t\t\\"}, {"sha": "ef83bdd087b90dc2590c0ccd31bc4e816569c34d", "filename": "gcc/defaults.h", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -169,6 +169,53 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n #endif\n #endif\n \n+/* How to emit a .type directive.  */\n+#ifndef ASM_OUTPUT_TYPE_DIRECTIVE\n+#if defined TYPE_ASM_OP && defined TYPE_OPERAND_FMT\n+#define ASM_OUTPUT_TYPE_DIRECTIVE(STREAM, NAME, TYPE)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fputs (TYPE_ASM_OP, STREAM);\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\\\n+      fputs (\", \", STREAM);\t\t\t\t\\\n+      fprintf (STREAM, TYPE_OPERAND_FMT, TYPE);\t\t\\\n+      putc ('\\n', STREAM);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n+#endif\n+\n+/* How to emit a .size directive.  */\n+#ifndef ASM_OUTPUT_SIZE_DIRECTIVE\n+#ifdef SIZE_ASM_OP\n+#define ASM_OUTPUT_SIZE_DIRECTIVE(STREAM, NAME, SIZE)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size_ = (SIZE);\t\t\t\\\n+      fputs (SIZE_ASM_OP, STREAM);\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\\\n+      fputs (\", \", STREAM);\t\t\t\t\\\n+      fprintf (STREAM, HOST_WIDE_INT_PRINT_DEC, size_);\t\\\n+      putc ('\\n', STREAM);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define ASM_OUTPUT_MEASURED_SIZE(STREAM, BEG, END)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fputs (SIZE_ASM_OP, STREAM);\t\t\t\\\n+      assemble_name (STREAM, BEG);\t\t\t\\\n+      fputs (\", \", STREAM);\t\t\t\t\\\n+      assemble_name (STREAM, END);\t\t\t\\\n+      putc ('-', STREAM);\t\t\t\t\\\n+      assemble_name (STREAM, BEG);\t\t\t\\\n+      putc ('\\n', STREAM);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#endif\n+#endif\n+\n /* This determines whether or not we support weak symbols.  */\n #ifndef SUPPORTS_WEAK\n #if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)"}, {"sha": "6e6c35edf64a005ee28f6f5a3fa6bfe42763e7ee", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be2ac706e998c7383115f5b6c56412233f7b587/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2be2ac706e998c7383115f5b6c56412233f7b587", "patch": "@@ -6399,6 +6399,70 @@ Use the expression @code{assemble_name (@var{stream}, @var{name})} to\n output the name itself; before and after that, output the additional\n assembler syntax for defining the name, and a newline.\n \n+@findex SIZE_ASM_OP\n+@item SIZE_ASM_OP\n+A C string containing the appropriate assembler directive to specify the\n+size of a symbol, without any arguments.  On systems that use ELF, the\n+default (in @file{config/elfos.h}) is @samp{\"\\t.size\\t\"}; on other\n+systems, the default is not to define this macro.\n+\n+Define this macro only if it is correct to use the default definitions\n+of @code{ASM_OUTPUT_SIZE_DIRECTIVE} and @code{ASM_OUTPUT_MEASURED_SIZE}\n+for your system.  If you need your own custom definitions of those\n+macros, or if you do not need explicit symbol sizes at all, do not\n+define this macro.\n+\n+@findex ASM_OUTPUT_SIZE_DIRECTIVE\n+@item ASM_OUTPUT_SIZE_DIRECTIVE (@var{stream}, @var{name}, @var{size})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} a directive telling the assembler that the size of the\n+symbol @var{name} is @var{size}.  @var{size} is a @code{HOST_WIDE_INT}.\n+If you define @code{SIZE_ASM_OP}, a default definition of this macro is\n+provided.\n+\n+@findex ASM_OUTPUT_MEASURED_SIZE\n+@item ASM_OUTPUT_MEASURED_SIZE (@var{stream}, @var{beg}, @var{end})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} a directive telling the assembler to calculate the size of\n+the symbol @var{beg} by subtracting its address from that of the symbol\n+@var{end}.  If you define @code{SIZE_ASM_OP}, a default definition of\n+this macro is provided.\n+\n+@findex TYPE_ASM_OP\n+@item TYPE_ASM_OP\n+A C string containing the appropriate assembler directive to specify the\n+type of a symbol, without any arguments.  On systems that use ELF, the\n+default (in @file{config/elfos.h}) is @samp{\"\\t.type\\t\"}; on other\n+systems, the default is not to define this macro.\n+\n+Define this macro only if it is correct to use the default definition of\n+@code{ASM_OUTPUT_TYPE_DIRECTIVE} for your system.  If you need your own\n+custom definition of this macro, or if you do not need explicit symbol\n+types at all, do not define this macro.\n+\n+@findex TYPE_OPERAND_FMT\n+@item TYPE_OPERAND_FMT\n+A C string which specifies (using @code{printf} syntax) the format of\n+the second operand to @code{TYPE_ASM_OP}.  On systems that use ELF, the\n+default (in @file{config/elfos.h}) is @samp{\"@@%s\"}; on other systems,\n+the default is not to define this macro.\n+\n+Define this macro only if it is correct to use the default definition of\n+@code{ASM_OUTPUT_TYPE_DIRECTIVE} for your system.  If you need your own\n+custom definition of this macro, or if you do not need explicit symbol\n+types at all, do not define this macro.\n+\n+@findex ASM_OUTPUT_TYPE_DIRECTIVE\n+@item ASM_OUTPUT_TYPE_DIRECTIVE (@var{stream}, @var{type})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} a directive telling the assembler that the type of the\n+symbol @var{name} is @var{type}.  @var{type} is a C string; currently,\n+that string is always either @samp{\"function\"} or @samp{\"object\"}, but\n+you should not count on this.\n+\n+If you define @code{TYPE_ASM_OP} and @code{TYPE_OPERAND_FMT}, a default\n+definition of this macro is provided.\n+\n @findex ASM_DECLARE_FUNCTION_NAME\n @item ASM_DECLARE_FUNCTION_NAME (@var{stream}, @var{name}, @var{decl})\n A C statement (sans semicolon) to output to the stdio stream\n@@ -6411,6 +6475,9 @@ outputting the label definition (perhaps using\n If this macro is not defined, then the function name is defined in the\n usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n \n+You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} in the definition\n+of this macro.\n+\n @findex ASM_DECLARE_FUNCTION_SIZE\n @item ASM_DECLARE_FUNCTION_SIZE (@var{stream}, @var{name}, @var{decl})\n A C statement (sans semicolon) to output to the stdio stream\n@@ -6421,6 +6488,9 @@ representing the function.\n \n If this macro is not defined, then the function size is not defined.\n \n+You may wish to use @code{ASM_OUTPUT_MEASURED_SIZE} in the definition\n+of this macro.\n+\n @findex ASM_DECLARE_OBJECT_NAME\n @item ASM_DECLARE_OBJECT_NAME (@var{stream}, @var{name}, @var{decl})\n A C statement (sans semicolon) to output to the stdio stream\n@@ -6432,6 +6502,9 @@ label definition (perhaps using @code{ASM_OUTPUT_LABEL}).  The argument\n If this macro is not defined, then the variable name is defined in the\n usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n \n+You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} and/or\n+@code{ASM_OUTPUT_SIZE_DIRECTIVE} in the definition of this macro.\n+\n @findex ASM_DECLARE_REGISTER_GLOBAL\n @item ASM_DECLARE_REGISTER_GLOBAL (@var{stream}, @var{decl}, @var{regno}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream\n@@ -6452,6 +6525,9 @@ something about the size of the object.\n If you don't define this macro, that is equivalent to defining it to do\n nothing.\n \n+You may wish to use @code{ASM_OUTPUT_SIZE_DIRECTIVE} and/or\n+@code{ASM_OUTPUT_MEASURED_SIZE} in the definition of this macro.\n+\n @findex ASM_GLOBALIZE_LABEL\n @item ASM_GLOBALIZE_LABEL (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream"}]}