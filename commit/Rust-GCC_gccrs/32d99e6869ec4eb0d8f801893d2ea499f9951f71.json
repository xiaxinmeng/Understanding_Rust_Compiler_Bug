{"sha": "32d99e6869ec4eb0d8f801893d2ea499f9951f71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJkOTllNjg2OWVjNGViMGQ4ZjgwMTg5M2QyZWE0OTlmOTk1MWY3MQ==", "commit": {"author": {"name": "Janus Weil", "email": "jaydub66@gmail.com", "date": "2008-05-01T19:38:04Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-01T19:38:04Z"}, "message": "gfortran.h (struct gfc_symbol): Moving \"interface\" member to gfc_typespec (plus fixing a small docu error).\n\n\t* gfortran.h (struct gfc_symbol): Moving \"interface\" member to\n\tgfc_typespec (plus fixing a small docu error).\n\t* interface.c (gfc_procedure_use): Ditto.\n\t* decl.c (match_procedure_decl): Ditto.\n\t* resolve.c (resolve_specific_f0,\n\tresolve_specific_f0, resolve_symbol): Ditto.\n\nFrom-SVN: r134867", "tree": {"sha": "a7631c471f34f1baa0a920e1db3183a3507dc58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7631c471f34f1baa0a920e1db3183a3507dc58d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32d99e6869ec4eb0d8f801893d2ea499f9951f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d99e6869ec4eb0d8f801893d2ea499f9951f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d99e6869ec4eb0d8f801893d2ea499f9951f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d99e6869ec4eb0d8f801893d2ea499f9951f71/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca873b0e5aafd6c0fce9e00719671c6aa25c708b"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "f9ae961007a416aa37c40a86dc8f3d7763fe4195", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=32d99e6869ec4eb0d8f801893d2ea499f9951f71", "patch": "@@ -1,3 +1,12 @@\n+2008-05-01  Janus Weil  <jaydub66@gmail.com>\n+\n+\t* gfortran.h (struct gfc_symbol): Moving \"interface\" member to\n+\tgfc_typespec (plus fixing a small docu error).\n+\t* interface.c (gfc_procedure_use): Ditto.\n+\t* decl.c (match_procedure_decl): Ditto.\n+\t* resolve.c (resolve_specific_f0,\n+\tresolve_specific_f0, resolve_symbol): Ditto.\n+\n 2008-04-30  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* intrinsic.c (add_functions): Add SELECTED_CHAR_KIND intrinsic."}, {"sha": "f52c2f1ec8f83e3e997eea58b52508cdc0aea724", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=32d99e6869ec4eb0d8f801893d2ea499f9951f71", "patch": "@@ -4060,8 +4060,8 @@ match_procedure_decl (void)\n       /* Resolve interface if possible. That way, attr.procedure is only set\n \t if it is declared by a later procedure-declaration-stmt, which is\n \t invalid per C1212.  */\n-      while (proc_if->interface)\n-\tproc_if = proc_if->interface;\n+      while (proc_if->ts.interface)\n+\tproc_if = proc_if->ts.interface;\n \n       if (proc_if->generic)\n \t{\n@@ -4147,16 +4147,16 @@ match_procedure_decl (void)\n       /* Set interface.  */\n       if (proc_if != NULL)\n \t{\n-\t  sym->interface = proc_if;\n+\t  sym->ts.interface = proc_if;\n \t  sym->attr.untyped = 1;\n \t}\n       else if (current_ts.type != BT_UNKNOWN)\n \t{\n-\t  sym->interface = gfc_new_symbol (\"\", gfc_current_ns);\n-\t  sym->interface->ts = current_ts;\n-\t  sym->interface->attr.function = 1;\n-\t  sym->ts = sym->interface->ts;\n-\t  sym->attr.function = sym->interface->attr.function;\n+\t  sym->ts = current_ts;\n+\t  sym->ts.interface = gfc_new_symbol (\"\", gfc_current_ns);\n+\t  sym->ts.interface->ts = current_ts;\n+\t  sym->ts.interface->attr.function = 1;\n+\t  sym->attr.function = sym->ts.interface->attr.function;\n \t}\n \n       if (gfc_match_eos () == MATCH_YES)"}, {"sha": "168f07862b56f0dda72f00b742298264c7cfa23f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=32d99e6869ec4eb0d8f801893d2ea499f9951f71", "patch": "@@ -778,6 +778,7 @@ typedef struct\n   int kind;\n   struct gfc_symbol *derived;\n   gfc_charlen *cl;\t/* For character types only.  */\n+  struct gfc_symbol *interface;\t/* For PROCEDURE declarations.  */\n   int is_c_interop;\n   int is_iso_c;\n   bt f90_type; \n@@ -980,7 +981,7 @@ typedef struct gfc_symbol\n   gfc_typespec ts;\n   symbol_attribute attr;\n \n-  /* The interface member points to the formal argument list if the\n+  /* The formal member points to the formal argument list if the\n      symbol is a function or subroutine name.  If the symbol is a\n      generic name, the generic member points to the list of\n      interfaces.  */\n@@ -996,8 +997,6 @@ typedef struct gfc_symbol\n   struct gfc_symbol *result;\t/* function result symbol */\n   gfc_component *components;\t/* Derived type components */\n \n-  struct gfc_symbol *interface;\t/* For PROCEDURE declarations.  */\n-\n   /* Defined only for Cray pointees; points to their pointer.  */\n   struct gfc_symbol *cp_pointer;\n "}, {"sha": "f5746bf0a531216b1123f91f2e7d6f3e3b902506", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=32d99e6869ec4eb0d8f801893d2ea499f9951f71", "patch": "@@ -2405,13 +2405,13 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n     gfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n \t\t sym->name, where);\n \n-  if (sym->interface && sym->interface->attr.intrinsic)\n+  if (sym->ts.interface && sym->ts.interface->attr.intrinsic)\n     {\n       gfc_intrinsic_sym *isym;\n-      isym = gfc_find_function (sym->interface->name);\n+      isym = gfc_find_function (sym->ts.interface->name);\n       if (isym != NULL)\n \t{\n-\t  if (compare_actual_formal_intr (ap, sym->interface))\n+\t  if (compare_actual_formal_intr (ap, sym->ts.interface))\n \t    return;\n \t  gfc_error (\"Type/rank mismatch in argument '%s' at %L\",\n \t\t     sym->name, where);"}, {"sha": "424420583ed176bb8cd9bcfec50275d8646819c4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d99e6869ec4eb0d8f801893d2ea499f9951f71/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=32d99e6869ec4eb0d8f801893d2ea499f9951f71", "patch": "@@ -1563,10 +1563,10 @@ resolve_specific_f0 (gfc_symbol *sym, gfc_expr *expr)\n \n   /* See if we have an intrinsic interface.  */\n \n-  if (sym->interface != NULL && sym->interface->attr.intrinsic)\n+  if (sym->ts.interface != NULL && sym->ts.interface->attr.intrinsic)\n     {\n       gfc_intrinsic_sym *isym;\n-      isym = gfc_find_function (sym->interface->name);\n+      isym = gfc_find_function (sym->ts.interface->name);\n \n       /* Existance of isym should be checked already.  */\n       gcc_assert (isym);\n@@ -2636,12 +2636,12 @@ resolve_specific_s0 (gfc_code *c, gfc_symbol *sym)\n   match m;\n \n   /* See if we have an intrinsic interface.  */\n-  if (sym->interface != NULL && !sym->interface->attr.abstract\n-      && !sym->interface->attr.subroutine)\n+  if (sym->ts.interface != NULL && !sym->ts.interface->attr.abstract\n+      && !sym->ts.interface->attr.subroutine)\n     {\n       gfc_intrinsic_sym *isym;\n \n-      isym = gfc_find_function (sym->interface->name);\n+      isym = gfc_find_function (sym->ts.interface->name);\n \n       /* Existance of isym should be checked already.  */\n       gcc_assert (isym);\n@@ -7735,26 +7735,27 @@ resolve_symbol (gfc_symbol *sym)\n \t}\n     }\n \n-  if (sym->attr.procedure && sym->interface\n+  if (sym->attr.procedure && sym->ts.interface\n       && sym->attr.if_source != IFSRC_DECL)\n     {\n-      if (sym->interface->attr.procedure)\n+      if (sym->ts.interface->attr.procedure)\n \tgfc_error (\"Interface '%s', used by procedure '%s' at %L, is declared \"\n-\t\t   \"in a later PROCEDURE statement\", sym->interface->name,\n+\t\t   \"in a later PROCEDURE statement\", sym->ts.interface->name,\n \t\t   sym->name,&sym->declared_at);\n \n       /* Get the attributes from the interface (now resolved).  */\n-      if (sym->interface->attr.if_source || sym->interface->attr.intrinsic)\n+      if (sym->ts.interface->attr.if_source || sym->ts.interface->attr.intrinsic)\n \t{\n-\t  sym->ts = sym->interface->ts;\n-\t  sym->attr.function = sym->interface->attr.function;\n-\t  sym->attr.subroutine = sym->interface->attr.subroutine;\n-\t  copy_formal_args (sym, sym->interface);\n+\t  sym->ts.type = sym->ts.interface->ts.type;\n+\t  sym->ts.kind = sym->ts.interface->ts.kind;\n+\t  sym->attr.function = sym->ts.interface->attr.function;\n+\t  sym->attr.subroutine = sym->ts.interface->attr.subroutine;\n+\t  copy_formal_args (sym, sym->ts.interface);\n \t}\n-      else if (sym->interface->name[0] != '\\0')\n+      else if (sym->ts.interface->name[0] != '\\0')\n \t{\n \t  gfc_error (\"Interface '%s' of procedure '%s' at %L must be explicit\",\n-\t\t    sym->interface->name, sym->name, &sym->declared_at);\n+\t\t    sym->ts.interface->name, sym->name, &sym->declared_at);\n \t  return;\n \t}\n     }"}]}