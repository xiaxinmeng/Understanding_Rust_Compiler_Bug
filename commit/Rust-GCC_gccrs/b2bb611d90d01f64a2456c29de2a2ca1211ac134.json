{"sha": "b2bb611d90d01f64a2456c29de2a2ca1211ac134", "node_id": "C_kwDOANBUbNoAKGIyYmI2MTFkOTBkMDFmNjRhMjQ1NmMyOWRlMmEyY2ExMjExYWMxMzQ", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T15:42:42Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T17:40:56Z"}, "message": "middle-end: Add optimized float addsub without needing VEC_PERM_EXPR.\n\nFor IEEE 754 floating point formats we can replace a sequence of alternative\n+/- with fneg of a wider type followed by an fadd.  This eliminated the need for\nusing a permutation.  This patch adds a math.pd rule to recognize and do this\nrewriting.\n\nFor\n\nvoid f (float *restrict a, float *restrict b, float *res, int n)\n{\n   for (int i = 0; i < (n & -4); i+=2)\n    {\n      res[i+0] = a[i+0] + b[i+0];\n      res[i+1] = a[i+1] - b[i+1];\n    }\n}\n\nwe generate:\n\n.L3:\n        ldr     q1, [x1, x3]\n        ldr     q0, [x0, x3]\n        fneg    v1.2d, v1.2d\n        fadd    v0.4s, v0.4s, v1.4s\n        str     q0, [x2, x3]\n        add     x3, x3, 16\n        cmp     x3, x4\n        bne     .L3\n\nnow instead of:\n\n.L3:\n        ldr     q1, [x0, x3]\n        ldr     q2, [x1, x3]\n        fadd    v0.4s, v1.4s, v2.4s\n        fsub    v1.4s, v1.4s, v2.4s\n        tbl     v0.16b, {v0.16b - v1.16b}, v3.16b\n        str     q0, [x2, x3]\n        add     x3, x3, 16\n        cmp     x3, x4\n        bne     .L3\n\nThanks to George Steed for the idea.\n\ngcc/ChangeLog:\n\n\t* generic-match-head.cc: Include langooks.\n\t* gimple-match-head.cc: Likewise.\n\t* match.pd: Add fneg/fadd rule.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/simd/addsub_1.c: New test.\n\t* gcc.target/aarch64/sve/addsub_1.c: New test.", "tree": {"sha": "beaed686bf35b867edc42d73a51ef5f0044ccb7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beaed686bf35b867edc42d73a51ef5f0044ccb7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2bb611d90d01f64a2456c29de2a2ca1211ac134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bb611d90d01f64a2456c29de2a2ca1211ac134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bb611d90d01f64a2456c29de2a2ca1211ac134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bb611d90d01f64a2456c29de2a2ca1211ac134/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b85d759dae79c930abe8118e1102ecb673b74aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b85d759dae79c930abe8118e1102ecb673b74aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b85d759dae79c930abe8118e1102ecb673b74aa"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "aed4dcc8c3d718dcd4cb2da05cf9709a65cdde70", "filename": "gcc/generic-match-head.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Fgeneric-match-head.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Fgeneric-match-head.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.cc?ref=b2bb611d90d01f64a2456c29de2a2ca1211ac134", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tm.h\"\n #include \"tree-eh.h\"\n+#include \"langhooks.h\"\n \n /* Routine to determine if the types T1 and T2 are effectively\n    the same for GENERIC.  If T1 or T2 is not a type, the test"}, {"sha": "9986e3479f903d26446c795113a14c9cc3d4359e", "filename": "gcc/gimple-match-head.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Fgimple-match-head.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Fgimple-match-head.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.cc?ref=b2bb611d90d01f64a2456c29de2a2ca1211ac134", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tm.h\"\n #include \"gimple-range.h\"\n+#include \"langhooks.h\"\n \n /* Forward declarations of the private auto-generated matchers.\n    They expect valueized operands in canonical order and do not"}, {"sha": "421278df0078c1e837deb55e8effc41054eb97e5", "filename": "gcc/match.pd", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=b2bb611d90d01f64a2456c29de2a2ca1211ac134", "patch": "@@ -7918,6 +7918,65 @@ and,\n   (simplify (reduc (op @0 VECTOR_CST@1))\n     (op (reduc:type @0) (reduc:type @1))))\n \n+/* Simplify vector floating point operations of alternating sub/add pairs\n+   into using an fneg of a wider element type followed by a normal add.\n+   under IEEE 754 the fneg of the wider type will negate every even entry\n+   and when doing an add we get a sub of the even and add of every odd\n+   elements.  */\n+(simplify\n+ (vec_perm (plus:c @0 @1) (minus @0 @1) VECTOR_CST@2)\n+ (if (!VECTOR_INTEGER_TYPE_P (type)\n+      && !FLOAT_WORDS_BIG_ENDIAN)\n+  (with\n+   {\n+     /* Build a vector of integers from the tree mask.  */\n+     vec_perm_builder builder;\n+     if (!tree_to_vec_perm_builder (&builder, @2))\n+       return NULL_TREE;\n+\n+     /* Create a vec_perm_indices for the integer vector.  */\n+     poly_uint64 nelts = TYPE_VECTOR_SUBPARTS (type);\n+     vec_perm_indices sel (builder, 2, nelts);\n+   }\n+   (if (sel.series_p (0, 2, 0, 2))\n+    (with\n+     {\n+       machine_mode vec_mode = TYPE_MODE (type);\n+       machine_mode wide_mode;\n+       if (!GET_MODE_WIDER_MODE (vec_mode).exists (&wide_mode)\n+\t   || !VECTOR_MODE_P (wide_mode)\n+\t   || (GET_MODE_UNIT_BITSIZE (vec_mode) * 2\n+\t\t!= GET_MODE_UNIT_BITSIZE (wide_mode)))\n+\t return NULL_TREE;\n+\n+       tree stype = lang_hooks.types.type_for_mode (GET_MODE_INNER (wide_mode),\n+\t\t\t\t\t\t    TYPE_UNSIGNED (type));\n+       if (TYPE_MODE (stype) == BLKmode)\n+\t return NULL_TREE;\n+       tree ntype = build_vector_type_for_mode (stype, wide_mode);\n+       if (!VECTOR_TYPE_P (ntype))\n+\t return NULL_TREE;\n+\n+       /* The format has to be a non-extended ieee format.  */\n+       const struct real_format *fmt_old = FLOAT_MODE_FORMAT (vec_mode);\n+       const struct real_format *fmt_new = FLOAT_MODE_FORMAT (wide_mode);\n+       if (fmt_old == NULL || fmt_new == NULL)\n+\t return NULL_TREE;\n+\n+       /* If the target doesn't support v1xx vectors, try using scalar mode xx\n+\t  instead.  */\n+       if (known_eq (GET_MODE_NUNITS (wide_mode), 1)\n+\t   && !target_supports_op_p (ntype, NEGATE_EXPR, optab_vector))\n+\t ntype = stype;\n+     }\n+     (if (fmt_new->signbit_rw\n+\t     == fmt_old->signbit_rw + GET_MODE_UNIT_BITSIZE (vec_mode)\n+\t  && fmt_new->signbit_rw == fmt_new->signbit_ro\n+\t  && targetm.can_change_mode_class (TYPE_MODE (ntype), TYPE_MODE (type), ALL_REGS)\n+\t  && ((optimize_vectors_before_lowering_p () && VECTOR_TYPE_P (ntype))\n+\t      || target_supports_op_p (ntype, NEGATE_EXPR, optab_vector)))\n+      (plus (view_convert:type (negate (view_convert:ntype @1))) @0)))))))\n+\n (simplify\n  (vec_perm @0 @1 VECTOR_CST@2)\n  (with"}, {"sha": "1fb91a34c421bbd2894faa0dbbf1b47ad43310c4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/addsub_1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Faddsub_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Faddsub_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Faddsub_1.c?ref=b2bb611d90d01f64a2456c29de2a2ca1211ac134", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_ok } */\n+/* { dg-options \"-Ofast\" } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+/* \n+** f1:\n+** ...\n+**\tfneg\tv[0-9]+.2d, v[0-9]+.2d\n+**\tfadd\tv[0-9]+.4s, v[0-9]+.4s, v[0-9]+.4s\n+** ...\n+*/\n+void f1 (float *restrict a, float *restrict b, float *res, int n)\n+{\n+   for (int i = 0; i < (n & -4); i+=2)\n+    {\n+      res[i+0] = a[i+0] + b[i+0];\n+      res[i+1] = a[i+1] - b[i+1];\n+    }\n+}\n+\n+/* \n+** d1:\n+** ...\n+** \tfneg\tv[0-9]+.4s, v[0-9]+.4s\n+** \tfadd\tv[0-9]+.8h, v[0-9]+.8h, v[0-9]+.8h\n+** ...\n+*/\n+void d1 (_Float16 *restrict a, _Float16 *restrict b, _Float16 *res, int n)\n+{\n+   for (int i = 0; i < (n & -8); i+=2)\n+    {\n+      res[i+0] = a[i+0] + b[i+0];\n+      res[i+1] = a[i+1] - b[i+1];\n+    }\n+}\n+\n+/* \n+** e1:\n+** ...\n+** \tfadd\tv[0-9]+.2d, v[0-9]+.2d, v[0-9]+.2d\n+** \tfsub\tv[0-9]+.2d, v[0-9]+.2d, v[0-9]+.2d\n+** \tins\tv[0-9]+.d\\[1\\], v[0-9]+.d\\[1\\]\n+** ...\n+*/\n+void e1 (double *restrict a, double *restrict b, double *res, int n)\n+{\n+   for (int i = 0; i < (n & -4); i+=2)\n+    {\n+      res[i+0] = a[i+0] + b[i+0];\n+      res[i+1] = a[i+1] - b[i+1];\n+    }\n+}"}, {"sha": "ea7f9d9db2c8c9a3efe5c7951a314a29b7a7a922", "filename": "gcc/testsuite/gcc.target/aarch64/sve/addsub_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faddsub_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb611d90d01f64a2456c29de2a2ca1211ac134/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faddsub_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faddsub_1.c?ref=b2bb611d90d01f64a2456c29de2a2ca1211ac134", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+/*\n+** f1:\n+** ...\n+** \tfneg\tz[0-9]+.d, p[0-9]+/m, z[0-9]+.d\n+** \tfadd\tz[0-9]+.s, z[0-9]+.s, z[0-9]+.s\n+** ...\n+*/\n+void f1 (float *restrict a, float *restrict b, float *res, int n)\n+{\n+   for (int i = 0; i < (n & -4); i+=2)\n+    {\n+      res[i+0] = a[i+0] + b[i+0];\n+      res[i+1] = a[i+1] - b[i+1];\n+    }\n+}\n+\n+/* \n+** d1:\n+** ...\n+** \tfneg\tz[0-9]+.s, p[0-9]+/m, z[0-9]+.s\n+** \tfadd\tz[0-9]+.h, z[0-9]+.h, z[0-9]+.h\n+** ...\n+*/ \n+void d1 (_Float16 *restrict a, _Float16 *restrict b, _Float16 *res, int n)\n+{\n+   for (int i = 0; i < (n & -8); i+=2)\n+    {\n+      res[i+0] = a[i+0] + b[i+0];\n+      res[i+1] = a[i+1] - b[i+1];\n+    }\n+}\n+\n+/*\n+** e1:\n+** ...\n+** \tfsub\tz[0-9]+.d, z[0-9]+.d, z[0-9]+.d\n+** \tmovprfx\tz[0-9]+.d, p[0-9]+/m, z[0-9]+.d\n+** \tfadd\tz[0-9]+.d, p[0-9]+/m, z[0-9]+.d, z[0-9]+.d\n+** ...\n+*/\n+void e1 (double *restrict a, double *restrict b, double *res, int n)\n+{\n+   for (int i = 0; i < (n & -4); i+=2)\n+    {\n+      res[i+0] = a[i+0] + b[i+0];\n+      res[i+1] = a[i+1] - b[i+1];\n+    }\n+}"}]}