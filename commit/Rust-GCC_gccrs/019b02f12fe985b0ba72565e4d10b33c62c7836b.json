{"sha": "019b02f12fe985b0ba72565e4d10b33c62c7836b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5YjAyZjEyZmU5ODViMGJhNzI1NjVlNGQxMGIzM2M2MmM3ODM2Yg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-07-12T17:00:00Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-07-12T17:00:00Z"}, "message": "re PR tree-optimization/22335 (DOM creates mis-matched types)\n\n2005-07-12  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/22335\n        * tree-ssa-dom.c (eliminate_redundant_computations): Reject the prop if\n        requiring a cast in a non RHS of modify_expr.  Add a cast when required.\n        (lookup_avail_expr): Use constant_boolean_node instead\n        of boolean_false_node/boolean_true_node.\n\nFrom-SVN: r101929", "tree": {"sha": "c39f3b9fab9934e1ec06ced5284810a086b3827b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c39f3b9fab9934e1ec06ced5284810a086b3827b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019b02f12fe985b0ba72565e4d10b33c62c7836b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019b02f12fe985b0ba72565e4d10b33c62c7836b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019b02f12fe985b0ba72565e4d10b33c62c7836b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019b02f12fe985b0ba72565e4d10b33c62c7836b/comments", "author": null, "committer": null, "parents": [{"sha": "a207780f9b958e8cf857858a658dbe9db6b68347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a207780f9b958e8cf857858a658dbe9db6b68347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a207780f9b958e8cf857858a658dbe9db6b68347"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "7064c97019e5c48052d1db9f77c1914aee0a5913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019b02f12fe985b0ba72565e4d10b33c62c7836b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019b02f12fe985b0ba72565e4d10b33c62c7836b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=019b02f12fe985b0ba72565e4d10b33c62c7836b", "patch": "@@ -1,3 +1,11 @@\n+2005-07-12  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/22335\n+\t* tree-ssa-dom.c (eliminate_redundant_computations): Reject the prop if\n+\trequiring a cast in a non RHS of modify_expr.  Add a cast when required.\n+\t(lookup_avail_expr): Use constant_boolean_node instead\n+\tof boolean_false_node/boolean_true_node.\n+\n 2005-07-12  Ben Elliston  <bje@au.ibm.com>\n \n \t* tree-cfg.c (dump_cfg_stats): Add a new fmt_str_2 format string"}, {"sha": "1b8b8f1acecd74b16008983d0e7ba9750f0ded50", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019b02f12fe985b0ba72565e4d10b33c62c7836b/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019b02f12fe985b0ba72565e4d10b33c62c7836b/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=019b02f12fe985b0ba72565e4d10b33c62c7836b", "patch": "@@ -2506,6 +2506,7 @@ eliminate_redundant_computations (tree stmt, stmt_ann_t ann)\n   bool insert = true;\n   tree cached_lhs;\n   bool retval = false;\n+  bool modify_expr_p = false;\n \n   if (TREE_CODE (stmt) == MODIFY_EXPR)\n     def = TREE_OPERAND (stmt, 0);\n@@ -2547,17 +2548,26 @@ eliminate_redundant_computations (tree stmt, stmt_ann_t ann)\n   else if (TREE_CODE (stmt) == SWITCH_EXPR)\n     expr_p = &SWITCH_COND (stmt);\n   else if (TREE_CODE (stmt) == RETURN_EXPR && TREE_OPERAND (stmt, 0))\n-    expr_p = &TREE_OPERAND (TREE_OPERAND (stmt, 0), 1);\n+    {\n+      expr_p = &TREE_OPERAND (TREE_OPERAND (stmt, 0), 1);\n+      modify_expr_p = true;\n+    }\n   else\n-    expr_p = &TREE_OPERAND (stmt, 1);\n+    {\n+      expr_p = &TREE_OPERAND (stmt, 1);\n+      modify_expr_p = true;\n+    }\n \n   /* It is safe to ignore types here since we have already done\n      type checking in the hashing and equality routines.  In fact\n      type checking here merely gets in the way of constant\n      propagation.  Also, make sure that it is safe to propagate\n      CACHED_LHS into *EXPR_P.  */\n   if (cached_lhs\n-      && (TREE_CODE (cached_lhs) != SSA_NAME\n+      && ((TREE_CODE (cached_lhs) != SSA_NAME\n+\t   && (modify_expr_p\n+\t       || tree_ssa_useless_type_conversion_1 (TREE_TYPE (*expr_p),\n+\t\t\t\t\t\t      TREE_TYPE (cached_lhs))))\n \t  || may_propagate_copy (*expr_p, cached_lhs)))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2580,6 +2590,11 @@ eliminate_redundant_computations (tree stmt, stmt_ann_t ann)\n \t  || (POINTER_TYPE_P (TREE_TYPE (*expr_p))\n \t      && is_gimple_min_invariant (cached_lhs)))\n \tretval = true;\n+      \n+      if (modify_expr_p\n+\t  && !tree_ssa_useless_type_conversion_1 (TREE_TYPE (*expr_p),\n+\t\t\t\t\t\t  TREE_TYPE (cached_lhs)))\n+\tcached_lhs = fold_convert (TREE_TYPE (*expr_p), cached_lhs);\n \n       propagate_tree_value (expr_p, cached_lhs);\n       mark_stmt_modified (stmt);\n@@ -3088,11 +3103,8 @@ lookup_avail_expr (tree stmt, bool insert)\n \t{\n \t  tree t = element->rhs;\n \t  free (element);\n-\n-\t  if (TREE_CODE (t) == EQ_EXPR)\n-\t    return boolean_false_node;\n-\t  else\n-\t    return boolean_true_node;\n+\t  return constant_boolean_node (TREE_CODE (t) != EQ_EXPR,\n+\t\t\t\t\tTREE_TYPE (element->rhs));\n \t}\n     }\n "}]}