{"sha": "03c6ba86757f0684c5419c90651106900f5ecb5a", "node_id": "C_kwDOANBUbNoAKDAzYzZiYTg2NzU3ZjA2ODRjNTQxOWM5MDY1MTEwNjkwMGY1ZWNiNWE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-12T18:40:12Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-12T18:40:12Z"}, "message": "ranger: Add range-ops for widen addition and widen multiplication [PR108583]\n\nThis adds range-ops for widening addition and widening multiplication.\n\nI couldn't figure out how to write a test for this.  It looks like there are\nself tests but not a way to write standalone ones?  I did create testcases in\nthe patch 3/4 which tests the end result.\n\ngcc/ChangeLog:\n\n\tPR target/108583\n\t* gimple-range-op.h (gimple_range_op_handler): Add maybe_non_standard.\n\t* gimple-range-op.cc (gimple_range_op_handler::gimple_range_op_handler):\n\tUse it.\n\t(gimple_range_op_handler::maybe_non_standard): New.\n\t* range-op.cc (class operator_widen_plus_signed,\n\toperator_widen_plus_signed::wi_fold, class operator_widen_plus_unsigned,\n\toperator_widen_plus_unsigned::wi_fold, class operator_widen_mult_signed,\n\toperator_widen_mult_signed::wi_fold, class operator_widen_mult_unsigned,\n\toperator_widen_mult_unsigned::wi_fold,\n\tptr_op_widen_mult_signed, ptr_op_widen_mult_unsigned,\n\tptr_op_widen_plus_signed, ptr_op_widen_plus_unsigned): New.\n\t* range-op.h (ptr_op_widen_mult_signed, ptr_op_widen_mult_unsigned,\n\tptr_op_widen_plus_signed, ptr_op_widen_plus_unsigned): New\n\nCo-Authored-By: Andrew MacLeod <amacleod@redhat.com>", "tree": {"sha": "6dd54fee375493a7fd5ea179cab4f9f987441e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd54fee375493a7fd5ea179cab4f9f987441e7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03c6ba86757f0684c5419c90651106900f5ecb5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c6ba86757f0684c5419c90651106900f5ecb5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c6ba86757f0684c5419c90651106900f5ecb5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c6ba86757f0684c5419c90651106900f5ecb5a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2246d576f922bae3629da0fe1dbfcc6ff06769ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2246d576f922bae3629da0fe1dbfcc6ff06769ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2246d576f922bae3629da0fe1dbfcc6ff06769ad"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "a5d625387e712c170e1e68f6a7d494027f6ef0d0", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=03c6ba86757f0684c5419c90651106900f5ecb5a", "patch": "@@ -179,6 +179,8 @@ gimple_range_op_handler::gimple_range_op_handler (gimple *s)\n   // statements.\n   if (is_a <gcall *> (m_stmt))\n     maybe_builtin_call ();\n+  else\n+    maybe_non_standard ();\n }\n \n // Calculate what we can determine of the range of this unary\n@@ -764,6 +766,57 @@ class cfn_parity : public range_operator\n   }\n } op_cfn_parity;\n \n+// Set up a gimple_range_op_handler for any nonstandard function which can be\n+// supported via range-ops.\n+\n+void\n+gimple_range_op_handler::maybe_non_standard ()\n+{\n+  range_operator *signed_op = ptr_op_widen_mult_signed;\n+  range_operator *unsigned_op = ptr_op_widen_mult_unsigned;\n+  if (gimple_code (m_stmt) == GIMPLE_ASSIGN)\n+    switch (gimple_assign_rhs_code (m_stmt))\n+      {\n+\tcase WIDEN_PLUS_EXPR:\n+\t{\n+\t  signed_op = ptr_op_widen_plus_signed;\n+\t  unsigned_op = ptr_op_widen_plus_unsigned;\n+\t}\n+\tgcc_fallthrough ();\n+\tcase WIDEN_MULT_EXPR:\n+\t{\n+\t  m_valid = false;\n+\t  m_op1 = gimple_assign_rhs1 (m_stmt);\n+\t  m_op2 = gimple_assign_rhs2 (m_stmt);\n+\t  tree ret = gimple_assign_lhs (m_stmt);\n+\t  bool signed1 = TYPE_SIGN (TREE_TYPE (m_op1)) == SIGNED;\n+\t  bool signed2 = TYPE_SIGN (TREE_TYPE (m_op2)) == SIGNED;\n+\t  bool signed_ret = TYPE_SIGN (TREE_TYPE (ret)) == SIGNED;\n+\n+\t  /* Normally these operands should all have the same sign, but\n+\t     some passes and violate this by taking mismatched sign args.  At\n+\t     the moment the only one that's possible is mismatch inputs and\n+\t     unsigned output.  Once ranger supports signs for the operands we\n+\t     can properly fix it,  for now only accept the case we can do\n+\t     correctly.  */\n+\t  if ((signed1 ^ signed2) && signed_ret)\n+\t    return;\n+\n+\t  m_valid = true;\n+\t  if (signed2 && !signed1)\n+\t    std::swap (m_op1, m_op2);\n+\n+\t  if (signed1 || signed2)\n+\t    m_int = signed_op;\n+\t  else\n+\t    m_int = unsigned_op;\n+\t  break;\n+\t}\n+\tdefault:\n+\t  break;\n+      }\n+}\n+\n // Set up a gimple_range_op_handler for any built in function which can be\n // supported via range-ops.\n "}, {"sha": "1bf63c5ce6f5db924a1f5907ab4539e376281bd0", "filename": "gcc/gimple-range-op.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Fgimple-range-op.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Fgimple-range-op.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.h?ref=03c6ba86757f0684c5419c90651106900f5ecb5a", "patch": "@@ -41,6 +41,7 @@ class gimple_range_op_handler : public range_op_handler\n \t\t relation_trio = TRIO_VARYING);\n private:\n   void maybe_builtin_call ();\n+  void maybe_non_standard ();\n   gimple *m_stmt;\n   tree m_op1, m_op2;\n };"}, {"sha": "718ccb6f074e1a2a9ef1b7a5d4e879898d4a7fc3", "filename": "gcc/range-op.cc", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=03c6ba86757f0684c5419c90651106900f5ecb5a", "patch": "@@ -1556,6 +1556,73 @@ operator_plus::op2_range (irange &r, tree type,\n   return op1_range (r, type, lhs, op1, rel.swap_op1_op2 ());\n }\n \n+class operator_widen_plus_signed : public range_operator\n+{\n+public:\n+  virtual void wi_fold (irange &r, tree type,\n+\t\t\tconst wide_int &lh_lb,\n+\t\t\tconst wide_int &lh_ub,\n+\t\t\tconst wide_int &rh_lb,\n+\t\t\tconst wide_int &rh_ub) const;\n+} op_widen_plus_signed;\n+range_operator *ptr_op_widen_plus_signed = &op_widen_plus_signed;\n+\n+void\n+operator_widen_plus_signed::wi_fold (irange &r, tree type,\n+\t\t\t\t     const wide_int &lh_lb,\n+\t\t\t\t     const wide_int &lh_ub,\n+\t\t\t\t     const wide_int &rh_lb,\n+\t\t\t\t     const wide_int &rh_ub) const\n+{\n+   wi::overflow_type ov_lb, ov_ub;\n+   signop s = TYPE_SIGN (type);\n+\n+   wide_int lh_wlb\n+     = wide_int::from (lh_lb, wi::get_precision (lh_lb) * 2, SIGNED);\n+   wide_int lh_wub\n+     = wide_int::from (lh_ub, wi::get_precision (lh_ub) * 2, SIGNED);\n+   wide_int rh_wlb = wide_int::from (rh_lb, wi::get_precision (rh_lb) * 2, s);\n+   wide_int rh_wub = wide_int::from (rh_ub, wi::get_precision (rh_ub) * 2, s);\n+\n+   wide_int new_lb = wi::add (lh_wlb, rh_wlb, s, &ov_lb);\n+   wide_int new_ub = wi::add (lh_wub, rh_wub, s, &ov_ub);\n+\n+   r = int_range<2> (type, new_lb, new_ub);\n+}\n+\n+class operator_widen_plus_unsigned : public range_operator\n+{\n+public:\n+  virtual void wi_fold (irange &r, tree type,\n+\t\t\tconst wide_int &lh_lb,\n+\t\t\tconst wide_int &lh_ub,\n+\t\t\tconst wide_int &rh_lb,\n+\t\t\tconst wide_int &rh_ub) const;\n+} op_widen_plus_unsigned;\n+range_operator *ptr_op_widen_plus_unsigned = &op_widen_plus_unsigned;\n+\n+void\n+operator_widen_plus_unsigned::wi_fold (irange &r, tree type,\n+\t\t\t\t       const wide_int &lh_lb,\n+\t\t\t\t       const wide_int &lh_ub,\n+\t\t\t\t       const wide_int &rh_lb,\n+\t\t\t\t       const wide_int &rh_ub) const\n+{\n+   wi::overflow_type ov_lb, ov_ub;\n+   signop s = TYPE_SIGN (type);\n+\n+   wide_int lh_wlb\n+     = wide_int::from (lh_lb, wi::get_precision (lh_lb) * 2, UNSIGNED);\n+   wide_int lh_wub\n+     = wide_int::from (lh_ub, wi::get_precision (lh_ub) * 2, UNSIGNED);\n+   wide_int rh_wlb = wide_int::from (rh_lb, wi::get_precision (rh_lb) * 2, s);\n+   wide_int rh_wub = wide_int::from (rh_ub, wi::get_precision (rh_ub) * 2, s);\n+\n+   wide_int new_lb = wi::add (lh_wlb, rh_wlb, s, &ov_lb);\n+   wide_int new_ub = wi::add (lh_wub, rh_wub, s, &ov_ub);\n+\n+   r = int_range<2> (type, new_lb, new_ub);\n+}\n \n class operator_minus : public range_operator\n {\n@@ -2031,6 +2098,70 @@ operator_mult::wi_fold (irange &r, tree type,\n     }\n }\n \n+class operator_widen_mult_signed : public range_operator\n+{\n+public:\n+  virtual void wi_fold (irange &r, tree type,\n+\t\t\tconst wide_int &lh_lb,\n+\t\t\tconst wide_int &lh_ub,\n+\t\t\tconst wide_int &rh_lb,\n+\t\t\tconst wide_int &rh_ub)\n+    const;\n+} op_widen_mult_signed;\n+range_operator *ptr_op_widen_mult_signed = &op_widen_mult_signed;\n+\n+void\n+operator_widen_mult_signed::wi_fold (irange &r, tree type,\n+\t\t\t\t     const wide_int &lh_lb,\n+\t\t\t\t     const wide_int &lh_ub,\n+\t\t\t\t     const wide_int &rh_lb,\n+\t\t\t\t     const wide_int &rh_ub) const\n+{\n+  signop s = TYPE_SIGN (type);\n+\n+  wide_int lh_wlb = wide_int::from (lh_lb, wi::get_precision (lh_lb) * 2, SIGNED);\n+  wide_int lh_wub = wide_int::from (lh_ub, wi::get_precision (lh_ub) * 2, SIGNED);\n+  wide_int rh_wlb = wide_int::from (rh_lb, wi::get_precision (rh_lb) * 2, s);\n+  wide_int rh_wub = wide_int::from (rh_ub, wi::get_precision (rh_ub) * 2, s);\n+\n+  /* We don't expect a widening multiplication to be able to overflow but range\n+     calculations for multiplications are complicated.  After widening the\n+     operands lets call the base class.  */\n+  return op_mult.wi_fold (r, type, lh_wlb, lh_wub, rh_wlb, rh_wub);\n+}\n+\n+\n+class operator_widen_mult_unsigned : public range_operator\n+{\n+public:\n+  virtual void wi_fold (irange &r, tree type,\n+\t\t\tconst wide_int &lh_lb,\n+\t\t\tconst wide_int &lh_ub,\n+\t\t\tconst wide_int &rh_lb,\n+\t\t\tconst wide_int &rh_ub)\n+    const;\n+} op_widen_mult_unsigned;\n+range_operator *ptr_op_widen_mult_unsigned = &op_widen_mult_unsigned;\n+\n+void\n+operator_widen_mult_unsigned::wi_fold (irange &r, tree type,\n+\t\t\t\t       const wide_int &lh_lb,\n+\t\t\t\t       const wide_int &lh_ub,\n+\t\t\t\t       const wide_int &rh_lb,\n+\t\t\t\t       const wide_int &rh_ub) const\n+{\n+  signop s = TYPE_SIGN (type);\n+\n+  wide_int lh_wlb = wide_int::from (lh_lb, wi::get_precision (lh_lb) * 2, UNSIGNED);\n+  wide_int lh_wub = wide_int::from (lh_ub, wi::get_precision (lh_ub) * 2, UNSIGNED);\n+  wide_int rh_wlb = wide_int::from (rh_lb, wi::get_precision (rh_lb) * 2, s);\n+  wide_int rh_wub = wide_int::from (rh_ub, wi::get_precision (rh_ub) * 2, s);\n+\n+  /* We don't expect a widening multiplication to be able to overflow but range\n+     calculations for multiplications are complicated.  After widening the\n+     operands lets call the base class.  */\n+  return op_mult.wi_fold (r, type, lh_wlb, lh_wub, rh_wlb, rh_wub);\n+}\n \n class operator_div : public cross_product_operator\n {"}, {"sha": "b1eeac70df81f2bdf228af7adff5399e7ac5e5d6", "filename": "gcc/range-op.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Frange-op.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c6ba86757f0684c5419c90651106900f5ecb5a/gcc%2Frange-op.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.h?ref=03c6ba86757f0684c5419c90651106900f5ecb5a", "patch": "@@ -311,4 +311,8 @@ class floating_op_table\n // This holds the range op table for floating point operations.\n extern floating_op_table *floating_tree_table;\n \n+extern range_operator *ptr_op_widen_mult_signed;\n+extern range_operator *ptr_op_widen_mult_unsigned;\n+extern range_operator *ptr_op_widen_plus_signed;\n+extern range_operator *ptr_op_widen_plus_unsigned;\n #endif // GCC_RANGE_OP_H"}]}