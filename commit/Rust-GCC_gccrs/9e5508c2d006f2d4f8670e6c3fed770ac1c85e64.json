{"sha": "9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1NTA4YzJkMDA2ZjJkNGY4NjcwZTZjM2ZlZDc3MGFjMWM4NWU2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-03T08:09:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-03T09:29:16Z"}, "message": "refactor SLP constant insertion and provde entry insert helper\n\nThis provides helpers to insert stmts on region entry abstracted\nfrom loop/basic-block split out from vec_init_vector and used\nfrom the SLP constant code generation path.  The SLP constant\ncode generation path is also changed to avoid needless SSA\ncopying since we can store VECTOR_CSTs directly in the vectorized\ndefs array, improving the IL from the vectorizer.\n\n2020-07-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vec_info::insert_on_entry): New.\n\t(vec_info::insert_seq_on_entry): Likewise.\n\t* tree-vectorizer.c (vec_info::insert_on_entry): Implement.\n\t(vec_info::insert_seq_on_entry): Likewise.\n\t* tree-vect-stmts.c (vect_init_vector_1): Use\n\tvec_info::insert_on_entry.\n\t(vect_finish_stmt_generation): Set modified bit after\n\tadjusting VUSE.\n\t* tree-vect-slp.c (vect_create_constant_vectors): Simplify\n\tby using vec_info::insert_seq_on_entry and bypassing\n\tvec_init_vector.\n\t(vect_schedule_slp_instance): Deal with all-constant\n\tchildren later.", "tree": {"sha": "3fe50f35e5da1a34dd92b35c2ac38ef5461bc743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe50f35e5da1a34dd92b35c2ac38ef5461bc743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b538cd81b9692eaf519fa1743ca8c282048793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b538cd81b9692eaf519fa1743ca8c282048793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b538cd81b9692eaf519fa1743ca8c282048793"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "727eba0b12f7e3eb55de419a4c979a392229c720", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "patch": "@@ -3786,26 +3786,20 @@ vect_create_constant_vectors (vec_info *vinfo, slp_tree op_node)\n \t\t\t\t\t      permute_results);\n \t\t  vec_cst = permute_results[number_of_vectors - j - 1];\n \t\t}\n-\t      tree init;\n-\t      if (insert_after)\n+\t      if (!gimple_seq_empty_p (ctor_seq))\n \t\t{\n-\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (insert_after->stmt);\n-\t\t  /* vect_init_vector inserts before.  */\n-\t\t  gsi_next (&gsi);\n-\t\t  init = vect_init_vector (vinfo, NULL, vec_cst,\n-\t\t\t\t\t   vector_type, &gsi);\n-\t\t}\n-\t      else\n-\t\tinit = vect_init_vector (vinfo, NULL, vec_cst,\n-\t\t\t\t\t vector_type, NULL);\n-\t      if (ctor_seq != NULL)\n-\t\t{\n-\t\t  gimple_stmt_iterator gsi\n-\t\t    = gsi_for_stmt (SSA_NAME_DEF_STMT (init));\n-\t\t  gsi_insert_seq_before (&gsi, ctor_seq, GSI_SAME_STMT);\n+\t\t  if (insert_after)\n+\t\t    {\n+\t\t      gimple_stmt_iterator gsi\n+\t\t\t= gsi_for_stmt (insert_after->stmt);\n+\t\t      gsi_insert_seq_after (&gsi, ctor_seq,\n+\t\t\t\t\t    GSI_CONTINUE_LINKING);\n+\t\t    }\n+\t\t  else\n+\t\t    vinfo->insert_seq_on_entry (NULL, ctor_seq);\n \t\t  ctor_seq = NULL;\n \t\t}\n-\t      voprnds.quick_push (init);\n+\t      voprnds.quick_push (vec_cst);\n \t      insert_after = NULL;\n               number_of_places_left_in_vector = nunits;\n \t      constant_p = true;\n@@ -4418,10 +4412,11 @@ vect_schedule_slp_instance (vec_info *vinfo,\n \t\t      || vect_stmt_dominates_stmt_p (last_stmt, vstmt))\n \t\t    last_stmt = vstmt;\n \t\t}\n-\t    /* This can happen when all children are pre-existing vectors.  */\n-\t    if (!last_stmt)\n-\t      last_stmt = vect_find_first_scalar_stmt_in_slp (node)->stmt;\n \t  }\n+      /* This can happen when all children are pre-existing vectors or\n+\t constants.  */\n+      if (!last_stmt)\n+\tlast_stmt = vect_find_first_scalar_stmt_in_slp (node)->stmt;\n       if (is_a <gphi *> (last_stmt))\n \tsi = gsi_after_labels (gimple_bb (last_stmt));\n       else"}, {"sha": "9228f9cde4a05207de0c0e98eadd4fb64944576c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "patch": "@@ -1315,29 +1315,7 @@ vect_init_vector_1 (vec_info *vinfo, stmt_vec_info stmt_vinfo, gimple *new_stmt,\n   if (gsi)\n     vect_finish_stmt_generation (vinfo, stmt_vinfo, new_stmt, gsi);\n   else\n-    {\n-      loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n-\n-      if (loop_vinfo)\n-        {\n-\t  class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-\t  basic_block new_bb;\n-\t  edge pe;\n-\n-\t  if (stmt_vinfo && nested_in_vect_loop_p (loop, stmt_vinfo))\n-\t    loop = loop->inner;\n-\n-\t  pe = loop_preheader_edge (loop);\n-          new_bb = gsi_insert_on_edge_immediate (pe, new_stmt);\n-          gcc_assert (!new_bb);\n-\t}\n-      else\n-       {\n-          bb_vec_info bb_vinfo = dyn_cast <bb_vec_info> (vinfo);\n-\t  gimple_stmt_iterator gsi_region_begin = bb_vinfo->region_begin;\n-\t  gsi_insert_before (&gsi_region_begin, new_stmt, GSI_SAME_STMT);\n-       }\n-    }\n+    vinfo->insert_on_entry (stmt_vinfo, new_stmt);\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n@@ -1592,6 +1570,7 @@ vect_finish_stmt_generation (vec_info *vinfo,\n \t{\n \t  tree vdef = gimple_vdef (at_stmt);\n \t  gimple_set_vuse (vec_stmt, gimple_vuse (at_stmt));\n+\t  gimple_set_modified (vec_stmt, true);\n \t  /* If we have an SSA vuse and insert a store, update virtual\n \t     SSA form to avoid triggering the renamer.  Do so only\n \t     if we can easily see all uses - which is what almost always"}, {"sha": "26a184696aa48cba95ae9d848f5e539a5af2aff6", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "patch": "@@ -625,6 +625,46 @@ vec_info::replace_stmt (gimple_stmt_iterator *gsi, stmt_vec_info stmt_info,\n   gsi_replace (gsi, new_stmt, true);\n }\n \n+/* Insert stmts in SEQ on the VEC_INFO region entry.  If CONTEXT is\n+   not NULL it specifies whether to use the sub-region entry\n+   determined by it, currently used for loop vectorization to insert\n+   on the inner loop entry vs. the outer loop entry.  */\n+\n+void\n+vec_info::insert_seq_on_entry (stmt_vec_info context, gimple_seq seq)\n+{\n+  if (loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (this))\n+    {\n+      class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n+      basic_block new_bb;\n+      edge pe;\n+\n+      if (context && nested_in_vect_loop_p (loop, context))\n+\tloop = loop->inner;\n+\n+      pe = loop_preheader_edge (loop);\n+      new_bb = gsi_insert_seq_on_edge_immediate (pe, seq);\n+      gcc_assert (!new_bb);\n+    }\n+  else\n+    {\n+      bb_vec_info bb_vinfo = as_a <bb_vec_info> (this);\n+      gimple_stmt_iterator gsi_region_begin = bb_vinfo->region_begin;\n+      gsi_insert_seq_before (&gsi_region_begin, seq, GSI_SAME_STMT);\n+    }\n+}\n+\n+/* Like insert_seq_on_entry but just inserts the single stmt NEW_STMT.  */\n+\n+void\n+vec_info::insert_on_entry (stmt_vec_info context, gimple *new_stmt)\n+{\n+  gimple_seq seq = NULL;\n+  gimple_stmt_iterator gsi = gsi_start (seq);\n+  gsi_insert_before_without_update (&gsi, new_stmt, GSI_SAME_STMT);\n+  insert_seq_on_entry (context, seq);\n+}\n+\n /* Create and initialize a new stmt_vec_info struct for STMT.  */\n \n stmt_vec_info"}, {"sha": "7c6de8397b38486a4d9ad8ebf24bf958734a062b", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5508c2d006f2d4f8670e6c3fed770ac1c85e64/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9e5508c2d006f2d4f8670e6c3fed770ac1c85e64", "patch": "@@ -334,6 +334,8 @@ class vec_info {\n   void move_dr (stmt_vec_info, stmt_vec_info);\n   void remove_stmt (stmt_vec_info);\n   void replace_stmt (gimple_stmt_iterator *, stmt_vec_info, gimple *);\n+  void insert_on_entry (stmt_vec_info, gimple *);\n+  void insert_seq_on_entry (stmt_vec_info, gimple_seq);\n \n   /* The type of vectorization.  */\n   vec_kind kind;"}]}