{"sha": "b1c59b31ef7adc832405209e9e2a77212284abd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjNTliMzFlZjdhZGM4MzI0MDUyMDllOWUyYTc3MjEyMjg0YWJkNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-01T15:44:16Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-01T21:49:20Z"}, "message": "c++: Allow new char[4]{\"foo\"} [PR77841]\n\nCurrently, we allow new char[]{\"foo\"}, but not new char[4]{\"foo\"}.\nWe should accept the latter too: [dcl.init.list]p3.3 says to treat\nthis as [dcl.init.string].\n\nWe were rejecting this code because we never called reshape_init before\nthe digest_init in build_new_1.  reshape_init handles [dcl.init.string]\nby unwrapping the STRING_CST from its enclosing { }, and digest_init\nassumes that reshape_init has been called for aggregates anyway, and an\narray is an aggregate.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/77841\n\t* init.c (build_new_1): Call reshape_init.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/77841\n\t* g++.dg/cpp0x/initlist-new4.C: New test.", "tree": {"sha": "42f54803b37d39309d4637b18e600ded4247e36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42f54803b37d39309d4637b18e600ded4247e36b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c59b31ef7adc832405209e9e2a77212284abd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c59b31ef7adc832405209e9e2a77212284abd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c59b31ef7adc832405209e9e2a77212284abd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c59b31ef7adc832405209e9e2a77212284abd7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f51543bb81cc953792270b40a9c812049e8b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f51543bb81cc953792270b40a9c812049e8b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10f51543bb81cc953792270b40a9c812049e8b4c"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "d4540db3605b9d823edf437a292384a4edc73968", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c59b31ef7adc832405209e9e2a77212284abd7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c59b31ef7adc832405209e9e2a77212284abd7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b1c59b31ef7adc832405209e9e2a77212284abd7", "patch": "@@ -3575,6 +3575,12 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t    /* We'll check the length at runtime.  */\n \t\t    domain = NULL_TREE;\n \t\t  arraytype = build_cplus_array_type (type, domain);\n+\t\t  /* If we have new char[4]{\"foo\"}, we have to reshape\n+\t\t     so that the STRING_CST isn't wrapped in { }.  */\n+\t\t  vecinit = reshape_init (arraytype, vecinit, complain);\n+\t\t  /* The middle end doesn't cope with the location wrapper\n+\t\t     around a STRING_CST.  */\n+\t\t  STRIP_ANY_LOCATION_WRAPPER (vecinit);\n \t\t  vecinit = digest_init (arraytype, vecinit, complain);\n \t\t}\n \t    }"}, {"sha": "d7b418426bb45cc54f6d5d7148a1af085735f31b", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-new4.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c59b31ef7adc832405209e9e2a77212284abd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-new4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c59b31ef7adc832405209e9e2a77212284abd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-new4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-new4.C?ref=b1c59b31ef7adc832405209e9e2a77212284abd7", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/77841\n+// { dg-do compile { target c++11 } }\n+\n+char *p1 = new char[4]{\"foo\"};\n+char *p2 = new char[5]{\"foo\"};\n+char *p3 = new char[3]{\"foo\"}; // { dg-error \"too long\" }"}]}