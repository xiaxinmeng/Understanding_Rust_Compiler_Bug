{"sha": "9d81164aa0447c738fe0435de14ec9666a03d5da", "node_id": "C_kwDOANBUbNoAKDlkODExNjRhYTA0NDdjNzM4ZmUwNDM1ZGUxNGVjOTY2NmEwM2Q1ZGE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-07T09:19:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-07T09:19:25Z"}, "message": "Merge #1295\n\n1295: AST Dump impl traits r=CohenArthur a=CohenArthur\n\nThis adds proper AST formatting for inherent impl blocks and traits.\r\n\r\nThis does not handle trait impls yet (`impl Trait for Type`) but it should be really easy to refactor and add.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "d306b2eb73c06ddc15193e359426bf6139891d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d306b2eb73c06ddc15193e359426bf6139891d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d81164aa0447c738fe0435de14ec9666a03d5da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJinxgdCRBK7hj4Ov3rIwAAMscIAHIaOsEh82jKn/24oQdymVHh\npP6+fBOeQxFk/SsP3ODvzNe6Z0n4Fi6A69xIyWcUd0E6RvuLlpZACmjc2kSkIom6\n/0oSIhuDgyduU3lp6iKZ/pimBro2o4P5cZNLj9/pQhPyhiGZ0w+L2FD5v+zCSITY\n5PQwRMriBSoQGtENjNyXdfIEKlCteGSWPb+oBSqoXX1cxI445pvW7mmSgNpz0uG/\nTGPmW+brWatgUHU15Jh/sYRij+BJ9Bmb1ubrYhoK9YQkWhR1u+v+2XIL2XLuAsiD\nY7O0/efboy4Cz2KcucLkgMXPfFapbeQ1T/5Nz6FRRijaURC3SnGi+CaHvTFgyjg=\n=Q4d6\n-----END PGP SIGNATURE-----\n", "payload": "tree d306b2eb73c06ddc15193e359426bf6139891d48\nparent 957914b4284213b1d72c9c4210892367acaf1419\nparent 4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1654593565 +0000\ncommitter GitHub <noreply@github.com> 1654593565 +0000\n\nMerge #1295\n\n1295: AST Dump impl traits r=CohenArthur a=CohenArthur\n\nThis adds proper AST formatting for inherent impl blocks and traits.\r\n\r\nThis does not handle trait impls yet (`impl Trait for Type`) but it should be really easy to refactor and add.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d81164aa0447c738fe0435de14ec9666a03d5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d81164aa0447c738fe0435de14ec9666a03d5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d81164aa0447c738fe0435de14ec9666a03d5da/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957914b4284213b1d72c9c4210892367acaf1419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957914b4284213b1d72c9c4210892367acaf1419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957914b4284213b1d72c9c4210892367acaf1419"}, {"sha": "4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7"}], "stats": {"total": 187, "additions": 151, "deletions": 36}, "files": [{"sha": "cdcb5632cc7451dee8b64aa44fce65dc81934e2d", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 143, "deletions": 16, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d81164aa0447c738fe0435de14ec9666a03d5da/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d81164aa0447c738fe0435de14ec9666a03d5da/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=9d81164aa0447c738fe0435de14ec9666a03d5da", "patch": "@@ -102,7 +102,9 @@ Dump::visit (TypePathSegmentFunction &segment)\n \n void\n Dump::visit (TypePath &path)\n-{}\n+{\n+  stream << path.as_string ();\n+}\n \n void\n Dump::visit (QualifiedPathInExpression &path)\n@@ -253,8 +255,8 @@ Dump::visit (BlockExpr &expr)\n   if (expr.has_tail_expr ())\n     expr.get_tail_expr ()->accept_vis (*this);\n \n-  stream << \"\\n}\\n\";\n-  indentation.increment ();\n+  indentation.decrement ();\n+  stream << \"\\n\" << indentation << \"}\\n\";\n }\n \n void\n@@ -364,7 +366,10 @@ Dump::visit (AsyncBlockExpr &expr)\n // rust-item.h\n void\n Dump::visit (TypeParam &param)\n-{}\n+{\n+  // Is it possible to have a null type here?\n+  param.get_type ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (LifetimeWhereClauseItem &item)\n@@ -376,7 +381,36 @@ Dump::visit (TypeBoundWhereClauseItem &item)\n \n void\n Dump::visit (Method &method)\n-{}\n+{\n+  stream << indentation << \"fn \" << method.get_method_name () << '(';\n+\n+  auto &self = method.get_self_param ();\n+  stream << self.as_string ();\n+\n+  auto &params = method.get_function_params ();\n+  for (auto &param : params)\n+    {\n+      stream << \", \";\n+      format_function_param (param);\n+    }\n+\n+  stream << \") \";\n+\n+  if (method.has_return_type ())\n+    {\n+      stream << \"-> \";\n+      method.get_return_type ()->accept_vis (*this);\n+      stream << \" \";\n+    }\n+\n+  auto &block = method.get_definition ();\n+  if (!block)\n+    stream << ';';\n+  else\n+    block->accept_vis (*this);\n+\n+  stream << '\\n';\n+}\n \n void\n Dump::visit (Module &module)\n@@ -405,7 +439,7 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n-  stream << \"fn \" << function.get_function_name () << '(';\n+  stream << indentation << \"fn \" << function.get_function_name () << '(';\n \n   auto &params = function.get_function_params ();\n   if (params.size () >= 1)\n@@ -424,6 +458,7 @@ Dump::visit (Function &function)\n     {\n       stream << \"-> \";\n       function.get_return_type ()->accept_vis (*this);\n+      stream << \" \";\n     }\n \n   auto &block = function.get_definition ();\n@@ -479,29 +514,113 @@ void\n Dump::visit (StaticItem &static_item)\n {}\n \n+void\n+Dump::format_function_common (std::unique_ptr<Type> &return_type,\n+\t\t\t      std::unique_ptr<BlockExpr> &block)\n+{\n+  if (return_type)\n+    {\n+      stream << \"-> \";\n+      return_type->accept_vis (*this);\n+    }\n+\n+  if (block)\n+    {\n+      if (return_type)\n+\tstream << ' ';\n+      block->accept_vis (*this);\n+    }\n+  else\n+    stream << \";\\n\";\n+}\n+\n void\n Dump::visit (TraitItemFunc &item)\n-{}\n+{\n+  auto func = item.get_trait_function_decl ();\n+  stream << indentation << \"fn \" << func.get_identifier () << '(';\n+\n+  auto &params = func.get_function_params ();\n+  for (auto &param : params)\n+    {\n+      stream << \", \";\n+      format_function_param (param);\n+    }\n+\n+  stream << \") \";\n+\n+  format_function_common (func.get_return_type (), item.get_definition ());\n+}\n \n void\n Dump::visit (TraitItemMethod &item)\n-{}\n+{\n+  auto method = item.get_trait_method_decl ();\n+  stream << indentation << \"fn \" << method.get_identifier () << '(';\n+\n+  auto &self = method.get_self_param ();\n+  stream << self.as_string ();\n+\n+  auto &params = method.get_function_params ();\n+  for (auto &param : params)\n+    {\n+      stream << \", \";\n+      format_function_param (param);\n+    }\n+\n+  stream << \") \";\n+\n+  format_function_common (method.get_return_type (), item.get_definition ());\n+}\n \n void\n Dump::visit (TraitItemConst &item)\n-{}\n+{\n+  stream << indentation << \"const \" << item.get_identifier () << \": \";\n+  item.get_type ()->accept_vis (*this);\n+  stream << \";\\n\";\n+}\n \n void\n Dump::visit (TraitItemType &item)\n-{}\n+{\n+  stream << indentation << \"type \" << item.get_identifier () << \";\\n\";\n+}\n \n void\n Dump::visit (Trait &trait)\n-{}\n+{\n+  stream << \"trait \" << trait.get_identifier () << \" {\\n\";\n+  indentation.increment ();\n+\n+  for (auto &item : trait.get_trait_items ())\n+    item->accept_vis (*this);\n+\n+  indentation.decrement ();\n+  stream << \"\\n}\\n\";\n+}\n \n void\n Dump::visit (InherentImpl &impl)\n-{}\n+{\n+  stream << \"impl \";\n+\n+  // FIXME: Handle generics\n+\n+  impl.get_type ()->accept_vis (*this);\n+\n+  // FIXME: Handle where-clause\n+  // FIXME: Handle inner attributes\n+\n+  stream << \" {\\n\";\n+  indentation.increment ();\n+\n+  for (auto &item : impl.get_impl_items ())\n+    item->accept_vis (*this);\n+\n+  indentation.decrement ();\n+  stream << \"\\n}\\n\";\n+}\n \n void\n Dump::visit (TraitImpl &impl)\n@@ -728,19 +847,27 @@ Dump::visit (RawPointerType &type)\n \n void\n Dump::visit (ReferenceType &type)\n-{}\n+{\n+  type.get_type_referenced ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ArrayType &type)\n-{}\n+{\n+  type.get_elem_type ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (SliceType &type)\n-{}\n+{\n+  type.get_elem_type ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (InferredType &type)\n-{}\n+{\n+  stream << \"_\";\n+}\n \n void\n Dump::visit (BareFunctionType &type)"}, {"sha": "e6c6ca4bc6f4d38cb81e6aa9d5842db3b9420404", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d81164aa0447c738fe0435de14ec9666a03d5da/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d81164aa0447c738fe0435de14ec9666a03d5da/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=9d81164aa0447c738fe0435de14ec9666a03d5da", "patch": "@@ -55,6 +55,10 @@ class Dump : public ASTVisitor\n   std::ostream &stream;\n   Indent indentation;\n \n+  // Format together common items of functions: Parameters, return type, block\n+  void format_function_common (std::unique_ptr<Type> &return_type,\n+\t\t\t       std::unique_ptr<BlockExpr> &block);\n+\n   /**\n    * Format a function's definition parameter\n    */"}, {"sha": "6d953fb128c5e5865868a90dd731b50094127061", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d81164aa0447c738fe0435de14ec9666a03d5da/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d81164aa0447c738fe0435de14ec9666a03d5da/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=9d81164aa0447c738fe0435de14ec9666a03d5da", "patch": "@@ -2872,11 +2872,7 @@ struct TraitFunctionDecl\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<Type> &get_return_type ()\n-  {\n-    rust_assert (has_return_type ());\n-    return return_type;\n-  }\n+  std::unique_ptr<Type> &get_return_type () { return return_type; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   WhereClause &get_where_clause () { return where_clause; }\n@@ -2954,11 +2950,7 @@ class TraitItemFunc : public TraitItem\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<BlockExpr> &get_definition ()\n-  {\n-    rust_assert (has_definition ());\n-    return block_expr;\n-  }\n+  std::unique_ptr<BlockExpr> &get_definition () { return block_expr; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   TraitFunctionDecl &get_trait_function_decl ()\n@@ -3097,11 +3089,7 @@ struct TraitMethodDecl\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<Type> &get_return_type ()\n-  {\n-    rust_assert (has_return_type ());\n-    return return_type;\n-  }\n+  std::unique_ptr<Type> &get_return_type () { return return_type; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   WhereClause &get_where_clause () { return where_clause; }\n@@ -3189,11 +3177,7 @@ class TraitItemMethod : public TraitItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<BlockExpr> &get_definition ()\n-  {\n-    rust_assert (has_definition ());\n-    return block_expr;\n-  }\n+  std::unique_ptr<BlockExpr> &get_definition () { return block_expr; }\n \n protected:\n   // Clone function implementation as (not pure) virtual method"}]}