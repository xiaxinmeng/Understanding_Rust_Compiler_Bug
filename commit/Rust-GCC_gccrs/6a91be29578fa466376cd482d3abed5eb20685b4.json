{"sha": "6a91be29578fa466376cd482d3abed5eb20685b4", "node_id": "C_kwDOANBUbNoAKDZhOTFiZTI5NTc4ZmE0NjYzNzZjZDQ4MmQzYWJlZDVlYjIwNjg1YjQ", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-04-26T11:16:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-30T08:29:03Z"}, "message": "[Ada] Avoid creating a finalization wrapper block for functions\n\nThis patch fixes a bug whereby if a function body has local objects that\nare finalizable, and has a return statement that requires generation of\ntransient finalizable temps, and there are dynamic-sized objects\nrequiring pushing/popping the (primary) stack at run time, and the\nfunction body has exception handlers, then incorrect code is\ngenerated. In particular, the transient objects are finalized after they\nhave been deallocated. This can cause seg faults, corrupted heap, and\nthe like.\n\nNote that if there are no dynamic-sized objects, then the bug does\nnot occur, because the back end allocates objects of compile-time-known\nsize based on where they are referenced, rather than which local\nblock they are declared in.\n\nThis patch relies on the fact that an At_End handler and regular\nexception handlers CAN coexist in the same handled statement sequence,\nwhich was not true some years ago.\n\ngcc/ada/\n\n\t* exp_ch7.adb (Wrap_HSS_In_Block): Do not create a new block in\n\tthe case of function bodies. We include all subprogram bodies,\n\tbecause it's harmless for procedures. We cannot easily avoid\n\tcreating this block in ALL cases, because some transformations\n\tof (e.g.) task bodies end up moving some code such that the\n\twrong exception handlers apply to that code.\n\t(Build_Finalizer_Call): Remove code for creating a new block.\n\tThis was unreachable code, given that Wrap_HSS_In_Block has\n\talready done that, but with the above change to\n\tWrap_HSS_In_Block, this code becomes reachable, and triggers\n\tessentially the same bug.\n\t* exp_ch7.ads: Adjust comment.", "tree": {"sha": "7a573ac16e3111a1521a3642275fce59a68a16ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a573ac16e3111a1521a3642275fce59a68a16ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a91be29578fa466376cd482d3abed5eb20685b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a91be29578fa466376cd482d3abed5eb20685b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a91be29578fa466376cd482d3abed5eb20685b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a91be29578fa466376cd482d3abed5eb20685b4/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "507ed659e0110e3cba9aa8bba875768833d7b7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507ed659e0110e3cba9aa8bba875768833d7b7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/507ed659e0110e3cba9aa8bba875768833d7b7ea"}], "stats": {"total": 84, "additions": 30, "deletions": 54}, "files": [{"sha": "d611d0e52d4a62fee0dfe992840a021952d9d4e0", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 28, "deletions": 52, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a91be29578fa466376cd482d3abed5eb20685b4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a91be29578fa466376cd482d3abed5eb20685b4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=6a91be29578fa466376cd482d3abed5eb20685b4", "patch": "@@ -341,8 +341,8 @@ package body Exp_Ch7 is\n    --  Build_Finalizer.\n \n    procedure Build_Finalizer_Call (N : Node_Id; Fin_Id : Entity_Id);\n-   --  N is a construct which contains a handled sequence of statements, Fin_Id\n-   --  is the entity of a finalizer. Create an At_End handler which covers the\n+   --  N is a construct that contains a handled sequence of statements, Fin_Id\n+   --  is the entity of a finalizer. Create an At_End handler that covers the\n    --  statements of N and calls Fin_Id. If the handled statement sequence has\n    --  an exception handler, the statements will be wrapped in a block to avoid\n    --  unwanted interaction with the new At_End handler.\n@@ -3722,7 +3722,7 @@ package body Exp_Ch7 is\n       --  which belongs to a protected type.\n \n       Loc : constant Source_Ptr := Sloc (N);\n-      HSS : Node_Id;\n+      HSS : Node_Id := Handled_Statement_Sequence (N);\n \n    begin\n       --  Do not perform this expansion in SPARK mode because we do not create\n@@ -3732,13 +3732,8 @@ package body Exp_Ch7 is\n          return;\n       end if;\n \n-      --  The At_End handler should have been assimilated by the finalizer\n-\n-      HSS := Handled_Statement_Sequence (N);\n-      pragma Assert (No (At_End_Proc (HSS)));\n-\n       --  If the construct to be cleaned up is a protected subprogram body, the\n-      --  finalizer call needs to be associated with the block which wraps the\n+      --  finalizer call needs to be associated with the block that wraps the\n       --  unprotected version of the subprogram. The following illustrates this\n       --  scenario:\n \n@@ -3760,27 +3755,9 @@ package body Exp_Ch7 is\n \n       if Is_Prot_Body then\n          HSS := Handled_Statement_Sequence (Last (Statements (HSS)));\n-\n-      --  An At_End handler and regular exception handlers cannot coexist in\n-      --  the same statement sequence. Wrap the original statements in a block.\n-\n-      elsif Present (Exception_Handlers (HSS)) then\n-         declare\n-            End_Lab : constant Node_Id := End_Label (HSS);\n-            Block   : Node_Id;\n-\n-         begin\n-            Block :=\n-              Make_Block_Statement (Loc, Handled_Statement_Sequence => HSS);\n-\n-            Set_Handled_Statement_Sequence (N,\n-              Make_Handled_Sequence_Of_Statements (Loc, New_List (Block)));\n-\n-            HSS := Handled_Statement_Sequence (N);\n-            Set_End_Label (HSS, End_Lab);\n-         end;\n       end if;\n \n+      pragma Assert (No (At_End_Proc (HSS)));\n       Set_At_End_Proc (HSS, New_Occurrence_Of (Fin_Id, Loc));\n \n       --  Attach reference to finalizer to tree, for LLVM use\n@@ -5568,10 +5545,10 @@ package body Exp_Ch7 is\n    procedure Expand_Cleanup_Actions (N : Node_Id) is\n       pragma Assert\n         (Nkind (N) in N_Block_Statement\n-                    | N_Entry_Body\n-                    | N_Extended_Return_Statement\n                     | N_Subprogram_Body\n-                    | N_Task_Body);\n+                    | N_Task_Body\n+                    | N_Entry_Body\n+                    | N_Extended_Return_Statement);\n \n       Scop : constant Entity_Id := Current_Scope;\n \n@@ -5639,18 +5616,14 @@ package body Exp_Ch7 is\n       -----------------------\n \n       procedure Wrap_HSS_In_Block is\n-         Block    : Node_Id;\n-         Block_Id : Entity_Id;\n-         End_Lab  : Node_Id;\n-\n-      begin\n-         --  Preserve end label to provide proper cross-reference information\n-\n-         End_Lab := End_Label (HSS);\n-         Block :=\n+         Block : constant Node_Id :=\n            Make_Block_Statement (Loc, Handled_Statement_Sequence => HSS);\n+         Block_Id : constant Entity_Id :=\n+           New_Internal_Entity (E_Block, Current_Scope, Loc, 'B');\n+         End_Lab : constant Node_Id := End_Label (HSS);\n+         --  Preserve end label to provide proper cross-reference information\n \n-         Block_Id := New_Internal_Entity (E_Block, Current_Scope, Loc, 'B');\n+      begin\n          Set_Identifier (Block, New_Occurrence_Of (Block_Id, Loc));\n          Set_Etype (Block_Id, Standard_Void_Type);\n          Set_Block_Node (Block_Id, Identifier (Block));\n@@ -5660,14 +5633,11 @@ package body Exp_Ch7 is\n \n          Set_Is_Finalization_Wrapper (Block);\n \n-         Set_Handled_Statement_Sequence (N,\n-           Make_Handled_Sequence_Of_Statements (Loc, New_List (Block)));\n-         HSS := Handled_Statement_Sequence (N);\n-\n+         HSS := Make_Handled_Sequence_Of_Statements (Loc,\n+           Statements => New_List (Block),\n+           End_Label => End_Lab);\n          Set_First_Real_Statement (HSS, Block);\n-         Set_End_Label (HSS, End_Lab);\n-\n-         --  Comment needed here, see RH for 1.306 ???\n+         Set_Handled_Statement_Sequence (N, HSS);\n \n          if Nkind (N) = N_Subprogram_Body then\n             Set_Has_Nested_Block_With_Handler (Scop);\n@@ -5789,11 +5759,17 @@ package body Exp_Ch7 is\n             Set_Uses_Sec_Stack (Scop, False);\n          end if;\n \n-         --  If exception handlers are present, wrap the sequence of statements\n-         --  in a block since it is not possible to have exception handlers and\n-         --  an At_End handler in the same construct.\n+         --  If exception handlers are present in a non-subprogram\n+         --  construct, wrap the sequence of statements in a block.\n+         --  Otherwise, code can be moved so that the wrong handlers\n+         --  apply. It is important not to do this for function bodies,\n+         --  because otherwise transient finalizable objects created\n+         --  by a return statement get finalized too late. It is harmless\n+         --  not to do this for procedures.\n \n-         if Present (Exception_Handlers (HSS)) then\n+         if Present (Exception_Handlers (HSS))\n+           and then Nkind (N) /= N_Subprogram_Body\n+         then\n             Wrap_HSS_In_Block;\n \n          --  Ensure that the First_Real_Statement field is set"}, {"sha": "1f1ab1676857bbcc5a0e3d979d2e39d7c0a8841a", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a91be29578fa466376cd482d3abed5eb20685b4/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a91be29578fa466376cd482d3abed5eb20685b4/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=6a91be29578fa466376cd482d3abed5eb20685b4", "patch": "@@ -255,8 +255,8 @@ package Exp_Ch7 is\n    procedure Expand_Cleanup_Actions (N : Node_Id);\n    --  Expand the necessary stuff into a scope to enable finalization of local\n    --  objects and deallocation of transient data when exiting the scope. N is\n-   --  a \"scope node\" that is to say one of the following: N_Block_Statement,\n-   --  N_Subprogram_Body, N_Task_Body, N_Entry_Body.\n+   --  one of N_Block_Statement, N_Subprogram_Body, N_Task_Body, N_Entry_Body,\n+   --  or N_Extended_Return_Statement.\n \n    procedure Establish_Transient_Scope\n      (N                : Node_Id;"}]}