{"sha": "6b148bd9e357e8b190299e19befe6ba8a594103f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxNDhiZDllMzU3ZThiMTkwMjk5ZTE5YmVmZTZiYThhNTk0MTAzZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-05-03T12:28:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-05-03T12:28:41Z"}, "message": "crti.asm: Remove trailing spaces.\n\n\t* config/h8300/crti.asm: Remove trailing spaces.\n\t* config/h8300/h8300.c: Likewise.\n\t* config/h8300/lib1funcs.asm: Likewise.\n\nFrom-SVN: r53090", "tree": {"sha": "3225a290fa2820c0a7ac9de9b5c05f897c067126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3225a290fa2820c0a7ac9de9b5c05f897c067126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b148bd9e357e8b190299e19befe6ba8a594103f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b148bd9e357e8b190299e19befe6ba8a594103f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b148bd9e357e8b190299e19befe6ba8a594103f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b148bd9e357e8b190299e19befe6ba8a594103f/comments", "author": null, "committer": null, "parents": [{"sha": "609688f3c4bc401bddf70e0b3a7ed02a99a9294c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609688f3c4bc401bddf70e0b3a7ed02a99a9294c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609688f3c4bc401bddf70e0b3a7ed02a99a9294c"}], "stats": {"total": 108, "additions": 57, "deletions": 51}, "files": [{"sha": "a3dd64ff78026b7a072eed355c50cb0037c227dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b148bd9e357e8b190299e19befe6ba8a594103f", "patch": "@@ -1,3 +1,9 @@\n+2002-05-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/crti.asm: Remove trailing spaces.\n+\t* config/h8300/h8300.c: Likewise.\n+\t* config/h8300/lib1funcs.asm: Likewise.\n+\n 2002-05-02  Jason Merrill  <jason@redhat.com>\n \n \t* defaults.h (BOOL_TYPE_SIZE): Move default here from cp/decl.c."}, {"sha": "f1483fb85cd30d76b989cbca791c54ab05d4448f", "filename": "gcc/config/h8300/crti.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2Fconfig%2Fh8300%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2Fconfig%2Fh8300%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fcrti.asm?ref=6b148bd9e357e8b190299e19befe6ba8a594103f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -50,4 +50,4 @@ Boston, MA 02111-1307, USA.  */\n __init:\n         .section .fini\n         .global  __fini\n-__fini:  \n+__fini:"}, {"sha": "aa23bada82a984c9eb7c99ca697caa8094b0c12a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=6b148bd9e357e8b190299e19befe6ba8a594103f", "patch": "@@ -2958,7 +2958,7 @@ compute_a_shift_length (insn, operands)\n \t    }\n \n \t  wlength += h8300_asm_insn_count (info.shift1) * n;\n-\t    \n+\n \t  return 2 * wlength;\n \n \tcase SHIFT_ROT_AND:\n@@ -2977,7 +2977,7 @@ compute_a_shift_length (insn, operands)\n \t      }\n \n \t    wlength += h8300_asm_insn_count (info.shift1) * m;\n-\t    \n+\n \t    /* Now mask off the high bits.  */\n \t    switch (mode)\n \t      {"}, {"sha": "b86e9efe5e24ff42c44968587cebf05a48359d42", "filename": "gcc/config/h8300/lib1funcs.asm", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b148bd9e357e8b190299e19befe6ba8a594103f/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm?ref=6b148bd9e357e8b190299e19befe6ba8a594103f", "patch": "@@ -2,7 +2,7 @@\n ;; Contributed by Steve Chamberlain <sac@cygnus.com>\n ;; Optimizations by Toshiyasu Morita <toshiyasu.morita@hsa.hitachi.com>\n \n-/* Copyright (C) 1994, 2000, 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 1994, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -162,7 +162,7 @@ ___ucmpsi2:\n ;; \"supporting routines\".\n \n ; general purpose normalize routine\n-; \n+;\n ; divisor in A0\n ; dividend in A1\n ; turns both into +ve numbers, and leaves what the answer sign\n@@ -174,13 +174,13 @@ ___ucmpsi2:\n divnorm:\n \tmov.b\t#0x0,A2L\n \tor\tA0H,A0H\t\t; is divisor > 0\n-\tbge\t_lab1\t\t\t\n+\tbge\t_lab1\n \tnot\tA0H\t\t; no - then make it +ve\n \tnot\tA0L\n-\tadds\t#1,A0\t\t\t\n+\tadds\t#1,A0\n \txor\t#0x1,A2L\t; and remember that in A2L\n _lab1:\tor\tA1H,A1H\t; look at dividend\n-\tbge\t_lab2\t\t\n+\tbge\t_lab2\n \tnot\tA1H\t\t; it is -ve, make it positive\n \tnot\tA1L\n \tadds\t#1,A1\n@@ -191,13 +191,13 @@ _lab2:\trts\n modnorm:\n \tmov.b\t#0x0,A2L\n \tor\tA0H,A0H\t\t; is divisor > 0\n-\tbge\t_lab7\t\t\t\n+\tbge\t_lab7\n \tnot\tA0H\t\t; no - then make it +ve\n \tnot\tA0L\n-\tadds\t#1,A0\t\t\t\n+\tadds\t#1,A0\n \txor\t#0x1,A2L\t; and remember that in A2L\n _lab7:\tor\tA1H,A1H\t; look at dividend\n-\tbge\t_lab8\t\t\n+\tbge\t_lab8\n \tnot\tA1H\t\t; it is -ve, make it positive\n \tnot\tA1L\n \tadds\t#1,A1\n@@ -214,7 +214,7 @@ negans:\tor\tA2L,A2L\t; should answer be negative ?\n \tnot\tA0H\t; yes, so make it so\n \tnot\tA0L\n \tadds\t#1,A0\n-_lab4:\trts\t\n+_lab4:\trts\n \n ; A0=A0%A1 signed\n \n@@ -251,13 +251,13 @@ ___umodhi3:\n \n \t.global\t___udivhi3\n ___udivhi3:\n-\t\t\t\t; A0 A1 A2 A3 \n+\t\t\t\t; A0 A1 A2 A3\n \t\t\t\t; Nn Dd       P\n-\tsub.w\tA3,A3\t\t; Nn Dd xP 00 \n-\tor\tA1H,A1H\t\t \n+\tsub.w\tA3,A3\t\t; Nn Dd xP 00\n+\tor\tA1H,A1H\n \tbne\tdivlongway\n-\tor\tA0H,A0H\t\t\n-\tbeq\t_lab6\t\t\n+\tor\tA0H,A0H\n+\tbeq\t_lab6\n \n ; we know that D == 0 and N is != 0\n \tmov.b\tA0H,A3L\t\t; Nn Dd xP 0N\n@@ -269,7 +269,7 @@ _lab6:\tmov.b\tA0L,A3L\t\t;           n\n \tmov.b\tA3L,A0L\t\t; Qq\n \tmov.b\tA3H,A3L         ;           m\n \tmov.b\t#0x0,A3H\t; Qq       0m\n-\trts\t\n+\trts\n \n ; D != 0 - which means the denominator is\n ;          loop around to get the result.\n@@ -280,19 +280,19 @@ divlongway:\n \tmov.b\t#0x8,A2H\t;       8\n div8:\tadd.b\tA0L,A0L\t\t; n*=2\n \trotxl\tA3L\t\t; Make remainder bigger\n-\trotxl\tA3H\t\t\n+\trotxl\tA3H\n \tsub.w\tA1,A3\t\t; Q-=N\n \tbhs\tsetbit\t\t; set a bit ?\n \tadd.w\tA1,A3\t\t;  no : too far , Q+=N\n \n-\tdec\tA2H\t\t\n-\tbne\tdiv8\t\t; next bit\t\n-\trts\t\n+\tdec\tA2H\n+\tbne\tdiv8\t\t; next bit\n+\trts\n \n setbit:\tinc\tA0L\t\t; do insert bit\n-\tdec\tA2H\t\t\n-\tbne\tdiv8\t\t; next bit\t\n-\trts\t\n+\tdec\tA2H\n+\tbne\tdiv8\t\t; next bit\n+\trts\n \n #endif /* __H8300__ */\n #endif /* L_divhi3 */\n@@ -301,7 +301,7 @@ setbit:\tinc\tA0L\t\t; do insert bit\n \n ;; 4 byte integer divides for the H8/300.\n ;;\n-;; We have one routine which does all the work and lots of \n+;; We have one routine which does all the work and lots of\n ;; little ones which prepare the args and massage the sign.\n ;; We bunch all of this into one object file since there are several\n ;; \"supporting routines\".\n@@ -334,11 +334,11 @@ divnorm:\n postive:\n \tmov.b\tA2H,A2H\t\t; is the denominator -ve\n \tbge\tpostive2\n-\tnot\tA2L\t\t\n+\tnot\tA2L\n \tnot\tA2H\n \tnot\tA3L\n \tnot\tA3H\n-\tadd.b\t#1,A3L\t\n+\tadd.b\t#1,A3L\n \taddx\t#0,A3H\n \taddx\t#0,A2L\n \taddx\t#0,A2H\n@@ -368,11 +368,11 @@ modnorm:\n mpostive:\n \tmov.b\tA2H,A2H\t\t; is the denominator -ve\n \tbge\tmpostive2\n-\tnot\tA2L\t\t\n+\tnot\tA2L\n \tnot\tA2H\n \tnot\tA3L\n \tnot\tA3H\n-\tadd.b\t#1,A3L\t\n+\tadd.b\t#1,A3L\n \taddx\t#0,A3H\n \taddx\t#0,A2L\n \taddx\t#0,A2H\n@@ -424,7 +424,7 @@ mpostive2:\n ; denominator in A2/A3\n \t.global\t___modsi3\n ___modsi3:\n-\tPUSHP\tS2P\t\t\n+\tPUSHP\tS2P\n \tPUSHP\tS0P\n \tPUSHP\tS1P\n \n@@ -461,7 +461,7 @@ ___umodsi3:\n \tmov.l\tS0P,A0P\n #endif\n \tbra\texitdiv\n-\t\n+\n \t.global\t___divsi3\n ___divsi3:\n \tPUSHP\tS2P\n@@ -477,7 +477,7 @@ exitdiv:\n \n \tor\tS2L,S2L\n \tbeq\treti\n-\t\n+\n \t; should be -ve\n #ifdef __H8300__\n \tnot\tA0H\n@@ -495,7 +495,7 @@ exitdiv:\n \n reti:\n \tPOPP\tS2P\n-\trts\t\n+\trts\n \n \t; takes A0/A1 numerator (A0P for 300H)\n \t; A2/A3 denominator (A1P for 300H)\n@@ -538,7 +538,7 @@ NumByte3Zero:\n \n         mov.b\tS1H,S1L\n         mov.b\t#0x0,S1H\n-        rts\t\n+        rts\n \n ; have to do the divide by shift and test\n DenHighZero:\n@@ -562,21 +562,21 @@ nextbit:\n         sub.w\tA3,S1\t; does it all fit\n         subx\tA2L,S0L\n         subx\tA2H,S0H\n-        bhs\tsetone\t \n+        bhs\tsetone\n \n         add.w\tA3,S1\t; no, restore mistake\n         addx\tA2L,S0L\n         addx\tA2H,S0H\n \n         dec\tS2H\n         bne\tnextbit\n-        rts\t\n-\t\n+        rts\n+\n setone:\n \tinc\tA1L\n         dec\tS2H\n         bne\tnextbit\n-        rts\t\n+        rts\n \n #else /* __H8300H__ */\n \n@@ -631,11 +631,11 @@ setone:\n ;; HImode multiply.\n ; The H8/300 only has an 8*8->16 multiply.\n ; The answer is the same as:\n-; \n+;\n ; product = (srca.l * srcb.l) + ((srca.h * srcb.l) + (srcb.h * srca.l)) * 256\n ; (we can ignore A1.h * A0.h cause that will all off the top)\n ; A0 in\n-; A1 in \n+; A1 in\n ; A0 answer\n \n #ifdef __H8300__\n@@ -644,15 +644,15 @@ setone:\n \t.global\t___mulhi3\n ___mulhi3:\n \tmov.b\tA1L,A2L\t\t; A2l gets srcb.l\n-\tmulxu\tA0L,A2\t\t; A2 gets first sub product \n+\tmulxu\tA0L,A2\t\t; A2 gets first sub product\n \n \tmov.b\tA0H,A3L\t\t; prepare for\n \tmulxu\tA1L,A3\t\t; second sub product\n \n \tadd.b\tA3L,A2H\t\t; sum first two terms\n \n \tmov.b\tA1H,A3L\t\t; third sub product\n-\tmulxu\tA0L,A3\t\t\n+\tmulxu\tA0L,A3\n \n \tadd.b\tA3L,A2H\t\t; almost there\n \tmov.w\tA2,A0\t\t; that is\n@@ -664,7 +664,7 @@ ___mulhi3:\n #ifdef L_mulsi3\n \n ;; SImode multiply.\n-;; \n+;;\n ;; I think that shift and add may be sufficient for this.  Using the\n ;; supplied 8x8->16 would need 10 ops of 14 cycles each + overhead.  This way\n ;; the inner loop uses maybe 20 cycles + overhead, but terminates\n@@ -673,7 +673,7 @@ ___mulhi3:\n ;; A0/A1 src_a\n ;; A2/A3 src_b\n ;;\n-;;  while (a) \n+;;  while (a)\n ;;    {\n ;;      if (a & 1)\n ;;        r += b;\n@@ -691,10 +691,10 @@ ___mulsi3:\n \tPUSHP\tS0P\n \tPUSHP\tS1P\n \tPUSHP\tS2P\n-\t\n+\n \tsub.w\tS0,S0\n \tsub.w\tS1,S1\n-\t\n+\n \t; while (a)\n _top:\tmov.w\tA0,A0\n \tbne\t_more\n@@ -713,15 +713,15 @@ _nobit:\n \trotxr\tA0L\n \trotxr\tA1H\n \trotxr\tA1L\n-\t\n+\n \t; b <<= 1\n \tadd.w\tA3,A3\n \taddx\tA2L,A2L\n \taddx\tA2H,A2H\n \tbra \t_top\n \n _done:\n-\tmov.w\tS0,A0\t\n+\tmov.w\tS0,A0\n \tmov.w\tS1,A1\n \tPOPP\tS2P\n \tPOPP\tS1P\n@@ -751,7 +751,7 @@ _done:\n ___mulsi3:\n \tmov.w\tr1,r2   ; ( 2 states) b * d\n \tmulxu\tr0,er2  ; (22 states)\n-  \n+\n \tmov.w\te0,r3   ; ( 2 states) a * d\n \tbeq\tL_skip1 ; ( 4 states)\n \tmulxu\tr1,er3  ; (22 states)"}]}