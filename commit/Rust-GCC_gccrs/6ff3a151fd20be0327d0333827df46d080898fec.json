{"sha": "6ff3a151fd20be0327d0333827df46d080898fec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmM2ExNTFmZDIwYmUwMzI3ZDAzMzM4MjdkZjQ2ZDA4MDg5OGZlYw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-22T13:44:40Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-22T13:44:40Z"}, "message": "common.opt: More -f switches.\n\n\t* common.opt: More -f switches.\n\t* opts.c (common_handle_options): Handle them.\n\t* toplev.c (time_report): Make extern.\n\t(f_options): USe flag_dummy.\n\t(decode_f_option): No need to use f_options now.\n\t* toplev.h (flag_cprop_registers, flag_ssa, flag_ssa_ccp,\n\tflag_ssa_dce, time_report, flag_new_regalloc): Make extern.\n\nFrom-SVN: r68328", "tree": {"sha": "aaface3741c4555afe1a1b87e5860bb23a803353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaface3741c4555afe1a1b87e5860bb23a803353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff3a151fd20be0327d0333827df46d080898fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff3a151fd20be0327d0333827df46d080898fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff3a151fd20be0327d0333827df46d080898fec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff3a151fd20be0327d0333827df46d080898fec/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f6e4e977d93c63da8811bd7d3c3e9be0d71e414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6e4e977d93c63da8811bd7d3c3e9be0d71e414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6e4e977d93c63da8811bd7d3c3e9be0d71e414"}], "stats": {"total": 610, "additions": 525, "deletions": 85}, "files": [{"sha": "540c6b728144a6896199ea4e2e62d72d7b45408c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ff3a151fd20be0327d0333827df46d080898fec", "patch": "@@ -1,3 +1,13 @@\n+2003-06-22  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* common.opt: More -f switches.\n+\t* opts.c (common_handle_options): Handle them.\n+\t* toplev.c (time_report): Make extern.\n+\t(f_options): USe flag_dummy.\n+\t(decode_f_option): No need to use f_options now.\n+\t* toplev.h (flag_cprop_registers, flag_ssa, flag_ssa_ccp,\n+\tflag_ssa_dce, time_report, flag_new_regalloc): Make extern.\n+\n 2003-06-22  Andreas Jaeger  <aj@suse.de>\n \n \t* c-lex.c: Convert to ISO C90."}, {"sha": "331199ff7edd989f48dc9ea0bef8f7bc66298262", "filename": "gcc/common.opt", "status": "modified", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6ff3a151fd20be0327d0333827df46d080898fec", "patch": "@@ -139,18 +139,57 @@ Common Joined\n dumpbase\n Common Separate\n \n+fPIC\n+Common\n+\n+fPIE\n+Common\n+\n+falign-functions\n+Common\n+\n falign-functions=\n Common RejectNegative Joined UInteger\n \n+falign-jumps\n+Common\n+\n falign-jumps=\n Common RejectNegative Joined UInteger\n \n+falign-labels\n+Common\n+\n falign-labels=\n Common RejectNegative Joined UInteger\n \n+falign-loops\n+Common\n+\n falign-loops=\n Common RejectNegative Joined UInteger\n \n+fargument-alias\n+Common\n+\n+fargument-noalias\n+Common\n+\n+fargument-noalias-global\n+Common\n+\n+fasynchronous-unwind-tables\n+Common\n+\n+fbounds-check\n+Common\n+\n+fbranch-count-reg\n+Common\n+\n+fbranch-probabilities\n+Common\n+\n fbranch-target-load-optimize\n Common\n \n@@ -166,6 +205,12 @@ Common Joined RejectNegative\n fcaller-saves\n Common\n \n+fcommon\n+Common\n+\n+fcprop-registers\n+Common\n+\n fcrossjumping\n Common\n \n@@ -175,6 +220,9 @@ Common\n fcse-skip-blocks\n Common\n \n+fdata-sections\n+Common\n+\n fdefer-pop\n Common\n \n@@ -187,18 +235,27 @@ Common\n fdiagnostics-show-location=\n Common Joined RejectNegative\n \n+fdump-unnumbered\n+Common\n+\n feliminate-dwarf2-dups\n Common\n \n feliminate-unused-debug-types\n Common\n \n+fexceptions\n+Common\n+\n fexpensive-optimizations\n Common\n \n ffast-math\n Common\n \n+ffinite-math-only\n+Common\n+\n ffixed-\n Common Joined RejectNegative\n \n@@ -214,6 +271,9 @@ Common\n ffunction-cse\n Common\n \n+ffunction-sections\n+Common\n+\n fgcse\n Common\n \n@@ -223,33 +283,69 @@ Common\n fgcse-sm\n Common\n \n+fgnu-linker\n+Common\n+\n+fguess-branch-probability\n+Common\n+\n+fident\n+Common\n+\n fif-conversion\n Common\n \n fif-conversion2\n Common\n \n+finhibit-size-directive\n+Common\n+\n finline\n Common\n \n finline-functions\n Common\n \n+finstrument-functions\n+Common\n+\n fkeep-inline-functions\n Common\n \n fkeep-static-consts\n Common\n \n+fleading-underscore\n+Common\n+\n floop-optimize\n Common\n \n+fmath-errno\n+Common\n+\n+fmem-report\n+Common\n+\n+fmerge-all-constants\n+Common\n+\n+fmerge-constants\n+Common\n+\n fmessage-length=\n Common RejectNegative Joined UInteger\n \n fmove-all-movables\n Common\n \n+fnew-ra\n+Common\n+\n+fnon-call-exceptions\n+Common\n+\n fold-unroll-loops\n Common\n \n@@ -259,9 +355,15 @@ Common\n fomit-frame-pointer\n Common\n \n+foptimize-register-move\n+Common\n+\n foptimize-sibling-calls\n Common\n \n+fpack-struct\n+Common\n+\n fpcc-struct-return\n Common\n \n@@ -271,9 +373,24 @@ Common\n fpeephole\n Common\n \n+fpeephole2\n+Common\n+\n+fpic\n+Common\n+\n+fpie\n+Common\n+\n fprefetch-loop-arrays\n Common\n \n+fprofile\n+Common\n+\n+fprofile-arcs\n+Common\n+\n frandom-seed\n Common\n \n@@ -286,15 +403,45 @@ Common\n freg-struct-return\n Common\n \n+fregmove\n+Common\n+\n+frename-registers\n+Common\n+\n+freorder-blocks\n+Common\n+\n+freorder-functions\n+Common\n+\n frerun-cse-after-loop\n Common\n \n frerun-loop-opt\n Common\n \n+fsched-interblock\n+Common\n+\n+fsched-spec\n+Common\n+\n+fsched-spec-load\n+Common\n+\n+fsched-spec-load-dangerous\n+Common\n+\n fsched-verbose=\n Common RejectNegative Joined\n \n+fsched2-use-superblocks\n+Common\n+\n+fsched2-use-traces\n+Common\n+\n fschedule-insns\n Common\n \n@@ -304,6 +451,24 @@ Common\n fshared-data\n Common\n \n+fsignaling-nans\n+Common\n+\n+fsingle-precision-constant\n+Common\n+\n+fssa\n+Common\n+\n+fssa-ccp\n+Common\n+\n+fssa-dce\n+Common\n+\n+fstack-check\n+Common\n+\n fstack-limit\n Common\n \n@@ -316,18 +481,33 @@ Common RejectNegative Joined\n fstrength-reduce\n Common\n \n+fstrict-aliasing\n+Common\n+\n fsyntax-only\n Common\n \n+ftest-coverage\n+Common\n+\n fthread-jumps\n Common\n \n+ftime-report\n+Common\n+\n ftls-model=\n Common Joined RejectNegative\n \n ftracer\n Common\n \n+ftrapping-math\n+Common\n+\n+ftrapv\n+Common\n+\n funit-at-a-time\n Common\n \n@@ -337,12 +517,27 @@ Common\n funroll-all-loops\n Common\n \n+funsafe-math-optimizations\n+Common\n+\n funswitch-loops\n Common\n \n+funwind-tables\n+Common\n+\n+fverbose-asm\n+Common\n+\n+fwrapv\n+Common\n+\n fwritable-strings\n Common\n \n+fzero-initialized-in-bss\n+Common\n+\n g\n Common JoinedOrMissing\n "}, {"sha": "2ec9de5b6aa4450a6e7515811fbd569f4c122a0b", "filename": "gcc/opts.c", "status": "modified", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6ff3a151fd20be0327d0333827df46d080898fec", "patch": "@@ -516,22 +516,62 @@ common_handle_option (size_t scode, const char *arg,\n       dump_base_name = arg;\n       break;\n \n+    case OPT_fPIC:\n+      flag_pic = value + value;\n+      break;\n+\n+    case OPT_fPIE:\n+      flag_pie = value + value;\n+      break;\n+\n+    case OPT_falign_functions:\n     case OPT_falign_functions_:\n       align_functions = value;\n       break;\n \n+    case OPT_falign_jumps:\n     case OPT_falign_jumps_:\n       align_jumps = value;\n       break;\n \n+    case OPT_falign_labels:\n     case OPT_falign_labels_:\n       align_labels = value;\n       break;\n \n+    case OPT_falign_loops:\n     case OPT_falign_loops_:\n       align_loops = value;\n       break;\n \n+    case OPT_fargument_alias:\n+      flag_argument_noalias = !value;\n+      break;\n+\n+    case OPT_fargument_noalias:\n+      flag_argument_noalias = value;\n+      break;\n+\n+    case OPT_fargument_noalias_global:\n+      flag_argument_noalias = value + value;\n+      break;\n+\n+    case OPT_fasynchronous_unwind_tables:\n+      flag_asynchronous_unwind_tables = value;\n+      break;\n+\n+    case OPT_fbounds_check:\n+      flag_bounds_check = value;\n+      break;\n+\n+    case OPT_fbranch_count_reg:\n+      flag_branch_on_count_reg = value;\n+      break;\n+\n+    case OPT_fbranch_probabilities:\n+      flag_branch_probabilities = value;\n+      break;\n+\n     case OPT_fbranch_target_load_optimize:\n       flag_branch_target_load_optimize = value;\n       break;\n@@ -552,6 +592,14 @@ common_handle_option (size_t scode, const char *arg,\n       flag_caller_saves = value;\n       break;\n \n+    case OPT_fcommon:\n+      flag_no_common = !value;\n+      break;\n+\n+    case OPT_fcprop_registers:\n+      flag_cprop_registers = value;\n+      break;\n+\n     case OPT_fcrossjumping:\n       flag_crossjumping = value;\n       break;\n@@ -564,6 +612,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_cse_skip_blocks = value;\n       break;\n \n+    case OPT_fdata_sections:\n+      flag_data_sections = value;\n+      break;\n+\n     case OPT_fdefer_pop:\n       flag_defer_pop = value;\n       break;\n@@ -586,6 +638,10 @@ common_handle_option (size_t scode, const char *arg,\n \treturn 0;\n       break;\n \n+    case OPT_fdump_unnumbered:\n+      flag_dump_unnumbered = value;\n+      break;\n+\n     case OPT_feliminate_dwarf2_dups:\n       flag_eliminate_dwarf2_dups = value;\n       break;\n@@ -594,6 +650,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_eliminate_unused_debug_types = value;\n       break;\n \n+    case OPT_fexceptions:\n+      flag_exceptions = value;\n+      break;\n+\n     case OPT_fexpensive_optimizations:\n       flag_expensive_optimizations = value;\n       break;\n@@ -602,6 +662,10 @@ common_handle_option (size_t scode, const char *arg,\n       set_fast_math_flags (value);\n       break;\n \n+    case OPT_ffinite_math_only:\n+      flag_finite_math_only = value;\n+      break;\n+\n     case OPT_ffixed_:\n       fix_register (arg, 1, 1);\n       break;\n@@ -622,6 +686,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_force_mem = value;\n       break;\n \n+    case OPT_ffunction_sections:\n+      flag_function_sections = value;\n+      break;\n+\n     case OPT_fgcse:\n       flag_gcse = value;\n       break;\n@@ -634,6 +702,18 @@ common_handle_option (size_t scode, const char *arg,\n       flag_gcse_sm = value;\n       break;\n \n+    case OPT_fgnu_linker:\n+      flag_gnu_linker = value;\n+      break;\n+\n+    case OPT_fguess_branch_probability:\n+      flag_guess_branch_prob = value;\n+      break;\n+\n+    case OPT_fident:\n+      flag_no_ident = !value;\n+      break;\n+\n     case OPT_fif_conversion:\n       flag_if_conversion = value;\n       break;\n@@ -642,6 +722,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_if_conversion2 = value;\n       break;\n \n+    case OPT_finhibit_size_directive:\n+      flag_inhibit_size_directive = value;\n+      break;\n+\n     case OPT_finline:\n       flag_no_inline = !value;\n       break;\n@@ -650,6 +734,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_inline_functions = value;\n       break;\n \n+    case OPT_finstrument_functions:\n+      flag_instrument_function_entry_exit = value;\n+      break;\n+\n     case OPT_fkeep_inline_functions:\n       flag_keep_inline_functions =value;\n       break;\n@@ -658,10 +746,30 @@ common_handle_option (size_t scode, const char *arg,\n       flag_keep_static_consts = value;\n       break;\n \n+    case OPT_fleading_underscore:\n+      flag_leading_underscore = value;\n+      break;\n+\n     case OPT_floop_optimize:\n       flag_loop_optimize = value;\n       break;\n \n+    case OPT_fmath_errno:\n+      flag_errno_math = value;\n+      break;\n+\n+    case OPT_fmem_report:\n+      mem_report = value;\n+      break;\n+\n+    case OPT_fmerge_all_constants:\n+      flag_merge_constants = value + value;\n+      break;\n+\n+    case OPT_fmerge_constants:\n+      flag_merge_constants = value;\n+      break;\n+\n     case OPT_fmessage_length_:\n       output_set_maximum_length (&global_dc->buffer, value);\n       break;\n@@ -670,6 +778,14 @@ common_handle_option (size_t scode, const char *arg,\n       flag_move_all_movables = value;\n       break;\n \n+    case OPT_fnew_ra:\n+      flag_new_regalloc = value;\n+      break;\n+\n+    case OPT_fnon_call_exceptions:\n+      flag_non_call_exceptions = value;\n+      break;\n+\n     case OPT_fold_unroll_all_loops:\n       flag_old_unroll_all_loops = value;\n       break;\n@@ -682,10 +798,18 @@ common_handle_option (size_t scode, const char *arg,\n       flag_omit_frame_pointer = value;\n       break;\n \n+    case OPT_foptimize_register_move:\n+      flag_regmove = value;\n+      break;\n+\n     case OPT_foptimize_sibling_calls:\n       flag_optimize_sibling_calls = value;\n       break;\n \n+    case OPT_fpack_struct:\n+      flag_pack_struct = value;\n+      break;\n+\n     case OPT_fpeel_loops:\n       flag_peel_loops = value;\n       break;\n@@ -698,10 +822,30 @@ common_handle_option (size_t scode, const char *arg,\n       flag_no_peephole = !value;\n       break;\n \n+    case OPT_fpeephole2:\n+      flag_peephole2 = value;\n+      break;\n+\n+    case OPT_fpic:\n+      flag_pic = value;\n+      break;\n+\n+    case OPT_fpie:\n+      flag_pie = value;\n+      break;\n+\n     case OPT_fprefetch_loop_arrays:\n       flag_prefetch_loop_arrays = value;\n       break;\n \n+    case OPT_fprofile:\n+      profile_flag = value;\n+      break;\n+\n+    case OPT_fprofile_arcs:\n+      profile_arc_flag = value;\n+      break;\n+\n     case OPT_frandom_seed:\n       /* The real switch is -fno-random-seed.  */\n       if (value)\n@@ -721,6 +865,22 @@ common_handle_option (size_t scode, const char *arg,\n       flag_pcc_struct_return = !value;\n       break;\n \n+    case OPT_fregmove:\n+      flag_regmove = value;\n+      break;\n+\n+    case OPT_frename_registers:\n+      flag_rename_registers = value;\n+      break;\n+\n+    case OPT_freorder_blocks:\n+      flag_reorder_blocks = value;\n+      break;\n+\n+    case OPT_freorder_functions:\n+      flag_reorder_functions = value;\n+      break;\n+\n     case OPT_frerun_cse_after_loop:\n       flag_rerun_cse_after_loop = value;\n       break;\n@@ -729,6 +889,22 @@ common_handle_option (size_t scode, const char *arg,\n       flag_rerun_loop_opt = value;\n       break;\n \n+    case OPT_fsched_interblock:\n+      flag_schedule_interblock= value;\n+      break;\n+\n+    case OPT_fsched_spec:\n+      flag_schedule_speculative = value;\n+      break;\n+\n+    case OPT_fsched_spec_load:\n+      flag_schedule_speculative_load = value;\n+      break;\n+\n+    case OPT_fsched_spec_load_dangerous:\n+      flag_schedule_speculative_load_dangerous = value;\n+      break;\n+\n     case OPT_fsched_verbose_:\n #ifdef INSN_SCHEDULING\n       fix_sched_param (\"verbose\", arg);\n@@ -737,6 +913,14 @@ common_handle_option (size_t scode, const char *arg,\n       return 0;\n #endif\n \n+    case OPT_fsched2_use_superblocks:\n+      flag_sched2_use_superblocks = value;\n+      break;\n+\n+    case OPT_fsched2_use_traces:\n+      flag_sched2_use_traces = value;\n+      break;\n+\n     case OPT_fschedule_insns:\n       flag_schedule_insns = value;\n       break;\n@@ -749,6 +933,30 @@ common_handle_option (size_t scode, const char *arg,\n       flag_shared_data = value;\n       break;\n \n+    case OPT_fsignaling_nans:\n+      flag_signaling_nans = value;\n+      break;\n+\n+    case OPT_fsingle_precision_constant:\n+      flag_single_precision_constant = value;\n+      break;\n+\n+    case OPT_fssa:\n+      flag_ssa = value;\n+      break;\n+\n+    case OPT_fssa_ccp:\n+      flag_ssa_ccp = value;\n+      break;\n+\n+    case OPT_fssa_dce:\n+      flag_ssa_dce = value;\n+      break;\n+\n+    case OPT_fstack_check:\n+      flag_stack_check = value;\n+      break;\n+\n     case OPT_fstack_limit:\n       /* The real switch is -fno-stack-limit.  */\n       if (value)\n@@ -774,14 +982,25 @@ common_handle_option (size_t scode, const char *arg,\n       flag_strength_reduce = value;\n       break;\n \n+    case OPT_fstrict_aliasing:\n+      flag_strict_aliasing = value;\n+      break;\n+\n     case OPT_fsyntax_only:\n       flag_syntax_only = value;\n       break;\n \n+    case OPT_ftest_coverage:\n+      flag_test_coverage = value;\n+      break;\n+\n     case OPT_fthread_jumps:\n       flag_thread_jumps = value;\n       break;\n \n+    case OPT_ftime_report:\n+      time_report = value;\n+\n     case OPT_ftls_model_:\n       if (!strcmp (arg, \"global-dynamic\"))\n \tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n@@ -799,6 +1018,14 @@ common_handle_option (size_t scode, const char *arg,\n       flag_tracer = value;\n       break;\n \n+    case OPT_ftrapping_math:\n+      flag_trapping_math = value;\n+      break;\n+\n+    case OPT_ftrapv:\n+      flag_trapv = value;\n+      break;\n+\n     case OPT_funit_at_a_time:\n       flag_unit_at_a_time = value;\n       break;\n@@ -811,14 +1038,34 @@ common_handle_option (size_t scode, const char *arg,\n       flag_unroll_loops = value;\n       break;\n \n+    case OPT_funsafe_math_optimizations:\n+      flag_unsafe_math_optimizations = value;\n+      break;\n+\n     case OPT_funswitch_loops:\n       flag_unswitch_loops = value;\n       break;\n \n+    case OPT_funwind_tables:\n+      flag_unwind_tables = value;\n+      break;\n+\n+    case OPT_fverbose_asm:\n+      flag_verbose_asm = value;\n+      break;\n+      \n+    case OPT_fwrapv:\n+      flag_wrapv = value;\n+      break;\n+\n     case OPT_fwritable_strings:\n       flag_writable_strings = value;\n       break;\n \n+    case OPT_fzero_initialized_in_bss:\n+      flag_zero_initialized_in_bss = value;\n+      break;\n+\n     case OPT_g:\n       decode_g_option (arg);\n       break;"}, {"sha": "d66ec1a31d19faf191b560b3823a71ef75f24d34", "filename": "gcc/toplev.c", "status": "modified", "additions": 67, "deletions": 85, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6ff3a151fd20be0327d0333827df46d080898fec", "patch": "@@ -450,7 +450,7 @@ int quiet_flag = 0;\n \n /* Print times taken by the various passes.  -ftime-report.  */\n \n-static int time_report = 0;\n+int time_report = 0;\n \n /* Print memory still in use at end of compilation (which may have little\n    to do with peak memory consumption).  -fmem-report.  */\n@@ -1153,133 +1153,133 @@ static const lang_independent_options f_options[] =\n    N_(\"Reschedule instructions before register allocation\") },\n   {\"schedule-insns2\", &flag_dummy, 1,\n    N_(\"Reschedule instructions after register allocation\") },\n-  {\"sched-interblock\",&flag_schedule_interblock, 1,\n+  {\"sched-interblock\",&flag_dummy, 1,\n    N_(\"Enable scheduling across basic blocks\") },\n-  {\"sched-spec\",&flag_schedule_speculative, 1,\n+  {\"sched-spec\",&flag_dummy, 1,\n    N_(\"Allow speculative motion of non-loads\") },\n-  {\"sched-spec-load\",&flag_schedule_speculative_load, 1,\n+  {\"sched-spec-load\",&flag_dummy, 1,\n    N_(\"Allow speculative motion of some loads\") },\n-  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1,\n+  {\"sched-spec-load-dangerous\",&flag_dummy, 1,\n    N_(\"Allow speculative motion of more loads\") },\n-  {\"sched2-use-superblocks\", &flag_sched2_use_superblocks, 1,\n+  {\"sched2-use-superblocks\", &flag_dummy, 1,\n    N_(\"If scheduling post reload, do superblock scheduling\") },\n-  {\"sched2-use-traces\", &flag_sched2_use_traces, 1,\n+  {\"sched2-use-traces\", &flag_dummy, 1,\n    N_(\"If scheduling post reload, do trace scheduling\") },\n-  {\"branch-count-reg\",&flag_branch_on_count_reg, 1,\n+  {\"branch-count-reg\",&flag_dummy, 1,\n    N_(\"Replace add,compare,branch with branch on count reg\") },\n-  {\"pic\", &flag_pic, 1,\n+  {\"pic\", &flag_dummy, 1,\n    N_(\"Generate position independent code, if possible\") },\n-  {\"PIC\", &flag_pic, 2, \"\"},\n-  {\"pie\", &flag_pie, 1,\n+  {\"PIC\", &flag_dummy, 2, \"\"},\n+  {\"pie\", &flag_dummy, 1,\n    N_(\"Generate position independent code for executables, if possible\") },\n-  {\"PIE\", &flag_pie, 2, \"\"},\n-  {\"exceptions\", &flag_exceptions, 1,\n+  {\"PIE\", &flag_dummy, 2, \"\"},\n+  {\"exceptions\", &flag_dummy, 1,\n    N_(\"Enable exception handling\") },\n-  {\"unwind-tables\", &flag_unwind_tables, 1,\n+  {\"unwind-tables\", &flag_dummy, 1,\n    N_(\"Just generate unwind tables for exception handling\") },\n-  {\"asynchronous-unwind-tables\", &flag_asynchronous_unwind_tables, 1,\n+  {\"asynchronous-unwind-tables\", &flag_dummy, 1,\n    N_(\"Generate unwind tables exact at each instruction boundary\") },\n-  {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n+  {\"non-call-exceptions\", &flag_dummy, 1,\n    N_(\"Support synchronous non-call exceptions\") },\n-  {\"profile-arcs\", &profile_arc_flag, 1,\n+  {\"profile-arcs\", &flag_dummy, 1,\n    N_(\"Insert arc based program profiling code\") },\n-  {\"test-coverage\", &flag_test_coverage, 1,\n+  {\"test-coverage\", &flag_dummy, 1,\n    N_(\"Create data files needed by gcov\") },\n-  {\"branch-probabilities\", &flag_branch_probabilities, 1,\n+  {\"branch-probabilities\", &flag_dummy, 1,\n    N_(\"Use profiling information for branch probabilities\") },\n-  {\"profile\", &profile_flag, 1,\n+  {\"profile\", &flag_dummy, 1,\n    N_(\"Enable basic program profiling code\") },\n-  {\"reorder-blocks\", &flag_reorder_blocks, 1,\n+  {\"reorder-blocks\", &flag_dummy, 1,\n    N_(\"Reorder basic blocks to improve code placement\") },\n-  {\"reorder-functions\", &flag_reorder_functions, 1,\n+  {\"reorder-functions\", &flag_dummy, 1,\n    N_(\"Reorder functions to improve code placement\") },\n-  {\"rename-registers\", &flag_rename_registers, 1,\n+  {\"rename-registers\", &flag_dummy, 1,\n    N_(\"Do the register renaming optimization pass\") },\n-  {\"cprop-registers\", &flag_cprop_registers, 1,\n+  {\"cprop-registers\", &flag_dummy, 1,\n    N_(\"Do the register copy-propagation optimization pass\") },\n-  {\"common\", &flag_no_common, 0,\n+  {\"common\", &flag_dummy, 0,\n    N_(\"Do not put uninitialized globals in the common section\") },\n-  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1,\n+  {\"inhibit-size-directive\", &flag_dummy, 1,\n    N_(\"Do not generate .size directives\") },\n-  {\"function-sections\", &flag_function_sections, 1,\n+  {\"function-sections\", &flag_dummy, 1,\n    N_(\"place each function into its own section\") },\n-  {\"data-sections\", &flag_data_sections, 1,\n+  {\"data-sections\", &flag_dummy, 1,\n    N_(\"place data items into their own section\") },\n-  {\"verbose-asm\", &flag_verbose_asm, 1,\n+  {\"verbose-asm\", &flag_dummy, 1,\n    N_(\"Add extra commentary to assembler output\") },\n-  {\"gnu-linker\", &flag_gnu_linker, 1,\n+  {\"gnu-linker\", &flag_dummy, 1,\n    N_(\"Output GNU ld formatted global initializers\") },\n-  {\"regmove\", &flag_regmove, 1,\n+  {\"regmove\", &flag_dummy, 1,\n    N_(\"Enables a register move optimization\") },\n-  {\"optimize-register-move\", &flag_regmove, 1,\n+  {\"optimize-register-move\", &flag_dummy, 1,\n    N_(\"Do the full regmove optimization pass\") },\n-  {\"pack-struct\", &flag_pack_struct, 1,\n+  {\"pack-struct\", &flag_dummy, 1,\n    N_(\"Pack structure members together without holes\") },\n-  {\"stack-check\", &flag_stack_check, 1,\n+  {\"stack-check\", &flag_dummy, 1,\n    N_(\"Insert stack checking code into the program\") },\n-  {\"argument-alias\", &flag_argument_noalias, 0,\n+  {\"argument-alias\", &flag_dummy, 0,\n    N_(\"Specify that arguments may alias each other & globals\") },\n-  {\"argument-noalias\", &flag_argument_noalias, 1,\n+  {\"argument-noalias\", &flag_dummy, 1,\n    N_(\"Assume arguments may alias globals but not each other\") },\n-  {\"argument-noalias-global\", &flag_argument_noalias, 2,\n+  {\"argument-noalias-global\", &flag_dummy, 2,\n    N_(\"Assume arguments do not alias each other or globals\") },\n-  {\"strict-aliasing\", &flag_strict_aliasing, 1,\n+  {\"strict-aliasing\", &flag_dummy, 1,\n    N_(\"Assume strict aliasing rules apply\") },\n-  {\"align-loops\", &align_loops, 0,\n+  {\"align-loops\", &flag_dummy, 0,\n    N_(\"Align the start of loops\") },\n-  {\"align-jumps\", &align_jumps, 0,\n+  {\"align-jumps\", &flag_dummy, 0,\n    N_(\"Align labels which are only reached by jumping\") },\n-  {\"align-labels\", &align_labels, 0,\n+  {\"align-labels\", &flag_dummy, 0,\n    N_(\"Align all labels\") },\n-  {\"align-functions\", &align_functions, 0,\n+  {\"align-functions\", &flag_dummy, 0,\n    N_(\"Align the start of functions\") },\n-  {\"merge-constants\", &flag_merge_constants, 1,\n+  {\"merge-constants\", &flag_dummy, 1,\n    N_(\"Attempt to merge identical constants across compilation units\") },\n-  {\"merge-all-constants\", &flag_merge_constants, 2,\n+  {\"merge-all-constants\", &flag_dummy, 2,\n    N_(\"Attempt to merge identical constants and constant variables\") },\n-  {\"dump-unnumbered\", &flag_dump_unnumbered, 1,\n+  {\"dump-unnumbered\", &flag_dummy, 1,\n    N_(\"Suppress output of instruction numbers and line number notes in debugging dumps\") },\n-  {\"instrument-functions\", &flag_instrument_function_entry_exit, 1,\n+  {\"instrument-functions\", &flag_dummy, 1,\n    N_(\"Instrument function entry/exit with profiling calls\") },\n-  {\"zero-initialized-in-bss\", &flag_zero_initialized_in_bss, 1,\n+  {\"zero-initialized-in-bss\", &flag_dummy, 1,\n    N_(\"Put zero initialized data in the bss section\") },\n-  {\"ssa\", &flag_ssa, 1,\n+  {\"ssa\", &flag_dummy, 1,\n    N_(\"Enable SSA optimizations\") },\n-  {\"ssa-ccp\", &flag_ssa_ccp, 1,\n+  {\"ssa-ccp\", &flag_dummy, 1,\n    N_(\"Enable SSA conditional constant propagation\") },\n-  {\"ssa-dce\", &flag_ssa_dce, 1,\n+  {\"ssa-dce\", &flag_dummy, 1,\n    N_(\"Enable aggressive SSA dead code elimination\") },\n-  {\"leading-underscore\", &flag_leading_underscore, 1,\n+  {\"leading-underscore\", &flag_dummy, 1,\n    N_(\"External symbols have a leading underscore\") },\n-  {\"ident\", &flag_no_ident, 0,\n+  {\"ident\", &flag_dummy, 0,\n    N_(\"Process #ident directives\") },\n-  { \"peephole2\", &flag_peephole2, 1,\n+  { \"peephole2\", &flag_dummy, 1,\n    N_(\"Enables an rtl peephole pass run before sched2\") },\n-  {\"finite-math-only\", &flag_finite_math_only, 1,\n+  {\"finite-math-only\", &flag_dummy, 1,\n    N_(\"Assume no NaNs or +-Infs are generated\") },\n-  { \"guess-branch-probability\", &flag_guess_branch_prob, 1,\n+  { \"guess-branch-probability\", &flag_dummy, 1,\n    N_(\"Enables guessing of branch probabilities\") },\n-  {\"math-errno\", &flag_errno_math, 1,\n+  {\"math-errno\", &flag_dummy, 1,\n    N_(\"Set errno after built-in math functions\") },\n-  {\"trapping-math\", &flag_trapping_math, 1,\n+  {\"trapping-math\", &flag_dummy, 1,\n    N_(\"Floating-point operations can trap\") },\n-  {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1,\n+  {\"unsafe-math-optimizations\", &flag_dummy, 1,\n    N_(\"Allow math optimizations that may violate IEEE or ANSI standards\") },\n-  {\"signaling-nans\", &flag_signaling_nans, 1,\n+  {\"signaling-nans\", &flag_dummy, 1,\n    N_(\"Disable optimizations observable by IEEE signaling NaNs\") },\n-  {\"bounds-check\", &flag_bounds_check, 1,\n+  {\"bounds-check\", &flag_dummy, 1,\n    N_(\"Generate code to check bounds before indexing arrays\") },\n-  {\"single-precision-constant\", &flag_single_precision_constant, 1,\n+  {\"single-precision-constant\", &flag_dummy, 1,\n    N_(\"Convert floating point constant to single precision constant\") },\n-  {\"time-report\", &time_report, 1,\n+  {\"time-report\", &flag_dummy, 1,\n    N_(\"Report time taken by each compiler pass at end of run\") },\n-  {\"mem-report\", &mem_report, 1,\n+  {\"mem-report\", &flag_dummy, 1,\n    N_(\"Report on permanent memory allocation at end of run\") },\n-  { \"trapv\", &flag_trapv, 1,\n+  { \"trapv\", &flag_dummy, 1,\n    N_(\"Trap for signed overflow in addition / subtraction / multiplication\") },\n-  { \"wrapv\", &flag_wrapv, 1,\n+  { \"wrapv\", &flag_dummy, 1,\n    N_(\"Assume signed arithmetic overflow wraps around\") },\n-  { \"new-ra\", &flag_new_regalloc, 1,\n+  { \"new-ra\", &flag_dummy, 1,\n    N_(\"Use graph coloring register allocation.\") },\n };\n \n@@ -4156,25 +4156,7 @@ decode_d_option (const char *arg)\n static int\n decode_f_option (const char *arg)\n {\n-  int j;\n-  const char *option_value = NULL;\n-\n-  /* Search for the option in the table of binary f options.  */\n-  for (j = ARRAY_SIZE (f_options); j--;)\n-    {\n-      if (!strcmp (arg, f_options[j].string))\n-\t{\n-\t  *f_options[j].variable = f_options[j].on_value;\n-\t  return 1;\n-\t}\n-\n-      if (arg[0] == 'n' && arg[1] == 'o' && arg[2] == '-'\n-\t  && ! strcmp (arg + 3, f_options[j].string))\n-\t{\n-\t  *f_options[j].variable = ! f_options[j].on_value;\n-\t  return 1;\n-\t}\n-    }\n+  const char *option_value;\n \n   if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n \t   || (option_value = skip_leading_substring (arg, \"inline-limit=\")))"}, {"sha": "323cde99fda85ed826f58e04dfa9c666e2d7938e", "filename": "gcc/toplev.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff3a151fd20be0327d0333827df46d080898fec/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=6ff3a151fd20be0327d0333827df46d080898fec", "patch": "@@ -118,6 +118,12 @@ extern int flag_tracer;\n extern int flag_unroll_loops;\n extern int flag_unroll_all_loops;\n extern int flag_unswitch_loops;\n+extern int flag_cprop_registers;\n+extern int flag_ssa;\n+extern int flag_ssa_ccp;\n+extern int flag_ssa_dce;\n+extern int time_report;\n+extern int flag_new_regalloc;\n \n extern void display_help (void);\n extern void display_target_options (void);"}]}