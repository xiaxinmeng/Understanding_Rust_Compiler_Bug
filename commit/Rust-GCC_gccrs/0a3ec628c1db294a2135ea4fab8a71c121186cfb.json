{"sha": "0a3ec628c1db294a2135ea4fab8a71c121186cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzZWM2MjhjMWRiMjk0YTIxMzVlYTRmYWI4YTcxYzEyMTE4NmNmYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T14:51:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T14:51:39Z"}, "message": "[multiple changes]\n\n2017-01-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Useless_Assignment): Adjust wording of warning\n\tmessage.\n\n2017-01-20  Nicolas Roche  <roche@adacore.com>\n\n\t* terminals.c: Ignore failures on setpgid and tcsetpgrp commands.\n\n2017-01-20  Bob Duff  <duff@adacore.com>\n\n\t* sem_eval.adb (Compile_Time_Compare): Disable the expr+literal\n\t(etc) optimizations when the type is modular.\n\n2017-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Move_Pragmas): move some pragmas,\n\tbut copy the SPARK_Mode pragma instead of moving it.\n\t(Build_Subprogram_Declaration): Ensure that the generated spec\n\tand original body share the same SPARK_Pragma aspect/pragma.\n\t* sem_util.adb, sem_util.ads (Copy_SPARK_Mode_Aspect): New\n\tprocedure to copy SPARK_Mode aspect.\n\n2017-01-20  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): Disable Resolve_Aspects\n\teven in ASIS mode.\n\t* sem_ch13.adb (Resolve_Name): Enable setting the entity to\n\tEmpty even in ASIS mode.\n\nFrom-SVN: r244720", "tree": {"sha": "095cf327349c4784eca330d90eb13c0e6dd27df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095cf327349c4784eca330d90eb13c0e6dd27df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a3ec628c1db294a2135ea4fab8a71c121186cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3ec628c1db294a2135ea4fab8a71c121186cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3ec628c1db294a2135ea4fab8a71c121186cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3ec628c1db294a2135ea4fab8a71c121186cfb/comments", "author": null, "committer": null, "parents": [{"sha": "a395b2e5cde3b2e62ede6a74b1e8be2d8c6aa792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a395b2e5cde3b2e62ede6a74b1e8be2d8c6aa792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a395b2e5cde3b2e62ede6a74b1e8be2d8c6aa792"}], "stats": {"total": 165, "additions": 118, "deletions": 47}, "files": [{"sha": "404b638a12c43e4afa150a0d2ca533951728eedd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -1,3 +1,33 @@\n+2017-01-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Useless_Assignment): Adjust wording of warning\n+\tmessage.\n+\n+2017-01-20  Nicolas Roche  <roche@adacore.com>\n+\n+\t* terminals.c: Ignore failures on setpgid and tcsetpgrp commands.\n+\n+2017-01-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Compare): Disable the expr+literal\n+\t(etc) optimizations when the type is modular.\n+\n+2017-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Move_Pragmas): move some pragmas,\n+\tbut copy the SPARK_Mode pragma instead of moving it.\n+\t(Build_Subprogram_Declaration): Ensure that the generated spec\n+\tand original body share the same SPARK_Pragma aspect/pragma.\n+\t* sem_util.adb, sem_util.ads (Copy_SPARK_Mode_Aspect): New\n+\tprocedure to copy SPARK_Mode aspect.\n+\n+2017-01-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Disable Resolve_Aspects\n+\teven in ASIS mode.\n+\t* sem_ch13.adb (Resolve_Name): Enable setting the entity to\n+\tEmpty even in ASIS mode.\n+\n 2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch9.adb: minor style fixes in comments."}, {"sha": "bdb53b1f98012d5b35ed021abcf99e87e78c2c87", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -12731,7 +12731,7 @@ package body Sem_Ch13 is\n          elsif Nkind (N) = N_Identifier and then Chars (N) /= Chars (E) then\n             Find_Direct_Name (N);\n \n-            if not ASIS_Mode then\n+            if True or else not ASIS_Mode then -- ????\n                Set_Entity (N, Empty);\n             end if;\n "}, {"sha": "096170bdf5ededec8b3a875f4ba85b256377b597", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -2570,7 +2570,7 @@ package body Sem_Ch3 is\n                --  rejected. Pending notification we restrict this call to\n                --  ASIS mode.\n \n-               if ASIS_Mode then\n+               if False and then ASIS_Mode then -- ????\n                   Resolve_Aspects;\n                end if;\n "}, {"sha": "5152ac1988cd09b43f799883fbadf30cc4ba1548", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -2399,8 +2399,10 @@ package body Sem_Ch6 is\n          --  of subprogram body From and insert them after node To. The pragmas\n          --  in question are:\n          --    Ghost\n-         --    SPARK_Mode\n          --    Volatile_Function\n+         --  Also copy pragma SPARK_Mode if present in the declarative list\n+         --  of subprogram body From and insert it after node To. This pragma\n+         --  should not be moved, as it applies to the body too.\n \n          ------------------\n          -- Move_Pragmas --\n@@ -2425,14 +2427,17 @@ package body Sem_Ch6 is\n             while Present (Decl) loop\n                Next_Decl := Next (Decl);\n \n-               if Nkind (Decl) = N_Pragma\n-                 and then Nam_In (Pragma_Name_Unmapped (Decl),\n-                                  Name_Ghost,\n-                                  Name_SPARK_Mode,\n-                                  Name_Volatile_Function)\n-               then\n-                  Remove (Decl);\n-                  Insert_After (To, Decl);\n+               if Nkind (Decl) = N_Pragma then\n+                  if Pragma_Name_Unmapped (Decl) = Name_SPARK_Mode then\n+                     Insert_After (To, New_Copy_Tree (Decl));\n+\n+                  elsif Nam_In (Pragma_Name_Unmapped (Decl),\n+                                Name_Ghost,\n+                                Name_Volatile_Function)\n+                  then\n+                     Remove (Decl);\n+                     Insert_After (To, Decl);\n+                  end if;\n                end if;\n \n                Decl := Next_Decl;\n@@ -2463,6 +2468,13 @@ package body Sem_Ch6 is\n          Move_Aspects (N, To => Subp_Decl);\n          Move_Pragmas (N, To => Subp_Decl);\n \n+         --  Ensure that the generated corresponding spec and original body\n+         --  share the same SPARK_Mode pragma or aspect. As a result, both have\n+         --  the same SPARK_Mode attributes, and the global SPARK_Mode value is\n+         --  correctly set for local subprograms.\n+\n+         Copy_SPARK_Mode_Aspect (Subp_Decl, To => N);\n+\n          Analyze (Subp_Decl);\n \n          --  Propagate the attributes Rewritten_For_C and Corresponding_Proc to\n@@ -2515,13 +2527,6 @@ package body Sem_Ch6 is\n          Body_Spec := Copy_Subprogram_Spec (Body_Spec);\n          Set_Specification (N, Body_Spec);\n          Body_Id := Analyze_Subprogram_Specification (Body_Spec);\n-\n-         --  Ensure that the generated corresponding spec and original body\n-         --  share the same SPARK_Mode attributes.\n-\n-         Set_SPARK_Pragma (Body_Id, SPARK_Pragma (Spec_Id));\n-         Set_SPARK_Pragma_Inherited\n-           (Body_Id, SPARK_Pragma_Inherited (Spec_Id));\n       end Build_Subprogram_Declaration;\n \n       ----------------------------"}, {"sha": "b4219263ff756e4524da2590c89dd6b15a118cd1", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -1142,7 +1142,7 @@ package body Sem_Eval is\n          return Unknown;\n       end if;\n \n-      --  We do not attempt comparisons for packed arrays arrays represented as\n+      --  We do not attempt comparisons for packed arrays represented as\n       --  modular types, where the semantics of comparison is quite different.\n \n       if Is_Packed_Array_Impl_Type (Ltyp)\n@@ -1329,28 +1329,35 @@ package body Sem_Eval is\n          --  J .. J + 1. This code can conclude LT with a difference of 1,\n          --  even if the range of J is not known.\n \n-         declare\n-            Lnode : Node_Id;\n-            Loffs : Uint;\n-            Rnode : Node_Id;\n-            Roffs : Uint;\n+         --  This would be wrong for modular types (e.g. X < X + 1 is False if\n+         --  X is the largest number).\n \n-         begin\n-            Compare_Decompose (L, Lnode, Loffs);\n-            Compare_Decompose (R, Rnode, Roffs);\n+         if not Is_Modular_Integer_Type (Ltyp)\n+           and then not Is_Modular_Integer_Type (Rtyp)\n+         then\n+            declare\n+               Lnode : Node_Id;\n+               Loffs : Uint;\n+               Rnode : Node_Id;\n+               Roffs : Uint;\n \n-            if Is_Same_Value (Lnode, Rnode) then\n-               if Loffs = Roffs then\n-                  return EQ;\n-               elsif Loffs < Roffs then\n-                  Diff.all := Roffs - Loffs;\n-                  return LT;\n-               else\n-                  Diff.all := Loffs - Roffs;\n-                  return GT;\n+            begin\n+               Compare_Decompose (L, Lnode, Loffs);\n+               Compare_Decompose (R, Rnode, Roffs);\n+\n+               if Is_Same_Value (Lnode, Rnode) then\n+                  if Loffs = Roffs then\n+                     return EQ;\n+                  elsif Loffs < Roffs then\n+                     Diff.all := Roffs - Loffs;\n+                     return LT;\n+                  else\n+                     Diff.all := Loffs - Roffs;\n+                     return GT;\n+                  end if;\n                end if;\n-            end if;\n-         end;\n+            end;\n+         end if;\n \n          --  Next, try range analysis and see if operand ranges are disjoint\n "}, {"sha": "73c8ce099487694cdaaf9a63daca19e23bac8a55", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -4999,6 +4999,24 @@ package body Sem_Util is\n       return Plist;\n    end Copy_Parameter_List;\n \n+   ----------------------------\n+   -- Copy_SPARK_Mode_Aspect --\n+   ----------------------------\n+\n+   procedure Copy_SPARK_Mode_Aspect (From : Node_Id; To : Node_Id) is\n+      pragma Assert (not Has_Aspects (To));\n+      Asp : Node_Id;\n+   begin\n+      if Has_Aspects (From) then\n+         Asp := Find_Aspect (Defining_Entity (From), Aspect_SPARK_Mode);\n+\n+         if Present (Asp) then\n+            Set_Aspect_Specifications (To, New_List (New_Copy_Tree (Asp)));\n+            Set_Has_Aspects (To, True);\n+         end if;\n+      end if;\n+   end Copy_SPARK_Mode_Aspect;\n+\n    --------------------------\n    -- Copy_Subprogram_Spec --\n    --------------------------"}, {"sha": "d0848008753480b6ce15ed32ab68338aed7240ad", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -424,6 +424,12 @@ package Sem_Util is\n    --  of inlining, and for private protected ops. Also used to create bodies\n    --  for stubbed subprograms.\n \n+   procedure Copy_SPARK_Mode_Aspect (From : Node_Id; To : Node_Id);\n+   --  Copy the SPARK_Mode aspect if present in the aspect specifications\n+   --  of node From to node To. On entry it is assumed that To does not have\n+   --  aspect specifications. If From has no aspects, the routine has no\n+   --  effect.\n+\n    function Copy_Subprogram_Spec (Spec : Node_Id) return Node_Id;\n    --  Replicate a function or a procedure specification denoted by Spec. The\n    --  resulting tree is an exact duplicate of the original tree. New entities"}, {"sha": "ad278e89d1f0eeb43b6ebdebe6938be109723080", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -4323,7 +4323,12 @@ package body Sem_Warn is\n                   begin\n                      --  Don't give this for OUT and IN OUT formals, since\n                      --  clearly caller may reference the assigned value. Also\n-                     --  never give such warnings for internal variables.\n+                     --  never give such warnings for internal variables. In\n+                     --  either case, word the warning in a conditional way,\n+                     --  because in the case of a component of a controlled\n+                     --  type, the assigned value might be referenced in the\n+                     --  Finalize operation, so we can't make a definitive\n+                     --  statement that it's never referenced.\n \n                      if Ekind (Ent) = E_Variable\n                        and then not Is_Internal_Name (Chars (Ent))\n@@ -4335,13 +4340,13 @@ package body Sem_Warn is\n                                                   N_Parameter_Association)\n                         then\n                            Error_Msg_NE\n-                             (\"?m?& modified by call, but value never \"\n-                              & \"referenced\", LA, Ent);\n+                             (\"?m?& modified by call, but value might not \"\n+                              & \"be referenced\", LA, Ent);\n \n                         else\n                            Error_Msg_NE -- CODEFIX\n-                             (\"?m?useless assignment to&, value never \"\n-                              & \"referenced!\", LA, Ent);\n+                             (\"?m?possibly useless assignment to&, value \"\n+                              & \"might not be referenced!\", LA, Ent);\n                         end if;\n                      end if;\n                   end;"}, {"sha": "35cd7430bb8a967bd659f5a4b386a2585684c973", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3ec628c1db294a2135ea4fab8a71c121186cfb/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=0a3ec628c1db294a2135ea4fab8a71c121186cfb", "patch": "@@ -1425,10 +1425,10 @@ __gnat_setup_child_communication\n   if (desc->slave_fd > 2) close (desc->slave_fd);\n \n   /* adjust process group settings */\n-  if ((status = setpgid (pid, pid)) == -1)\n-    return -1;\n-  if ((status = tcsetpgrp (0, pid)) == -1)\n-    return -1;\n+  /* ignore failures of the following two commands as the context might not\n+   * allow making those changes. */\n+  setpgid (pid, pid);\n+  tcsetpgrp (0, pid);\n \n   /* launch the program */\n   execvp (new_argv[0], new_argv);"}]}