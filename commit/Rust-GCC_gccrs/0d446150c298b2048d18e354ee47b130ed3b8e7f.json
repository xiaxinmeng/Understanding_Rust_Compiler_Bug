{"sha": "0d446150c298b2048d18e354ee47b130ed3b8e7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0NDYxNTBjMjk4YjIwNDhkMThlMzU0ZWU0N2IxMzBlZDNiOGU3Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-26T11:09:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-26T11:09:33Z"}, "message": "objc-act.c: Include cgraph.h\n\n\t* objc-act.c: Include cgraph.h\n\t(mark_referenced_methods): New function.\n\t(objc_init): Call it.\n\t* objc-lang.c (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Set.\n\n\t* c-decl.c (finish_function): Honor can_defer_p even in unit-at-a-time\n\tmode.\n\n\t* optabs.c (expand_fix): Do not widen the input operand.\n\n\t* expr.c (emit_group_store):  Fix crash when converting single\n\tregister into complex register.\n\n\t* Makefile.in (jump.o, regclass.o, alias.o): Add dependency on timevar.h\n\t* alias.c: Include timevar.h\n\t(init_alias_analysis):  Set timevar\n\t* jump.c: Include timevar.h\n\t(rebuild_jump_labels):  Set timevar\n\t* regcalss.c: Include timevar.h\n\t(reg_scan):  Set timevar\n\t* timevar.def (TV_ALIAS_ANALYSIS, TV_REG_SCAN, TV_REBUILD_JUMP): New\n\nFrom-SVN: r63464", "tree": {"sha": "ddc33e157eac05f7cef3bb3604e16a7dd67cba78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc33e157eac05f7cef3bb3604e16a7dd67cba78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d446150c298b2048d18e354ee47b130ed3b8e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d446150c298b2048d18e354ee47b130ed3b8e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d446150c298b2048d18e354ee47b130ed3b8e7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d446150c298b2048d18e354ee47b130ed3b8e7f/comments", "author": null, "committer": null, "parents": [{"sha": "9541e2e3d91f99cacd1cd724a956019281e760d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9541e2e3d91f99cacd1cd724a956019281e760d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9541e2e3d91f99cacd1cd724a956019281e760d5"}], "stats": {"total": 109, "additions": 99, "deletions": 10}, "files": [{"sha": "b3fc381d9a59232ce4d6168dc0ce5fa7da023aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -1,3 +1,27 @@\n+Tue Feb 25 22:46:27 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* objc-act.c: Include cgraph.h\n+\t(mark_referenced_methods): New function.\n+\t(objc_init): Call it.\n+\t* objc-lang.c (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Set.\n+\n+\t* c-decl.c (finish_function): Honor can_defer_p even in unit-at-a-time\n+\tmode.\n+\n+\t* optabs.c (expand_fix): Do not widen the input operand.\n+\n+\t* expr.c (emit_group_store):  Fix crash when converting single\n+\tregister into complex register.\n+\n+\t* Makefile.in (jump.o, regclass.o, alias.o): Add dependency on timevar.h\n+\t* alias.c: Include timevar.h\n+\t(init_alias_analysis):  Set timevar\n+\t* jump.c: Include timevar.h\n+\t(rebuild_jump_labels):  Set timevar\n+\t* regcalss.c: Include timevar.h\n+\t(reg_scan):  Set timevar\n+\t* timevar.def (TV_ALIAS_ANALYSIS, TV_REG_SCAN, TV_REBUILD_JUMP): New\n+\n 2003-02-26  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cse.c (count_reg_usage): Fix handling of REG_EQUAL notes."}, {"sha": "9510321e339a08b8ccb904e6e0a2163be44e68b0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -1526,7 +1526,7 @@ integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $\n    $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h gt-integrate.h\n jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    hard-reg-set.h $(REGS_H) insn-config.h $(RECOG_H) $(EXPR_H) real.h except.h function.h \\\n-   toplev.h $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H)\n+   toplev.h $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) $(TIMEVAR_H)\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n@@ -1623,7 +1623,7 @@ combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h $(TM_P_H)\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h flags.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(RECOG_H) reload.h \\\n-   real.h toplev.h function.h output.h $(GGC_H) $(TM_P_H) $(EXPR_H)\n+   real.h toplev.h function.h output.h $(GGC_H) $(TM_P_H) $(EXPR_H) $(TIMEVAR_H)\n local-alloc.o : local-alloc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    flags.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n    output.h function.h $(INSN_ATTR_H) toplev.h  except.h $(TM_P_H)\n@@ -1664,7 +1664,7 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) condition\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(EXPR_H) \\\n    $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h $(TARGET_H) \\\n-   gt-alias.h\n+   gt-alias.h $(TIMEVAR_H)\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h"}, {"sha": "9be3aa05534d86ef733582e43463cef8c5e12cdb", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -39,6 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"splay-tree.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n+#include \"timevar.h\"\n #include \"target.h\"\n \n /* The alias sets assigned to MEMs assist the back-end in determining\n@@ -2745,6 +2746,8 @@ init_alias_analysis ()\n   unsigned int ui;\n   rtx insn;\n \n+  timevar_push (TV_ALIAS_ANALYSIS);\n+\n   reg_known_value_size = maxreg;\n \n   reg_known_value\n@@ -2950,6 +2953,7 @@ init_alias_analysis ()\n   new_reg_base_value = 0;\n   free (reg_seen);\n   reg_seen = 0;\n+  timevar_pop (TV_ALIAS_ANALYSIS);\n }\n \n void"}, {"sha": "a5bb317bde7c524599152be83daeef7b8ce20558", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -6413,7 +6413,7 @@ finish_function (nested, can_defer_p)\n   free_after_compilation (cfun);\n   cfun = NULL;\n \n-  if (flag_unit_at_a_time)\n+  if (flag_unit_at_a_time && can_defer_p)\n     {\n       cgraph_finalize_function (fndecl, DECL_SAVED_TREE (fndecl));\n       current_function_decl = NULL;"}, {"sha": "9643a558c731ef7ecf5e89b49730f2c434308854", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -2477,6 +2477,15 @@ emit_group_store (orig_dst, src, ssize)\n \t      bytepos -= GET_MODE_SIZE (GET_MODE (XEXP (dst, 0)));\n \t      dest = XEXP (dst, 1);\n \t    }\n+\t  else if (bytepos == 0 && XVECLEN (src, 0))\n+\t    {\n+\t      dest = assign_stack_temp (GET_MODE (dest),\n+\t\t\t\t        GET_MODE_SIZE (GET_MODE (dest)), 0);\n+\t      emit_move_insn (adjust_address (dest, GET_MODE (tmps[i]), bytepos),\n+\t\t\t      tmps[i]);\n+\t      dst = dest;\n+\t      break;\n+\t    }\n \t  else\n \t    abort ();\n \t}\n@@ -2495,7 +2504,7 @@ emit_group_store (orig_dst, src, ssize)\n   emit_queue ();\n \n   /* Copy from the pseudo into the (probable) hard reg.  */\n-  if (GET_CODE (dst) == REG)\n+  if (orig_dst != dst)\n     emit_move_insn (orig_dst, dst);\n }\n "}, {"sha": "15c9d36618f53dc09cb30a7d752d0425208d03c6", "filename": "gcc/jump.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -53,6 +53,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"reload.h\"\n #include \"predict.h\"\n+#include \"timevar.h\"\n \n /* Optimize jump y; x: ... y: jumpif... x?\n    Don't know if it is worth bothering with.  */\n@@ -82,6 +83,7 @@ rebuild_jump_labels (f)\n {\n   rtx insn;\n \n+  timevar_push (TV_REBUILD_JUMP);\n   init_label_info (f);\n   mark_all_labels (f);\n \n@@ -92,6 +94,7 @@ rebuild_jump_labels (f)\n   for (insn = forced_labels; insn; insn = XEXP (insn, 1))\n     if (GET_CODE (XEXP (insn, 0)) == CODE_LABEL)\n       LABEL_NUSES (XEXP (insn, 0))++;\n+  timevar_pop (TV_REBUILD_JUMP);\n }\n \f\n /* Some old code expects exactly one BARRIER as the NEXT_INSN of a"}, {"sha": "3dace91ff1097b141e528d717a8303b5f7e8a8e5", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -60,6 +60,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"target.h\"\n #include \"diagnostic.h\"\n+#include \"cgraph.h\"\n \n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct.\n@@ -294,6 +295,7 @@ static void handle_class_ref\t\t\tPARAMS ((tree));\n static void generate_struct_by_value_array\tPARAMS ((void))\n      ATTRIBUTE_NORETURN;\n static void encode_complete_bitfield\t\tPARAMS ((int, tree, int));\n+static void mark_referenced_methods\t\tPARAMS ((void));\n \n /*** Private Interface (data) ***/\n \n@@ -486,6 +488,7 @@ objc_init (filename)\n void\n finish_file ()\n {\n+  mark_referenced_methods ();\n   c_objc_common_finish_file ();\n \n   /* Finalize Objective-C runtime data.  No need to generate tables\n@@ -4027,6 +4030,29 @@ generate_dispatch_table (type, name, size, list)\n   return decl;\n }\n \n+static void\n+mark_referenced_methods ()\n+{\n+  struct imp_entry *impent;\n+  tree chain;\n+\n+  for (impent = imp_list; impent; impent = impent->next)\n+    {\n+      chain = CLASS_CLS_METHODS (impent->imp_context);\n+      while (chain)\n+\t{\n+\t  cgraph_mark_needed_node (cgraph_node (METHOD_DEFINITION (chain)));\n+\t  chain = TREE_CHAIN (chain);\n+\t}\n+      chain = CLASS_NST_METHODS (impent->imp_context);\n+      while (chain)\n+\t{\n+\t  cgraph_mark_needed_node (cgraph_node (METHOD_DEFINITION (chain)));\n+\t  chain = TREE_CHAIN (chain);\n+\t}\n+    }\n+}\n+\n static void\n generate_dispatch_tables ()\n {"}, {"sha": "686e35e3d66bce7233bca1b0ca7bcd19b250119c", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -99,6 +99,9 @@ static void objc_init_options                   PARAMS ((void));\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   c_convert_parm_for_inlining\n \n+#undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n+#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION c_expand_body\n+\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE"}, {"sha": "e30e47720ca57433bd03f88aa1d031ee7ba26072", "filename": "gcc/optabs.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -5119,15 +5119,26 @@ expand_fix (to, from, unsignedp)\n      one plus the highest signed number, convert, and add it back.\n \n      We only need to check all real modes, since we know we didn't find\n-     anything with a wider integer mode.  */\n+     anything with a wider integer mode.  \n+\n+     This code used to extend FP value into mode wider than the destination.\n+     This is not needed.  Consider, for instance conversion from SFmode\n+     into DImode.\n+\n+     The hot path trought the code is dealing with inputs smaller than 2^63\n+     and doing just the conversion, so there is no bits to lose.\n+\n+     In the other path we know the value is positive in the range 2^63..2^64-1\n+     inclusive.  (as for other imput overflow happens and result is undefined)\n+     So we know that the most important bit set in mantisa corresponds to\n+     2^63.  The subtraction of 2^63 should not generate any rounding as it\n+     simply clears out that bit.  The rest is trivial.  */\n \n   if (unsignedp && GET_MODE_BITSIZE (GET_MODE (to)) <= HOST_BITS_PER_WIDE_INT)\n     for (fmode = GET_MODE (from); fmode != VOIDmode;\n \t fmode = GET_MODE_WIDER_MODE (fmode))\n-      /* Make sure we won't lose significant bits doing this.  */\n-      if (GET_MODE_BITSIZE (fmode) > GET_MODE_BITSIZE (GET_MODE (to))\n-\t  && CODE_FOR_nothing != can_fix_p (GET_MODE (to), fmode, 0,\n-\t\t\t\t\t    &must_trunc))\n+      if (CODE_FOR_nothing != can_fix_p (GET_MODE (to), fmode, 0,\n+\t\t\t\t\t &must_trunc))\n \t{\n \t  int bitsize;\n \t  REAL_VALUE_TYPE offset;"}, {"sha": "abbd6eabe3d50c01a3eccd725dcc723a8de6df63", "filename": "gcc/regclass.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -43,6 +43,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n+#include \"timevar.h\"\n \n #ifndef REGISTER_MOVE_COST\n #define REGISTER_MOVE_COST(m, x, y) 2\n@@ -2338,6 +2339,8 @@ reg_scan (f, nregs, repeat)\n   max_parallel = 3;\n   max_set_parallel = 0;\n \n+  timevar_push (TV_REG_SCAN);\n+\n   for (insn = f; insn; insn = NEXT_INSN (insn))\n     if (GET_CODE (insn) == INSN\n \t|| GET_CODE (insn) == CALL_INSN\n@@ -2353,6 +2356,8 @@ reg_scan (f, nregs, repeat)\n       }\n \n   max_parallel += max_set_parallel;\n+\n+  timevar_pop (TV_REG_SCAN);\n }\n \n /* Update 'regscan' information by looking at the insns"}, {"sha": "f8a32f63a8fb11eccd74773c673c8615c63cf83e", "filename": "gcc/timevar.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d446150c298b2048d18e354ee47b130ed3b8e7f/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=0d446150c298b2048d18e354ee47b130ed3b8e7f", "patch": "@@ -47,6 +47,10 @@ DEFTIMEVAR (TV_DELETE_TRIVIALLY_DEAD , \"trivially dead code\")\n /* Time spent by life analysis.  */\n DEFTIMEVAR (TV_LIFE\t\t     , \"life analysis\")\n DEFTIMEVAR (TV_LIFE_UPDATE\t     , \"life info update\")\n+\n+DEFTIMEVAR (TV_ALIAS_ANALYSIS\t     , \"alias analysis\")\n+DEFTIMEVAR (TV_REG_SCAN\t\t     , \"register scan\")\n+DEFTIMEVAR (TV_REBUILD_JUMP\t     , \"rebuild jump labels\")\n /* Timing in various stages of the compiler.  */\n DEFTIMEVAR (TV_CPP\t\t     , \"preprocessing\")\n DEFTIMEVAR (TV_LEX\t\t     , \"lexical analysis\")"}]}