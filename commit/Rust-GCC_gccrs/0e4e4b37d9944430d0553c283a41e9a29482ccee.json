{"sha": "0e4e4b37d9944430d0553c283a41e9a29482ccee", "node_id": "C_kwDOANBUbNoAKDBlNGU0YjM3ZDk5NDQ0MzBkMDU1M2MyODNhNDFlOWEyOTQ4MmNjZWU", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2022-01-17T14:56:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-18T16:31:02Z"}, "message": "libstdc++: Declare std::c8rtomb and std::mbrtoc8 if provided by the C library\n\nThis patch completes implementation of the C++20 proposal P0482R6 [1] by\nadding declarations of std::c8rtomb() and std::mbrtoc8() in <cuchar> if\nprovided by the C library in <uchar.h>.\n\nThis patch addresses feedback provided in response to a previous patch\nsubmission [2].\n\nAutoconf changes determine if the C library declares c8rtomb and mbrtoc8\nat global scope when uchar.h is included and compiled with either\n-fchar8_t or -std=c++20. New _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T\nand _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20 configuration macros\nreflect the probe results. The <cuchar> header declares these functions\nin the std namespace only if available and the _GLIBCXX_USE_CHAR8_T\nconfiguration macro is defined (by default it is defined if the C++20\n__cpp_char8_t feature test macro is defined)\n\nPatches to glibc to implement c8rtomb and mbrtoc8 have been submitted [3].\n\nNew tests validate the presence of these declarations. The tests pass\ntrivially if the C library does not provide these functions. Otherwise\nthey ensure that the functions are declared when <cuchar> is included\nand either -fchar8_t or -std=c++20 is enabled.\n\n1]: WG21 P0482R6\n      \"char8_t: A type for UTF-8 characters and strings (Revision 6)\"\n      https://wg21.link/p0482r6\n\n[2]: [PATCH] C++ P0482R6 char8_t: declare std::c8rtomb and std::mbrtoc8\nif provided by the C library\n      https://gcc.gnu.org/pipermail/libstdc++/2021-June/052685.html\n\n[3]: \"C++20 P0482R6 and C2X N2653\"\n      [Patch 0/3]:\nhttps://sourceware.org/pipermail/libc-alpha/2022-January/135061.html\n      [Patch 1/3]:\nhttps://sourceware.org/pipermail/libc-alpha/2022-January/135062.html\n      [Patch 2/3]:\nhttps://sourceware.org/pipermail/libc-alpha/2022-January/135063.html\n      [Patch 3/3]:\nhttps://sourceware.org/pipermail/libc-alpha/2022-January/135064.html\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4: Define config macros if uchar.h provides\n\tc8rtomb() and mbrtoc8().\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/c_compatibility/uchar.h (c8rtomb, mbrtoc8): Define.\n\t* include/c_global/cuchar (c8rtomb, mbrtoc8): Likewise.\n\t* include/c_std/cuchar (c8rtomb, mbrtoc8): Likewise.\n\t* testsuite/21_strings/headers/cuchar/functions_std_cxx20.cc:\n\tNew test.\n\t* testsuite/21_strings/headers/cuchar/functions_std_fchar8_t.cc:\n\tNew test.", "tree": {"sha": "672c48d4e073a81aa1d536d6661b3855c2f0bae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/672c48d4e073a81aa1d536d6661b3855c2f0bae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e4e4b37d9944430d0553c283a41e9a29482ccee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4e4b37d9944430d0553c283a41e9a29482ccee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4e4b37d9944430d0553c283a41e9a29482ccee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4e4b37d9944430d0553c283a41e9a29482ccee/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f2a09e98520c4e4927f460ad96803b05a205b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f2a09e98520c4e4927f460ad96803b05a205b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f2a09e98520c4e4927f460ad96803b05a205b1"}], "stats": {"total": 228, "additions": 227, "deletions": 1}, "files": [{"sha": "d996477254c7347aeb448c39337dd7e0286e2cce", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -2044,6 +2044,50 @@ AC_DEFUN([GLIBCXX_CHECK_UCHAR_H], [\n \t      namespace std in <cuchar>.])\n   fi\n \n+  CXXFLAGS=\"$CXXFLAGS -fchar8_t\"\n+  if test x\"$ac_has_uchar_h\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for c8rtomb and mbrtoc8 in <uchar.h> with -fchar8_t])\n+    AC_TRY_COMPILE([#include <uchar.h>\n+\t\t    namespace test\n+\t\t    {\n+\t\t      using ::c8rtomb;\n+\t\t      using ::mbrtoc8;\n+\t\t    }\n+\t\t   ],\n+\t\t   [], [ac_uchar_c8rtomb_mbrtoc8_fchar8_t=yes],\n+\t\t       [ac_uchar_c8rtomb_mbrtoc8_fchar8_t=no])\n+  else\n+    ac_uchar_c8rtomb_mbrtoc8_fchar8_t=no\n+  fi\n+  AC_MSG_RESULT($ac_uchar_c8rtomb_mbrtoc8_fchar8_t)\n+  if test x\"$ac_uchar_c8rtomb_mbrtoc8_fchar8_t\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T, 1,\n+\t      [Define if c8rtomb and mbrtoc8 functions in <uchar.h> should be\n+\t      imported into namespace std in <cuchar> for -fchar8_t.])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS -std=c++20\"\n+  if test x\"$ac_has_uchar_h\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for c8rtomb and mbrtoc8 in <uchar.h> with -std=c++20])\n+    AC_TRY_COMPILE([#include <uchar.h>\n+\t\t    namespace test\n+\t\t    {\n+\t\t      using ::c8rtomb;\n+\t\t      using ::mbrtoc8;\n+\t\t    }\n+\t\t   ],\n+\t\t   [], [ac_uchar_c8rtomb_mbrtoc8_cxx20=yes],\n+\t\t       [ac_uchar_c8rtomb_mbrtoc8_cxx20=no])\n+  else\n+    ac_uchar_c8rtomb_mbrtoc8_cxx20=no\n+  fi\n+  AC_MSG_RESULT($ac_uchar_c8rtomb_mbrtoc8_cxx20)\n+  if test x\"$ac_uchar_c8rtomb_mbrtoc8_cxx20\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20, 1,\n+\t      [Define if c8rtomb and mbrtoc8 functions in <uchar.h> should be\n+\t      imported into namespace std in <cuchar> for C++20.])\n+  fi\n+\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   AC_LANG_RESTORE\n ])"}, {"sha": "235d256a1cc49cf3e1ea554170701909af9a0527", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -1010,6 +1010,14 @@\n /* Define if obsolescent tmpnam is available in <stdio.h>. */\n #undef _GLIBCXX_USE_TMPNAM\n \n+/* Define if c8rtomb and mbrtoc8 functions in <uchar.h> should be imported\n+   into namespace std in <cuchar> for C++20. */\n+#undef _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20\n+\n+/* Define if c8rtomb and mbrtoc8 functions in <uchar.h> should be imported\n+   into namespace std in <cuchar> for -fchar8_t. */\n+#undef _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T\n+\n /* Define if utime is available in <utime.h>. */\n #undef _GLIBCXX_USE_UTIME\n "}, {"sha": "6b7cd24c7cdb0fe9323a2b091f03fc6d131370b5", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -19151,6 +19151,82 @@ $as_echo \"#define _GLIBCXX_USE_C11_UCHAR_CXX11 1\" >>confdefs.h\n \n   fi\n \n+  CXXFLAGS=\"$CXXFLAGS -fchar8_t\"\n+  if test x\"$ac_has_uchar_h\" = x\"yes\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for c8rtomb and mbrtoc8 in <uchar.h> with -fchar8_t\" >&5\n+$as_echo_n \"checking for c8rtomb and mbrtoc8 in <uchar.h> with -fchar8_t... \" >&6; }\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <uchar.h>\n+\t\t    namespace test\n+\t\t    {\n+\t\t      using ::c8rtomb;\n+\t\t      using ::mbrtoc8;\n+\t\t    }\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_uchar_c8rtomb_mbrtoc8_fchar8_t=yes\n+else\n+  ac_uchar_c8rtomb_mbrtoc8_fchar8_t=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  else\n+    ac_uchar_c8rtomb_mbrtoc8_fchar8_t=no\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_uchar_c8rtomb_mbrtoc8_fchar8_t\" >&5\n+$as_echo \"$ac_uchar_c8rtomb_mbrtoc8_fchar8_t\" >&6; }\n+  if test x\"$ac_uchar_c8rtomb_mbrtoc8_fchar8_t\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T 1\" >>confdefs.h\n+\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS -std=c++20\"\n+  if test x\"$ac_has_uchar_h\" = x\"yes\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for c8rtomb and mbrtoc8 in <uchar.h> with -std=c++20\" >&5\n+$as_echo_n \"checking for c8rtomb and mbrtoc8 in <uchar.h> with -std=c++20... \" >&6; }\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <uchar.h>\n+\t\t    namespace test\n+\t\t    {\n+\t\t      using ::c8rtomb;\n+\t\t      using ::mbrtoc8;\n+\t\t    }\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_uchar_c8rtomb_mbrtoc8_cxx20=yes\n+else\n+  ac_uchar_c8rtomb_mbrtoc8_cxx20=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  else\n+    ac_uchar_c8rtomb_mbrtoc8_cxx20=no\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_uchar_c8rtomb_mbrtoc8_cxx20\" >&5\n+$as_echo \"$ac_uchar_c8rtomb_mbrtoc8_cxx20\" >&6; }\n+  if test x\"$ac_uchar_c8rtomb_mbrtoc8_cxx20\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20 1\" >>confdefs.h\n+\n+  fi\n+\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'"}, {"sha": "bf255386bb86cede3b5206b5de8b143205d6e6ed", "filename": "libstdc++-v3/include/c_compatibility/uchar.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fuchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fuchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fuchar.h?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -33,6 +33,14 @@\n \n #ifdef _GLIBCXX_NAMESPACE_C\n \n+#if (_GLIBCXX_USE_CHAR8_T \\\n+     && (_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T \\\n+\t || (__cplusplus >= 202002 \\\n+\t     && _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20)))\n+using std::mbrtoc8;\n+using std::c8rtomb;\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n #if _GLIBCXX_USE_C11_UCHAR_CXX11\n using std::mbrtoc16;\n using std::c16rtomb;"}, {"sha": "bca2540250d01c798013ca53d3734e2becb97316", "filename": "libstdc++-v3/include/c_global/cuchar", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcuchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcuchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcuchar?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -48,10 +48,41 @@\n #include <bits/c++config.h>\n #include <cwchar>\n \n-#if _GLIBCXX_USE_C11_UCHAR_CXX11\n+#if (_GLIBCXX_USE_C11_UCHAR_CXX11 \\\n+     || (_GLIBCXX_USE_CHAR8_T \\\n+\t && (_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T \\\n+\t     || (__cplusplus >= 202002 \\\n+\t\t && _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20))))\n \n #include <uchar.h>\n \n+#endif\n+\n+\n+// Support for mbrtoc8 and c8rtomb is conditioned on support by the C library.\n+#if (_GLIBCXX_USE_CHAR8_T \\\n+     && (_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T \\\n+\t || (__cplusplus >= 202002 \\\n+\t     && _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20)))\n+\n+#undef mbrtoc8\n+#undef c8rtomb\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  using ::mbrtoc8;\n+  using ::c8rtomb;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n+\n+#if _GLIBCXX_USE_C11_UCHAR_CXX11\n+\n // Get rid of those macros defined in <uchar.h> in lieu of real functions.\n #undef mbrtoc16\n #undef c16rtomb"}, {"sha": "241009a38ea58fa309fadc2dae0e2dc266bc7db7", "filename": "libstdc++-v3/include/c_std/cuchar", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcuchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcuchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcuchar?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -50,7 +50,42 @@\n \n #if _GLIBCXX_USE_C11_UCHAR_CXX11\n \n+#if (_GLIBCXX_USE_C11_UCHAR_CXX11 \\\n+     || (_GLIBCXX_USE_CHAR8_T \\\n+\t && (_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T \\\n+\t     || (__cplusplus >= 202002 \\\n+\t\t && _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20))))\n+ \n #include <uchar.h>\n+ \n+#endif\n+\n+\n+// Support for mbrtoc8 and c8rtomb is conditioned on support by the C library.\n+#if (_GLIBCXX_USE_CHAR8_T \\\n+     && (_GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T \\\n+\t || (__cplusplus >= 202002 \\\n+\t     && _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20)))\n+\n+// Get rid of those macros defined in <uchar.h> in lieu of real functions.\n+#undef mbrtoc8\n+#undef c8rtomb\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  using ::mbrtoc8;\n+  using ::c8rtomb;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n+\n+#if _GLIBCXX_USE_C11_UCHAR_CXX11\n+\n \n // Get rid of those macros defined in <uchar.h> in lieu of real functions.\n #undef mbrtoc16"}, {"sha": "df68fb7c82f8b536c1594f78134a1a0966043ed9", "filename": "libstdc++-v3/testsuite/21_strings/headers/cuchar/functions_std_cxx20.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcuchar%2Ffunctions_std_cxx20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcuchar%2Ffunctions_std_cxx20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcuchar%2Ffunctions_std_cxx20.cc?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <cuchar>\n+\n+namespace gnu\n+{\n+#if _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20\n+  using std::mbrtoc8;\n+  using std::c8rtomb;\n+#endif // _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20\n+}"}, {"sha": "a780583fce942a9f68bccb8d0ff1cf2dabaff642", "filename": "libstdc++-v3/testsuite/21_strings/headers/cuchar/functions_std_fchar8_t.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcuchar%2Ffunctions_std_fchar8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e4b37d9944430d0553c283a41e9a29482ccee/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcuchar%2Ffunctions_std_fchar8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcuchar%2Ffunctions_std_fchar8_t.cc?ref=0e4e4b37d9944430d0553c283a41e9a29482ccee", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-fchar8_t\" }\n+// { dg-do compile { target c++11 } }\n+\n+#include <cuchar>\n+\n+namespace gnu\n+{\n+#if _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T\n+  using std::mbrtoc8;\n+  using std::c8rtomb;\n+#endif // _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T\n+}"}]}