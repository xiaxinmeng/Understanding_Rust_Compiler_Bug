{"sha": "886a64f901a20efd755f9fc3e71419902b0cfd41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2YTY0ZjkwMWEyMGVmZDc1NWY5ZmMzZTcxNDE5OTAyYjBjZmQ0MQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-12T10:06:46Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-12T10:06:46Z"}, "message": "re PR target/43746 (-fmerge-constants and -fmerge-all-constants don't work at AVR target)\n\ngcc/\n\tPR target/43746\n\t* config/avr/avr.c (AVR_SECTION_PROGMEM): New Define.\n\t(progmem_section): New Variable.\n\t(avr_asm_init_sections): Initialize it.\n\t(TARGET_ASM_SELECT_SECTION): Define to...\n\t(avr_asm_select_section): ... this new Function.\n\t(avr_replace_prefix): New Function.\n\t(avr_asm_function_rodata_section): Use it.\n\t(avr_insert_attributes): Don't add section attribute for PROGMEM.\n\t(avr_section_type_flags): Use avr_progmem_p instead of section\n\tname to detect if object is in PROGMEM.\n\t(avr_asm_named_section): Set section name prefix for objects in\n\tPROGMEM.\n\ntestsuite/\n\tPR target/43746\n\t* testsuite/gcc.target/avr/torture/avr-torture.exp\n\t(AVR_TORTURE_OPTIONS): Add test cases \"-O2 -fdata-sections\" and\n\t\"-O2 -fmerge-all-constants\".\n\nFrom-SVN: r178779", "tree": {"sha": "fc7969f005f5c615d39984b3d09a13f6aa73b715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc7969f005f5c615d39984b3d09a13f6aa73b715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886a64f901a20efd755f9fc3e71419902b0cfd41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886a64f901a20efd755f9fc3e71419902b0cfd41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886a64f901a20efd755f9fc3e71419902b0cfd41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886a64f901a20efd755f9fc3e71419902b0cfd41/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc72b3137af4ee3ab261e1437a243d07600e18e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc72b3137af4ee3ab261e1437a243d07600e18e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc72b3137af4ee3ab261e1437a243d07600e18e9"}], "stats": {"total": 254, "additions": 177, "deletions": 77}, "files": [{"sha": "ccde11a4349efaa7370a77984f33e087204fc1f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=886a64f901a20efd755f9fc3e71419902b0cfd41", "patch": "@@ -1,3 +1,19 @@\n+2011-09-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/43746\n+\t* config/avr/avr.c (AVR_SECTION_PROGMEM): New Define.\n+\t(progmem_section): New Variable.\n+\t(avr_asm_init_sections): Initialize it.\n+\t(TARGET_ASM_SELECT_SECTION): Define to...\n+\t(avr_asm_select_section): ... this new Function.\n+\t(avr_replace_prefix): New Function.\n+\t(avr_asm_function_rodata_section): Use it.\n+\t(avr_insert_attributes): Don't add section attribute for PROGMEM.\n+\t(avr_section_type_flags): Use avr_progmem_p instead of section\n+\tname to detect if object is in PROGMEM.\n+\t(avr_asm_named_section): Set section name prefix for objects in\n+\tPROGMEM.\n+\n 2011-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/50352"}, {"sha": "b6793bc82ca51cb236ebff487e08357f4954eff9", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 91, "deletions": 16, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=886a64f901a20efd755f9fc3e71419902b0cfd41", "patch": "@@ -54,6 +54,8 @@\n /* Return true if STR starts with PREFIX and false, otherwise.  */\n #define STR_PREFIX_P(STR,PREFIX) (0 == strncmp (STR, PREFIX, strlen (PREFIX)))\n \n+#define AVR_SECTION_PROGMEM (SECTION_MACH_DEP << 0)\n+\n static void avr_option_override (void);\n static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n@@ -114,6 +116,7 @@ static bool avr_function_ok_for_sibcall (tree, tree);\n static void avr_asm_named_section (const char *name, unsigned int flags, tree decl);\n static void avr_encode_section_info (tree, rtx, int);\n static section* avr_asm_function_rodata_section (tree);\n+static section* avr_asm_select_section (tree, int, unsigned HOST_WIDE_INT);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -139,6 +142,9 @@ const struct mcu_type_s *avr_current_device;\n /* Section to put switch tables in.  */\n static GTY(()) section *progmem_swtable_section;\n \n+/* Unnamed section associated to __attribute__((progmem)) aka. PROGMEM.  */\n+static GTY(()) section *progmem_section;\n+\n /* To track if code will use .bss and/or .data.  */\n bool avr_need_clear_bss_p = false;\n bool avr_need_copy_data_p = false;\n@@ -206,6 +212,8 @@ static const struct attribute_spec avr_attribute_table[] =\n #define TARGET_ASM_INIT_SECTIONS avr_asm_init_sections\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO avr_encode_section_info\n+#undef TARGET_ASM_SELECT_SECTION\n+#define TARGET_ASM_SELECT_SECTION avr_asm_select_section\n \n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST avr_register_move_cost\n@@ -270,6 +278,31 @@ static const struct attribute_spec avr_attribute_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+\n+/* Custom function to replace string prefix.\n+\n+   Return a ggc-allocated string with strlen (OLD_PREFIX) characters removed\n+   from the start of OLD_STR and then prepended with NEW_PREFIX.  */\n+\n+static inline const char*\n+avr_replace_prefix (const char *old_str,\n+                    const char *old_prefix, const char *new_prefix)\n+{\n+  char *new_str;\n+  size_t len = strlen (old_str) + strlen (new_prefix) - strlen (old_prefix);\n+\n+  gcc_assert (strlen (old_prefix) <= strlen (old_str));\n+\n+  /* Unfortunately, ggc_alloc_string returns a const char* and thus cannot be\n+     used here.  */\n+     \n+  new_str = (char*) ggc_alloc_atomic (1 + len);\n+\n+  strcat (stpcpy (new_str, new_prefix), old_str + strlen (old_prefix));\n+  \n+  return (const char*) new_str;\n+}\n+\n static void\n avr_option_override (void)\n {\n@@ -5034,15 +5067,7 @@ avr_insert_attributes (tree node, tree *attributes)\n       if (error_mark_node == node0)\n         return;\n       \n-      if (TYPE_READONLY (node0))\n-        {\n-          static const char dsec[] = \".progmem.data\";\n-\n-          *attributes = tree_cons (get_identifier (\"section\"),\n-                                   build_tree_list (NULL, build_string (strlen (dsec), dsec)),\n-                                   *attributes);\n-        }\n-      else\n+      if (!TYPE_READONLY (node0))\n         {\n           error (\"variable %q+D must be const in order to be put into\"\n                  \" read-only section by means of %<__attribute__((progmem))%>\",\n@@ -5119,6 +5144,10 @@ avr_asm_init_sections (void)\n                                \",\\\"ax\\\",@progbits\");\n     }\n \n+  progmem_section\n+    = get_unnamed_section (0, output_section_asm_op,\n+                           \"\\t.section\\t.progmem.data,\\\"a\\\",@progbits\");\n+  \n   /* Override section callbacks to keep track of `avr_need_clear_bss_p'\n      resp. `avr_need_copy_data_p'.  */\n   \n@@ -5173,11 +5202,7 @@ avr_asm_function_rodata_section (tree decl)\n \n           if (STR_PREFIX_P (name, old_prefix))\n             {\n-              char *rname = (char*) alloca (1 + strlen (name)\n-                                            + strlen (new_prefix)\n-                                            - strlen (old_prefix));\n-              \n-              strcat (stpcpy (rname, new_prefix), name + strlen (old_prefix));\n+              const char *rname = avr_replace_prefix (name, old_prefix, new_prefix);\n \n               flags &= ~SECTION_CODE;\n               flags |= AVR_HAVE_JMP_CALL ? 0 : SECTION_CODE;\n@@ -5197,6 +5222,22 @@ avr_asm_function_rodata_section (tree decl)\n static void\n avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n {\n+  if (flags & AVR_SECTION_PROGMEM)\n+    {\n+      const char *old_prefix = \".rodata\";\n+      const char *new_prefix = \".progmem.data\";\n+      const char *sname = new_prefix;\n+      \n+      if (STR_PREFIX_P (name, old_prefix))\n+        {\n+          sname = avr_replace_prefix (name, old_prefix, new_prefix);\n+        }\n+\n+      default_elf_asm_named_section (sname, flags, decl);\n+\n+      return;\n+    }\n+  \n   if (!avr_need_copy_data_p)\n     avr_need_copy_data_p = (STR_PREFIX_P (name, \".data\")\n                             || STR_PREFIX_P (name, \".rodata\")\n@@ -5223,8 +5264,12 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n \t\t \".noinit section\");\n     }\n \n-  if (STR_PREFIX_P (name, \".progmem.data\"))\n-    flags &= ~SECTION_WRITE;\n+  if (decl && DECL_P (decl)\n+      && avr_progmem_p (decl, DECL_ATTRIBUTES (decl)))\n+    {\n+      flags &= ~SECTION_WRITE;\n+      flags |= AVR_SECTION_PROGMEM;\n+    }\n   \n   return flags;\n }\n@@ -5254,6 +5299,36 @@ avr_encode_section_info (tree decl, rtx rtl,\n }\n \n \n+/* Implement `TARGET_ASM_SELECT_SECTION' */\n+\n+static section *\n+avr_asm_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n+{\n+  section * sect = default_elf_select_section (decl, reloc, align);\n+  \n+  if (decl && DECL_P (decl)\n+      && avr_progmem_p (decl, DECL_ATTRIBUTES (decl)))\n+    {\n+      if (sect->common.flags & SECTION_NAMED)\n+        {\n+          const char * name = sect->named.name;\n+          const char * old_prefix = \".rodata\";\n+          const char * new_prefix = \".progmem.data\";\n+\n+          if (STR_PREFIX_P (name, old_prefix))\n+            {\n+              const char *sname = avr_replace_prefix (name, old_prefix, new_prefix);\n+\n+              return get_section (sname, sect->common.flags, sect->named.decl);\n+            }\n+        }\n+          \n+      return progmem_section;\n+    }\n+\n+  return sect;\n+}\n+\n /* Implement `TARGET_ASM_FILE_START'.  */\n /* Outputs some appropriate text to go at the start of an assembler\n    file.  */"}, {"sha": "57c8209f41e314f321f34758b0f4a54646d107a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=886a64f901a20efd755f9fc3e71419902b0cfd41", "patch": "@@ -1,3 +1,10 @@\n+2011-09-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/43746\n+\t* testsuite/gcc.target/avr/torture/avr-torture.exp\n+\t(AVR_TORTURE_OPTIONS): Add test cases \"-O2 -fdata-sections\" and\n+\t\"-O2 -fmerge-all-constants\".\n+\n 2011-09-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/50327"}, {"sha": "cb643f26978207206790b55e7725e3a418c7e346", "filename": "gcc/testsuite/gcc.target/avr/torture/avr-torture.exp", "status": "modified", "additions": 63, "deletions": 61, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Favr-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886a64f901a20efd755f9fc3e71419902b0cfd41/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Favr-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Favr-torture.exp?ref=886a64f901a20efd755f9fc3e71419902b0cfd41", "patch": "@@ -1,61 +1,63 @@\n-#   Copyright (C) 2008 Free Software Foundation, Inc.\r\n-\r\n-# This program is free software; you can redistribute it and/or modify\r\n-# it under the terms of the GNU General Public License as published by\r\n-# the Free Software Foundation; either version 3 of the License, or\r\n-# (at your option) any later version.\r\n-# \r\n-# This program is distributed in the hope that it will be useful,\r\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n-# GNU General Public License for more details.\r\n-# \r\n-# You should have received a copy of the GNU General Public License\r\n-# along with GCC; see the file COPYING3.  If not see\r\n-# <http://www.gnu.org/licenses/>.\r\n-\r\n-# GCC testsuite that uses the `gcc-dg.exp' driver, looping over\r\n-# optimization options.\r\n-\r\n-# Exit immediately if this isn't a AVR target.\r\n-if { ![istarget avr-*-*] } then {\r\n-  return\r\n-}\r\n-\r\n-# Load support procs.\r\n-load_lib gcc-dg.exp\r\n-\r\n-# If a testcase doesn't have special options, use these.\r\n-global DEFAULT_CFLAGS\r\n-if ![info exists DEFAULT_CFLAGS] then {\r\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\r\n-}\r\n-\r\n-# Initialize `dg'.\r\n-dg-init\r\n-\r\n-    set AVR_TORTURE_OPTIONS [list \\\r\n-\t{ -O0 } \\\r\n-\t{ -O1 } \\\r\n-\t{ -O2 } \\\r\n-\t{ -O2 -mcall-prologues } \\\r\n-\t{ -Os -fomit-frame-pointer } \\\r\n-\t{ -Os -fomit-frame-pointer -finline-functions } \\\r\n-\t{ -O3 -g } \\\r\n-\t{ -Os -mcall-prologues} ]\r\n-\r\n-\r\n-#Initialize use of torture lists. \r\n-torture-init\r\n-\r\n-set-torture-options $AVR_TORTURE_OPTIONS\r\n-\r\n-\r\n-# Main loop.\r\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{\\[cS\\],cpp}]] $DEFAULT_CFLAGS\r\n-\r\n-# Finalize use of torture lists.\r\n-torture-finish\r\n-\r\n-# All done.\r\n-dg-finish\r\n+#   Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `gcc-dg.exp' driver, looping over\n+# optimization options.\n+\n+# Exit immediately if this isn't a AVR target.\n+if { ![istarget avr-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+    set AVR_TORTURE_OPTIONS [list \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O2 -mcall-prologues } \\\n+\t{ -O2 -fdata-sections } \\\n+\t{ -O2 -fmerge-all-constants } \\\n+\t{ -Os -fomit-frame-pointer } \\\n+\t{ -Os -fomit-frame-pointer -finline-functions } \\\n+\t{ -O3 -g } \\\n+\t{ -Os -mcall-prologues} ]\n+\n+\n+#Initialize use of torture lists. \n+torture-init\n+\n+set-torture-options $AVR_TORTURE_OPTIONS\n+\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{\\[cS\\],cpp}]] $DEFAULT_CFLAGS\n+\n+# Finalize use of torture lists.\n+torture-finish\n+\n+# All done.\n+dg-finish"}]}