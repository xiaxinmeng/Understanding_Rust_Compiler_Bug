{"sha": "d29a7cd6f4d4e9cf91987464fd080de79a0c7d31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI5YTdjZDZmNGQ0ZTljZjkxOTg3NDY0ZmQwODBkZTc5YTBjN2QzMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-16T08:04:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-16T08:04:32Z"}, "message": "options, lto: Optimize streaming of optimization nodes\n\nWhen working on the previous patch, I've noticed that all cl_optimization\nfields appart from strings are streamed with bp_pack_value (..., 64); so we\nwaste quite a lot of space, given that many of the options are just booleans\nor char options and there are 450-ish of them.\n\nFixed by streaming the number of bits the corresponding fields have.\nWhile for char fields we have also range information, except for 3\nit is either -128, 127 or 0, 255, so it didn't seem worth it to bother\nwith using range-ish packing.\n\n2020-09-16  Jakub Jelinek  <jakub@redhat.com>\n\n\t* optc-save-gen.awk: In cl_optimization_stream_out use\n\tbp_pack_var_len_{int,unsigned} instead of bp_pack_value.  In\n\tcl_optimization_stream_in use bp_unpack_var_len_{int,unsigned}\n\tinstead of bp_unpack_value.  Formatting fix.", "tree": {"sha": "55434d3f2026efd4f598ca607da8a703b171ebeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55434d3f2026efd4f598ca607da8a703b171ebeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d29a7cd6f4d4e9cf91987464fd080de79a0c7d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29a7cd6f4d4e9cf91987464fd080de79a0c7d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29a7cd6f4d4e9cf91987464fd080de79a0c7d31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29a7cd6f4d4e9cf91987464fd080de79a0c7d31/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd909071ac04e94f4b6f0baab64d0687ec55681d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd909071ac04e94f4b6f0baab64d0687ec55681d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd909071ac04e94f4b6f0baab64d0687ec55681d"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "b5c27f70eceac8b7a372d1ff5ec4b79c8edea628", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29a7cd6f4d4e9cf91987464fd080de79a0c7d31/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29a7cd6f4d4e9cf91987464fd080de79a0c7d31/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=d29a7cd6f4d4e9cf91987464fd080de79a0c7d31", "patch": "@@ -1257,8 +1257,10 @@ for (i = 0; i < n_opt_val; i++) {\n \totype = var_opt_val_type[i];\n \tif (otype ~ \"^const char \\\\**$\")\n \t\tprint \"  bp_pack_string (ob, bp, ptr->\" name\", true);\";\n+\telse if (otype ~ \"^unsigned\")\n+\t\tprint \"  bp_pack_var_len_unsigned (bp, ptr->\" name\");\";\n \telse\n-\t\tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n+\t\tprint \"  bp_pack_var_len_int (bp, ptr->\" name\");\";\n }\n print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n print \"    bp_pack_value (bp, ptr->explicit_mask[i], 64);\";\n@@ -1274,14 +1276,15 @@ print \"{\";\n for (i = 0; i < n_opt_val; i++) {\n \tname = var_opt_val[i]\n \totype = var_opt_val_type[i];\n-\tif (otype ~ \"^const char \\\\**$\")\n-\t{\n-\t      print \"  ptr->\" name\" = bp_unpack_string (data_in, bp);\";\n-\t      print \"  if (ptr->\" name\")\";\n-\t      print \"    ptr->\" name\" = xstrdup (ptr->\" name\");\";\n+\tif (otype ~ \"^const char \\\\**$\") {\n+\t\tprint \"  ptr->\" name\" = bp_unpack_string (data_in, bp);\";\n+\t\tprint \"  if (ptr->\" name\")\";\n+\t\tprint \"    ptr->\" name\" = xstrdup (ptr->\" name\");\";\n \t}\n+\telse if (otype ~ \"^unsigned\")\n+\t\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_var_len_unsigned (bp);\";\n \telse\n-\t      print \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_value (bp, 64);\";\n+\t\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_var_len_int (bp);\";\n }\n print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n print \"    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);\";"}]}