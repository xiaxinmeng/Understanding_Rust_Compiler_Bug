{"sha": "6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2YTI3Mzc5Y2E1ZDc3MGE3OGNlOTgxMDBmZmRkNGEzMWJhM2M3Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-29T22:31:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-29T22:31:08Z"}, "message": "typeck.c (build_x_unary_op): Use the location_t argument in three error_at.\n\n/cp\n2019-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (build_x_unary_op): Use the location_t argument in\n\tthree error_at.\n\n/testsuite\n2019-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/other/ptrmem8.C: Test locations too.\n\t* g++.dg/template/dtor6.C: Likewise.\n\nFrom-SVN: r277595", "tree": {"sha": "1566cce17695967fbd8a5a8b174f0a3d6fa2e360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1566cce17695967fbd8a5a8b174f0a3d6fa2e360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/comments", "author": null, "committer": null, "parents": [{"sha": "1e2fa738e1c67c1ff7242de87a197403b35e8736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2fa738e1c67c1ff7242de87a197403b35e8736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2fa738e1c67c1ff7242de87a197403b35e8736"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "bc2b48eea750920ff1ee92eccca62facc7587c1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "patch": "@@ -1,3 +1,8 @@\n+2019-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (build_x_unary_op): Use the location_t argument in\n+\tthree error_at.\n+\n 2019-10-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.\n@@ -25,8 +30,8 @@\n \n \t* cp-tree.h (cxx_simulate_builtin_function_decl): Declare.\n \t* decl.c (cxx_simulate_builtin_function_decl): New function.\n-\t* cp-objcp-common.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define\n-\tto the above.\n+\t* cp-objcp-common.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL):\n+\tDefine to the above.\n \n 2019-10-28  Martin Sebor  <msebor@redhat.com>\n "}, {"sha": "ad46d42d215b3e45ca83931a51a52ba70ad52fdd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "patch": "@@ -5829,10 +5829,10 @@ build_x_unary_op (location_t loc, enum tree_code code, cp_expr xarg,\n \t  if (DECL_CONSTRUCTOR_P (fn) || DECL_DESTRUCTOR_P (fn))\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (DECL_CONSTRUCTOR_P (fn)\n-\t\t       ? G_(\"taking address of constructor %qD\")\n-\t\t       : G_(\"taking address of destructor %qD\"),\n-\t\t       fn);\n+\t\terror_at (loc, DECL_CONSTRUCTOR_P (fn)\n+\t\t\t  ? G_(\"taking address of constructor %qD\")\n+\t\t\t  : G_(\"taking address of destructor %qD\"),\n+\t\t\t  fn);\n \t      return error_mark_node;\n \t    }\n \t}\n@@ -5847,19 +5847,19 @@ build_x_unary_op (location_t loc, enum tree_code code, cp_expr xarg,\n \t    {\n \t      if (complain & tf_error)\n \t\t{\n-\t\t  error (\"invalid use of %qE to form a \"\n-\t\t\t \"pointer-to-member-function\", xarg.get_value ());\n+\t\t  error_at (loc, \"invalid use of %qE to form a \"\n+\t\t\t    \"pointer-to-member-function\", xarg.get_value ());\n \t\t  if (TREE_CODE (xarg) != OFFSET_REF)\n-\t\t    inform (input_location, \"  a qualified-id is required\");\n+\t\t    inform (loc, \"  a qualified-id is required\");\n \t\t}\n \t      return error_mark_node;\n \t    }\n \t  else\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"parentheses around %qE cannot be used to form a\"\n-\t\t       \" pointer-to-member-function\",\n-\t\t       xarg.get_value ());\n+\t\terror_at (loc, \"parentheses around %qE cannot be used to \"\n+\t\t\t  \"form a pointer-to-member-function\",\n+\t\t\t  xarg.get_value ());\n \t      else\n \t\treturn error_mark_node;\n \t      PTRMEM_OK_P (xarg) = 1;"}, {"sha": "1c478fe2ad08256cba931e21f8181ab3174bf28c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "patch": "@@ -1,3 +1,8 @@\n+2019-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/other/ptrmem8.C: Test locations too.\n+\t* g++.dg/template/dtor6.C: Likewise.\n+\n 2019-10-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90998 - ICE with copy elision in init by ctor and -Wconversion."}, {"sha": "755b0ad8647312f201651baed9b0c544e2978fe5", "filename": "gcc/testsuite/g++.dg/other/ptrmem8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem8.C?ref=6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "patch": "@@ -6,11 +6,11 @@ struct A {};\n template<int> void foo(void (A::* f)())\n {\n   A a;\n-  &(a.*f);\t// { dg-error \"invalid use of\\[^\\n\\]*\\\\.\\\\*\\[^\\n\\]*to form|qualified-id is required\" }\n+  &(a.*f);\t// { dg-error \"3:invalid use of\\[^\\n\\]*\\\\.\\\\*\\[^\\n\\]*to form|qualified-id is required\" }\n }\n \n template<int> void bar(void (A::* f)())\n {\n   A *p;\n-  &(p->*f);\t// { dg-error \"invalid use of\\[^\\n\\]*->\\\\*\\[^\\n\\]*to form|qualified-id is required\" }\n+  &(p->*f);\t// { dg-error \"3:invalid use of\\[^\\n\\]*->\\\\*\\[^\\n\\]*to form|qualified-id is required\" }\n }"}, {"sha": "a3d778a1ea1114a5b3cabb318cd3075b295dc124", "filename": "gcc/testsuite/g++.dg/template/dtor6.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6a27379ca5d770a78ce98100ffdd4a31ba3c73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor6.C?ref=6c6a27379ca5d770a78ce98100ffdd4a31ba3c73", "patch": "@@ -5,12 +5,12 @@ template<int> struct A\n   static int i;\n };\n \n-template<int N> int A<N>::i = { A::~A }; // { dg-error \"non-static member function\" }\n+template<int N> int A<N>::i = { A::~A }; // { dg-error \"36:invalid use of non-static member function\" }\n \n template class A<0>;\n \n struct X { };\n \n-int i1 = X::~X;\t\t\t// { dg-error \"non-static member function\" }\n-int i2 = &X::~X;\t\t// { dg-error \"address of destructor\" }\n-int i3 = &A<0>::~A;\t\t// { dg-error \"address of destructor\" }\n+int i1 = X::~X;\t\t\t// { dg-error \"13:invalid use of non-static member function\" }\n+int i2 = &X::~X;\t\t// { dg-error \"10:taking address of destructor\" }\n+int i3 = &A<0>::~A;\t\t// { dg-error \"10:taking address of destructor\" }"}]}