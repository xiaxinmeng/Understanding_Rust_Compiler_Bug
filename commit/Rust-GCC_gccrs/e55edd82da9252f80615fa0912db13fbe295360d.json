{"sha": "e55edd82da9252f80615fa0912db13fbe295360d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1ZWRkODJkYTkyNTJmODA2MTVmYTA5MTJkYjEzZmJlMjk1MzYwZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T10:43:15Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T10:43:15Z"}, "message": "[doc][13/14] Document AArch64 target attributes and pragmas\n\n\t* doc/extend.texi (AArch64 Function Attributes): New node.\n\t(AArch64 Pragmas): Likewise.\n\nFrom-SVN: r226566", "tree": {"sha": "ca6303e3266ee8d85b8858546ef1c829bc82d463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6303e3266ee8d85b8858546ef1c829bc82d463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e55edd82da9252f80615fa0912db13fbe295360d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55edd82da9252f80615fa0912db13fbe295360d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55edd82da9252f80615fa0912db13fbe295360d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55edd82da9252f80615fa0912db13fbe295360d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0efacb57a40412c029d4b33503f2bad15538072c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efacb57a40412c029d4b33503f2bad15538072c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0efacb57a40412c029d4b33503f2bad15538072c"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "798b11af69a92e1b735a4ee894e49d0c4cf06776", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55edd82da9252f80615fa0912db13fbe295360d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55edd82da9252f80615fa0912db13fbe295360d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e55edd82da9252f80615fa0912db13fbe295360d", "patch": "@@ -1,3 +1,8 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* doc/extend.texi (AArch64 Function Attributes): New node.\n+\t(AArch64 Pragmas): Likewise.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_option_valid_attribute_p):"}, {"sha": "2a47943574e4012e0150060edd9a9d5c257e9123", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55edd82da9252f80615fa0912db13fbe295360d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55edd82da9252f80615fa0912db13fbe295360d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e55edd82da9252f80615fa0912db13fbe295360d", "patch": "@@ -2191,6 +2191,7 @@ GCC plugins may provide their own attributes.\n \n @menu\n * Common Function Attributes::\n+* AArch64 Function Attributes::\n * ARC Function Attributes::\n * ARM Function Attributes::\n * AVR Function Attributes::\n@@ -3322,6 +3323,145 @@ easier to pack regions.\n \n @c This is the end of the target-independent attribute table\n \n+@node AArch64 Function Attributes\n+@subsection AArch64 Function Attributes\n+\n+The following target-specific function attributes are available for the\n+AArch64 target.  For the most part, these options mirror the behavior of\n+similar command-line options (@pxref{AArch64 Options}), but on a\n+per-function basis.\n+\n+@table @code\n+@item general-regs-only\n+@cindex @code{general-regs-only} function attribute, AArch64\n+Indicates that no floating-point or Advanced SIMD registers should be\n+used when generating code for this function.  If the function explicitly\n+uses floating-point code, then the compiler gives an error.  This is\n+the same behavior as that of the command-line option\n+@option{-mgeneral-regs-only}.\n+\n+@item fix-cortex-a53-835769\n+@cindex @code{fix-cortex-a53-835769} function attribute, AArch64\n+Indicates that the workaround for the Cortex-A53 erratum 835769 should be\n+applied to this function.  To explicitly disable the workaround for this\n+function specify the negated form: @code{no-fix-cortex-a53-835769}.\n+This corresponds to the behavior of the command line options\n+@option{-mfix-cortex-a53-835769} and @option{-mno-fix-cortex-a53-835769}.\n+\n+@item cmodel=\n+@cindex @code{cmodel=} function attribute, AArch64\n+Indicates that code should be generated for a particular code model for\n+this function.  The behavior and permissible arguments are the same as\n+for the command line option @option{-mcmodel=}.\n+\n+@item strict-align\n+@cindex @code{strict-align} function attribute, AArch64\n+Indicates that the compiler should not assume that unaligned memory references\n+are handled by the system.  The behavior is the same as for the command-line\n+option @option{-mstrict-align}.\n+\n+@item omit-leaf-frame-pointer\n+@cindex @code{omit-leaf-frame-pointer} function attribute, AArch64\n+Indicates that the frame pointer should be omitted for a leaf function call.\n+To keep the frame pointer, the inverse attribute\n+@code{no-omit-leaf-frame-pointer} can be specified.  These attributes have\n+the same behavior as the command-line options @option{-momit-leaf-frame-pointer}\n+and @option{-mno-omit-leaf-frame-pointer}.\n+\n+@item tls-dialect=\n+@cindex @code{tls-dialect=} function attribute, AArch64\n+Specifies the TLS dialect to use for this function.  The behavior and\n+permissible arguments are the same as for the command-line option\n+@option{-mtls-dialect=}.\n+\n+@item arch=\n+@cindex @code{arch=} function attribute, AArch64\n+Specifies the architecture version and architectural extensions to use\n+for this function.  The behavior and permissible arguments are the same as\n+for the @option{-march=} command-line option.\n+\n+@item tune=\n+@cindex @code{tune=} function attribute, AArch64\n+Specifies the core for which to tune the performance of this function.\n+The behavior and permissible arguments are the same as for the @option{-mtune=}\n+command-line option.\n+\n+@item cpu=\n+@cindex @code{cpu=} function attribute, AArch64\n+Specifies the core for which to tune the performance of this function and also\n+whose architectural features to use.  The behavior and valid arguments are the\n+same as for the @option{-mcpu=} command-line option.\n+\n+@end table\n+\n+The above target attributes can be specified as follows:\n+\n+@smallexample\n+__attribute__((target(\"@var{attr-string}\")))\n+int\n+f (int a)\n+@{\n+  return a + 5;\n+@}\n+@end smallexample\n+\n+where @code{@var{attr-string}} is one of the attribute strings specified above.\n+\n+Additionally, the architectural extension string may be specified on its\n+own.  This can be used to turn on and off particular architectural extensions\n+without having to specify a particular architecture version or core.  Example:\n+\n+@smallexample\n+__attribute__((target(\"+crc+nocrypto\")))\n+int\n+foo (int a)\n+@{\n+  return a + 5;\n+@}\n+@end smallexample\n+\n+In this example @code{target(\"+crc+nocrypto\")} enables the @code{crc}\n+extension and disables the @code{crypto} extension for the function @code{foo}\n+without modifying an existing @option{-march=} or @option{-mcpu} option.\n+\n+Multiple target function attributes can be specified by separating them with\n+a comma.  For example:\n+@smallexample\n+__attribute__((target(\"arch=armv8-a+crc+crypto,tune=cortex-a53\")))\n+int\n+foo (int a)\n+@{\n+  return a + 5;\n+@}\n+@end smallexample\n+\n+is valid and compiles function @code{foo} for ARMv8-A with @code{crc}\n+and @code{crypto} extensions and tunes it for @code{cortex-a53}.\n+\n+@subsubsection Inlining rules\n+Specifying target attributes on individual functions or performing link-time\n+optimization across translation units compiled with different target options\n+can affect function inlining rules:\n+\n+In particular, a caller function can inline a callee function only if the\n+architectural features available to the callee are a subset of the features\n+available to the caller.\n+For example: A function @code{foo} compiled with @option{-march=armv8-a+crc},\n+or tagged with the equivalent @code{arch=armv8-a+crc} attribute,\n+can inline a function @code{bar} compiled with @option{-march=armv8-a+nocrc}\n+because the all the architectural features that function @code{bar} requires\n+are available to function @code{foo}.  Conversely, function @code{bar} cannot\n+inline function @code{foo}.\n+\n+Additionally inlining a function compiled with @option{-mstrict-align} into a\n+function compiled without @code{-mstrict-align} is not allowed.\n+However, inlining a function compiled without @option{-mstrict-align} into a\n+function compiled with @option{-mstrict-align} is allowed.\n+\n+Note that CPU tuning options and attributes such as the @option{-mcpu=},\n+@option{-mtune=} do not inhibit inlining unless the CPU specified by the\n+@option{-mcpu=} option or the @code{cpu=} attribute conflicts with the\n+architectural feature rules specified above.\n \n @node ARC Function Attributes\n @subsection ARC Function Attributes\n@@ -18170,6 +18310,7 @@ we do not recommend the use of pragmas; @xref{Function Attributes},\n for further explanation.\n \n @menu\n+* AArch64 Pragmas::\n * ARM Pragmas::\n * M32C Pragmas::\n * MeP Pragmas::\n@@ -18186,6 +18327,19 @@ for further explanation.\n * Loop-Specific Pragmas::\n @end menu\n \n+@node AArch64 Pragmas\n+@subsection AArch64 Pragmas\n+\n+The pragmas defined by the AArch64 target correspond to the AArch64\n+target function attributes.  They can be specified as below:\n+@smallexample\n+#pragma GCC target(\"string\")\n+@end smallexample\n+\n+where @code{@var{string}} can be any string accepted as an AArch64 target\n+attribute.  @xref{AArch64 Function Attributes}, for more details\n+on the permissible values of @code{string}.\n+\n @node ARM Pragmas\n @subsection ARM Pragmas\n "}]}