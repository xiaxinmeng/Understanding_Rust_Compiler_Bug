{"sha": "3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QyZGVmMjNhNWJjYzQ0NWE0ZGM4ZjM0ZDkwYzBiZGU2MzliMWEwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-05-13T08:09:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-05-13T08:09:01Z"}, "message": "re PR target/66112 (__builtin_mul_overflow for int16_t emits poor code)\n\n\tPR target/66112\n\t* config/i386/i386.md (mulv<mode>4, umulv<mode>4, *umulv<mode>4):\n\tUse SWI248 iterator instead of SWI.\n\t(*mulv<mode>4_1): Use SWI48 instead of SWI.  Simplify output template.\n\tUse eq_attr \"alternative\" \"0\" instead of match_test in\n\tlength_immediate attribute computation.\n\t(*mulvhi4, *mulvhi4_1): New define_insns.\n\n\t* gcc.target/i386/pr66112-2.c: New test.\n\nFrom-SVN: r223116", "tree": {"sha": "3def4481fc03fdc1cd9a53992f5c5c648076e50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3def4481fc03fdc1cd9a53992f5c5c648076e50e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1ee2e626ea59d8ba14a1d2f36621a2fe525320a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ee2e626ea59d8ba14a1d2f36621a2fe525320a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ee2e626ea59d8ba14a1d2f36621a2fe525320a"}], "stats": {"total": 138, "additions": 114, "deletions": 24}, "files": [{"sha": "1906845ed58e024ac6561f02adbc2c39afb4fce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "patch": "@@ -1,5 +1,13 @@\n 2015-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/66112\n+\t* config/i386/i386.md (mulv<mode>4, umulv<mode>4, *umulv<mode>4):\n+\tUse SWI248 iterator instead of SWI.\n+\t(*mulv<mode>4_1): Use SWI48 instead of SWI.  Simplify output template.\n+\tUse eq_attr \"alternative\" \"0\" instead of match_test in\n+\tlength_immediate attribute computation.\n+\t(*mulvhi4, *mulvhi4_1): New define_insns.\n+\n \tPR target/66112\n \t* internal-fn.c (get_min_precision): Use UNSIGNED instead of\n \tSIGNED to get precision of non-negative value."}, {"sha": "835e890fac1e5234c9441ba047f2f00b246b2ea5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 74, "deletions": 24, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "patch": "@@ -6602,14 +6602,14 @@\n   [(parallel [(set (reg:CCO FLAGS_REG)\n \t\t   (eq:CCO (mult:<DWI>\n \t\t\t      (sign_extend:<DWI>\n-\t\t\t\t (match_operand:SWI48 1 \"register_operand\"))\n+\t\t\t\t (match_operand:SWI248 1 \"register_operand\"))\n \t\t\t      (match_dup 4))\n \t\t\t   (sign_extend:<DWI>\n-\t\t\t      (mult:SWI48 (match_dup 1)\n-\t\t\t\t\t  (match_operand:SWI48 2\n-\t\t\t\t\t     \"<general_operand>\")))))\n-\t      (set (match_operand:SWI48 0 \"register_operand\")\n-\t\t   (mult:SWI48 (match_dup 1) (match_dup 2)))])\n+\t\t\t      (mult:SWI248 (match_dup 1)\n+\t\t\t\t\t   (match_operand:SWI248 2\n+\t\t\t\t\t      \"<general_operand>\")))))\n+\t      (set (match_operand:SWI248 0 \"register_operand\")\n+\t\t   (mult:SWI248 (match_dup 1) (match_dup 2)))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n@@ -6665,16 +6665,14 @@\n \t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"K,i\"))\n \t\t(sign_extend:<DWI>\n \t\t   (mult:SWI48 (match_dup 1)\n-\t\t\t       (match_operand:SWI 2 \"x86_64_immediate_operand\"\n-\t\t\t\t\t\t    \"K,<i>\")))))\n+\t\t\t       (match_operand:SWI48 2\n+\t\t\t\t  \"x86_64_immediate_operand\" \"K,<i>\")))))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n \t(mult:SWI48 (match_dup 1) (match_dup 2)))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\n    && CONST_INT_P (operands[2])\n    && INTVAL (operands[2]) == INTVAL (operands[3])\"\n-  \"@\n-   imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\n-   imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"imul\")\n    (set (attr \"athlon_decode\")\n \t(cond [(eq_attr \"cpu\" \"athlon\")\n@@ -6689,26 +6687,78 @@\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"length_immediate\")\n-\t(cond [(match_test \"IN_RANGE (INTVAL (operands[2]), -128, 127)\")\n+\t(cond [(eq_attr \"alternative\" \"0\")\n \t\t  (const_string \"1\")\n \t       (match_test \"<MODE_SIZE> == 8\")\n \t\t  (const_string \"4\")]\n \t      (const_string \"<MODE_SIZE>\")))])\n \n+(define_insn \"*mulvhi4\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO (mult:SI\n+\t\t   (sign_extend:SI\n+\t\t      (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t   (sign_extend:SI\n+\t\t      (match_operand:HI 2 \"general_operand\" \"mr\")))\n+\t\t(sign_extend:SI\n+\t\t   (mult:HI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (match_dup 1) (match_dup 2)))]\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"imul{w}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"athlon_decode\" \"vector\")\n+   (set_attr \"amdfam10_decode\" \"direct\")\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"*mulvhi4_1\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO (mult:SI\n+\t\t   (sign_extend:SI\n+\t\t      (match_operand:HI 1 \"nonimmediate_operand\" \"rm,rm\"))\n+\t\t   (match_operand:SI 3 \"const_int_operand\" \"K,i\"))\n+\t\t(sign_extend:SI\n+\t\t   (mult:HI (match_dup 1)\n+\t\t\t       (match_operand:HI 2\n+\t\t\t\t  \"x86_64_immediate_operand\" \"K,n\")))))\n+   (set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(mult:HI (match_dup 1) (match_dup 2)))]\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\n+   && CONST_INT_P (operands[2])\n+   && INTVAL (operands[2]) == INTVAL (operands[3])\"\n+  \"imul{w}\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"prefix_0f\" \"0\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"cpu\" \"athlon\")\n+\t\t  (const_string \"vector\")\n+\t       (eq_attr \"alternative\" \"1\")\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n+   (set_attr \"amdfam10_decode\" \"vector\")\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"mode\" \"HI\")\n+   (set (attr \"length_immediate\")\n+\t(cond [(eq_attr \"alternative\" \"0\")\n+\t\t  (const_string \"1\")]\n+\t      (const_string \"2\")))])\n+\n (define_expand \"umulv<mode>4\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n \t\t   (eq:CCO (mult:<DWI>\n \t\t\t      (zero_extend:<DWI>\n-\t\t\t\t (match_operand:SWI48 1\n+\t\t\t\t (match_operand:SWI248 1\n \t\t\t\t\t\t      \"nonimmediate_operand\"))\n \t\t\t      (zero_extend:<DWI>\n-\t\t\t\t (match_operand:SWI48 2\n+\t\t\t\t (match_operand:SWI248 2\n \t\t\t\t\t\t      \"nonimmediate_operand\")))\n \t\t\t   (zero_extend:<DWI>\n-\t\t\t      (mult:SWI48 (match_dup 1) (match_dup 2)))))\n-\t      (set (match_operand:SWI48 0 \"register_operand\")\n-\t\t   (mult:SWI48 (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_scratch:SWI48 4))])\n+\t\t\t      (mult:SWI248 (match_dup 1) (match_dup 2)))))\n+\t      (set (match_operand:SWI248 0 \"register_operand\")\n+\t\t   (mult:SWI248 (match_dup 1) (match_dup 2)))\n+\t      (clobber (match_scratch:SWI248 4))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n@@ -6723,14 +6773,14 @@\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (mult:<DWI>\n \t\t   (zero_extend:<DWI>\n-\t\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t      (match_operand:SWI248 1 \"nonimmediate_operand\" \"%0\"))\n \t\t   (zero_extend:<DWI>\n-\t\t      (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\")))\n+\t\t      (match_operand:SWI248 2 \"nonimmediate_operand\" \"rm\")))\n \t\t(zero_extend:<DWI>\n-\t\t   (mult:SWI48 (match_dup 1) (match_dup 2)))))\n-   (set (match_operand:SWI48 0 \"register_operand\" \"=a\")\n-\t(mult:SWI48 (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SWI48 3 \"=d\"))]\n+\t\t   (mult:SWI248 (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n+\t(mult:SWI248 (match_dup 1) (match_dup 2)))\n+   (clobber (match_scratch:SWI248 3 \"=d\"))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"mul{<imodesuffix>}\\t%2\"\n   [(set_attr \"type\" \"imul\")"}, {"sha": "6e394e79fa85105b2901d740c9b5737a9a4f325a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "patch": "@@ -1,5 +1,8 @@\n 2015-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/66112\n+\t* gcc.target/i386/pr66112-2.c: New test.\n+\n \tPR target/66112\n \t* gcc.target/i386/pr66112-1.c: New test.\n "}, {"sha": "7fc18811638adadb447d3f5e1b9a520b63a2ec21", "filename": "gcc/testsuite/gcc.target/i386/pr66112-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66112-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2def23a5bcc445a4dc8f34d90c0bde639b1a05/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66112-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66112-2.c?ref=3d2def23a5bcc445a4dc8f34d90c0bde639b1a05", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/66112 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned short int\n+foo (int a, int b)\n+{\n+  unsigned short int res;\n+  a &= 0xffff;\n+  b &= 0xffff;\n+  if (__builtin_mul_overflow (a, b, &res))\n+    res = 0x123;\n+  return res;\n+}\n+\n+short int\n+bar (int a, int b)\n+{\n+  short int res;\n+  a = (short int) a;\n+  b = (short int) b;\n+  if (__builtin_mul_overflow (a, b, &res))\n+    res = 0x123;\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-times \"jn?o\\[ \\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"mulw\\[ \\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"imulw\\[ \\t\\]\" 1 } } */"}]}