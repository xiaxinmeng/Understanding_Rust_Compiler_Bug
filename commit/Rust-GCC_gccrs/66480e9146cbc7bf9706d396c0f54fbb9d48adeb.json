{"sha": "66480e9146cbc7bf9706d396c0f54fbb9d48adeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0ODBlOTE0NmNiYzdiZjk3MDZkMzk2YzBmNTRmYmI5ZDQ4YWRlYg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-01-11T10:10:12Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-01-11T10:10:12Z"}, "message": "s390.c (struct s390_frame_layout): Remove save_backchain_p.\n\n2005-01-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (struct s390_frame_layout): Remove\n\tsave_backchain_p.\n\t(s390_frame_info, s390_emit_prologue): Replace occurrences of\n\tsave_backchain_p with TARGET_BACKCHAIN.\n\nFrom-SVN: r93181", "tree": {"sha": "12186637cebcd738a45cf940919b20bf714e29eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12186637cebcd738a45cf940919b20bf714e29eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66480e9146cbc7bf9706d396c0f54fbb9d48adeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66480e9146cbc7bf9706d396c0f54fbb9d48adeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66480e9146cbc7bf9706d396c0f54fbb9d48adeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66480e9146cbc7bf9706d396c0f54fbb9d48adeb/comments", "author": null, "committer": null, "parents": [{"sha": "bfc45551d5ace42f4b6133c05f010cf5eb5cb9f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc45551d5ace42f4b6133c05f010cf5eb5cb9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc45551d5ace42f4b6133c05f010cf5eb5cb9f3"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "ece44ffe67ae33263955363a397e3c04993dd9a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66480e9146cbc7bf9706d396c0f54fbb9d48adeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66480e9146cbc7bf9706d396c0f54fbb9d48adeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66480e9146cbc7bf9706d396c0f54fbb9d48adeb", "patch": "@@ -1,3 +1,10 @@\n+2005-01-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (struct s390_frame_layout): Remove \n+\tsave_backchain_p.\n+\t(s390_frame_info, s390_emit_prologue): Replace occurrences of\n+\tsave_backchain_p with TARGET_BACKCHAIN.\n+\n 2005-01-11  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/18916"}, {"sha": "cd174c77006e8c12d465775eda21bb8cd770e95c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66480e9146cbc7bf9706d396c0f54fbb9d48adeb/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66480e9146cbc7bf9706d396c0f54fbb9d48adeb/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=66480e9146cbc7bf9706d396c0f54fbb9d48adeb", "patch": "@@ -333,9 +333,6 @@ struct s390_frame_layout GTY (())\n   /* Set if return address needs to be saved.  */\n   bool save_return_addr_p;\n \n-  /* Set if backchain needs to be saved.  */\n-  bool save_backchain_p;\n-\n   /* Size of stack frame.  */\n   HOST_WIDE_INT frame_size;\n };\n@@ -6488,8 +6485,6 @@ s390_frame_info (void)\n   if (!TARGET_64BIT && cfun_frame_layout.frame_size > 0x7fff0000)\n     fatal_error (\"Total size of local variables exceeds architecture limit.\");\n   \n-  cfun_frame_layout.save_backchain_p = TARGET_BACKCHAIN;\n-\n   if (!TARGET_PACKED_STACK)\n     {\n       cfun_frame_layout.backchain_offset = 0;\n@@ -6559,8 +6554,8 @@ s390_frame_info (void)\n \t\t\t\t     + cfun_frame_layout.high_fprs * 8);\n   else\n     {\n-      cfun_frame_layout.frame_size += (cfun_frame_layout.save_backchain_p\n-\t\t\t\t       * UNITS_PER_WORD);\n+      if (TARGET_BACKCHAIN)\n+\tcfun_frame_layout.frame_size += UNITS_PER_WORD;\n \n       /* No alignment trouble here because f8-f15 are only saved under \n \t 64 bit.  */\n@@ -7031,7 +7026,7 @@ s390_emit_prologue (void)\n \twarning (\"%qs uses dynamic stack allocation\", current_function_name ());\n \n       /* Save incoming stack pointer into temp reg.  */\n-      if (cfun_frame_layout.save_backchain_p || next_fpr)\n+      if (TARGET_BACKCHAIN || next_fpr)\n \tinsn = emit_insn (gen_move_insn (temp_reg, stack_pointer_rtx));\n \n       /* Subtract frame size from stack pointer.  */\n@@ -7062,7 +7057,7 @@ s390_emit_prologue (void)\n \n       /* Set backchain.  */\n \n-      if (cfun_frame_layout.save_backchain_p)\n+      if (TARGET_BACKCHAIN)\n \t{\n \t  if (cfun_frame_layout.backchain_offset)\n \t    addr = gen_rtx_MEM (Pmode, \n@@ -7078,7 +7073,7 @@ s390_emit_prologue (void)\n \t we need to make sure the backchain pointer is set up\n \t before any possibly trapping memory access.  */\n \n-      if (cfun_frame_layout.save_backchain_p && flag_non_call_exceptions)\n+      if (TARGET_BACKCHAIN && flag_non_call_exceptions)\n \t{\n \t  addr = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode));\n \t  emit_insn (gen_rtx_CLOBBER (VOIDmode, addr));"}]}