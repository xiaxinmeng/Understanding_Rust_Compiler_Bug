{"sha": "091df64952e4922ad4160cd7ea0e76684b3ad0ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxZGY2NDk1MmU0OTIyYWQ0MTYwY2Q3ZWEwZTc2Njg0YjNhZDBlZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:59:20Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:59:20Z"}, "message": "[arm] Use arm_active_target for most FP feature tests\n\nNow that the isa feature bits are all available in arm_active_target\nwe can use that for most of the feature tests that are needed.\n\n\t* arm.h (TARGET_VFPD32): Use arm_active_target.\n\t(TARGET_VFP3): Likewise.\n\t(TARGET_VFP5): Likewise.\n\t(TARGET_VFP_SINGLE): Likewise.\n\t(TARGET_VFP_DOUBLE): Likewise.\n\t(TARGET_NEON_FP16): Likewise.\n\t(TARGET_FP16): Likewise.\n\t(TARGET_FMA): Likewise.\n\t(TARGET_FPU_ARMV8): Likewise.\n\t(TARGET_CRYPTO): Likewise.\n\t(TARGET_NEON): Likewise.\n\t(TARGET_FPU_FEATURES): Delete.\n\t* arm.c (arm_option_check_internal): Check for iwmmxt conflict with\n\tNeon using arm_active_target.\n\nFrom-SVN: r243712", "tree": {"sha": "6eeaa49caa894d009dd67226f3da9aee2f1cf190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eeaa49caa894d009dd67226f3da9aee2f1cf190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091df64952e4922ad4160cd7ea0e76684b3ad0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091df64952e4922ad4160cd7ea0e76684b3ad0ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091df64952e4922ad4160cd7ea0e76684b3ad0ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091df64952e4922ad4160cd7ea0e76684b3ad0ee/comments", "author": null, "committer": null, "parents": [{"sha": "8990ddcdbc634df731387515e0f17b8b825b6300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8990ddcdbc634df731387515e0f17b8b825b6300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8990ddcdbc634df731387515e0f17b8b825b6300"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "cd6be7d578c964185b7ffbf1a43f819e22b4ea1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091df64952e4922ad4160cd7ea0e76684b3ad0ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091df64952e4922ad4160cd7ea0e76684b3ad0ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=091df64952e4922ad4160cd7ea0e76684b3ad0ee", "patch": "@@ -1,3 +1,20 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (TARGET_VFPD32): Use arm_active_target.\n+\t(TARGET_VFP3): Likewise.\n+\t(TARGET_VFP5): Likewise.\n+\t(TARGET_VFP_SINGLE): Likewise.\n+\t(TARGET_VFP_DOUBLE): Likewise.\n+\t(TARGET_NEON_FP16): Likewise.\n+\t(TARGET_FP16): Likewise.\n+\t(TARGET_FMA): Likewise.\n+\t(TARGET_FPU_ARMV8): Likewise.\n+\t(TARGET_CRYPTO): Likewise.\n+\t(TARGET_NEON): Likewise.\n+\t(TARGET_FPU_FEATURES): Delete.\n+\t* arm.c (arm_option_check_internal): Check for iwmmxt conflict with\n+\tNeon using arm_active_target.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.h (TARGET_FPU_NAME): Delete."}, {"sha": "676c78bbb54637cd16f0ec5e551cabcfac35c5cf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091df64952e4922ad4160cd7ea0e76684b3ad0ee/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091df64952e4922ad4160cd7ea0e76684b3ad0ee/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=091df64952e4922ad4160cd7ea0e76684b3ad0ee", "patch": "@@ -2815,11 +2815,10 @@ static void\n arm_option_check_internal (struct gcc_options *opts)\n {\n   int flags = opts->x_target_flags;\n-  const struct arm_fpu_desc *fpu_desc = &all_fpus[opts->x_arm_fpu_index];\n \n   /* iWMMXt and NEON are incompatible.  */\n   if (TARGET_IWMMXT\n-      && ARM_FPU_FSET_HAS (fpu_desc->features, FPU_FL_NEON))\n+      && bitmap_bit_p (arm_active_target.isa, isa_bit_neon))\n     error (\"iWMMXt and NEON are incompatible\");\n \n   /* Make sure that the processor choice does not conflict with any of the"}, {"sha": "17f030b797a0822b4267f837132150623d015353", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091df64952e4922ad4160cd7ea0e76684b3ad0ee/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091df64952e4922ad4160cd7ea0e76684b3ad0ee/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=091df64952e4922ad4160cd7ea0e76684b3ad0ee", "patch": "@@ -161,51 +161,50 @@ extern tree arm_fp16_type_node;\n    to be more careful with TARGET_NEON as noted below.  */\n \n /* FPU is has the full VFPv3/NEON register file of 32 D registers.  */\n-#define TARGET_VFPD32 (TARGET_FPU_FEATURES & FPU_FL_D32)\n+#define TARGET_VFPD32 (bitmap_bit_p (arm_active_target.isa, isa_bit_fp_d32))\n \n /* FPU supports VFPv3 instructions.  */\n-#define TARGET_VFP3 (TARGET_FPU_FEATURES & FPU_FL_VFPv3)\n+#define TARGET_VFP3 (bitmap_bit_p (arm_active_target.isa, isa_bit_VFPv3))\n \n /* FPU supports FPv5 instructions.  */\n-#define TARGET_VFP5 (TARGET_FPU_FEATURES & FPU_FL_VFPv5)\n+#define TARGET_VFP5 (bitmap_bit_p (arm_active_target.isa, isa_bit_FPv5))\n \n /* FPU only supports VFP single-precision instructions.  */\n-#define TARGET_VFP_SINGLE ((TARGET_FPU_FEATURES & FPU_FL_DBL) == 0)\n+#define TARGET_VFP_SINGLE (!TARGET_VFP_DOUBLE)\n \n /* FPU supports VFP double-precision instructions.  */\n-#define TARGET_VFP_DOUBLE (TARGET_FPU_FEATURES & FPU_FL_DBL)\n+#define TARGET_VFP_DOUBLE (bitmap_bit_p (arm_active_target.isa, isa_bit_fp_dbl))\n \n /* FPU supports half-precision floating-point with NEON element load/store.  */\n #define TARGET_NEON_FP16\t\t\t\t\t\\\n-  (ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_NEON)\t\t\\\n-   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_FP16))\n+  (bitmap_bit_p (arm_active_target.isa, isa_bit_neon)\t\t\\\n+   && bitmap_bit_p (arm_active_target.isa, isa_bit_fp16conv))\n \n-/* FPU supports VFP half-precision floating-point.  */\n-#define TARGET_FP16\t\t\t\t\t\t\t\\\n-  (ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_FP16))\n+/* FPU supports VFP half-precision floating-point conversions.  */\n+#define TARGET_FP16 (bitmap_bit_p (arm_active_target.isa, isa_bit_fp16conv))\n \n /* FPU supports converting between HFmode and DFmode in a single hardware\n    step.  */\n #define TARGET_FP16_TO_DOUBLE\t\t\t\t\t\t\\\n   (TARGET_HARD_FLOAT && (TARGET_FP16 && TARGET_VFP5))\n \n /* FPU supports fused-multiply-add operations.  */\n-#define TARGET_FMA (TARGET_FPU_FEATURES & FPU_FL_VFPv4)\n+#define TARGET_FMA (bitmap_bit_p (arm_active_target.isa, isa_bit_VFPv4))\n \n /* FPU is ARMv8 compatible.  */\n-#define TARGET_FPU_ARMV8 (TARGET_FPU_FEATURES & FPU_FL_ARMv8)\n+#define TARGET_FPU_ARMV8\t\t\t\t\t\\\n+  (bitmap_bit_p (arm_active_target.isa, isa_bit_FP_ARMv8))\n \n /* FPU supports Crypto extensions.  */\n-#define TARGET_CRYPTO\t\t\t\t\t\t\t\\\n-  (ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_CRYPTO))\n+#define TARGET_CRYPTO (bitmap_bit_p (arm_active_target.isa, isa_bit_crypto))\n \n /* FPU supports Neon instructions.  The setting of this macro gets\n    revealed via __ARM_NEON__ so we add extra guards upon TARGET_32BIT\n    and TARGET_HARD_FLOAT to ensure that NEON instructions are\n    available.  */\n #define TARGET_NEON\t\t\t\t\t\t\t\\\n   (TARGET_32BIT && TARGET_HARD_FLOAT\t\t\t\t\t\\\n-   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_NEON))\n+   && bitmap_bit_p (arm_active_target.isa, isa_bit_neon))\n \n /* FPU supports ARMv8.1 Adv.SIMD extensions.  */\n #define TARGET_NEON_RDMA (TARGET_NEON && arm_arch8_1)\n@@ -367,10 +366,6 @@ extern const struct arm_fpu_desc\n   arm_fpu_feature_set features;\n } all_fpus[];\n \n-/* Accessors.  */\n-\n-#define TARGET_FPU_FEATURES (all_fpus[arm_fpu_index].features)\n-\n /* Which floating point hardware to schedule for.  */\n extern int arm_fpu_attr;\n "}]}