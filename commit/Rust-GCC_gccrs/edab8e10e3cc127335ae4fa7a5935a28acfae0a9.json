{"sha": "edab8e10e3cc127335ae4fa7a5935a28acfae0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhYjhlMTBlM2NjMTI3MzM1YWU0ZmE3YTU5MzVhMjhhY2ZhZTBhOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T21:42:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T21:42:01Z"}, "message": "poly_int: vect_permute_load/store_chain\n\nThe GET_MODE_NUNITS patch made vect_grouped_store_supported and\nvect_grouped_load_supported check for a constant number of elements,\nso vect_permute_store_chain and vect_permute_load_chain can assert\nfor that.  This patch adds commentary to that effect; the actual\nasserts will be added by a later, more mechanical, patch.\n\nThe patch also reorganises the function so that the asserts\nare linked specifically to code that builds permute vectors\nelement-by-element.  This allows a later patch to add support\nfor some variable-length permutes.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_permute_store_chain): Reorganize\n\tso that both the length == 3 and length != 3 cases set up their\n\town permute vectors.  Add comments explaining why we know the\n\tnumber of elements is constant.\n\t(vect_permute_load_chain): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256196", "tree": {"sha": "35ae4ab83e436055398c570a8589b3316559003b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ae4ab83e436055398c570a8589b3316559003b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edab8e10e3cc127335ae4fa7a5935a28acfae0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edab8e10e3cc127335ae4fa7a5935a28acfae0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edab8e10e3cc127335ae4fa7a5935a28acfae0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edab8e10e3cc127335ae4fa7a5935a28acfae0a9/comments", "author": null, "committer": null, "parents": [{"sha": "7b777afa955ad765500dfd53d6da990c84067197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b777afa955ad765500dfd53d6da990c84067197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b777afa955ad765500dfd53d6da990c84067197"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "f17884d3f9772c2807b9e81b68ec18aa6047907e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edab8e10e3cc127335ae4fa7a5935a28acfae0a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edab8e10e3cc127335ae4fa7a5935a28acfae0a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edab8e10e3cc127335ae4fa7a5935a28acfae0a9", "patch": "@@ -1,3 +1,13 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_permute_store_chain): Reorganize\n+\tso that both the length == 3 and length != 3 cases set up their\n+\town permute vectors.  Add comments explaining why we know the\n+\tnumber of elements is constant.\n+\t(vect_permute_load_chain): Likewise.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "2fad8909810fbefa772942005c4d8c5b1abed322", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edab8e10e3cc127335ae4fa7a5935a28acfae0a9/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edab8e10e3cc127335ae4fa7a5935a28acfae0a9/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=edab8e10e3cc127335ae4fa7a5935a28acfae0a9", "patch": "@@ -4763,15 +4763,16 @@ vect_permute_store_chain (vec<tree> dr_chain,\n   tree perm_mask_low, perm_mask_high;\n   tree data_ref;\n   tree perm3_mask_low, perm3_mask_high;\n-  unsigned int i, n, log_length = exact_log2 (length);\n-  unsigned int j, nelt = TYPE_VECTOR_SUBPARTS (vectype);\n+  unsigned int i, j, n, log_length = exact_log2 (length);\n \n   result_chain->quick_grow (length);\n   memcpy (result_chain->address (), dr_chain.address (),\n \t  length * sizeof (tree));\n \n   if (length == 3)\n     {\n+      /* vect_grouped_store_supported ensures that this is constant.  */\n+      unsigned int nelt = TYPE_VECTOR_SUBPARTS (vectype);\n       unsigned int j0 = 0, j1 = 0, j2 = 0;\n \n       vec_perm_builder sel (nelt, nelt, 1);\n@@ -4838,6 +4839,7 @@ vect_permute_store_chain (vec<tree> dr_chain,\n       gcc_assert (pow2p_hwi (length));\n \n       /* The encoding has 2 interleaved stepped patterns.  */\n+      unsigned int nelt = TYPE_VECTOR_SUBPARTS (vectype);\n       vec_perm_builder sel (nelt, 2, 3);\n       sel.quick_grow (6);\n       for (i = 0; i < 3; i++)\n@@ -5375,14 +5377,15 @@ vect_permute_load_chain (vec<tree> dr_chain,\n   gimple *perm_stmt;\n   tree vectype = STMT_VINFO_VECTYPE (vinfo_for_stmt (stmt));\n   unsigned int i, j, log_length = exact_log2 (length);\n-  unsigned nelt = TYPE_VECTOR_SUBPARTS (vectype);\n \n   result_chain->quick_grow (length);\n   memcpy (result_chain->address (), dr_chain.address (),\n \t  length * sizeof (tree));\n \n   if (length == 3)\n     {\n+      /* vect_grouped_load_supported ensures that this is constant.  */\n+      unsigned nelt = TYPE_VECTOR_SUBPARTS (vectype);\n       unsigned int k;\n \n       vec_perm_builder sel (nelt, nelt, 1);\n@@ -5435,6 +5438,7 @@ vect_permute_load_chain (vec<tree> dr_chain,\n       gcc_assert (pow2p_hwi (length));\n \n       /* The encoding has a single stepped pattern.  */\n+      unsigned int nelt = TYPE_VECTOR_SUBPARTS (vectype);\n       vec_perm_builder sel (nelt, 1, 3);\n       sel.quick_grow (3);\n       for (i = 0; i < 3; ++i)"}]}