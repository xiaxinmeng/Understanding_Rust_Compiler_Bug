{"sha": "3c28d6a3a018e9acb7af1422d6263661f69d5f94", "node_id": "C_kwDOANBUbNoAKDNjMjhkNmEzYTAxOGU5YWNiN2FmMTQyMmQ2MjYzNjYxZjY5ZDVmOTQ", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-11-05T18:32:17Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-11-05T18:47:16Z"}, "message": "d: Add support for vector comparison operators\n\nThe front-end added semantic support to permit comparing two vector\nexpressions.  This removes the restriction in the code generator, as\nwell as the intrisics that previously exposed the same operation.\n\ngcc/d/ChangeLog:\n\n\t* d-target.cc (Target::isVectorOpSupported): Remove cases for\n\tcomparison operators.\n\t* intrinsics.cc (maybe_set_intrinsic): Remove cases for vector\n\tcomparison intrinsics.\n\t(maybe_warn_intrinsic_mismatch): Likewise.\n\t(expand_intrinsic_vec_cond): Remove.\n\t(maybe_expand_intrinsic): Remove cases for vector comparison\n\tintrinsics.\n\t* intrinsics.def (INTRINSIC_EQUALMASK): Remove.\n\t(INTRINSIC_NOTEQUALMASK): Remove.\n\t(INTRINSIC_GREATERMASK): Remove.\n\t(INTRINSIC_GREATEREQUALMASK): Remove.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/gcc/simd.d (equalMask): Implement using generics.\n\t(notEqualMask): Likewise.\n\t(greaterMask): Likewise.\n\t(greaterOrEqualMask): Likewise.\n\t(notMask): Likewise.\n\t(andAndMask): Likewise.\n\t(orOrMask): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/Wbuiltin_declaration_mismatch2.d: Remove comparision tests.\n\t* gdc.dg/simd2a.d: Update comparison tests.\n\t* gdc.dg/simd2b.d: Likewise.\n\t* gdc.dg/simd2c.d: Likewise.\n\t* gdc.dg/simd2d.d: Likewise.\n\t* gdc.dg/simd2e.d: Likewise.\n\t* gdc.dg/simd2f.d: Likewise.\n\t* gdc.dg/simd2g.d: Likewise.\n\t* gdc.dg/simd2h.d: Likewise.\n\t* gdc.dg/simd2i.d: Likewise.\n\t* gdc.dg/simd2j.d: Likewise.", "tree": {"sha": "dbf38ada050ca3502eacc0ae91c0a729b2a91c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbf38ada050ca3502eacc0ae91c0a729b2a91c14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c28d6a3a018e9acb7af1422d6263661f69d5f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c28d6a3a018e9acb7af1422d6263661f69d5f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c28d6a3a018e9acb7af1422d6263661f69d5f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c28d6a3a018e9acb7af1422d6263661f69d5f94/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad2167bbac8ae83b1e91305b105ab5287bdac55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad2167bbac8ae83b1e91305b105ab5287bdac55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad2167bbac8ae83b1e91305b105ab5287bdac55"}], "stats": {"total": 265, "additions": 79, "deletions": 186}, "files": [{"sha": "d3244673f6202b3fc5a9cbeca880332025202427", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -323,12 +323,6 @@ Target::isVectorOpSupported (Type *type, EXP op, Type *)\n       /* Logical operators must have a result type of bool.  */\n       return false;\n \n-    case EXP::lessOrEqual:\n-    case EXP::lessThan:\n-    case EXP::greaterOrEqual:\n-    case EXP::greaterThan:\n-    case EXP::equal:\n-    case EXP::notEqual:\n     case EXP::identity:\n     case EXP::notIdentity:\n       /* Comparison operators must have a result type of bool.  */"}, {"sha": "6d9f74a6d7a9938970d1e920757347a8e4da575c", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -170,10 +170,6 @@ maybe_set_intrinsic (FuncDeclaration *decl)\n \t    case INTRINSIC_SHUFFLEVECTOR:\n \t    case INTRINSIC_CONVERTVECTOR:\n \t    case INTRINSIC_BLENDVECTOR:\n-\t    case INTRINSIC_EQUALMASK:\n-\t    case INTRINSIC_NOTEQUALMASK:\n-\t    case INTRINSIC_GREATERMASK:\n-\t    case INTRINSIC_GREATEREQUALMASK:\n \t    case INTRINSIC_VLOAD8:\n \t    case INTRINSIC_VLOAD16:\n \t    case INTRINSIC_VLOAD32:\n@@ -487,29 +483,6 @@ maybe_warn_intrinsic_mismatch (tree function, tree callexp)\n \n \treturn false;\n       }\n-\n-    case INTRINSIC_EQUALMASK:\n-    case INTRINSIC_NOTEQUALMASK:\n-    case INTRINSIC_GREATERMASK:\n-    case INTRINSIC_GREATEREQUALMASK:\n-      {\n-\t/* Expects the signature:\n-\t   vector(T) equalMask(vector(T), vector(T));\n-\t   vector(T) notEqualMask(vector(T), vector(T));\n-\t   vector(T) greaterMask(vector(T), vector(T));\n-\t   vector(T) greateOrEqualMask(vector(T), vector(T));  */\n-\tgcc_assert (call_expr_nargs (callexp) == 2);\n-\n-\ttree vec0 = TREE_TYPE (CALL_EXPR_ARG (callexp, 0));\n-\ttree vec1 = TREE_TYPE (CALL_EXPR_ARG (callexp, 1));\n-\tif (!VECTOR_TYPE_P (TREE_TYPE (callexp))\n-\t    || !VECTOR_TYPE_P (vec0)\n-\t    || !VECTOR_TYPE_P (vec1)\n-\t    || TYPE_MAIN_VARIANT (vec0) != TYPE_MAIN_VARIANT (vec1))\n-\t  return warn_mismatched_return_type (callexp, \"__vector(T)\");\n-\n-\treturn false;\n-      }\n     }\n \n   /* Generic mismatch warning if it hasn't already been handled.  */\n@@ -1072,32 +1045,6 @@ expand_volatile_store (tree callexp)\n   return modify_expr (result, value);\n }\n \n-/* Expand a front-end intrinsic call to a vector comparison intrinsic, which is\n-   either a call to equalMask(), notEqualMask(), greaterMask(), or\n-   greaterOrEqualMask().  These intrinsics take two arguments, the signature to\n-   which can be either:\n-\n-\tvector(T) equalMask(vector(T) vec0, vector(T) vec1);\n-\tvector(T) notEqualMask(vector(T) vec0, vector(T) vec1);\n-\tvector(T) greaterMask(vector(T) vec0, vector(T) vec1);\n-\tvector(T) greaterOrEqualMask(vector(T) vec0, vector(T) vec1);\n-\n-   This performs an element-wise comparison between two vectors VEC0 and VEC1,\n-   returning a vector with signed integral elements.  */\n-\n-static tree\n-expand_intrinsic_vec_cond (tree_code code, tree callexp)\n-{\n-  tree vec0 = CALL_EXPR_ARG (callexp, 0);\n-  tree vec1 = CALL_EXPR_ARG (callexp, 1);\n-  tree type = TREE_TYPE (callexp);\n-\n-  tree cmp = fold_build2_loc (EXPR_LOCATION (callexp), code,\n-\t\t\t      truth_type_for (type), vec0, vec1);\n-  return fold_build3_loc (EXPR_LOCATION (callexp), VEC_COND_EXPR, type, cmp,\n-\t\t\t  build_minus_one_cst (type), build_zero_cst (type));\n-}\n-\n /* Expand a front-end instrinsic call to convertvector().  This takes one\n    argument, the signature to which is:\n \n@@ -1488,18 +1435,6 @@ maybe_expand_intrinsic (tree callexp)\n     case INTRINSIC_BLENDVECTOR:\n       return expand_intrinsic_vec_blend (callexp);\n \n-    case INTRINSIC_EQUALMASK:\n-      return expand_intrinsic_vec_cond (EQ_EXPR, callexp);\n-\n-    case INTRINSIC_NOTEQUALMASK:\n-      return expand_intrinsic_vec_cond (NE_EXPR, callexp);\n-\n-    case INTRINSIC_GREATERMASK:\n-      return expand_intrinsic_vec_cond (GT_EXPR, callexp);\n-\n-    case INTRINSIC_GREATEREQUALMASK:\n-      return expand_intrinsic_vec_cond (GE_EXPR, callexp);\n-\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "96f9b9346972a64abc33f21be707bc85b2ae610f", "filename": "gcc/d/intrinsics.def", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Fd%2Fintrinsics.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Fd%2Fintrinsics.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.def?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -266,14 +266,6 @@ DEF_D_BUILTIN (INTRINSIC_CONVERTVECTOR, BUILT_IN_NONE, \"convertvector\",\n \t       \"gcc.simd\", \"F@1TZ@1V\")\n DEF_D_BUILTIN (INTRINSIC_BLENDVECTOR, BUILT_IN_NONE, \"blendvector\", \"gcc.simd\",\n \t       \"F@2V0@2V1@1MZ@2V0\")\n-DEF_D_BUILTIN (INTRINSIC_EQUALMASK, BUILT_IN_NONE, \"equalMask\", \"gcc.simd\",\n-\t       \"F@1V@1VZ@1V\")\n-DEF_D_BUILTIN (INTRINSIC_NOTEQUALMASK, BUILT_IN_NONE, \"notEqualMask\",\n-\t       \"gcc.simd\", \"F@1V@1VZ@1V\")\n-DEF_D_BUILTIN (INTRINSIC_GREATERMASK, BUILT_IN_NONE, \"greaterMask\", \"gcc.simd\",\n-\t       \"F@1V@1VZ@1V\")\n-DEF_D_BUILTIN (INTRINSIC_GREATEREQUALMASK, BUILT_IN_NONE,\n-\t       \"greaterOrEqualMask\", \"gcc.simd\", \"F@1V@1VZ@1V\")\n \n #undef DEF_D_BUILTIN\n #undef DEF_CTFE_BUILTIN"}, {"sha": "7b83fffae584be4525681a9c96ac4431bb84ec1b", "filename": "gcc/testsuite/gdc.dg/Wbuiltin_declaration_mismatch2.d", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2FWbuiltin_declaration_mismatch2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2FWbuiltin_declaration_mismatch2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2FWbuiltin_declaration_mismatch2.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -191,41 +191,6 @@ void test_blendvector()\n     blendvector!(byte16, byte16, byte16)(0, 0, 0);\n }\n \n-void test_comparison()\n-{\n-    equalMask!int(0, 0); // { dg-warning \"mismatch in return type\" }\n-    equalMask!double(0, 0); // { dg-warning \"mismatch in return type\" }\n-    equalMask!int4(0, 0);\n-    equalMask!short8(0, 0);\n-    equalMask!float4(0, 0);\n-    equalMask!byte16(0, 0);\n-    equalMask!fake4(f, f); // { dg-warning \"mismatch in return type\" }\n-\n-    notEqualMask!int(0, 0); // { dg-warning \"mismatch in return type\" }\n-    notEqualMask!double(0, 0); // { dg-warning \"mismatch in return type\" }\n-    notEqualMask!int4(0, 0);\n-    notEqualMask!short8(0, 0);\n-    notEqualMask!float4(0, 0);\n-    notEqualMask!byte16(0, 0);\n-    notEqualMask!fake4(f, f); // { dg-warning \"mismatch in return type\" }\n-\n-    greaterMask!int(0, 0); // { dg-warning \"mismatch in return type\" }\n-    greaterMask!double(0, 0); // { dg-warning \"mismatch in return type\" }\n-    greaterMask!int4(0, 0);\n-    greaterMask!short8(0, 0);\n-    greaterMask!float4(0, 0);\n-    greaterMask!byte16(0, 0);\n-    greaterMask!fake4(f, f); // { dg-warning \"mismatch in return type\" }\n-\n-    greaterOrEqualMask!int(0, 0); // { dg-warning \"mismatch in return type\" }\n-    greaterOrEqualMask!double(0, 0); // { dg-warning \"mismatch in return type\" }\n-    greaterOrEqualMask!int4(0, 0);\n-    greaterOrEqualMask!short8(0, 0);\n-    greaterOrEqualMask!float4(0, 0);\n-    greaterOrEqualMask!byte16(0, 0);\n-    greaterOrEqualMask!fake4(f, f); // { dg-warning \"mismatch in return type\" }\n-}\n-\n // The following declarations of the simd intrinsics are without any guards\n // to verify `d/intrinsics.cc` is doing checks to prevent invalid lowerings.\n V loadUnaligned(V)(const V*);\n@@ -243,8 +208,3 @@ __vector(E!V1[M.length]) shufflevector(V1, V2, M...)(V1, V2, M) if (isV!V1 && is\n \n V convertvector(V, T)(T);\n V0 blendvector(V0, V1, M)(V0, V1, M);\n-\n-V equalMask(V)(V, V);\n-V notEqualMask(V)(V, V);\n-V greaterMask(V)(V, V);\n-V greaterOrEqualMask(V)(V, V);"}, {"sha": "d64f704683f7939a4b036420bcbf476031a8bb5b", "filename": "gcc/testsuite/gdc.dg/simd2a.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2a()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "71abd78b30122e5dbcda41c02385605c858cb74b", "filename": "gcc/testsuite/gdc.dg/simd2b.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2b()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "4806b48029fb2d39f27741d5466defbadfbaafc7", "filename": "gcc/testsuite/gdc.dg/simd2c.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2c()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "ce447e180e808d3582ecc504fde8d9437a252b49", "filename": "gcc/testsuite/gdc.dg/simd2d.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2d()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "464d1a51a5eb2cee430080e4c36b7ba96e557524", "filename": "gcc/testsuite/gdc.dg/simd2e.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2e()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "d7e67fc41121a91b3b0afcd030f75caa91f68f16", "filename": "gcc/testsuite/gdc.dg/simd2f.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2f()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "3d158691abb35acc39d307a0351eb62ecf7de4ee", "filename": "gcc/testsuite/gdc.dg/simd2g.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2g()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "849b6adc626735233cc6b6f4b402b6b6d79ac355", "filename": "gcc/testsuite/gdc.dg/simd2h.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2h()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "03130b7a6631d23b8fcdedb6e580f50c0e05e17c", "filename": "gcc/testsuite/gdc.dg/simd2i.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2i()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     static assert(!__traits(compiles, v1 << 1));\n     static assert(!__traits(compiles, v1 >> 1));\n     static assert(!__traits(compiles, v1 >>> 1));"}, {"sha": "f86a448f1387c0d9c3362c26f384fddac9b1ec79", "filename": "gcc/testsuite/gdc.dg/simd2j.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -18,12 +18,12 @@ void test2j()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n+    v1 = v1 == v2;\n+    v1 = v1 != v2;\n+    v1 = v1 < v2;\n+    v1 = v1 > v2;\n+    v1 = v1 <= v2;\n+    v1 = v1 >= v2;\n     static assert(!__traits(compiles, v1 << 1));\n     static assert(!__traits(compiles, v1 >> 1));\n     static assert(!__traits(compiles, v1 >>> 1));"}, {"sha": "ebd94bf93e29ba5134fe6cb7e50191ca9518b2e6", "filename": "libphobos/libdruntime/gcc/simd.d", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c28d6a3a018e9acb7af1422d6263661f69d5f94/libphobos%2Flibdruntime%2Fgcc%2Fsimd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c28d6a3a018e9acb7af1422d6263661f69d5f94/libphobos%2Flibdruntime%2Fgcc%2Fsimd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsimd.d?ref=3c28d6a3a018e9acb7af1422d6263661f69d5f94", "patch": "@@ -306,13 +306,25 @@ template blendvector(V0, V1, M)\n  * assert(c.array == [0, 0, -1, -1]);\n  * ---\n  */\n-V equalMask(V)(V op1, V op2) if (isVectorType!V);\n+V equalMask(V)(V op1, V op2) if (isVectorType!V)\n+{\n+    return op1 == op2;\n+}\n /// Ditto\n-V notEqualMask(V)(V op1, V op2) if (isVectorType!V);\n+V notEqualMask(V)(V op1, V op2) if (isVectorType!V)\n+{\n+    return op1 != op2;\n+}\n /// Ditto\n-V greaterMask(V)(V op1, V op2) if (isVectorType!V);\n+V greaterMask(V)(V op1, V op2) if (isVectorType!V)\n+{\n+    return op1 > op2;\n+}\n /// Ditto\n-V greaterOrEqualMask(V)(V op1, V op2) if (isVectorType!V);\n+V greaterOrEqualMask(V)(V op1, V op2) if (isVectorType!V)\n+{\n+    return op1 >= op2;\n+}\n \n /**\n  * Perform an element-wise logical comparison between two vectors, producing\n@@ -326,19 +338,19 @@ V greaterOrEqualMask(V)(V op1, V op2) if (isVectorType!V);\n  */\n V notMask(V)(V op1) if (isVectorType!V)\n {\n-    return equalMask(op1, 0);\n+    return op1 == 0;\n }\n \n /// Ditto\n V andAndMask(V)(V op1, V op2) if (isVectorType!V)\n {\n-    return notEqualMask(op1, 0) & notEqualMask(op2, 0);\n+    return (op1 != 0) & (op2 != 0);\n }\n \n /// Ditto\n V orOrMask(V)(V op1, V op2) if (isVectorType!V)\n {\n-    return notEqualMask(op1, 0) | notEqualMask(op2, 0);\n+    return (op1 != 0) | (op2 != 0);\n }\n \n // Private helper templates."}]}