{"sha": "cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "node_id": "C_kwDOANBUbNoAKGNkMjBkOTQ4MmExZjEwZGRmMWMzOThjMWExZDg0MjFmOTdkZmRlZmE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-31T14:00:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-01T19:31:00Z"}, "message": "libstdc++: Use built-ins for some variable templates\n\nThis avoids having to instantiate a class template that just uses the\nsame built-in anyway.\n\nNone of the corresponding class templates have any type-completeness\nstatic assertions, so we're not losing any diagnostics by using the\nbuilt-ins directly.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_enum_v, is_class_v, is_union_v)\n\t(is_empty_v, is_polymoprhic_v, is_abstract_v, is_final_v)\n\t(is_base_of_v, is_aggregate_v): Use built-in directly instead of\n\tinstantiating class template.", "tree": {"sha": "1a83467f811f25b52b5ced57d048d650dcab2e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a83467f811f25b52b5ced57d048d650dcab2e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4b219d39c74aec7ebf87ac3be38d8f93efd634"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "52cca8bf3af071cbfe49946428015b7c234e2c1c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "patch": "@@ -3165,11 +3165,11 @@ template <typename _Tp>\n   inline constexpr bool is_member_function_pointer_v =\n     is_member_function_pointer<_Tp>::value;\n template <typename _Tp>\n-  inline constexpr bool is_enum_v = is_enum<_Tp>::value;\n+  inline constexpr bool is_enum_v = __is_enum(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_union_v = is_union<_Tp>::value;\n+  inline constexpr bool is_union_v = __is_union(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_class_v = is_class<_Tp>::value;\n+  inline constexpr bool is_class_v = __is_class(_Tp);\n template <typename _Tp>\n   inline constexpr bool is_function_v = is_function<_Tp>::value;\n template <typename _Tp>\n@@ -3206,14 +3206,14 @@ template <typename _Tp>\n   _GLIBCXX17_DEPRECATED\n   inline constexpr bool is_literal_type_v = is_literal_type<_Tp>::value;\n #pragma GCC diagnostic pop\n- template <typename _Tp>\n-  inline constexpr bool is_empty_v = is_empty<_Tp>::value;\n template <typename _Tp>\n-  inline constexpr bool is_polymorphic_v = is_polymorphic<_Tp>::value;\n+  inline constexpr bool is_empty_v = __is_empty(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_abstract_v = is_abstract<_Tp>::value;\n+  inline constexpr bool is_polymorphic_v = __is_polymorphic(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_final_v = is_final<_Tp>::value;\n+  inline constexpr bool is_abstract_v = __is_abstract(_Tp);\n+template <typename _Tp>\n+  inline constexpr bool is_final_v = __is_final(_Tp);\n template <typename _Tp>\n   inline constexpr bool is_signed_v = is_signed<_Tp>::value;\n template <typename _Tp>\n@@ -3318,7 +3318,7 @@ template <typename _Tp, typename _Up>\n   inline constexpr bool is_same_v = std::is_same<_Tp, _Up>::value;\n #endif\n template <typename _Base, typename _Derived>\n-  inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n+  inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);\n template <typename _From, typename _To>\n   inline constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n template<typename _Fn, typename... _Args>\n@@ -3356,16 +3356,19 @@ template<typename _Ret, typename _Fn, typename... _Args>\n \n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE\n # define __cpp_lib_is_aggregate 201703L\n-  /// is_aggregate\n+  /// is_aggregate - true if the type is an aggregate.\n   /// @since C++17\n   template<typename _Tp>\n     struct is_aggregate\n     : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>\n     { };\n \n-  /// @ingroup variable_templates\n+  /** is_aggregate_v - true if the type is an aggregate.\n+   *  @ingroup variable_templates\n+   *  @since C++17\n+   */\n   template<typename _Tp>\n-    inline constexpr bool is_aggregate_v = is_aggregate<_Tp>::value;\n+    inline constexpr bool is_aggregate_v = __is_aggregate(remove_cv_t<_Tp>);\n #endif\n #endif // C++17\n "}]}