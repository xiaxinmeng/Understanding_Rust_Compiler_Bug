{"sha": "89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3ODllYzkxZDE0YmY1YWNhOGEwYTYwZGNiZjdlZTZlMGJlZDVjNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-26T08:43:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-26T08:43:27Z"}, "message": "re PR tree-optimization/92644 (ICE in wide_int_to_tree_1, at tree.c:1530)\n\n\tPR tree-optimization/92644\n\t* tree-ssa-phiopt.c (minmax_replacement): Add INTEGRAL_TYPE_P check\n\tnext to INTEGER_CST checks.\n\n\t* g++.dg/opt/pr92644.C: New test.\n\nFrom-SVN: r278720", "tree": {"sha": "acef6a0d29e49bb359cac97102d6e46a331cf467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acef6a0d29e49bb359cac97102d6e46a331cf467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "633836f410d397d6bd63cafe82a300870f6e54eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "patch": "@@ -1,3 +1,9 @@\n+2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92644\n+\t* tree-ssa-phiopt.c (minmax_replacement): Add INTEGRAL_TYPE_P check\n+\tnext to INTEGER_CST checks.\n+\n 2019-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92645"}, {"sha": "325572b5f7be461a82dfdbe65ca96c7e66f02ed0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "patch": "@@ -1,3 +1,8 @@\n+2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92644\n+\t* g++.dg/opt/pr92644.C: New test.\n+\n 2019-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92645"}, {"sha": "2f8a86f1fdbb024bb4da0357a8992c958b14d5ce", "filename": "gcc/testsuite/g++.dg/opt/pr92644.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr92644.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr92644.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr92644.C?ref=89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "patch": "@@ -0,0 +1,6 @@\n+// PR tree-optimization/92644\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-O2 -fno-early-inlining\" }\n+\n+inline auto foo () { return nullptr; }\n+int bar () { return foo () ? 1 : 0; }"}, {"sha": "1ae925dc570477fc842651c1a82f9358ede6f74b", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=89789ec91d14bf5aca8a0a60dcbf7ee6e0bed5c5", "patch": "@@ -1381,7 +1381,8 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   /* Turn EQ/NE of extreme values to order comparisons.  */\n   if ((cmp == NE_EXPR || cmp == EQ_EXPR)\n-      && TREE_CODE (rhs) == INTEGER_CST)\n+      && TREE_CODE (rhs) == INTEGER_CST\n+      && INTEGRAL_TYPE_P (TREE_TYPE (rhs)))\n     {\n       if (wi::eq_p (wi::to_wide (rhs), wi::min_value (TREE_TYPE (rhs))))\n \t{\n@@ -1407,7 +1408,8 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n       larger = rhs;\n       /* If we have smaller < CST it is equivalent to smaller <= CST-1.\n \t Likewise smaller <= CST is equivalent to smaller < CST+1.  */\n-      if (TREE_CODE (larger) == INTEGER_CST)\n+      if (TREE_CODE (larger) == INTEGER_CST\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (larger)))\n \t{\n \t  if (cmp == LT_EXPR)\n \t    {\n@@ -1435,7 +1437,8 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n       larger = gimple_cond_lhs (cond);\n       /* If we have larger > CST it is equivalent to larger >= CST+1.\n \t Likewise larger >= CST is equivalent to larger > CST-1.  */\n-      if (TREE_CODE (smaller) == INTEGER_CST)\n+      if (TREE_CODE (smaller) == INTEGER_CST\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (smaller)))\n \t{\n \t  wi::overflow_type overflow;\n \t  if (cmp == GT_EXPR)"}]}