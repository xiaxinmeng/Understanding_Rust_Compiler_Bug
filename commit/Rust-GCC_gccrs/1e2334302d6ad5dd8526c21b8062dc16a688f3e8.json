{"sha": "1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "node_id": "C_kwDOANBUbNoAKDFlMjMzNDMwMmQ2YWQ1ZGQ4NTI2YzIxYjgwNjJkYzE2YTY4OGYzZTg", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2022-05-09T08:42:24Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2022-05-09T08:43:08Z"}, "message": "Enable match.pd dumping with -fdump-tree-original\n\nI noticed that, while the C/C++ frontends invoke the GENERIC match.pd\nsimplifications to do early folding, the debug output from\ngeneric-match.cc does not appear in the -fdump-tree-original output,\neven with -fdump-tree-original-folding or -fdump-tree-original-all. This\npatch fixes that.\n\nFor example, before the patch, for the following code:\n\nint a[2];\nvoid bar ();\nvoid f()\n{\n    if ((unsigned long)(a + 1) == 0)\n        bar ();\n}\n\non AArch64 at -O0, -fdump-tree-original-all would give:\n\n;; Function f (null)\n;; enabled by -tree-original\n\n{\n  if (0)\n    {\n      bar ();\n    }\n}\n\nAfter the patch, we get:\n\nApplying pattern match.pd:3774, generic-match.cc:24535\nMatching expression match.pd:146, generic-match.cc:23\nApplying pattern match.pd:5638, generic-match.cc:13388\n\n;; Function f (null)\n;; enabled by -tree-original\n\n{\n  if (0)\n    {\n      bar ();\n    }\n}\n\nThe reason we don't get the match.pd output as it stands, is that the\noriginal dump is treated specially in c-opts.cc: it gets its own state\nwhich is independent from that used by other dump files in the compiler.\nLike most of the compiler, the generated generic-match.cc has code of\nthe form:\n\n  if (dump_file && (dump_flags & TDF_FOLDING))\n    fprintf (dump_file, ...);\n\nBut, as it stands, -fdump-tree-original has its own FILE * and flags in\nc-opts.cc (original_dump_{file,flags}) and never touches the global\ndump_{file,flags} (managed by dumpfile.{h,cc}). This patch adjusts the\ncode in c-opts.cc to use the main dump infrastructure used by the rest\nof the compiler, instead of treating the original dump specially.\n\nWe take the opportunity to make a small refactor: the code in\nc-gimplify.cc:c_genericize can, with this change, use the global dump\ninfrastructure to get the original dump file and flags instead of using\nthe bespoke get_dump_info function implemented in c-opts.cc. With this\nchange, we remove the only use of get_dump_info, so this can be removed.\n\nNote that we also fix a leak of the original dump file in\nc_common_parse_file. I originally thought it might be possible to\nachieve this with only one static call to dump_finish () (by simply\nmoving it earlier in the loop), but unfortunately the dump file is\nrequired to be open while c_parse_final_cleanups runs, as we (e.g.)\nperform some template instantiations here for C++, which need to appear\nin the original dump file.\n\nWe adjust cgraph_node::get_create to avoid introducing noise in the\noriginal dump file: without this, these \"Introduced new external node\"\nlines start appearing in the original dump files, which breaks tests\nthat do a scan-tree-dump-times on the original dump looking for a\ncertain function name.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (get_dump_info): Delete.\n\t* c-gimplify.cc (c_genericize): Get TDI_original dump file info\n\tfrom the global dump_manager instead of the (now obsolete)\n\tget_dump_info.\n\t* c-opts.cc (original_dump_file): Delete.\n\t(original_dump_flags): Delete.\n\t(c_common_parse_file): Switch to using global dump_manager to\n\tmanage the original dump file; fix leak of dump file.\n\t(get_dump_info): Delete.\n\ngcc/ChangeLog:\n\n\t* cgraph.cc (cgraph_node::get_create): Don't dump if the current\n\tsymtab state is PARSING.", "tree": {"sha": "abe63d19a41590e33a0fe8964d018e40d9e038d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abe63d19a41590e33a0fe8964d018e40d9e038d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d9c8802add09a93308319fc37dd3a0f1125393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d9c8802add09a93308319fc37dd3a0f1125393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d9c8802add09a93308319fc37dd3a0f1125393"}], "stats": {"total": 42, "additions": 13, "deletions": 29}, "files": [{"sha": "aa043defe9e63c4600f992030d7618d2e2912ccd", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "patch": "@@ -950,7 +950,6 @@ extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);\n extern void c_common_parse_file (void);\n-extern FILE *get_dump_info (int, dump_flags_t *);\n extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (const_tree);"}, {"sha": "a6f26c9b0d314f90d0ed25556149ac789d4975e1", "filename": "gcc/c-family/c-gimplify.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fc-family%2Fc-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fc-family%2Fc-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.cc?ref=1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"c-ubsan.h\"\n #include \"tree-nested.h\"\n+#include \"context.h\"\n \n /*  The gimplification pass converts the language-dependent trees\n     (ld-trees) emitted by the parser into language-independent trees\n@@ -552,6 +553,7 @@ c_genericize_control_r (tree *stmt_p, int *walk_subtrees, void *data)\n void\n c_genericize (tree fndecl)\n {\n+  dump_file_info *dfi;\n   FILE *dump_orig;\n   dump_flags_t local_dump_flags;\n   struct cgraph_node *cgn;\n@@ -581,7 +583,9 @@ c_genericize (tree fndecl)\n \t\t\t\t  do_warn_duplicated_branches_r, NULL);\n \n   /* Dump the C-specific tree IR.  */\n-  dump_orig = get_dump_info (TDI_original, &local_dump_flags);\n+  dfi = g->get_dumps ()->get_dump_file_info (TDI_original);\n+  dump_orig = dfi->pstream;\n+  local_dump_flags = dfi->pflags;\n   if (dump_orig)\n     {\n       fprintf (dump_orig, \"\\n;; Function %s\","}, {"sha": "09a16b20f36cef3235ef3da03094a8fa3c1cd61e", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"mkdeps.h\"\n #include \"dumpfile.h\"\n #include \"file-prefix-map.h\"    /* add_*_prefix_map()  */\n+#include \"context.h\"\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -100,10 +101,6 @@ static size_t deferred_count;\n /* Number of deferred options scanned for -include.  */\n static size_t include_cursor;\n \n-/* Dump files/flags to use during parsing.  */\n-static FILE *original_dump_file = NULL;\n-static dump_flags_t original_dump_flags;\n-\n /* Whether any standard preincluded header has been preincluded.  */\n static bool done_preinclude;\n \n@@ -1226,15 +1223,13 @@ c_common_init (void)\n void\n c_common_parse_file (void)\n {\n-  unsigned int i;\n-\n-  i = 0;\n-  for (;;)\n+  auto dumps = g->get_dumps ();\n+  for (unsigned int i = 0;;)\n     {\n       c_finish_options ();\n       /* Open the dump file to use for the original dump output\n          here, to be used during parsing for the current file.  */\n-      original_dump_file = dump_begin (TDI_original, &original_dump_flags);\n+      dumps->dump_start (TDI_original, &dump_flags);\n       pch_init ();\n       push_file_scope ();\n       c_parse_file ();\n@@ -1248,29 +1243,15 @@ c_common_parse_file (void)\n       cpp_clear_file_cache (parse_in);\n       this_input_filename\n \t= cpp_read_main_file (parse_in, in_fnames[i]);\n-      if (original_dump_file)\n-        {\n-          dump_end (TDI_original, original_dump_file);\n-          original_dump_file = NULL;\n-        }\n       /* If an input file is missing, abandon further compilation.\n \t cpplib has issued a diagnostic.  */\n       if (!this_input_filename)\n \tbreak;\n+      dumps->dump_finish (TDI_original);\n     }\n \n   c_parse_final_cleanups ();\n-}\n-\n-/* Returns the appropriate dump file for PHASE to dump with FLAGS.  */\n-\n-FILE *\n-get_dump_info (int phase, dump_flags_t *flags)\n-{\n-  gcc_assert (phase == TDI_original);\n-\n-  *flags = original_dump_flags;\n-  return original_dump_file;\n+  dumps->dump_finish (TDI_original);\n }\n \n /* Common finish hook for the C, ObjC and C++ front ends.  */"}, {"sha": "23749a2245e75d3d713ce6de03e46ba26c9d8bf4", "filename": "gcc/cgraph.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fcgraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2334302d6ad5dd8526c21b8062dc16a688f3e8/gcc%2Fcgraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.cc?ref=1e2334302d6ad5dd8526c21b8062dc16a688f3e8", "patch": "@@ -545,12 +545,12 @@ cgraph_node::get_create (tree decl)\n       node->order = first_clone->order;\n       symtab->symtab_prevail_in_asm_name_hash (node);\n       node->decl->decl_with_vis.symtab_node = node;\n-      if (dump_file)\n+      if (dump_file && symtab->state != PARSING)\n \tfprintf (dump_file, \"Introduced new external node \"\n \t\t \"(%s) and turned into root of the clone tree.\\n\",\n \t\t node->dump_name ());\n     }\n-  else if (dump_file)\n+  else if (dump_file && symtab->state != PARSING)\n     fprintf (dump_file, \"Introduced new external node \"\n \t     \"(%s).\\n\", node->dump_name ());\n   return node;"}]}